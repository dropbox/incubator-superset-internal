{"version":3,"sources":["../../src/polygon.js"],"names":["Polygon","points","options","isFlatArray","start","end","length","size","isClosed","Object","freeze","Math","abs","getSignedArea","sign","visitor","x1","y1","x2","y2","i1","i2","direction"],"mappings":";;;;;;;;;;;;;AAGA;;AAEA;;IASqBA,O;AACnB,mBAAYC,MAAZ,EAAkC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAAA;AAChC,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKE,WAAL,GAAmB,CAAC,mBAAQF,MAAM,CAAC,CAAD,CAAd,CAApB;AAEA,SAAKC,OAAL,GAAe;AACbE,MAAAA,KAAK,EAAEF,OAAO,CAACE,KAAR,IAAiB,CADX;AAEbC,MAAAA,GAAG,EAAEH,OAAO,CAACG,GAAR,IAAeJ,MAAM,CAACK,MAFd;AAGbC,MAAAA,IAAI,EAAEL,OAAO,CAACK,IAAR,IAAgB,CAHT;AAIbC,MAAAA,QAAQ,EAAEN,OAAO,CAACM;AAJL,KAAf;AAOAC,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd;AACD;;;;WAED,yBAAgB;AACd,UAAI,KAAKP,WAAT,EAAsB,OAAO,wCAAqB,KAAKF,MAA1B,EAAkC,KAAKC,OAAvC,CAAP;AAEtB,aAAO,8CAA2B,KAAKD,MAAhC,EAAwC,KAAKC,OAA7C,CAAP;AACD;;;WAED,mBAAU;AACR,aAAOS,IAAI,CAACC,GAAL,CAAS,KAAKC,aAAL,EAAT,CAAP;AACD;;;WAED,+BAAsB;AACpB,aAAOF,IAAI,CAACG,IAAL,CAAU,KAAKD,aAAL,EAAV,CAAP;AACD;;;WAED,wBAAeE,OAAf,EAAwB;AACtB,UAAI,KAAKZ,WAAT,EAAsB;AACpB,mDACE,KAAKF,MADP,EAGE,UAACe,EAAD,EAAKC,EAAL,EAASC,EAAT,EAAaC,EAAb,EAAiBC,EAAjB,EAAqBC,EAArB,EAA4B;AAE1BN,UAAAA,OAAO,CAAC,CAACC,EAAD,EAAKC,EAAL,CAAD,EAAW,CAACC,EAAD,EAAKC,EAAL,CAAX,EAAqBC,EAArB,EAAyBC,EAAzB,CAAP;AACD,SANH,EAOE,KAAKnB,OAPP;AASD,OAVD,MAUO;AACL,yDAA8B,KAAKD,MAAnC,EAA2Cc,OAA3C,EAAoD,KAAKb,OAAzD;AACD;AACF;;;WAED,gCAAuBoB,SAAvB,EAAkC;AAChC,UAAI,KAAKnB,WAAT,EAAsB;AACpB,eAAO,iDAA8B,KAAKF,MAAnC,EAA2CqB,SAA3C,EAAsD,KAAKpB,OAA3D,CAAP;AACD;;AACD,aAAO,uDAAoC,KAAKD,MAAzC,EAAiDqB,SAAjD,EAA4D,KAAKpB,OAAjE,CAAP;AACD","sourcesContent":["/* eslint-disable no-undef */\n/* eslint-disable no-console */\n\nimport {isArray} from '@math.gl/core';\n\nimport {\n  getPolygonSignedArea,\n  forEachSegmentInPolygon,\n  modifyPolygonWindingDirection,\n  getPolygonSignedAreaPoints,\n  forEachSegmentInPolygonPoints,\n  modifyPolygonWindingDirectionPoints\n} from './polygon-utils';\n\nexport default class Polygon {\n  constructor(points, options = {}) {\n    this.points = points;\n    this.isFlatArray = !isArray(points[0]);\n\n    this.options = {\n      start: options.start || 0,\n      end: options.end || points.length,\n      size: options.size || 2,\n      isClosed: options.isClosed\n    };\n\n    Object.freeze(this);\n  }\n\n  getSignedArea() {\n    if (this.isFlatArray) return getPolygonSignedArea(this.points, this.options);\n\n    return getPolygonSignedAreaPoints(this.points, this.options);\n  }\n\n  getArea() {\n    return Math.abs(this.getSignedArea());\n  }\n\n  getWindingDirection() {\n    return Math.sign(this.getSignedArea());\n  }\n\n  forEachSegment(visitor) {\n    if (this.isFlatArray) {\n      forEachSegmentInPolygon(\n        this.points,\n        // eslint-disable-next-line max-params\n        (x1, y1, x2, y2, i1, i2) => {\n          // TODO @igorDykhta original visitor uses arrays for each point, but with flat arrays performance degrades if we allocate points for each segment\n          visitor([x1, y1], [x2, y2], i1, i2);\n        },\n        this.options\n      );\n    } else {\n      forEachSegmentInPolygonPoints(this.points, visitor, this.options);\n    }\n  }\n\n  modifyWindingDirection(direction) {\n    if (this.isFlatArray) {\n      return modifyPolygonWindingDirection(this.points, direction, this.options);\n    }\n    return modifyPolygonWindingDirectionPoints(this.points, direction, this.options);\n  }\n}\n"],"file":"polygon.js"}