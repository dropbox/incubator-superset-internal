{"version":3,"sources":["../../../../src/lib/bounding-volumes/bounding-sphere.js"],"names":["scratchVector","Vector3","scratchVector2","BoundingSphere","center","radius","fromCenterRadius","from","corner","oppositeCorner","add","scale","distance","right","Boolean","equals","boundingSphere","leftCenter","leftRadius","rightCenter","rightRadius","toRightCenter","copy","subtract","centerSeparation","magnitude","clone","halfDistanceBetweenTangentPoints","point","transform","mat4","getScaling","Math","max","delta","lengthSquared","sqrt","distanceSquaredTo","plane","normal","distanceToPlane","dot","INTERSECTION","OUTSIDE","INTERSECTING","INSIDE"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {Vector3} from '@math.gl/core';\nimport * as mat4 from 'gl-matrix/mat4';\nimport {INTERSECTION} from '../../constants';\n\n// import Rectangle from './rectangle';\n\n// const defaultProjection = new GeographicProjection();\n// const fromRectangle2DLowerLeft = new Vector3();\n// const fromRectangle2DUpperRight = new Vector3();\n// const fromRectangle2DSouthwest = new Cartographic();\n// const fromRectangle2DNortheast = new Cartographic();\n\n// const fromRectangle3DScratch = [];\n\nconst scratchVector = new Vector3();\nconst scratchVector2 = new Vector3();\n\nexport default class BoundingSphere {\n  constructor(center = [0, 0, 0], radius = 0.0) {\n    this.radius = -0;\n    this.center = new Vector3();\n    this.fromCenterRadius(center, radius);\n  }\n\n  fromCenterRadius(center, radius) {\n    this.center.from(center);\n    this.radius = radius;\n    return this;\n  }\n\n  fromCornerPoints(corner, oppositeCorner) {\n    oppositeCorner = scratchVector.from(oppositeCorner);\n    this.center = new Vector3().from(corner).add(oppositeCorner).scale(0.5);\n    this.radius = this.center.distance(oppositeCorner);\n    return this;\n  }\n\n  equals(right) {\n    return (\n      this === right ||\n      (Boolean(right) && this.center.equals(right.center) && this.radius === right.radius)\n    );\n  }\n\n  clone() {\n    return new BoundingSphere(this.center, this.radius);\n  }\n\n  union(boundingSphere) {\n    const leftCenter = this.center;\n    const leftRadius = this.radius;\n    const rightCenter = boundingSphere.center;\n    const rightRadius = boundingSphere.radius;\n\n    const toRightCenter = scratchVector.copy(rightCenter).subtract(leftCenter);\n    const centerSeparation = toRightCenter.magnitude();\n\n    if (leftRadius >= centerSeparation + rightRadius) {\n      // Left sphere wins.\n      return this.clone();\n    }\n\n    if (rightRadius >= centerSeparation + leftRadius) {\n      // Right sphere wins.\n      return boundingSphere.clone();\n    }\n\n    // There are two tangent points, one on far side of each sphere.\n    const halfDistanceBetweenTangentPoints = (leftRadius + centerSeparation + rightRadius) * 0.5;\n\n    // Compute the center point halfway between the two tangent points.\n    scratchVector2\n      .copy(toRightCenter)\n      .scale((-leftRadius + halfDistanceBetweenTangentPoints) / centerSeparation)\n      .add(leftCenter);\n\n    this.center.copy(scratchVector2);\n    this.radius = halfDistanceBetweenTangentPoints;\n\n    return this;\n  }\n\n  expand(point) {\n    point = scratchVector.from(point);\n    const radius = point.subtract(this.center).magnitude();\n    if (radius > this.radius) {\n      this.radius = radius;\n    }\n    return this;\n  }\n\n  transform(transform) {\n    this.center.transform(transform);\n    const scale = mat4.getScaling(scratchVector, transform);\n    this.radius = Math.max(scale[0], Math.max(scale[1], scale[2])) * this.radius;\n    return this;\n  }\n\n  // Computes the estimated distance squared from the closest point on a bounding sphere to a point.\n  distanceSquaredTo(point) {\n    point = scratchVector.from(point);\n    const delta = point.subtract(this.center);\n    return delta.lengthSquared() - this.radius * this.radius;\n  }\n\n  distanceTo(point) {\n    return Math.sqrt(this.distanceSquaredTo(point));\n  }\n\n  // Determines which side of a plane a sphere is located.\n  intersectPlane(plane) {\n    const center = this.center;\n    const radius = this.radius;\n    const normal = plane.normal;\n    const distanceToPlane = normal.dot(center) + plane.distance;\n\n    // The center point is negative side of the plane normal\n    if (distanceToPlane < -radius) {\n      return INTERSECTION.OUTSIDE;\n    }\n    // The center point is positive side of the plane, but radius extends beyond it; partial overlap\n    if (distanceToPlane < radius) {\n      return INTERSECTION.INTERSECTING;\n    }\n    // The center point and radius is positive side of the plane\n    return INTERSECTION.INSIDE;\n  }\n}\n"],"file":"bounding-sphere.js"}