{"version":3,"sources":["../../../../src/lib/bounding-volumes/bounding-sphere.js"],"names":["Vector3","mat4","INTERSECTION","scratchVector","scratchVector2","BoundingSphere","constructor","center","radius","fromCenterRadius","from","fromCornerPoints","corner","oppositeCorner","add","scale","distance","equals","right","Boolean","clone","union","boundingSphere","leftCenter","leftRadius","rightCenter","rightRadius","toRightCenter","copy","subtract","centerSeparation","magnitude","halfDistanceBetweenTangentPoints","expand","point","transform","getScaling","Math","max","distanceSquaredTo","delta","lengthSquared","distanceTo","sqrt","intersectPlane","plane","normal","distanceToPlane","dot","OUTSIDE","INTERSECTING","INSIDE"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {Vector3} from '@math.gl/core';\nimport * as mat4 from 'gl-matrix/mat4';\nimport {INTERSECTION} from '../../constants';\n\n// import Rectangle from './rectangle';\n\n// const defaultProjection = new GeographicProjection();\n// const fromRectangle2DLowerLeft = new Vector3();\n// const fromRectangle2DUpperRight = new Vector3();\n// const fromRectangle2DSouthwest = new Cartographic();\n// const fromRectangle2DNortheast = new Cartographic();\n\n// const fromRectangle3DScratch = [];\n\nconst scratchVector = new Vector3();\nconst scratchVector2 = new Vector3();\n\nexport default class BoundingSphere {\n  constructor(center = [0, 0, 0], radius = 0.0) {\n    this.radius = -0;\n    this.center = new Vector3();\n    this.fromCenterRadius(center, radius);\n  }\n\n  fromCenterRadius(center, radius) {\n    this.center.from(center);\n    this.radius = radius;\n    return this;\n  }\n\n  fromCornerPoints(corner, oppositeCorner) {\n    oppositeCorner = scratchVector.from(oppositeCorner);\n    this.center = new Vector3().from(corner).add(oppositeCorner).scale(0.5);\n    this.radius = this.center.distance(oppositeCorner);\n    return this;\n  }\n\n  equals(right) {\n    return (\n      this === right ||\n      (Boolean(right) && this.center.equals(right.center) && this.radius === right.radius)\n    );\n  }\n\n  clone() {\n    return new BoundingSphere(this.center, this.radius);\n  }\n\n  union(boundingSphere) {\n    const leftCenter = this.center;\n    const leftRadius = this.radius;\n    const rightCenter = boundingSphere.center;\n    const rightRadius = boundingSphere.radius;\n\n    const toRightCenter = scratchVector.copy(rightCenter).subtract(leftCenter);\n    const centerSeparation = toRightCenter.magnitude();\n\n    if (leftRadius >= centerSeparation + rightRadius) {\n      // Left sphere wins.\n      return this.clone();\n    }\n\n    if (rightRadius >= centerSeparation + leftRadius) {\n      // Right sphere wins.\n      return boundingSphere.clone();\n    }\n\n    // There are two tangent points, one on far side of each sphere.\n    const halfDistanceBetweenTangentPoints = (leftRadius + centerSeparation + rightRadius) * 0.5;\n\n    // Compute the center point halfway between the two tangent points.\n    scratchVector2\n      .copy(toRightCenter)\n      .scale((-leftRadius + halfDistanceBetweenTangentPoints) / centerSeparation)\n      .add(leftCenter);\n\n    this.center.copy(scratchVector2);\n    this.radius = halfDistanceBetweenTangentPoints;\n\n    return this;\n  }\n\n  expand(point) {\n    point = scratchVector.from(point);\n    const radius = point.subtract(this.center).magnitude();\n    if (radius > this.radius) {\n      this.radius = radius;\n    }\n    return this;\n  }\n\n  transform(transform) {\n    this.center.transform(transform);\n    const scale = mat4.getScaling(scratchVector, transform);\n    this.radius = Math.max(scale[0], Math.max(scale[1], scale[2])) * this.radius;\n    return this;\n  }\n\n  // Computes the estimated distance squared from the closest point on a bounding sphere to a point.\n  distanceSquaredTo(point) {\n    point = scratchVector.from(point);\n    const delta = point.subtract(this.center);\n    return delta.lengthSquared() - this.radius * this.radius;\n  }\n\n  distanceTo(point) {\n    return Math.sqrt(this.distanceSquaredTo(point));\n  }\n\n  // Determines which side of a plane a sphere is located.\n  intersectPlane(plane) {\n    const center = this.center;\n    const radius = this.radius;\n    const normal = plane.normal;\n    const distanceToPlane = normal.dot(center) + plane.distance;\n\n    // The center point is negative side of the plane normal\n    if (distanceToPlane < -radius) {\n      return INTERSECTION.OUTSIDE;\n    }\n    // The center point is positive side of the plane, but radius extends beyond it; partial overlap\n    if (distanceToPlane < radius) {\n      return INTERSECTION.INTERSECTING;\n    }\n    // The center point and radius is positive side of the plane\n    return INTERSECTION.INSIDE;\n  }\n}\n"],"file":"bounding-sphere.js"}