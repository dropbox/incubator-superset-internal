{"version":3,"sources":["../../../../src/lib/bounding-volumes/oriented-bounding-box.js"],"names":["Vector3","Matrix3","Quaternion","BoundingSphere","INTERSECTION","scratchVector3","scratchOffset","scratchVectorU","scratchVectorV","scratchVectorW","scratchCorner","scratchToCenter","MATRIX3","COLUMN0ROW0","COLUMN0ROW1","COLUMN0ROW2","COLUMN1ROW0","COLUMN1ROW1","COLUMN1ROW2","COLUMN2ROW0","COLUMN2ROW1","COLUMN2ROW2","OrientedBoundingBox","constructor","center","halfAxes","from","halfSize","xAxis","getColumn","yAxis","zAxis","len","quaternion","normXAxis","normalize","normYAxis","normZAxis","fromMatrix3","fromCenterHalfSizeQuaternion","quaternionObject","directionsMatrix","fromQuaternion","clone","equals","right","Boolean","getBoundingSphere","result","u","v","w","cornerVector","copy","add","radius","magnitude","intersectPlane","plane","normal","normalX","x","normalY","y","normalZ","z","radEffective","Math","abs","distanceToPlane","dot","distance","OUTSIDE","INSIDE","INTERSECTING","distanceTo","point","sqrt","distanceSquaredTo","offset","subtract","uHalf","vHalf","wHalf","distanceSquared","d","computePlaneDistances","position","direction","minDist","Number","POSITIVE_INFINITY","maxDist","NEGATIVE_INFINITY","corner","toCenter","mag","min","max","transform","transformation","transformAsPoint","getTransform","Error"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {Vector3, Matrix3, Quaternion} from '@math.gl/core';\nimport BoundingSphere from './bounding-sphere';\nimport {INTERSECTION} from '../../constants';\n\nconst scratchVector3 = new Vector3();\nconst scratchOffset = new Vector3();\nconst scratchVectorU = new Vector3();\nconst scratchVectorV = new Vector3();\nconst scratchVectorW = new Vector3();\nconst scratchCorner = new Vector3();\nconst scratchToCenter = new Vector3();\n\nconst MATRIX3 = {\n  COLUMN0ROW0: 0,\n  COLUMN0ROW1: 1,\n  COLUMN0ROW2: 2,\n  COLUMN1ROW0: 3,\n  COLUMN1ROW1: 4,\n  COLUMN1ROW2: 5,\n  COLUMN2ROW0: 6,\n  COLUMN2ROW1: 7,\n  COLUMN2ROW2: 8\n};\n\nexport default class OrientedBoundingBox {\n  constructor(center = [0, 0, 0], halfAxes = [0, 0, 0, 0, 0, 0, 0, 0, 0]) {\n    this.center = new Vector3().from(center);\n    this.halfAxes = new Matrix3(halfAxes);\n  }\n\n  get halfSize() {\n    const xAxis = this.halfAxes.getColumn(0);\n    const yAxis = this.halfAxes.getColumn(1);\n    const zAxis = this.halfAxes.getColumn(2);\n    return [new Vector3(xAxis).len(), new Vector3(yAxis).len(), new Vector3(zAxis).len()];\n  }\n\n  get quaternion() {\n    const xAxis = this.halfAxes.getColumn(0);\n    const yAxis = this.halfAxes.getColumn(1);\n    const zAxis = this.halfAxes.getColumn(2);\n    const normXAxis = new Vector3(xAxis).normalize();\n    const normYAxis = new Vector3(yAxis).normalize();\n    const normZAxis = new Vector3(zAxis).normalize();\n    return new Quaternion().fromMatrix3(new Matrix3([...normXAxis, ...normYAxis, ...normZAxis]));\n  }\n\n  fromCenterHalfSizeQuaternion(center, halfSize, quaternion) {\n    const quaternionObject = new Quaternion(quaternion);\n    const directionsMatrix = new Matrix3().fromQuaternion(quaternionObject);\n    directionsMatrix[0] = directionsMatrix[0] * halfSize[0];\n    directionsMatrix[1] = directionsMatrix[1] * halfSize[0];\n    directionsMatrix[2] = directionsMatrix[2] * halfSize[0];\n    directionsMatrix[3] = directionsMatrix[3] * halfSize[1];\n    directionsMatrix[4] = directionsMatrix[4] * halfSize[1];\n    directionsMatrix[5] = directionsMatrix[5] * halfSize[1];\n    directionsMatrix[6] = directionsMatrix[6] * halfSize[2];\n    directionsMatrix[7] = directionsMatrix[7] * halfSize[2];\n    directionsMatrix[8] = directionsMatrix[8] * halfSize[2];\n    this.center = new Vector3().from(center);\n    this.halfAxes = directionsMatrix;\n    return this;\n  }\n\n  clone() {\n    return new OrientedBoundingBox(this.center, this.halfAxes);\n  }\n\n  equals(right) {\n    return (\n      this === right ||\n      (Boolean(right) && this.center.equals(right.center) && this.halfAxes.equals(right.halfAxes))\n    );\n  }\n\n  getBoundingSphere(result = new BoundingSphere()) {\n    const halfAxes = this.halfAxes;\n    const u = halfAxes.getColumn(0, scratchVectorU);\n    const v = halfAxes.getColumn(1, scratchVectorV);\n    const w = halfAxes.getColumn(2, scratchVectorW);\n\n    // Calculate \"corner\" vector\n    const cornerVector = scratchVector3.copy(u).add(v).add(w);\n\n    result.center.copy(this.center);\n    result.radius = cornerVector.magnitude();\n\n    return result;\n  }\n\n  intersectPlane(plane) {\n    const center = this.center;\n    const normal = plane.normal;\n    const halfAxes = this.halfAxes;\n\n    const normalX = normal.x;\n    const normalY = normal.y;\n    const normalZ = normal.z;\n\n    // Plane is used as if it is its normal; the first three components are assumed to be normalized\n    const radEffective =\n      Math.abs(\n        normalX * halfAxes[MATRIX3.COLUMN0ROW0] +\n          normalY * halfAxes[MATRIX3.COLUMN0ROW1] +\n          normalZ * halfAxes[MATRIX3.COLUMN0ROW2]\n      ) +\n      Math.abs(\n        normalX * halfAxes[MATRIX3.COLUMN1ROW0] +\n          normalY * halfAxes[MATRIX3.COLUMN1ROW1] +\n          normalZ * halfAxes[MATRIX3.COLUMN1ROW2]\n      ) +\n      Math.abs(\n        normalX * halfAxes[MATRIX3.COLUMN2ROW0] +\n          normalY * halfAxes[MATRIX3.COLUMN2ROW1] +\n          normalZ * halfAxes[MATRIX3.COLUMN2ROW2]\n      );\n    const distanceToPlane = normal.dot(center) + plane.distance;\n\n    if (distanceToPlane <= -radEffective) {\n      // The entire box is on the negative side of the plane normal\n      return INTERSECTION.OUTSIDE;\n    } else if (distanceToPlane >= radEffective) {\n      // The entire box is on the positive side of the plane normal\n      return INTERSECTION.INSIDE;\n    }\n    return INTERSECTION.INTERSECTING;\n  }\n\n  distanceTo(point) {\n    return Math.sqrt(this.distanceSquaredTo(point));\n  }\n\n  distanceSquaredTo(point) {\n    // Computes the estimated distance squared from the\n    // closest point on a bounding box to a point.\n    // See Geometric Tools for Computer Graphics 10.4.2\n    const offset = scratchOffset.from(point).subtract(this.center);\n\n    const halfAxes = this.halfAxes;\n    const u = halfAxes.getColumn(0, scratchVectorU);\n    const v = halfAxes.getColumn(1, scratchVectorV);\n    const w = halfAxes.getColumn(2, scratchVectorW);\n\n    const uHalf = u.magnitude();\n    const vHalf = v.magnitude();\n    const wHalf = w.magnitude();\n\n    u.normalize();\n    v.normalize();\n    w.normalize();\n\n    let distanceSquared = 0.0;\n    let d;\n\n    d = Math.abs(offset.dot(u)) - uHalf;\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n\n    d = Math.abs(offset.dot(v)) - vHalf;\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n\n    d = Math.abs(offset.dot(w)) - wHalf;\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n\n    return distanceSquared;\n  }\n\n  // eslint-disable-next-line max-statements\n  computePlaneDistances(position, direction, result = [-0, -0]) {\n    let minDist = Number.POSITIVE_INFINITY;\n    let maxDist = Number.NEGATIVE_INFINITY;\n\n    const center = this.center;\n    const halfAxes = this.halfAxes;\n\n    const u = halfAxes.getColumn(0, scratchVectorU);\n    const v = halfAxes.getColumn(1, scratchVectorV);\n    const w = halfAxes.getColumn(2, scratchVectorW);\n\n    // project first corner\n    const corner = scratchCorner.copy(u).add(v).add(w).add(center);\n\n    const toCenter = scratchToCenter.copy(corner).subtract(position);\n    let mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project second corner\n    corner.copy(center).add(u).add(v).subtract(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project third corner\n    corner.copy(center).add(u).subtract(v).add(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project fourth corner\n    corner.copy(center).add(u).subtract(v).subtract(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project fifth corner\n    center.copy(corner).subtract(u).add(v).add(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project sixth corner\n    center.copy(corner).subtract(u).add(v).subtract(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project seventh corner\n    center.copy(corner).subtract(u).subtract(v).add(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project eighth corner\n    center.copy(corner).subtract(u).subtract(v).subtract(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    result[0] = minDist;\n    result[1] = maxDist;\n    return result;\n  }\n\n  transform(transformation) {\n    this.center.transformAsPoint(transformation);\n\n    const xAxis = this.halfAxes.getColumn(0, scratchVectorU);\n    xAxis.transformAsPoint(transformation);\n\n    const yAxis = this.halfAxes.getColumn(1, scratchVectorV);\n    yAxis.transformAsPoint(transformation);\n\n    const zAxis = this.halfAxes.getColumn(2, scratchVectorW);\n    zAxis.transformAsPoint(transformation);\n\n    this.halfAxes = new Matrix3([...xAxis, ...yAxis, ...zAxis]);\n    return this;\n  }\n\n  getTransform() {\n    // const modelMatrix = Matrix4.fromRotationTranslation(this.boundingVolume.halfAxes, this.boundingVolume.center);\n    // return modelMatrix;\n    throw new Error('not implemented');\n  }\n}\n"],"file":"oriented-bounding-box.js"}