{"version":3,"sources":["../../../src/ellipsoid/ellipsoid.js"],"names":["scratchVector","Vector3","scratchNormal","scratchK","scratchPosition","scratchHeight","scratchCartesian","wgs84","Ellipsoid","x","y","z","radii","radiiSquared","radiiToTheFourth","oneOverRadii","oneOverRadiiSquared","minimumRadius","Math","min","maximumRadius","max","centerToleranceSquared","_MathUtils","EPSILON1","squaredXOverSquaredZ","Object","freeze","right","Boolean","equals","toString","cartographic","result","normal","k","height","geodeticSurfaceNormalCartographic","copy","scale","gamma","sqrt","dot","add","to","cartesian","from","point","scaleToGeodeticSurface","undefined","geodeticSurfaceNormal","h","subtract","longitude","atan2","latitude","asin","sign","vec3","length","origin","Matrix4","firstAxis","secondAxis","thirdAxis","normalize","cartographicVectorRadians","cosLatitude","cos","set","sin","positionX","positionY","positionZ","beta","multiplyScalar","position","buffer","EPSILON15","abs","WGS84_RADIUS_X","WGS84_RADIUS_Y","WGS84_RADIUS_Z"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n/* eslint-disable */\nimport {Vector3, Matrix4, toRadians, toDegrees, assert, equals, _MathUtils} from '@math.gl/core';\nimport * as vec3 from 'gl-matrix/vec3';\n\nimport {WGS84_RADIUS_X, WGS84_RADIUS_Y, WGS84_RADIUS_Z} from '../constants';\nimport {fromCartographicToRadians, toCartographicFromRadians} from '../type-utils';\n\nimport scaleToGeodeticSurface from './helpers/scale-to-geodetic-surface';\nimport localFrameToFixedFrame from './helpers/ellipsoid-transform';\n\nconst scratchVector = new Vector3();\nconst scratchNormal = new Vector3();\nconst scratchK = new Vector3();\nconst scratchPosition = new Vector3();\nconst scratchHeight = new Vector3();\nconst scratchCartesian = new Vector3();\n\nlet wgs84;\n\n// A quadratic surface defined in Cartesian coordinates by the equation\n// <code>(x / a)^2 + (y / b)^2 + (z / c)^2 = 1</code>.  Primarily used\n// to represent the shape of planetary bodies.\nexport default class Ellipsoid {\n  // An Ellipsoid instance initialized to the WGS84 standard.\n  static get WGS84() {\n    wgs84 = wgs84 || new Ellipsoid(WGS84_RADIUS_X, WGS84_RADIUS_Y, WGS84_RADIUS_Z);\n    return wgs84;\n  }\n\n  // Creates an Ellipsoid from a Cartesian specifying the radii in x, y, and z directions.\n  constructor(x = 0.0, y = 0.0, z = 0.0) {\n    assert(x >= 0.0);\n    assert(y >= 0.0);\n    assert(z >= 0.0);\n\n    this.radii = new Vector3(x, y, z);\n\n    this.radiiSquared = new Vector3(x * x, y * y, z * z);\n\n    this.radiiToTheFourth = new Vector3(x * x * x * x, y * y * y * y, z * z * z * z);\n\n    this.oneOverRadii = new Vector3(\n      x === 0.0 ? 0.0 : 1.0 / x,\n      y === 0.0 ? 0.0 : 1.0 / y,\n      z === 0.0 ? 0.0 : 1.0 / z\n    );\n\n    this.oneOverRadiiSquared = new Vector3(\n      x === 0.0 ? 0.0 : 1.0 / (x * x),\n      y === 0.0 ? 0.0 : 1.0 / (y * y),\n      z === 0.0 ? 0.0 : 1.0 / (z * z)\n    );\n\n    this.minimumRadius = Math.min(x, y, z);\n\n    this.maximumRadius = Math.max(x, y, z);\n\n    this.centerToleranceSquared = _MathUtils.EPSILON1;\n\n    if (this.radiiSquared.z !== 0) {\n      this.squaredXOverSquaredZ = this.radiiSquared.x / this.radiiSquared.z;\n    }\n\n    Object.freeze(this);\n  }\n\n  // Compares this Ellipsoid against the provided Ellipsoid componentwise and returns\n  equals(right) {\n    return this === right || Boolean(right && this.radii.equals(right.radii));\n  }\n\n  // Creates a string representing this Ellipsoid in the format '(radii.x, radii.y, radii.z)'.\n  toString() {\n    return this.radii.toString();\n  }\n\n  // Converts the provided cartographic to Cartesian representation.\n  cartographicToCartesian(cartographic, result = [0, 0, 0]) {\n    const normal = scratchNormal;\n    const k = scratchK;\n\n    const [, , height] = cartographic;\n    this.geodeticSurfaceNormalCartographic(cartographic, normal);\n    k.copy(this.radiiSquared).scale(normal);\n\n    const gamma = Math.sqrt(normal.dot(k));\n    k.scale(1 / gamma);\n\n    normal.scale(height);\n\n    k.add(normal);\n\n    return k.to(result);\n  }\n\n  // Converts the provided cartesian to cartographic (lng/lat/z) representation.\n  // The cartesian is undefined at the center of the ellipsoid.\n  cartesianToCartographic(cartesian, result = [0, 0, 0]) {\n    scratchCartesian.from(cartesian);\n    const point = this.scaleToGeodeticSurface(scratchCartesian, scratchPosition);\n\n    if (!point) {\n      return undefined;\n    }\n\n    const normal = this.geodeticSurfaceNormal(point, scratchNormal);\n\n    const h = scratchHeight;\n    h.copy(scratchCartesian).subtract(point);\n\n    const longitude = Math.atan2(normal.y, normal.x);\n    const latitude = Math.asin(normal.z);\n    const height = Math.sign(vec3.dot(h, scratchCartesian)) * vec3.length(h);\n\n    return toCartographicFromRadians([longitude, latitude, height], result);\n  }\n\n  // Computes a 4x4 transformation matrix from a reference frame with an east-north-up axes\n  // centered at the provided origin to the provided ellipsoid's fixed reference frame.\n  eastNorthUpToFixedFrame(origin, result = new Matrix4()) {\n    return localFrameToFixedFrame(this, 'east', 'north', 'up', origin, result);\n  }\n\n  // Computes a 4x4 transformation matrix from a reference frame centered at\n  // the provided origin to the ellipsoid's fixed reference frame.\n  localFrameToFixedFrame(firstAxis, secondAxis, thirdAxis, origin, result = new Matrix4()) {\n    return localFrameToFixedFrame(this, firstAxis, secondAxis, thirdAxis, origin, result);\n  }\n\n  // Computes the unit vector directed from the center of this ellipsoid toward\n  // the provided Cartesian position.\n  geocentricSurfaceNormal(cartesian, result = [0, 0, 0]) {\n    return scratchVector.from(cartesian).normalize().to(result);\n  }\n\n  // Computes the normal of the plane tangent to the surface of the ellipsoid at provided position.\n  geodeticSurfaceNormalCartographic(cartographic, result = [0, 0, 0]) {\n    const cartographicVectorRadians = fromCartographicToRadians(cartographic);\n\n    const longitude = cartographicVectorRadians[0];\n    const latitude = cartographicVectorRadians[1];\n\n    const cosLatitude = Math.cos(latitude);\n\n    scratchVector\n      .set(cosLatitude * Math.cos(longitude), cosLatitude * Math.sin(longitude), Math.sin(latitude))\n      .normalize();\n\n    return scratchVector.to(result);\n  }\n\n  // Computes the normal of the plane tangent to the surface of the ellipsoid at the provided position.\n  geodeticSurfaceNormal(cartesian, result = [0, 0, 0]) {\n    return scratchVector.from(cartesian).scale(this.oneOverRadiiSquared).normalize().to(result);\n  }\n\n  // Scales the provided Cartesian position along the geodetic surface normal\n  // so that it is on the surface of this ellipsoid.  If the position is\n  // at the center of the ellipsoid, this function returns undefined.\n  scaleToGeodeticSurface(cartesian, result) {\n    return scaleToGeodeticSurface(cartesian, this, result);\n  }\n\n  // Scales the provided Cartesian position along the geocentric surface normal\n  // so that it is on the surface of this ellipsoid.\n  scaleToGeocentricSurface(cartesian, result = [0, 0, 0]) {\n    scratchPosition.from(cartesian);\n\n    const positionX = scratchPosition.x;\n    const positionY = scratchPosition.y;\n    const positionZ = scratchPosition.z;\n    const oneOverRadiiSquared = this.oneOverRadiiSquared;\n\n    const beta =\n      1.0 /\n      Math.sqrt(\n        positionX * positionX * oneOverRadiiSquared.x +\n          positionY * positionY * oneOverRadiiSquared.y +\n          positionZ * positionZ * oneOverRadiiSquared.z\n      );\n\n    return scratchPosition.multiplyScalar(beta).to(result);\n  }\n\n  // Transforms a Cartesian X, Y, Z position to the ellipsoid-scaled space by multiplying\n  // its components by the result of `Ellipsoid#oneOverRadii`\n  transformPositionToScaledSpace(position, result = [0, 0, 0]) {\n    return scratchPosition.from(position).scale(this.oneOverRadii).to(result);\n  }\n\n  // Transforms a Cartesian X, Y, Z position from the ellipsoid-scaled space by multiplying\n  // its components by the result of `Ellipsoid#radii`.\n  transformPositionFromScaledSpace(position, result = [0, 0, 0]) {\n    return scratchPosition.from(position).scale(this.radii).to(result);\n  }\n\n  // Computes a point which is the intersection of the surface normal with the z-axis.\n  getSurfaceNormalIntersectionWithZAxis(position, buffer = 0.0, result = [0, 0, 0]) {\n    // Ellipsoid must be an ellipsoid of revolution (radii.x == radii.y)\n    assert(equals(this.radii.x, this.radii.y, _MathUtils.EPSILON15));\n    assert(this.radii.z > 0);\n\n    scratchPosition.from(position);\n    const z = scratchPosition.z * (1 - this.squaredXOverSquaredZ);\n\n    if (Math.abs(z) >= this.radii.z - buffer) {\n      return undefined;\n    }\n\n    return scratchPosition.set(0.0, 0.0, z).to(result);\n  }\n}\n"],"file":"ellipsoid.js"}