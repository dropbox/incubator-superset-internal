{"version":3,"sources":["../../src/web-mercator-utils.js"],"names":["PI","Math","PI_4","DEGREES_TO_RADIANS","RADIANS_TO_DEGREES","TILE_SIZE","EARTH_CIRCUMFERENCE","DEFAULT_ALTITUDE","zoomToScale","zoom","pow","scaleToZoom","scale","lngLatToWorld","lng","lat","Number","isFinite","lambda2","phi2","x","y","log","tan","worldToLngLat","atan","exp","getMeterZoom","latitude","latCosine","cos","getDistanceScales","longitude","highPrecision","result","worldSize","unitsPerDegreeX","unitsPerDegreeY","altUnitsPerMeter","unitsPerMeter","metersPerUnit","unitsPerDegree","degreesPerUnit","latCosine2","unitsPerDegreeY2","altUnitsPerDegree2","altUnitsPerMeter2","unitsPerDegree2","unitsPerMeter2","addMetersToLngLat","lngLatZ","xyz","z0","z","worldspace","newLngLat","newZ","getViewMatrix","height","pitch","bearing","altitude","center","vm","mat4","translate","rotateX","rotateZ","vec3","negate","getProjectionParameters","width","fovy","altitudeToFovy","nearZMultiplier","farZMultiplier","undefined","halfFov","focalDistance","fovyToAltitude","pitchRadians","topHalfSurfaceDistance","sin","min","max","farZ","fov","aspect","near","far","getProjectionMatrix","projectionMatrix","perspective","worldToPixels","pixelProjectionMatrix","pixelsToWorld","pixelUnprojectionMatrix","targetZ","coord","coord0","coord1","z1","t","vec2","lerp"],"mappings":"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","sourcesContent":["// TODO - THE UTILITIES IN THIS FILE SHOULD BE IMPORTED FROM WEB-MERCATOR-VIEWPORT MODULE\n\nimport {createMat4, transformVector, log2} from './math-utils';\n\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\nimport assert from './assert';\n\n// CONSTANTS\nconst PI = Math.PI;\nconst PI_4 = PI / 4;\nconst DEGREES_TO_RADIANS = PI / 180;\nconst RADIANS_TO_DEGREES = 180 / PI;\nconst TILE_SIZE = 512;\n// Average circumference (40075 km equatorial, 40007 km meridional)\nconst EARTH_CIRCUMFERENCE = 40.03e6;\n\n// Mapbox default altitude\nexport const DEFAULT_ALTITUDE = 1.5;\n\n/** Util functions **/\nexport function zoomToScale(zoom) {\n  return Math.pow(2, zoom);\n}\n\nexport function scaleToZoom(scale) {\n  return log2(scale);\n}\n\n/**\n * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n * Performs the nonlinear part of the web mercator projection.\n * Remaining projection is done with 4x4 matrices which also handles\n * perspective.\n *\n * @param lngLat - [lng, lat] coordinates\n *   Specifies a point on the sphere to project onto the map.\n * @return [x,y] coordinates.\n */\nexport function lngLatToWorld([lng, lat]) {\n  assert(Number.isFinite(lng));\n  assert(Number.isFinite(lat) && lat >= -90 && lat <= 90, 'invalid latitude');\n\n  const lambda2 = lng * DEGREES_TO_RADIANS;\n  const phi2 = lat * DEGREES_TO_RADIANS;\n  const x = (TILE_SIZE * (lambda2 + PI)) / (2 * PI);\n  const y = (TILE_SIZE * (PI + Math.log(Math.tan(PI_4 + phi2 * 0.5)))) / (2 * PI);\n  return [x, y];\n}\n\n// Unproject world point [x,y] on map onto {lat, lon} on sphere\nexport function worldToLngLat([x, y]) {\n  const lambda2 = (x / TILE_SIZE) * (2 * PI) - PI;\n  const phi2 = 2 * (Math.atan(Math.exp((y / TILE_SIZE) * (2 * PI) - PI)) - PI_4);\n  return [lambda2 * RADIANS_TO_DEGREES, phi2 * RADIANS_TO_DEGREES];\n}\n\n// Returns the zoom level that gives a 1 meter pixel at a certain latitude\n// 1 = C*cos(y)/2^z/TILE_SIZE = C*cos(y)/2^(z+9)\nexport function getMeterZoom({latitude}) {\n  assert(Number.isFinite(latitude));\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  return scaleToZoom(EARTH_CIRCUMFERENCE * latCosine) - 9;\n}\n\n/**\n * Calculate distance scales in meters around current lat/lon, both for\n * degrees and pixels.\n * In mercator projection mode, the distance scales vary significantly\n * with latitude.\n */\n\nexport function getDistanceScales({latitude, longitude, highPrecision = false}) {\n  assert(Number.isFinite(latitude) && Number.isFinite(longitude));\n\n  const result = {};\n  const worldSize = TILE_SIZE;\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n\n  /**\n   * Number of pixels occupied by one degree longitude around current lat/lon:\n     unitsPerDegreeX = d(lngLatToWorld([lng, lat])[0])/d(lng)\n       = scale * TILE_SIZE * DEGREES_TO_RADIANS / (2 * PI)\n     unitsPerDegreeY = d(lngLatToWorld([lng, lat])[1])/d(lat)\n       = -scale * TILE_SIZE * DEGREES_TO_RADIANS / cos(lat * DEGREES_TO_RADIANS)  / (2 * PI)\n   */\n  const unitsPerDegreeX = worldSize / 360;\n  const unitsPerDegreeY = unitsPerDegreeX / latCosine;\n\n  /**\n   * Number of pixels occupied by one meter around current lat/lon:\n   */\n  const altUnitsPerMeter = worldSize / EARTH_CIRCUMFERENCE / latCosine;\n\n  /**\n   * LngLat: longitude -> east and latitude -> north (bottom left)\n   * UTM meter offset: x -> east and y -> north (bottom left)\n   * World space: x -> east and y -> south (top left)\n   *\n   * Y needs to be flipped when converting delta degree/meter to delta pixels\n   */\n  result.unitsPerMeter = [altUnitsPerMeter, altUnitsPerMeter, altUnitsPerMeter];\n  result.metersPerUnit = [1 / altUnitsPerMeter, 1 / altUnitsPerMeter, 1 / altUnitsPerMeter];\n\n  result.unitsPerDegree = [unitsPerDegreeX, unitsPerDegreeY, altUnitsPerMeter];\n  result.degreesPerUnit = [1 / unitsPerDegreeX, 1 / unitsPerDegreeY, 1 / altUnitsPerMeter];\n\n  /**\n   * Taylor series 2nd order for 1/latCosine\n     f'(a) * (x - a)\n       = d(1/cos(lat * DEGREES_TO_RADIANS))/d(lat) * dLat\n       = DEGREES_TO_RADIANS * tan(lat * DEGREES_TO_RADIANS) / cos(lat * DEGREES_TO_RADIANS) * dLat\n   */\n  if (highPrecision) {\n    const latCosine2 = (DEGREES_TO_RADIANS * Math.tan(latitude * DEGREES_TO_RADIANS)) / latCosine;\n    const unitsPerDegreeY2 = (unitsPerDegreeX * latCosine2) / 2;\n    const altUnitsPerDegree2 = (worldSize / EARTH_CIRCUMFERENCE) * latCosine2;\n    const altUnitsPerMeter2 = (altUnitsPerDegree2 / unitsPerDegreeY) * altUnitsPerMeter;\n\n    result.unitsPerDegree2 = [0, unitsPerDegreeY2, altUnitsPerDegree2];\n    result.unitsPerMeter2 = [altUnitsPerMeter2, 0, altUnitsPerMeter2];\n  }\n\n  // Main results, used for converting meters to latlng deltas and scaling offsets\n  return result;\n}\n\n/**\n * Offset a lng/lat position by meterOffset (northing, easting)\n */\nexport function addMetersToLngLat(lngLatZ, xyz) {\n  const [longitude, latitude, z0] = lngLatZ;\n  const [x, y, z] = xyz;\n\n  const {unitsPerMeter, unitsPerMeter2} = getDistanceScales({\n    longitude,\n    latitude,\n    highPrecision: true\n  });\n\n  const worldspace = lngLatToWorld(lngLatZ);\n  worldspace[0] += x * (unitsPerMeter[0] + unitsPerMeter2[0] * y);\n  worldspace[1] += y * (unitsPerMeter[1] + unitsPerMeter2[1] * y);\n\n  // @ts-ignore\n  const newLngLat = worldToLngLat(worldspace);\n  const newZ = (z0 || 0) + (z || 0);\n\n  return Number.isFinite(z0) || Number.isFinite(z) ? [newLngLat[0], newLngLat[1], newZ] : newLngLat;\n}\n\n// ATTRIBUTION:\n// view and projection matrix creation is intentionally kept compatible with\n// mapbox-gl's implementation to ensure that seamless interoperation\n// with mapbox and react-map-gl. See: https://github.com/mapbox/mapbox-gl-js\n\nexport function getViewMatrix({\n  // Viewport props\n  height,\n  pitch,\n  bearing,\n  altitude,\n  // Pre-calculated parameters\n  scale,\n  center = null\n}) {\n  // VIEW MATRIX: PROJECTS MERCATOR WORLD COORDINATES\n  // Note that mercator world coordinates typically need to be flipped\n  //\n  // Note: As usual, matrix operation orders should be read in reverse\n  // since vectors will be multiplied from the right during transformation\n  const vm = createMat4();\n\n  // Move camera to altitude (along the pitch & bearing direction)\n  mat4.translate(vm, vm, [0, 0, -altitude]);\n\n  // Rotate by bearing, and then by pitch (which tilts the view)\n  mat4.rotateX(vm, vm, -pitch * DEGREES_TO_RADIANS);\n  mat4.rotateZ(vm, vm, bearing * DEGREES_TO_RADIANS);\n\n  scale /= height;\n  mat4.scale(vm, vm, [scale, scale, scale]);\n\n  if (center) {\n    mat4.translate(vm, vm, vec3.negate([], center));\n  }\n\n  return vm;\n}\n\n// PROJECTION MATRIX PARAMETERS\n// Variable fov (in radians)\nexport function getProjectionParameters({\n  width,\n  height,\n  fovy = altitudeToFovy(DEFAULT_ALTITUDE),\n  altitude,\n  pitch = 0,\n  nearZMultiplier = 1,\n  farZMultiplier = 1\n}) {\n  // For back-compatibility allow field of view to be\n  // derived from altitude\n  if (altitude !== undefined) {\n    fovy = altitudeToFovy(altitude);\n  }\n  const halfFov = 0.5 * fovy * DEGREES_TO_RADIANS;\n  const focalDistance = fovyToAltitude(fovy);\n\n  // Find the distance from the center point to the center top\n  // in focal distance units using law of sines.\n  const pitchRadians = pitch * DEGREES_TO_RADIANS;\n  const topHalfSurfaceDistance =\n    (Math.sin(halfFov) * focalDistance) /\n    Math.sin(Math.min(Math.max(Math.PI / 2 - pitchRadians - halfFov, 0.01), Math.PI - 0.01));\n\n  // Calculate z value of the farthest fragment that should be rendered.\n  const farZ = Math.sin(pitchRadians) * topHalfSurfaceDistance + focalDistance;\n\n  return {\n    fov: 2 * halfFov,\n    aspect: width / height,\n    focalDistance,\n    near: nearZMultiplier,\n    far: farZ * farZMultiplier\n  };\n}\n\n// PROJECTION MATRIX: PROJECTS FROM CAMERA (VIEW) SPACE TO CLIPSPACE\n// To match mapbox's z buffer:\n// <= 0.28 - nearZMultiplier: 0.1, farZmultiplier: 1\n// >= 0.29 - nearZMultiplier: 1 / height, farZMultiplier: 1.01\nexport function getProjectionMatrix({\n  width,\n  height,\n  pitch,\n  altitude,\n  fovy,\n  nearZMultiplier,\n  farZMultiplier\n}) {\n  const {fov, aspect, near, far} = getProjectionParameters({\n    width,\n    height,\n    altitude,\n    fovy,\n    pitch,\n    nearZMultiplier,\n    farZMultiplier\n  });\n\n  const projectionMatrix = mat4.perspective(\n    [],\n    fov, // fov in radians\n    aspect, // aspect ratio\n    near, // near plane\n    far // far plane\n  );\n\n  return projectionMatrix;\n}\n\n// Utility function to calculate the field of view such that\n// the focal distance is equal to the ground distance. This\n// is how mapbox's z fov is calculated\nexport function altitudeToFovy(altitude) {\n  return 2 * Math.atan(0.5 / altitude) * RADIANS_TO_DEGREES;\n}\n\nexport function fovyToAltitude(fovy) {\n  return 0.5 / Math.tan(0.5 * fovy * DEGREES_TO_RADIANS);\n}\n\n// Project flat coordinates to pixels on screen.\nexport function worldToPixels(xyz, pixelProjectionMatrix) {\n  const [x, y, z = 0] = xyz;\n  assert(Number.isFinite(x) && Number.isFinite(y) && Number.isFinite(z));\n\n  return transformVector(pixelProjectionMatrix, [x, y, z, 1]);\n}\n\n// Unproject pixels on screen to flat coordinates.\nexport function pixelsToWorld(xyz, pixelUnprojectionMatrix, targetZ = 0) {\n  const [x, y, z] = xyz;\n  assert(Number.isFinite(x) && Number.isFinite(y), 'invalid pixel coordinate');\n\n  if (Number.isFinite(z)) {\n    // Has depth component\n    const coord = transformVector(pixelUnprojectionMatrix, [x, y, z, 1]);\n    return coord;\n  }\n\n  // since we don't know the correct projected z value for the point,\n  // unproject two points to get a line and then find the point on that line with z=0\n  const coord0 = transformVector(pixelUnprojectionMatrix, [x, y, 0, 1]);\n  const coord1 = transformVector(pixelUnprojectionMatrix, [x, y, 1, 1]);\n\n  const z0 = coord0[2];\n  const z1 = coord1[2];\n\n  const t = z0 === z1 ? 0 : ((targetZ || 0) - z0) / (z1 - z0);\n  return vec2.lerp([], coord0, coord1, t);\n}\n"],"file":"web-mercator-utils.js"}