{"version":3,"sources":["../../src/web-mercator-viewport.js"],"names":["WebMercatorViewport","width","height","latitude","longitude","zoom","pitch","bearing","altitude","fovy","position","nearZMultiplier","farZMultiplier","DEFAULT_ALTITUDE","scale","Math","max","distanceScales","center","vec3","add","mul","unitsPerMeter","projectionMatrix","viewMatrix","meterOffset","_initMatrices","equals","bind","project","unproject","projectPosition","unprojectPosition","Object","freeze","vpm","mat4","multiply","viewProjectionMatrix","m","translate","mInverse","invert","Error","pixelProjectionMatrix","pixelUnprojectionMatrix","viewport","xyz","topLeft","worldPosition","coord","x","y","y2","length","targetZ","undefined","z","targetZWorld","X","Y","Z","Number","isFinite","metersPerUnit","lngLat","xy","pos","fromLocation","toLocation","vec2","negate","newCenter","getMapCenterByLngLatPosition","bounds","options","assign","corners","getBoundingRegion","west","min","map","p","east","south","north"],"mappings":";;;;;;;;;;;;;;;;;;;AACA;;AAEA;;AAaA;;AACA;;AAEA;;AACA;;AACA;;;;;;IAEqBA,mB;AAEnB,iCAgBE;AAAA,mFADI;AAACC,MAAAA,KAAK,EAAE,CAAR;AAAWC,MAAAA,MAAM,EAAE;AAAnB,KACJ;AAAA,QAbED,KAaF,QAbEA,KAaF;AAAA,QAZEC,MAYF,QAZEA,MAYF;AAAA,6BAXEC,QAWF;AAAA,QAXEA,QAWF,8BAXa,CAWb;AAAA,8BAVEC,SAUF;AAAA,QAVEA,SAUF,+BAVc,CAUd;AAAA,yBATEC,IASF;AAAA,QATEA,IASF,0BATS,CAST;AAAA,0BAREC,KAQF;AAAA,QAREA,KAQF,2BARU,CAQV;AAAA,4BAPEC,OAOF;AAAA,QAPEA,OAOF,6BAPY,CAOZ;AAAA,6BANEC,QAMF;AAAA,QANEA,QAMF,8BANa,IAMb;AAAA,yBALEC,IAKF;AAAA,QALEA,IAKF,0BALS,IAKT;AAAA,6BAJEC,QAIF;AAAA,QAJEA,QAIF,8BAJa,IAIb;AAAA,oCAHEC,eAGF;AAAA,QAHEA,eAGF,qCAHoB,IAGpB;AAAA,mCAFEC,cAEF;AAAA,QAFEA,cAEF,oCAFmB,IAEnB;;AAAA;AAEAX,IAAAA,KAAK,GAAGA,KAAK,IAAI,CAAjB;AACAC,IAAAA,MAAM,GAAGA,MAAM,IAAI,CAAnB;;AAKA,QAAIO,IAAI,KAAK,IAAT,IAAiBD,QAAQ,KAAK,IAAlC,EAAwC;AACtCA,MAAAA,QAAQ,GAAGK,kCAAX;AACAJ,MAAAA,IAAI,GAAG,sCAAeD,QAAf,CAAP;AACD,KAHD,MAGO,IAAIC,IAAI,KAAK,IAAb,EAAmB;AACxBA,MAAAA,IAAI,GAAG,sCAAeD,QAAf,CAAP;AACD,KAFM,MAEA,IAAIA,QAAQ,KAAK,IAAjB,EAAuB;AAC5BA,MAAAA,QAAQ,GAAG,sCAAeC,IAAf,CAAX;AACD;;AAED,QAAMK,KAAK,GAAG,mCAAYT,IAAZ,CAAd;AAGAG,IAAAA,QAAQ,GAAGO,IAAI,CAACC,GAAL,CAAS,IAAT,EAAeR,QAAf,CAAX;AAEA,QAAMS,cAAc,GAAG,yCAAkB;AAACb,MAAAA,SAAS,EAATA,SAAD;AAAYD,MAAAA,QAAQ,EAARA;AAAZ,KAAlB,CAAvB;AAEA,QAAMe,MAAM,GAAG,qCAAc,CAACd,SAAD,EAAYD,QAAZ,CAAd,CAAf;AACAe,IAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,CAAZ;;AAEA,QAAIR,QAAJ,EAAc;AACZS,MAAAA,IAAI,CAACC,GAAL,CAASF,MAAT,EAAiBA,MAAjB,EAAyBC,IAAI,CAACE,GAAL,CAAS,EAAT,EAAaX,QAAb,EAAuBO,cAAc,CAACK,aAAtC,CAAzB;AACD;;AAED,SAAKC,gBAAL,GAAwB,2CAAoB;AAC1CtB,MAAAA,KAAK,EAALA,KAD0C;AAE1CC,MAAAA,MAAM,EAANA,MAF0C;AAG1CI,MAAAA,KAAK,EAALA,KAH0C;AAI1CG,MAAAA,IAAI,EAAJA,IAJ0C;AAK1CE,MAAAA,eAAe,EAAfA,eAL0C;AAM1CC,MAAAA,cAAc,EAAdA;AAN0C,KAApB,CAAxB;AASA,SAAKY,UAAL,GAAkB,qCAAc;AAC9BtB,MAAAA,MAAM,EAANA,MAD8B;AAE9BY,MAAAA,KAAK,EAALA,KAF8B;AAG9BI,MAAAA,MAAM,EAANA,MAH8B;AAI9BZ,MAAAA,KAAK,EAALA,KAJ8B;AAK9BC,MAAAA,OAAO,EAAPA,OAL8B;AAM9BC,MAAAA,QAAQ,EAARA;AAN8B,KAAd,CAAlB;AAUA,SAAKP,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKY,KAAL,GAAaA,KAAb;AAEA,SAAKX,QAAL,GAAgBA,QAAhB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKS,MAAL,GAAcA,MAAd;AACA,SAAKO,WAAL,GAAmBf,QAAQ,IAAI,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAA/B;AAEA,SAAKO,cAAL,GAAsBA,cAAtB;;AAEA,SAAKS,aAAL;;AAGA,SAAKC,MAAL,GAAc,KAAKA,MAAL,CAAYC,IAAZ,CAAiB,IAAjB,CAAd;AACA,SAAKC,OAAL,GAAe,KAAKA,OAAL,CAAaD,IAAb,CAAkB,IAAlB,CAAf;AACA,SAAKE,SAAL,GAAiB,KAAKA,SAAL,CAAeF,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAKG,eAAL,GAAuB,KAAKA,eAAL,CAAqBH,IAArB,CAA0B,IAA1B,CAAvB;AACA,SAAKI,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBJ,IAAvB,CAA4B,IAA5B,CAAzB;AAEAK,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd;AACD;;;;WAED,yBAAgB;AACd,UAAOjC,KAAP,GAAsD,IAAtD,CAAOA,KAAP;AAAA,UAAcC,MAAd,GAAsD,IAAtD,CAAcA,MAAd;AAAA,UAAsBqB,gBAAtB,GAAsD,IAAtD,CAAsBA,gBAAtB;AAAA,UAAwCC,UAAxC,GAAsD,IAAtD,CAAwCA,UAAxC;AAIA,UAAMW,GAAG,GAAG,4BAAZ;AACAC,MAAAA,IAAI,CAACC,QAAL,CAAcF,GAAd,EAAmBA,GAAnB,EAAwBZ,gBAAxB;AACAa,MAAAA,IAAI,CAACC,QAAL,CAAcF,GAAd,EAAmBA,GAAnB,EAAwBX,UAAxB;AACA,WAAKc,oBAAL,GAA4BH,GAA5B;AAYA,UAAMI,CAAC,GAAG,4BAAV;AAGAH,MAAAA,IAAI,CAACtB,KAAL,CAAWyB,CAAX,EAAcA,CAAd,EAAiB,CAACtC,KAAK,GAAG,CAAT,EAAY,CAACC,MAAD,GAAU,CAAtB,EAAyB,CAAzB,CAAjB;AACAkC,MAAAA,IAAI,CAACI,SAAL,CAAeD,CAAf,EAAkBA,CAAlB,EAAqB,CAAC,CAAD,EAAI,CAAC,CAAL,EAAQ,CAAR,CAArB;AACAH,MAAAA,IAAI,CAACC,QAAL,CAAcE,CAAd,EAAiBA,CAAjB,EAAoBJ,GAApB;AAEA,UAAMM,QAAQ,GAAGL,IAAI,CAACM,MAAL,CAAY,4BAAZ,EAA0BH,CAA1B,CAAjB;;AACA,UAAI,CAACE,QAAL,EAAe;AACb,cAAM,IAAIE,KAAJ,CAAU,qCAAV,CAAN;AACD;;AAED,WAAKC,qBAAL,GAA6BL,CAA7B;AACA,WAAKM,uBAAL,GAA+BJ,QAA/B;AACD;;;WAID,gBAAOK,QAAP,EAAiB;AACf,UAAI,EAAEA,QAAQ,YAAY9C,mBAAtB,CAAJ,EAAgD;AAC9C,eAAO,KAAP;AACD;;AAED,aACE8C,QAAQ,CAAC7C,KAAT,KAAmB,KAAKA,KAAxB,IACA6C,QAAQ,CAAC5C,MAAT,KAAoB,KAAKA,MADzB,IAEAkC,IAAI,CAACT,MAAL,CAAYmB,QAAQ,CAACvB,gBAArB,EAAuC,KAAKA,gBAA5C,CAFA,IAGAa,IAAI,CAACT,MAAL,CAAYmB,QAAQ,CAACtB,UAArB,EAAiC,KAAKA,UAAtC,CAJF;AAMD;;;WAID,iBAAQuB,GAAR,EAAoC;AAAA,sFAAJ,EAAI;AAAA,gCAAtBC,OAAsB;AAAA,UAAtBA,OAAsB,8BAAZ,IAAY;;AAClC,UAAMC,aAAa,GAAG,KAAKlB,eAAL,CAAqBgB,GAArB,CAAtB;AACA,UAAMG,KAAK,GAAG,qCAAcD,aAAd,EAA6B,KAAKL,qBAAlC,CAAd;;AAEA,gDAAeM,KAAf;AAAA,UAAOC,CAAP;AAAA,UAAUC,CAAV;;AACA,UAAMC,EAAE,GAAGL,OAAO,GAAGI,CAAH,GAAO,KAAKlD,MAAL,GAAckD,CAAvC;AACA,aAAOL,GAAG,CAACO,MAAJ,KAAe,CAAf,GAAmB,CAACH,CAAD,EAAIE,EAAJ,CAAnB,GAA6B,CAACF,CAAD,EAAIE,EAAJ,EAAQH,KAAK,CAAC,CAAD,CAAb,CAApC;AACD;;;WAID,mBAAUH,GAAV,EAA2D;AAAA,sFAAJ,EAAI;AAAA,gCAA3CC,OAA2C;AAAA,UAA3CA,OAA2C,8BAAjC,IAAiC;AAAA,gCAA3BO,OAA2B;AAAA,UAA3BA,OAA2B,8BAAjBC,SAAiB;;AACzD,8CAAkBT,GAAlB;AAAA,UAAOI,CAAP;AAAA,UAAUC,CAAV;AAAA,UAAaK,CAAb;;AAEA,UAAMJ,EAAE,GAAGL,OAAO,GAAGI,CAAH,GAAO,KAAKlD,MAAL,GAAckD,CAAvC;AACA,UAAMM,YAAY,GAAGH,OAAO,IAAIA,OAAO,GAAG,KAAKtC,cAAL,CAAoBK,aAApB,CAAkC,CAAlC,CAA1C;AACA,UAAM4B,KAAK,GAAG,qCAAc,CAACC,CAAD,EAAIE,EAAJ,EAAQI,CAAR,CAAd,EAA0B,KAAKZ,uBAA/B,EAAwDa,YAAxD,CAAd;;AACA,kCAAkB,KAAK1B,iBAAL,CAAuBkB,KAAvB,CAAlB;AAAA;AAAA,UAAOS,CAAP;AAAA,UAAUC,CAAV;AAAA,UAAaC,CAAb;;AAEA,UAAIC,MAAM,CAACC,QAAP,CAAgBN,CAAhB,CAAJ,EAAwB;AACtB,eAAO,CAACE,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAP;AACD;;AACD,aAAOC,MAAM,CAACC,QAAP,CAAgBR,OAAhB,IAA2B,CAACI,CAAD,EAAIC,CAAJ,EAAOL,OAAP,CAA3B,GAA6C,CAACI,CAAD,EAAIC,CAAJ,CAApD;AACD;;;WAKD,yBAAgBb,GAAhB,EAAqB;AACnB,2BAAe,qCAAcA,GAAd,CAAf;AAAA;AAAA,UAAOY,CAAP;AAAA,UAAUC,CAAV;;AACA,UAAMC,CAAC,GAAG,CAACd,GAAG,CAAC,CAAD,CAAH,IAAU,CAAX,IAAgB,KAAK9B,cAAL,CAAoBK,aAApB,CAAkC,CAAlC,CAA1B;AACA,aAAO,CAACqC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAP;AACD;;;WAED,2BAAkBd,GAAlB,EAAuB;AACrB,2BAAe,qCAAcA,GAAd,CAAf;AAAA;AAAA,UAAOY,CAAP;AAAA,UAAUC,CAAV;;AACA,UAAMC,CAAC,GAAG,CAACd,GAAG,CAAC,CAAD,CAAH,IAAU,CAAX,IAAgB,KAAK9B,cAAL,CAAoB+C,aAApB,CAAkC,CAAlC,CAA1B;AACA,aAAO,CAACL,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAP;AACD;;;WAGD,qBAAYI,MAAZ,EAAoB;AAClB,aAAO,qCAAcA,MAAd,CAAP;AACD;;;WAGD,uBAAcC,EAAd,EAAkB;AAChB,aAAO,qCAAcA,EAAd,CAAP;AACD;;;WAGD,6CAA4C;AAAA,UAAdD,MAAc,SAAdA,MAAc;AAAA,UAANE,GAAM,SAANA,GAAM;AAC1C,UAAMC,YAAY,GAAG,qCAAcD,GAAd,EAAmB,KAAKtB,uBAAxB,CAArB;AACA,UAAMwB,UAAU,GAAG,qCAAcJ,MAAd,CAAnB;AAEA,UAAMzB,SAAS,GAAG8B,IAAI,CAAClD,GAAL,CAAS,EAAT,EAAaiD,UAAb,EAAyBC,IAAI,CAACC,MAAL,CAAY,EAAZ,EAAgBH,YAAhB,CAAzB,CAAlB;AACA,UAAMI,SAAS,GAAGF,IAAI,CAAClD,GAAL,CAAS,EAAT,EAAa,KAAKF,MAAlB,EAA0BsB,SAA1B,CAAlB;AAEA,aAAO,qCAAcgC,SAAd,CAAP;AACD;;;WAGD,mCAAkC;AAAA,UAAdP,MAAc,SAAdA,MAAc;AAAA,UAANE,GAAM,SAANA,GAAM;AAChC,aAAO,KAAKM,4BAAL,CAAkC;AAACR,QAAAA,MAAM,EAANA,MAAD;AAASE,QAAAA,GAAG,EAAHA;AAAT,OAAlC,CAAP;AACD;;;WAGD,mBAAUO,MAAV,EAAgC;AAAA,UAAdC,OAAc,uEAAJ,EAAI;AAC9B,UAAO1E,KAAP,GAAwB,IAAxB,CAAOA,KAAP;AAAA,UAAcC,MAAd,GAAwB,IAAxB,CAAcA,MAAd;;AACA,wBAAoC,yBAAU+B,MAAM,CAAC2C,MAAP,CAAc;AAAC3E,QAAAA,KAAK,EAALA,KAAD;AAAQC,QAAAA,MAAM,EAANA,MAAR;AAAgBwE,QAAAA,MAAM,EAANA;AAAhB,OAAd,EAAuCC,OAAvC,CAAV,CAApC;AAAA,UAAOvE,SAAP,eAAOA,SAAP;AAAA,UAAkBD,QAAlB,eAAkBA,QAAlB;AAAA,UAA4BE,IAA5B,eAA4BA,IAA5B;;AACA,aAAO,IAAIL,mBAAJ,CAAwB;AAACC,QAAAA,KAAK,EAALA,KAAD;AAAQC,QAAAA,MAAM,EAANA,MAAR;AAAgBE,QAAAA,SAAS,EAATA,SAAhB;AAA2BD,QAAAA,QAAQ,EAARA,QAA3B;AAAqCE,QAAAA,IAAI,EAAJA;AAArC,OAAxB,CAAP;AACD;;;WAED,mBAAUsE,OAAV,EAAmB;AACjB,UAAME,OAAO,GAAG,KAAKC,iBAAL,CAAuBH,OAAvB,CAAhB;AAEA,UAAMI,IAAI,GAAGhE,IAAI,CAACiE,GAAL,OAAAjE,IAAI,mCAAQ8D,OAAO,CAACI,GAAR,CAAY,UAACC,CAAD;AAAA,eAAOA,CAAC,CAAC,CAAD,CAAR;AAAA,OAAZ,CAAR,EAAjB;AACA,UAAMC,IAAI,GAAGpE,IAAI,CAACC,GAAL,OAAAD,IAAI,mCAAQ8D,OAAO,CAACI,GAAR,CAAY,UAACC,CAAD;AAAA,eAAOA,CAAC,CAAC,CAAD,CAAR;AAAA,OAAZ,CAAR,EAAjB;AACA,UAAME,KAAK,GAAGrE,IAAI,CAACiE,GAAL,OAAAjE,IAAI,mCAAQ8D,OAAO,CAACI,GAAR,CAAY,UAACC,CAAD;AAAA,eAAOA,CAAC,CAAC,CAAD,CAAR;AAAA,OAAZ,CAAR,EAAlB;AACA,UAAMG,KAAK,GAAGtE,IAAI,CAACC,GAAL,OAAAD,IAAI,mCAAQ8D,OAAO,CAACI,GAAR,CAAY,UAACC,CAAD;AAAA,eAAOA,CAAC,CAAC,CAAD,CAAR;AAAA,OAAZ,CAAR,EAAlB;AACA,aAAO,CACL,CAACH,IAAD,EAAOK,KAAP,CADK,EAEL,CAACD,IAAD,EAAOE,KAAP,CAFK,CAAP;AAID;;;WAED,6BAAgC;AAAA,UAAdV,OAAc,uEAAJ,EAAI;AAC9B,aAAO,wBAAU,IAAV,EAAgBA,OAAO,CAAClB,CAAR,IAAa,CAA7B,CAAP;AACD","sourcesContent":["// View and Projection Matrix calculations for mapbox-js style map view properties\nimport {createMat4} from './math-utils';\n\nimport {\n  zoomToScale,\n  pixelsToWorld,\n  lngLatToWorld,\n  worldToLngLat,\n  worldToPixels,\n  altitudeToFovy,\n  fovyToAltitude,\n  DEFAULT_ALTITUDE,\n  getProjectionMatrix,\n  getDistanceScales,\n  getViewMatrix\n} from './web-mercator-utils';\nimport fitBounds from './fit-bounds';\nimport getBounds from './get-bounds';\n\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\n\nexport default class WebMercatorViewport {\n  // eslint-disable-next-line max-statements\n  constructor(\n    {\n      // Map state\n      width,\n      height,\n      latitude = 0,\n      longitude = 0,\n      zoom = 0,\n      pitch = 0,\n      bearing = 0,\n      altitude = null,\n      fovy = null,\n      position = null,\n      nearZMultiplier = 0.02,\n      farZMultiplier = 1.01\n    } = {width: 1, height: 1}\n  ) {\n    // Silently allow apps to send in 0,0 to facilitate isomorphic render etc\n    width = width || 1;\n    height = height || 1;\n\n    // `fovy` & `altitude` are independent parameters, one for the\n    // projection and the latter for the view matrix. In the past,\n    // the `fovy` was always derived from the `altitude`\n    if (fovy === null && altitude === null) {\n      altitude = DEFAULT_ALTITUDE;\n      fovy = altitudeToFovy(altitude);\n    } else if (fovy === null) {\n      fovy = altitudeToFovy(altitude);\n    } else if (altitude === null) {\n      altitude = fovyToAltitude(fovy);\n    }\n\n    const scale = zoomToScale(zoom);\n    // Altitude - prevent division by 0\n    // TODO - just throw an Error instead?\n    altitude = Math.max(0.75, altitude);\n\n    const distanceScales = getDistanceScales({longitude, latitude});\n\n    const center = lngLatToWorld([longitude, latitude]);\n    center[2] = 0;\n\n    if (position) {\n      vec3.add(center, center, vec3.mul([], position, distanceScales.unitsPerMeter));\n    }\n\n    this.projectionMatrix = getProjectionMatrix({\n      width,\n      height,\n      pitch,\n      fovy,\n      nearZMultiplier,\n      farZMultiplier\n    });\n\n    this.viewMatrix = getViewMatrix({\n      height,\n      scale,\n      center,\n      pitch,\n      bearing,\n      altitude\n    });\n\n    // Save parameters\n    this.width = width;\n    this.height = height;\n    this.scale = scale;\n\n    this.latitude = latitude;\n    this.longitude = longitude;\n    this.zoom = zoom;\n    this.pitch = pitch;\n    this.bearing = bearing;\n    this.altitude = altitude;\n    this.fovy = fovy;\n    this.center = center;\n    this.meterOffset = position || [0, 0, 0];\n\n    this.distanceScales = distanceScales;\n\n    this._initMatrices();\n\n    // Bind methods for easy access\n    this.equals = this.equals.bind(this);\n    this.project = this.project.bind(this);\n    this.unproject = this.unproject.bind(this);\n    this.projectPosition = this.projectPosition.bind(this);\n    this.unprojectPosition = this.unprojectPosition.bind(this);\n\n    Object.freeze(this);\n  }\n\n  _initMatrices() {\n    const {width, height, projectionMatrix, viewMatrix} = this;\n\n    // Note: As usual, matrix operations should be applied in \"reverse\" order\n    // since vectors will be multiplied in from the right during transformation\n    const vpm = createMat4();\n    mat4.multiply(vpm, vpm, projectionMatrix);\n    mat4.multiply(vpm, vpm, viewMatrix);\n    this.viewProjectionMatrix = vpm;\n\n    // Calculate matrices and scales needed for projection\n    /**\n     * Builds matrices that converts preprojected lngLats to screen pixels\n     * and vice versa.\n     * Note: Currently returns bottom-left coordinates!\n     * Note: Starts with the GL projection matrix and adds steps to the\n     *       scale and translate that matrix onto the window.\n     * Note: WebGL controls clip space to screen projection with gl.viewport\n     *       and does not need this step.\n     */\n    const m = createMat4();\n\n    // matrix for conversion from location to screen coordinates\n    mat4.scale(m, m, [width / 2, -height / 2, 1]);\n    mat4.translate(m, m, [1, -1, 0]);\n    mat4.multiply(m, m, vpm);\n\n    const mInverse = mat4.invert(createMat4(), m);\n    if (!mInverse) {\n      throw new Error('Pixel project matrix not invertible');\n    }\n\n    this.pixelProjectionMatrix = m;\n    this.pixelUnprojectionMatrix = mInverse;\n  }\n\n  // Two viewports are equal if width and height are identical, and if\n  // their view and projection matrices are (approximately) equal.\n  equals(viewport) {\n    if (!(viewport instanceof WebMercatorViewport)) {\n      return false;\n    }\n\n    return (\n      viewport.width === this.width &&\n      viewport.height === this.height &&\n      mat4.equals(viewport.projectionMatrix, this.projectionMatrix) &&\n      mat4.equals(viewport.viewMatrix, this.viewMatrix)\n    );\n  }\n\n  // Projects xyz (possibly latitude and longitude) to pixel coordinates in window\n  // using viewport projection parameters\n  project(xyz, {topLeft = true} = {}) {\n    const worldPosition = this.projectPosition(xyz);\n    const coord = worldToPixels(worldPosition, this.pixelProjectionMatrix);\n\n    const [x, y] = coord;\n    const y2 = topLeft ? y : this.height - y;\n    return xyz.length === 2 ? [x, y2] : [x, y2, coord[2]];\n  }\n\n  // Unproject pixel coordinates on screen onto world coordinates,\n  // (possibly [lon, lat]) on map.\n  unproject(xyz, {topLeft = true, targetZ = undefined} = {}) {\n    const [x, y, z] = xyz;\n\n    const y2 = topLeft ? y : this.height - y;\n    const targetZWorld = targetZ && targetZ * this.distanceScales.unitsPerMeter[2];\n    const coord = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix, targetZWorld);\n    const [X, Y, Z] = this.unprojectPosition(coord);\n\n    if (Number.isFinite(z)) {\n      return [X, Y, Z];\n    }\n    return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];\n  }\n\n  // NON_LINEAR PROJECTION HOOKS\n  // Used for web meractor projection\n\n  projectPosition(xyz) {\n    const [X, Y] = lngLatToWorld(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.unitsPerMeter[2];\n    return [X, Y, Z];\n  }\n\n  unprojectPosition(xyz) {\n    const [X, Y] = worldToLngLat(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.metersPerUnit[2];\n    return [X, Y, Z];\n  }\n\n  // Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n  projectFlat(lngLat) {\n    return lngLatToWorld(lngLat);\n  }\n\n  // Unproject world point [x,y] on map onto {lat, lon} on sphere\n  unprojectFlat(xy) {\n    return worldToLngLat(xy);\n  }\n\n  // Get the map center that place a given [lng, lat] coordinate at screen point [x, y]\n  getMapCenterByLngLatPosition({lngLat, pos}) {\n    const fromLocation = pixelsToWorld(pos, this.pixelUnprojectionMatrix);\n    const toLocation = lngLatToWorld(lngLat);\n\n    const translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n\n    return worldToLngLat(newCenter);\n  }\n\n  // Legacy method name\n  getLocationAtPoint({lngLat, pos}) {\n    return this.getMapCenterByLngLatPosition({lngLat, pos});\n  }\n\n  // Returns a new viewport that fit around the given rectangle.\n  fitBounds(bounds, options = {}) {\n    const {width, height} = this;\n    const {longitude, latitude, zoom} = fitBounds(Object.assign({width, height, bounds}, options));\n    return new WebMercatorViewport({width, height, longitude, latitude, zoom});\n  }\n\n  getBounds(options) {\n    const corners = this.getBoundingRegion(options);\n\n    const west = Math.min(...corners.map((p) => p[0]));\n    const east = Math.max(...corners.map((p) => p[0]));\n    const south = Math.min(...corners.map((p) => p[1]));\n    const north = Math.max(...corners.map((p) => p[1]));\n    return [\n      [west, south],\n      [east, north]\n    ];\n  }\n\n  getBoundingRegion(options = {}) {\n    return getBounds(this, options.z || 0);\n  }\n}\n"],"file":"web-mercator-viewport.js"}