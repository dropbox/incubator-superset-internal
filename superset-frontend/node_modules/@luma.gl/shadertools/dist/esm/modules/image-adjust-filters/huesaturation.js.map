{"version":3,"sources":["../../../../src/modules/image-adjust-filters/huesaturation.js"],"names":["fs","uniforms","hue","value","min","max","saturation","hueSaturation","name","passes","filter"],"mappings":"AAEA,MAAMA,EAAE,qyBAAR;AAgCA,MAAMC,QAAQ,GAAG;AACfC,EAAAA,GAAG,EAAE;AAACC,IAAAA,KAAK,EAAE,CAAR;AAAWC,IAAAA,GAAG,EAAE,CAAC,CAAjB;AAAoBC,IAAAA,GAAG,EAAE;AAAzB,GADU;AAEfC,EAAAA,UAAU,EAAE;AAACH,IAAAA,KAAK,EAAE,CAAR;AAAWC,IAAAA,GAAG,EAAE,CAAC,CAAjB;AAAoBC,IAAAA,GAAG,EAAE;AAAzB;AAFG,CAAjB;AAMA,OAAO,MAAME,aAAa,GAAG;AAC3BC,EAAAA,IAAI,EAAE,eADqB;AAE3BP,EAAAA,QAF2B;AAG3BD,EAAAA,EAH2B;AAI3BS,EAAAA,MAAM,EAAE,CAAC;AAACC,IAAAA,MAAM,EAAE;AAAT,GAAD;AAJmB,CAAtB","sourcesContent":["/** @typedef {import('../../types').ShaderPass} ShaderPass */\n\nconst fs = `\\\nuniform float hue;\nuniform float saturation;\n\nvec4 hueSaturation_filterColor(vec4 color) {\n  // hue adjustment, wolfram alpha: RotationTransform[angle, {1, 1, 1}][{x, y, z}]\n  float angle = hue * 3.14159265;\n  float s = sin(angle), c = cos(angle);\n  vec3 weights = (vec3(2.0 * c, -sqrt(3.0) * s - c, sqrt(3.0) * s - c) + 1.0) / 3.0;\n  float len = length(color.rgb);\n  color.rgb = vec3(\n    dot(color.rgb, weights.xyz),\n    dot(color.rgb, weights.zxy),\n    dot(color.rgb, weights.yzx)\n  );\n\n  // saturation adjustment\n  float average = (color.r + color.g + color.b) / 3.0;\n  if (saturation > 0.0) {\n    color.rgb += (average - color.rgb) * (1.0 - 1.0 / (1.001 - saturation));\n  } else {\n    color.rgb += (average - color.rgb) * (-saturation);\n  }\n\n  return color;\n}\n\nvec4 hueSaturation_filterColor(vec4 color, vec2 texSize, vec2 texCoord) {\n  return hueSaturation_filterColor(color);\n}\n`;\n\nconst uniforms = {\n  hue: {value: 0, min: -1, max: 1},\n  saturation: {value: 0, min: -1, max: 1}\n};\n\n/** @type {ShaderPass} */\nexport const hueSaturation = {\n  name: 'hueSaturation',\n  uniforms,\n  fs,\n  passes: [{filter: true}]\n};\n"],"file":"huesaturation.js"}