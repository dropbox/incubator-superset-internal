{"version":3,"sources":["../../../src/utils/webgl-info.js"],"names":["isOldIE","assert","GL_VENDOR","GL_RENDERER","GL_VERSION","GL_SHADING_LANGUAGE_VERSION","WEBGL_FEATURES","GLSL_FRAG_DATA","GLSL_FRAG_DEPTH","GLSL_DERIVATIVES","GLSL_TEXTURE_LOD","FEATURES","Object","keys","forEach","key","isWebGL2","gl","WebGL2RenderingContext","Boolean","_version","getContextInfo","info","getExtension","vendor","getParameter","UNMASKED_VENDOR_WEBGL","renderer","UNMASKED_RENDERER_WEBGL","gpuVendor","identifyGPUVendor","gpuInfo","version","shadingLanguageVersion","match","compiledGlslExtensions","canCompileGLGSExtension","cap","opts","feature","extensionName","behavior","source","shader","createShader","shaderSource","compileShader","canCompile","getShaderParameter","deleteShader","getFeature","value","hasFeatures","features","Array","isArray","every"],"mappings":"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","sourcesContent":["// Feature detection for WebGL\n//\n// Provides a function that enables simple checking of which WebGL features are\n// available in an WebGL1 or WebGL2 environment.\n\n/* eslint-disable no-inline-comments, max-len */\nimport isOldIE from './is-old-ie';\nimport assert from './assert';\n\nconst GL_VENDOR = 0x1f00;\nconst GL_RENDERER = 0x1f01;\nconst GL_VERSION = 0x1f02;\nconst GL_SHADING_LANGUAGE_VERSION = 0x8b8c;\n\n// Defines luma.gl \"feature\" names and semantics\nconst WEBGL_FEATURES = {\n  // GLSL extensions\n  GLSL_FRAG_DATA: ['WEBGL_draw_buffers', true], // TODO - name makes no sense in GLSL 3.00\n  GLSL_FRAG_DEPTH: ['EXT_frag_depth', true],\n  GLSL_DERIVATIVES: ['OES_standard_derivatives', true],\n  GLSL_TEXTURE_LOD: ['EXT_shader_texture_lod', true]\n};\n\n// Create a key-mirrored FEATURES array\nconst FEATURES = {};\nObject.keys(WEBGL_FEATURES).forEach(key => {\n  FEATURES[key] = key;\n});\n\nexport {FEATURES};\n\nfunction isWebGL2(gl) {\n  if (typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext) {\n    return true;\n  }\n  return Boolean(gl && gl._version === 2);\n}\n\nexport function getContextInfo(gl) {\n  const info = gl.getExtension('WEBGL_debug_renderer_info');\n  const vendor = gl.getParameter((info && info.UNMASKED_VENDOR_WEBGL) || GL_VENDOR);\n  const renderer = gl.getParameter((info && info.UNMASKED_RENDERER_WEBGL) || GL_RENDERER);\n  const gpuVendor = identifyGPUVendor(vendor, renderer);\n  const gpuInfo = {\n    gpuVendor,\n    vendor,\n    renderer,\n    version: gl.getParameter(GL_VERSION),\n    shadingLanguageVersion: gl.getParameter(GL_SHADING_LANGUAGE_VERSION)\n  };\n  return gpuInfo;\n}\n\nfunction identifyGPUVendor(vendor, renderer) {\n  if (vendor.match(/NVIDIA/i) || renderer.match(/NVIDIA/i)) {\n    return 'NVIDIA';\n  }\n  if (vendor.match(/INTEL/i) || renderer.match(/INTEL/i)) {\n    return 'INTEL';\n  }\n  if (\n    vendor.match(/AMD/i) ||\n    renderer.match(/AMD/i) ||\n    vendor.match(/ATI/i) ||\n    renderer.match(/ATI/i)\n  ) {\n    return 'AMD';\n  }\n  return 'UNKNOWN GPU';\n}\n\nconst compiledGlslExtensions = {};\n\n// Enables feature detection in IE11 due to a bug where gl.getExtension may return true\n// but fail to compile when the extension is enabled in the shader. Specifically,\n// the OES_standard_derivatives and WEBGL_draw_buffers extensions fails to compile in IE11 even though its included\n// in the list of supported extensions.\n// opts allows user agent to be overridden for testing\n/*\n* Inputs :\n*  gl : WebGL context\n*  cap : Key of WEBGL_FEATURES object identifying the extension\n*  opts :\n*   behavior : behavior of extension to be tested, by defualt `enable` is used\n* Returns : true, if shader is compiled successfully, false otherwise\n*/\nexport function canCompileGLGSExtension(gl, cap, opts = {}) {\n  const feature = WEBGL_FEATURES[cap];\n  assert(feature, cap);\n\n  if (!isOldIE(opts)) {\n    return true;\n  }\n\n  if (cap in compiledGlslExtensions) {\n    return compiledGlslExtensions[cap];\n  }\n\n  const extensionName = feature[0];\n  const behavior = opts.behavior || 'enable';\n  const source = `#extension GL_${extensionName} : ${behavior}\\nvoid main(void) {}`;\n\n  const shader = gl.createShader(gl.VERTEX_SHADER);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n  const canCompile = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n  gl.deleteShader(shader);\n  compiledGlslExtensions[cap] = canCompile;\n  return canCompile;\n}\n\n// TODO - cache the value\nfunction getFeature(gl, cap) {\n  const feature = WEBGL_FEATURES[cap];\n  assert(feature, cap);\n\n  // Get extension name from table\n  const extensionName = isWebGL2(gl) ? feature[1] || feature[0] : feature[0];\n\n  // Check if the value is dependent on checking an extension\n  const value =\n    typeof extensionName === 'string' ? Boolean(gl.getExtension(extensionName)) : extensionName;\n\n  assert(value === false || value === true);\n\n  return value;\n}\n\nexport function hasFeatures(gl, features) {\n  features = Array.isArray(features) ? features : [features];\n  return features.every(feature => getFeature(gl, feature));\n}\n"],"file":"webgl-info.js"}