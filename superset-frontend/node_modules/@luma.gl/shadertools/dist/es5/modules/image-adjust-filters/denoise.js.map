{"version":3,"sources":["../../../../src/modules/image-adjust-filters/denoise.js"],"names":["fs","uniforms","strength","value","min","max","adjust","Math","pow","denoise","name","passes","sampler"],"mappings":";;;;;;AAGA,IAAMA,EAAE,mpBAAR;AAuBA,IAAMC,QAAQ,GAAG;AACfC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAE,GADC;AAERC,IAAAA,GAAG,EAAE,CAFG;AAGRC,IAAAA,GAAG,EAAE,GAHG;AAIRC,IAAAA,MAAM,EAAE,gBAAAJ,QAAQ;AAAA,aAAI,OAAO,MAAMK,IAAI,CAACC,GAAL,CAAS,IAAIN,QAAb,EAAuB,CAAvB,CAAjB;AAAA;AAJR;AADK,CAAjB;AAUO,IAAMO,OAAO,GAAG;AACrBC,EAAAA,IAAI,EAAE,SADe;AAErBT,EAAAA,QAAQ,EAARA,QAFqB;AAGrBD,EAAAA,EAAE,EAAFA,EAHqB;AAIrBW,EAAAA,MAAM,EAAE,CAAC;AAACC,IAAAA,OAAO,EAAE;AAAV,GAAD,EAAkB;AAACA,IAAAA,OAAO,EAAE;AAAV,GAAlB;AAJa,CAAhB","sourcesContent":["/** @typedef {import('../../types').ShaderPass} ShaderPass */\n\n// Do a 9x9 bilateral box filter\nconst fs = `\\\nuniform float strength;\n\nvec4 denoise_sampleColor(sampler2D texture, vec2 texSize, vec2 texCoord) {\n  float adjustedExponent = 3. + 200. * pow(1. - strength, 4.);\n\n  vec4 center = texture2D(texture, texCoord);\n  vec4 color = vec4(0.0);\n  float total = 0.0;\n  for (float x = -4.0; x <= 4.0; x += 1.0) {\n    for (float y = -4.0; y <= 4.0; y += 1.0) {\n      vec4 sample = texture2D(texture, texCoord + vec2(x, y) / texSize);\n      float weight = 1.0 - abs(dot(sample.rgb - center.rgb, vec3(0.25)));\n      weight = pow(weight, adjustedExponent);\n      color += sample * weight;\n      total += weight;\n    }\n  }\n\n  return color / total;\n}\n`;\n\nconst uniforms = {\n  strength: {\n    value: 0.5,\n    min: 0,\n    max: 0.1,\n    adjust: strength => 0.53 + 200 * Math.pow(1 - strength, 4) // TODO - JS preprocessing\n  }\n};\n\n/** @type {ShaderPass} */\nexport const denoise = {\n  name: 'denoise',\n  uniforms,\n  fs,\n  passes: [{sampler: true}, {sampler: true}]\n};\n"],"file":"denoise.js"}