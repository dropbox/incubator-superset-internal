{"version":3,"sources":["../../../src/classes/framebuffer.js"],"names":["ERR_MULTIPLE_RENDERTARGETS","Framebuffer","gl2","gl","getParameter","MAX_COLOR_ATTACHMENTS","MAX_DRAW_BUFFERS","options","colorBufferFloat","colorBufferHalfFloat","supported","Boolean","getExtension","luma","defaultFramebuffer","id","handle","attachments","opts","width","height","readBuffer","drawBuffers","ownResources","initialize","Object","seal","color","depth","stencil","check","undefined","attachment","target","object","Array","isArray","resize","_createDefaultAttachments","update","clearAttachments","checkStatus","resource","delete","resizeAttachments","attach","prevHandle","bindFramebuffer","_setReadBuffer","_setDrawBuffers","drawingBufferWidth","drawingBufferHeight","log","attachmentPoint","newAttachments","keys","forEach","key","assign","Number","descriptor","_unattach","Renderbuffer","_attachRenderbuffer","renderbuffer","texture","layer","level","_attachTexture","filter","status","getStatus","Error","_getFrameBufferStatus","checkFramebufferStatus","value","drawBuffer","error","x","y","invalidateAll","invalidateFramebuffer","pname","_getAttachmentParameterFallback","getFramebufferAttachmentParameter","parameters","constructor","ATTACHMENT_PARAMETERS","values","getAttachmentParameter","attachmentName","getAttachmentParameters","window","open","logLevel","message","image","targetMaxHeight","defaultAttachments","Texture2D","pixels","format","type","mipmaps","push","oldAttachment","framebufferRenderbuffer","framebufferTexture2D","bindTexture","framebufferTextureLayer","face","mapIndexToCubeMapFace","ext","drawBuffersWEBGL","length","caps","WEBGL2","EXT_sRGB","createFramebuffer","deleteFramebuffer","Resource","STATUS","FRAMEBUFFER_ATTACHMENT_PARAMETERS"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {getWebGL2Context, assertWebGL2Context, log} from '@luma.gl/gltools';\nimport Resource from './resource';\nimport Texture2D from './texture-2d';\nimport Renderbuffer from './renderbuffer';\nimport {clear, clearBuffer} from './clear';\nimport {copyToDataUrl} from './copy-and-blit.js';\n\nimport {getFeatures} from '../features';\nimport {getKey} from '../webgl-utils';\nimport {assert} from '../utils';\n\nconst ERR_MULTIPLE_RENDERTARGETS = 'Multiple render targets not supported';\n\nexport default class Framebuffer extends Resource {\n  static isSupported(gl, options = {}) {\n    const {\n      colorBufferFloat, // Whether floating point textures can be rendered and read\n      colorBufferHalfFloat // Whether half float textures can be rendered and read\n    } = options;\n    let supported = true;\n\n    if (colorBufferFloat) {\n      supported = Boolean(\n        // WebGL 2\n        gl.getExtension('EXT_color_buffer_float') ||\n          // WebGL 1, not exposed on all platforms\n          gl.getExtension('WEBGL_color_buffer_float') ||\n          // WebGL 1, implicitly enables float render targets https://www.khronos.org/registry/webgl/extensions/OES_texture_float/\n          gl.getExtension('OES_texture_float')\n      );\n    }\n\n    if (colorBufferHalfFloat) {\n      supported =\n        supported &&\n        Boolean(\n          // WebGL 2\n          gl.getExtension('EXT_color_buffer_float') ||\n            // WebGL 1\n            gl.getExtension('EXT_color_buffer_half_float')\n        );\n    }\n\n    return supported;\n  }\n\n  // Create a Framebuffer wrapper for the default framebuffer (target === null)\n  static getDefaultFramebuffer(gl) {\n    gl.luma = gl.luma || {};\n    gl.luma.defaultFramebuffer =\n      gl.luma.defaultFramebuffer ||\n      new Framebuffer(gl, {\n        id: 'default-framebuffer',\n        handle: null,\n        attachments: {}\n      });\n    // TODO - can we query for and get a handle to the GL.FRONT renderbuffer?\n    return gl.luma.defaultFramebuffer;\n  }\n\n  get MAX_COLOR_ATTACHMENTS() {\n    const gl2 = assertWebGL2Context(this.gl);\n    return gl2.getParameter(gl2.MAX_COLOR_ATTACHMENTS);\n  }\n\n  get MAX_DRAW_BUFFERS() {\n    const gl2 = assertWebGL2Context(this.gl);\n    return gl2.getParameter(gl2.MAX_DRAW_BUFFERS);\n  }\n\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    // Public members\n    this.width = null;\n    this.height = null;\n    this.attachments = {};\n    this.readBuffer = GL.COLOR_ATTACHMENT0;\n    this.drawBuffers = [GL.COLOR_ATTACHMENT0];\n    this.ownResources = [];\n    this.initialize(opts);\n\n    Object.seal(this);\n  }\n\n  get color() {\n    return this.attachments[GL.COLOR_ATTACHMENT0] || null;\n  }\n\n  get texture() {\n    return this.attachments[GL.COLOR_ATTACHMENT0] || null;\n  }\n\n  get depth() {\n    return (\n      this.attachments[GL.DEPTH_ATTACHMENT] || this.attachments[GL.DEPTH_STENCIL_ATTACHMENT] || null\n    );\n  }\n\n  get stencil() {\n    return (\n      this.attachments[GL.STENCIL_ATTACHMENT] ||\n      this.attachments[GL.DEPTH_STENCIL_ATTACHMENT] ||\n      null\n    );\n  }\n\n  initialize({\n    width = 1,\n    height = 1,\n    attachments = null,\n    color = true,\n    depth = true,\n    stencil = false,\n    check = true,\n    readBuffer = undefined,\n    drawBuffers = undefined\n  }) {\n    assert(width >= 0 && height >= 0, 'Width and height need to be integers');\n\n    // Store actual width and height for diffing\n    this.width = width;\n    this.height = height;\n\n    // Resize any provided attachments - note that resize only resizes if needed\n    // Note: A framebuffer has no separate size, it is defined by its attachments (which must agree)\n    if (attachments) {\n      for (const attachment in attachments) {\n        const target = attachments[attachment];\n        const object = Array.isArray(target) ? target[0] : target;\n        object.resize({width, height});\n      }\n    } else {\n      // Create any requested default attachments\n      attachments = this._createDefaultAttachments(color, depth, stencil, width, height);\n    }\n\n    this.update({clearAttachments: true, attachments, readBuffer, drawBuffers});\n\n    // Checks that framebuffer was properly set up, if not, throws an explanatory error\n    if (attachments && check) {\n      this.checkStatus();\n    }\n  }\n\n  delete() {\n    for (const resource of this.ownResources) {\n      resource.delete();\n    }\n    super.delete();\n    return this;\n  }\n\n  update({\n    attachments = {},\n    readBuffer,\n    drawBuffers,\n    clearAttachments = false,\n    resizeAttachments = true\n  }) {\n    this.attach(attachments, {clearAttachments, resizeAttachments});\n\n    const {gl} = this;\n    // Multiple render target support, set read buffer and draw buffers\n    const prevHandle = gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n    if (readBuffer) {\n      this._setReadBuffer(readBuffer);\n    }\n    if (drawBuffers) {\n      this._setDrawBuffers(drawBuffers);\n    }\n    // @ts-ignore\n    gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n\n    return this;\n  }\n\n  // Attachment resize is expected to be a noop if size is same\n  resize(options = {}) {\n    let {width, height} = options;\n    // for default framebuffer, just update the stored size\n    if (this.handle === null) {\n      assert(width === undefined && height === undefined);\n      this.width = this.gl.drawingBufferWidth;\n      this.height = this.gl.drawingBufferHeight;\n      return this;\n    }\n\n    if (width === undefined) {\n      width = this.gl.drawingBufferWidth;\n    }\n    if (height === undefined) {\n      height = this.gl.drawingBufferHeight;\n    }\n\n    if (width !== this.width && height !== this.height) {\n      log.log(2, `Resizing framebuffer ${this.id} to ${width}x${height}`)();\n    }\n    for (const attachmentPoint in this.attachments) {\n      this.attachments[attachmentPoint].resize({width, height});\n    }\n    this.width = width;\n    this.height = height;\n    return this;\n  }\n\n  // Attach from a map of attachments\n  attach(attachments, {clearAttachments = false, resizeAttachments = true} = {}) {\n    const newAttachments = {};\n\n    // Any current attachments need to be removed, add null values to map\n    if (clearAttachments) {\n      Object.keys(this.attachments).forEach(key => {\n        newAttachments[key] = null;\n      });\n    }\n\n    // Overlay the new attachments\n    Object.assign(newAttachments, attachments);\n\n    const prevHandle = this.gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n\n    // Walk the attachments\n    for (const key in newAttachments) {\n      // Ensure key is not undefined\n      assert(key !== undefined, 'Misspelled framebuffer binding point?');\n\n      const attachment = Number(key);\n\n      const descriptor = newAttachments[attachment];\n      let object = descriptor;\n      if (!object) {\n        this._unattach(attachment);\n      } else if (object instanceof Renderbuffer) {\n        this._attachRenderbuffer({attachment, renderbuffer: object});\n      } else if (Array.isArray(descriptor)) {\n        const [texture, layer = 0, level = 0] = descriptor;\n        object = texture;\n        this._attachTexture({attachment, texture, layer, level});\n      } else {\n        this._attachTexture({attachment, texture: object, layer: 0, level: 0});\n      }\n\n      // Resize objects\n      if (resizeAttachments && object) {\n        object.resize({width: this.width, height: this.height});\n      }\n    }\n\n    // @ts-ignore\n    this.gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n\n    // Assign to attachments and remove any nulls to get a clean attachment map\n    Object.assign(this.attachments, attachments);\n    Object.keys(this.attachments)\n      .filter(key => !this.attachments[key])\n      .forEach(key => {\n        delete this.attachments[key];\n      });\n  }\n\n  checkStatus() {\n    const {gl} = this;\n    const status = this.getStatus();\n    if (status !== gl.FRAMEBUFFER_COMPLETE) {\n      throw new Error(_getFrameBufferStatus(status));\n    }\n    return this;\n  }\n\n  getStatus() {\n    const {gl} = this;\n    const prevHandle = gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n    const status = gl.checkFramebufferStatus(GL.FRAMEBUFFER);\n    // @ts-ignore\n    gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n    return status;\n  }\n\n  clear(options = {}) {\n    const {color, depth, stencil, drawBuffers = []} = options;\n\n    // Bind framebuffer and delegate to global clear functions\n    const prevHandle = this.gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n\n    if (color || depth || stencil) {\n      clear(this.gl, {color, depth, stencil});\n    }\n\n    drawBuffers.forEach((value, drawBuffer) => {\n      clearBuffer(this.gl, {drawBuffer, value});\n    });\n\n    // @ts-ignore\n    this.gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n\n    return this;\n  }\n\n  // NOTE: Slow requires roundtrip to GPU\n  // App can provide pixelArray or have it auto allocated by this method\n  // @returns {Uint8Array|Uint16Array|FloatArray} - pixel array,\n  //  newly allocated by this method unless provided by app.\n  readPixels(opts = {}) {\n    log.error(\n      'Framebuffer.readPixels() is no logner supported, use readPixelsToArray(framebuffer)'\n    )();\n    return null;\n  }\n\n  // Reads data into provided buffer object asynchronously\n  // This function doesn't wait for copy to be complete, it programs GPU to perform a DMA transffer.\n  readPixelsToBuffer(opts = {}) {\n    log.error(\n      'Framebuffer.readPixelsToBuffer()is no logner supported, use readPixelsToBuffer(framebuffer)'\n    )();\n    return null;\n  }\n\n  // Reads pixels as a dataUrl\n  copyToDataUrl(opts = {}) {\n    log.error(\n      'Framebuffer.copyToDataUrl() is no logner supported, use copyToDataUrl(framebuffer)'\n    )();\n    return null;\n  }\n\n  // Reads pixels into an HTML Image\n  copyToImage(opts = {}) {\n    log.error('Framebuffer.copyToImage() is no logner supported, use copyToImage(framebuffer)')();\n    return null;\n  }\n\n  // copyToFramebuffer({width, height}) {\n  //   const scaleX = width / this.width;\n  //   const scaleY = height / this.height;\n  //   const scale = Math.min(scaleX, scaleY);\n  //   width = width * scale;\n  //   height = height * scale;\n  //   const scaledFramebuffer = new Framebuffer(this.gl, {width, height});\n  //   this.blit();\n  // }\n\n  // Copy a rectangle from a framebuffer attachment into a texture (at an offset)\n  // NOTE: assumes texture has enough storage allocated\n  // eslint-disable-next-line complexity\n  copyToTexture(opts = {}) {\n    log.error(\n      'Framebuffer.copyToTexture({...}) is no logner supported, use copyToTexture(source, target, opts})'\n    )();\n    return null;\n  }\n\n  // WEBGL2 INTERFACE\n\n  // Copies a rectangle of pixels between framebuffers\n  // eslint-disable-next-line complexity\n  blit(opts = {}) {\n    log.error('Framebuffer.blit({...}) is no logner supported, use blit(source, target, opts)')();\n    return null;\n  }\n\n  // signals to the GL that it need not preserve all pixels of a specified region of the framebuffer\n  invalidate({attachments = [], x = 0, y = 0, width, height}) {\n    const gl2 = assertWebGL2Context(this.gl);\n    const prevHandle = gl2.bindFramebuffer(GL.READ_FRAMEBUFFER, this.handle);\n    const invalidateAll = x === 0 && y === 0 && width === undefined && height === undefined;\n    if (invalidateAll) {\n      gl2.invalidateFramebuffer(GL.READ_FRAMEBUFFER, attachments);\n    } else {\n      // TODO - why does type checking fail on this line\n      // @ts-ignore\n      gl2.invalidateFramebuffer(GL.READ_FRAMEBUFFER, attachments, x, y, width, height);\n    }\n    // @ts-ignore\n    gl2.bindFramebuffer(GL.READ_FRAMEBUFFER, prevHandle);\n    return this;\n  }\n\n  // Return the value for `pname` of the specified attachment.\n  // The type returned is the type of the requested pname\n  getAttachmentParameter(attachment, pname, keys) {\n    let value = this._getAttachmentParameterFallback(pname);\n    if (value === null) {\n      this.gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n      value = this.gl.getFramebufferAttachmentParameter(GL.FRAMEBUFFER, attachment, pname);\n      this.gl.bindFramebuffer(GL.FRAMEBUFFER, null);\n    }\n    if (keys && value > 1000) {\n      // @ts-ignore\n      value = getKey(this.gl, value);\n    }\n    return value;\n  }\n\n  getAttachmentParameters(\n    attachment = GL.COLOR_ATTACHMENT0,\n    keys,\n    // @ts-ignore\n    parameters = this.constructor.ATTACHMENT_PARAMETERS || []\n  ) {\n    const values = {};\n    for (const pname of parameters) {\n      const key = keys ? getKey(this.gl, pname) : pname;\n      values[key] = this.getAttachmentParameter(attachment, pname, keys);\n    }\n    return values;\n  }\n\n  getParameters(keys = true) {\n    const attachments = Object.keys(this.attachments);\n    // if (this === this.gl.luma.defaultFramebuffer) {\n    //   attachments = [GL.COLOR_ATTACHMENT0, GL.DEPTH_STENCIL_ATTACHMENT];\n    // }\n    const parameters = {};\n    for (const attachmentName of attachments) {\n      const attachment = Number(attachmentName);\n      const key = keys ? getKey(this.gl, attachment) : attachment;\n      parameters[key] = this.getAttachmentParameters(attachment, keys);\n    }\n    return parameters;\n  }\n\n  // DEBUG\n\n  // Note: Will only work when called in an event handler\n  show() {\n    if (typeof window !== 'undefined') {\n      window.open(copyToDataUrl(this), 'luma-debug-texture');\n    }\n    return this;\n  }\n\n  log(logLevel = 0, message = '') {\n    if (logLevel > log.level || typeof window === 'undefined') {\n      return this;\n    }\n    message = message || `Framebuffer ${this.id}`;\n    const image = copyToDataUrl(this, {targetMaxHeight: 100});\n    log.image({logLevel, message, image}, message)();\n    return this;\n  }\n\n  // WEBGL INTERFACE\n  bind({target = GL.FRAMEBUFFER} = {}) {\n    this.gl.bindFramebuffer(target, this.handle);\n    return this;\n  }\n\n  unbind({target = GL.FRAMEBUFFER} = {}) {\n    this.gl.bindFramebuffer(target, null);\n    return this;\n  }\n\n  // PRIVATE METHODS\n\n  _createDefaultAttachments(color, depth, stencil, width, height) {\n    let defaultAttachments = null;\n\n    // Add a color buffer if requested and not supplied\n    if (color) {\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL.COLOR_ATTACHMENT0] = new Texture2D(this.gl, {\n        id: `${this.id}-color0`,\n        pixels: null, // reserves texture memory, but texels are undefined\n        format: GL.RGBA,\n        type: GL.UNSIGNED_BYTE,\n        width,\n        height,\n        // Note: Mipmapping can be disabled by texture resource when we resize the texture\n        // to a non-power-of-two dimenstion (NPOT texture) under WebGL1. To have consistant\n        // behavior we always disable mipmaps.\n        mipmaps: false,\n        // Set MIN and MAG filtering parameters so mipmaps are not used in sampling.\n        // Use LINEAR so subpixel algos like fxaa work.\n        // Set WRAP modes that support NPOT textures too.\n        parameters: {\n          [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,\n          [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n          [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n          [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n        }\n      });\n      // track to delete later\n      this.ownResources.push(defaultAttachments[GL.COLOR_ATTACHMENT0]);\n    }\n\n    if (depth && stencil) {\n      // TODO - handle separate stencil\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL.DEPTH_STENCIL_ATTACHMENT] = new Renderbuffer(this.gl, {\n        id: `${this.id}-depth-stencil`,\n        format: GL.DEPTH24_STENCIL8,\n        width,\n        height: 111\n      });\n      // track to delete later\n      this.ownResources.push(defaultAttachments[GL.DEPTH_STENCIL_ATTACHMENT]);\n      // TODO - optional texture\n      // new Texture2D(this.gl, {\n      //   id: `${this.id}-depth-stencil`,\n      //   format: GL.DEPTH24_STENCIL8,\n      //   dataFormat: GL.DEPTH_STENCIL,\n      //   type: GL.UNSIGNED_INT_24_8,\n      //   width,\n      //   height,\n      //   mipmaps: false\n      // });\n    } else if (depth) {\n      // Add a depth buffer if requested and not supplied\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL.DEPTH_ATTACHMENT] = new Renderbuffer(this.gl, {\n        id: `${this.id}-depth`,\n        format: GL.DEPTH_COMPONENT16,\n        width,\n        height\n      });\n      // track to delete later\n      this.ownResources.push(defaultAttachments[GL.DEPTH_ATTACHMENT]);\n    } else if (stencil) {\n      // TODO - handle separate stencil\n      assert(false);\n    }\n\n    return defaultAttachments;\n  }\n\n  _unattach(attachment) {\n    const oldAttachment = this.attachments[attachment];\n    if (!oldAttachment) {\n      return;\n    }\n    if (oldAttachment instanceof Renderbuffer) {\n      // render buffer\n      this.gl.framebufferRenderbuffer(GL.FRAMEBUFFER, attachment, GL.RENDERBUFFER, null);\n    } else {\n      // Must be a texture attachment\n      this.gl.framebufferTexture2D(GL.FRAMEBUFFER, attachment, GL.TEXTURE_2D, null, 0);\n    }\n    delete this.attachments[attachment];\n  }\n\n  _attachRenderbuffer({attachment = GL.COLOR_ATTACHMENT0, renderbuffer}) {\n    const {gl} = this;\n    // TODO - is the bind needed?\n    // gl.bindRenderbuffer(GL.RENDERBUFFER, renderbuffer.handle);\n    gl.framebufferRenderbuffer(GL.FRAMEBUFFER, attachment, GL.RENDERBUFFER, renderbuffer.handle);\n    // TODO - is the unbind needed?\n    // gl.bindRenderbuffer(GL.RENDERBUFFER, null);\n\n    this.attachments[attachment] = renderbuffer;\n  }\n\n  // layer = 0 - index into Texture2DArray and Texture3D or face for `TextureCubeMap`\n  // level = 0 - mipmapLevel (must be 0 in WebGL1)\n  _attachTexture({attachment = GL.COLOR_ATTACHMENT0, texture, layer, level}) {\n    const {gl} = this;\n    gl.bindTexture(texture.target, texture.handle);\n\n    switch (texture.target) {\n      case GL.TEXTURE_2D_ARRAY:\n      case GL.TEXTURE_3D:\n        const gl2 = assertWebGL2Context(gl);\n        gl2.framebufferTextureLayer(GL.FRAMEBUFFER, attachment, texture.target, level, layer);\n        break;\n\n      case GL.TEXTURE_CUBE_MAP:\n        // layer must be a cubemap face (or if index, converted to cube map face)\n        const face = mapIndexToCubeMapFace(layer);\n        gl.framebufferTexture2D(GL.FRAMEBUFFER, attachment, face, texture.handle, level);\n        break;\n\n      case GL.TEXTURE_2D:\n        gl.framebufferTexture2D(GL.FRAMEBUFFER, attachment, GL.TEXTURE_2D, texture.handle, level);\n        break;\n\n      default:\n        assert(false, 'Illegal texture type');\n    }\n\n    gl.bindTexture(texture.target, null);\n    this.attachments[attachment] = texture;\n  }\n\n  // Expects framebuffer to be bound\n  _setReadBuffer(readBuffer) {\n    const gl2 = getWebGL2Context(this.gl);\n    if (gl2) {\n      gl2.readBuffer(readBuffer);\n    } else {\n      // Setting to color attachment 0 is a noop, so allow it in WebGL1\n      assert(\n        readBuffer === GL.COLOR_ATTACHMENT0 || readBuffer === GL.BACK,\n        ERR_MULTIPLE_RENDERTARGETS\n      );\n    }\n    this.readBuffer = readBuffer;\n  }\n\n  // Expects framebuffer to be bound\n  _setDrawBuffers(drawBuffers) {\n    const {gl} = this;\n    const gl2 = assertWebGL2Context(gl);\n    if (gl2) {\n      gl2.drawBuffers(drawBuffers);\n    } else {\n      // TODO - is this not handled by polyfills?\n      const ext = gl.getExtension('WEBGL_draw_buffers');\n      if (ext) {\n        ext.drawBuffersWEBGL(drawBuffers);\n      } else {\n        // Setting a single draw buffer to color attachment 0 is a noop, allow in WebGL1\n        assert(\n          drawBuffers.length === 1 &&\n            (drawBuffers[0] === GL.COLOR_ATTACHMENT0 || drawBuffers[0] === GL.BACK),\n          ERR_MULTIPLE_RENDERTARGETS\n        );\n      }\n    }\n    this.drawBuffers = drawBuffers;\n  }\n\n  // Attempt to provide workable defaults for WebGL2 symbols under WebGL1\n  // null means OK to query\n  // TODO - move to webgl1 polyfills\n  /* eslint-disable complexity */\n  _getAttachmentParameterFallback(pname) {\n    const caps = getFeatures(this.gl);\n\n    switch (pname) {\n      case GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: // GLint\n        return !caps.WEBGL2 ? 0 : null;\n      case GL.FRAMEBUFFER_ATTACHMENT_RED_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: // GLint\n        return !caps.WEBGL2 ? 8 : null;\n      case GL.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: // GLenum\n        return !caps.WEBGL2 ? GL.UNSIGNED_INT : null;\n      case GL.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING:\n        return !caps.WEBGL2 && !caps.EXT_sRGB ? GL.LINEAR : null;\n      default:\n        return null;\n    }\n  }\n  /* eslint-enable complexity */\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createFramebuffer();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteFramebuffer(this.handle);\n  }\n\n  _bindHandle(handle) {\n    return this.gl.bindFramebuffer(GL.FRAMEBUFFER, handle);\n  }\n}\n\n// PUBLIC METHODS\n\n// Map an index to a cube map face constant\nfunction mapIndexToCubeMapFace(layer) {\n  // TEXTURE_CUBE_MAP_POSITIVE_X is a big value (0x8515)\n  // if smaller assume layer is index, otherwise assume it is already a cube map face constant\n  return layer < GL.TEXTURE_CUBE_MAP_POSITIVE_X ? layer + GL.TEXTURE_CUBE_MAP_POSITIVE_X : layer;\n}\n\n// Helper METHODS\n// Get a string describing the framebuffer error if installed\nfunction _getFrameBufferStatus(status) {\n  // Use error mapping if installed\n  // @ts-ignore\n  const STATUS = Framebuffer.STATUS || {};\n  return STATUS[status] || `Framebuffer error ${status}`;\n}\n\nexport const FRAMEBUFFER_ATTACHMENT_PARAMETERS = [\n  GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME, // WebGLRenderbuffer or WebGLTexture\n  GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE, // GL.RENDERBUFFER, GL.TEXTURE, GL.NONE\n  // GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE, // GL.TEXTURE_CUBE_MAP_POSITIVE_X, etc.\n  // GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL, // GLint\n  // EXT_sRGB or WebGL2\n  GL.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING, // GL.LINEAR, GL.SRBG\n  // WebGL2\n  // GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_RED_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE // GLint\n  // GL.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE\n  // GL.FLOAT, GL.INT, GL.UNSIGNED_INT, GL.SIGNED_NORMALIZED, OR GL.UNSIGNED_NORMALIZED.\n];\n\nFramebuffer.ATTACHMENT_PARAMETERS = FRAMEBUFFER_ATTACHMENT_PARAMETERS;\n"],"file":"framebuffer.js"}