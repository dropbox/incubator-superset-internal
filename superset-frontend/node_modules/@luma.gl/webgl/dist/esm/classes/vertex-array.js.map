{"version":3,"sources":["../../../src/classes/vertex-array.js"],"names":["log","Accessor","Buffer","VertexArrayObject","assert","stubRemovedMethods","ERR_ATTRIBUTE_TYPE","MULTI_LOCATION_ATTRIBUTE_REGEXP","DEPRECATIONS_V6","VertexArray","constructor","gl","opts","id","program","configuration","elements","elementsAccessor","values","accessors","unused","drawParams","buffer","attributes","vertexArrayObject","initialize","Object","seal","delete","props","reset","bindOnUse","setProps","MAX_ATTRIBUTES","Array","fill","setAttributes","setElementBuffer","clearDrawParams","getDrawParams","_updateDrawParams","assign","bind","locationOrName","value","_setAttribute","bindBuffer","elementBuffer","accessor","setBuffer","appAccessor","target","location","_resolveLocationAndAccessor","setConstant","arrayValue","size","length","_normalizeConstantArrayValue","enable","unbindBuffers","disableVertexAttribArray","handle","vertexAttribPointer","bindBuffers","bindForDraw","vertexCount","instanceCount","func","_setConstantAttributes","valueAccessor","INVALID_RESULT","name","_getAttributeIndex","Number","isFinite","once","accessInfo","_getAttributeInfo","currentAccessor","resolve","type","attributeName","getAttributeInfo","multiLocation","exec","locationOffset","getAttributeLocation","isArray","ArrayBuffer","isView","constant","Error","elementCount","Math","max","_setConstantAttributeZero","_setConstantAttribute","isSupported","constantAttributeZero","getConstantBuffer","isIndexed","isInstanced","indexCount","Infinity","_updateDrawParamsForLocation","getElementCount","indexType","indexOffset","offset","divisor","getVertexCount","min","setElements","deprecated"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {log} from '@luma.gl/gltools';\nimport Accessor from './accessor';\nimport Buffer from './buffer';\nimport VertexArrayObject from './vertex-array-object';\nimport {assert, stubRemovedMethods} from '../utils';\n\nconst ERR_ATTRIBUTE_TYPE =\n  'VertexArray: attributes must be Buffers or constants (i.e. typed array)';\n\n// This is done to support mat type attributes.\n// See section \"Notes about setting mat type attributes\"\n// in vertex-array.md\nconst MULTI_LOCATION_ATTRIBUTE_REGEXP = /^(.+)__LOCATION_([0-9]+)$/;\n\nconst DEPRECATIONS_V6 = [\n  'setBuffers',\n  'setGeneric',\n  'clearBindings',\n  'setLocations',\n  'setGenericValues',\n  'setDivisor',\n  'enable',\n  'disable'\n];\n\nexport default class VertexArray {\n  constructor(gl, opts = {}) {\n    // Use program's id if program is supplied but no id is supplied\n    const id = opts.id || (opts.program && opts.program.id);\n    // super(gl, Object.assign({}, opts, {id}));\n\n    this.id = id;\n    this.gl = gl;\n    this.configuration = null;\n\n    // Extracted information\n    this.elements = null;\n    this.elementsAccessor = null;\n    this.values = null;\n    this.accessors = null;\n    this.unused = null;\n    this.drawParams = null;\n    this.buffer = null; // For attribute 0 on desktops, and created when unbinding buffers\n\n    this.attributes = {};\n\n    this.vertexArrayObject = new VertexArrayObject(gl);\n\n    // Issue errors when using removed methods\n    stubRemovedMethods(this, 'VertexArray', 'v6.0', DEPRECATIONS_V6);\n\n    this.initialize(opts);\n    Object.seal(this);\n  }\n\n  delete() {\n    if (this.buffer) {\n      this.buffer.delete();\n    }\n\n    this.vertexArrayObject.delete();\n  }\n\n  initialize(props = {}) {\n    this.reset();\n    this.configuration = null;\n    this.bindOnUse = false;\n    return this.setProps(props);\n  }\n\n  // Resets all attributes (to default valued constants)\n  reset() {\n    // this.vertexArrayObject.reset();\n\n    this.elements = null;\n    this.elementsAccessor = null;\n    const {MAX_ATTRIBUTES} = this.vertexArrayObject;\n    this.values = new Array(MAX_ATTRIBUTES).fill(null);\n    this.accessors = new Array(MAX_ATTRIBUTES).fill(null);\n    this.unused = {};\n\n    // Auto detects draw params\n    this.drawParams = null;\n\n    return this;\n  }\n\n  setProps(props) {\n    if ('program' in props) {\n      this.configuration = props.program && props.program.configuration;\n    }\n    if ('configuration' in props) {\n      this.configuration = props.configuration;\n    }\n    if ('attributes' in props) {\n      this.setAttributes(props.attributes);\n    }\n    if ('elements' in props) {\n      this.setElementBuffer(props.elements);\n    }\n    if ('bindOnUse' in props) {\n      props = props.bindOnUse;\n    }\n    return this;\n  }\n\n  // Automatically called if buffers changed through VertexArray API\n  clearDrawParams() {\n    this.drawParams = null;\n  }\n\n  getDrawParams() {\n    // Auto deduced draw parameters\n    this.drawParams = this.drawParams || this._updateDrawParams();\n\n    return this.drawParams;\n  }\n\n  // Set (bind) an array or map of vertex array buffers, either in numbered or named locations.\n  // For names that are not present in `location`, the supplied buffers will be ignored.\n  // if a single buffer of type GL.ELEMENT_ARRAY_BUFFER is present, it will be set as elements\n  //   Signatures:\n  //     {attributeName: buffer}\n  //     {attributeName: [buffer, accessor]}\n  //     {attributeName: (typed) array} => constant\n  setAttributes(attributes) {\n    Object.assign(this.attributes, attributes);\n    this.vertexArrayObject.bind(() => {\n      for (const locationOrName in attributes) {\n        const value = attributes[locationOrName];\n        this._setAttribute(locationOrName, value);\n      }\n      // Make sure we don't leave any bindings\n      this.gl.bindBuffer(GL.ARRAY_BUFFER, null);\n    });\n\n    return this;\n  }\n\n  // Set (bind) an elements buffer, for indexed rendering.\n  // Must be a Buffer bound to GL.ELEMENT_ARRAY_BUFFER. Constants not supported\n  setElementBuffer(elementBuffer = null, accessor = {}) {\n    this.elements = elementBuffer; // Save value for debugging\n    this.elementsAccessor = accessor;\n    this.clearDrawParams();\n    this.vertexArrayObject.setElementBuffer(elementBuffer, accessor);\n\n    return this;\n  }\n\n  // Set a location in vertex attributes array to a buffer\n  setBuffer(locationOrName, buffer, appAccessor = {}) {\n    // Check target\n    if (buffer.target === GL.ELEMENT_ARRAY_BUFFER) {\n      return this.setElementBuffer(buffer, appAccessor);\n    }\n\n    const {location, accessor} = this._resolveLocationAndAccessor(\n      locationOrName,\n      buffer,\n      buffer.accessor,\n      appAccessor\n    );\n\n    if (location >= 0) {\n      this.values[location] = buffer;\n      this.accessors[location] = accessor;\n      this.clearDrawParams();\n      this.vertexArrayObject.setBuffer(location, buffer, accessor);\n    }\n\n    return this;\n  }\n\n  // Set attribute to constant value (small typed array corresponding to one vertex' worth of data)\n  setConstant(locationOrName, arrayValue, appAccessor = {}) {\n    const {location, accessor} = this._resolveLocationAndAccessor(\n      locationOrName,\n      arrayValue,\n      // Ensure that size isn't taken from program for multi-column\n      // attributes\n      Object.assign({size: arrayValue.length}, appAccessor)\n    );\n\n    if (location >= 0) {\n      arrayValue = this.vertexArrayObject._normalizeConstantArrayValue(arrayValue);\n\n      this.values[location] = arrayValue;\n      this.accessors[location] = accessor;\n      this.clearDrawParams();\n\n      // NOTE: We set the actual constant value later on bind. We can't set the value now since\n      // constants are global and affect all other VertexArrays that have disabled attributes\n      // in the same location.\n      // We do disable the attribute which makes it use the global constant value at that location\n      this.vertexArrayObject.enable(location, false);\n    }\n\n    return this;\n  }\n\n  // Workaround for Chrome TransformFeedback binding issue\n  // If required, unbind temporarily to avoid conflicting with TransformFeedback\n  unbindBuffers() {\n    this.vertexArrayObject.bind(() => {\n      if (this.elements) {\n        this.vertexArrayObject.setElementBuffer(null);\n      }\n\n      // Chrome does not like buffers that are bound to several binding points,\n      // so we need to offer and unbind facility\n      // WebGL offers disabling, but no clear way to set a VertexArray buffer to `null`\n      // So we just bind all the attributes to the dummy \"attribute zero\" buffer\n      this.buffer = this.buffer || new Buffer(this.gl, {accessor: {size: 4}});\n\n      for (let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n        if (this.values[location] instanceof Buffer) {\n          this.gl.disableVertexAttribArray(location);\n          this.gl.bindBuffer(GL.ARRAY_BUFFER, this.buffer.handle);\n          this.gl.vertexAttribPointer(location, 1, GL.FLOAT, false, 0, 0);\n        }\n      }\n    });\n    return this;\n  }\n\n  // Workaround for Chrome TransformFeedback binding issue\n  // If required, rebind rebind after temporary unbind\n  bindBuffers() {\n    this.vertexArrayObject.bind(() => {\n      if (this.elements) {\n        this.setElementBuffer(this.elements);\n      }\n\n      for (let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n        const buffer = this.values[location];\n        if (buffer instanceof Buffer) {\n          this.setBuffer(location, buffer);\n        }\n      }\n    });\n    return this;\n  }\n\n  // Bind for use\n  // When a vertex array is about to be used, we must:\n  // - Set constant attributes (since these are stored on the context and reset on bind)\n  // - Check if we need to initialize the buffer\n  bindForDraw(vertexCount, instanceCount, func) {\n    let value;\n\n    this.vertexArrayObject.bind(() => {\n      // Make sure that any constant attributes are updated (stored on the context, not the VAO)\n      // Also handles attribute 0\n      this._setConstantAttributes(vertexCount, instanceCount);\n\n      value = func();\n    });\n\n    return value;\n  }\n\n  // PRIVATE\n\n  // Resolve locations and accessors\n  _resolveLocationAndAccessor(locationOrName, value, valueAccessor, appAccessor) {\n    const INVALID_RESULT = {\n      location: -1,\n      accessor: null\n    };\n\n    const {location, name} = this._getAttributeIndex(locationOrName);\n    if (!Number.isFinite(location) || location < 0) {\n      this.unused[locationOrName] = value;\n      log.once(3, () => `unused value ${locationOrName} in ${this.id}`)();\n      return INVALID_RESULT;\n    }\n\n    const accessInfo = this._getAttributeInfo(name || location);\n\n    // Attribute location wasn't directly found.\n    // Likely due to multi-location attributes (e.g. matrix)\n    if (!accessInfo) {\n      return INVALID_RESULT;\n    }\n\n    // Resolve the partial accessors into a final accessor\n    const currentAccessor = this.accessors[location] || {};\n    const accessor = Accessor.resolve(\n      accessInfo.accessor,\n      currentAccessor,\n      valueAccessor,\n      appAccessor\n    );\n\n    const {size, type} = accessor;\n    assert(Number.isFinite(size) && Number.isFinite(type));\n\n    return {location, accessor};\n  }\n\n  _getAttributeInfo(attributeName) {\n    return this.configuration && this.configuration.getAttributeInfo(attributeName);\n  }\n\n  _getAttributeIndex(locationOrName) {\n    const location = Number(locationOrName);\n    if (Number.isFinite(location)) {\n      return {location};\n    }\n\n    const multiLocation = MULTI_LOCATION_ATTRIBUTE_REGEXP.exec(locationOrName);\n    const name = multiLocation ? multiLocation[1] : locationOrName;\n    const locationOffset = multiLocation ? Number(multiLocation[2]) : 0;\n\n    if (this.configuration) {\n      return {\n        location: this.configuration.getAttributeLocation(name) + locationOffset,\n        name\n      };\n    }\n\n    return {location: -1};\n  }\n\n  _setAttribute(locationOrName, value) {\n    if (value instanceof Buffer) {\n      //  Signature: {attributeName: Buffer}\n      this.setBuffer(locationOrName, value);\n    } else if (Array.isArray(value) && value.length && value[0] instanceof Buffer) {\n      // Signature: {attributeName: [buffer, accessor]}\n      const buffer = value[0];\n      const accessor = value[1];\n      this.setBuffer(locationOrName, buffer, accessor);\n    } else if (ArrayBuffer.isView(value) || Array.isArray(value)) {\n      // Signature: {attributeName: constant}, constant == short (typed) array\n      const constant = value;\n      this.setConstant(locationOrName, constant);\n    } else if (value.buffer instanceof Buffer) {\n      // luma.gl v7: Support accessor objects with 'buffer' field\n      // for interleaved data\n      // Signature: {attributeName: {...accessor, buffer}}\n      const accessor = value;\n      this.setBuffer(locationOrName, accessor.buffer, accessor);\n    } else {\n      throw new Error(ERR_ATTRIBUTE_TYPE);\n    }\n  }\n\n  // Updates all constant attribute values (constants are used when vertex attributes are disabled).\n  // This needs to be done repeatedly since in contrast to buffer bindings,\n  // constants are stored on the WebGL context, not the VAO\n  _setConstantAttributes(vertexCount, instanceCount) {\n    // TODO - use accessor to determine what length to use\n    const elementCount = Math.max(vertexCount | 0, instanceCount | 0);\n    let constant = this.values[0];\n    if (ArrayBuffer.isView(constant)) {\n      this._setConstantAttributeZero(constant, elementCount);\n    }\n\n    for (let location = 1; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n      constant = this.values[location];\n      if (ArrayBuffer.isView(constant)) {\n        this._setConstantAttribute(location, constant);\n      }\n    }\n  }\n\n  _setConstantAttributeZero(constant, elementCount) {\n    if (VertexArrayObject.isSupported(this.gl, {constantAttributeZero: true})) {\n      this._setConstantAttribute(0, constant);\n      return;\n    }\n\n    // Get a dummy buffer populated with repeated constants\n    const buffer = this.vertexArrayObject.getConstantBuffer(elementCount, constant);\n\n    // Set the buffer on location 0\n    this.vertexArrayObject.setBuffer(0, buffer, this.accessors[0]);\n  }\n\n  _setConstantAttribute(location, constant) {\n    VertexArrayObject.setConstant(this.gl, location, constant);\n  }\n\n  // Walks the buffers and updates draw parameters\n  _updateDrawParams() {\n    const drawParams = {\n      isIndexed: false,\n      isInstanced: false,\n      indexCount: Infinity,\n      vertexCount: Infinity,\n      instanceCount: Infinity\n    };\n\n    for (let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n      this._updateDrawParamsForLocation(drawParams, location);\n    }\n\n    if (this.elements) {\n      // indexing is autodetected - buffer with target GL.ELEMENT_ARRAY_BUFFER\n      // index type is saved for drawElement calls\n      drawParams.elementCount = this.elements.getElementCount(this.elements.accessor);\n      drawParams.isIndexed = true;\n      drawParams.indexType = this.elementsAccessor.type || this.elements.accessor.type;\n      drawParams.indexOffset = this.elementsAccessor.offset || 0;\n    }\n\n    // Post-calculation checks\n    if (drawParams.indexCount === Infinity) {\n      drawParams.indexCount = 0;\n    }\n    if (drawParams.vertexCount === Infinity) {\n      drawParams.vertexCount = 0;\n    }\n    if (drawParams.instanceCount === Infinity) {\n      drawParams.instanceCount = 0;\n    }\n\n    return drawParams;\n  }\n\n  _updateDrawParamsForLocation(drawParams, location) {\n    const value = this.values[location];\n    const accessor = this.accessors[location];\n\n    if (!value) {\n      return;\n    }\n\n    // Check if instanced (whether buffer or constant)\n    const {divisor} = accessor;\n    const isInstanced = divisor > 0;\n    drawParams.isInstanced = drawParams.isInstanced || isInstanced;\n\n    if (value instanceof Buffer) {\n      const buffer = value;\n\n      if (isInstanced) {\n        // instance attribute\n        const instanceCount = buffer.getVertexCount(accessor);\n        drawParams.instanceCount = Math.min(drawParams.instanceCount, instanceCount);\n      } else {\n        // normal attribute\n        const vertexCount = buffer.getVertexCount(accessor);\n        drawParams.vertexCount = Math.min(drawParams.vertexCount, vertexCount);\n      }\n    }\n  }\n\n  // DEPRECATED in v6.x - but not warnings not properly implemented\n\n  setElements(elementBuffer = null, accessor = {}) {\n    log.deprecated('setElements', 'setElementBuffer')();\n    return this.setElementBuffer(elementBuffer, accessor);\n  }\n}\n"],"file":"vertex-array.js"}