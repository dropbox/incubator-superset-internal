{"version":3,"sources":["../../../src/classes/framebuffer.js"],"names":["getWebGL2Context","assertWebGL2Context","log","Resource","Texture2D","Renderbuffer","clear","clearBuffer","copyToDataUrl","getFeatures","getKey","assert","ERR_MULTIPLE_RENDERTARGETS","Framebuffer","isSupported","gl","options","colorBufferFloat","colorBufferHalfFloat","supported","Boolean","getExtension","getDefaultFramebuffer","luma","defaultFramebuffer","id","handle","attachments","MAX_COLOR_ATTACHMENTS","gl2","getParameter","MAX_DRAW_BUFFERS","constructor","opts","width","height","readBuffer","drawBuffers","ownResources","initialize","Object","seal","color","texture","depth","stencil","check","undefined","attachment","target","object","Array","isArray","resize","_createDefaultAttachments","update","clearAttachments","checkStatus","delete","resource","resizeAttachments","attach","prevHandle","bindFramebuffer","_setReadBuffer","_setDrawBuffers","drawingBufferWidth","drawingBufferHeight","attachmentPoint","newAttachments","keys","forEach","key","assign","Number","descriptor","_unattach","_attachRenderbuffer","renderbuffer","layer","level","_attachTexture","filter","status","getStatus","Error","_getFrameBufferStatus","checkFramebufferStatus","value","drawBuffer","readPixels","error","readPixelsToBuffer","copyToImage","copyToTexture","blit","invalidate","x","y","invalidateAll","invalidateFramebuffer","getAttachmentParameter","pname","_getAttachmentParameterFallback","getFramebufferAttachmentParameter","getAttachmentParameters","parameters","ATTACHMENT_PARAMETERS","values","getParameters","attachmentName","show","window","open","logLevel","message","image","targetMaxHeight","bind","unbind","defaultAttachments","pixels","format","type","mipmaps","push","oldAttachment","framebufferRenderbuffer","framebufferTexture2D","bindTexture","framebufferTextureLayer","face","mapIndexToCubeMapFace","ext","drawBuffersWEBGL","length","caps","WEBGL2","EXT_sRGB","_createHandle","createFramebuffer","_deleteHandle","deleteFramebuffer","_bindHandle","STATUS","FRAMEBUFFER_ATTACHMENT_PARAMETERS"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {getWebGL2Context, assertWebGL2Context, log} from '@luma.gl/gltools';\nimport Resource from './resource';\nimport Texture2D from './texture-2d';\nimport Renderbuffer from './renderbuffer';\nimport {clear, clearBuffer} from './clear';\nimport {copyToDataUrl} from './copy-and-blit.js';\n\nimport {getFeatures} from '../features';\nimport {getKey} from '../webgl-utils';\nimport {assert} from '../utils';\n\nconst ERR_MULTIPLE_RENDERTARGETS = 'Multiple render targets not supported';\n\nexport default class Framebuffer extends Resource {\n  static isSupported(gl, options = {}) {\n    const {\n      colorBufferFloat, // Whether floating point textures can be rendered and read\n      colorBufferHalfFloat // Whether half float textures can be rendered and read\n    } = options;\n    let supported = true;\n\n    if (colorBufferFloat) {\n      supported = Boolean(\n        // WebGL 2\n        gl.getExtension('EXT_color_buffer_float') ||\n          // WebGL 1, not exposed on all platforms\n          gl.getExtension('WEBGL_color_buffer_float') ||\n          // WebGL 1, implicitly enables float render targets https://www.khronos.org/registry/webgl/extensions/OES_texture_float/\n          gl.getExtension('OES_texture_float')\n      );\n    }\n\n    if (colorBufferHalfFloat) {\n      supported =\n        supported &&\n        Boolean(\n          // WebGL 2\n          gl.getExtension('EXT_color_buffer_float') ||\n            // WebGL 1\n            gl.getExtension('EXT_color_buffer_half_float')\n        );\n    }\n\n    return supported;\n  }\n\n  // Create a Framebuffer wrapper for the default framebuffer (target === null)\n  static getDefaultFramebuffer(gl) {\n    gl.luma = gl.luma || {};\n    gl.luma.defaultFramebuffer =\n      gl.luma.defaultFramebuffer ||\n      new Framebuffer(gl, {\n        id: 'default-framebuffer',\n        handle: null,\n        attachments: {}\n      });\n    // TODO - can we query for and get a handle to the GL.FRONT renderbuffer?\n    return gl.luma.defaultFramebuffer;\n  }\n\n  get MAX_COLOR_ATTACHMENTS() {\n    const gl2 = assertWebGL2Context(this.gl);\n    return gl2.getParameter(gl2.MAX_COLOR_ATTACHMENTS);\n  }\n\n  get MAX_DRAW_BUFFERS() {\n    const gl2 = assertWebGL2Context(this.gl);\n    return gl2.getParameter(gl2.MAX_DRAW_BUFFERS);\n  }\n\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    // Public members\n    this.width = null;\n    this.height = null;\n    this.attachments = {};\n    this.readBuffer = GL.COLOR_ATTACHMENT0;\n    this.drawBuffers = [GL.COLOR_ATTACHMENT0];\n    this.ownResources = [];\n    this.initialize(opts);\n\n    Object.seal(this);\n  }\n\n  get color() {\n    return this.attachments[GL.COLOR_ATTACHMENT0] || null;\n  }\n\n  get texture() {\n    return this.attachments[GL.COLOR_ATTACHMENT0] || null;\n  }\n\n  get depth() {\n    return (\n      this.attachments[GL.DEPTH_ATTACHMENT] || this.attachments[GL.DEPTH_STENCIL_ATTACHMENT] || null\n    );\n  }\n\n  get stencil() {\n    return (\n      this.attachments[GL.STENCIL_ATTACHMENT] ||\n      this.attachments[GL.DEPTH_STENCIL_ATTACHMENT] ||\n      null\n    );\n  }\n\n  initialize({\n    width = 1,\n    height = 1,\n    attachments = null,\n    color = true,\n    depth = true,\n    stencil = false,\n    check = true,\n    readBuffer = undefined,\n    drawBuffers = undefined\n  }) {\n    assert(width >= 0 && height >= 0, 'Width and height need to be integers');\n\n    // Store actual width and height for diffing\n    this.width = width;\n    this.height = height;\n\n    // Resize any provided attachments - note that resize only resizes if needed\n    // Note: A framebuffer has no separate size, it is defined by its attachments (which must agree)\n    if (attachments) {\n      for (const attachment in attachments) {\n        const target = attachments[attachment];\n        const object = Array.isArray(target) ? target[0] : target;\n        object.resize({width, height});\n      }\n    } else {\n      // Create any requested default attachments\n      attachments = this._createDefaultAttachments(color, depth, stencil, width, height);\n    }\n\n    this.update({clearAttachments: true, attachments, readBuffer, drawBuffers});\n\n    // Checks that framebuffer was properly set up, if not, throws an explanatory error\n    if (attachments && check) {\n      this.checkStatus();\n    }\n  }\n\n  delete() {\n    for (const resource of this.ownResources) {\n      resource.delete();\n    }\n    super.delete();\n    return this;\n  }\n\n  update({\n    attachments = {},\n    readBuffer,\n    drawBuffers,\n    clearAttachments = false,\n    resizeAttachments = true\n  }) {\n    this.attach(attachments, {clearAttachments, resizeAttachments});\n\n    const {gl} = this;\n    // Multiple render target support, set read buffer and draw buffers\n    const prevHandle = gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n    if (readBuffer) {\n      this._setReadBuffer(readBuffer);\n    }\n    if (drawBuffers) {\n      this._setDrawBuffers(drawBuffers);\n    }\n    // @ts-ignore\n    gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n\n    return this;\n  }\n\n  // Attachment resize is expected to be a noop if size is same\n  resize(options = {}) {\n    let {width, height} = options;\n    // for default framebuffer, just update the stored size\n    if (this.handle === null) {\n      assert(width === undefined && height === undefined);\n      this.width = this.gl.drawingBufferWidth;\n      this.height = this.gl.drawingBufferHeight;\n      return this;\n    }\n\n    if (width === undefined) {\n      width = this.gl.drawingBufferWidth;\n    }\n    if (height === undefined) {\n      height = this.gl.drawingBufferHeight;\n    }\n\n    if (width !== this.width && height !== this.height) {\n      log.log(2, `Resizing framebuffer ${this.id} to ${width}x${height}`)();\n    }\n    for (const attachmentPoint in this.attachments) {\n      this.attachments[attachmentPoint].resize({width, height});\n    }\n    this.width = width;\n    this.height = height;\n    return this;\n  }\n\n  // Attach from a map of attachments\n  attach(attachments, {clearAttachments = false, resizeAttachments = true} = {}) {\n    const newAttachments = {};\n\n    // Any current attachments need to be removed, add null values to map\n    if (clearAttachments) {\n      Object.keys(this.attachments).forEach(key => {\n        newAttachments[key] = null;\n      });\n    }\n\n    // Overlay the new attachments\n    Object.assign(newAttachments, attachments);\n\n    const prevHandle = this.gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n\n    // Walk the attachments\n    for (const key in newAttachments) {\n      // Ensure key is not undefined\n      assert(key !== undefined, 'Misspelled framebuffer binding point?');\n\n      const attachment = Number(key);\n\n      const descriptor = newAttachments[attachment];\n      let object = descriptor;\n      if (!object) {\n        this._unattach(attachment);\n      } else if (object instanceof Renderbuffer) {\n        this._attachRenderbuffer({attachment, renderbuffer: object});\n      } else if (Array.isArray(descriptor)) {\n        const [texture, layer = 0, level = 0] = descriptor;\n        object = texture;\n        this._attachTexture({attachment, texture, layer, level});\n      } else {\n        this._attachTexture({attachment, texture: object, layer: 0, level: 0});\n      }\n\n      // Resize objects\n      if (resizeAttachments && object) {\n        object.resize({width: this.width, height: this.height});\n      }\n    }\n\n    // @ts-ignore\n    this.gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n\n    // Assign to attachments and remove any nulls to get a clean attachment map\n    Object.assign(this.attachments, attachments);\n    Object.keys(this.attachments)\n      .filter(key => !this.attachments[key])\n      .forEach(key => {\n        delete this.attachments[key];\n      });\n  }\n\n  checkStatus() {\n    const {gl} = this;\n    const status = this.getStatus();\n    if (status !== gl.FRAMEBUFFER_COMPLETE) {\n      throw new Error(_getFrameBufferStatus(status));\n    }\n    return this;\n  }\n\n  getStatus() {\n    const {gl} = this;\n    const prevHandle = gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n    const status = gl.checkFramebufferStatus(GL.FRAMEBUFFER);\n    // @ts-ignore\n    gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n    return status;\n  }\n\n  clear(options = {}) {\n    const {color, depth, stencil, drawBuffers = []} = options;\n\n    // Bind framebuffer and delegate to global clear functions\n    const prevHandle = this.gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n\n    if (color || depth || stencil) {\n      clear(this.gl, {color, depth, stencil});\n    }\n\n    drawBuffers.forEach((value, drawBuffer) => {\n      clearBuffer(this.gl, {drawBuffer, value});\n    });\n\n    // @ts-ignore\n    this.gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n\n    return this;\n  }\n\n  // NOTE: Slow requires roundtrip to GPU\n  // App can provide pixelArray or have it auto allocated by this method\n  // @returns {Uint8Array|Uint16Array|FloatArray} - pixel array,\n  //  newly allocated by this method unless provided by app.\n  readPixels(opts = {}) {\n    log.error(\n      'Framebuffer.readPixels() is no logner supported, use readPixelsToArray(framebuffer)'\n    )();\n    return null;\n  }\n\n  // Reads data into provided buffer object asynchronously\n  // This function doesn't wait for copy to be complete, it programs GPU to perform a DMA transffer.\n  readPixelsToBuffer(opts = {}) {\n    log.error(\n      'Framebuffer.readPixelsToBuffer()is no logner supported, use readPixelsToBuffer(framebuffer)'\n    )();\n    return null;\n  }\n\n  // Reads pixels as a dataUrl\n  copyToDataUrl(opts = {}) {\n    log.error(\n      'Framebuffer.copyToDataUrl() is no logner supported, use copyToDataUrl(framebuffer)'\n    )();\n    return null;\n  }\n\n  // Reads pixels into an HTML Image\n  copyToImage(opts = {}) {\n    log.error('Framebuffer.copyToImage() is no logner supported, use copyToImage(framebuffer)')();\n    return null;\n  }\n\n  // copyToFramebuffer({width, height}) {\n  //   const scaleX = width / this.width;\n  //   const scaleY = height / this.height;\n  //   const scale = Math.min(scaleX, scaleY);\n  //   width = width * scale;\n  //   height = height * scale;\n  //   const scaledFramebuffer = new Framebuffer(this.gl, {width, height});\n  //   this.blit();\n  // }\n\n  // Copy a rectangle from a framebuffer attachment into a texture (at an offset)\n  // NOTE: assumes texture has enough storage allocated\n  // eslint-disable-next-line complexity\n  copyToTexture(opts = {}) {\n    log.error(\n      'Framebuffer.copyToTexture({...}) is no logner supported, use copyToTexture(source, target, opts})'\n    )();\n    return null;\n  }\n\n  // WEBGL2 INTERFACE\n\n  // Copies a rectangle of pixels between framebuffers\n  // eslint-disable-next-line complexity\n  blit(opts = {}) {\n    log.error('Framebuffer.blit({...}) is no logner supported, use blit(source, target, opts)')();\n    return null;\n  }\n\n  // signals to the GL that it need not preserve all pixels of a specified region of the framebuffer\n  invalidate({attachments = [], x = 0, y = 0, width, height}) {\n    const gl2 = assertWebGL2Context(this.gl);\n    const prevHandle = gl2.bindFramebuffer(GL.READ_FRAMEBUFFER, this.handle);\n    const invalidateAll = x === 0 && y === 0 && width === undefined && height === undefined;\n    if (invalidateAll) {\n      gl2.invalidateFramebuffer(GL.READ_FRAMEBUFFER, attachments);\n    } else {\n      // TODO - why does type checking fail on this line\n      // @ts-ignore\n      gl2.invalidateFramebuffer(GL.READ_FRAMEBUFFER, attachments, x, y, width, height);\n    }\n    // @ts-ignore\n    gl2.bindFramebuffer(GL.READ_FRAMEBUFFER, prevHandle);\n    return this;\n  }\n\n  // Return the value for `pname` of the specified attachment.\n  // The type returned is the type of the requested pname\n  getAttachmentParameter(attachment, pname, keys) {\n    let value = this._getAttachmentParameterFallback(pname);\n    if (value === null) {\n      this.gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n      value = this.gl.getFramebufferAttachmentParameter(GL.FRAMEBUFFER, attachment, pname);\n      this.gl.bindFramebuffer(GL.FRAMEBUFFER, null);\n    }\n    if (keys && value > 1000) {\n      // @ts-ignore\n      value = getKey(this.gl, value);\n    }\n    return value;\n  }\n\n  getAttachmentParameters(\n    attachment = GL.COLOR_ATTACHMENT0,\n    keys,\n    // @ts-ignore\n    parameters = this.constructor.ATTACHMENT_PARAMETERS || []\n  ) {\n    const values = {};\n    for (const pname of parameters) {\n      const key = keys ? getKey(this.gl, pname) : pname;\n      values[key] = this.getAttachmentParameter(attachment, pname, keys);\n    }\n    return values;\n  }\n\n  getParameters(keys = true) {\n    const attachments = Object.keys(this.attachments);\n    // if (this === this.gl.luma.defaultFramebuffer) {\n    //   attachments = [GL.COLOR_ATTACHMENT0, GL.DEPTH_STENCIL_ATTACHMENT];\n    // }\n    const parameters = {};\n    for (const attachmentName of attachments) {\n      const attachment = Number(attachmentName);\n      const key = keys ? getKey(this.gl, attachment) : attachment;\n      parameters[key] = this.getAttachmentParameters(attachment, keys);\n    }\n    return parameters;\n  }\n\n  // DEBUG\n\n  // Note: Will only work when called in an event handler\n  show() {\n    if (typeof window !== 'undefined') {\n      window.open(copyToDataUrl(this), 'luma-debug-texture');\n    }\n    return this;\n  }\n\n  log(logLevel = 0, message = '') {\n    if (logLevel > log.level || typeof window === 'undefined') {\n      return this;\n    }\n    message = message || `Framebuffer ${this.id}`;\n    const image = copyToDataUrl(this, {targetMaxHeight: 100});\n    log.image({logLevel, message, image}, message)();\n    return this;\n  }\n\n  // WEBGL INTERFACE\n  bind({target = GL.FRAMEBUFFER} = {}) {\n    this.gl.bindFramebuffer(target, this.handle);\n    return this;\n  }\n\n  unbind({target = GL.FRAMEBUFFER} = {}) {\n    this.gl.bindFramebuffer(target, null);\n    return this;\n  }\n\n  // PRIVATE METHODS\n\n  _createDefaultAttachments(color, depth, stencil, width, height) {\n    let defaultAttachments = null;\n\n    // Add a color buffer if requested and not supplied\n    if (color) {\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL.COLOR_ATTACHMENT0] = new Texture2D(this.gl, {\n        id: `${this.id}-color0`,\n        pixels: null, // reserves texture memory, but texels are undefined\n        format: GL.RGBA,\n        type: GL.UNSIGNED_BYTE,\n        width,\n        height,\n        // Note: Mipmapping can be disabled by texture resource when we resize the texture\n        // to a non-power-of-two dimenstion (NPOT texture) under WebGL1. To have consistant\n        // behavior we always disable mipmaps.\n        mipmaps: false,\n        // Set MIN and MAG filtering parameters so mipmaps are not used in sampling.\n        // Use LINEAR so subpixel algos like fxaa work.\n        // Set WRAP modes that support NPOT textures too.\n        parameters: {\n          [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,\n          [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n          [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n          [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n        }\n      });\n      // track to delete later\n      this.ownResources.push(defaultAttachments[GL.COLOR_ATTACHMENT0]);\n    }\n\n    if (depth && stencil) {\n      // TODO - handle separate stencil\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL.DEPTH_STENCIL_ATTACHMENT] = new Renderbuffer(this.gl, {\n        id: `${this.id}-depth-stencil`,\n        format: GL.DEPTH24_STENCIL8,\n        width,\n        height: 111\n      });\n      // track to delete later\n      this.ownResources.push(defaultAttachments[GL.DEPTH_STENCIL_ATTACHMENT]);\n      // TODO - optional texture\n      // new Texture2D(this.gl, {\n      //   id: `${this.id}-depth-stencil`,\n      //   format: GL.DEPTH24_STENCIL8,\n      //   dataFormat: GL.DEPTH_STENCIL,\n      //   type: GL.UNSIGNED_INT_24_8,\n      //   width,\n      //   height,\n      //   mipmaps: false\n      // });\n    } else if (depth) {\n      // Add a depth buffer if requested and not supplied\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL.DEPTH_ATTACHMENT] = new Renderbuffer(this.gl, {\n        id: `${this.id}-depth`,\n        format: GL.DEPTH_COMPONENT16,\n        width,\n        height\n      });\n      // track to delete later\n      this.ownResources.push(defaultAttachments[GL.DEPTH_ATTACHMENT]);\n    } else if (stencil) {\n      // TODO - handle separate stencil\n      assert(false);\n    }\n\n    return defaultAttachments;\n  }\n\n  _unattach(attachment) {\n    const oldAttachment = this.attachments[attachment];\n    if (!oldAttachment) {\n      return;\n    }\n    if (oldAttachment instanceof Renderbuffer) {\n      // render buffer\n      this.gl.framebufferRenderbuffer(GL.FRAMEBUFFER, attachment, GL.RENDERBUFFER, null);\n    } else {\n      // Must be a texture attachment\n      this.gl.framebufferTexture2D(GL.FRAMEBUFFER, attachment, GL.TEXTURE_2D, null, 0);\n    }\n    delete this.attachments[attachment];\n  }\n\n  _attachRenderbuffer({attachment = GL.COLOR_ATTACHMENT0, renderbuffer}) {\n    const {gl} = this;\n    // TODO - is the bind needed?\n    // gl.bindRenderbuffer(GL.RENDERBUFFER, renderbuffer.handle);\n    gl.framebufferRenderbuffer(GL.FRAMEBUFFER, attachment, GL.RENDERBUFFER, renderbuffer.handle);\n    // TODO - is the unbind needed?\n    // gl.bindRenderbuffer(GL.RENDERBUFFER, null);\n\n    this.attachments[attachment] = renderbuffer;\n  }\n\n  // layer = 0 - index into Texture2DArray and Texture3D or face for `TextureCubeMap`\n  // level = 0 - mipmapLevel (must be 0 in WebGL1)\n  _attachTexture({attachment = GL.COLOR_ATTACHMENT0, texture, layer, level}) {\n    const {gl} = this;\n    gl.bindTexture(texture.target, texture.handle);\n\n    switch (texture.target) {\n      case GL.TEXTURE_2D_ARRAY:\n      case GL.TEXTURE_3D:\n        const gl2 = assertWebGL2Context(gl);\n        gl2.framebufferTextureLayer(GL.FRAMEBUFFER, attachment, texture.target, level, layer);\n        break;\n\n      case GL.TEXTURE_CUBE_MAP:\n        // layer must be a cubemap face (or if index, converted to cube map face)\n        const face = mapIndexToCubeMapFace(layer);\n        gl.framebufferTexture2D(GL.FRAMEBUFFER, attachment, face, texture.handle, level);\n        break;\n\n      case GL.TEXTURE_2D:\n        gl.framebufferTexture2D(GL.FRAMEBUFFER, attachment, GL.TEXTURE_2D, texture.handle, level);\n        break;\n\n      default:\n        assert(false, 'Illegal texture type');\n    }\n\n    gl.bindTexture(texture.target, null);\n    this.attachments[attachment] = texture;\n  }\n\n  // Expects framebuffer to be bound\n  _setReadBuffer(readBuffer) {\n    const gl2 = getWebGL2Context(this.gl);\n    if (gl2) {\n      gl2.readBuffer(readBuffer);\n    } else {\n      // Setting to color attachment 0 is a noop, so allow it in WebGL1\n      assert(\n        readBuffer === GL.COLOR_ATTACHMENT0 || readBuffer === GL.BACK,\n        ERR_MULTIPLE_RENDERTARGETS\n      );\n    }\n    this.readBuffer = readBuffer;\n  }\n\n  // Expects framebuffer to be bound\n  _setDrawBuffers(drawBuffers) {\n    const {gl} = this;\n    const gl2 = assertWebGL2Context(gl);\n    if (gl2) {\n      gl2.drawBuffers(drawBuffers);\n    } else {\n      // TODO - is this not handled by polyfills?\n      const ext = gl.getExtension('WEBGL_draw_buffers');\n      if (ext) {\n        ext.drawBuffersWEBGL(drawBuffers);\n      } else {\n        // Setting a single draw buffer to color attachment 0 is a noop, allow in WebGL1\n        assert(\n          drawBuffers.length === 1 &&\n            (drawBuffers[0] === GL.COLOR_ATTACHMENT0 || drawBuffers[0] === GL.BACK),\n          ERR_MULTIPLE_RENDERTARGETS\n        );\n      }\n    }\n    this.drawBuffers = drawBuffers;\n  }\n\n  // Attempt to provide workable defaults for WebGL2 symbols under WebGL1\n  // null means OK to query\n  // TODO - move to webgl1 polyfills\n  /* eslint-disable complexity */\n  _getAttachmentParameterFallback(pname) {\n    const caps = getFeatures(this.gl);\n\n    switch (pname) {\n      case GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: // GLint\n        return !caps.WEBGL2 ? 0 : null;\n      case GL.FRAMEBUFFER_ATTACHMENT_RED_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: // GLint\n        return !caps.WEBGL2 ? 8 : null;\n      case GL.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: // GLenum\n        return !caps.WEBGL2 ? GL.UNSIGNED_INT : null;\n      case GL.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING:\n        return !caps.WEBGL2 && !caps.EXT_sRGB ? GL.LINEAR : null;\n      default:\n        return null;\n    }\n  }\n  /* eslint-enable complexity */\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createFramebuffer();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteFramebuffer(this.handle);\n  }\n\n  _bindHandle(handle) {\n    return this.gl.bindFramebuffer(GL.FRAMEBUFFER, handle);\n  }\n}\n\n// PUBLIC METHODS\n\n// Map an index to a cube map face constant\nfunction mapIndexToCubeMapFace(layer) {\n  // TEXTURE_CUBE_MAP_POSITIVE_X is a big value (0x8515)\n  // if smaller assume layer is index, otherwise assume it is already a cube map face constant\n  return layer < GL.TEXTURE_CUBE_MAP_POSITIVE_X ? layer + GL.TEXTURE_CUBE_MAP_POSITIVE_X : layer;\n}\n\n// Helper METHODS\n// Get a string describing the framebuffer error if installed\nfunction _getFrameBufferStatus(status) {\n  // Use error mapping if installed\n  // @ts-ignore\n  const STATUS = Framebuffer.STATUS || {};\n  return STATUS[status] || `Framebuffer error ${status}`;\n}\n\nexport const FRAMEBUFFER_ATTACHMENT_PARAMETERS = [\n  GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME, // WebGLRenderbuffer or WebGLTexture\n  GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE, // GL.RENDERBUFFER, GL.TEXTURE, GL.NONE\n  // GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE, // GL.TEXTURE_CUBE_MAP_POSITIVE_X, etc.\n  // GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL, // GLint\n  // EXT_sRGB or WebGL2\n  GL.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING, // GL.LINEAR, GL.SRBG\n  // WebGL2\n  // GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_RED_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE // GLint\n  // GL.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE\n  // GL.FLOAT, GL.INT, GL.UNSIGNED_INT, GL.SIGNED_NORMALIZED, OR GL.UNSIGNED_NORMALIZED.\n];\n\nFramebuffer.ATTACHMENT_PARAMETERS = FRAMEBUFFER_ATTACHMENT_PARAMETERS;\n"],"file":"framebuffer.js"}