{"version":3,"sources":["../../../src/lib/model.js"],"names":["LOG_DRAW_PRIORITY","LOG_DRAW_TIMEOUT","ERR_MODEL_PARAMS","NOOP","DRAW_PARAMS","Model","gl","props","id","lastLogTime","animated","initialize","programManager","ProgramManager","getDefaultProgramManager","_programManagerState","_managedProgram","program","vs","fs","modules","defines","inject","varyings","bufferMode","transpileToGLSL100","programProps","vertexArray","_programDirty","userData","needsRedraw","_attributes","attributes","uniforms","pickable","_checkProgram","setUniforms","Object","assign","getModuleUniforms","moduleSettings","drawMode","undefined","vertexCount","geometryBuffers","isInstanced","instanced","instanceCount","_setModelProps","geometry","Number","isFinite","key","delete","release","_deleteGeometryBuffers","getVertexCount","setAttributes","normalizedAttributes","name","attribute","getValue","opts","getUniforms","framebuffer","transformFeedback","parameters","updateModuleSettings","logPriority","log","priority","_logDrawCallStart","drawParams","getDrawParams","isIndexed","indexType","indexOffset","vertexArrayInstanced","warn","onBeforeRender","onAfterRender","didDraw","draw","getDrawMode","offset","_logDrawCallEnd","discard","feedbackBuffers","unbindModels","_setFeedbackBuffers","forEach","model","unbindBuffers","bindBuffers","setGeometry","_feedbackBuffers","needsUpdate","stateHash","get","Program","setProps","VertexArray","buffer","Buffer","animationProps","TransformFeedback","setBuffers","logLevel","logDrawTimeout","Date","now","group","collapsed","level","attributeTable","header","uniformTable","table","unusedTable","unusedCount","undefinedOnly","missingTable","missingCount","count","keys","configTable","configuration","message","groupEnd"],"mappings":"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","sourcesContent":["/* eslint-disable complexity */\n\nimport GL from '@luma.gl/constants';\nimport {isWebGL} from '@luma.gl/gltools';\nimport ProgramManager from './program-manager';\nimport {\n  Program,\n  VertexArray,\n  clear,\n  TransformFeedback,\n  Buffer,\n  log,\n  isObjectEmpty,\n  uid,\n  assert\n} from '@luma.gl/webgl';\nimport {\n  getDebugTableForUniforms,\n  getDebugTableForVertexArray,\n  getDebugTableForProgramConfiguration\n} from '@luma.gl/webgl';\nimport {getBuffersFromGeometry} from './model-utils';\n\nconst LOG_DRAW_PRIORITY = 2;\nconst LOG_DRAW_TIMEOUT = 10000;\n\nconst ERR_MODEL_PARAMS = 'Model needs drawMode and vertexCount';\n\nconst NOOP = () => {};\nconst DRAW_PARAMS = {};\n\nexport default class Model {\n  constructor(gl, props = {}) {\n    // Deduce a helpful id\n    const {id = uid('model')} = props;\n    assert(isWebGL(gl));\n    this.id = id;\n    this.gl = gl;\n    this.id = props.id || uid('Model');\n    this.lastLogTime = 0; // TODO - move to probe.gl\n    this.animated = false;\n    this.initialize(props);\n  }\n\n  initialize(props) {\n    this.props = {};\n\n    this.programManager = props.programManager || ProgramManager.getDefaultProgramManager(this.gl);\n    this._programManagerState = -1;\n    this._managedProgram = false;\n\n    const {\n      program = null,\n      vs,\n      fs,\n      modules,\n      defines,\n      inject,\n      varyings,\n      bufferMode,\n      transpileToGLSL100\n    } = props;\n\n    this.programProps = {\n      program,\n      vs,\n      fs,\n      modules,\n      defines,\n      inject,\n      varyings,\n      bufferMode,\n      transpileToGLSL100\n    };\n    this.program = null;\n    this.vertexArray = null;\n    this._programDirty = true;\n\n    // Initialize state\n    this.userData = {};\n    this.needsRedraw = true;\n\n    // Attributes and buffers\n    // Model manages auto Buffer creation from typed arrays\n    this._attributes = {}; // All attributes\n    this.attributes = {}; // User defined attributes\n\n    // Model manages uniform animation\n    this.uniforms = {};\n\n    // picking options\n    this.pickable = true;\n\n    this._checkProgram();\n\n    this.setUniforms(\n      Object.assign(\n        {},\n        this.getModuleUniforms(props.moduleSettings) // Get unforms for supplied parameters\n      )\n    );\n\n    this.drawMode = props.drawMode !== undefined ? props.drawMode : GL.TRIANGLES;\n    this.vertexCount = props.vertexCount || 0;\n\n    // Track buffers created by setGeometry\n    this.geometryBuffers = {};\n\n    // geometry might have set drawMode and vertexCount\n    this.isInstanced = props.isInstanced || props.instanced || props.instanceCount > 0;\n\n    this._setModelProps(props);\n\n    // TODO - just to unbreak deck.gl 7.0-beta, remove as soon as updated\n    this.geometry = {};\n\n    // assert(program || program instanceof Program);\n    assert(this.drawMode !== undefined && Number.isFinite(this.vertexCount), ERR_MODEL_PARAMS);\n  }\n\n  setProps(props) {\n    this._setModelProps(props);\n  }\n\n  delete() {\n    // delete all attributes created by this model\n    // TODO - should buffer deletes be handled by vertex array?\n    for (const key in this._attributes) {\n      if (this._attributes[key] !== this.attributes[key]) {\n        this._attributes[key].delete();\n      }\n    }\n\n    if (this._managedProgram) {\n      this.programManager.release(this.program);\n      this._managedProgram = false;\n    }\n\n    this.vertexArray.delete();\n\n    this._deleteGeometryBuffers();\n  }\n\n  // GETTERS\n\n  getDrawMode() {\n    return this.drawMode;\n  }\n\n  getVertexCount() {\n    return this.vertexCount;\n  }\n\n  getInstanceCount() {\n    return this.instanceCount;\n  }\n\n  getAttributes() {\n    return this.attributes;\n  }\n\n  getProgram() {\n    return this.program;\n  }\n\n  setProgram(props) {\n    const {\n      program,\n      vs,\n      fs,\n      modules,\n      defines,\n      inject,\n      varyings,\n      bufferMode,\n      transpileToGLSL100\n    } = props;\n    this.programProps = {\n      program,\n      vs,\n      fs,\n      modules,\n      defines,\n      inject,\n      varyings,\n      bufferMode,\n      transpileToGLSL100\n    };\n    this._programDirty = true;\n  }\n\n  getUniforms() {\n    return this.uniforms;\n  }\n\n  // SETTERS\n\n  setDrawMode(drawMode) {\n    this.drawMode = drawMode;\n    return this;\n  }\n\n  setVertexCount(vertexCount) {\n    assert(Number.isFinite(vertexCount));\n    this.vertexCount = vertexCount;\n    return this;\n  }\n\n  setInstanceCount(instanceCount) {\n    assert(Number.isFinite(instanceCount));\n    this.instanceCount = instanceCount;\n    return this;\n  }\n\n  setGeometry(geometry) {\n    this.drawMode = geometry.drawMode;\n    this.vertexCount = geometry.getVertexCount();\n\n    this._deleteGeometryBuffers();\n\n    this.geometryBuffers = getBuffersFromGeometry(this.gl, geometry);\n    this.vertexArray.setAttributes(this.geometryBuffers);\n    return this;\n  }\n\n  setAttributes(attributes = {}) {\n    // Avoid setting needsRedraw if no attributes\n    if (isObjectEmpty(attributes)) {\n      return this;\n    }\n\n    const normalizedAttributes = {};\n    for (const name in attributes) {\n      const attribute = attributes[name];\n      // The `getValue` call provides support for deck.gl `Attribute` class\n      // TODO - remove once deck refactoring completes\n      normalizedAttributes[name] = attribute.getValue ? attribute.getValue() : attribute;\n    }\n\n    this.vertexArray.setAttributes(normalizedAttributes);\n    return this;\n  }\n\n  // TODO - should actually set the uniforms\n  setUniforms(uniforms = {}) {\n    Object.assign(this.uniforms, uniforms);\n\n    return this;\n  }\n\n  getModuleUniforms(opts) {\n    this._checkProgram();\n\n    const getUniforms = this.programManager.getUniforms(this.program);\n\n    if (getUniforms) {\n      return getUniforms(opts);\n    }\n\n    return {};\n  }\n\n  updateModuleSettings(opts) {\n    const uniforms = this.getModuleUniforms(opts || {});\n    return this.setUniforms(uniforms);\n  }\n\n  // DRAW CALLS\n\n  clear(opts) {\n    clear(this.program.gl, opts);\n    return this;\n  }\n\n  draw(opts = {}) {\n    // Lazy update program and vertex array\n    this._checkProgram();\n\n    const {\n      moduleSettings = null,\n      framebuffer,\n      uniforms = {},\n      attributes = {},\n      transformFeedback = this.transformFeedback,\n      parameters = {},\n      vertexArray = this.vertexArray\n    } = opts;\n\n    // Update model with any just provided attributes, settings or uniforms\n    this.setAttributes(attributes);\n    this.updateModuleSettings(moduleSettings);\n    this.setUniforms(uniforms);\n\n    let logPriority;\n\n    if (log.priority >= LOG_DRAW_PRIORITY) {\n      logPriority = this._logDrawCallStart(LOG_DRAW_PRIORITY);\n    }\n\n    const drawParams = this.vertexArray.getDrawParams();\n    const {\n      isIndexed = drawParams.isIndexed,\n      indexType = drawParams.indexType,\n      indexOffset = drawParams.indexOffset,\n      vertexArrayInstanced = drawParams.isInstanced\n    } = this.props;\n\n    if (vertexArrayInstanced && !this.isInstanced) {\n      log.warn('Found instanced attributes on non-instanced model', this.id)();\n    }\n\n    const {isInstanced, instanceCount} = this;\n\n    const {onBeforeRender = NOOP, onAfterRender = NOOP} = this.props;\n\n    onBeforeRender();\n\n    this.program.setUniforms(this.uniforms);\n\n    const didDraw = this.program.draw(\n      Object.assign(DRAW_PARAMS, opts, {\n        logPriority,\n        uniforms: null, // Already set (may contain \"function values\" not understood by Program)\n        framebuffer,\n        parameters,\n        drawMode: this.getDrawMode(),\n        vertexCount: this.getVertexCount(),\n        vertexArray,\n        transformFeedback,\n        isIndexed,\n        indexType,\n        isInstanced,\n        instanceCount,\n        offset: isIndexed ? indexOffset : 0\n      })\n    );\n\n    onAfterRender();\n\n    if (log.priority >= LOG_DRAW_PRIORITY) {\n      this._logDrawCallEnd(logPriority, vertexArray, framebuffer);\n    }\n\n    return didDraw;\n  }\n\n  // Draw call for transform feedback\n  transform(opts = {}) {\n    const {discard = true, feedbackBuffers, unbindModels = []} = opts;\n\n    let {parameters} = opts;\n\n    if (feedbackBuffers) {\n      this._setFeedbackBuffers(feedbackBuffers);\n    }\n\n    if (discard) {\n      parameters = Object.assign({}, parameters, {[GL.RASTERIZER_DISCARD]: discard});\n    }\n\n    unbindModels.forEach(model => model.vertexArray.unbindBuffers());\n    try {\n      this.draw(Object.assign({}, opts, {parameters}));\n    } finally {\n      unbindModels.forEach(model => model.vertexArray.bindBuffers());\n    }\n\n    return this;\n  }\n\n  // DEPRECATED METHODS\n\n  render(uniforms = {}) {\n    log.warn('Model.render() is deprecated. Use Model.setUniforms() and Model.draw()')();\n    return this.setUniforms(uniforms).draw();\n  }\n\n  // PRIVATE METHODS\n\n  _setModelProps(props) {\n    Object.assign(this.props, props);\n\n    if ('uniforms' in props) {\n      this.setUniforms(props.uniforms);\n    }\n\n    if ('pickable' in props) {\n      this.pickable = props.pickable;\n    }\n\n    if ('instanceCount' in props) {\n      this.instanceCount = props.instanceCount;\n    }\n    if ('geometry' in props) {\n      this.setGeometry(props.geometry);\n    }\n\n    // webgl settings\n    if ('attributes' in props) {\n      this.setAttributes(props.attributes);\n    }\n    if ('_feedbackBuffers' in props) {\n      this._setFeedbackBuffers(props._feedbackBuffers);\n    }\n  }\n\n  _checkProgram() {\n    const needsUpdate =\n      this._programDirty || this.programManager.stateHash !== this._programManagerState;\n\n    if (!needsUpdate) {\n      return;\n    }\n\n    let {program} = this.programProps;\n\n    if (program) {\n      this._managedProgram = false;\n    } else {\n      const {\n        vs,\n        fs,\n        modules,\n        inject,\n        defines,\n        varyings,\n        bufferMode,\n        transpileToGLSL100\n      } = this.programProps;\n      program = this.programManager.get({\n        vs,\n        fs,\n        modules,\n        inject,\n        defines,\n        varyings,\n        bufferMode,\n        transpileToGLSL100\n      });\n      if (this.program && this._managedProgram) {\n        this.programManager.release(this.program);\n      }\n      this._programManagerState = this.programManager.stateHash;\n      this._managedProgram = true;\n    }\n\n    assert(program instanceof Program, 'Model needs a program');\n\n    this._programDirty = false;\n\n    if (program === this.program) {\n      return;\n    }\n\n    this.program = program;\n\n    if (this.vertexArray) {\n      // @ts-ignore TODO\n      this.vertexArray.setProps({program: this.program, attributes: this.vertexArray.attributes});\n    } else {\n      this.vertexArray = new VertexArray(this.gl, {program: this.program});\n    }\n\n    // Make sure we have some reasonable default uniforms in place\n    this.setUniforms(\n      Object.assign(\n        {},\n        this.getModuleUniforms() // Get all default uniforms,\n      )\n    );\n  }\n\n  _deleteGeometryBuffers() {\n    for (const name in this.geometryBuffers) {\n      // Buffer is raw value (for indices) or first element of [buffer, accessor] pair\n      const buffer = this.geometryBuffers[name][0] || this.geometryBuffers[name];\n      if (buffer instanceof Buffer) {\n        buffer.delete();\n      }\n    }\n  }\n\n  // Updates (evaluates) all function valued uniforms based on a new set of animationProps\n  // experimental\n  _setAnimationProps(animationProps) {\n    if (this.animated) {\n      assert(animationProps, 'Model.draw(): animated uniforms but no animationProps');\n      // const animatedUniforms = this._evaluateAnimateUniforms(animationProps);\n      // Object.assign(this.uniforms, animatedUniforms);\n    }\n  }\n\n  // Transform Feedback\n\n  _setFeedbackBuffers(feedbackBuffers = {}) {\n    // Avoid setting needsRedraw if no feedbackBuffers\n    if (isObjectEmpty(feedbackBuffers)) {\n      return this;\n    }\n\n    const {gl} = this.program;\n    this.transformFeedback =\n      this.transformFeedback ||\n      new TransformFeedback(gl, {\n        program: this.program\n      });\n\n    this.transformFeedback.setBuffers(feedbackBuffers);\n    return this;\n  }\n\n  _logDrawCallStart(logLevel) {\n    const logDrawTimeout = logLevel > 3 ? 0 : LOG_DRAW_TIMEOUT;\n    if (Date.now() - this.lastLogTime < logDrawTimeout) {\n      return undefined;\n    }\n\n    this.lastLogTime = Date.now();\n\n    log.group(LOG_DRAW_PRIORITY, `>>> DRAWING MODEL ${this.id}`, {collapsed: log.level <= 2})();\n\n    return logLevel;\n  }\n\n  _logDrawCallEnd(logLevel, vertexArray, uniforms, framebuffer) {\n    // HACK: logLevel === undefined means logDrawCallStart didn't run\n    if (logLevel === undefined) {\n      return;\n    }\n\n    const attributeTable = getDebugTableForVertexArray({\n      vertexArray,\n      header: `${this.id} attributes`,\n      // @ts-ignore\n      attributes: this._attributes\n    });\n\n    const {table: uniformTable, unusedTable, unusedCount} = getDebugTableForUniforms({\n      header: `${this.id} uniforms`,\n      program: this.program,\n      uniforms: Object.assign({}, this.program.uniforms, uniforms)\n    });\n\n    // log missing uniforms\n    const {table: missingTable, count: missingCount} = getDebugTableForUniforms({\n      header: `${this.id} uniforms`,\n      program: this.program,\n      uniforms: Object.assign({}, this.program.uniforms, uniforms),\n      undefinedOnly: true\n    });\n\n    if (missingCount > 0) {\n      log.log('MISSING UNIFORMS', Object.keys(missingTable))();\n      // log.table(logLevel, missingTable)();\n    }\n    if (unusedCount > 0) {\n      log.log('UNUSED UNIFORMS', Object.keys(unusedTable))();\n      // log.log(logLevel, 'Unused uniforms ', unusedTable)();\n    }\n\n    const configTable = getDebugTableForProgramConfiguration(this.vertexArray.configuration);\n\n    log.table(logLevel, attributeTable)();\n\n    log.table(logLevel, uniformTable)();\n\n    log.table(logLevel + 1, configTable)();\n\n    if (framebuffer) {\n      framebuffer.log({logLevel: LOG_DRAW_PRIORITY, message: `Rendered to ${framebuffer.id}`});\n    }\n\n    log.groupEnd(LOG_DRAW_PRIORITY, `>>> DRAWING MODEL ${this.id}`)();\n  }\n}\n"],"file":"model.js"}