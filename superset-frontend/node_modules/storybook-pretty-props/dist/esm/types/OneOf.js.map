{"version":3,"sources":["OneOf.tsx"],"names":["React","getPropTypes","joinValues","HighlightButton","MAX_LENGTH","ONE_OF","OneOf","propType","useState","minimized","setMinimized","toggle","propTypes","code","Array","isArray","toString","isMinimizable","length","typeDef","substr","whiteSpace","fontSize"],"mappings":"iEAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,YAAT,KAAqD,SAArD,CACA,OAASC,UAAT,CAAqBC,eAArB,KAA4C,UAA5C,CAEA,GAAMC,CAAAA,UAAU,CAAG,EAAnB,CACA,GAAMC,CAAAA,MAAM,CAAG,UAAf,CAGA,GAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,MAA0C,IAAvCC,CAAAA,QAAuC,MAAvCA,QAAuC,qBACpBP,KAAK,CAACQ,QAAN,CAAe,IAAf,CADoB,oDAC/CC,SAD+C,qBACpCC,YADoC,qBAGtD,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,SAAMD,CAAAA,YAAY,CAAC,CAACD,SAAF,CAAlB,CAAf,CACA,GAAMG,CAAAA,SAAS,CAAGX,YAAY,CAACM,QAAD,CAA9B,CACA,GAAMM,CAAAA,IAAI,CAAG,CACVC,KAAK,CAACC,OAAN,CAAcH,SAAd,IACG,CAACH,SAAD,gBAAqBP,UAAU,CAACU,SAAD,CAAY,QAAZ,CAA/B,CAAD,EACCV,UAAU,CAACU,SAAD,CAFb,CAAD,EAGAA,SAJW,EAKXI,QALW,EAAb,CAOA,GAAMC,CAAAA,aAAa,CAAGJ,IAAI,CAACK,MAAL,CAAcd,UAApC,CACA,GAAMe,CAAAA,OAAO,CAAGV,SAAS,CAAGI,IAAI,CAACO,MAAL,CAAY,CAAZ,CAAehB,UAAf,CAAH,CAAgCS,IAAzD,CAEA,MACE,6BAAM,KAAK,CAAE,CAAEQ,UAAU,CAAEZ,SAAS,CAAG,QAAH,CAAc,KAArC,CAAb,EACGQ,aAAa,CACZ,oBAAC,eAAD,EAAiB,KAAK,CAAE,CAAEK,QAAQ,CAAE,QAAZ,CAAxB,CAAgD,OAAO,CAAEX,MAAzD,EACGN,MADH,CADY,CAKZA,MANJ,CAQGc,OARH,KASGF,aAAa,EAAI,oBAAC,eAAD,EAAiB,OAAO,CAAEN,MAA1B,QATpB,CAYH,CA5BD,CA8BA,cAAeL,CAAAA,KAAf","sourcesContent":["import React from \"react\";\nimport { getPropTypes, PropRenderer, EnumType } from \"./types\";\nimport { joinValues, HighlightButton } from \"../utils\";\n\nconst MAX_LENGTH = 24;\nconst ONE_OF = \"oneOf = \";\n\n/** Render a oneOf type */\nconst OneOf = ({ propType }: PropRenderer<EnumType>) => {\n  const [minimized, setMinimized] = React.useState(true);\n  /** Toggle viewing the entire shape */\n  const toggle = () => setMinimized(!minimized);\n  const propTypes = getPropTypes(propType);\n  const code = (\n    (Array.isArray(propTypes) &&\n      ((!minimized && `\\n  ${joinValues(propTypes, \" |\\n  \")}`) ||\n        joinValues(propTypes))) ||\n    propTypes\n  ).toString();\n\n  const isMinimizable = code.length > MAX_LENGTH;\n  const typeDef = minimized ? code.substr(0, MAX_LENGTH) : code;\n\n  return (\n    <span style={{ whiteSpace: minimized ? \"normal\" : \"pre\" }}>\n      {isMinimizable ? (\n        <HighlightButton style={{ fontSize: \"0.9rem\" }} onClick={toggle}>\n          {ONE_OF}\n        </HighlightButton>\n      ) : (\n        ONE_OF\n      )}\n      {typeDef};\n      {isMinimizable && <HighlightButton onClick={toggle}>...</HighlightButton>}\n    </span>\n  );\n};\n\nexport default OneOf;\n"]}
