{"version":3,"sources":["types.ts"],"names":["getPropTypes","propType","value","name"],"mappings":"AAuEA,MAAO,SAASA,CAAAA,YAAT,CAKLC,QALK,CAKoB,CACzB,GAAI,MAAOA,CAAAA,QAAP,GAAoB,QAAxB,CAAkC,CAChC,MAAOA,CAAAA,QACR,CAED,GAAI,SAAWA,CAAAA,QAAf,CAAyB,CACvB,MAAOA,CAAAA,QAAQ,CAACC,KACjB,CAED,MAAOD,CAAAA,QAAQ,CAACE,IACjB","sourcesContent":["/* eslint-disable jsdoc/require-jsdoc, @typescript-eslint/no-explicit-any */\nimport React from \"react\";\n\nexport type Element<\n  T extends keyof JSX.IntrinsicElements\n> = React.PropsWithoutRef<JSX.IntrinsicElements[T]>;\n\nexport interface PropTypeBase {\n  /** The name of the type */\n  name: string;\n  /** Whether the prop is required */\n  required?: boolean;\n}\n\nexport interface LiteralType extends PropTypeBase {\n  name: \"literal\";\n  value: string;\n}\n\nexport interface EnumType extends PropTypeBase {\n  name: \"enum\";\n  value: LiteralType[];\n}\n\nexport interface InstanceofType extends PropTypeBase {\n  name: \"instanceOf\";\n  value: string;\n}\n\nexport interface SignatureType extends PropTypeBase {\n  name: \"signature\";\n  raw: string;\n}\n\nexport interface ShapeType extends PropTypeBase {\n  name: \"shape\";\n  value: Record<string, PropTypeValue>;\n}\n\nexport interface UnionType extends PropTypeBase {\n  name: \"union\";\n  value: PropTypeValue[];\n}\n\nexport interface ArrayOfType extends PropTypeBase {\n  name: \"arrayOf\";\n  value: PropTypeValue;\n}\n\nexport interface ObjectOfType extends PropTypeBase {\n  name: \"objectOf\";\n  value: PropTypeValue;\n}\n\nexport type PropTypeValue =\n  | PropTypeBase\n  | LiteralType\n  | EnumType\n  | InstanceofType\n  | SignatureType\n  | ShapeType\n  | UnionType\n  | ArrayOfType\n  | ObjectOfType;\n\nexport interface PropRenderer<T = PropTypeValue> {\n  /** The prop type to render */\n  propType: T;\n}\n\n/** Get the types for a PropType */\nexport function getPropTypes<\n  T extends PropTypeBase & {\n    /** The value for the type */\n    value: any;\n  }\n>(propType: T): T[\"value\"] {\n  if (typeof propType === \"string\") {\n    return propType;\n  }\n\n  if (\"value\" in propType) {\n    return propType.value;\n  }\n\n  return propType.name;\n}\n"]}
