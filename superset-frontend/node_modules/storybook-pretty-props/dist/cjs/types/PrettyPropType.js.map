{"version":3,"sources":["PrettyPropType.tsx"],"names":["propTypeComponentMap","Map","Literal","OneOf","InstanceOf","Signature","Shape","OneOfType","ArrayOf","ObjectOf","PrettyPropType","propType","depth","name","Component","get","defaultProps"],"mappings":"mLAAA,oDAEA,sDACA,8DACA,0DACA,4DACA,sDACA,gEACA,8DACA,0DAKA,GAAMA,CAAAA,oBAAoB,CAAG,GAAIC,CAAAA,GAAJ,CAA0C,CACrE,CAAC,SAAD,CAAYC,mBAAZ,CADqE,CAErE,CAAC,MAAD,CAASC,iBAAT,CAFqE,CAGrE,CAAC,YAAD,CAAeC,sBAAf,CAHqE,CAIrE,CAAC,WAAD,CAAcC,qBAAd,CAJqE,CAKrE,CAAC,OAAD,CAAUC,iBAAV,CALqE,CAMrE,CAAC,OAAD,CAAUC,qBAAV,CANqE,CAOrE,CAAC,SAAD,CAAYC,mBAAZ,CAPqE,CAQrE,CAAC,UAAD,CAAaC,oBAAb,CARqE,CAA1C,CAA7B,CAmBA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,MAA8C,IAA3CC,CAAAA,QAA2C,MAA3CA,QAA2C,CAAjCC,KAAiC,MAAjCA,KAAiC,CACnE,GAAI,CAACD,QAAL,CAAe,CACb,MAAO,uDACR,CAHkE,UAKlDA,QAAQ,EAAI,EALsC,CAK3DE,IAL2D,OAK3DA,IAL2D,CAMnE,GAAMC,CAAAA,SAAS,CAAGd,oBAAoB,CAACe,GAArB,CAAyBF,IAAzB,CAAlB,CAEA,GAAIC,SAAJ,CAAe,CACb,MAAO,iCAAC,SAAD,EAAW,QAAQ,CAAEH,QAArB,CAA+B,KAAK,CAAEC,KAAtC,EACR,CAGD,MAAO,6CAAOC,IAAP,CACR,CAdD,CAgBAH,cAAc,CAACM,YAAf,CAA8B,CAC5BJ,KAAK,CAAE,CADqB,CAA9B,C,aAIeF,c","sourcesContent":["import React from \"react\";\n\nimport Shape from \"./Shape\";\nimport OneOfType from \"./OneOfType\";\nimport ArrayOf from \"./ArrayOf\";\nimport ObjectOf from \"./ObjectOf\";\nimport OneOf from \"./OneOf\";\nimport InstanceOf from \"./InstanceOf\";\nimport Signature from \"./Signature\";\nimport Literal from \"./Literal\";\n\nimport { PropTypeValue } from \"./types\";\n\n// PropType -> Component map - these are a bit more complex prop types to display\nconst propTypeComponentMap = new Map<string, React.ComponentType<any>>([\n  [\"literal\", Literal],\n  [\"enum\", OneOf],\n  [\"instanceOf\", InstanceOf],\n  [\"signature\", Signature],\n  [\"shape\", Shape],\n  [\"union\", OneOfType],\n  [\"arrayOf\", ArrayOf],\n  [\"objectOf\", ObjectOf],\n]);\n\nexport interface PrettyPropTypeProps {\n  /** The prop to render */\n  propType?: PropTypeValue;\n  /** how deep to go when rendering object */\n  depth?: number;\n}\n\n/** Pretty print a complex prop type */\nconst PrettyPropType = ({ propType, depth }: PrettyPropTypeProps) => {\n  if (!propType) {\n    return <span>unknown</span>;\n  }\n\n  const { name } = propType || {};\n  const Component = propTypeComponentMap.get(name);\n\n  if (Component) {\n    return <Component propType={propType} depth={depth} />;\n  }\n\n  // Otherwise, propType does not have a dedicated component, display prop-type name by default\n  return <span>{name}</span>;\n};\n\nPrettyPropType.defaultProps = {\n  depth: 1,\n};\n\nexport default PrettyPropType;\n"]}
