"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _NodeGroup = _interopRequireDefault(require("../NodeGroup"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var keyAccessor = function keyAccessor() {
  return '$$key$$';
};

function Animate(props) {
  var show = props.show,
      start = props.start,
      enter = props.enter,
      update = props.update,
      leave = props.leave,
      children = props.children;
  var data = typeof start === 'function' ? start() : start;
  return _react.default.createElement(_NodeGroup.default, {
    data: show ? [data] : [],
    start: function start() {
      return data;
    },
    keyAccessor: keyAccessor,
    enter: typeof enter === 'function' ? enter : function () {
      return enter;
    },
    update: typeof update === 'function' ? update : function () {
      return update;
    },
    leave: typeof leave === 'function' ? leave : function () {
      return leave;
    }
  }, function (nodes) {
    if (!nodes[0]) {
      return null;
    }

    var renderedChildren = children(nodes[0].state);
    return renderedChildren && _react.default.Children.only(renderedChildren);
  });
}

Animate.propTypes = process.env.NODE_ENV !== "production" ? {
  /**
   * Boolean value that determines if the child should be rendered or not.
   */
  show: _propTypes.default.bool.isRequired,

  /**
   * An object or function that returns an obejct to be used as the starting state.
   */
  start: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),

  /**
   * An object, array of objects, or function that returns an object or array of objects describing how the state should transform on enter.
   */
  enter: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.array, _propTypes.default.object]),

  /**
   * An object, array of objects, or function that returns an object or array of objects describing how the state should transform on update. ***Note:*** although not required, in most cases it make sense to specify an update prop to handle interrupted enter and leave transitions.
   */
  update: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.array, _propTypes.default.object]),

  /**
   * An object, array of objects, or function that returns an object or array of objects describing how the state should transform on leave.
   */
  leave: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.array, _propTypes.default.object]),

  /**
   * A function that renders the node.  The function is passed the data and state.
   */
  children: _propTypes.default.func.isRequired
} : {};
Animate.defaultProps = {
  show: true
};
var _default = Animate;
exports.default = _default;