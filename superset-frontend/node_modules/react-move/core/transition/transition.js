"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.newId = newId;
exports.default = transition;
exports.preset = void 0;

var _d3Timer = require("d3-timer");

var _tween = _interopRequireDefault(require("./tween"));

var _schedule = _interopRequireDefault(require("./schedule"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function once(func) {
  var called = false;
  return function transitionEvent() {
    if (!called) {
      called = true;
      func.call(this);
    }
  };
}

var id = 0;

function newId() {
  return ++id;
} // from https://github.com/d3/d3-ease/blob/master/src/linear.js


function linear(t) {
  return +t;
}

var preset = {
  time: null,
  delay: 0,
  duration: 250,
  ease: linear
};
exports.preset = preset;

function scheduleTransitions() {
  var _this = this;

  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var transitions = _objectSpread({}, config);

  var events = transitions.events || {};
  delete transitions.events; // each event handler should be called only once

  Object.keys(events).forEach(function (d) {
    if (typeof events[d] !== 'function') {
      throw new Error('Event handlers must be a function');
    } else {
      events[d] = once(events[d]);
    }
  });
  var timing = transitions.timing || {};
  delete transitions.timing;
  Object.keys(transitions).forEach(function (stateKey) {
    var tweens = [];

    if (_typeof(transitions[stateKey]) === 'object' && Array.isArray(transitions[stateKey]) === false) {
      Object.keys(transitions[stateKey]).forEach(function (attr) {
        var val = transitions[stateKey][attr];

        if (Array.isArray(val)) {
          if (val.length === 1) {
            tweens.push(_tween.default.call(_this, stateKey, attr, val[0]));
          } else {
            _this.setState(function (state) {
              return _defineProperty({}, stateKey, _objectSpread({}, state[stateKey], _defineProperty({}, attr, val[0])));
            });

            tweens.push(_tween.default.call(_this, stateKey, attr, val[1]));
          }
        } else if (typeof val === 'function') {
          var getResonanceCustomTween = function getResonanceCustomTween() {
            var resonanceCustomTween = function resonanceCustomTween(t) {
              _this.setState(function (state) {
                return _defineProperty({}, stateKey, _objectSpread({}, state[stateKey], _defineProperty({}, attr, val(t))));
              });
            };

            return resonanceCustomTween;
          };

          tweens.push(getResonanceCustomTween);
        } else {
          _this.setState(function (state) {
            return _defineProperty({}, stateKey, _objectSpread({}, state[stateKey], _defineProperty({}, attr, val)));
          }); // This assures any existing transitions are stopped


          tweens.push(_tween.default.call(_this, stateKey, attr, val));
        }
      });
    } else {
      var val = transitions[stateKey];

      if (Array.isArray(val)) {
        if (val.length === 1) {
          tweens.push(_tween.default.call(_this, null, stateKey, val[0]));
        } else {
          _this.setState(function () {
            return _defineProperty({}, stateKey, val[0]);
          });

          tweens.push(_tween.default.call(_this, null, stateKey, val[1]));
        }
      } else if (typeof val === 'function') {
        var getResonanceCustomTween = function getResonanceCustomTween() {
          var resonanceCustomTween = function resonanceCustomTween(t) {
            _this.setState(function () {
              return _defineProperty({}, stateKey, val(t));
            });
          };

          return resonanceCustomTween;
        };

        tweens.push(getResonanceCustomTween);
      } else {
        _this.setState(function () {
          return _defineProperty({}, stateKey, val);
        }); // This assures any existing transitions are stopped


        tweens.push(_tween.default.call(_this, null, stateKey, val));
      }
    }

    var timingConfig = _objectSpread({}, preset, timing, {
      time: (0, _d3Timer.now)()
    });

    (0, _schedule.default)(_this, stateKey, newId(), timingConfig, tweens, events);
  });
}

function transition(config) {
  var _this2 = this;

  if (Array.isArray(config)) {
    config.forEach(function (c) {
      scheduleTransitions.call(_this2, c);
    });
  } else {
    scheduleTransitions.call(this, config);
  }
}