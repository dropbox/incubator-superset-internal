{"version":3,"file":"react-intersection-observer.modern.mjs","sources":["../src/observe.ts","../src/InView.tsx","../src/useInView.tsx"],"sourcesContent":["import type { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter((key) => options[key] !== undefined)\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport type { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from 'react';\nimport type { InViewHookResponse, IntersectionOptions } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions['onChange']>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n\n  React.useEffect(() => {\n    if (!ref && entryTarget && !triggerOnce && !skip) {\n      // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView,\n        entry: undefined,\n      });\n    }\n  }, [ref, entryTarget, triggerOnce, skip, initialInView]);\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","undefined","defaultFallbackInView","inView","getRootId","root","has","get","set","toString","optionsToId","options","Object","keys","sort","filter","key","map","createObserver","id","instance","elements","thresholds","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","some","threshold","intersectionRatio","trackVisibility","isVisible","target","callback","Array","isArray","observe","element","fallbackInView","window","bounds","getBoundingClientRect","time","boundingClientRect","intersectionRect","rootBounds","callbacks","push","unobserve","splice","indexOf","length","delete","size","disconnect","isPlainChildren","props","children","InView","React","Component","constructor","node","_unobserveCb","handleNode","triggerOnce","skip","setState","initialInView","observeNode","handleChange","onChange","state","componentDidUpdate","prevProps","rootMargin","delay","componentWillUnmount","render","ref","as","createElement","useInView","setRef","useState","useRef","current","useEffect","entryTarget","result"],"mappings":"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"}