{"version":3,"file":"react-intersection-observer.umd.js","sources":["../src/observe.ts","../src/InView.tsx","../src/useInView.tsx"],"sourcesContent":["import type { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter((key) => options[key] !== undefined)\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport type { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from 'react';\nimport type { InViewHookResponse, IntersectionOptions } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions['onChange']>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n\n  React.useEffect(() => {\n    if (!ref && entryTarget && !triggerOnce && !skip) {\n      // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView,\n        entry: undefined,\n      });\n    }\n  }, [ref, entryTarget, triggerOnce, skip, initialInView]);\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","undefined","defaultFallbackInView","inView","getRootId","root","has","get","set","toString","optionsToId","options","Object","keys","sort","filter","key","map","createObserver","id","instance","elements","thresholds","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","some","threshold","intersectionRatio","trackVisibility","isVisible","target","callback","Array","isArray","observe","element","fallbackInView","window","bounds","getBoundingClientRect","time","boundingClientRect","intersectionRect","rootBounds","callbacks","push","unobserve","splice","indexOf","length","size","disconnect","isPlainChildren","props","children","InView","node","_unobserveCb","handleNode","triggerOnce","skip","setState","initialInView","observeNode","handleChange","onChange","state","componentDidUpdate","prevProps","rootMargin","delay","componentWillUnmount","render","ref","as","React","createElement","Component","useInView","useState","setRef","useRef","current","useEffect","entryTarget","result"],"mappings":"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"}