{"version":3,"sources":["../../../src/controllers/orbit-controller.js"],"names":["clamp","Controller","ViewState","mod","DEFAULT_STATE","rotationX","rotationOrbit","zoom","target","minRotationX","maxRotationX","minZoom","Infinity","maxZoom","OrbitState","constructor","makeViewport","width","height","startPanPosition","startRotatePos","startRotationX","startRotationOrbit","startZoomPosition","startZoom","_state","panStart","pos","_getUpdatedState","_unproject","pan","startPosition","viewport","_viewportProps","newProps","panByPosition","panEnd","rotateStart","rotate","deltaAngleX","deltaAngleY","Number","isFinite","newRotation","deltaScaleX","deltaScaleY","rotateEnd","shortestPathFrom","viewState","fromProps","getViewportProps","props","Math","abs","zoomStart","startPos","scale","newZoom","_calculateNewZoom","zoomedViewport","zoomEnd","zoomIn","speed","zoomOut","moveLeft","_panFromCenter","moveRight","moveUp","moveDown","rotateLeft","rotateRight","rotateUp","rotateDown","unproject","log2","offset","_applyConstraints","OrbitController","linearTransitionProps"],"mappings":"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","sourcesContent":["import {clamp} from 'math.gl';\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport {mod} from '../utils/math-utils';\n\nconst DEFAULT_STATE = {\n  rotationX: 0,\n  rotationOrbit: 0,\n  zoom: 0,\n  target: [0, 0, 0],\n  minRotationX: -90,\n  maxRotationX: 90,\n  minZoom: -Infinity,\n  maxZoom: Infinity\n};\n\n/* Helpers */\n\nexport class OrbitState extends ViewState {\n  constructor({\n    makeViewport,\n\n    /* Viewport arguments */\n    width, // Width of viewport\n    height, // Height of viewport\n    rotationX = DEFAULT_STATE.rotationX, // Rotation around x axis\n    rotationOrbit = DEFAULT_STATE.rotationOrbit, // Rotation around orbit axis\n    target = DEFAULT_STATE.target,\n    zoom = DEFAULT_STATE.zoom,\n\n    /* Viewport constraints */\n    minRotationX = DEFAULT_STATE.minRotationX,\n    maxRotationX = DEFAULT_STATE.maxRotationX,\n    minZoom = DEFAULT_STATE.minZoom,\n    maxZoom = DEFAULT_STATE.maxZoom,\n\n    /** Interaction states, required to calculate change during transform */\n    // Model state when the pan operation first started\n    startPanPosition,\n    // Model state when the rotate operation first started\n    startRotatePos,\n    startRotationX,\n    startRotationOrbit,\n    // Model state when the zoom operation first started\n    startZoomPosition,\n    startZoom\n  }) {\n    super({\n      width,\n      height,\n      rotationX,\n      rotationOrbit,\n      target,\n      zoom,\n      minRotationX,\n      maxRotationX,\n      minZoom,\n      maxZoom\n    });\n\n    this._state = {\n      startPanPosition,\n      startRotatePos,\n      startRotationX,\n      startRotationOrbit,\n      startZoomPosition,\n      startZoom\n    };\n\n    this.makeViewport = makeViewport;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}) {\n    return this._getUpdatedState({\n      startPanPosition: this._unproject(pos)\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  pan({pos, startPosition}) {\n    const startPanPosition = this._state.startPanPosition || startPosition;\n\n    if (!startPanPosition) {\n      return this;\n    }\n\n    const viewport = this.makeViewport(this._viewportProps);\n    const newProps = viewport.panByPosition(startPanPosition, pos);\n\n    return this._getUpdatedState(newProps);\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedState({\n      startPanPosition: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  rotateStart({pos}) {\n    return this._getUpdatedState({\n      startRotatePos: pos,\n      startRotationX: this._viewportProps.rotationX,\n      startRotationOrbit: this._viewportProps.rotationOrbit\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  rotate({pos, deltaAngleX = 0, deltaAngleY = 0}) {\n    const {startRotatePos, startRotationX, startRotationOrbit} = this._state;\n    const {width, height} = this._viewportProps;\n\n    if (\n      !startRotatePos ||\n      !Number.isFinite(startRotationX) ||\n      !Number.isFinite(startRotationOrbit)\n    ) {\n      return this;\n    }\n\n    let newRotation;\n    if (pos) {\n      let deltaScaleX = (pos[0] - startRotatePos[0]) / width;\n      const deltaScaleY = (pos[1] - startRotatePos[1]) / height;\n\n      if (startRotationX < -90 || startRotationX > 90) {\n        // When looking at the \"back\" side of the scene, invert horizontal drag\n        // so that the camera movement follows user input\n        deltaScaleX *= -1;\n      }\n      newRotation = {\n        rotationX: startRotationX + deltaScaleY * 180,\n        rotationOrbit: startRotationOrbit + deltaScaleX * 180\n      };\n    } else {\n      newRotation = {\n        rotationX: startRotationX + deltaAngleY,\n        rotationOrbit: startRotationOrbit + deltaAngleX\n      };\n    }\n\n    return this._getUpdatedState(newRotation);\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedState({\n      startRotationX: null,\n      startRotationOrbit: null\n    });\n  }\n\n  // shortest path between two view states\n  shortestPathFrom(viewState) {\n    const fromProps = viewState.getViewportProps();\n    const props = {...this._viewportProps};\n    const {rotationOrbit} = props;\n\n    if (Math.abs(rotationOrbit - fromProps.rotationOrbit) > 180) {\n      props.rotationOrbit = rotationOrbit < 0 ? rotationOrbit + 360 : rotationOrbit - 360;\n    }\n\n    return props;\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  zoomStart({pos}) {\n    return this._getUpdatedState({\n      startZoomPosition: this._unproject(pos),\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current target is\n   * @param {[Number, Number]} startPos - the target position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({pos, startPos, scale}) {\n    const {zoom} = this._viewportProps;\n    let {startZoom, startZoomPosition} = this._state;\n    if (!Number.isFinite(startZoom)) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = zoom;\n      startZoomPosition = this._unproject(startPos) || this._unproject(pos);\n    }\n\n    const newZoom = this._calculateNewZoom({scale, startZoom});\n    const zoomedViewport = this.makeViewport({...this._viewportProps, zoom: newZoom});\n\n    return this._getUpdatedState({\n      zoom: newZoom,\n      ...zoomedViewport.panByPosition(startZoomPosition, pos)\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomPosition: null,\n      startZoom: null\n    });\n  }\n\n  zoomIn(speed = 2) {\n    return this._getUpdatedState({\n      zoom: this._calculateNewZoom({scale: speed})\n    });\n  }\n\n  zoomOut(speed = 2) {\n    return this._getUpdatedState({\n      zoom: this._calculateNewZoom({scale: 1 / speed})\n    });\n  }\n\n  moveLeft(speed = 50) {\n    return this._panFromCenter([-speed, 0]);\n  }\n\n  moveRight(speed = 50) {\n    return this._panFromCenter([speed, 0]);\n  }\n\n  moveUp(speed = 50) {\n    return this._panFromCenter([0, -speed]);\n  }\n\n  moveDown(speed = 50) {\n    return this._panFromCenter([0, speed]);\n  }\n\n  rotateLeft(speed = 15) {\n    return this._getUpdatedState({\n      rotationOrbit: this._viewportProps.rotationOrbit - speed\n    });\n  }\n\n  rotateRight(speed = 15) {\n    return this._getUpdatedState({\n      rotationOrbit: this._viewportProps.rotationOrbit + speed\n    });\n  }\n\n  rotateUp(speed = 10) {\n    return this._getUpdatedState({\n      rotationX: this._viewportProps.rotationX - speed\n    });\n  }\n\n  rotateDown(speed = 10) {\n    return this._getUpdatedState({\n      rotationX: this._viewportProps.rotationX + speed\n    });\n  }\n\n  /* Private methods */\n\n  _unproject(pos) {\n    const viewport = this.makeViewport(this._viewportProps);\n    return pos && viewport.unproject(pos);\n  }\n\n  // Calculates new zoom\n  _calculateNewZoom({scale, startZoom}) {\n    const {maxZoom, minZoom} = this._viewportProps;\n    if (!Number.isFinite(startZoom)) {\n      startZoom = this._viewportProps.zoom;\n    }\n    const zoom = startZoom + Math.log2(scale);\n    return clamp(zoom, minZoom, maxZoom);\n  }\n\n  _panFromCenter(offset) {\n    const {width, height, target} = this._viewportProps;\n    return this.pan({\n      startPosition: target,\n      pos: [width / 2 + offset[0], height / 2 + offset[1]]\n    });\n  }\n\n  _getUpdatedState(newProps) {\n    // Update _viewportProps\n    return new OrbitState({...this._viewportProps, ...this._state, ...newProps});\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom, maxRotationX, minRotationX, rotationOrbit} = props;\n\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n    props.rotationX = clamp(props.rotationX, minRotationX, maxRotationX);\n    if (rotationOrbit < -180 || rotationOrbit > 180) {\n      props.rotationOrbit = mod(rotationOrbit + 180, 360) - 180;\n    }\n\n    return props;\n  }\n}\n\nexport default class OrbitController extends Controller {\n  constructor(props) {\n    super(OrbitState, props);\n  }\n\n  get linearTransitionProps() {\n    return ['target', 'zoom', 'rotationX', 'rotationOrbit'];\n  }\n}\n"],"file":"orbit-controller.js"}