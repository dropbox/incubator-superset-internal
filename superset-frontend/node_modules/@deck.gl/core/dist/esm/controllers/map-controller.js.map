{"version":3,"sources":["../../../src/controllers/map-controller.js"],"names":["clamp","Controller","ViewState","normalizeViewportProps","assert","PITCH_MOUSE_THRESHOLD","PITCH_ACCEL","DEFAULT_STATE","pitch","bearing","altitude","minZoom","maxZoom","minPitch","maxPitch","MapState","constructor","makeViewport","width","height","latitude","longitude","zoom","startPanLngLat","startZoomLngLat","startRotatePos","startBearing","startPitch","startZoom","normalize","Number","isFinite","_state","panStart","pos","_getUpdatedState","_unproject","pan","startPos","viewport","_viewportProps","newProps","panByPosition","panEnd","rotateStart","rotate","deltaAngleX","deltaAngleY","newRotation","_calculateNewPitchAndBearing","_getRotationParams","rotateEnd","zoomStart","scale","_calculateNewZoom","zoomedViewport","zoomEnd","zoomIn","speed","_zoomFromCenter","zoomOut","moveLeft","_panFromCenter","moveRight","moveUp","moveDown","rotateLeft","rotateRight","rotateUp","rotateDown","shortestPathFrom","viewState","fromProps","getViewportProps","props","Math","abs","offset","_applyConstraints","Object","assign","unproject","log2","deltaScaleX","deltaScaleY","deltaX","deltaY","centerY","startY","min","max","MapController","dragMode","setProps","oldProps","controllerStateProps","dimensionChanged","updateViewport","ControllerState","linearTransitionProps"],"mappings":"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","sourcesContent":["import {clamp} from 'math.gl';\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport {normalizeViewportProps} from '@math.gl/web-mercator';\nimport assert from '../utils/assert';\n\nconst PITCH_MOUSE_THRESHOLD = 5;\nconst PITCH_ACCEL = 1.2;\n\nconst DEFAULT_STATE = {\n  pitch: 0,\n  bearing: 0,\n  altitude: 1.5,\n  minZoom: 0,\n  maxZoom: 20,\n  minPitch: 0,\n  maxPitch: 60\n};\n\n/* Utils */\n\nexport class MapState extends ViewState {\n  constructor({\n    makeViewport,\n\n    /** Mapbox viewport properties */\n    /** The width of the viewport */\n    width,\n    /** The height of the viewport */\n    height,\n    /** The latitude at the center of the viewport */\n    latitude,\n    /** The longitude at the center of the viewport */\n    longitude,\n    /** The tile zoom level of the map. */\n    zoom,\n    /** The bearing of the viewport in degrees */\n    bearing = DEFAULT_STATE.bearing,\n    /** The pitch of the viewport in degrees */\n    pitch = DEFAULT_STATE.pitch,\n    /**\n     * Specify the altitude of the viewport camera\n     * Unit: map heights, default 1.5\n     * Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137\n     */\n    altitude = DEFAULT_STATE.altitude,\n\n    /** Viewport constraints */\n    maxZoom = DEFAULT_STATE.maxZoom,\n    minZoom = DEFAULT_STATE.minZoom,\n    maxPitch = DEFAULT_STATE.maxPitch,\n    minPitch = DEFAULT_STATE.minPitch,\n\n    /** Interaction states, required to calculate change during transform */\n    /* The point on map being grabbed when the operation first started */\n    startPanLngLat,\n    /* Center of the zoom when the operation first started */\n    startZoomLngLat,\n    /* Pointer position when rotation started */\n    startRotatePos,\n    /** Bearing when current perspective rotate operation started */\n    startBearing,\n    /** Pitch when current perspective rotate operation started */\n    startPitch,\n    /** Zoom when current zoom operation started */\n    startZoom,\n\n    /** Normalize viewport props to fit map height into viewport. Default `true` */\n    normalize\n  } = {}) {\n    assert(Number.isFinite(longitude)); // `longitude` must be supplied\n    assert(Number.isFinite(latitude)); // `latitude` must be supplied\n    assert(Number.isFinite(zoom)); // `zoom` must be supplied\n\n    super({\n      width,\n      height,\n      latitude,\n      longitude,\n      zoom,\n      bearing,\n      pitch,\n      altitude,\n      maxZoom,\n      minZoom,\n      maxPitch,\n      minPitch,\n      normalize\n    });\n\n    this._state = {\n      startPanLngLat,\n      startZoomLngLat,\n      startRotatePos,\n      startBearing,\n      startPitch,\n      startZoom\n    };\n\n    this.makeViewport = makeViewport;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}) {\n    return this._getUpdatedState({\n      startPanLngLat: this._unproject(pos)\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   * @param {[Number, Number], optional} startPos - where the pointer grabbed at\n   *   the start of the operation. Must be supplied of `panStart()` was not called\n   */\n  pan({pos, startPos}) {\n    const startPanLngLat = this._state.startPanLngLat || this._unproject(startPos);\n\n    if (!startPanLngLat) {\n      return this;\n    }\n\n    const viewport = this.makeViewport(this._viewportProps);\n    const newProps = viewport.panByPosition(startPanLngLat, pos);\n\n    return this._getUpdatedState(newProps);\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedState({\n      startPanLngLat: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  rotateStart({pos}) {\n    return this._getUpdatedState({\n      startRotatePos: pos,\n      startBearing: this._viewportProps.bearing,\n      startPitch: this._viewportProps.pitch\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  rotate({pos, deltaAngleX = 0, deltaAngleY = 0}) {\n    const {startRotatePos, startBearing, startPitch} = this._state;\n\n    if (!startRotatePos || !Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n      return this;\n    }\n    let newRotation;\n    if (pos) {\n      newRotation = this._calculateNewPitchAndBearing({\n        ...this._getRotationParams(pos, startRotatePos),\n        startBearing,\n        startPitch\n      });\n    } else {\n      newRotation = {\n        bearing: startBearing + deltaAngleX,\n        pitch: startPitch + deltaAngleY\n      };\n    }\n    return this._getUpdatedState(newRotation);\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedState({\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  zoomStart({pos}) {\n    return this._getUpdatedState({\n      startZoomLngLat: this._unproject(pos),\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current center is\n   * @param {[Number, Number]} startPos - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({pos, startPos, scale}) {\n    // Make sure we zoom around the current mouse position rather than map center\n    let {startZoom, startZoomLngLat} = this._state;\n\n    if (!Number.isFinite(startZoom)) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = this._viewportProps.zoom;\n      startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n    }\n\n    const zoom = this._calculateNewZoom({scale, startZoom});\n\n    const zoomedViewport = this.makeViewport({...this._viewportProps, zoom});\n\n    return this._getUpdatedState({\n      zoom,\n      ...zoomedViewport.panByPosition(startZoomLngLat, pos)\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomLngLat: null,\n      startZoom: null\n    });\n  }\n\n  zoomIn(speed = 2) {\n    return this._zoomFromCenter(speed);\n  }\n\n  zoomOut(speed = 2) {\n    return this._zoomFromCenter(1 / speed);\n  }\n\n  moveLeft(speed = 100) {\n    return this._panFromCenter([speed, 0]);\n  }\n\n  moveRight(speed = 100) {\n    return this._panFromCenter([-speed, 0]);\n  }\n\n  moveUp(speed = 100) {\n    return this._panFromCenter([0, speed]);\n  }\n\n  moveDown(speed = 100) {\n    return this._panFromCenter([0, -speed]);\n  }\n\n  rotateLeft(speed = 15) {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing - speed\n    });\n  }\n\n  rotateRight(speed = 15) {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing + speed\n    });\n  }\n\n  rotateUp(speed = 10) {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch + speed\n    });\n  }\n\n  rotateDown(speed = 10) {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch - speed\n    });\n  }\n\n  shortestPathFrom(viewState) {\n    // const endViewStateProps = new this.ControllerState(endProps).shortestPathFrom(startViewstate);\n    const fromProps = viewState.getViewportProps();\n    const props = {...this._viewportProps};\n    const {bearing, longitude} = props;\n\n    if (Math.abs(bearing - fromProps.bearing) > 180) {\n      props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n    }\n    if (Math.abs(longitude - fromProps.longitude) > 180) {\n      props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n    }\n    return props;\n  }\n\n  /* Private methods */\n\n  _zoomFromCenter(scale) {\n    const {width, height} = this._viewportProps;\n    return this.zoom({\n      pos: [width / 2, height / 2],\n      scale\n    });\n  }\n\n  _panFromCenter(offset) {\n    const {width, height} = this._viewportProps;\n    return this.pan({\n      startPos: [width / 2, height / 2],\n      pos: [width / 2 + offset[0], height / 2 + offset[1]]\n    });\n  }\n\n  _getUpdatedState(newProps) {\n    // Update _viewportProps\n    return new this.constructor({\n      makeViewport: this.makeViewport,\n      ...this._viewportProps,\n      ...this._state,\n      ...newProps\n    });\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n\n    // Ensure pitch is within specified range\n    const {maxPitch, minPitch, pitch} = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n\n    // Normalize viewport props to fit map height into viewport\n    const {normalize = true} = props;\n    if (normalize) {\n      Object.assign(props, normalizeViewportProps(props));\n    }\n\n    return props;\n  }\n\n  _unproject(pos) {\n    const viewport = this.makeViewport(this._viewportProps);\n    return pos && viewport.unproject(pos);\n  }\n\n  // Calculates new zoom\n  _calculateNewZoom({scale, startZoom}) {\n    const {maxZoom, minZoom} = this._viewportProps;\n    const zoom = startZoom + Math.log2(scale);\n    return clamp(zoom, minZoom, maxZoom);\n  }\n\n  // Calculates a new pitch and bearing from a position (coming from an event)\n  _calculateNewPitchAndBearing({deltaScaleX, deltaScaleY, startBearing, startPitch}) {\n    // clamp deltaScaleY to [-1, 1] so that rotation is constrained between minPitch and maxPitch.\n    // deltaScaleX does not need to be clamped as bearing does not have constraints.\n    deltaScaleY = clamp(deltaScaleY, -1, 1);\n\n    const {minPitch, maxPitch} = this._viewportProps;\n\n    const bearing = startBearing + 180 * deltaScaleX;\n    let pitch = startPitch;\n    if (deltaScaleY > 0) {\n      // Gradually increase pitch\n      pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n    } else if (deltaScaleY < 0) {\n      // Gradually decrease pitch\n      pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n    }\n\n    return {\n      pitch,\n      bearing\n    };\n  }\n\n  _getRotationParams(pos, startPos) {\n    const deltaX = pos[0] - startPos[0];\n    const deltaY = pos[1] - startPos[1];\n    const centerY = pos[1];\n    const startY = startPos[1];\n    const {width, height} = this._viewportProps;\n\n    const deltaScaleX = deltaX / width;\n    let deltaScaleY = 0;\n\n    if (deltaY > 0) {\n      if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to -1 as we drag upwards\n        deltaScaleY = (deltaY / (startY - height)) * PITCH_ACCEL;\n      }\n    } else if (deltaY < 0) {\n      if (startY > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to 1 as we drag upwards\n        deltaScaleY = 1 - centerY / startY;\n      }\n    }\n    deltaScaleY = Math.min(1, Math.max(-1, deltaScaleY));\n    return {deltaScaleX, deltaScaleY};\n  }\n}\n\nexport default class MapController extends Controller {\n  constructor(props) {\n    props.dragMode = props.dragMode || 'pan';\n    super(MapState, props);\n  }\n\n  setProps(props) {\n    const oldProps = this.controllerStateProps;\n\n    super.setProps(props);\n\n    const dimensionChanged = !oldProps || oldProps.height !== props.height;\n    if (dimensionChanged) {\n      // Dimensions changed, normalize the props\n      this.updateViewport(\n        new this.ControllerState({\n          makeViewport: this.makeViewport,\n          ...this.controllerStateProps,\n          ...this._state\n        })\n      );\n    }\n  }\n\n  get linearTransitionProps() {\n    return ['longitude', 'latitude', 'zoom', 'bearing', 'pitch'];\n  }\n}\n"],"file":"map-controller.js"}