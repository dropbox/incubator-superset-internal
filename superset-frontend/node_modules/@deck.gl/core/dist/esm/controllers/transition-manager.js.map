{"version":3,"sources":["../../../src/controllers/transition-manager.js"],"names":["Transition","noop","TRANSITION_EVENTS","BREAK","SNAP_TO_END","IGNORE","DEFAULT_PROPS","transitionEasing","t","transitionInterruption","onTransitionStart","onTransitionInterrupt","onTransitionEnd","TransitionManager","constructor","ControllerState","props","propsInTransition","transition","timeline","onViewStateChange","onStateChange","_onTransitionUpdate","bind","finalize","cancel","getViewportInTransition","processViewStateChange","nextProps","transitionTriggered","currentProps","_shouldIgnoreViewportChange","_isTransitionEnabled","interruption","endProps","settings","startProps","_triggerTransition","updateTransition","update","transitionDuration","transitionInterpolator","Boolean","_isUpdateDueToCurrentTransition","inProgress","interpolator","arePropsEqual","startViewstate","endViewStateProps","shortestPathFrom","duration","getDuration","initialProps","initializeProps","start","easing","end","onStart","onUpdate","onInterrupt","_onTransitionEnd","onEnd","inTransition","callback","isZooming","isPanning","isRotating","time","viewport","interpolateProps","getViewportProps","viewState","oldViewState"],"mappings":"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","sourcesContent":["import Transition from '../transitions/transition';\n\nconst noop = () => {};\n\nexport const TRANSITION_EVENTS = {\n  BREAK: 1,\n  SNAP_TO_END: 2,\n  IGNORE: 3\n};\n\nconst DEFAULT_PROPS = {\n  transitionEasing: t => t,\n  transitionInterruption: TRANSITION_EVENTS.BREAK,\n  onTransitionStart: noop,\n  onTransitionInterrupt: noop,\n  onTransitionEnd: noop\n};\n\nexport default class TransitionManager {\n  constructor(ControllerState, props = {}) {\n    this.ControllerState = ControllerState;\n    this.props = {...DEFAULT_PROPS, ...props};\n    this.propsInTransition = null;\n    this.transition = new Transition(props.timeline);\n\n    this.onViewStateChange = props.onViewStateChange || noop;\n    this.onStateChange = props.onStateChange || noop;\n\n    this._onTransitionUpdate = this._onTransitionUpdate.bind(this);\n  }\n\n  finalize() {\n    this.transition.cancel();\n  }\n\n  // Returns current transitioned viewport.\n  getViewportInTransition() {\n    return this.propsInTransition;\n  }\n\n  // Process the vewiport change, either ignore or trigger a new transition.\n  // Return true if a new transition is triggered, false otherwise.\n  processViewStateChange(nextProps) {\n    let transitionTriggered = false;\n    const currentProps = this.props;\n    // Set this.props here as '_triggerTransition' calls '_updateViewport' that uses this.props.\n    nextProps = {...DEFAULT_PROPS, ...nextProps};\n    this.props = nextProps;\n\n    // NOTE: Be cautious re-ordering statements in this function.\n    if (this._shouldIgnoreViewportChange(currentProps, nextProps)) {\n      return transitionTriggered;\n    }\n\n    if (this._isTransitionEnabled(nextProps)) {\n      const {interruption, endProps} = this.transition.settings;\n      const startProps = {\n        ...currentProps,\n        ...(interruption === TRANSITION_EVENTS.SNAP_TO_END\n          ? endProps\n          : this.propsInTransition || currentProps)\n      };\n\n      this._triggerTransition(startProps, nextProps);\n\n      transitionTriggered = true;\n    } else {\n      this.transition.cancel();\n    }\n\n    return transitionTriggered;\n  }\n\n  updateTransition() {\n    this.transition.update();\n  }\n\n  // Helper methods\n\n  _isTransitionEnabled(props) {\n    const {transitionDuration, transitionInterpolator} = props;\n    return (\n      (transitionDuration > 0 || transitionDuration === 'auto') && Boolean(transitionInterpolator)\n    );\n  }\n\n  _isUpdateDueToCurrentTransition(props) {\n    if (this.transition.inProgress) {\n      return this.transition.settings.interpolator.arePropsEqual(props, this.propsInTransition);\n    }\n    return false;\n  }\n\n  _shouldIgnoreViewportChange(currentProps, nextProps) {\n    if (this.transition.inProgress) {\n      // Ignore update if it is requested to be ignored\n      return (\n        this.transition.settings.interruption === TRANSITION_EVENTS.IGNORE ||\n        // Ignore update if it is due to current active transition.\n        this._isUpdateDueToCurrentTransition(nextProps)\n      );\n    } else if (this._isTransitionEnabled(nextProps)) {\n      // Ignore if none of the viewport props changed.\n      return nextProps.transitionInterpolator.arePropsEqual(currentProps, nextProps);\n    }\n    return true;\n  }\n\n  _triggerTransition(startProps, endProps) {\n    const startViewstate = new this.ControllerState(startProps);\n    const endViewStateProps = new this.ControllerState(endProps).shortestPathFrom(startViewstate);\n\n    // update transitionDuration for 'auto' mode\n    const {transitionInterpolator} = endProps;\n    const duration = transitionInterpolator.getDuration\n      ? transitionInterpolator.getDuration(startProps, endProps)\n      : endProps.transitionDuration;\n\n    if (duration === 0) {\n      return;\n    }\n\n    const initialProps = endProps.transitionInterpolator.initializeProps(\n      startProps,\n      endViewStateProps\n    );\n\n    this.propsInTransition = {};\n    this.duration = duration;\n    this.transition.start({\n      duration,\n      easing: endProps.transitionEasing,\n      interpolator: endProps.transitionInterpolator,\n      interruption: endProps.transitionInterruption,\n\n      startProps: initialProps.start,\n      endProps: initialProps.end,\n\n      onStart: endProps.onTransitionStart,\n      onUpdate: this._onTransitionUpdate,\n      onInterrupt: this._onTransitionEnd(endProps.onTransitionInterrupt),\n      onEnd: this._onTransitionEnd(endProps.onTransitionEnd)\n    });\n\n    this.onStateChange({inTransition: true});\n\n    this.updateTransition();\n  }\n\n  _onTransitionEnd(callback) {\n    return transition => {\n      this.propsInTransition = null;\n\n      this.onStateChange({\n        inTransition: false,\n        isZooming: false,\n        isPanning: false,\n        isRotating: false\n      });\n\n      callback(transition);\n    };\n  }\n\n  _onTransitionUpdate(transition) {\n    // NOTE: Be cautious re-ordering statements in this function.\n    const {\n      time,\n      settings: {interpolator, startProps, endProps, duration, easing}\n    } = transition;\n    const t = easing(time / duration);\n    const viewport = interpolator.interpolateProps(startProps, endProps, t);\n\n    // This gurantees all props (e.g. bearing, longitude) are normalized\n    // So when viewports are compared they are in same range.\n    this.propsInTransition = new this.ControllerState({\n      ...this.props,\n      ...viewport\n    }).getViewportProps();\n\n    this.onViewStateChange({\n      viewState: this.propsInTransition,\n      oldViewState: this.props\n    });\n  }\n}\n"],"file":"transition-manager.js"}