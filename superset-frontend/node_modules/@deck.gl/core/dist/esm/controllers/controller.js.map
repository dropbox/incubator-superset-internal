{"version":3,"sources":["../../../src/controllers/controller.js"],"names":["TransitionManager","TRANSITION_EVENTS","LinearInterpolator","NO_TRANSITION_PROPS","transitionDuration","LINEAR_TRANSITION_PROPS","transitionEasing","t","transitionInterruption","BREAK","DEFAULT_INERTIA","INERTIA_EASING","EVENT_TYPES","WHEEL","PAN","PINCH","TRIPLE_PAN","DOUBLE_TAP","KEYBOARD","Controller","constructor","ControllerState","options","controllerState","controllerStateProps","eventManager","transitionManager","onViewStateChange","_onTransition","bind","onStateChange","_setInteractionState","linearTransitionProps","_transition","transitionInterpolator","transitionProps","_events","_interactionState","isDragging","_customEvents","handleEvent","setProps","events","customEvents","toggleEvents","finalize","eventName","off","event","makeViewport","_state","eventStartBlocked","_eventStartBlocked","type","_onPanStart","_onPan","_onPanEnd","_onPinchStart","_onPinch","_onPinchEnd","_onTriplePanStart","_onTriplePan","_onTriplePanEnd","_onDoubleTap","_onWheel","_onKeyDown","getCenter","x","y","offsetCenter","isPointInBounds","pos","width","height","handled","inside","stopPropagation","isFunctionKeyPressed","srcEvent","Boolean","metaKey","altKey","ctrlKey","shiftKey","blockEvents","timeout","timer","setTimeout","props","dragMode","_getTransitionProps","processViewStateChange","inertia","scrollZoom","dragPan","dragRotate","doubleClickZoom","touchZoom","touchRotate","keyboard","isInteractive","updateTransition","eventNames","enabled","forEach","on","updateViewport","newControllerState","extraProps","interactionState","viewState","getViewportProps","changed","getState","oldViewState","params","newStates","Object","assign","alternateMode","rightButton","invertPan","_panMove","_onPanMove","_onPanRotate","_onPanMoveEnd","_onPanRotateEnd","pan","isPanning","velocity","endPos","velocityX","velocityY","panEnd","rotate","isRotating","rotateEnd","preventDefault","speed","smooth","delta","scale","Math","exp","abs","zoom","around","isZooming","rotateStart","deltaX","zoomStart","_startPinchRotation","rotation","_lastPinchEvent","deltaAngleX","z","log2","velocityZ","deltaTime","endScale","pow","zoomEnd","isZoomOut","funcKey","zoomSpeed","moveSpeed","rotateSpeedX","rotateSpeedY","code","zoomOut","zoomIn","rotateLeft","moveLeft","rotateRight","moveRight","rotateUp","moveUp","rotateDown","moveDown","opts"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable max-statements, complexity */\nimport TransitionManager, {TRANSITION_EVENTS} from './transition-manager';\nimport LinearInterpolator from '../transitions/linear-interpolator';\n\nconst NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n};\n\nconst LINEAR_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: t => t,\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\n\nconst DEFAULT_INERTIA = 300;\nconst INERTIA_EASING = t => 1 - (1 - t) * (1 - t);\n\nconst EVENT_TYPES = {\n  WHEEL: ['wheel'],\n  PAN: ['panstart', 'panmove', 'panend'],\n  PINCH: ['pinchstart', 'pinchmove', 'pinchend'],\n  TRIPLE_PAN: ['tripanstart', 'tripanmove', 'tripanend'],\n  DOUBLE_TAP: ['doubletap'],\n  KEYBOARD: ['keydown']\n};\n\nexport default class Controller {\n  constructor(ControllerState, options = {}) {\n    this.ControllerState = ControllerState;\n    this.controllerState = null;\n    this.controllerStateProps = null;\n    this.eventManager = null;\n    this.transitionManager = new TransitionManager(ControllerState, {\n      ...options,\n      onViewStateChange: this._onTransition.bind(this),\n      onStateChange: this._setInteractionState.bind(this)\n    });\n\n    const linearTransitionProps = this.linearTransitionProps;\n    this._transition = linearTransitionProps && {\n      ...LINEAR_TRANSITION_PROPS,\n      transitionInterpolator: new LinearInterpolator({\n        transitionProps: linearTransitionProps\n      })\n    };\n\n    this._events = null;\n    this._interactionState = {\n      isDragging: false\n    };\n    this._customEvents = [];\n    this.onViewStateChange = null;\n    this.onStateChange = null;\n\n    this.handleEvent = this.handleEvent.bind(this);\n\n    this.setProps(options);\n  }\n\n  get linearTransitionProps() {\n    return null;\n  }\n\n  set events(customEvents) {\n    this.toggleEvents(this._customEvents, false);\n    this.toggleEvents(customEvents, true);\n    this._customEvents = customEvents;\n    // Make sure default events are not overwritten\n    this.setProps(this.controllerStateProps);\n  }\n\n  finalize() {\n    for (const eventName in this._events) {\n      if (this._events[eventName]) {\n        this.eventManager.off(eventName, this.handleEvent);\n      }\n    }\n    this.transitionManager.finalize();\n  }\n\n  /**\n   * Callback for events\n   * @param {hammer.Event} event\n   */\n  handleEvent(event) {\n    const {ControllerState} = this;\n    this.controllerState = new ControllerState({\n      makeViewport: this.makeViewport,\n      ...this.controllerStateProps,\n      ...this._state\n    });\n    const eventStartBlocked = this._eventStartBlocked;\n\n    switch (event.type) {\n      case 'panstart':\n        return eventStartBlocked ? false : this._onPanStart(event);\n      case 'panmove':\n        return this._onPan(event);\n      case 'panend':\n        return this._onPanEnd(event);\n      case 'pinchstart':\n        return eventStartBlocked ? false : this._onPinchStart(event);\n      case 'pinchmove':\n        return this._onPinch(event);\n      case 'pinchend':\n        return this._onPinchEnd(event);\n      case 'tripanstart':\n        return eventStartBlocked ? false : this._onTriplePanStart(event);\n      case 'tripanmove':\n        return this._onTriplePan(event);\n      case 'tripanend':\n        return this._onTriplePanEnd(event);\n      case 'doubletap':\n        return this._onDoubleTap(event);\n      case 'wheel':\n        return this._onWheel(event);\n      case 'keydown':\n        return this._onKeyDown(event);\n      default:\n        return false;\n    }\n  }\n\n  /* Event utils */\n  // Event object: http://hammerjs.github.io/api/#event-object\n  getCenter(event) {\n    const {x, y} = this.controllerStateProps;\n    const {offsetCenter} = event;\n    return [offsetCenter.x - x, offsetCenter.y - y];\n  }\n\n  isPointInBounds(pos, event) {\n    const {width, height} = this.controllerStateProps;\n    if (event && event.handled) {\n      return false;\n    }\n\n    const inside = pos[0] >= 0 && pos[0] <= width && pos[1] >= 0 && pos[1] <= height;\n    if (inside && event) {\n      event.stopPropagation();\n    }\n    return inside;\n  }\n\n  isFunctionKeyPressed(event) {\n    const {srcEvent} = event;\n    return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);\n  }\n\n  isDragging() {\n    return this._interactionState.isDragging;\n  }\n\n  // When a multi-touch event ends, e.g. pinch, not all pointers are lifted at the same time.\n  // This triggers a brief `pan` event.\n  // Calling this method will temporarily disable *start events to avoid conflicting transitions.\n  blockEvents(timeout) {\n    /* global setTimeout */\n    const timer = setTimeout(() => {\n      if (this._eventStartBlocked === timer) {\n        this._eventStartBlocked = null;\n      }\n    }, timeout);\n    this._eventStartBlocked = timer;\n  }\n\n  /**\n   * Extract interactivity options\n   */\n  setProps(props) {\n    if ('onViewStateChange' in props) {\n      this.onViewStateChange = props.onViewStateChange;\n    }\n    if ('onStateChange' in props) {\n      this.onStateChange = props.onStateChange;\n    }\n    if ('makeViewport' in props) {\n      this.makeViewport = props.makeViewport;\n    }\n    if ('dragMode' in props) {\n      this.dragMode = props.dragMode;\n    }\n    this.controllerStateProps = props;\n\n    if ('eventManager' in props && this.eventManager !== props.eventManager) {\n      // EventManager has changed\n      this.eventManager = props.eventManager;\n      this._events = {};\n      this.toggleEvents(this._customEvents, true);\n    }\n\n    if (!('transitionInterpolator' in props)) {\n      // Add default transition interpolator\n      props.transitionInterpolator = this._getTransitionProps().transitionInterpolator;\n    }\n\n    this.transitionManager.processViewStateChange(props);\n\n    let {inertia} = props;\n    if (inertia === true) {\n      inertia = DEFAULT_INERTIA;\n    }\n    this.inertia = inertia;\n\n    // TODO - make sure these are not reset on every setProps\n    const {\n      scrollZoom = true,\n      dragPan = true,\n      dragRotate = true,\n      doubleClickZoom = true,\n      touchZoom = true,\n      touchRotate = false,\n      keyboard = true\n    } = props;\n\n    // Register/unregister events\n    const isInteractive = Boolean(this.onViewStateChange);\n    this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && scrollZoom);\n    this.toggleEvents(EVENT_TYPES.PAN, isInteractive && (dragPan || dragRotate));\n    this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && (touchZoom || touchRotate));\n    this.toggleEvents(EVENT_TYPES.TRIPLE_PAN, isInteractive && touchRotate);\n    this.toggleEvents(EVENT_TYPES.DOUBLE_TAP, isInteractive && doubleClickZoom);\n    this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && keyboard);\n\n    // Interaction toggles\n    this.scrollZoom = scrollZoom;\n    this.dragPan = dragPan;\n    this.dragRotate = dragRotate;\n    this.doubleClickZoom = doubleClickZoom;\n    this.touchZoom = touchZoom;\n    this.touchRotate = touchRotate;\n    this.keyboard = keyboard;\n  }\n\n  updateTransition() {\n    this.transitionManager.updateTransition();\n  }\n\n  toggleEvents(eventNames, enabled) {\n    if (this.eventManager) {\n      eventNames.forEach(eventName => {\n        if (this._events[eventName] !== enabled) {\n          this._events[eventName] = enabled;\n          if (enabled) {\n            this.eventManager.on(eventName, this.handleEvent);\n          } else {\n            this.eventManager.off(eventName, this.handleEvent);\n          }\n        }\n      });\n    }\n  }\n\n  // Private Methods\n\n  /* Callback util */\n  // formats map state and invokes callback function\n  updateViewport(newControllerState, extraProps = {}, interactionState = {}) {\n    const viewState = {...newControllerState.getViewportProps(), ...extraProps};\n\n    // TODO - to restore diffing, we need to include interactionState\n    const changed = this.controllerState !== newControllerState;\n    // const oldViewState = this.controllerState.getViewportProps();\n    // const changed = Object.keys(viewState).some(key => oldViewState[key] !== viewState[key]);\n\n    this._state = newControllerState.getState();\n    this._setInteractionState(interactionState);\n\n    if (changed) {\n      const oldViewState = this.controllerState ? this.controllerState.getViewportProps() : null;\n      if (this.onViewStateChange) {\n        this.onViewStateChange({viewState, interactionState: this._interactionState, oldViewState});\n      }\n    }\n  }\n\n  _onTransition(params) {\n    if (this.onViewStateChange) {\n      params.interactionState = this._interactionState;\n      this.onViewStateChange(params);\n    }\n  }\n\n  _setInteractionState(newStates) {\n    Object.assign(this._interactionState, newStates);\n    if (this.onStateChange) {\n      this.onStateChange(this._interactionState);\n    }\n  }\n\n  /* Event handlers */\n  // Default handler for the `panstart` event.\n  _onPanStart(event) {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n    let alternateMode = this.isFunctionKeyPressed(event) || event.rightButton;\n    if (this.invertPan || this.dragMode === 'pan') {\n      // invertPan is replaced by props.dragMode, keeping for backward compatibility\n      alternateMode = !alternateMode;\n    }\n    const newControllerState = this.controllerState[alternateMode ? 'panStart' : 'rotateStart']({\n      pos\n    });\n    this._panMove = alternateMode;\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `panmove` and `panend` event.\n  _onPan(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    return this._panMove ? this._onPanMove(event) : this._onPanRotate(event);\n  }\n\n  _onPanEnd(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    return this._panMove ? this._onPanMoveEnd(event) : this._onPanRotateEnd(event);\n  }\n\n  // Default handler for panning to move.\n  // Called by `_onPan` when panning without function key pressed.\n  _onPanMove(event) {\n    if (!this.dragPan) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    const newControllerState = this.controllerState.pan({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: true\n    });\n    return true;\n  }\n\n  _onPanMoveEnd(event) {\n    const {inertia} = this;\n    if (this.dragPan && inertia && event.velocity) {\n      const pos = this.getCenter(event);\n      const endPos = [\n        pos[0] + (event.velocityX * inertia) / 2,\n        pos[1] + (event.velocityY * inertia) / 2\n      ];\n      const newControllerState = this.controllerState.pan({pos: endPos}).panEnd();\n      this.updateViewport(\n        newControllerState,\n        {\n          ...this._getTransitionProps(),\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        },\n        {\n          isDragging: false,\n          isPanning: true\n        }\n      );\n    } else {\n      const newControllerState = this.controllerState.panEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isPanning: false\n      });\n    }\n    return true;\n  }\n\n  // Default handler for panning to rotate.\n  // Called by `_onPan` when panning with function key pressed.\n  _onPanRotate(event) {\n    if (!this.dragRotate) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n    const newControllerState = this.controllerState.rotate({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isRotating: true\n    });\n    return true;\n  }\n\n  _onPanRotateEnd(event) {\n    const {inertia} = this;\n    if (this.dragRotate && inertia && event.velocity) {\n      const pos = this.getCenter(event);\n      const endPos = [\n        pos[0] + (event.velocityX * inertia) / 2,\n        pos[1] + (event.velocityY * inertia) / 2\n      ];\n      const newControllerState = this.controllerState.rotate({pos: endPos}).rotateEnd();\n      this.updateViewport(\n        newControllerState,\n        {\n          ...this._getTransitionProps(),\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        },\n        {\n          isDragging: false,\n          isRotating: true\n        }\n      );\n    } else {\n      const newControllerState = this.controllerState.rotateEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isRotating: false\n      });\n    }\n    return true;\n  }\n\n  // Default handler for the `wheel` event.\n  _onWheel(event) {\n    if (!this.scrollZoom) {\n      return false;\n    }\n    event.preventDefault();\n\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const {speed = 0.01, smooth = false} = this.scrollZoom;\n    const {delta} = event;\n\n    // Map wheel delta to relative scale\n    let scale = 2 / (1 + Math.exp(-Math.abs(delta * speed)));\n    if (delta < 0 && scale !== 0) {\n      scale = 1 / scale;\n    }\n\n    const newControllerState = this.controllerState.zoom({pos, scale});\n    this.updateViewport(\n      newControllerState,\n      {...this._getTransitionProps({around: pos}), transitionDuration: smooth ? 250 : 1},\n      {\n        isZooming: true,\n        isPanning: true\n      }\n    );\n    return true;\n  }\n\n  _onTriplePanStart(event) {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n    const newControllerState = this.controllerState.rotateStart({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  _onTriplePan(event) {\n    if (!this.touchRotate) {\n      return false;\n    }\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n    pos[0] -= event.deltaX;\n\n    const newControllerState = this.controllerState.rotate({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isRotating: true\n    });\n    return true;\n  }\n\n  _onTriplePanEnd(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    const {inertia} = this;\n    if (this.touchRotate && inertia && event.velocityY) {\n      const pos = this.getCenter(event);\n      const endPos = [pos[0], (pos[1] += (event.velocityY * inertia) / 2)];\n      const newControllerState = this.controllerState.rotate({pos: endPos});\n      this.updateViewport(\n        newControllerState,\n        {\n          ...this._getTransitionProps(),\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        },\n        {\n          isDragging: false,\n          isRotating: true\n        }\n      );\n      this.blockEvents(inertia);\n    } else {\n      const newControllerState = this.controllerState.rotateEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isRotating: false\n      });\n    }\n    return true;\n  }\n\n  // Default handler for the `pinchstart` event.\n  _onPinchStart(event) {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const newControllerState = this.controllerState.zoomStart({pos}).rotateStart({pos});\n    // hack - hammer's `rotation` field doesn't seem to produce the correct angle\n    this._startPinchRotation = event.rotation;\n    this._lastPinchEvent = event;\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `pinchmove` and `pinchend` events.\n  _onPinch(event) {\n    if (!this.touchZoom && !this.touchRotate) {\n      return false;\n    }\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    let newControllerState = this.controllerState;\n    if (this.touchZoom) {\n      const {scale} = event;\n      const pos = this.getCenter(event);\n      newControllerState = newControllerState.zoom({pos, scale});\n    }\n    if (this.touchRotate) {\n      const {rotation} = event;\n      newControllerState = newControllerState.rotate({\n        deltaAngleX: this._startPinchRotation - rotation\n      });\n    }\n\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: this.touchZoom,\n      isZooming: this.touchZoom,\n      isRotating: this.touchRotate\n    });\n    this._lastPinchEvent = event;\n    return true;\n  }\n\n  _onPinchEnd(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    const {inertia, _lastPinchEvent} = this;\n    if (this.touchZoom && inertia && _lastPinchEvent && event.scale !== _lastPinchEvent.scale) {\n      const pos = this.getCenter(event);\n      let newControllerState = this.controllerState.rotateEnd();\n      const z = Math.log2(event.scale);\n      const velocityZ =\n        (z - Math.log2(_lastPinchEvent.scale)) / (event.deltaTime - _lastPinchEvent.deltaTime);\n      const endScale = Math.pow(2, z + (velocityZ * inertia) / 2);\n      newControllerState = newControllerState.zoom({pos, scale: endScale}).zoomEnd();\n\n      this.updateViewport(\n        newControllerState,\n        {\n          ...this._getTransitionProps({around: pos}),\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        },\n        {\n          isDragging: false,\n          isPanning: this.touchZoom,\n          isZooming: this.touchZoom,\n          isRotating: false\n        }\n      );\n      this.blockEvents(inertia);\n    } else {\n      const newControllerState = this.controllerState.zoomEnd().rotateEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isPanning: false,\n        isZooming: false,\n        isRotating: false\n      });\n    }\n    this._startPinchRotation = null;\n    this._lastPinchEvent = null;\n    return true;\n  }\n\n  // Default handler for the `doubletap` event.\n  _onDoubleTap(event) {\n    if (!this.doubleClickZoom) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const isZoomOut = this.isFunctionKeyPressed(event);\n\n    const newControllerState = this.controllerState.zoom({pos, scale: isZoomOut ? 0.5 : 2});\n    this.updateViewport(newControllerState, this._getTransitionProps({around: pos}), {\n      isZooming: true,\n      isPanning: true\n    });\n    this.blockEvents(100);\n    return true;\n  }\n\n  // Default handler for the `keydown` event\n  _onKeyDown(event) {\n    if (!this.keyboard) {\n      return false;\n    }\n    const funcKey = this.isFunctionKeyPressed(event);\n    const {zoomSpeed, moveSpeed, rotateSpeedX, rotateSpeedY} = this.keyboard;\n    const {controllerState} = this;\n    let newControllerState;\n    const interactionState = {};\n\n    switch (event.srcEvent.code) {\n      case 'Minus':\n        newControllerState = funcKey\n          ? controllerState.zoomOut(zoomSpeed).zoomOut(zoomSpeed)\n          : controllerState.zoomOut(zoomSpeed);\n        interactionState.isZooming = true;\n        break;\n      case 'Equal':\n        newControllerState = funcKey\n          ? controllerState.zoomIn(zoomSpeed).zoomIn(zoomSpeed)\n          : controllerState.zoomIn(zoomSpeed);\n        interactionState.isZooming = true;\n        break;\n      case 'ArrowLeft':\n        if (funcKey) {\n          newControllerState = controllerState.rotateLeft(rotateSpeedX);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveLeft(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      case 'ArrowRight':\n        if (funcKey) {\n          newControllerState = controllerState.rotateRight(rotateSpeedX);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveRight(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      case 'ArrowUp':\n        if (funcKey) {\n          newControllerState = controllerState.rotateUp(rotateSpeedY);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveUp(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      case 'ArrowDown':\n        if (funcKey) {\n          newControllerState = controllerState.rotateDown(rotateSpeedY);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveDown(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      default:\n        return false;\n    }\n    this.updateViewport(newControllerState, this._getTransitionProps(), interactionState);\n    return true;\n  }\n\n  _getTransitionProps(opts) {\n    const {_transition} = this;\n\n    if (!_transition) {\n      return NO_TRANSITION_PROPS;\n    }\n\n    // Enables Transitions on double-tap and key-down events.\n    return opts\n      ? {\n          ..._transition,\n          transitionInterpolator: new LinearInterpolator({\n            ...opts,\n            transitionProps: this.linearTransitionProps,\n            makeViewport: this.controllerState.makeViewport\n          })\n        }\n      : _transition;\n  }\n}\n"],"file":"controller.js"}