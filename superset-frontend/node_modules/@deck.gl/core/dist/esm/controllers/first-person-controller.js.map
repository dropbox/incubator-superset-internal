{"version":3,"sources":["../../../src/controllers/first-person-controller.js"],"names":["Controller","ViewState","mod","Vector3","_SphericalCoordinates","SphericalCoordinates","clamp","MOVEMENT_SPEED","DEFAULT_STATE","position","pitch","bearing","maxPitch","minPitch","FirstPersonState","constructor","width","height","longitude","latitude","startRotatePos","startBearing","startPitch","startZoomPosition","startZoom","_state","getDirection","use2D","spherical","_viewportProps","direction","toVector3","normalize","panStart","pan","panEnd","rotateStart","pos","_getUpdatedState","rotate","deltaAngleX","deltaAngleY","Number","isFinite","newRotation","deltaScaleX","deltaScaleY","rotateEnd","zoomStart","zoom","scale","_move","Math","log2","zoomEnd","moveLeft","speed","rotateZ","radians","PI","moveRight","moveUp","moveDown","negate","rotateLeft","rotateRight","rotateUp","rotateDown","zoomIn","zoomOut","shortestPathFrom","viewState","fromProps","getViewportProps","props","abs","fromPosition","delta","add","newProps","_applyConstraints","FirstPersonController","linearTransitionProps"],"mappings":"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","sourcesContent":["import Controller from './controller';\nimport ViewState from './view-state';\nimport {mod} from '../utils/math-utils';\n\nimport {Vector3, _SphericalCoordinates as SphericalCoordinates, clamp} from 'math.gl';\n\nconst MOVEMENT_SPEED = 20;\nconst DEFAULT_STATE = {\n  position: [0, 0, 0],\n  pitch: 0,\n  bearing: 0,\n  maxPitch: 90,\n  minPitch: -90\n};\n\nclass FirstPersonState extends ViewState {\n  constructor({\n    /* Viewport arguments */\n    width, // Width of viewport\n    height, // Height of viewport\n\n    // Position and orientation\n    position = DEFAULT_STATE.position, // typically in meters from anchor point\n\n    bearing = DEFAULT_STATE.bearing, // Rotation around y axis\n    pitch = DEFAULT_STATE.pitch, // Rotation around x axis\n\n    // Geospatial anchor\n    longitude,\n    latitude,\n\n    maxPitch = DEFAULT_STATE.maxPitch,\n    minPitch = DEFAULT_STATE.minPitch,\n\n    // Model state when the rotate operation first started\n    startRotatePos,\n    startBearing,\n    startPitch,\n    startZoomPosition,\n    startZoom\n  }) {\n    super({\n      width,\n      height,\n      position,\n      bearing,\n      pitch,\n      longitude,\n      latitude,\n      maxPitch,\n      minPitch\n    });\n\n    this._state = {\n      startRotatePos,\n      startBearing,\n      startPitch,\n      startZoomPosition,\n      startZoom\n    };\n  }\n\n  /* Public API */\n\n  getDirection(use2D = false) {\n    const spherical = new SphericalCoordinates({\n      bearing: this._viewportProps.bearing,\n      pitch: use2D ? 90 : 90 + this._viewportProps.pitch\n    });\n    const direction = spherical.toVector3().normalize();\n    return direction;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart() {\n    return this;\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  pan() {\n    return this;\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this;\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  rotateStart({pos}) {\n    return this._getUpdatedState({\n      startRotatePos: pos,\n      startBearing: this._viewportProps.bearing,\n      startPitch: this._viewportProps.pitch\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  rotate({pos, deltaAngleX = 0, deltaAngleY = 0}) {\n    const {startRotatePos, startBearing, startPitch} = this._state;\n    const {width, height} = this._viewportProps;\n\n    if (!startRotatePos || !Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n      return this;\n    }\n\n    let newRotation;\n    if (pos) {\n      const deltaScaleX = (pos[0] - startRotatePos[0]) / width;\n      const deltaScaleY = (pos[1] - startRotatePos[1]) / height;\n      newRotation = {\n        bearing: startBearing - deltaScaleX * 180,\n        pitch: startPitch - deltaScaleY * 90\n      };\n    } else {\n      newRotation = {\n        bearing: startBearing - deltaAngleX,\n        pitch: startPitch - deltaAngleY\n      };\n    }\n\n    return this._getUpdatedState(newRotation);\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedState({\n      startRotatePos: null,\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  zoomStart() {\n    return this._getUpdatedState({\n      startZoomPosition: this._viewportProps.position,\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current center is\n   * @param {[Number, Number]} startPos - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({scale}) {\n    let {startZoomPosition} = this._state;\n    if (!startZoomPosition) {\n      startZoomPosition = this._viewportProps.position;\n    }\n\n    const direction = this.getDirection();\n    return this._move(direction, Math.log2(scale) * MOVEMENT_SPEED, startZoomPosition);\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomPosition: null,\n      startZoom: null\n    });\n  }\n\n  moveLeft(speed = MOVEMENT_SPEED) {\n    const direction = this.getDirection(true);\n    return this._move(direction.rotateZ({radians: Math.PI / 2}), speed);\n  }\n\n  moveRight(speed = MOVEMENT_SPEED) {\n    const direction = this.getDirection(true);\n    return this._move(direction.rotateZ({radians: -Math.PI / 2}), speed);\n  }\n\n  // forward\n  moveUp(speed = MOVEMENT_SPEED) {\n    const direction = this.getDirection(true);\n    return this._move(direction, speed);\n  }\n\n  // backward\n  moveDown(speed = MOVEMENT_SPEED) {\n    const direction = this.getDirection(true);\n    return this._move(direction.negate(), speed);\n  }\n\n  rotateLeft(speed = 15) {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing - speed\n    });\n  }\n\n  rotateRight(speed = 15) {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing + speed\n    });\n  }\n\n  rotateUp(speed = 10) {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch + speed\n    });\n  }\n\n  rotateDown(speed = 10) {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch - speed\n    });\n  }\n\n  zoomIn(speed = 2) {\n    return this.zoom({scale: speed});\n  }\n\n  zoomOut(speed = 2) {\n    return this.zoom({scale: 1 / speed});\n  }\n\n  // shortest path between two view states\n  shortestPathFrom(viewState) {\n    const fromProps = viewState.getViewportProps();\n    const props = {...this._viewportProps};\n    const {bearing, longitude} = props;\n\n    if (Math.abs(bearing - fromProps.bearing) > 180) {\n      props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n    }\n    if (Math.abs(longitude - fromProps.longitude) > 180) {\n      props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n    }\n    return props;\n  }\n\n  /* Private methods */\n  _move(direction, speed, fromPosition = this._viewportProps.position) {\n    const delta = direction.scale(speed);\n    return this._getUpdatedState({\n      position: new Vector3(fromPosition).add(delta)\n    });\n  }\n\n  _getUpdatedState(newProps) {\n    // Update _viewportProps\n    return new FirstPersonState({...this._viewportProps, ...this._state, ...newProps});\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure pitch and zoom are within specified range\n    const {pitch, maxPitch, minPitch, longitude, bearing} = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n\n    // Normalize degrees\n    if (longitude < -180 || longitude > 180) {\n      props.longitude = mod(longitude + 180, 360) - 180;\n    }\n    if (bearing < -180 || bearing > 180) {\n      props.bearing = mod(bearing + 180, 360) - 180;\n    }\n\n    return props;\n  }\n}\n\nexport default class FirstPersonController extends Controller {\n  constructor(props) {\n    super(FirstPersonState, props);\n  }\n\n  get linearTransitionProps() {\n    return ['position', 'pitch', 'bearing'];\n  }\n}\n"],"file":"first-person-controller.js"}