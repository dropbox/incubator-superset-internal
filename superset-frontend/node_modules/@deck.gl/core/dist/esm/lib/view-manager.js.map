{"version":3,"sources":["../../../src/lib/view-manager.js"],"names":["deepEqual","log","flatten","ViewManager","constructor","props","views","width","height","viewState","controllers","timeline","_viewports","_viewportMap","_isUpdating","_needsRedraw","_needsUpdate","_eventManager","eventManager","_eventCallbacks","onViewStateChange","onInteractionStateChange","Object","seal","setProps","finalize","key","needsRedraw","opts","clearRedrawFlags","redraw","setNeedsUpdate","reason","updateViewStates","viewId","controller","updateTransition","getViewports","rect","filter","viewport","containsPixel","getViews","viewMap","forEach","view","id","getView","viewOrViewId","find","getViewState","getViewStateId","filterViewState","getViewport","unproject","xyz","viewports","pixel","x","y","i","length","p","slice","_setViews","_setViewState","_setSize","_update","_rebuildViewports","Boolean","viewsChanged","_diffViews","viewStateChanged","warn","_onViewStateChange","event","_createController","Controller","type","bind","onStateChange","makeViewport","_getViewport","_updateController","controllerProps","oldControllers","invalidateControllers","oldController","unshift","_buildViewportMap","newViews","oldViews","some","_","equals"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {deepEqual} from '../utils/deep-equal';\nimport log from '../utils/log';\nimport {flatten} from '../utils/flatten';\n\nexport default class ViewManager {\n  constructor(props = {}) {\n    // List of view descriptors, gets re-evaluated when width/height changes\n    this.views = [];\n    this.width = 100;\n    this.height = 100;\n    this.viewState = {};\n    this.controllers = {};\n    this.timeline = props.timeline;\n\n    this._viewports = []; // Generated viewports\n    this._viewportMap = {};\n    this._isUpdating = false;\n    this._needsRedraw = 'Initial render';\n    this._needsUpdate = true;\n\n    this._eventManager = props.eventManager;\n    this._eventCallbacks = {\n      onViewStateChange: props.onViewStateChange,\n      onInteractionStateChange: props.onInteractionStateChange\n    };\n\n    Object.seal(this);\n\n    // Init with default map viewport\n    this.setProps(props);\n  }\n\n  finalize() {\n    for (const key in this.controllers) {\n      if (this.controllers[key]) {\n        this.controllers[key].finalize();\n      }\n    }\n    this.controllers = {};\n  }\n\n  // Check if a redraw is needed\n  needsRedraw(opts = {clearRedrawFlags: false}) {\n    const redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n    return redraw;\n  }\n\n  // Layers will be updated deeply (in next animation frame)\n  // Potentially regenerating attributes and sub layers\n  setNeedsUpdate(reason) {\n    this._needsUpdate = this._needsUpdate || reason;\n    this._needsRedraw = this._needsRedraw || reason;\n  }\n\n  // Checks each viewport for transition updates\n  updateViewStates() {\n    for (const viewId in this.controllers) {\n      const controller = this.controllers[viewId];\n      if (controller) {\n        controller.updateTransition();\n      }\n    }\n  }\n\n  /** Get a set of viewports for a given width and height\n   * TODO - Intention is for deck.gl to autodeduce width and height and drop the need for props\n   * @param rect (object, optional) - filter the viewports\n   *   + not provided - return all viewports\n   *   + {x, y} - only return viewports that contain this pixel\n   *   + {x, y, width, height} - only return viewports that overlap with this rectangle\n   */\n  getViewports(rect) {\n    if (rect) {\n      return this._viewports.filter(viewport => viewport.containsPixel(rect));\n    }\n    return this._viewports;\n  }\n\n  getViews() {\n    const viewMap = {};\n    this.views.forEach(view => {\n      viewMap[view.id] = view;\n    });\n    return viewMap;\n  }\n\n  // Resolves a viewId string to a View, if already a View returns it.\n  getView(viewOrViewId) {\n    return typeof viewOrViewId === 'string'\n      ? this.views.find(view => view.id === viewOrViewId)\n      : viewOrViewId;\n  }\n\n  // Returns the viewState for a specific viewId. Matches the viewState by\n  // 1. view.viewStateId\n  // 2. view.id\n  // 3. root viewState\n  // then applies the view's filter if any\n  getViewState(viewId) {\n    const view = this.getView(viewId);\n    // Backward compatibility: view state for single view\n    const viewState = (view && this.viewState[view.getViewStateId()]) || this.viewState;\n    return view ? view.filterViewState(viewState) : viewState;\n  }\n\n  getViewport(viewId) {\n    return this._viewportMap[viewId];\n  }\n\n  /**\n   * Unproject pixel coordinates on screen onto world coordinates,\n   * (possibly [lon, lat]) on map.\n   * - [x, y] => [lng, lat]\n   * - [x, y, z] => [lng, lat, Z]\n   * @param {Array} xyz -\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether origin is top left\n   * @return {Array|null} - [lng, lat, Z] or [X, Y, Z]\n   */\n  unproject(xyz, opts) {\n    const viewports = this.getViewports();\n    const pixel = {x: xyz[0], y: xyz[1]};\n    for (let i = viewports.length - 1; i >= 0; --i) {\n      const viewport = viewports[i];\n      if (viewport.containsPixel(pixel)) {\n        const p = xyz.slice();\n        p[0] -= viewport.x;\n        p[1] -= viewport.y;\n        return viewport.unproject(p, opts);\n      }\n    }\n    return null;\n  }\n\n  setProps(props) {\n    if ('views' in props) {\n      this._setViews(props.views);\n    }\n\n    // TODO - support multiple view states\n    if ('viewState' in props) {\n      this._setViewState(props.viewState);\n    }\n\n    if ('width' in props || 'height' in props) {\n      this._setSize(props.width, props.height);\n    }\n\n    // Important: avoid invoking _update() inside itself\n    // Nested updates result in unexpected side effects inside _rebuildViewports()\n    // when using auto control in pure-js\n    if (!this._isUpdating) {\n      this._update();\n    }\n  }\n\n  _update() {\n    this._isUpdating = true;\n\n    // Only rebuild viewports if the update flag is set\n    if (this._needsUpdate) {\n      this._needsUpdate = false;\n      this._rebuildViewports();\n    }\n\n    // If viewport transition(s) are triggered during viewports update, controller(s)\n    // will immediately call `onViewStateChange` which calls `viewManager.setProps` again.\n    if (this._needsUpdate) {\n      this._needsUpdate = false;\n      this._rebuildViewports();\n    }\n\n    this._isUpdating = false;\n  }\n\n  _setSize(width, height) {\n    if (width !== this.width || height !== this.height) {\n      this.width = width;\n      this.height = height;\n      this.setNeedsUpdate('Size changed');\n    }\n  }\n\n  // Update the view descriptor list and set change flag if needed\n  // Does not actually rebuild the `Viewport`s until `getViewports` is called\n  _setViews(views) {\n    views = flatten(views, Boolean);\n\n    const viewsChanged = this._diffViews(views, this.views);\n    if (viewsChanged) {\n      this.setNeedsUpdate('views changed');\n    }\n\n    this.views = views;\n  }\n\n  _setViewState(viewState) {\n    if (viewState) {\n      const viewStateChanged = !deepEqual(viewState, this.viewState);\n\n      if (viewStateChanged) {\n        this.setNeedsUpdate('viewState changed');\n      }\n\n      this.viewState = viewState;\n    } else {\n      log.warn('missing `viewState` or `initialViewState`')();\n    }\n  }\n\n  //\n  // PRIVATE METHODS\n  //\n\n  _onViewStateChange(viewId, event) {\n    event.viewId = viewId;\n    if (this._eventCallbacks.onViewStateChange) {\n      this._eventCallbacks.onViewStateChange(event);\n    }\n  }\n\n  _createController(view, props) {\n    const Controller = props.type;\n\n    const controller = new Controller({\n      timeline: this.timeline,\n      eventManager: this._eventManager,\n      // Set an internal callback that calls the prop callback if provided\n      onViewStateChange: this._onViewStateChange.bind(this, props.id),\n      onStateChange: this._eventCallbacks.onInteractionStateChange,\n      makeViewport: viewState =>\n        view._getViewport(viewState, {\n          width: viewState.width,\n          height: viewState.height\n        }),\n      ...props\n    });\n\n    return controller;\n  }\n\n  _updateController(view, viewState, viewport, controller) {\n    let controllerProps = view.controller;\n    if (controllerProps) {\n      controllerProps = {\n        ...viewState,\n        ...view.props,\n        ...controllerProps,\n        id: view.id,\n        x: viewport.x,\n        y: viewport.y,\n        width: viewport.width,\n        height: viewport.height\n      };\n\n      // TODO - check if view / controller type has changed, and replace the controller\n      if (controller) {\n        controller.setProps(controllerProps);\n      } else {\n        controller = this._createController(view, controllerProps);\n      }\n      return controller;\n    }\n    return null;\n  }\n\n  // Rebuilds viewports from descriptors towards a certain window size\n  _rebuildViewports() {\n    const {width, height, views} = this;\n\n    const oldControllers = this.controllers;\n    this._viewports = [];\n    this.controllers = {};\n\n    let invalidateControllers = false;\n    // Create controllers in reverse order, so that views on top receive events first\n    for (let i = views.length; i--; ) {\n      const view = views[i];\n      const viewState = this.getViewState(view);\n      const viewport = view.makeViewport({width, height, viewState});\n\n      let oldController = oldControllers[view.id];\n      if (view.controller && !oldController) {\n        // When a new controller is added, invalidate all controllers below it so that\n        // events are registered in the correct order\n        invalidateControllers = true;\n      }\n      if ((invalidateControllers || !view.controller) && oldController) {\n        // Remove and reattach invalidated controller\n        oldController.finalize();\n        oldController = null;\n      }\n\n      // Update the controller\n      this.controllers[view.id] = this._updateController(view, viewState, viewport, oldController);\n\n      this._viewports.unshift(viewport);\n    }\n\n    // Remove unused controllers\n    for (const id in oldControllers) {\n      if (oldControllers[id] && !this.controllers[id]) {\n        oldControllers[id].finalize();\n      }\n    }\n\n    this._buildViewportMap();\n  }\n\n  _buildViewportMap() {\n    // Build a view id to view index\n    this._viewportMap = {};\n    this._viewports.forEach(viewport => {\n      if (viewport.id) {\n        // TODO - issue warning if multiple viewports use same id\n        this._viewportMap[viewport.id] = this._viewportMap[viewport.id] || viewport;\n      }\n    });\n  }\n\n  // Check if viewport array has changed, returns true if any change\n  // Note that descriptors can be the same\n  _diffViews(newViews, oldViews) {\n    if (newViews.length !== oldViews.length) {\n      return true;\n    }\n\n    return newViews.some((_, i) => !newViews[i].equals(oldViews[i]));\n  }\n}\n"],"file":"view-manager.js"}