{"version":3,"sources":["../../../../src/lib/picking/pick-info.js"],"names":["getEmptyPickingInfo","pickInfo","mode","viewports","layerFilter","pixelRatio","x","y","z","layer","pickedLayer","viewportFilter","v","viewport","isPicking","renderPass","getViewportFromCoordinates","coordinate","unproject","targetZ","color","index","picked","pixel","devicePixel","pickedX","pickedY","processPickInfo","opts","lastPickedInfo","layers","pickedColor","pickedObjectIndex","affectedLayers","lastPickedObjectIndex","lastPickedLayerId","layerId","pickedLayerId","props","id","lastPickedLayer","find","unshift","info","baseInfo","infos","Map","set","forEach","getLayerPickingInfo","updateAutoHighlight","sourceLayer","getPickingInfo","parent","filter","i","length","containsPixel"],"mappings":"AAsBA,OAAO,SAASA,mBAAT,CAA6B;AAACC,EAAAA,QAAD;AAAWC,EAAAA,IAAX;AAAiBC,EAAAA,SAAjB;AAA4BC,EAAAA,WAA5B;AAAyCC,EAAAA,UAAzC;AAAqDC,EAAAA,CAArD;AAAwDC,EAAAA,CAAxD;AAA2DC,EAAAA;AAA3D,CAA7B,EAA4F;AACjG,QAAMC,KAAK,GAAGR,QAAQ,IAAIA,QAAQ,CAACS,WAAnC;;AACA,QAAMC,cAAc,GAClBP,WAAW,IACXK,KADA,KAECG,CAAC,IACAR,WAAW,CAAC;AACVK,IAAAA,KADU;AAEVI,IAAAA,QAAQ,EAAED,CAFA;AAGVE,IAAAA,SAAS,EAAE,IAHD;AAIVC,IAAAA,UAAU,oBAAab,IAAb;AAJA,GAAD,CAHb,CADF;;AAUA,QAAMW,QAAQ,GAAGG,0BAA0B,CAACb,SAAD,EAAY;AAACG,IAAAA,CAAD;AAAIC,IAAAA;AAAJ,GAAZ,EAAoBI,cAApB,CAA3C;AACA,QAAMM,UAAU,GAAGJ,QAAQ,IAAIA,QAAQ,CAACK,SAAT,CAAmB,CAACZ,CAAC,GAAGO,QAAQ,CAACP,CAAd,EAAiBC,CAAC,GAAGM,QAAQ,CAACN,CAA9B,CAAnB,EAAqD;AAACY,IAAAA,OAAO,EAAEX;AAAV,GAArD,CAA/B;AAEA,SAAO;AACLY,IAAAA,KAAK,EAAE,IADF;AAELX,IAAAA,KAAK,EAAE,IAFF;AAGLI,IAAAA,QAHK;AAILQ,IAAAA,KAAK,EAAE,CAAC,CAJH;AAKLC,IAAAA,MAAM,EAAE,KALH;AAMLhB,IAAAA,CANK;AAOLC,IAAAA,CAPK;AAQLgB,IAAAA,KAAK,EAAE,CAACjB,CAAD,EAAIC,CAAJ,CARF;AASLU,IAAAA,UATK;AAULO,IAAAA,WAAW,EAAEvB,QAAQ,IAAI,CAACA,QAAQ,CAACwB,OAAV,EAAmBxB,QAAQ,CAACyB,OAA5B,CAVpB;AAWLrB,IAAAA;AAXK,GAAP;AAaD;AAGD,OAAO,SAASsB,eAAT,CAAyBC,IAAzB,EAA+B;AACpC,QAAM;AAAC3B,IAAAA,QAAD;AAAW4B,IAAAA,cAAX;AAA2B3B,IAAAA,IAA3B;AAAiC4B,IAAAA;AAAjC,MAA2CF,IAAjD;AACA,QAAM;AAACG,IAAAA,WAAD;AAAcrB,IAAAA,WAAd;AAA2BsB,IAAAA;AAA3B,MAAgD/B,QAAtD;AAEA,QAAMgC,cAAc,GAAGvB,WAAW,GAAG,CAACA,WAAD,CAAH,GAAmB,EAArD;;AAEA,MAAIR,IAAI,KAAK,OAAb,EAAsB;AAEpB,UAAMgC,qBAAqB,GAAGL,cAAc,CAACR,KAA7C;AACA,UAAMc,iBAAiB,GAAGN,cAAc,CAACO,OAAzC;AACA,UAAMC,aAAa,GAAG3B,WAAW,IAAIA,WAAW,CAAC4B,KAAZ,CAAkBC,EAAvD;;AAGA,QAAIF,aAAa,KAAKF,iBAAlB,IAAuCH,iBAAiB,KAAKE,qBAAjE,EAAwF;AACtF,UAAIG,aAAa,KAAKF,iBAAtB,EAAyC;AAIvC,cAAMK,eAAe,GAAGV,MAAM,CAACW,IAAP,CAAYhC,KAAK,IAAIA,KAAK,CAAC6B,KAAN,CAAYC,EAAZ,KAAmBJ,iBAAxC,CAAxB;;AACA,YAAIK,eAAJ,EAAqB;AAEnBP,UAAAA,cAAc,CAACS,OAAf,CAAuBF,eAAvB;AACD;AACF;;AAGDX,MAAAA,cAAc,CAACO,OAAf,GAAyBC,aAAzB;AACAR,MAAAA,cAAc,CAACR,KAAf,GAAuBW,iBAAvB;AACAH,MAAAA,cAAc,CAACc,IAAf,GAAsB,IAAtB;AACD;AACF;;AAED,QAAMC,QAAQ,GAAG5C,mBAAmB,CAAC4B,IAAD,CAApC;AAMA,QAAMiB,KAAK,GAAG,IAAIC,GAAJ,EAAd;AAGAD,EAAAA,KAAK,CAACE,GAAN,CAAU,IAAV,EAAgBH,QAAhB;AAEAX,EAAAA,cAAc,CAACe,OAAf,CAAuBvC,KAAK,IAAI;AAC9B,QAAIkC,IAAI,GAAG,EAAC,GAAGC;AAAJ,KAAX;;AAEA,QAAInC,KAAK,KAAKC,WAAd,EAA2B;AACzBiC,MAAAA,IAAI,CAACvB,KAAL,GAAaW,WAAb;AACAY,MAAAA,IAAI,CAACtB,KAAL,GAAaW,iBAAb;AACAW,MAAAA,IAAI,CAACrB,MAAL,GAAc,IAAd;AACD;;AAEDqB,IAAAA,IAAI,GAAGM,mBAAmB,CAAC;AAACxC,MAAAA,KAAD;AAAQkC,MAAAA,IAAR;AAAczC,MAAAA;AAAd,KAAD,CAA1B;;AAEA,QAAIO,KAAK,KAAKC,WAAV,IAAyBR,IAAI,KAAK,OAAtC,EAA+C;AAC7C2B,MAAAA,cAAc,CAACc,IAAf,GAAsBA,IAAtB;AACD;;AAIDE,IAAAA,KAAK,CAACE,GAAN,CAAUJ,IAAI,CAAClC,KAAL,CAAW8B,EAArB,EAAyBI,IAAzB;;AAEA,QAAIzC,IAAI,KAAK,OAAb,EAAsB;AACpByC,MAAAA,IAAI,CAAClC,KAAL,CAAWyC,mBAAX,CAA+BP,IAA/B;AACD;AACF,GAtBD;AAwBA,SAAOE,KAAP;AACD;AAGD,OAAO,SAASI,mBAAT,CAA6B;AAACxC,EAAAA,KAAD;AAAQkC,EAAAA,IAAR;AAAczC,EAAAA;AAAd,CAA7B,EAAkD;AACvD,SAAOO,KAAK,IAAIkC,IAAhB,EAAsB;AAKpB,UAAMQ,WAAW,GAAGR,IAAI,CAAClC,KAAL,IAAc,IAAlC;AACAkC,IAAAA,IAAI,CAACQ,WAAL,GAAmBA,WAAnB;AACAR,IAAAA,IAAI,CAAClC,KAAL,GAAaA,KAAb;AAIAkC,IAAAA,IAAI,GAAGlC,KAAK,CAAC2C,cAAN,CAAqB;AAACT,MAAAA,IAAD;AAAOzC,MAAAA,IAAP;AAAaiD,MAAAA;AAAb,KAArB,CAAP;AACA1C,IAAAA,KAAK,GAAGA,KAAK,CAAC4C,MAAd;AACD;;AACD,SAAOV,IAAP;AACD;;AAKD,SAAS3B,0BAAT,CAAoCb,SAApC,EAA+CoB,KAA/C,EAAsD+B,MAAtD,EAA8D;AAE5D,OAAK,IAAIC,CAAC,GAAGpD,SAAS,CAACqD,MAAV,GAAmB,CAAhC,EAAmCD,CAAC,IAAI,CAAxC,EAA2CA,CAAC,EAA5C,EAAgD;AAC9C,UAAM1C,QAAQ,GAAGV,SAAS,CAACoD,CAAD,CAA1B;;AACA,QAAI1C,QAAQ,CAAC4C,aAAT,CAAuBlC,KAAvB,MAAkC,CAAC+B,MAAD,IAAWA,MAAM,CAACzC,QAAD,CAAnD,CAAJ,EAAoE;AAClE,aAAOA,QAAP;AACD;AACF;;AACD,SAAOV,SAAS,CAAC,CAAD,CAAhB;AACD","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// Even if nothing gets picked, we need to expose some information of the picking action:\n// x, y, coordinates etc.\nexport function getEmptyPickingInfo({pickInfo, mode, viewports, layerFilter, pixelRatio, x, y, z}) {\n  const layer = pickInfo && pickInfo.pickedLayer;\n  const viewportFilter =\n    layerFilter &&\n    layer &&\n    (v =>\n      layerFilter({\n        layer,\n        viewport: v,\n        isPicking: true,\n        renderPass: `picking:${mode}`\n      }));\n  const viewport = getViewportFromCoordinates(viewports, {x, y}, viewportFilter);\n  const coordinate = viewport && viewport.unproject([x - viewport.x, y - viewport.y], {targetZ: z});\n\n  return {\n    color: null,\n    layer: null,\n    viewport,\n    index: -1,\n    picked: false,\n    x,\n    y,\n    pixel: [x, y],\n    coordinate,\n    devicePixel: pickInfo && [pickInfo.pickedX, pickInfo.pickedY],\n    pixelRatio\n  };\n}\n\n/* eslint-disable max-depth */\nexport function processPickInfo(opts) {\n  const {pickInfo, lastPickedInfo, mode, layers} = opts;\n  const {pickedColor, pickedLayer, pickedObjectIndex} = pickInfo;\n\n  const affectedLayers = pickedLayer ? [pickedLayer] : [];\n\n  if (mode === 'hover') {\n    // only invoke onHover events if picked object has changed\n    const lastPickedObjectIndex = lastPickedInfo.index;\n    const lastPickedLayerId = lastPickedInfo.layerId;\n    const pickedLayerId = pickedLayer && pickedLayer.props.id;\n\n    // proceed only if picked object changed\n    if (pickedLayerId !== lastPickedLayerId || pickedObjectIndex !== lastPickedObjectIndex) {\n      if (pickedLayerId !== lastPickedLayerId) {\n        // We cannot store a ref to lastPickedLayer in the context because\n        // the state of an outdated layer is no longer valid\n        // and the props may have changed\n        const lastPickedLayer = layers.find(layer => layer.props.id === lastPickedLayerId);\n        if (lastPickedLayer) {\n          // Let leave event fire before enter event\n          affectedLayers.unshift(lastPickedLayer);\n        }\n      }\n\n      // Update layer manager context\n      lastPickedInfo.layerId = pickedLayerId;\n      lastPickedInfo.index = pickedObjectIndex;\n      lastPickedInfo.info = null;\n    }\n  }\n\n  const baseInfo = getEmptyPickingInfo(opts);\n\n  // Use a Map to store all picking infos.\n  // The following two forEach loops are the result of\n  // https://github.com/visgl/deck.gl/issues/443\n  // Please be very careful when changing this pattern\n  const infos = new Map();\n\n  // Make sure infos always contain something even if no layer is affected\n  infos.set(null, baseInfo);\n\n  affectedLayers.forEach(layer => {\n    let info = {...baseInfo};\n\n    if (layer === pickedLayer) {\n      info.color = pickedColor;\n      info.index = pickedObjectIndex;\n      info.picked = true;\n    }\n\n    info = getLayerPickingInfo({layer, info, mode});\n\n    if (layer === pickedLayer && mode === 'hover') {\n      lastPickedInfo.info = info;\n    }\n\n    // This guarantees that there will be only one copy of info for\n    // one composite layer\n    infos.set(info.layer.id, info);\n\n    if (mode === 'hover') {\n      info.layer.updateAutoHighlight(info);\n    }\n  });\n\n  return infos;\n}\n\n// Walk up the layer composite chain to populate the info object\nexport function getLayerPickingInfo({layer, info, mode}) {\n  while (layer && info) {\n    // For a composite layer, sourceLayer will point to the sublayer\n    // where the event originates from.\n    // It provides additional context for the composite layer's\n    // getPickingInfo() method to populate the info object\n    const sourceLayer = info.layer || null;\n    info.sourceLayer = sourceLayer;\n    info.layer = layer;\n    // layer.pickLayer() function requires a non-null ```layer.state```\n    // object to function properly. So the layer referenced here\n    // must be the \"current\" layer, not an \"out-dated\" / \"invalidated\" layer\n    info = layer.getPickingInfo({info, mode, sourceLayer});\n    layer = layer.parent;\n  }\n  return info;\n}\n\n// Indentifies which viewport, if any corresponds to x and y\n// If multiple viewports contain the target pixel, last viewport drawn is returend\n// Returns first viewport if no match\nfunction getViewportFromCoordinates(viewports, pixel, filter) {\n  // find the last viewport that contains the pixel\n  for (let i = viewports.length - 1; i >= 0; i--) {\n    const viewport = viewports[i];\n    if (viewport.containsPixel(pixel) && (!filter || filter(viewport))) {\n      return viewport;\n    }\n  }\n  return viewports[0];\n}\n"],"file":"pick-info.js"}