{"version":3,"sources":["../../../src/utils/typed-array-manager.js"],"names":["TypedArrayManager","constructor","props","_pool","overAlloc","poolSize","setProps","Object","assign","allocate","typedArray","count","size","type","padding","copy","initialize","maxCount","Type","Float32Array","newSize","ArrayBuffer","isView","length","BYTES_PER_ELEMENT","buffer","byteLength","maxSize","newArray","_allocate","set","fill","_release","release","sizeToAllocate","Math","max","ceil","pool","i","findIndex","b","array","splice","push","shift"],"mappings":"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","sourcesContent":["export class TypedArrayManager {\n  constructor(props) {\n    this._pool = [];\n    this.props = {overAlloc: 2, poolSize: 100};\n    this.setProps(props);\n  }\n\n  setProps(props) {\n    Object.assign(this.props, props);\n  }\n\n  allocate(\n    typedArray,\n    count,\n    {size = 1, type, padding = 0, copy = false, initialize = false, maxCount}\n  ) {\n    const Type = type || (typedArray && typedArray.constructor) || Float32Array;\n\n    const newSize = count * size + padding;\n    if (ArrayBuffer.isView(typedArray)) {\n      if (newSize <= typedArray.length) {\n        return typedArray;\n      }\n      if (newSize * typedArray.BYTES_PER_ELEMENT <= typedArray.buffer.byteLength) {\n        return new Type(typedArray.buffer, 0, newSize);\n      }\n    }\n\n    let maxSize;\n    if (maxCount) {\n      maxSize = maxCount * size + padding;\n    }\n\n    const newArray = this._allocate(Type, newSize, initialize, maxSize);\n\n    if (typedArray && copy) {\n      newArray.set(typedArray);\n    } else if (!initialize) {\n      // Hack - always initialize the first 4 elements. NaNs crash the Attribute validation\n      newArray.fill(0, 0, 4);\n    }\n\n    this._release(typedArray);\n    return newArray;\n  }\n\n  release(typedArray) {\n    this._release(typedArray);\n  }\n\n  _allocate(Type, size, initialize, maxSize) {\n    // Allocate at least one element to ensure a valid buffer\n    let sizeToAllocate = Math.max(Math.ceil(size * this.props.overAlloc), 1);\n    // Don't over allocate after certain specified number of elements\n    if (sizeToAllocate > maxSize) {\n      sizeToAllocate = maxSize;\n    }\n\n    // Check if available in pool\n    const pool = this._pool;\n    const byteLength = Type.BYTES_PER_ELEMENT * sizeToAllocate;\n    const i = pool.findIndex(b => b.byteLength >= byteLength);\n    if (i >= 0) {\n      // Create a new array using an existing buffer\n      const array = new Type(pool.splice(i, 1)[0], 0, sizeToAllocate);\n      if (initialize) {\n        // Viewing a buffer with a different type may create NaNs\n        array.fill(0);\n      }\n      return array;\n    }\n    return new Type(sizeToAllocate);\n  }\n\n  _release(typedArray) {\n    if (!ArrayBuffer.isView(typedArray)) {\n      return;\n    }\n    const pool = this._pool;\n    const {buffer} = typedArray;\n    // Save the buffer of the released array into the pool\n    // Sort buffers by size\n    // TODO - implement binary search?\n    const {byteLength} = buffer;\n    const i = pool.findIndex(b => b.byteLength >= byteLength);\n    if (i < 0) {\n      pool.push(buffer);\n    } else if (i > 0 || pool.length < this.props.poolSize) {\n      pool.splice(i, 0, buffer);\n    }\n    if (pool.length > this.props.poolSize) {\n      // Drop the smallest one\n      pool.shift();\n    }\n  }\n}\n\nexport default new TypedArrayManager();\n"],"file":"typed-array-manager.js"}