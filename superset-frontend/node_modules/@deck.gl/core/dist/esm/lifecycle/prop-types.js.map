{"version":3,"sources":["../../../src/lifecycle/prop-types.js"],"names":["createTexture","destroyTexture","TYPE_DEFINITIONS","boolean","validate","value","propType","equal","value1","value2","Boolean","number","Number","isFinite","max","min","color","optional","isArray","length","arrayEqual","accessor","valueType","getTypeOf","array","compare","function","data","transform","component","dataTransform","props","image","release","array1","array2","len","i","parsePropTypes","propDefs","propTypes","defaultProps","deprecatedProps","propName","propDef","Object","entries","deprecatedFor","Array","parsePropType","name","normalizePropDefinition","type","ArrayBuffer","isView"],"mappings":"AAAA,SAAQA,aAAR,EAAuBC,cAAvB,QAA4C,kBAA5C;AAEA,MAAMC,gBAAgB,GAAG;AACvBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,QAAQ,CAACC,KAAD,EAAQC,QAAR,EAAkB;AACxB,aAAO,IAAP;AACD,KAHM;;AAIPC,IAAAA,KAAK,CAACC,MAAD,EAASC,MAAT,EAAiBH,QAAjB,EAA2B;AAC9B,aAAOI,OAAO,CAACF,MAAD,CAAP,KAAoBE,OAAO,CAACD,MAAD,CAAlC;AACD;;AANM,GADc;AASvBE,EAAAA,MAAM,EAAE;AACNP,IAAAA,QAAQ,CAACC,KAAD,EAAQC,QAAR,EAAkB;AACxB,aACEM,MAAM,CAACC,QAAP,CAAgBR,KAAhB,MACC,EAAE,SAASC,QAAX,KAAwBD,KAAK,IAAIC,QAAQ,CAACQ,GAD3C,MAEC,EAAE,SAASR,QAAX,KAAwBD,KAAK,IAAIC,QAAQ,CAACS,GAF3C,CADF;AAKD;;AAPK,GATe;AAkBvBC,EAAAA,KAAK,EAAE;AACLZ,IAAAA,QAAQ,CAACC,KAAD,EAAQC,QAAR,EAAkB;AACxB,aACGA,QAAQ,CAACW,QAAT,IAAqB,CAACZ,KAAvB,IACCa,OAAO,CAACb,KAAD,CAAP,KAAmBA,KAAK,CAACc,MAAN,KAAiB,CAAjB,IAAsBd,KAAK,CAACc,MAAN,KAAiB,CAA1D,CAFH;AAID,KANI;;AAOLZ,IAAAA,KAAK,CAACC,MAAD,EAASC,MAAT,EAAiBH,QAAjB,EAA2B;AAC9B,aAAOc,UAAU,CAACZ,MAAD,EAASC,MAAT,CAAjB;AACD;;AATI,GAlBgB;AA6BvBY,EAAAA,QAAQ,EAAE;AACRjB,IAAAA,QAAQ,CAACC,KAAD,EAAQC,QAAR,EAAkB;AACxB,YAAMgB,SAAS,GAAGC,SAAS,CAAClB,KAAD,CAA3B;AACA,aAAOiB,SAAS,KAAK,UAAd,IAA4BA,SAAS,KAAKC,SAAS,CAACjB,QAAQ,CAACD,KAAV,CAA1D;AACD,KAJO;;AAKRE,IAAAA,KAAK,CAACC,MAAD,EAASC,MAAT,EAAiBH,QAAjB,EAA2B;AAC9B,UAAI,OAAOG,MAAP,KAAkB,UAAtB,EAAkC;AAChC,eAAO,IAAP;AACD;;AACD,aAAOW,UAAU,CAACZ,MAAD,EAASC,MAAT,CAAjB;AACD;;AAVO,GA7Ba;AAyCvBe,EAAAA,KAAK,EAAE;AACLpB,IAAAA,QAAQ,CAACC,KAAD,EAAQC,QAAR,EAAkB;AACxB,aAAQA,QAAQ,CAACW,QAAT,IAAqB,CAACZ,KAAvB,IAAiCa,OAAO,CAACb,KAAD,CAA/C;AACD,KAHI;;AAILE,IAAAA,KAAK,CAACC,MAAD,EAASC,MAAT,EAAiBH,QAAjB,EAA2B;AAC9B,aAAOA,QAAQ,CAACmB,OAAT,GAAmBL,UAAU,CAACZ,MAAD,EAASC,MAAT,CAA7B,GAAgDD,MAAM,KAAKC,MAAlE;AACD;;AANI,GAzCgB;AAiDvBiB,EAAAA,QAAQ,EAAE;AACRtB,IAAAA,QAAQ,CAACC,KAAD,EAAQC,QAAR,EAAkB;AACxB,aAAQA,QAAQ,CAACW,QAAT,IAAqB,CAACZ,KAAvB,IAAiC,OAAOA,KAAP,KAAiB,UAAzD;AACD,KAHO;;AAIRE,IAAAA,KAAK,CAACC,MAAD,EAASC,MAAT,EAAiBH,QAAjB,EAA2B;AAC9B,aAAO,CAACA,QAAQ,CAACmB,OAAV,IAAqBjB,MAAM,KAAKC,MAAvC;AACD;;AANO,GAjDa;AAyDvBkB,EAAAA,IAAI,EAAE;AACJC,IAAAA,SAAS,EAAE,CAACvB,KAAD,EAAQC,QAAR,EAAkBuB,SAAlB,KAAgC;AACzC,YAAM;AAACC,QAAAA;AAAD,UAAkBD,SAAS,GAAGA,SAAS,CAACE,KAAb,GAAqB,EAAtD;AACA,aAAOD,aAAa,IAAIzB,KAAjB,GAAyByB,aAAa,CAACzB,KAAD,CAAtC,GAAgDA,KAAvD;AACD;AAJG,GAzDiB;AA+DvB2B,EAAAA,KAAK,EAAE;AACLJ,IAAAA,SAAS,EAAE,CAACvB,KAAD,EAAQC,QAAR,EAAkBuB,SAAlB,KAAgC;AACzC,aAAO7B,aAAa,CAAC6B,SAAD,EAAYxB,KAAZ,CAApB;AACD,KAHI;AAIL4B,IAAAA,OAAO,EAAE5B,KAAK,IAAI;AAChBJ,MAAAA,cAAc,CAACI,KAAD,CAAd;AACD;AANI;AA/DgB,CAAzB;;AAyEA,SAASe,UAAT,CAAoBc,MAApB,EAA4BC,MAA5B,EAAoC;AAClC,MAAID,MAAM,KAAKC,MAAf,EAAuB;AACrB,WAAO,IAAP;AACD;;AACD,MAAI,CAACjB,OAAO,CAACgB,MAAD,CAAR,IAAoB,CAAChB,OAAO,CAACiB,MAAD,CAAhC,EAA0C;AACxC,WAAO,KAAP;AACD;;AACD,QAAMC,GAAG,GAAGF,MAAM,CAACf,MAAnB;;AACA,MAAIiB,GAAG,KAAKD,MAAM,CAAChB,MAAnB,EAA2B;AACzB,WAAO,KAAP;AACD;;AACD,OAAK,IAAIkB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,GAApB,EAAyBC,CAAC,EAA1B,EAA8B;AAC5B,QAAIH,MAAM,CAACG,CAAD,CAAN,KAAcF,MAAM,CAACE,CAAD,CAAxB,EAA6B;AAC3B,aAAO,KAAP;AACD;AACF;;AACD,SAAO,IAAP;AACD;;AAED,OAAO,SAASC,cAAT,CAAwBC,QAAxB,EAAkC;AACvC,QAAMC,SAAS,GAAG,EAAlB;AACA,QAAMC,YAAY,GAAG,EAArB;AACA,QAAMC,eAAe,GAAG,EAAxB;;AAEA,OAAK,MAAM,CAACC,QAAD,EAAWC,OAAX,CAAX,IAAkCC,MAAM,CAACC,OAAP,CAAeP,QAAf,CAAlC,EAA4D;AAC1D,QAAIK,OAAO,IAAIA,OAAO,CAACG,aAAvB,EAAsC;AACpCL,MAAAA,eAAe,CAACC,QAAD,CAAf,GAA4BK,KAAK,CAAC9B,OAAN,CAAc0B,OAAO,CAACG,aAAtB,IACxBH,OAAO,CAACG,aADgB,GAExB,CAACH,OAAO,CAACG,aAAT,CAFJ;AAGD,KAJD,MAIO;AACL,YAAMzC,QAAQ,GAAG2C,aAAa,CAACN,QAAD,EAAWC,OAAX,CAA9B;AACAJ,MAAAA,SAAS,CAACG,QAAD,CAAT,GAAsBrC,QAAtB;AACAmC,MAAAA,YAAY,CAACE,QAAD,CAAZ,GAAyBrC,QAAQ,CAACD,KAAlC;AACD;AACF;;AACD,SAAO;AAACmC,IAAAA,SAAD;AAAYC,IAAAA,YAAZ;AAA0BC,IAAAA;AAA1B,GAAP;AACD;;AAKD,SAASO,aAAT,CAAuBC,IAAvB,EAA6BN,OAA7B,EAAsC;AACpC,UAAQrB,SAAS,CAACqB,OAAD,CAAjB;AACE,SAAK,QAAL;AACE,aAAOO,uBAAuB,CAACD,IAAD,EAAON,OAAP,CAA9B;;AAEF,SAAK,OAAL;AACE,aAAOO,uBAAuB,CAACD,IAAD,EAAO;AAACE,QAAAA,IAAI,EAAE,OAAP;AAAgB/C,QAAAA,KAAK,EAAEuC,OAAvB;AAAgCnB,QAAAA,OAAO,EAAE;AAAzC,OAAP,CAA9B;;AAEF,SAAK,SAAL;AACE,aAAO0B,uBAAuB,CAACD,IAAD,EAAO;AAACE,QAAAA,IAAI,EAAE,SAAP;AAAkB/C,QAAAA,KAAK,EAAEuC;AAAzB,OAAP,CAA9B;;AAEF,SAAK,QAAL;AACE,aAAOO,uBAAuB,CAACD,IAAD,EAAO;AAACE,QAAAA,IAAI,EAAE,QAAP;AAAiB/C,QAAAA,KAAK,EAAEuC;AAAxB,OAAP,CAA9B;;AAEF,SAAK,UAAL;AACE,aAAOO,uBAAuB,CAACD,IAAD,EAAO;AAACE,QAAAA,IAAI,EAAE,UAAP;AAAmB/C,QAAAA,KAAK,EAAEuC,OAA1B;AAAmCnB,QAAAA,OAAO,EAAE;AAA5C,OAAP,CAA9B;;AAGF;AACE,aAAO;AAACyB,QAAAA,IAAD;AAAOE,QAAAA,IAAI,EAAE,SAAb;AAAwB/C,QAAAA,KAAK,EAAEuC;AAA/B,OAAP;AAlBJ;AAoBD;;AAED,SAASO,uBAAT,CAAiCD,IAAjC,EAAuCN,OAAvC,EAAgD;AAC9C,MAAI,EAAE,UAAUA,OAAZ,CAAJ,EAA0B;AACxB,QAAI,EAAE,WAAWA,OAAb,CAAJ,EAA2B;AAEzB,aAAO;AAACM,QAAAA,IAAD;AAAOE,QAAAA,IAAI,EAAE,QAAb;AAAuB/C,QAAAA,KAAK,EAAEuC;AAA9B,OAAP;AACD;;AACD,WAAO;AAACM,MAAAA,IAAD;AAAOE,MAAAA,IAAI,EAAE7B,SAAS,CAACqB,OAAO,CAACvC,KAAT,CAAtB;AAAuC,SAAGuC;AAA1C,KAAP;AACD;;AACD,SAAO;AAACM,IAAAA,IAAD;AAAO,OAAGhD,gBAAgB,CAAC0C,OAAO,CAACQ,IAAT,CAA1B;AAA0C,OAAGR;AAA7C,GAAP;AACD;;AAED,SAAS1B,OAAT,CAAiBb,KAAjB,EAAwB;AACtB,SAAO2C,KAAK,CAAC9B,OAAN,CAAcb,KAAd,KAAwBgD,WAAW,CAACC,MAAZ,CAAmBjD,KAAnB,CAA/B;AACD;;AAGD,SAASkB,SAAT,CAAmBlB,KAAnB,EAA0B;AACxB,MAAIa,OAAO,CAACb,KAAD,CAAX,EAAoB;AAClB,WAAO,OAAP;AACD;;AACD,MAAIA,KAAK,KAAK,IAAd,EAAoB;AAClB,WAAO,MAAP;AACD;;AACD,SAAO,OAAOA,KAAd;AACD","sourcesContent":["import {createTexture, destroyTexture} from '../utils/texture';\n\nconst TYPE_DEFINITIONS = {\n  boolean: {\n    validate(value, propType) {\n      return true;\n    },\n    equal(value1, value2, propType) {\n      return Boolean(value1) === Boolean(value2);\n    }\n  },\n  number: {\n    validate(value, propType) {\n      return (\n        Number.isFinite(value) &&\n        (!('max' in propType) || value <= propType.max) &&\n        (!('min' in propType) || value >= propType.min)\n      );\n    }\n  },\n  color: {\n    validate(value, propType) {\n      return (\n        (propType.optional && !value) ||\n        (isArray(value) && (value.length === 3 || value.length === 4))\n      );\n    },\n    equal(value1, value2, propType) {\n      return arrayEqual(value1, value2);\n    }\n  },\n  accessor: {\n    validate(value, propType) {\n      const valueType = getTypeOf(value);\n      return valueType === 'function' || valueType === getTypeOf(propType.value);\n    },\n    equal(value1, value2, propType) {\n      if (typeof value2 === 'function') {\n        return true;\n      }\n      return arrayEqual(value1, value2);\n    }\n  },\n  array: {\n    validate(value, propType) {\n      return (propType.optional && !value) || isArray(value);\n    },\n    equal(value1, value2, propType) {\n      return propType.compare ? arrayEqual(value1, value2) : value1 === value2;\n    }\n  },\n  function: {\n    validate(value, propType) {\n      return (propType.optional && !value) || typeof value === 'function';\n    },\n    equal(value1, value2, propType) {\n      return !propType.compare || value1 === value2;\n    }\n  },\n  data: {\n    transform: (value, propType, component) => {\n      const {dataTransform} = component ? component.props : {};\n      return dataTransform && value ? dataTransform(value) : value;\n    }\n  },\n  image: {\n    transform: (value, propType, component) => {\n      return createTexture(component, value);\n    },\n    release: value => {\n      destroyTexture(value);\n    }\n  }\n};\n\nfunction arrayEqual(array1, array2) {\n  if (array1 === array2) {\n    return true;\n  }\n  if (!isArray(array1) || !isArray(array2)) {\n    return false;\n  }\n  const len = array1.length;\n  if (len !== array2.length) {\n    return false;\n  }\n  for (let i = 0; i < len; i++) {\n    if (array1[i] !== array2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function parsePropTypes(propDefs) {\n  const propTypes = {};\n  const defaultProps = {};\n  const deprecatedProps = {};\n\n  for (const [propName, propDef] of Object.entries(propDefs)) {\n    if (propDef && propDef.deprecatedFor) {\n      deprecatedProps[propName] = Array.isArray(propDef.deprecatedFor)\n        ? propDef.deprecatedFor\n        : [propDef.deprecatedFor];\n    } else {\n      const propType = parsePropType(propName, propDef);\n      propTypes[propName] = propType;\n      defaultProps[propName] = propType.value;\n    }\n  }\n  return {propTypes, defaultProps, deprecatedProps};\n}\n\n// Parses one property definition entry. Either contains:\n// * a valid prop type object ({type, ...})\n// * or just a default value, in which case type and name inference is used\nfunction parsePropType(name, propDef) {\n  switch (getTypeOf(propDef)) {\n    case 'object':\n      return normalizePropDefinition(name, propDef);\n\n    case 'array':\n      return normalizePropDefinition(name, {type: 'array', value: propDef, compare: false});\n\n    case 'boolean':\n      return normalizePropDefinition(name, {type: 'boolean', value: propDef});\n\n    case 'number':\n      return normalizePropDefinition(name, {type: 'number', value: propDef});\n\n    case 'function':\n      return normalizePropDefinition(name, {type: 'function', value: propDef, compare: true});\n    // return guessFunctionType(name, propDef);\n\n    default:\n      return {name, type: 'unknown', value: propDef};\n  }\n}\n\nfunction normalizePropDefinition(name, propDef) {\n  if (!('type' in propDef)) {\n    if (!('value' in propDef)) {\n      // If no type and value this object is likely the value\n      return {name, type: 'object', value: propDef};\n    }\n    return {name, type: getTypeOf(propDef.value), ...propDef};\n  }\n  return {name, ...TYPE_DEFINITIONS[propDef.type], ...propDef};\n}\n\nfunction isArray(value) {\n  return Array.isArray(value) || ArrayBuffer.isView(value);\n}\n\n// improved version of javascript typeof that can distinguish arrays and null values\nfunction getTypeOf(value) {\n  if (isArray(value)) {\n    return 'array';\n  }\n  if (value === null) {\n    return 'null';\n  }\n  return typeof value;\n}\n"],"file":"prop-types.js"}