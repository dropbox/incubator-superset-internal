{"version":3,"sources":["../../../src/lifecycle/component-state.js"],"names":["isAsyncIterable","PROP_SYMBOLS","ASYNC_ORIGINAL","ASYNC_RESOLVED","ASYNC_DEFAULTS","EMPTY_PROPS","Object","freeze","ComponentState","constructor","component","asyncProps","onAsyncPropUpdated","oldProps","oldAsyncProps","finalize","propName","asyncProp","type","release","resolvedValue","getOldProps","resetOldProps","props","freezeAsyncOldProps","create","defineProperty","enumerable","value","hasAsyncProp","getAsyncProp","isAsyncPropLoading","Boolean","pendingLoadCount","resolvedLoadCount","key","reloadAsyncProp","_watchPromise","Promise","resolve","setAsyncProps","resolvedValues","originalValues","defaultValues","_createAsyncPropData","_updateAsyncProp","_didAsyncInputValueChange","fetch","layer","url","_resolveAsyncIterable","_setPropValue","lastValue","_postProcessValue","_setAsyncPropValue","loadCount","undefined","promise","then","data","onDataLoad","catch","error","raiseError","iterable","count","chunk","dataTransform","concat","startRow","endRow","length","propType","transform","defaultValue","propTypes","_propTypes"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {isAsyncIterable} from '../utils/iterable-utils';\nimport {PROP_SYMBOLS} from './constants';\nconst {ASYNC_ORIGINAL, ASYNC_RESOLVED, ASYNC_DEFAULTS} = PROP_SYMBOLS;\n\nconst EMPTY_PROPS = Object.freeze({});\n\nexport default class ComponentState {\n  constructor(component = null) {\n    this.component = component;\n    this.asyncProps = {}; // Prop values that the layer sees\n    this.onAsyncPropUpdated = () => {};\n    this.oldProps = EMPTY_PROPS; // Last props before update\n    this.oldAsyncProps = null; // Last props before update, with async values copied.\n  }\n\n  finalize() {\n    for (const propName in this.asyncProps) {\n      const asyncProp = this.asyncProps[propName];\n      if (asyncProp.type && asyncProp.type.release) {\n        // Release any resources created by transforms\n        asyncProp.type.release(asyncProp.resolvedValue, asyncProp.type, this.component);\n      }\n    }\n  }\n\n  getOldProps() {\n    return this.oldAsyncProps || this.oldProps;\n  }\n\n  resetOldProps() {\n    this.oldAsyncProps = null;\n    this.oldProps = this.component.props;\n  }\n\n  // Whenever async props are changing, we need to make a copy of oldProps\n  // otherwise the prop rewriting will affect the value both in props and oldProps.\n  // While the copy is relatively expensive, this only happens on load completion.\n  freezeAsyncOldProps() {\n    if (!this.oldAsyncProps) {\n      // Make sure oldProps is set\n      this.oldProps = this.oldProps || this.component.props;\n\n      // 1. inherit all synchronous props from oldProps\n      // 2. reconfigure the async prop descriptors to fixed values\n      this.oldAsyncProps = Object.create(this.oldProps);\n      for (const propName in this.asyncProps) {\n        Object.defineProperty(this.oldAsyncProps, propName, {\n          enumerable: true,\n          value: this.oldProps[propName]\n        });\n      }\n    }\n  }\n\n  // ASYNC PROP HANDLING\n  //\n\n  // Checks if a prop is overridden\n  hasAsyncProp(propName) {\n    return propName in this.asyncProps;\n  }\n\n  // Returns value of an overriden prop\n  getAsyncProp(propName) {\n    const asyncProp = this.asyncProps[propName];\n    return asyncProp && asyncProp.resolvedValue;\n  }\n\n  isAsyncPropLoading(propName) {\n    if (propName) {\n      const asyncProp = this.asyncProps[propName];\n      return Boolean(\n        asyncProp &&\n          asyncProp.pendingLoadCount > 0 &&\n          asyncProp.pendingLoadCount !== asyncProp.resolvedLoadCount\n      );\n    }\n    for (const key in this.asyncProps) {\n      if (this.isAsyncPropLoading(key)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // Without changing the original prop value, swap out the data resolution under the hood\n  reloadAsyncProp(propName, value) {\n    this._watchPromise(propName, Promise.resolve(value));\n  }\n\n  // Updates all async/overridden props (when new props come in)\n  // Checks if urls have changed, starts loading, or removes override\n  setAsyncProps(props) {\n    // NOTE: prop param and default values are only support for testing\n    const resolvedValues = props[ASYNC_RESOLVED] || {};\n    const originalValues = props[ASYNC_ORIGINAL] || props;\n    const defaultValues = props[ASYNC_DEFAULTS] || {};\n\n    // TODO - use async props from the layer's prop types\n    for (const propName in resolvedValues) {\n      const value = resolvedValues[propName];\n      this._createAsyncPropData(propName, defaultValues[propName]);\n      this._updateAsyncProp(propName, value);\n      // Use transformed value\n      resolvedValues[propName] = this.getAsyncProp(propName);\n    }\n\n    for (const propName in originalValues) {\n      const value = originalValues[propName];\n      // Makes sure a record exists for this prop\n      this._createAsyncPropData(propName, defaultValues[propName]);\n      this._updateAsyncProp(propName, value);\n    }\n  }\n\n  // Intercept strings (URLs) and Promises and activates loading and prop rewriting\n  _updateAsyncProp(propName, value) {\n    if (!this._didAsyncInputValueChange(propName, value)) {\n      return;\n    }\n\n    // interpret value string as url and start a new load tracked by a promise\n    if (typeof value === 'string') {\n      const fetch = this.layer?.props.fetch;\n      const url = value;\n      if (fetch) {\n        value = fetch(url, {propName, layer: this.layer});\n      }\n    }\n\n    // interprets promise and track the \"loading\"\n    if (value instanceof Promise) {\n      this._watchPromise(propName, value);\n      return;\n    }\n\n    if (isAsyncIterable(value)) {\n      this._resolveAsyncIterable(propName, value);\n      return;\n    }\n\n    // else, normal, non-async value. Just store value for now\n    this._setPropValue(propName, value);\n  }\n\n  // Checks if an input value actually changed (to avoid reloading/rewatching promises/urls)\n  _didAsyncInputValueChange(propName, value) {\n    const asyncProp = this.asyncProps[propName];\n    if (value === asyncProp.resolvedValue || value === asyncProp.lastValue) {\n      return false;\n    }\n    asyncProp.lastValue = value;\n    return true;\n  }\n\n  // Set normal, non-async value\n  _setPropValue(propName, value) {\n    const asyncProp = this.asyncProps[propName];\n    value = this._postProcessValue(asyncProp, value);\n    asyncProp.resolvedValue = value;\n    asyncProp.pendingLoadCount++;\n    asyncProp.resolvedLoadCount = asyncProp.pendingLoadCount;\n  }\n\n  // Set a just resolved async value, calling onAsyncPropUpdates if value changes asynchronously\n  _setAsyncPropValue(propName, value, loadCount) {\n    // Only update if loadCount is larger or equal to resolvedLoadCount\n    // otherwise a more recent load has already completed\n    const asyncProp = this.asyncProps[propName];\n    if (asyncProp && loadCount >= asyncProp.resolvedLoadCount && value !== undefined) {\n      // A chance to copy old props before updating\n      this.freezeAsyncOldProps();\n\n      asyncProp.resolvedValue = value;\n      asyncProp.resolvedLoadCount = loadCount;\n\n      // Call callback to inform listener\n      this.onAsyncPropUpdated(propName, value);\n    }\n  }\n\n  // Tracks a promise, sets the prop when loaded, handles load count\n  _watchPromise(propName, promise) {\n    const asyncProp = this.asyncProps[propName];\n    asyncProp.pendingLoadCount++;\n    const loadCount = asyncProp.pendingLoadCount;\n    promise\n      .then(data => {\n        data = this._postProcessValue(asyncProp, data);\n        this._setAsyncPropValue(propName, data, loadCount);\n\n        const onDataLoad = this.layer?.props.onDataLoad;\n        if (propName === 'data' && onDataLoad) {\n          onDataLoad(data, {propName, layer: this.layer});\n        }\n      })\n      .catch(error => {\n        this.layer?.raiseError(error, `loading ${propName} of ${this.layer}`);\n      });\n  }\n\n  async _resolveAsyncIterable(propName, iterable) {\n    if (propName !== 'data') {\n      // we only support data as async iterable\n      this._setPropValue(propName, iterable);\n    }\n\n    const asyncProp = this.asyncProps[propName];\n    asyncProp.pendingLoadCount++;\n    const loadCount = asyncProp.pendingLoadCount;\n    let data = [];\n    let count = 0;\n\n    for await (const chunk of iterable) {\n      const {dataTransform} = this.component ? this.component.props : {};\n      if (dataTransform) {\n        data = dataTransform(chunk, data);\n      } else {\n        data = data.concat(chunk);\n      }\n\n      // Used by the default _dataDiff function\n      Object.defineProperty(data, '__diff', {\n        enumerable: false,\n        value: [{startRow: count, endRow: data.length}]\n      });\n\n      count = data.length;\n      this._setAsyncPropValue(propName, data, loadCount);\n    }\n\n    const onDataLoad = this.layer?.props.onDataLoad;\n    if (onDataLoad) {\n      onDataLoad(data, {propName, layer: this.layer});\n    }\n  }\n\n  // Give the app a chance to post process the loaded data\n  _postProcessValue(asyncProp, value) {\n    const propType = asyncProp.type;\n    if (propType) {\n      if (propType.release) {\n        propType.release(asyncProp.resolvedValue, propType, this.component);\n      }\n      if (propType.transform) {\n        return propType.transform(value, propType, this.component);\n      }\n    }\n    return value;\n  }\n\n  // Creating an asyncProp record if needed\n  _createAsyncPropData(propName, defaultValue) {\n    const asyncProp = this.asyncProps[propName];\n    if (!asyncProp) {\n      const propTypes = this.component && this.component.constructor._propTypes;\n      // assert(defaultValue !== undefined);\n      this.asyncProps[propName] = {\n        type: propTypes && propTypes[propName],\n        lastValue: null, // Supplied prop value (can be url/promise, not visible to layer)\n        resolvedValue: defaultValue, // Resolved prop value (valid data, can be \"shown\" to layer)\n        pendingLoadCount: 0, // How many loads have been issued\n        resolvedLoadCount: 0 // Latest resolved load, (earlier loads will be ignored)\n      };\n    }\n  }\n}\n"],"file":"component-state.js"}