{"version":3,"sources":["../../../src/views/orbit-view.js"],"names":["View","Viewport","Matrix4","pixelsToWorld","OrbitController","DEGREES_TO_RADIANS","Math","PI","getViewMatrix","height","fovy","orbitAxis","rotationX","rotationOrbit","zoom","distance","tan","up","eye","viewMatrix","lookAt","rotateX","rotateZ","rotateY","projectionScale","pow","scale","OrbitViewport","constructor","props","target","longitude","position","projectedCenter","project","center","unproject","xyz","topLeft","x","y","z","y2","X","Y","Z","pixelUnprojectionMatrix","panByPosition","coords","pixel","p0","nextCenter","width","OrbitView","type","controller","_getControllerProps","displayName"],"mappings":"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","sourcesContent":["import View from './view';\nimport Viewport from '../viewports/viewport';\n\nimport {Matrix4} from 'math.gl';\nimport {pixelsToWorld} from '@math.gl/web-mercator';\nimport OrbitController from '../controllers/orbit-controller';\n\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\nfunction getViewMatrix({height, fovy, orbitAxis, rotationX, rotationOrbit, zoom}) {\n  // We position the camera so that one common space unit (world space unit scaled by zoom)\n  // at the target maps to one screen pixel.\n  // This is a similar technique to that used in web mercator projection\n  // By doing so we are able to convert between common space and screen space sizes efficiently\n  // in the vertex shader.\n  const distance = 0.5 / Math.tan((fovy * DEGREES_TO_RADIANS) / 2);\n  const up = orbitAxis === 'Z' ? [0, 0, 1] : [0, 1, 0];\n  const eye = orbitAxis === 'Z' ? [0, -distance, 0] : [0, 0, distance];\n\n  const viewMatrix = new Matrix4().lookAt({eye, up});\n\n  viewMatrix.rotateX(rotationX * DEGREES_TO_RADIANS);\n  if (orbitAxis === 'Z') {\n    viewMatrix.rotateZ(rotationOrbit * DEGREES_TO_RADIANS);\n  } else {\n    viewMatrix.rotateY(rotationOrbit * DEGREES_TO_RADIANS);\n  }\n\n  // When height increases, we need to increase the distance from the camera to the target to\n  // keep the 1:1 mapping. However, this also changes the projected depth of each position by\n  // moving them further away between the near/far plane.\n  // Without modifying the default near/far planes, we instead scale down the common space to\n  // remove the distortion to the depth field.\n  const projectionScale = Math.pow(2, zoom) / (height || 1);\n  viewMatrix.scale(projectionScale);\n\n  return viewMatrix;\n}\n\nclass OrbitViewport extends Viewport {\n  constructor(props) {\n    const {\n      height,\n      fovy, // For setting camera position\n      orbitAxis, // Orbit axis with 360 degrees rotating freedom, can only be 'Y' or 'Z'\n      target = [0, 0, 0], // Which point is camera looking at, default origin\n\n      rotationX = 0, // Rotating angle around X axis\n      rotationOrbit = 0, // Rotating angle around orbit axis\n\n      zoom = 0\n    } = props;\n\n    super({\n      ...props,\n      // in case viewState contains longitude/latitude values,\n      // make sure that the base Viewport class does not treat this as a geospatial viewport\n      longitude: null,\n      viewMatrix: getViewMatrix({\n        height,\n        fovy,\n        orbitAxis,\n        rotationX,\n        rotationOrbit,\n        zoom\n      }),\n      fovy,\n      position: target,\n      zoom\n    });\n\n    this.projectedCenter = this.project(this.center);\n  }\n\n  unproject(xyz, {topLeft = true} = {}) {\n    const [x, y, z = this.projectedCenter[2]] = xyz;\n\n    const y2 = topLeft ? y : this.height - y;\n    const [X, Y, Z] = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix);\n    return [X, Y, Z];\n  }\n\n  panByPosition(coords, pixel) {\n    const p0 = this.project(coords);\n    const nextCenter = [\n      this.width / 2 + p0[0] - pixel[0],\n      this.height / 2 + p0[1] - pixel[1],\n      this.projectedCenter[2]\n    ];\n    return {\n      target: this.unproject(nextCenter)\n    };\n  }\n}\n\nexport default class OrbitView extends View {\n  constructor(props = {}) {\n    const {orbitAxis = 'Z'} = props;\n\n    super({\n      ...props,\n      orbitAxis,\n      type: OrbitViewport\n    });\n  }\n\n  get controller() {\n    return this._getControllerProps({\n      type: OrbitController\n    });\n  }\n}\n\nOrbitView.displayName = 'OrbitView';\n"],"file":"orbit-view.js"}