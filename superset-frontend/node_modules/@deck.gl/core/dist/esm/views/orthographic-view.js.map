{"version":3,"sources":["../../../src/views/orthographic-view.js"],"names":["View","Viewport","Matrix4","pixelsToWorld","vec2","OrthographicController","viewMatrix","lookAt","eye","getProjectionMatrix","width","height","near","far","ortho","left","right","bottom","top","OrthographicViewport","constructor","props","zoom","target","flipY","scale","Math","pow","longitude","position","clone","projectionMatrix","panByPosition","coords","pixel","fromLocation","pixelUnprojectionMatrix","translate","add","negate","newCenter","center","OrthographicView","type","controller","_getControllerProps","displayName"],"mappings":"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","sourcesContent":["import View from './view';\nimport Viewport from '../viewports/viewport';\n\nimport {Matrix4} from 'math.gl';\nimport {pixelsToWorld} from '@math.gl/web-mercator';\nimport * as vec2 from 'gl-matrix/vec2';\nimport OrthographicController from '../controllers/orthographic-controller';\n\nconst viewMatrix = new Matrix4().lookAt({eye: [0, 0, 1]});\n\nfunction getProjectionMatrix({width, height, near, far}) {\n  // Make sure Matrix4.ortho doesn't crash on 0 width/height\n  width = width || 1;\n  height = height || 1;\n\n  return new Matrix4().ortho({\n    left: -width / 2,\n    right: width / 2,\n    bottom: -height / 2,\n    top: height / 2,\n    near,\n    far\n  });\n}\n\nclass OrthographicViewport extends Viewport {\n  constructor(props) {\n    const {\n      width,\n      height,\n      near = 0.1,\n      far = 1000,\n      zoom = 0,\n      target = [0, 0, 0],\n      flipY = true\n    } = props;\n    const scale = Math.pow(2, zoom);\n    super({\n      ...props,\n      // in case viewState contains longitude/latitude values,\n      // make sure that the base Viewport class does not treat this as a geospatial viewport\n      longitude: null,\n      position: target,\n      viewMatrix: viewMatrix.clone().scale([scale, scale * (flipY ? -1 : 1), scale]),\n      projectionMatrix: getProjectionMatrix({width, height, near, far}),\n      zoom\n    });\n  }\n\n  /* Needed by LinearInterpolator */\n  panByPosition(coords, pixel) {\n    const fromLocation = pixelsToWorld(pixel, this.pixelUnprojectionMatrix);\n\n    const translate = vec2.add([], coords, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n\n    return {target: newCenter};\n  }\n}\n\nexport default class OrthographicView extends View {\n  constructor(props) {\n    super({\n      ...props,\n      type: OrthographicViewport\n    });\n  }\n\n  get controller() {\n    return this._getControllerProps({\n      type: OrthographicController\n    });\n  }\n}\n\nOrthographicView.displayName = 'OrthographicView';\n"],"file":"orthographic-view.js"}