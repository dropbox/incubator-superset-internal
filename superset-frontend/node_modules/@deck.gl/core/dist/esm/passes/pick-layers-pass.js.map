{"version":3,"sources":["../../../src/passes/pick-layers-pass.js"],"names":["LayersPass","withParameters","PICKING_PARAMETERS","blendFunc","blendEquation","PickLayersPass","render","props","pickingFBO","useAlpha","_drawPickingBuffer","layers","layerFilter","views","viewports","onViewportActive","deviceRect","x","y","width","height","pass","redrawReason","pickZ","gl","scissorTest","scissor","clearColor","depthMask","depthTest","depthRange","colorMask","blend","target","shouldDrawLayer","layer","pickable","getModuleParameters","pickingActive","pickingAttribute","lightSources","getLayerParameters","layerIndex","pickParameters","blendColor","parameters"],"mappings":"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","sourcesContent":["import LayersPass from './layers-pass';\nimport {withParameters} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\n\nconst PICKING_PARAMETERS = {\n  blendFunc: [GL.ONE, GL.ZERO, GL.CONSTANT_ALPHA, GL.ZERO],\n  blendEquation: GL.FUNC_ADD\n};\n\nexport default class PickLayersPass extends LayersPass {\n  render(props) {\n    if (props.pickingFBO) {\n      // When drawing into an off-screen buffer, use the alpha channel to encode layer index\n      this.useAlpha = true;\n      this._drawPickingBuffer(props);\n    } else {\n      // When drawing to screen (debug mode), do not use the alpha channel so that result is always visible\n      this.useAlpha = false;\n      super.render(props);\n    }\n  }\n\n  // Private\n  // Draws list of layers and viewports into the picking buffer\n  // Note: does not sample the buffer, that has to be done by the caller\n  _drawPickingBuffer({\n    layers,\n    layerFilter,\n    views,\n    viewports,\n    onViewportActive,\n    pickingFBO,\n    deviceRect: {x, y, width, height},\n    pass = 'picking',\n    redrawReason,\n    pickZ\n  }) {\n    const gl = this.gl;\n    this.pickZ = pickZ;\n\n    // Make sure we clear scissor test and fbo bindings in case of exceptions\n    // We are only interested in one pixel, no need to render anything else\n    // Note that the callback here is called synchronously.\n    // Set blend mode for picking\n    // always overwrite existing pixel with [r,g,b,layerIndex]\n    return withParameters(\n      gl,\n      {\n        scissorTest: true,\n        scissor: [x, y, width, height],\n        clearColor: [0, 0, 0, 0],\n        // When used as Mapbox custom layer, the context state may be dirty\n        // TODO - Remove when mapbox fixes this issue\n        // https://github.com/mapbox/mapbox-gl-js/issues/7801\n        depthMask: true,\n        depthTest: true,\n        depthRange: [0, 1],\n        colorMask: [true, true, true, true],\n        // Blending\n        ...PICKING_PARAMETERS,\n        blend: !pickZ\n      },\n      () => {\n        super.render({\n          target: pickingFBO,\n          layers,\n          layerFilter,\n          views,\n          viewports,\n          onViewportActive,\n          pass,\n          redrawReason\n        });\n      }\n    );\n  }\n\n  // PRIVATE\n  shouldDrawLayer(layer) {\n    return layer.props.pickable;\n  }\n\n  getModuleParameters() {\n    return {\n      pickingActive: 1,\n      pickingAttribute: this.pickZ,\n      // turn off lighting by adding empty light source object\n      // lights shader module relies on the `lightSources` to turn on/off lighting\n      lightSources: {}\n    };\n  }\n\n  getLayerParameters(layer, layerIndex) {\n    // These will override any layer parameters\n    const pickParameters = this.pickZ\n      ? {blend: false}\n      : {\n          ...PICKING_PARAMETERS,\n          blend: true,\n          blendColor: [0, 0, 0, this.useAlpha ? (layerIndex + 1) / 255 : 1]\n        };\n\n    // Override layer parameters with pick parameters\n    return {\n      ...layer.props.parameters,\n      ...pickParameters\n    };\n  }\n}\n"],"file":"pick-layers-pass.js"}