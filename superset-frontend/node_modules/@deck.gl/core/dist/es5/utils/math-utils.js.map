{"version":3,"sources":["../../../src/utils/math-utils.js"],"names":["createMat4","mod","value","divisor","modulus","getCameraPosition","viewMatrixInverse","getFrustumPlanes","viewProjectionMatrix","planes","left","getFrustumPlane","right","bottom","top","near","far","scratchVector","Vector3","a","b","c","d","set","L","len","distance","normal","fp64LowPart","x","Math","fround","scratchArray","toDoublePrecisionArray","typedArray","size","startIndex","endIndex","Number","isFinite","length","count","typedArrayManager","allocate","type","Float32Array","sourceIndex","targetIndex","j","subarray"],"mappings":"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","sourcesContent":["// Extensions to math.gl library. Intended to be folded back.\nimport typedArrayManager from './typed-array-manager';\nimport {Vector3} from 'math.gl';\n\n// Helper, avoids low-precision 32 bit matrices from gl-matrix mat4.create()\nexport function createMat4() {\n  return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n}\n\nexport function mod(value, divisor) {\n  const modulus = value % divisor;\n  return modulus < 0 ? divisor + modulus : modulus;\n}\n\n// Extract camera vectors (move to math library?)\nexport function getCameraPosition(viewMatrixInverse) {\n  // Read the translation from the inverse view matrix\n  return [viewMatrixInverse[12], viewMatrixInverse[13], viewMatrixInverse[14]];\n}\n\n// https://www.gamedevs.org/uploads/fast-extraction-viewing-frustum-planes-from-world-view-projection-matrix.pdf\nexport function getFrustumPlanes(viewProjectionMatrix) {\n  const planes = {};\n\n  planes.left = getFrustumPlane(\n    viewProjectionMatrix[3] + viewProjectionMatrix[0],\n    viewProjectionMatrix[7] + viewProjectionMatrix[4],\n    viewProjectionMatrix[11] + viewProjectionMatrix[8],\n    viewProjectionMatrix[15] + viewProjectionMatrix[12]\n  );\n  planes.right = getFrustumPlane(\n    viewProjectionMatrix[3] - viewProjectionMatrix[0],\n    viewProjectionMatrix[7] - viewProjectionMatrix[4],\n    viewProjectionMatrix[11] - viewProjectionMatrix[8],\n    viewProjectionMatrix[15] - viewProjectionMatrix[12]\n  );\n  planes.bottom = getFrustumPlane(\n    viewProjectionMatrix[3] + viewProjectionMatrix[1],\n    viewProjectionMatrix[7] + viewProjectionMatrix[5],\n    viewProjectionMatrix[11] + viewProjectionMatrix[9],\n    viewProjectionMatrix[15] + viewProjectionMatrix[13]\n  );\n  planes.top = getFrustumPlane(\n    viewProjectionMatrix[3] - viewProjectionMatrix[1],\n    viewProjectionMatrix[7] - viewProjectionMatrix[5],\n    viewProjectionMatrix[11] - viewProjectionMatrix[9],\n    viewProjectionMatrix[15] - viewProjectionMatrix[13]\n  );\n  planes.near = getFrustumPlane(\n    viewProjectionMatrix[3] + viewProjectionMatrix[2],\n    viewProjectionMatrix[7] + viewProjectionMatrix[6],\n    viewProjectionMatrix[11] + viewProjectionMatrix[10],\n    viewProjectionMatrix[15] + viewProjectionMatrix[14]\n  );\n  planes.far = getFrustumPlane(\n    viewProjectionMatrix[3] - viewProjectionMatrix[2],\n    viewProjectionMatrix[7] - viewProjectionMatrix[6],\n    viewProjectionMatrix[11] - viewProjectionMatrix[10],\n    viewProjectionMatrix[15] - viewProjectionMatrix[14]\n  );\n\n  return planes;\n}\n\nconst scratchVector = new Vector3();\n\nfunction getFrustumPlane(a, b, c, d) {\n  scratchVector.set(a, b, c);\n  const L = scratchVector.len();\n  return {distance: d / L, normal: new Vector3(-a / L, -b / L, -c / L)};\n}\n\n/**\n * Calculate the low part of a WebGL 64 bit float\n * @param x {number} - the input float number\n * @returns {number} - the lower 32 bit of the number\n */\nexport function fp64LowPart(x) {\n  return x - Math.fround(x);\n}\n\nlet scratchArray;\n\n/**\n * Split a Float64Array into a double-length Float32Array\n * @param typedArray {Float64Array}\n * @param size {Number} - per attribute size\n * @param [startIndex] {Number} - start index in the source array\n * @param [endIndex] {Number} - end index in the source array\n * @returns {Float32Array} - high part, low part for each attribute:\n    [1xHi, 1yHi, 1zHi, 1xLow, 1yLow, 1zLow, 2xHi, ...]\n */\nexport function toDoublePrecisionArray(typedArray, {size = 1, startIndex = 0, endIndex}) {\n  if (!Number.isFinite(endIndex)) {\n    endIndex = typedArray.length;\n  }\n  const count = (endIndex - startIndex) / size;\n  scratchArray = typedArrayManager.allocate(scratchArray, count, {\n    type: Float32Array,\n    size: size * 2\n  });\n\n  let sourceIndex = startIndex;\n  let targetIndex = 0;\n  while (sourceIndex < endIndex) {\n    for (let j = 0; j < size; j++) {\n      const value = typedArray[sourceIndex++];\n      scratchArray[targetIndex + j] = value;\n      scratchArray[targetIndex + j + size] = fp64LowPart(value);\n    }\n    targetIndex += size * 2;\n  }\n\n  return scratchArray.subarray(0, count * size * 2);\n}\n"],"file":"math-utils.js"}