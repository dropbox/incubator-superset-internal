{"version":3,"sources":["../../../src/utils/typed-array-manager.js"],"names":["TypedArrayManager","props","_pool","overAlloc","poolSize","setProps","Object","assign","typedArray","count","size","type","padding","copy","initialize","maxCount","Type","constructor","Float32Array","newSize","ArrayBuffer","isView","length","BYTES_PER_ELEMENT","buffer","byteLength","maxSize","newArray","_allocate","set","fill","_release","sizeToAllocate","Math","max","ceil","pool","i","findIndex","b","array","splice","push","shift"],"mappings":"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","sourcesContent":["export class TypedArrayManager {\n  constructor(props) {\n    this._pool = [];\n    this.props = {overAlloc: 2, poolSize: 100};\n    this.setProps(props);\n  }\n\n  setProps(props) {\n    Object.assign(this.props, props);\n  }\n\n  allocate(\n    typedArray,\n    count,\n    {size = 1, type, padding = 0, copy = false, initialize = false, maxCount}\n  ) {\n    const Type = type || (typedArray && typedArray.constructor) || Float32Array;\n\n    const newSize = count * size + padding;\n    if (ArrayBuffer.isView(typedArray)) {\n      if (newSize <= typedArray.length) {\n        return typedArray;\n      }\n      if (newSize * typedArray.BYTES_PER_ELEMENT <= typedArray.buffer.byteLength) {\n        return new Type(typedArray.buffer, 0, newSize);\n      }\n    }\n\n    let maxSize;\n    if (maxCount) {\n      maxSize = maxCount * size + padding;\n    }\n\n    const newArray = this._allocate(Type, newSize, initialize, maxSize);\n\n    if (typedArray && copy) {\n      newArray.set(typedArray);\n    } else if (!initialize) {\n      // Hack - always initialize the first 4 elements. NaNs crash the Attribute validation\n      newArray.fill(0, 0, 4);\n    }\n\n    this._release(typedArray);\n    return newArray;\n  }\n\n  release(typedArray) {\n    this._release(typedArray);\n  }\n\n  _allocate(Type, size, initialize, maxSize) {\n    // Allocate at least one element to ensure a valid buffer\n    let sizeToAllocate = Math.max(Math.ceil(size * this.props.overAlloc), 1);\n    // Don't over allocate after certain specified number of elements\n    if (sizeToAllocate > maxSize) {\n      sizeToAllocate = maxSize;\n    }\n\n    // Check if available in pool\n    const pool = this._pool;\n    const byteLength = Type.BYTES_PER_ELEMENT * sizeToAllocate;\n    const i = pool.findIndex(b => b.byteLength >= byteLength);\n    if (i >= 0) {\n      // Create a new array using an existing buffer\n      const array = new Type(pool.splice(i, 1)[0], 0, sizeToAllocate);\n      if (initialize) {\n        // Viewing a buffer with a different type may create NaNs\n        array.fill(0);\n      }\n      return array;\n    }\n    return new Type(sizeToAllocate);\n  }\n\n  _release(typedArray) {\n    if (!ArrayBuffer.isView(typedArray)) {\n      return;\n    }\n    const pool = this._pool;\n    const {buffer} = typedArray;\n    // Save the buffer of the released array into the pool\n    // Sort buffers by size\n    // TODO - implement binary search?\n    const {byteLength} = buffer;\n    const i = pool.findIndex(b => b.byteLength >= byteLength);\n    if (i < 0) {\n      pool.push(buffer);\n    } else if (i > 0 || pool.length < this.props.poolSize) {\n      pool.splice(i, 0, buffer);\n    }\n    if (pool.length > this.props.poolSize) {\n      // Drop the smallest one\n      pool.shift();\n    }\n  }\n}\n\nexport default new TypedArrayManager();\n"],"file":"typed-array-manager.js"}