{"version":3,"sources":["../../../src/transitions/linear-interpolator.js"],"names":["DEFAULT_PROPS","DEFAULT_REQUIRED_PROPS","LinearInterpolator","opts","transitionProps","Array","isArray","compare","extract","required","startProps","endProps","result","makeViewport","around","startViewport","endViewport","aroundPosition","unproject","start","Object","assign","end","project","width","height","t","propsInTransition","_propsToExtract","key","viewport","panByPosition","TransitionInterpolator"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;AAEA,IAAMA,aAAa,GAAG,CAAC,WAAD,EAAc,UAAd,EAA0B,MAA1B,EAAkC,SAAlC,EAA6C,OAA7C,CAAtB;AACA,IAAMC,sBAAsB,GAAG,CAAC,WAAD,EAAc,UAAd,EAA0B,MAA1B,CAA/B;;IAKqBC,kB;;;;;AAOnB,gCAAuB;AAAA;;AAAA,QAAXC,IAAW,uEAAJ,EAAI;AAAA;AAErB,QAAMC,eAAe,GAAGC,KAAK,CAACC,OAAN,CAAcH,IAAd,IAAsBA,IAAtB,GAA6BA,IAAI,CAACC,eAA1D;AACA,8BACEA,eAAe,IAAI;AACjBG,MAAAA,OAAO,EAAEP,aADQ;AAEjBQ,MAAAA,OAAO,EAAER,aAFQ;AAGjBS,MAAAA,QAAQ,EAAER;AAHO,KADrB;AAOA,UAAKE,IAAL,GAAYA,IAAZ;AAVqB;AAWtB;;;;oCAEeO,U,EAAYC,Q,EAAU;AACpC,UAAMC,MAAM,uHAAyBF,UAAzB,EAAqCC,QAArC,CAAZ;AADoC,uBAGL,KAAKR,IAHA;AAAA,UAG7BU,YAH6B,cAG7BA,YAH6B;AAAA,UAGfC,MAHe,cAGfA,MAHe;;AAIpC,UAAID,YAAY,IAAIC,MAApB,EAA4B;AAC1B,YAAMC,aAAa,GAAGF,YAAY,CAACH,UAAD,CAAlC;AACA,YAAMM,WAAW,GAAGH,YAAY,CAACF,QAAD,CAAhC;AACA,YAAMM,cAAc,GAAGF,aAAa,CAACG,SAAd,CAAwBJ,MAAxB,CAAvB;AACAF,QAAAA,MAAM,CAACO,KAAP,CAAaL,MAAb,GAAsBA,MAAtB;AACAM,QAAAA,MAAM,CAACC,MAAP,CAAcT,MAAM,CAACU,GAArB,EAA0B;AACxBR,UAAAA,MAAM,EAAEE,WAAW,CAACO,OAAZ,CAAoBN,cAApB,CADgB;AAExBA,UAAAA,cAAc,EAAdA,cAFwB;AAGxBO,UAAAA,KAAK,EAAEb,QAAQ,CAACa,KAHQ;AAIxBC,UAAAA,MAAM,EAAEd,QAAQ,CAACc;AAJO,SAA1B;AAMD;;AAED,aAAOb,MAAP;AACD;;;qCAEgBF,U,EAAYC,Q,EAAUe,C,EAAG;AACxC,UAAMC,iBAAiB,GAAG,EAA1B;;AADwC,iDAEtB,KAAKC,eAFiB;AAAA;;AAAA;AAExC,4DAAwC;AAAA,cAA7BC,GAA6B;AACtCF,UAAAA,iBAAiB,CAACE,GAAD,CAAjB,GAAyB,gBAAKnB,UAAU,CAACmB,GAAD,CAAV,IAAmB,CAAxB,EAA2BlB,QAAQ,CAACkB,GAAD,CAAR,IAAiB,CAA5C,EAA+CH,CAA/C,CAAzB;AACD;AAJuC;AAAA;AAAA;AAAA;AAAA;;AAMxC,UAAIf,QAAQ,CAACM,cAAb,EAA6B;AAE3B,YAAMa,QAAQ,GAAG,KAAK3B,IAAL,CAAUU,YAAV,iCAA2BF,QAA3B,GAAwCgB,iBAAxC,EAAjB;AACAP,QAAAA,MAAM,CAACC,MAAP,CACEM,iBADF,EAEEG,QAAQ,CAACC,aAAT,CACEpB,QAAQ,CAACM,cADX,EAGE,gBAAKP,UAAU,CAACI,MAAhB,EAAwBH,QAAQ,CAACG,MAAjC,EAAyCY,CAAzC,CAHF,CAFF;AAQD;;AACD,aAAOC,iBAAP;AACD;;;EA3D6CK,+B","sourcesContent":["import TransitionInterpolator from './transition-interpolator';\nimport {lerp} from 'math.gl';\n\nconst DEFAULT_PROPS = ['longitude', 'latitude', 'zoom', 'bearing', 'pitch'];\nconst DEFAULT_REQUIRED_PROPS = ['longitude', 'latitude', 'zoom'];\n\n/**\n * Performs linear interpolation of two view states.\n */\nexport default class LinearInterpolator extends TransitionInterpolator {\n  /**\n   * @param {Object} opts\n   * @param {Array} opts.transitionProps - list of props to apply linear transition to.\n   * @param {Array} opts.around - a screen point to zoom/rotate around.\n   * @param {Function} opts.makeViewport - construct a viewport instance with given props.\n   */\n  constructor(opts = {}) {\n    // Backward compatibility\n    const transitionProps = Array.isArray(opts) ? opts : opts.transitionProps;\n    super(\n      transitionProps || {\n        compare: DEFAULT_PROPS,\n        extract: DEFAULT_PROPS,\n        required: DEFAULT_REQUIRED_PROPS\n      }\n    );\n    this.opts = opts;\n  }\n\n  initializeProps(startProps, endProps) {\n    const result = super.initializeProps(startProps, endProps);\n\n    const {makeViewport, around} = this.opts;\n    if (makeViewport && around) {\n      const startViewport = makeViewport(startProps);\n      const endViewport = makeViewport(endProps);\n      const aroundPosition = startViewport.unproject(around);\n      result.start.around = around;\n      Object.assign(result.end, {\n        around: endViewport.project(aroundPosition),\n        aroundPosition,\n        width: endProps.width,\n        height: endProps.height\n      });\n    }\n\n    return result;\n  }\n\n  interpolateProps(startProps, endProps, t) {\n    const propsInTransition = {};\n    for (const key of this._propsToExtract) {\n      propsInTransition[key] = lerp(startProps[key] || 0, endProps[key] || 0, t);\n    }\n\n    if (endProps.aroundPosition) {\n      // Linear transition should be performed in common space\n      const viewport = this.opts.makeViewport({...endProps, ...propsInTransition});\n      Object.assign(\n        propsInTransition,\n        viewport.panByPosition(\n          endProps.aroundPosition,\n          // anchor point in current screen coordinates\n          lerp(startProps.around, endProps.around, t)\n        )\n      );\n    }\n    return propsInTransition;\n  }\n}\n"],"file":"linear-interpolator.js"}