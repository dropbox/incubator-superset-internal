"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _directionalLight = require("./directional-light");

var _suncalc = require("./suncalc");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var SunLight = function (_DirectionalLight) {
  (0, _inherits2.default)(SunLight, _DirectionalLight);

  var _super = _createSuper(SunLight);

  function SunLight(_ref) {
    var _this;

    var timestamp = _ref.timestamp,
        others = (0, _objectWithoutProperties2.default)(_ref, ["timestamp"]);
    (0, _classCallCheck2.default)(this, SunLight);
    _this = _super.call(this, others);
    _this.timestamp = timestamp;
    return _this;
  }

  (0, _createClass2.default)(SunLight, [{
    key: "getProjectedLight",
    value: function getProjectedLight(_ref2) {
      var layer = _ref2.layer;
      var viewport = layer.context.viewport;
      var isGlobe = viewport.resolution > 0;

      if (isGlobe) {
        var _getSunlightDirection = (0, _suncalc.getSunlightDirection)(this.timestamp, 0, 0),
            _getSunlightDirection2 = (0, _slicedToArray2.default)(_getSunlightDirection, 3),
            x = _getSunlightDirection2[0],
            y = _getSunlightDirection2[1],
            z = _getSunlightDirection2[2];

        this.direction = [x, -z, y];
      } else {
        var latitude = viewport.latitude,
            longitude = viewport.longitude;
        this.direction = (0, _suncalc.getSunlightDirection)(this.timestamp, latitude, longitude);
      }

      return this;
    }
  }]);
  return SunLight;
}(_directionalLight.DirectionalLight);

exports.default = SunLight;
//# sourceMappingURL=sun-light.js.map