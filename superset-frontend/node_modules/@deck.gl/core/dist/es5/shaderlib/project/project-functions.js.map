{"version":3,"sources":["../../../../src/shaderlib/project/project-functions.js"],"names":["lngLatZToWorldPosition","lngLatZ","viewport","offsetMode","p","projectPosition","WebMercatorViewport","longitude","latitude","z","distanceScales","getDistanceScales","unitsPerMeter","normalizeParameters","opts","normalizedParams","coordinateSystem","coordinateOrigin","fromCoordinateSystem","fromCoordinateOrigin","COORDINATE_SYSTEM","DEFAULT","isGeospatial","LNGLAT","CARTESIAN","undefined","getWorldPosition","position","modelMatrix","x","y","vec4","transformMat4","LNGLAT_OFFSETS","METER_OFFSETS","params","geospatialOrigin","shaderCoordinateOrigin","worldPosition","positionCommonSpace","vec3","sub"],"mappings":"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","sourcesContent":["/**\n * Projection utils\n * TODO: move to Viewport class?\n */\nimport {COORDINATE_SYSTEM} from '../../lib/constants';\nimport {getOffsetOrigin} from './viewport-uniforms';\nimport WebMercatorViewport from '../../viewports/web-mercator-viewport';\n\nimport * as vec4 from 'gl-matrix/vec4';\nimport * as vec3 from 'gl-matrix/vec3';\nimport {addMetersToLngLat} from '@math.gl/web-mercator';\n\n// In project.glsl, offset modes calculate z differently from LNG_LAT mode.\n// offset modes apply the y adjustment (unitsPerMeter2) when projecting z\n// LNG_LAT mode only use the linear scale.\nfunction lngLatZToWorldPosition(lngLatZ, viewport, offsetMode = false) {\n  const p = viewport.projectPosition(lngLatZ);\n\n  // TODO - avoid using instanceof\n  if (offsetMode && viewport instanceof WebMercatorViewport) {\n    const [longitude, latitude, z = 0] = lngLatZ;\n    const distanceScales = viewport.getDistanceScales([longitude, latitude]);\n    p[2] = z * distanceScales.unitsPerMeter[2];\n  }\n  return p;\n}\n\nfunction normalizeParameters(opts) {\n  const normalizedParams = {...opts};\n\n  let {coordinateSystem} = opts;\n  const {viewport, coordinateOrigin, fromCoordinateSystem, fromCoordinateOrigin} = opts;\n\n  if (coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n    coordinateSystem = viewport.isGeospatial\n      ? COORDINATE_SYSTEM.LNGLAT\n      : COORDINATE_SYSTEM.CARTESIAN;\n  }\n\n  if (fromCoordinateSystem === undefined) {\n    normalizedParams.fromCoordinateSystem = coordinateSystem;\n  }\n  if (fromCoordinateOrigin === undefined) {\n    normalizedParams.fromCoordinateOrigin = coordinateOrigin;\n  }\n\n  normalizedParams.coordinateSystem = coordinateSystem;\n\n  return normalizedParams;\n}\n\nexport function getWorldPosition(\n  position,\n  {viewport, modelMatrix, coordinateSystem, coordinateOrigin, offsetMode}\n) {\n  let [x, y, z = 0] = position;\n\n  if (modelMatrix) {\n    [x, y, z] = vec4.transformMat4([], [x, y, z, 1.0], modelMatrix);\n  }\n\n  switch (coordinateSystem) {\n    case COORDINATE_SYSTEM.LNGLAT:\n      return lngLatZToWorldPosition([x, y, z], viewport, offsetMode);\n\n    case COORDINATE_SYSTEM.LNGLAT_OFFSETS:\n      return lngLatZToWorldPosition(\n        [x + coordinateOrigin[0], y + coordinateOrigin[1], z + (coordinateOrigin[2] || 0)],\n        viewport,\n        offsetMode\n      );\n\n    case COORDINATE_SYSTEM.METER_OFFSETS:\n      return lngLatZToWorldPosition(\n        addMetersToLngLat(coordinateOrigin, [x, y, z]),\n        viewport,\n        offsetMode\n      );\n\n    case COORDINATE_SYSTEM.CARTESIAN:\n    default:\n      return viewport.isGeospatial\n        ? [x + coordinateOrigin[0], y + coordinateOrigin[1], z + coordinateOrigin[2]]\n        : viewport.projectPosition([x, y, z]);\n  }\n}\n\n/**\n * Equivalent to project_position in project.glsl\n * projects a user supplied position to world position directly with or without\n * a reference coordinate system\n * @param {array} position - [x, y, z]\n * @param {object} params\n * @param {Viewport} params.viewport - the current viewport\n * @param {number} params.coordinateSystem - the reference coordinate system used\n *   align world position\n * @param {array} params.coordinateOrigin - the reference coordinate origin used\n *   to align world position\n * @param {Matrix4} [params.modelMatrix] - the model matrix of the supplied position\n * @param {number} [params.fromCoordinateSystem] - the coordinate system that the\n *   supplied position is in. Default to the same as `coordinateSystem`.\n * @param {array} [params.fromCoordinateOrigin] - the coordinate origin that the\n *   supplied position is in. Default to the same as `coordinateOrigin`.\n */\nexport function projectPosition(position, params) {\n  const {\n    viewport,\n    coordinateSystem,\n    coordinateOrigin,\n    // optional\n    modelMatrix,\n    fromCoordinateSystem,\n    fromCoordinateOrigin\n  } = normalizeParameters(params);\n\n  const {geospatialOrigin, shaderCoordinateOrigin, offsetMode} = getOffsetOrigin(\n    viewport,\n    coordinateSystem,\n    coordinateOrigin\n  );\n\n  const worldPosition = getWorldPosition(position, {\n    viewport,\n    modelMatrix,\n    coordinateSystem: fromCoordinateSystem,\n    coordinateOrigin: fromCoordinateOrigin,\n    offsetMode\n  });\n\n  if (offsetMode) {\n    const positionCommonSpace = viewport.projectPosition(\n      geospatialOrigin || shaderCoordinateOrigin\n    );\n    vec3.sub(worldPosition, worldPosition, positionCommonSpace);\n  }\n\n  return worldPosition;\n}\n"],"file":"project-functions.js"}