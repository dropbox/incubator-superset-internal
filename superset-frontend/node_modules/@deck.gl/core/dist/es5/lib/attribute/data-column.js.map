{"version":3,"sources":["../../../../src/lib/attribute/data-column.js"],"names":["getStride","accessor","stride","size","bytesPerElement","resolveShaderAttribute","baseAccessor","shaderAttributeOptions","offset","log","removed","vertexOffset","elementOffset","resolveDoublePrecisionShaderAttributes","resolvedOptions","high","low","DataColumn","gl","opts","id","logicalType","type","doublePrecision","defaultValue","Number","isFinite","Array","fill","bufferType","isIndexed","FEATURES","ELEMENT_INDEX_UINT32","defaultType","shaderAttributes","fp64","Float32Array","BYTES_PER_ELEMENT","value","settings","state","externalBuffer","bufferAccessor","allocatedValue","constant","_buffer","setData","delete","typedArrayManager","release","options","isBuffer64Bit","Float64Array","doubleShaderAttributeDefs","getAccessor","ShaderAttribute","shaderAttributeDef","getBuffer","ArrayBuffer","isView","Buffer","buffer","_normalizeValue","normalized","_normalizeConstant","hasChanged","_areValuesEqual","_checkExternalBuffer","byteOffset","requiredBufferSize","byteLength","reallocate","setAccessor","subData","data","startOffset","endOffset","startIndex","endIndex","subarray","numInstances","copy","oldValue","allocate","ArrayType","illegalArrayType","Error","constructor","name","warn","map","x","out","start","i","value1","value2","target"],"mappings":"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","sourcesContent":["/* eslint-disable complexity */\nimport GL from '@luma.gl/constants';\nimport {hasFeature, FEATURES, Buffer} from '@luma.gl/core';\nimport ShaderAttribute from './shader-attribute';\nimport {glArrayFromType} from './gl-utils';\nimport typedArrayManager from '../../utils/typed-array-manager';\nimport {toDoublePrecisionArray} from '../../utils/math-utils';\nimport log from '../../utils/log';\n\nfunction getStride(accessor) {\n  return accessor.stride || accessor.size * accessor.bytesPerElement;\n}\n\nfunction resolveShaderAttribute(baseAccessor, shaderAttributeOptions) {\n  if (shaderAttributeOptions.offset) {\n    log.removed('shaderAttribute.offset', 'vertexOffset, elementOffset')();\n  }\n\n  // All shader attributes share the parent's stride\n  const stride = getStride(baseAccessor);\n  // `vertexOffset` is used to access the neighboring vertex's value\n  // e.g. `nextPositions` in polygon\n  const vertexOffset =\n    'vertexOffset' in shaderAttributeOptions\n      ? shaderAttributeOptions.vertexOffset\n      : baseAccessor.vertexOffset || 0;\n  // `elementOffset` is defined when shader attribute's size is smaller than the parent's\n  // e.g. `translations` in transform matrix\n  const elementOffset = shaderAttributeOptions.elementOffset || 0;\n  const offset =\n    // offsets defined by the attribute\n    vertexOffset * stride +\n    elementOffset * baseAccessor.bytesPerElement +\n    // offsets defined by external buffers if any\n    (baseAccessor.offset || 0);\n\n  return {\n    ...shaderAttributeOptions,\n    offset,\n    stride\n  };\n}\n\nfunction resolveDoublePrecisionShaderAttributes(baseAccessor, shaderAttributeOptions) {\n  const resolvedOptions = resolveShaderAttribute(baseAccessor, shaderAttributeOptions);\n\n  return {\n    high: resolvedOptions,\n    low: {\n      ...resolvedOptions,\n      offset: resolvedOptions.offset + baseAccessor.size * 4\n    }\n  };\n}\n\nexport default class DataColumn {\n  /* eslint-disable max-statements */\n  constructor(gl, opts) {\n    this.gl = gl;\n    this.id = opts.id;\n    this.size = opts.size;\n\n    const logicalType = opts.logicalType || opts.type;\n    const doublePrecision = logicalType === GL.DOUBLE;\n\n    let {defaultValue} = opts;\n    defaultValue = Number.isFinite(defaultValue)\n      ? [defaultValue]\n      : defaultValue || new Array(this.size).fill(0);\n    opts.defaultValue = defaultValue;\n\n    let bufferType = logicalType;\n    if (doublePrecision) {\n      bufferType = GL.FLOAT;\n    } else if (!bufferType && opts.isIndexed) {\n      bufferType =\n        gl && hasFeature(gl, FEATURES.ELEMENT_INDEX_UINT32) ? GL.UNSIGNED_INT : GL.UNSIGNED_SHORT;\n    } else if (!bufferType) {\n      bufferType = GL.FLOAT;\n    }\n    opts.logicalType = logicalType;\n    opts.type = bufferType;\n\n    // This is the attribute type defined by the layer\n    // If an external buffer is provided, this.type may be overwritten\n    // But we always want to use defaultType for allocation\n    let defaultType = glArrayFromType(logicalType || bufferType || GL.FLOAT);\n    this.shaderAttributes = {};\n    this.doublePrecision = doublePrecision;\n\n    // `fp64: false` tells a double-precision attribute to allocate Float32Arrays\n    // by default when using auto-packing. This is more efficient in use cases where\n    // high precision is unnecessary, but the `64Low` attribute is still required\n    // by the shader.\n    if (doublePrecision && opts.fp64 === false) {\n      defaultType = Float32Array;\n    }\n    opts.bytesPerElement = defaultType.BYTES_PER_ELEMENT;\n\n    this.defaultType = defaultType;\n    this.value = null;\n    this.settings = opts;\n    this.state = {\n      externalBuffer: null,\n      bufferAccessor: opts,\n      allocatedValue: null,\n      constant: false\n    };\n    this._buffer = null;\n\n    this.setData(opts);\n  }\n  /* eslint-enable max-statements */\n\n  get buffer() {\n    if (!this._buffer) {\n      const {isIndexed, type} = this.settings;\n      this._buffer = new Buffer(this.gl, {\n        id: this.id,\n        target: isIndexed ? GL.ELEMENT_ARRAY_BUFFER : GL.ARRAY_BUFFER,\n        accessor: {type}\n      });\n    }\n    return this._buffer;\n  }\n\n  get byteOffset() {\n    const accessor = this.getAccessor();\n    if (accessor.vertexOffset) {\n      return accessor.vertexOffset * getStride(accessor);\n    }\n    return 0;\n  }\n\n  delete() {\n    if (this._buffer) {\n      this._buffer.delete();\n      this._buffer = null;\n    }\n    typedArrayManager.release(this.state.allocatedValue);\n  }\n\n  getShaderAttributes(id, options) {\n    if (this.doublePrecision) {\n      const shaderAttributes = {};\n      const isBuffer64Bit = this.value instanceof Float64Array;\n\n      const doubleShaderAttributeDefs = resolveDoublePrecisionShaderAttributes(\n        this.getAccessor(),\n        options || {}\n      );\n\n      shaderAttributes[id] = new ShaderAttribute(this, doubleShaderAttributeDefs.high);\n      shaderAttributes[`${id}64Low`] = isBuffer64Bit\n        ? new ShaderAttribute(this, doubleShaderAttributeDefs.low)\n        : new Float32Array(this.size); // use constant for low part if buffer is 32-bit\n      return shaderAttributes;\n    }\n    if (options) {\n      const shaderAttributeDef = resolveShaderAttribute(this.getAccessor(), options);\n      return {[id]: new ShaderAttribute(this, shaderAttributeDef)};\n    }\n    return {[id]: this};\n  }\n\n  getBuffer() {\n    if (this.state.constant) {\n      return null;\n    }\n    return this.state.externalBuffer || this._buffer;\n  }\n\n  getValue() {\n    if (this.state.constant) {\n      return this.value;\n    }\n    return [this.getBuffer(), this.getAccessor()];\n  }\n\n  getAccessor() {\n    return this.state.bufferAccessor;\n  }\n\n  // returns true if success\n  // eslint-disable-next-line max-statements\n  setData(opts) {\n    const {state} = this;\n    if (ArrayBuffer.isView(opts)) {\n      opts = {value: opts};\n    } else if (opts instanceof Buffer) {\n      opts = {buffer: opts};\n    }\n\n    const accessor = {...this.settings, ...opts};\n    state.bufferAccessor = accessor;\n\n    if (opts.constant) {\n      // set constant\n      let value = opts.value;\n      value = this._normalizeValue(value, [], 0);\n      if (this.settings.normalized) {\n        value = this._normalizeConstant(value);\n      }\n      const hasChanged = !state.constant || !this._areValuesEqual(value, this.value);\n\n      if (!hasChanged) {\n        return false;\n      }\n      state.externalBuffer = null;\n      state.constant = true;\n      this.value = value;\n    } else if (opts.buffer) {\n      const buffer = opts.buffer;\n      state.externalBuffer = buffer;\n      state.constant = false;\n      this.value = opts.value;\n      const isBuffer64Bit = opts.value instanceof Float64Array;\n\n      // Copy the type of the buffer into the accessor\n      accessor.type = opts.type || buffer.accessor.type;\n      accessor.bytesPerElement = buffer.accessor.BYTES_PER_ELEMENT * (isBuffer64Bit ? 2 : 1);\n      accessor.stride = getStride(accessor);\n    } else if (opts.value) {\n      this._checkExternalBuffer(opts);\n\n      let value = opts.value;\n      state.externalBuffer = null;\n      state.constant = false;\n      this.value = value;\n\n      accessor.bytesPerElement = value.BYTES_PER_ELEMENT;\n      accessor.stride = getStride(accessor);\n\n      const {buffer, byteOffset} = this;\n\n      if (this.doublePrecision && value instanceof Float64Array) {\n        value = toDoublePrecisionArray(value, accessor);\n      }\n\n      // A small over allocation is used as safety margin\n      // Shader attributes may try to access this buffer with bigger offsets\n      const requiredBufferSize = value.byteLength + byteOffset + accessor.stride * 2;\n      if (buffer.byteLength < requiredBufferSize) {\n        buffer.reallocate(requiredBufferSize);\n      }\n      // Hack: force Buffer to infer data type\n      buffer.setAccessor(null);\n      buffer.subData({data: value, offset: byteOffset});\n      accessor.type = opts.type || buffer.accessor.type;\n    }\n\n    return true;\n  }\n\n  updateSubBuffer(opts = {}) {\n    const {value} = this;\n    const {startOffset = 0, endOffset} = opts;\n    this.buffer.subData({\n      data:\n        this.doublePrecision && value instanceof Float64Array\n          ? toDoublePrecisionArray(value, {\n              size: this.size,\n              startIndex: startOffset,\n              endIndex: endOffset\n            })\n          : value.subarray(startOffset, endOffset),\n      offset: startOffset * value.BYTES_PER_ELEMENT + this.byteOffset\n    });\n  }\n\n  allocate({numInstances, copy = false}) {\n    const {state} = this;\n    const oldValue = state.allocatedValue;\n\n    // Allocate at least one element to ensure a valid buffer\n    const value = typedArrayManager.allocate(oldValue, numInstances + 1, {\n      size: this.size,\n      type: this.defaultType,\n      copy\n    });\n\n    this.value = value;\n\n    const {buffer, byteOffset} = this;\n\n    if (buffer.byteLength < value.byteLength + byteOffset) {\n      buffer.reallocate(value.byteLength + byteOffset);\n\n      if (copy && oldValue) {\n        // Upload the full existing attribute value to the GPU, so that updateBuffer\n        // can choose to only update a partial range.\n        // TODO - copy old buffer to new buffer on the GPU\n        buffer.subData({\n          data:\n            oldValue instanceof Float64Array ? toDoublePrecisionArray(oldValue, this) : oldValue,\n          offset: byteOffset\n        });\n      }\n    }\n\n    state.allocatedValue = value;\n    state.constant = false;\n    state.externalBuffer = null;\n    state.bufferAccessor = this.settings;\n    return true;\n  }\n\n  // PRIVATE HELPER METHODS\n  _checkExternalBuffer(opts) {\n    const {value} = opts;\n    if (!opts.constant && value) {\n      const ArrayType = this.defaultType;\n\n      let illegalArrayType = false;\n      if (this.doublePrecision) {\n        // not 32bit or 64bit\n        illegalArrayType = value.BYTES_PER_ELEMENT < 4;\n      }\n      if (illegalArrayType) {\n        throw new Error(`Attribute ${this.id} does not support ${value.constructor.name}`);\n      }\n      if (!(value instanceof ArrayType) && this.settings.normalized && !('normalized' in opts)) {\n        log.warn(`Attribute ${this.id} is normalized`)();\n      }\n    }\n  }\n\n  // https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer\n  _normalizeConstant(value) {\n    switch (this.settings.type) {\n      case GL.BYTE:\n        // normalize [-128, 127] to [-1, 1]\n        return new Float32Array(value).map(x => ((x + 128) / 255) * 2 - 1);\n\n      case GL.SHORT:\n        // normalize [-32768, 32767] to [-1, 1]\n        return new Float32Array(value).map(x => ((x + 32768) / 65535) * 2 - 1);\n\n      case GL.UNSIGNED_BYTE:\n        // normalize [0, 255] to [0, 1]\n        return new Float32Array(value).map(x => x / 255);\n\n      case GL.UNSIGNED_SHORT:\n        // normalize [0, 65535] to [0, 1]\n        return new Float32Array(value).map(x => x / 65535);\n\n      default:\n        // No normalization for gl.FLOAT and gl.HALF_FLOAT\n        return value;\n    }\n  }\n\n  /* check user supplied values and apply fallback */\n  _normalizeValue(value, out, start) {\n    const {defaultValue, size} = this.settings;\n\n    if (Number.isFinite(value)) {\n      out[start] = value;\n      return out;\n    }\n    if (!value) {\n      out[start] = defaultValue[0];\n      return out;\n    }\n\n    // Important - switch cases are 5x more performant than a for loop!\n    /* eslint-disable no-fallthrough, default-case */\n    switch (size) {\n      case 4:\n        out[start + 3] = Number.isFinite(value[3]) ? value[3] : defaultValue[3];\n      case 3:\n        out[start + 2] = Number.isFinite(value[2]) ? value[2] : defaultValue[2];\n      case 2:\n        out[start + 1] = Number.isFinite(value[1]) ? value[1] : defaultValue[1];\n      case 1:\n        out[start + 0] = Number.isFinite(value[0]) ? value[0] : defaultValue[0];\n        break;\n\n      default:\n        // In the rare case where the attribute size > 4, do it the slow way\n        // This is used for e.g. transform matrices\n        let i = size;\n        while (--i >= 0) {\n          out[start + i] = Number.isFinite(value[i]) ? value[i] : defaultValue[i];\n        }\n    }\n\n    return out;\n  }\n\n  _areValuesEqual(value1, value2) {\n    if (!value1 || !value2) {\n      return false;\n    }\n    const {size} = this;\n    for (let i = 0; i < size; i++) {\n      if (value1[i] !== value2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n"],"file":"data-column.js"}