{"version":3,"sources":["../../../src/views/orbit-view.js"],"names":["DEGREES_TO_RADIANS","Math","PI","getViewMatrix","height","fovy","orbitAxis","rotationX","rotationOrbit","zoom","distance","tan","up","eye","viewMatrix","Matrix4","lookAt","rotateX","rotateZ","rotateY","projectionScale","pow","scale","OrbitViewport","props","target","longitude","position","projectedCenter","project","center","xyz","topLeft","x","y","z","y2","pixelUnprojectionMatrix","X","Y","Z","coords","pixel","p0","nextCenter","width","unproject","Viewport","OrbitView","type","_getControllerProps","OrbitController","View","displayName"],"mappings":"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","sourcesContent":["import View from './view';\nimport Viewport from '../viewports/viewport';\n\nimport {Matrix4} from 'math.gl';\nimport {pixelsToWorld} from '@math.gl/web-mercator';\nimport OrbitController from '../controllers/orbit-controller';\n\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\nfunction getViewMatrix({height, fovy, orbitAxis, rotationX, rotationOrbit, zoom}) {\n  // We position the camera so that one common space unit (world space unit scaled by zoom)\n  // at the target maps to one screen pixel.\n  // This is a similar technique to that used in web mercator projection\n  // By doing so we are able to convert between common space and screen space sizes efficiently\n  // in the vertex shader.\n  const distance = 0.5 / Math.tan((fovy * DEGREES_TO_RADIANS) / 2);\n  const up = orbitAxis === 'Z' ? [0, 0, 1] : [0, 1, 0];\n  const eye = orbitAxis === 'Z' ? [0, -distance, 0] : [0, 0, distance];\n\n  const viewMatrix = new Matrix4().lookAt({eye, up});\n\n  viewMatrix.rotateX(rotationX * DEGREES_TO_RADIANS);\n  if (orbitAxis === 'Z') {\n    viewMatrix.rotateZ(rotationOrbit * DEGREES_TO_RADIANS);\n  } else {\n    viewMatrix.rotateY(rotationOrbit * DEGREES_TO_RADIANS);\n  }\n\n  // When height increases, we need to increase the distance from the camera to the target to\n  // keep the 1:1 mapping. However, this also changes the projected depth of each position by\n  // moving them further away between the near/far plane.\n  // Without modifying the default near/far planes, we instead scale down the common space to\n  // remove the distortion to the depth field.\n  const projectionScale = Math.pow(2, zoom) / (height || 1);\n  viewMatrix.scale(projectionScale);\n\n  return viewMatrix;\n}\n\nclass OrbitViewport extends Viewport {\n  constructor(props) {\n    const {\n      height,\n      fovy, // For setting camera position\n      orbitAxis, // Orbit axis with 360 degrees rotating freedom, can only be 'Y' or 'Z'\n      target = [0, 0, 0], // Which point is camera looking at, default origin\n\n      rotationX = 0, // Rotating angle around X axis\n      rotationOrbit = 0, // Rotating angle around orbit axis\n\n      zoom = 0\n    } = props;\n\n    super({\n      ...props,\n      // in case viewState contains longitude/latitude values,\n      // make sure that the base Viewport class does not treat this as a geospatial viewport\n      longitude: null,\n      viewMatrix: getViewMatrix({\n        height,\n        fovy,\n        orbitAxis,\n        rotationX,\n        rotationOrbit,\n        zoom\n      }),\n      fovy,\n      position: target,\n      zoom\n    });\n\n    this.projectedCenter = this.project(this.center);\n  }\n\n  unproject(xyz, {topLeft = true} = {}) {\n    const [x, y, z = this.projectedCenter[2]] = xyz;\n\n    const y2 = topLeft ? y : this.height - y;\n    const [X, Y, Z] = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix);\n    return [X, Y, Z];\n  }\n\n  panByPosition(coords, pixel) {\n    const p0 = this.project(coords);\n    const nextCenter = [\n      this.width / 2 + p0[0] - pixel[0],\n      this.height / 2 + p0[1] - pixel[1],\n      this.projectedCenter[2]\n    ];\n    return {\n      target: this.unproject(nextCenter)\n    };\n  }\n}\n\nexport default class OrbitView extends View {\n  constructor(props = {}) {\n    const {orbitAxis = 'Z'} = props;\n\n    super({\n      ...props,\n      orbitAxis,\n      type: OrbitViewport\n    });\n  }\n\n  get controller() {\n    return this._getControllerProps({\n      type: OrbitController\n    });\n  }\n}\n\nOrbitView.displayName = 'OrbitView';\n"],"file":"orbit-view.js"}