{"version":3,"sources":["../../../src/controllers/orbit-controller.js"],"names":["DEFAULT_STATE","rotationX","rotationOrbit","zoom","target","minRotationX","maxRotationX","minZoom","Infinity","maxZoom","OrbitState","makeViewport","width","height","startPanPosition","startRotatePos","startRotationX","startRotationOrbit","startZoomPosition","startZoom","_state","pos","_getUpdatedState","_unproject","startPosition","viewport","_viewportProps","newProps","panByPosition","deltaAngleX","deltaAngleY","Number","isFinite","newRotation","deltaScaleX","deltaScaleY","viewState","fromProps","getViewportProps","props","Math","abs","startPos","scale","newZoom","_calculateNewZoom","zoomedViewport","speed","_panFromCenter","unproject","log2","offset","pan","ViewState","OrbitController","Controller"],"mappings":"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","sourcesContent":["import {clamp} from 'math.gl';\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport {mod} from '../utils/math-utils';\n\nconst DEFAULT_STATE = {\n  rotationX: 0,\n  rotationOrbit: 0,\n  zoom: 0,\n  target: [0, 0, 0],\n  minRotationX: -90,\n  maxRotationX: 90,\n  minZoom: -Infinity,\n  maxZoom: Infinity\n};\n\n/* Helpers */\n\nexport class OrbitState extends ViewState {\n  constructor({\n    makeViewport,\n\n    /* Viewport arguments */\n    width, // Width of viewport\n    height, // Height of viewport\n    rotationX = DEFAULT_STATE.rotationX, // Rotation around x axis\n    rotationOrbit = DEFAULT_STATE.rotationOrbit, // Rotation around orbit axis\n    target = DEFAULT_STATE.target,\n    zoom = DEFAULT_STATE.zoom,\n\n    /* Viewport constraints */\n    minRotationX = DEFAULT_STATE.minRotationX,\n    maxRotationX = DEFAULT_STATE.maxRotationX,\n    minZoom = DEFAULT_STATE.minZoom,\n    maxZoom = DEFAULT_STATE.maxZoom,\n\n    /** Interaction states, required to calculate change during transform */\n    // Model state when the pan operation first started\n    startPanPosition,\n    // Model state when the rotate operation first started\n    startRotatePos,\n    startRotationX,\n    startRotationOrbit,\n    // Model state when the zoom operation first started\n    startZoomPosition,\n    startZoom\n  }) {\n    super({\n      width,\n      height,\n      rotationX,\n      rotationOrbit,\n      target,\n      zoom,\n      minRotationX,\n      maxRotationX,\n      minZoom,\n      maxZoom\n    });\n\n    this._state = {\n      startPanPosition,\n      startRotatePos,\n      startRotationX,\n      startRotationOrbit,\n      startZoomPosition,\n      startZoom\n    };\n\n    this.makeViewport = makeViewport;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}) {\n    return this._getUpdatedState({\n      startPanPosition: this._unproject(pos)\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  pan({pos, startPosition}) {\n    const startPanPosition = this._state.startPanPosition || startPosition;\n\n    if (!startPanPosition) {\n      return this;\n    }\n\n    const viewport = this.makeViewport(this._viewportProps);\n    const newProps = viewport.panByPosition(startPanPosition, pos);\n\n    return this._getUpdatedState(newProps);\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedState({\n      startPanPosition: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  rotateStart({pos}) {\n    return this._getUpdatedState({\n      startRotatePos: pos,\n      startRotationX: this._viewportProps.rotationX,\n      startRotationOrbit: this._viewportProps.rotationOrbit\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  rotate({pos, deltaAngleX = 0, deltaAngleY = 0}) {\n    const {startRotatePos, startRotationX, startRotationOrbit} = this._state;\n    const {width, height} = this._viewportProps;\n\n    if (\n      !startRotatePos ||\n      !Number.isFinite(startRotationX) ||\n      !Number.isFinite(startRotationOrbit)\n    ) {\n      return this;\n    }\n\n    let newRotation;\n    if (pos) {\n      let deltaScaleX = (pos[0] - startRotatePos[0]) / width;\n      const deltaScaleY = (pos[1] - startRotatePos[1]) / height;\n\n      if (startRotationX < -90 || startRotationX > 90) {\n        // When looking at the \"back\" side of the scene, invert horizontal drag\n        // so that the camera movement follows user input\n        deltaScaleX *= -1;\n      }\n      newRotation = {\n        rotationX: startRotationX + deltaScaleY * 180,\n        rotationOrbit: startRotationOrbit + deltaScaleX * 180\n      };\n    } else {\n      newRotation = {\n        rotationX: startRotationX + deltaAngleY,\n        rotationOrbit: startRotationOrbit + deltaAngleX\n      };\n    }\n\n    return this._getUpdatedState(newRotation);\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedState({\n      startRotationX: null,\n      startRotationOrbit: null\n    });\n  }\n\n  // shortest path between two view states\n  shortestPathFrom(viewState) {\n    const fromProps = viewState.getViewportProps();\n    const props = {...this._viewportProps};\n    const {rotationOrbit} = props;\n\n    if (Math.abs(rotationOrbit - fromProps.rotationOrbit) > 180) {\n      props.rotationOrbit = rotationOrbit < 0 ? rotationOrbit + 360 : rotationOrbit - 360;\n    }\n\n    return props;\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  zoomStart({pos}) {\n    return this._getUpdatedState({\n      startZoomPosition: this._unproject(pos),\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current target is\n   * @param {[Number, Number]} startPos - the target position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({pos, startPos, scale}) {\n    const {zoom} = this._viewportProps;\n    let {startZoom, startZoomPosition} = this._state;\n    if (!Number.isFinite(startZoom)) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = zoom;\n      startZoomPosition = this._unproject(startPos) || this._unproject(pos);\n    }\n\n    const newZoom = this._calculateNewZoom({scale, startZoom});\n    const zoomedViewport = this.makeViewport({...this._viewportProps, zoom: newZoom});\n\n    return this._getUpdatedState({\n      zoom: newZoom,\n      ...zoomedViewport.panByPosition(startZoomPosition, pos)\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomPosition: null,\n      startZoom: null\n    });\n  }\n\n  zoomIn(speed = 2) {\n    return this._getUpdatedState({\n      zoom: this._calculateNewZoom({scale: speed})\n    });\n  }\n\n  zoomOut(speed = 2) {\n    return this._getUpdatedState({\n      zoom: this._calculateNewZoom({scale: 1 / speed})\n    });\n  }\n\n  moveLeft(speed = 50) {\n    return this._panFromCenter([-speed, 0]);\n  }\n\n  moveRight(speed = 50) {\n    return this._panFromCenter([speed, 0]);\n  }\n\n  moveUp(speed = 50) {\n    return this._panFromCenter([0, -speed]);\n  }\n\n  moveDown(speed = 50) {\n    return this._panFromCenter([0, speed]);\n  }\n\n  rotateLeft(speed = 15) {\n    return this._getUpdatedState({\n      rotationOrbit: this._viewportProps.rotationOrbit - speed\n    });\n  }\n\n  rotateRight(speed = 15) {\n    return this._getUpdatedState({\n      rotationOrbit: this._viewportProps.rotationOrbit + speed\n    });\n  }\n\n  rotateUp(speed = 10) {\n    return this._getUpdatedState({\n      rotationX: this._viewportProps.rotationX - speed\n    });\n  }\n\n  rotateDown(speed = 10) {\n    return this._getUpdatedState({\n      rotationX: this._viewportProps.rotationX + speed\n    });\n  }\n\n  /* Private methods */\n\n  _unproject(pos) {\n    const viewport = this.makeViewport(this._viewportProps);\n    return pos && viewport.unproject(pos);\n  }\n\n  // Calculates new zoom\n  _calculateNewZoom({scale, startZoom}) {\n    const {maxZoom, minZoom} = this._viewportProps;\n    if (!Number.isFinite(startZoom)) {\n      startZoom = this._viewportProps.zoom;\n    }\n    const zoom = startZoom + Math.log2(scale);\n    return clamp(zoom, minZoom, maxZoom);\n  }\n\n  _panFromCenter(offset) {\n    const {width, height, target} = this._viewportProps;\n    return this.pan({\n      startPosition: target,\n      pos: [width / 2 + offset[0], height / 2 + offset[1]]\n    });\n  }\n\n  _getUpdatedState(newProps) {\n    // Update _viewportProps\n    return new OrbitState({...this._viewportProps, ...this._state, ...newProps});\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom, maxRotationX, minRotationX, rotationOrbit} = props;\n\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n    props.rotationX = clamp(props.rotationX, minRotationX, maxRotationX);\n    if (rotationOrbit < -180 || rotationOrbit > 180) {\n      props.rotationOrbit = mod(rotationOrbit + 180, 360) - 180;\n    }\n\n    return props;\n  }\n}\n\nexport default class OrbitController extends Controller {\n  constructor(props) {\n    super(OrbitState, props);\n  }\n\n  get linearTransitionProps() {\n    return ['target', 'zoom', 'rotationX', 'rotationOrbit'];\n  }\n}\n"],"file":"orbit-controller.js"}