{"version":3,"sources":["../../../src/controllers/controller.js"],"names":["NO_TRANSITION_PROPS","transitionDuration","LINEAR_TRANSITION_PROPS","transitionEasing","t","transitionInterruption","TRANSITION_EVENTS","BREAK","DEFAULT_INERTIA","INERTIA_EASING","EVENT_TYPES","WHEEL","PAN","PINCH","TRIPLE_PAN","DOUBLE_TAP","KEYBOARD","Controller","ControllerState","options","controllerState","controllerStateProps","eventManager","transitionManager","TransitionManager","onViewStateChange","_onTransition","bind","onStateChange","_setInteractionState","linearTransitionProps","_transition","transitionInterpolator","LinearInterpolator","transitionProps","_events","_interactionState","isDragging","_customEvents","handleEvent","setProps","eventName","off","finalize","event","makeViewport","_state","eventStartBlocked","_eventStartBlocked","type","_onPanStart","_onPan","_onPanEnd","_onPinchStart","_onPinch","_onPinchEnd","_onTriplePanStart","_onTriplePan","_onTriplePanEnd","_onDoubleTap","_onWheel","_onKeyDown","x","y","offsetCenter","pos","width","height","handled","inside","stopPropagation","srcEvent","Boolean","metaKey","altKey","ctrlKey","shiftKey","timeout","timer","setTimeout","props","dragMode","toggleEvents","_getTransitionProps","processViewStateChange","inertia","scrollZoom","dragPan","dragRotate","doubleClickZoom","touchZoom","touchRotate","keyboard","isInteractive","updateTransition","eventNames","enabled","forEach","on","newControllerState","extraProps","interactionState","viewState","getViewportProps","changed","getState","oldViewState","params","newStates","Object","assign","getCenter","isPointInBounds","alternateMode","isFunctionKeyPressed","rightButton","invertPan","_panMove","updateViewport","_onPanMove","_onPanRotate","_onPanMoveEnd","_onPanRotateEnd","pan","isPanning","velocity","endPos","velocityX","velocityY","panEnd","rotate","isRotating","rotateEnd","preventDefault","speed","smooth","delta","scale","Math","exp","abs","zoom","around","isZooming","rotateStart","deltaX","blockEvents","zoomStart","_startPinchRotation","rotation","_lastPinchEvent","deltaAngleX","z","log2","velocityZ","deltaTime","endScale","pow","zoomEnd","isZoomOut","funcKey","zoomSpeed","moveSpeed","rotateSpeedX","rotateSpeedY","code","zoomOut","zoomIn","rotateLeft","moveLeft","rotateRight","moveRight","rotateUp","moveUp","rotateDown","moveDown","opts","customEvents"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable max-statements, complexity */\nimport TransitionManager, {TRANSITION_EVENTS} from './transition-manager';\nimport LinearInterpolator from '../transitions/linear-interpolator';\n\nconst NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n};\n\nconst LINEAR_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: t => t,\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\n\nconst DEFAULT_INERTIA = 300;\nconst INERTIA_EASING = t => 1 - (1 - t) * (1 - t);\n\nconst EVENT_TYPES = {\n  WHEEL: ['wheel'],\n  PAN: ['panstart', 'panmove', 'panend'],\n  PINCH: ['pinchstart', 'pinchmove', 'pinchend'],\n  TRIPLE_PAN: ['tripanstart', 'tripanmove', 'tripanend'],\n  DOUBLE_TAP: ['doubletap'],\n  KEYBOARD: ['keydown']\n};\n\nexport default class Controller {\n  constructor(ControllerState, options = {}) {\n    this.ControllerState = ControllerState;\n    this.controllerState = null;\n    this.controllerStateProps = null;\n    this.eventManager = null;\n    this.transitionManager = new TransitionManager(ControllerState, {\n      ...options,\n      onViewStateChange: this._onTransition.bind(this),\n      onStateChange: this._setInteractionState.bind(this)\n    });\n\n    const linearTransitionProps = this.linearTransitionProps;\n    this._transition = linearTransitionProps && {\n      ...LINEAR_TRANSITION_PROPS,\n      transitionInterpolator: new LinearInterpolator({\n        transitionProps: linearTransitionProps\n      })\n    };\n\n    this._events = null;\n    this._interactionState = {\n      isDragging: false\n    };\n    this._customEvents = [];\n    this.onViewStateChange = null;\n    this.onStateChange = null;\n\n    this.handleEvent = this.handleEvent.bind(this);\n\n    this.setProps(options);\n  }\n\n  get linearTransitionProps() {\n    return null;\n  }\n\n  set events(customEvents) {\n    this.toggleEvents(this._customEvents, false);\n    this.toggleEvents(customEvents, true);\n    this._customEvents = customEvents;\n    // Make sure default events are not overwritten\n    this.setProps(this.controllerStateProps);\n  }\n\n  finalize() {\n    for (const eventName in this._events) {\n      if (this._events[eventName]) {\n        this.eventManager.off(eventName, this.handleEvent);\n      }\n    }\n    this.transitionManager.finalize();\n  }\n\n  /**\n   * Callback for events\n   * @param {hammer.Event} event\n   */\n  handleEvent(event) {\n    const {ControllerState} = this;\n    this.controllerState = new ControllerState({\n      makeViewport: this.makeViewport,\n      ...this.controllerStateProps,\n      ...this._state\n    });\n    const eventStartBlocked = this._eventStartBlocked;\n\n    switch (event.type) {\n      case 'panstart':\n        return eventStartBlocked ? false : this._onPanStart(event);\n      case 'panmove':\n        return this._onPan(event);\n      case 'panend':\n        return this._onPanEnd(event);\n      case 'pinchstart':\n        return eventStartBlocked ? false : this._onPinchStart(event);\n      case 'pinchmove':\n        return this._onPinch(event);\n      case 'pinchend':\n        return this._onPinchEnd(event);\n      case 'tripanstart':\n        return eventStartBlocked ? false : this._onTriplePanStart(event);\n      case 'tripanmove':\n        return this._onTriplePan(event);\n      case 'tripanend':\n        return this._onTriplePanEnd(event);\n      case 'doubletap':\n        return this._onDoubleTap(event);\n      case 'wheel':\n        return this._onWheel(event);\n      case 'keydown':\n        return this._onKeyDown(event);\n      default:\n        return false;\n    }\n  }\n\n  /* Event utils */\n  // Event object: http://hammerjs.github.io/api/#event-object\n  getCenter(event) {\n    const {x, y} = this.controllerStateProps;\n    const {offsetCenter} = event;\n    return [offsetCenter.x - x, offsetCenter.y - y];\n  }\n\n  isPointInBounds(pos, event) {\n    const {width, height} = this.controllerStateProps;\n    if (event && event.handled) {\n      return false;\n    }\n\n    const inside = pos[0] >= 0 && pos[0] <= width && pos[1] >= 0 && pos[1] <= height;\n    if (inside && event) {\n      event.stopPropagation();\n    }\n    return inside;\n  }\n\n  isFunctionKeyPressed(event) {\n    const {srcEvent} = event;\n    return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);\n  }\n\n  isDragging() {\n    return this._interactionState.isDragging;\n  }\n\n  // When a multi-touch event ends, e.g. pinch, not all pointers are lifted at the same time.\n  // This triggers a brief `pan` event.\n  // Calling this method will temporarily disable *start events to avoid conflicting transitions.\n  blockEvents(timeout) {\n    /* global setTimeout */\n    const timer = setTimeout(() => {\n      if (this._eventStartBlocked === timer) {\n        this._eventStartBlocked = null;\n      }\n    }, timeout);\n    this._eventStartBlocked = timer;\n  }\n\n  /**\n   * Extract interactivity options\n   */\n  setProps(props) {\n    if ('onViewStateChange' in props) {\n      this.onViewStateChange = props.onViewStateChange;\n    }\n    if ('onStateChange' in props) {\n      this.onStateChange = props.onStateChange;\n    }\n    if ('makeViewport' in props) {\n      this.makeViewport = props.makeViewport;\n    }\n    if ('dragMode' in props) {\n      this.dragMode = props.dragMode;\n    }\n    this.controllerStateProps = props;\n\n    if ('eventManager' in props && this.eventManager !== props.eventManager) {\n      // EventManager has changed\n      this.eventManager = props.eventManager;\n      this._events = {};\n      this.toggleEvents(this._customEvents, true);\n    }\n\n    if (!('transitionInterpolator' in props)) {\n      // Add default transition interpolator\n      props.transitionInterpolator = this._getTransitionProps().transitionInterpolator;\n    }\n\n    this.transitionManager.processViewStateChange(props);\n\n    let {inertia} = props;\n    if (inertia === true) {\n      inertia = DEFAULT_INERTIA;\n    }\n    this.inertia = inertia;\n\n    // TODO - make sure these are not reset on every setProps\n    const {\n      scrollZoom = true,\n      dragPan = true,\n      dragRotate = true,\n      doubleClickZoom = true,\n      touchZoom = true,\n      touchRotate = false,\n      keyboard = true\n    } = props;\n\n    // Register/unregister events\n    const isInteractive = Boolean(this.onViewStateChange);\n    this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && scrollZoom);\n    this.toggleEvents(EVENT_TYPES.PAN, isInteractive && (dragPan || dragRotate));\n    this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && (touchZoom || touchRotate));\n    this.toggleEvents(EVENT_TYPES.TRIPLE_PAN, isInteractive && touchRotate);\n    this.toggleEvents(EVENT_TYPES.DOUBLE_TAP, isInteractive && doubleClickZoom);\n    this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && keyboard);\n\n    // Interaction toggles\n    this.scrollZoom = scrollZoom;\n    this.dragPan = dragPan;\n    this.dragRotate = dragRotate;\n    this.doubleClickZoom = doubleClickZoom;\n    this.touchZoom = touchZoom;\n    this.touchRotate = touchRotate;\n    this.keyboard = keyboard;\n  }\n\n  updateTransition() {\n    this.transitionManager.updateTransition();\n  }\n\n  toggleEvents(eventNames, enabled) {\n    if (this.eventManager) {\n      eventNames.forEach(eventName => {\n        if (this._events[eventName] !== enabled) {\n          this._events[eventName] = enabled;\n          if (enabled) {\n            this.eventManager.on(eventName, this.handleEvent);\n          } else {\n            this.eventManager.off(eventName, this.handleEvent);\n          }\n        }\n      });\n    }\n  }\n\n  // Private Methods\n\n  /* Callback util */\n  // formats map state and invokes callback function\n  updateViewport(newControllerState, extraProps = {}, interactionState = {}) {\n    const viewState = {...newControllerState.getViewportProps(), ...extraProps};\n\n    // TODO - to restore diffing, we need to include interactionState\n    const changed = this.controllerState !== newControllerState;\n    // const oldViewState = this.controllerState.getViewportProps();\n    // const changed = Object.keys(viewState).some(key => oldViewState[key] !== viewState[key]);\n\n    this._state = newControllerState.getState();\n    this._setInteractionState(interactionState);\n\n    if (changed) {\n      const oldViewState = this.controllerState ? this.controllerState.getViewportProps() : null;\n      if (this.onViewStateChange) {\n        this.onViewStateChange({viewState, interactionState: this._interactionState, oldViewState});\n      }\n    }\n  }\n\n  _onTransition(params) {\n    if (this.onViewStateChange) {\n      params.interactionState = this._interactionState;\n      this.onViewStateChange(params);\n    }\n  }\n\n  _setInteractionState(newStates) {\n    Object.assign(this._interactionState, newStates);\n    if (this.onStateChange) {\n      this.onStateChange(this._interactionState);\n    }\n  }\n\n  /* Event handlers */\n  // Default handler for the `panstart` event.\n  _onPanStart(event) {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n    let alternateMode = this.isFunctionKeyPressed(event) || event.rightButton;\n    if (this.invertPan || this.dragMode === 'pan') {\n      // invertPan is replaced by props.dragMode, keeping for backward compatibility\n      alternateMode = !alternateMode;\n    }\n    const newControllerState = this.controllerState[alternateMode ? 'panStart' : 'rotateStart']({\n      pos\n    });\n    this._panMove = alternateMode;\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `panmove` and `panend` event.\n  _onPan(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    return this._panMove ? this._onPanMove(event) : this._onPanRotate(event);\n  }\n\n  _onPanEnd(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    return this._panMove ? this._onPanMoveEnd(event) : this._onPanRotateEnd(event);\n  }\n\n  // Default handler for panning to move.\n  // Called by `_onPan` when panning without function key pressed.\n  _onPanMove(event) {\n    if (!this.dragPan) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    const newControllerState = this.controllerState.pan({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: true\n    });\n    return true;\n  }\n\n  _onPanMoveEnd(event) {\n    const {inertia} = this;\n    if (this.dragPan && inertia && event.velocity) {\n      const pos = this.getCenter(event);\n      const endPos = [\n        pos[0] + (event.velocityX * inertia) / 2,\n        pos[1] + (event.velocityY * inertia) / 2\n      ];\n      const newControllerState = this.controllerState.pan({pos: endPos}).panEnd();\n      this.updateViewport(\n        newControllerState,\n        {\n          ...this._getTransitionProps(),\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        },\n        {\n          isDragging: false,\n          isPanning: true\n        }\n      );\n    } else {\n      const newControllerState = this.controllerState.panEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isPanning: false\n      });\n    }\n    return true;\n  }\n\n  // Default handler for panning to rotate.\n  // Called by `_onPan` when panning with function key pressed.\n  _onPanRotate(event) {\n    if (!this.dragRotate) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n    const newControllerState = this.controllerState.rotate({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isRotating: true\n    });\n    return true;\n  }\n\n  _onPanRotateEnd(event) {\n    const {inertia} = this;\n    if (this.dragRotate && inertia && event.velocity) {\n      const pos = this.getCenter(event);\n      const endPos = [\n        pos[0] + (event.velocityX * inertia) / 2,\n        pos[1] + (event.velocityY * inertia) / 2\n      ];\n      const newControllerState = this.controllerState.rotate({pos: endPos}).rotateEnd();\n      this.updateViewport(\n        newControllerState,\n        {\n          ...this._getTransitionProps(),\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        },\n        {\n          isDragging: false,\n          isRotating: true\n        }\n      );\n    } else {\n      const newControllerState = this.controllerState.rotateEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isRotating: false\n      });\n    }\n    return true;\n  }\n\n  // Default handler for the `wheel` event.\n  _onWheel(event) {\n    if (!this.scrollZoom) {\n      return false;\n    }\n    event.preventDefault();\n\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const {speed = 0.01, smooth = false} = this.scrollZoom;\n    const {delta} = event;\n\n    // Map wheel delta to relative scale\n    let scale = 2 / (1 + Math.exp(-Math.abs(delta * speed)));\n    if (delta < 0 && scale !== 0) {\n      scale = 1 / scale;\n    }\n\n    const newControllerState = this.controllerState.zoom({pos, scale});\n    this.updateViewport(\n      newControllerState,\n      {...this._getTransitionProps({around: pos}), transitionDuration: smooth ? 250 : 1},\n      {\n        isZooming: true,\n        isPanning: true\n      }\n    );\n    return true;\n  }\n\n  _onTriplePanStart(event) {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n    const newControllerState = this.controllerState.rotateStart({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  _onTriplePan(event) {\n    if (!this.touchRotate) {\n      return false;\n    }\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n    pos[0] -= event.deltaX;\n\n    const newControllerState = this.controllerState.rotate({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isRotating: true\n    });\n    return true;\n  }\n\n  _onTriplePanEnd(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    const {inertia} = this;\n    if (this.touchRotate && inertia && event.velocityY) {\n      const pos = this.getCenter(event);\n      const endPos = [pos[0], (pos[1] += (event.velocityY * inertia) / 2)];\n      const newControllerState = this.controllerState.rotate({pos: endPos});\n      this.updateViewport(\n        newControllerState,\n        {\n          ...this._getTransitionProps(),\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        },\n        {\n          isDragging: false,\n          isRotating: true\n        }\n      );\n      this.blockEvents(inertia);\n    } else {\n      const newControllerState = this.controllerState.rotateEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isRotating: false\n      });\n    }\n    return true;\n  }\n\n  // Default handler for the `pinchstart` event.\n  _onPinchStart(event) {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const newControllerState = this.controllerState.zoomStart({pos}).rotateStart({pos});\n    // hack - hammer's `rotation` field doesn't seem to produce the correct angle\n    this._startPinchRotation = event.rotation;\n    this._lastPinchEvent = event;\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `pinchmove` and `pinchend` events.\n  _onPinch(event) {\n    if (!this.touchZoom && !this.touchRotate) {\n      return false;\n    }\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    let newControllerState = this.controllerState;\n    if (this.touchZoom) {\n      const {scale} = event;\n      const pos = this.getCenter(event);\n      newControllerState = newControllerState.zoom({pos, scale});\n    }\n    if (this.touchRotate) {\n      const {rotation} = event;\n      newControllerState = newControllerState.rotate({\n        deltaAngleX: this._startPinchRotation - rotation\n      });\n    }\n\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: this.touchZoom,\n      isZooming: this.touchZoom,\n      isRotating: this.touchRotate\n    });\n    this._lastPinchEvent = event;\n    return true;\n  }\n\n  _onPinchEnd(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    const {inertia, _lastPinchEvent} = this;\n    if (this.touchZoom && inertia && _lastPinchEvent && event.scale !== _lastPinchEvent.scale) {\n      const pos = this.getCenter(event);\n      let newControllerState = this.controllerState.rotateEnd();\n      const z = Math.log2(event.scale);\n      const velocityZ =\n        (z - Math.log2(_lastPinchEvent.scale)) / (event.deltaTime - _lastPinchEvent.deltaTime);\n      const endScale = Math.pow(2, z + (velocityZ * inertia) / 2);\n      newControllerState = newControllerState.zoom({pos, scale: endScale}).zoomEnd();\n\n      this.updateViewport(\n        newControllerState,\n        {\n          ...this._getTransitionProps({around: pos}),\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        },\n        {\n          isDragging: false,\n          isPanning: this.touchZoom,\n          isZooming: this.touchZoom,\n          isRotating: false\n        }\n      );\n      this.blockEvents(inertia);\n    } else {\n      const newControllerState = this.controllerState.zoomEnd().rotateEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isPanning: false,\n        isZooming: false,\n        isRotating: false\n      });\n    }\n    this._startPinchRotation = null;\n    this._lastPinchEvent = null;\n    return true;\n  }\n\n  // Default handler for the `doubletap` event.\n  _onDoubleTap(event) {\n    if (!this.doubleClickZoom) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const isZoomOut = this.isFunctionKeyPressed(event);\n\n    const newControllerState = this.controllerState.zoom({pos, scale: isZoomOut ? 0.5 : 2});\n    this.updateViewport(newControllerState, this._getTransitionProps({around: pos}), {\n      isZooming: true,\n      isPanning: true\n    });\n    this.blockEvents(100);\n    return true;\n  }\n\n  // Default handler for the `keydown` event\n  _onKeyDown(event) {\n    if (!this.keyboard) {\n      return false;\n    }\n    const funcKey = this.isFunctionKeyPressed(event);\n    const {zoomSpeed, moveSpeed, rotateSpeedX, rotateSpeedY} = this.keyboard;\n    const {controllerState} = this;\n    let newControllerState;\n    const interactionState = {};\n\n    switch (event.srcEvent.code) {\n      case 'Minus':\n        newControllerState = funcKey\n          ? controllerState.zoomOut(zoomSpeed).zoomOut(zoomSpeed)\n          : controllerState.zoomOut(zoomSpeed);\n        interactionState.isZooming = true;\n        break;\n      case 'Equal':\n        newControllerState = funcKey\n          ? controllerState.zoomIn(zoomSpeed).zoomIn(zoomSpeed)\n          : controllerState.zoomIn(zoomSpeed);\n        interactionState.isZooming = true;\n        break;\n      case 'ArrowLeft':\n        if (funcKey) {\n          newControllerState = controllerState.rotateLeft(rotateSpeedX);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveLeft(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      case 'ArrowRight':\n        if (funcKey) {\n          newControllerState = controllerState.rotateRight(rotateSpeedX);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveRight(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      case 'ArrowUp':\n        if (funcKey) {\n          newControllerState = controllerState.rotateUp(rotateSpeedY);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveUp(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      case 'ArrowDown':\n        if (funcKey) {\n          newControllerState = controllerState.rotateDown(rotateSpeedY);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveDown(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      default:\n        return false;\n    }\n    this.updateViewport(newControllerState, this._getTransitionProps(), interactionState);\n    return true;\n  }\n\n  _getTransitionProps(opts) {\n    const {_transition} = this;\n\n    if (!_transition) {\n      return NO_TRANSITION_PROPS;\n    }\n\n    // Enables Transitions on double-tap and key-down events.\n    return opts\n      ? {\n          ..._transition,\n          transitionInterpolator: new LinearInterpolator({\n            ...opts,\n            transitionProps: this.linearTransitionProps,\n            makeViewport: this.controllerState.makeViewport\n          })\n        }\n      : _transition;\n  }\n}\n"],"file":"controller.js"}