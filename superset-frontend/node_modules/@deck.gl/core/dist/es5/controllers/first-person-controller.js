"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _controller = _interopRequireDefault(require("./controller"));

var _viewState = _interopRequireDefault(require("./view-state"));

var _mathUtils = require("../utils/math-utils");

var _math = require("math.gl");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var MOVEMENT_SPEED = 20;
var DEFAULT_STATE = {
  position: [0, 0, 0],
  pitch: 0,
  bearing: 0,
  maxPitch: 90,
  minPitch: -90
};

var FirstPersonState = function (_ViewState) {
  (0, _inherits2.default)(FirstPersonState, _ViewState);

  var _super = _createSuper(FirstPersonState);

  function FirstPersonState(_ref) {
    var _this;

    var width = _ref.width,
        height = _ref.height,
        _ref$position = _ref.position,
        position = _ref$position === void 0 ? DEFAULT_STATE.position : _ref$position,
        _ref$bearing = _ref.bearing,
        bearing = _ref$bearing === void 0 ? DEFAULT_STATE.bearing : _ref$bearing,
        _ref$pitch = _ref.pitch,
        pitch = _ref$pitch === void 0 ? DEFAULT_STATE.pitch : _ref$pitch,
        longitude = _ref.longitude,
        latitude = _ref.latitude,
        _ref$maxPitch = _ref.maxPitch,
        maxPitch = _ref$maxPitch === void 0 ? DEFAULT_STATE.maxPitch : _ref$maxPitch,
        _ref$minPitch = _ref.minPitch,
        minPitch = _ref$minPitch === void 0 ? DEFAULT_STATE.minPitch : _ref$minPitch,
        startRotatePos = _ref.startRotatePos,
        startBearing = _ref.startBearing,
        startPitch = _ref.startPitch,
        startZoomPosition = _ref.startZoomPosition,
        startZoom = _ref.startZoom;
    (0, _classCallCheck2.default)(this, FirstPersonState);
    _this = _super.call(this, {
      width: width,
      height: height,
      position: position,
      bearing: bearing,
      pitch: pitch,
      longitude: longitude,
      latitude: latitude,
      maxPitch: maxPitch,
      minPitch: minPitch
    });
    _this._state = {
      startRotatePos: startRotatePos,
      startBearing: startBearing,
      startPitch: startPitch,
      startZoomPosition: startZoomPosition,
      startZoom: startZoom
    };
    return _this;
  }

  (0, _createClass2.default)(FirstPersonState, [{
    key: "getDirection",
    value: function getDirection() {
      var use2D = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var spherical = new _math._SphericalCoordinates({
        bearing: this._viewportProps.bearing,
        pitch: use2D ? 90 : 90 + this._viewportProps.pitch
      });
      var direction = spherical.toVector3().normalize();
      return direction;
    }
  }, {
    key: "panStart",
    value: function panStart() {
      return this;
    }
  }, {
    key: "pan",
    value: function pan() {
      return this;
    }
  }, {
    key: "panEnd",
    value: function panEnd() {
      return this;
    }
  }, {
    key: "rotateStart",
    value: function rotateStart(_ref2) {
      var pos = _ref2.pos;
      return this._getUpdatedState({
        startRotatePos: pos,
        startBearing: this._viewportProps.bearing,
        startPitch: this._viewportProps.pitch
      });
    }
  }, {
    key: "rotate",
    value: function rotate(_ref3) {
      var pos = _ref3.pos,
          _ref3$deltaAngleX = _ref3.deltaAngleX,
          deltaAngleX = _ref3$deltaAngleX === void 0 ? 0 : _ref3$deltaAngleX,
          _ref3$deltaAngleY = _ref3.deltaAngleY,
          deltaAngleY = _ref3$deltaAngleY === void 0 ? 0 : _ref3$deltaAngleY;
      var _this$_state = this._state,
          startRotatePos = _this$_state.startRotatePos,
          startBearing = _this$_state.startBearing,
          startPitch = _this$_state.startPitch;
      var _this$_viewportProps = this._viewportProps,
          width = _this$_viewportProps.width,
          height = _this$_viewportProps.height;

      if (!startRotatePos || !Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {
        return this;
      }

      var newRotation;

      if (pos) {
        var deltaScaleX = (pos[0] - startRotatePos[0]) / width;
        var deltaScaleY = (pos[1] - startRotatePos[1]) / height;
        newRotation = {
          bearing: startBearing - deltaScaleX * 180,
          pitch: startPitch - deltaScaleY * 90
        };
      } else {
        newRotation = {
          bearing: startBearing - deltaAngleX,
          pitch: startPitch - deltaAngleY
        };
      }

      return this._getUpdatedState(newRotation);
    }
  }, {
    key: "rotateEnd",
    value: function rotateEnd() {
      return this._getUpdatedState({
        startRotatePos: null,
        startBearing: null,
        startPitch: null
      });
    }
  }, {
    key: "zoomStart",
    value: function zoomStart() {
      return this._getUpdatedState({
        startZoomPosition: this._viewportProps.position,
        startZoom: this._viewportProps.zoom
      });
    }
  }, {
    key: "zoom",
    value: function zoom(_ref4) {
      var scale = _ref4.scale;
      var startZoomPosition = this._state.startZoomPosition;

      if (!startZoomPosition) {
        startZoomPosition = this._viewportProps.position;
      }

      var direction = this.getDirection();
      return this._move(direction, Math.log2(scale) * MOVEMENT_SPEED, startZoomPosition);
    }
  }, {
    key: "zoomEnd",
    value: function zoomEnd() {
      return this._getUpdatedState({
        startZoomPosition: null,
        startZoom: null
      });
    }
  }, {
    key: "moveLeft",
    value: function moveLeft() {
      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : MOVEMENT_SPEED;
      var direction = this.getDirection(true);
      return this._move(direction.rotateZ({
        radians: Math.PI / 2
      }), speed);
    }
  }, {
    key: "moveRight",
    value: function moveRight() {
      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : MOVEMENT_SPEED;
      var direction = this.getDirection(true);
      return this._move(direction.rotateZ({
        radians: -Math.PI / 2
      }), speed);
    }
  }, {
    key: "moveUp",
    value: function moveUp() {
      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : MOVEMENT_SPEED;
      var direction = this.getDirection(true);
      return this._move(direction, speed);
    }
  }, {
    key: "moveDown",
    value: function moveDown() {
      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : MOVEMENT_SPEED;
      var direction = this.getDirection(true);
      return this._move(direction.negate(), speed);
    }
  }, {
    key: "rotateLeft",
    value: function rotateLeft() {
      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 15;
      return this._getUpdatedState({
        bearing: this._viewportProps.bearing - speed
      });
    }
  }, {
    key: "rotateRight",
    value: function rotateRight() {
      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 15;
      return this._getUpdatedState({
        bearing: this._viewportProps.bearing + speed
      });
    }
  }, {
    key: "rotateUp",
    value: function rotateUp() {
      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;
      return this._getUpdatedState({
        pitch: this._viewportProps.pitch + speed
      });
    }
  }, {
    key: "rotateDown",
    value: function rotateDown() {
      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;
      return this._getUpdatedState({
        pitch: this._viewportProps.pitch - speed
      });
    }
  }, {
    key: "zoomIn",
    value: function zoomIn() {
      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;
      return this.zoom({
        scale: speed
      });
    }
  }, {
    key: "zoomOut",
    value: function zoomOut() {
      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;
      return this.zoom({
        scale: 1 / speed
      });
    }
  }, {
    key: "shortestPathFrom",
    value: function shortestPathFrom(viewState) {
      var fromProps = viewState.getViewportProps();

      var props = _objectSpread({}, this._viewportProps);

      var bearing = props.bearing,
          longitude = props.longitude;

      if (Math.abs(bearing - fromProps.bearing) > 180) {
        props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;
      }

      if (Math.abs(longitude - fromProps.longitude) > 180) {
        props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;
      }

      return props;
    }
  }, {
    key: "_move",
    value: function _move(direction, speed) {
      var fromPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this._viewportProps.position;
      var delta = direction.scale(speed);
      return this._getUpdatedState({
        position: new _math.Vector3(fromPosition).add(delta)
      });
    }
  }, {
    key: "_getUpdatedState",
    value: function _getUpdatedState(newProps) {
      return new FirstPersonState(_objectSpread(_objectSpread(_objectSpread({}, this._viewportProps), this._state), newProps));
    }
  }, {
    key: "_applyConstraints",
    value: function _applyConstraints(props) {
      var pitch = props.pitch,
          maxPitch = props.maxPitch,
          minPitch = props.minPitch,
          longitude = props.longitude,
          bearing = props.bearing;
      props.pitch = (0, _math.clamp)(pitch, minPitch, maxPitch);

      if (longitude < -180 || longitude > 180) {
        props.longitude = (0, _mathUtils.mod)(longitude + 180, 360) - 180;
      }

      if (bearing < -180 || bearing > 180) {
        props.bearing = (0, _mathUtils.mod)(bearing + 180, 360) - 180;
      }

      return props;
    }
  }]);
  return FirstPersonState;
}(_viewState.default);

var FirstPersonController = function (_Controller) {
  (0, _inherits2.default)(FirstPersonController, _Controller);

  var _super2 = _createSuper(FirstPersonController);

  function FirstPersonController(props) {
    (0, _classCallCheck2.default)(this, FirstPersonController);
    return _super2.call(this, FirstPersonState, props);
  }

  (0, _createClass2.default)(FirstPersonController, [{
    key: "linearTransitionProps",
    get: function get() {
      return ['position', 'pitch', 'bearing'];
    }
  }]);
  return FirstPersonController;
}(_controller.default);

exports.default = FirstPersonController;
//# sourceMappingURL=first-person-controller.js.map