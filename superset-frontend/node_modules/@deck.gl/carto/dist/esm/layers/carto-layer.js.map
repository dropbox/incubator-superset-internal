{"version":3,"sources":["../../../src/layers/carto-layer.js"],"names":["CompositeLayer","log","MVTLayer","GeoJsonLayer","getData","getDataV2","API_VERSIONS","MAP_TYPES","getDefaultCredentials","defaultProps","data","type","onDataLoad","value","compare","onDataError","optional","credentials","connection","CartoLayer","initializeState","state","apiVersion","isLoaded","getSubLayers","length","_checkProps","props","localCreds","assert","Object","values","includes","V1","V2","QUERY","TILESET","V3","updateState","oldProps","changeFlags","shouldUpdateData","dataChanged","JSON","stringify","setState","_updateData","source","localConfig","err","renderLayers","updateTriggers","layer","getSubLayerProps","id","layerName"],"mappings":"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","sourcesContent":["import {CompositeLayer, log} from '@deck.gl/core';\nimport {MVTLayer} from '@deck.gl/geo-layers';\nimport {GeoJsonLayer} from '@deck.gl/layers';\nimport {getData, getDataV2, API_VERSIONS} from '../api';\nimport {MAP_TYPES} from '../api/maps-api-common';\nimport {getDefaultCredentials} from '../config';\n\nconst defaultProps = {\n  // (String, required): data resource to load. table name, sql query or tileset name.\n  data: null,\n  // (Enum (MAP_TYPES), required)\n  type: null,\n  onDataLoad: {type: 'function', value: data => {}, compare: false},\n  onDataError: {type: 'function', value: null, compare: false, optional: true},\n\n  // override carto credentials for the layer, set to null to read from default\n  credentials: null,\n\n  /*********************/\n  /* API v3 PARAMETERS */\n  /**********************/\n  // (String, required): connection name at CARTO platform\n  connection: null\n};\n\nexport default class CartoLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      data: null,\n      apiVersion: null\n    };\n  }\n\n  get isLoaded() {\n    return this.getSubLayers().length > 0 && super.isLoaded;\n  }\n\n  _checkProps(props) {\n    const {type, credentials, connection} = props;\n    const localCreds = {...getDefaultCredentials(), ...credentials};\n    const {apiVersion} = localCreds;\n\n    log.assert(\n      Object.values(API_VERSIONS).includes(apiVersion),\n      `Invalid apiVersion ${apiVersion}. Use API_VERSIONS enum.`\n    );\n\n    if (apiVersion === API_VERSIONS.V1 || apiVersion === API_VERSIONS.V2) {\n      log.assert(\n        type === MAP_TYPES.QUERY || type === MAP_TYPES.TILESET,\n        `Invalid type ${type}. Use type MAP_TYPES.QUERY or MAP_TYPES.TILESET for apiVersion ${apiVersion}`\n      );\n      log.assert(!connection, `Connection prop is not supported for apiVersion ${apiVersion}`);\n    } else if (apiVersion === API_VERSIONS.V3) {\n      log.assert(connection, 'Missing mandatory connection parameter');\n      log.assert(\n        Object.values(MAP_TYPES).includes(type),\n        `Invalid type ${type}. Use MAP_TYPES enum.`\n      );\n    }\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    this._checkProps(props);\n    const shouldUpdateData =\n      changeFlags.dataChanged ||\n      props.connection !== oldProps.connection ||\n      props.type !== oldProps.type ||\n      JSON.stringify(props.credentials) !== JSON.stringify(oldProps.credentials);\n\n    if (shouldUpdateData) {\n      this.setState({data: null, apiVersion: null});\n      this._updateData();\n    }\n  }\n\n  async _updateData() {\n    try {\n      const {type, data: source, connection, credentials} = this.props;\n      const localConfig = {...getDefaultCredentials(), ...credentials};\n      const {apiVersion} = localConfig;\n\n      let data;\n\n      if (apiVersion === API_VERSIONS.V3) {\n        data = await getData({\n          type,\n          source,\n          connection,\n          credentials\n        });\n      } else if (apiVersion === API_VERSIONS.V1 || apiVersion === API_VERSIONS.V2) {\n        data = await getDataV2({type, source, credentials});\n      } else {\n        log.assert(`Unknow apiVersion ${apiVersion}. Use API_VERSIONS enum.`);\n      }\n\n      this.setState({data, apiVersion});\n      this.props.onDataLoad(data);\n    } catch (err) {\n      if (this.props.onDataError) {\n        this.props.onDataError(err);\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  renderLayers() {\n    const {data, apiVersion} = this.state;\n    const {type} = this.props;\n\n    if (!data) return null;\n\n    const {updateTriggers} = this.props;\n\n    let layer;\n\n    if (\n      apiVersion === API_VERSIONS.V1 ||\n      apiVersion === API_VERSIONS.V2 ||\n      type === MAP_TYPES.TILESET\n    ) {\n      layer = MVTLayer;\n    } else {\n      layer = GeoJsonLayer;\n    }\n\n    const props = {...this.props};\n    delete props.data;\n\n    // eslint-disable-next-line new-cap\n    return new layer(\n      props,\n      this.getSubLayerProps({\n        id: `carto-${layer.layerName}`,\n        data,\n        updateTriggers\n      })\n    );\n  }\n}\n\nCartoLayer.layerName = 'CartoLayer';\nCartoLayer.defaultProps = defaultProps;\n"],"file":"carto-layer.js"}