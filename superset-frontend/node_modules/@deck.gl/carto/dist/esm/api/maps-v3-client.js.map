{"version":3,"sources":["../../../src/api/maps-v3-client.js"],"names":["getDefaultCredentials","buildMapsUrlFromBase","API_VERSIONS","encodeParameter","FORMATS","MAP_TYPES","log","MAX_GET_LENGTH","request","method","url","format","accessToken","body","response","headers","Accept","Authorization","fetch","error","Error","NDJSON","json","ok","dealWithError","rows","status","getParameters","type","source","encodedClient","parameters","sourceName","QUERY","push","join","mapInstantiation","connection","credentials","baseUrl","mapsUrl","length","JSON","stringify","q","client","getUrlFromMetadata","metadata","m","getData","localCreds","assert","apiVersion","V3","apiBaseUrl","mapFormat","prioritizedFormats","GEOJSON","TILEJSON","f"],"mappings":"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","sourcesContent":["/**\n * Maps API Client for Carto 3\n */\nimport {getDefaultCredentials, buildMapsUrlFromBase} from '../config';\nimport {API_VERSIONS, encodeParameter, FORMATS, MAP_TYPES} from './maps-api-common';\nimport {log} from '@deck.gl/core';\n\nconst MAX_GET_LENGTH = 2048;\n\n/**\n * Request against Maps API\n */\nasync function request({method, url, format, accessToken, body}) {\n  let response;\n\n  const headers = {\n    Accept: 'application/json'\n  };\n\n  if (accessToken) {\n    headers.Authorization = `Bearer ${accessToken}`;\n  }\n\n  if (method === 'POST') {\n    headers['Content-Type'] = 'application/json';\n  }\n\n  try {\n    /* global fetch */\n    /* eslint no-undef: \"error\" */\n    response = await fetch(url, {\n      method,\n      headers,\n      body\n    });\n  } catch (error) {\n    throw new Error(`Failed to connect to Maps API: ${error}`);\n  }\n\n  if (format === FORMATS.NDJSON) {\n    return response;\n  }\n\n  const json = await response.json();\n\n  if (!response.ok) {\n    dealWithError({response, error: json.error});\n  }\n\n  return json.rows ? json.rows : json;\n}\n\n/**\n * Display proper message from Maps API error\n */\nfunction dealWithError({response, error}) {\n  switch (response.status) {\n    case 401:\n    case 403:\n      throw new Error(`Unauthorized access to Maps API`);\n\n    default:\n      throw new Error(error);\n  }\n}\n\n/**\n * Build a URL with all required parameters\n */\nfunction getParameters({type, source}) {\n  const encodedClient = encodeParameter('client', 'deck-gl-carto');\n  const parameters = [encodedClient];\n\n  const sourceName = type === MAP_TYPES.QUERY ? 'q' : 'name';\n  parameters.push(encodeParameter(sourceName, source));\n\n  return parameters.join('&');\n}\n\nexport async function mapInstantiation({type, source, connection, credentials}) {\n  const baseUrl = `${credentials.mapsUrl}/${connection}/${type}`;\n  const url = `${baseUrl}?${getParameters({type, source})}`;\n  const {accessToken} = credentials;\n\n  const format = 'json';\n\n  if (url.length > MAX_GET_LENGTH && type === MAP_TYPES.QUERY) {\n    // need to be a POST request\n    const body = JSON.stringify({\n      q: source,\n      client: 'deck-gl-carto'\n    });\n    return await request({method: 'POST', url: baseUrl, format, accessToken, body});\n  }\n\n  return await request({url, format, accessToken});\n}\n\nfunction getUrlFromMetadata(metadata, format) {\n  const m = metadata[format];\n\n  if (m && !m.error && m.url) {\n    return m.url[0];\n  }\n\n  return null;\n}\n\nexport async function getData({type, source, connection, credentials, format}) {\n  const localCreds = {...getDefaultCredentials(), ...credentials};\n\n  log.assert(connection, 'Must define connection');\n  log.assert(type, 'Must define a type');\n  log.assert(source, 'Must define a source');\n\n  log.assert(localCreds.apiVersion === API_VERSIONS.V3, 'Method only available for v3');\n  log.assert(localCreds.apiBaseUrl, 'Must define apiBaseUrl');\n  log.assert(localCreds.accessToken, 'Must define an accessToken');\n  log.assert(localCreds.mapsUrl, 'mapsUrl cannot be undefined');\n\n  if (!localCreds.mapsUrl) {\n    localCreds.mapsUrl = buildMapsUrlFromBase(localCreds.apiBaseUrl);\n  }\n\n  const metadata = await mapInstantiation({type, source, connection, credentials: localCreds});\n  let url;\n  let mapFormat;\n\n  if (format) {\n    mapFormat = format;\n    url = getUrlFromMetadata(metadata, format);\n    log.assert(url, `Format ${format} not available`);\n  } else {\n    // guess map format\n    const prioritizedFormats = [FORMATS.GEOJSON, FORMATS.NDJSON, FORMATS.TILEJSON];\n    for (const f of prioritizedFormats) {\n      url = getUrlFromMetadata(metadata, f);\n      if (url) {\n        mapFormat = f;\n        break;\n      }\n    }\n  }\n\n  const {accessToken} = localCreds;\n\n  return await request({url, format: mapFormat, accessToken});\n}\n"],"file":"maps-v3-client.js"}