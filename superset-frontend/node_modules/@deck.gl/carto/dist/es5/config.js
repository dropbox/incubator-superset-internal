"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setDefaultCredentials = setDefaultCredentials;
exports.getDefaultCredentials = getDefaultCredentials;
exports.buildMapsUrlFromBase = buildMapsUrlFromBase;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _mapsApiCommon = require("./api/maps-api-common");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var defaultClassicCredentials = {
  username: 'public',
  apiKey: 'default_public',
  region: 'us',
  mapsUrl: null
};
var defaultCloudNativeCredentials = {
  accessToken: null,
  apiBaseUrl: null,
  mapsUrl: null
};
var credentials = {};
setDefaultCredentials({});

function setDefaultCredentials(opts) {
  var apiVersion = opts.apiVersion || _mapsApiCommon.API_VERSIONS.V2;

  switch (apiVersion) {
    case _mapsApiCommon.API_VERSIONS.V1:
      opts.mapsUrl = opts.mapsUrl || 'https://{user}.carto.com/api/v1/map';
      credentials = _objectSpread(_objectSpread({
        apiVersion: apiVersion
      }, defaultClassicCredentials), opts);
      break;

    case _mapsApiCommon.API_VERSIONS.V2:
      opts.mapsUrl = opts.mapsUrl || 'https://maps-api-v2.{region}.carto.com/user/{user}';
      credentials = _objectSpread(_objectSpread({
        apiVersion: apiVersion
      }, defaultClassicCredentials), opts);
      break;

    case _mapsApiCommon.API_VERSIONS.V3:
      if (!opts.apiBaseUrl) {
        throw new Error("API version ".concat(_mapsApiCommon.API_VERSIONS.V3, " requires to define apiBaseUrl at credentials. Go to https://app.carto.com to get your apiBaseUrl."));
      }

      var apiBaseUrl = opts.apiBaseUrl || defaultCloudNativeCredentials.apiBaseUrl;
      opts.mapsUrl = opts.mapsUrl || buildMapsUrlFromBase(apiBaseUrl);
      credentials = _objectSpread(_objectSpread({
        apiVersion: apiVersion
      }, defaultCloudNativeCredentials), opts);
      break;

    default:
      throw new Error("Invalid API version ".concat(apiVersion, ". Use API_VERSIONS enum."));
  }
}

function getDefaultCredentials() {
  return credentials;
}

function buildMapsUrlFromBase(apiBaseUrl) {
  var suffix = '/v3/maps';

  if (apiBaseUrl.endsWith('/')) {
    suffix = suffix.substring(1);
  }

  return "".concat(apiBaseUrl).concat(suffix);
}
//# sourceMappingURL=config.js.map