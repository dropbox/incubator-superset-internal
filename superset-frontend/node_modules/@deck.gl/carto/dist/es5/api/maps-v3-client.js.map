{"version":3,"sources":["../../../src/api/maps-v3-client.js"],"names":["MAX_GET_LENGTH","request","method","url","format","accessToken","body","headers","Accept","Authorization","fetch","response","Error","FORMATS","NDJSON","json","ok","dealWithError","error","rows","status","getParameters","type","source","encodedClient","parameters","sourceName","MAP_TYPES","QUERY","push","join","mapInstantiation","connection","credentials","baseUrl","mapsUrl","length","JSON","stringify","q","client","getUrlFromMetadata","metadata","m","getData","localCreds","log","assert","apiVersion","API_VERSIONS","V3","apiBaseUrl","mapFormat","prioritizedFormats","GEOJSON","TILEJSON","f"],"mappings":"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","sourcesContent":["/**\n * Maps API Client for Carto 3\n */\nimport {getDefaultCredentials, buildMapsUrlFromBase} from '../config';\nimport {API_VERSIONS, encodeParameter, FORMATS, MAP_TYPES} from './maps-api-common';\nimport {log} from '@deck.gl/core';\n\nconst MAX_GET_LENGTH = 2048;\n\n/**\n * Request against Maps API\n */\nasync function request({method, url, format, accessToken, body}) {\n  let response;\n\n  const headers = {\n    Accept: 'application/json'\n  };\n\n  if (accessToken) {\n    headers.Authorization = `Bearer ${accessToken}`;\n  }\n\n  if (method === 'POST') {\n    headers['Content-Type'] = 'application/json';\n  }\n\n  try {\n    /* global fetch */\n    /* eslint no-undef: \"error\" */\n    response = await fetch(url, {\n      method,\n      headers,\n      body\n    });\n  } catch (error) {\n    throw new Error(`Failed to connect to Maps API: ${error}`);\n  }\n\n  if (format === FORMATS.NDJSON) {\n    return response;\n  }\n\n  const json = await response.json();\n\n  if (!response.ok) {\n    dealWithError({response, error: json.error});\n  }\n\n  return json.rows ? json.rows : json;\n}\n\n/**\n * Display proper message from Maps API error\n */\nfunction dealWithError({response, error}) {\n  switch (response.status) {\n    case 401:\n    case 403:\n      throw new Error(`Unauthorized access to Maps API`);\n\n    default:\n      throw new Error(error);\n  }\n}\n\n/**\n * Build a URL with all required parameters\n */\nfunction getParameters({type, source}) {\n  const encodedClient = encodeParameter('client', 'deck-gl-carto');\n  const parameters = [encodedClient];\n\n  const sourceName = type === MAP_TYPES.QUERY ? 'q' : 'name';\n  parameters.push(encodeParameter(sourceName, source));\n\n  return parameters.join('&');\n}\n\nexport async function mapInstantiation({type, source, connection, credentials}) {\n  const baseUrl = `${credentials.mapsUrl}/${connection}/${type}`;\n  const url = `${baseUrl}?${getParameters({type, source})}`;\n  const {accessToken} = credentials;\n\n  const format = 'json';\n\n  if (url.length > MAX_GET_LENGTH && type === MAP_TYPES.QUERY) {\n    // need to be a POST request\n    const body = JSON.stringify({\n      q: source,\n      client: 'deck-gl-carto'\n    });\n    return await request({method: 'POST', url: baseUrl, format, accessToken, body});\n  }\n\n  return await request({url, format, accessToken});\n}\n\nfunction getUrlFromMetadata(metadata, format) {\n  const m = metadata[format];\n\n  if (m && !m.error && m.url) {\n    return m.url[0];\n  }\n\n  return null;\n}\n\nexport async function getData({type, source, connection, credentials, format}) {\n  const localCreds = {...getDefaultCredentials(), ...credentials};\n\n  log.assert(connection, 'Must define connection');\n  log.assert(type, 'Must define a type');\n  log.assert(source, 'Must define a source');\n\n  log.assert(localCreds.apiVersion === API_VERSIONS.V3, 'Method only available for v3');\n  log.assert(localCreds.apiBaseUrl, 'Must define apiBaseUrl');\n  log.assert(localCreds.accessToken, 'Must define an accessToken');\n  log.assert(localCreds.mapsUrl, 'mapsUrl cannot be undefined');\n\n  if (!localCreds.mapsUrl) {\n    localCreds.mapsUrl = buildMapsUrlFromBase(localCreds.apiBaseUrl);\n  }\n\n  const metadata = await mapInstantiation({type, source, connection, credentials: localCreds});\n  let url;\n  let mapFormat;\n\n  if (format) {\n    mapFormat = format;\n    url = getUrlFromMetadata(metadata, format);\n    log.assert(url, `Format ${format} not available`);\n  } else {\n    // guess map format\n    const prioritizedFormats = [FORMATS.GEOJSON, FORMATS.NDJSON, FORMATS.TILEJSON];\n    for (const f of prioritizedFormats) {\n      url = getUrlFromMetadata(metadata, f);\n      if (url) {\n        mapFormat = f;\n        break;\n      }\n    }\n  }\n\n  const {accessToken} = localCreds;\n\n  return await request({url, format: mapFormat, accessToken});\n}\n"],"file":"maps-v3-client.js"}