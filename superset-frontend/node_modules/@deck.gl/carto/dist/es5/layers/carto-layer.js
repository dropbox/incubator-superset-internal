"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _core = require("@deck.gl/core");

var _geoLayers = require("@deck.gl/geo-layers");

var _layers = require("@deck.gl/layers");

var _api = require("../api");

var _mapsApiCommon = require("../api/maps-api-common");

var _config = require("../config");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var defaultProps = {
  data: null,
  type: null,
  onDataLoad: {
    type: 'function',
    value: function value(data) {},
    compare: false
  },
  onDataError: {
    type: 'function',
    value: null,
    compare: false,
    optional: true
  },
  credentials: null,
  connection: null
};

var CartoLayer = function (_CompositeLayer) {
  (0, _inherits2.default)(CartoLayer, _CompositeLayer);

  var _super = _createSuper(CartoLayer);

  function CartoLayer() {
    (0, _classCallCheck2.default)(this, CartoLayer);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(CartoLayer, [{
    key: "initializeState",
    value: function initializeState() {
      this.state = {
        data: null,
        apiVersion: null
      };
    }
  }, {
    key: "_checkProps",
    value: function _checkProps(props) {
      var type = props.type,
          credentials = props.credentials,
          connection = props.connection;

      var localCreds = _objectSpread(_objectSpread({}, (0, _config.getDefaultCredentials)()), credentials);

      var apiVersion = localCreds.apiVersion;

      _core.log.assert(Object.values(_api.API_VERSIONS).includes(apiVersion), "Invalid apiVersion ".concat(apiVersion, ". Use API_VERSIONS enum."));

      if (apiVersion === _api.API_VERSIONS.V1 || apiVersion === _api.API_VERSIONS.V2) {
        _core.log.assert(type === _mapsApiCommon.MAP_TYPES.QUERY || type === _mapsApiCommon.MAP_TYPES.TILESET, "Invalid type ".concat(type, ". Use type MAP_TYPES.QUERY or MAP_TYPES.TILESET for apiVersion ").concat(apiVersion));

        _core.log.assert(!connection, "Connection prop is not supported for apiVersion ".concat(apiVersion));
      } else if (apiVersion === _api.API_VERSIONS.V3) {
        _core.log.assert(connection, 'Missing mandatory connection parameter');

        _core.log.assert(Object.values(_mapsApiCommon.MAP_TYPES).includes(type), "Invalid type ".concat(type, ". Use MAP_TYPES enum."));
      }
    }
  }, {
    key: "updateState",
    value: function updateState(_ref) {
      var props = _ref.props,
          oldProps = _ref.oldProps,
          changeFlags = _ref.changeFlags;

      this._checkProps(props);

      var shouldUpdateData = changeFlags.dataChanged || props.connection !== oldProps.connection || props.type !== oldProps.type || JSON.stringify(props.credentials) !== JSON.stringify(oldProps.credentials);

      if (shouldUpdateData) {
        this.setState({
          data: null,
          apiVersion: null
        });

        this._updateData();
      }
    }
  }, {
    key: "_updateData",
    value: function () {
      var _updateData2 = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee() {
        var _this$props, type, source, connection, credentials, localConfig, apiVersion, data;

        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _this$props = this.props, type = _this$props.type, source = _this$props.data, connection = _this$props.connection, credentials = _this$props.credentials;
                localConfig = _objectSpread(_objectSpread({}, (0, _config.getDefaultCredentials)()), credentials);
                apiVersion = localConfig.apiVersion;

                if (!(apiVersion === _api.API_VERSIONS.V3)) {
                  _context.next = 10;
                  break;
                }

                _context.next = 7;
                return (0, _api.getData)({
                  type: type,
                  source: source,
                  connection: connection,
                  credentials: credentials
                });

              case 7:
                data = _context.sent;
                _context.next = 17;
                break;

              case 10:
                if (!(apiVersion === _api.API_VERSIONS.V1 || apiVersion === _api.API_VERSIONS.V2)) {
                  _context.next = 16;
                  break;
                }

                _context.next = 13;
                return (0, _api.getDataV2)({
                  type: type,
                  source: source,
                  credentials: credentials
                });

              case 13:
                data = _context.sent;
                _context.next = 17;
                break;

              case 16:
                _core.log.assert("Unknow apiVersion ".concat(apiVersion, ". Use API_VERSIONS enum."));

              case 17:
                this.setState({
                  data: data,
                  apiVersion: apiVersion
                });
                this.props.onDataLoad(data);
                _context.next = 28;
                break;

              case 21:
                _context.prev = 21;
                _context.t0 = _context["catch"](0);

                if (!this.props.onDataError) {
                  _context.next = 27;
                  break;
                }

                this.props.onDataError(_context.t0);
                _context.next = 28;
                break;

              case 27:
                throw _context.t0;

              case 28:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[0, 21]]);
      }));

      function _updateData() {
        return _updateData2.apply(this, arguments);
      }

      return _updateData;
    }()
  }, {
    key: "renderLayers",
    value: function renderLayers() {
      var _this$state = this.state,
          data = _this$state.data,
          apiVersion = _this$state.apiVersion;
      var type = this.props.type;
      if (!data) return null;
      var updateTriggers = this.props.updateTriggers;
      var layer;

      if (apiVersion === _api.API_VERSIONS.V1 || apiVersion === _api.API_VERSIONS.V2 || type === _mapsApiCommon.MAP_TYPES.TILESET) {
        layer = _geoLayers.MVTLayer;
      } else {
        layer = _layers.GeoJsonLayer;
      }

      var props = _objectSpread({}, this.props);

      delete props.data;
      return new layer(props, this.getSubLayerProps({
        id: "carto-".concat(layer.layerName),
        data: data,
        updateTriggers: updateTriggers
      }));
    }
  }, {
    key: "isLoaded",
    get: function get() {
      return this.getSubLayers().length > 0 && (0, _get2.default)((0, _getPrototypeOf2.default)(CartoLayer.prototype), "isLoaded", this);
    }
  }]);
  return CartoLayer;
}(_core.CompositeLayer);

exports.default = CartoLayer;
CartoLayer.layerName = 'CartoLayer';
CartoLayer.defaultProps = defaultProps;
//# sourceMappingURL=carto-layer.js.map