{"version":3,"sources":["../../../../src/utils/gpu-grid-aggregation/gpu-grid-aggregator.js"],"names":["BUFFER_NAMES","ARRAY_BUFFER_MAP","maxData","minData","maxMinData","REQUIRED_FEATURES","FEATURES","WEBGL2","COLOR_ATTACHMENT_RGBA32F","BLEND_EQUATION_MINMAX","FLOAT_BLEND","TEXTURE_FLOAT","GPUGridAggregator","aggregationData","pixelIndex","index","PIXEL_SIZE","results","cellCount","cellWeight","maxCellWieght","minCellWeight","totalCount","countsData","size","numCells","length","cellWeights","Float32Array","cellCounts","Uint32Array","i","sizeIndex","gl","opts","id","state","weightAttributes","textures","meanTextures","buffers","framebuffers","maxMinFramebuffers","minFramebuffers","maxFramebuffers","equations","resources","_hasGPUSupport","_setupModels","gridAggregationModel","allAggregationModel","meanTransform","delete","deleteResources","setState","aggregationParams","_normalizeAggregationParams","log","_runAggregation","weightId","data","aggregationBuffer","getData","arrayName","bufferName","shaderOptions","modelDirty","DEFAULT_RUN_PARAMS","weights","normalizeWeightParams","updateObject","Object","assign","needMin","needMax","combineMaxMin","aggregationTexture","target","sourceType","maxMinBuffer","maxMinTexture","minBuffer","minTexture","maxBuffer","maxTexture","_trackGPUResultBuffers","cellSize","projectPoints","attributes","moduleSettings","numCol","numRow","translation","scaling","gridSize","parameters","blend","depthTest","blendFunc","uniforms","_renderToWeightsTexture","_renderToMaxMinTexture","blendEquation","MAX_MIN_BLEND_EQUATION","minOrMaxFb","clearParams","clearColor","MAX_32_BIT_FLOAT","MIN_BLEND_EQUATION","MAX_BLEND_EQUATION","framebuffer","viewport","clear","draw","uSampler","texture","operation","AGGREGATION_OPERATION","MIN","MEAN","transformOptions","_sourceTextures","aggregationValues","_targetTexture","elementCount","width","height","update","getMeanTransform","run","attach","_updateModels","_setupFramebuffers","_renderAggregateData","_getAggregateData","framebufferSize","resize","EQUATION_MAP","SUM","_getMinMaxTexture","name","getAggregationModel","instanceCount","getAllAggregationModel","vertexCount","_setupWeightAttributes","setVertexCount","setAttributes","setInstanceCount","result","DEFAULT_WEIGHT_PARAMS","Array","isArray","forEach","obj","shaders","vs","AGGREGATE_TO_GRID_VS","fs","AGGREGATE_TO_GRID_FS","modules","fp64arithmetic","project32","Model","drawMode","AGGREGATE_ALL_VS","AGGREGATE_ALL_FS","isInstanced","position","Transform","TRANSFORM_MEAN_VS","_targetTextureVarying"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2018 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport {\n  Model,\n  Transform,\n  FEATURES,\n  hasFeatures,\n  isWebGL2,\n  readPixelsToBuffer,\n  withParameters\n} from '@luma.gl/core';\nimport {fp64arithmetic} from '@luma.gl/shadertools';\nimport {log, project32, _mergeShaders as mergeShaders} from '@deck.gl/core';\n\nimport {\n  DEFAULT_RUN_PARAMS,\n  MAX_32_BIT_FLOAT,\n  MIN_BLEND_EQUATION,\n  MAX_BLEND_EQUATION,\n  MAX_MIN_BLEND_EQUATION,\n  EQUATION_MAP,\n  DEFAULT_WEIGHT_PARAMS,\n  PIXEL_SIZE\n} from './gpu-grid-aggregator-constants';\nimport {AGGREGATION_OPERATION} from '../aggregation-operation-utils';\n\nimport AGGREGATE_TO_GRID_VS from './aggregate-to-grid-vs.glsl';\nimport AGGREGATE_TO_GRID_FS from './aggregate-to-grid-fs.glsl';\nimport AGGREGATE_ALL_VS from './aggregate-all-vs.glsl';\nimport AGGREGATE_ALL_FS from './aggregate-all-fs.glsl';\nimport TRANSFORM_MEAN_VS from './transform-mean-vs.glsl';\nimport {getFloatTexture, getFramebuffer} from './../resource-utils.js';\n\nconst BUFFER_NAMES = ['aggregationBuffer', 'maxMinBuffer', 'minBuffer', 'maxBuffer'];\nconst ARRAY_BUFFER_MAP = {\n  maxData: 'maxBuffer',\n  minData: 'minBuffer',\n  maxMinData: 'maxMinBuffer'\n};\n\nconst REQUIRED_FEATURES = [\n  FEATURES.WEBGL2, // TODO: Remove after trannsform refactor\n  FEATURES.COLOR_ATTACHMENT_RGBA32F,\n  FEATURES.BLEND_EQUATION_MINMAX,\n  FEATURES.FLOAT_BLEND,\n  FEATURES.TEXTURE_FLOAT\n];\n\nexport default class GPUGridAggregator {\n  // Decode and return aggregation data of given pixel.\n  static getAggregationData({aggregationData, maxData, minData, maxMinData, pixelIndex}) {\n    const index = pixelIndex * PIXEL_SIZE;\n    const results = {};\n    if (aggregationData) {\n      results.cellCount = aggregationData[index + 3];\n      results.cellWeight = aggregationData[index];\n    }\n    if (maxMinData) {\n      results.maxCellWieght = maxMinData[0];\n      results.minCellWeight = maxMinData[3];\n    } else {\n      if (maxData) {\n        results.maxCellWieght = maxData[0];\n        results.totalCount = maxData[3];\n      }\n      if (minData) {\n        results.minCellWeight = minData[0];\n        results.totalCount = maxData[3];\n      }\n    }\n    return results;\n  }\n\n  // Decodes and retuns counts and weights of all cells\n  static getCellData({countsData, size = 1}) {\n    const numCells = countsData.length / 4;\n    const cellWeights = new Float32Array(numCells * size);\n    const cellCounts = new Uint32Array(numCells);\n    for (let i = 0; i < numCells; i++) {\n      // weights in RGB channels\n      for (let sizeIndex = 0; sizeIndex < size; sizeIndex++) {\n        cellWeights[i * size + sizeIndex] = countsData[i * 4 + sizeIndex];\n      }\n      // count in Alpha channel\n      cellCounts[i] = countsData[i * 4 + 3];\n    }\n    return {cellCounts, cellWeights};\n  }\n\n  static isSupported(gl) {\n    return hasFeatures(gl, REQUIRED_FEATURES);\n  }\n\n  // DEBUG ONLY\n  // static logData({aggregationBuffer, minBuffer, maxBuffer, maxMinBuffer, limit = 10}) {\n  //   if (aggregationBuffer) {\n  //     console.log('Aggregation Data:');\n  //     const agrData = aggregationBuffer.getData();\n  //     for (let index = 0; index < agrData.length && limit > 0; index += 4) {\n  //       if (agrData[index + 3] > 0) {\n  //         console.log(\n  //           `index: ${index} weights: ${agrData[index]} ${agrData[index + 1]} ${\n  //             agrData[index + 2]\n  //           } count: ${agrData[index + 3]}`\n  //         );\n  //         limit--;\n  //       }\n  //     }\n  //   }\n  //   const obj = {minBuffer, maxBuffer, maxMinBuffer};\n  //   for (const key in obj) {\n  //     if (obj[key]) {\n  //       const data = obj[key].getData();\n  //       console.log(`${key} data : R: ${data[0]} G: ${data[1]} B: ${data[2]} A: ${data[3]}`);\n  //     }\n  //   }\n  // }\n\n  constructor(gl, opts = {}) {\n    this.id = opts.id || 'gpu-grid-aggregator';\n    this.gl = gl;\n    this.state = {\n      // per weight GPU resources\n      weightAttributes: {},\n      textures: {},\n      meanTextures: {},\n      buffers: {},\n      framebuffers: {},\n      maxMinFramebuffers: {},\n      minFramebuffers: {},\n      maxFramebuffers: {},\n      equations: {},\n\n      // common resources to be deleted\n      resources: {},\n\n      // results\n      results: {}\n    };\n    this._hasGPUSupport =\n      isWebGL2(gl) && // gl_InstanceID usage in min/max calculation shaders\n      hasFeatures(\n        this.gl,\n        FEATURES.BLEND_EQUATION_MINMAX, // set min/max blend modes\n        FEATURES.COLOR_ATTACHMENT_RGBA32F, // render to float texture\n        FEATURES.TEXTURE_FLOAT // sample from a float texture\n      );\n    if (this._hasGPUSupport) {\n      this._setupModels();\n    }\n  }\n\n  // Delete owned resources.\n  delete() {\n    const {gridAggregationModel, allAggregationModel, meanTransform} = this;\n    const {\n      textures,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      meanTextures,\n      resources\n    } = this.state;\n\n    gridAggregationModel?.delete();\n    allAggregationModel?.delete();\n    meanTransform?.delete();\n\n    deleteResources([\n      framebuffers,\n      textures,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      meanTextures,\n      resources\n    ]);\n  }\n\n  // Perform aggregation and retun the results\n  run(opts = {}) {\n    // reset results\n    this.setState({results: {}});\n    const aggregationParams = this._normalizeAggregationParams(opts);\n    if (!this._hasGPUSupport) {\n      log.log(1, 'GPUGridAggregator: not supported')();\n    }\n    return this._runAggregation(aggregationParams);\n  }\n\n  // Reads aggregation data into JS Array object\n  // For WebGL1, data is available in JS Array objects already.\n  // For WebGL2, data is read from Buffer objects and cached for subsequent queries.\n  getData(weightId) {\n    const data = {};\n    const results = this.state.results;\n    if (!results[weightId].aggregationData) {\n      // cache the results if reading from the buffer (WebGL2 path)\n      results[weightId].aggregationData = results[weightId].aggregationBuffer.getData();\n    }\n    data.aggregationData = results[weightId].aggregationData;\n\n    // Check for optional results\n    for (const arrayName in ARRAY_BUFFER_MAP) {\n      const bufferName = ARRAY_BUFFER_MAP[arrayName];\n\n      if (results[weightId][arrayName] || results[weightId][bufferName]) {\n        // cache the result\n        results[weightId][arrayName] =\n          results[weightId][arrayName] || results[weightId][bufferName].getData();\n        data[arrayName] = results[weightId][arrayName];\n      }\n    }\n    return data;\n  }\n\n  updateShaders(shaderOptions = {}) {\n    this.setState({shaderOptions, modelDirty: true});\n  }\n\n  // PRIVATE\n\n  _normalizeAggregationParams(opts) {\n    const aggregationParams = {...DEFAULT_RUN_PARAMS, ...opts};\n    const {weights} = aggregationParams;\n    if (weights) {\n      aggregationParams.weights = normalizeWeightParams(weights);\n    }\n    return aggregationParams;\n  }\n\n  // Update priveate state\n  setState(updateObject) {\n    Object.assign(this.state, updateObject);\n  }\n\n  // GPU Aggregation methods\n\n  _getAggregateData(opts) {\n    const results = {};\n    const {\n      textures,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      resources\n    } = this.state;\n    const {weights} = opts;\n\n    for (const id in weights) {\n      results[id] = {};\n      const {needMin, needMax, combineMaxMin} = weights[id];\n      results[id].aggregationTexture = textures[id];\n      results[id].aggregationBuffer = readPixelsToBuffer(framebuffers[id], {\n        target: weights[id].aggregationBuffer, // update if a buffer is provided\n        sourceType: GL.FLOAT\n      });\n      if (needMin && needMax && combineMaxMin) {\n        results[id].maxMinBuffer = readPixelsToBuffer(maxMinFramebuffers[id], {\n          target: weights[id].maxMinBuffer, // update if a buffer is provided\n          sourceType: GL.FLOAT\n        });\n        results[id].maxMinTexture = resources[`${id}-maxMinTexture`];\n      } else {\n        if (needMin) {\n          results[id].minBuffer = readPixelsToBuffer(minFramebuffers[id], {\n            target: weights[id].minBuffer, // update if a buffer is provided\n            sourceType: GL.FLOAT\n          });\n          results[id].minTexture = resources[`${id}-minTexture`];\n        }\n        if (needMax) {\n          results[id].maxBuffer = readPixelsToBuffer(maxFramebuffers[id], {\n            target: weights[id].maxBuffer, // update if a buffer is provided\n            sourceType: GL.FLOAT\n          });\n          results[id].maxTexture = resources[`${id}-maxTexture`];\n        }\n      }\n    }\n    this._trackGPUResultBuffers(results, weights);\n    return results;\n  }\n\n  _renderAggregateData(opts) {\n    const {\n      cellSize,\n      projectPoints,\n      attributes,\n      moduleSettings,\n      numCol,\n      numRow,\n      weights,\n      translation,\n      scaling\n    } = opts;\n    const {maxMinFramebuffers, minFramebuffers, maxFramebuffers} = this.state;\n\n    const gridSize = [numCol, numRow];\n    const parameters = {\n      blend: true,\n      depthTest: false,\n      blendFunc: [GL.ONE, GL.ONE]\n    };\n    const uniforms = {\n      cellSize,\n      gridSize,\n      projectPoints,\n      translation,\n      scaling\n    };\n\n    for (const id in weights) {\n      const {needMin, needMax} = weights[id];\n      const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n      this._renderToWeightsTexture({\n        id,\n        parameters,\n        moduleSettings,\n        uniforms,\n        gridSize,\n        attributes,\n        weights\n      });\n      if (combineMaxMin) {\n        this._renderToMaxMinTexture({\n          id,\n          parameters: {...parameters, blendEquation: MAX_MIN_BLEND_EQUATION},\n          gridSize,\n          minOrMaxFb: maxMinFramebuffers[id],\n          clearParams: {clearColor: [0, 0, 0, MAX_32_BIT_FLOAT]},\n          combineMaxMin\n        });\n      } else {\n        if (needMin) {\n          this._renderToMaxMinTexture({\n            id,\n            parameters: {...parameters, blendEquation: MIN_BLEND_EQUATION},\n            gridSize,\n            minOrMaxFb: minFramebuffers[id],\n            clearParams: {clearColor: [MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, 0]},\n            combineMaxMin\n          });\n        }\n        if (needMax) {\n          this._renderToMaxMinTexture({\n            id,\n            parameters: {...parameters, blendEquation: MAX_BLEND_EQUATION},\n            gridSize,\n            minOrMaxFb: maxFramebuffers[id],\n            clearParams: {clearColor: [0, 0, 0, 0]},\n            combineMaxMin\n          });\n        }\n      }\n    }\n  }\n\n  // render all aggregated grid-cells to generate Min, Max or MaxMin data texture\n  _renderToMaxMinTexture(opts) {\n    const {id, parameters, gridSize, minOrMaxFb, combineMaxMin, clearParams = {}} = opts;\n    const {framebuffers} = this.state;\n    const {gl, allAggregationModel} = this;\n\n    withParameters(\n      gl,\n      {\n        ...clearParams,\n        framebuffer: minOrMaxFb,\n        viewport: [0, 0, gridSize[0], gridSize[1]]\n      },\n      () => {\n        gl.clear(gl.COLOR_BUFFER_BIT);\n\n        allAggregationModel.draw({\n          parameters,\n          uniforms: {\n            uSampler: framebuffers[id].texture,\n            gridSize,\n            combineMaxMin\n          }\n        });\n      }\n    );\n  }\n\n  // render all data points to aggregate weights\n  _renderToWeightsTexture(opts) {\n    const {id, parameters, moduleSettings, uniforms, gridSize, weights} = opts;\n    const {framebuffers, equations, weightAttributes} = this.state;\n    const {gl, gridAggregationModel} = this;\n    const {operation} = weights[id];\n\n    const clearColor =\n      operation === AGGREGATION_OPERATION.MIN\n        ? [MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, 0]\n        : [0, 0, 0, 0];\n    withParameters(\n      gl,\n      {\n        framebuffer: framebuffers[id],\n        viewport: [0, 0, gridSize[0], gridSize[1]],\n        clearColor\n      },\n      () => {\n        gl.clear(gl.COLOR_BUFFER_BIT);\n\n        const attributes = {weights: weightAttributes[id]};\n        gridAggregationModel.draw({\n          parameters: {...parameters, blendEquation: equations[id]},\n          moduleSettings,\n          uniforms,\n          attributes\n        });\n      }\n    );\n\n    if (operation === AGGREGATION_OPERATION.MEAN) {\n      const {meanTextures, textures} = this.state;\n      const transformOptions = {\n        _sourceTextures: {aggregationValues: meanTextures[id]}, // contains aggregated data\n        _targetTexture: textures[id], // store mean values,\n        elementCount: textures[id].width * textures[id].height\n      };\n      if (this.meanTransform) {\n        this.meanTransform.update(transformOptions);\n      } else {\n        this.meanTransform = getMeanTransform(gl, transformOptions);\n      }\n      this.meanTransform.run({\n        parameters: {\n          blend: false,\n          depthTest: false\n        }\n      });\n\n      // update framebuffer with mean results so readPixelsToBuffer returns mean values\n      framebuffers[id].attach({[GL.COLOR_ATTACHMENT0]: textures[id]});\n    }\n  }\n\n  _runAggregation(opts) {\n    this._updateModels(opts);\n    this._setupFramebuffers(opts);\n    this._renderAggregateData(opts);\n    const results = this._getAggregateData(opts);\n    this.setState({results});\n    return results;\n  }\n\n  // set up framebuffer for each weight\n  /* eslint-disable complexity, max-depth, max-statements*/\n  _setupFramebuffers(opts) {\n    const {\n      textures,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      meanTextures,\n      equations\n    } = this.state;\n    const {weights} = opts;\n    const {numCol, numRow} = opts;\n    const framebufferSize = {width: numCol, height: numRow};\n    for (const id in weights) {\n      const {needMin, needMax, combineMaxMin, operation} = weights[id];\n      textures[id] =\n        weights[id].aggregationTexture ||\n        textures[id] ||\n        getFloatTexture(this.gl, {id: `${id}-texture`, width: numCol, height: numRow});\n      textures[id].resize(framebufferSize);\n      let texture = textures[id];\n      if (operation === AGGREGATION_OPERATION.MEAN) {\n        // For MEAN, we first aggregatet into a temp texture\n        meanTextures[id] =\n          meanTextures[id] ||\n          getFloatTexture(this.gl, {id: `${id}-mean-texture`, width: numCol, height: numRow});\n        meanTextures[id].resize(framebufferSize);\n        texture = meanTextures[id];\n      }\n      if (framebuffers[id]) {\n        framebuffers[id].attach({[GL.COLOR_ATTACHMENT0]: texture});\n      } else {\n        framebuffers[id] = getFramebuffer(this.gl, {\n          id: `${id}-fb`,\n          width: numCol,\n          height: numRow,\n          texture\n        });\n      }\n      framebuffers[id].resize(framebufferSize);\n      equations[id] = EQUATION_MAP[operation] || EQUATION_MAP.SUM;\n      // For min/max framebuffers will use default size 1X1\n      if (needMin || needMax) {\n        if (needMin && needMax && combineMaxMin) {\n          if (!maxMinFramebuffers[id]) {\n            texture = weights[id].maxMinTexture || this._getMinMaxTexture(`${id}-maxMinTexture`);\n            maxMinFramebuffers[id] = getFramebuffer(this.gl, {id: `${id}-maxMinFb`, texture});\n          }\n        } else {\n          if (needMin) {\n            if (!minFramebuffers[id]) {\n              texture = weights[id].minTexture || this._getMinMaxTexture(`${id}-minTexture`);\n              minFramebuffers[id] = getFramebuffer(this.gl, {\n                id: `${id}-minFb`,\n                texture\n              });\n            }\n          }\n          if (needMax) {\n            if (!maxFramebuffers[id]) {\n              texture = weights[id].maxTexture || this._getMinMaxTexture(`${id}-maxTexture`);\n              maxFramebuffers[id] = getFramebuffer(this.gl, {\n                id: `${id}-maxFb`,\n                texture\n              });\n            }\n          }\n        }\n      }\n    }\n  }\n  /* eslint-enable complexity, max-depth, max-statements */\n\n  _getMinMaxTexture(name) {\n    const {resources} = this.state;\n    if (!resources[name]) {\n      resources[name] = getFloatTexture(this.gl, {id: `resourceName`});\n    }\n    return resources[name];\n  }\n\n  _setupModels({numCol = 0, numRow = 0} = {}) {\n    const {gl} = this;\n    const {shaderOptions} = this.state;\n    this.gridAggregationModel?.delete();\n    this.gridAggregationModel = getAggregationModel(gl, shaderOptions);\n    if (!this.allAggregationModel) {\n      const instanceCount = numCol * numRow;\n      this.allAggregationModel = getAllAggregationModel(gl, instanceCount);\n    }\n  }\n\n  // set up buffers for all weights\n  _setupWeightAttributes(opts) {\n    const {weightAttributes} = this.state;\n    const {weights} = opts;\n    for (const id in weights) {\n      weightAttributes[id] = opts.attributes[id];\n    }\n  }\n\n  // GPU Aggregation results are provided in Buffers, if new Buffer objects are created track them for later deletion.\n  /* eslint-disable max-depth */\n  _trackGPUResultBuffers(results, weights) {\n    const {resources} = this.state;\n    for (const id in results) {\n      if (results[id]) {\n        for (const bufferName of BUFFER_NAMES) {\n          if (results[id][bufferName] && weights[id][bufferName] !== results[id][bufferName]) {\n            // No result buffer is provided in weights object, `readPixelsToBuffer` has created a new Buffer object\n            // collect the new buffer for garabge collection\n            const name = `gpu-result-${id}-${bufferName}`;\n            if (resources[name]) {\n              resources[name].delete();\n            }\n            resources[name] = results[id][bufferName];\n          }\n        }\n      }\n    }\n  }\n  /* eslint-enable max-depth */\n\n  _updateModels(opts) {\n    const {vertexCount, attributes, numCol, numRow} = opts;\n    const {modelDirty} = this.state;\n\n    if (modelDirty) {\n      this._setupModels(opts);\n      this.setState({modelDirty: false});\n    }\n\n    // this maps color/elevation to weight name.\n    this._setupWeightAttributes(opts);\n\n    this.gridAggregationModel.setVertexCount(vertexCount);\n    this.gridAggregationModel.setAttributes(attributes);\n\n    this.allAggregationModel.setInstanceCount(numCol * numRow);\n  }\n}\n\n// HELPER METHODS\n\nfunction normalizeWeightParams(weights) {\n  const result = {};\n  for (const id in weights) {\n    result[id] = {...DEFAULT_WEIGHT_PARAMS, ...weights[id]};\n  }\n  return result;\n}\n\nfunction deleteResources(resources) {\n  resources = Array.isArray(resources) ? resources : [resources];\n  resources.forEach(obj => {\n    for (const name in obj) {\n      obj[name].delete();\n    }\n  });\n}\n\nfunction getAggregationModel(gl, shaderOptions) {\n  const shaders = mergeShaders(\n    {\n      vs: AGGREGATE_TO_GRID_VS,\n      fs: AGGREGATE_TO_GRID_FS,\n      modules: [fp64arithmetic, project32]\n    },\n    shaderOptions\n  );\n\n  return new Model(gl, {\n    id: 'Gird-Aggregation-Model',\n    vertexCount: 1,\n    drawMode: GL.POINTS,\n    ...shaders\n  });\n}\n\nfunction getAllAggregationModel(gl, instanceCount) {\n  return new Model(gl, {\n    id: 'All-Aggregation-Model',\n    vs: AGGREGATE_ALL_VS,\n    fs: AGGREGATE_ALL_FS,\n    modules: [fp64arithmetic],\n    vertexCount: 1,\n    drawMode: GL.POINTS,\n    isInstanced: true,\n    instanceCount,\n    attributes: {\n      position: [0, 0]\n    }\n  });\n}\n\nfunction getMeanTransform(gl, opts) {\n  return new Transform(gl, {\n    vs: TRANSFORM_MEAN_VS,\n    _targetTextureVarying: 'meanValues',\n    ...opts\n  });\n}\n"],"file":"gpu-grid-aggregator.js"}