{"version":3,"sources":["../../../src/heatmap-layer/heatmap-layer.js"],"names":["getBounds","boundsContain","packVertices","scaleToAspectRatio","getTextureCoordinates","getTextureParams","Buffer","Texture2D","Transform","getParameters","FEATURES","hasFeatures","AttributeManager","COORDINATE_SYSTEM","log","_mergeShaders","mergeShaders","TriangleLayer","AggregationLayer","defaultColorRange","colorRangeToFlatArray","weights_vs","weights_fs","vs_max","fs_max","RESOLUTION","SIZE_2K","ZOOM_DEBOUNCE","TEXTURE_OPTIONS","mipmaps","parameters","dataFormat","DEFAULT_COLOR_DOMAIN","AGGREGATION_MODE","SUM","MEAN","defaultProps","getPosition","type","value","x","position","getWeight","intensity","min","radiusPixels","max","colorRange","threshold","colorDomain","optional","aggregation","REQUIRED_FEATURES","BLEND_EQUATION_MINMAX","TEXTURE_FLOAT","DIMENSIONS","data","props","HeatmapLayer","initializeState","gl","context","setState","supported","error","id","_setupTextureParams","_setupAttributes","_setupResources","shouldUpdateState","changeFlags","somethingChanged","updateState","opts","state","oldProps","_getChangeFlags","viewportChanged","boundsChanged","_updateBounds","_updateTextureRenderingBounds","dataChanged","clearTimeout","updateTimer","isWeightMapDirty","viewportZoomChanged","_debouncedUpdateWeightmap","_updateColorTexture","_updateWeightmap","zoom","viewport","renderLayers","weightsTexture","triPositionBuffer","triTexCoordBuffer","maxWeightsTexture","colorTexture","updateTriggers","TriangleLayerClass","getSubLayerClass","getSubLayerProps","coordinateSystem","DEFAULT","attributes","positions","texCoords","vertexCount","maxTexture","aggregationMode","texture","finalizeState","weightsTransform","maxWeightTransform","delete","_getAttributeManager","stats","dimensions","isAttributeChanged","isAggregationDirty","compareAll","dimension","_createTextures","textureSize","format","width","height","attributeManager","getAttributeManager","add","size","accessor","weights","positionAttributeName","Math","floatTargetSupport","COLOR_ATTACHMENT_RGBA32F","weightsScale","warn","_createWeightsTransform","shaderOptions","shaders","vs","_fs","elementCount","_targetTexture","_targetTextureVarying","_sourceTextures","inTexture","byteLength","updateShaders","_updateMaxWeightValue","run","blend","depthTest","blendFunc","blendEquation","forceUpdate","viewportCorners","unproject","map","p","fround","visibleWorldBounds","newState","worldBounds","scaledCommonBounds","_worldToCommonBounds","_commonToWorldBounds","LNGLAT","normalizedCommonBounds","subData","textureBounds","projectPosition","colors","Uint8Array","setImageData","length","commonBounds","useLayerCoordinateSystem","metersPerPixel","distanceScales","metersPerUnit","uniforms","textureWidth","update","getNumInstances","clearRenderTarget","getAttributes","moduleSettings","getModuleSettings","setParameters","fromTimer","setTimeout","bind","minLong","minLat","maxLong","maxLat","offsetMode","LNGLAT_OFFSETS","METER_OFFSETS","offsetOriginCommon","coordinateOrigin","scale","bottomLeftCommon","topRightCommon","xMin","yMin","xMax","yMax","bottomLeftWorld","unprojectPosition","topRightWorld","slice","concat","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* global setTimeout clearTimeout */\nimport GL from '@luma.gl/constants';\nimport {\n  getBounds,\n  boundsContain,\n  packVertices,\n  scaleToAspectRatio,\n  getTextureCoordinates,\n  getTextureParams\n} from './heatmap-layer-utils';\nimport {Buffer, Texture2D, Transform, getParameters, FEATURES, hasFeatures} from '@luma.gl/core';\nimport {\n  AttributeManager,\n  COORDINATE_SYSTEM,\n  log,\n  _mergeShaders as mergeShaders\n} from '@deck.gl/core';\nimport TriangleLayer from './triangle-layer';\nimport AggregationLayer from '../aggregation-layer';\nimport {defaultColorRange, colorRangeToFlatArray} from '../utils/color-utils';\nimport weights_vs from './weights-vs.glsl';\nimport weights_fs from './weights-fs.glsl';\nimport vs_max from './max-vs.glsl';\nimport fs_max from './max-fs.glsl';\n\nconst RESOLUTION = 2; // (number of common space pixels) / (number texels)\nconst SIZE_2K = 2048;\nconst ZOOM_DEBOUNCE = 500; // milliseconds\nconst TEXTURE_OPTIONS = {\n  mipmaps: false,\n  parameters: {\n    [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n    [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,\n    [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n    [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n  },\n  dataFormat: GL.RGBA\n};\nconst DEFAULT_COLOR_DOMAIN = [0, 0];\nconst AGGREGATION_MODE = {\n  SUM: 0,\n  MEAN: 1\n};\n\nconst defaultProps = {\n  getPosition: {type: 'accessor', value: x => x.position},\n  getWeight: {type: 'accessor', value: 1},\n  intensity: {type: 'number', min: 0, value: 1},\n  radiusPixels: {type: 'number', min: 1, max: 100, value: 50},\n  colorRange: defaultColorRange,\n  threshold: {type: 'number', min: 0, max: 1, value: 0.05},\n  colorDomain: {type: 'array', value: null, optional: true},\n  // 'SUM' or 'MEAN'\n  aggregation: 'SUM'\n};\n\nconst REQUIRED_FEATURES = [\n  FEATURES.BLEND_EQUATION_MINMAX, // max weight calculation\n  FEATURES.TEXTURE_FLOAT // weight-map as texture\n  // FEATURES.FLOAT_BLEND, // implictly supported when TEXTURE_FLOAT is supported\n];\n\nconst DIMENSIONS = {\n  data: {\n    props: ['radiusPixels']\n  }\n};\n\nexport default class HeatmapLayer extends AggregationLayer {\n  initializeState() {\n    const {gl} = this.context;\n    if (!hasFeatures(gl, REQUIRED_FEATURES)) {\n      this.setState({supported: false});\n      log.error(`HeatmapLayer: ${this.id} is not supported on this browser`)();\n      return;\n    }\n    super.initializeState(DIMENSIONS);\n    this.setState({supported: true, colorDomain: DEFAULT_COLOR_DOMAIN});\n    this._setupTextureParams();\n    this._setupAttributes();\n    this._setupResources();\n  }\n\n  shouldUpdateState({changeFlags}) {\n    // Need to be updated when viewport changes\n    return changeFlags.somethingChanged;\n  }\n\n  /* eslint-disable max-statements,complexity */\n  updateState(opts) {\n    if (!this.state.supported) {\n      return;\n    }\n    super.updateState(opts);\n    const {props, oldProps} = opts;\n    const changeFlags = this._getChangeFlags(opts);\n\n    if (changeFlags.viewportChanged) {\n      changeFlags.boundsChanged = this._updateBounds();\n      this._updateTextureRenderingBounds();\n    }\n\n    if (changeFlags.dataChanged || changeFlags.boundsChanged) {\n      // Update weight map immediately\n      clearTimeout(this.state.updateTimer);\n      this.setState({isWeightMapDirty: true});\n    } else if (changeFlags.viewportZoomChanged) {\n      // Update weight map when zoom stops\n      this._debouncedUpdateWeightmap();\n    }\n\n    if (props.colorRange !== oldProps.colorRange) {\n      this._updateColorTexture(opts);\n    }\n\n    if (this.state.isWeightMapDirty) {\n      this._updateWeightmap();\n    }\n\n    this.setState({zoom: opts.context.viewport.zoom});\n  }\n  /* eslint-enable max-statements,complexity */\n\n  renderLayers() {\n    if (!this.state.supported) {\n      return [];\n    }\n    const {\n      weightsTexture,\n      triPositionBuffer,\n      triTexCoordBuffer,\n      maxWeightsTexture,\n      colorTexture,\n      colorDomain\n    } = this.state;\n    const {updateTriggers, intensity, threshold, aggregation} = this.props;\n\n    const TriangleLayerClass = this.getSubLayerClass('triangle', TriangleLayer);\n\n    return new TriangleLayerClass(\n      this.getSubLayerProps({\n        id: 'triangle-layer',\n        updateTriggers\n      }),\n      {\n        // position buffer is filled with world coordinates generated from viewport.unproject\n        // i.e. LNGLAT if geospatial, CARTESIAN otherwise\n        coordinateSystem: COORDINATE_SYSTEM.DEFAULT,\n        data: {\n          attributes: {\n            positions: triPositionBuffer,\n            texCoords: triTexCoordBuffer\n          }\n        },\n        vertexCount: 4,\n        maxTexture: maxWeightsTexture,\n        colorTexture,\n        aggregationMode: AGGREGATION_MODE[aggregation] || 0,\n        texture: weightsTexture,\n        intensity,\n        threshold,\n        colorDomain\n      }\n    );\n  }\n\n  finalizeState() {\n    super.finalizeState();\n    const {\n      weightsTransform,\n      weightsTexture,\n      maxWeightTransform,\n      maxWeightsTexture,\n      triPositionBuffer,\n      triTexCoordBuffer,\n      colorTexture,\n      updateTimer\n    } = this.state;\n    weightsTransform?.delete();\n    weightsTexture?.delete();\n    maxWeightTransform?.delete();\n    maxWeightsTexture?.delete();\n    triPositionBuffer?.delete();\n    triTexCoordBuffer?.delete();\n    colorTexture?.delete();\n    updateTimer && clearTimeout(updateTimer);\n  }\n\n  // PRIVATE\n\n  // override Composite layer private method to create AttributeManager instance\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats\n    });\n  }\n\n  _getChangeFlags(opts) {\n    const changeFlags = {};\n    const {dimensions} = this.state;\n    changeFlags.dataChanged =\n      this.isAttributeChanged() || // if any attribute is changed\n      this.isAggregationDirty(opts, {\n        compareAll: true,\n        dimension: dimensions.data\n      });\n    changeFlags.viewportChanged = opts.changeFlags.viewportChanged;\n\n    const {zoom} = this.state;\n    if (!opts.context.viewport || opts.context.viewport.zoom !== zoom) {\n      changeFlags.viewportZoomChanged = true;\n    }\n\n    return changeFlags;\n  }\n\n  _createTextures() {\n    const {gl} = this.context;\n    const {textureSize, format, type} = this.state;\n\n    this.setState({\n      weightsTexture: new Texture2D(gl, {\n        width: textureSize,\n        height: textureSize,\n        format,\n        type,\n        ...TEXTURE_OPTIONS\n      }),\n      maxWeightsTexture: new Texture2D(gl, {format, type, ...TEXTURE_OPTIONS}) // 1 X 1 texture,\n    });\n  }\n\n  _setupAttributes() {\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      positions: {size: 3, type: GL.DOUBLE, accessor: 'getPosition'},\n      weights: {size: 1, accessor: 'getWeight'}\n    });\n    this.setState({positionAttributeName: 'positions'});\n  }\n\n  _setupTextureParams() {\n    const {gl} = this.context;\n    const textureSize = Math.min(SIZE_2K, getParameters(gl, gl.MAX_TEXTURE_SIZE));\n    const floatTargetSupport = hasFeatures(gl, FEATURES.COLOR_ATTACHMENT_RGBA32F);\n    const {format, type} = getTextureParams({gl, floatTargetSupport});\n    const weightsScale = floatTargetSupport ? 1 : 1 / 255;\n    this.setState({textureSize, format, type, weightsScale});\n    if (!floatTargetSupport) {\n      log.warn(\n        `HeatmapLayer: ${\n          this.id\n        } rendering to float texture not supported, fallingback to low precession format`\n      )();\n    }\n  }\n\n  _createWeightsTransform(shaderOptions = {}) {\n    const {gl} = this.context;\n    let {weightsTransform} = this.state;\n    const {weightsTexture} = this.state;\n    weightsTransform?.delete();\n    const shaders = mergeShaders(\n      {\n        vs: weights_vs,\n        _fs: weights_fs\n      },\n      shaderOptions\n    );\n\n    weightsTransform = new Transform(gl, {\n      id: `${this.id}-weights-transform`,\n      elementCount: 1,\n      _targetTexture: weightsTexture,\n      _targetTextureVarying: 'weightsTexture',\n      ...shaders\n    });\n    this.setState({weightsTransform});\n  }\n\n  _setupResources() {\n    const {gl} = this.context;\n    this._createTextures();\n    const {textureSize, weightsTexture, maxWeightsTexture} = this.state;\n    this._createWeightsTransform();\n    const maxWeightTransform = new Transform(gl, {\n      id: `${this.id}-max-weights-transform`,\n      _sourceTextures: {\n        inTexture: weightsTexture\n      },\n      _targetTexture: maxWeightsTexture,\n      _targetTextureVarying: 'outTexture',\n      vs: vs_max,\n      _fs: fs_max,\n      elementCount: textureSize * textureSize\n    });\n\n    this.setState({\n      weightsTexture,\n      maxWeightsTexture,\n      maxWeightTransform,\n      zoom: null,\n      triPositionBuffer: new Buffer(gl, {\n        byteLength: 48,\n        accessor: {size: 3}\n      }),\n      triTexCoordBuffer: new Buffer(gl, {\n        byteLength: 48,\n        accessor: {size: 2}\n      })\n    });\n  }\n\n  // overwrite super class method to update transform model\n  updateShaders(shaderOptions) {\n    // sahder params (modules, injects) changed, update model object\n    this._createWeightsTransform(shaderOptions);\n  }\n\n  _updateMaxWeightValue() {\n    const {maxWeightTransform} = this.state;\n    maxWeightTransform.run({\n      parameters: {\n        blend: true,\n        depthTest: false,\n        blendFunc: [GL.ONE, GL.ONE],\n        blendEquation: GL.MAX\n      }\n    });\n  }\n\n  // Computes world bounds area that needs to be processed for generate heatmap\n  _updateBounds(forceUpdate = false) {\n    const {viewport} = this.context;\n\n    // Unproject all 4 corners of the current screen coordinates into world coordinates (lng/lat)\n    // Takes care of viewport has non zero bearing/pitch (i.e axis not aligned with world coordiante system)\n    const viewportCorners = [\n      viewport.unproject([0, 0]),\n      viewport.unproject([viewport.width, 0]),\n      viewport.unproject([viewport.width, viewport.height]),\n      viewport.unproject([0, viewport.height])\n    ].map(p => p.map(Math.fround));\n\n    // #1: get world bounds for current viewport extends\n    const visibleWorldBounds = getBounds(viewportCorners); // TODO: Change to visible bounds\n\n    const newState = {visibleWorldBounds, viewportCorners};\n    let boundsChanged = false;\n\n    if (\n      forceUpdate ||\n      !this.state.worldBounds ||\n      !boundsContain(this.state.worldBounds, visibleWorldBounds)\n    ) {\n      // #2 : convert world bounds to common (Flat) bounds\n      // #3 : extend common bounds to match aspect ratio with viewport\n      const scaledCommonBounds = this._worldToCommonBounds(visibleWorldBounds);\n\n      // #4 :convert aligned common bounds to world bounds\n      const worldBounds = this._commonToWorldBounds(scaledCommonBounds);\n\n      // Clip webmercator projection limits\n      if (this.props.coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {\n        worldBounds[1] = Math.max(worldBounds[1], -85.051129);\n        worldBounds[3] = Math.min(worldBounds[3], 85.051129);\n        worldBounds[0] = Math.max(worldBounds[0], -360);\n        worldBounds[2] = Math.min(worldBounds[2], 360);\n      }\n\n      // #5: now convert world bounds to common using Layer's coordiante system and origin\n      const normalizedCommonBounds = this._worldToCommonBounds(worldBounds);\n\n      newState.worldBounds = worldBounds;\n      newState.normalizedCommonBounds = normalizedCommonBounds;\n\n      boundsChanged = true;\n    }\n    this.setState(newState);\n    return boundsChanged;\n  }\n\n  _updateTextureRenderingBounds() {\n    // Just render visible portion of the texture\n    const {\n      triPositionBuffer,\n      triTexCoordBuffer,\n      normalizedCommonBounds,\n      viewportCorners\n    } = this.state;\n\n    const {viewport} = this.context;\n\n    triPositionBuffer.subData(packVertices(viewportCorners, 3));\n\n    const textureBounds = viewportCorners.map(p =>\n      getTextureCoordinates(viewport.projectPosition(p), normalizedCommonBounds)\n    );\n    triTexCoordBuffer.subData(packVertices(textureBounds, 2));\n  }\n\n  _updateColorTexture(opts) {\n    const {colorRange} = opts.props;\n    let {colorTexture} = this.state;\n    const colors = colorRangeToFlatArray(colorRange, false, Uint8Array);\n\n    if (colorTexture) {\n      colorTexture.setImageData({\n        data: colors,\n        width: colorRange.length\n      });\n    } else {\n      colorTexture = new Texture2D(this.context.gl, {\n        data: colors,\n        width: colorRange.length,\n        height: 1,\n        ...TEXTURE_OPTIONS\n      });\n    }\n    this.setState({colorTexture});\n  }\n\n  _updateWeightmap() {\n    const {radiusPixels, colorDomain, aggregation} = this.props;\n    const {weightsTransform, worldBounds, textureSize, weightsTexture, weightsScale} = this.state;\n    this.state.isWeightMapDirty = false;\n\n    // convert world bounds to common using Layer's coordiante system and origin\n    const commonBounds = this._worldToCommonBounds(worldBounds, {\n      useLayerCoordinateSystem: true\n    });\n\n    if (colorDomain && aggregation === 'SUM') {\n      // scale color domain to weight per pixel\n      const {viewport} = this.context;\n      const metersPerPixel =\n        (viewport.distanceScales.metersPerUnit[2] * (commonBounds[2] - commonBounds[0])) /\n        textureSize;\n      this.state.colorDomain = colorDomain.map(x => x * metersPerPixel * weightsScale);\n    } else {\n      this.state.colorDomain = colorDomain || DEFAULT_COLOR_DOMAIN;\n    }\n\n    const uniforms = {\n      radiusPixels,\n      commonBounds,\n      textureWidth: textureSize,\n      weightsScale\n    };\n    // Attribute manager sets data array count as instaceCount on model\n    // we need to set that as elementCount on 'weightsTransform'\n    weightsTransform.update({\n      elementCount: this.getNumInstances()\n    });\n    weightsTransform.run({\n      uniforms,\n      parameters: {\n        blend: true,\n        depthTest: false,\n        blendFunc: [GL.ONE, GL.ONE],\n        blendEquation: GL.FUNC_ADD\n      },\n      clearRenderTarget: true,\n      attributes: this.getAttributes(),\n      moduleSettings: this.getModuleSettings()\n    });\n    this._updateMaxWeightValue();\n\n    // reset filtering parameters (TODO: remove once luma issue#1193 is fixed)\n    weightsTexture.setParameters({\n      [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n      [GL.TEXTURE_MIN_FILTER]: GL.LINEAR\n    });\n  }\n\n  _debouncedUpdateWeightmap(fromTimer = false) {\n    let {updateTimer} = this.state;\n\n    if (fromTimer) {\n      updateTimer = null;\n      // update\n      this._updateBounds(true);\n      this._updateTextureRenderingBounds();\n      this.setState({isWeightMapDirty: true});\n    } else {\n      this.setState({isWeightMapDirty: false});\n      clearTimeout(updateTimer);\n      updateTimer = setTimeout(this._debouncedUpdateWeightmap.bind(this, true), ZOOM_DEBOUNCE);\n    }\n\n    this.setState({updateTimer});\n  }\n\n  // input: worldBounds: [minLong, minLat, maxLong, maxLat]\n  // input: opts.useLayerCoordinateSystem : layers coordiante system is used\n  // optput: commonBounds: [minX, minY, maxX, maxY] scaled to fit the current texture\n  _worldToCommonBounds(worldBounds, opts = {}) {\n    const {useLayerCoordinateSystem = false} = opts;\n    const [minLong, minLat, maxLong, maxLat] = worldBounds;\n    const {viewport} = this.context;\n    const {textureSize} = this.state;\n    const {coordinateSystem} = this.props;\n\n    const offsetMode =\n      useLayerCoordinateSystem &&\n      (coordinateSystem === COORDINATE_SYSTEM.LNGLAT_OFFSETS ||\n        coordinateSystem === COORDINATE_SYSTEM.METER_OFFSETS);\n    const offsetOriginCommon = offsetMode\n      ? viewport.projectPosition(this.props.coordinateOrigin)\n      : [0, 0];\n    const size = (textureSize * RESOLUTION) / viewport.scale;\n\n    let bottomLeftCommon;\n    let topRightCommon;\n\n    // Y-axis is flipped between World and Common bounds\n    if (useLayerCoordinateSystem && !offsetMode) {\n      bottomLeftCommon = this.projectPosition([minLong, minLat, 0]);\n      topRightCommon = this.projectPosition([maxLong, maxLat, 0]);\n    } else {\n      bottomLeftCommon = viewport.projectPosition([minLong, minLat, 0]);\n      topRightCommon = viewport.projectPosition([maxLong, maxLat, 0]);\n    }\n    // Ignore z component\n    return scaleToAspectRatio(\n      [\n        bottomLeftCommon[0] - offsetOriginCommon[0],\n        bottomLeftCommon[1] - offsetOriginCommon[1],\n        topRightCommon[0] - offsetOriginCommon[0],\n        topRightCommon[1] - offsetOriginCommon[1]\n      ],\n      size,\n      size\n    );\n  }\n\n  // input commonBounds: [xMin, yMin, xMax, yMax]\n  // output worldBounds: [minLong, minLat, maxLong, maxLat]\n  _commonToWorldBounds(commonBounds) {\n    const [xMin, yMin, xMax, yMax] = commonBounds;\n    const {viewport} = this.context;\n    const bottomLeftWorld = viewport.unprojectPosition([xMin, yMin]);\n    const topRightWorld = viewport.unprojectPosition([xMax, yMax]);\n\n    return bottomLeftWorld.slice(0, 2).concat(topRightWorld.slice(0, 2));\n  }\n}\n\nHeatmapLayer.layerName = 'HeatmapLayer';\nHeatmapLayer.defaultProps = defaultProps;\n"],"file":"heatmap-layer.js"}