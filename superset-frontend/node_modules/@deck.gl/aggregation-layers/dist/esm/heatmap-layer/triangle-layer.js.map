{"version":3,"sources":["../../../src/heatmap-layer/triangle-layer.js"],"names":["Model","Geometry","Layer","project32","vs","fs","TriangleLayer","getShaders","modules","initializeState","gl","context","attributeManager","getAttributeManager","add","positions","size","noAlloc","texCoords","setState","model","_getModel","vertexCount","props","id","geometry","drawMode","draw","uniforms","state","texture","maxTexture","colorTexture","intensity","threshold","aggregationMode","colorDomain","setUniforms","layerName"],"mappings":"AAqBA,SAAQA,KAAR,EAAeC,QAAf,QAA8B,eAA9B;AACA,SAAQC,KAAR,EAAeC,SAAf,QAA+B,eAA/B;AACA,OAAOC,EAAP,MAAe,8BAAf;AACA,OAAOC,EAAP,MAAe,gCAAf;AAEA,eAAe,MAAMC,aAAN,SAA4BJ,KAA5B,CAAkC;AAC/CK,EAAAA,UAAU,GAAG;AACX,WAAO;AAACH,MAAAA,EAAD;AAAKC,MAAAA,EAAL;AAASG,MAAAA,OAAO,EAAE,CAACL,SAAD;AAAlB,KAAP;AACD;;AAEDM,EAAAA,eAAe,GAAG;AAChB,UAAM;AAACC,MAAAA;AAAD,QAAO,KAAKC,OAAlB;AACA,UAAMC,gBAAgB,GAAG,KAAKC,mBAAL,EAAzB;AACAD,IAAAA,gBAAgB,CAACE,GAAjB,CAAqB;AACnBC,MAAAA,SAAS,EAAE;AAACC,QAAAA,IAAI,EAAE,CAAP;AAAUC,QAAAA,OAAO,EAAE;AAAnB,OADQ;AAEnBC,MAAAA,SAAS,EAAE;AAACF,QAAAA,IAAI,EAAE,CAAP;AAAUC,QAAAA,OAAO,EAAE;AAAnB;AAFQ,KAArB;AAIA,SAAKE,QAAL,CAAc;AACZC,MAAAA,KAAK,EAAE,KAAKC,SAAL,CAAeX,EAAf;AADK,KAAd;AAGD;;AAEDW,EAAAA,SAAS,CAACX,EAAD,EAAK;AACZ,UAAM;AAACY,MAAAA;AAAD,QAAgB,KAAKC,KAA3B;AAEA,WAAO,IAAIvB,KAAJ,CAAUU,EAAV,EAAc,EACnB,GAAG,KAAKH,UAAL,EADgB;AAEnBiB,MAAAA,EAAE,EAAE,KAAKD,KAAL,CAAWC,EAFI;AAGnBC,MAAAA,QAAQ,EAAE,IAAIxB,QAAJ,CAAa;AACrByB,QAAAA,QAAQ,GADa;AAErBJ,QAAAA;AAFqB,OAAb;AAHS,KAAd,CAAP;AAQD;;AAEDK,EAAAA,IAAI,CAAC;AAACC,IAAAA;AAAD,GAAD,EAAa;AACf,UAAM;AAACR,MAAAA;AAAD,QAAU,KAAKS,KAArB;AAEA,UAAM;AACJC,MAAAA,OADI;AAEJC,MAAAA,UAFI;AAGJC,MAAAA,YAHI;AAIJC,MAAAA,SAJI;AAKJC,MAAAA,SALI;AAMJC,MAAAA,eANI;AAOJC,MAAAA;AAPI,QAQF,KAAKb,KART;AAUAH,IAAAA,KAAK,CACFiB,WADH,CACe,EACX,GAAGT,QADQ;AAEXE,MAAAA,OAFW;AAGXC,MAAAA,UAHW;AAIXC,MAAAA,YAJW;AAKXC,MAAAA,SALW;AAMXC,MAAAA,SANW;AAOXC,MAAAA,eAPW;AAQXC,MAAAA;AARW,KADf,EAWGT,IAXH;AAYD;;AAvD8C;AA0DjDrB,aAAa,CAACgC,SAAd,GAA0B,eAA1B","sourcesContent":["// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\nimport {Layer, project32} from '@deck.gl/core';\nimport vs from './triangle-layer-vertex.glsl';\nimport fs from './triangle-layer-fragment.glsl';\n\nexport default class TriangleLayer extends Layer {\n  getShaders() {\n    return {vs, fs, modules: [project32]};\n  }\n\n  initializeState() {\n    const {gl} = this.context;\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      positions: {size: 3, noAlloc: true},\n      texCoords: {size: 2, noAlloc: true}\n    });\n    this.setState({\n      model: this._getModel(gl)\n    });\n  }\n\n  _getModel(gl) {\n    const {vertexCount} = this.props;\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_FAN,\n        vertexCount\n      })\n    });\n  }\n\n  draw({uniforms}) {\n    const {model} = this.state;\n\n    const {\n      texture,\n      maxTexture,\n      colorTexture,\n      intensity,\n      threshold,\n      aggregationMode,\n      colorDomain\n    } = this.props;\n\n    model\n      .setUniforms({\n        ...uniforms,\n        texture,\n        maxTexture,\n        colorTexture,\n        intensity,\n        threshold,\n        aggregationMode,\n        colorDomain\n      })\n      .draw();\n  }\n}\n\nTriangleLayer.layerName = 'TriangleLayer';\n"],"file":"triangle-layer.js"}