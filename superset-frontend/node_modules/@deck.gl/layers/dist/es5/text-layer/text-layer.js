"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _core = require("@deck.gl/core");

var _multiIconLayer = _interopRequireDefault(require("./multi-icon-layer/multi-icon-layer"));

var _fontAtlasManager = _interopRequireWildcard(require("./font-atlas-manager"));

var _utils = require("./utils");

var _textBackgroundLayer = _interopRequireDefault(require("./text-background-layer/text-background-layer"));

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var DEFAULT_FONT_SETTINGS = {
  fontSize: _fontAtlasManager.DEFAULT_FONT_SIZE,
  buffer: _fontAtlasManager.DEFAULT_BUFFER,
  sdf: false,
  radius: _fontAtlasManager.DEFAULT_RADIUS,
  cutoff: _fontAtlasManager.DEFAULT_CUTOFF,
  smoothing: 0.1
};
var TEXT_ANCHOR = {
  start: 1,
  middle: 0,
  end: -1
};
var ALIGNMENT_BASELINE = {
  top: 1,
  center: 0,
  bottom: -1
};
var DEFAULT_COLOR = [0, 0, 0, 255];
var DEFAULT_LINE_HEIGHT = 1.0;
var FONT_SETTINGS_PROPS = ['fontSize', 'buffer', 'sdf', 'radius', 'cutoff'];
var defaultProps = {
  billboard: true,
  sizeScale: 1,
  sizeUnits: 'pixels',
  sizeMinPixels: 0,
  sizeMaxPixels: Number.MAX_SAFE_INTEGER,
  background: false,
  getBackgroundColor: {
    type: 'accessor',
    value: [255, 255, 255, 255]
  },
  getBorderColor: {
    type: 'accessor',
    value: DEFAULT_COLOR
  },
  getBorderWidth: {
    type: 'accessor',
    value: 0
  },
  backgroundPadding: {
    type: 'array',
    value: [0, 0, 0, 0]
  },
  characterSet: {
    type: 'object',
    value: _fontAtlasManager.DEFAULT_CHAR_SET
  },
  fontFamily: _fontAtlasManager.DEFAULT_FONT_FAMILY,
  fontWeight: _fontAtlasManager.DEFAULT_FONT_WEIGHT,
  lineHeight: DEFAULT_LINE_HEIGHT,
  outlineWidth: {
    type: 'number',
    value: 0,
    min: 0
  },
  outlineColor: {
    type: 'color',
    value: DEFAULT_COLOR
  },
  fontSettings: {},
  wordBreak: 'break-word',
  maxWidth: {
    type: 'number',
    value: -1
  },
  getText: {
    type: 'accessor',
    value: function value(x) {
      return x.text;
    }
  },
  getPosition: {
    type: 'accessor',
    value: function value(x) {
      return x.position;
    }
  },
  getColor: {
    type: 'accessor',
    value: DEFAULT_COLOR
  },
  getSize: {
    type: 'accessor',
    value: 32
  },
  getAngle: {
    type: 'accessor',
    value: 0
  },
  getTextAnchor: {
    type: 'accessor',
    value: 'middle'
  },
  getAlignmentBaseline: {
    type: 'accessor',
    value: 'center'
  },
  getPixelOffset: {
    type: 'accessor',
    value: [0, 0]
  },
  backgroundColor: {
    deprecatedFor: ['background', 'getBackgroundColor']
  }
};

var TextLayer = function (_CompositeLayer) {
  (0, _inherits2.default)(TextLayer, _CompositeLayer);

  var _super = _createSuper(TextLayer);

  function TextLayer() {
    (0, _classCallCheck2.default)(this, TextLayer);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(TextLayer, [{
    key: "initializeState",
    value: function initializeState() {
      this.state = {
        styleVersion: 0,
        fontAtlasManager: new _fontAtlasManager.default()
      };
    }
  }, {
    key: "updateState",
    value: function updateState(_ref) {
      var props = _ref.props,
          oldProps = _ref.oldProps,
          changeFlags = _ref.changeFlags;
      var textChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getText);
      var oldCharacterSet = this.state.characterSet;

      if (textChanged) {
        this._updateText();
      }

      var fontChanged = oldCharacterSet !== this.state.characterSet || this._fontChanged(oldProps, props);

      if (fontChanged) {
        this._updateFontAtlas(oldProps, props);
      }

      var styleChanged = fontChanged || props.lineHeight !== oldProps.lineHeight || props.wordBreak !== oldProps.wordBreak || props.maxWidth !== oldProps.maxWidth;

      if (styleChanged) {
        this.setState({
          styleVersion: this.state.styleVersion + 1
        });
      }
    }
  }, {
    key: "getPickingInfo",
    value: function getPickingInfo(_ref2) {
      var info = _ref2.info;
      info.object = info.index >= 0 ? this.props.data[info.index] : null;
      return info;
    }
  }, {
    key: "_updateFontAtlas",
    value: function _updateFontAtlas(oldProps, props) {
      var fontSettings = props.fontSettings,
          fontFamily = props.fontFamily,
          fontWeight = props.fontWeight;
      var _this$state = this.state,
          fontAtlasManager = _this$state.fontAtlasManager,
          characterSet = _this$state.characterSet;
      fontAtlasManager.setProps(_objectSpread(_objectSpread(_objectSpread({}, DEFAULT_FONT_SETTINGS), fontSettings), {}, {
        characterSet: characterSet,
        fontFamily: fontFamily,
        fontWeight: fontWeight
      }));
    }
  }, {
    key: "_fontChanged",
    value: function _fontChanged(oldProps, props) {
      if (oldProps.fontFamily !== props.fontFamily || oldProps.fontWeight !== props.fontWeight) {
        return true;
      }

      if (oldProps.fontSettings === props.fontSettings) {
        return false;
      }

      var oldFontSettings = oldProps.fontSettings || {};
      var fontSettings = props.fontSettings || {};
      return FONT_SETTINGS_PROPS.some(function (prop) {
        return oldFontSettings[prop] !== fontSettings[prop];
      });
    }
  }, {
    key: "_updateText",
    value: function _updateText() {
      var _this$props = this.props,
          data = _this$props.data,
          characterSet = _this$props.characterSet;
      var textBuffer = data.attributes && data.attributes.getText;
      var getText = this.props.getText;
      var startIndices = data.startIndices;
      var numInstances;
      var autoCharacterSet = characterSet === 'auto' && new Set();

      if (textBuffer && startIndices) {
        var _getTextFromBuffer = (0, _utils.getTextFromBuffer)(_objectSpread(_objectSpread({}, ArrayBuffer.isView(textBuffer) ? {
          value: textBuffer
        } : textBuffer), {}, {
          length: data.length,
          startIndices: startIndices,
          characterSet: autoCharacterSet
        })),
            texts = _getTextFromBuffer.texts,
            characterCount = _getTextFromBuffer.characterCount;

        numInstances = characterCount;

        getText = function getText(_, _ref3) {
          var index = _ref3.index;
          return texts[index];
        };
      } else {
        var _createIterable = (0, _core.createIterable)(data),
            iterable = _createIterable.iterable,
            objectInfo = _createIterable.objectInfo;

        startIndices = [0];
        numInstances = 0;

        var _iterator = _createForOfIteratorHelper(iterable),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var object = _step.value;
            objectInfo.index++;
            var text = Array.from(getText(object, objectInfo) || '');

            if (autoCharacterSet) {
              text.forEach(autoCharacterSet.add, autoCharacterSet);
            }

            numInstances += text.length;
            startIndices.push(numInstances);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      this.setState({
        getText: getText,
        startIndices: startIndices,
        numInstances: numInstances,
        characterSet: autoCharacterSet || characterSet
      });
    }
  }, {
    key: "getBoundingRect",
    value: function getBoundingRect(object, objectInfo) {
      var iconMapping = this.state.fontAtlasManager.mapping;
      var getText = this.state.getText;
      var _this$props2 = this.props,
          wordBreak = _this$props2.wordBreak,
          maxWidth = _this$props2.maxWidth,
          lineHeight = _this$props2.lineHeight,
          getTextAnchor = _this$props2.getTextAnchor,
          getAlignmentBaseline = _this$props2.getAlignmentBaseline;
      var paragraph = getText(object, objectInfo) || '';

      var _transformParagraph = (0, _utils.transformParagraph)(paragraph, lineHeight, wordBreak, maxWidth, iconMapping),
          _transformParagraph$s = (0, _slicedToArray2.default)(_transformParagraph.size, 2),
          width = _transformParagraph$s[0],
          height = _transformParagraph$s[1];

      var anchorX = TEXT_ANCHOR[typeof getTextAnchor === 'function' ? getTextAnchor(object, objectInfo) : getTextAnchor];
      var anchorY = ALIGNMENT_BASELINE[typeof getAlignmentBaseline === 'function' ? getAlignmentBaseline(object, objectInfo) : getAlignmentBaseline];
      return [(anchorX - 1) * width / 2, (anchorY - 1) * height / 2, width, height];
    }
  }, {
    key: "getIconOffsets",
    value: function getIconOffsets(object, objectInfo) {
      var iconMapping = this.state.fontAtlasManager.mapping;
      var getText = this.state.getText;
      var _this$props3 = this.props,
          wordBreak = _this$props3.wordBreak,
          maxWidth = _this$props3.maxWidth,
          lineHeight = _this$props3.lineHeight,
          getTextAnchor = _this$props3.getTextAnchor,
          getAlignmentBaseline = _this$props3.getAlignmentBaseline;
      var paragraph = getText(object, objectInfo) || '';

      var _transformParagraph2 = (0, _utils.transformParagraph)(paragraph, lineHeight, wordBreak, maxWidth, iconMapping),
          x = _transformParagraph2.x,
          y = _transformParagraph2.y,
          rowWidth = _transformParagraph2.rowWidth,
          _transformParagraph2$ = (0, _slicedToArray2.default)(_transformParagraph2.size, 2),
          width = _transformParagraph2$[0],
          height = _transformParagraph2$[1];

      var anchorX = TEXT_ANCHOR[typeof getTextAnchor === 'function' ? getTextAnchor(object, objectInfo) : getTextAnchor];
      var anchorY = ALIGNMENT_BASELINE[typeof getAlignmentBaseline === 'function' ? getAlignmentBaseline(object, objectInfo) : getAlignmentBaseline];
      var numCharacters = x.length;
      var offsets = new Array(numCharacters * 2);
      var index = 0;

      for (var i = 0; i < numCharacters; i++) {
        var rowOffset = (1 - anchorX) * (width - rowWidth[i]) / 2;
        offsets[index++] = (anchorX - 1) * width / 2 + rowOffset + x[i];
        offsets[index++] = (anchorY - 1) * height / 2 + y[i];
      }

      return offsets;
    }
  }, {
    key: "renderLayers",
    value: function renderLayers() {
      var _this$state2 = this.state,
          startIndices = _this$state2.startIndices,
          numInstances = _this$state2.numInstances,
          getText = _this$state2.getText,
          _this$state2$fontAtla = _this$state2.fontAtlasManager,
          scale = _this$state2$fontAtla.scale,
          texture = _this$state2$fontAtla.texture,
          mapping = _this$state2$fontAtla.mapping,
          styleVersion = _this$state2.styleVersion;
      var _this$props4 = this.props,
          data = _this$props4.data,
          _dataDiff = _this$props4._dataDiff,
          getPosition = _this$props4.getPosition,
          getColor = _this$props4.getColor,
          getSize = _this$props4.getSize,
          getAngle = _this$props4.getAngle,
          getPixelOffset = _this$props4.getPixelOffset,
          getBackgroundColor = _this$props4.getBackgroundColor,
          getBorderColor = _this$props4.getBorderColor,
          getBorderWidth = _this$props4.getBorderWidth,
          backgroundPadding = _this$props4.backgroundPadding,
          background = _this$props4.background,
          billboard = _this$props4.billboard,
          fontSettings = _this$props4.fontSettings,
          outlineWidth = _this$props4.outlineWidth,
          outlineColor = _this$props4.outlineColor,
          sizeScale = _this$props4.sizeScale,
          sizeUnits = _this$props4.sizeUnits,
          sizeMinPixels = _this$props4.sizeMinPixels,
          sizeMaxPixels = _this$props4.sizeMaxPixels,
          transitions = _this$props4.transitions,
          updateTriggers = _this$props4.updateTriggers;
      var CharactersLayerClass = this.getSubLayerClass('characters', _multiIconLayer.default);
      var BackgroundLayerClass = this.getSubLayerClass('background', _textBackgroundLayer.default);
      return [background && new BackgroundLayerClass({
        getFillColor: getBackgroundColor,
        getLineColor: getBorderColor,
        getLineWidth: getBorderWidth,
        padding: backgroundPadding,
        getPosition: getPosition,
        getSize: getSize,
        getAngle: getAngle,
        getPixelOffset: getPixelOffset,
        billboard: billboard,
        sizeScale: sizeScale / this.state.fontAtlasManager.props.fontSize,
        sizeUnits: sizeUnits,
        sizeMinPixels: sizeMinPixels,
        sizeMaxPixels: sizeMaxPixels,
        transitions: transitions && {
          getPosition: transitions.getPosition,
          getAngle: transitions.getAngle,
          getSize: transitions.getSize,
          getFillColor: transitions.getBackgroundColor,
          getLineColor: transitions.getBorderColor,
          getLineWidth: transitions.getBorderWidth,
          getPixelOffset: transitions.getPixelOffset
        }
      }, this.getSubLayerProps({
        id: 'background',
        updateTriggers: {
          getPosition: updateTriggers.getPosition,
          getAngle: updateTriggers.getAngle,
          getSize: updateTriggers.getSize,
          getFillColor: updateTriggers.getBackgroundColor,
          getLineColor: updateTriggers.getBorderColor,
          getLineWidth: updateTriggers.getBorderWidth,
          getPixelOffset: updateTriggers.getPixelOffset,
          getBoundingRect: {
            getText: updateTriggers.getText,
            getTextAnchor: updateTriggers.getTextAnchor,
            getAlignmentBaseline: updateTriggers.getAlignmentBaseline,
            styleVersion: styleVersion
          }
        }
      }), {
        data: data.attributes ? {
          length: data.length,
          attributes: data.attributes.background || {}
        } : data,
        _dataDiff: _dataDiff,
        autoHighlight: false,
        getBoundingRect: this.getBoundingRect.bind(this)
      }), new CharactersLayerClass({
        sdf: fontSettings.sdf,
        smoothing: Number.isFinite(fontSettings.smoothing) ? fontSettings.smoothing : DEFAULT_FONT_SETTINGS.smoothing,
        outlineWidth: outlineWidth,
        outlineColor: outlineColor,
        iconAtlas: texture,
        iconMapping: mapping,
        getPosition: getPosition,
        getColor: getColor,
        getSize: getSize,
        getAngle: getAngle,
        getPixelOffset: getPixelOffset,
        billboard: billboard,
        sizeScale: sizeScale * scale,
        sizeUnits: sizeUnits,
        sizeMinPixels: sizeMinPixels * scale,
        sizeMaxPixels: sizeMaxPixels * scale,
        transitions: transitions && {
          getPosition: transitions.getPosition,
          getAngle: transitions.getAngle,
          getColor: transitions.getColor,
          getSize: transitions.getSize,
          getPixelOffset: transitions.getPixelOffset
        }
      }, this.getSubLayerProps({
        id: 'characters',
        updateTriggers: {
          getIcon: updateTriggers.getText,
          getPosition: updateTriggers.getPosition,
          getAngle: updateTriggers.getAngle,
          getColor: updateTriggers.getColor,
          getSize: updateTriggers.getSize,
          getPixelOffset: updateTriggers.getPixelOffset,
          getIconOffsets: {
            getText: updateTriggers.getText,
            getTextAnchor: updateTriggers.getTextAnchor,
            getAlignmentBaseline: updateTriggers.getAlignmentBaseline,
            styleVersion: styleVersion
          }
        }
      }), {
        data: data,
        _dataDiff: _dataDiff,
        startIndices: startIndices,
        numInstances: numInstances,
        getIconOffsets: this.getIconOffsets.bind(this),
        getIcon: getText
      })];
    }
  }]);
  return TextLayer;
}(_core.CompositeLayer);

exports.default = TextLayer;
TextLayer.layerName = 'TextLayer';
TextLayer.defaultProps = defaultProps;
//# sourceMappingURL=text-layer.js.map