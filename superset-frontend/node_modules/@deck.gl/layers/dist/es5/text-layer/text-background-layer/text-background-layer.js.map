{"version":3,"sources":["../../../../src/text-layer/text-background-layer/text-background-layer.js"],"names":["defaultProps","billboard","sizeScale","sizeUnits","sizeMinPixels","sizeMaxPixels","Number","MAX_SAFE_INTEGER","padding","type","value","getPosition","x","position","getSize","getAngle","getPixelOffset","getBoundingRect","getFillColor","getLineColor","getLineWidth","TextBackgroundLayer","vs","fs","modules","project32","picking","getAttributeManager","addInstanced","instancePositions","size","fp64","use64bitPositions","transition","accessor","instanceSizes","defaultValue","instanceAngles","instanceRects","instancePixelOffsets","instanceFillColors","normalized","instanceLineColors","instanceLineWidths","props","oldProps","changeFlags","extensionsChanged","gl","context","state","model","delete","_getModel","invalidateAll","uniforms","viewport","sizeScaleMultiplier","metersPerPixel","length","setUniforms","stroked","Boolean","draw","positions","Model","getShaders","id","geometry","Geometry","drawMode","vertexCount","attributes","Float32Array","isInstanced","Layer","layerName"],"mappings":"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","sourcesContent":["import {Layer, project32, picking} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './text-background-layer-vertex.glsl';\nimport fs from './text-background-layer-fragment.glsl';\n\nconst defaultProps = {\n  billboard: true,\n  sizeScale: 1,\n  sizeUnits: 'pixels',\n  sizeMinPixels: 0,\n  sizeMaxPixels: Number.MAX_SAFE_INTEGER,\n\n  padding: {type: 'array', value: [0, 0, 0, 0]},\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getSize: {type: 'accessor', value: 1},\n  getAngle: {type: 'accessor', value: 0},\n  getPixelOffset: {type: 'accessor', value: [0, 0]},\n  getBoundingRect: {type: 'accessor', value: [0, 0, 0, 0]},\n  getFillColor: {type: 'accessor', value: [0, 0, 0, 255]},\n  getLineColor: {type: 'accessor', value: [0, 0, 0, 255]},\n  getLineWidth: {type: 'accessor', value: 1}\n};\n\nexport default class TextBackgroundLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  initializeState() {\n    this.getAttributeManager().addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceSizes: {\n        size: 1,\n        transition: true,\n        accessor: 'getSize',\n        defaultValue: 1\n      },\n      instanceAngles: {\n        size: 1,\n        transition: true,\n        accessor: 'getAngle'\n      },\n      instanceRects: {\n        size: 4,\n        accessor: 'getBoundingRect'\n      },\n      instancePixelOffsets: {\n        size: 2,\n        transition: true,\n        accessor: 'getPixelOffset'\n      },\n      instanceFillColors: {\n        size: 4,\n        transition: true,\n        normalized: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getFillColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineColors: {\n        size: 4,\n        transition: true,\n        normalized: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getLineColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getLineWidth',\n        defaultValue: 1\n      }\n    });\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager().invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {viewport} = this.context;\n    const {\n      billboard,\n      sizeScale,\n      sizeUnits,\n      sizeMinPixels,\n      sizeMaxPixels,\n      getLineWidth\n    } = this.props;\n    let {padding} = this.props;\n\n    const sizeScaleMultiplier = sizeUnits === 'pixels' ? viewport.metersPerPixel : 1;\n    if (padding.length < 4) {\n      padding = [padding[0], padding[1], padding[0], padding[1]];\n    }\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        billboard,\n        stroked: Boolean(getLineWidth),\n        padding,\n        sizeScale: sizeScale * sizeScaleMultiplier,\n        sizeMinPixels,\n        sizeMaxPixels\n      })\n      .draw();\n  }\n\n  _getModel(gl) {\n    // a square that minimally cover the unit circle\n    const positions = [0, 0, 1, 0, 1, 1, 0, 1];\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_FAN,\n        vertexCount: 4,\n        attributes: {\n          positions: {size: 2, value: new Float32Array(positions)}\n        }\n      }),\n      isInstanced: true\n    });\n  }\n}\n\nTextBackgroundLayer.layerName = 'TextBackgroundLayer';\nTextBackgroundLayer.defaultProps = defaultProps;\n"],"file":"text-background-layer.js"}