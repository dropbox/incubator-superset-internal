{"version":3,"sources":["../../../src/solid-polygon-layer/polygon.js"],"names":["OUTER_POLYGON_WINDING","WINDING","CLOCKWISE","HOLE_POLYGON_WINDING","COUNTER_CLOCKWISE","windingOptions","isClosed","validate","polygon","positions","Array","isArray","ArrayBuffer","isView","Error","isSimple","length","Number","isFinite","isNestedRingClosed","simplePolygon","p0","p1","isFlatRingClosed","size","startIndex","endIndex","i","copyNestedRing","target","targetStartIndex","windingDirection","targetIndex","len","j","start","end","copyFlatRing","srcStartIndex","srcEndIndex","srcLength","normalize","positionSize","holeIndices","srcPositions","srcHoleIndices","push","pop","entries","polygonIndex","getSurfaceIndices","normalizedPolygon","preproject","map","positionIndex","n","slice","p","xy"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable max-params */\nimport earcut from 'earcut';\nimport {modifyPolygonWindingDirection, WINDING} from '@math.gl/polygon';\n\nconst OUTER_POLYGON_WINDING = WINDING.CLOCKWISE;\nconst HOLE_POLYGON_WINDING = WINDING.COUNTER_CLOCKWISE;\n\nconst windingOptions = {\n  isClosed: true\n};\n\n// 4 data formats are supported:\n// Simple Polygon: an array of points\n// Complex Polygon: an array of array of points (array of rings)\n//   with the first ring representing the outer hull and other rings representing holes\n// Simple Flat: an array of numbers (flattened \"simple polygon\")\n// Complex Flat: {position: array<number>, holeIndices: array<number>}\n//   (flattened \"complex polygon\")\n\n/**\n * Ensure a polygon is valid format\n * @param {Array|Object} polygon\n */\nfunction validate(polygon) {\n  polygon = (polygon && polygon.positions) || polygon;\n  if (!Array.isArray(polygon) && !ArrayBuffer.isView(polygon)) {\n    throw new Error('invalid polygon');\n  }\n}\n\n/**\n * Check if a polygon is simple or complex\n * @param {Array} polygon - either a complex or simple polygon\n * @return {Boolean} - true if the polygon is a simple polygon (i.e. not an array of polygons)\n */\nfunction isSimple(polygon) {\n  return polygon.length >= 1 && polygon[0].length >= 2 && Number.isFinite(polygon[0][0]);\n}\n\n/**\n * Check if a simple polygon is a closed ring\n * @param {Array} simplePolygon - array of points\n * @return {Boolean} - true if the simple polygon is a closed ring\n */\nfunction isNestedRingClosed(simplePolygon) {\n  // check if first and last vertex are the same\n  const p0 = simplePolygon[0];\n  const p1 = simplePolygon[simplePolygon.length - 1];\n\n  return p0[0] === p1[0] && p0[1] === p1[1] && p0[2] === p1[2];\n}\n\n/**\n * Check if a simple flat array is a closed ring\n * @param {Array} positions - array of numbers\n * @param {Number} size - size of a position, 2 (xy) or 3 (xyz)\n * @param {Number} startIndex - start index of the path in the positions array\n * @param {Number} endIndex - end index of the path in the positions array\n * @return {Boolean} - true if the simple flat array is a closed ring\n */\nfunction isFlatRingClosed(positions, size, startIndex, endIndex) {\n  for (let i = 0; i < size; i++) {\n    if (positions[startIndex + i] !== positions[endIndex - size + i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Copy a simple polygon coordinates into a flat array, closes the ring if needed.\n * @param {Float64Array} target - destination\n * @param {Number} targetStartIndex - index in the destination to start copying into\n * @param {Array} simplePolygon - array of points\n * @param {Number} size - size of a position, 2 (xy) or 3 (xyz)\n * @param {Number} [windingDirection] - modify polygon to be of the specified winding direction\n * @returns {Number} - the index of the write head in the destination\n */\nfunction copyNestedRing(target, targetStartIndex, simplePolygon, size, windingDirection) {\n  let targetIndex = targetStartIndex;\n  const len = simplePolygon.length;\n  for (let i = 0; i < len; i++) {\n    for (let j = 0; j < size; j++) {\n      target[targetIndex++] = simplePolygon[i][j] || 0;\n    }\n  }\n\n  if (!isNestedRingClosed(simplePolygon)) {\n    for (let j = 0; j < size; j++) {\n      target[targetIndex++] = simplePolygon[0][j] || 0;\n    }\n  }\n\n  windingOptions.start = targetStartIndex;\n  windingOptions.end = targetIndex;\n  windingOptions.size = size;\n  modifyPolygonWindingDirection(target, windingDirection, windingOptions);\n\n  return targetIndex;\n}\n\n/**\n * Copy a simple flat array into another flat array, closes the ring if needed.\n * @param {Float64Array} target - destination\n * @param {Number} targetStartIndex - index in the destination to start copying into\n * @param {Array} positions - array of numbers\n * @param {Number} size - size of a position, 2 (xy) or 3 (xyz)\n * @param {Number} [srcStartIndex] - start index of the path in the positions array\n * @param {Number} [srcEndIndex] - end index of the path in the positions array\n * @param {Number} [windingDirection] - modify polygon to be of the specified winding direction\n * @returns {Number} - the index of the write head in the destination\n */\nfunction copyFlatRing(\n  target,\n  targetStartIndex,\n  positions,\n  size,\n  srcStartIndex = 0,\n  srcEndIndex,\n  windingDirection\n) {\n  srcEndIndex = srcEndIndex || positions.length;\n  const srcLength = srcEndIndex - srcStartIndex;\n  if (srcLength <= 0) {\n    return targetStartIndex;\n  }\n  let targetIndex = targetStartIndex;\n\n  for (let i = 0; i < srcLength; i++) {\n    target[targetIndex++] = positions[srcStartIndex + i];\n  }\n\n  if (!isFlatRingClosed(positions, size, srcStartIndex, srcEndIndex)) {\n    for (let i = 0; i < size; i++) {\n      target[targetIndex++] = positions[srcStartIndex + i];\n    }\n  }\n\n  windingOptions.start = targetStartIndex;\n  windingOptions.end = targetIndex;\n  windingOptions.size = size;\n  modifyPolygonWindingDirection(target, windingDirection, windingOptions);\n\n  return targetIndex;\n}\n\n/**\n * Normalize any polygon representation into the \"complex flat\" format\n * @param {Array|Object} polygon\n * @param {Number} positionSize - size of a position, 2 (xy) or 3 (xyz)\n * @param {Number} [vertexCount] - pre-computed vertex count in the polygon.\n *   If provided, will skip counting.\n * @return {Object} - {positions: <Float64Array>, holeIndices: <Array|null>}\n */\n/* eslint-disable max-statements */\nexport function normalize(polygon, positionSize) {\n  validate(polygon);\n\n  const positions = [];\n  const holeIndices = [];\n\n  if (polygon.positions) {\n    // complex flat\n    const {positions: srcPositions, holeIndices: srcHoleIndices} = polygon;\n\n    if (srcHoleIndices) {\n      let targetIndex = 0;\n      // split the positions array into `holeIndices.length + 1` rings\n      // holeIndices[-1] falls back to 0\n      // holeIndices[holeIndices.length] falls back to positions.length\n      for (let i = 0; i <= srcHoleIndices.length; i++) {\n        targetIndex = copyFlatRing(\n          positions,\n          targetIndex,\n          srcPositions,\n          positionSize,\n          srcHoleIndices[i - 1],\n          srcHoleIndices[i],\n          i === 0 ? OUTER_POLYGON_WINDING : HOLE_POLYGON_WINDING\n        );\n        holeIndices.push(targetIndex);\n      }\n      // The last one is not a starting index of a hole, remove\n      holeIndices.pop();\n\n      return {positions, holeIndices};\n    }\n    polygon = srcPositions;\n  }\n  if (Number.isFinite(polygon[0])) {\n    // simple flat\n    copyFlatRing(positions, 0, polygon, positionSize, 0, positions.length, OUTER_POLYGON_WINDING);\n    return positions;\n  }\n  if (!isSimple(polygon)) {\n    // complex polygon\n    let targetIndex = 0;\n\n    for (const [polygonIndex, simplePolygon] of polygon.entries()) {\n      targetIndex = copyNestedRing(\n        positions,\n        targetIndex,\n        simplePolygon,\n        positionSize,\n        polygonIndex === 0 ? OUTER_POLYGON_WINDING : HOLE_POLYGON_WINDING\n      );\n      holeIndices.push(targetIndex);\n    }\n    // The last one is not a starting index of a hole, remove\n    holeIndices.pop();\n    // last index points to the end of the array, remove it\n    return {positions, holeIndices};\n  }\n  // simple polygon\n  copyNestedRing(positions, 0, polygon, positionSize, OUTER_POLYGON_WINDING);\n  return positions;\n}\n/* eslint-enable max-statements */\n\n/*\n * Get vertex indices for drawing polygon mesh\n * @param {Object} normalizedPolygon - {positions, holeIndices}\n * @param {Number} positionSize - size of a position, 2 (xy) or 3 (xyz)\n * @returns {Array} array of indices\n */\nexport function getSurfaceIndices(normalizedPolygon, positionSize, preproject) {\n  let holeIndices = null;\n\n  if (normalizedPolygon.holeIndices) {\n    holeIndices = normalizedPolygon.holeIndices.map(positionIndex => positionIndex / positionSize);\n  }\n  let positions = normalizedPolygon.positions || normalizedPolygon;\n\n  if (preproject) {\n    // When tesselating lnglat coordinates, project them to the common space for accuracy\n    const n = positions.length;\n    // Clone the array\n    positions = positions.slice();\n    const p = [];\n    for (let i = 0; i < n; i += positionSize) {\n      p[0] = positions[i];\n      p[1] = positions[i + 1];\n      const xy = preproject(p);\n      positions[i] = xy[0];\n      positions[i + 1] = xy[1];\n    }\n  }\n\n  // Let earcut triangulate the polygon\n  return earcut(positions, holeIndices, positionSize);\n}\n"],"file":"polygon.js"}