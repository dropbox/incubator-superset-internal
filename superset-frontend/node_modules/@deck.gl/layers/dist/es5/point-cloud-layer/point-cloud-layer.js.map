{"version":3,"sources":["../../../src/point-cloud-layer/point-cloud-layer.js"],"names":["DEFAULT_COLOR","DEFAULT_NORMAL","defaultProps","sizeUnits","pointSize","type","min","value","getPosition","x","position","getNormal","getColor","material","radiusPixels","deprecatedFor","normalizeData","data","header","attributes","length","vertexCount","POSITION","instancePositions","NORMAL","instanceNormals","COLOR_0","instanceColors","PointCloudLayer","vs","fs","modules","project32","gouraudLighting","picking","getAttributeManager","addInstanced","size","fp64","use64bitPositions","transition","accessor","defaultValue","props","colorFormat","normalized","oldProps","changeFlags","extensionsChanged","gl","context","state","model","delete","_getModel","invalidateAll","dataChanged","uniforms","viewport","sizeMultiplier","metersPerPixel","setUniforms","draw","positions","i","angle","Math","PI","push","cos","sin","Model","getShaders","id","geometry","Geometry","drawMode","Float32Array","isInstanced","Layer","layerName"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAoBA;;AAEA;;AAEA;;AACA;;;;;;;;;;AAEA,IAAMA,aAAa,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,GAAV,CAAtB;AACA,IAAMC,cAAc,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAvB;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE,QADQ;AAEnBC,EAAAA,SAAS,EAAE;AAACC,IAAAA,IAAI,EAAE,QAAP;AAAiBC,IAAAA,GAAG,EAAE,CAAtB;AAAyBC,IAAAA,KAAK,EAAE;AAAhC,GAFQ;AAInBC,EAAAA,WAAW,EAAE;AAACH,IAAAA,IAAI,EAAE,UAAP;AAAmBE,IAAAA,KAAK,EAAE,eAAAE,CAAC;AAAA,aAAIA,CAAC,CAACC,QAAN;AAAA;AAA3B,GAJM;AAKnBC,EAAAA,SAAS,EAAE;AAACN,IAAAA,IAAI,EAAE,UAAP;AAAmBE,IAAAA,KAAK,EAAEN;AAA1B,GALQ;AAMnBW,EAAAA,QAAQ,EAAE;AAACP,IAAAA,IAAI,EAAE,UAAP;AAAmBE,IAAAA,KAAK,EAAEP;AAA1B,GANS;AAQnBa,EAAAA,QAAQ,EAAE,IARS;AAWnBC,EAAAA,YAAY,EAAE;AAACC,IAAAA,aAAa,EAAE;AAAhB;AAXK,CAArB;;AAeA,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAAA,MACpBC,MADoB,GACED,IADF,CACpBC,MADoB;AAAA,MACZC,UADY,GACEF,IADF,CACZE,UADY;;AAE3B,MAAI,CAACD,MAAD,IAAW,CAACC,UAAhB,EAA4B;AAC1B;AACD;;AAEDF,EAAAA,IAAI,CAACG,MAAL,GAAcF,MAAM,CAACG,WAArB;;AAEA,MAAIF,UAAU,CAACG,QAAf,EAAyB;AACvBH,IAAAA,UAAU,CAACI,iBAAX,GAA+BJ,UAAU,CAACG,QAA1C;AACD;;AACD,MAAIH,UAAU,CAACK,MAAf,EAAuB;AACrBL,IAAAA,UAAU,CAACM,eAAX,GAA6BN,UAAU,CAACK,MAAxC;AACD;;AACD,MAAIL,UAAU,CAACO,OAAf,EAAwB;AACtBP,IAAAA,UAAU,CAACQ,cAAX,GAA4BR,UAAU,CAACO,OAAvC;AACD;AACF;;IAEoBE,e;;;;;;;;;;;;iCACN;AACX,yHAAwB;AAACC,QAAAA,EAAE,EAAFA,8BAAD;AAAKC,QAAAA,EAAE,EAAFA,gCAAL;AAASC,QAAAA,OAAO,EAAE,CAACC,eAAD,EAAYC,qBAAZ,EAA6BC,aAA7B;AAAlB,OAAxB;AACD;;;sCAEiB;AAEhB,WAAKC,mBAAL,GAA2BC,YAA3B,CAAwC;AACtCb,QAAAA,iBAAiB,EAAE;AACjBc,UAAAA,IAAI,EAAE,CADW;AAEjBhC,UAAAA,IAAI,MAFa;AAGjBiC,UAAAA,IAAI,EAAE,KAAKC,iBAAL,EAHW;AAIjBC,UAAAA,UAAU,EAAE,IAJK;AAKjBC,UAAAA,QAAQ,EAAE;AALO,SADmB;AAQtChB,QAAAA,eAAe,EAAE;AACfY,UAAAA,IAAI,EAAE,CADS;AAEfG,UAAAA,UAAU,EAAE,IAFG;AAGfC,UAAAA,QAAQ,EAAE,WAHK;AAIfC,UAAAA,YAAY,EAAEzC;AAJC,SARqB;AActC0B,QAAAA,cAAc,EAAE;AACdU,UAAAA,IAAI,EAAE,KAAKM,KAAL,CAAWC,WAAX,CAAuBxB,MADf;AAEdf,UAAAA,IAAI,MAFU;AAGdwC,UAAAA,UAAU,EAAE,IAHE;AAIdL,UAAAA,UAAU,EAAE,IAJE;AAKdC,UAAAA,QAAQ,EAAE,UALI;AAMdC,UAAAA,YAAY,EAAE1C;AANA;AAdsB,OAAxC;AAwBD;;;sCAE2C;AAAA,UAA/B2C,KAA+B,QAA/BA,KAA+B;AAAA,UAAxBG,QAAwB,QAAxBA,QAAwB;AAAA,UAAdC,WAAc,QAAdA,WAAc;AAC1C,mHAAkB;AAACJ,QAAAA,KAAK,EAALA,KAAD;AAAQG,QAAAA,QAAQ,EAARA,QAAR;AAAkBC,QAAAA,WAAW,EAAXA;AAAlB,OAAlB;;AACA,UAAIA,WAAW,CAACC,iBAAhB,EAAmC;AAAA;;AAAA,YAC1BC,EAD0B,GACpB,KAAKC,OADe,CAC1BD,EAD0B;AAEjC,kCAAKE,KAAL,CAAWC,KAAX,wEAAkBC,MAAlB;AACA,aAAKF,KAAL,CAAWC,KAAX,GAAmB,KAAKE,SAAL,CAAeL,EAAf,CAAnB;AACA,aAAKd,mBAAL,GAA2BoB,aAA3B;AACD;;AACD,UAAIR,WAAW,CAACS,WAAhB,EAA6B;AAC3BxC,QAAAA,aAAa,CAAC2B,KAAK,CAAC1B,IAAP,CAAb;AACD;AACF;;;gCAEgB;AAAA,UAAXwC,QAAW,SAAXA,QAAW;AAAA,UACRC,QADQ,GACI,KAAKR,OADT,CACRQ,QADQ;AAAA,wBAEgB,KAAKf,KAFrB;AAAA,UAERvC,SAFQ,eAERA,SAFQ;AAAA,UAEGD,SAFH,eAEGA,SAFH;AAIf,UAAMwD,cAAc,GAAGxD,SAAS,KAAK,QAAd,GAAyB,IAAIuD,QAAQ,CAACE,cAAtC,GAAuD,CAA9E;AAEA,WAAKT,KAAL,CAAWC,KAAX,CACGS,WADH,CACeJ,QADf,EAEGI,WAFH,CAEe;AACX/C,QAAAA,YAAY,EAAEV,SAAS,GAAGuD;AADf,OAFf,EAKGG,IALH;AAMD;;;8BAESb,E,EAAI;AAEZ,UAAMc,SAAS,GAAG,EAAlB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,YAAMC,KAAK,GAAID,CAAC,GAAG,CAAL,GAAUE,IAAI,CAACC,EAAf,GAAoB,CAAlC;AACAJ,QAAAA,SAAS,CAACK,IAAV,CAAeF,IAAI,CAACG,GAAL,CAASJ,KAAT,IAAkB,CAAjC,EAAoCC,IAAI,CAACI,GAAL,CAASL,KAAT,IAAkB,CAAtD,EAAyD,CAAzD;AACD;;AAED,aAAO,IAAIM,YAAJ,CAAUtB,EAAV,kCACF,KAAKuB,UAAL,EADE;AAELC,QAAAA,EAAE,EAAE,KAAK9B,KAAL,CAAW8B,EAFV;AAGLC,QAAAA,QAAQ,EAAE,IAAIC,eAAJ,CAAa;AACrBC,UAAAA,QAAQ,GADa;AAErBzD,UAAAA,UAAU,EAAE;AACV4C,YAAAA,SAAS,EAAE,IAAIc,YAAJ,CAAiBd,SAAjB;AADD;AAFS,SAAb,CAHL;AASLe,QAAAA,WAAW,EAAE;AATR,SAAP;AAWD;;;EA/E0CC,W;;;AAkF7CnD,eAAe,CAACoD,SAAhB,GAA4B,iBAA5B;AACApD,eAAe,CAAC1B,YAAhB,GAA+BA,YAA/B","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, gouraudLighting, picking} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './point-cloud-layer-vertex.glsl';\nimport fs from './point-cloud-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst DEFAULT_NORMAL = [0, 0, 1];\n\nconst defaultProps = {\n  sizeUnits: 'pixels',\n  pointSize: {type: 'number', min: 0, value: 10}, //  point radius in pixels\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getNormal: {type: 'accessor', value: DEFAULT_NORMAL},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  material: true,\n\n  // Depreated\n  radiusPixels: {deprecatedFor: 'pointSize'}\n};\n\n// support loaders.gl point cloud format\nfunction normalizeData(data) {\n  const {header, attributes} = data;\n  if (!header || !attributes) {\n    return;\n  }\n\n  data.length = header.vertexCount;\n\n  if (attributes.POSITION) {\n    attributes.instancePositions = attributes.POSITION;\n  }\n  if (attributes.NORMAL) {\n    attributes.instanceNormals = attributes.NORMAL;\n  }\n  if (attributes.COLOR_0) {\n    attributes.instanceColors = attributes.COLOR_0;\n  }\n}\n\nexport default class PointCloudLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, gouraudLighting, picking]});\n  }\n\n  initializeState() {\n    /* eslint-disable max-len */\n    this.getAttributeManager().addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceNormals: {\n        size: 3,\n        transition: true,\n        accessor: 'getNormal',\n        defaultValue: DEFAULT_NORMAL\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: DEFAULT_COLOR\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager().invalidateAll();\n    }\n    if (changeFlags.dataChanged) {\n      normalizeData(props.data);\n    }\n  }\n\n  draw({uniforms}) {\n    const {viewport} = this.context;\n    const {pointSize, sizeUnits} = this.props;\n\n    const sizeMultiplier = sizeUnits === 'meters' ? 1 / viewport.metersPerPixel : 1;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        radiusPixels: pointSize * sizeMultiplier\n      })\n      .draw();\n  }\n\n  _getModel(gl) {\n    // a triangle that minimally cover the unit circle\n    const positions = [];\n    for (let i = 0; i < 3; i++) {\n      const angle = (i / 3) * Math.PI * 2;\n      positions.push(Math.cos(angle) * 2, Math.sin(angle) * 2, 0);\n    }\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLES,\n        attributes: {\n          positions: new Float32Array(positions)\n        }\n      }),\n      isInstanced: true\n    });\n  }\n}\n\nPointCloudLayer.layerName = 'PointCloudLayer';\nPointCloudLayer.defaultProps = defaultProps;\n"],"file":"point-cloud-layer.js"}