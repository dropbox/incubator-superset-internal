{"version":3,"sources":["../../../src/geojson-layer/geojson-layer.js"],"names":["defaultProps","POINT_LAYER","circle","icon","text","LINE_LAYER","POLYGON_LAYER","stroked","filled","extruded","wireframe","iconAtlas","type","value","iconMapping","getIcon","f","properties","getText","pointType","getRadius","deprecatedFor","GeoJsonLayer","state","layerProps","features","props","getLineDashArray","log","removed","changeFlags","dataChanged","data","binary","setState","_updateStateBinary","_updateStateJSON","encodePickingColor","wrapFeature","getSubLayerRow","bind","newFeatures","featuresDiff","Array","isArray","oldFeatures","key","slice","dataRange","partialFeatures","push","getIndex","__source","index","replace","info","pointLayerIdPrefix","id","sourceIsPoints","sourceLayer","startsWith","getSubLayers","layer","updateAutoHighlight","PolygonFillLayer","shouldRenderSubLayer","polygons","getSubLayerClass","forwardedProps","useLineColor","getLineColor","updateTriggers","lineColors","getSubLayerProps","polygonStrokeLayerId","lineStringsLayerId","PolygonStrokeLayer","polygonsOutline","LineStringsLayer","lines","highlightedObjectIndex","Number","isFinite","points","findIndex","d","types","Set","split","pointLayers","PointLayerMapping","PointsLayer","polygonFillLayer","_renderPolygonLayer","lineLayers","_renderLineLayers","_renderPointLayers","accessor","object","feature","CompositeLayer","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer, log} from '@deck.gl/core';\nimport {replaceInRange} from '../utils';\nimport {binaryToFeatureForAccesor} from './geojson-binary';\nimport {\n  POINT_LAYER,\n  LINE_LAYER,\n  POLYGON_LAYER,\n  getDefaultProps,\n  forwardProps\n} from './sub-layer-map';\n\nimport {getGeojsonFeatures, separateGeojsonFeatures} from './geojson';\nimport {createLayerPropsFromFeatures, createLayerPropsFromBinary} from './geojson-layer-props';\n\nconst defaultProps = {\n  ...getDefaultProps(POINT_LAYER.circle),\n  ...getDefaultProps(POINT_LAYER.icon),\n  ...getDefaultProps(POINT_LAYER.text),\n  ...getDefaultProps(LINE_LAYER),\n  ...getDefaultProps(POLYGON_LAYER),\n\n  // Overwrite sub layer defaults\n  stroked: true,\n  filled: true,\n  extruded: false,\n  wireframe: false,\n  iconAtlas: {type: 'object', value: null},\n  iconMapping: {type: 'object', value: {}},\n  getIcon: {type: 'accessor', value: f => f.properties.icon},\n  getText: {type: 'accessor', value: f => f.properties.text},\n\n  // Self props\n  pointType: 'circle',\n\n  // TODO: deprecated, remove in v9\n  getRadius: {deprecatedFor: 'getPointRadius'}\n};\n\nexport default class GeoJsonLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      layerProps: {},\n      features: {}\n    };\n\n    if (this.props.getLineDashArray) {\n      log.removed('getLineDashArray', 'PathStyleExtension')();\n    }\n  }\n\n  updateState({props, changeFlags}) {\n    if (!changeFlags.dataChanged) {\n      return;\n    }\n    const {data} = this.props;\n    const binary = data && 'points' in data && 'polygons' in data && 'lines' in data;\n\n    this.setState({binary});\n\n    if (binary) {\n      this._updateStateBinary({props, changeFlags});\n    } else {\n      this._updateStateJSON({props, changeFlags});\n    }\n  }\n\n  _updateStateBinary({props, changeFlags}) {\n    const layerProps = createLayerPropsFromBinary(props.data, this.encodePickingColor);\n    this.setState({layerProps});\n  }\n\n  _updateStateJSON({props, changeFlags}) {\n    const features = getGeojsonFeatures(props.data);\n    const wrapFeature = this.getSubLayerRow.bind(this);\n    let newFeatures = {};\n    const featuresDiff = {};\n\n    if (Array.isArray(changeFlags.dataChanged)) {\n      const oldFeatures = this.state.features;\n      for (const key in oldFeatures) {\n        newFeatures[key] = oldFeatures[key].slice();\n        featuresDiff[key] = [];\n      }\n\n      for (const dataRange of changeFlags.dataChanged) {\n        const partialFeatures = separateGeojsonFeatures(features, wrapFeature, dataRange);\n        for (const key in oldFeatures) {\n          featuresDiff[key].push(\n            replaceInRange({\n              data: newFeatures[key],\n              getIndex: f => f.__source.index,\n              dataRange,\n              replace: partialFeatures[key]\n            })\n          );\n        }\n      }\n    } else {\n      newFeatures = separateGeojsonFeatures(features, wrapFeature);\n    }\n\n    const layerProps = createLayerPropsFromFeatures(newFeatures, featuresDiff);\n\n    this.setState({\n      features: newFeatures,\n      featuresDiff,\n      layerProps\n    });\n  }\n\n  _updateAutoHighlight(info) {\n    // All sub layers except the points layer use source feature index to encode the picking color\n    // The points layer uses indices from the points data array.\n    const pointLayerIdPrefix = `${this.id}-points-`;\n    const sourceIsPoints = info.sourceLayer.id.startsWith(pointLayerIdPrefix);\n    for (const layer of this.getSubLayers()) {\n      if (layer.id.startsWith(pointLayerIdPrefix) === sourceIsPoints) {\n        layer.updateAutoHighlight(info);\n      }\n    }\n  }\n\n  _renderPolygonLayer() {\n    const {extruded, wireframe} = this.props;\n    const {layerProps} = this.state;\n    const id = 'polygons-fill';\n\n    const PolygonFillLayer =\n      this.shouldRenderSubLayer(id, layerProps.polygons.data) &&\n      this.getSubLayerClass(id, POLYGON_LAYER.type);\n\n    if (PolygonFillLayer) {\n      const forwardedProps = forwardProps(this, POLYGON_LAYER.props);\n      // Avoid building the lineColors attribute if wireframe is off\n      const useLineColor = extruded && wireframe;\n      if (!useLineColor) {\n        delete forwardedProps.getLineColor;\n      }\n      // using a legacy API to invalid lineColor attributes\n      forwardedProps.updateTriggers.lineColors = useLineColor;\n\n      return new PolygonFillLayer(\n        forwardedProps,\n        this.getSubLayerProps({\n          id,\n          updateTriggers: forwardedProps.updateTriggers\n        }),\n        layerProps.polygons\n      );\n    }\n    return null;\n  }\n\n  _renderLineLayers() {\n    const {extruded, stroked} = this.props;\n    const {layerProps} = this.state;\n    const polygonStrokeLayerId = 'polygons-stroke';\n    const lineStringsLayerId = 'linestrings';\n\n    const PolygonStrokeLayer =\n      !extruded &&\n      stroked &&\n      this.shouldRenderSubLayer(polygonStrokeLayerId, layerProps.polygonsOutline.data) &&\n      this.getSubLayerClass(polygonStrokeLayerId, LINE_LAYER.type);\n    const LineStringsLayer =\n      this.shouldRenderSubLayer(lineStringsLayerId, layerProps.lines.data) &&\n      this.getSubLayerClass(lineStringsLayerId, LINE_LAYER.type);\n\n    if (PolygonStrokeLayer || LineStringsLayer) {\n      const forwardedProps = forwardProps(this, LINE_LAYER.props);\n\n      return [\n        PolygonStrokeLayer &&\n          new PolygonStrokeLayer(\n            forwardedProps,\n            this.getSubLayerProps({\n              id: polygonStrokeLayerId,\n              updateTriggers: forwardedProps.updateTriggers\n            }),\n            layerProps.polygonsOutline\n          ),\n\n        LineStringsLayer &&\n          new LineStringsLayer(\n            forwardedProps,\n            this.getSubLayerProps({\n              id: lineStringsLayerId,\n              updateTriggers: forwardedProps.updateTriggers\n            }),\n            layerProps.lines\n          )\n      ];\n    }\n    return null;\n  }\n\n  _renderPointLayers() {\n    const {pointType} = this.props;\n    const {layerProps, binary} = this.state;\n    let {highlightedObjectIndex} = this.props;\n\n    if (!binary && Number.isFinite(highlightedObjectIndex)) {\n      highlightedObjectIndex = layerProps.points.data.findIndex(\n        d => d.__source.index === highlightedObjectIndex\n      );\n    }\n\n    // Avoid duplicate sub layer ids\n    const types = new Set(pointType.split('+'));\n    const pointLayers = [];\n    for (const type of types) {\n      const id = `points-${type}`;\n      const PointLayerMapping = POINT_LAYER[type];\n      const PointsLayer =\n        PointLayerMapping &&\n        this.shouldRenderSubLayer(id, layerProps.points.data) &&\n        this.getSubLayerClass(id, PointLayerMapping.type);\n      if (PointsLayer) {\n        const forwardedProps = forwardProps(this, PointLayerMapping.props);\n\n        pointLayers.push(\n          new PointsLayer(\n            forwardedProps,\n            this.getSubLayerProps({\n              id,\n              updateTriggers: forwardedProps.updateTriggers,\n              highlightedObjectIndex\n            }),\n            layerProps.points\n          )\n        );\n      }\n    }\n    return pointLayers;\n  }\n\n  renderLayers() {\n    const {extruded} = this.props;\n\n    const polygonFillLayer = this._renderPolygonLayer();\n    const lineLayers = this._renderLineLayers();\n    const pointLayers = this._renderPointLayers();\n\n    return [\n      // If not extruded: flat fill layer is drawn below outlines\n      !extruded && polygonFillLayer,\n      lineLayers,\n      pointLayers,\n      // If extruded: draw fill layer last for correct blending behavior\n      extruded && polygonFillLayer\n    ];\n  }\n\n  getSubLayerAccessor(accessor) {\n    const {binary} = this.state;\n    if (!binary || typeof accessor !== 'function') {\n      return super.getSubLayerAccessor(accessor);\n    }\n\n    return (object, info) => {\n      const {data, index} = info;\n      const feature = binaryToFeatureForAccesor(data, index);\n      return accessor(feature, info);\n    };\n  }\n}\n\nGeoJsonLayer.layerName = 'GeoJsonLayer';\nGeoJsonLayer.defaultProps = defaultProps;\n"],"file":"geojson-layer.js"}