{"version":3,"sources":["../../../src/geojson-layer/geojson-binary.js"],"names":["GEOM_TYPES","binaryToFeatureForAccesor","data","index","featureIndex","startIndices","geometryIndex","featureIds","value","getPropertiesForIndex","propertiesIndex","numericPropsIndex","feature","properties","prop","numericProps","findIndexBinary","uniqueIdProperty","featureId","gt","findIndexByType","geomType","positions","length","indexOf","propertyIndex","findIndex","elem","calculatePickingColors","geojsonBinary","encodePickingColor","pickingColors","points","lines","polygons","key","globalFeatureIds","Uint8ClampedArray","pickingColor","i"],"mappings":"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","sourcesContent":["// This module implement some utility functions to work with\n// the geojson-binary format defined at loaders.gl:\n// https://github.com/visgl/loaders.gl/blob/master/modules/gis/docs/api-reference/geojson-to-binary.md\n\nconst GEOM_TYPES = ['points', 'lines', 'polygons'];\n\n/**\n * Return the feature for an accesor\n *\n * @param {Object} data - The data in binary format\n * @param {Number} index - The requested index\n */\nexport function binaryToFeatureForAccesor(data, index) {\n  if (!data) {\n    return null;\n  }\n\n  const featureIndex = 'startIndices' in data ? data.startIndices[index] : index;\n  const geometryIndex = data.featureIds.value[featureIndex];\n\n  if (featureIndex !== -1) {\n    return getPropertiesForIndex(data, geometryIndex, featureIndex);\n  }\n\n  return null;\n}\n\nfunction getPropertiesForIndex(data, propertiesIndex, numericPropsIndex) {\n  const feature = {\n    properties: {...data.properties[propertiesIndex]}\n  };\n\n  for (const prop in data.numericProps) {\n    feature.properties[prop] = data.numericProps[prop].value[numericPropsIndex];\n  }\n\n  return feature;\n}\n\n/**\n * Return the index of feature (numericProps or featureIds) for given feature id\n * Example: findIndexBinary(data, 'id', 33) will return the index in the array of numericProps\n * of the feature 33.\n * @param {Object} data - The data in binary format\n * @param {String} uniqueIdProperty - Name of the unique id property\n * @param {Number} featureId - feature id to find\n */\nexport function findIndexBinary(data, uniqueIdProperty, featureId) {\n  if (!data) {\n    return -1;\n  }\n\n  for (const gt of GEOM_TYPES) {\n    const index = findIndexByType(data, uniqueIdProperty, featureId, gt);\n    if (index !== -1) {\n      return index;\n    }\n  }\n\n  return -1;\n}\n\nfunction findIndexByType(data, uniqueIdProperty, featureId, geomType) {\n  if (!data) {\n    return -1;\n  }\n\n  if (!(geomType in data) || !data[geomType].positions.value.length) return -1;\n\n  // Look for the uniqueIdProperty\n  let index = -1;\n  if (data[geomType].numericProps[uniqueIdProperty]) {\n    index = data[geomType].numericProps[uniqueIdProperty].value.indexOf(featureId);\n  } else {\n    const propertyIndex = data[geomType].properties.findIndex(\n      elem => elem[uniqueIdProperty] === featureId\n    );\n    index = data[geomType].featureIds.value.indexOf(propertyIndex);\n  }\n\n  return index;\n}\n\n// Custom picking color to keep binary indexes\nexport function calculatePickingColors(geojsonBinary, encodePickingColor) {\n  const pickingColors = {\n    points: null,\n    lines: null,\n    polygons: null\n  };\n  for (const key in pickingColors) {\n    const featureIds = geojsonBinary[key].globalFeatureIds.value;\n    pickingColors[key] = new Uint8ClampedArray(featureIds.length * 3);\n    const pickingColor = [];\n    for (let i = 0; i < featureIds.length; i++) {\n      encodePickingColor(featureIds[i], pickingColor);\n      pickingColors[key][i * 3 + 0] = pickingColor[0];\n      pickingColors[key][i * 3 + 1] = pickingColor[1];\n      pickingColors[key][i * 3 + 2] = pickingColor[2];\n    }\n  }\n\n  return pickingColors;\n}\n"],"file":"geojson-binary.js"}