{"version":3,"sources":["../../../src/geojson-layer/sub-layer-map.js"],"names":["POINT_LAYER","circle","type","ScatterplotLayer","props","filled","stroked","lineWidthMaxPixels","lineWidthMinPixels","lineWidthScale","lineWidthUnits","pointRadiusMaxPixels","pointRadiusMinPixels","pointRadiusScale","pointRadiusUnits","getFillColor","getLineColor","getLineWidth","getPointRadius","icon","IconLayer","iconAtlas","iconMapping","iconSizeMaxPixels","iconSizeMinPixels","iconSizeScale","iconSizeUnits","getIcon","getIconAngle","getIconColor","getIconPixelOffset","getIconSize","text","TextLayer","textSizeMaxPixels","textSizeMinPixels","textSizeScale","textSizeUnits","textBackground","textBackgroundPadding","textFontFamily","textFontWeight","textLineHeight","textMaxWidth","textOutlineColor","textOutlineWidth","textWordBreak","textCharacterSet","getText","getTextAngle","getTextColor","getTextPixelOffset","getTextSize","getTextAnchor","getTextAlignmentBaseline","getTextBackgroundColor","getTextBorderColor","getTextBorderWidth","LINE_LAYER","PathLayer","lineJointRounded","lineCapRounded","lineMiterLimit","POLYGON_LAYER","SolidPolygonLayer","extruded","wireframe","elevationScale","material","getElevation","getDefaultProps","result","key","defaultProps","forwardProps","layer","mapping","transitions","updateTriggers","getPosition","geometry","sourceKey","targetKey","value","startsWith","getSubLayerAccessor"],"mappings":"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","sourcesContent":["import IconLayer from '../icon-layer/icon-layer';\nimport ScatterplotLayer from '../scatterplot-layer/scatterplot-layer';\nimport TextLayer from '../text-layer/text-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\n\nexport const POINT_LAYER = {\n  circle: {\n    type: ScatterplotLayer,\n    props: {\n      filled: 'filled',\n      stroked: 'stroked',\n\n      lineWidthMaxPixels: 'lineWidthMaxPixels',\n      lineWidthMinPixels: 'lineWidthMinPixels',\n      lineWidthScale: 'lineWidthScale',\n      lineWidthUnits: 'lineWidthUnits',\n      pointRadiusMaxPixels: 'radiusMaxPixels',\n      pointRadiusMinPixels: 'radiusMinPixels',\n      pointRadiusScale: 'radiusScale',\n      pointRadiusUnits: 'radiusUnits',\n\n      getFillColor: 'getFillColor',\n      getLineColor: 'getLineColor',\n      getLineWidth: 'getLineWidth',\n      getPointRadius: 'getRadius'\n    }\n  },\n  icon: {\n    type: IconLayer,\n    props: {\n      iconAtlas: 'iconAtlas',\n      iconMapping: 'iconMapping',\n\n      iconSizeMaxPixels: 'sizeMaxPixels',\n      iconSizeMinPixels: 'sizeMinPixels',\n      iconSizeScale: 'sizeScale',\n      iconSizeUnits: 'sizeUnits',\n\n      getIcon: 'getIcon',\n      getIconAngle: 'getAngle',\n      getIconColor: 'getColor',\n      getIconPixelOffset: 'getPixelOffset',\n      getIconSize: 'getSize'\n    }\n  },\n  text: {\n    type: TextLayer,\n    props: {\n      textSizeMaxPixels: 'sizeMaxPixels',\n      textSizeMinPixels: 'sizeMinPixels',\n      textSizeScale: 'sizeScale',\n      textSizeUnits: 'sizeUnits',\n\n      textBackground: 'background',\n      textBackgroundPadding: 'backgroundPadding',\n      textFontFamily: 'fontFamily',\n      textFontWeight: 'fontWeight',\n      textLineHeight: 'lineHeight',\n      textMaxWidth: 'maxWidth',\n      textOutlineColor: 'outlineColor',\n      textOutlineWidth: 'outlineWidth',\n      textWordBreak: 'wordBreak',\n      textCharacterSet: 'characterSet',\n\n      getText: 'getText',\n      getTextAngle: 'getAngle',\n      getTextColor: 'getColor',\n      getTextPixelOffset: 'getPixelOffset',\n      getTextSize: 'getSize',\n      getTextAnchor: 'getTextAnchor',\n      getTextAlignmentBaseline: 'getAlignmentBaseline',\n      getTextBackgroundColor: 'getBackgroundColor',\n      getTextBorderColor: 'getBorderColor',\n      getTextBorderWidth: 'getBorderWidth'\n    }\n  }\n};\n\nexport const LINE_LAYER = {\n  type: PathLayer,\n  props: {\n    lineWidthUnits: 'widthUnits',\n    lineWidthScale: 'widthScale',\n    lineWidthMinPixels: 'widthMinPixels',\n    lineWidthMaxPixels: 'widthMaxPixels',\n    lineJointRounded: 'jointRounded',\n    lineCapRounded: 'capRounded',\n    lineMiterLimit: 'miterLimit',\n\n    getLineColor: 'getColor',\n    getLineWidth: 'getWidth'\n  }\n};\n\nexport const POLYGON_LAYER = {\n  type: SolidPolygonLayer,\n  props: {\n    extruded: 'extruded',\n    filled: 'filled',\n    wireframe: 'wireframe',\n    elevationScale: 'elevationScale',\n    material: 'material',\n\n    getElevation: 'getElevation',\n    getFillColor: 'getFillColor',\n    getLineColor: 'getLineColor'\n  }\n};\n\nexport function getDefaultProps({type, props}) {\n  const result = {};\n  for (const key in props) {\n    result[key] = type.defaultProps[props[key]];\n  }\n  return result;\n}\n\nexport function forwardProps(layer, mapping) {\n  const {transitions, updateTriggers} = layer.props;\n  const result = {\n    updateTriggers: {},\n    transitions: transitions && {\n      getPosition: transitions.geometry\n    }\n  };\n\n  for (const sourceKey in mapping) {\n    const targetKey = mapping[sourceKey];\n    let value = layer.props[sourceKey];\n    if (sourceKey.startsWith('get')) {\n      // isAccessor\n      value = layer.getSubLayerAccessor(value);\n      result.updateTriggers[targetKey] = updateTriggers[sourceKey];\n      if (transitions) {\n        result.transitions[targetKey] = transitions[sourceKey];\n      }\n    }\n    result[targetKey] = value;\n  }\n  return result;\n}\n"],"file":"sub-layer-map.js"}