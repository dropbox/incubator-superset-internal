{"version":3,"sources":["../../../src/icon-layer/icon-layer.js"],"names":["DEFAULT_COLOR","defaultProps","iconAtlas","type","value","async","iconMapping","sizeScale","min","billboard","sizeUnits","sizeMinPixels","sizeMaxPixels","Number","MAX_SAFE_INTEGER","alphaCutoff","max","getPosition","x","position","getIcon","icon","getColor","getSize","getAngle","getPixelOffset","onIconError","compare","optional","IconLayer","vs","fs","modules","project32","picking","state","iconManager","IconManager","context","gl","onUpdate","_onUpdate","bind","onError","_onError","attributeManager","getAttributeManager","addInstanced","instancePositions","size","fp64","use64bitPositions","transition","accessor","instanceSizes","defaultValue","instanceOffsets","transform","getInstanceOffset","instanceIconFrames","getInstanceIconFrame","instanceColorModes","getInstanceColorMode","instanceColors","props","colorFormat","length","normalized","instanceAngles","instancePixelOffset","oldProps","changeFlags","data","setProps","loadOptions","iconMappingChanged","prePacked","internalState","isAsyncPropLoading","autoPacking","dataChanged","updateTriggersChanged","all","invalidate","extensionsChanged","model","delete","_getModel","invalidateAll","finalize","uniforms","viewport","iconsTexture","getTexture","setUniforms","iconsTextureDim","width","height","metersPerPixel","draw","positions","Model","getShaders","id","geometry","Geometry","drawMode","attributes","Float32Array","isInstanced","setNeedsRedraw","evt","getCurrentLayer","log","error","rect","getIconMapping","anchorX","anchorY","mapping","mask","y","isLoaded","Layer","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {Layer, project32, picking, log} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './icon-layer-vertex.glsl';\nimport fs from './icon-layer-fragment.glsl';\nimport IconManager from './icon-manager';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n/*\n * @param {object} props\n * @param {Texture2D | string} props.iconAtlas - atlas image url or texture\n * @param {object} props.iconMapping - icon names mapped to icon definitions\n * @param {object} props.iconMapping[icon_name].x - x position of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].y - y position of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].width - width of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].height - height of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].anchorX - x anchor of icon on the atlas image,\n *   default to width / 2\n * @param {object} props.iconMapping[icon_name].anchorY - y anchor of icon on the atlas image,\n *   default to height / 2\n * @param {object} props.iconMapping[icon_name].mask - whether icon is treated as a transparency\n *   mask. If true, user defined color is applied. If false, original color from the image is\n *   applied. Default to false.\n * @param {number} props.size - icon size in pixels\n * @param {func} props.getPosition - returns anchor position of the icon, in [lng, lat, z]\n * @param {func} props.getIcon - returns icon name as a string\n * @param {func} props.getSize - returns icon size multiplier as a number\n * @param {func} props.getColor - returns color of the icon in [r, g, b, a]. Only works on icons\n *   with mask: true.\n * @param {func} props.getAngle - returns rotating angle (in degree) of the icon.\n */\nconst defaultProps = {\n  iconAtlas: {type: 'image', value: null, async: true},\n  iconMapping: {type: 'object', value: {}, async: true},\n  sizeScale: {type: 'number', value: 1, min: 0},\n  billboard: true,\n  sizeUnits: 'pixels',\n  sizeMinPixels: {type: 'number', min: 0, value: 0}, //  min point radius in pixels\n  sizeMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER}, // max point radius in pixels\n  alphaCutoff: {type: 'number', value: 0.05, min: 0, max: 1},\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getIcon: {type: 'accessor', value: x => x.icon},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getSize: {type: 'accessor', value: 1},\n  getAngle: {type: 'accessor', value: 0},\n  getPixelOffset: {type: 'accessor', value: [0, 0]},\n\n  onIconError: {type: 'function', value: null, compare: false, optional: true}\n};\n\nexport default class IconLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  initializeState() {\n    this.state = {\n      iconManager: new IconManager(this.context.gl, {\n        onUpdate: this._onUpdate.bind(this),\n        onError: this._onError.bind(this)\n      })\n    };\n\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceSizes: {\n        size: 1,\n        transition: true,\n        accessor: 'getSize',\n        defaultValue: 1\n      },\n      instanceOffsets: {size: 2, accessor: 'getIcon', transform: this.getInstanceOffset},\n      instanceIconFrames: {size: 4, accessor: 'getIcon', transform: this.getInstanceIconFrame},\n      instanceColorModes: {\n        size: 1,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getIcon',\n        transform: this.getInstanceColorMode\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceAngles: {\n        size: 1,\n        transition: true,\n        accessor: 'getAngle'\n      },\n      instancePixelOffset: {\n        size: 2,\n        transition: true,\n        accessor: 'getPixelOffset'\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  /* eslint-disable max-statements, complexity */\n  updateState({oldProps, props, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    const attributeManager = this.getAttributeManager();\n    const {iconAtlas, iconMapping, data, getIcon} = props;\n    const {iconManager} = this.state;\n\n    iconManager.setProps({loadOptions: props.loadOptions});\n\n    let iconMappingChanged = false;\n    const prePacked = iconAtlas || this.internalState.isAsyncPropLoading('iconAtlas');\n\n    // prepacked iconAtlas from user\n    if (prePacked) {\n      if (oldProps.iconAtlas !== props.iconAtlas) {\n        iconManager.setProps({iconAtlas, autoPacking: false});\n      }\n\n      if (oldProps.iconMapping !== props.iconMapping) {\n        iconManager.setProps({iconMapping});\n        iconMappingChanged = true;\n      }\n    } else {\n      // otherwise, use autoPacking\n      iconManager.setProps({autoPacking: true});\n    }\n\n    if (\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getIcon))\n    ) {\n      iconManager.setProps({data, getIcon});\n    }\n\n    if (iconMappingChanged) {\n      attributeManager.invalidate('instanceOffsets');\n      attributeManager.invalidate('instanceIconFrames');\n      attributeManager.invalidate('instanceColorModes');\n    }\n\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      attributeManager.invalidateAll();\n    }\n  }\n  /* eslint-enable max-statements, complexity */\n\n  get isLoaded() {\n    return super.isLoaded && this.state.iconManager.isLoaded;\n  }\n\n  finalizeState() {\n    super.finalizeState();\n    // Release resources held by the icon manager\n    this.state.iconManager.finalize();\n  }\n\n  draw({uniforms}) {\n    const {sizeScale, sizeMinPixels, sizeMaxPixels, sizeUnits, billboard, alphaCutoff} = this.props;\n    const {iconManager} = this.state;\n    const {viewport} = this.context;\n\n    const iconsTexture = iconManager.getTexture();\n    if (iconsTexture) {\n      this.state.model\n        .setUniforms(uniforms)\n        .setUniforms({\n          iconsTexture,\n          iconsTextureDim: [iconsTexture.width, iconsTexture.height],\n          sizeScale: sizeScale * (sizeUnits === 'pixels' ? viewport.metersPerPixel : 1),\n          sizeMinPixels,\n          sizeMaxPixels,\n          billboard,\n          alphaCutoff\n        })\n        .draw();\n    }\n  }\n\n  _getModel(gl) {\n    // The icon-layer vertex shader uses 2d positions\n    // specifed via: attribute vec2 positions;\n    const positions = [-1, -1, -1, 1, 1, 1, 1, -1];\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_FAN,\n        attributes: {\n          // The size must be explicitly passed here otherwise luma.gl\n          // will default to assuming that positions are 3D (x,y,z)\n          positions: {\n            size: 2,\n            value: new Float32Array(positions)\n          }\n        }\n      }),\n      isInstanced: true\n    });\n  }\n\n  _onUpdate() {\n    this.setNeedsRedraw();\n  }\n\n  _onError(evt) {\n    const {onIconError} = this.getCurrentLayer().props;\n    if (onIconError) {\n      onIconError(evt);\n    } else {\n      log.error(evt.error)();\n    }\n  }\n\n  getInstanceOffset(icon) {\n    const rect = this.state.iconManager.getIconMapping(icon);\n    return [rect.width / 2 - rect.anchorX || 0, rect.height / 2 - rect.anchorY || 0];\n  }\n\n  getInstanceColorMode(icon) {\n    const mapping = this.state.iconManager.getIconMapping(icon);\n    return mapping.mask ? 1 : 0;\n  }\n\n  getInstanceIconFrame(icon) {\n    const rect = this.state.iconManager.getIconMapping(icon);\n    return [rect.x || 0, rect.y || 0, rect.width || 0, rect.height || 0];\n  }\n}\n\nIconLayer.layerName = 'IconLayer';\nIconLayer.defaultProps = defaultProps;\n"],"file":"icon-layer.js"}