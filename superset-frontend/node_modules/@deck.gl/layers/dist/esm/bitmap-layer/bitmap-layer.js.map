{"version":3,"sources":["../../../src/bitmap-layer/bitmap-layer.js"],"names":["Layer","project32","picking","COORDINATE_SYSTEM","Model","Geometry","lngLatToWorld","createMesh","vs","fs","defaultProps","image","type","value","async","bounds","compare","_imageCoordinateSystem","DEFAULT","desaturate","min","max","transparentColor","tintColor","BitmapLayer","getShaders","modules","initializeState","attributeManager","getAttributeManager","remove","noAlloc","add","indices","size","isIndexed","update","attribute","state","mesh","positions","fp64","use64bitPositions","texCoords","updateState","props","oldProps","changeFlags","extensionsChanged","gl","context","model","delete","_getModel","invalidateAll","oldMesh","_createMesh","setVertexCount","vertexCount","key","invalidate","setState","_getCoordinateUniforms","getPickingInfo","info","color","bitmap","width","height","index","uv","unpackUVsFromRGB","pixel","Math","floor","disablePickingIndex","disablePicking","restorePickingColors","_updateAutoHighlight","encodePickingColor","normalizedBounds","Number","isFinite","viewport","resolution","id","geometry","drawMode","isInstanced","draw","opts","uniforms","moduleParameters","coordinateConversion","pickingActive","setUniforms","bitmapTexture","map","x","slice","LNGLAT","CARTESIAN","imageCoordinateSystem","Error","defaultImageCoordinateSystem","bottomLeft","topRight","layerName","u","v","fracUV","vFrac","uFrac"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport {Layer, project32, picking, COORDINATE_SYSTEM} from '@deck.gl/core';\nimport {Model, Geometry} from '@luma.gl/core';\nimport {lngLatToWorld} from '@math.gl/web-mercator';\n\nimport createMesh from './create-mesh';\n\nimport vs from './bitmap-layer-vertex';\nimport fs from './bitmap-layer-fragment';\n\nconst defaultProps = {\n  image: {type: 'image', value: null, async: true},\n  bounds: {type: 'array', value: [1, 0, 0, 1], compare: true},\n  _imageCoordinateSystem: COORDINATE_SYSTEM.DEFAULT,\n\n  desaturate: {type: 'number', min: 0, max: 1, value: 0},\n  // More context: because of the blending mode we're using for ground imagery,\n  // alpha is not effective when blending the bitmap layers with the base map.\n  // Instead we need to manually dim/blend rgb values with a background color.\n  transparentColor: {type: 'color', value: [0, 0, 0, 0]},\n  tintColor: {type: 'color', value: [255, 255, 255]}\n};\n\n/*\n * @class\n * @param {object} props\n * @param {number} props.transparentColor - color to interpret transparency to\n * @param {number} props.tintColor - color bias\n */\nexport default class BitmapLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n\n    attributeManager.remove(['instancePickingColors']);\n    const noAlloc = true;\n\n    attributeManager.add({\n      indices: {\n        size: 1,\n        isIndexed: true,\n        update: attribute => (attribute.value = this.state.mesh.indices),\n        noAlloc\n      },\n      positions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        update: attribute => (attribute.value = this.state.mesh.positions),\n        noAlloc\n      },\n      texCoords: {\n        size: 2,\n        update: attribute => (attribute.value = this.state.mesh.texCoords),\n        noAlloc\n      }\n    });\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    // setup model first\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager().invalidateAll();\n    }\n\n    const attributeManager = this.getAttributeManager();\n\n    if (props.bounds !== oldProps.bounds) {\n      const oldMesh = this.state.mesh;\n      const mesh = this._createMesh();\n      this.state.model.setVertexCount(mesh.vertexCount);\n      for (const key in mesh) {\n        if (oldMesh && oldMesh[key] !== mesh[key]) {\n          attributeManager.invalidate(key);\n        }\n      }\n      this.setState({mesh, ...this._getCoordinateUniforms()});\n    } else if (props._imageCoordinateSystem !== oldProps._imageCoordinateSystem) {\n      this.setState(this._getCoordinateUniforms());\n    }\n  }\n\n  getPickingInfo({info}) {\n    const {image} = this.props;\n\n    if (!info.color || !image) {\n      info.bitmap = null;\n      return info;\n    }\n\n    const {width, height} = image;\n\n    // Picking color doesn't represent object index in this layer\n    info.index = 0;\n\n    // Calculate uv and pixel in bitmap\n    const uv = unpackUVsFromRGB(info.color);\n\n    const pixel = [Math.floor(uv[0] * width), Math.floor(uv[1] * height)];\n\n    info.bitmap = {\n      size: {width, height}, // Size of bitmap\n      uv, // Floating point precision in 0-1 range\n      pixel // Truncated to integer and scaled to pixel size\n    };\n\n    return info;\n  }\n\n  // Override base Layer multi-depth picking logic\n  disablePickingIndex() {\n    this.setState({disablePicking: true});\n  }\n\n  restorePickingColors() {\n    this.setState({disablePicking: false});\n  }\n\n  _updateAutoHighlight(info) {\n    super._updateAutoHighlight({\n      ...info,\n      color: this.encodePickingColor(0)\n    });\n  }\n\n  _createMesh() {\n    const {bounds} = this.props;\n\n    let normalizedBounds = bounds;\n    // bounds as [minX, minY, maxX, maxY]\n    if (Number.isFinite(bounds[0])) {\n      /*\n        (minX0, maxY3) ---- (maxX2, maxY3)\n               |                  |\n               |                  |\n               |                  |\n        (minX0, minY1) ---- (maxX2, minY1)\n     */\n      normalizedBounds = [\n        [bounds[0], bounds[1]],\n        [bounds[0], bounds[3]],\n        [bounds[2], bounds[3]],\n        [bounds[2], bounds[1]]\n      ];\n    }\n\n    return createMesh(normalizedBounds, this.context.viewport.resolution);\n  }\n\n  _getModel(gl) {\n    if (!gl) {\n      return null;\n    }\n\n    /*\n      0,0 --- 1,0\n       |       |\n      0,1 --- 1,1\n    */\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLES,\n        vertexCount: 6\n      }),\n      isInstanced: false\n    });\n  }\n\n  draw(opts) {\n    const {uniforms, moduleParameters} = opts;\n    const {model, coordinateConversion, bounds, disablePicking} = this.state;\n    const {image, desaturate, transparentColor, tintColor} = this.props;\n\n    if (moduleParameters.pickingActive && disablePicking) {\n      return;\n    }\n\n    // // TODO fix zFighting\n    // Render the image\n    if (image && model) {\n      model\n        .setUniforms(uniforms)\n        .setUniforms({\n          bitmapTexture: image,\n          desaturate,\n          transparentColor: transparentColor.map(x => x / 255),\n          tintColor: tintColor.slice(0, 3).map(x => x / 255),\n          coordinateConversion,\n          bounds\n        })\n        .draw();\n    }\n  }\n\n  _getCoordinateUniforms() {\n    const {LNGLAT, CARTESIAN, DEFAULT} = COORDINATE_SYSTEM;\n    let {_imageCoordinateSystem: imageCoordinateSystem} = this.props;\n    if (imageCoordinateSystem !== DEFAULT) {\n      const {bounds} = this.props;\n      if (!Number.isFinite(bounds[0])) {\n        throw new Error('_imageCoordinateSystem only supports rectangular bounds');\n      }\n\n      // The default behavior (linearly interpolated tex coords)\n      const defaultImageCoordinateSystem = this.context.viewport.resolution ? LNGLAT : CARTESIAN;\n      imageCoordinateSystem = imageCoordinateSystem === LNGLAT ? LNGLAT : CARTESIAN;\n\n      if (imageCoordinateSystem === LNGLAT && defaultImageCoordinateSystem === CARTESIAN) {\n        // LNGLAT in Mercator, e.g. display LNGLAT-encoded image in WebMercator projection\n        return {coordinateConversion: -1, bounds};\n      }\n      if (imageCoordinateSystem === CARTESIAN && defaultImageCoordinateSystem === LNGLAT) {\n        // Mercator in LNGLAT, e.g. display WebMercator encoded image in Globe projection\n        const bottomLeft = lngLatToWorld([bounds[0], bounds[1]]);\n        const topRight = lngLatToWorld([bounds[2], bounds[3]]);\n        return {\n          coordinateConversion: 1,\n          bounds: [bottomLeft[0], bottomLeft[1], topRight[0], topRight[1]]\n        };\n      }\n    }\n    return {\n      coordinateConversion: 0,\n      bounds: [0, 0, 0, 0]\n    };\n  }\n}\n\nBitmapLayer.layerName = 'BitmapLayer';\nBitmapLayer.defaultProps = defaultProps;\n\n/**\n * Decode uv floats from rgb bytes where b contains 4-bit fractions of uv\n * @param {number[]} color\n * @returns {number[]} uvs\n * https://stackoverflow.com/questions/30242013/glsl-compressing-packing-multiple-0-1-colours-var4-into-a-single-var4-variab\n */\nfunction unpackUVsFromRGB(color) {\n  const [u, v, fracUV] = color;\n  const vFrac = (fracUV & 0xf0) / 256;\n  const uFrac = (fracUV & 0x0f) / 16;\n  return [(u + uFrac) / 256, (v + vFrac) / 256];\n}\n"],"file":"bitmap-layer.js"}