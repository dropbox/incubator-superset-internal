{"version":3,"sources":["../../../src/text-layer/utils.js"],"names":["log","MISSING_CHAR_WIDTH","SINGLE_LINE","nextPowOfTwo","number","Math","pow","ceil","log2","buildMapping","characterSet","getFontWidth","fontHeight","buffer","maxCanvasWidth","mapping","xOffset","yOffset","row","x","i","char","width","y","height","rowHeight","canvasHeight","getTextWidth","text","startIndex","endIndex","character","frameWidth","frame","breakAll","maxWidth","iconMapping","target","rowStartCharIndex","rowOffsetLeft","textWidth","push","breakWord","groupStartCharIndex","groupEndCharIndex","groupWidth","length","autoWrapping","wordBreak","undefined","result","transformRow","line","leftOffsets","rowSize","warn","codePointAt","transformParagraph","paragraph","lineHeight","Array","from","numCharacters","rowWidth","autoWrappingEnabled","isFinite","size","rowOffsetTop","lineStartIndex","lineEndIndex","rows","rowIndex","rowStart","rowEnd","j","max","getTextFromBuffer","value","stride","offset","startIndices","bytesPerElement","BYTES_PER_ELEMENT","elementStride","elementOffset","characterCount","autoCharacterSet","Set","texts","codes","constructor","index","codesAtIndex","subarray","String","fromCodePoint","apply","forEach","add","charCode"],"mappings":"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","sourcesContent":["/* eslint-disable max-statements, max-params, complexity, max-depth */\n// TODO merge with icon-layer/icon-manager\nimport {log} from '@deck.gl/core';\n\nconst MISSING_CHAR_WIDTH = 32;\nconst SINGLE_LINE = [];\n\nexport function nextPowOfTwo(number) {\n  return Math.pow(2, Math.ceil(Math.log2(number)));\n}\n\n/**\n * Generate character mapping table or update from an existing mapping table\n * @param characterSet {Array|Set} new characters\n * @param getFontWidth {Function} function to get width of each character\n * @param fontHeight {Number} height of font\n * @param buffer {Number} buffer surround each character\n * @param maxCanvasWidth {Number} max width of font atlas\n * @param mapping {Object} old mapping table\n * @param xOffset {Number} x position of last character in old mapping table\n * @param yOffset {Number} y position of last character in old mapping table\n * @returns {{\n *   mapping: Object,\n *   xOffset: Number, x position of last character\n *   yOffset: Number, y position of last character in old mapping table\n *   canvasHeight: Number, height of the font atlas canvas, power of 2\n *  }}\n */\nexport function buildMapping({\n  characterSet,\n  getFontWidth,\n  fontHeight,\n  buffer,\n  maxCanvasWidth,\n  mapping = {},\n  xOffset = 0,\n  yOffset = 0\n}) {\n  let row = 0;\n  // continue from x position of last character in the old mapping\n  let x = xOffset;\n\n  let i = 0;\n  for (const char of characterSet) {\n    if (!mapping[char]) {\n      // measure texts\n      // TODO - use Advanced text metrics when they are adopted:\n      // https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics\n      const width = getFontWidth(char, i++);\n\n      if (x + width + buffer * 2 > maxCanvasWidth) {\n        x = 0;\n        row++;\n      }\n      mapping[char] = {\n        x: x + buffer,\n        y: yOffset + row * (fontHeight + buffer * 2) + buffer,\n        width,\n        height: fontHeight\n      };\n      x += width + buffer * 2;\n    }\n  }\n\n  const rowHeight = fontHeight + buffer * 2;\n\n  return {\n    mapping,\n    xOffset: x,\n    yOffset: yOffset + row * rowHeight,\n    canvasHeight: nextPowOfTwo(yOffset + (row + 1) * rowHeight)\n  };\n}\n\nfunction getTextWidth(text, startIndex, endIndex, mapping) {\n  let width = 0;\n  for (let i = startIndex; i < endIndex; i++) {\n    const character = text[i];\n    let frameWidth = null;\n    const frame = mapping && mapping[character];\n    if (frame) {\n      frameWidth = frame.width;\n    }\n\n    width += frameWidth;\n  }\n\n  return width;\n}\n\nfunction breakAll(text, startIndex, endIndex, maxWidth, iconMapping, target) {\n  let rowStartCharIndex = startIndex;\n  let rowOffsetLeft = 0;\n\n  for (let i = startIndex; i < endIndex; i++) {\n    // 2. figure out where to break lines\n    const textWidth = getTextWidth(text, i, i + 1, iconMapping);\n    if (rowOffsetLeft + textWidth > maxWidth) {\n      if (rowStartCharIndex < i) {\n        target.push(i);\n      }\n      rowStartCharIndex = i;\n      rowOffsetLeft = 0;\n    }\n    rowOffsetLeft += textWidth;\n  }\n\n  return rowOffsetLeft;\n}\n\nfunction breakWord(text, startIndex, endIndex, maxWidth, iconMapping, target) {\n  let rowStartCharIndex = startIndex;\n  let groupStartCharIndex = startIndex;\n  let groupEndCharIndex = startIndex;\n  let rowOffsetLeft = 0;\n\n  for (let i = startIndex; i < endIndex; i++) {\n    // 1. break text into word groups\n    //  - if current char is white space\n    //  - else if next char is white space\n    //  - else if reach last char\n    if (text[i] === ' ') {\n      groupEndCharIndex = i + 1;\n    } else if (text[i + 1] === ' ' || i + 1 === endIndex) {\n      groupEndCharIndex = i + 1;\n    }\n\n    if (groupEndCharIndex > groupStartCharIndex) {\n      // 2. break text into next row at maxWidth\n      let groupWidth = getTextWidth(text, groupStartCharIndex, groupEndCharIndex, iconMapping);\n      if (rowOffsetLeft + groupWidth > maxWidth) {\n        if (rowStartCharIndex < groupStartCharIndex) {\n          target.push(groupStartCharIndex);\n          rowStartCharIndex = groupStartCharIndex;\n          rowOffsetLeft = 0;\n        }\n\n        // if a single text group is bigger than maxWidth, then `break-all`\n        if (groupWidth > maxWidth) {\n          groupWidth = breakAll(\n            text,\n            groupStartCharIndex,\n            groupEndCharIndex,\n            maxWidth,\n            iconMapping,\n            target\n          );\n          // move reference to last row\n          rowStartCharIndex = target[target.length - 1];\n        }\n      }\n      groupStartCharIndex = groupEndCharIndex;\n      rowOffsetLeft += groupWidth;\n    }\n  }\n\n  return rowOffsetLeft;\n}\n\n// Returns a list of indices where line breaks should be inserted\nexport function autoWrapping(text, wordBreak, maxWidth, iconMapping, startIndex = 0, endIndex) {\n  if (endIndex === undefined) {\n    endIndex = text.length;\n  }\n  const result = [];\n  if (wordBreak === 'break-all') {\n    breakAll(text, startIndex, endIndex, maxWidth, iconMapping, result);\n  } else {\n    breakWord(text, startIndex, endIndex, maxWidth, iconMapping, result);\n  }\n  return result;\n}\n\nfunction transformRow(line, startIndex, endIndex, iconMapping, leftOffsets, rowSize) {\n  let x = 0;\n  let rowHeight = 0;\n\n  for (let i = startIndex; i < endIndex; i++) {\n    const character = line[i];\n    const frame = iconMapping[character];\n    if (frame) {\n      if (!rowHeight) {\n        // frame.height should be a constant\n        rowHeight = frame.height;\n      }\n      leftOffsets[i] = x + frame.width / 2;\n      x += frame.width;\n    } else {\n      log.warn(`Missing character: ${character} (${character.codePointAt(0)})`)();\n      leftOffsets[i] = x;\n      x += MISSING_CHAR_WIDTH;\n    }\n  }\n\n  rowSize[0] = x;\n  rowSize[1] = rowHeight;\n}\n\n/**\n * Transform a text paragraph to an array of characters, each character contains\n * @param paragraph: {String}\n * @param iconMapping {Object} character mapping table for retrieving a character from font atlas\n * @param lineHeight {Number} css line-height\n * @param wordBreak {String} css word-break option\n * @param maxWidth {number} css max-width\n * @param transformedData {Array} output transformed data array, each datum contains\n *   - text: character\n *   - index: character index in the paragraph\n *   - x: x offset in the row,\n *   - y: y offset in the paragraph\n *   - size: [width, height] size of the paragraph\n *   - rowSize: [rowWidth, rowHeight] size of the row\n *   - len: length of the paragraph\n */\nexport function transformParagraph(paragraph, lineHeight, wordBreak, maxWidth, iconMapping) {\n  // Break into an array of characters\n  // When dealing with double-length unicode characters, `str.length` or `str[i]` do not work\n  paragraph = Array.from(paragraph);\n  const numCharacters = paragraph.length;\n  const x = new Array(numCharacters);\n  const y = new Array(numCharacters);\n  const rowWidth = new Array(numCharacters);\n  const autoWrappingEnabled =\n    (wordBreak === 'break-word' || wordBreak === 'break-all') && isFinite(maxWidth) && maxWidth > 0;\n\n  // maxWidth and height of the paragraph\n  const size = [0, 0];\n  const rowSize = [];\n  let rowOffsetTop = 0;\n  let lineStartIndex = 0;\n  let lineEndIndex = 0;\n\n  for (let i = 0; i <= numCharacters; i++) {\n    const char = paragraph[i];\n    if (char === '\\n' || i === numCharacters) {\n      lineEndIndex = i;\n    }\n\n    if (lineEndIndex > lineStartIndex) {\n      const rows = autoWrappingEnabled\n        ? autoWrapping(paragraph, wordBreak, maxWidth, iconMapping, lineStartIndex, lineEndIndex)\n        : SINGLE_LINE;\n\n      for (let rowIndex = 0; rowIndex <= rows.length; rowIndex++) {\n        const rowStart = rowIndex === 0 ? lineStartIndex : rows[rowIndex - 1];\n        const rowEnd = rowIndex < rows.length ? rows[rowIndex] : lineEndIndex;\n        transformRow(paragraph, rowStart, rowEnd, iconMapping, x, rowSize);\n        for (let j = rowStart; j < rowEnd; j++) {\n          y[j] = rowOffsetTop + rowSize[1] / 2;\n          rowWidth[j] = rowSize[0];\n        }\n\n        rowOffsetTop = rowOffsetTop + rowSize[1] * lineHeight;\n        size[0] = Math.max(size[0], rowSize[0]);\n      }\n      lineStartIndex = lineEndIndex;\n    }\n\n    if (char === '\\n') {\n      // Make sure result.length matches paragraph.length\n      x[lineStartIndex] = 0;\n      y[lineStartIndex] = 0;\n      rowWidth[lineStartIndex] = 0;\n      lineStartIndex++;\n    }\n  }\n\n  // last row\n  size[1] = rowOffsetTop;\n  return {x, y, rowWidth, size};\n}\n\nexport function getTextFromBuffer({value, length, stride, offset, startIndices, characterSet}) {\n  const bytesPerElement = value.BYTES_PER_ELEMENT;\n  const elementStride = stride ? stride / bytesPerElement : 1;\n  const elementOffset = offset ? offset / bytesPerElement : 0;\n  const characterCount =\n    startIndices[length] || Math.ceil((value.length - elementOffset) / elementStride);\n  const autoCharacterSet = characterSet && new Set();\n\n  const texts = new Array(length);\n\n  let codes = value;\n  if (elementStride > 1 || elementOffset > 0) {\n    codes = new value.constructor(characterCount);\n    for (let i = 0; i < characterCount; i++) {\n      codes[i] = value[i * elementStride + elementOffset];\n    }\n  }\n\n  for (let index = 0; index < length; index++) {\n    const startIndex = startIndices[index];\n    const endIndex = startIndices[index + 1] || characterCount;\n    const codesAtIndex = codes.subarray(startIndex, endIndex);\n    texts[index] = String.fromCodePoint.apply(null, codesAtIndex);\n    if (autoCharacterSet) {\n      codesAtIndex.forEach(autoCharacterSet.add, autoCharacterSet);\n    }\n  }\n\n  if (autoCharacterSet) {\n    for (const charCode of autoCharacterSet) {\n      characterSet.add(String.fromCodePoint(charCode));\n    }\n  }\n\n  return {texts, characterCount};\n}\n"],"file":"utils.js"}