{"version":3,"sources":["../../../src/text-layer/font-atlas-manager.js"],"names":["TinySDF","buildMapping","LRUCache","getDefaultCharacterSet","charSet","i","push","String","fromCharCode","DEFAULT_CHAR_SET","DEFAULT_FONT_FAMILY","DEFAULT_FONT_WEIGHT","DEFAULT_FONT_SIZE","DEFAULT_BUFFER","DEFAULT_CUTOFF","DEFAULT_RADIUS","MAX_CANVAS_WIDTH","BASELINE_SCALE","HEIGHT_SCALE","CACHE_LIMIT","cache","VALID_PROPS","getNewChars","key","characterSet","cachedFontAtlas","get","newChars","cachedMapping","mapping","cachedCharSet","Object","keys","Set","Array","forEach","char","has","populateAlphaChannel","alphaChannel","imageData","length","data","setTextStyle","ctx","fontFamily","fontSize","fontWeight","font","fillStyle","textBaseline","textAlign","FontAtlasManager","constructor","props","buffer","sdf","cutoff","radius","_key","_atlas","texture","scale","setProps","prop","oldKey","_getKey","fontAtlas","_generateFontAtlas","set","canvas","document","createElement","width","getContext","canvasHeight","xOffset","yOffset","getFontWidth","measureText","fontHeight","maxCanvasWidth","height","getImageData","putImageData","tinySDF","size","draw","x","y","fillText"],"mappings":"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","sourcesContent":["/* global document */\nimport TinySDF from '@mapbox/tiny-sdf';\n\nimport {buildMapping} from './utils';\nimport LRUCache from './lru-cache';\n\nfunction getDefaultCharacterSet() {\n  const charSet = [];\n  for (let i = 32; i < 128; i++) {\n    charSet.push(String.fromCharCode(i));\n  }\n  return charSet;\n}\n\nexport const DEFAULT_CHAR_SET = getDefaultCharacterSet();\nexport const DEFAULT_FONT_FAMILY = 'Monaco, monospace';\nexport const DEFAULT_FONT_WEIGHT = 'normal';\nexport const DEFAULT_FONT_SIZE = 64;\nexport const DEFAULT_BUFFER = 4;\nexport const DEFAULT_CUTOFF = 0.25;\nexport const DEFAULT_RADIUS = 12;\n\nconst MAX_CANVAS_WIDTH = 1024;\n\nconst BASELINE_SCALE = 0.9;\nconst HEIGHT_SCALE = 1.2;\n\n// only preserve latest three fontAtlas\nconst CACHE_LIMIT = 3;\n\n/**\n * [key]: {\n *   xOffset, // x position of last character in mapping\n *   yOffset, // y position of last character in mapping\n *   mapping, // x, y coordinate of each character in shared `fontAtlas`\n *   data, // canvas\n *   width. // canvas.width,\n *   height, // canvas.height\n * }\n *\n */\nconst cache = new LRUCache(CACHE_LIMIT);\n\nconst VALID_PROPS = [\n  'fontFamily',\n  'fontWeight',\n  'characterSet',\n  'fontSize',\n  'sdf',\n  'buffer',\n  'cutoff',\n  'radius'\n];\n\n/**\n * get all the chars not in cache\n * @param key cache key\n * @param characterSet (Array|Set)\n * @returns {Array} chars not in cache\n */\nfunction getNewChars(key, characterSet) {\n  const cachedFontAtlas = cache.get(key);\n  if (!cachedFontAtlas) {\n    return characterSet;\n  }\n\n  const newChars = [];\n  const cachedMapping = cachedFontAtlas.mapping;\n  let cachedCharSet = Object.keys(cachedMapping);\n  cachedCharSet = new Set(cachedCharSet);\n\n  let charSet = characterSet;\n  if (charSet instanceof Array) {\n    charSet = new Set(charSet);\n  }\n\n  charSet.forEach(char => {\n    if (!cachedCharSet.has(char)) {\n      newChars.push(char);\n    }\n  });\n\n  return newChars;\n}\n\nfunction populateAlphaChannel(alphaChannel, imageData) {\n  // populate distance value from tinySDF to image alpha channel\n  for (let i = 0; i < alphaChannel.length; i++) {\n    imageData.data[4 * i + 3] = alphaChannel[i];\n  }\n}\n\nfunction setTextStyle(ctx, fontFamily, fontSize, fontWeight) {\n  ctx.font = `${fontWeight} ${fontSize}px ${fontFamily}`;\n  ctx.fillStyle = '#000';\n  ctx.textBaseline = 'baseline';\n  ctx.textAlign = 'left';\n}\n\nexport default class FontAtlasManager {\n  constructor() {\n    // font settings\n    this.props = {\n      fontFamily: DEFAULT_FONT_FAMILY,\n      fontWeight: DEFAULT_FONT_WEIGHT,\n      characterSet: DEFAULT_CHAR_SET,\n      fontSize: DEFAULT_FONT_SIZE,\n      buffer: DEFAULT_BUFFER,\n      // sdf only props\n      // https://github.com/mapbox/tiny-sdf\n      sdf: false,\n      cutoff: DEFAULT_CUTOFF,\n      radius: DEFAULT_RADIUS\n    };\n\n    // key is used for caching generated fontAtlas\n    this._key = null;\n    this._atlas = null;\n  }\n\n  get texture() {\n    return this._atlas;\n  }\n\n  get mapping() {\n    return this._atlas && this._atlas.mapping;\n  }\n\n  get scale() {\n    return HEIGHT_SCALE;\n  }\n\n  setProps(props = {}) {\n    VALID_PROPS.forEach(prop => {\n      if (prop in props) {\n        this.props[prop] = props[prop];\n      }\n    });\n\n    // update cache key\n    const oldKey = this._key;\n    this._key = this._getKey();\n\n    const charSet = getNewChars(this._key, this.props.characterSet);\n    const cachedFontAtlas = cache.get(this._key);\n\n    // if a fontAtlas associated with the new settings is cached and\n    // there are no new chars\n    if (cachedFontAtlas && charSet.length === 0) {\n      // update texture with cached fontAtlas\n      if (this._key !== oldKey) {\n        this._atlas = cachedFontAtlas;\n      }\n      return;\n    }\n\n    // update fontAtlas with new settings\n    const fontAtlas = this._generateFontAtlas(this._key, charSet, cachedFontAtlas);\n    this._atlas = fontAtlas;\n\n    // update cache\n    cache.set(this._key, fontAtlas);\n  }\n\n  _generateFontAtlas(key, characterSet, cachedFontAtlas) {\n    const {fontFamily, fontWeight, fontSize, buffer, sdf, radius, cutoff} = this.props;\n    let canvas = cachedFontAtlas && cachedFontAtlas.data;\n    if (!canvas) {\n      canvas = document.createElement('canvas');\n      canvas.width = MAX_CANVAS_WIDTH;\n    }\n    const ctx = canvas.getContext('2d');\n\n    setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n\n    // 1. build mapping\n    const {mapping, canvasHeight, xOffset, yOffset} = buildMapping({\n      getFontWidth: char => ctx.measureText(char).width,\n      fontHeight: fontSize * HEIGHT_SCALE,\n      buffer,\n      characterSet,\n      maxCanvasWidth: MAX_CANVAS_WIDTH,\n      ...(cachedFontAtlas && {\n        mapping: cachedFontAtlas.mapping,\n        xOffset: cachedFontAtlas.xOffset,\n        yOffset: cachedFontAtlas.yOffset\n      })\n    });\n\n    // 2. update canvas\n    // copy old canvas data to new canvas only when height changed\n    if (canvas.height !== canvasHeight) {\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      canvas.height = canvasHeight;\n      ctx.putImageData(imageData, 0, 0);\n    }\n    setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n\n    // 3. layout characters\n    if (sdf) {\n      const tinySDF = new TinySDF(fontSize, buffer, radius, cutoff, fontFamily, fontWeight);\n      // used to store distance values from tinySDF\n      // tinySDF.size equals `fontSize + buffer * 2`\n      const imageData = ctx.getImageData(0, 0, tinySDF.size, tinySDF.size);\n\n      for (const char of characterSet) {\n        populateAlphaChannel(tinySDF.draw(char), imageData);\n        ctx.putImageData(imageData, mapping[char].x - buffer, mapping[char].y + buffer);\n      }\n    } else {\n      for (const char of characterSet) {\n        ctx.fillText(char, mapping[char].x, mapping[char].y + fontSize * BASELINE_SCALE);\n      }\n    }\n\n    return {\n      xOffset,\n      yOffset,\n      mapping,\n      data: canvas,\n      width: canvas.width,\n      height: canvas.height\n    };\n  }\n\n  _getKey() {\n    const {fontFamily, fontWeight, fontSize, buffer, sdf, radius, cutoff} = this.props;\n    if (sdf) {\n      return `${fontFamily} ${fontWeight} ${fontSize} ${buffer} ${radius} ${cutoff}`;\n    }\n    return `${fontFamily} ${fontWeight} ${fontSize} ${buffer}`;\n  }\n}\n"],"file":"font-atlas-manager.js"}