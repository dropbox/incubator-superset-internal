{"version":3,"sources":["../../../src/text-layer/text-layer.js"],"names":["CompositeLayer","createIterable","MultiIconLayer","FontAtlasManager","DEFAULT_CHAR_SET","DEFAULT_FONT_FAMILY","DEFAULT_FONT_WEIGHT","DEFAULT_FONT_SIZE","DEFAULT_BUFFER","DEFAULT_RADIUS","DEFAULT_CUTOFF","transformParagraph","getTextFromBuffer","TextBackgroundLayer","DEFAULT_FONT_SETTINGS","fontSize","buffer","sdf","radius","cutoff","smoothing","TEXT_ANCHOR","start","middle","end","ALIGNMENT_BASELINE","top","center","bottom","DEFAULT_COLOR","DEFAULT_LINE_HEIGHT","FONT_SETTINGS_PROPS","defaultProps","billboard","sizeScale","sizeUnits","sizeMinPixels","sizeMaxPixels","Number","MAX_SAFE_INTEGER","background","getBackgroundColor","type","value","getBorderColor","getBorderWidth","backgroundPadding","characterSet","fontFamily","fontWeight","lineHeight","outlineWidth","min","outlineColor","fontSettings","wordBreak","maxWidth","getText","x","text","getPosition","position","getColor","getSize","getAngle","getTextAnchor","getAlignmentBaseline","getPixelOffset","backgroundColor","deprecatedFor","TextLayer","initializeState","state","styleVersion","fontAtlasManager","updateState","props","oldProps","changeFlags","textChanged","dataChanged","updateTriggersChanged","all","oldCharacterSet","_updateText","fontChanged","_fontChanged","_updateFontAtlas","styleChanged","setState","getPickingInfo","info","object","index","data","setProps","oldFontSettings","some","prop","textBuffer","attributes","startIndices","numInstances","autoCharacterSet","Set","texts","characterCount","ArrayBuffer","isView","length","_","iterable","objectInfo","Array","from","forEach","add","push","getBoundingRect","iconMapping","mapping","paragraph","size","width","height","anchorX","anchorY","getIconOffsets","y","rowWidth","numCharacters","offsets","i","rowOffset","renderLayers","scale","texture","_dataDiff","transitions","updateTriggers","CharactersLayerClass","getSubLayerClass","BackgroundLayerClass","getFillColor","getLineColor","getLineWidth","padding","getSubLayerProps","id","autoHighlight","bind","isFinite","iconAtlas","getIcon","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer, createIterable} from '@deck.gl/core';\nimport MultiIconLayer from './multi-icon-layer/multi-icon-layer';\nimport FontAtlasManager, {\n  DEFAULT_CHAR_SET,\n  DEFAULT_FONT_FAMILY,\n  DEFAULT_FONT_WEIGHT,\n  DEFAULT_FONT_SIZE,\n  DEFAULT_BUFFER,\n  DEFAULT_RADIUS,\n  DEFAULT_CUTOFF\n} from './font-atlas-manager';\nimport {transformParagraph, getTextFromBuffer} from './utils';\n\nimport TextBackgroundLayer from './text-background-layer/text-background-layer';\n\nconst DEFAULT_FONT_SETTINGS = {\n  fontSize: DEFAULT_FONT_SIZE,\n  buffer: DEFAULT_BUFFER,\n  sdf: false,\n  radius: DEFAULT_RADIUS,\n  cutoff: DEFAULT_CUTOFF,\n  smoothing: 0.1\n};\n\nconst TEXT_ANCHOR = {\n  start: 1,\n  middle: 0,\n  end: -1\n};\n\nconst ALIGNMENT_BASELINE = {\n  top: 1,\n  center: 0,\n  bottom: -1\n};\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst DEFAULT_LINE_HEIGHT = 1.0;\n\nconst FONT_SETTINGS_PROPS = ['fontSize', 'buffer', 'sdf', 'radius', 'cutoff'];\n\nconst defaultProps = {\n  billboard: true,\n  sizeScale: 1,\n  sizeUnits: 'pixels',\n  sizeMinPixels: 0,\n  sizeMaxPixels: Number.MAX_SAFE_INTEGER,\n\n  background: false,\n  getBackgroundColor: {type: 'accessor', value: [255, 255, 255, 255]},\n  getBorderColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getBorderWidth: {type: 'accessor', value: 0},\n  backgroundPadding: {type: 'array', value: [0, 0, 0, 0]},\n\n  characterSet: {type: 'object', value: DEFAULT_CHAR_SET},\n  fontFamily: DEFAULT_FONT_FAMILY,\n  fontWeight: DEFAULT_FONT_WEIGHT,\n  lineHeight: DEFAULT_LINE_HEIGHT,\n  outlineWidth: {type: 'number', value: 0, min: 0},\n  outlineColor: {type: 'color', value: DEFAULT_COLOR},\n  fontSettings: {},\n\n  // auto wrapping options\n  wordBreak: 'break-word',\n  maxWidth: {type: 'number', value: -1},\n\n  getText: {type: 'accessor', value: x => x.text},\n  getPosition: {type: 'accessor', value: x => x.position},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getSize: {type: 'accessor', value: 32},\n  getAngle: {type: 'accessor', value: 0},\n  getTextAnchor: {type: 'accessor', value: 'middle'},\n  getAlignmentBaseline: {type: 'accessor', value: 'center'},\n  getPixelOffset: {type: 'accessor', value: [0, 0]},\n\n  // deprecated\n  backgroundColor: {deprecatedFor: ['background', 'getBackgroundColor']}\n};\n\nexport default class TextLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      styleVersion: 0,\n      fontAtlasManager: new FontAtlasManager()\n    };\n  }\n\n  // eslint-disable-next-line complexity\n  updateState({props, oldProps, changeFlags}) {\n    const textChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getText));\n    const oldCharacterSet = this.state.characterSet;\n\n    if (textChanged) {\n      this._updateText();\n    }\n\n    const fontChanged =\n      oldCharacterSet !== this.state.characterSet || this._fontChanged(oldProps, props);\n\n    if (fontChanged) {\n      this._updateFontAtlas(oldProps, props);\n    }\n\n    const styleChanged =\n      fontChanged ||\n      props.lineHeight !== oldProps.lineHeight ||\n      props.wordBreak !== oldProps.wordBreak ||\n      props.maxWidth !== oldProps.maxWidth;\n\n    if (styleChanged) {\n      this.setState({\n        styleVersion: this.state.styleVersion + 1\n      });\n    }\n  }\n\n  getPickingInfo({info}) {\n    // because `TextLayer` assign the same pickingInfoIndex for one text label,\n    // here info.index refers the index of text label in props.data\n    info.object = info.index >= 0 ? this.props.data[info.index] : null;\n    return info;\n  }\n\n  _updateFontAtlas(oldProps, props) {\n    const {fontSettings, fontFamily, fontWeight} = props;\n\n    // generate test characterSet\n    const {fontAtlasManager, characterSet} = this.state;\n    fontAtlasManager.setProps({\n      ...DEFAULT_FONT_SETTINGS,\n      ...fontSettings,\n      characterSet,\n      fontFamily,\n      fontWeight\n    });\n  }\n\n  _fontChanged(oldProps, props) {\n    if (oldProps.fontFamily !== props.fontFamily || oldProps.fontWeight !== props.fontWeight) {\n      return true;\n    }\n\n    if (oldProps.fontSettings === props.fontSettings) {\n      return false;\n    }\n\n    const oldFontSettings = oldProps.fontSettings || {};\n    const fontSettings = props.fontSettings || {};\n\n    return FONT_SETTINGS_PROPS.some(prop => oldFontSettings[prop] !== fontSettings[prop]);\n  }\n\n  // Text strings are variable width objects\n  // Count characters and start offsets\n  _updateText() {\n    const {data, characterSet} = this.props;\n    const textBuffer = data.attributes && data.attributes.getText;\n    let {getText} = this.props;\n    let {startIndices} = data;\n    let numInstances;\n\n    const autoCharacterSet = characterSet === 'auto' && new Set();\n\n    if (textBuffer && startIndices) {\n      const {texts, characterCount} = getTextFromBuffer({\n        ...(ArrayBuffer.isView(textBuffer) ? {value: textBuffer} : textBuffer),\n        length: data.length,\n        startIndices,\n        characterSet: autoCharacterSet\n      });\n      numInstances = characterCount;\n      getText = (_, {index}) => texts[index];\n    } else {\n      const {iterable, objectInfo} = createIterable(data);\n      startIndices = [0];\n      numInstances = 0;\n\n      for (const object of iterable) {\n        objectInfo.index++;\n        // Break into an array of characters\n        // When dealing with double-length unicode characters, `str.length` or `str[i]` do not work\n        const text = Array.from(getText(object, objectInfo) || '');\n        if (autoCharacterSet) {\n          text.forEach(autoCharacterSet.add, autoCharacterSet);\n        }\n        numInstances += text.length;\n        startIndices.push(numInstances);\n      }\n    }\n\n    this.setState({\n      getText,\n      startIndices,\n      numInstances,\n      characterSet: autoCharacterSet || characterSet\n    });\n  }\n\n  // Returns the x, y offsets of each character in a text string\n  getBoundingRect(object, objectInfo) {\n    const iconMapping = this.state.fontAtlasManager.mapping;\n    const {getText} = this.state;\n    const {wordBreak, maxWidth, lineHeight, getTextAnchor, getAlignmentBaseline} = this.props;\n\n    const paragraph = getText(object, objectInfo) || '';\n    const {\n      size: [width, height]\n    } = transformParagraph(paragraph, lineHeight, wordBreak, maxWidth, iconMapping);\n    const anchorX =\n      TEXT_ANCHOR[\n        typeof getTextAnchor === 'function' ? getTextAnchor(object, objectInfo) : getTextAnchor\n      ];\n    const anchorY =\n      ALIGNMENT_BASELINE[\n        typeof getAlignmentBaseline === 'function'\n          ? getAlignmentBaseline(object, objectInfo)\n          : getAlignmentBaseline\n      ];\n\n    return [((anchorX - 1) * width) / 2, ((anchorY - 1) * height) / 2, width, height];\n  }\n\n  // Returns the x, y, w, h of each text object\n  getIconOffsets(object, objectInfo) {\n    const iconMapping = this.state.fontAtlasManager.mapping;\n    const {getText} = this.state;\n    const {wordBreak, maxWidth, lineHeight, getTextAnchor, getAlignmentBaseline} = this.props;\n\n    const paragraph = getText(object, objectInfo) || '';\n    const {\n      x,\n      y,\n      rowWidth,\n      size: [width, height]\n    } = transformParagraph(paragraph, lineHeight, wordBreak, maxWidth, iconMapping);\n    const anchorX =\n      TEXT_ANCHOR[\n        typeof getTextAnchor === 'function' ? getTextAnchor(object, objectInfo) : getTextAnchor\n      ];\n    const anchorY =\n      ALIGNMENT_BASELINE[\n        typeof getAlignmentBaseline === 'function'\n          ? getAlignmentBaseline(object, objectInfo)\n          : getAlignmentBaseline\n      ];\n\n    const numCharacters = x.length;\n    const offsets = new Array(numCharacters * 2);\n    let index = 0;\n\n    for (let i = 0; i < numCharacters; i++) {\n      // For a multi-line object, offset in x-direction needs consider\n      // the row offset in the paragraph and the object offset in the row\n      const rowOffset = ((1 - anchorX) * (width - rowWidth[i])) / 2;\n      offsets[index++] = ((anchorX - 1) * width) / 2 + rowOffset + x[i];\n      offsets[index++] = ((anchorY - 1) * height) / 2 + y[i];\n    }\n    return offsets;\n  }\n\n  renderLayers() {\n    const {\n      startIndices,\n      numInstances,\n      getText,\n      fontAtlasManager: {scale, texture, mapping},\n      styleVersion\n    } = this.state;\n\n    const {\n      data,\n      _dataDiff,\n      getPosition,\n      getColor,\n      getSize,\n      getAngle,\n      getPixelOffset,\n      getBackgroundColor,\n      getBorderColor,\n      getBorderWidth,\n      backgroundPadding,\n      background,\n      billboard,\n      fontSettings,\n      outlineWidth,\n      outlineColor,\n      sizeScale,\n      sizeUnits,\n      sizeMinPixels,\n      sizeMaxPixels,\n      transitions,\n      updateTriggers\n    } = this.props;\n\n    const CharactersLayerClass = this.getSubLayerClass('characters', MultiIconLayer);\n    const BackgroundLayerClass = this.getSubLayerClass('background', TextBackgroundLayer);\n\n    return [\n      background &&\n        new BackgroundLayerClass(\n          {\n            // background props\n            getFillColor: getBackgroundColor,\n            getLineColor: getBorderColor,\n            getLineWidth: getBorderWidth,\n            padding: backgroundPadding,\n\n            // props shared with characters layer\n            getPosition,\n            getSize,\n            getAngle,\n            getPixelOffset,\n            billboard,\n            sizeScale: sizeScale / this.state.fontAtlasManager.props.fontSize,\n            sizeUnits,\n            sizeMinPixels,\n            sizeMaxPixels,\n\n            transitions: transitions && {\n              getPosition: transitions.getPosition,\n              getAngle: transitions.getAngle,\n              getSize: transitions.getSize,\n              getFillColor: transitions.getBackgroundColor,\n              getLineColor: transitions.getBorderColor,\n              getLineWidth: transitions.getBorderWidth,\n              getPixelOffset: transitions.getPixelOffset\n            }\n          },\n          this.getSubLayerProps({\n            id: 'background',\n            updateTriggers: {\n              getPosition: updateTriggers.getPosition,\n              getAngle: updateTriggers.getAngle,\n              getSize: updateTriggers.getSize,\n              getFillColor: updateTriggers.getBackgroundColor,\n              getLineColor: updateTriggers.getBorderColor,\n              getLineWidth: updateTriggers.getBorderWidth,\n              getPixelOffset: updateTriggers.getPixelOffset,\n              getBoundingRect: {\n                getText: updateTriggers.getText,\n                getTextAnchor: updateTriggers.getTextAnchor,\n                getAlignmentBaseline: updateTriggers.getAlignmentBaseline,\n                styleVersion\n              }\n            }\n          }),\n          {\n            data: data.attributes\n              ? {length: data.length, attributes: data.attributes.background || {}}\n              : data,\n            _dataDiff,\n            // Maintain the same background behavior as <=8.3. Remove in v9?\n            autoHighlight: false,\n            getBoundingRect: this.getBoundingRect.bind(this)\n          }\n        ),\n      new CharactersLayerClass(\n        {\n          sdf: fontSettings.sdf,\n          smoothing: Number.isFinite(fontSettings.smoothing)\n            ? fontSettings.smoothing\n            : DEFAULT_FONT_SETTINGS.smoothing,\n          outlineWidth,\n          outlineColor,\n          iconAtlas: texture,\n          iconMapping: mapping,\n\n          getPosition,\n          getColor,\n          getSize,\n          getAngle,\n          getPixelOffset,\n\n          billboard,\n          sizeScale: sizeScale * scale,\n          sizeUnits,\n          sizeMinPixels: sizeMinPixels * scale,\n          sizeMaxPixels: sizeMaxPixels * scale,\n\n          transitions: transitions && {\n            getPosition: transitions.getPosition,\n            getAngle: transitions.getAngle,\n            getColor: transitions.getColor,\n            getSize: transitions.getSize,\n            getPixelOffset: transitions.getPixelOffset\n          }\n        },\n        this.getSubLayerProps({\n          id: 'characters',\n          updateTriggers: {\n            getIcon: updateTriggers.getText,\n            getPosition: updateTriggers.getPosition,\n            getAngle: updateTriggers.getAngle,\n            getColor: updateTriggers.getColor,\n            getSize: updateTriggers.getSize,\n            getPixelOffset: updateTriggers.getPixelOffset,\n            getIconOffsets: {\n              getText: updateTriggers.getText,\n              getTextAnchor: updateTriggers.getTextAnchor,\n              getAlignmentBaseline: updateTriggers.getAlignmentBaseline,\n              styleVersion\n            }\n          }\n        }),\n        {\n          data,\n          _dataDiff,\n          startIndices,\n          numInstances,\n          getIconOffsets: this.getIconOffsets.bind(this),\n          getIcon: getText\n        }\n      )\n    ];\n  }\n}\n\nTextLayer.layerName = 'TextLayer';\nTextLayer.defaultProps = defaultProps;\n"],"file":"text-layer.js"}