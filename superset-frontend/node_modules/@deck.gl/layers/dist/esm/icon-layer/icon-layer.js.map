{"version":3,"sources":["../../../src/icon-layer/icon-layer.js"],"names":["Layer","project32","picking","log","Model","Geometry","vs","fs","IconManager","DEFAULT_COLOR","defaultProps","iconAtlas","type","value","async","iconMapping","sizeScale","min","billboard","sizeUnits","sizeMinPixels","sizeMaxPixels","Number","MAX_SAFE_INTEGER","alphaCutoff","max","getPosition","x","position","getIcon","icon","getColor","getSize","getAngle","getPixelOffset","onIconError","compare","optional","IconLayer","getShaders","modules","initializeState","state","iconManager","context","gl","onUpdate","_onUpdate","bind","onError","_onError","attributeManager","getAttributeManager","addInstanced","instancePositions","size","fp64","use64bitPositions","transition","accessor","instanceSizes","defaultValue","instanceOffsets","transform","getInstanceOffset","instanceIconFrames","getInstanceIconFrame","instanceColorModes","getInstanceColorMode","instanceColors","props","colorFormat","length","normalized","instanceAngles","instancePixelOffset","updateState","oldProps","changeFlags","data","setProps","loadOptions","iconMappingChanged","prePacked","internalState","isAsyncPropLoading","autoPacking","dataChanged","updateTriggersChanged","all","invalidate","extensionsChanged","model","delete","_getModel","invalidateAll","isLoaded","finalizeState","finalize","draw","uniforms","viewport","iconsTexture","getTexture","setUniforms","iconsTextureDim","width","height","metersPerPixel","positions","id","geometry","drawMode","attributes","Float32Array","isInstanced","setNeedsRedraw","evt","getCurrentLayer","error","rect","getIconMapping","anchorX","anchorY","mapping","mask","y","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {Layer, project32, picking, log} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './icon-layer-vertex.glsl';\nimport fs from './icon-layer-fragment.glsl';\nimport IconManager from './icon-manager';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n/*\n * @param {object} props\n * @param {Texture2D | string} props.iconAtlas - atlas image url or texture\n * @param {object} props.iconMapping - icon names mapped to icon definitions\n * @param {object} props.iconMapping[icon_name].x - x position of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].y - y position of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].width - width of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].height - height of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].anchorX - x anchor of icon on the atlas image,\n *   default to width / 2\n * @param {object} props.iconMapping[icon_name].anchorY - y anchor of icon on the atlas image,\n *   default to height / 2\n * @param {object} props.iconMapping[icon_name].mask - whether icon is treated as a transparency\n *   mask. If true, user defined color is applied. If false, original color from the image is\n *   applied. Default to false.\n * @param {number} props.size - icon size in pixels\n * @param {func} props.getPosition - returns anchor position of the icon, in [lng, lat, z]\n * @param {func} props.getIcon - returns icon name as a string\n * @param {func} props.getSize - returns icon size multiplier as a number\n * @param {func} props.getColor - returns color of the icon in [r, g, b, a]. Only works on icons\n *   with mask: true.\n * @param {func} props.getAngle - returns rotating angle (in degree) of the icon.\n */\nconst defaultProps = {\n  iconAtlas: {type: 'image', value: null, async: true},\n  iconMapping: {type: 'object', value: {}, async: true},\n  sizeScale: {type: 'number', value: 1, min: 0},\n  billboard: true,\n  sizeUnits: 'pixels',\n  sizeMinPixels: {type: 'number', min: 0, value: 0}, //  min point radius in pixels\n  sizeMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER}, // max point radius in pixels\n  alphaCutoff: {type: 'number', value: 0.05, min: 0, max: 1},\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getIcon: {type: 'accessor', value: x => x.icon},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getSize: {type: 'accessor', value: 1},\n  getAngle: {type: 'accessor', value: 0},\n  getPixelOffset: {type: 'accessor', value: [0, 0]},\n\n  onIconError: {type: 'function', value: null, compare: false, optional: true}\n};\n\nexport default class IconLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  initializeState() {\n    this.state = {\n      iconManager: new IconManager(this.context.gl, {\n        onUpdate: this._onUpdate.bind(this),\n        onError: this._onError.bind(this)\n      })\n    };\n\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceSizes: {\n        size: 1,\n        transition: true,\n        accessor: 'getSize',\n        defaultValue: 1\n      },\n      instanceOffsets: {size: 2, accessor: 'getIcon', transform: this.getInstanceOffset},\n      instanceIconFrames: {size: 4, accessor: 'getIcon', transform: this.getInstanceIconFrame},\n      instanceColorModes: {\n        size: 1,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getIcon',\n        transform: this.getInstanceColorMode\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceAngles: {\n        size: 1,\n        transition: true,\n        accessor: 'getAngle'\n      },\n      instancePixelOffset: {\n        size: 2,\n        transition: true,\n        accessor: 'getPixelOffset'\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  /* eslint-disable max-statements, complexity */\n  updateState({oldProps, props, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    const attributeManager = this.getAttributeManager();\n    const {iconAtlas, iconMapping, data, getIcon} = props;\n    const {iconManager} = this.state;\n\n    iconManager.setProps({loadOptions: props.loadOptions});\n\n    let iconMappingChanged = false;\n    const prePacked = iconAtlas || this.internalState.isAsyncPropLoading('iconAtlas');\n\n    // prepacked iconAtlas from user\n    if (prePacked) {\n      if (oldProps.iconAtlas !== props.iconAtlas) {\n        iconManager.setProps({iconAtlas, autoPacking: false});\n      }\n\n      if (oldProps.iconMapping !== props.iconMapping) {\n        iconManager.setProps({iconMapping});\n        iconMappingChanged = true;\n      }\n    } else {\n      // otherwise, use autoPacking\n      iconManager.setProps({autoPacking: true});\n    }\n\n    if (\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getIcon))\n    ) {\n      iconManager.setProps({data, getIcon});\n    }\n\n    if (iconMappingChanged) {\n      attributeManager.invalidate('instanceOffsets');\n      attributeManager.invalidate('instanceIconFrames');\n      attributeManager.invalidate('instanceColorModes');\n    }\n\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      attributeManager.invalidateAll();\n    }\n  }\n  /* eslint-enable max-statements, complexity */\n\n  get isLoaded() {\n    return super.isLoaded && this.state.iconManager.isLoaded;\n  }\n\n  finalizeState() {\n    super.finalizeState();\n    // Release resources held by the icon manager\n    this.state.iconManager.finalize();\n  }\n\n  draw({uniforms}) {\n    const {sizeScale, sizeMinPixels, sizeMaxPixels, sizeUnits, billboard, alphaCutoff} = this.props;\n    const {iconManager} = this.state;\n    const {viewport} = this.context;\n\n    const iconsTexture = iconManager.getTexture();\n    if (iconsTexture) {\n      this.state.model\n        .setUniforms(uniforms)\n        .setUniforms({\n          iconsTexture,\n          iconsTextureDim: [iconsTexture.width, iconsTexture.height],\n          sizeScale: sizeScale * (sizeUnits === 'pixels' ? viewport.metersPerPixel : 1),\n          sizeMinPixels,\n          sizeMaxPixels,\n          billboard,\n          alphaCutoff\n        })\n        .draw();\n    }\n  }\n\n  _getModel(gl) {\n    // The icon-layer vertex shader uses 2d positions\n    // specifed via: attribute vec2 positions;\n    const positions = [-1, -1, -1, 1, 1, 1, 1, -1];\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_FAN,\n        attributes: {\n          // The size must be explicitly passed here otherwise luma.gl\n          // will default to assuming that positions are 3D (x,y,z)\n          positions: {\n            size: 2,\n            value: new Float32Array(positions)\n          }\n        }\n      }),\n      isInstanced: true\n    });\n  }\n\n  _onUpdate() {\n    this.setNeedsRedraw();\n  }\n\n  _onError(evt) {\n    const {onIconError} = this.getCurrentLayer().props;\n    if (onIconError) {\n      onIconError(evt);\n    } else {\n      log.error(evt.error)();\n    }\n  }\n\n  getInstanceOffset(icon) {\n    const rect = this.state.iconManager.getIconMapping(icon);\n    return [rect.width / 2 - rect.anchorX || 0, rect.height / 2 - rect.anchorY || 0];\n  }\n\n  getInstanceColorMode(icon) {\n    const mapping = this.state.iconManager.getIconMapping(icon);\n    return mapping.mask ? 1 : 0;\n  }\n\n  getInstanceIconFrame(icon) {\n    const rect = this.state.iconManager.getIconMapping(icon);\n    return [rect.x || 0, rect.y || 0, rect.width || 0, rect.height || 0];\n  }\n}\n\nIconLayer.layerName = 'IconLayer';\nIconLayer.defaultProps = defaultProps;\n"],"file":"icon-layer.js"}