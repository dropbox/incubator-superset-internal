{"version":3,"sources":["../../src/deckgl.js"],"names":["createElement","useRef","useState","useMemo","useEffect","useImperativeHandle","forwardRef","PropTypes","Deck","useIsomorphicLayoutEffect","extractJSXLayers","positionChildrenUnderViews","extractStyles","getRefHandles","thisRef","handles","pickObject","opts","deck","pickMultipleObjects","pickObjects","Object","defineProperty","get","redrawDeck","redrawReason","_drawLayers","createDeckInstance","props","DeckClass","style","width","height","_customRender","viewports","viewManager","getViewports","lastRenderedViewports","forceUpdate","v","DeckGL","ref","_thisRef","current","version","setVersion","containerRef","canvasRef","jsxProps","layers","views","children","inRender","handleViewStateChange","params","viewState","viewStateUpdateRequested","onViewStateChange","handleInteractionStateChange","interactionStateUpdateRequested","onInteractionStateChange","deckProps","forwardProps","setProps","parent","canvas","finalize","currentViewports","ContextProvider","id","containerStyle","canvasStyle","childrenUnderViews","key","control","propTypes","getPropTypes","defaultProps"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  createElement,\n  useRef,\n  useState,\n  useMemo,\n  useEffect,\n  useImperativeHandle,\n  forwardRef\n} from 'react';\nimport PropTypes from 'prop-types';\nimport {Deck} from '@deck.gl/core';\nimport useIsomorphicLayoutEffect from './utils/use-isomorphic-layout-effect';\n\nimport extractJSXLayers from './utils/extract-jsx-layers';\nimport positionChildrenUnderViews from './utils/position-children-under-views';\nimport extractStyles from './utils/extract-styles';\n\n/* eslint-disable max-statements, accessor-pairs */\n\nfunction getRefHandles(thisRef) {\n  const handles = {\n    pickObject: opts => thisRef.deck.pickObject(opts),\n    pickMultipleObjects: opts => thisRef.deck.pickMultipleObjects(opts),\n    pickObjects: opts => thisRef.deck.pickObjects(opts)\n  };\n  Object.defineProperty(handles, 'deck', {\n    get: () => thisRef.deck\n  });\n  return handles;\n}\n\nfunction redrawDeck(thisRef) {\n  if (thisRef.redrawReason) {\n    // Only redraw if we have received a dirty flag\n    thisRef.deck._drawLayers(thisRef.redrawReason);\n    thisRef.redrawReason = null;\n  }\n}\n\nfunction createDeckInstance(thisRef, props) {\n  // Allows a subclass of Deck to be used\n  // TODO - update propTypes / defaultProps?\n  const DeckClass = props.Deck || Deck;\n  const deck = new DeckClass({\n    ...props,\n    style: null,\n    width: '100%',\n    height: '100%',\n    // The Deck's animation loop is independent from React's render cycle, causing potential\n    // synchronization issues. We provide this custom render function to make sure that React\n    // and Deck update on the same schedule.\n    _customRender: redrawReason => {\n      // Save the dirty flag for later\n      thisRef.redrawReason = redrawReason;\n\n      // Viewport/view state is passed to child components as props.\n      // If they have changed, we need to trigger a React rerender to update children props.\n      const viewports = deck.viewManager.getViewports();\n      if (thisRef.lastRenderedViewports !== viewports) {\n        // Viewports have changed, update children props first.\n        // This will delay the Deck canvas redraw till after React update (in useLayoutEffect)\n        // so that the canvas does not get rendered before the child components update.\n        thisRef.forceUpdate(v => v + 1);\n      } else {\n        redrawDeck(thisRef);\n      }\n    }\n  });\n  return deck;\n}\n\nconst DeckGL = forwardRef((props, ref) => {\n  // A reference to persistent states\n  const _thisRef = useRef({});\n  const thisRef = _thisRef.current;\n  // A mechanism to force redraw\n  const [version, setVersion] = useState(0);\n  thisRef.forceUpdate = setVersion;\n  // DOM refs\n  const containerRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  // extract any deck.gl layers masquerading as react elements from props.children\n  const jsxProps = useMemo(() => extractJSXLayers(props), [\n    props.layers,\n    props.views,\n    props.children\n  ]);\n\n  // Callbacks\n  let inRender = true;\n\n  const handleViewStateChange = params => {\n    if (inRender && props.viewState) {\n      // Callback may invoke a state update. Defer callback to after render() to avoid React error\n      // In React StrictMode, render is executed twice and useEffect/useLayoutEffect is executed once\n      // Store deferred parameters in ref so that we can access it in another render\n      thisRef.viewStateUpdateRequested = params;\n      return null;\n    }\n    thisRef.viewStateUpdateRequested = null;\n    return props.onViewStateChange(params);\n  };\n\n  const handleInteractionStateChange = params => {\n    if (inRender) {\n      // Callback may invoke a state update. Defer callback to after render() to avoid React error\n      // In React StrictMode, render is executed twice and useEffect/useLayoutEffect is executed once\n      // Store deferred parameters in ref so that we can access it in another render\n      thisRef.interactionStateUpdateRequested = params;\n    } else {\n      thisRef.interactionStateUpdateRequested = null;\n      props.onInteractionStateChange(params);\n    }\n  };\n\n  // Update Deck's props. If Deck needs redraw, this will trigger a call to `_customRender` in\n  // the next animation frame.\n  // Needs to be called both from initial mount, and when new props are received\n  const deckProps = useMemo(\n    () => {\n      const forwardProps = {\n        ...props,\n        // Override user styling props. We will set the canvas style in render()\n        style: null,\n        width: '100%',\n        height: '100%',\n        layers: jsxProps.layers,\n        views: jsxProps.views,\n        onViewStateChange: handleViewStateChange,\n        onInteractionStateChange: handleInteractionStateChange\n      };\n\n      if (thisRef.deck) {\n        thisRef.deck.setProps(forwardProps);\n      }\n\n      return forwardProps;\n    },\n    [props]\n  );\n\n  useEffect(() => {\n    thisRef.deck = createDeckInstance(thisRef, {\n      ...deckProps,\n      parent: containerRef.current,\n      canvas: canvasRef.current\n    });\n\n    return () => thisRef.deck.finalize();\n  }, []);\n\n  useIsomorphicLayoutEffect(() => {\n    // render has just been called. The children are positioned based on the current view state.\n    // Redraw Deck canvas immediately, if necessary, using the current view state, so that it\n    // matches the child components.\n    redrawDeck(thisRef);\n\n    // Execute deferred callbacks\n    const {viewStateUpdateRequested, interactionStateUpdateRequested} = thisRef;\n    if (viewStateUpdateRequested) {\n      handleViewStateChange(viewStateUpdateRequested);\n    }\n    if (interactionStateUpdateRequested) {\n      handleInteractionStateChange(interactionStateUpdateRequested);\n    }\n  });\n\n  useImperativeHandle(ref, () => getRefHandles(thisRef), []);\n\n  const {viewManager} = thisRef.deck || {};\n  const currentViewports = viewManager && viewManager.getViewports();\n\n  const {ContextProvider, width, height, id, style} = props;\n\n  const {containerStyle, canvasStyle} = useMemo(() => extractStyles({width, height, style}), [\n    width,\n    height,\n    style\n  ]);\n\n  // Props changes may lead to 3 types of updates:\n  // 1. Only the WebGL canvas - updated in Deck's render cycle (next animation frame)\n  // 2. Only the DOM - updated in React's lifecycle (now)\n  // 3. Both the WebGL canvas and the DOM - defer React rerender to next animation frame just\n  //    before Deck redraw to ensure perfect synchronization & avoid excessive redraw\n  //    This is because multiple changes may happen to Deck between two frames e.g. transition\n  if (\n    (!thisRef.viewStateUpdateRequested && thisRef.lastRenderedViewports === currentViewports) || // case 2\n    thisRef.version !== version // case 3 just before deck redraws\n  ) {\n    thisRef.lastRenderedViewports = currentViewports;\n    thisRef.version = version;\n\n    // Render the background elements (typically react-map-gl instances)\n    // using the view descriptors\n    const childrenUnderViews = positionChildrenUnderViews({\n      children: jsxProps.children,\n      deck: thisRef.deck,\n      ContextProvider\n    });\n\n    const canvas = createElement('canvas', {\n      key: 'canvas',\n      id: id || 'deckgl-overlay',\n      ref: canvasRef,\n      style: canvasStyle\n    });\n\n    // Render deck.gl as the last child\n    thisRef.control = createElement(\n      'div',\n      {id: `${id || 'deckgl'}-wrapper`, ref: containerRef, style: containerStyle},\n      [canvas, childrenUnderViews]\n    );\n  }\n\n  inRender = false;\n  return thisRef.control;\n});\n\nDeckGL.propTypes = Deck.getPropTypes(PropTypes);\nDeckGL.defaultProps = Deck.defaultProps;\n\nexport default DeckGL;\n"],"file":"deckgl.js"}