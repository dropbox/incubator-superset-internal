{"version":3,"sources":["../../src/deckgl.js"],"names":["getRefHandles","thisRef","handles","pickObject","opts","deck","pickMultipleObjects","pickObjects","Object","defineProperty","get","redrawDeck","redrawReason","_drawLayers","createDeckInstance","props","DeckClass","Deck","style","width","height","_customRender","viewports","viewManager","getViewports","lastRenderedViewports","forceUpdate","v","DeckGL","ref","_thisRef","current","version","setVersion","containerRef","canvasRef","jsxProps","layers","views","children","inRender","handleViewStateChange","params","viewState","viewStateUpdateRequested","onViewStateChange","handleInteractionStateChange","interactionStateUpdateRequested","onInteractionStateChange","deckProps","forwardProps","setProps","parent","canvas","finalize","currentViewports","ContextProvider","id","containerStyle","canvasStyle","childrenUnderViews","key","control","propTypes","getPropTypes","PropTypes","defaultProps"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  createElement,\n  useRef,\n  useState,\n  useMemo,\n  useEffect,\n  useImperativeHandle,\n  forwardRef\n} from 'react';\nimport PropTypes from 'prop-types';\nimport {Deck} from '@deck.gl/core';\nimport useIsomorphicLayoutEffect from './utils/use-isomorphic-layout-effect';\n\nimport extractJSXLayers from './utils/extract-jsx-layers';\nimport positionChildrenUnderViews from './utils/position-children-under-views';\nimport extractStyles from './utils/extract-styles';\n\n/* eslint-disable max-statements, accessor-pairs */\n\nfunction getRefHandles(thisRef) {\n  const handles = {\n    pickObject: opts => thisRef.deck.pickObject(opts),\n    pickMultipleObjects: opts => thisRef.deck.pickMultipleObjects(opts),\n    pickObjects: opts => thisRef.deck.pickObjects(opts)\n  };\n  Object.defineProperty(handles, 'deck', {\n    get: () => thisRef.deck\n  });\n  return handles;\n}\n\nfunction redrawDeck(thisRef) {\n  if (thisRef.redrawReason) {\n    // Only redraw if we have received a dirty flag\n    thisRef.deck._drawLayers(thisRef.redrawReason);\n    thisRef.redrawReason = null;\n  }\n}\n\nfunction createDeckInstance(thisRef, props) {\n  // Allows a subclass of Deck to be used\n  // TODO - update propTypes / defaultProps?\n  const DeckClass = props.Deck || Deck;\n  const deck = new DeckClass({\n    ...props,\n    style: null,\n    width: '100%',\n    height: '100%',\n    // The Deck's animation loop is independent from React's render cycle, causing potential\n    // synchronization issues. We provide this custom render function to make sure that React\n    // and Deck update on the same schedule.\n    _customRender: redrawReason => {\n      // Save the dirty flag for later\n      thisRef.redrawReason = redrawReason;\n\n      // Viewport/view state is passed to child components as props.\n      // If they have changed, we need to trigger a React rerender to update children props.\n      const viewports = deck.viewManager.getViewports();\n      if (thisRef.lastRenderedViewports !== viewports) {\n        // Viewports have changed, update children props first.\n        // This will delay the Deck canvas redraw till after React update (in useLayoutEffect)\n        // so that the canvas does not get rendered before the child components update.\n        thisRef.forceUpdate(v => v + 1);\n      } else {\n        redrawDeck(thisRef);\n      }\n    }\n  });\n  return deck;\n}\n\nconst DeckGL = forwardRef((props, ref) => {\n  // A reference to persistent states\n  const _thisRef = useRef({});\n  const thisRef = _thisRef.current;\n  // A mechanism to force redraw\n  const [version, setVersion] = useState(0);\n  thisRef.forceUpdate = setVersion;\n  // DOM refs\n  const containerRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  // extract any deck.gl layers masquerading as react elements from props.children\n  const jsxProps = useMemo(() => extractJSXLayers(props), [\n    props.layers,\n    props.views,\n    props.children\n  ]);\n\n  // Callbacks\n  let inRender = true;\n\n  const handleViewStateChange = params => {\n    if (inRender && props.viewState) {\n      // Callback may invoke a state update. Defer callback to after render() to avoid React error\n      // In React StrictMode, render is executed twice and useEffect/useLayoutEffect is executed once\n      // Store deferred parameters in ref so that we can access it in another render\n      thisRef.viewStateUpdateRequested = params;\n      return null;\n    }\n    thisRef.viewStateUpdateRequested = null;\n    return props.onViewStateChange(params);\n  };\n\n  const handleInteractionStateChange = params => {\n    if (inRender) {\n      // Callback may invoke a state update. Defer callback to after render() to avoid React error\n      // In React StrictMode, render is executed twice and useEffect/useLayoutEffect is executed once\n      // Store deferred parameters in ref so that we can access it in another render\n      thisRef.interactionStateUpdateRequested = params;\n    } else {\n      thisRef.interactionStateUpdateRequested = null;\n      props.onInteractionStateChange(params);\n    }\n  };\n\n  // Update Deck's props. If Deck needs redraw, this will trigger a call to `_customRender` in\n  // the next animation frame.\n  // Needs to be called both from initial mount, and when new props are received\n  const deckProps = useMemo(\n    () => {\n      const forwardProps = {\n        ...props,\n        // Override user styling props. We will set the canvas style in render()\n        style: null,\n        width: '100%',\n        height: '100%',\n        layers: jsxProps.layers,\n        views: jsxProps.views,\n        onViewStateChange: handleViewStateChange,\n        onInteractionStateChange: handleInteractionStateChange\n      };\n\n      if (thisRef.deck) {\n        thisRef.deck.setProps(forwardProps);\n      }\n\n      return forwardProps;\n    },\n    [props]\n  );\n\n  useEffect(() => {\n    thisRef.deck = createDeckInstance(thisRef, {\n      ...deckProps,\n      parent: containerRef.current,\n      canvas: canvasRef.current\n    });\n\n    return () => thisRef.deck.finalize();\n  }, []);\n\n  useIsomorphicLayoutEffect(() => {\n    // render has just been called. The children are positioned based on the current view state.\n    // Redraw Deck canvas immediately, if necessary, using the current view state, so that it\n    // matches the child components.\n    redrawDeck(thisRef);\n\n    // Execute deferred callbacks\n    const {viewStateUpdateRequested, interactionStateUpdateRequested} = thisRef;\n    if (viewStateUpdateRequested) {\n      handleViewStateChange(viewStateUpdateRequested);\n    }\n    if (interactionStateUpdateRequested) {\n      handleInteractionStateChange(interactionStateUpdateRequested);\n    }\n  });\n\n  useImperativeHandle(ref, () => getRefHandles(thisRef), []);\n\n  const {viewManager} = thisRef.deck || {};\n  const currentViewports = viewManager && viewManager.getViewports();\n\n  const {ContextProvider, width, height, id, style} = props;\n\n  const {containerStyle, canvasStyle} = useMemo(() => extractStyles({width, height, style}), [\n    width,\n    height,\n    style\n  ]);\n\n  // Props changes may lead to 3 types of updates:\n  // 1. Only the WebGL canvas - updated in Deck's render cycle (next animation frame)\n  // 2. Only the DOM - updated in React's lifecycle (now)\n  // 3. Both the WebGL canvas and the DOM - defer React rerender to next animation frame just\n  //    before Deck redraw to ensure perfect synchronization & avoid excessive redraw\n  //    This is because multiple changes may happen to Deck between two frames e.g. transition\n  if (\n    (!thisRef.viewStateUpdateRequested && thisRef.lastRenderedViewports === currentViewports) || // case 2\n    thisRef.version !== version // case 3 just before deck redraws\n  ) {\n    thisRef.lastRenderedViewports = currentViewports;\n    thisRef.version = version;\n\n    // Render the background elements (typically react-map-gl instances)\n    // using the view descriptors\n    const childrenUnderViews = positionChildrenUnderViews({\n      children: jsxProps.children,\n      deck: thisRef.deck,\n      ContextProvider\n    });\n\n    const canvas = createElement('canvas', {\n      key: 'canvas',\n      id: id || 'deckgl-overlay',\n      ref: canvasRef,\n      style: canvasStyle\n    });\n\n    // Render deck.gl as the last child\n    thisRef.control = createElement(\n      'div',\n      {id: `${id || 'deckgl'}-wrapper`, ref: containerRef, style: containerStyle},\n      [canvas, childrenUnderViews]\n    );\n  }\n\n  inRender = false;\n  return thisRef.control;\n});\n\nDeckGL.propTypes = Deck.getPropTypes(PropTypes);\nDeckGL.defaultProps = Deck.defaultProps;\n\nexport default DeckGL;\n"],"file":"deckgl.js"}