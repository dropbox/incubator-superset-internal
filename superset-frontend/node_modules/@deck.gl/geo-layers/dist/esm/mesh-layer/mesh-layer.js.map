{"version":3,"sources":["../../../src/mesh-layer/mesh-layer.js"],"names":["GLTFMaterialParser","Model","pbr","SimpleMeshLayer","vs","fs","validateGeometryAttributes","attributes","hasColorAttribute","COLOR_0","colors","constant","value","Float32Array","uvRegions","defaultProps","pbrMaterial","type","featureIds","optional","_MeshLayer","getShaders","shaders","modules","push","initializeState","props","state","attributeManager","add","featureIdsPickingColors","size","noAlloc","update","calculateFeatureIdsPickingColors","updateState","oldProps","changeFlags","updatePbrMaterialUniforms","draw","opts","model","setUniforms","u_Camera","getUniforms","project_uCameraPosition","u_pickFeatureIds","Boolean","getModel","mesh","id","materialParser","parseMaterial","context","gl","geometry","defines","parameters","isInstanced","uniforms","unlit","pbrMetallicRoughness","baseColorTexture","NORMAL","normals","TEXCOORD_0","texCoords","material","pbrDebug","imageBasedLightingEnvironment","lights","useTangents","attribute","Uint8ClampedArray","length","pickingColor","index","encodePickingColor","layerName"],"mappings":"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","sourcesContent":["import {GLTFMaterialParser} from '@luma.gl/experimental';\nimport {Model, pbr} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\nimport {SimpleMeshLayer} from '@deck.gl/mesh-layers';\n\nimport vs from './mesh-layer-vertex.glsl';\nimport fs from './mesh-layer-fragment.glsl';\n\nfunction validateGeometryAttributes(attributes) {\n  const hasColorAttribute = attributes.COLOR_0 || attributes.colors;\n  if (!hasColorAttribute) {\n    attributes.colors = {constant: true, value: new Float32Array([1, 1, 1])};\n  }\n  if (!attributes.uvRegions) {\n    attributes.uvRegions = {constant: true, value: new Float32Array([0, 0, 1, 1])};\n  }\n}\n\nconst defaultProps = {\n  // PBR material object. _lighting must be pbr for this to work\n  pbrMaterial: {type: 'object', value: null},\n  featureIds: {type: 'array', value: null, optional: true}\n};\n\nexport default class _MeshLayer extends SimpleMeshLayer {\n  getShaders() {\n    const shaders = super.getShaders();\n    const modules = shaders.modules;\n    modules.push(pbr);\n    return {...shaders, vs, fs};\n  }\n\n  initializeState() {\n    const {featureIds} = this.props;\n    super.initializeState();\n\n    if (featureIds) {\n      this.state.attributeManager.add({\n        featureIdsPickingColors: {\n          type: GL.UNSIGNED_BYTE,\n          size: 3,\n          noAlloc: true,\n          update: this.calculateFeatureIdsPickingColors\n        }\n      });\n    }\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n    if (props.pbrMaterial !== oldProps.pbrMaterial) {\n      this.updatePbrMaterialUniforms(props.pbrMaterial);\n    }\n  }\n\n  draw(opts) {\n    const {featureIds} = this.props;\n    if (!this.state.model) {\n      return;\n    }\n    this.state.model.setUniforms({\n      // Needed for PBR (TODO: find better way to get it)\n      u_Camera: this.state.model.getUniforms().project_uCameraPosition,\n      u_pickFeatureIds: Boolean(featureIds)\n    });\n\n    super.draw(opts);\n  }\n\n  getModel(mesh) {\n    const {id, pbrMaterial} = this.props;\n    const materialParser = this.parseMaterial(pbrMaterial, mesh);\n    const shaders = this.getShaders();\n    validateGeometryAttributes(mesh.attributes);\n    const model = new Model(this.context.gl, {\n      ...this.getShaders(),\n      id,\n      geometry: mesh,\n      defines: {...shaders.defines, ...materialParser?.defines},\n      parameters: materialParser?.parameters,\n      isInstanced: true\n    });\n\n    return model;\n  }\n\n  updatePbrMaterialUniforms(pbrMaterial) {\n    const {model} = this.state;\n    if (model) {\n      const {mesh} = this.props;\n      const materialParser = this.parseMaterial(pbrMaterial, mesh);\n      model.setUniforms(materialParser.uniforms);\n    }\n  }\n\n  parseMaterial(pbrMaterial, mesh) {\n    const unlit = Boolean(\n      pbrMaterial.pbrMetallicRoughness && pbrMaterial.pbrMetallicRoughness.baseColorTexture\n    );\n    const materialParser = new GLTFMaterialParser(this.context.gl, {\n      attributes: {NORMAL: mesh.attributes.normals, TEXCOORD_0: mesh.attributes.texCoords},\n      material: {unlit, ...pbrMaterial},\n      pbrDebug: false,\n      imageBasedLightingEnvironment: null,\n      lights: true,\n      useTangents: false\n    });\n    return materialParser;\n  }\n\n  calculateFeatureIdsPickingColors(attribute) {\n    const {featureIds} = this.props;\n    const value = new Uint8ClampedArray(featureIds.length * attribute.size);\n\n    const pickingColor = [];\n    for (let index = 0; index < featureIds.length; index++) {\n      this.encodePickingColor(featureIds[index], pickingColor);\n\n      value[index * 3] = pickingColor[0];\n      value[index * 3 + 1] = pickingColor[1];\n      value[index * 3 + 2] = pickingColor[2];\n    }\n\n    attribute.value = value;\n  }\n}\n\n_MeshLayer.layerName = '_MeshLayer';\n_MeshLayer.defaultProps = defaultProps;\n"],"file":"mesh-layer.js"}