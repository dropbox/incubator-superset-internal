{"version":3,"sources":["../../../src/tile-3d-layer/tile-3d-layer.js"],"names":["Geometry","COORDINATE_SYSTEM","CompositeLayer","PointCloudLayer","ScenegraphLayer","default","_MeshLayer","log","load","Tileset3D","TILE_TYPE","Tiles3DLoader","SINGLE_DATA","defaultProps","getPointColor","type","value","pointSize","data","loader","onTilesetLoad","tileset3d","compare","onTileLoad","tileHeader","onTileUnload","onTileError","tile","message","url","_getMeshColor","Tile3DLayer","initializeState","props","removed","state","layerMap","activeViewports","lastUpdatedViewports","isLoaded","shouldUpdateState","changeFlags","somethingChanged","updateState","oldProps","_loadTileset","viewportChanged","viewportsNumber","Object","keys","length","_updateTileset","propsChanged","key","needsUpdate","activateViewport","viewport","internalState","id","lastViewport","equals","setChangeFlags","setNeedsUpdate","getPickingInfo","info","sourceLayer","layerId","substr","substring","tileId","indexOf","object","filterSubLayer","layer","viewportId","viewportIds","includes","_updateAutoHighlight","updateAutoHighlight","tilesetUrl","loadOptions","loaders","Array","isArray","options","preload","preloadOptions","headers","fetch","assign","tilesetJson","_onTileLoad","bind","_onTileUnload","onTileLoadFail","setState","viewports","timeline","context","frameNumber","update","values","tilesetChanged","_getSubLayer","oldLayer","content","POINTCLOUD","_makePointCloudLayer","SCENEGRAPH","_make3DModelLayer","MESH","_makeSimpleMeshLayer","Error","attributes","pointCount","constantRGBA","cartographicOrigin","modelMatrix","positions","normals","colors","header","vertexCount","POSITION","NORMAL","COLOR_0","SubLayerClass","getSubLayerClass","getSubLayerProps","coordinateSystem","METER_OFFSETS","coordinateOrigin","getColor","gltf","instances","_lighting","scenegraph","getTransformMatrix","instance","getPosition","indices","material","featureIds","geometry","mesh","drawMode","getMeshGeometry","pbrMaterial","renderLayers","tiles","map","layerCache","selected","visible","clone","filter","Boolean","contentAttributes","Float32Array","texCoords","uvRegions","layerName"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {Geometry} from '@luma.gl/core';\nimport {COORDINATE_SYSTEM, CompositeLayer} from '@deck.gl/core';\nimport {PointCloudLayer} from '@deck.gl/layers';\nimport {ScenegraphLayer} from '@deck.gl/mesh-layers';\nimport {default as _MeshLayer} from '../mesh-layer/mesh-layer';\nimport {log} from '@deck.gl/core';\n\nimport {load} from '@loaders.gl/core';\nimport {Tileset3D, TILE_TYPE} from '@loaders.gl/tiles';\nimport {Tiles3DLoader} from '@loaders.gl/3d-tiles';\n\nconst SINGLE_DATA = [0];\n\nconst defaultProps = {\n  getPointColor: {type: 'accessor', value: [0, 0, 0, 255]},\n  pointSize: 1.0,\n\n  data: null,\n  loader: Tiles3DLoader,\n\n  onTilesetLoad: {type: 'function', value: tileset3d => {}, compare: false},\n  onTileLoad: {type: 'function', value: tileHeader => {}, compare: false},\n  onTileUnload: {type: 'function', value: tileHeader => {}, compare: false},\n  onTileError: {type: 'function', value: (tile, message, url) => {}, compare: false},\n  _getMeshColor: {type: 'function', value: tileHeader => [255, 255, 255], compare: false}\n};\n\nexport default class Tile3DLayer extends CompositeLayer {\n  initializeState() {\n    if ('onTileLoadFail' in this.props) {\n      log.removed('onTileLoadFail', 'onTileError')();\n    }\n    // prop verification\n    this.state = {\n      layerMap: {},\n      tileset3d: null,\n      activeViewports: {},\n      lastUpdatedViewports: null\n    };\n  }\n\n  get isLoaded() {\n    const {tileset3d} = this.state;\n    return tileset3d && tileset3d.isLoaded();\n  }\n\n  shouldUpdateState({changeFlags}) {\n    return changeFlags.somethingChanged;\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    if (props.data && props.data !== oldProps.data) {\n      this._loadTileset(props.data);\n    }\n\n    if (changeFlags.viewportChanged) {\n      const {activeViewports} = this.state;\n      const viewportsNumber = Object.keys(activeViewports).length;\n      if (viewportsNumber) {\n        this._updateTileset(activeViewports);\n        this.state.lastUpdatedViewports = activeViewports;\n        this.state.activeViewports = {};\n      }\n    }\n    if (changeFlags.propsChanged) {\n      const {layerMap} = this.state;\n      for (const key in layerMap) {\n        layerMap[key].needsUpdate = true;\n      }\n    }\n  }\n\n  activateViewport(viewport) {\n    const {activeViewports, lastUpdatedViewports} = this.state;\n    this.internalState.viewport = viewport;\n\n    activeViewports[viewport.id] = viewport;\n    const lastViewport = lastUpdatedViewports?.[viewport.id];\n    if (!lastViewport || !viewport.equals(lastViewport)) {\n      this.setChangeFlags({viewportChanged: true});\n      this.setNeedsUpdate();\n    }\n  }\n\n  getPickingInfo({info, sourceLayer}) {\n    const {layerMap} = this.state;\n    const layerId = sourceLayer && sourceLayer.id;\n    if (layerId) {\n      // layerId: this.id-[scenegraph|pointcloud]-tileId\n      const substr = layerId.substring(this.id.length + 1);\n      const tileId = substr.substring(substr.indexOf('-') + 1);\n      info.object = layerMap[tileId] && layerMap[tileId].tile;\n    }\n\n    return info;\n  }\n\n  filterSubLayer({layer, viewport}) {\n    const {tile} = layer.props;\n    const {id: viewportId} = viewport;\n    return tile.viewportIds.includes(viewportId);\n  }\n\n  _updateAutoHighlight(info) {\n    if (info.sourceLayer) {\n      info.sourceLayer.updateAutoHighlight(info);\n    }\n  }\n\n  async _loadTileset(tilesetUrl) {\n    const {loadOptions = {}} = this.props;\n\n    // TODO: deprecate `loader` in v9.0\n    let loader = this.props.loader || this.props.loaders;\n    if (Array.isArray(loader)) {\n      loader = loader[0];\n    }\n\n    const options = {loadOptions: {...loadOptions}};\n    if (loader.preload) {\n      const preloadOptions = await loader.preload(tilesetUrl, loadOptions);\n\n      if (preloadOptions.headers) {\n        options.loadOptions.fetch = {\n          ...options.loadOptions.fetch,\n          headers: preloadOptions.headers\n        };\n      }\n      Object.assign(options, preloadOptions);\n    }\n    const tilesetJson = await load(tilesetUrl, loader, options.loadOptions);\n\n    const tileset3d = new Tileset3D(tilesetJson, {\n      onTileLoad: this._onTileLoad.bind(this),\n      onTileUnload: this._onTileUnload.bind(this),\n      onTileLoadFail: this.props.onTileError,\n      ...options\n    });\n\n    this.setState({\n      tileset3d,\n      layerMap: {}\n    });\n\n    this._updateTileset(this.state.activeViewports);\n    this.props.onTilesetLoad(tileset3d);\n  }\n\n  _onTileLoad(tileHeader) {\n    const {lastUpdatedViewports} = this.state;\n    this.props.onTileLoad(tileHeader);\n    this._updateTileset(lastUpdatedViewports);\n    this.setNeedsUpdate();\n  }\n\n  _onTileUnload(tileHeader) {\n    // Was cleaned up from tileset cache. We no longer need to track it.\n    delete this.state.layerMap[tileHeader.id];\n    this.props.onTileUnload(tileHeader);\n  }\n\n  _updateTileset(viewports) {\n    const {tileset3d} = this.state;\n    const {timeline} = this.context;\n    const viewportsNumber = Object.keys(viewports).length;\n    if (!timeline || !viewportsNumber || !tileset3d) {\n      return;\n    }\n    const frameNumber = tileset3d.update(Object.values(viewports));\n    const tilesetChanged = this.state.frameNumber !== frameNumber;\n    if (tilesetChanged) {\n      this.setState({frameNumber});\n    }\n  }\n\n  _getSubLayer(tileHeader, oldLayer) {\n    if (!tileHeader.content) {\n      return null;\n    }\n\n    switch (tileHeader.type) {\n      case TILE_TYPE.POINTCLOUD:\n        return this._makePointCloudLayer(tileHeader, oldLayer);\n      case TILE_TYPE.SCENEGRAPH:\n        return this._make3DModelLayer(tileHeader, oldLayer);\n      case TILE_TYPE.MESH:\n        return this._makeSimpleMeshLayer(tileHeader, oldLayer);\n      default:\n        throw new Error(`Tile3DLayer: Failed to render layer of type ${tileHeader.content.type}`);\n    }\n  }\n\n  _makePointCloudLayer(tileHeader, oldLayer) {\n    const {\n      attributes,\n      pointCount,\n      constantRGBA,\n      cartographicOrigin,\n      modelMatrix\n    } = tileHeader.content;\n    const {positions, normals, colors} = attributes;\n\n    if (!positions) {\n      return null;\n    }\n    const data = (oldLayer && oldLayer.props.data) || {\n      header: {\n        vertexCount: pointCount\n      },\n      attributes: {\n        POSITION: positions,\n        NORMAL: normals,\n        COLOR_0: colors\n      }\n    };\n\n    const {pointSize, getPointColor} = this.props;\n    const SubLayerClass = this.getSubLayerClass('pointcloud', PointCloudLayer);\n    return new SubLayerClass(\n      {\n        pointSize\n      },\n      this.getSubLayerProps({\n        id: 'pointcloud'\n      }),\n      {\n        id: `${this.id}-pointcloud-${tileHeader.id}`,\n        tile: tileHeader,\n        data,\n        coordinateSystem: COORDINATE_SYSTEM.METER_OFFSETS,\n        coordinateOrigin: cartographicOrigin,\n        modelMatrix,\n\n        getColor: constantRGBA || getPointColor\n      }\n    );\n  }\n\n  _make3DModelLayer(tileHeader) {\n    const {gltf, instances, cartographicOrigin, modelMatrix} = tileHeader.content;\n\n    const SubLayerClass = this.getSubLayerClass('scenegraph', ScenegraphLayer);\n\n    return new SubLayerClass(\n      {\n        _lighting: 'pbr'\n      },\n      this.getSubLayerProps({\n        id: 'scenegraph'\n      }),\n      {\n        id: `${this.id}-scenegraph-${tileHeader.id}`,\n        tile: tileHeader,\n        data: instances || SINGLE_DATA,\n        scenegraph: gltf,\n\n        coordinateSystem: COORDINATE_SYSTEM.METER_OFFSETS,\n        coordinateOrigin: cartographicOrigin,\n        modelMatrix,\n        getTransformMatrix: instance => instance.modelMatrix,\n        getPosition: [0, 0, 0]\n      }\n    );\n  }\n\n  _makeSimpleMeshLayer(tileHeader, oldLayer) {\n    const content = tileHeader.content;\n    const {attributes, indices, modelMatrix, cartographicOrigin, material, featureIds} = content;\n    const {_getMeshColor} = this.props;\n\n    const geometry =\n      (oldLayer && oldLayer.props.mesh) ||\n      new Geometry({\n        drawMode: GL.TRIANGLES,\n        attributes: getMeshGeometry(attributes),\n        indices\n      });\n\n    const SubLayerClass = this.getSubLayerClass('mesh', _MeshLayer);\n\n    return new SubLayerClass(\n      this.getSubLayerProps({\n        id: 'mesh'\n      }),\n      {\n        id: `${this.id}-mesh-${tileHeader.id}`,\n        tile: tileHeader,\n        mesh: geometry,\n        data: SINGLE_DATA,\n        getColor: _getMeshColor(tileHeader),\n        pbrMaterial: material,\n        modelMatrix,\n        coordinateOrigin: cartographicOrigin,\n        coordinateSystem: COORDINATE_SYSTEM.METER_OFFSETS,\n        featureIds\n      }\n    );\n  }\n\n  renderLayers() {\n    const {tileset3d, layerMap} = this.state;\n    if (!tileset3d) {\n      return null;\n    }\n\n    return tileset3d.tiles\n      .map(tile => {\n        const layerCache = (layerMap[tile.id] = layerMap[tile.id] || {tile});\n        let {layer} = layerCache;\n        if (tile.selected) {\n          // render selected tiles\n          if (!layer) {\n            // create layer\n            layer = this._getSubLayer(tile);\n          } else if (layerCache.needsUpdate) {\n            // props have changed, rerender layer\n            layer = this._getSubLayer(tile, layer);\n            layerCache.needsUpdate = false;\n          } else if (!layer.props.visible) {\n            // update layer visibility\n            // Still has GPU resource but visibility is turned off so turn it back on so we can render it.\n            layer = layer.clone({visible: true});\n          }\n        } else if (layer && layer.props.visible) {\n          // hide non-selected tiles\n          // Still in tileset cache but doesn't need to render this frame. Keep the GPU resource bound but don't render it.\n          layer = layer.clone({visible: false});\n        }\n        layerCache.layer = layer;\n        return layer;\n      })\n      .filter(Boolean);\n  }\n}\n\nfunction getMeshGeometry(contentAttributes) {\n  const attributes = {};\n  attributes.positions = {\n    ...contentAttributes.positions,\n    value: new Float32Array(contentAttributes.positions.value)\n  };\n  if (contentAttributes.normals) {\n    attributes.normals = contentAttributes.normals;\n  }\n  if (contentAttributes.texCoords) {\n    attributes.texCoords = contentAttributes.texCoords;\n  }\n  if (contentAttributes.colors) {\n    attributes.colors = contentAttributes.colors;\n  }\n  if (contentAttributes.uvRegions) {\n    attributes.uvRegions = contentAttributes.uvRegions;\n  }\n  return attributes;\n}\n\nTile3DLayer.layerName = 'Tile3DLayer';\nTile3DLayer.defaultProps = defaultProps;\n"],"file":"tile-3d-layer.js"}