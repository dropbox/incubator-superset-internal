{"version":3,"sources":["../../../src/tile-layer/tileset-2d.js"],"names":["Tile2DHeader","getTileIndices","tileToBoundingBox","RequestScheduler","Matrix4","TILE_STATE_UNKNOWN","TILE_STATE_VISIBLE","TILE_STATE_PLACEHOLDER","TILE_STATE_HIDDEN","TILE_STATE_SELECTED","STRATEGY_NEVER","STRATEGY_REPLACE","STRATEGY_DEFAULT","DEFAULT_CACHE_SCALE","Tileset2D","constructor","opts","_getTileData","getTileData","onTileError","onTileLoad","tile","maxCacheByteSize","_cacheByteSize","byteLength","_resizeCache","onTileUnload","_requestScheduler","maxRequests","throttleRequests","_cache","Map","_tiles","_dirty","_viewport","_selectedTiles","_frameNumber","setOptions","tiles","selectedTiles","isLoaded","every","Object","assign","Number","isFinite","maxZoom","_maxZoom","Math","floor","minZoom","_minZoom","ceil","finalize","values","isLoading","abort","update","viewport","zRange","modelMatrix","modelMatrixAsMatrix4","isModelMatrixNew","equals","_modelMatrix","_modelMatrixInverse","clone","invert","tileIndices","modelMatrixInverse","map","index","_getTile","_rebuildTree","changed","updateTileStates","tileSize","extent","zoomOffset","getTileMetadata","x","y","z","bbox","getParentIndex","tileIndex","_updateTileStates","abortCandidates","ongoingRequestCount","isVisible","Boolean","state","isSelected","push","length","shift","parent","children","_getNearestAncestor","refinementStrategy","getPlaceholderInAncestors","needsPlaceholder","getPlaceholderInChildren","maxCacheSize","Infinity","overflown","size","tileId","delete","Array","from","sort","t1","t2","create","get","loadData","set","isCancelled","t","max","child"],"mappings":"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","sourcesContent":["import Tile2DHeader from './tile-2d-header';\nimport {getTileIndices, tileToBoundingBox} from './utils';\nimport {RequestScheduler} from '@loaders.gl/loader-utils';\nimport {Matrix4} from 'math.gl';\n\nconst TILE_STATE_UNKNOWN = 0;\nconst TILE_STATE_VISIBLE = 1;\n/*\n   show cached parent tile if children are loading\n   +-----------+       +-----+            +-----+-----+\n   |           |       |     |            |     |     |\n   |           |       |     |            |     |     |\n   |           |  -->  +-----+-----+  ->  +-----+-----+\n   |           |             |     |      |     |     |\n   |           |             |     |      |     |     |\n   +-----------+             +-----+      +-----+-----+\n\n   show cached children tiles when parent is loading\n   +-------+----       +------------\n   |       |           |\n   |       |           |\n   |       |           |\n   +-------+----  -->  |\n   |       |           |\n */\nconst TILE_STATE_PLACEHOLDER = 3;\nconst TILE_STATE_HIDDEN = 4;\n// tiles that should be displayed in the current viewport\nconst TILE_STATE_SELECTED = 5;\n\nexport const STRATEGY_NEVER = 'never';\nexport const STRATEGY_REPLACE = 'no-overlap';\nexport const STRATEGY_DEFAULT = 'best-available';\n\nconst DEFAULT_CACHE_SCALE = 5;\n\n/**\n * Manages loading and purging of tiles data. This class caches recently visited tiles\n * and only create new tiles if they are present.\n */\n\nexport default class Tileset2D {\n  /**\n   * Takes in a function that returns tile data, a cache size, and a max and a min zoom level.\n   * Cache size defaults to 5 * number of tiles in the current viewport\n   */\n  constructor(opts) {\n    this.opts = opts;\n    this._getTileData = opts.getTileData;\n\n    this.onTileError = opts.onTileError;\n    this.onTileLoad = tile => {\n      opts.onTileLoad(tile);\n      if (this.opts.maxCacheByteSize) {\n        this._cacheByteSize += tile.byteLength;\n        this._resizeCache();\n      }\n    };\n    this.onTileUnload = opts.onTileUnload;\n\n    this._requestScheduler = new RequestScheduler({\n      maxRequests: opts.maxRequests,\n      throttleRequests: opts.maxRequests > 0\n    });\n\n    // Maps tile id in string {z}-{x}-{y} to a Tile object\n    this._cache = new Map();\n    this._tiles = [];\n    this._dirty = false;\n    this._cacheByteSize = 0;\n\n    // Cache the last processed viewport\n    this._viewport = null;\n    this._selectedTiles = null;\n    this._frameNumber = 0;\n\n    this.setOptions(opts);\n  }\n\n  /* Public API */\n  get tiles() {\n    return this._tiles;\n  }\n\n  get selectedTiles() {\n    return this._selectedTiles;\n  }\n\n  get isLoaded() {\n    return this._selectedTiles.every(tile => tile.isLoaded);\n  }\n\n  setOptions(opts) {\n    Object.assign(this.opts, opts);\n    if (Number.isFinite(opts.maxZoom)) {\n      this._maxZoom = Math.floor(opts.maxZoom);\n    }\n    if (Number.isFinite(opts.minZoom)) {\n      this._minZoom = Math.ceil(opts.minZoom);\n    }\n  }\n\n  // Clean up any outstanding tile requests.\n  finalize() {\n    for (const tile of this._cache.values()) {\n      if (tile.isLoading) {\n        tile.abort();\n      }\n    }\n  }\n\n  /**\n   * Update the cache with the given viewport and model matrix and triggers callback onUpdate.\n   * @param {*} viewport\n   * @param {*} onUpdate\n   * @param {*} modelMatrix\n   */\n  update(viewport, {zRange, modelMatrix} = {}) {\n    const modelMatrixAsMatrix4 = new Matrix4(modelMatrix);\n    const isModelMatrixNew = !modelMatrixAsMatrix4.equals(this._modelMatrix);\n    if (!viewport.equals(this._viewport) || isModelMatrixNew) {\n      if (isModelMatrixNew) {\n        this._modelMatrixInverse = modelMatrix && modelMatrixAsMatrix4.clone().invert();\n        this._modelMatrix = modelMatrix && modelMatrixAsMatrix4;\n      }\n      this._viewport = viewport;\n      const tileIndices = this.getTileIndices({\n        viewport,\n        maxZoom: this._maxZoom,\n        minZoom: this._minZoom,\n        zRange,\n        modelMatrix: this._modelMatrix,\n        modelMatrixInverse: this._modelMatrixInverse\n      });\n      this._selectedTiles = tileIndices.map(index => this._getTile(index, true));\n\n      if (this._dirty) {\n        // Some new tiles are added\n        this._rebuildTree();\n      }\n    }\n\n    // Update tile states\n    const changed = this.updateTileStates();\n\n    if (this._dirty) {\n      // cache size is either the user defined maxSize or 5 * number of current tiles in the viewport.\n      this._resizeCache();\n    }\n\n    if (changed) {\n      this._frameNumber++;\n    }\n\n    return this._frameNumber;\n  }\n\n  /* Public interface for subclassing */\n\n  // Returns array of {x, y, z}\n  getTileIndices({viewport, maxZoom, minZoom, zRange, modelMatrix, modelMatrixInverse}) {\n    const {tileSize, extent, zoomOffset} = this.opts;\n    return getTileIndices({\n      viewport,\n      maxZoom,\n      minZoom,\n      zRange,\n      tileSize,\n      extent,\n      modelMatrix,\n      modelMatrixInverse,\n      zoomOffset\n    });\n  }\n\n  // Add custom metadata to tiles\n  getTileMetadata({x, y, z}) {\n    const {tileSize} = this.opts;\n    return {bbox: tileToBoundingBox(this._viewport, x, y, z, tileSize)};\n  }\n\n  // Returns {x, y, z} of the parent tile\n  getParentIndex(tileIndex) {\n    // Perf: mutate the input object to avoid GC\n    tileIndex.x = Math.floor(tileIndex.x / 2);\n    tileIndex.y = Math.floor(tileIndex.y / 2);\n    tileIndex.z -= 1;\n    return tileIndex;\n  }\n\n  // Returns true if any tile's visibility changed\n  updateTileStates() {\n    this._updateTileStates(this.selectedTiles);\n\n    const {maxRequests} = this.opts;\n\n    const abortCandidates = [];\n    let ongoingRequestCount = 0;\n    let changed = false;\n    for (const tile of this._cache.values()) {\n      const isVisible = Boolean(tile.state & TILE_STATE_VISIBLE);\n      if (tile.isVisible !== isVisible) {\n        changed = true;\n        tile.isVisible = isVisible;\n      }\n\n      // isSelected used in request scheduler\n      tile.isSelected = tile.state === TILE_STATE_SELECTED;\n\n      // Keep track of all the ongoing requests\n      if (tile.isLoading) {\n        ongoingRequestCount++;\n        if (!tile.isSelected) {\n          abortCandidates.push(tile);\n        }\n      }\n    }\n\n    if (maxRequests > 0) {\n      while (ongoingRequestCount > maxRequests && abortCandidates.length > 0) {\n        // There are too many ongoing requests, so abort some that are unselected\n        const tile = abortCandidates.shift();\n        tile.abort();\n        ongoingRequestCount--;\n      }\n    }\n\n    return changed;\n  }\n\n  /* Private methods */\n\n  // This needs to be called every time some tiles have been added/removed from cache\n  _rebuildTree() {\n    const {_cache} = this;\n\n    // Reset states\n    for (const tile of _cache.values()) {\n      tile.parent = null;\n      tile.children.length = 0;\n    }\n\n    // Rebuild tree\n    for (const tile of _cache.values()) {\n      const parent = this._getNearestAncestor(tile.x, tile.y, tile.z);\n      tile.parent = parent;\n      if (parent) {\n        parent.children.push(tile);\n      }\n    }\n  }\n\n  // A selected tile is always visible.\n  // Never show two overlapping tiles.\n  // If a selected tile is loading, try showing a cached ancester with the closest z\n  // If a selected tile is loading, and no ancester is shown - try showing cached\n  // descendants with the closest z\n  _updateTileStates(selectedTiles) {\n    const {_cache} = this;\n    const refinementStrategy = this.opts.refinementStrategy || STRATEGY_DEFAULT;\n\n    // Reset states\n    for (const tile of _cache.values()) {\n      tile.state = TILE_STATE_UNKNOWN;\n    }\n\n    // For all the selected && pending tiles:\n    // - pick the closest ancestor as placeholder\n    // - if no ancestor is visible, pick the closest children as placeholder\n    for (const tile of selectedTiles) {\n      tile.state = TILE_STATE_SELECTED;\n    }\n\n    if (refinementStrategy === STRATEGY_NEVER) {\n      return;\n    }\n    for (const tile of selectedTiles) {\n      getPlaceholderInAncestors(tile, refinementStrategy);\n    }\n    for (const tile of selectedTiles) {\n      if (needsPlaceholder(tile)) {\n        getPlaceholderInChildren(tile);\n      }\n    }\n  }\n\n  /**\n   * Clear tiles that are not visible when the cache is full\n   */\n  /* eslint-disable complexity */\n  _resizeCache() {\n    const {_cache, opts} = this;\n\n    const maxCacheSize =\n      opts.maxCacheSize ||\n      (opts.maxCacheByteSize ? Infinity : DEFAULT_CACHE_SCALE * this.selectedTiles.length);\n    const maxCacheByteSize = opts.maxCacheByteSize || Infinity;\n\n    const overflown = _cache.size > maxCacheSize || this._cacheByteSize > maxCacheByteSize;\n\n    if (overflown) {\n      for (const [tileId, tile] of _cache) {\n        if (!tile.isVisible) {\n          // delete tile\n          this._cacheByteSize -= opts.maxCacheByteSize ? tile.byteLength : 0;\n          _cache.delete(tileId);\n          this.onTileUnload(tile);\n        }\n        if (_cache.size <= maxCacheSize && this._cacheByteSize <= maxCacheByteSize) {\n          break;\n        }\n      }\n      this._rebuildTree();\n      this._dirty = true;\n    }\n    if (this._dirty) {\n      this._tiles = Array.from(this._cache.values())\n        // sort by zoom level so that smaller tiles are displayed on top\n        .sort((t1, t2) => t1.z - t2.z);\n\n      this._dirty = false;\n    }\n  }\n  /* eslint-enable complexity */\n\n  _getTile({x, y, z}, create) {\n    const tileId = `${x},${y},${z}`;\n    let tile = this._cache.get(tileId);\n\n    if (!tile && create) {\n      tile = new Tile2DHeader({\n        x,\n        y,\n        z,\n        onTileLoad: this.onTileLoad,\n        onTileError: this.onTileError\n      });\n      Object.assign(tile, this.getTileMetadata(tile));\n      tile.loadData(this._getTileData, this._requestScheduler);\n      this._cache.set(tileId, tile);\n      this._dirty = true;\n    } else if (tile && tile.isCancelled && !tile.isLoading) {\n      tile.loadData(this._getTileData, this._requestScheduler);\n    }\n\n    return tile;\n  }\n\n  _getNearestAncestor(x, y, z) {\n    const {_minZoom = 0} = this;\n    let index = {x, y, z};\n\n    while (index.z > _minZoom) {\n      index = this.getParentIndex(index);\n      const parent = this._getTile(index);\n      if (parent) {\n        return parent;\n      }\n    }\n    return null;\n  }\n}\n\n// A selected tile needs placeholder from its children if\n// - it is not loaded\n// - none of its ancestors is visible and loaded\nfunction needsPlaceholder(tile) {\n  let t = tile;\n  while (t) {\n    if (t.state & (TILE_STATE_VISIBLE === 0)) {\n      return true;\n    }\n    if (t.isLoaded) {\n      return false;\n    }\n    t = t.parent;\n  }\n  return true;\n}\n\nfunction getPlaceholderInAncestors(tile, refinementStrategy) {\n  let parent;\n  let state = TILE_STATE_PLACEHOLDER;\n  while ((parent = tile.parent)) {\n    if (tile.isLoaded) {\n      // If a tile is loaded, mark all its ancestors as hidden\n      state = TILE_STATE_HIDDEN;\n      if (refinementStrategy === STRATEGY_DEFAULT) {\n        return;\n      }\n    }\n    parent.state = Math.max(parent.state, state);\n    tile = parent;\n  }\n}\n\n// Recursively set children as placeholder\nfunction getPlaceholderInChildren(tile) {\n  for (const child of tile.children) {\n    child.state = Math.max(child.state, TILE_STATE_PLACEHOLDER);\n    if (!child.isLoaded) {\n      getPlaceholderInChildren(child);\n    }\n  }\n}\n"],"file":"tileset-2d.js"}