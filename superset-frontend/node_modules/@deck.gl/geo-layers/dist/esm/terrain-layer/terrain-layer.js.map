{"version":3,"sources":["../../../src/terrain-layer/terrain-layer.js"],"names":["CompositeLayer","log","SimpleMeshLayer","WebMercatorViewport","COORDINATE_SYSTEM","TerrainWorkerLoader","TileLayer","urlType","getURLFromTemplate","DUMMY_DATA","defaultProps","elevationData","texture","optional","meshMaxError","type","value","bounds","compare","color","elevationDecoder","rScaler","gScaler","bScaler","offset","workerUrl","wireframe","material","loaders","urlTemplateToUpdateTrigger","template","Array","isArray","join","TerrainLayer","updateState","props","oldProps","elevationDataChanged","isTiled","includes","setState","shouldReload","state","terrain","loadTerrain","removed","signal","loadOptions","getLoadOptions","skirtHeight","fetch","propName","layer","getTiledTerrainData","tile","dataUrl","textureUrl","bbox","z","viewport","longitude","west","east","latitude","north","south","zoom","bottomLeft","projectFlat","topRight","surface","catch","_","Promise","resolve","all","renderSubLayers","SubLayerClass","getSubLayerClass","data","mesh","coordinateSystem","CARTESIAN","getPosition","d","getColor","onViewportLoad","tiles","zRange","ranges","map","content","filter","Boolean","arr","header","boundingBox","bound","length","minZ","Math","min","x","maxZ","max","renderLayers","tileSize","maxZoom","minZoom","extent","maxRequests","onTileLoad","onTileUnload","onTileError","maxCacheSize","maxCacheByteSize","refinementStrategy","getSubLayerProps","id","getTileData","bind","updateTriggers","_instanced","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer, log} from '@deck.gl/core';\nimport {SimpleMeshLayer} from '@deck.gl/mesh-layers';\nimport {WebMercatorViewport, COORDINATE_SYSTEM} from '@deck.gl/core';\nimport {TerrainWorkerLoader} from '@loaders.gl/terrain';\nimport TileLayer from '../tile-layer/tile-layer';\nimport {urlType, getURLFromTemplate} from '../tile-layer/utils';\n\nconst DUMMY_DATA = [1];\n\nconst defaultProps = {\n  ...TileLayer.defaultProps,\n  // Image url that encodes height data\n  elevationData: urlType,\n  // Image url to use as texture\n  texture: {...urlType, optional: true},\n  // Martini error tolerance in meters, smaller number -> more detailed mesh\n  meshMaxError: {type: 'number', value: 4.0},\n  // Bounding box of the terrain image, [minX, minY, maxX, maxY] in world coordinates\n  bounds: {type: 'array', value: null, optional: true, compare: true},\n  // Color to use if texture is unavailable\n  color: {type: 'color', value: [255, 255, 255]},\n  // Object to decode height data, from (r, g, b) to height in meters\n  elevationDecoder: {\n    type: 'object',\n    value: {\n      rScaler: 1,\n      gScaler: 0,\n      bScaler: 0,\n      offset: 0\n    }\n  },\n  // Supply url to local terrain worker bundle. Only required if running offline and cannot access CDN.\n  workerUrl: {type: 'string', value: null},\n  // Same as SimpleMeshLayer wireframe\n  wireframe: false,\n  material: true,\n\n  loaders: [TerrainWorkerLoader]\n};\n\n// Turns array of templates into a single string to work around shallow change\nfunction urlTemplateToUpdateTrigger(template) {\n  if (Array.isArray(template)) {\n    return template.join(';');\n  }\n  return template;\n}\n\n/**\n * state: {\n *   isTiled: True renders TileLayer of many SimpleMeshLayers, false renders one SimpleMeshLayer\n *   terrain: Mesh object. Only defined when isTiled is false.\n * }\n */\nexport default class TerrainLayer extends CompositeLayer {\n  updateState({props, oldProps}) {\n    const elevationDataChanged = props.elevationData !== oldProps.elevationData;\n    if (elevationDataChanged) {\n      const {elevationData} = props;\n      const isTiled =\n        elevationData &&\n        (Array.isArray(elevationData) ||\n          (elevationData.includes('{x}') && elevationData.includes('{y}')));\n      this.setState({isTiled});\n    }\n\n    // Reloading for single terrain mesh\n    const shouldReload =\n      elevationDataChanged ||\n      props.meshMaxError !== oldProps.meshMaxError ||\n      props.elevationDecoder !== oldProps.elevationDecoder ||\n      props.bounds !== oldProps.bounds;\n\n    if (!this.state.isTiled && shouldReload) {\n      const terrain = this.loadTerrain(props);\n      this.setState({terrain});\n    }\n\n    // TODO - remove in v9\n    if (props.workerUrl) {\n      log.removed('workerUrl', 'loadOptions.terrain.workerUrl')();\n    }\n  }\n\n  loadTerrain({elevationData, bounds, elevationDecoder, meshMaxError, signal}) {\n    if (!elevationData) {\n      return null;\n    }\n    let loadOptions = this.getLoadOptions();\n    loadOptions = {\n      ...loadOptions,\n      terrain: {\n        skirtHeight: this.state.isTiled ? meshMaxError * 2 : 0,\n        ...loadOptions?.terrain,\n        bounds,\n        meshMaxError,\n        elevationDecoder\n      }\n    };\n    const {fetch} = this.props;\n    return fetch(elevationData, {propName: 'elevationData', layer: this, loadOptions, signal});\n  }\n\n  getTiledTerrainData(tile) {\n    const {elevationData, fetch, texture, elevationDecoder, meshMaxError} = this.props;\n    const dataUrl = getURLFromTemplate(elevationData, tile);\n    const textureUrl = getURLFromTemplate(texture, tile);\n\n    const {bbox, signal, z} = tile;\n    const viewport = new WebMercatorViewport({\n      longitude: (bbox.west + bbox.east) / 2,\n      latitude: (bbox.north + bbox.south) / 2,\n      zoom: z\n    });\n    const bottomLeft = viewport.projectFlat([bbox.west, bbox.south]);\n    const topRight = viewport.projectFlat([bbox.east, bbox.north]);\n    const bounds = [bottomLeft[0], bottomLeft[1], topRight[0], topRight[1]];\n\n    const terrain = this.loadTerrain({\n      elevationData: dataUrl,\n      bounds,\n      elevationDecoder,\n      meshMaxError,\n      signal\n    });\n    const surface = textureUrl\n      ? // If surface image fails to load, the tile should still be displayed\n        fetch(textureUrl, {propName: 'texture', layer: this, loaders: [], signal}).catch(_ => null)\n      : Promise.resolve(null);\n\n    return Promise.all([terrain, surface]);\n  }\n\n  renderSubLayers(props) {\n    const SubLayerClass = this.getSubLayerClass('mesh', SimpleMeshLayer);\n    const {data, color} = props;\n\n    if (!data) {\n      return null;\n    }\n\n    const [mesh, texture] = data;\n\n    return new SubLayerClass(props, {\n      data: DUMMY_DATA,\n      mesh,\n      texture,\n      coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n      getPosition: d => [0, 0, 0],\n      getColor: color\n    });\n  }\n\n  // Update zRange of viewport\n  onViewportLoad(tiles) {\n    if (!tiles) {\n      return;\n    }\n\n    const {zRange} = this.state;\n    const ranges = tiles\n      .map(tile => tile.content)\n      .filter(Boolean)\n      .map(arr => {\n        const bounds = arr[0].header.boundingBox;\n        return bounds.map(bound => bound[2]);\n      });\n    if (ranges.length === 0) {\n      return;\n    }\n    const minZ = Math.min(...ranges.map(x => x[0]));\n    const maxZ = Math.max(...ranges.map(x => x[1]));\n\n    if (!zRange || minZ < zRange[0] || maxZ > zRange[1]) {\n      this.setState({zRange: [minZ, maxZ]});\n    }\n  }\n\n  renderLayers() {\n    const {\n      color,\n      material,\n      elevationData,\n      texture,\n      wireframe,\n      meshMaxError,\n      elevationDecoder,\n      tileSize,\n      maxZoom,\n      minZoom,\n      extent,\n      maxRequests,\n      onTileLoad,\n      onTileUnload,\n      onTileError,\n      maxCacheSize,\n      maxCacheByteSize,\n      refinementStrategy\n    } = this.props;\n\n    if (this.state.isTiled) {\n      return new TileLayer(\n        this.getSubLayerProps({\n          id: 'tiles'\n        }),\n        {\n          wireframe,\n          color,\n          material,\n          getTileData: this.getTiledTerrainData.bind(this),\n          renderSubLayers: this.renderSubLayers.bind(this),\n          updateTriggers: {\n            getTileData: {\n              elevationData: urlTemplateToUpdateTrigger(elevationData),\n              texture: urlTemplateToUpdateTrigger(texture),\n              meshMaxError,\n              elevationDecoder\n            }\n          },\n          onViewportLoad: this.onViewportLoad.bind(this),\n          zRange: this.state.zRange || null,\n          tileSize,\n          maxZoom,\n          minZoom,\n          extent,\n          maxRequests,\n          onTileLoad,\n          onTileUnload,\n          onTileError,\n          maxCacheSize,\n          maxCacheByteSize,\n          refinementStrategy\n        }\n      );\n    }\n\n    const SubLayerClass = this.getSubLayerClass('mesh', SimpleMeshLayer);\n    return new SubLayerClass(\n      this.getSubLayerProps({\n        id: 'mesh'\n      }),\n      {\n        data: DUMMY_DATA,\n        mesh: this.state.terrain,\n        texture,\n        _instanced: false,\n        getPosition: d => [0, 0, 0],\n        getColor: color,\n        material,\n        wireframe\n      }\n    );\n  }\n}\n\nTerrainLayer.layerName = 'TerrainLayer';\nTerrainLayer.defaultProps = defaultProps;\n"],"file":"terrain-layer.js"}