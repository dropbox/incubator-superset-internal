{"version":3,"sources":["../../../src/mesh-layer/mesh-layer.js"],"names":["validateGeometryAttributes","attributes","hasColorAttribute","COLOR_0","colors","constant","value","Float32Array","uvRegions","defaultProps","pbrMaterial","type","featureIds","optional","_MeshLayer","shaders","modules","push","pbr","vs","fs","props","state","attributeManager","add","featureIdsPickingColors","size","noAlloc","update","calculateFeatureIdsPickingColors","oldProps","changeFlags","updatePbrMaterialUniforms","opts","model","setUniforms","u_Camera","getUniforms","project_uCameraPosition","u_pickFeatureIds","Boolean","mesh","id","materialParser","parseMaterial","getShaders","Model","context","gl","geometry","defines","parameters","isInstanced","uniforms","unlit","pbrMetallicRoughness","baseColorTexture","GLTFMaterialParser","NORMAL","normals","TEXCOORD_0","texCoords","material","pbrDebug","imageBasedLightingEnvironment","lights","useTangents","attribute","Uint8ClampedArray","length","pickingColor","index","encodePickingColor","SimpleMeshLayer","layerName"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAEA;;AAEA;;AACA;;;;;;;;;;AAEA,SAASA,0BAAT,CAAoCC,UAApC,EAAgD;AAC9C,MAAMC,iBAAiB,GAAGD,UAAU,CAACE,OAAX,IAAsBF,UAAU,CAACG,MAA3D;;AACA,MAAI,CAACF,iBAAL,EAAwB;AACtBD,IAAAA,UAAU,CAACG,MAAX,GAAoB;AAACC,MAAAA,QAAQ,EAAE,IAAX;AAAiBC,MAAAA,KAAK,EAAE,IAAIC,YAAJ,CAAiB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAjB;AAAxB,KAApB;AACD;;AACD,MAAI,CAACN,UAAU,CAACO,SAAhB,EAA2B;AACzBP,IAAAA,UAAU,CAACO,SAAX,GAAuB;AAACH,MAAAA,QAAQ,EAAE,IAAX;AAAiBC,MAAAA,KAAK,EAAE,IAAIC,YAAJ,CAAiB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAjB;AAAxB,KAAvB;AACD;AACF;;AAED,IAAME,YAAY,GAAG;AAEnBC,EAAAA,WAAW,EAAE;AAACC,IAAAA,IAAI,EAAE,QAAP;AAAiBL,IAAAA,KAAK,EAAE;AAAxB,GAFM;AAGnBM,EAAAA,UAAU,EAAE;AAACD,IAAAA,IAAI,EAAE,OAAP;AAAgBL,IAAAA,KAAK,EAAE,IAAvB;AAA6BO,IAAAA,QAAQ,EAAE;AAAvC;AAHO,CAArB;;IAMqBC,U;;;;;;;;;;;;iCACN;AACX,UAAMC,OAAO,yGAAb;AACA,UAAMC,OAAO,GAAGD,OAAO,CAACC,OAAxB;AACAA,MAAAA,OAAO,CAACC,IAAR,CAAaC,SAAb;AACA,6CAAWH,OAAX;AAAoBI,QAAAA,EAAE,EAAFA,wBAApB;AAAwBC,QAAAA,EAAE,EAAFA;AAAxB;AACD;;;sCAEiB;AAAA,UACTR,UADS,GACK,KAAKS,KADV,CACTT,UADS;AAEhB;;AAEA,UAAIA,UAAJ,EAAgB;AACd,aAAKU,KAAL,CAAWC,gBAAX,CAA4BC,GAA5B,CAAgC;AAC9BC,UAAAA,uBAAuB,EAAE;AACvBd,YAAAA,IAAI,MADmB;AAEvBe,YAAAA,IAAI,EAAE,CAFiB;AAGvBC,YAAAA,OAAO,EAAE,IAHc;AAIvBC,YAAAA,MAAM,EAAE,KAAKC;AAJU;AADK,SAAhC;AAQD;AACF;;;sCAE2C;AAAA,UAA/BR,KAA+B,QAA/BA,KAA+B;AAAA,UAAxBS,QAAwB,QAAxBA,QAAwB;AAAA,UAAdC,WAAc,QAAdA,WAAc;AAC1C,8GAAkB;AAACV,QAAAA,KAAK,EAALA,KAAD;AAAQS,QAAAA,QAAQ,EAARA,QAAR;AAAkBC,QAAAA,WAAW,EAAXA;AAAlB,OAAlB;;AACA,UAAIV,KAAK,CAACX,WAAN,KAAsBoB,QAAQ,CAACpB,WAAnC,EAAgD;AAC9C,aAAKsB,yBAAL,CAA+BX,KAAK,CAACX,WAArC;AACD;AACF;;;yBAEIuB,I,EAAM;AAAA,UACFrB,UADE,GACY,KAAKS,KADjB,CACFT,UADE;;AAET,UAAI,CAAC,KAAKU,KAAL,CAAWY,KAAhB,EAAuB;AACrB;AACD;;AACD,WAAKZ,KAAL,CAAWY,KAAX,CAAiBC,WAAjB,CAA6B;AAE3BC,QAAAA,QAAQ,EAAE,KAAKd,KAAL,CAAWY,KAAX,CAAiBG,WAAjB,GAA+BC,uBAFd;AAG3BC,QAAAA,gBAAgB,EAAEC,OAAO,CAAC5B,UAAD;AAHE,OAA7B;AAMA,uGAAWqB,IAAX;AACD;;;6BAEQQ,I,EAAM;AAAA,wBACa,KAAKpB,KADlB;AAAA,UACNqB,EADM,eACNA,EADM;AAAA,UACFhC,WADE,eACFA,WADE;AAEb,UAAMiC,cAAc,GAAG,KAAKC,aAAL,CAAmBlC,WAAnB,EAAgC+B,IAAhC,CAAvB;AACA,UAAM1B,OAAO,GAAG,KAAK8B,UAAL,EAAhB;AACA7C,MAAAA,0BAA0B,CAACyC,IAAI,CAACxC,UAAN,CAA1B;AACA,UAAMiC,KAAK,GAAG,IAAIY,WAAJ,CAAU,KAAKC,OAAL,CAAaC,EAAvB,kCACT,KAAKH,UAAL,EADS;AAEZH,QAAAA,EAAE,EAAFA,EAFY;AAGZO,QAAAA,QAAQ,EAAER,IAHE;AAIZS,QAAAA,OAAO,kCAAMnC,OAAO,CAACmC,OAAd,GAA0BP,cAA1B,aAA0BA,cAA1B,uBAA0BA,cAAc,CAAEO,OAA1C,CAJK;AAKZC,QAAAA,UAAU,EAAER,cAAF,aAAEA,cAAF,uBAAEA,cAAc,CAAEQ,UALhB;AAMZC,QAAAA,WAAW,EAAE;AAND,SAAd;AASA,aAAOlB,KAAP;AACD;;;8CAEyBxB,W,EAAa;AAAA,UAC9BwB,KAD8B,GACrB,KAAKZ,KADgB,CAC9BY,KAD8B;;AAErC,UAAIA,KAAJ,EAAW;AAAA,YACFO,IADE,GACM,KAAKpB,KADX,CACFoB,IADE;AAET,YAAME,cAAc,GAAG,KAAKC,aAAL,CAAmBlC,WAAnB,EAAgC+B,IAAhC,CAAvB;AACAP,QAAAA,KAAK,CAACC,WAAN,CAAkBQ,cAAc,CAACU,QAAjC;AACD;AACF;;;kCAEa3C,W,EAAa+B,I,EAAM;AAC/B,UAAMa,KAAK,GAAGd,OAAO,CACnB9B,WAAW,CAAC6C,oBAAZ,IAAoC7C,WAAW,CAAC6C,oBAAZ,CAAiCC,gBADlD,CAArB;AAGA,UAAMb,cAAc,GAAG,IAAIc,gCAAJ,CAAuB,KAAKV,OAAL,CAAaC,EAApC,EAAwC;AAC7D/C,QAAAA,UAAU,EAAE;AAACyD,UAAAA,MAAM,EAAEjB,IAAI,CAACxC,UAAL,CAAgB0D,OAAzB;AAAkCC,UAAAA,UAAU,EAAEnB,IAAI,CAACxC,UAAL,CAAgB4D;AAA9D,SADiD;AAE7DC,QAAAA,QAAQ;AAAGR,UAAAA,KAAK,EAALA;AAAH,WAAa5C,WAAb,CAFqD;AAG7DqD,QAAAA,QAAQ,EAAE,KAHmD;AAI7DC,QAAAA,6BAA6B,EAAE,IAJ8B;AAK7DC,QAAAA,MAAM,EAAE,IALqD;AAM7DC,QAAAA,WAAW,EAAE;AANgD,OAAxC,CAAvB;AAQA,aAAOvB,cAAP;AACD;;;qDAEgCwB,S,EAAW;AAAA,UACnCvD,UADmC,GACrB,KAAKS,KADgB,CACnCT,UADmC;AAE1C,UAAMN,KAAK,GAAG,IAAI8D,iBAAJ,CAAsBxD,UAAU,CAACyD,MAAX,GAAoBF,SAAS,CAACzC,IAApD,CAAd;AAEA,UAAM4C,YAAY,GAAG,EAArB;;AACA,WAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG3D,UAAU,CAACyD,MAAvC,EAA+CE,KAAK,EAApD,EAAwD;AACtD,aAAKC,kBAAL,CAAwB5D,UAAU,CAAC2D,KAAD,CAAlC,EAA2CD,YAA3C;AAEAhE,QAAAA,KAAK,CAACiE,KAAK,GAAG,CAAT,CAAL,GAAmBD,YAAY,CAAC,CAAD,CAA/B;AACAhE,QAAAA,KAAK,CAACiE,KAAK,GAAG,CAAR,GAAY,CAAb,CAAL,GAAuBD,YAAY,CAAC,CAAD,CAAnC;AACAhE,QAAAA,KAAK,CAACiE,KAAK,GAAG,CAAR,GAAY,CAAb,CAAL,GAAuBD,YAAY,CAAC,CAAD,CAAnC;AACD;;AAEDH,MAAAA,SAAS,CAAC7D,KAAV,GAAkBA,KAAlB;AACD;;;EApGqCmE,2B;;;AAuGxC3D,UAAU,CAAC4D,SAAX,GAAuB,YAAvB;AACA5D,UAAU,CAACL,YAAX,GAA0BA,YAA1B","sourcesContent":["import {GLTFMaterialParser} from '@luma.gl/experimental';\nimport {Model, pbr} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\nimport {SimpleMeshLayer} from '@deck.gl/mesh-layers';\n\nimport vs from './mesh-layer-vertex.glsl';\nimport fs from './mesh-layer-fragment.glsl';\n\nfunction validateGeometryAttributes(attributes) {\n  const hasColorAttribute = attributes.COLOR_0 || attributes.colors;\n  if (!hasColorAttribute) {\n    attributes.colors = {constant: true, value: new Float32Array([1, 1, 1])};\n  }\n  if (!attributes.uvRegions) {\n    attributes.uvRegions = {constant: true, value: new Float32Array([0, 0, 1, 1])};\n  }\n}\n\nconst defaultProps = {\n  // PBR material object. _lighting must be pbr for this to work\n  pbrMaterial: {type: 'object', value: null},\n  featureIds: {type: 'array', value: null, optional: true}\n};\n\nexport default class _MeshLayer extends SimpleMeshLayer {\n  getShaders() {\n    const shaders = super.getShaders();\n    const modules = shaders.modules;\n    modules.push(pbr);\n    return {...shaders, vs, fs};\n  }\n\n  initializeState() {\n    const {featureIds} = this.props;\n    super.initializeState();\n\n    if (featureIds) {\n      this.state.attributeManager.add({\n        featureIdsPickingColors: {\n          type: GL.UNSIGNED_BYTE,\n          size: 3,\n          noAlloc: true,\n          update: this.calculateFeatureIdsPickingColors\n        }\n      });\n    }\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n    if (props.pbrMaterial !== oldProps.pbrMaterial) {\n      this.updatePbrMaterialUniforms(props.pbrMaterial);\n    }\n  }\n\n  draw(opts) {\n    const {featureIds} = this.props;\n    if (!this.state.model) {\n      return;\n    }\n    this.state.model.setUniforms({\n      // Needed for PBR (TODO: find better way to get it)\n      u_Camera: this.state.model.getUniforms().project_uCameraPosition,\n      u_pickFeatureIds: Boolean(featureIds)\n    });\n\n    super.draw(opts);\n  }\n\n  getModel(mesh) {\n    const {id, pbrMaterial} = this.props;\n    const materialParser = this.parseMaterial(pbrMaterial, mesh);\n    const shaders = this.getShaders();\n    validateGeometryAttributes(mesh.attributes);\n    const model = new Model(this.context.gl, {\n      ...this.getShaders(),\n      id,\n      geometry: mesh,\n      defines: {...shaders.defines, ...materialParser?.defines},\n      parameters: materialParser?.parameters,\n      isInstanced: true\n    });\n\n    return model;\n  }\n\n  updatePbrMaterialUniforms(pbrMaterial) {\n    const {model} = this.state;\n    if (model) {\n      const {mesh} = this.props;\n      const materialParser = this.parseMaterial(pbrMaterial, mesh);\n      model.setUniforms(materialParser.uniforms);\n    }\n  }\n\n  parseMaterial(pbrMaterial, mesh) {\n    const unlit = Boolean(\n      pbrMaterial.pbrMetallicRoughness && pbrMaterial.pbrMetallicRoughness.baseColorTexture\n    );\n    const materialParser = new GLTFMaterialParser(this.context.gl, {\n      attributes: {NORMAL: mesh.attributes.normals, TEXCOORD_0: mesh.attributes.texCoords},\n      material: {unlit, ...pbrMaterial},\n      pbrDebug: false,\n      imageBasedLightingEnvironment: null,\n      lights: true,\n      useTangents: false\n    });\n    return materialParser;\n  }\n\n  calculateFeatureIdsPickingColors(attribute) {\n    const {featureIds} = this.props;\n    const value = new Uint8ClampedArray(featureIds.length * attribute.size);\n\n    const pickingColor = [];\n    for (let index = 0; index < featureIds.length; index++) {\n      this.encodePickingColor(featureIds[index], pickingColor);\n\n      value[index * 3] = pickingColor[0];\n      value[index * 3 + 1] = pickingColor[1];\n      value[index * 3 + 2] = pickingColor[2];\n    }\n\n    attribute.value = value;\n  }\n}\n\n_MeshLayer.layerName = '_MeshLayer';\n_MeshLayer.defaultProps = defaultProps;\n"],"file":"mesh-layer.js"}