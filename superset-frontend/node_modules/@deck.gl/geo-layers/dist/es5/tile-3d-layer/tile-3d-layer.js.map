{"version":3,"sources":["../../../src/tile-3d-layer/tile-3d-layer.js"],"names":["SINGLE_DATA","defaultProps","getPointColor","type","value","pointSize","data","loader","Tiles3DLoader","onTilesetLoad","tileset3d","compare","onTileLoad","tileHeader","onTileUnload","onTileError","tile","message","url","_getMeshColor","Tile3DLayer","props","log","removed","state","layerMap","activeViewports","lastUpdatedViewports","changeFlags","somethingChanged","oldProps","_loadTileset","viewportChanged","viewportsNumber","Object","keys","length","_updateTileset","propsChanged","key","needsUpdate","viewport","internalState","id","lastViewport","equals","setChangeFlags","setNeedsUpdate","info","sourceLayer","layerId","substr","substring","tileId","indexOf","object","layer","viewportId","viewportIds","includes","updateAutoHighlight","tilesetUrl","loadOptions","loaders","Array","isArray","options","preload","preloadOptions","headers","fetch","assign","tilesetJson","Tileset3D","_onTileLoad","bind","_onTileUnload","onTileLoadFail","setState","viewports","timeline","context","frameNumber","update","values","tilesetChanged","oldLayer","content","TILE_TYPE","POINTCLOUD","_makePointCloudLayer","SCENEGRAPH","_make3DModelLayer","MESH","_makeSimpleMeshLayer","Error","attributes","pointCount","constantRGBA","cartographicOrigin","modelMatrix","positions","normals","colors","header","vertexCount","POSITION","NORMAL","COLOR_0","SubLayerClass","getSubLayerClass","PointCloudLayer","getSubLayerProps","coordinateSystem","COORDINATE_SYSTEM","METER_OFFSETS","coordinateOrigin","getColor","gltf","instances","ScenegraphLayer","_lighting","scenegraph","getTransformMatrix","instance","getPosition","indices","material","featureIds","geometry","mesh","Geometry","drawMode","getMeshGeometry","_MeshLayer","pbrMaterial","tiles","map","layerCache","selected","_getSubLayer","visible","clone","filter","Boolean","isLoaded","CompositeLayer","contentAttributes","Float32Array","texCoords","uvRegions","layerName"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {Geometry} from '@luma.gl/core';\nimport {COORDINATE_SYSTEM, CompositeLayer} from '@deck.gl/core';\nimport {PointCloudLayer} from '@deck.gl/layers';\nimport {ScenegraphLayer} from '@deck.gl/mesh-layers';\nimport {default as _MeshLayer} from '../mesh-layer/mesh-layer';\nimport {log} from '@deck.gl/core';\n\nimport {load} from '@loaders.gl/core';\nimport {Tileset3D, TILE_TYPE} from '@loaders.gl/tiles';\nimport {Tiles3DLoader} from '@loaders.gl/3d-tiles';\n\nconst SINGLE_DATA = [0];\n\nconst defaultProps = {\n  getPointColor: {type: 'accessor', value: [0, 0, 0, 255]},\n  pointSize: 1.0,\n\n  data: null,\n  loader: Tiles3DLoader,\n\n  onTilesetLoad: {type: 'function', value: tileset3d => {}, compare: false},\n  onTileLoad: {type: 'function', value: tileHeader => {}, compare: false},\n  onTileUnload: {type: 'function', value: tileHeader => {}, compare: false},\n  onTileError: {type: 'function', value: (tile, message, url) => {}, compare: false},\n  _getMeshColor: {type: 'function', value: tileHeader => [255, 255, 255], compare: false}\n};\n\nexport default class Tile3DLayer extends CompositeLayer {\n  initializeState() {\n    if ('onTileLoadFail' in this.props) {\n      log.removed('onTileLoadFail', 'onTileError')();\n    }\n    // prop verification\n    this.state = {\n      layerMap: {},\n      tileset3d: null,\n      activeViewports: {},\n      lastUpdatedViewports: null\n    };\n  }\n\n  get isLoaded() {\n    const {tileset3d} = this.state;\n    return tileset3d && tileset3d.isLoaded();\n  }\n\n  shouldUpdateState({changeFlags}) {\n    return changeFlags.somethingChanged;\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    if (props.data && props.data !== oldProps.data) {\n      this._loadTileset(props.data);\n    }\n\n    if (changeFlags.viewportChanged) {\n      const {activeViewports} = this.state;\n      const viewportsNumber = Object.keys(activeViewports).length;\n      if (viewportsNumber) {\n        this._updateTileset(activeViewports);\n        this.state.lastUpdatedViewports = activeViewports;\n        this.state.activeViewports = {};\n      }\n    }\n    if (changeFlags.propsChanged) {\n      const {layerMap} = this.state;\n      for (const key in layerMap) {\n        layerMap[key].needsUpdate = true;\n      }\n    }\n  }\n\n  activateViewport(viewport) {\n    const {activeViewports, lastUpdatedViewports} = this.state;\n    this.internalState.viewport = viewport;\n\n    activeViewports[viewport.id] = viewport;\n    const lastViewport = lastUpdatedViewports?.[viewport.id];\n    if (!lastViewport || !viewport.equals(lastViewport)) {\n      this.setChangeFlags({viewportChanged: true});\n      this.setNeedsUpdate();\n    }\n  }\n\n  getPickingInfo({info, sourceLayer}) {\n    const {layerMap} = this.state;\n    const layerId = sourceLayer && sourceLayer.id;\n    if (layerId) {\n      // layerId: this.id-[scenegraph|pointcloud]-tileId\n      const substr = layerId.substring(this.id.length + 1);\n      const tileId = substr.substring(substr.indexOf('-') + 1);\n      info.object = layerMap[tileId] && layerMap[tileId].tile;\n    }\n\n    return info;\n  }\n\n  filterSubLayer({layer, viewport}) {\n    const {tile} = layer.props;\n    const {id: viewportId} = viewport;\n    return tile.viewportIds.includes(viewportId);\n  }\n\n  _updateAutoHighlight(info) {\n    if (info.sourceLayer) {\n      info.sourceLayer.updateAutoHighlight(info);\n    }\n  }\n\n  async _loadTileset(tilesetUrl) {\n    const {loadOptions = {}} = this.props;\n\n    // TODO: deprecate `loader` in v9.0\n    let loader = this.props.loader || this.props.loaders;\n    if (Array.isArray(loader)) {\n      loader = loader[0];\n    }\n\n    const options = {loadOptions: {...loadOptions}};\n    if (loader.preload) {\n      const preloadOptions = await loader.preload(tilesetUrl, loadOptions);\n\n      if (preloadOptions.headers) {\n        options.loadOptions.fetch = {\n          ...options.loadOptions.fetch,\n          headers: preloadOptions.headers\n        };\n      }\n      Object.assign(options, preloadOptions);\n    }\n    const tilesetJson = await load(tilesetUrl, loader, options.loadOptions);\n\n    const tileset3d = new Tileset3D(tilesetJson, {\n      onTileLoad: this._onTileLoad.bind(this),\n      onTileUnload: this._onTileUnload.bind(this),\n      onTileLoadFail: this.props.onTileError,\n      ...options\n    });\n\n    this.setState({\n      tileset3d,\n      layerMap: {}\n    });\n\n    this._updateTileset(this.state.activeViewports);\n    this.props.onTilesetLoad(tileset3d);\n  }\n\n  _onTileLoad(tileHeader) {\n    const {lastUpdatedViewports} = this.state;\n    this.props.onTileLoad(tileHeader);\n    this._updateTileset(lastUpdatedViewports);\n    this.setNeedsUpdate();\n  }\n\n  _onTileUnload(tileHeader) {\n    // Was cleaned up from tileset cache. We no longer need to track it.\n    delete this.state.layerMap[tileHeader.id];\n    this.props.onTileUnload(tileHeader);\n  }\n\n  _updateTileset(viewports) {\n    const {tileset3d} = this.state;\n    const {timeline} = this.context;\n    const viewportsNumber = Object.keys(viewports).length;\n    if (!timeline || !viewportsNumber || !tileset3d) {\n      return;\n    }\n    const frameNumber = tileset3d.update(Object.values(viewports));\n    const tilesetChanged = this.state.frameNumber !== frameNumber;\n    if (tilesetChanged) {\n      this.setState({frameNumber});\n    }\n  }\n\n  _getSubLayer(tileHeader, oldLayer) {\n    if (!tileHeader.content) {\n      return null;\n    }\n\n    switch (tileHeader.type) {\n      case TILE_TYPE.POINTCLOUD:\n        return this._makePointCloudLayer(tileHeader, oldLayer);\n      case TILE_TYPE.SCENEGRAPH:\n        return this._make3DModelLayer(tileHeader, oldLayer);\n      case TILE_TYPE.MESH:\n        return this._makeSimpleMeshLayer(tileHeader, oldLayer);\n      default:\n        throw new Error(`Tile3DLayer: Failed to render layer of type ${tileHeader.content.type}`);\n    }\n  }\n\n  _makePointCloudLayer(tileHeader, oldLayer) {\n    const {\n      attributes,\n      pointCount,\n      constantRGBA,\n      cartographicOrigin,\n      modelMatrix\n    } = tileHeader.content;\n    const {positions, normals, colors} = attributes;\n\n    if (!positions) {\n      return null;\n    }\n    const data = (oldLayer && oldLayer.props.data) || {\n      header: {\n        vertexCount: pointCount\n      },\n      attributes: {\n        POSITION: positions,\n        NORMAL: normals,\n        COLOR_0: colors\n      }\n    };\n\n    const {pointSize, getPointColor} = this.props;\n    const SubLayerClass = this.getSubLayerClass('pointcloud', PointCloudLayer);\n    return new SubLayerClass(\n      {\n        pointSize\n      },\n      this.getSubLayerProps({\n        id: 'pointcloud'\n      }),\n      {\n        id: `${this.id}-pointcloud-${tileHeader.id}`,\n        tile: tileHeader,\n        data,\n        coordinateSystem: COORDINATE_SYSTEM.METER_OFFSETS,\n        coordinateOrigin: cartographicOrigin,\n        modelMatrix,\n\n        getColor: constantRGBA || getPointColor\n      }\n    );\n  }\n\n  _make3DModelLayer(tileHeader) {\n    const {gltf, instances, cartographicOrigin, modelMatrix} = tileHeader.content;\n\n    const SubLayerClass = this.getSubLayerClass('scenegraph', ScenegraphLayer);\n\n    return new SubLayerClass(\n      {\n        _lighting: 'pbr'\n      },\n      this.getSubLayerProps({\n        id: 'scenegraph'\n      }),\n      {\n        id: `${this.id}-scenegraph-${tileHeader.id}`,\n        tile: tileHeader,\n        data: instances || SINGLE_DATA,\n        scenegraph: gltf,\n\n        coordinateSystem: COORDINATE_SYSTEM.METER_OFFSETS,\n        coordinateOrigin: cartographicOrigin,\n        modelMatrix,\n        getTransformMatrix: instance => instance.modelMatrix,\n        getPosition: [0, 0, 0]\n      }\n    );\n  }\n\n  _makeSimpleMeshLayer(tileHeader, oldLayer) {\n    const content = tileHeader.content;\n    const {attributes, indices, modelMatrix, cartographicOrigin, material, featureIds} = content;\n    const {_getMeshColor} = this.props;\n\n    const geometry =\n      (oldLayer && oldLayer.props.mesh) ||\n      new Geometry({\n        drawMode: GL.TRIANGLES,\n        attributes: getMeshGeometry(attributes),\n        indices\n      });\n\n    const SubLayerClass = this.getSubLayerClass('mesh', _MeshLayer);\n\n    return new SubLayerClass(\n      this.getSubLayerProps({\n        id: 'mesh'\n      }),\n      {\n        id: `${this.id}-mesh-${tileHeader.id}`,\n        tile: tileHeader,\n        mesh: geometry,\n        data: SINGLE_DATA,\n        getColor: _getMeshColor(tileHeader),\n        pbrMaterial: material,\n        modelMatrix,\n        coordinateOrigin: cartographicOrigin,\n        coordinateSystem: COORDINATE_SYSTEM.METER_OFFSETS,\n        featureIds\n      }\n    );\n  }\n\n  renderLayers() {\n    const {tileset3d, layerMap} = this.state;\n    if (!tileset3d) {\n      return null;\n    }\n\n    return tileset3d.tiles\n      .map(tile => {\n        const layerCache = (layerMap[tile.id] = layerMap[tile.id] || {tile});\n        let {layer} = layerCache;\n        if (tile.selected) {\n          // render selected tiles\n          if (!layer) {\n            // create layer\n            layer = this._getSubLayer(tile);\n          } else if (layerCache.needsUpdate) {\n            // props have changed, rerender layer\n            layer = this._getSubLayer(tile, layer);\n            layerCache.needsUpdate = false;\n          } else if (!layer.props.visible) {\n            // update layer visibility\n            // Still has GPU resource but visibility is turned off so turn it back on so we can render it.\n            layer = layer.clone({visible: true});\n          }\n        } else if (layer && layer.props.visible) {\n          // hide non-selected tiles\n          // Still in tileset cache but doesn't need to render this frame. Keep the GPU resource bound but don't render it.\n          layer = layer.clone({visible: false});\n        }\n        layerCache.layer = layer;\n        return layer;\n      })\n      .filter(Boolean);\n  }\n}\n\nfunction getMeshGeometry(contentAttributes) {\n  const attributes = {};\n  attributes.positions = {\n    ...contentAttributes.positions,\n    value: new Float32Array(contentAttributes.positions.value)\n  };\n  if (contentAttributes.normals) {\n    attributes.normals = contentAttributes.normals;\n  }\n  if (contentAttributes.texCoords) {\n    attributes.texCoords = contentAttributes.texCoords;\n  }\n  if (contentAttributes.colors) {\n    attributes.colors = contentAttributes.colors;\n  }\n  if (contentAttributes.uvRegions) {\n    attributes.uvRegions = contentAttributes.uvRegions;\n  }\n  return attributes;\n}\n\nTile3DLayer.layerName = 'Tile3DLayer';\nTile3DLayer.defaultProps = defaultProps;\n"],"file":"tile-3d-layer.js"}