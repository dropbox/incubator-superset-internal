{"version":3,"sources":["../../../src/h3-layers/h3-cluster-layer.js"],"names":["defaultProps","PolygonLayer","getHexagons","type","value","d","hexagons","H3ClusterLayer","props","oldProps","changeFlags","dataChanged","updateTriggers","data","polygons","iterable","objectInfo","object","index","multiPolygon","polygon","push","getSubLayerRow","setState","elevationScale","extruded","wireframe","filled","stroked","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","lineJointRounded","lineMiterLimit","lineDashJustified","material","getFillColor","getLineColor","getLineWidth","getLineDashArray","getElevation","transitions","SubLayerClass","getSubLayerClass","getSubLayerAccessor","getSubLayerProps","id","state","getPolygon","CompositeLayer","layerName"],"mappings":"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","sourcesContent":["import {h3SetToMultiPolygon} from 'h3-js';\n\nimport {CompositeLayer, createIterable} from '@deck.gl/core';\nimport {PolygonLayer} from '@deck.gl/layers';\n\nconst defaultProps = {\n  ...PolygonLayer.defaultProps,\n  getHexagons: {type: 'accessor', value: d => d.hexagons}\n};\n\nexport default class H3ClusterLayer extends CompositeLayer {\n  updateState({props, oldProps, changeFlags}) {\n    if (\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggers && changeFlags.updateTriggers.getHexagons)\n    ) {\n      const {data, getHexagons} = props;\n      const polygons = [];\n\n      const {iterable, objectInfo} = createIterable(data);\n      for (const object of iterable) {\n        objectInfo.index++;\n        const hexagons = getHexagons(object, objectInfo);\n        const multiPolygon = h3SetToMultiPolygon(hexagons, true);\n\n        for (const polygon of multiPolygon) {\n          polygons.push(this.getSubLayerRow({polygon}, object, objectInfo.index));\n        }\n      }\n\n      this.setState({polygons});\n    }\n  }\n\n  renderLayers() {\n    const {\n      elevationScale,\n      extruded,\n      wireframe,\n      filled,\n      stroked,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified,\n      material,\n\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      transitions,\n      updateTriggers\n    } = this.props;\n\n    const SubLayerClass = this.getSubLayerClass('cluster-region', PolygonLayer);\n\n    return new SubLayerClass(\n      {\n        filled,\n        wireframe,\n\n        extruded,\n        elevationScale,\n\n        stroked,\n        lineWidthScale,\n        lineWidthMinPixels,\n        lineWidthMaxPixels,\n        lineJointRounded,\n        lineMiterLimit,\n        lineDashJustified,\n\n        material,\n        transitions,\n\n        getFillColor: this.getSubLayerAccessor(getFillColor),\n        getLineColor: this.getSubLayerAccessor(getLineColor),\n        getLineWidth: this.getSubLayerAccessor(getLineWidth),\n        getLineDashArray: this.getSubLayerAccessor(getLineDashArray),\n        getElevation: this.getSubLayerAccessor(getElevation)\n      },\n      this.getSubLayerProps({\n        id: 'cluster-region',\n        updateTriggers\n      }),\n      {\n        data: this.state.polygons,\n        getPolygon: d => d.polygon\n      }\n    );\n  }\n}\n\nH3ClusterLayer.defaultProps = defaultProps;\nH3ClusterLayer.layerName = 'H3ClusterLayer';\n"],"file":"h3-cluster-layer.js"}