import { SyncRegistry, RegistryConfig } from '@encodable/registry';
import { ColorScheme, CategoricalScheme, SequentialScheme, DivergingScheme } from '../types';
import ChildRegistry from './ChildRegistry';
import { ColorSchemeWrapper } from './wrappers/wrapColorScheme';
import CategoricalSchemeWrapper from './wrappers/CategoricalSchemeWrapper';
import SequentialSchemeWrapper from './wrappers/SequentialSchemeWrapper';
import DivergingSchemeWrapper from './wrappers/DivergingSchemeWrapper';
export default class ColorSchemeRegistry extends SyncRegistry<ColorScheme> {
    readonly categorical: ChildRegistry<CategoricalScheme, CategoricalSchemeWrapper>;
    readonly sequential: ChildRegistry<SequentialScheme, SequentialSchemeWrapper>;
    readonly diverging: ChildRegistry<DivergingScheme, DivergingSchemeWrapper>;
    private readonly wrappers;
    constructor({ name, overwritePolicy, setFirstItemAsDefault, ...rest }?: RegistryConfig);
    get(schemeId?: string): ColorSchemeWrapper | undefined;
    clear(): this;
    remove(schemeId: string): this;
    register(scheme: ColorScheme | ColorScheme[]): this;
    registerValue(schemeId: string, scheme: ColorScheme): this;
    registerLoader(schemeId: string, loader: () => ColorScheme): this;
}
//# sourceMappingURL=ColorSchemeRegistry.d.ts.map