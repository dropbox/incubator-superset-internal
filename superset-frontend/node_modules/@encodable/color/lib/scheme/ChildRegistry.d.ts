import { SyncRegistry, RegistryConfig } from '@encodable/registry';
import { ColorScheme } from '../types';
declare type ChildRegistryConfig = Pick<RegistryConfig, 'defaultKey'> & {
    name: string;
};
export default class ChildRegistry<Scheme extends ColorScheme, Wrapper extends Scheme> extends SyncRegistry<Scheme> {
    private readonly parent;
    constructor(parent: SyncRegistry<ColorScheme>, { name, defaultKey }: ChildRegistryConfig);
    get(schemeId?: string): Wrapper | undefined;
    register(scheme: Scheme | Scheme[]): this;
    _registerValue(schemeId: string, scheme: Scheme): this;
    registerValue(schemeId: string, scheme: Scheme): this;
    _registerLoader(schemeId: string, loader: () => Scheme): this;
    registerLoader(schemeId: string, loader: () => Scheme): this;
    clear(): this;
    _clear(): this;
    remove(schemeId: string): this;
    _remove(schemeId: string): this;
}
export {};
//# sourceMappingURL=ChildRegistry.d.ts.map