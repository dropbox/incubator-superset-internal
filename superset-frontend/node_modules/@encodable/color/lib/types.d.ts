export declare type ColorSchemeType = 'categorical' | 'sequential' | 'diverging';
declare type BaseColorScheme<T extends ColorSchemeType> = {
    /** scheme type */
    type: T;
    /** id of this scheme */
    id: string;
    /** human-friendly name to refer to */
    label?: string;
    /** more description (if any) */
    description?: string;
};
export declare type ColorInterpolator = (t: number) => string;
export declare type ContinuousScheme<T extends ColorSchemeType> = BaseColorScheme<T> & ({
    /** color palette */
    colors: readonly string[] | readonly (readonly string[])[];
    /** color interpolator function */
    interpolator?: ColorInterpolator;
} | {
    /** color palette */
    colors?: readonly string[] | readonly (readonly string[])[];
    /** color interpolator function */
    interpolator: ColorInterpolator;
});
export declare type CategoricalScheme = BaseColorScheme<'categorical'> & {
    /** color palette */
    colors: readonly string[];
};
export declare type SequentialScheme = ContinuousScheme<'sequential'>;
export declare type DivergingScheme = ContinuousScheme<'diverging'>;
export declare type ColorScheme = CategoricalScheme | SequentialScheme | DivergingScheme;
export {};
//# sourceMappingURL=types.d.ts.map