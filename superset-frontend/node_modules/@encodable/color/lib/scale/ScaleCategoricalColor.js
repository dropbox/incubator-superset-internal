"use strict";

exports.__esModule = true;
exports.default = void 0;

var _d3Scale = require("d3-scale");

var _ExtensibleFunction = _interopRequireDefault(require("../models/ExtensibleFunction"));

var _stringifyAndTrim = _interopRequireDefault(require("../utils/stringifyAndTrim"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ScaleCategoricalColor extends _ExtensibleFunction.default {
  /**
   * Constructor
   * @param {*} colors an array of colors
   * @param {*} parentmanualColors optional parameter that comes from parent
   * (usually CategoricalColorNamespace) and supersede this.manualColors
   */
  constructor(stateOrColors, parentmanualColors) {
    super(value => this.getColor(value));

    _defineProperty(this, "state", void 0);

    _defineProperty(this, "parentManualColors", void 0);

    if (Array.isArray(stateOrColors)) {
      this.state = {
        manualColors: {},
        scale: (0, _d3Scale.scaleOrdinal)(stateOrColors)
      };
    } else {
      this.state = stateOrColors;
    }

    this.parentManualColors = parentmanualColors;
  }

  get colors() {
    return this.state.scale.range();
  }

  getColor(value) {
    const cleanedValue = (0, _stringifyAndTrim.default)(value);
    const parentColor = this.parentManualColors && this.parentManualColors[cleanedValue];

    if (parentColor) {
      return parentColor;
    }

    const manualColor = this.state.manualColors[cleanedValue];

    if (manualColor) {
      return manualColor;
    }

    return this.state.scale(cleanedValue);
  }
  /**
   * Enforce specific color for given value
   * @param {*} value value
   * @param {*} manualColor manualColor
   */


  setColor(value, manualColor) {
    this.state.manualColors[(0, _stringifyAndTrim.default)(value)] = manualColor;
    return this;
  }
  /**
   * Get a mapping of data values to colors
   * @returns an object where the key is the data value and the value is the hex color code
   */


  getColorMap() {
    const colorMap = {};
    this.state.scale.domain().forEach(value => {
      colorMap[String(value)] = this.state.scale(value);
    });
    return { ...colorMap,
      ...this.state.manualColors,
      ...this.parentManualColors
    };
  }
  /**
   * Returns an exact copy of this scale. Changes to this scale will not affect the returned scale, and vice versa.
   */


  copy() {
    const copy = new ScaleCategoricalColor({
      manualColors: { ...this.state.manualColors
      },
      scale: this.state.scale.copy()
    }, this.parentManualColors);
    return copy;
  }
  /**
   * Returns the scale's current domain.
   */


  domain(newDomain) {
    if (typeof newDomain === 'undefined') {
      return this.state.scale.domain();
    }

    this.state.scale.domain(newDomain);
    return this;
  }
  /**
   * Returns the scale's current range.
   */


  range(newRange) {
    if (typeof newRange === 'undefined') {
      return this.state.scale.range();
    }

    this.state.scale.range(newRange);
    return this;
  }
  /**
   * Returns the current unknown value, which defaults to "implicit".
   */


  unknown(value) {
    if (typeof value === 'undefined') {
      return this.state.scale.unknown();
    }

    this.state.scale.unknown(value);
    return this;
  }

}

var _default = ScaleCategoricalColor;
exports.default = _default;