function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-disable no-underscore-dangle */
import { SyncRegistry } from '@encodable/registry';
export default class ChildRegistry extends SyncRegistry {
  constructor(parent, {
    name,
    defaultKey
  }) {
    super({
      name,
      defaultKey,
      globalId: typeof parent.state.globalId === 'undefined' ? undefined : parent.state.globalId + ":" + name,
      overwritePolicy: parent.state.overwritePolicy,
      setFirstItemAsDefault: parent.state.setFirstItemAsDefault
    });

    _defineProperty(this, "parent", void 0);

    this.parent = parent;
  }

  get(schemeId) {
    const targetKey = schemeId != null ? schemeId : this.getDefaultKey();
    return typeof targetKey !== 'undefined' && this.has(targetKey) ? this.parent.get(targetKey) : undefined;
  }

  register(scheme) {
    if (Array.isArray(scheme)) {
      scheme.forEach(v => {
        this.registerValue(v.id, v);
      });
      return this;
    }

    return this.registerValue(scheme.id, scheme);
  }

  _registerValue(schemeId, scheme) {
    return super.registerValue(schemeId, scheme);
  }

  registerValue(schemeId, scheme) {
    this.parent.registerValue(schemeId, scheme);
    return this;
  }

  _registerLoader(schemeId, loader) {
    return super.registerLoader(schemeId, loader);
  }

  registerLoader(schemeId, loader) {
    this.parent.registerLoader(schemeId, loader);
    return this;
  }

  clear() {
    this.keys().forEach(key => this.parent.remove(key));
    return super.clear();
  }

  _clear() {
    return super.clear();
  }

  remove(schemeId) {
    this.parent.remove(schemeId);
    return this;
  }

  _remove(schemeId) {
    return super.remove(schemeId);
  }

}