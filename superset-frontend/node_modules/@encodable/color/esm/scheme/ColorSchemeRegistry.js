function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-disable no-underscore-dangle */
import { SyncRegistry, OverwritePolicy } from '@encodable/registry';
import ChildRegistry from './ChildRegistry';
import wrapColorScheme from './wrappers/wrapColorScheme';
export default class ColorSchemeRegistry extends SyncRegistry {
  constructor({
    name = 'ColorScheme',
    overwritePolicy = OverwritePolicy.WARN,
    setFirstItemAsDefault = true,
    ...rest
  } = {}) {
    super({
      name,
      overwritePolicy,
      setFirstItemAsDefault,
      ...rest
    });

    _defineProperty(this, "categorical", void 0);

    _defineProperty(this, "sequential", void 0);

    _defineProperty(this, "diverging", void 0);

    _defineProperty(this, "wrappers", void 0);

    this.categorical = new ChildRegistry(this, {
      name: 'categorical'
    });
    this.sequential = new ChildRegistry(this, {
      name: 'sequential'
    });
    this.diverging = new ChildRegistry(this, {
      name: 'diverging'
    });
    this.wrappers = new SyncRegistry();
  }

  get(schemeId) {
    const targetKey = schemeId != null ? schemeId : this.getDefaultKey();

    if (typeof targetKey === 'undefined') {
      return undefined;
    }

    const value = super.get(targetKey);

    if (typeof value === 'undefined') {
      return value;
    }

    if (this.wrappers.has(targetKey)) {
      return this.wrappers.get(schemeId);
    }

    const wrapper = wrapColorScheme(value);
    this.wrappers.registerValue(targetKey, wrapper);
    return wrapper;
  }

  clear() {
    super.clear();

    this.categorical._clear();

    this.sequential._clear();

    this.diverging._clear();

    return this;
  }

  remove(schemeId) {
    super.remove(schemeId);

    this.categorical._remove(schemeId);

    this.sequential._remove(schemeId);

    this.diverging._remove(schemeId);

    return this;
  }

  register(scheme) {
    if (Array.isArray(scheme)) {
      scheme.forEach(v => {
        this.registerValue(v.id, v);
      });
      return this;
    }

    return this.registerValue(scheme.id, scheme);
  }

  registerValue(schemeId, scheme) {
    switch (scheme.type) {
      case 'categorical':
        super.registerValue(schemeId, scheme);

        this.categorical._registerValue(schemeId, scheme);

        break;

      case 'sequential':
        super.registerValue(schemeId, scheme);

        this.sequential._registerValue(schemeId, scheme);

        break;

      case 'diverging':
        super.registerValue(schemeId, scheme);

        this.diverging._registerValue(schemeId, scheme);

        break;

      default:
    }

    return this;
  }

  registerLoader(schemeId, loader) {
    const value = loader();

    switch (value.type) {
      case 'categorical':
        super.registerLoader(schemeId, loader);

        this.categorical._registerLoader(schemeId, loader);

        break;

      case 'sequential':
        super.registerLoader(schemeId, loader);

        this.sequential._registerLoader(schemeId, loader);

        break;

      case 'diverging':
        super.registerLoader(schemeId, loader);

        this.diverging._registerLoader(schemeId, loader);

        break;

      default:
    }

    return this;
  }

}