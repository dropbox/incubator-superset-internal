function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { SyncRegistry } from '@encodable/registry';
import ColorNamespace from './ColorNamespace';
export const DEFAULT_NAMESPACE = 'DEFAULT_NAMESPACE';
export default class ColorNamespaceRegistry {
  constructor({
    name = 'ColorNamespaceRegistry',
    globalId,
    ...rest
  } = {}) {
    _defineProperty(this, "namespaceStates", void 0);

    _defineProperty(this, "namespaceInstances", void 0);

    // only make the state global is using globalId
    this.namespaceStates = new SyncRegistry({
      name,
      globalId,
      ...rest
    }); // the instances are always local since these are wrappers

    this.namespaceInstances = new SyncRegistry({
      name,
      ...rest
    });

    if (typeof this.namespaceStates.getDefaultKey() === 'undefined') {
      this.setDefaultNamespace(DEFAULT_NAMESPACE);
    }
  }

  getDefaultNamespace() {
    var _this$namespaceStates;

    return (_this$namespaceStates = this.namespaceStates.getDefaultKey()) != null ? _this$namespaceStates : DEFAULT_NAMESPACE;
  }

  setDefaultNamespace(namespace) {
    this.namespaceStates.setDefaultKey(namespace);
    this.namespaceInstances.setDefaultKey(namespace);
    return this;
  }

  has(namespace) {
    return this.namespaceStates.has(namespace);
  }

  get(namespace = this.getDefaultNamespace()) {
    if (!this.namespaceStates.has(namespace)) {
      const ns = new ColorNamespace(namespace);
      this.namespaceStates.registerValue(namespace, ns.state);
      this.namespaceInstances.registerValue(namespace, ns);
      return ns;
    }

    if (this.namespaceInstances.has(namespace)) {
      return this.namespaceInstances.get(namespace);
    }

    const ns = new ColorNamespace(this.namespaceStates.get(namespace));
    this.namespaceInstances.registerValue(namespace, ns);
    return ns;
  }

  keys() {
    return this.namespaceStates.keys();
  }

  clear() {
    this.namespaceStates.clear();
    this.namespaceInstances.clear();
    return this;
  }

  remove(namespace) {
    this.namespaceStates.remove(namespace);
    this.namespaceInstances.remove(namespace);
    return this;
  }

}