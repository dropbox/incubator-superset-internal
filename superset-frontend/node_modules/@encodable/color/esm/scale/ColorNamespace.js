function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { SyncRegistry } from '@encodable/registry';
import { getCategoricalScheme, getColorSchemeRegistry } from '../scheme';
import stringifyAndTrim from '../utils/stringifyAndTrim';
import ScaleCategoricalColor from './ScaleCategoricalColor';
export default class ColorNamespace {
  constructor(nameOrState) {
    _defineProperty(this, "state", void 0);

    _defineProperty(this, "scales", void 0);

    this.state = typeof nameOrState === 'string' ? {
      name: nameOrState,
      manualColors: {},
      scales: {}
    } : nameOrState;
    this.scales = new SyncRegistry();
  }

  get name() {
    return this.state.name;
  }
  /**
   * Check if the specified value is subjected to manual color assignment
   * @param value
   */


  hasManualColor(value) {
    return typeof this.state.manualColors[stringifyAndTrim(value)] !== 'undefined';
  }
  /**
   * Enforce specific color for given value
   * This will apply across all color scales
   * in this namespace.
   * @param {*} value value
   * @param {*} manualColor color
   */


  setColor(value, manualColor) {
    this.state.manualColors[stringifyAndTrim(value)] = manualColor;
    return this;
  }
  /**
   * Removed enforced specific color for given value
   * This will apply across all color scales
   * in this namespace.
   * @param {*} value value
   * @param {*} manualColor color
   */


  unsetColor(value) {
    delete this.state.manualColors[stringifyAndTrim(value)];
    return this;
  }
  /**
   * Clear all manually assigned colors
   */


  clearManualColors() {
    this.state.manualColors = {};
    return this;
  }

  hasScale(scheme) {
    return typeof this.state.scales[scheme] !== 'undefined';
  }

  getScale(scheme) {
    var _ref;

    const schemeName = (_ref = scheme != null ? scheme : getColorSchemeRegistry().categorical.getDefaultKey()) != null ? _ref : 'undefined';

    if (typeof this.state.scales[schemeName] === 'undefined') {
      var _getCategoricalScheme, _getCategoricalScheme2;

      // create scale
      const scale = new ScaleCategoricalColor((_getCategoricalScheme = (_getCategoricalScheme2 = getCategoricalScheme(schemeName)) == null ? void 0 : _getCategoricalScheme2.colors.slice()) != null ? _getCategoricalScheme : [], this.state.manualColors); // add state to lookup

      this.state.scales[schemeName] = scale.state;
      this.scales.registerValue(schemeName, scale);
      return scale;
    }

    if (this.scales.has(schemeName)) {
      return this.scales.get(schemeName);
    } // create scale


    const scale = new ScaleCategoricalColor(this.state.scales[schemeName], this.state.manualColors);
    this.scales.registerValue(schemeName, scale);
    return scale;
  }

}