"use strict";

exports.__esModule = true;
exports.default = void 0;

var _globalBox = require("global-box");

var _OverwritePolicy = _interopRequireDefault(require("./OverwritePolicy"));

var _createRegistryState = _interopRequireDefault(require("./createRegistryState"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Registry class
 *
 * Can use generic to specify type of item in the registry
 * @type V Type of value
 * @type L Type of value returned from loader function when using `registerLoader()`.
 * `L` can be either `V`, `Promise<V>` or `V | Promise<V>`
 * Set `L=V` when does not support asynchronous loader.
 * By default `L` is set to `V | Promise<V>` to support
 * both synchronous and asynchronous loaders.
 */
class Registry {
  constructor(config = {}) {
    _defineProperty(this, "state", void 0);

    if (typeof config.globalId === 'undefined') {
      this.state = (0, _createRegistryState.default)(config);
    } else {
      this.state = (0, _globalBox.globalBox)().getOrCreate(config.globalId, () => (0, _createRegistryState.default)(config));
    }
  }
  /**
   * Clear all item in the registry.
   * Reset default key to initial default key (if any)
   */


  clear() {
    this.state.items = {};
    this.state.promises = {};
    this.state.defaultKey = this.state.initialDefaultKey;
    return this;
  }
  /**
   * Check if item with the given key exists
   * @param key the key to look for
   */


  has(key) {
    const item = this.state.items[key];
    return item !== null && item !== undefined;
  }
  /**
   * Register key with a value
   * @param key
   * @param value
   */


  registerValue(key, value) {
    const item = this.state.items[key];
    const willOverwrite = this.has(key) && ('value' in item && item.value !== value || 'loader' in item);

    if (willOverwrite) {
      if (this.state.overwritePolicy === _OverwritePolicy.default.WARN) {
        console.warn("Item with key \"" + key + "\" already exists. You are assigning a new value.");
      } else if (this.state.overwritePolicy === _OverwritePolicy.default.PROHIBIT) {
        throw new Error("Item with key \"" + key + "\" already exists. Cannot overwrite.");
      }
    }

    if (!item || willOverwrite) {
      this.state.items[key] = {
        value
      };
      delete this.state.promises[key];
    } // If there is no default, set as default


    if (this.state.setFirstItemAsDefault && !this.state.defaultKey) {
      this.state.defaultKey = key;
    }

    return this;
  }
  /**
   * Register key with a loader, a function that returns a value.
   * @param key
   * @param loader
   */


  registerLoader(key, loader) {
    const item = this.state.items[key];
    const willOverwrite = this.has(key) && ('loader' in item && item.loader !== loader || 'value' in item);

    if (willOverwrite) {
      if (this.state.overwritePolicy === _OverwritePolicy.default.WARN) {
        console.warn("Item with key \"" + key + "\" already exists. You are assigning a new value.");
      } else if (this.state.overwritePolicy === _OverwritePolicy.default.PROHIBIT) {
        throw new Error("Item with key \"" + key + "\" already exists. Cannot overwrite.");
      }
    }

    if (!item || willOverwrite) {
      this.state.items[key] = {
        loader
      };
      delete this.state.promises[key];
    } // If there is no default, set as default


    if (this.state.setFirstItemAsDefault && !this.state.defaultKey) {
      this.state.defaultKey = key;
    }

    return this;
  }
  /**
   * Get value from the specified key.
   * If the item contains a loader, invoke the loader and return its output.
   * @param key
   */


  get(key) {
    const targetKey = key != null ? key : this.state.defaultKey;
    if (typeof targetKey === 'undefined') return undefined;
    const item = this.state.items[targetKey];

    if (item !== undefined) {
      if ('loader' in item) {
        return item.loader && item.loader();
      }

      return item.value;
    }

    return undefined;
  }
  /**
   * Similar to `.get()` but wrap results in a `Promise`.
   * This is useful when some items are async loaders to provide uniform output.
   * @param key
   */


  getAsPromise(key) {
    const promise = this.state.promises[key];

    if (typeof promise !== 'undefined') {
      return promise;
    }

    const item = this.get(key);

    if (item !== undefined) {
      const newPromise = Promise.resolve(item);
      this.state.promises[key] = newPromise;
      return newPromise;
    }

    return Promise.reject(new Error("Item with key \"" + key + "\" is not registered."));
  }
  /**
   * Return the current default key.
   * Default key is a fallback key to use if `.get()` was called without a key.
   */


  getDefaultKey() {
    return this.state.defaultKey;
  }
  /**
   * Set default key to the specified key
   * Default key is a fallback key to use if `.get()` was called without a key.
   * @param key
   */


  setDefaultKey(key) {
    this.state.defaultKey = key;
    return this;
  }
  /**
   * Remove default key.
   * Default key is a fallback key to use if `.get()` was called without a key.
   */


  clearDefaultKey() {
    this.state.defaultKey = undefined;
    return this;
  }
  /**
   * Return a map of all key-values in this registry.
   */


  getMap() {
    return this.keys().reduce((prev, key) => {
      const map = prev;
      map[key] = this.get(key);
      return map;
    }, {});
  }
  /**
   * Same with `.getMap()` but return a `Promise` that resolves when all values are resolved.
   */


  getMapAsPromise() {
    const keys = this.keys();
    return Promise.all(keys.map(key => this.getAsPromise(key))).then(values => values.reduce((prev, value, i) => {
      const map = prev;
      map[keys[i]] = value;
      return map;
    }, {}));
  }
  /**
   * Return all keys in this registry.
   */


  keys() {
    return Object.keys(this.state.items);
  }
  /**
   * Return all values in this registry.
   * For loaders, they are invoked and their outputs are returned.
   */


  values() {
    return this.keys().map(key => this.get(key));
  }
  /**
   * Same with `.values()` but return a `Promise` that resolves when all values are resolved.
   */


  valuesAsPromise() {
    return Promise.all(this.keys().map(key => this.getAsPromise(key)));
  }
  /**
   * Return all key-value entries in this registry.
   */


  entries() {
    return this.keys().map(key => ({
      key,
      value: this.get(key)
    }));
  }
  /**
   * Same with `.entries()` but return a `Promise` that resolves when all values are resolved.
   */


  entriesAsPromise() {
    const keys = this.keys();
    return Promise.all(keys.map(key => this.getAsPromise(key))).then(values => values.map((value, i) => ({
      key: keys[i],
      value
    })));
  }
  /**
   * Remove the item with the specified key.
   * Do nothing if an item with the given key does not exist.
   * @param key
   */


  remove(key) {
    delete this.state.items[key];
    delete this.state.promises[key];
    return this;
  }
  /**
   * Get number of items in the registry
   */


  size() {
    return this.keys().length;
  }
  /**
   * Returns true if there is no item in the registry
   */


  isEmpty() {
    return this.size() === 0;
  }

}

exports.default = Registry;