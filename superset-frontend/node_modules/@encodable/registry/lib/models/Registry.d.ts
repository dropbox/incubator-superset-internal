import { RegistryState, RegistryConfig } from '../types';
/**
 * Registry class
 *
 * Can use generic to specify type of item in the registry
 * @type V Type of value
 * @type L Type of value returned from loader function when using `registerLoader()`.
 * `L` can be either `V`, `Promise<V>` or `V | Promise<V>`
 * Set `L=V` when does not support asynchronous loader.
 * By default `L` is set to `V | Promise<V>` to support
 * both synchronous and asynchronous loaders.
 */
export default class Registry<V, L extends V | Promise<V> = V | Promise<V>> {
    readonly state: RegistryState<V, L>;
    constructor(config?: RegistryConfig);
    /**
     * Clear all item in the registry.
     * Reset default key to initial default key (if any)
     */
    clear(): this;
    /**
     * Check if item with the given key exists
     * @param key the key to look for
     */
    has(key: string): boolean;
    /**
     * Register key with a value
     * @param key
     * @param value
     */
    registerValue(key: string, value: V): this;
    /**
     * Register key with a loader, a function that returns a value.
     * @param key
     * @param loader
     */
    registerLoader(key: string, loader: () => L): this;
    /**
     * Get value from the specified key.
     * If the item contains a loader, invoke the loader and return its output.
     * @param key
     */
    get(key?: string): V | L | undefined;
    /**
     * Similar to `.get()` but wrap results in a `Promise`.
     * This is useful when some items are async loaders to provide uniform output.
     * @param key
     */
    getAsPromise(key: string): Promise<V>;
    /**
     * Return the current default key.
     * Default key is a fallback key to use if `.get()` was called without a key.
     */
    getDefaultKey(): string | undefined;
    /**
     * Set default key to the specified key
     * Default key is a fallback key to use if `.get()` was called without a key.
     * @param key
     */
    setDefaultKey(key: string): this;
    /**
     * Remove default key.
     * Default key is a fallback key to use if `.get()` was called without a key.
     */
    clearDefaultKey(): this;
    /**
     * Return a map of all key-values in this registry.
     */
    getMap(): {
        [key: string]: V | L | undefined;
    };
    /**
     * Same with `.getMap()` but return a `Promise` that resolves when all values are resolved.
     */
    getMapAsPromise(): Promise<{
        [key: string]: V;
    }>;
    /**
     * Return all keys in this registry.
     */
    keys(): string[];
    /**
     * Return all values in this registry.
     * For loaders, they are invoked and their outputs are returned.
     */
    values(): (V | L | undefined)[];
    /**
     * Same with `.values()` but return a `Promise` that resolves when all values are resolved.
     */
    valuesAsPromise(): Promise<V[]>;
    /**
     * Return all key-value entries in this registry.
     */
    entries(): {
        key: string;
        value: V | L | undefined;
    }[];
    /**
     * Same with `.entries()` but return a `Promise` that resolves when all values are resolved.
     */
    entriesAsPromise(): Promise<{
        key: string;
        value: V;
    }[]>;
    /**
     * Remove the item with the specified key.
     * Do nothing if an item with the given key does not exist.
     * @param key
     */
    remove(key: string): this;
    /**
     * Get number of items in the registry
     */
    size(): number;
    /**
     * Returns true if there is no item in the registry
     */
    isEmpty(): boolean;
}
//# sourceMappingURL=Registry.d.ts.map