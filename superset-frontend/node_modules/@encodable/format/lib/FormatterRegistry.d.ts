import { SyncRegistry, RegistryConfig } from '@encodable/registry';
export default abstract class FormatterRegistry<Formatter extends (v: any) => string> extends SyncRegistry<Formatter> {
    constructor({ overwritePolicy, ...rest }: RegistryConfig);
    /**
     * Subclasses must implement this to create formatter from format string.
     * Worst-case can return `fallbackFormatter`.
     */
    protected abstract createFormatter(format: string): Formatter;
    /**
     * Get a Formatter by name
     * @param format Formatter name, usually is a format string
     */
    get(format?: string): Formatter;
    /**
     * Format value with the named Formatter
     * @param format Formatter name, usually is a format string
     * @param value value to be formatted
     */
    format(format: string | undefined, value: Parameters<Formatter>[0]): string;
}
//# sourceMappingURL=FormatterRegistry.d.ts.map