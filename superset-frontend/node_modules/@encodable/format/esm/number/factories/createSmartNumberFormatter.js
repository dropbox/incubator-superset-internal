import { format as d3Format } from 'd3-format';
import NumberFormats from '../NumberFormats';
import createNumberFormatter from '../createNumberFormatter';
const siFormatter = d3Format(".3~s");
const float2PointFormatter = d3Format(".2~f");
const float4PointFormatter = d3Format(".4~f");

function formatValue(value) {
  if (value === 0) {
    return '0';
  }

  const absoluteValue = Math.abs(value);

  if (absoluteValue >= 1000) {
    // Normal human being are more familiar
    // with billion (B) that giga (G)
    return siFormatter(value).replace('G', 'B');
  }

  if (absoluteValue >= 1) {
    return float2PointFormatter(value);
  }

  if (absoluteValue >= 0.001) {
    return float4PointFormatter(value);
  }

  if (absoluteValue > 0.000001) {
    return siFormatter(value * 1000000) + "\xB5";
  }

  return siFormatter(value);
}

const BLANK = () => '';

const ADD_PLUS = value => value > 0 ? '+' : '';

export default function createSmartNumberFormatter({
  signed = false,
  id,
  label,
  description
} = {}) {
  const getSign = signed ? ADD_PLUS : BLANK;
  return createNumberFormatter(value => "" + getSign(value) + formatValue(value), {
    id: (id != null ? id : signed) ? NumberFormats.signed.SMART_NUMBER : NumberFormats.SMART_NUMBER,
    label: label != null ? label : 'Adaptive formatter',
    description
  });
}