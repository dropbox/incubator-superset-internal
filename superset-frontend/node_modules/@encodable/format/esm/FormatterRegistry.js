import { SyncRegistry, OverwritePolicy } from '@encodable/registry';
export default class FormatterRegistry extends SyncRegistry {
  constructor({
    overwritePolicy = OverwritePolicy.WARN,
    ...rest
  }) {
    super({
      overwritePolicy,
      ...rest
    });
  }
  /**
   * Subclasses must implement this to create formatter from format string.
   * Worst-case can return `fallbackFormatter`.
   */


  /**
   * Get a Formatter by name
   * @param format Formatter name, usually is a format string
   */
  get(format) {
    const targetFormat = ("" + (format === null || typeof format === 'undefined' || format.trim().length === 0 ? this.getDefaultKey() : format)).trim();

    if (this.has(targetFormat)) {
      return super.get(targetFormat);
    } // Create new formatter if does not exist


    const formatter = this.createFormatter(targetFormat);
    this.registerValue(targetFormat, formatter);
    return formatter;
  }
  /**
   * Format value with the named Formatter
   * @param format Formatter name, usually is a format string
   * @param value value to be formatted
   */


  format(format, value) {
    return this.get(format)(value);
  }

}