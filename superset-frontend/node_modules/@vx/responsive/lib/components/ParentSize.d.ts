import React from 'react';
import ResizeObserver from 'resize-observer-polyfill';
export declare type ParentSizeProps = {
    className?: string;
    debounceTime?: number;
    parentSizeStyles?: React.CSSProperties;
    children: (args: {
        ref: HTMLDivElement | null;
        resize: (state: ParentSizeState) => void;
    } & ParentSizeState) => React.ReactNode;
};
declare type ParentSizeState = {
    width: number;
    height: number;
    top: number;
    left: number;
};
export declare type ParentSizeProvidedProps = ParentSizeState;
export default class ParentSize extends React.Component<ParentSizeProps & JSX.IntrinsicElements['div'], ParentSizeState> {
    static defaultProps: {
        debounceTime: number;
        parentSizeStyles: {
            width: string;
            height: string;
        };
    };
    animationFrameID: number | null;
    resizeObserver: ResizeObserver | undefined;
    target: HTMLDivElement | null;
    constructor(props: ParentSizeProps);
    componentDidMount(): void;
    componentWillUnmount(): void;
    resize: ({ width, height, top, left }: ParentSizeState) => void;
    setTarget: (ref: HTMLDivElement | null) => void;
    render(): JSX.Element;
}
export {};
//# sourceMappingURL=ParentSize.d.ts.map