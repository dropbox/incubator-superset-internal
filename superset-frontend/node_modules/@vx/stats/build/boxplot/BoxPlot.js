'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.default = BoxPlot;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _group = require('@vx/group');

var _additionalProps = require('../util/additionalProps');

var _additionalProps2 = _interopRequireDefault(_additionalProps);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function verticalToHorizontal(_ref) {
  var _ref2 = _slicedToArray(_ref, 4),
      x1 = _ref2[0],
      y1 = _ref2[1],
      x2 = _ref2[2],
      y2 = _ref2[3];

  return [y1, x1, y2, x2];
}

function BoxPlot(_ref3) {
  var _ref3$left = _ref3.left,
      left = _ref3$left === undefined ? 0 : _ref3$left,
      _ref3$top = _ref3.top,
      top = _ref3$top === undefined ? 0 : _ref3$top,
      className = _ref3.className,
      data = _ref3.data,
      max = _ref3.max,
      min = _ref3.min,
      firstQuartile = _ref3.firstQuartile,
      thirdQuartile = _ref3.thirdQuartile,
      median = _ref3.median,
      boxWidth = _ref3.boxWidth,
      fill = _ref3.fill,
      fillOpacity = _ref3.fillOpacity,
      stroke = _ref3.stroke,
      strokeWidth = _ref3.strokeWidth,
      _ref3$rx = _ref3.rx,
      rx = _ref3$rx === undefined ? 2 : _ref3$rx,
      _ref3$ry = _ref3.ry,
      ry = _ref3$ry === undefined ? 2 : _ref3$ry,
      valueScale = _ref3.valueScale,
      outliers = _ref3.outliers,
      horizontal = _ref3.horizontal,
      _ref3$medianProps = _ref3.medianProps,
      medianProps = _ref3$medianProps === undefined ? {} : _ref3$medianProps,
      _ref3$maxProps = _ref3.maxProps,
      maxProps = _ref3$maxProps === undefined ? {} : _ref3$maxProps,
      _ref3$minProps = _ref3.minProps,
      minProps = _ref3$minProps === undefined ? {} : _ref3$minProps,
      _ref3$boxProps = _ref3.boxProps,
      boxProps = _ref3$boxProps === undefined ? {} : _ref3$boxProps,
      _ref3$outlierProps = _ref3.outlierProps,
      outlierProps = _ref3$outlierProps === undefined ? {} : _ref3$outlierProps,
      _ref3$container = _ref3.container,
      container = _ref3$container === undefined ? false : _ref3$container,
      _ref3$containerProps = _ref3.containerProps,
      containerProps = _ref3$containerProps === undefined ? {} : _ref3$containerProps,
      restProps = _objectWithoutProperties(_ref3, ['left', 'top', 'className', 'data', 'max', 'min', 'firstQuartile', 'thirdQuartile', 'median', 'boxWidth', 'fill', 'fillOpacity', 'stroke', 'strokeWidth', 'rx', 'ry', 'valueScale', 'outliers', 'horizontal', 'medianProps', 'maxProps', 'minProps', 'boxProps', 'outlierProps', 'container', 'containerProps']);

  var offset = horizontal ? top : left;
  var center = offset + boxWidth / 2;

  var maxLinePos = Array(4).fill(0);
  var maxToBoxLinePos = Array(4).fill(0);
  var boxPos = Array(4).fill(0);
  var medianLinePos = Array(4).fill(0);
  var minToBoxLinePos = Array(4).fill(0);
  var minLinePos = Array(4).fill(0);
  var containerPos = Array(4).fill(0);

  // all of these are [x0, y0, x1, y1]
  maxLinePos[0] = center - boxWidth / 4;
  maxLinePos[1] = valueScale(max);
  maxLinePos[2] = center + boxWidth / 4;
  maxLinePos[3] = valueScale(max);

  maxToBoxLinePos[0] = center;
  maxToBoxLinePos[1] = valueScale(max);
  maxToBoxLinePos[2] = center;
  maxToBoxLinePos[3] = valueScale(thirdQuartile);

  boxPos[0] = offset;
  boxPos[1] = valueScale(thirdQuartile);
  boxPos[2] = boxWidth;
  boxPos[3] = Math.abs(valueScale(thirdQuartile) - valueScale(firstQuartile));

  medianLinePos[0] = offset;
  medianLinePos[1] = valueScale(median);
  medianLinePos[2] = offset + boxWidth;
  medianLinePos[3] = valueScale(median);

  minToBoxLinePos[0] = center;
  minToBoxLinePos[1] = valueScale(firstQuartile);
  minToBoxLinePos[2] = center;
  minToBoxLinePos[3] = valueScale(min);

  minLinePos[0] = center - boxWidth / 4;
  minLinePos[1] = valueScale(min);
  minLinePos[2] = center + boxWidth / 4;
  minLinePos[3] = valueScale(min);

  var valueRange = valueScale.range();
  containerPos[0] = boxPos[0];
  containerPos[1] = Math.min.apply(Math, _toConsumableArray(valueRange));
  containerPos[2] = boxPos[2];
  containerPos[3] = Math.abs(valueRange[0] - valueRange[1]);

  if (horizontal) {
    maxLinePos = verticalToHorizontal(maxLinePos);
    maxToBoxLinePos = verticalToHorizontal(maxToBoxLinePos);
    boxPos = verticalToHorizontal(boxPos);
    boxPos[0] = valueScale(firstQuartile);
    medianLinePos = verticalToHorizontal(medianLinePos);
    minToBoxLinePos = verticalToHorizontal(minToBoxLinePos);
    minLinePos = verticalToHorizontal(minLinePos);
    containerPos = verticalToHorizontal(containerPos);
    containerPos[0] = Math.min.apply(Math, _toConsumableArray(valueRange));
  }
  return _react2.default.createElement(
    _group.Group,
    { className: (0, _classnames2.default)('vx-boxplot', className) },
    outliers.map(function (d, i) {
      var cx = horizontal ? valueScale(d) : center;
      var cy = horizontal ? center : valueScale(d);
      return _react2.default.createElement('circle', _extends({
        key: i,
        className: 'vx-boxplot-outlier',
        cx: cx,
        cy: cy,
        stroke: stroke,
        strokeWidth: 1,
        fill: fill,
        fillOpacity: fillOpacity,
        r: '4'
      }, (0, _additionalProps2.default)(outlierProps, {
        data: d,
        cx: cx,
        cy: cy
      })));
    }),
    _react2.default.createElement('line', _extends({
      className: 'vx-boxplot-max',
      x1: maxLinePos[0],
      y1: maxLinePos[1],
      x2: maxLinePos[2],
      y2: maxLinePos[3],
      stroke: stroke,
      strokeWidth: strokeWidth
    }, (0, _additionalProps2.default)(maxProps, {
      data: data,
      max: max,
      x1: maxLinePos[0],
      x2: maxLinePos[2],
      y1: maxLinePos[1],
      y2: maxLinePos[3]
    }))),
    _react2.default.createElement('line', {
      x1: maxToBoxLinePos[0],
      y1: maxToBoxLinePos[1],
      x2: maxToBoxLinePos[2],
      y2: maxToBoxLinePos[3],
      stroke: stroke,
      strokeWidth: strokeWidth
    }),
    _react2.default.createElement('rect', _extends({
      className: 'vx-boxplot-box',
      x: boxPos[0],
      y: boxPos[1],
      width: boxPos[2],
      height: boxPos[3],
      stroke: stroke,
      strokeWidth: strokeWidth,
      fill: fill,
      fillOpacity: fillOpacity,
      rx: rx,
      ry: ry
    }, (0, _additionalProps2.default)(boxProps, {
      data: data,
      height: boxPos[3],
      median: median,
      firstQuartile: firstQuartile,
      thirdQuartile: thirdQuartile,
      min: min,
      max: max,
      x1: boxPos[0],
      x2: boxPos[0] + boxPos[2],
      y1: boxPos[1],
      y2: boxPos[1] + boxPos[3]
    }))),
    _react2.default.createElement('line', _extends({
      className: 'vx-boxplot-median',
      x1: medianLinePos[0],
      y1: medianLinePos[1],
      x2: medianLinePos[2],
      y2: medianLinePos[3],
      stroke: stroke,
      strokeWidth: strokeWidth
    }, (0, _additionalProps2.default)(medianProps, {
      data: data,
      median: median,
      x1: medianLinePos[0],
      x2: medianLinePos[2],
      y1: medianLinePos[1],
      y2: medianLinePos[3]
    }))),
    _react2.default.createElement('line', {
      x1: minToBoxLinePos[0],
      y1: minToBoxLinePos[1],
      x2: minToBoxLinePos[2],
      y2: minToBoxLinePos[3],
      stroke: stroke,
      strokeWidth: strokeWidth
    }),
    _react2.default.createElement('line', _extends({
      className: 'vx-boxplot-min',
      x1: minLinePos[0],
      y1: minLinePos[1],
      x2: minLinePos[2],
      y2: minLinePos[3],
      stroke: stroke,
      strokeWidth: strokeWidth
    }, (0, _additionalProps2.default)(minProps, {
      data: data,
      min: min,
      x1: minLinePos[0],
      x2: minLinePos[2],
      y1: minLinePos[1],
      y2: minLinePos[3]
    }))),
    container && _react2.default.createElement('rect', _extends({
      x: containerPos[0],
      y: containerPos[1],
      width: containerPos[2],
      height: containerPos[3],
      fillOpacity: '0'
    }, (0, _additionalProps2.default)(containerProps, {
      data: data,
      x1: containerPos[0],
      x2: containerPos[0] + containerPos[2],
      y1: containerPos[1],
      y2: containerPos[1] + containerPos[3],
      median: median,
      max: max,
      min: min,
      thirdQuartile: thirdQuartile,
      firstQuartile: firstQuartile
    })))
  );
}