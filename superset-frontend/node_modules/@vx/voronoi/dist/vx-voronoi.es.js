import { voronoi } from 'd3-voronoi';
import PropTypes from 'prop-types';
import React from 'react';
import cx from 'classnames';

// returns a d3 voronoi *layout*, for a voronoi *diagram* call `layout(data)`

var voronoi$1 = (function (_ref) {
  var _ref$width = _ref.width,
      width = _ref$width === undefined ? 0 : _ref$width,
      _ref$height = _ref.height,
      height = _ref$height === undefined ? 0 : _ref$height,
      x = _ref.x,
      y = _ref.y;

  var voronoi$$1 = voronoi();

  if (x) voronoi$$1.x(x);
  if (y) voronoi$$1.y(y);

  voronoi$$1.extent([[-1, -1], [width + 1, height + 1]]);

  return voronoi$$1;
});

function callOrValue(maybeFn, data) {
  if (typeof maybeFn === 'function') {
    return maybeFn(data);
  }
  return maybeFn;
}

function additionalProps(restProps, data) {
  return Object.keys(restProps).reduce(function (ret, cur) {
    ret[cur] = callOrValue(restProps[cur], data);
    return ret;
  }, {});
}

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var objectWithoutProperties = function (obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
};

var propTypes = {
  polygon: PropTypes.arrayOf(PropTypes.array)
};

function VoronoiPolygon(_ref) {
  var polygon = _ref.polygon,
      className = _ref.className,
      restProps = objectWithoutProperties(_ref, ['polygon', 'className']);

  if (!polygon) return null;
  var data = polygon.data;
  return React.createElement('path', _extends({
    className: cx('vx-voronoi-polygon', className),
    d: 'M' + polygon.join('L') + 'Z'
  }, additionalProps(restProps, data)));
}

VoronoiPolygon.propTypes = propTypes;

export { voronoi$1 as voronoi, VoronoiPolygon };
