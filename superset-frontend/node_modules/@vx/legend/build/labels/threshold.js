'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.default = labelThreshold;
function format(labelFormat, value, i) {
  return labelFormat(value, i) || '';
}

function labelThreshold(_ref) {
  var scale = _ref.scale,
      labelFormat = _ref.labelFormat,
      _ref$labelDelimiter = _ref.labelDelimiter,
      labelDelimiter = _ref$labelDelimiter === undefined ? 'to' : _ref$labelDelimiter,
      _ref$labelLower = _ref.labelLower,
      labelLower = _ref$labelLower === undefined ? 'Less than ' : _ref$labelLower,
      _ref$labelUpper = _ref.labelUpper,
      labelUpper = _ref$labelUpper === undefined ? 'More than ' : _ref$labelUpper;

  return scale.range().map(function (d, i) {
    var _scale$invertExtent = scale.invertExtent(d),
        _scale$invertExtent2 = _slicedToArray(_scale$invertExtent, 2),
        x0 = _scale$invertExtent2[0],
        x1 = _scale$invertExtent2[1];

    var delimiter = ' ' + labelDelimiter + ' ';
    var value = x1;
    if (!x0) {
      delimiter = labelLower;
    }
    if (!x1) {
      value = x0;
      x1 = x0;
      x0 = undefined;
      delimiter = labelUpper;
    }
    return {
      extent: [x0, x1],
      text: '' + format(labelFormat, x0, i) + delimiter + format(labelFormat, x1, i),
      value: scale(value)
    };
  });
}