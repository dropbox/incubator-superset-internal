import { types as t } from '@babel/core';
import type { NodePath } from '@babel/traverse';
export declare type Path<N> = NodePath<N>;
export declare type TypePropertyMap = Record<string, t.TSPropertySignature[]>;
export declare type PropTypeDeclaration = t.TSIntersectionType | t.TSTypeReference | t.TSUnionType;
export declare type PropType = t.CallExpression | t.Identifier | t.Literal | t.MemberExpression;
export interface PluginOptions {
    comments?: boolean;
    customPropTypeSuffixes?: string[];
    forbidExtraProps?: boolean;
    implicitChildren?: boolean;
    mapUnknownReferenceTypesToAny?: boolean;
    maxDepth?: number;
    maxSize?: number;
    strict?: boolean;
    typeCheck?: boolean | string;
}
export interface ConvertState {
    airbnbPropTypes: {
        count: number;
        forbidImport: string;
        hasImport: boolean;
        namedImports: string[];
    };
    componentTypes: TypePropertyMap;
    filePath: string;
    options: Required<PluginOptions>;
    propTypes: {
        count: number;
        defaultImport: string;
        hasImport: boolean;
    };
    reactImportedName: string;
    referenceTypes: Record<string, t.TSEnumDeclaration | t.TSEnumMember | t.TSInterfaceDeclaration | t.TSTypeAliasDeclaration>;
}
//# sourceMappingURL=types.d.ts.map