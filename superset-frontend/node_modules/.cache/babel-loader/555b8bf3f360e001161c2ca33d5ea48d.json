{"ast":null,"code":"import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint no-undef: 'error' */\n/* eslint no-param-reassign: [\"error\", { \"props\": false }] */\nimport moment from 'moment';\nimport {\nFeatureFlag,\nisDefined,\nSupersetClient,\nt,\nisFeatureEnabled } from\n'@superset-ui/core';\nimport { getControlsState } from 'src/explore/store';\nimport {\ngetAnnotationJsonUrl,\ngetExploreUrl,\ngetLegacyEndpointType,\nbuildV1ChartDataPayload,\ngetQuerySettings,\ngetChartDataUri } from\n'src/explore/exploreUtils';\nimport { requiresQuery } from 'src/modules/AnnotationTypes';\n\nimport { addDangerToast } from 'src/components/MessageToasts/actions';\nimport { logEvent } from 'src/logger/actions';\nimport { Logger, LOG_ACTIONS_LOAD_CHART } from 'src/logger/LogUtils';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport { safeStringify } from 'src/utils/safeStringify';\nimport { allowCrossDomain as domainShardingEnabled } from 'src/utils/hostNamesConfig';\nimport { updateDataMask } from 'src/dataMask/actions';\nimport { waitForAsyncData } from 'src/middleware/asyncEvent';\n\nexport const CHART_UPDATE_STARTED = 'CHART_UPDATE_STARTED';\nexport function chartUpdateStarted(queryController, latestQueryFormData, key) {\n  return {\n    type: CHART_UPDATE_STARTED,\n    queryController,\n    latestQueryFormData,\n    key };\n\n}\n\nexport const CHART_UPDATE_SUCCEEDED = 'CHART_UPDATE_SUCCEEDED';\nexport function chartUpdateSucceeded(queriesResponse, key) {\n  return { type: CHART_UPDATE_SUCCEEDED, queriesResponse, key };\n}\n\nexport const CHART_UPDATE_STOPPED = 'CHART_UPDATE_STOPPED';\nexport function chartUpdateStopped(key) {\n  return { type: CHART_UPDATE_STOPPED, key };\n}\n\nexport const CHART_UPDATE_FAILED = 'CHART_UPDATE_FAILED';\nexport function chartUpdateFailed(queriesResponse, key) {\n  return { type: CHART_UPDATE_FAILED, queriesResponse, key };\n}\n\nexport const CHART_RENDERING_FAILED = 'CHART_RENDERING_FAILED';\nexport function chartRenderingFailed(error, key, stackTrace) {\n  return { type: CHART_RENDERING_FAILED, error, key, stackTrace };\n}\n\nexport const CHART_RENDERING_SUCCEEDED = 'CHART_RENDERING_SUCCEEDED';\nexport function chartRenderingSucceeded(key) {\n  return { type: CHART_RENDERING_SUCCEEDED, key };\n}\n\nexport const REMOVE_CHART = 'REMOVE_CHART';\nexport function removeChart(key) {\n  return { type: REMOVE_CHART, key };\n}\n\nexport const ANNOTATION_QUERY_SUCCESS = 'ANNOTATION_QUERY_SUCCESS';\nexport function annotationQuerySuccess(annotation, queryResponse, key) {\n  return { type: ANNOTATION_QUERY_SUCCESS, annotation, queryResponse, key };\n}\n\nexport const ANNOTATION_QUERY_STARTED = 'ANNOTATION_QUERY_STARTED';\nexport function annotationQueryStarted(annotation, queryController, key) {\n  return { type: ANNOTATION_QUERY_STARTED, annotation, queryController, key };\n}\n\nexport const ANNOTATION_QUERY_FAILED = 'ANNOTATION_QUERY_FAILED';\nexport function annotationQueryFailed(annotation, queryResponse, key) {\n  return { type: ANNOTATION_QUERY_FAILED, annotation, queryResponse, key };\n}\n\nexport const DYNAMIC_PLUGIN_CONTROLS_READY = 'DYNAMIC_PLUGIN_CONTROLS_READY';\nexport const dynamicPluginControlsReady = () => (dispatch, getState) => {\n  const state = getState();\n  const controlsState = getControlsState(\n  state.explore,\n  state.explore.form_data);\n\n  dispatch({\n    type: DYNAMIC_PLUGIN_CONTROLS_READY,\n    key: controlsState.slice_id.value,\n    controlsState });\n\n};\n\nconst legacyChartDataRequest = async function (\nformData,\nresultFormat,\nresultType,\nforce,\nmethod,\nrequestParams,\nparseMethod)\n{var _requestParams;if (method === void 0) {method = 'POST';}if (requestParams === void 0) {requestParams = {};}\n  const endpointType = getLegacyEndpointType({ resultFormat, resultType });\n  const allowDomainSharding =\n  // eslint-disable-next-line camelcase\n  domainShardingEnabled && ((_requestParams = requestParams) == null ? void 0 : _requestParams.dashboard_id);\n  const url = getExploreUrl({\n    formData,\n    endpointType,\n    force,\n    allowDomainSharding,\n    method,\n    requestParams: requestParams.dashboard_id ?\n    { dashboard_id: requestParams.dashboard_id } :\n    {} });\n\n  const querySettings = {\n    ...requestParams,\n    url,\n    postPayload: { form_data: formData },\n    parseMethod };\n\n\n  const clientMethod =\n  'GET' && isFeatureEnabled(FeatureFlag.CLIENT_CACHE) ?\n  SupersetClient.get :\n  SupersetClient.post;\n  return clientMethod(querySettings).then((_ref) => {let { json, response } = _ref;return (\n      // Make the legacy endpoint return a payload that corresponds to the\n      // V1 chart data endpoint response signature.\n      {\n        response,\n        json: { result: [json] } });});\n\n\n};\n\nconst v1ChartDataRequest = async (\nformData,\nresultFormat,\nresultType,\nforce,\nrequestParams,\nsetDataMask,\nownState,\nparseMethod) =>\n{\n  const payload = buildV1ChartDataPayload({\n    formData,\n    resultType,\n    resultFormat,\n    force,\n    setDataMask,\n    ownState });\n\n\n  // The dashboard id is added to query params for tracking purposes\n  const { slice_id: sliceId } = formData;\n  const { dashboard_id: dashboardId } = requestParams;\n\n  const qs = {};\n  if (sliceId !== undefined) qs.form_data = `{\"slice_id\":${sliceId}}`;\n  if (dashboardId !== undefined) qs.dashboard_id = dashboardId;\n  if (force !== false) qs.force = force;\n\n  const allowDomainSharding =\n  // eslint-disable-next-line camelcase\n  domainShardingEnabled && (requestParams == null ? void 0 : requestParams.dashboard_id);\n  const url = getChartDataUri({\n    path: '/api/v1/chart/data',\n    qs,\n    allowDomainSharding }).\n  toString();\n\n  const querySettings = {\n    ...requestParams,\n    url,\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(payload),\n    parseMethod };\n\n\n  return SupersetClient.post(querySettings);\n};\n\nexport async function getChartDataRequest(_ref2)\n\n\n\n\n\n\n\n\n{let { formData, setDataMask = () => {}, resultFormat = 'json', resultType = 'full', force = false, method = 'POST', requestParams = {}, ownState = {} } = _ref2;\n  let querySettings = {\n    ...requestParams };\n\n\n  if (domainShardingEnabled) {\n    querySettings = {\n      ...querySettings,\n      mode: 'cors',\n      credentials: 'include' };\n\n  }\n  const [useLegacyApi, parseMethod] = getQuerySettings(formData);\n  if (useLegacyApi) {\n    return legacyChartDataRequest(\n    formData,\n    resultFormat,\n    resultType,\n    force,\n    method,\n    querySettings,\n    parseMethod);\n\n  }\n  return v1ChartDataRequest(\n  formData,\n  resultFormat,\n  resultType,\n  force,\n  querySettings,\n  setDataMask,\n  ownState,\n  parseMethod);\n\n}\n\nexport function runAnnotationQuery(_ref3)\n\n\n\n\n\n\n{let { annotation, timeout = 60, formData = null, key, isDashboardRequest = false, force = false } = _ref3;\n  return function (dispatch, getState) {var _fd$annotation_layers;\n    const sliceKey = key || Object.keys(getState().charts)[0];\n    // make a copy of formData, not modifying original formData\n    const fd = {\n      ...(formData || getState().charts[sliceKey].latestQueryFormData) };\n\n\n    if (!requiresQuery(annotation.sourceType)) {\n      return Promise.resolve();\n    }\n\n    const granularity = fd.time_grain_sqla || fd.granularity;\n    fd.time_grain_sqla = granularity;\n    fd.granularity = granularity;\n    const overridesKeys = Object.keys(annotation.overrides);\n    if (_includesInstanceProperty(overridesKeys).call(overridesKeys, 'since') || _includesInstanceProperty(overridesKeys).call(overridesKeys, 'until')) {\n      annotation.overrides = {\n        ...annotation.overrides,\n        time_range: null };\n\n    }\n    const sliceFormData = Object.keys(annotation.overrides).reduce(\n    (d, k) => ({\n      ...d,\n      [k]: annotation.overrides[k] || fd[k] }),\n\n    {});\n\n\n    if (!isDashboardRequest && fd) {\n      const hasExtraFilters = fd.extra_filters && fd.extra_filters.length > 0;\n      sliceFormData.extra_filters = hasExtraFilters ?\n      fd.extra_filters :\n      undefined;\n    }\n\n    const url = getAnnotationJsonUrl(annotation.value, force);\n    const controller = new AbortController();\n    const { signal } = controller;\n\n    dispatch(annotationQueryStarted(annotation, controller, sliceKey));\n\n    const annotationIndex = fd == null ? void 0 : (_fd$annotation_layers = fd.annotation_layers) == null ? void 0 : _fd$annotation_layers.findIndex(\n    (it) => it.name === annotation.name);\n\n    if (annotationIndex >= 0) {\n      fd.annotation_layers[annotationIndex].overrides = sliceFormData;\n    }\n\n    return SupersetClient.post({\n      url,\n      signal,\n      timeout: timeout * 1000,\n      headers: { 'Content-Type': 'application/json' },\n      jsonPayload: buildV1ChartDataPayload({\n        formData: fd,\n        force,\n        resultFormat: 'json',\n        resultType: 'full' }) }).\n\n\n    then((_ref4) => {var _json$result, _json$result$, _json$result$$annotat;let { json } = _ref4;\n      const data = json == null ? void 0 : (_json$result = json.result) == null ? void 0 : (_json$result$ = _json$result[0]) == null ? void 0 : (_json$result$$annotat = _json$result$.annotation_data) == null ? void 0 : _json$result$$annotat[annotation.name];\n      return dispatch(annotationQuerySuccess(annotation, { data }, sliceKey));\n    }).\n    catch((response) =>\n    getClientErrorObject(response).then((err) => {var _context;\n      if (err.statusText === 'timeout') {\n        dispatch(\n        annotationQueryFailed(\n        annotation,\n        { error: 'Query timeout' },\n        sliceKey));\n\n\n      } else if (_includesInstanceProperty(_context = (err.error || '').toLowerCase()).call(_context, 'no data')) {\n        dispatch(annotationQuerySuccess(annotation, err, sliceKey));\n      } else if (err.statusText !== 'abort') {\n        dispatch(annotationQueryFailed(annotation, err, sliceKey));\n      }\n    }));\n\n  };\n}\n\nexport const TRIGGER_QUERY = 'TRIGGER_QUERY';\nexport function triggerQuery(value, key) {if (value === void 0) {value = true;}\n  return { type: TRIGGER_QUERY, value, key };\n}\n\n// this action is used for forced re-render without fetch data\nexport const RENDER_TRIGGERED = 'RENDER_TRIGGERED';\nexport function renderTriggered(value, key) {\n  return { type: RENDER_TRIGGERED, value, key };\n}\n\nexport const UPDATE_QUERY_FORM_DATA = 'UPDATE_QUERY_FORM_DATA';\nexport function updateQueryFormData(value, key) {\n  return { type: UPDATE_QUERY_FORM_DATA, value, key };\n}\n\n// in the sql lab -> explore flow, user can inline edit chart title,\n// then the chart will be assigned a new slice_id\nexport const UPDATE_CHART_ID = 'UPDATE_CHART_ID';\nexport function updateChartId(newId, key) {if (key === void 0) {key = 0;}\n  return { type: UPDATE_CHART_ID, newId, key };\n}\n\nexport const ADD_CHART = 'ADD_CHART';\nexport function addChart(chart, key) {\n  return { type: ADD_CHART, chart, key };\n}\n\nexport function exploreJSON(\nformData,\nforce,\ntimeout,\nkey,\nmethod,\ndashboardId,\nownState)\n{if (force === void 0) {force = false;}if (timeout === void 0) {timeout = 60;}\n  return async (dispatch) => {\n    const logStart = Logger.getTimestamp();\n    const controller = new AbortController();\n\n    const requestParams = {\n      signal: controller.signal,\n      timeout: timeout * 1000 };\n\n    if (dashboardId) requestParams.dashboard_id = dashboardId;\n\n    const setDataMask = (dataMask) => {\n      dispatch(updateDataMask(formData.slice_id, dataMask));\n    };\n    const chartDataRequest = getChartDataRequest({\n      setDataMask,\n      formData,\n      resultFormat: 'json',\n      resultType: 'full',\n      force,\n      method,\n      requestParams,\n      ownState });\n\n\n    dispatch(chartUpdateStarted(controller, formData, key));\n\n    const chartDataRequestCaught = chartDataRequest.\n    then((_ref5) => {let { response, json } = _ref5;\n      if (isFeatureEnabled(FeatureFlag.GLOBAL_ASYNC_QUERIES)) {\n        // deal with getChartDataRequest transforming the response data\n        const result = 'result' in json ? json.result : json;\n        const [useLegacyApi] = getQuerySettings(formData);\n        switch (response.status) {\n          case 200:\n            // Query results returned synchronously, meaning query was already cached.\n            return Promise.resolve(result);\n          case 202:\n            // Query is running asynchronously and we must await the results\n            if (useLegacyApi) {\n              return waitForAsyncData(result[0]);\n            }\n            return waitForAsyncData(result);\n          default:\n            throw new Error(\n            `Received unexpected response status (${response.status}) while fetching chart data`);}\n\n\n      }\n\n      return json.result;\n    }).\n    then((queriesResponse) => {\n      queriesResponse.forEach((resultItem) =>\n      dispatch(\n      logEvent(LOG_ACTIONS_LOAD_CHART, {\n        slice_id: key,\n        applied_filters: resultItem.applied_filters,\n        is_cached: resultItem.is_cached,\n        force_refresh: force,\n        row_count: resultItem.rowcount,\n        datasource: formData.datasource,\n        start_offset: logStart,\n        ts: new Date().getTime(),\n        duration: Logger.getTimestamp() - logStart,\n        has_extra_filters:\n        formData.extra_filters && formData.extra_filters.length > 0,\n        viz_type: formData.viz_type,\n        data_age: resultItem.is_cached ?\n        moment(new Date()).diff(moment.utc(resultItem.cached_dttm)) :\n        null })));\n\n\n\n      return dispatch(chartUpdateSucceeded(queriesResponse, key));\n    }).\n    catch((response) => {\n      if (isFeatureEnabled(FeatureFlag.GLOBAL_ASYNC_QUERIES)) {\n        return dispatch(chartUpdateFailed([response], key));\n      }\n\n      const appendErrorLog = (errorDetails, isCached) => {\n        dispatch(\n        logEvent(LOG_ACTIONS_LOAD_CHART, {\n          slice_id: key,\n          has_err: true,\n          is_cached: isCached,\n          error_details: errorDetails,\n          datasource: formData.datasource,\n          start_offset: logStart,\n          ts: new Date().getTime(),\n          duration: Logger.getTimestamp() - logStart }));\n\n\n      };\n      if (response.name === 'AbortError') {\n        appendErrorLog('abort');\n        return dispatch(chartUpdateStopped(key));\n      }\n      return getClientErrorObject(response).then((parsedResponse) => {\n        if (response.statusText === 'timeout') {\n          appendErrorLog('timeout');\n        } else {\n          appendErrorLog(parsedResponse.error, parsedResponse.is_cached);\n        }\n        return dispatch(chartUpdateFailed([parsedResponse], key));\n      });\n    });\n\n    // only retrieve annotations when calling the legacy API\n    const [useLegacyApi] = getQuerySettings(formData);\n    const annotationLayers = useLegacyApi ?\n    formData.annotation_layers || [] :\n    [];\n    const isDashboardRequest = dashboardId > 0;\n\n    return Promise.all([\n    chartDataRequestCaught,\n    dispatch(triggerQuery(false, key)),\n    dispatch(updateQueryFormData(formData, key)),\n    ...annotationLayers.map((annotation) =>\n    dispatch(\n    runAnnotationQuery({\n      annotation,\n      timeout,\n      formData,\n      key,\n      isDashboardRequest,\n      force })))]);\n\n\n\n\n  };\n}\n\nexport const GET_SAVED_CHART = 'GET_SAVED_CHART';\nexport function getSavedChart(\nformData,\nforce,\ntimeout,\nkey,\ndashboardId,\nownState)\n{if (force === void 0) {force = false;}if (timeout === void 0) {timeout = 60;}\n  /*\n   * Perform a GET request to `/explore_json`.\n   *\n   * This will return the payload of a saved chart, optionally filtered by\n   * ad-hoc or extra filters from dashboards. Eg:\n   *\n   *  GET  /explore_json?{\"chart_id\":1}\n   *  GET  /explore_json?{\"chart_id\":1,\"extra_filters\":\"...\"}\n   *\n   */\n  return exploreJSON(\n  formData,\n  force,\n  timeout,\n  key,\n  'GET',\n  dashboardId,\n  ownState);\n\n}\n\nexport const POST_CHART_FORM_DATA = 'POST_CHART_FORM_DATA';\nexport function postChartFormData(\nformData,\nforce,\ntimeout,\nkey,\ndashboardId,\nownState)\n{if (force === void 0) {force = false;}if (timeout === void 0) {timeout = 60;}\n  /*\n   * Perform a POST request to `/explore_json`.\n   *\n   * This will post the form data to the endpoint, returning a new chart.\n   *\n   */\n  return exploreJSON(\n  formData,\n  force,\n  timeout,\n  key,\n  'POST',\n  dashboardId,\n  ownState);\n\n}\n\nexport function redirectSQLLab(formData) {\n  return (dispatch) => {\n    getChartDataRequest({ formData, resultFormat: 'json', resultType: 'query' }).\n    then((_ref6) => {let { json } = _ref6;\n      const redirectUrl = '/superset/sqllab/';\n      const payload = {\n        datasourceKey: formData.datasource,\n        sql: json.result[0].query };\n\n      SupersetClient.postForm(redirectUrl, {\n        form_data: safeStringify(payload) });\n\n    }).\n    catch(() =>\n    dispatch(addDangerToast(t('An error occurred while loading the SQL'))));\n\n  };\n}\n\nexport function refreshChart(chartKey, force, dashboardId) {\n  return (dispatch, getState) => {var _getState$dataMask$ch;\n    const chart = (getState().charts || {})[chartKey];\n    const timeout =\n    getState().dashboardInfo.common.conf.SUPERSET_WEBSERVER_TIMEOUT;\n\n    if (\n    !chart.latestQueryFormData ||\n    Object.keys(chart.latestQueryFormData).length === 0)\n    {\n      return;\n    }\n    dispatch(\n    postChartFormData(\n    chart.latestQueryFormData,\n    force,\n    timeout,\n    chart.id,\n    dashboardId, (_getState$dataMask$ch =\n    getState().dataMask[chart.id]) == null ? void 0 : _getState$dataMask$ch.ownState));\n\n\n  };\n}\n\nexport const getDatasourceSamples = async (\ndatasourceType,\ndatasourceId,\nforce,\njsonPayload,\nperPage,\npage) =>\n{\n  try {\n    const searchParams = {\n      force,\n      datasource_type: datasourceType,\n      datasource_id: datasourceId };\n\n\n    if (isDefined(perPage) && isDefined(page)) {\n      searchParams.per_page = perPage;\n      searchParams.page = page;\n    }\n\n    const response = await SupersetClient.post({\n      endpoint: '/datasource/samples',\n      jsonPayload,\n      searchParams });\n\n\n    return response.json.result;\n  } catch (err) {\n    const clientError = await getClientErrorObject(err);\n    throw new Error(\n    clientError.message || clientError.error || t('Sorry, an error occurred'),\n    { cause: err });\n\n  }\n};","map":{"version":3,"names":["moment","FeatureFlag","isDefined","SupersetClient","t","isFeatureEnabled","getControlsState","getAnnotationJsonUrl","getExploreUrl","getLegacyEndpointType","buildV1ChartDataPayload","getQuerySettings","getChartDataUri","requiresQuery","addDangerToast","logEvent","Logger","LOG_ACTIONS_LOAD_CHART","getClientErrorObject","safeStringify","allowCrossDomain","domainShardingEnabled","updateDataMask","waitForAsyncData","CHART_UPDATE_STARTED","chartUpdateStarted","queryController","latestQueryFormData","key","type","CHART_UPDATE_SUCCEEDED","chartUpdateSucceeded","queriesResponse","CHART_UPDATE_STOPPED","chartUpdateStopped","CHART_UPDATE_FAILED","chartUpdateFailed","CHART_RENDERING_FAILED","chartRenderingFailed","error","stackTrace","CHART_RENDERING_SUCCEEDED","chartRenderingSucceeded","REMOVE_CHART","removeChart","ANNOTATION_QUERY_SUCCESS","annotationQuerySuccess","annotation","queryResponse","ANNOTATION_QUERY_STARTED","annotationQueryStarted","ANNOTATION_QUERY_FAILED","annotationQueryFailed","DYNAMIC_PLUGIN_CONTROLS_READY","dynamicPluginControlsReady","dispatch","getState","state","controlsState","explore","form_data","slice_id","value","legacyChartDataRequest","formData","resultFormat","resultType","force","method","requestParams","parseMethod","endpointType","allowDomainSharding","dashboard_id","url","querySettings","postPayload","clientMethod","CLIENT_CACHE","get","post","then","json","response","result","v1ChartDataRequest","setDataMask","ownState","payload","sliceId","dashboardId","qs","undefined","path","toString","headers","body","JSON","stringify","getChartDataRequest","mode","credentials","useLegacyApi","runAnnotationQuery","timeout","isDashboardRequest","sliceKey","Object","keys","charts","fd","sourceType","Promise","resolve","granularity","time_grain_sqla","overridesKeys","overrides","time_range","sliceFormData","reduce","d","k","hasExtraFilters","extra_filters","length","controller","AbortController","signal","annotationIndex","annotation_layers","findIndex","it","name","jsonPayload","data","annotation_data","catch","err","statusText","toLowerCase","TRIGGER_QUERY","triggerQuery","RENDER_TRIGGERED","renderTriggered","UPDATE_QUERY_FORM_DATA","updateQueryFormData","UPDATE_CHART_ID","updateChartId","newId","ADD_CHART","addChart","chart","exploreJSON","logStart","getTimestamp","dataMask","chartDataRequest","chartDataRequestCaught","GLOBAL_ASYNC_QUERIES","status","Error","forEach","resultItem","applied_filters","is_cached","force_refresh","row_count","rowcount","datasource","start_offset","ts","Date","getTime","duration","has_extra_filters","viz_type","data_age","diff","utc","cached_dttm","appendErrorLog","errorDetails","isCached","has_err","error_details","parsedResponse","annotationLayers","all","map","GET_SAVED_CHART","getSavedChart","POST_CHART_FORM_DATA","postChartFormData","redirectSQLLab","redirectUrl","datasourceKey","sql","query","postForm","refreshChart","chartKey","dashboardInfo","common","conf","SUPERSET_WEBSERVER_TIMEOUT","id","getDatasourceSamples","datasourceType","datasourceId","perPage","page","searchParams","datasource_type","datasource_id","per_page","endpoint","clientError","message","cause"],"sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/components/Chart/chartAction.js"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint no-undef: 'error' */\n/* eslint no-param-reassign: [\"error\", { \"props\": false }] */\nimport moment from 'moment';\nimport {\n  FeatureFlag,\n  isDefined,\n  SupersetClient,\n  t,\n  isFeatureEnabled,\n} from '@superset-ui/core';\nimport { getControlsState } from 'src/explore/store';\nimport {\n  getAnnotationJsonUrl,\n  getExploreUrl,\n  getLegacyEndpointType,\n  buildV1ChartDataPayload,\n  getQuerySettings,\n  getChartDataUri,\n} from 'src/explore/exploreUtils';\nimport { requiresQuery } from 'src/modules/AnnotationTypes';\n\nimport { addDangerToast } from 'src/components/MessageToasts/actions';\nimport { logEvent } from 'src/logger/actions';\nimport { Logger, LOG_ACTIONS_LOAD_CHART } from 'src/logger/LogUtils';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport { safeStringify } from 'src/utils/safeStringify';\nimport { allowCrossDomain as domainShardingEnabled } from 'src/utils/hostNamesConfig';\nimport { updateDataMask } from 'src/dataMask/actions';\nimport { waitForAsyncData } from 'src/middleware/asyncEvent';\n\nexport const CHART_UPDATE_STARTED = 'CHART_UPDATE_STARTED';\nexport function chartUpdateStarted(queryController, latestQueryFormData, key) {\n  return {\n    type: CHART_UPDATE_STARTED,\n    queryController,\n    latestQueryFormData,\n    key,\n  };\n}\n\nexport const CHART_UPDATE_SUCCEEDED = 'CHART_UPDATE_SUCCEEDED';\nexport function chartUpdateSucceeded(queriesResponse, key) {\n  return { type: CHART_UPDATE_SUCCEEDED, queriesResponse, key };\n}\n\nexport const CHART_UPDATE_STOPPED = 'CHART_UPDATE_STOPPED';\nexport function chartUpdateStopped(key) {\n  return { type: CHART_UPDATE_STOPPED, key };\n}\n\nexport const CHART_UPDATE_FAILED = 'CHART_UPDATE_FAILED';\nexport function chartUpdateFailed(queriesResponse, key) {\n  return { type: CHART_UPDATE_FAILED, queriesResponse, key };\n}\n\nexport const CHART_RENDERING_FAILED = 'CHART_RENDERING_FAILED';\nexport function chartRenderingFailed(error, key, stackTrace) {\n  return { type: CHART_RENDERING_FAILED, error, key, stackTrace };\n}\n\nexport const CHART_RENDERING_SUCCEEDED = 'CHART_RENDERING_SUCCEEDED';\nexport function chartRenderingSucceeded(key) {\n  return { type: CHART_RENDERING_SUCCEEDED, key };\n}\n\nexport const REMOVE_CHART = 'REMOVE_CHART';\nexport function removeChart(key) {\n  return { type: REMOVE_CHART, key };\n}\n\nexport const ANNOTATION_QUERY_SUCCESS = 'ANNOTATION_QUERY_SUCCESS';\nexport function annotationQuerySuccess(annotation, queryResponse, key) {\n  return { type: ANNOTATION_QUERY_SUCCESS, annotation, queryResponse, key };\n}\n\nexport const ANNOTATION_QUERY_STARTED = 'ANNOTATION_QUERY_STARTED';\nexport function annotationQueryStarted(annotation, queryController, key) {\n  return { type: ANNOTATION_QUERY_STARTED, annotation, queryController, key };\n}\n\nexport const ANNOTATION_QUERY_FAILED = 'ANNOTATION_QUERY_FAILED';\nexport function annotationQueryFailed(annotation, queryResponse, key) {\n  return { type: ANNOTATION_QUERY_FAILED, annotation, queryResponse, key };\n}\n\nexport const DYNAMIC_PLUGIN_CONTROLS_READY = 'DYNAMIC_PLUGIN_CONTROLS_READY';\nexport const dynamicPluginControlsReady = () => (dispatch, getState) => {\n  const state = getState();\n  const controlsState = getControlsState(\n    state.explore,\n    state.explore.form_data,\n  );\n  dispatch({\n    type: DYNAMIC_PLUGIN_CONTROLS_READY,\n    key: controlsState.slice_id.value,\n    controlsState,\n  });\n};\n\nconst legacyChartDataRequest = async (\n  formData,\n  resultFormat,\n  resultType,\n  force,\n  method = 'POST',\n  requestParams = {},\n  parseMethod,\n) => {\n  const endpointType = getLegacyEndpointType({ resultFormat, resultType });\n  const allowDomainSharding =\n    // eslint-disable-next-line camelcase\n    domainShardingEnabled && requestParams?.dashboard_id;\n  const url = getExploreUrl({\n    formData,\n    endpointType,\n    force,\n    allowDomainSharding,\n    method,\n    requestParams: requestParams.dashboard_id\n      ? { dashboard_id: requestParams.dashboard_id }\n      : {},\n  });\n  const querySettings = {\n    ...requestParams,\n    url,\n    postPayload: { form_data: formData },\n    parseMethod,\n  };\n\n  const clientMethod =\n    'GET' && isFeatureEnabled(FeatureFlag.CLIENT_CACHE)\n      ? SupersetClient.get\n      : SupersetClient.post;\n  return clientMethod(querySettings).then(({ json, response }) =>\n    // Make the legacy endpoint return a payload that corresponds to the\n    // V1 chart data endpoint response signature.\n    ({\n      response,\n      json: { result: [json] },\n    }),\n  );\n};\n\nconst v1ChartDataRequest = async (\n  formData,\n  resultFormat,\n  resultType,\n  force,\n  requestParams,\n  setDataMask,\n  ownState,\n  parseMethod,\n) => {\n  const payload = buildV1ChartDataPayload({\n    formData,\n    resultType,\n    resultFormat,\n    force,\n    setDataMask,\n    ownState,\n  });\n\n  // The dashboard id is added to query params for tracking purposes\n  const { slice_id: sliceId } = formData;\n  const { dashboard_id: dashboardId } = requestParams;\n\n  const qs = {};\n  if (sliceId !== undefined) qs.form_data = `{\"slice_id\":${sliceId}}`;\n  if (dashboardId !== undefined) qs.dashboard_id = dashboardId;\n  if (force !== false) qs.force = force;\n\n  const allowDomainSharding =\n    // eslint-disable-next-line camelcase\n    domainShardingEnabled && requestParams?.dashboard_id;\n  const url = getChartDataUri({\n    path: '/api/v1/chart/data',\n    qs,\n    allowDomainSharding,\n  }).toString();\n\n  const querySettings = {\n    ...requestParams,\n    url,\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(payload),\n    parseMethod,\n  };\n\n  return SupersetClient.post(querySettings);\n};\n\nexport async function getChartDataRequest({\n  formData,\n  setDataMask = () => {},\n  resultFormat = 'json',\n  resultType = 'full',\n  force = false,\n  method = 'POST',\n  requestParams = {},\n  ownState = {},\n}) {\n  let querySettings = {\n    ...requestParams,\n  };\n\n  if (domainShardingEnabled) {\n    querySettings = {\n      ...querySettings,\n      mode: 'cors',\n      credentials: 'include',\n    };\n  }\n  const [useLegacyApi, parseMethod] = getQuerySettings(formData);\n  if (useLegacyApi) {\n    return legacyChartDataRequest(\n      formData,\n      resultFormat,\n      resultType,\n      force,\n      method,\n      querySettings,\n      parseMethod,\n    );\n  }\n  return v1ChartDataRequest(\n    formData,\n    resultFormat,\n    resultType,\n    force,\n    querySettings,\n    setDataMask,\n    ownState,\n    parseMethod,\n  );\n}\n\nexport function runAnnotationQuery({\n  annotation,\n  timeout = 60,\n  formData = null,\n  key,\n  isDashboardRequest = false,\n  force = false,\n}) {\n  return function (dispatch, getState) {\n    const sliceKey = key || Object.keys(getState().charts)[0];\n    // make a copy of formData, not modifying original formData\n    const fd = {\n      ...(formData || getState().charts[sliceKey].latestQueryFormData),\n    };\n\n    if (!requiresQuery(annotation.sourceType)) {\n      return Promise.resolve();\n    }\n\n    const granularity = fd.time_grain_sqla || fd.granularity;\n    fd.time_grain_sqla = granularity;\n    fd.granularity = granularity;\n    const overridesKeys = Object.keys(annotation.overrides);\n    if (overridesKeys.includes('since') || overridesKeys.includes('until')) {\n      annotation.overrides = {\n        ...annotation.overrides,\n        time_range: null,\n      };\n    }\n    const sliceFormData = Object.keys(annotation.overrides).reduce(\n      (d, k) => ({\n        ...d,\n        [k]: annotation.overrides[k] || fd[k],\n      }),\n      {},\n    );\n\n    if (!isDashboardRequest && fd) {\n      const hasExtraFilters = fd.extra_filters && fd.extra_filters.length > 0;\n      sliceFormData.extra_filters = hasExtraFilters\n        ? fd.extra_filters\n        : undefined;\n    }\n\n    const url = getAnnotationJsonUrl(annotation.value, force);\n    const controller = new AbortController();\n    const { signal } = controller;\n\n    dispatch(annotationQueryStarted(annotation, controller, sliceKey));\n\n    const annotationIndex = fd?.annotation_layers?.findIndex(\n      it => it.name === annotation.name,\n    );\n    if (annotationIndex >= 0) {\n      fd.annotation_layers[annotationIndex].overrides = sliceFormData;\n    }\n\n    return SupersetClient.post({\n      url,\n      signal,\n      timeout: timeout * 1000,\n      headers: { 'Content-Type': 'application/json' },\n      jsonPayload: buildV1ChartDataPayload({\n        formData: fd,\n        force,\n        resultFormat: 'json',\n        resultType: 'full',\n      }),\n    })\n      .then(({ json }) => {\n        const data = json?.result?.[0]?.annotation_data?.[annotation.name];\n        return dispatch(annotationQuerySuccess(annotation, { data }, sliceKey));\n      })\n      .catch(response =>\n        getClientErrorObject(response).then(err => {\n          if (err.statusText === 'timeout') {\n            dispatch(\n              annotationQueryFailed(\n                annotation,\n                { error: 'Query timeout' },\n                sliceKey,\n              ),\n            );\n          } else if ((err.error || '').toLowerCase().includes('no data')) {\n            dispatch(annotationQuerySuccess(annotation, err, sliceKey));\n          } else if (err.statusText !== 'abort') {\n            dispatch(annotationQueryFailed(annotation, err, sliceKey));\n          }\n        }),\n      );\n  };\n}\n\nexport const TRIGGER_QUERY = 'TRIGGER_QUERY';\nexport function triggerQuery(value = true, key) {\n  return { type: TRIGGER_QUERY, value, key };\n}\n\n// this action is used for forced re-render without fetch data\nexport const RENDER_TRIGGERED = 'RENDER_TRIGGERED';\nexport function renderTriggered(value, key) {\n  return { type: RENDER_TRIGGERED, value, key };\n}\n\nexport const UPDATE_QUERY_FORM_DATA = 'UPDATE_QUERY_FORM_DATA';\nexport function updateQueryFormData(value, key) {\n  return { type: UPDATE_QUERY_FORM_DATA, value, key };\n}\n\n// in the sql lab -> explore flow, user can inline edit chart title,\n// then the chart will be assigned a new slice_id\nexport const UPDATE_CHART_ID = 'UPDATE_CHART_ID';\nexport function updateChartId(newId, key = 0) {\n  return { type: UPDATE_CHART_ID, newId, key };\n}\n\nexport const ADD_CHART = 'ADD_CHART';\nexport function addChart(chart, key) {\n  return { type: ADD_CHART, chart, key };\n}\n\nexport function exploreJSON(\n  formData,\n  force = false,\n  timeout = 60,\n  key,\n  method,\n  dashboardId,\n  ownState,\n) {\n  return async dispatch => {\n    const logStart = Logger.getTimestamp();\n    const controller = new AbortController();\n\n    const requestParams = {\n      signal: controller.signal,\n      timeout: timeout * 1000,\n    };\n    if (dashboardId) requestParams.dashboard_id = dashboardId;\n\n    const setDataMask = dataMask => {\n      dispatch(updateDataMask(formData.slice_id, dataMask));\n    };\n    const chartDataRequest = getChartDataRequest({\n      setDataMask,\n      formData,\n      resultFormat: 'json',\n      resultType: 'full',\n      force,\n      method,\n      requestParams,\n      ownState,\n    });\n\n    dispatch(chartUpdateStarted(controller, formData, key));\n\n    const chartDataRequestCaught = chartDataRequest\n      .then(({ response, json }) => {\n        if (isFeatureEnabled(FeatureFlag.GLOBAL_ASYNC_QUERIES)) {\n          // deal with getChartDataRequest transforming the response data\n          const result = 'result' in json ? json.result : json;\n          const [useLegacyApi] = getQuerySettings(formData);\n          switch (response.status) {\n            case 200:\n              // Query results returned synchronously, meaning query was already cached.\n              return Promise.resolve(result);\n            case 202:\n              // Query is running asynchronously and we must await the results\n              if (useLegacyApi) {\n                return waitForAsyncData(result[0]);\n              }\n              return waitForAsyncData(result);\n            default:\n              throw new Error(\n                `Received unexpected response status (${response.status}) while fetching chart data`,\n              );\n          }\n        }\n\n        return json.result;\n      })\n      .then(queriesResponse => {\n        queriesResponse.forEach(resultItem =>\n          dispatch(\n            logEvent(LOG_ACTIONS_LOAD_CHART, {\n              slice_id: key,\n              applied_filters: resultItem.applied_filters,\n              is_cached: resultItem.is_cached,\n              force_refresh: force,\n              row_count: resultItem.rowcount,\n              datasource: formData.datasource,\n              start_offset: logStart,\n              ts: new Date().getTime(),\n              duration: Logger.getTimestamp() - logStart,\n              has_extra_filters:\n                formData.extra_filters && formData.extra_filters.length > 0,\n              viz_type: formData.viz_type,\n              data_age: resultItem.is_cached\n                ? moment(new Date()).diff(moment.utc(resultItem.cached_dttm))\n                : null,\n            }),\n          ),\n        );\n        return dispatch(chartUpdateSucceeded(queriesResponse, key));\n      })\n      .catch(response => {\n        if (isFeatureEnabled(FeatureFlag.GLOBAL_ASYNC_QUERIES)) {\n          return dispatch(chartUpdateFailed([response], key));\n        }\n\n        const appendErrorLog = (errorDetails, isCached) => {\n          dispatch(\n            logEvent(LOG_ACTIONS_LOAD_CHART, {\n              slice_id: key,\n              has_err: true,\n              is_cached: isCached,\n              error_details: errorDetails,\n              datasource: formData.datasource,\n              start_offset: logStart,\n              ts: new Date().getTime(),\n              duration: Logger.getTimestamp() - logStart,\n            }),\n          );\n        };\n        if (response.name === 'AbortError') {\n          appendErrorLog('abort');\n          return dispatch(chartUpdateStopped(key));\n        }\n        return getClientErrorObject(response).then(parsedResponse => {\n          if (response.statusText === 'timeout') {\n            appendErrorLog('timeout');\n          } else {\n            appendErrorLog(parsedResponse.error, parsedResponse.is_cached);\n          }\n          return dispatch(chartUpdateFailed([parsedResponse], key));\n        });\n      });\n\n    // only retrieve annotations when calling the legacy API\n    const [useLegacyApi] = getQuerySettings(formData);\n    const annotationLayers = useLegacyApi\n      ? formData.annotation_layers || []\n      : [];\n    const isDashboardRequest = dashboardId > 0;\n\n    return Promise.all([\n      chartDataRequestCaught,\n      dispatch(triggerQuery(false, key)),\n      dispatch(updateQueryFormData(formData, key)),\n      ...annotationLayers.map(annotation =>\n        dispatch(\n          runAnnotationQuery({\n            annotation,\n            timeout,\n            formData,\n            key,\n            isDashboardRequest,\n            force,\n          }),\n        ),\n      ),\n    ]);\n  };\n}\n\nexport const GET_SAVED_CHART = 'GET_SAVED_CHART';\nexport function getSavedChart(\n  formData,\n  force = false,\n  timeout = 60,\n  key,\n  dashboardId,\n  ownState,\n) {\n  /*\n   * Perform a GET request to `/explore_json`.\n   *\n   * This will return the payload of a saved chart, optionally filtered by\n   * ad-hoc or extra filters from dashboards. Eg:\n   *\n   *  GET  /explore_json?{\"chart_id\":1}\n   *  GET  /explore_json?{\"chart_id\":1,\"extra_filters\":\"...\"}\n   *\n   */\n  return exploreJSON(\n    formData,\n    force,\n    timeout,\n    key,\n    'GET',\n    dashboardId,\n    ownState,\n  );\n}\n\nexport const POST_CHART_FORM_DATA = 'POST_CHART_FORM_DATA';\nexport function postChartFormData(\n  formData,\n  force = false,\n  timeout = 60,\n  key,\n  dashboardId,\n  ownState,\n) {\n  /*\n   * Perform a POST request to `/explore_json`.\n   *\n   * This will post the form data to the endpoint, returning a new chart.\n   *\n   */\n  return exploreJSON(\n    formData,\n    force,\n    timeout,\n    key,\n    'POST',\n    dashboardId,\n    ownState,\n  );\n}\n\nexport function redirectSQLLab(formData) {\n  return dispatch => {\n    getChartDataRequest({ formData, resultFormat: 'json', resultType: 'query' })\n      .then(({ json }) => {\n        const redirectUrl = '/superset/sqllab/';\n        const payload = {\n          datasourceKey: formData.datasource,\n          sql: json.result[0].query,\n        };\n        SupersetClient.postForm(redirectUrl, {\n          form_data: safeStringify(payload),\n        });\n      })\n      .catch(() =>\n        dispatch(addDangerToast(t('An error occurred while loading the SQL'))),\n      );\n  };\n}\n\nexport function refreshChart(chartKey, force, dashboardId) {\n  return (dispatch, getState) => {\n    const chart = (getState().charts || {})[chartKey];\n    const timeout =\n      getState().dashboardInfo.common.conf.SUPERSET_WEBSERVER_TIMEOUT;\n\n    if (\n      !chart.latestQueryFormData ||\n      Object.keys(chart.latestQueryFormData).length === 0\n    ) {\n      return;\n    }\n    dispatch(\n      postChartFormData(\n        chart.latestQueryFormData,\n        force,\n        timeout,\n        chart.id,\n        dashboardId,\n        getState().dataMask[chart.id]?.ownState,\n      ),\n    );\n  };\n}\n\nexport const getDatasourceSamples = async (\n  datasourceType,\n  datasourceId,\n  force,\n  jsonPayload,\n  perPage,\n  page,\n) => {\n  try {\n    const searchParams = {\n      force,\n      datasource_type: datasourceType,\n      datasource_id: datasourceId,\n    };\n\n    if (isDefined(perPage) && isDefined(page)) {\n      searchParams.per_page = perPage;\n      searchParams.page = page;\n    }\n\n    const response = await SupersetClient.post({\n      endpoint: '/datasource/samples',\n      jsonPayload,\n      searchParams,\n    });\n\n    return response.json.result;\n  } catch (err) {\n    const clientError = await getClientErrorObject(err);\n    throw new Error(\n      clientError.message || clientError.error || t('Sorry, an error occurred'),\n      { cause: err },\n    );\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}