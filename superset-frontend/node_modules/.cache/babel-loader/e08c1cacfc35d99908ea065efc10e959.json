{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { isUserWithPermissionsAndRoles } from 'src/types/bootstrapTypes';\nimport { findPermission } from 'src/utils/findPermission';\n// this should really be a config value,\n// but is hardcoded in backend logic already, so...\nconst ADMIN_ROLE_NAME = 'admin';\nconst SQL_LAB_ROLE = 'sql_lab';\nexport const isUserAdmin = (user) => isUserWithPermissionsAndRoles(user) &&\nObject.keys(user.roles || {}).some((role) => role.toLowerCase() === ADMIN_ROLE_NAME);\nconst isUserDashboardOwner = (dashboard, user) => isUserWithPermissionsAndRoles(user) &&\ndashboard.owners.some((owner) => owner.id === user.userId);\nexport const canUserEditDashboard = (dashboard, user) => isUserWithPermissionsAndRoles(user) && (\nisUserAdmin(user) || isUserDashboardOwner(dashboard, user)) &&\nfindPermission('can_write', 'Dashboard', user.roles);\nexport function canUserAccessSqlLab(user) {\n  return isUserAdmin(user) ||\n  isUserWithPermissionsAndRoles(user) &&\n  Object.keys(user.roles || {}).some((role) => role.toLowerCase() === SQL_LAB_ROLE);\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(ADMIN_ROLE_NAME, \"ADMIN_ROLE_NAME\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/util/permissionUtils.ts\");reactHotLoader.register(SQL_LAB_ROLE, \"SQL_LAB_ROLE\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/util/permissionUtils.ts\");reactHotLoader.register(isUserAdmin, \"isUserAdmin\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/util/permissionUtils.ts\");reactHotLoader.register(isUserDashboardOwner, \"isUserDashboardOwner\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/util/permissionUtils.ts\");reactHotLoader.register(canUserEditDashboard, \"canUserEditDashboard\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/util/permissionUtils.ts\");reactHotLoader.register(canUserAccessSqlLab, \"canUserAccessSqlLab\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/util/permissionUtils.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAkBA,SACEA,6BADF,QAIO,0BAJP;AAMA,SAASC,cAAT,QAA+B,0BAA/B;AAEA;AACA;AACA,MAAMC,eAAe,GAAG,OAAxB;AACA,MAAMC,YAAY,GAAG,SAArB;AAEA,OAAO,MAAMC,WAAW,GAAG,CACzBC,IADyB,KAGzBL,6BAA6B,CAACK,IAAD,CAA7B;AACAC,MAAM,CAACC,IAAP,CAAYF,IAAI,CAACG,KAAL,IAAc,EAA1B,EAA8BC,IAA9B,CACE,KAAI,KAAIC,IAAI,CAACC,WAAL,OAAuBT,eADjC,CAJK;AAQP,MAAMU,oBAAoB,GAAG,CAC3BC,SAD2B,EAE3BR,IAF2B,KAI3BL,6BAA6B,CAACK,IAAD,CAA7B;AACAQ,SAAS,CAACC,MAAV,CAAiBL,IAAjB,CAAsB,MAAK,KAAIM,KAAK,CAACC,EAAN,KAAaX,IAAI,CAACY,MAAjD,CALF;AAOA,OAAO,MAAMC,oBAAoB,GAAG,CAClCL,SADkC,EAElCR,IAFkC,KAIlCL,6BAA6B,CAACK,IAAD,CAA7B;AACCD,WAAW,CAACC,IAAD,CAAX,IAAqBO,oBAAoB,CAACC,SAAD,EAAYR,IAAZ,CAD1C;AAEAJ,cAAc,CAAC,WAAD,EAAc,WAAd,EAA2BI,IAAI,CAACG,KAAhC,CANT;AAQP,OAAM,SAAUW,mBAAV,CACJd,IADI,EAC8C;EAElD,OACED,WAAW,CAACC,IAAD,CAAX;EACCL,6BAA6B,CAACK,IAAD,CAA7B;EACCC,MAAM,CAACC,IAAP,CAAYF,IAAI,CAACG,KAAL,IAAc,EAA1B,EAA8BC,IAA9B,CACE,KAAI,KAAIC,IAAI,CAACC,WAAL,OAAuBR,YADjC,CAHJ;AAOD,C,iLApCKD,e,uJACAC,Y,oJAEOC,W,mJAQPQ,oB,4JAOOM,oB,4JAQGC,mB","names":["isUserWithPermissionsAndRoles","findPermission","ADMIN_ROLE_NAME","SQL_LAB_ROLE","isUserAdmin","user","Object","keys","roles","some","role","toLowerCase","isUserDashboardOwner","dashboard","owners","owner","id","userId","canUserEditDashboard","canUserAccessSqlLab"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/util/permissionUtils.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  isUserWithPermissionsAndRoles,\n  UndefinedUser,\n  UserWithPermissionsAndRoles,\n} from 'src/types/bootstrapTypes';\nimport { Dashboard } from 'src/types/Dashboard';\nimport { findPermission } from 'src/utils/findPermission';\n\n// this should really be a config value,\n// but is hardcoded in backend logic already, so...\nconst ADMIN_ROLE_NAME = 'admin';\nconst SQL_LAB_ROLE = 'sql_lab';\n\nexport const isUserAdmin = (\n  user?: UserWithPermissionsAndRoles | UndefinedUser,\n) =>\n  isUserWithPermissionsAndRoles(user) &&\n  Object.keys(user.roles || {}).some(\n    role => role.toLowerCase() === ADMIN_ROLE_NAME,\n  );\n\nconst isUserDashboardOwner = (\n  dashboard: Dashboard,\n  user: UserWithPermissionsAndRoles | UndefinedUser,\n) =>\n  isUserWithPermissionsAndRoles(user) &&\n  dashboard.owners.some(owner => owner.id === user.userId);\n\nexport const canUserEditDashboard = (\n  dashboard: Dashboard,\n  user?: UserWithPermissionsAndRoles | UndefinedUser | null,\n) =>\n  isUserWithPermissionsAndRoles(user) &&\n  (isUserAdmin(user) || isUserDashboardOwner(dashboard, user)) &&\n  findPermission('can_write', 'Dashboard', user.roles);\n\nexport function canUserAccessSqlLab(\n  user?: UserWithPermissionsAndRoles | UndefinedUser,\n) {\n  return (\n    isUserAdmin(user) ||\n    (isUserWithPermissionsAndRoles(user) &&\n      Object.keys(user.roles || {}).some(\n        role => role.toLowerCase() === SQL_LAB_ROLE,\n      ))\n  );\n}\n"]},"metadata":{},"sourceType":"module"}