{"ast":null,"code":"export function isSavedMetric(metric) {\n  return typeof metric === 'string';\n}\nexport function isAdhocMetricSimple(metric) {\n  return typeof metric !== 'string' && (metric == null ? void 0 : metric.expressionType) === 'SIMPLE';\n}\nexport function isAdhocMetricSQL(metric) {\n  return typeof metric !== 'string' && (metric == null ? void 0 : metric.expressionType) === 'SQL';\n}\nexport function isQueryFormMetric(metric) {\n  return isSavedMetric(metric) ||\n  isAdhocMetricSimple(metric) ||\n  isAdhocMetricSQL(metric);\n}\nexport default {};","map":{"version":3,"mappings":"AA0EA,OAAM,SAAUA,aAAV,CAAwBC,MAAxB,EAAmC;EACvC,OAAO,OAAOA,MAAP,KAAkB,QAAzB;AACD;AAED,OAAM,SAAUC,mBAAV,CAA8BD,MAA9B,EAAyC;EAC7C,OAAO,OAAOA,MAAP,KAAkB,QAAlB,IAA8B,OAAM,QAAN,kBAAM,CAAEE,cAAR,MAA2B,QAAhE;AACD;AAED,OAAM,SAAUC,gBAAV,CAA2BH,MAA3B,EAAsC;EAC1C,OAAO,OAAOA,MAAP,KAAkB,QAAlB,IAA8B,OAAM,QAAN,kBAAM,CAAEE,cAAR,MAA2B,KAAhE;AACD;AAED,OAAM,SAAUE,iBAAV,CAA4BJ,MAA5B,EAAuC;EAC3C,OACED,aAAa,CAACC,MAAD,CAAb;EACAC,mBAAmB,CAACD,MAAD,CADnB;EAEAG,gBAAgB,CAACH,MAAD,CAHlB;AAKD;AAED,eAAe,EAAf","names":["isSavedMetric","metric","isAdhocMetricSimple","expressionType","isAdhocMetricSQL","isQueryFormMetric"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/query/types/Metric.ts"],"sourcesContent":["/* eslint-disable camelcase */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { Maybe, QueryFormMetric } from '../../types';\nimport { Column } from './Column';\n\nexport type Aggregate =\n  | 'AVG'\n  | 'COUNT'\n  | 'COUNT_DISTINCT'\n  | 'MAX'\n  | 'MIN'\n  | 'SUM';\n\nexport interface AdhocMetricBase {\n  hasCustomLabel?: boolean;\n  label?: string;\n  optionName?: string;\n}\n\nexport interface AdhocMetricSimple extends AdhocMetricBase {\n  expressionType: 'SIMPLE';\n  column: Omit<Column, 'column_name'> & {\n    column_name?: string;\n    columnName?: string;\n  };\n  aggregate: Aggregate;\n}\n\nexport interface AdhocMetricSQL extends AdhocMetricBase {\n  expressionType: 'SQL';\n  sqlExpression: string;\n}\n\nexport type AdhocMetric = AdhocMetricSimple | AdhocMetricSQL;\n\n/**\n * Select a predefined metric by its `metric_name`.\n */\nexport type SavedMetric = string;\n\n/**\n * Metric definition stored in datasource metadata.\n */\nexport interface Metric {\n  id?: number;\n  metric_name: string;\n  expression?: Maybe<string>;\n  certification_details?: Maybe<string>;\n  certified_by?: Maybe<string>;\n  d3format?: Maybe<string>;\n  description?: Maybe<string>;\n  is_certified?: boolean;\n  verbose_name?: string;\n  warning_markdown?: Maybe<string>;\n  warning_text?: Maybe<string>;\n}\n\nexport function isSavedMetric(metric: any): metric is SavedMetric {\n  return typeof metric === 'string';\n}\n\nexport function isAdhocMetricSimple(metric: any): metric is AdhocMetricSimple {\n  return typeof metric !== 'string' && metric?.expressionType === 'SIMPLE';\n}\n\nexport function isAdhocMetricSQL(metric: any): metric is AdhocMetricSQL {\n  return typeof metric !== 'string' && metric?.expressionType === 'SQL';\n}\n\nexport function isQueryFormMetric(metric: any): metric is QueryFormMetric {\n  return (\n    isSavedMetric(metric) ||\n    isAdhocMetricSimple(metric) ||\n    isAdhocMetricSQL(metric)\n  );\n}\n\nexport default {};\n"]},"metadata":{},"sourceType":"module"}