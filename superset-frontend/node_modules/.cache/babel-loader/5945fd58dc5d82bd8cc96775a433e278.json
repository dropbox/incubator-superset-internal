{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useMemo } from 'react';\nimport { css, ensureIsArray, styled } from '@superset-ui/core';\nimport { AntdBreadcrumb } from 'src/components/index';\nimport { noOp } from 'src/utils/common';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst BreadcrumbItem = styled(AntdBreadcrumb.Item)`\n  ${(_ref) => {let { theme, isClickable } = _ref;return css`\n    cursor: ${isClickable ? 'pointer' : 'auto'};\n    color: ${theme.colors.grayscale.light1};\n    transition: color ease-in ${theme.transitionTiming}s;\n    .ant-breadcrumb > span:last-child > & {\n      color: ${theme.colors.grayscale.dark1};\n    }\n    &:hover {\n      color: ${isClickable ? theme.colors.grayscale.dark1 : 'inherit'};\n    }\n  `;}}\n`;\nexport const useDrillByBreadcrumbs = function (breadcrumbsData, onBreadcrumbClick) {if (onBreadcrumbClick === void 0) {onBreadcrumbClick = noOp;}return useMemo(() => {\n    // the last breadcrumb is not clickable\n    const isClickable = (index) => index < breadcrumbsData.length - 1;\n    const getBreadcrumbText = (breadcrumb) => `${ensureIsArray(breadcrumb.groupby).\n    map((column) => column.verbose_name || column.column_name).\n    join(', ')} ${breadcrumb.filters ?\n    `(${breadcrumb.filters.\n    map((filter) => filter.formattedVal || filter.val).\n    join(', ')})` :\n    ''}`;\n    return ___EmotionJSX(AntdBreadcrumb, { css: (theme) => css`\n          margin: ${theme.gridUnit * 2}px 0 ${theme.gridUnit * 4}px;\n        ` },\n    breadcrumbsData.map((breadcrumb, index) => ___EmotionJSX(BreadcrumbItem, { key: index, isClickable: isClickable(index), onClick: isClickable(index) ?\n      () => onBreadcrumbClick(breadcrumb, index) :\n      noOp },\n    getBreadcrumbText(breadcrumb))));\n\n\n  }, [breadcrumbsData, onBreadcrumbClick]);};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAmBA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,SAGEC,GAHF,EAIEC,aAJF,EAKEC,MALF,QAOO,mBAPP;AAQA,SAASC,cAAT,QAA+B,sBAA/B;AACA,SAASC,IAAT,QAAqB,kBAArB,C;AAOA,MAAMC,cAAc,GAAGH,MAAM,CAACC,cAAc,CAACG,IAAhB,CAA+C;IACxE,eAAC,EAAEC,KAAF,EAASC,WAAT,EAAD,eAA4BR,GAAG;cACrBQ,WAAW,GAAG,SAAH,GAAe,MAAM;aACjCD,KAAK,CAACE,MAAN,CAAaC,SAAb,CAAuBC,MAAM;gCACVJ,KAAK,CAACK,gBAAgB;;eAEvCL,KAAK,CAACE,MAAN,CAAaC,SAAb,CAAuBG,KAAK;;;eAG5BL,WAAW,GAAGD,KAAK,CAACE,MAAN,CAAaC,SAAb,CAAuBG,KAA1B,GAAkC,SAAS;;GARjE,EAUD;CAXH;AAcA,OAAO,MAAMC,qBAAqB,GAAG,UACnCC,eADmC,EAEnCC,iBAFmC,OAEnCA,iBAFmC,cAEnCA,iBAFmC,GAKvBZ,IALuB,SAOnCL,OAAO,CAAC,MAAK;IACX;IACA,MAAMS,WAAW,GAAG,CAACS,KAAD,KAAmBA,KAAK,GAAGF,eAAe,CAACG,MAAhB,GAAyB,CAAxE;IACA,MAAMC,iBAAiB,GAAG,CAACC,UAAD,KACxB,GAAGnB,aAAa,CAACmB,UAAU,CAACC,OAAZ,CAAb;IACAC,GADA,CACI,OAAM,KAAIC,MAAM,CAACC,YAAP,IAAuBD,MAAM,CAACE,WAD5C;IAEAC,IAFA,CAEK,IAFL,CAEU,IACXN,UAAU,CAACO,OAAX;IACI,IAAIP,UAAU,CAACO,OAAX;IACDL,GADC,CACG,OAAM,KAAIM,MAAM,CAACC,YAAP,IAAuBD,MAAM,CAACE,GAD3C;IAEDJ,IAFC,CAEI,IAFJ,CAES,GAHjB;IAII,EACN,EATF;IAUA,OACE,cAAC,cAAD,IACE,GAAG,EAAE,CAACnB,KAAD,KAA0BP,GAAG;oBACtBO,KAAK,CAACwB,QAAN,GAAiB,CAAC,QAAQxB,KAAK,CAACwB,QAAN,GAAiB,CAAC;SAF1D;IAKGhB,eAAe,CAACO,GAAhB,CAAoB,CAACF,UAAD,EAAaH,KAAb,KACnB,cAAC,cAAD,IACE,GAAG,EAAEA,KADP,EAEE,WAAW,EAAET,WAAW,CAACS,KAAD,CAF1B,EAGE,OAAO,EACLT,WAAW,CAACS,KAAD,CAAX;MACI,MAAMD,iBAAiB,CAACI,UAAD,EAAaH,KAAb,CAD3B;MAEIb,IANR;IAUGe,iBAAiB,CAACC,UAAD,CAVpB,CADD,CALH,CADF;;;EAsBD,CAnCM,EAmCJ,CAACL,eAAD,EAAkBC,iBAAlB,CAnCI,CAP4B,EAA9B","names":["React","useMemo","css","ensureIsArray","styled","AntdBreadcrumb","noOp","BreadcrumbItem","Item","theme","isClickable","colors","grayscale","light1","transitionTiming","dark1","useDrillByBreadcrumbs","breadcrumbsData","onBreadcrumbClick","index","length","getBreadcrumbText","breadcrumb","groupby","map","column","verbose_name","column_name","join","filters","filter","formattedVal","val","gridUnit"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/Chart/DrillBy/useDrillByBreadcrumbs.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useMemo } from 'react';\nimport {\n  BinaryQueryObjectFilterClause,\n  Column,\n  css,\n  ensureIsArray,\n  styled,\n  SupersetTheme,\n} from '@superset-ui/core';\nimport { AntdBreadcrumb } from 'src/components/index';\nimport { noOp } from 'src/utils/common';\n\nexport interface DrillByBreadcrumb {\n  groupby: Column | Column[];\n  filters?: BinaryQueryObjectFilterClause[];\n}\n\nconst BreadcrumbItem = styled(AntdBreadcrumb.Item)<{ isClickable: boolean }>`\n  ${({ theme, isClickable }) => css`\n    cursor: ${isClickable ? 'pointer' : 'auto'};\n    color: ${theme.colors.grayscale.light1};\n    transition: color ease-in ${theme.transitionTiming}s;\n    .ant-breadcrumb > span:last-child > & {\n      color: ${theme.colors.grayscale.dark1};\n    }\n    &:hover {\n      color: ${isClickable ? theme.colors.grayscale.dark1 : 'inherit'};\n    }\n  `}\n`;\n\nexport const useDrillByBreadcrumbs = (\n  breadcrumbsData: DrillByBreadcrumb[],\n  onBreadcrumbClick: (\n    breadcrumb: DrillByBreadcrumb,\n    index: number,\n  ) => void = noOp,\n) =>\n  useMemo(() => {\n    // the last breadcrumb is not clickable\n    const isClickable = (index: number) => index < breadcrumbsData.length - 1;\n    const getBreadcrumbText = (breadcrumb: DrillByBreadcrumb) =>\n      `${ensureIsArray(breadcrumb.groupby)\n        .map(column => column.verbose_name || column.column_name)\n        .join(', ')} ${\n        breadcrumb.filters\n          ? `(${breadcrumb.filters\n              .map(filter => filter.formattedVal || filter.val)\n              .join(', ')})`\n          : ''\n      }`;\n    return (\n      <AntdBreadcrumb\n        css={(theme: SupersetTheme) => css`\n          margin: ${theme.gridUnit * 2}px 0 ${theme.gridUnit * 4}px;\n        `}\n      >\n        {breadcrumbsData.map((breadcrumb, index) => (\n          <BreadcrumbItem\n            key={index}\n            isClickable={isClickable(index)}\n            onClick={\n              isClickable(index)\n                ? () => onBreadcrumbClick(breadcrumb, index)\n                : noOp\n            }\n            data-test=\"drill-by-breadcrumb-item\"\n          >\n            {getBreadcrumbText(breadcrumb)}\n          </BreadcrumbItem>\n        ))}\n      </AntdBreadcrumb>\n    );\n  }, [breadcrumbsData, onBreadcrumbClick]);\n"]},"metadata":{},"sourceType":"module"}