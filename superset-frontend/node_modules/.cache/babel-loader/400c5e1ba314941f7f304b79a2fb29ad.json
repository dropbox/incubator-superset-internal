{"ast":null,"code":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport getTextDimension from './getTextDimension';\nfunction decreaseSizeUntil(startSize, computeDimension, condition) {\n  let size = startSize;\n  let dimension = computeDimension(size);\n  while (!condition(dimension)) {\n    size -= 1;\n    // Here if the size goes below zero most likely is because it\n    // has additional style applied in which case we assume the user\n    // knows what it's doing and we just let them use that.\n    // Visually it works, although it could have another\n    // check in place.\n    if (size < 0) {\n      size = startSize;\n      break;\n    }\n    dimension = computeDimension(size);\n  }\n  return size;\n}\nexport default function computeMaxFontSize(input) {\n  const { idealFontSize, maxWidth, maxHeight, style, ...rest } = input;\n  let size;\n  if (idealFontSize !== undefined && idealFontSize !== null) {\n    size = idealFontSize;\n  } else\n  if (maxHeight === undefined || maxHeight === null) {\n    throw new Error('You must specify at least one of maxHeight or idealFontSize');\n  } else\n  {\n    size = Math.floor(maxHeight);\n  }\n  function computeDimension(fontSize) {\n    return getTextDimension({\n      ...rest,\n      style: { ...style, fontSize: `${fontSize}px` } });\n\n  }\n  if (maxWidth !== undefined && maxWidth !== null) {\n    size = decreaseSizeUntil(size, computeDimension, (dim) => dim.width > 0 && dim.width <= maxWidth);\n  }\n  if (maxHeight !== undefined && maxHeight !== null) {\n    size = decreaseSizeUntil(size, computeDimension, (dim) => dim.height > 0 && dim.height <= maxHeight);\n  }\n  return size;\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAmBA,OAAOA,gBAAP,MAAwD,oBAAxD;AAGA,SAASC,iBAAT,CACEC,SADF,EAEEC,gBAFF,EAGEC,SAHF,EAG8C;EAE5C,IAAIC,IAAI,GAAGH,SAAX;EACA,IAAII,SAAS,GAAGH,gBAAgB,CAACE,IAAD,CAAhC;EAEA,OAAO,CAACD,SAAS,CAACE,SAAD,CAAjB,EAA8B;IAC5BD,IAAI,IAAI,CAAR;IAEA;IACA;IACA;IACA;IACA;IACA,IAAIA,IAAI,GAAG,CAAX,EAAc;MACZA,IAAI,GAAGH,SAAP;MACA;IACD;IAEDI,SAAS,GAAGH,gBAAgB,CAACE,IAAD,CAA5B;EACD;EAED,OAAOA,IAAP;AACD;AAED,eAAc,SAAUE,kBAAV,CACZC,KADY,EAKX;EAED,MAAM,EAAEC,aAAF,EAAiBC,QAAjB,EAA2BC,SAA3B,EAAsCC,KAAtC,EAA6C,GAAGC,IAAhD,KAAyDL,KAA/D;EAEA,IAAIH,IAAJ;EACA,IAAII,aAAa,KAAKK,SAAlB,IAA+BL,aAAa,KAAK,IAArD,EAA2D;IACzDJ,IAAI,GAAGI,aAAP;EACD,CAFD;EAEO,IAAIE,SAAS,KAAKG,SAAd,IAA2BH,SAAS,KAAK,IAA7C,EAAmD;IACxD,MAAM,IAAII,KAAJ,CACJ,6DADI,CAAN;EAGD,CAJM;EAIA;IACLV,IAAI,GAAGW,IAAI,CAACC,KAAL,CAAWN,SAAX,CAAP;EACD;EAED,SAASR,gBAAT,CAA0Be,QAA1B,EAA0C;IACxC,OAAOlB,gBAAgB,CAAC;MACtB,GAAGa,IADmB;MAEtBD,KAAK,EAAE,EAAE,GAAGA,KAAL,EAAYM,QAAQ,EAAE,GAAGA,QAAQ,IAAjC,EAFe,EAAD,CAAvB;;EAID;EAED,IAAIR,QAAQ,KAAKI,SAAb,IAA0BJ,QAAQ,KAAK,IAA3C,EAAiD;IAC/CL,IAAI,GAAGJ,iBAAiB,CACtBI,IADsB,EAEtBF,gBAFsB,EAGtB,IAAG,KAAIgB,GAAG,CAACC,KAAJ,GAAY,CAAZ,IAAiBD,GAAG,CAACC,KAAJ,IAAaV,QAHf,CAAxB;EAKD;EAED,IAAIC,SAAS,KAAKG,SAAd,IAA2BH,SAAS,KAAK,IAA7C,EAAmD;IACjDN,IAAI,GAAGJ,iBAAiB,CACtBI,IADsB,EAEtBF,gBAFsB,EAGtB,IAAG,KAAIgB,GAAG,CAACE,MAAJ,GAAa,CAAb,IAAkBF,GAAG,CAACE,MAAJ,IAAcV,SAHjB,CAAxB;EAKD;EAED,OAAON,IAAP;AACD","names":["getTextDimension","decreaseSizeUntil","startSize","computeDimension","condition","size","dimension","computeMaxFontSize","input","idealFontSize","maxWidth","maxHeight","style","rest","undefined","Error","Math","floor","fontSize","dim","width","height"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/dimension/computeMaxFontSize.ts"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport getTextDimension, { GetTextDimensionInput } from './getTextDimension';\nimport { Dimension } from './types';\n\nfunction decreaseSizeUntil(\n  startSize: number,\n  computeDimension: (size: number) => Dimension,\n  condition: (dimension: Dimension) => boolean,\n): number {\n  let size = startSize;\n  let dimension = computeDimension(size);\n\n  while (!condition(dimension)) {\n    size -= 1;\n\n    // Here if the size goes below zero most likely is because it\n    // has additional style applied in which case we assume the user\n    // knows what it's doing and we just let them use that.\n    // Visually it works, although it could have another\n    // check in place.\n    if (size < 0) {\n      size = startSize;\n      break;\n    }\n\n    dimension = computeDimension(size);\n  }\n\n  return size;\n}\n\nexport default function computeMaxFontSize(\n  input: GetTextDimensionInput & {\n    maxWidth?: number;\n    maxHeight?: number;\n    idealFontSize?: number;\n  },\n) {\n  const { idealFontSize, maxWidth, maxHeight, style, ...rest } = input;\n\n  let size: number;\n  if (idealFontSize !== undefined && idealFontSize !== null) {\n    size = idealFontSize;\n  } else if (maxHeight === undefined || maxHeight === null) {\n    throw new Error(\n      'You must specify at least one of maxHeight or idealFontSize',\n    );\n  } else {\n    size = Math.floor(maxHeight);\n  }\n\n  function computeDimension(fontSize: number) {\n    return getTextDimension({\n      ...rest,\n      style: { ...style, fontSize: `${fontSize}px` },\n    });\n  }\n\n  if (maxWidth !== undefined && maxWidth !== null) {\n    size = decreaseSizeUntil(\n      size,\n      computeDimension,\n      dim => dim.width > 0 && dim.width <= maxWidth,\n    );\n  }\n\n  if (maxHeight !== undefined && maxHeight !== null) {\n    size = decreaseSizeUntil(\n      size,\n      computeDimension,\n      dim => dim.height > 0 && dim.height <= maxHeight,\n    );\n  }\n\n  return size;\n}\n"]},"metadata":{},"sourceType":"module"}