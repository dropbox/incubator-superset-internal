{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { t } from '@superset-ui/core';\nimport { sharedControls, D3_FORMAT_OPTIONS, sections, getStandardizedControls } from '@superset-ui/chart-controls';\nimport { DEFAULT_FORM_DATA } from './types';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst config = {\n  controlPanelSections: [\n  sections.legacyRegularTime,\n  {\n    label: t('Query'),\n    expanded: true,\n    controlSetRows: [\n    [\n    {\n      name: 'groupby',\n      config: {\n        ...sharedControls.groupby,\n        description: t('Columns to group by') } }],\n\n\n\n    ['metric'],\n    ['adhoc_filters'],\n    [\n    {\n      name: 'row_limit',\n      config: {\n        ...sharedControls.row_limit,\n        choices: [...Array(10).keys()].map((n) => n + 1),\n        default: DEFAULT_FORM_DATA.rowLimit } }],\n\n\n\n    [\n    {\n      name: 'sort_by_metric',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Sort by metric'),\n        description: t('Whether to sort results by the selected metric in descending order.') } }]] },\n\n\n\n\n\n  {\n    label: t('Chart Options'),\n    expanded: true,\n    controlSetRows: [\n    [___EmotionJSX(\"div\", { className: \"section-header\" }, t('General'))],\n    [\n    {\n      name: 'min_val',\n      config: {\n        type: 'TextControl',\n        isInt: true,\n        default: DEFAULT_FORM_DATA.minVal,\n        renderTrigger: true,\n        label: t('Min'),\n        description: t('Minimum value on the gauge axis') } },\n\n\n    {\n      name: 'max_val',\n      config: {\n        type: 'TextControl',\n        isInt: true,\n        default: DEFAULT_FORM_DATA.maxVal,\n        renderTrigger: true,\n        label: t('Max'),\n        description: t('Maximum value on the gauge axis') } }],\n\n\n\n    [\n    {\n      name: 'start_angle',\n      config: {\n        type: 'TextControl',\n        label: t('Start angle'),\n        description: t('Angle at which to start progress axis'),\n        renderTrigger: true,\n        default: DEFAULT_FORM_DATA.startAngle } },\n\n\n    {\n      name: 'end_angle',\n      config: {\n        type: 'TextControl',\n        label: t('End angle'),\n        description: t('Angle at which to end progress axis'),\n        renderTrigger: true,\n        default: DEFAULT_FORM_DATA.endAngle } }],\n\n\n\n    ['color_scheme'],\n    [\n    {\n      name: 'font_size',\n      config: {\n        type: 'SliderControl',\n        label: t('Font size'),\n        description: t('Font size for axis labels, detail value and other text elements'),\n        renderTrigger: true,\n        min: 10,\n        max: 20,\n        default: DEFAULT_FORM_DATA.fontSize } }],\n\n\n\n    [\n    {\n      name: 'number_format',\n      config: {\n        type: 'SelectControl',\n        label: t('Number format'),\n        description: t('D3 format syntax: https://github.com/d3/d3-format'),\n        freeForm: true,\n        renderTrigger: true,\n        default: DEFAULT_FORM_DATA.numberFormat,\n        choices: D3_FORMAT_OPTIONS } }],\n\n\n\n    [\n    {\n      name: 'value_formatter',\n      config: {\n        type: 'TextControl',\n        label: t('Value format'),\n        description: t('Additional text to add before or after the value, e.g. unit'),\n        renderTrigger: true,\n        default: DEFAULT_FORM_DATA.valueFormatter } }],\n\n\n\n    [\n    {\n      name: 'show_pointer',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Show pointer'),\n        description: t('Whether to show the pointer'),\n        renderTrigger: true,\n        default: DEFAULT_FORM_DATA.showPointer } }],\n\n\n\n    [\n    {\n      name: 'animation',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Animation'),\n        description: t('Whether to animate the progress and the value or just display them'),\n        renderTrigger: true,\n        default: DEFAULT_FORM_DATA.animation } }],\n\n\n\n    [___EmotionJSX(\"div\", { className: \"section-header\" }, t('Axis'))],\n    [\n    {\n      name: 'show_axis_tick',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Show axis line ticks'),\n        description: t('Whether to show minor ticks on the axis'),\n        renderTrigger: true,\n        default: DEFAULT_FORM_DATA.showAxisTick } }],\n\n\n\n    [\n    {\n      name: 'show_split_line',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Show split lines'),\n        description: t('Whether to show the split lines on the axis'),\n        renderTrigger: true,\n        default: DEFAULT_FORM_DATA.showSplitLine } }],\n\n\n\n    [\n    {\n      name: 'split_number',\n      config: {\n        type: 'SliderControl',\n        label: t('Split number'),\n        description: t('Number of split segments on the axis'),\n        renderTrigger: true,\n        min: 3,\n        max: 30,\n        default: DEFAULT_FORM_DATA.splitNumber } }],\n\n\n\n    [___EmotionJSX(\"div\", { className: \"section-header\" }, t('Progress'))],\n    [\n    {\n      name: 'show_progress',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Show progress'),\n        description: t('Whether to show the progress of gauge chart'),\n        renderTrigger: true,\n        default: DEFAULT_FORM_DATA.showProgress } }],\n\n\n\n    [\n    {\n      name: 'overlap',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Overlap'),\n        description: t('Whether the progress bar overlaps when there are multiple groups of data'),\n        renderTrigger: true,\n        default: DEFAULT_FORM_DATA.overlap } }],\n\n\n\n    [\n    {\n      name: 'round_cap',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Round cap'),\n        description: t('Style the ends of the progress bar with a round cap'),\n        renderTrigger: true,\n        default: DEFAULT_FORM_DATA.roundCap } }],\n\n\n\n    [___EmotionJSX(\"div\", { className: \"section-header\" }, t('Intervals'))],\n    [\n    {\n      name: 'intervals',\n      config: {\n        type: 'TextControl',\n        label: t('Interval bounds'),\n        description: t('Comma-separated interval bounds, e.g. 2,4,5 for intervals 0-2, 2-4 and 4-5. Last number should match the value provided for MAX.'),\n        renderTrigger: true,\n        default: DEFAULT_FORM_DATA.intervals } }],\n\n\n\n    [\n    {\n      name: 'interval_color_indices',\n      config: {\n        type: 'TextControl',\n        label: t('Interval colors'),\n        description: t('Comma-separated color picks for the intervals, e.g. 1,2,4. Integers denote colors from the chosen color scheme and are 1-indexed. Length must be matching that of interval bounds.'),\n        renderTrigger: true,\n        default: DEFAULT_FORM_DATA.intervalColorIndices } }]] }],\n\n\n\n\n\n\n  formDataOverrides: (formData) => ({\n    ...formData,\n    metric: getStandardizedControls().shiftMetric(),\n    groupby: getStandardizedControls().popAllColumns() }) };\n\n\nexport default config;","map":{"version":3,"mappings":"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","names":["React","t","sharedControls","D3_FORMAT_OPTIONS","sections","getStandardizedControls","DEFAULT_FORM_DATA","config","controlPanelSections","legacyRegularTime","label","expanded","controlSetRows","name","groupby","description","row_limit","choices","Array","keys","map","n","default","rowLimit","type","isInt","minVal","renderTrigger","maxVal","startAngle","endAngle","min","max","fontSize","freeForm","numberFormat","valueFormatter","showPointer","animation","showAxisTick","showSplitLine","splitNumber","showProgress","overlap","roundCap","intervals","intervalColorIndices","formDataOverrides","formData","metric","shiftMetric","popAllColumns"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-echarts/src/Gauge/controlPanel.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { t } from '@superset-ui/core';\nimport {\n  sharedControls,\n  ControlPanelConfig,\n  D3_FORMAT_OPTIONS,\n  sections,\n  getStandardizedControls,\n} from '@superset-ui/chart-controls';\nimport { DEFAULT_FORM_DATA } from './types';\n\nconst config: ControlPanelConfig = {\n  controlPanelSections: [\n    sections.legacyRegularTime,\n    {\n      label: t('Query'),\n      expanded: true,\n      controlSetRows: [\n        [\n          {\n            name: 'groupby',\n            config: {\n              ...sharedControls.groupby,\n              description: t('Columns to group by'),\n            },\n          },\n        ],\n        ['metric'],\n        ['adhoc_filters'],\n        [\n          {\n            name: 'row_limit',\n            config: {\n              ...sharedControls.row_limit,\n              choices: [...Array(10).keys()].map(n => n + 1),\n              default: DEFAULT_FORM_DATA.rowLimit,\n            },\n          },\n        ],\n        [\n          {\n            name: 'sort_by_metric',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Sort by metric'),\n              description: t(\n                'Whether to sort results by the selected metric in descending order.',\n              ),\n            },\n          },\n        ],\n      ],\n    },\n    {\n      label: t('Chart Options'),\n      expanded: true,\n      controlSetRows: [\n        [<div className=\"section-header\">{t('General')}</div>],\n        [\n          {\n            name: 'min_val',\n            config: {\n              type: 'TextControl',\n              isInt: true,\n              default: DEFAULT_FORM_DATA.minVal,\n              renderTrigger: true,\n              label: t('Min'),\n              description: t('Minimum value on the gauge axis'),\n            },\n          },\n          {\n            name: 'max_val',\n            config: {\n              type: 'TextControl',\n              isInt: true,\n              default: DEFAULT_FORM_DATA.maxVal,\n              renderTrigger: true,\n              label: t('Max'),\n              description: t('Maximum value on the gauge axis'),\n            },\n          },\n        ],\n        [\n          {\n            name: 'start_angle',\n            config: {\n              type: 'TextControl',\n              label: t('Start angle'),\n              description: t('Angle at which to start progress axis'),\n              renderTrigger: true,\n              default: DEFAULT_FORM_DATA.startAngle,\n            },\n          },\n          {\n            name: 'end_angle',\n            config: {\n              type: 'TextControl',\n              label: t('End angle'),\n              description: t('Angle at which to end progress axis'),\n              renderTrigger: true,\n              default: DEFAULT_FORM_DATA.endAngle,\n            },\n          },\n        ],\n        ['color_scheme'],\n        [\n          {\n            name: 'font_size',\n            config: {\n              type: 'SliderControl',\n              label: t('Font size'),\n              description: t(\n                'Font size for axis labels, detail value and other text elements',\n              ),\n              renderTrigger: true,\n              min: 10,\n              max: 20,\n              default: DEFAULT_FORM_DATA.fontSize,\n            },\n          },\n        ],\n        [\n          {\n            name: 'number_format',\n            config: {\n              type: 'SelectControl',\n              label: t('Number format'),\n              description: t(\n                'D3 format syntax: https://github.com/d3/d3-format',\n              ),\n              freeForm: true,\n              renderTrigger: true,\n              default: DEFAULT_FORM_DATA.numberFormat,\n              choices: D3_FORMAT_OPTIONS,\n            },\n          },\n        ],\n        [\n          {\n            name: 'value_formatter',\n            config: {\n              type: 'TextControl',\n              label: t('Value format'),\n              description: t(\n                'Additional text to add before or after the value, e.g. unit',\n              ),\n              renderTrigger: true,\n              default: DEFAULT_FORM_DATA.valueFormatter,\n            },\n          },\n        ],\n        [\n          {\n            name: 'show_pointer',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Show pointer'),\n              description: t('Whether to show the pointer'),\n              renderTrigger: true,\n              default: DEFAULT_FORM_DATA.showPointer,\n            },\n          },\n        ],\n        [\n          {\n            name: 'animation',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Animation'),\n              description: t(\n                'Whether to animate the progress and the value or just display them',\n              ),\n              renderTrigger: true,\n              default: DEFAULT_FORM_DATA.animation,\n            },\n          },\n        ],\n        [<div className=\"section-header\">{t('Axis')}</div>],\n        [\n          {\n            name: 'show_axis_tick',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Show axis line ticks'),\n              description: t('Whether to show minor ticks on the axis'),\n              renderTrigger: true,\n              default: DEFAULT_FORM_DATA.showAxisTick,\n            },\n          },\n        ],\n        [\n          {\n            name: 'show_split_line',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Show split lines'),\n              description: t('Whether to show the split lines on the axis'),\n              renderTrigger: true,\n              default: DEFAULT_FORM_DATA.showSplitLine,\n            },\n          },\n        ],\n        [\n          {\n            name: 'split_number',\n            config: {\n              type: 'SliderControl',\n              label: t('Split number'),\n              description: t('Number of split segments on the axis'),\n              renderTrigger: true,\n              min: 3,\n              max: 30,\n              default: DEFAULT_FORM_DATA.splitNumber,\n            },\n          },\n        ],\n        [<div className=\"section-header\">{t('Progress')}</div>],\n        [\n          {\n            name: 'show_progress',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Show progress'),\n              description: t('Whether to show the progress of gauge chart'),\n              renderTrigger: true,\n              default: DEFAULT_FORM_DATA.showProgress,\n            },\n          },\n        ],\n        [\n          {\n            name: 'overlap',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Overlap'),\n              description: t(\n                'Whether the progress bar overlaps when there are multiple groups of data',\n              ),\n              renderTrigger: true,\n              default: DEFAULT_FORM_DATA.overlap,\n            },\n          },\n        ],\n        [\n          {\n            name: 'round_cap',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Round cap'),\n              description: t(\n                'Style the ends of the progress bar with a round cap',\n              ),\n              renderTrigger: true,\n              default: DEFAULT_FORM_DATA.roundCap,\n            },\n          },\n        ],\n        [<div className=\"section-header\">{t('Intervals')}</div>],\n        [\n          {\n            name: 'intervals',\n            config: {\n              type: 'TextControl',\n              label: t('Interval bounds'),\n              description: t(\n                'Comma-separated interval bounds, e.g. 2,4,5 for intervals 0-2, 2-4 and 4-5. Last number should match the value provided for MAX.',\n              ),\n              renderTrigger: true,\n              default: DEFAULT_FORM_DATA.intervals,\n            },\n          },\n        ],\n        [\n          {\n            name: 'interval_color_indices',\n            config: {\n              type: 'TextControl',\n              label: t('Interval colors'),\n              description: t(\n                'Comma-separated color picks for the intervals, e.g. 1,2,4. Integers denote colors from the chosen color scheme and are 1-indexed. Length must be matching that of interval bounds.',\n              ),\n              renderTrigger: true,\n              default: DEFAULT_FORM_DATA.intervalColorIndices,\n            },\n          },\n        ],\n      ],\n    },\n  ],\n  formDataOverrides: formData => ({\n    ...formData,\n    metric: getStandardizedControls().shiftMetric(),\n    groupby: getStandardizedControls().popAllColumns(),\n  }),\n};\n\nexport default config;\n"]},"metadata":{},"sourceType":"module"}