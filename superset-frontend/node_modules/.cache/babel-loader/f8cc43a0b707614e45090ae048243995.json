{"ast":null,"code":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport Registry from './Registry';\nexport default class RegistryWithDefaultKey extends Registry {\n\n\n\n  constructor(config) {if (config === void 0) {config = {};}\n    super(config);this.initialDefaultKey = void 0;this.defaultKey = void 0;this.setFirstItemAsDefault = void 0;\n    const { initialDefaultKey = undefined, setFirstItemAsDefault = false } = config;\n    this.initialDefaultKey = initialDefaultKey;\n    this.defaultKey = initialDefaultKey;\n    this.setFirstItemAsDefault = setFirstItemAsDefault;\n  }\n  clear() {\n    super.clear();\n    this.defaultKey = this.initialDefaultKey;\n    return this;\n  }\n  get(key) {\n    const targetKey = key != null ? key : this.defaultKey;\n    return targetKey ? super.get(targetKey) : undefined;\n  }\n  registerValue(key, value) {\n    super.registerValue(key, value);\n    // If there is no default, set as default\n    if (this.setFirstItemAsDefault && !this.defaultKey) {\n      this.defaultKey = key;\n    }\n    return this;\n  }\n  registerLoader(key, loader) {\n    super.registerLoader(key, loader);\n    // If there is no default, set as default\n    if (this.setFirstItemAsDefault && !this.defaultKey) {\n      this.defaultKey = key;\n    }\n    return this;\n  }\n  getDefaultKey() {\n    return this.defaultKey;\n  }\n  setDefaultKey(key) {\n    this.defaultKey = key;\n    return this;\n  }\n  clearDefaultKey() {\n    this.defaultKey = undefined;\n    return this;\n  }}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAmBA,OAAOA,QAAP,MAAyC,YAAzC;AAOA,eAAc,MAAOC,sBAAP,SAGJD,QAHI,CAGU;;;;EAOtBE,YAAYC,MAAZ,EAAqD,KAAzCA,MAAyC,cAAzCA,MAAyC,GAAF,EAAE;IACnD,MAAMA,MAAN,EADmD,KANrDC,iBAMqD,eAJrDC,UAIqD,eAFrDC,qBAEqD;IAEnD,MAAM,EAAEF,iBAAiB,GAAGG,SAAtB,EAAiCD,qBAAqB,GAAG,KAAzD,KACJH,MADF;IAEA,KAAKC,iBAAL,GAAyBA,iBAAzB;IACA,KAAKC,UAAL,GAAkBD,iBAAlB;IACA,KAAKE,qBAAL,GAA6BA,qBAA7B;EACD;EAEDE,KAAK;IACH,MAAMA,KAAN;IACA,KAAKH,UAAL,GAAkB,KAAKD,iBAAvB;IAEA,OAAO,IAAP;EACD;EAEDK,GAAG,CAACC,GAAD,EAAa;IACd,MAAMC,SAAS,GAAGD,GAAH,WAAGA,GAAH,GAAU,KAAKL,UAA9B;IAEA,OAAOM,SAAS,GAAG,MAAMF,GAAN,CAAUE,SAAV,CAAH,GAA0BJ,SAA1C;EACD;EAEDK,aAAa,CAACF,GAAD,EAAcG,KAAd,EAAsB;IACjC,MAAMD,aAAN,CAAoBF,GAApB,EAAyBG,KAAzB;IACA;IACA,IAAI,KAAKP,qBAAL,IAA8B,CAAC,KAAKD,UAAxC,EAAoD;MAClD,KAAKA,UAAL,GAAkBK,GAAlB;IACD;IAED,OAAO,IAAP;EACD;EAEDI,cAAc,CAACJ,GAAD,EAAcK,MAAd,EAA6B;IACzC,MAAMD,cAAN,CAAqBJ,GAArB,EAA0BK,MAA1B;IACA;IACA,IAAI,KAAKT,qBAAL,IAA8B,CAAC,KAAKD,UAAxC,EAAoD;MAClD,KAAKA,UAAL,GAAkBK,GAAlB;IACD;IAED,OAAO,IAAP;EACD;EAEDM,aAAa;IACX,OAAO,KAAKX,UAAZ;EACD;EAEDY,aAAa,CAACP,GAAD,EAAY;IACvB,KAAKL,UAAL,GAAkBK,GAAlB;IAEA,OAAO,IAAP;EACD;EAEDQ,eAAe;IACb,KAAKb,UAAL,GAAkBE,SAAlB;IAEA,OAAO,IAAP;EACD,CA/DqB","names":["Registry","RegistryWithDefaultKey","constructor","config","initialDefaultKey","defaultKey","setFirstItemAsDefault","undefined","clear","get","key","targetKey","registerValue","value","registerLoader","loader","getDefaultKey","setDefaultKey","clearDefaultKey"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/models/RegistryWithDefaultKey.ts"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport Registry, { RegistryConfig } from './Registry';\n\ninterface RegistryWithDefaultKeyConfig extends RegistryConfig {\n  initialDefaultKey?: string;\n  setFirstItemAsDefault?: boolean;\n}\n\nexport default class RegistryWithDefaultKey<\n  V,\n  W extends V | Promise<V> = V | Promise<V>,\n> extends Registry<V, W> {\n  initialDefaultKey?: string;\n\n  defaultKey?: string;\n\n  setFirstItemAsDefault: boolean;\n\n  constructor(config: RegistryWithDefaultKeyConfig = {}) {\n    super(config);\n    const { initialDefaultKey = undefined, setFirstItemAsDefault = false } =\n      config;\n    this.initialDefaultKey = initialDefaultKey;\n    this.defaultKey = initialDefaultKey;\n    this.setFirstItemAsDefault = setFirstItemAsDefault;\n  }\n\n  clear() {\n    super.clear();\n    this.defaultKey = this.initialDefaultKey;\n\n    return this;\n  }\n\n  get(key?: string) {\n    const targetKey = key ?? this.defaultKey;\n\n    return targetKey ? super.get(targetKey) : undefined;\n  }\n\n  registerValue(key: string, value: V) {\n    super.registerValue(key, value);\n    // If there is no default, set as default\n    if (this.setFirstItemAsDefault && !this.defaultKey) {\n      this.defaultKey = key;\n    }\n\n    return this;\n  }\n\n  registerLoader(key: string, loader: () => W) {\n    super.registerLoader(key, loader);\n    // If there is no default, set as default\n    if (this.setFirstItemAsDefault && !this.defaultKey) {\n      this.defaultKey = key;\n    }\n\n    return this;\n  }\n\n  getDefaultKey() {\n    return this.defaultKey;\n  }\n\n  setDefaultKey(key: string) {\n    this.defaultKey = key;\n\n    return this;\n  }\n\n  clearDefaultKey() {\n    this.defaultKey = undefined;\n\n    return this;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}