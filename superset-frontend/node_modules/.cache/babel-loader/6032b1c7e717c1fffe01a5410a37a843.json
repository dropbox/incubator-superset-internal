{"ast":null,"code":"export const getInitialState = (state) => {\n  if (state.hasOwnProperty('sqlLab')) {\n    const { sqlLab: { user } } = state;\n    return user;\n  }\n  const { user } = state;\n  return user;\n};\nexport var DatasetRadioState;\n(function (DatasetRadioState) {\n  DatasetRadioState[DatasetRadioState[\"SAVE_NEW\"] = 1] = \"SAVE_NEW\";\n  DatasetRadioState[DatasetRadioState[\"OVERWRITE_DATASET\"] = 2] = \"OVERWRITE_DATASET\";\n})(DatasetRadioState || (DatasetRadioState = {}));\nexport const EXPLORE_CHART_DEFAULT = {\n  metrics: [],\n  groupby: [],\n  time_range: 'No filter',\n  row_limit: 1000 };","map":{"version":3,"mappings":"AAyFA,OAAO,MAAMA,eAAe,GAAG,CAACC,KAAD,KAAkC;EAC/D,IAAIA,KAAK,CAACC,cAAN,CAAqB,QAArB,CAAJ,EAAoC;IAClC,MAAM,EACJC,MAAM,EAAE,EAAEC,IAAF,EADJ,KAEFH,KAFJ;IAGA,OAAOG,IAAP;EACD;EAED,MAAM,EAAEA,IAAF,KAAWH,KAAjB;EACA,OAAOG,IAAP;AACD,CAVM;AAYP,WAAYC,iBAAZ;AAAA,WAAYA,iBAAZ,EAA6B;EAC3BA;EACAA;AACD,CAHD,EAAYA,iBAAiB,KAAjBA,iBAAiB,MAA7B;AAKA,OAAO,MAAMC,qBAAqB,GAAG;EACnCC,OAAO,EAAE,EAD0B;EAEnCC,OAAO,EAAE,EAF0B;EAGnCC,UAAU,EAAE,WAHuB;EAInCC,SAAS,EAAE,IAJwB,EAA9B","names":["getInitialState","state","hasOwnProperty","sqlLab","user","DatasetRadioState","EXPLORE_CHART_DEFAULT","metrics","groupby","time_range","row_limit"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/SqlLab/types.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { JsonObject, QueryResponse } from '@superset-ui/core';\nimport { SupersetError } from 'src/components/ErrorMessage/types';\nimport { UserWithPermissionsAndRoles } from 'src/types/bootstrapTypes';\nimport { ToastType } from 'src/components/MessageToasts/types';\nimport { RootState } from 'src/dashboard/types';\nimport { DropdownButtonProps } from 'src/components/DropdownButton';\nimport { ButtonProps } from 'src/components/Button';\n\nexport type QueryButtonProps = DropdownButtonProps | ButtonProps;\n\n// Object as Dictionary (associative array) with Query id as the key and type Query as the value\nexport type QueryDictionary = {\n  [id: string]: QueryResponse;\n};\n\nexport interface QueryEditor {\n  id: string;\n  dbId?: number;\n  name: string;\n  schema: string;\n  autorun: boolean;\n  sql: string;\n  remoteId: number | null;\n  functionNames: string[];\n  validationResult?: {\n    completed: boolean;\n    errors: SupersetError[];\n  };\n  hideLeftBar?: boolean;\n  latestQueryId?: string | null;\n  templateParams?: string;\n  selectedText?: string;\n  queryLimit?: number;\n  description?: string;\n}\n\nexport type toastState = {\n  id: string;\n  toastType: ToastType;\n  text: string;\n  duration: number;\n  noDuplicate: boolean;\n};\n\nexport type SqlLabRootState = {\n  sqlLab: {\n    activeSouthPaneTab: string | number; // default is string; action.newQuery.id is number\n    alerts: any[];\n    databases: Record<string, any>;\n    dbConnect: boolean;\n    offline: boolean;\n    queries: Record<string, QueryResponse>;\n    queryEditors: QueryEditor[];\n    tabHistory: string[]; // default is activeTab ? [activeTab.id.toString()] : []\n    tables: Record<string, any>[];\n    queriesLastUpdate: number;\n    user: UserWithPermissionsAndRoles;\n    errorMessage: string | null;\n    unsavedQueryEditor: Partial<QueryEditor>;\n    queryCostEstimates?: Record<string, QueryCostEstimate>;\n  };\n  localStorageUsageInKilobytes: number;\n  messageToasts: toastState[];\n  common: {\n    flash_messages: string[];\n    conf: JsonObject;\n  };\n};\n\nexport type SqlLabExploreRootState = SqlLabRootState | RootState;\n\nexport const getInitialState = (state: SqlLabExploreRootState) => {\n  if (state.hasOwnProperty('sqlLab')) {\n    const {\n      sqlLab: { user },\n    } = state as SqlLabRootState;\n    return user;\n  }\n\n  const { user } = state as RootState;\n  return user as UserWithPermissionsAndRoles;\n};\n\nexport enum DatasetRadioState {\n  SAVE_NEW = 1,\n  OVERWRITE_DATASET = 2,\n}\n\nexport const EXPLORE_CHART_DEFAULT = {\n  metrics: [],\n  groupby: [],\n  time_range: 'No filter',\n  row_limit: 1000,\n};\n\nexport interface DatasetOwner {\n  first_name: string;\n  id: number;\n  last_name: string;\n  username: string;\n}\n\nexport interface DatasetOptionAutocomplete {\n  value: string;\n  datasetId: number;\n  owners: [DatasetOwner];\n}\n\nexport interface SchemaOption {\n  value: string;\n  label: string;\n  title: string;\n}\n\nexport interface QueryCostEstimate {\n  completed: string;\n  cost: Record<string, any>[];\n  error: string;\n}\n"]},"metadata":{},"sourceType":"module"}