{"ast":null,"code":"import { css as _css } from \"@emotion/react\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useMemo } from 'react';\nimport moment from 'moment-timezone';\nimport { t } from '@superset-ui/core';\nimport { Select } from 'src/components';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst DEFAULT_TIMEZONE = {\n  name: 'GMT Standard Time',\n  value: 'Africa/Abidjan' // timezones are deduped by the first alphabetical value\n};\nconst MIN_SELECT_WIDTH = '400px';\nconst offsetsToName = {\n  '-300-240': ['Eastern Standard Time', 'Eastern Daylight Time'],\n  '-360-300': ['Central Standard Time', 'Central Daylight Time'],\n  '-420-360': ['Mountain Standard Time', 'Mountain Daylight Time'],\n  '-420-420': [\n  'Mountain Standard Time - Phoenix',\n  'Mountain Standard Time - Phoenix'],\n\n  '-480-420': ['Pacific Standard Time', 'Pacific Daylight Time'],\n  '-540-480': ['Alaska Standard Time', 'Alaska Daylight Time'],\n  '-600-600': ['Hawaii Standard Time', 'Hawaii Daylight Time'],\n  '60120': ['Central European Time', 'Central European Daylight Time'],\n  '00': [DEFAULT_TIMEZONE.name, DEFAULT_TIMEZONE.name],\n  '060': ['GMT Standard Time - London', 'British Summer Time'] };\n\nconst currentDate = moment();\nconst JANUARY = moment([2021, 1]);\nconst JULY = moment([2021, 7]);\nconst getOffsetKey = (name) => JANUARY.tz(name).utcOffset().toString() +\nJULY.tz(name).utcOffset().toString();\nconst getTimezoneName = (name) => {var _offsetsToName$offset, _offsetsToName$offset2;\n  const offsets = getOffsetKey(name);\n  return (currentDate.tz(name).isDST() ? (_offsetsToName$offset =\n  offsetsToName[offsets]) == null ? void 0 : _offsetsToName$offset[1] : (_offsetsToName$offset2 =\n  offsetsToName[offsets]) == null ? void 0 : _offsetsToName$offset2[0]) || name;\n};\nconst ALL_ZONES = moment.tz.\ncountries().\nmap((country) => moment.tz.zonesForCountry(country, true)).\nflat();\nconst TIMEZONES = [];\nALL_ZONES.forEach((zone) => {\n  if (!TIMEZONES.find((option) => getOffsetKey(option.name) === getOffsetKey(zone.name))) {\n    TIMEZONES.push(zone); // dedupe zones by offsets\n  }\n});\nconst TIMEZONE_OPTIONS = TIMEZONES.map((zone) => ({\n  label: `GMT ${moment.\n  tz(currentDate, zone.name).\n  format('Z')} (${getTimezoneName(zone.name)})`,\n  value: zone.name,\n  offsets: getOffsetKey(zone.name),\n  timezoneName: zone.name }));\n\nconst TIMEZONE_OPTIONS_SORT_COMPARATOR = (a, b) => moment.tz(currentDate, a.timezoneName).utcOffset() -\nmoment.tz(currentDate, b.timezoneName).utcOffset();\n// pre-sort timezone options by time offset\nTIMEZONE_OPTIONS.sort(TIMEZONE_OPTIONS_SORT_COMPARATOR);\nconst matchTimezoneToOptions = (timezone) => {var _TIMEZONE_OPTIONS$fin;return ((_TIMEZONE_OPTIONS$fin = TIMEZONE_OPTIONS.find((option) => option.offsets === getOffsetKey(timezone))) == null ? void 0 : _TIMEZONE_OPTIONS$fin.\n  value) || DEFAULT_TIMEZONE.value;};\nexport default function TimezoneSelector(_ref)\n{let { onTimezoneChange, timezone, minWidth = MIN_SELECT_WIDTH // smallest size for current values\n  } = _ref;const validTimezone = useMemo(() => matchTimezoneToOptions(timezone || moment.tz.guess()), [timezone]);\n  // force trigger a timezone update if provided `timezone` is not invalid\n  useEffect(() => {\n    if (timezone !== validTimezone) {\n      onTimezoneChange(validTimezone);\n    }\n  }, [validTimezone, onTimezoneChange, timezone]);\n  return ___EmotionJSX(Select, { ariaLabel: t('Timezone selector'), css: /*#__PURE__*/_css({ minWidth }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:TimezoneSelector;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy96aGFvcnVpL3NyYy9pbmN1YmF0b3Itc3VwZXJzZXQtaW50ZXJuYWwvc3VwZXJzZXQtZnJvbnRlbmQvc3JjL2NvbXBvbmVudHMvVGltZXpvbmVTZWxlY3Rvci9pbmRleC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBc0Z1RCIsImZpbGUiOiIvVXNlcnMvemhhb3J1aS9zcmMvaW5jdWJhdG9yLXN1cGVyc2V0LWludGVybmFsL3N1cGVyc2V0LWZyb250ZW5kL3NyYy9jb21wb25lbnRzL1RpbWV6b25lU2VsZWN0b3IvaW5kZXgudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50LXRpbWV6b25lJztcbmltcG9ydCB7IHQgfSBmcm9tICdAc3VwZXJzZXQtdWkvY29yZSc7XG5pbXBvcnQgeyBTZWxlY3QgfSBmcm9tICdzcmMvY29tcG9uZW50cyc7XG5jb25zdCBERUZBVUxUX1RJTUVaT05FID0ge1xuICAgIG5hbWU6ICdHTVQgU3RhbmRhcmQgVGltZScsXG4gICAgdmFsdWU6ICdBZnJpY2EvQWJpZGphbicsIC8vIHRpbWV6b25lcyBhcmUgZGVkdXBlZCBieSB0aGUgZmlyc3QgYWxwaGFiZXRpY2FsIHZhbHVlXG59O1xuY29uc3QgTUlOX1NFTEVDVF9XSURUSCA9ICc0MDBweCc7XG5jb25zdCBvZmZzZXRzVG9OYW1lID0ge1xuICAgICctMzAwLTI0MCc6IFsnRWFzdGVybiBTdGFuZGFyZCBUaW1lJywgJ0Vhc3Rlcm4gRGF5bGlnaHQgVGltZSddLFxuICAgICctMzYwLTMwMCc6IFsnQ2VudHJhbCBTdGFuZGFyZCBUaW1lJywgJ0NlbnRyYWwgRGF5bGlnaHQgVGltZSddLFxuICAgICctNDIwLTM2MCc6IFsnTW91bnRhaW4gU3RhbmRhcmQgVGltZScsICdNb3VudGFpbiBEYXlsaWdodCBUaW1lJ10sXG4gICAgJy00MjAtNDIwJzogW1xuICAgICAgICAnTW91bnRhaW4gU3RhbmRhcmQgVGltZSAtIFBob2VuaXgnLFxuICAgICAgICAnTW91bnRhaW4gU3RhbmRhcmQgVGltZSAtIFBob2VuaXgnLFxuICAgIF0sXG4gICAgJy00ODAtNDIwJzogWydQYWNpZmljIFN0YW5kYXJkIFRpbWUnLCAnUGFjaWZpYyBEYXlsaWdodCBUaW1lJ10sXG4gICAgJy01NDAtNDgwJzogWydBbGFza2EgU3RhbmRhcmQgVGltZScsICdBbGFza2EgRGF5bGlnaHQgVGltZSddLFxuICAgICctNjAwLTYwMCc6IFsnSGF3YWlpIFN0YW5kYXJkIFRpbWUnLCAnSGF3YWlpIERheWxpZ2h0IFRpbWUnXSxcbiAgICAnNjAxMjAnOiBbJ0NlbnRyYWwgRXVyb3BlYW4gVGltZScsICdDZW50cmFsIEV1cm9wZWFuIERheWxpZ2h0IFRpbWUnXSxcbiAgICAnMDAnOiBbREVGQVVMVF9USU1FWk9ORS5uYW1lLCBERUZBVUxUX1RJTUVaT05FLm5hbWVdLFxuICAgICcwNjAnOiBbJ0dNVCBTdGFuZGFyZCBUaW1lIC0gTG9uZG9uJywgJ0JyaXRpc2ggU3VtbWVyIFRpbWUnXSxcbn07XG5jb25zdCBjdXJyZW50RGF0ZSA9IG1vbWVudCgpO1xuY29uc3QgSkFOVUFSWSA9IG1vbWVudChbMjAyMSwgMV0pO1xuY29uc3QgSlVMWSA9IG1vbWVudChbMjAyMSwgN10pO1xuY29uc3QgZ2V0T2Zmc2V0S2V5ID0gKG5hbWUpID0+IEpBTlVBUlkudHoobmFtZSkudXRjT2Zmc2V0KCkudG9TdHJpbmcoKSArXG4gICAgSlVMWS50eihuYW1lKS51dGNPZmZzZXQoKS50b1N0cmluZygpO1xuY29uc3QgZ2V0VGltZXpvbmVOYW1lID0gKG5hbWUpID0+IHtcbiAgICBjb25zdCBvZmZzZXRzID0gZ2V0T2Zmc2V0S2V5KG5hbWUpO1xuICAgIHJldHVybiAoKGN1cnJlbnREYXRlLnR6KG5hbWUpLmlzRFNUKClcbiAgICAgICAgPyBvZmZzZXRzVG9OYW1lW29mZnNldHNdPy5bMV1cbiAgICAgICAgOiBvZmZzZXRzVG9OYW1lW29mZnNldHNdPy5bMF0pIHx8IG5hbWUpO1xufTtcbmNvbnN0IEFMTF9aT05FUyA9IG1vbWVudC50elxuICAgIC5jb3VudHJpZXMoKVxuICAgIC5tYXAoY291bnRyeSA9PiBtb21lbnQudHouem9uZXNGb3JDb3VudHJ5KGNvdW50cnksIHRydWUpKVxuICAgIC5mbGF0KCk7XG5jb25zdCBUSU1FWk9ORVMgPSBbXTtcbkFMTF9aT05FUy5mb3JFYWNoKHpvbmUgPT4ge1xuICAgIGlmICghVElNRVpPTkVTLmZpbmQob3B0aW9uID0+IGdldE9mZnNldEtleShvcHRpb24ubmFtZSkgPT09IGdldE9mZnNldEtleSh6b25lLm5hbWUpKSkge1xuICAgICAgICBUSU1FWk9ORVMucHVzaCh6b25lKTsgLy8gZGVkdXBlIHpvbmVzIGJ5IG9mZnNldHNcbiAgICB9XG59KTtcbmNvbnN0IFRJTUVaT05FX09QVElPTlMgPSBUSU1FWk9ORVMubWFwKHpvbmUgPT4gKHtcbiAgICBsYWJlbDogYEdNVCAke21vbWVudFxuICAgICAgICAudHooY3VycmVudERhdGUsIHpvbmUubmFtZSlcbiAgICAgICAgLmZvcm1hdCgnWicpfSAoJHtnZXRUaW1lem9uZU5hbWUoem9uZS5uYW1lKX0pYCxcbiAgICB2YWx1ZTogem9uZS5uYW1lLFxuICAgIG9mZnNldHM6IGdldE9mZnNldEtleSh6b25lLm5hbWUpLFxuICAgIHRpbWV6b25lTmFtZTogem9uZS5uYW1lLFxufSkpO1xuY29uc3QgVElNRVpPTkVfT1BUSU9OU19TT1JUX0NPTVBBUkFUT1IgPSAoYSwgYikgPT4gbW9tZW50LnR6KGN1cnJlbnREYXRlLCBhLnRpbWV6b25lTmFtZSkudXRjT2Zmc2V0KCkgLVxuICAgIG1vbWVudC50eihjdXJyZW50RGF0ZSwgYi50aW1lem9uZU5hbWUpLnV0Y09mZnNldCgpO1xuLy8gcHJlLXNvcnQgdGltZXpvbmUgb3B0aW9ucyBieSB0aW1lIG9mZnNldFxuVElNRVpPTkVfT1BUSU9OUy5zb3J0KFRJTUVaT05FX09QVElPTlNfU09SVF9DT01QQVJBVE9SKTtcbmNvbnN0IG1hdGNoVGltZXpvbmVUb09wdGlvbnMgPSAodGltZXpvbmUpID0+IFRJTUVaT05FX09QVElPTlMuZmluZChvcHRpb24gPT4gb3B0aW9uLm9mZnNldHMgPT09IGdldE9mZnNldEtleSh0aW1lem9uZSkpXG4gICAgPy52YWx1ZSB8fCBERUZBVUxUX1RJTUVaT05FLnZhbHVlO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gVGltZXpvbmVTZWxlY3Rvcih7IG9uVGltZXpvbmVDaGFuZ2UsIHRpbWV6b25lLCBtaW5XaWR0aCA9IE1JTl9TRUxFQ1RfV0lEVEgsIC8vIHNtYWxsZXN0IHNpemUgZm9yIGN1cnJlbnQgdmFsdWVzXG4gfSkge1xuICAgIGNvbnN0IHZhbGlkVGltZXpvbmUgPSB1c2VNZW1vKCgpID0+IG1hdGNoVGltZXpvbmVUb09wdGlvbnModGltZXpvbmUgfHwgbW9tZW50LnR6Lmd1ZXNzKCkpLCBbdGltZXpvbmVdKTtcbiAgICAvLyBmb3JjZSB0cmlnZ2VyIGEgdGltZXpvbmUgdXBkYXRlIGlmIHByb3ZpZGVkIGB0aW1lem9uZWAgaXMgbm90IGludmFsaWRcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAodGltZXpvbmUgIT09IHZhbGlkVGltZXpvbmUpIHtcbiAgICAgICAgICAgIG9uVGltZXpvbmVDaGFuZ2UodmFsaWRUaW1lem9uZSk7XG4gICAgICAgIH1cbiAgICB9LCBbdmFsaWRUaW1lem9uZSwgb25UaW1lem9uZUNoYW5nZSwgdGltZXpvbmVdKTtcbiAgICByZXR1cm4gKDxTZWxlY3QgYXJpYUxhYmVsPXt0KCdUaW1lem9uZSBzZWxlY3RvcicpfSBjc3M9e3sgbWluV2lkdGggfX0gb25DaGFuZ2U9e3R6ID0+IG9uVGltZXpvbmVDaGFuZ2UodHopfSB2YWx1ZT17dmFsaWRUaW1lem9uZX0gb3B0aW9ucz17VElNRVpPTkVfT1BUSU9OU30gc29ydENvbXBhcmF0b3I9e1RJTUVaT05FX09QVElPTlNfU09SVF9DT01QQVJBVE9SfS8+KTtcbn1cbiJdfQ== */\"), onChange: (tz) => onTimezoneChange(tz), value: validTimezone, options: TIMEZONE_OPTIONS, sortComparator: TIMEZONE_OPTIONS_SORT_COMPARATOR });\n}","map":{"version":3,"mappings":"8CAAA;;;;;;;;;;;;;;;;;;AAmBA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,OAA3B,QAA0C,OAA1C;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,SAASC,CAAT,QAAkB,mBAAlB;AACA,SAASC,MAAT,QAAuB,gBAAvB,C;AAEA,MAAMC,gBAAgB,GAAG;EACvBC,IAAI,EAAE,mBADiB;EAEvBC,KAAK,EAAE,gBAFgB,CAEE;AAFF,CAAzB;AAKA,MAAMC,gBAAgB,GAAG,OAAzB;AAEA,MAAMC,aAAa,GAAG;EACpB,YAAY,CAAC,uBAAD,EAA0B,uBAA1B,CADQ;EAEpB,YAAY,CAAC,uBAAD,EAA0B,uBAA1B,CAFQ;EAGpB,YAAY,CAAC,wBAAD,EAA2B,wBAA3B,CAHQ;EAIpB,YAAY;EACV,kCADU;EAEV,kCAFU,CAJQ;;EAQpB,YAAY,CAAC,uBAAD,EAA0B,uBAA1B,CARQ;EASpB,YAAY,CAAC,sBAAD,EAAyB,sBAAzB,CATQ;EAUpB,YAAY,CAAC,sBAAD,EAAyB,sBAAzB,CAVQ;EAWpB,SAAS,CAAC,uBAAD,EAA0B,gCAA1B,CAXW;EAYpB,MAAM,CAACJ,gBAAgB,CAACC,IAAlB,EAAwBD,gBAAgB,CAACC,IAAzC,CAZc;EAapB,OAAO,CAAC,4BAAD,EAA+B,qBAA/B,CAba,EAAtB;;AAgBA,MAAMI,WAAW,GAAGR,MAAM,EAA1B;AACA,MAAMS,OAAO,GAAGT,MAAM,CAAC,CAAC,IAAD,EAAO,CAAP,CAAD,CAAtB;AACA,MAAMU,IAAI,GAAGV,MAAM,CAAC,CAAC,IAAD,EAAO,CAAP,CAAD,CAAnB;AAEA,MAAMW,YAAY,GAAG,CAACP,IAAD,KACnBK,OAAO,CAACG,EAAR,CAAWR,IAAX,EAAiBS,SAAjB,GAA6BC,QAA7B;AACAJ,IAAI,CAACE,EAAL,CAAQR,IAAR,EAAcS,SAAd,GAA0BC,QAA1B,EAFF;AAIA,MAAMC,eAAe,GAAG,CAACX,IAAD,KAAiB;EACvC,MAAMY,OAAO,GAAGL,YAAY,CAACP,IAAD,CAA5B;EACA,OACE,CAACI,WAAW,CAACI,EAAZ,CAAeR,IAAf,EAAqBa,KAArB;EACGV,aAAa,CAACS,OAAD,CADhB,qBACG,sBAAyB,CAAzB,CADH;EAEGT,aAAa,CAACS,OAAD,CAFhB,qBAEG,uBAAyB,CAAzB,CAFJ,KAEoCZ,IAHtC;AAKD,CAPD;AASA,MAAMc,SAAS,GAAGlB,MAAM,CAACY,EAAP;AACfO,SADe;AAEfC,GAFe,CAEX,QAAO,KAAIpB,MAAM,CAACY,EAAP,CAAUS,eAAV,CAA0BC,OAA1B,EAAmC,IAAnC,CAFA;AAGfC,IAHe,EAAlB;AAKA,MAAMC,SAAS,GAA8B,EAA7C;AACAN,SAAS,CAACO,OAAV,CAAkB,KAAI,KAAG;EACvB,IACE,CAACD,SAAS,CAACE,IAAV,CACC,OAAM,KAAIf,YAAY,CAACgB,MAAM,CAACvB,IAAR,CAAZ,KAA8BO,YAAY,CAACiB,IAAI,CAACxB,IAAN,CADrD,CADH,EAIE;IACAoB,SAAS,CAACK,IAAV,CAAeD,IAAf,EADA,CACsB;EACvB;AACF,CARD;AAUA,MAAME,gBAAgB,GAAGN,SAAS,CAACJ,GAAV,CAAc,KAAI,MAAK;EAC9CW,KAAK,EAAE,OAAO/B,MAAM;EACjBY,EADW,CACRJ,WADQ,EACKoB,IAAI,CAACxB,IADV;EAEX4B,MAFW,CAEJ,GAFI,CAEA,KAAKjB,eAAe,CAACa,IAAI,CAACxB,IAAN,CAAW,GAHC;EAI9CC,KAAK,EAAEuB,IAAI,CAACxB,IAJkC;EAK9CY,OAAO,EAAEL,YAAY,CAACiB,IAAI,CAACxB,IAAN,CALyB;EAM9C6B,YAAY,EAAEL,IAAI,CAACxB,IAN2B,EAAL,CAAlB,CAAzB;;AASA,MAAM8B,gCAAgC,GAAG,CACvCC,CADuC,EAEvCC,CAFuC,KAIvCpC,MAAM,CAACY,EAAP,CAAUJ,WAAV,EAAuB2B,CAAC,CAACF,YAAzB,EAAuCpB,SAAvC;AACAb,MAAM,CAACY,EAAP,CAAUJ,WAAV,EAAuB4B,CAAC,CAACH,YAAzB,EAAuCpB,SAAvC,EALF;AAOA;AACAiB,gBAAgB,CAACO,IAAjB,CAAsBH,gCAAtB;AAEA,MAAMI,sBAAsB,GAAG,CAACC,QAAD,uCAC7B,0CAAgB,CAACb,IAAjB,CAAsB,OAAM,KAAIC,MAAM,CAACX,OAAP,KAAmBL,YAAY,CAAC4B,QAAD,CAA/D;EACIlC,KADJ,KACaF,gBAAgB,CAACE,KAFD,EAA/B;AAUA,eAAc,SAAUmC,gBAAV;AAIU,KAJiB,EACvCC,gBADuC,EAEvCF,QAFuC,EAGvCG,QAAQ,GAAGpC,gBAH4B,CAGV;EAHU,CAIjB,QACtB,MAAMqC,aAAa,GAAG5C,OAAO,CAC3B,MAAMuC,sBAAsB,CAACC,QAAQ,IAAIvC,MAAM,CAACY,EAAP,CAAUgC,KAAV,EAAb,CADD,EAE3B,CAACL,QAAD,CAF2B,CAA7B;EAKA;EACAzC,SAAS,CAAC,MAAK;IACb,IAAIyC,QAAQ,KAAKI,aAAjB,EAAgC;MAC9BF,gBAAgB,CAACE,aAAD,CAAhB;IACD;EACF,CAJQ,EAIN,CAACA,aAAD,EAAgBF,gBAAhB,EAAkCF,QAAlC,CAJM,CAAT;EAMA,OACE,cAAC,MAAD,IACE,SAAS,EAAEtC,CAAC,CAAC,mBAAD,CADd,EAEE,GAAG,oBAAE,EAAEyC,QAAF,EAAF,s+LAFL,EAGE,QAAQ,EAAE,GAAE,KAAID,gBAAgB,CAAC7B,EAAD,CAHlC,EAIE,KAAK,EAAE+B,aAJT,EAKE,OAAO,EAAEb,gBALX,EAME,cAAc,EAAEI,gCANlB,GADF;AAUD","names":["React","useEffect","useMemo","moment","t","Select","DEFAULT_TIMEZONE","name","value","MIN_SELECT_WIDTH","offsetsToName","currentDate","JANUARY","JULY","getOffsetKey","tz","utcOffset","toString","getTimezoneName","offsets","isDST","ALL_ZONES","countries","map","zonesForCountry","country","flat","TIMEZONES","forEach","find","option","zone","push","TIMEZONE_OPTIONS","label","format","timezoneName","TIMEZONE_OPTIONS_SORT_COMPARATOR","a","b","sort","matchTimezoneToOptions","timezone","TimezoneSelector","onTimezoneChange","minWidth","validTimezone","guess"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/components/TimezoneSelector/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useEffect, useMemo } from 'react';\nimport moment from 'moment-timezone';\nimport { t } from '@superset-ui/core';\nimport { Select } from 'src/components';\n\nconst DEFAULT_TIMEZONE = {\n  name: 'GMT Standard Time',\n  value: 'Africa/Abidjan', // timezones are deduped by the first alphabetical value\n};\n\nconst MIN_SELECT_WIDTH = '400px';\n\nconst offsetsToName = {\n  '-300-240': ['Eastern Standard Time', 'Eastern Daylight Time'],\n  '-360-300': ['Central Standard Time', 'Central Daylight Time'],\n  '-420-360': ['Mountain Standard Time', 'Mountain Daylight Time'],\n  '-420-420': [\n    'Mountain Standard Time - Phoenix',\n    'Mountain Standard Time - Phoenix',\n  ],\n  '-480-420': ['Pacific Standard Time', 'Pacific Daylight Time'],\n  '-540-480': ['Alaska Standard Time', 'Alaska Daylight Time'],\n  '-600-600': ['Hawaii Standard Time', 'Hawaii Daylight Time'],\n  '60120': ['Central European Time', 'Central European Daylight Time'],\n  '00': [DEFAULT_TIMEZONE.name, DEFAULT_TIMEZONE.name],\n  '060': ['GMT Standard Time - London', 'British Summer Time'],\n};\n\nconst currentDate = moment();\nconst JANUARY = moment([2021, 1]);\nconst JULY = moment([2021, 7]);\n\nconst getOffsetKey = (name: string) =>\n  JANUARY.tz(name).utcOffset().toString() +\n  JULY.tz(name).utcOffset().toString();\n\nconst getTimezoneName = (name: string) => {\n  const offsets = getOffsetKey(name);\n  return (\n    (currentDate.tz(name).isDST()\n      ? offsetsToName[offsets]?.[1]\n      : offsetsToName[offsets]?.[0]) || name\n  );\n};\n\nconst ALL_ZONES = moment.tz\n  .countries()\n  .map(country => moment.tz.zonesForCountry(country, true))\n  .flat();\n\nconst TIMEZONES: moment.MomentZoneOffset[] = [];\nALL_ZONES.forEach(zone => {\n  if (\n    !TIMEZONES.find(\n      option => getOffsetKey(option.name) === getOffsetKey(zone.name),\n    )\n  ) {\n    TIMEZONES.push(zone); // dedupe zones by offsets\n  }\n});\n\nconst TIMEZONE_OPTIONS = TIMEZONES.map(zone => ({\n  label: `GMT ${moment\n    .tz(currentDate, zone.name)\n    .format('Z')} (${getTimezoneName(zone.name)})`,\n  value: zone.name,\n  offsets: getOffsetKey(zone.name),\n  timezoneName: zone.name,\n}));\n\nconst TIMEZONE_OPTIONS_SORT_COMPARATOR = (\n  a: typeof TIMEZONE_OPTIONS[number],\n  b: typeof TIMEZONE_OPTIONS[number],\n) =>\n  moment.tz(currentDate, a.timezoneName).utcOffset() -\n  moment.tz(currentDate, b.timezoneName).utcOffset();\n\n// pre-sort timezone options by time offset\nTIMEZONE_OPTIONS.sort(TIMEZONE_OPTIONS_SORT_COMPARATOR);\n\nconst matchTimezoneToOptions = (timezone: string) =>\n  TIMEZONE_OPTIONS.find(option => option.offsets === getOffsetKey(timezone))\n    ?.value || DEFAULT_TIMEZONE.value;\n\nexport type TimezoneSelectorProps = {\n  onTimezoneChange: (value: string) => void;\n  timezone?: string | null;\n  minWidth?: string;\n};\n\nexport default function TimezoneSelector({\n  onTimezoneChange,\n  timezone,\n  minWidth = MIN_SELECT_WIDTH, // smallest size for current values\n}: TimezoneSelectorProps) {\n  const validTimezone = useMemo(\n    () => matchTimezoneToOptions(timezone || moment.tz.guess()),\n    [timezone],\n  );\n\n  // force trigger a timezone update if provided `timezone` is not invalid\n  useEffect(() => {\n    if (timezone !== validTimezone) {\n      onTimezoneChange(validTimezone);\n    }\n  }, [validTimezone, onTimezoneChange, timezone]);\n\n  return (\n    <Select\n      ariaLabel={t('Timezone selector')}\n      css={{ minWidth }}\n      onChange={tz => onTimezoneChange(tz as string)}\n      value={validTimezone}\n      options={TIMEZONE_OPTIONS}\n      sortComparator={TIMEZONE_OPTIONS_SORT_COMPARATOR}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}