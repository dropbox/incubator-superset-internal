{"ast":null,"code":"import { EXTRA_FORM_DATA_OVERRIDE_EXTRA_KEYS, EXTRA_FORM_DATA_OVERRIDE_REGULAR_MAPPINGS } from './constants';\nexport function overrideExtraFormData(queryObject, overrideFormData) {\n  const overriddenFormData = { ...queryObject };\n  const { extras: overriddenExtras = {} } = overriddenFormData;\n  Object.entries(EXTRA_FORM_DATA_OVERRIDE_REGULAR_MAPPINGS).forEach((_ref) => {let [key, target] = _ref;\n    const value = overrideFormData[key];\n    if (value !== undefined) {\n      overriddenFormData[target] = value;\n    }\n  });\n  EXTRA_FORM_DATA_OVERRIDE_EXTRA_KEYS.forEach((key) => {\n    if (key in overrideFormData) {\n      // @ts-ignore\n      overriddenExtras[key] = overrideFormData[key];\n    }\n  });\n  if (Object.keys(overriddenExtras).length > 0) {\n    overriddenFormData.extras = overriddenExtras;\n  }\n  return overriddenFormData;\n}","map":{"version":3,"mappings":"AAmBA,SACEA,mCADF,EAEEC,yCAFF,QAGO,aAHP;AAKA,OAAM,SAAUC,qBAAV,CACJC,WADI,EAEJC,gBAFI,EAEmC;EAEvC,MAAMC,kBAAkB,GAAgB,EAAE,GAAGF,WAAL,EAAxC;EACA,MAAM,EAAEG,MAAM,EAAEC,gBAAgB,GAAG,EAA7B,KAAoCF,kBAA1C;EACAG,MAAM,CAACC,OAAP,CAAeR,yCAAf,EAA0DS,OAA1D,CACE,UAAkB,KAAjB,CAACC,GAAD,EAAMC,MAAN,CAAiB;IAChB,MAAMC,KAAK,GAAGT,gBAAgB,CAACO,GAAD,CAA9B;IACA,IAAIE,KAAK,KAAKC,SAAd,EAAyB;MACvBT,kBAAkB,CAACO,MAAD,CAAlB,GAA6BC,KAA7B;IACD;EACF,CANH;EAQAb,mCAAmC,CAACU,OAApC,CAA4C,IAAG,KAAG;IAChD,IAAIC,GAAG,IAAIP,gBAAX,EAA6B;MAC3B;MACAG,gBAAgB,CAACI,GAAD,CAAhB,GAAwBP,gBAAgB,CAACO,GAAD,CAAxC;IACD;EACF,CALD;EAMA,IAAIH,MAAM,CAACO,IAAP,CAAYR,gBAAZ,EAA8BS,MAA9B,GAAuC,CAA3C,EAA8C;IAC5CX,kBAAkB,CAACC,MAAnB,GAA4BC,gBAA5B;EACD;EACD,OAAOF,kBAAP;AACD","names":["EXTRA_FORM_DATA_OVERRIDE_EXTRA_KEYS","EXTRA_FORM_DATA_OVERRIDE_REGULAR_MAPPINGS","overrideExtraFormData","queryObject","overrideFormData","overriddenFormData","extras","overriddenExtras","Object","entries","forEach","key","target","value","undefined","keys","length"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/query/processExtraFormData.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ExtraFormDataOverride, QueryObject } from './types';\nimport {\n  EXTRA_FORM_DATA_OVERRIDE_EXTRA_KEYS,\n  EXTRA_FORM_DATA_OVERRIDE_REGULAR_MAPPINGS,\n} from './constants';\n\nexport function overrideExtraFormData(\n  queryObject: QueryObject,\n  overrideFormData: ExtraFormDataOverride,\n): QueryObject {\n  const overriddenFormData: QueryObject = { ...queryObject };\n  const { extras: overriddenExtras = {} } = overriddenFormData;\n  Object.entries(EXTRA_FORM_DATA_OVERRIDE_REGULAR_MAPPINGS).forEach(\n    ([key, target]) => {\n      const value = overrideFormData[key as keyof ExtraFormDataOverride];\n      if (value !== undefined) {\n        overriddenFormData[target] = value;\n      }\n    },\n  );\n  EXTRA_FORM_DATA_OVERRIDE_EXTRA_KEYS.forEach(key => {\n    if (key in overrideFormData) {\n      // @ts-ignore\n      overriddenExtras[key] = overrideFormData[key];\n    }\n  });\n  if (Object.keys(overriddenExtras).length > 0) {\n    overriddenFormData.extras = overriddenExtras;\n  }\n  return overriddenFormData;\n}\n"]},"metadata":{},"sourceType":"module"}