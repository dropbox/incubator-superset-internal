{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { sharedControls } from '@superset-ui/chart-controls';\nimport { isAggMode, validateAggControlValues } from './shared';\nexport const groupByControlSetItem = {\n  name: 'groupby',\n  override: {\n    visibility: isAggMode,\n    resetOnHide: false,\n    mapStateToProps: (state, controlState) => {var _sharedControls$group, _originalMapStateToPr, _controls$metrics, _controls$percent_met;\n      const { controls } = state;\n      const originalMapStateToProps = sharedControls == null ? void 0 : (_sharedControls$group = sharedControls.groupby) == null ? void 0 : _sharedControls$group.mapStateToProps;\n      const newState = (_originalMapStateToPr = originalMapStateToProps == null ? void 0 : originalMapStateToProps(state, controlState)) != null ? _originalMapStateToPr : {};\n      newState.externalValidationErrors = validateAggControlValues(controls, [(_controls$metrics =\n      controls.metrics) == null ? void 0 : _controls$metrics.value, (_controls$percent_met =\n      controls.percent_metrics) == null ? void 0 : _controls$percent_met.value,\n      controlState.value]);\n\n      return newState;\n    },\n    rerender: ['metrics', 'percent_metrics'] } };;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(groupByControlSetItem, \"groupByControlSetItem\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-handlebars/src/plugin/controls/groupBy.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAkBA,SAIEA,cAJF,QAKO,6BALP;AAMA,SAASC,SAAT,EAAoBC,wBAApB,QAAoD,UAApD;AAEA,OAAO,MAAMC,qBAAqB,GAAmB;EACnDC,IAAI,EAAE,SAD6C;EAEnDC,QAAQ,EAAE;IACRC,UAAU,EAAEL,SADJ;IAERM,WAAW,EAAE,KAFL;IAGRC,eAAe,EAAE,CAACC,KAAD,EAA2BC,YAA3B,KAAyD;MACxE,MAAM,EAAEC,QAAF,KAAeF,KAArB;MACA,MAAMG,uBAAuB,GAAGZ,cAAH,6CAAGA,cAAc,CAAEa,OAAnB,qBAAG,sBAAyBL,eAAzD;MACA,MAAMM,QAAQ,4BAAGF,uBAAH,oBAAGA,uBAAuB,CAAGH,KAAH,EAAUC,YAAV,CAA1B,oCAAqD,EAAnE;MACAI,QAAQ,CAACC,wBAAT,GAAoCb,wBAAwB,CAACS,QAAD,EAAW;MACrEA,QAAQ,CAACK,OAD4D,qBACrE,kBAAkBC,KADmD;MAErEN,QAAQ,CAACO,eAF4D,qBAErE,sBAA0BD,KAF2C;MAGrEP,YAAY,CAACO,KAHwD,CAAX,CAA5D;;MAKA,OAAOH,QAAP;IACD,CAbO;IAcRK,QAAQ,EAAE,CAAC,SAAD,EAAY,iBAAZ,CAdF,EAFyC,EAA9C,C,iLAAMhB,qB","names":["sharedControls","isAggMode","validateAggControlValues","groupByControlSetItem","name","override","visibility","resetOnHide","mapStateToProps","state","controlState","controls","originalMapStateToProps","groupby","newState","externalValidationErrors","metrics","value","percent_metrics","rerender"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-handlebars/src/plugin/controls/groupBy.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  ControlPanelState,\n  ControlSetItem,\n  ControlState,\n  sharedControls,\n} from '@superset-ui/chart-controls';\nimport { isAggMode, validateAggControlValues } from './shared';\n\nexport const groupByControlSetItem: ControlSetItem = {\n  name: 'groupby',\n  override: {\n    visibility: isAggMode,\n    resetOnHide: false,\n    mapStateToProps: (state: ControlPanelState, controlState: ControlState) => {\n      const { controls } = state;\n      const originalMapStateToProps = sharedControls?.groupby?.mapStateToProps;\n      const newState = originalMapStateToProps?.(state, controlState) ?? {};\n      newState.externalValidationErrors = validateAggControlValues(controls, [\n        controls.metrics?.value,\n        controls.percent_metrics?.value,\n        controlState.value,\n      ]);\n      return newState;\n    },\n    rerender: ['metrics', 'percent_metrics'],\n  },\n};\n"]},"metadata":{},"sourceType":"module"}