{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { GenericDataType, smartDateFormatter, t } from '@superset-ui/core';\nimport { D3_FORMAT_DOCS, D3_TIME_FORMAT_OPTIONS, getStandardizedControls, sections } from '@superset-ui/chart-controls';\nimport { headerFontSize, subheaderFontSize } from '../sharedControls';const _default =\n{\n  controlPanelSections: [\n  sections.legacyRegularTime,\n  {\n    label: t('Query'),\n    expanded: true,\n    controlSetRows: [['metric'], ['adhoc_filters']] },\n\n  {\n    label: t('Display settings'),\n    expanded: true,\n    tabOverride: 'data',\n    controlSetRows: [\n    [\n    {\n      name: 'subheader',\n      config: {\n        type: 'TextControl',\n        label: t('Subheader'),\n        renderTrigger: true,\n        description: t('Description text that shows up below your Big Number') } }]] },\n\n\n\n\n\n  {\n    label: t('Chart Options'),\n    expanded: true,\n    controlSetRows: [\n    [headerFontSize],\n    [subheaderFontSize],\n    ['y_axis_format'],\n    [\n    {\n      name: 'time_format',\n      config: {\n        type: 'SelectControl',\n        freeForm: true,\n        label: t('Date format'),\n        renderTrigger: true,\n        choices: D3_TIME_FORMAT_OPTIONS,\n        description: D3_FORMAT_DOCS,\n        default: smartDateFormatter.id } }],\n\n\n\n    [\n    {\n      name: 'force_timestamp_formatting',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Force date format'),\n        renderTrigger: true,\n        default: false,\n        description: t('Use date formatting even when metric value is not a timestamp') } }],\n\n\n\n    [\n    {\n      name: 'conditional_formatting',\n      config: {\n        type: 'ConditionalFormattingControl',\n        renderTrigger: true,\n        label: t('Conditional Formatting'),\n        description: t('Apply conditional color formatting to metric'),\n        shouldMapStateToProps() {\n          return true;\n        },\n        mapStateToProps(explore, _, chart) {var _explore$datasource, _explore$datasource2, _explore$datasource$c, _explore$datasource3, _chart$queriesRespons, _chart$queriesRespons2;\n          const verboseMap = explore != null && (_explore$datasource = explore.datasource) != null && _explore$datasource.hasOwnProperty('verbose_map') ?\n          explore == null ? void 0 : (_explore$datasource2 = explore.datasource) == null ? void 0 : _explore$datasource2.verbose_map : (_explore$datasource$c =\n          explore == null ? void 0 : (_explore$datasource3 = explore.datasource) == null ? void 0 : _explore$datasource3.columns) != null ? _explore$datasource$c : {};\n          const { colnames, coltypes } = (_chart$queriesRespons = chart == null ? void 0 : (_chart$queriesRespons2 = chart.queriesResponse) == null ? void 0 : _chart$queriesRespons2[0]) != null ? _chart$queriesRespons : {};\n          const numericColumns = Array.isArray(colnames) && Array.isArray(coltypes) ?\n          colnames.\n          filter((colname, index) => coltypes[index] === GenericDataType.NUMERIC).\n          map((colname) => {var _verboseMap$colname;return {\n              value: colname,\n              label: (_verboseMap$colname = verboseMap[colname]) != null ? _verboseMap$colname : colname };}) :\n\n          [];\n          return {\n            columnOptions: numericColumns,\n            verboseMap };\n\n        } } }]] }],\n\n\n\n\n\n\n  controlOverrides: {\n    y_axis_format: {\n      label: t('Number format') } },\n\n\n  formDataOverrides: (formData) => ({\n    ...formData,\n    metric: getStandardizedControls().shiftMetric() }) };export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(_default, \"default\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-echarts/src/BigNumber/BigNumberTotal/controlPanel.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"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","names":["GenericDataType","smartDateFormatter","t","D3_FORMAT_DOCS","D3_TIME_FORMAT_OPTIONS","getStandardizedControls","sections","headerFontSize","subheaderFontSize","controlPanelSections","legacyRegularTime","label","expanded","controlSetRows","tabOverride","name","config","type","renderTrigger","description","freeForm","choices","default","id","shouldMapStateToProps","mapStateToProps","explore","_","chart","verboseMap","datasource","hasOwnProperty","verbose_map","columns","colnames","coltypes","queriesResponse","numericColumns","Array","isArray","filter","colname","index","NUMERIC","map","value","columnOptions","controlOverrides","y_axis_format","formDataOverrides","formData","metric","shiftMetric"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-echarts/src/BigNumber/BigNumberTotal/controlPanel.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { GenericDataType, smartDateFormatter, t } from '@superset-ui/core';\nimport {\n  ControlPanelConfig,\n  D3_FORMAT_DOCS,\n  D3_TIME_FORMAT_OPTIONS,\n  Dataset,\n  getStandardizedControls,\n  sections,\n} from '@superset-ui/chart-controls';\nimport { headerFontSize, subheaderFontSize } from '../sharedControls';\n\nexport default {\n  controlPanelSections: [\n    sections.legacyRegularTime,\n    {\n      label: t('Query'),\n      expanded: true,\n      controlSetRows: [['metric'], ['adhoc_filters']],\n    },\n    {\n      label: t('Display settings'),\n      expanded: true,\n      tabOverride: 'data',\n      controlSetRows: [\n        [\n          {\n            name: 'subheader',\n            config: {\n              type: 'TextControl',\n              label: t('Subheader'),\n              renderTrigger: true,\n              description: t(\n                'Description text that shows up below your Big Number',\n              ),\n            },\n          },\n        ],\n      ],\n    },\n    {\n      label: t('Chart Options'),\n      expanded: true,\n      controlSetRows: [\n        [headerFontSize],\n        [subheaderFontSize],\n        ['y_axis_format'],\n        [\n          {\n            name: 'time_format',\n            config: {\n              type: 'SelectControl',\n              freeForm: true,\n              label: t('Date format'),\n              renderTrigger: true,\n              choices: D3_TIME_FORMAT_OPTIONS,\n              description: D3_FORMAT_DOCS,\n              default: smartDateFormatter.id,\n            },\n          },\n        ],\n        [\n          {\n            name: 'force_timestamp_formatting',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Force date format'),\n              renderTrigger: true,\n              default: false,\n              description: t(\n                'Use date formatting even when metric value is not a timestamp',\n              ),\n            },\n          },\n        ],\n        [\n          {\n            name: 'conditional_formatting',\n            config: {\n              type: 'ConditionalFormattingControl',\n              renderTrigger: true,\n              label: t('Conditional Formatting'),\n              description: t('Apply conditional color formatting to metric'),\n              shouldMapStateToProps() {\n                return true;\n              },\n              mapStateToProps(explore, _, chart) {\n                const verboseMap = explore?.datasource?.hasOwnProperty(\n                  'verbose_map',\n                )\n                  ? (explore?.datasource as Dataset)?.verbose_map\n                  : explore?.datasource?.columns ?? {};\n                const { colnames, coltypes } =\n                  chart?.queriesResponse?.[0] ?? {};\n                const numericColumns =\n                  Array.isArray(colnames) && Array.isArray(coltypes)\n                    ? colnames\n                        .filter(\n                          (colname: string, index: number) =>\n                            coltypes[index] === GenericDataType.NUMERIC,\n                        )\n                        .map(colname => ({\n                          value: colname,\n                          label: verboseMap[colname] ?? colname,\n                        }))\n                    : [];\n                return {\n                  columnOptions: numericColumns,\n                  verboseMap,\n                };\n              },\n            },\n          },\n        ],\n      ],\n    },\n  ],\n  controlOverrides: {\n    y_axis_format: {\n      label: t('Number format'),\n    },\n  },\n  formDataOverrides: formData => ({\n    ...formData,\n    metric: getStandardizedControls().shiftMetric(),\n  }),\n} as ControlPanelConfig;\n"]},"metadata":{},"sourceType":"module"}