{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint camelcase: 0 */\nimport { getChartControlPanelRegistry } from '@superset-ui/core';\nimport { getAllControlsState, getFormDataFromControls } from './controlUtils';\nimport { controls } from './controls';\n\nfunction handleDeprecatedControls(formData) {\n  // Reaffectation / handling of deprecated controls\n  /* eslint-disable no-param-reassign */\n\n  // y_axis_zero was a boolean forcing 0 to be part of the Y Axis\n  if (formData.y_axis_zero) {\n    formData.y_axis_bounds = [0, null];\n  }\n}\n\nexport function getControlsState(state, inputFormData) {var _state$common;\n  /*\n   * Gets a new controls object to put in the state. The controls object\n   * is similar to the configuration control with only the controls\n   * related to the current viz_type, materializes mapStateToProps functions,\n   * adds value keys coming from inputFormData passed here. This can't be an action creator\n   * just yet because it's used in both the explore and dashboard views.\n   * */\n  // Getting a list of active control names for the current viz\n  const formData = { ...inputFormData };\n  const vizType =\n  formData.viz_type || ((_state$common = state.common) == null ? void 0 : _state$common.conf.DEFAULT_VIZ_TYPE) || 'table';\n\n  handleDeprecatedControls(formData);\n  const controlsState = getAllControlsState(\n  vizType,\n  state.datasource.type,\n  state,\n  formData);\n\n\n  const controlPanelConfig = getChartControlPanelRegistry().get(vizType) || {};\n  if (controlPanelConfig.onInit) {\n    return controlPanelConfig.onInit(controlsState);\n  }\n\n  return controlsState;\n}\n\nexport function applyDefaultFormData(inputFormData) {\n  const datasourceType = inputFormData.datasource.split('__')[1];\n  const vizType = inputFormData.viz_type;\n  const controlsState = getAllControlsState(\n  vizType,\n  datasourceType,\n  null,\n  inputFormData);\n\n  const controlFormData = getFormDataFromControls(controlsState);\n\n  const formData = {};\n  Object.keys(controlsState).\n  concat(Object.keys(inputFormData)).\n  forEach((controlName) => {\n    if (inputFormData[controlName] === undefined) {\n      formData[controlName] = controlFormData[controlName];\n    } else {\n      formData[controlName] = inputFormData[controlName];\n    }\n  });\n\n  return formData;\n}\n\nconst defaultControls = { ...controls };\nObject.keys(controls).forEach((f) => {\n  defaultControls[f].value = controls[f].default;\n});\n\nconst defaultState = {\n  controls: defaultControls,\n  form_data: getFormDataFromControls(defaultControls) };\n\n\nexport { defaultControls, defaultState };","map":{"version":3,"names":["getChartControlPanelRegistry","getAllControlsState","getFormDataFromControls","controls","handleDeprecatedControls","formData","y_axis_zero","y_axis_bounds","getControlsState","state","inputFormData","vizType","viz_type","common","conf","DEFAULT_VIZ_TYPE","controlsState","datasource","type","controlPanelConfig","get","onInit","applyDefaultFormData","datasourceType","split","controlFormData","Object","keys","concat","forEach","controlName","undefined","defaultControls","f","value","default","defaultState","form_data"],"sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/store.js"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint camelcase: 0 */\nimport { getChartControlPanelRegistry } from '@superset-ui/core';\nimport { getAllControlsState, getFormDataFromControls } from './controlUtils';\nimport { controls } from './controls';\n\nfunction handleDeprecatedControls(formData) {\n  // Reaffectation / handling of deprecated controls\n  /* eslint-disable no-param-reassign */\n\n  // y_axis_zero was a boolean forcing 0 to be part of the Y Axis\n  if (formData.y_axis_zero) {\n    formData.y_axis_bounds = [0, null];\n  }\n}\n\nexport function getControlsState(state, inputFormData) {\n  /*\n   * Gets a new controls object to put in the state. The controls object\n   * is similar to the configuration control with only the controls\n   * related to the current viz_type, materializes mapStateToProps functions,\n   * adds value keys coming from inputFormData passed here. This can't be an action creator\n   * just yet because it's used in both the explore and dashboard views.\n   * */\n  // Getting a list of active control names for the current viz\n  const formData = { ...inputFormData };\n  const vizType =\n    formData.viz_type || state.common?.conf.DEFAULT_VIZ_TYPE || 'table';\n\n  handleDeprecatedControls(formData);\n  const controlsState = getAllControlsState(\n    vizType,\n    state.datasource.type,\n    state,\n    formData,\n  );\n\n  const controlPanelConfig = getChartControlPanelRegistry().get(vizType) || {};\n  if (controlPanelConfig.onInit) {\n    return controlPanelConfig.onInit(controlsState);\n  }\n\n  return controlsState;\n}\n\nexport function applyDefaultFormData(inputFormData) {\n  const datasourceType = inputFormData.datasource.split('__')[1];\n  const vizType = inputFormData.viz_type;\n  const controlsState = getAllControlsState(\n    vizType,\n    datasourceType,\n    null,\n    inputFormData,\n  );\n  const controlFormData = getFormDataFromControls(controlsState);\n\n  const formData = {};\n  Object.keys(controlsState)\n    .concat(Object.keys(inputFormData))\n    .forEach(controlName => {\n      if (inputFormData[controlName] === undefined) {\n        formData[controlName] = controlFormData[controlName];\n      } else {\n        formData[controlName] = inputFormData[controlName];\n      }\n    });\n\n  return formData;\n}\n\nconst defaultControls = { ...controls };\nObject.keys(controls).forEach(f => {\n  defaultControls[f].value = controls[f].default;\n});\n\nconst defaultState = {\n  controls: defaultControls,\n  form_data: getFormDataFromControls(defaultControls),\n};\n\nexport { defaultControls, defaultState };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,4BAAT,QAA6C,mBAA7C;AACA,SAASC,mBAAT,EAA8BC,uBAA9B,QAA6D,gBAA7D;AACA,SAASC,QAAT,QAAyB,YAAzB;;AAEA,SAASC,wBAAT,CAAkCC,QAAlC,EAA4C;EAC1C;EACA;;EAEA;EACA,IAAIA,QAAQ,CAACC,WAAb,EAA0B;IACxBD,QAAQ,CAACE,aAAT,GAAyB,CAAC,CAAD,EAAI,IAAJ,CAAzB;EACD;AACF;;AAED,OAAO,SAASC,gBAAT,CAA0BC,KAA1B,EAAiCC,aAAjC,EAAgD;EACrD;AACF;AACA;AACA;AACA;AACA;AACA;EACE;EACA,MAAML,QAAQ,GAAG,EAAE,GAAGK,aAAL,EAAjB;EACA,MAAMC,OAAO;EACXN,QAAQ,CAACO,QAAT,sBAAqBH,KAAK,CAACI,MAA3B,qBAAqB,cAAcC,IAAd,CAAmBC,gBAAxC,KAA4D,OAD9D;;EAGAX,wBAAwB,CAACC,QAAD,CAAxB;EACA,MAAMW,aAAa,GAAGf,mBAAmB;EACvCU,OADuC;EAEvCF,KAAK,CAACQ,UAAN,CAAiBC,IAFsB;EAGvCT,KAHuC;EAIvCJ,QAJuC,CAAzC;;;EAOA,MAAMc,kBAAkB,GAAGnB,4BAA4B,GAAGoB,GAA/B,CAAmCT,OAAnC,KAA+C,EAA1E;EACA,IAAIQ,kBAAkB,CAACE,MAAvB,EAA+B;IAC7B,OAAOF,kBAAkB,CAACE,MAAnB,CAA0BL,aAA1B,CAAP;EACD;;EAED,OAAOA,aAAP;AACD;;AAED,OAAO,SAASM,oBAAT,CAA8BZ,aAA9B,EAA6C;EAClD,MAAMa,cAAc,GAAGb,aAAa,CAACO,UAAd,CAAyBO,KAAzB,CAA+B,IAA/B,EAAqC,CAArC,CAAvB;EACA,MAAMb,OAAO,GAAGD,aAAa,CAACE,QAA9B;EACA,MAAMI,aAAa,GAAGf,mBAAmB;EACvCU,OADuC;EAEvCY,cAFuC;EAGvC,IAHuC;EAIvCb,aAJuC,CAAzC;;EAMA,MAAMe,eAAe,GAAGvB,uBAAuB,CAACc,aAAD,CAA/C;;EAEA,MAAMX,QAAQ,GAAG,EAAjB;EACAqB,MAAM,CAACC,IAAP,CAAYX,aAAZ;EACGY,MADH,CACUF,MAAM,CAACC,IAAP,CAAYjB,aAAZ,CADV;EAEGmB,OAFH,CAEW,CAAAC,WAAW,KAAI;IACtB,IAAIpB,aAAa,CAACoB,WAAD,CAAb,KAA+BC,SAAnC,EAA8C;MAC5C1B,QAAQ,CAACyB,WAAD,CAAR,GAAwBL,eAAe,CAACK,WAAD,CAAvC;IACD,CAFD,MAEO;MACLzB,QAAQ,CAACyB,WAAD,CAAR,GAAwBpB,aAAa,CAACoB,WAAD,CAArC;IACD;EACF,CARH;;EAUA,OAAOzB,QAAP;AACD;;AAED,MAAM2B,eAAe,GAAG,EAAE,GAAG7B,QAAL,EAAxB;AACAuB,MAAM,CAACC,IAAP,CAAYxB,QAAZ,EAAsB0B,OAAtB,CAA8B,CAAAI,CAAC,KAAI;EACjCD,eAAe,CAACC,CAAD,CAAf,CAAmBC,KAAnB,GAA2B/B,QAAQ,CAAC8B,CAAD,CAAR,CAAYE,OAAvC;AACD,CAFD;;AAIA,MAAMC,YAAY,GAAG;EACnBjC,QAAQ,EAAE6B,eADS;EAEnBK,SAAS,EAAEnC,uBAAuB,CAAC8B,eAAD,CAFf,EAArB;;;AAKA,SAASA,eAAT,EAA0BI,YAA1B"},"metadata":{},"sourceType":"module"}