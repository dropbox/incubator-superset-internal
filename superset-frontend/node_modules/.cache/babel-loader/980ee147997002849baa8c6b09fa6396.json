{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useRef, useEffect } from 'react';\nimport { FixedSizeList as WindowedList } from 'react-window';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst DEFAULT_OPTION_HEIGHT = 30;\n/**\n * Get the index of the last selected option.\n */\nfunction getLastSelected(children) {\n  return Array.isArray(children) ?\n  children.findIndex((_ref) => {let { props: { isFocused = false } = {} } = _ref;return isFocused;}) || 0 :\n  -1;\n}\n/**\n * Calculate probable option height as set in theme configs\n */\nfunction detectHeight(_ref2) {let { spacing: { baseUnit, lineHeight } } = _ref2;\n  // Option item expects 2 * baseUnit for each of top and bottom padding.\n  return baseUnit * 4 + lineHeight;\n}\nexport default function WindowedMenuList(_ref3) {let { children, ...props } = _ref3;\n  const { maxHeight, selectProps, theme, getStyles, cx, innerRef, isMulti, className } = props;\n  const {\n    // Expose react-window VariableSizeList instance and HTML elements\n    windowListRef: windowListRef_, windowListInnerRef } = selectProps;\n  const defaultWindowListRef = useRef(null);\n  const windowListRef = windowListRef_ || defaultWindowListRef;\n  // try get default option height from theme configs\n  let { optionHeight } = selectProps;\n  if (!optionHeight) {\n    optionHeight = theme ? detectHeight(theme) : DEFAULT_OPTION_HEIGHT;\n  }\n  const itemCount = children.length;\n  const totalHeight = optionHeight * itemCount;\n  const Row = (_ref4) => {let { data, index, style } = _ref4;return ___EmotionJSX(\"div\", { style: style }, data[index]);};\n  useEffect(() => {\n    const lastSelected = getLastSelected(children);\n    if (windowListRef.current && lastSelected) {\n      windowListRef.current.scrollToItem(lastSelected);\n    }\n  }, [children, windowListRef]);\n  return ___EmotionJSX(WindowedList, { css: getStyles('menuList', props), className: cx({\n      'menu-list': true,\n      'menu-list--is-multi': isMulti },\n    className), ref: windowListRef, outerRef: innerRef, innerRef: windowListInnerRef, height: Math.min(totalHeight, maxHeight), width: \"100%\", itemData: children, itemCount: children.length, itemSize: optionHeight },\n  Row);\n\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,KAAP,IACEC,MADF,EAEEC,SAFF,QAOO,OAPP;AAQA,SAEEC,aAAa,IAAIC,YAFnB,QAGO,cAHP,C;AA4CA,MAAMC,qBAAqB,GAAG,EAA9B;AAEA;;;AAGA,SAASC,eAAT,CAAyBC,QAAzB,EAA6D;EAC3D,OAAOC,KAAK,CAACC,OAAN,CAAcF,QAAd;EACHA,QAAQ,CAACG,SAAT,CACE,eAAC,EAAEC,KAAK,EAAE,EAAEC,SAAS,GAAG,KAAd,KAAwB,EAAjC,EAAD,eAA2CA,SAA3C,EADF,KAEK,CAHF;EAIH,CAAC,CAJL;AAKD;AAED;;;AAGA,SAASC,YAAT,QAAwE,KAAlD,EAAEC,OAAO,EAAE,EAAEC,QAAF,EAAYC,UAAZ,EAAX,EAAkD;EACtE;EACA,OAAOD,QAAQ,GAAG,CAAX,GAAeC,UAAtB;AACD;AAED,eAAc,SAAUC,gBAAV,QAGc,KAHgD,EAC1EV,QAD0E,EAE1E,GAAGI,KAFuE,EAGhD;EAC1B,MAAM,EACJO,SADI,EAEJC,WAFI,EAGJC,KAHI,EAIJC,SAJI,EAKJC,EALI,EAMJC,QANI,EAOJC,OAPI,EAQJC,SARI,KASFd,KATJ;EAUA,MAAM;IACJ;IACAe,aAAa,EAAEC,cAFX,EAGJC,kBAHI,KAIFT,WAJJ;EAKA,MAAMU,oBAAoB,GAAG5B,MAAM,CAAe,IAAf,CAAnC;EACA,MAAMyB,aAAa,GAAGC,cAAc,IAAIE,oBAAxC;EAEA;EACA,IAAI,EAAEC,YAAF,KAAmBX,WAAvB;EACA,IAAI,CAACW,YAAL,EAAmB;IACjBA,YAAY,GAAGV,KAAK,GAAGP,YAAY,CAACO,KAAD,CAAf,GAAyBf,qBAA7C;EACD;EAED,MAAM0B,SAAS,GAAGxB,QAAQ,CAACyB,MAA3B;EACA,MAAMC,WAAW,GAAGH,YAAY,GAAGC,SAAnC;EAEA,MAAMG,GAAG,GAA+C,gBAAC,EACvDC,IADuD,EAEvDC,KAFuD,EAGvDC,KAHuD,EAAD,gBAIlD,uBAAK,KAAK,EAAEA,KAAZ,IAAoBF,IAAI,CAACC,KAAD,CAAxB,CAJkD,EAAxD;EAMAlC,SAAS,CAAC,MAAK;IACb,MAAMoC,YAAY,GAAGhC,eAAe,CAACC,QAAD,CAApC;IACA,IAAImB,aAAa,CAACa,OAAd,IAAyBD,YAA7B,EAA2C;MACzCZ,aAAa,CAACa,OAAd,CAAsBC,YAAtB,CAAmCF,YAAnC;IACD;EACF,CALQ,EAKN,CAAC/B,QAAD,EAAWmB,aAAX,CALM,CAAT;EAOA,OACE,cAAC,YAAD,IACE,GAAG,EAAEL,SAAS,CAAC,UAAD,EAAaV,KAAb,CADhB,EAEE,SAAS,EAAEW,EAAE,CACX;MACE,aAAa,IADf;MAEE,uBAAuBE,OAFzB,EADW;IAKXC,SALW,CAFf,EASE,GAAG,EAAEC,aATP,EAUE,QAAQ,EAAEH,QAVZ,EAWE,QAAQ,EAAEK,kBAXZ,EAYE,MAAM,EAAEa,IAAI,CAACC,GAAL,CAAST,WAAT,EAAsBf,SAAtB,CAZV,EAaE,KAAK,EAAC,MAbR,EAcE,QAAQ,EAAEX,QAdZ,EAeE,SAAS,EAAEA,QAAQ,CAACyB,MAftB,EAgBE,QAAQ,EAAEF,YAhBZ;EAkBGI,GAlBH,CADF;;AAsBD","names":["React","useRef","useEffect","FixedSizeList","WindowedList","DEFAULT_OPTION_HEIGHT","getLastSelected","children","Array","isArray","findIndex","props","isFocused","detectHeight","spacing","baseUnit","lineHeight","WindowedMenuList","maxHeight","selectProps","theme","getStyles","cx","innerRef","isMulti","className","windowListRef","windowListRef_","windowListInnerRef","defaultWindowListRef","optionHeight","itemCount","length","totalHeight","Row","data","index","style","lastSelected","current","scrollToItem","Math","min"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/components/DeprecatedSelect/WindowedSelect/WindowedMenuList.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, {\n  useRef,\n  useEffect,\n  Component,\n  FunctionComponent,\n  ReactElement,\n  RefObject,\n} from 'react';\nimport {\n  ListChildComponentProps,\n  FixedSizeList as WindowedList,\n} from 'react-window';\nimport {\n  OptionTypeBase,\n  OptionProps,\n  MenuListComponentProps,\n} from 'react-select';\nimport { ThemeConfig } from '../styles';\n\nexport type WindowedMenuListProps = {\n  selectProps: {\n    windowListRef?: RefObject<WindowedList>;\n    optionHeight?: number;\n  };\n};\n\n/**\n * MenuListComponentProps should always have `children` elements, as guaranteed\n * by https://github.com/JedWatson/react-select/blob/32ad5c040bdd96cd1ca71010c2558842d684629c/packages/react-select/src/Select.js#L1686-L1719\n *\n * `children` may also be `Component<NoticeProps<OptionType>>` if options are not\n * provided (e.g., when async list is still loading, or no results), but that's\n * not possible because this MenuList will only be rendered when\n * optionsLength > windowThreshold.\n *\n * If may also be `Component<GroupProps<OptionType>>[]` but we are not supporting\n * grouped options just yet.\n */\n\ntype MenuListPropsChildren<OptionType extends OptionTypeBase> =\n  | Component<OptionProps<OptionType>>[]\n  | ReactElement[];\n\nexport type MenuListProps<OptionType extends OptionTypeBase> =\n  MenuListComponentProps<OptionType> & {\n    children: MenuListPropsChildren<OptionType>;\n    // theme is not present with built-in @types/react-select, but is actually\n    // available via CommonProps.\n    theme?: ThemeConfig;\n    className?: string;\n  } & WindowedMenuListProps;\n\nconst DEFAULT_OPTION_HEIGHT = 30;\n\n/**\n * Get the index of the last selected option.\n */\nfunction getLastSelected(children: MenuListPropsChildren<any>) {\n  return Array.isArray(children)\n    ? children.findIndex(\n        ({ props: { isFocused = false } = {} }) => isFocused,\n      ) || 0\n    : -1;\n}\n\n/**\n * Calculate probable option height as set in theme configs\n */\nfunction detectHeight({ spacing: { baseUnit, lineHeight } }: ThemeConfig) {\n  // Option item expects 2 * baseUnit for each of top and bottom padding.\n  return baseUnit * 4 + lineHeight;\n}\n\nexport default function WindowedMenuList<OptionType extends OptionTypeBase>({\n  children,\n  ...props\n}: MenuListProps<OptionType>) {\n  const {\n    maxHeight,\n    selectProps,\n    theme,\n    getStyles,\n    cx,\n    innerRef,\n    isMulti,\n    className,\n  } = props;\n  const {\n    // Expose react-window VariableSizeList instance and HTML elements\n    windowListRef: windowListRef_,\n    windowListInnerRef,\n  } = selectProps;\n  const defaultWindowListRef = useRef<WindowedList>(null);\n  const windowListRef = windowListRef_ || defaultWindowListRef;\n\n  // try get default option height from theme configs\n  let { optionHeight } = selectProps;\n  if (!optionHeight) {\n    optionHeight = theme ? detectHeight(theme) : DEFAULT_OPTION_HEIGHT;\n  }\n\n  const itemCount = children.length;\n  const totalHeight = optionHeight * itemCount;\n\n  const Row: FunctionComponent<ListChildComponentProps> = ({\n    data,\n    index,\n    style,\n  }) => <div style={style}>{data[index]}</div>;\n\n  useEffect(() => {\n    const lastSelected = getLastSelected(children);\n    if (windowListRef.current && lastSelected) {\n      windowListRef.current.scrollToItem(lastSelected);\n    }\n  }, [children, windowListRef]);\n\n  return (\n    <WindowedList\n      css={getStyles('menuList', props)}\n      className={cx(\n        {\n          'menu-list': true,\n          'menu-list--is-multi': isMulti,\n        },\n        className,\n      )}\n      ref={windowListRef}\n      outerRef={innerRef}\n      innerRef={windowListInnerRef}\n      height={Math.min(totalHeight, maxHeight)}\n      width=\"100%\"\n      itemData={children}\n      itemCount={children.length}\n      itemSize={optionHeight}\n    >\n      {Row}\n    </WindowedList>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}