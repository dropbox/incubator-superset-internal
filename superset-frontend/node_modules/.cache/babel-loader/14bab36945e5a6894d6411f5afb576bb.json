{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\n\nimport { getDashboardFilterKey } from './getDashboardFilterKey';\nimport { ALL_FILTERS_ROOT } from './constants';\nimport { DASHBOARD_ROOT_TYPE } from './componentTypes';\n\nexport default function getFilterFieldNodesTree(_ref) {let { dashboardFilters = {} } = _ref;\n  const allFilters = Object.values(dashboardFilters).map((dashboardFilter) => {\n    const { chartId, filterName, columns, labels } = dashboardFilter;\n    const children = Object.keys(columns).map((column) => ({\n      value: getDashboardFilterKey({ chartId, column }),\n      label: labels[column] || column }));\n\n    return {\n      value: chartId,\n      label: filterName,\n      children,\n      showCheckbox: true };\n\n  });\n\n  return [\n  {\n    value: ALL_FILTERS_ROOT,\n    type: DASHBOARD_ROOT_TYPE,\n    label: t('All filters'),\n    children: allFilters }];\n\n\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(getFilterFieldNodesTree, \"getFilterFieldNodesTree\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/util/getFilterFieldNodesTree.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["t","getDashboardFilterKey","ALL_FILTERS_ROOT","DASHBOARD_ROOT_TYPE","getFilterFieldNodesTree","dashboardFilters","allFilters","Object","values","map","dashboardFilter","chartId","filterName","columns","labels","children","keys","column","value","label","showCheckbox","type"],"sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/util/getFilterFieldNodesTree.js"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\n\nimport { getDashboardFilterKey } from './getDashboardFilterKey';\nimport { ALL_FILTERS_ROOT } from './constants';\nimport { DASHBOARD_ROOT_TYPE } from './componentTypes';\n\nexport default function getFilterFieldNodesTree({ dashboardFilters = {} }) {\n  const allFilters = Object.values(dashboardFilters).map(dashboardFilter => {\n    const { chartId, filterName, columns, labels } = dashboardFilter;\n    const children = Object.keys(columns).map(column => ({\n      value: getDashboardFilterKey({ chartId, column }),\n      label: labels[column] || column,\n    }));\n    return {\n      value: chartId,\n      label: filterName,\n      children,\n      showCheckbox: true,\n    };\n  });\n\n  return [\n    {\n      value: ALL_FILTERS_ROOT,\n      type: DASHBOARD_ROOT_TYPE,\n      label: t('All filters'),\n      children: allFilters,\n    },\n  ];\n}\n"],"mappings":"wSAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,CAAT,QAAkB,mBAAlB;;AAEA,SAASC,qBAAT,QAAsC,yBAAtC;AACA,SAASC,gBAAT,QAAiC,aAAjC;AACA,SAASC,mBAAT,QAAoC,kBAApC;;AAEA,eAAe,SAASC,uBAAT,OAA4D,KAA3B,EAAEC,gBAAgB,GAAG,EAArB,EAA2B;EACzE,MAAMC,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAcH,gBAAd,EAAgCI,GAAhC,CAAoC,CAAAC,eAAe,KAAI;IACxE,MAAM,EAAEC,OAAF,EAAWC,UAAX,EAAuBC,OAAvB,EAAgCC,MAAhC,KAA2CJ,eAAjD;IACA,MAAMK,QAAQ,GAAGR,MAAM,CAACS,IAAP,CAAYH,OAAZ,EAAqBJ,GAArB,CAAyB,CAAAQ,MAAM,MAAK;MACnDC,KAAK,EAAEjB,qBAAqB,CAAC,EAAEU,OAAF,EAAWM,MAAX,EAAD,CADuB;MAEnDE,KAAK,EAAEL,MAAM,CAACG,MAAD,CAAN,IAAkBA,MAF0B,EAAL,CAA/B,CAAjB;;IAIA,OAAO;MACLC,KAAK,EAAEP,OADF;MAELQ,KAAK,EAAEP,UAFF;MAGLG,QAHK;MAILK,YAAY,EAAE,IAJT,EAAP;;EAMD,CAZkB,CAAnB;;EAcA,OAAO;EACL;IACEF,KAAK,EAAEhB,gBADT;IAEEmB,IAAI,EAAElB,mBAFR;IAGEgB,KAAK,EAAEnB,CAAC,CAAC,aAAD,CAHV;IAIEe,QAAQ,EAAET,UAJZ,EADK,CAAP;;;AAQD,C,iLAvBuBF,uB"},"metadata":{},"sourceType":"module"}