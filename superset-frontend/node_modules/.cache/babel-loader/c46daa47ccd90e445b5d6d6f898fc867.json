{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint camelcase: 0 */\nimport rison from 'rison';\nimport { t, SupersetClient } from '@superset-ui/core';\nimport { addDangerToast, toastActions } from 'src/components/MessageToasts/actions';\nexport const UPDATE_FORM_DATA_BY_DATASOURCE = 'UPDATE_FORM_DATA_BY_DATASOURCE';\nexport function updateFormDataByDatasource(prevDatasource, newDatasource) {\n  return {\n    type: UPDATE_FORM_DATA_BY_DATASOURCE,\n    prevDatasource,\n    newDatasource };\n\n}\nexport const POST_DATASOURCE_STARTED = 'POST_DATASOURCE_STARTED';\nexport const FETCH_DATASOURCE_SUCCEEDED = 'FETCH_DATASOURCE_SUCCEEDED';\nexport function fetchDatasourceSucceeded() {\n  return { type: FETCH_DATASOURCE_SUCCEEDED };\n}\nexport const FETCH_DATASOURCES_STARTED = 'FETCH_DATASOURCES_STARTED';\nexport function fetchDatasourcesStarted() {\n  return { type: FETCH_DATASOURCES_STARTED };\n}\nexport const FETCH_DATASOURCES_SUCCEEDED = 'FETCH_DATASOURCES_SUCCEEDED';\nexport function fetchDatasourcesSucceeded() {\n  return { type: FETCH_DATASOURCES_SUCCEEDED };\n}\nexport const TOGGLE_FAVE_STAR = 'TOGGLE_FAVE_STAR';\nexport function toggleFaveStar(isStarred) {\n  return { type: TOGGLE_FAVE_STAR, isStarred };\n}\nexport const FETCH_FAVE_STAR = 'FETCH_FAVE_STAR';\nexport function fetchFaveStar(sliceId) {\n  return function (dispatch) {\n    SupersetClient.get({\n      endpoint: `/api/v1/chart/favorite_status/?q=${rison.encode([sliceId])}` }).\n    then((_ref) => {var _json$result, _json$result$;let { json } = _ref;\n      dispatch(toggleFaveStar(!!(json != null && (_json$result = json.result) != null && (_json$result$ = _json$result[0]) != null && _json$result$.value)));\n    });\n  };\n}\nexport const SAVE_FAVE_STAR = 'SAVE_FAVE_STAR';\nexport function saveFaveStar(sliceId, isStarred) {\n  return function (dispatch) {\n    const endpoint = `/api/v1/chart/${sliceId}/favorites/`;\n    const apiCall = isStarred ?\n    SupersetClient.delete({\n      endpoint }) :\n\n    SupersetClient.post({ endpoint });\n    apiCall.\n    then(() => dispatch(toggleFaveStar(!isStarred))).\n    catch(() => {\n      dispatch(addDangerToast(t('An error occurred while starring this chart')));\n    });\n  };\n}\nexport const SET_FIELD_VALUE = 'SET_FIELD_VALUE';\nexport function setControlValue(controlName, value, validationErrors) {\n  return { type: SET_FIELD_VALUE, controlName, value, validationErrors };\n}\nexport const SET_EXPLORE_CONTROLS = 'UPDATE_EXPLORE_CONTROLS';\nexport function setExploreControls(formData) {\n  return { type: SET_EXPLORE_CONTROLS, formData };\n}\nexport const SET_FORM_DATA = 'UPDATE_FORM_DATA';\nexport function setFormData(formData) {\n  return { type: SET_FORM_DATA, formData };\n}\nexport const UPDATE_CHART_TITLE = 'UPDATE_CHART_TITLE';\nexport function updateChartTitle(sliceName) {\n  return { type: UPDATE_CHART_TITLE, sliceName };\n}\nexport const SET_SAVE_ACTION = 'SET_SAVE_ACTION';\nexport function setSaveAction(saveAction) {\n  return { type: SET_SAVE_ACTION, saveAction };\n}\nexport const CREATE_NEW_SLICE = 'CREATE_NEW_SLICE';\nexport function createNewSlice(can_add, can_download, can_overwrite, slice, form_data) {\n  return {\n    type: CREATE_NEW_SLICE,\n    can_add,\n    can_download,\n    can_overwrite,\n    slice,\n    form_data };\n\n}\nexport const SLICE_UPDATED = 'SLICE_UPDATED';\nexport function sliceUpdated(slice) {\n  return { type: SLICE_UPDATED, slice };\n}\nexport const SET_FORCE_QUERY = 'SET_FORCE_QUERY';\nexport function setForceQuery(force) {\n  return {\n    type: SET_FORCE_QUERY,\n    force };\n\n}\nexport const exploreActions = {\n  ...toastActions,\n  fetchDatasourcesStarted,\n  fetchDatasourcesSucceeded,\n  toggleFaveStar,\n  fetchFaveStar,\n  saveFaveStar,\n  setControlValue,\n  setExploreControls,\n  updateChartTitle,\n  createNewSlice,\n  sliceUpdated,\n  setForceQuery };","map":{"version":3,"mappings":"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","names":["rison","t","SupersetClient","addDangerToast","toastActions","UPDATE_FORM_DATA_BY_DATASOURCE","updateFormDataByDatasource","prevDatasource","newDatasource","type","POST_DATASOURCE_STARTED","FETCH_DATASOURCE_SUCCEEDED","fetchDatasourceSucceeded","FETCH_DATASOURCES_STARTED","fetchDatasourcesStarted","FETCH_DATASOURCES_SUCCEEDED","fetchDatasourcesSucceeded","TOGGLE_FAVE_STAR","toggleFaveStar","isStarred","FETCH_FAVE_STAR","fetchFaveStar","sliceId","dispatch","get","endpoint","encode","then","json","result","value","SAVE_FAVE_STAR","saveFaveStar","apiCall","delete","post","catch","SET_FIELD_VALUE","setControlValue","controlName","validationErrors","SET_EXPLORE_CONTROLS","setExploreControls","formData","SET_FORM_DATA","setFormData","UPDATE_CHART_TITLE","updateChartTitle","sliceName","SET_SAVE_ACTION","setSaveAction","saveAction","CREATE_NEW_SLICE","createNewSlice","can_add","can_download","can_overwrite","slice","form_data","SLICE_UPDATED","sliceUpdated","SET_FORCE_QUERY","setForceQuery","force","exploreActions"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/actions/exploreActions.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint camelcase: 0 */\nimport rison from 'rison';\nimport { Dataset } from '@superset-ui/chart-controls';\nimport { t, SupersetClient, QueryFormData } from '@superset-ui/core';\nimport { Dispatch } from 'redux';\nimport {\n  addDangerToast,\n  toastActions,\n} from 'src/components/MessageToasts/actions';\nimport { Slice } from 'src/types/Chart';\nimport { SaveActionType } from 'src/explore/types';\n\nexport const UPDATE_FORM_DATA_BY_DATASOURCE = 'UPDATE_FORM_DATA_BY_DATASOURCE';\nexport function updateFormDataByDatasource(\n  prevDatasource: Dataset,\n  newDatasource: Dataset,\n) {\n  return {\n    type: UPDATE_FORM_DATA_BY_DATASOURCE,\n    prevDatasource,\n    newDatasource,\n  };\n}\n\nexport const POST_DATASOURCE_STARTED = 'POST_DATASOURCE_STARTED';\nexport const FETCH_DATASOURCE_SUCCEEDED = 'FETCH_DATASOURCE_SUCCEEDED';\nexport function fetchDatasourceSucceeded() {\n  return { type: FETCH_DATASOURCE_SUCCEEDED };\n}\n\nexport const FETCH_DATASOURCES_STARTED = 'FETCH_DATASOURCES_STARTED';\nexport function fetchDatasourcesStarted() {\n  return { type: FETCH_DATASOURCES_STARTED };\n}\n\nexport const FETCH_DATASOURCES_SUCCEEDED = 'FETCH_DATASOURCES_SUCCEEDED';\nexport function fetchDatasourcesSucceeded() {\n  return { type: FETCH_DATASOURCES_SUCCEEDED };\n}\n\nexport const TOGGLE_FAVE_STAR = 'TOGGLE_FAVE_STAR';\nexport function toggleFaveStar(isStarred: boolean) {\n  return { type: TOGGLE_FAVE_STAR, isStarred };\n}\n\nexport const FETCH_FAVE_STAR = 'FETCH_FAVE_STAR';\nexport function fetchFaveStar(sliceId: string) {\n  return function (dispatch: Dispatch) {\n    SupersetClient.get({\n      endpoint: `/api/v1/chart/favorite_status/?q=${rison.encode([sliceId])}`,\n    }).then(({ json }) => {\n      dispatch(toggleFaveStar(!!json?.result?.[0]?.value));\n    });\n  };\n}\n\nexport const SAVE_FAVE_STAR = 'SAVE_FAVE_STAR';\nexport function saveFaveStar(sliceId: string, isStarred: boolean) {\n  return function (dispatch: Dispatch) {\n    const endpoint = `/api/v1/chart/${sliceId}/favorites/`;\n    const apiCall = isStarred\n      ? SupersetClient.delete({\n          endpoint,\n        })\n      : SupersetClient.post({ endpoint });\n\n    apiCall\n      .then(() => dispatch(toggleFaveStar(!isStarred)))\n      .catch(() => {\n        dispatch(\n          addDangerToast(t('An error occurred while starring this chart')),\n        );\n      });\n  };\n}\n\nexport const SET_FIELD_VALUE = 'SET_FIELD_VALUE';\nexport function setControlValue(\n  controlName: string,\n  value: any,\n  validationErrors?: any[],\n) {\n  return { type: SET_FIELD_VALUE, controlName, value, validationErrors };\n}\n\nexport const SET_EXPLORE_CONTROLS = 'UPDATE_EXPLORE_CONTROLS';\nexport function setExploreControls(formData: QueryFormData) {\n  return { type: SET_EXPLORE_CONTROLS, formData };\n}\n\nexport const SET_FORM_DATA = 'UPDATE_FORM_DATA';\nexport function setFormData(formData: QueryFormData) {\n  return { type: SET_FORM_DATA, formData };\n}\n\nexport const UPDATE_CHART_TITLE = 'UPDATE_CHART_TITLE';\nexport function updateChartTitle(sliceName: string) {\n  return { type: UPDATE_CHART_TITLE, sliceName };\n}\n\nexport const SET_SAVE_ACTION = 'SET_SAVE_ACTION';\nexport function setSaveAction(saveAction: SaveActionType | null) {\n  return { type: SET_SAVE_ACTION, saveAction };\n}\n\nexport const CREATE_NEW_SLICE = 'CREATE_NEW_SLICE';\nexport function createNewSlice(\n  can_add: boolean,\n  can_download: boolean,\n  can_overwrite: boolean,\n  slice: Slice,\n  form_data: QueryFormData,\n) {\n  return {\n    type: CREATE_NEW_SLICE,\n    can_add,\n    can_download,\n    can_overwrite,\n    slice,\n    form_data,\n  };\n}\n\nexport const SLICE_UPDATED = 'SLICE_UPDATED';\nexport function sliceUpdated(slice: Slice) {\n  return { type: SLICE_UPDATED, slice };\n}\n\nexport const SET_FORCE_QUERY = 'SET_FORCE_QUERY';\nexport function setForceQuery(force: boolean) {\n  return {\n    type: SET_FORCE_QUERY,\n    force,\n  };\n}\n\nexport const exploreActions = {\n  ...toastActions,\n  fetchDatasourcesStarted,\n  fetchDatasourcesSucceeded,\n  toggleFaveStar,\n  fetchFaveStar,\n  saveFaveStar,\n  setControlValue,\n  setExploreControls,\n  updateChartTitle,\n  createNewSlice,\n  sliceUpdated,\n  setForceQuery,\n};\n\nexport type ExploreActions = typeof exploreActions;\n"]},"metadata":{},"sourceType":"module"}