{"ast":null,"code":"import { URL_PARAMS } from 'src/constants';\nimport { getUrlParam } from 'src/utils/urlUtils';\nimport serializeActiveFilterValues from './serializeActiveFilterValues';\nexport default function getDashboardUrl(_ref) {let { pathname, filters = {}, hash = '', standalone } = _ref;\n  const newSearchParams = new URLSearchParams();\n  // convert flattened { [id_column]: values } object\n  // to nested filter object\n  newSearchParams.set(URL_PARAMS.preselectFilters.name, JSON.stringify(serializeActiveFilterValues(filters)));\n  if (standalone) {\n    newSearchParams.set(URL_PARAMS.standalone.name, standalone.toString());\n  }\n  const dataMaskKey = getUrlParam(URL_PARAMS.nativeFiltersKey);\n  if (dataMaskKey) {\n    newSearchParams.set(URL_PARAMS.nativeFiltersKey.name, dataMaskKey);\n  }\n  const hashSection = hash ? `#${hash}` : '';\n  return `${pathname}?${newSearchParams.toString()}${hashSection}`;\n}","map":{"version":3,"mappings":"AAmBA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,OAAOC,2BAAP,MAAwC,+BAAxC;AAEA,eAAc,SAAUC,eAAV,OAUb,KAVuC,EACtCC,QADsC,EAEtCC,OAAO,GAAG,EAF4B,EAGtCC,IAAI,GAAG,EAH+B,EAItCC,UAJsC,EAUvC;EACC,MAAMC,eAAe,GAAG,IAAIC,eAAJ,EAAxB;EAEA;EACA;EACAD,eAAe,CAACE,GAAhB,CACEV,UAAU,CAACW,gBAAX,CAA4BC,IAD9B,EAEEC,IAAI,CAACC,SAAL,CAAeZ,2BAA2B,CAACG,OAAD,CAA1C,CAFF;EAKA,IAAIE,UAAJ,EAAgB;IACdC,eAAe,CAACE,GAAhB,CAAoBV,UAAU,CAACO,UAAX,CAAsBK,IAA1C,EAAgDL,UAAU,CAACQ,QAAX,EAAhD;EACD;EACD,MAAMC,WAAW,GAAGf,WAAW,CAACD,UAAU,CAACiB,gBAAZ,CAA/B;EACA,IAAID,WAAJ,EAAiB;IACfR,eAAe,CAACE,GAAhB,CACEV,UAAU,CAACiB,gBAAX,CAA4BL,IAD9B,EAEEI,WAFF;EAID;EAED,MAAME,WAAW,GAAGZ,IAAI,GAAG,IAAIA,IAAI,EAAX,GAAgB,EAAxC;EACA,OAAO,GAAGF,QAAQ,IAAII,eAAe,CAACO,QAAhB,EAA0B,GAAGG,WAAW,EAA9D;AACD","names":["URL_PARAMS","getUrlParam","serializeActiveFilterValues","getDashboardUrl","pathname","filters","hash","standalone","newSearchParams","URLSearchParams","set","preselectFilters","name","JSON","stringify","toString","dataMaskKey","nativeFiltersKey","hashSection"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/util/getDashboardUrl.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { JsonObject } from '@superset-ui/core';\nimport { URL_PARAMS } from 'src/constants';\nimport { getUrlParam } from 'src/utils/urlUtils';\nimport serializeActiveFilterValues from './serializeActiveFilterValues';\n\nexport default function getDashboardUrl({\n  pathname,\n  filters = {},\n  hash = '',\n  standalone,\n}: {\n  pathname: string;\n  filters: JsonObject;\n  hash: string;\n  standalone?: number | null;\n}) {\n  const newSearchParams = new URLSearchParams();\n\n  // convert flattened { [id_column]: values } object\n  // to nested filter object\n  newSearchParams.set(\n    URL_PARAMS.preselectFilters.name,\n    JSON.stringify(serializeActiveFilterValues(filters)),\n  );\n\n  if (standalone) {\n    newSearchParams.set(URL_PARAMS.standalone.name, standalone.toString());\n  }\n  const dataMaskKey = getUrlParam(URL_PARAMS.nativeFiltersKey);\n  if (dataMaskKey) {\n    newSearchParams.set(\n      URL_PARAMS.nativeFiltersKey.name,\n      dataMaskKey as string,\n    );\n  }\n\n  const hashSection = hash ? `#${hash}` : '';\n  return `${pathname}?${newSearchParams.toString()}${hashSection}`;\n}\n"]},"metadata":{},"sourceType":"module"}