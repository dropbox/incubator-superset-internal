{"ast":null,"code":"import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useState } from 'react';\nimport moment from 'moment';\nimport { styled, t } from '@superset-ui/core';\nimport { setItem, LocalStorageKeys } from 'src/utils/localStorageHelpers';\nimport { Link } from 'react-router-dom';\nimport ListViewCard from 'src/components/ListViewCard';\nimport { TableTab } from 'src/views/CRUD/types';\nimport { LoadingCards } from 'src/pages/Home';\nimport { CardContainer, CardStyles, getEditedObjects } from 'src/views/CRUD/utils';\nimport Icons from 'src/components/Icons';\nimport SubMenu from './SubMenu';\nimport EmptyState from './EmptyState';\nimport { WelcomeTable } from './types';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst Styles = styled.div`\n  .recentCards {\n    max-height: none;\n    grid-gap: ${(_ref) => {let { theme } = _ref;return `${theme.gridUnit * 4}px`;}};\n  }\n`;\nconst UNTITLED = t('[Untitled]');\nconst UNKNOWN_TIME = t('Unknown');\nconst getEntityTitle = (entity) => {\n  if ('dashboard_title' in entity)\n  return entity.dashboard_title || UNTITLED;\n  if ('slice_name' in entity)\n  return entity.slice_name || UNTITLED;\n  if ('label' in entity)\n  return entity.label || UNTITLED;\n  return entity.item_title || UNTITLED;\n};\nconst getEntityIcon = (entity) => {\n  if ('sql' in entity)\n  return ___EmotionJSX(Icons.Sql, null);\n  const url = 'item_url' in entity ? entity.item_url : entity.url;\n  if (url != null && _includesInstanceProperty(url).call(url, 'dashboard')) {\n    return ___EmotionJSX(Icons.NavDashboard, null);\n  }\n  if (url != null && _includesInstanceProperty(url).call(url, 'explore')) {\n    return ___EmotionJSX(Icons.NavCharts, null);\n  }\n  return null;\n};\nconst getEntityUrl = (entity) => {\n  if ('sql' in entity)\n  return `/superset/sqllab?savedQueryId=${entity.id}`;\n  if ('url' in entity)\n  return entity.url;\n  return entity.item_url;\n};\nconst getEntityLastActionOn = (entity) => {\n  if ('time' in entity) {\n    return t('Viewed %s', moment(entity.time).fromNow());\n  }\n  let time;\n  if ('changed_on' in entity)\n  time = entity.changed_on;\n  if ('changed_on_utc' in entity)\n  time = entity.changed_on_utc;\n  return t('Modified %s', time == null ? UNKNOWN_TIME : moment(time).fromNow());\n};\nexport default function ActivityTable(_ref2) {var _activityData$activeC;let { activeChild, setActiveChild, activityData, user, isFetchingActivityData } = _ref2;\n  const [editedCards, setEditedCards] = useState();\n  const [isFetchingEditedCards, setIsFetchingEditedCards] = useState(false);\n  const getEditedCards = () => {\n    setIsFetchingEditedCards(true);\n    getEditedObjects(user.userId).then((r) => {\n      setEditedCards([...r.editedChart, ...r.editedDash]);\n      setIsFetchingEditedCards(false);\n    });\n  };\n  useEffect(() => {\n    if (activeChild === TableTab.Edited) {\n      getEditedCards();\n    }\n  }, [activeChild]);\n  const tabs = [\n  {\n    name: TableTab.Edited,\n    label: t('Edited'),\n    onClick: () => {\n      setActiveChild(TableTab.Edited);\n      setItem(LocalStorageKeys.homepage_activity_filter, TableTab.Edited);\n    } },\n\n  {\n    name: TableTab.Created,\n    label: t('Created'),\n    onClick: () => {\n      setActiveChild(TableTab.Created);\n      setItem(LocalStorageKeys.homepage_activity_filter, TableTab.Created);\n    } }];\n\n\n  if (activityData != null && activityData[TableTab.Viewed]) {\n    tabs.unshift({\n      name: TableTab.Viewed,\n      label: t('Viewed'),\n      onClick: () => {\n        setActiveChild(TableTab.Viewed);\n        setItem(LocalStorageKeys.homepage_activity_filter, TableTab.Viewed);\n      } });\n\n  }\n  const renderActivity = () => (activeChild === TableTab.Edited ?\n  editedCards :\n  activityData[activeChild]).map((entity) => {\n    const url = getEntityUrl(entity);\n    const lastActionOn = getEntityLastActionOn(entity);\n    return ___EmotionJSX(CardStyles, { key: url },\n    ___EmotionJSX(Link, { to: url },\n    ___EmotionJSX(ListViewCard, { cover: ___EmotionJSX(React.Fragment, null), url: url, title: getEntityTitle(entity), description: lastActionOn, avatar: getEntityIcon(entity), actions: null })));\n\n\n  });\n  if (isFetchingEditedCards && !editedCards || isFetchingActivityData) {\n    return ___EmotionJSX(LoadingCards, null);\n  }\n  return ___EmotionJSX(Styles, null,\n  ___EmotionJSX(SubMenu, { activeChild: activeChild, tabs: tabs }),\n  ((_activityData$activeC = activityData[activeChild]) == null ? void 0 : _activityData$activeC.length) > 0 ||\n  activeChild === TableTab.Edited && editedCards != null && editedCards.length ? ___EmotionJSX(CardContainer, { className: \"recentCards\" },\n  renderActivity()) :\n  ___EmotionJSX(EmptyState, { tableName: WelcomeTable.Recents, tab: activeChild }));\n\n}","map":{"version":3,"mappings":"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","names":["React","useEffect","useState","moment","styled","t","setItem","LocalStorageKeys","Link","ListViewCard","TableTab","LoadingCards","CardContainer","CardStyles","getEditedObjects","Icons","SubMenu","EmptyState","WelcomeTable","Styles","div","theme","gridUnit","UNTITLED","UNKNOWN_TIME","getEntityTitle","entity","dashboard_title","slice_name","label","item_title","getEntityIcon","url","item_url","getEntityUrl","id","getEntityLastActionOn","time","fromNow","changed_on","changed_on_utc","ActivityTable","activeChild","setActiveChild","activityData","user","isFetchingActivityData","editedCards","setEditedCards","isFetchingEditedCards","setIsFetchingEditedCards","getEditedCards","userId","then","r","editedChart","editedDash","Edited","tabs","name","onClick","homepage_activity_filter","Created","Viewed","unshift","renderActivity","map","lastActionOn","length","Recents"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/features/home/ActivityTable.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useState } from 'react';\nimport moment from 'moment';\nimport { styled, t } from '@superset-ui/core';\nimport { setItem, LocalStorageKeys } from 'src/utils/localStorageHelpers';\nimport { Link } from 'react-router-dom';\nimport ListViewCard from 'src/components/ListViewCard';\nimport { Dashboard, SavedQueryObject, TableTab } from 'src/views/CRUD/types';\nimport { ActivityData, LoadingCards } from 'src/pages/Home';\nimport {\n  CardContainer,\n  CardStyles,\n  getEditedObjects,\n} from 'src/views/CRUD/utils';\nimport { Chart } from 'src/types/Chart';\nimport Icons from 'src/components/Icons';\nimport SubMenu from './SubMenu';\nimport EmptyState from './EmptyState';\nimport { WelcomeTable } from './types';\n\n/**\n * Return result from /api/v1/log/recent_activity/\n */\ninterface RecentActivity {\n  action: string;\n  item_type: 'slice' | 'dashboard';\n  item_url: string;\n  item_title: string;\n  time: number;\n  time_delta_humanized?: string;\n}\n\ninterface RecentSlice extends RecentActivity {\n  item_type: 'slice';\n}\n\ninterface RecentDashboard extends RecentActivity {\n  item_type: 'dashboard';\n}\n\n/**\n * Recent activity objects fetched by `getRecentActivityObjs`.\n */\ntype ActivityObject =\n  | RecentSlice\n  | RecentDashboard\n  | Chart\n  | Dashboard\n  | SavedQueryObject;\n\ninterface ActivityProps {\n  user: {\n    userId: string | number;\n  };\n  activeChild: string;\n  setActiveChild: (arg0: string) => void;\n  activityData: ActivityData;\n  isFetchingActivityData: boolean;\n}\n\nconst Styles = styled.div`\n  .recentCards {\n    max-height: none;\n    grid-gap: ${({ theme }) => `${theme.gridUnit * 4}px`};\n  }\n`;\n\nconst UNTITLED = t('[Untitled]');\nconst UNKNOWN_TIME = t('Unknown');\n\nconst getEntityTitle = (entity: ActivityObject) => {\n  if ('dashboard_title' in entity) return entity.dashboard_title || UNTITLED;\n  if ('slice_name' in entity) return entity.slice_name || UNTITLED;\n  if ('label' in entity) return entity.label || UNTITLED;\n  return entity.item_title || UNTITLED;\n};\n\nconst getEntityIcon = (entity: ActivityObject) => {\n  if ('sql' in entity) return <Icons.Sql />;\n  const url = 'item_url' in entity ? entity.item_url : entity.url;\n  if (url?.includes('dashboard')) {\n    return <Icons.NavDashboard />;\n  }\n  if (url?.includes('explore')) {\n    return <Icons.NavCharts />;\n  }\n  return null;\n};\n\nconst getEntityUrl = (entity: ActivityObject) => {\n  if ('sql' in entity) return `/superset/sqllab?savedQueryId=${entity.id}`;\n  if ('url' in entity) return entity.url;\n  return entity.item_url;\n};\n\nconst getEntityLastActionOn = (entity: ActivityObject) => {\n  if ('time' in entity) {\n    return t('Viewed %s', moment(entity.time).fromNow());\n  }\n\n  let time: number | string | undefined | null;\n  if ('changed_on' in entity) time = entity.changed_on;\n  if ('changed_on_utc' in entity) time = entity.changed_on_utc;\n  return t('Modified %s', time == null ? UNKNOWN_TIME : moment(time).fromNow());\n};\n\nexport default function ActivityTable({\n  activeChild,\n  setActiveChild,\n  activityData,\n  user,\n  isFetchingActivityData,\n}: ActivityProps) {\n  const [editedCards, setEditedCards] = useState<ActivityData[]>();\n  const [isFetchingEditedCards, setIsFetchingEditedCards] = useState(false);\n\n  const getEditedCards = () => {\n    setIsFetchingEditedCards(true);\n    getEditedObjects(user.userId).then(r => {\n      setEditedCards([...r.editedChart, ...r.editedDash]);\n      setIsFetchingEditedCards(false);\n    });\n  };\n\n  useEffect(() => {\n    if (activeChild === TableTab.Edited) {\n      getEditedCards();\n    }\n  }, [activeChild]);\n\n  const tabs = [\n    {\n      name: TableTab.Edited,\n      label: t('Edited'),\n      onClick: () => {\n        setActiveChild(TableTab.Edited);\n        setItem(LocalStorageKeys.homepage_activity_filter, TableTab.Edited);\n      },\n    },\n    {\n      name: TableTab.Created,\n      label: t('Created'),\n      onClick: () => {\n        setActiveChild(TableTab.Created);\n        setItem(LocalStorageKeys.homepage_activity_filter, TableTab.Created);\n      },\n    },\n  ];\n\n  if (activityData?.[TableTab.Viewed]) {\n    tabs.unshift({\n      name: TableTab.Viewed,\n      label: t('Viewed'),\n      onClick: () => {\n        setActiveChild(TableTab.Viewed);\n        setItem(LocalStorageKeys.homepage_activity_filter, TableTab.Viewed);\n      },\n    });\n  }\n  const renderActivity = () =>\n    (activeChild === TableTab.Edited\n      ? editedCards\n      : activityData[activeChild]\n    ).map((entity: ActivityObject) => {\n      const url = getEntityUrl(entity);\n      const lastActionOn = getEntityLastActionOn(entity);\n      return (\n        <CardStyles key={url}>\n          <Link to={url}>\n            <ListViewCard\n              cover={<></>}\n              url={url}\n              title={getEntityTitle(entity)}\n              description={lastActionOn}\n              avatar={getEntityIcon(entity)}\n              actions={null}\n            />\n          </Link>\n        </CardStyles>\n      );\n    });\n\n  if ((isFetchingEditedCards && !editedCards) || isFetchingActivityData) {\n    return <LoadingCards />;\n  }\n  return (\n    <Styles>\n      <SubMenu activeChild={activeChild} tabs={tabs} />\n      {activityData[activeChild]?.length > 0 ||\n      (activeChild === TableTab.Edited && editedCards?.length) ? (\n        <CardContainer className=\"recentCards\">\n          {renderActivity()}\n        </CardContainer>\n      ) : (\n        <EmptyState tableName={WelcomeTable.Recents} tab={activeChild} />\n      )}\n    </Styles>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}