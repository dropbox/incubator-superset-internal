{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { extent as d3Extent } from 'd3-array';\nconst LAT_LIMIT = [-90, 90];\nconst LNG_LIMIT = [-180, 180];\n/**\n * Expand a coordinate range by `padding` and within limits, if needed\n */\nfunction expandIfNeeded(_ref, _ref2, padding) {let [curMin, curMax] = _ref;let [minBound, maxBound] = _ref2;if (padding === void 0) {padding = 0.25;}\n  return curMin < curMax ?\n  [curMin, curMax] :\n  [\n  Math.max(minBound, curMin - padding),\n  Math.min(maxBound, curMax + padding)];\n\n}\nexport default function computeBoundsFromPoints(points) {\n  const latBounds = expandIfNeeded(d3Extent(points, (x) => x[1]), LAT_LIMIT);\n  const lngBounds = expandIfNeeded(d3Extent(points, (x) => x[0]), LNG_LIMIT);\n  return [\n  [lngBounds[0], latBounds[0]],\n  [lngBounds[1], latBounds[1]]];\n\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(LAT_LIMIT, \"LAT_LIMIT\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/src/utils/computeBoundsFromPoints.ts\");reactHotLoader.register(LNG_LIMIT, \"LNG_LIMIT\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/src/utils/computeBoundsFromPoints.ts\");reactHotLoader.register(expandIfNeeded, \"expandIfNeeded\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/src/utils/computeBoundsFromPoints.ts\");reactHotLoader.register(computeBoundsFromPoints, \"computeBoundsFromPoints\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/src/utils/computeBoundsFromPoints.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAkBA,SAASA,MAAM,IAAIC,QAAnB,QAAmC,UAAnC;AAGA,MAAMC,SAAS,GAAU,CAAC,CAAC,EAAF,EAAM,EAAN,CAAzB;AACA,MAAMC,SAAS,GAAU,CAAC,CAAC,GAAF,EAAO,GAAP,CAAzB;AAEA;;;AAGA,SAASC,cAAT,cAGEC,OAHF,EAGgB,KAFd,CAACC,MAAD,EAASC,MAAT,CAEc,YADd,CAACC,QAAD,EAAWC,QAAX,CACc,aAAdJ,OAAc,cAAdA,OAAc,GAAJ,IAAI;EAEd,OAAOC,MAAM,GAAGC,MAAT;EACH,CAACD,MAAD,EAASC,MAAT,CADG;EAEH;EACEG,IAAI,CAACC,GAAL,CAASH,QAAT,EAAmBF,MAAM,GAAGD,OAA5B,CADF;EAEEK,IAAI,CAACE,GAAL,CAASH,QAAT,EAAmBF,MAAM,GAAGF,OAA5B,CAFF,CAFJ;;AAMD;AAED,eAAc,SAAUQ,uBAAV,CACZC,MADY,EACG;EAEf,MAAMC,SAAS,GAAGX,cAAc,CAC9BH,QAAQ,CAACa,MAAD,EAAS,CAACE,CAAD,KAAcA,CAAC,CAAC,CAAD,CAAxB,CADsB,EAE9Bd,SAF8B,CAAhC;EAIA,MAAMe,SAAS,GAAGb,cAAc,CAC9BH,QAAQ,CAACa,MAAD,EAAS,CAACE,CAAD,KAAcA,CAAC,CAAC,CAAD,CAAxB,CADsB,EAE9Bb,SAF8B,CAAhC;EAIA,OAAO;EACL,CAACc,SAAS,CAAC,CAAD,CAAV,EAAeF,SAAS,CAAC,CAAD,CAAxB,CADK;EAEL,CAACE,SAAS,CAAC,CAAD,CAAV,EAAeF,SAAS,CAAC,CAAD,CAAxB,CAFK,CAAP;;AAID,C,iLAlCKb,S,mLACAC,S,mLAKGC,c,wLAaeS,uB","names":["extent","d3Extent","LAT_LIMIT","LNG_LIMIT","expandIfNeeded","padding","curMin","curMax","minBound","maxBound","Math","max","min","computeBoundsFromPoints","points","latBounds","x","lngBounds"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/src/utils/computeBoundsFromPoints.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { extent as d3Extent } from 'd3-array';\nimport { Point, Range } from '../types';\n\nconst LAT_LIMIT: Range = [-90, 90];\nconst LNG_LIMIT: Range = [-180, 180];\n\n/**\n * Expand a coordinate range by `padding` and within limits, if needed\n */\nfunction expandIfNeeded(\n  [curMin, curMax]: Range,\n  [minBound, maxBound]: Range,\n  padding = 0.25,\n) {\n  return curMin < curMax\n    ? [curMin, curMax]\n    : [\n        Math.max(minBound, curMin - padding),\n        Math.min(maxBound, curMax + padding),\n      ];\n}\n\nexport default function computeBoundsFromPoints(\n  points: Point[],\n): [Point, Point] {\n  const latBounds = expandIfNeeded(\n    d3Extent(points, (x: Point) => x[1]) as Range,\n    LAT_LIMIT,\n  );\n  const lngBounds = expandIfNeeded(\n    d3Extent(points, (x: Point) => x[0]) as Range,\n    LNG_LIMIT,\n  );\n  return [\n    [lngBounds[0], latBounds[0]],\n    [lngBounds[1], latBounds[1]],\n  ];\n}\n"]},"metadata":{},"sourceType":"module"}