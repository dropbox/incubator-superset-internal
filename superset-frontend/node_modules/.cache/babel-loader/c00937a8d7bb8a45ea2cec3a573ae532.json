{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useState, useRef } from 'react';\nimport { Link } from 'react-router-dom';\nimport cx from 'classnames';\nimport { css, styled, t } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';\nimport CertifiedBadge from '../CertifiedBadge';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst StyledCertifiedBadge = styled(CertifiedBadge)`\n  vertical-align: middle;\n`;\nexport default function EditableTitle(_ref)\n\n{let { canEdit = false, editing = false, extraClasses, multiLine = false, noPermitTooltip, onSaveTitle, showTooltip = true, style, title = '', defaultTitle = '', placeholder = '', certifiedBy, certificationDetails, url, // rest is related to title tooltip\n    ...rest } = _ref;const [isEditing, setIsEditing] = useState(editing);\n  const [currentTitle, setCurrentTitle] = useState(title);\n  const [lastTitle, setLastTitle] = useState(title);\n  const [contentBoundingRect, setContentBoundingRect] = useState(null);\n  // Used so we can access the DOM element if a user clicks on this component.\n  const contentRef = useRef();\n  useEffect(() => {\n    if (title !== currentTitle) {\n      setLastTitle(currentTitle);\n      setCurrentTitle(title);\n    }\n  }, [title]);\n  useEffect(() => {\n    if (isEditing) {\n      contentRef.current.focus();\n      // move cursor and scroll to the end\n      if (contentRef.current.setSelectionRange) {\n        const { length } = contentRef.current.value;\n        contentRef.current.setSelectionRange(length, length);\n        contentRef.current.scrollLeft = contentRef.current.scrollWidth;\n        contentRef.current.scrollTop = contentRef.current.scrollHeight;\n      }\n    }\n  }, [isEditing]);\n  function handleClick() {\n    if (!canEdit || isEditing) {\n      return;\n    }\n    // For multi-line values, save the actual rendered size of the displayed text.\n    // Later, if a textarea is constructed for editing the value, we'll need this.\n    const contentBounding = contentRef.current ?\n    contentRef.current.getBoundingClientRect() :\n    null;\n    setIsEditing(true);\n    setContentBoundingRect(contentBounding);\n  }\n  function handleBlur() {\n    const formattedTitle = currentTitle.trim();\n    if (!canEdit) {\n      return;\n    }\n    setIsEditing(false);\n    if (!formattedTitle.length) {\n      setCurrentTitle(lastTitle);\n      return;\n    }\n    if (lastTitle !== formattedTitle) {\n      setLastTitle(formattedTitle);\n    }\n    if (title !== formattedTitle) {\n      onSaveTitle(formattedTitle);\n    }\n  }\n  // tl;dr when a EditableTitle is being edited, typically the Tab that wraps it has been\n  // clicked and is focused/active. For accessibility, when the focused tab anchor intercepts\n  // the ' ' key (among others, including all arrows) the onChange() doesn't fire. Somehow\n  // keydown is still called so we can detect this and manually add a ' ' to the current title\n  function handleKeyDown(event) {\n    if (event.key === ' ') {\n      event.stopPropagation();\n    }\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      handleBlur();\n    }\n  }\n  function handleChange(ev) {\n    if (!canEdit) {\n      return;\n    }\n    setCurrentTitle(ev.target.value);\n  }\n  function handleKeyPress(ev) {\n    if (ev.key === 'Enter') {\n      ev.preventDefault();\n      handleBlur();\n    }\n  }\n  let value;\n  value = currentTitle;\n  if (!isEditing && !currentTitle) {\n    value = defaultTitle || title;\n  }\n  // Construct an inline style based on previously-saved height of the rendered label. Only\n  // used in multi-line contexts.\n  const editStyle = isEditing && contentBoundingRect ?\n  { height: `${contentBoundingRect.height}px` } :\n  undefined;\n  // Create a textarea when we're editing a multi-line value, otherwise create an input (which may\n  // be text or a button).\n  let titleComponent = multiLine && isEditing ? ___EmotionJSX(\"textarea\", { ref: contentRef, value: value, className: !title ? 'text-muted' : undefined, onKeyDown: handleKeyDown, onChange: handleChange, onBlur: handleBlur, onClick: handleClick, onKeyPress: handleKeyPress, placeholder: placeholder, style: editStyle }) : ___EmotionJSX(\"input\", { ref: contentRef, type: isEditing ? 'text' : 'button', value: value, className: !title ? 'text-muted' : undefined, onKeyDown: handleKeyDown, onChange: handleChange, onBlur: handleBlur, onClick: handleClick, onKeyPress: handleKeyPress, placeholder: placeholder });\n  if (showTooltip && !isEditing) {\n    titleComponent = ___EmotionJSX(Tooltip, { id: \"title-tooltip\", title: canEdit ?\n      t('Click to edit') :\n      noPermitTooltip ||\n      t(\"You don't have the rights to alter this title.\") },\n    titleComponent);\n\n  }\n  if (!canEdit) {\n    // don't actually want an input in this case\n    titleComponent = url ? ___EmotionJSX(Link, { to: url, css: (theme) => css`\n          color: ${theme.colors.grayscale.dark1};\n          text-decoration: none;\n          :hover {\n            text-decoration: underline;\n          }\n        ` },\n    value) :\n    ___EmotionJSX(\"span\", null, value);\n  }\n  return ___EmotionJSX(\"span\", _extends({ className: cx('editable-title', extraClasses, canEdit && 'editable-title--editable', isEditing && 'editable-title--editing'), style: style }, rest),\n  certifiedBy && ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(StyledCertifiedBadge, { certifiedBy: certifiedBy, details: certificationDetails, size: \"xl\" }), ' '),\n\n  titleComponent);\n\n}","map":{"version":3,"mappings":"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","names":["React","useEffect","useState","useRef","Link","cx","css","styled","t","Tooltip","CertifiedBadge","StyledCertifiedBadge","EditableTitle","canEdit","editing","extraClasses","multiLine","noPermitTooltip","onSaveTitle","showTooltip","style","title","defaultTitle","placeholder","certifiedBy","certificationDetails","url","rest","isEditing","setIsEditing","currentTitle","setCurrentTitle","lastTitle","setLastTitle","contentBoundingRect","setContentBoundingRect","contentRef","current","focus","setSelectionRange","length","value","scrollLeft","scrollWidth","scrollTop","scrollHeight","handleClick","contentBounding","getBoundingClientRect","handleBlur","formattedTitle","trim","handleKeyDown","event","key","stopPropagation","preventDefault","handleChange","ev","target","handleKeyPress","editStyle","height","undefined","titleComponent","theme","colors","grayscale","dark1"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/EditableTitle/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useState, useRef } from 'react';\nimport { Link } from 'react-router-dom';\nimport cx from 'classnames';\nimport { css, styled, SupersetTheme, t } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';\nimport CertifiedBadge from '../CertifiedBadge';\n\nexport interface EditableTitleProps {\n  canEdit?: boolean;\n  editing?: boolean;\n  emptyText?: string;\n  extraClasses?: Array<string> | string;\n  multiLine?: boolean;\n  noPermitTooltip?: string;\n  onSaveTitle: (arg0: string) => void;\n  showTooltip?: boolean;\n  style?: object;\n  title?: string;\n  defaultTitle?: string;\n  placeholder?: string;\n  certifiedBy?: string;\n  certificationDetails?: string;\n  url?: string;\n}\n\nconst StyledCertifiedBadge = styled(CertifiedBadge)`\n  vertical-align: middle;\n`;\n\nexport default function EditableTitle({\n  canEdit = false,\n  editing = false,\n  extraClasses,\n  multiLine = false,\n  noPermitTooltip,\n  onSaveTitle,\n  showTooltip = true,\n  style,\n  title = '',\n  defaultTitle = '',\n  placeholder = '',\n  certifiedBy,\n  certificationDetails,\n  url,\n  // rest is related to title tooltip\n  ...rest\n}: EditableTitleProps) {\n  const [isEditing, setIsEditing] = useState(editing);\n  const [currentTitle, setCurrentTitle] = useState(title);\n  const [lastTitle, setLastTitle] = useState(title);\n  const [contentBoundingRect, setContentBoundingRect] =\n    useState<DOMRect | null>(null);\n  // Used so we can access the DOM element if a user clicks on this component.\n\n  const contentRef = useRef<any | HTMLInputElement | HTMLTextAreaElement>();\n\n  useEffect(() => {\n    if (title !== currentTitle) {\n      setLastTitle(currentTitle);\n      setCurrentTitle(title);\n    }\n  }, [title]);\n\n  useEffect(() => {\n    if (isEditing) {\n      contentRef.current.focus();\n      // move cursor and scroll to the end\n      if (contentRef.current.setSelectionRange) {\n        const { length } = contentRef.current.value;\n        contentRef.current.setSelectionRange(length, length);\n        contentRef.current.scrollLeft = contentRef.current.scrollWidth;\n        contentRef.current.scrollTop = contentRef.current.scrollHeight;\n      }\n    }\n  }, [isEditing]);\n\n  function handleClick() {\n    if (!canEdit || isEditing) {\n      return;\n    }\n\n    // For multi-line values, save the actual rendered size of the displayed text.\n    // Later, if a textarea is constructed for editing the value, we'll need this.\n    const contentBounding = contentRef.current\n      ? contentRef.current.getBoundingClientRect()\n      : null;\n    setIsEditing(true);\n    setContentBoundingRect(contentBounding);\n  }\n\n  function handleBlur() {\n    const formattedTitle = currentTitle.trim();\n\n    if (!canEdit) {\n      return;\n    }\n\n    setIsEditing(false);\n\n    if (!formattedTitle.length) {\n      setCurrentTitle(lastTitle);\n      return;\n    }\n\n    if (lastTitle !== formattedTitle) {\n      setLastTitle(formattedTitle);\n    }\n\n    if (title !== formattedTitle) {\n      onSaveTitle(formattedTitle);\n    }\n  }\n\n  // tl;dr when a EditableTitle is being edited, typically the Tab that wraps it has been\n  // clicked and is focused/active. For accessibility, when the focused tab anchor intercepts\n  // the ' ' key (among others, including all arrows) the onChange() doesn't fire. Somehow\n  // keydown is still called so we can detect this and manually add a ' ' to the current title\n  function handleKeyDown(event: any) {\n    if (event.key === ' ') {\n      event.stopPropagation();\n    }\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      handleBlur();\n    }\n  }\n\n  function handleChange(ev: any) {\n    if (!canEdit) {\n      return;\n    }\n    setCurrentTitle(ev.target.value);\n  }\n\n  function handleKeyPress(ev: any) {\n    if (ev.key === 'Enter') {\n      ev.preventDefault();\n      handleBlur();\n    }\n  }\n\n  let value: string | undefined;\n  value = currentTitle;\n  if (!isEditing && !currentTitle) {\n    value = defaultTitle || title;\n  }\n\n  // Construct an inline style based on previously-saved height of the rendered label. Only\n  // used in multi-line contexts.\n  const editStyle =\n    isEditing && contentBoundingRect\n      ? { height: `${contentBoundingRect.height}px` }\n      : undefined;\n\n  // Create a textarea when we're editing a multi-line value, otherwise create an input (which may\n  // be text or a button).\n  let titleComponent =\n    multiLine && isEditing ? (\n      <textarea\n        data-test=\"editable-title-input\"\n        ref={contentRef}\n        value={value}\n        className={!title ? 'text-muted' : undefined}\n        onKeyDown={handleKeyDown}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        onClick={handleClick}\n        onKeyPress={handleKeyPress}\n        placeholder={placeholder}\n        style={editStyle}\n      />\n    ) : (\n      <input\n        data-test=\"editable-title-input\"\n        ref={contentRef}\n        type={isEditing ? 'text' : 'button'}\n        value={value}\n        className={!title ? 'text-muted' : undefined}\n        onKeyDown={handleKeyDown}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        onClick={handleClick}\n        onKeyPress={handleKeyPress}\n        placeholder={placeholder}\n      />\n    );\n  if (showTooltip && !isEditing) {\n    titleComponent = (\n      <Tooltip\n        id=\"title-tooltip\"\n        title={\n          canEdit\n            ? t('Click to edit')\n            : noPermitTooltip ||\n              t(\"You don't have the rights to alter this title.\")\n        }\n      >\n        {titleComponent}\n      </Tooltip>\n    );\n  }\n  if (!canEdit) {\n    // don't actually want an input in this case\n    titleComponent = url ? (\n      <Link\n        to={url}\n        data-test=\"editable-title-input\"\n        css={(theme: SupersetTheme) => css`\n          color: ${theme.colors.grayscale.dark1};\n          text-decoration: none;\n          :hover {\n            text-decoration: underline;\n          }\n        `}\n      >\n        {value}\n      </Link>\n    ) : (\n      <span data-test=\"editable-title-input\">{value}</span>\n    );\n  }\n  return (\n    <span\n      data-test=\"editable-title\"\n      className={cx(\n        'editable-title',\n        extraClasses,\n        canEdit && 'editable-title--editable',\n        isEditing && 'editable-title--editing',\n      )}\n      style={style}\n      {...rest}\n    >\n      {certifiedBy && (\n        <>\n          <StyledCertifiedBadge\n            certifiedBy={certifiedBy}\n            details={certificationDetails}\n            size=\"xl\"\n          />{' '}\n        </>\n      )}\n      {titleComponent}\n    </span>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}