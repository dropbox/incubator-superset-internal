{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nexport var NativeFilterType;\n(function (NativeFilterType) {\n  NativeFilterType[\"NATIVE_FILTER\"] = \"NATIVE_FILTER\";\n  NativeFilterType[\"DIVIDER\"] = \"DIVIDER\";\n})(NativeFilterType || (NativeFilterType = {}));\nexport var DataMaskType;\n(function (DataMaskType) {\n  DataMaskType[\"NativeFilters\"] = \"nativeFilters\";\n  DataMaskType[\"CrossFilters\"] = \"crossFilters\";\n})(DataMaskType || (DataMaskType = {}));\nexport function isNativeFilter(filterElement) {\n  return filterElement.type === NativeFilterType.NATIVE_FILTER;\n}\nexport function isNativeFilterWithDataMask(filterElement) {var _filterElement$dataMa, _filterElement$dataMa2;\n  return isNativeFilter(filterElement) && ((_filterElement$dataMa =\n  filterElement.dataMask) == null ? void 0 : (_filterElement$dataMa2 = _filterElement$dataMa.filterState) == null ? void 0 : _filterElement$dataMa2.value);\n}\nexport function isFilterDivider(filterElement) {\n  return filterElement.type === NativeFilterType.DIVIDER;\n}\nexport default {};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAyCA,WAAYA,gBAAZ;AAAA,WAAYA,gBAAZ,EAA4B;EAC1BA;EACAA;AACD,CAHD,EAAYA,gBAAgB,KAAhBA,gBAAgB,MAA5B;AAKA,WAAYC,YAAZ;AAAA,WAAYA,YAAZ,EAAwB;EACtBA;EACAA;AACD,CAHD,EAAYA,YAAY,KAAZA,YAAY,MAAxB;AAwDA,OAAM,SAAUC,cAAV,CACJC,aADI,EAC2B;EAE/B,OAAOA,aAAa,CAACC,IAAd,KAAuBJ,gBAAgB,CAACK,aAA/C;AACD;AAED,OAAM,SAAUC,0BAAV,CACJH,aADI,EAC2B;EAE/B,OACED,cAAc,CAACC,aAAD,CAAd;EACCA,aAAoC,CAACI,QADtC,+CACC,sBAA+CC,WADhD,qBACC,uBAA4DC,KAD7D,CADF;AAID;AAED,OAAM,SAAUC,eAAV,CACJP,aADI,EAC2B;EAE/B,OAAOA,aAAa,CAACC,IAAd,KAAuBJ,gBAAgB,CAACW,OAA/C;AACD;AAwBD,eAAe,EAAf","names":["NativeFilterType","DataMaskType","isNativeFilter","filterElement","type","NATIVE_FILTER","isNativeFilterWithDataMask","dataMask","filterState","value","isFilterDivider","DIVIDER"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/query/types/Dashboard.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { AdhocFilter, DataMask } from '@superset-ui/core';\n\nexport interface NativeFilterColumn {\n  name: string;\n  displayName?: string;\n}\n\nexport interface NativeFilterScope {\n  rootPath: string[];\n  excluded: number[];\n}\n\n/** The target of a filter is the datasource/column being filtered */\nexport interface NativeFilterTarget {\n  datasetId: number;\n  column: NativeFilterColumn;\n\n  // maybe someday support this?\n  // show values from these columns in the filter options selector\n  // clarityColumns?: Column[];\n}\n\nexport enum NativeFilterType {\n  NATIVE_FILTER = 'NATIVE_FILTER',\n  DIVIDER = 'DIVIDER',\n}\n\nexport enum DataMaskType {\n  NativeFilters = 'nativeFilters',\n  CrossFilters = 'crossFilters',\n}\n\nexport type DataMaskState = { [id: string]: DataMask };\n\nexport type DataMaskWithId = { id: string } & DataMask;\nexport type DataMaskStateWithId = { [filterId: string]: DataMaskWithId };\n\nexport type FilterSet = {\n  id: number;\n  name: string;\n  nativeFilters: Filters;\n  dataMask: DataMaskStateWithId;\n};\n\nexport type FilterSets = {\n  [filtersSetId: string]: FilterSet;\n};\n\nexport type Filter = {\n  cascadeParentIds: string[];\n  defaultDataMask: DataMask;\n  id: string; // randomly generated at filter creation\n  name: string;\n  scope: NativeFilterScope;\n  filterType: string;\n  // for now there will only ever be one target\n  // when multiple targets are supported, change this to Target[]\n  targets: [Partial<NativeFilterTarget>];\n  controlValues: {\n    [key: string]: any;\n  };\n  sortMetric?: string | null;\n  adhoc_filters?: AdhocFilter[];\n  granularity_sqla?: string;\n  granularity?: string;\n  time_grain_sqla?: string;\n  time_range?: string;\n  requiredFirst?: boolean;\n  tabsInScope?: string[];\n  chartsInScope?: number[];\n  type: typeof NativeFilterType.NATIVE_FILTER;\n  description: string;\n};\n\nexport type FilterWithDataMask = Filter & { dataMask: DataMaskWithId };\n\nexport type Divider = Partial<Omit<Filter, 'id' | 'type'>> & {\n  id: string;\n  title: string;\n  description: string;\n  type: typeof NativeFilterType.DIVIDER;\n};\n\nexport function isNativeFilter(\n  filterElement: Filter | Divider,\n): filterElement is Filter {\n  return filterElement.type === NativeFilterType.NATIVE_FILTER;\n}\n\nexport function isNativeFilterWithDataMask(\n  filterElement: Filter | Divider,\n): filterElement is FilterWithDataMask {\n  return (\n    isNativeFilter(filterElement) &&\n    (filterElement as FilterWithDataMask).dataMask?.filterState?.value\n  );\n}\n\nexport function isFilterDivider(\n  filterElement: Filter | Divider,\n): filterElement is Divider {\n  return filterElement.type === NativeFilterType.DIVIDER;\n}\n\nexport type FilterConfiguration = Array<Filter | Divider>;\n\nexport type Filters = {\n  [filterId: string]: Filter | Divider;\n};\n\nexport type PartialFilters = {\n  [filterId: string]: Partial<Filters[keyof Filters]>;\n};\n\nexport type NativeFiltersState = {\n  filters: Filters;\n  filterSets: FilterSets;\n  focusedFilterId?: string;\n  hoveredFilterId?: string;\n};\n\nexport type DashboardComponentMetadata = {\n  nativeFilters: NativeFiltersState;\n  dataMask: DataMaskStateWithId;\n};\n\nexport default {};\n"]},"metadata":{},"sourceType":"module"}