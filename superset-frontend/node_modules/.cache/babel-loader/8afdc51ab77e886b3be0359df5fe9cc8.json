{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { FeatureFlag, styled, t, useTheme } from '@superset-ui/core';\nimport Icons from 'src/components/Icons';\nimport Tabs from 'src/components/Tabs';\nimport { isFeatureEnabled } from 'src/featureFlags';\nimport { getItem, setItem, LocalStorageKeys } from 'src/utils/localStorageHelpers';\nimport { SamplesPane, TableControlsWrapper, useResultsPane } from './components';\nimport { ResultTypes } from './types';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst SouthPane = styled.div`\n  ${(_ref) => {let { theme } = _ref;return `\n    position: relative;\n    background-color: ${theme.colors.grayscale.light5};\n    z-index: 5;\n    overflow: hidden;\n\n    .ant-tabs {\n      height: 100%;\n    }\n\n    .ant-tabs-content-holder {\n      height: 100%;\n    }\n\n    .ant-tabs-content {\n      height: 100%;\n    }\n\n    .ant-tabs-tabpane {\n      display: flex;\n      flex-direction: column;\n      height: 100%;\n\n      .table-condensed {\n        height: 100%;\n        overflow: auto;\n        margin-bottom: ${theme.gridUnit * 4}px;\n\n        .table {\n          margin-bottom: ${theme.gridUnit * 2}px;\n        }\n      }\n\n      .pagination-container > ul[role='navigation'] {\n        margin-top: 0;\n      }\n    }\n  `;}}\n`;\nexport const DataTablesPane = (_ref2) => {let { queryFormData, datasource, queryForce, onCollapseChange, chartStatus, ownState, errorMessage, actions } = _ref2;\n  const theme = useTheme();\n  const [activeTabKey, setActiveTabKey] = useState(ResultTypes.Results);\n  const [isRequest, setIsRequest] = useState({\n    results: false,\n    samples: false });\n\n  const [panelOpen, setPanelOpen] = useState(isFeatureEnabled(FeatureFlag.DATAPANEL_CLOSED_BY_DEFAULT) ?\n  false :\n  getItem(LocalStorageKeys.is_datapanel_open, false));\n  useEffect(() => {\n    if (!isFeatureEnabled(FeatureFlag.DATAPANEL_CLOSED_BY_DEFAULT))\n    setItem(LocalStorageKeys.is_datapanel_open, panelOpen);\n  }, [panelOpen]);\n  useEffect(() => {\n    if (!panelOpen) {\n      setIsRequest({\n        results: false,\n        samples: false });\n\n    }\n    if (panelOpen &&\n    activeTabKey.startsWith(ResultTypes.Results) &&\n    chartStatus === 'rendered') {\n      setIsRequest({\n        results: true,\n        samples: false });\n\n    }\n    if (panelOpen && activeTabKey === ResultTypes.Samples) {\n      setIsRequest({\n        results: false,\n        samples: true });\n\n    }\n  }, [panelOpen, activeTabKey, chartStatus]);\n  const handleCollapseChange = useCallback((isOpen) => {\n    onCollapseChange(isOpen);\n    setPanelOpen(isOpen);\n  }, [onCollapseChange]);\n  const handleTabClick = useCallback((tabKey, e) => {\n    if (!panelOpen) {\n      handleCollapseChange(true);\n    } else\n    if (tabKey === activeTabKey) {\n      e.preventDefault();\n      handleCollapseChange(false);\n    }\n    setActiveTabKey(tabKey);\n  }, [activeTabKey, handleCollapseChange, panelOpen]);\n  const CollapseButton = useMemo(() => {\n    const caretIcon = panelOpen ? ___EmotionJSX(Icons.CaretUp, { iconColor: theme.colors.grayscale.base, \"aria-label\": t('Collapse data panel') }) : ___EmotionJSX(Icons.CaretDown, { iconColor: theme.colors.grayscale.base, \"aria-label\": t('Expand data panel') });\n    return ___EmotionJSX(TableControlsWrapper, null,\n    panelOpen ? ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, onClick: () => handleCollapseChange(false) },\n    caretIcon) :\n    ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, onClick: () => handleCollapseChange(true) },\n    caretIcon));\n\n\n  }, [handleCollapseChange, panelOpen, theme.colors.grayscale.base]);\n  const queryResultsPanes = useResultsPane({\n    errorMessage,\n    queryFormData,\n    queryForce,\n    ownState,\n    isRequest: isRequest.results,\n    actions,\n    isVisible: ResultTypes.Results === activeTabKey }).\n  map((pane, idx) => {\n    if (idx === 0) {\n      return ___EmotionJSX(Tabs.TabPane, { tab: t('Results'), key: ResultTypes.Results },\n      pane);\n\n    }\n    if (idx > 0) {\n      return ___EmotionJSX(Tabs.TabPane, { tab: t('Results %s', idx + 1), key: `${ResultTypes.Results} ${idx + 1}` },\n      pane);\n\n    }\n    return null;\n  });\n  return ___EmotionJSX(SouthPane, { \"data-test\": \"some-purposeful-instance\" },\n  ___EmotionJSX(Tabs, { fullWidth: false, tabBarExtraContent: CollapseButton, activeKey: panelOpen ? activeTabKey : '', onTabClick: handleTabClick },\n  queryResultsPanes,\n  ___EmotionJSX(Tabs.TabPane, { tab: t('Samples'), key: ResultTypes.Samples },\n  ___EmotionJSX(SamplesPane, { datasource: datasource, queryForce: queryForce, isRequest: isRequest.samples, actions: actions, isVisible: ResultTypes.Samples === activeTabKey }))));\n\n\n\n};__signature__(DataTablesPane, \"useTheme{theme}\\nuseState{[activeTabKey, setActiveTabKey](ResultTypes.Results)}\\nuseState{[isRequest, setIsRequest]({\\n        results: false,\\n        samples: false,\\n    })}\\nuseState{[panelOpen, setPanelOpen](isFeatureEnabled(FeatureFlag.DATAPANEL_CLOSED_BY_DEFAULT)\\n        ? false\\n        : getItem(LocalStorageKeys.is_datapanel_open, false))}\\nuseEffect{}\\nuseEffect{}\\nuseCallback{handleCollapseChange}\\nuseCallback{handleTabClick}\\nuseMemo{CollapseButton}\\nuseResultsPane{}\", () => [useTheme, useResultsPane]);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(SouthPane, \"SouthPane\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/DataTablesPane/DataTablesPane.tsx\");reactHotLoader.register(DataTablesPane, \"DataTablesPane\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/DataTablesPane/DataTablesPane.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"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","names":["React","useCallback","useEffect","useMemo","useState","FeatureFlag","styled","t","useTheme","Icons","Tabs","isFeatureEnabled","getItem","setItem","LocalStorageKeys","SamplesPane","TableControlsWrapper","useResultsPane","ResultTypes","SouthPane","div","theme","colors","grayscale","light5","gridUnit","DataTablesPane","queryFormData","datasource","queryForce","onCollapseChange","chartStatus","ownState","errorMessage","actions","activeTabKey","setActiveTabKey","Results","isRequest","setIsRequest","results","samples","panelOpen","setPanelOpen","DATAPANEL_CLOSED_BY_DEFAULT","is_datapanel_open","startsWith","Samples","handleCollapseChange","isOpen","handleTabClick","tabKey","e","preventDefault","CollapseButton","caretIcon","base","queryResultsPanes","isVisible","map","pane","idx"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/DataTablesPane/DataTablesPane.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n  MouseEvent,\n} from 'react';\nimport { FeatureFlag, styled, t, useTheme } from '@superset-ui/core';\nimport Icons from 'src/components/Icons';\nimport Tabs from 'src/components/Tabs';\nimport { isFeatureEnabled } from 'src/featureFlags';\nimport {\n  getItem,\n  setItem,\n  LocalStorageKeys,\n} from 'src/utils/localStorageHelpers';\nimport {\n  SamplesPane,\n  TableControlsWrapper,\n  useResultsPane,\n} from './components';\nimport { DataTablesPaneProps, ResultTypes } from './types';\n\nconst SouthPane = styled.div`\n  ${({ theme }) => `\n    position: relative;\n    background-color: ${theme.colors.grayscale.light5};\n    z-index: 5;\n    overflow: hidden;\n\n    .ant-tabs {\n      height: 100%;\n    }\n\n    .ant-tabs-content-holder {\n      height: 100%;\n    }\n\n    .ant-tabs-content {\n      height: 100%;\n    }\n\n    .ant-tabs-tabpane {\n      display: flex;\n      flex-direction: column;\n      height: 100%;\n\n      .table-condensed {\n        height: 100%;\n        overflow: auto;\n        margin-bottom: ${theme.gridUnit * 4}px;\n\n        .table {\n          margin-bottom: ${theme.gridUnit * 2}px;\n        }\n      }\n\n      .pagination-container > ul[role='navigation'] {\n        margin-top: 0;\n      }\n    }\n  `}\n`;\n\nexport const DataTablesPane = ({\n  queryFormData,\n  datasource,\n  queryForce,\n  onCollapseChange,\n  chartStatus,\n  ownState,\n  errorMessage,\n  actions,\n}: DataTablesPaneProps) => {\n  const theme = useTheme();\n  const [activeTabKey, setActiveTabKey] = useState<string>(ResultTypes.Results);\n  const [isRequest, setIsRequest] = useState<Record<ResultTypes, boolean>>({\n    results: false,\n    samples: false,\n  });\n  const [panelOpen, setPanelOpen] = useState(\n    isFeatureEnabled(FeatureFlag.DATAPANEL_CLOSED_BY_DEFAULT)\n      ? false\n      : getItem(LocalStorageKeys.is_datapanel_open, false),\n  );\n\n  useEffect(() => {\n    if (!isFeatureEnabled(FeatureFlag.DATAPANEL_CLOSED_BY_DEFAULT))\n      setItem(LocalStorageKeys.is_datapanel_open, panelOpen);\n  }, [panelOpen]);\n\n  useEffect(() => {\n    if (!panelOpen) {\n      setIsRequest({\n        results: false,\n        samples: false,\n      });\n    }\n\n    if (\n      panelOpen &&\n      activeTabKey.startsWith(ResultTypes.Results) &&\n      chartStatus === 'rendered'\n    ) {\n      setIsRequest({\n        results: true,\n        samples: false,\n      });\n    }\n\n    if (panelOpen && activeTabKey === ResultTypes.Samples) {\n      setIsRequest({\n        results: false,\n        samples: true,\n      });\n    }\n  }, [panelOpen, activeTabKey, chartStatus]);\n\n  const handleCollapseChange = useCallback(\n    (isOpen: boolean) => {\n      onCollapseChange(isOpen);\n      setPanelOpen(isOpen);\n    },\n    [onCollapseChange],\n  );\n\n  const handleTabClick = useCallback(\n    (tabKey: string, e: MouseEvent) => {\n      if (!panelOpen) {\n        handleCollapseChange(true);\n      } else if (tabKey === activeTabKey) {\n        e.preventDefault();\n        handleCollapseChange(false);\n      }\n      setActiveTabKey(tabKey);\n    },\n    [activeTabKey, handleCollapseChange, panelOpen],\n  );\n\n  const CollapseButton = useMemo(() => {\n    const caretIcon = panelOpen ? (\n      <Icons.CaretUp\n        iconColor={theme.colors.grayscale.base}\n        aria-label={t('Collapse data panel')}\n      />\n    ) : (\n      <Icons.CaretDown\n        iconColor={theme.colors.grayscale.base}\n        aria-label={t('Expand data panel')}\n      />\n    );\n    return (\n      <TableControlsWrapper>\n        {panelOpen ? (\n          <span\n            role=\"button\"\n            tabIndex={0}\n            onClick={() => handleCollapseChange(false)}\n          >\n            {caretIcon}\n          </span>\n        ) : (\n          <span\n            role=\"button\"\n            tabIndex={0}\n            onClick={() => handleCollapseChange(true)}\n          >\n            {caretIcon}\n          </span>\n        )}\n      </TableControlsWrapper>\n    );\n  }, [handleCollapseChange, panelOpen, theme.colors.grayscale.base]);\n\n  const queryResultsPanes = useResultsPane({\n    errorMessage,\n    queryFormData,\n    queryForce,\n    ownState,\n    isRequest: isRequest.results,\n    actions,\n    isVisible: ResultTypes.Results === activeTabKey,\n  }).map((pane, idx) => {\n    if (idx === 0) {\n      return (\n        <Tabs.TabPane tab={t('Results')} key={ResultTypes.Results}>\n          {pane}\n        </Tabs.TabPane>\n      );\n    }\n    if (idx > 0) {\n      return (\n        <Tabs.TabPane\n          tab={t('Results %s', idx + 1)}\n          key={`${ResultTypes.Results} ${idx + 1}`}\n        >\n          {pane}\n        </Tabs.TabPane>\n      );\n    }\n    return null;\n  });\n\n  return (\n    <SouthPane data-test=\"some-purposeful-instance\">\n      <Tabs\n        fullWidth={false}\n        tabBarExtraContent={CollapseButton}\n        activeKey={panelOpen ? activeTabKey : ''}\n        onTabClick={handleTabClick}\n      >\n        {queryResultsPanes}\n        <Tabs.TabPane tab={t('Samples')} key={ResultTypes.Samples}>\n          <SamplesPane\n            datasource={datasource}\n            queryForce={queryForce}\n            isRequest={isRequest.samples}\n            actions={actions}\n            isVisible={ResultTypes.Samples === activeTabKey}\n          />\n        </Tabs.TabPane>\n      </Tabs>\n    </SouthPane>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}