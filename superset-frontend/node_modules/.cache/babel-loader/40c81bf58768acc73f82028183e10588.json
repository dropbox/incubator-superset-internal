{"ast":null,"code":"function _EMOTION_STRINGIFIED_CSS_ERROR__() {return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";} /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { css } from '@emotion/react';\nimport { useEffect, useRef, useState } from 'react';\n/**\n * Importable CSS that enables text truncation on fixed-width block\n * elements.\n */\nexport const truncationCSS = process.env.NODE_ENV === \"production\" ? { name: \"l8l8b8\", styles: \"white-space:nowrap;overflow:hidden;text-overflow:ellipsis\" } : { name: \"u6p4lb-truncationCSS\", styles: \"white-space:nowrap;overflow:hidden;text-overflow:ellipsis;label:truncationCSS;\", map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9ib2dkYW5reXJ5bGl1ay9jb2RlL29wZW5zb3VyY2Uvc3VwZXJzZXQvc3VwZXJzZXQtZnJvbnRlbmQvcGFja2FnZXMvc3VwZXJzZXQtdWktY29yZS9zcmMvaG9va3MvdXNlVHJ1bmNhdGlvbi91c2VDU1NUZXh0VHJ1bmNhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF3QmlDIiwiZmlsZSI6Ii9Vc2Vycy9ib2dkYW5reXJ5bGl1ay9jb2RlL29wZW5zb3VyY2Uvc3VwZXJzZXQvc3VwZXJzZXQtZnJvbnRlbmQvcGFja2FnZXMvc3VwZXJzZXQtdWktY29yZS9zcmMvaG9va3MvdXNlVHJ1bmNhdGlvbi91c2VDU1NUZXh0VHJ1bmNhdGlvbi50cyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0Jztcbi8qKlxuICogSW1wb3J0YWJsZSBDU1MgdGhhdCBlbmFibGVzIHRleHQgdHJ1bmNhdGlvbiBvbiBmaXhlZC13aWR0aCBibG9ja1xuICogZWxlbWVudHMuXG4gKi9cbmV4cG9ydCBjb25zdCB0cnVuY2F0aW9uQ1NTID0gY3NzIGBcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG5gO1xuLyoqXG4gKiBUaGlzIGhvb2sgZW5jYXBzdWxhdGVzIGxvZ2ljIHN1cHBvcnRpbmcgdHJ1bmNhdGlvbiBvZiB0ZXh0IHZpYVxuICogdGhlIENTUyBcInRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1wiIGZlYXR1cmUuICBHaXZlbiB0aGUgdGV4dCBjb250ZW50XG4gKiB0byBiZSBkaXNwbGF5ZWQsIHRoaXMgaG9vayByZXR1cm5zIGEgcmVmIHRvIGF0dGFjaCB0byB0aGUgdGV4dFxuICogZWxlbWVudCBhbmQgYSBib29sZWFuIGZvciB3aGV0aGVyIHRoYXQgZWxlbWVudCBpcyBjdXJyZW50bHkgdHJ1bmNhdGVkLlxuICovXG5jb25zdCB1c2VDU1NUZXh0VHJ1bmNhdGlvbiA9ICgpID0+IHtcbiAgICBjb25zdCBbaXNUcnVuY2F0ZWQsIHNldElzVHJ1bmNhdGVkXSA9IHVzZVN0YXRlKHRydWUpO1xuICAgIGNvbnN0IHJlZiA9IHVzZVJlZihudWxsKTtcbiAgICBjb25zdCBbb2Zmc2V0V2lkdGgsIHNldE9mZnNldFdpZHRoXSA9IHVzZVN0YXRlKDApO1xuICAgIGNvbnN0IFtzY3JvbGxXaWR0aCwgc2V0U2Nyb2xsV2lkdGhdID0gdXNlU3RhdGUoMCk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIHNldE9mZnNldFdpZHRoKHJlZi5jdXJyZW50Py5vZmZzZXRXaWR0aCA/PyAwKTtcbiAgICAgICAgc2V0U2Nyb2xsV2lkdGgocmVmLmN1cnJlbnQ/LnNjcm9sbFdpZHRoID8/IDApO1xuICAgIH0pO1xuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIHNldElzVHJ1bmNhdGVkKG9mZnNldFdpZHRoIDwgc2Nyb2xsV2lkdGgpO1xuICAgIH0sIFtvZmZzZXRXaWR0aCwgc2Nyb2xsV2lkdGhdKTtcbiAgICByZXR1cm4gW3JlZiwgaXNUcnVuY2F0ZWRdO1xufTtcbmV4cG9ydCBkZWZhdWx0IHVzZUNTU1RleHRUcnVuY2F0aW9uO1xuIl19 */\", toString: _EMOTION_STRINGIFIED_CSS_ERROR__ };\n\n\n\n\n/**\n * This hook encapsulates logic supporting truncation of text via\n * the CSS \"text-overflow: ellipsis;\" feature.  Given the text content\n * to be displayed, this hook returns a ref to attach to the text\n * element and a boolean for whether that element is currently truncated.\n */\nconst useCSSTextTruncation = () => {\n  const [isTruncated, setIsTruncated] = useState(true);\n  const ref = useRef(null);\n  const [offsetWidth, setOffsetWidth] = useState(0);\n  const [scrollWidth, setScrollWidth] = useState(0);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => {var _ref$current$offsetWi, _ref$current, _ref$current$scrollWi, _ref$current2;\n    setOffsetWidth((_ref$current$offsetWi = (_ref$current = ref.current) == null ? void 0 : _ref$current.offsetWidth) != null ? _ref$current$offsetWi : 0);\n    setScrollWidth((_ref$current$scrollWi = (_ref$current2 = ref.current) == null ? void 0 : _ref$current2.scrollWidth) != null ? _ref$current$scrollWi : 0);\n  });\n  useEffect(() => {\n    setIsTruncated(offsetWidth < scrollWidth);\n  }, [offsetWidth, scrollWidth]);\n  return [ref, isTruncated];\n};\nexport default useCSSTextTruncation;","map":{"version":3,"mappings":"wRAAA;;;;;;;;;;;;;;;;;;AAmBA,SAASA,GAAT,QAAoB,gBAApB;AACA,SAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AAEA;;;;AAIA,OAAO,MAAMC,aAAa,mhHAAnB;;;;;AAMP;;;;;;AAMA,MAAMC,oBAAoB,GAAG,MAGzB;EACF,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCJ,QAAQ,CAAC,IAAD,CAA9C;EACA,MAAMK,GAAG,GAAGN,MAAM,CAAI,IAAJ,CAAlB;EACA,MAAM,CAACO,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAC,CAAD,CAA9C;EACA,MAAM,CAACQ,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC,CAAD,CAA9C;EAEA;EACAF,SAAS,CAAC,MAAK;IACbS,cAAc,0CAACF,GAAG,CAACK,OAAL,qBAAC,aAAaJ,WAAd,oCAA6B,CAA7B,CAAd;IACAG,cAAc,2CAACJ,GAAG,CAACK,OAAL,qBAAC,cAAaF,WAAd,oCAA6B,CAA7B,CAAd;EACD,CAHQ,CAAT;EAKAV,SAAS,CAAC,MAAK;IACbM,cAAc,CAACE,WAAW,GAAGE,WAAf,CAAd;EACD,CAFQ,EAEN,CAACF,WAAD,EAAcE,WAAd,CAFM,CAAT;EAIA,OAAO,CAACH,GAAD,EAAMF,WAAN,CAAP;AACD,CApBD;AAsBA,eAAeD,oBAAf","names":["css","useEffect","useRef","useState","truncationCSS","useCSSTextTruncation","isTruncated","setIsTruncated","ref","offsetWidth","setOffsetWidth","scrollWidth","setScrollWidth","current"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/hooks/useTruncation/useCSSTextTruncation.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { css } from '@emotion/react';\nimport React, { useEffect, useRef, useState } from 'react';\n\n/**\n * Importable CSS that enables text truncation on fixed-width block\n * elements.\n */\nexport const truncationCSS = css`\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\n/**\n * This hook encapsulates logic supporting truncation of text via\n * the CSS \"text-overflow: ellipsis;\" feature.  Given the text content\n * to be displayed, this hook returns a ref to attach to the text\n * element and a boolean for whether that element is currently truncated.\n */\nconst useCSSTextTruncation = <T extends HTMLElement>(): [\n  React.RefObject<T>,\n  boolean,\n] => {\n  const [isTruncated, setIsTruncated] = useState(true);\n  const ref = useRef<T>(null);\n  const [offsetWidth, setOffsetWidth] = useState(0);\n  const [scrollWidth, setScrollWidth] = useState(0);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => {\n    setOffsetWidth(ref.current?.offsetWidth ?? 0);\n    setScrollWidth(ref.current?.scrollWidth ?? 0);\n  });\n\n  useEffect(() => {\n    setIsTruncated(offsetWidth < scrollWidth);\n  }, [offsetWidth, scrollWidth]);\n\n  return [ref, isTruncated];\n};\n\nexport default useCSSTextTruncation;\n"]},"metadata":{},"sourceType":"module"}