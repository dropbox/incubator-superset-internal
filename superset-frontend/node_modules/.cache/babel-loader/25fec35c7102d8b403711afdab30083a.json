{"ast":null,"code":"import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport memoizeOne from 'memoize-one';\nimport { DatasourceType, getChartControlPanelRegistry } from '@superset-ui/core';\nimport { expandControlConfig, isControlPanelSectionConfig } from '@superset-ui/chart-controls';\nimport * as SECTIONS from 'src/explore/controlPanels/sections';\nconst getMemoizedSectionsToRender = memoizeOne((datasourceType, controlPanelConfig) => {\n  const { sectionOverrides = {}, controlOverrides, controlPanelSections = [] } = controlPanelConfig;\n  // default control panel sections\n  const sections = { ...SECTIONS };\n  // apply section overrides\n  Object.entries(sectionOverrides).forEach((_ref) => {let [section, overrides] = _ref;\n    if (typeof overrides === 'object' && overrides.constructor === Object) {\n      sections[section] = {\n        ...sections[section],\n        ...overrides };\n\n    } else\n    {\n      sections[section] = overrides;\n    }\n  });\n  const { datasourceAndVizType } = sections;\n  // list of datasource-specific controls that should be removed if the datasource is a specific type\n  const filterControlsForTypes = [DatasourceType.Query, DatasourceType.Table];\n  const invalidControls = _includesInstanceProperty(filterControlsForTypes).call(filterControlsForTypes, datasourceType) ?\n  ['granularity'] :\n  ['granularity_sqla', 'time_grain_sqla'];\n  return [datasourceAndVizType].\n  concat(controlPanelSections.filter(isControlPanelSectionConfig)).\n  map((section) => {\n    const { controlSetRows } = section;\n    return {\n      ...section,\n      controlSetRows: (controlSetRows == null ? void 0 : controlSetRows.map((row) => row.\n      filter((control) => typeof control !== 'string' ||\n      !_includesInstanceProperty(invalidControls).call(invalidControls, control)).\n      map((item) => expandControlConfig(item, controlOverrides)))) || [] };\n\n  });\n});\n/**\n * Get the clean and processed control panel sections\n */\nexport function getSectionsToRender(vizType, datasourceType) {\n  const controlPanelConfig =\n  // TODO: update `chartControlPanelRegistry` type to use ControlPanelConfig\n  getChartControlPanelRegistry().get(vizType) || {};\n  return getMemoizedSectionsToRender(datasourceType, controlPanelConfig);\n}","map":{"version":3,"mappings":"iGAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,UAAP,MAAuB,aAAvB;AACA,SACEC,cADF,EAEEC,4BAFF,QAGO,mBAHP;AAIA,SAEEC,mBAFF,EAGEC,2BAHF,QAIO,6BAJP;AAMA,OAAO,KAAKC,QAAZ,MAA0B,oCAA1B;AAEA,MAAMC,2BAA2B,GAAGN,UAAU,CAC5C,CAACO,cAAD,EAAiCC,kBAAjC,KAA2E;EACzE,MAAM,EACJC,gBAAgB,GAAG,EADf,EAEJC,gBAFI,EAGJC,oBAAoB,GAAG,EAHnB,KAIFH,kBAJJ;EAMA;EACA,MAAMI,QAAQ,GAAG,EAAE,GAAGP,QAAL,EAAjB;EAEA;EACAQ,MAAM,CAACC,OAAP,CAAeL,gBAAf,EAAiCM,OAAjC,CAAyC,UAAyB,KAAxB,CAACC,OAAD,EAAUC,SAAV,CAAwB;IAChE,IAAI,OAAOA,SAAP,KAAqB,QAArB,IAAiCA,SAAS,CAACC,WAAV,KAA0BL,MAA/D,EAAuE;MACrED,QAAQ,CAACI,OAAD,CAAR,GAAoB;QAClB,GAAGJ,QAAQ,CAACI,OAAD,CADO;QAElB,GAAGC,SAFe,EAApB;;IAID,CALD;IAKO;MACLL,QAAQ,CAACI,OAAD,CAAR,GAAoBC,SAApB;IACD;EACF,CATD;EAWA,MAAM,EAAEE,oBAAF,KAA2BP,QAAjC;EAEA;EACA,MAAMQ,sBAAsB,GAAG,CAACnB,cAAc,CAACoB,KAAhB,EAAuBpB,cAAc,CAACqB,KAAtC,CAA/B;EACA,MAAMC,eAAe,GAAG,gDAAsB,MAAtB,uBAAsB,EAAUhB,cAAV,CAAtB;EACpB,CAAC,aAAD,CADoB;EAEpB,CAAC,kBAAD,EAAqB,iBAArB,CAFJ;EAIA,OAAO,CAACY,oBAAD;EACJK,MADI,CACGb,oBAAoB,CAACc,MAArB,CAA4BrB,2BAA5B,CADH;EAEJsB,GAFI,CAEA,QAAO,KAAG;IACb,MAAM,EAAEC,cAAF,KAAqBX,OAA3B;IACA,OAAO;MACL,GAAGA,OADE;MAELW,cAAc,EACZ,eAAc,QAAd,0BAAc,CAAED,GAAhB,CAAoB,IAAG,KACrBE,GAAG;MACAH,MADH,CAEI,QAAO,KACL,OAAOI,OAAP,KAAmB,QAAnB;MACA,CAAC,yCAAe,MAAf,gBAAe,EAAUA,OAAV,CAJtB;MAMGH,GANH,CAMO,KAAI,KAAIvB,mBAAmB,CAAC2B,IAAD,EAAOpB,gBAAP,CANlC,CADF,MAQK,EAXF,EAAP;;EAaD,CAjBI,CAAP;AAkBD,CAjD2C,CAA9C;AAoDA;;;AAGA,OAAM,SAAUqB,mBAAV,CACJC,OADI,EAEJzB,cAFI,EAE0B;EAE9B,MAAMC,kBAAkB;EACtB;EACCN,4BAA4B,GAAG+B,GAA/B,CAAmCD,OAAnC,KAAsE,EAFzE;EAGA,OAAO1B,2BAA2B,CAACC,cAAD,EAAiBC,kBAAjB,CAAlC;AACD","names":["memoizeOne","DatasourceType","getChartControlPanelRegistry","expandControlConfig","isControlPanelSectionConfig","SECTIONS","getMemoizedSectionsToRender","datasourceType","controlPanelConfig","sectionOverrides","controlOverrides","controlPanelSections","sections","Object","entries","forEach","section","overrides","constructor","datasourceAndVizType","filterControlsForTypes","Query","Table","invalidControls","concat","filter","map","controlSetRows","row","control","item","getSectionsToRender","vizType","get"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/explore/controlUtils/getSectionsToRender.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport memoizeOne from 'memoize-one';\nimport {\n  DatasourceType,\n  getChartControlPanelRegistry,\n} from '@superset-ui/core';\nimport {\n  ControlPanelConfig,\n  expandControlConfig,\n  isControlPanelSectionConfig,\n} from '@superset-ui/chart-controls';\n\nimport * as SECTIONS from 'src/explore/controlPanels/sections';\n\nconst getMemoizedSectionsToRender = memoizeOne(\n  (datasourceType: DatasourceType, controlPanelConfig: ControlPanelConfig) => {\n    const {\n      sectionOverrides = {},\n      controlOverrides,\n      controlPanelSections = [],\n    } = controlPanelConfig;\n\n    // default control panel sections\n    const sections = { ...SECTIONS };\n\n    // apply section overrides\n    Object.entries(sectionOverrides).forEach(([section, overrides]) => {\n      if (typeof overrides === 'object' && overrides.constructor === Object) {\n        sections[section] = {\n          ...sections[section],\n          ...overrides,\n        };\n      } else {\n        sections[section] = overrides;\n      }\n    });\n\n    const { datasourceAndVizType } = sections;\n\n    // list of datasource-specific controls that should be removed if the datasource is a specific type\n    const filterControlsForTypes = [DatasourceType.Query, DatasourceType.Table];\n    const invalidControls = filterControlsForTypes.includes(datasourceType)\n      ? ['granularity']\n      : ['granularity_sqla', 'time_grain_sqla'];\n\n    return [datasourceAndVizType]\n      .concat(controlPanelSections.filter(isControlPanelSectionConfig))\n      .map(section => {\n        const { controlSetRows } = section;\n        return {\n          ...section,\n          controlSetRows:\n            controlSetRows?.map(row =>\n              row\n                .filter(\n                  control =>\n                    typeof control !== 'string' ||\n                    !invalidControls.includes(control),\n                )\n                .map(item => expandControlConfig(item, controlOverrides)),\n            ) || [],\n        };\n      });\n  },\n);\n\n/**\n * Get the clean and processed control panel sections\n */\nexport function getSectionsToRender(\n  vizType: string,\n  datasourceType: DatasourceType,\n) {\n  const controlPanelConfig =\n    // TODO: update `chartControlPanelRegistry` type to use ControlPanelConfig\n    (getChartControlPanelRegistry().get(vizType) as ControlPanelConfig) || {};\n  return getMemoizedSectionsToRender(datasourceType, controlPanelConfig);\n}\n"]},"metadata":{},"sourceType":"module"}