{"ast":null,"code":"/* eslint-disable class-methods-use-this */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport moment from 'moment';\nimport { formatNumber, formatTime, getTextDimension, useTheme } from '@superset-ui/core';\nimport { GridRows } from '@visx/grid';\nimport { scaleLinear } from '@visx/scale';\nimport { Axis, LineSeries, Tooltip, XYChart, buildChartTheme } from '@visx/xychart';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst MARGIN = {\n  top: 8,\n  right: 8,\n  bottom: 8,\n  left: 8 };\n\nfunction getSparklineTextWidth(text) {\n  return getTextDimension({\n    text,\n    style: {\n      fontSize: '12px',\n      fontWeight: 200,\n      letterSpacing: 0.4 } }).\n\n  width + 5;\n}\nfunction isValidBoundValue(value) {\n  return value !== null &&\n  value !== undefined &&\n  value !== '' &&\n  !Number.isNaN(value);\n}\nconst SparklineCell = (_ref) => {let { ariaLabel, dataKey, data, width = 300, height = 50, numberFormat = '', dateFormat = '', yAxisBounds = [undefined, undefined], showYAxis = false, entries = [] } = _ref;\n  const theme = useTheme();\n  const xyTheme = buildChartTheme({\n    backgroundColor: `${theme.colors.grayscale.light5}`,\n    colors: [`${theme.colors.grayscale.base}`],\n    gridColor: `${theme.colors.grayscale.light1}`,\n    gridColorDark: `${theme.colors.grayscale.base}`,\n    tickLength: 6 });\n\n  const yScaleConfig = {\n    type: 'linear',\n    zero: false };\n\n  let hasMinBound = false;\n  let hasMaxBound = false;\n  let min = data.reduce((acc, current) => Math.min(acc, current), data[0]);\n  let max = data.reduce((acc, current) => Math.max(acc, current), data[0]);\n  if (yAxisBounds) {\n    const [minBound, maxBound] = yAxisBounds;\n    hasMinBound = isValidBoundValue(minBound);\n    if (hasMinBound) {\n      if (minBound !== undefined && minBound <= 0) {\n        yScaleConfig.zero = true;\n      }\n      min = minBound || min;\n    }\n    hasMaxBound = isValidBoundValue(maxBound);\n    if (hasMaxBound) {\n      max = maxBound || max;\n    }\n    yScaleConfig.domain = [min, max];\n  }\n  let minLabel;\n  let maxLabel;\n  let labelLength = 0;\n  if (showYAxis) {\n    yScaleConfig.domain = [min, max];\n    minLabel = formatNumber(numberFormat, min);\n    maxLabel = formatNumber(numberFormat, max);\n    labelLength = Math.max(getSparklineTextWidth(minLabel), getSparklineTextWidth(maxLabel));\n  }\n  const margin = {\n    ...MARGIN,\n    right: MARGIN.right + labelLength };\n\n  const innerWidth = width - margin.left - margin.right;\n  const chartData = data.map((num, idx) => ({\n    x: idx,\n    y: num }));\n\n  const xAccessor = (d) => d.x;\n  const yAccessor = (d) => d.y;\n  return ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(XYChart, { accessibilityLabel: ariaLabel, width: width, height: height, margin: margin, yScale: {\n      ...yScaleConfig },\n    xScale: { type: 'band', paddingInner: 0.5 }, theme: xyTheme },\n  showYAxis && ___EmotionJSX(Axis, { hideAxisLine: true, hideTicks: true, numTicks: 2, orientation: \"right\", tickFormat: (d) => formatNumber(numberFormat, d), tickValues: [min, max] }),\n  showYAxis && min !== undefined && max !== undefined && ___EmotionJSX(GridRows, { left: margin.left, scale: scaleLinear({\n      range: [height - margin.top, margin.bottom],\n      domain: [min, max] }),\n    width: innerWidth, strokeDasharray: \"3 3\", stroke: `${theme.colors.grayscale.light1}`, tickValues: [min, max] }),\n  ___EmotionJSX(LineSeries, { data: chartData, dataKey: dataKey, xAccessor: xAccessor, yAccessor: yAccessor }),\n  ___EmotionJSX(Tooltip, { glyphStyle: { strokeWidth: 1 }, showDatumGlyph: true, showVerticalCrosshair: true, snapTooltipToDatumX: true, snapTooltipToDatumY: true, verticalCrosshairStyle: {\n      stroke: `${theme.colors.grayscale.dark1}`,\n      strokeDasharray: '3 3',\n      strokeWidth: 1 },\n    renderTooltip: (_ref2) => {let { tooltipData } = _ref2;\n      const idx = tooltipData == null ? void 0 : tooltipData.datumByKey[dataKey].index;\n      return ___EmotionJSX(\"div\", null,\n      ___EmotionJSX(\"strong\", null,\n      idx !== undefined && formatNumber(numberFormat, data[idx])),\n\n      ___EmotionJSX(\"div\", null,\n      idx !== undefined &&\n      formatTime(dateFormat, moment.utc(entries[idx].time).toDate())));\n\n\n    } })),\n\n  ___EmotionJSX(\"style\", null,\n  `svg:not(:root) {\n            overflow: visible;\n          }`));\n\n\n};\nexport default SparklineCell;","map":{"version":3,"mappings":"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","names":["React","moment","formatNumber","formatTime","getTextDimension","useTheme","GridRows","scaleLinear","Axis","LineSeries","Tooltip","XYChart","buildChartTheme","MARGIN","top","right","bottom","left","getSparklineTextWidth","text","style","fontSize","fontWeight","letterSpacing","width","isValidBoundValue","value","undefined","Number","isNaN","SparklineCell","ariaLabel","dataKey","data","height","numberFormat","dateFormat","yAxisBounds","showYAxis","entries","theme","xyTheme","backgroundColor","colors","grayscale","light5","base","gridColor","light1","gridColorDark","tickLength","yScaleConfig","type","zero","hasMinBound","hasMaxBound","min","reduce","acc","current","Math","max","minBound","maxBound","domain","minLabel","maxLabel","labelLength","margin","innerWidth","chartData","map","num","idx","x","y","xAccessor","d","yAccessor","paddingInner","range","strokeWidth","stroke","dark1","strokeDasharray","tooltipData","datumByKey","index","utc","time","toDate"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/visualizations/TimeTable/SparklineCell.tsx"],"sourcesContent":["/* eslint-disable class-methods-use-this */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport moment from 'moment';\nimport {\n  formatNumber,\n  formatTime,\n  getTextDimension,\n  useTheme,\n} from '@superset-ui/core';\nimport { GridRows } from '@visx/grid';\nimport { LinearScaleConfig, scaleLinear } from '@visx/scale';\nimport { AxisScaleOutput } from '@visx/axis';\nimport {\n  Axis,\n  LineSeries,\n  Tooltip,\n  XYChart,\n  buildChartTheme,\n} from '@visx/xychart';\n\ninterface Props {\n  ariaLabel: string;\n  dataKey: string;\n  className?: string;\n  data: Array<number>;\n  entries: Array<any>;\n  height: number;\n  numberFormat: string;\n  dateFormat: string;\n  renderTooltip: ({ index }: { index: number }) => React.ReactNode;\n  showYAxis: boolean;\n  width: number;\n  yAxisBounds: Array<number | undefined>;\n}\n\nconst MARGIN = {\n  top: 8,\n  right: 8,\n  bottom: 8,\n  left: 8,\n};\n\nfunction getSparklineTextWidth(text: string) {\n  return (\n    getTextDimension({\n      text,\n      style: {\n        fontSize: '12px',\n        fontWeight: 200,\n        letterSpacing: 0.4,\n      },\n    }).width + 5\n  );\n}\n\nfunction isValidBoundValue(value?: number | string) {\n  return (\n    value !== null &&\n    value !== undefined &&\n    value !== '' &&\n    !Number.isNaN(value)\n  );\n}\n\nconst SparklineCell = ({\n  ariaLabel,\n  dataKey,\n  data,\n  width = 300,\n  height = 50,\n  numberFormat = '',\n  dateFormat = '',\n  yAxisBounds = [undefined, undefined],\n  showYAxis = false,\n  entries = [],\n}: Props) => {\n  const theme = useTheme();\n  const xyTheme = buildChartTheme({\n    backgroundColor: `${theme.colors.grayscale.light5}`,\n    colors: [`${theme.colors.grayscale.base}`],\n    gridColor: `${theme.colors.grayscale.light1}`,\n    gridColorDark: `${theme.colors.grayscale.base}`,\n    tickLength: 6,\n  });\n\n  const yScaleConfig: LinearScaleConfig<AxisScaleOutput> = {\n    type: 'linear',\n    zero: false,\n  };\n  let hasMinBound = false;\n  let hasMaxBound = false;\n  let min: number = data.reduce(\n    (acc, current) => Math.min(acc, current),\n    data[0],\n  );\n  let max: number = data.reduce(\n    (acc, current) => Math.max(acc, current),\n    data[0],\n  );\n\n  if (yAxisBounds) {\n    const [minBound, maxBound] = yAxisBounds;\n    hasMinBound = isValidBoundValue(minBound);\n    if (hasMinBound) {\n      if (minBound !== undefined && minBound <= 0) {\n        yScaleConfig.zero = true;\n      }\n      min = minBound || min;\n    }\n\n    hasMaxBound = isValidBoundValue(maxBound);\n    if (hasMaxBound) {\n      max = maxBound || max;\n    }\n    yScaleConfig.domain = [min, max];\n  }\n\n  let minLabel: string;\n  let maxLabel: string;\n  let labelLength = 0;\n  if (showYAxis) {\n    yScaleConfig.domain = [min, max];\n    minLabel = formatNumber(numberFormat, min);\n    maxLabel = formatNumber(numberFormat, max);\n    labelLength = Math.max(\n      getSparklineTextWidth(minLabel),\n      getSparklineTextWidth(maxLabel),\n    );\n  }\n\n  const margin = {\n    ...MARGIN,\n    right: MARGIN.right + labelLength,\n  };\n  const innerWidth = width - margin.left - margin.right;\n  const chartData = data.map((num, idx) => ({\n    x: idx,\n    y: num,\n  }));\n\n  const xAccessor = (d: any) => d.x;\n  const yAccessor = (d: any) => d.y;\n\n  return (\n    <>\n      <XYChart\n        accessibilityLabel={ariaLabel}\n        width={width}\n        height={height}\n        margin={margin}\n        yScale={{\n          ...yScaleConfig,\n        }}\n        xScale={{ type: 'band', paddingInner: 0.5 }}\n        theme={xyTheme}\n      >\n        {showYAxis && (\n          <Axis\n            hideAxisLine\n            hideTicks\n            numTicks={2}\n            orientation=\"right\"\n            tickFormat={(d: any) => formatNumber(numberFormat, d)}\n            tickValues={[min, max]}\n          />\n        )}\n        {showYAxis && min !== undefined && max !== undefined && (\n          <GridRows\n            left={margin.left}\n            scale={scaleLinear({\n              range: [height - margin.top, margin.bottom],\n              domain: [min, max],\n            })}\n            width={innerWidth}\n            strokeDasharray=\"3 3\"\n            stroke={`${theme.colors.grayscale.light1}`}\n            tickValues={[min, max]}\n          />\n        )}\n        <LineSeries\n          data={chartData}\n          dataKey={dataKey}\n          xAccessor={xAccessor}\n          yAccessor={yAccessor}\n        />\n        <Tooltip\n          glyphStyle={{ strokeWidth: 1 }}\n          showDatumGlyph\n          showVerticalCrosshair\n          snapTooltipToDatumX\n          snapTooltipToDatumY\n          verticalCrosshairStyle={{\n            stroke: `${theme.colors.grayscale.dark1}`,\n            strokeDasharray: '3 3',\n            strokeWidth: 1,\n          }}\n          renderTooltip={({ tooltipData }) => {\n            const idx = tooltipData?.datumByKey[dataKey].index;\n            return (\n              <div>\n                <strong>\n                  {idx !== undefined && formatNumber(numberFormat, data[idx])}\n                </strong>\n                <div>\n                  {idx !== undefined &&\n                    formatTime(\n                      dateFormat,\n                      moment.utc(entries[idx].time).toDate(),\n                    )}\n                </div>\n              </div>\n            );\n          }}\n        />\n      </XYChart>\n      <style>\n        {`svg:not(:root) {\n            overflow: visible;\n          }`}\n      </style>\n    </>\n  );\n};\n\nexport default SparklineCell;\n"]},"metadata":{},"sourceType":"module"}