{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useRef } from 'react';\n/*\n * Functional components and setTimeout with useState do not play well\n * and the setTimeout callback typically has stale state from a closure\n * The useInterval function solves this issue.\n * more info: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n */\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef(callback);\n  // Remember the latest function.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback == null ? void 0 : savedCallback.current == null ? void 0 : savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n    return () => {};\n  }, [delay]);\n}\nexport default useInterval;","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AAEA;;;;;;AAMA,SAASC,WAAT,CAAqBC,QAArB,EAAyCC,KAAzC,EAA6D;EAC3D,MAAMC,aAAa,GAAGJ,MAAM,CAAWE,QAAX,CAA5B;EACA;EACAH,SAAS,CAAC,MAAK;IACbK,aAAa,CAACC,OAAd,GAAwBH,QAAxB;EACD,CAFQ,EAEN,CAACA,QAAD,CAFM,CAAT;EAIA;EACAH,SAAS,CAAC,MAAK;IACb,SAASO,IAAT,GAAa;MACXF,aAAa,QAAb,yBAAa,CAAEC,OAAf,iCAAa,CAAEA,OAAf;IACD;IACD,IAAIF,KAAK,KAAK,IAAd,EAAoB;MAClB,MAAMI,EAAE,GAAGC,WAAW,CAACF,IAAD,EAAOH,KAAP,CAAtB;MACA,OAAO,MAAMM,aAAa,CAACF,EAAD,CAA1B;IACD;IACD,OAAO,MAAK,CAAG,CAAf;EACD,CATQ,EASN,CAACJ,KAAD,CATM,CAAT;AAUD;AAED,eAAeF,WAAf","names":["useEffect","useRef","useInterval","callback","delay","savedCallback","current","tick","id","setInterval","clearInterval"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/SqlLab/utils/useInterval.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useRef } from 'react';\n\n/*\n * Functional components and setTimeout with useState do not play well\n * and the setTimeout callback typically has stale state from a closure\n * The useInterval function solves this issue.\n * more info: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n */\nfunction useInterval(callback: Function, delay: number | null): void {\n  const savedCallback = useRef<Function>(callback);\n  // Remember the latest function.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback?.current?.();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n    return () => {};\n  }, [delay]);\n}\n\nexport default useInterval;\n"]},"metadata":{},"sourceType":"module"}