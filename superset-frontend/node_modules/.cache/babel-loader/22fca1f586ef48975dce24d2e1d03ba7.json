{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { format as d3Format, formatLocale } from 'd3-format';\nimport { isRequired } from '../../utils';\nimport NumberFormatter from '../NumberFormatter';\nexport default function createD3NumberFormatter(config) {\n  const { description, formatString = isRequired('config.formatString'), label, locale } = config;\n  let formatFunc;\n  let isInvalid = false;\n  try {\n    formatFunc =\n    typeof locale === 'undefined' ?\n    d3Format(formatString) :\n    formatLocale(locale).format(formatString);\n  }\n  catch (error) {\n    formatFunc = (value) => `${value} (Invalid format: ${formatString})`;\n    isInvalid = true;\n  }\n  return new NumberFormatter({\n    description,\n    formatFunc,\n    id: formatString,\n    isInvalid,\n    label });\n\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,SACEA,MAAM,IAAIC,QADZ,EAEEC,YAFF,QAIO,WAJP;AAKA,SAASC,UAAT,QAA2B,aAA3B;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AAGA,eAAc,SAAUC,uBAAV,CAAkCC,MAAlC,EAKb;EACC,MAAM,EACJC,WADI,EAEJC,YAAY,GAAGL,UAAU,CAAC,qBAAD,CAFrB,EAGJM,KAHI,EAIJC,MAJI,KAKFJ,MALJ;EAOA,IAAIK,UAAJ;EACA,IAAIC,SAAS,GAAG,KAAhB;EAEA,IAAI;IACFD,UAAU;IACR,OAAOD,MAAP,KAAkB,WAAlB;IACIT,QAAQ,CAACO,YAAD,CADZ;IAEIN,YAAY,CAACQ,MAAD,CAAZ,CAAqBV,MAArB,CAA4BQ,YAA5B,CAHN;EAID;EAAC,OAAOK,KAAP,EAAc;IACdF,UAAU,GAAG,MAAK,KAAI,GAAGG,KAAK,qBAAqBN,YAAY,GAA/D;IACAI,SAAS,GAAG,IAAZ;EACD;EAED,OAAO,IAAIR,eAAJ,CAAoB;IACzBG,WADyB;IAEzBI,UAFyB;IAGzBI,EAAE,EAAEP,YAHqB;IAIzBI,SAJyB;IAKzBH,KALyB,EAApB,CAAP;;AAOD","names":["format","d3Format","formatLocale","isRequired","NumberFormatter","createD3NumberFormatter","config","description","formatString","label","locale","formatFunc","isInvalid","error","value","id"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/packages/superset-ui-core/src/number-format/factories/createD3NumberFormatter.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  format as d3Format,\n  formatLocale,\n  FormatLocaleDefinition,\n} from 'd3-format';\nimport { isRequired } from '../../utils';\nimport NumberFormatter from '../NumberFormatter';\nimport { NumberFormatFunction } from '../types';\n\nexport default function createD3NumberFormatter(config: {\n  description?: string;\n  formatString: string;\n  label?: string;\n  locale?: FormatLocaleDefinition;\n}) {\n  const {\n    description,\n    formatString = isRequired('config.formatString'),\n    label,\n    locale,\n  } = config;\n\n  let formatFunc: NumberFormatFunction;\n  let isInvalid = false;\n\n  try {\n    formatFunc =\n      typeof locale === 'undefined'\n        ? d3Format(formatString)\n        : formatLocale(locale).format(formatString);\n  } catch (error) {\n    formatFunc = value => `${value} (Invalid format: ${formatString})`;\n    isInvalid = true;\n  }\n\n  return new NumberFormatter({\n    description,\n    formatFunc,\n    id: formatString,\n    isInvalid,\n    label,\n  });\n}\n"]},"metadata":{},"sourceType":"module"}