{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { useDrag } from 'react-dnd';\nimport { css, styled } from '@superset-ui/core';\nimport { DndItemType } from 'src/explore/components/DndItemType';\nimport { StyledColumnOption, StyledMetricOption } from 'src/explore/components/optionRenderers';\nimport Icons from 'src/components/Icons';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst DatasourceItemContainer = styled.div`\n  ${(_ref) => {let { theme } = _ref;return css`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    width: 100%;\n    height: ${theme.gridUnit * 6}px;\n    padding: 0 ${theme.gridUnit}px;\n\n    // hack to make the drag preview image corners rounded\n    transform: translate(0, 0);\n    background-color: inherit;\n    border-radius: 4px;\n\n    > div {\n      min-width: 0;\n      margin-right: ${theme.gridUnit * 2}px;\n    }\n  `;}}\n`;\nexport default function DatasourcePanelDragOption(props) {\n  const { labelRef, showTooltip, type, value } = props;\n  const [{ isDragging }, drag] = useDrag({\n    item: {\n      value: props.value,\n      type: props.type },\n\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging() }) });\n\n\n  const optionProps = {\n    labelRef,\n    showTooltip: !isDragging && showTooltip,\n    showType: true };\n\n  return ___EmotionJSX(DatasourceItemContainer, { ref: drag },\n  type === DndItemType.Column ? ___EmotionJSX(StyledColumnOption, _extends({ column: value }, optionProps)) : ___EmotionJSX(StyledMetricOption, _extends({ metric: value }, optionProps)),\n  ___EmotionJSX(Icons.Drag, null));\n\n}","map":{"version":3,"mappings":"+DAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,GAAT,EAAsBC,MAAtB,QAAoC,mBAApC;AAEA,SAASC,WAAT,QAA4B,oCAA5B;AACA,SACEC,kBADF,EAEEC,kBAFF,QAGO,wCAHP;AAIA,OAAOC,KAAP,MAAkB,sBAAlB,C;AAIA,MAAMC,uBAAuB,GAAGL,MAAM,CAACM,GAAG;IACtC,eAAC,EAAEC,KAAF,EAAD,eAAeR,GAAG;;;;;cAKRQ,KAAK,CAACC,QAAN,GAAiB,CAAC;iBACfD,KAAK,CAACC,QAAQ;;;;;;;;;sBASTD,KAAK,CAACC,QAAN,GAAiB,CAAC;;GAfpC,EAiBD;CAlBH;AA8BA,eAAc,SAAUC,yBAAV,CACZC,KADY,EACyB;EAErC,MAAM,EAAEC,QAAF,EAAYC,WAAZ,EAAyBC,IAAzB,EAA+BC,KAA/B,KAAyCJ,KAA/C;EACA,MAAM,CAAC,EAAEK,UAAF,EAAD,EAAiBC,IAAjB,IAAyBlB,OAAO,CAAC;IACrCmB,IAAI,EAAE;MACJH,KAAK,EAAEJ,KAAK,CAACI,KADT;MAEJD,IAAI,EAAEH,KAAK,CAACG,IAFR,EAD+B;;IAKrCK,OAAO,EAAE,QAAO,MAAK;MACnBH,UAAU,EAAEI,OAAO,CAACJ,UAAR,EADO,EAAL,CALqB,EAAD,CAAtC;;;EAUA,MAAMK,WAAW,GAAG;IAClBT,QADkB;IAElBC,WAAW,EAAE,CAACG,UAAD,IAAeH,WAFV;IAGlBS,QAAQ,EAAE,IAHQ,EAApB;;EAMA,OACE,cAAC,uBAAD,IAA+D,GAAG,EAAEL,IAApE;EACGH,IAAI,KAAKZ,WAAW,CAACqB,MAArB,GACC,cAAC,kBAAD,aAAoB,MAAM,EAAER,KAA5B,IAAqDM,WAArD,EADD,GAGC,cAAC,kBAAD,aAAoB,MAAM,EAAEN,KAA5B,IAAuDM,WAAvD,EAJJ;EAME,cAAC,KAAD,CAAO,IAAP,OANF,CADF;;AAUD","names":["React","useDrag","css","styled","DndItemType","StyledColumnOption","StyledMetricOption","Icons","DatasourceItemContainer","div","theme","gridUnit","DatasourcePanelDragOption","props","labelRef","showTooltip","type","value","isDragging","drag","item","collect","monitor","optionProps","showType","Column"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/explore/components/DatasourcePanel/DatasourcePanelDragOption/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { useDrag } from 'react-dnd';\nimport { css, Metric, styled } from '@superset-ui/core';\nimport { ColumnMeta } from '@superset-ui/chart-controls';\nimport { DndItemType } from 'src/explore/components/DndItemType';\nimport {\n  StyledColumnOption,\n  StyledMetricOption,\n} from 'src/explore/components/optionRenderers';\nimport Icons from 'src/components/Icons';\n\nimport { DatasourcePanelDndItem } from '../types';\n\nconst DatasourceItemContainer = styled.div`\n  ${({ theme }) => css`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    width: 100%;\n    height: ${theme.gridUnit * 6}px;\n    padding: 0 ${theme.gridUnit}px;\n\n    // hack to make the drag preview image corners rounded\n    transform: translate(0, 0);\n    background-color: inherit;\n    border-radius: 4px;\n\n    > div {\n      min-width: 0;\n      margin-right: ${theme.gridUnit * 2}px;\n    }\n  `}\n`;\n\ninterface DatasourcePanelDragOptionProps extends DatasourcePanelDndItem {\n  labelRef?: React.RefObject<any>;\n  showTooltip?: boolean;\n}\n\ntype MetricOption = Omit<Metric, 'id'> & {\n  label?: string;\n};\n\nexport default function DatasourcePanelDragOption(\n  props: DatasourcePanelDragOptionProps,\n) {\n  const { labelRef, showTooltip, type, value } = props;\n  const [{ isDragging }, drag] = useDrag({\n    item: {\n      value: props.value,\n      type: props.type,\n    },\n    collect: monitor => ({\n      isDragging: monitor.isDragging(),\n    }),\n  });\n\n  const optionProps = {\n    labelRef,\n    showTooltip: !isDragging && showTooltip,\n    showType: true,\n  };\n\n  return (\n    <DatasourceItemContainer data-test=\"DatasourcePanelDragOption\" ref={drag}>\n      {type === DndItemType.Column ? (\n        <StyledColumnOption column={value as ColumnMeta} {...optionProps} />\n      ) : (\n        <StyledMetricOption metric={value as MetricOption} {...optionProps} />\n      )}\n      <Icons.Drag />\n    </DatasourceItemContainer>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}