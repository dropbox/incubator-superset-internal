{"ast":null,"code":"import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { styled, useTheme } from '@superset-ui/core';\nimport React, { useMemo } from 'react';\nimport Icons from 'src/components/Icons';\nimport { DropdownButton } from 'src/components/DropdownButton';\nimport { Menu } from 'src/components/Menu';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst { SubMenu } = Menu;\nconst StyledDropdownButton = styled(DropdownButton)`\n  button.ant-btn:first-of-type {\n    display: none;\n  }\n  > button.ant-btn:nth-child(2) {\n    display: inline-flex;\n    background-color: transparent !important;\n    height: unset;\n    padding: 0;\n    border: none;\n    width: auto !important;\n\n    .anticon {\n      line-height: 0;\n    }\n    &:after {\n      box-shadow: none !important;\n    }\n  }\n`;\nconst StyledMenu = styled(Menu)`\n  ${(_ref) => {let { theme } = _ref;return `\n    .info {\n      font-size: ${theme.typography.sizes.s}px;\n      color: ${theme.colors.grayscale.base};\n      padding: ${theme.gridUnit}px ${theme.gridUnit * 3}px ${theme.gridUnit}px ${theme.gridUnit * 3}px;\n    }\n    .ant-dropdown-menu-item-selected {\n      color: ${theme.colors.grayscale.dark1};\n      background-color: ${theme.colors.primary.light5};\n    }\n  `;}}\n`;\nconst StyleMenuItem = styled(Menu.Item)`\n  display: flex;\n  justify-content: space-between;\n  > span {\n    width: 100%;\n  }\n  border-bottom: ${(_ref2) => {let { divider, theme } = _ref2;return divider ? `1px solid ${theme.colors.grayscale.light3};` : 'none;';}};\n`;\nconst StyleSubmenuItem = styled.div`\n  display: flex;\n  justify-content: space-between;\n  > span {\n    width: 100%;\n  }\n`;\nexport default ((props) => {\n  const theme = useTheme();\n  const { icon, info, menuItems, selectedKeys, onSelect } = props;\n  const menuItem = useMemo(() => (label, key, divider) => ___EmotionJSX(StyleMenuItem, { key: key, divider: divider },\n  ___EmotionJSX(StyleSubmenuItem, null,\n  ___EmotionJSX(\"span\", null, label),\n  (selectedKeys == null ? void 0 : _includesInstanceProperty(selectedKeys).call(selectedKeys, key)) && ___EmotionJSX(Icons.Check, { iconColor: theme.colors.primary.base, className: \"tick-menu-item\", iconSize: \"xl\" }))),\n\n  [selectedKeys, theme.colors.primary.base]);\n  const overlayMenu = useMemo(() => ___EmotionJSX(StyledMenu, { selectedKeys: selectedKeys, onSelect: onSelect, selectable: true },\n  info && ___EmotionJSX(\"div\", { className: \"info\" },\n  info),\n\n  menuItems.map((m) => {var _m$children;return (_m$children = m.children) != null && _m$children.length ? ___EmotionJSX(SubMenu, { title: m.label, key: m.key },\n    m.children.map((s) => menuItem(s.label, s.key))) :\n    menuItem(m.label, m.key, m.divider);})),\n  [selectedKeys, onSelect, info, menuItems, menuItem]);\n  return ___EmotionJSX(StyledDropdownButton, { overlay: overlayMenu, trigger: ['click'], icon: icon });\n});","map":{"version":3,"mappings":"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","names":["styled","useTheme","React","useMemo","Icons","DropdownButton","Menu","SubMenu","StyledDropdownButton","StyledMenu","theme","typography","sizes","s","colors","grayscale","base","gridUnit","dark1","primary","light5","StyleMenuItem","Item","divider","light3","StyleSubmenuItem","div","props","icon","info","menuItems","selectedKeys","onSelect","menuItem","label","key","overlayMenu","map","children","length","m"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/DropdownSelectableIcon/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { styled, useTheme } from '@superset-ui/core';\nimport React, { RefObject, useMemo } from 'react';\nimport Icons from 'src/components/Icons';\nimport { DropdownButton } from 'src/components/DropdownButton';\nimport { DropdownButtonProps } from 'antd/lib/dropdown';\nimport { Menu, MenuProps } from 'src/components/Menu';\n\nconst { SubMenu } = Menu;\n\ntype SubMenuItemProps = { key: string; label: string | React.ReactNode };\n\nexport interface DropDownSelectableProps extends Pick<MenuProps, 'onSelect'> {\n  ref?: RefObject<HTMLDivElement>;\n  icon: React.ReactNode;\n  info?: string;\n  menuItems: {\n    key: string;\n    label: string | React.ReactNode;\n    children?: SubMenuItemProps[];\n    divider?: boolean;\n  }[];\n  selectedKeys?: string[];\n}\n\nconst StyledDropdownButton = styled(\n  DropdownButton as React.FC<DropdownButtonProps>,\n)`\n  button.ant-btn:first-of-type {\n    display: none;\n  }\n  > button.ant-btn:nth-child(2) {\n    display: inline-flex;\n    background-color: transparent !important;\n    height: unset;\n    padding: 0;\n    border: none;\n    width: auto !important;\n\n    .anticon {\n      line-height: 0;\n    }\n    &:after {\n      box-shadow: none !important;\n    }\n  }\n`;\n\nconst StyledMenu = styled(Menu)`\n  ${({ theme }) => `\n    .info {\n      font-size: ${theme.typography.sizes.s}px;\n      color: ${theme.colors.grayscale.base};\n      padding: ${theme.gridUnit}px ${theme.gridUnit * 3}px ${\n    theme.gridUnit\n  }px ${theme.gridUnit * 3}px;\n    }\n    .ant-dropdown-menu-item-selected {\n      color: ${theme.colors.grayscale.dark1};\n      background-color: ${theme.colors.primary.light5};\n    }\n  `}\n`;\n\nconst StyleMenuItem = styled(Menu.Item)<{ divider?: boolean }>`\n  display: flex;\n  justify-content: space-between;\n  > span {\n    width: 100%;\n  }\n  border-bottom: ${({ divider, theme }) =>\n    divider ? `1px solid ${theme.colors.grayscale.light3};` : 'none;'};\n`;\n\nconst StyleSubmenuItem = styled.div`\n  display: flex;\n  justify-content: space-between;\n  > span {\n    width: 100%;\n  }\n`;\n\nexport default (props: DropDownSelectableProps) => {\n  const theme = useTheme();\n  const { icon, info, menuItems, selectedKeys, onSelect } = props;\n  const menuItem = useMemo(\n    () => (label: string | React.ReactNode, key: string, divider?: boolean) =>\n      (\n        <StyleMenuItem key={key} divider={divider}>\n          <StyleSubmenuItem>\n            <span>{label}</span>\n            {selectedKeys?.includes(key) && (\n              <Icons.Check\n                iconColor={theme.colors.primary.base}\n                className=\"tick-menu-item\"\n                iconSize=\"xl\"\n              />\n            )}\n          </StyleSubmenuItem>\n        </StyleMenuItem>\n      ),\n    [selectedKeys, theme.colors.primary.base],\n  );\n\n  const overlayMenu = useMemo(\n    () => (\n      <StyledMenu selectedKeys={selectedKeys} onSelect={onSelect} selectable>\n        {info && (\n          <div className=\"info\" data-test=\"dropdown-selectable-info\">\n            {info}\n          </div>\n        )}\n        {menuItems.map(m =>\n          m.children?.length ? (\n            <SubMenu\n              title={m.label}\n              key={m.key}\n              data-test=\"dropdown-selectable-icon-submenu\"\n            >\n              {m.children.map(s => menuItem(s.label, s.key))}\n            </SubMenu>\n          ) : (\n            menuItem(m.label, m.key, m.divider)\n          ),\n        )}\n      </StyledMenu>\n    ),\n    [selectedKeys, onSelect, info, menuItems, menuItem],\n  );\n\n  return (\n    <StyledDropdownButton\n      overlay={overlayMenu}\n      trigger={['click']}\n      icon={icon}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}