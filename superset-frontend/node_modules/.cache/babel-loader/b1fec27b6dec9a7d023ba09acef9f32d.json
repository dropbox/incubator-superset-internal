{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { Input, Tooltip } from 'antd';\nimport { styled, css, t } from '@superset-ui/core';\nimport InfoTooltip from 'src/components/InfoTooltip';\nimport Icons from 'src/components/Icons';\nimport errorIcon from 'src/assets/images/icons/error.svg';\nimport FormItem from './FormItem';\nimport FormLabel from './FormLabel';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst StyledInput = styled(Input)`\n  margin: ${(_ref) => {let { theme } = _ref;return `${theme.gridUnit}px 0 ${theme.gridUnit * 2}px`;}};\n`;\nconst StyledInputPassword = styled(Input.Password)`\n  margin: ${(_ref2) => {let { theme } = _ref2;return `${theme.gridUnit}px 0 ${theme.gridUnit * 2}px`;}};\n`;\nconst alertIconStyles = (theme, hasError) => css`\n  .ant-form-item-children-icon {\n    display: none;\n  }\n  ${hasError &&\n`.ant-form-item-control-input-content {\n      position: relative;\n      &:after {\n        content: ' ';\n        display: inline-block;\n        background: ${theme.colors.error.base};\n        mask: url(${errorIcon});\n        mask-size: cover;\n        width: ${theme.gridUnit * 4}px;\n        height: ${theme.gridUnit * 4}px;\n        position: absolute;\n        right: ${theme.gridUnit * 1.25}px;\n        top: ${theme.gridUnit * 2.75}px;\n      }\n    }`}\n`;\nconst StyledFormGroup = styled('div')`\n  input::-webkit-outer-spin-button,\n  input::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n  margin-bottom: ${(_ref3) => {let { theme } = _ref3;return theme.gridUnit * 3;}}px;\n  .ant-form-item {\n    margin-bottom: 0;\n  }\n`;\nconst StyledAlignment = styled.div`\n  display: flex;\n  align-items: center;\n`;\nconst StyledFormLabel = styled(FormLabel)`\n  margin-bottom: 0;\n`;\nconst iconReset = css`\n  &.anticon > * {\n    line-height: 0;\n  }\n`;\nconst LabeledErrorBoundInput = (_ref4) => {let { label, validationMethods, errorMessage, helpText, required = false, hasTooltip = false, tooltipText, id, className, visibilityToggle, ...props } = _ref4;return ___EmotionJSX(StyledFormGroup, { className: className },\n  ___EmotionJSX(StyledAlignment, null,\n  ___EmotionJSX(StyledFormLabel, { htmlFor: id, required: required },\n  label),\n\n  hasTooltip && ___EmotionJSX(InfoTooltip, { tooltip: `${tooltipText}`, viewBox: \"0 -1 24 24\" })),\n\n  ___EmotionJSX(FormItem, { css: (theme) => alertIconStyles(theme, !!errorMessage), validateTrigger: Object.keys(validationMethods), validateStatus: errorMessage ? 'error' : 'success', help: errorMessage || helpText, hasFeedback: !!errorMessage },\n  visibilityToggle || props.name === 'password' ? ___EmotionJSX(StyledInputPassword, _extends({}, props, validationMethods, { iconRender: (visible) => visible ? ___EmotionJSX(Tooltip, { title: t('Hide password.') },\n    ___EmotionJSX(Icons.EyeInvisibleOutlined, { iconSize: \"m\", css: iconReset })) :\n    ___EmotionJSX(Tooltip, { title: t('Show password.') },\n    ___EmotionJSX(Icons.EyeOutlined, { iconSize: \"m\", css: iconReset })),\n    role: \"textbox\" })) : ___EmotionJSX(StyledInput, _extends({}, props, validationMethods))));};\n\n\nexport default LabeledErrorBoundInput;","map":{"version":3,"mappings":"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","names":["React","Input","Tooltip","styled","css","t","InfoTooltip","Icons","errorIcon","FormItem","FormLabel","StyledInput","theme","gridUnit","StyledInputPassword","Password","alertIconStyles","hasError","colors","error","base","StyledFormGroup","StyledAlignment","div","StyledFormLabel","iconReset","LabeledErrorBoundInput","label","validationMethods","errorMessage","helpText","required","hasTooltip","tooltipText","id","className","visibilityToggle","props","Object","keys","name","visible"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/components/Form/LabeledErrorBoundInput.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { Input, Tooltip } from 'antd';\nimport { styled, css, SupersetTheme, t } from '@superset-ui/core';\nimport InfoTooltip from 'src/components/InfoTooltip';\nimport Icons from 'src/components/Icons';\nimport errorIcon from 'src/assets/images/icons/error.svg';\nimport FormItem from './FormItem';\nimport FormLabel from './FormLabel';\n\nexport interface LabeledErrorBoundInputProps {\n  label?: string;\n  validationMethods:\n    | { onBlur: (value: any) => void }\n    | { onChange: (value: any) => void };\n  errorMessage?: string | null;\n  helpText?: string;\n  required?: boolean;\n  hasTooltip?: boolean;\n  tooltipText?: string | null;\n  id?: string;\n  classname?: string;\n  visibilityToggle?: boolean;\n  [x: string]: any;\n}\n\nconst StyledInput = styled(Input)`\n  margin: ${({ theme }) => `${theme.gridUnit}px 0 ${theme.gridUnit * 2}px`};\n`;\n\nconst StyledInputPassword = styled(Input.Password)`\n  margin: ${({ theme }) => `${theme.gridUnit}px 0 ${theme.gridUnit * 2}px`};\n`;\n\nconst alertIconStyles = (theme: SupersetTheme, hasError: boolean) => css`\n  .ant-form-item-children-icon {\n    display: none;\n  }\n  ${hasError &&\n  `.ant-form-item-control-input-content {\n      position: relative;\n      &:after {\n        content: ' ';\n        display: inline-block;\n        background: ${theme.colors.error.base};\n        mask: url(${errorIcon});\n        mask-size: cover;\n        width: ${theme.gridUnit * 4}px;\n        height: ${theme.gridUnit * 4}px;\n        position: absolute;\n        right: ${theme.gridUnit * 1.25}px;\n        top: ${theme.gridUnit * 2.75}px;\n      }\n    }`}\n`;\n\nconst StyledFormGroup = styled('div')`\n  input::-webkit-outer-spin-button,\n  input::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n  margin-bottom: ${({ theme }) => theme.gridUnit * 3}px;\n  .ant-form-item {\n    margin-bottom: 0;\n  }\n`;\n\nconst StyledAlignment = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst StyledFormLabel = styled(FormLabel)`\n  margin-bottom: 0;\n`;\n\nconst iconReset = css`\n  &.anticon > * {\n    line-height: 0;\n  }\n`;\n\nconst LabeledErrorBoundInput = ({\n  label,\n  validationMethods,\n  errorMessage,\n  helpText,\n  required = false,\n  hasTooltip = false,\n  tooltipText,\n  id,\n  className,\n  visibilityToggle,\n  ...props\n}: LabeledErrorBoundInputProps) => (\n  <StyledFormGroup className={className}>\n    <StyledAlignment>\n      <StyledFormLabel htmlFor={id} required={required}>\n        {label}\n      </StyledFormLabel>\n      {hasTooltip && (\n        <InfoTooltip tooltip={`${tooltipText}`} viewBox=\"0 -1 24 24\" />\n      )}\n    </StyledAlignment>\n    <FormItem\n      css={(theme: SupersetTheme) => alertIconStyles(theme, !!errorMessage)}\n      validateTrigger={Object.keys(validationMethods)}\n      validateStatus={errorMessage ? 'error' : 'success'}\n      help={errorMessage || helpText}\n      hasFeedback={!!errorMessage}\n    >\n      {visibilityToggle || props.name === 'password' ? (\n        <StyledInputPassword\n          {...props}\n          {...validationMethods}\n          iconRender={visible =>\n            visible ? (\n              <Tooltip title={t('Hide password.')}>\n                <Icons.EyeInvisibleOutlined iconSize=\"m\" css={iconReset} />\n              </Tooltip>\n            ) : (\n              <Tooltip title={t('Show password.')}>\n                <Icons.EyeOutlined\n                  iconSize=\"m\"\n                  css={iconReset}\n                  data-test=\"icon-eye\"\n                />\n              </Tooltip>\n            )\n          }\n          role=\"textbox\"\n        />\n      ) : (\n        <StyledInput {...props} {...validationMethods} />\n      )}\n    </FormItem>\n  </StyledFormGroup>\n);\n\nexport default LabeledErrorBoundInput;\n"]},"metadata":{},"sourceType":"module"}