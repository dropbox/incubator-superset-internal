{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { Encodable, defaultColorSchemeResolver, addPrefix } from 'encodable';\nimport { CategoricalColorNamespace, getCategoricalSchemeRegistry, getSequentialSchemeRegistry, getNumberFormatter, getTimeFormatter, LOCAL_PREFIX, getTimeFormatterRegistry } from '@superset-ui/core';\nconst timeFormat = function (_temp) {let { format, formatInLocalTime = false } = _temp === void 0 ? {} : _temp;\n  const formatString = formatInLocalTime ?\n  addPrefix(LOCAL_PREFIX, format != null ? format : getTimeFormatterRegistry().getDefaultKey()) :\n  format;\n  return getTimeFormatter(formatString);\n};\nconst colorSchemeResolver = function (_temp2) {let { name, type = 'categorical' } = _temp2 === void 0 ? {} : _temp2;\n  if (type === 'sequential') {\n    const scheme = getSequentialSchemeRegistry().get(name);\n    return typeof scheme === 'undefined' ?\n    scheme :\n    { type: 'sequential', ...scheme };\n  }\n  if (type === 'categorical') {\n    const scheme = getCategoricalSchemeRegistry().get(name);\n    return typeof scheme === 'undefined' ?\n    scheme :\n    { type: 'categorical', ...scheme };\n  }\n  return defaultColorSchemeResolver({ name, type });\n};\nconst colorScaleResolver = function (_temp3) {let { name, namespace } = _temp3 === void 0 ? {} : _temp3;return CategoricalColorNamespace.getScale(name, namespace);};\nexport default function configureEncodable() {\n  Encodable.setNumberFormatResolver(getNumberFormatter).\n  setTimeFormatResolver(timeFormat).\n  setColorSchemeResolver(colorSchemeResolver).\n  setCategoricalColorScaleResolver(colorScaleResolver);\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(timeFormat, \"timeFormat\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-word-cloud/src/configureEncodable.ts\");reactHotLoader.register(colorSchemeResolver, \"colorSchemeResolver\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-word-cloud/src/configureEncodable.ts\");reactHotLoader.register(colorScaleResolver, \"colorScaleResolver\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-word-cloud/src/configureEncodable.ts\");reactHotLoader.register(configureEncodable, \"configureEncodable\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-word-cloud/src/configureEncodable.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAmBA,SACEA,SADF,EAKEC,0BALF,EAMEC,SANF,QAOO,WAPP;AAQA,SACEC,yBADF,EAEEC,4BAFF,EAGEC,2BAHF,EAIEC,kBAJF,EAKEC,gBALF,EAMEC,YANF,EAOEC,wBAPF,QAQO,mBARP;AAUA,MAAMC,UAAU,GAAuB,iBAG7B,KAH8B,EACtCC,MADsC,EAEtCC,iBAAiB,GAAG,KAFkB,EAG9B,sBAAN,EAAM;EACR,MAAMC,YAAY,GAAGD,iBAAiB;EAClCV,SAAS,CACPM,YADO,EAEPG,MAFO,WAEPA,MAFO,GAEGF,wBAAwB,GAAGK,aAA3B,EAFH,CADyB;EAKlCH,MALJ;EAOA,OAAOJ,gBAAgB,CAACM,YAAD,CAAvB;AACD,CAZD;AAcA,MAAME,mBAAmB,GAAwB,kBAGvC,KAHwC,EAChDC,IADgD,EAEhDC,IAAI,GAAG,aAFyC,EAGxC,uBAAN,EAAM;EACR,IAAIA,IAAI,KAAK,YAAb,EAA2B;IACzB,MAAMC,MAAM,GAAGb,2BAA2B,GAAGc,GAA9B,CAAkCH,IAAlC,CAAf;IAEA,OAAO,OAAOE,MAAP,KAAkB,WAAlB;IACHA,MADG;IAEH,EAAED,IAAI,EAAE,YAAR,EAAsB,GAAGC,MAAzB,EAFJ;EAGD;EACD,IAAID,IAAI,KAAK,aAAb,EAA4B;IAC1B,MAAMC,MAAM,GAAGd,4BAA4B,GAAGe,GAA/B,CAAmCH,IAAnC,CAAf;IAEA,OAAO,OAAOE,MAAP,KAAkB,WAAlB;IACHA,MADG;IAEH,EAAED,IAAI,EAAE,aAAR,EAAuB,GAAGC,MAA1B,EAFJ;EAGD;EACD,OAAOjB,0BAA0B,CAAC,EAAEe,IAAF,EAAQC,IAAR,EAAD,CAAjC;AACD,CAnBD;AAqBA,MAAMG,kBAAkB,GAAkC,uBAAC,EACzDJ,IADyD,EAEzDK,SAFyD,EAAD,uBAGtD,EAHsD,iBAG/ClB,yBAAyB,CAACmB,QAA1B,CAAmCN,IAAnC,EAAyCK,SAAzC,CAH+C,EAA1D;AAKA,eAAc,SAAUE,kBAAV,GAA4B;EACxCvB,SAAS,CAACwB,uBAAV,CAAkClB,kBAAlC;EACGmB,qBADH,CACyBf,UADzB;EAEGgB,sBAFH,CAE0BX,mBAF1B;EAGGY,gCAHH,CAGoCP,kBAHpC;AAID,C,iLA7CKV,U,sKAcAK,mB,+KAqBAK,kB,8KAKkBG,kB","names":["Encodable","defaultColorSchemeResolver","addPrefix","CategoricalColorNamespace","getCategoricalSchemeRegistry","getSequentialSchemeRegistry","getNumberFormatter","getTimeFormatter","LOCAL_PREFIX","getTimeFormatterRegistry","timeFormat","format","formatInLocalTime","formatString","getDefaultKey","colorSchemeResolver","name","type","scheme","get","colorScaleResolver","namespace","getScale","configureEncodable","setNumberFormatResolver","setTimeFormatResolver","setColorSchemeResolver","setCategoricalColorScaleResolver"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-word-cloud/src/configureEncodable.ts"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport {\n  Encodable,\n  ColorSchemeResolver,\n  TimeFormatResolver,\n  CategoricalColorScaleResolver,\n  defaultColorSchemeResolver,\n  addPrefix,\n} from 'encodable';\nimport {\n  CategoricalColorNamespace,\n  getCategoricalSchemeRegistry,\n  getSequentialSchemeRegistry,\n  getNumberFormatter,\n  getTimeFormatter,\n  LOCAL_PREFIX,\n  getTimeFormatterRegistry,\n} from '@superset-ui/core';\n\nconst timeFormat: TimeFormatResolver = ({\n  format,\n  formatInLocalTime = false,\n} = {}) => {\n  const formatString = formatInLocalTime\n    ? addPrefix(\n        LOCAL_PREFIX,\n        format ?? getTimeFormatterRegistry().getDefaultKey()!,\n      )\n    : format;\n\n  return getTimeFormatter(formatString);\n};\n\nconst colorSchemeResolver: ColorSchemeResolver = ({\n  name,\n  type = 'categorical',\n} = {}) => {\n  if (type === 'sequential') {\n    const scheme = getSequentialSchemeRegistry().get(name);\n\n    return typeof scheme === 'undefined'\n      ? scheme\n      : { type: 'sequential', ...scheme };\n  }\n  if (type === 'categorical') {\n    const scheme = getCategoricalSchemeRegistry().get(name);\n\n    return typeof scheme === 'undefined'\n      ? scheme\n      : { type: 'categorical', ...scheme };\n  }\n  return defaultColorSchemeResolver({ name, type });\n};\n\nconst colorScaleResolver: CategoricalColorScaleResolver = ({\n  name,\n  namespace,\n} = {}) => CategoricalColorNamespace.getScale(name, namespace);\n\nexport default function configureEncodable() {\n  Encodable.setNumberFormatResolver(getNumberFormatter)\n    .setTimeFormatResolver(timeFormat)\n    .setColorSchemeResolver(colorSchemeResolver)\n    .setCategoricalColorScaleResolver(colorScaleResolver);\n}\n"]},"metadata":{},"sourceType":"module"}