{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nexport default class LazyFactory {\n\n\n  constructor(factoryFn) {this.activeNodes = new Map();this.factoryFn = void 0;\n    this.factoryFn = factoryFn;\n  }\n  createInContainer(container) {if (container === void 0) {container = document.body;}\n    if (this.activeNodes.has(container)) {\n      const entry = this.activeNodes.get(container);\n      entry.counter += 1;\n      return entry.node;\n    }\n    const node = this.factoryFn();\n    container.append(node);\n    this.activeNodes.set(container, { counter: 1, node });\n    return node;\n  }\n  removeFromContainer(container) {if (container === void 0) {container = document.body;}\n    if (this.activeNodes.has(container)) {\n      const entry = this.activeNodes.get(container);\n      entry.counter -= 1;\n      if (entry.counter === 0) {\n        container.removeChild(entry.node);\n        this.activeNodes.delete(container);\n      }\n    }\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(LazyFactory, \"LazyFactory\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/dimension/svg/LazyFactory.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAmBA,eAAc,MAAOA,WAAP,CAAkB;;;EAW9BC,YAAYC,SAAZ,EAA8B,MAVtBC,WAUsB,GAVR,IAAIC,GAAJ,EAUQ,MAFtBF,SAEsB;IAC5B,KAAKA,SAAL,GAAiBA,SAAjB;EACD;EAEDG,iBAAiB,CAACC,SAAD,EAAoD,KAAnDA,SAAmD,cAAnDA,SAAmD,GAAbC,QAAQ,CAACC,IAAI;IACnE,IAAI,KAAKL,WAAL,CAAiBM,GAAjB,CAAqBH,SAArB,CAAJ,EAAqC;MACnC,MAAMI,KAAK,GAAG,KAAKP,WAAL,CAAiBQ,GAAjB,CAAqBL,SAArB,CAAd;MACAI,KAAK,CAACE,OAAN,IAAiB,CAAjB;MAEA,OAAOF,KAAK,CAACG,IAAb;IACD;IAED,MAAMA,IAAI,GAAG,KAAKX,SAAL,EAAb;IACAI,SAAS,CAACQ,MAAV,CAAiBD,IAAjB;IACA,KAAKV,WAAL,CAAiBY,GAAjB,CAAqBT,SAArB,EAAgC,EAAEM,OAAO,EAAE,CAAX,EAAcC,IAAd,EAAhC;IAEA,OAAOA,IAAP;EACD;EAEDG,mBAAmB,CAACV,SAAD,EAAoD,KAAnDA,SAAmD,cAAnDA,SAAmD,GAAbC,QAAQ,CAACC,IAAI;IACrE,IAAI,KAAKL,WAAL,CAAiBM,GAAjB,CAAqBH,SAArB,CAAJ,EAAqC;MACnC,MAAMI,KAAK,GAAG,KAAKP,WAAL,CAAiBQ,GAAjB,CAAqBL,SAArB,CAAd;MACAI,KAAK,CAACE,OAAN,IAAiB,CAAjB;MACA,IAAIF,KAAK,CAACE,OAAN,KAAkB,CAAtB,EAAyB;QACvBN,SAAS,CAACW,WAAV,CAAsBP,KAAK,CAACG,IAA5B;QACA,KAAKV,WAAL,CAAiBe,MAAjB,CAAwBZ,SAAxB;MACD;IACF;EACF,CAvC6B;EAAA;IAAA,yB,iLAAXN,W","names":["LazyFactory","constructor","factoryFn","activeNodes","Map","createInContainer","container","document","body","has","entry","get","counter","node","append","set","removeFromContainer","removeChild","delete"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/dimension/svg/LazyFactory.ts"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nexport default class LazyFactory<T extends HTMLElement | SVGElement> {\n  private activeNodes = new Map<\n    HTMLElement | SVGElement,\n    {\n      counter: number;\n      node: T;\n    }\n  >();\n\n  private factoryFn: () => T;\n\n  constructor(factoryFn: () => T) {\n    this.factoryFn = factoryFn;\n  }\n\n  createInContainer(container: HTMLElement | SVGElement = document.body) {\n    if (this.activeNodes.has(container)) {\n      const entry = this.activeNodes.get(container)!;\n      entry.counter += 1;\n\n      return entry.node;\n    }\n\n    const node = this.factoryFn();\n    container.append(node);\n    this.activeNodes.set(container, { counter: 1, node });\n\n    return node;\n  }\n\n  removeFromContainer(container: HTMLElement | SVGElement = document.body) {\n    if (this.activeNodes.has(container)) {\n      const entry = this.activeNodes.get(container)!;\n      entry.counter -= 1;\n      if (entry.counter === 0) {\n        container.removeChild(entry.node);\n        this.activeNodes.delete(container);\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}