{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * Method to check if a number is within inclusive range between a maximum value minus a threshold\n * Invalid non numeric inputs will not error, but will return false\n *\n * @param value number coordinate to determine if it is within bounds of the targetCoordinate - threshold.  Must be positive and less than maximum.\n * @param maximum number max value for the test range.  Must be positive and greater than value\n * @param threshold number values to determine a range from maximum - threshold.  Must be positive and greater than zero.\n * @returns boolean\n */\nexport const withinRange = (value, maximum, threshold) => {\n  let within = false;\n  const diff = maximum - value;\n  if (diff > 0 && diff <= threshold) {\n    within = true;\n  }\n  return within;\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;AASA,OAAO,MAAMA,WAAW,GAAG,CACzBC,KADyB,EAEzBC,OAFyB,EAGzBC,SAHyB,KAId;EACX,IAAIC,MAAM,GAAG,KAAb;EACA,MAAMC,IAAI,GAAGH,OAAO,GAAGD,KAAvB;EACA,IAAII,IAAI,GAAG,CAAP,IAAYA,IAAI,IAAIF,SAAxB,EAAmC;IACjCC,MAAM,GAAG,IAAT;EACD;EACD,OAAOA,MAAP;AACD,CAXM","names":["withinRange","value","maximum","threshold","within","diff"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/components/Table/utils/utils.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/**\n * Method to check if a number is within inclusive range between a maximum value minus a threshold\n * Invalid non numeric inputs will not error, but will return false\n *\n * @param value number coordinate to determine if it is within bounds of the targetCoordinate - threshold.  Must be positive and less than maximum.\n * @param maximum number max value for the test range.  Must be positive and greater than value\n * @param threshold number values to determine a range from maximum - threshold.  Must be positive and greater than zero.\n * @returns boolean\n */\nexport const withinRange = (\n  value: number,\n  maximum: number,\n  threshold: number,\n): boolean => {\n  let within = false;\n  const diff = maximum - value;\n  if (diff > 0 && diff <= threshold) {\n    within = true;\n  }\n  return within;\n};\n"]},"metadata":{},"sourceType":"module"}