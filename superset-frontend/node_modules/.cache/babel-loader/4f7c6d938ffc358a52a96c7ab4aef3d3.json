{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport { styled, t, useTheme } from '@superset-ui/core';\nimport { Select } from 'src/components';\nimport Icons from 'src/components/Icons';\nimport { StyledInputContainer } from '../AlertReportModal';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst StyledNotificationMethod = styled.div`\n  margin-bottom: 10px;\n\n  .input-container {\n    textarea {\n      height: auto;\n    }\n  }\n\n  .inline-container {\n    margin-bottom: 10px;\n\n    .input-container {\n      margin-left: 10px;\n    }\n\n    > div {\n      margin: 0;\n    }\n\n    .delete-button {\n      margin-left: 10px;\n      padding-top: 3px;\n    }\n  }\n`;\nexport const NotificationMethod = (_ref) => {let { setting = null, index, onUpdate, onRemove } = _ref;\n  const { method, recipients, options } = setting || {};\n  const [recipientValue, setRecipientValue] = useState(recipients || '');\n  const theme = useTheme();\n  if (!setting) {\n    return null;\n  }\n  const onMethodChange = (method) => {\n    // Since we're swapping the method, reset the recipients\n    setRecipientValue('');\n    if (onUpdate) {\n      const updatedSetting = {\n        ...setting,\n        method,\n        recipients: '' };\n\n      onUpdate(index, updatedSetting);\n    }\n  };\n  const onRecipientsChange = (event) => {\n    const { target } = event;\n    setRecipientValue(target.value);\n    if (onUpdate) {\n      const updatedSetting = {\n        ...setting,\n        recipients: target.value };\n\n      onUpdate(index, updatedSetting);\n    }\n  };\n  // Set recipients\n  if (!!recipients && recipientValue !== recipients) {\n    setRecipientValue(recipients);\n  }\n  return ___EmotionJSX(StyledNotificationMethod, null,\n  ___EmotionJSX(\"div\", { className: \"inline-container\" },\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(Select, { ariaLabel: t('Delivery method'), \"data-test\": \"select-delivery-method\", onChange: onMethodChange, placeholder: t('Select Delivery Method'), options: (options || []).map((method) => ({\n      label: method,\n      value: method })),\n    value: method }))),\n\n\n  method !== undefined && !!onRemove ? ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: \"delete-button\", onClick: () => onRemove(index) },\n  ___EmotionJSX(Icons.Trash, { iconColor: theme.colors.grayscale.base })) :\n  null),\n\n  method !== undefined ? ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" }, t(method)),\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(\"textarea\", { name: \"recipients\", value: recipientValue, onChange: onRecipientsChange })),\n\n  ___EmotionJSX(\"div\", { className: \"helper\" },\n  t('Recipients are separated by \",\" or \";\"'))) :\n\n  null);\n\n};__signature__(NotificationMethod, \"useState{[recipientValue, setRecipientValue](recipients || '')}\\nuseTheme{theme}\", () => [useTheme]);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(StyledNotificationMethod, \"StyledNotificationMethod\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/features/alerts/components/NotificationMethod.tsx\");reactHotLoader.register(NotificationMethod, \"NotificationMethod\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/features/alerts/components/NotificationMethod.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"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","names":["React","useState","styled","t","useTheme","Select","Icons","StyledInputContainer","StyledNotificationMethod","div","NotificationMethod","setting","index","onUpdate","onRemove","method","recipients","options","recipientValue","setRecipientValue","theme","onMethodChange","updatedSetting","onRecipientsChange","event","target","value","map","label","undefined","colors","grayscale","base"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/features/alerts/components/NotificationMethod.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { FunctionComponent, useState } from 'react';\nimport { styled, t, useTheme } from '@superset-ui/core';\nimport { Select } from 'src/components';\nimport Icons from 'src/components/Icons';\nimport { NotificationMethodOption } from '../types';\nimport { StyledInputContainer } from '../AlertReportModal';\n\nconst StyledNotificationMethod = styled.div`\n  margin-bottom: 10px;\n\n  .input-container {\n    textarea {\n      height: auto;\n    }\n  }\n\n  .inline-container {\n    margin-bottom: 10px;\n\n    .input-container {\n      margin-left: 10px;\n    }\n\n    > div {\n      margin: 0;\n    }\n\n    .delete-button {\n      margin-left: 10px;\n      padding-top: 3px;\n    }\n  }\n`;\n\ntype NotificationSetting = {\n  method?: NotificationMethodOption;\n  recipients: string;\n  options: NotificationMethodOption[];\n};\n\ninterface NotificationMethodProps {\n  setting?: NotificationSetting | null;\n  index: number;\n  onUpdate?: (index: number, updatedSetting: NotificationSetting) => void;\n  onRemove?: (index: number) => void;\n}\n\nexport const NotificationMethod: FunctionComponent<NotificationMethodProps> = ({\n  setting = null,\n  index,\n  onUpdate,\n  onRemove,\n}) => {\n  const { method, recipients, options } = setting || {};\n  const [recipientValue, setRecipientValue] = useState<string>(\n    recipients || '',\n  );\n  const theme = useTheme();\n\n  if (!setting) {\n    return null;\n  }\n\n  const onMethodChange = (method: NotificationMethodOption) => {\n    // Since we're swapping the method, reset the recipients\n    setRecipientValue('');\n    if (onUpdate) {\n      const updatedSetting = {\n        ...setting,\n        method,\n        recipients: '',\n      };\n\n      onUpdate(index, updatedSetting);\n    }\n  };\n\n  const onRecipientsChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement>,\n  ) => {\n    const { target } = event;\n\n    setRecipientValue(target.value);\n\n    if (onUpdate) {\n      const updatedSetting = {\n        ...setting,\n        recipients: target.value,\n      };\n\n      onUpdate(index, updatedSetting);\n    }\n  };\n\n  // Set recipients\n  if (!!recipients && recipientValue !== recipients) {\n    setRecipientValue(recipients);\n  }\n\n  return (\n    <StyledNotificationMethod>\n      <div className=\"inline-container\">\n        <StyledInputContainer>\n          <div className=\"input-container\">\n            <Select\n              ariaLabel={t('Delivery method')}\n              data-test=\"select-delivery-method\"\n              onChange={onMethodChange}\n              placeholder={t('Select Delivery Method')}\n              options={(options || []).map(\n                (method: NotificationMethodOption) => ({\n                  label: method,\n                  value: method,\n                }),\n              )}\n              value={method}\n            />\n          </div>\n        </StyledInputContainer>\n        {method !== undefined && !!onRemove ? (\n          <span\n            role=\"button\"\n            tabIndex={0}\n            className=\"delete-button\"\n            onClick={() => onRemove(index)}\n          >\n            <Icons.Trash iconColor={theme.colors.grayscale.base} />\n          </span>\n        ) : null}\n      </div>\n      {method !== undefined ? (\n        <StyledInputContainer>\n          <div className=\"control-label\">{t(method)}</div>\n          <div className=\"input-container\">\n            <textarea\n              name=\"recipients\"\n              value={recipientValue}\n              onChange={onRecipientsChange}\n            />\n          </div>\n          <div className=\"helper\">\n            {t('Recipients are separated by \",\" or \";\"')}\n          </div>\n        </StyledInputContainer>\n      ) : null}\n    </StyledNotificationMethod>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}