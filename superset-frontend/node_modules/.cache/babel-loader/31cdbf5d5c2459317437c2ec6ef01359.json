{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ensureIsArray, GenericDataType, t, tn } from '@superset-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport { Select } from 'src/components';\nimport { FilterPluginStyle, StyledFormItem, StatusMessage } from '../common';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport default function PluginFilterTimeColumn(props) {\n  const { data, formData, height, width, setDataMask, setHoveredFilter, unsetHoveredFilter, setFocusedFilter, unsetFocusedFilter, setFilterActive, filterState, inputRef } = props;\n  const { defaultValue } = formData;\n  const [value, setValue] = useState(defaultValue != null ? defaultValue : []);\n  const handleChange = (value) => {\n    const resultValue = ensureIsArray(value);\n    setValue(resultValue);\n    const extraFormData = {};\n    if (resultValue.length) {\n      extraFormData.granularity_sqla = resultValue[0];\n    }\n    setDataMask({\n      extraFormData,\n      filterState: {\n        value: resultValue.length ? resultValue : null } });\n\n\n  };\n  useEffect(() => {\n    handleChange(defaultValue != null ? defaultValue : null);\n    // I think after Config Modal update some filter it re-creates default value for all other filters\n    // so we can process it like this `JSON.stringify` or start to use `Immer`\n  }, [JSON.stringify(defaultValue)]);\n  useEffect(() => {var _filterState$value;\n    handleChange((_filterState$value = filterState.value) != null ? _filterState$value : null);\n  }, [JSON.stringify(filterState.value)]);\n  const timeColumns = (data || []).filter((row) => row.dtype === GenericDataType.TEMPORAL);\n  const placeholderText = timeColumns.length === 0 ?\n  t('No time columns') :\n  tn('%s option', '%s options', timeColumns.length, timeColumns.length);\n  const formItemData = {};\n  if (filterState.validateMessage) {\n    formItemData.extra = ___EmotionJSX(StatusMessage, { status: filterState.validateStatus },\n    filterState.validateMessage);\n\n  }\n  const options = timeColumns.map((row) => {\n    const { column_name: columnName, verbose_name: verboseName } = row;\n    return {\n      label: verboseName != null ? verboseName : columnName,\n      value: columnName };\n\n  });\n  return ___EmotionJSX(FilterPluginStyle, { height: height, width: width },\n  ___EmotionJSX(StyledFormItem, _extends({ validateStatus: filterState.validateStatus }, formItemData),\n  ___EmotionJSX(Select, { allowClear: true, value: value, placeholder: placeholderText\n    // @ts-ignore\n    , onChange: handleChange, onBlur: unsetFocusedFilter, onFocus: setFocusedFilter, onMouseEnter: setHoveredFilter, onMouseLeave: unsetHoveredFilter, ref: inputRef, options: options, onDropdownVisibleChange: setFilterActive })));\n\n\n}","map":{"version":3,"mappings":"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","names":["ensureIsArray","GenericDataType","t","tn","React","useEffect","useState","Select","FilterPluginStyle","StyledFormItem","StatusMessage","PluginFilterTimeColumn","props","data","formData","height","width","setDataMask","setHoveredFilter","unsetHoveredFilter","setFocusedFilter","unsetFocusedFilter","setFilterActive","filterState","inputRef","defaultValue","value","setValue","handleChange","resultValue","extraFormData","length","granularity_sqla","JSON","stringify","timeColumns","filter","row","dtype","TEMPORAL","placeholderText","formItemData","validateMessage","extra","validateStatus","options","map","column_name","columnName","verbose_name","verboseName","label"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/filters/components/TimeColumn/TimeColumnFilterPlugin.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  ensureIsArray,\n  ExtraFormData,\n  GenericDataType,\n  t,\n  tn,\n} from '@superset-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport { Select } from 'src/components';\nimport { FormItemProps } from 'antd/lib/form';\nimport { FilterPluginStyle, StyledFormItem, StatusMessage } from '../common';\nimport { PluginFilterTimeColumnProps } from './types';\n\nexport default function PluginFilterTimeColumn(\n  props: PluginFilterTimeColumnProps,\n) {\n  const {\n    data,\n    formData,\n    height,\n    width,\n    setDataMask,\n    setHoveredFilter,\n    unsetHoveredFilter,\n    setFocusedFilter,\n    unsetFocusedFilter,\n    setFilterActive,\n    filterState,\n    inputRef,\n  } = props;\n  const { defaultValue } = formData;\n\n  const [value, setValue] = useState<string[]>(defaultValue ?? []);\n\n  const handleChange = (value?: string[] | string | null) => {\n    const resultValue: string[] = ensureIsArray<string>(value);\n    setValue(resultValue);\n    const extraFormData: ExtraFormData = {};\n    if (resultValue.length) {\n      extraFormData.granularity_sqla = resultValue[0];\n    }\n\n    setDataMask({\n      extraFormData,\n      filterState: {\n        value: resultValue.length ? resultValue : null,\n      },\n    });\n  };\n\n  useEffect(() => {\n    handleChange(defaultValue ?? null);\n    // I think after Config Modal update some filter it re-creates default value for all other filters\n    // so we can process it like this `JSON.stringify` or start to use `Immer`\n  }, [JSON.stringify(defaultValue)]);\n\n  useEffect(() => {\n    handleChange(filterState.value ?? null);\n  }, [JSON.stringify(filterState.value)]);\n\n  const timeColumns = (data || []).filter(\n    row => row.dtype === GenericDataType.TEMPORAL,\n  );\n\n  const placeholderText =\n    timeColumns.length === 0\n      ? t('No time columns')\n      : tn('%s option', '%s options', timeColumns.length, timeColumns.length);\n\n  const formItemData: FormItemProps = {};\n  if (filterState.validateMessage) {\n    formItemData.extra = (\n      <StatusMessage status={filterState.validateStatus}>\n        {filterState.validateMessage}\n      </StatusMessage>\n    );\n  }\n\n  const options = timeColumns.map(\n    (row: { column_name: string; verbose_name: string | null }) => {\n      const { column_name: columnName, verbose_name: verboseName } = row;\n      return {\n        label: verboseName ?? columnName,\n        value: columnName,\n      };\n    },\n  );\n\n  return (\n    <FilterPluginStyle height={height} width={width}>\n      <StyledFormItem\n        validateStatus={filterState.validateStatus}\n        {...formItemData}\n      >\n        <Select\n          allowClear\n          value={value}\n          placeholder={placeholderText}\n          // @ts-ignore\n          onChange={handleChange}\n          onBlur={unsetFocusedFilter}\n          onFocus={setFocusedFilter}\n          onMouseEnter={setHoveredFilter}\n          onMouseLeave={unsetHoveredFilter}\n          ref={inputRef}\n          options={options}\n          onDropdownVisibleChange={setFilterActive}\n        />\n      </StyledFormItem>\n    </FilterPluginStyle>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}