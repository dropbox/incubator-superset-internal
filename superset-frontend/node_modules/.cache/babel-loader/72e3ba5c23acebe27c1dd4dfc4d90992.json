{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useRef, useState } from 'react';\nimport { LocalStorageKeys, setItem, getItem } from 'src/utils/localStorageHelpers';\nexport default function useStoredSidebarWidth(id, initialWidth) {\n  const widthsMapRef = useRef();\n  const [sidebarWidth, setSidebarWidth] = useState(initialWidth);\n  useEffect(() => {var _widthsMapRef$current;\n    widthsMapRef.current = (_widthsMapRef$current =\n    widthsMapRef.current) != null ? _widthsMapRef$current :\n    getItem(LocalStorageKeys.common__resizable_sidebar_widths, {});\n    if (widthsMapRef.current[id]) {\n      setSidebarWidth(widthsMapRef.current[id]);\n    }\n  }, [id]);\n  function setStoredSidebarWidth(updatedWidth) {\n    setSidebarWidth(updatedWidth);\n    setItem(LocalStorageKeys.common__resizable_sidebar_widths, {\n      ...widthsMapRef.current,\n      [id]: updatedWidth });\n\n  }\n  return [sidebarWidth, setStoredSidebarWidth];\n}__signature__(useStoredSidebarWidth, \"useRef{widthsMapRef}\\nuseState{[sidebarWidth, setSidebarWidth](initialWidth)}\\nuseEffect{}\");;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(useStoredSidebarWidth, \"useStoredSidebarWidth\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/ResizableSidebar/useStoredSidebarWidth.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAkBA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,SACEC,gBADF,EAEEC,OAFF,EAGEC,OAHF,QAIO,+BAJP;AAMA,eAAc,SAAUC,qBAAV,CACZC,EADY,EAEZC,YAFY,EAEQ;EAEpB,MAAMC,YAAY,GAAGR,MAAM,EAA3B;EACA,MAAM,CAACS,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,CAASM,YAAT,CAAhD;EAEAR,SAAS,CAAC,MAAK;IACbS,YAAY,CAACG,OAAb;IACEH,YAAY,CAACG,OADf;IAEEP,OAAO,CAACF,gBAAgB,CAACU,gCAAlB,EAAoD,EAApD,CAFT;IAGA,IAAIJ,YAAY,CAACG,OAAb,CAAqBL,EAArB,CAAJ,EAA8B;MAC5BI,eAAe,CAACF,YAAY,CAACG,OAAb,CAAqBL,EAArB,CAAD,CAAf;IACD;EACF,CAPQ,EAON,CAACA,EAAD,CAPM,CAAT;EASA,SAASO,qBAAT,CAA+BC,YAA/B,EAAmD;IACjDJ,eAAe,CAACI,YAAD,CAAf;IACAX,OAAO,CAACD,gBAAgB,CAACU,gCAAlB,EAAoD;MACzD,GAAGJ,YAAY,CAACG,OADyC;MAEzD,CAACL,EAAD,GAAMQ,YAFmD,EAApD,CAAP;;EAID;EAED,OAAO,CAACL,YAAD,EAAeI,qBAAf,CAAP;AACD,C,cAzBuBR,qB,iRAAAA,qB","names":["useEffect","useRef","useState","LocalStorageKeys","setItem","getItem","useStoredSidebarWidth","id","initialWidth","widthsMapRef","sidebarWidth","setSidebarWidth","current","common__resizable_sidebar_widths","setStoredSidebarWidth","updatedWidth"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/ResizableSidebar/useStoredSidebarWidth.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useRef, useState } from 'react';\nimport {\n  LocalStorageKeys,\n  setItem,\n  getItem,\n} from 'src/utils/localStorageHelpers';\n\nexport default function useStoredSidebarWidth(\n  id: string,\n  initialWidth: number,\n) {\n  const widthsMapRef = useRef<Record<string, number>>();\n  const [sidebarWidth, setSidebarWidth] = useState<number>(initialWidth);\n\n  useEffect(() => {\n    widthsMapRef.current =\n      widthsMapRef.current ??\n      getItem(LocalStorageKeys.common__resizable_sidebar_widths, {});\n    if (widthsMapRef.current[id]) {\n      setSidebarWidth(widthsMapRef.current[id]);\n    }\n  }, [id]);\n\n  function setStoredSidebarWidth(updatedWidth: number) {\n    setSidebarWidth(updatedWidth);\n    setItem(LocalStorageKeys.common__resizable_sidebar_widths, {\n      ...widthsMapRef.current,\n      [id]: updatedWidth,\n    });\n  }\n\n  return [sidebarWidth, setStoredSidebarWidth] as const;\n}\n"]},"metadata":{},"sourceType":"module"}