{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\nimport { formatSelectOptions, getStandardizedControls, sections } from '@superset-ui/chart-controls';\nimport { ColorBy } from './utils';\nconst config = {\n  controlPanelSections: [\n  sections.legacyRegularTime,\n  {\n    label: t('Query'),\n    expanded: true,\n    controlSetRows: [\n    ['entity'],\n    [\n    {\n      name: 'country_fieldtype',\n      config: {\n        type: 'SelectControl',\n        label: t('Country Field Type'),\n        default: 'cca2',\n        choices: [\n        ['name', t('Full name')],\n        ['cioc', t('code International Olympic Committee (cioc)')],\n        ['cca2', t('code ISO 3166-1 alpha-2 (cca2)')],\n        ['cca3', t('code ISO 3166-1 alpha-3 (cca3)')]],\n\n        description: t('The country code standard that Superset should expect ' +\n        'to find in the [country] column') } }],\n\n\n\n    ['metric'],\n    ['adhoc_filters'],\n    ['row_limit'],\n    [\n    {\n      name: 'sort_by_metric',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Sort by metric'),\n        description: t('Whether to sort results by the selected metric in descending order.') } }]] },\n\n\n\n\n\n  {\n    label: t('Options'),\n    expanded: true,\n    controlSetRows: [\n    [\n    {\n      name: 'show_bubbles',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Show Bubbles'),\n        default: false,\n        renderTrigger: true,\n        description: t('Whether to display bubbles on top of countries') } }],\n\n\n\n    ['secondary_metric'],\n    [\n    {\n      name: 'max_bubble_size',\n      config: {\n        type: 'SelectControl',\n        freeForm: true,\n        label: t('Max Bubble Size'),\n        default: '25',\n        choices: formatSelectOptions([\n        '5',\n        '10',\n        '15',\n        '25',\n        '50',\n        '75',\n        '100']) } }],\n\n\n\n\n    ['color_picker'],\n    [\n    {\n      name: 'color_by',\n      config: {\n        type: 'RadioButtonControl',\n        label: t('Color by'),\n        default: ColorBy.metric,\n        options: [\n        [ColorBy.metric, t('Metric')],\n        [ColorBy.country, t('Country')]],\n\n        description: t('Choose whether a country should be shaded by the metric, or assigned a color based on a categorical color palette') } }],\n\n\n\n    ['linear_color_scheme'],\n    ['color_scheme']] }],\n\n\n\n  controlOverrides: {\n    entity: {\n      label: t('Country Column'),\n      description: t('3 letter code of the country') },\n\n    secondary_metric: {\n      label: t('Bubble Size'),\n      description: t('Metric that defines the size of the bubble') },\n\n    color_picker: {\n      label: t('Bubble Color') },\n\n    linear_color_scheme: {\n      label: t('Country Color Scheme'),\n      visibility: (_ref) => {let { controls } = _ref;return Boolean((controls == null ? void 0 : controls.color_by.value) === ColorBy.metric);} },\n\n    color_scheme: {\n      label: t('Country Color Scheme'),\n      visibility: (_ref2) => {let { controls } = _ref2;return Boolean((controls == null ? void 0 : controls.color_by.value) === ColorBy.country);} } },\n\n\n  formDataOverrides: (formData) => ({\n    ...formData,\n    entity: getStandardizedControls().shiftColumn(),\n    metric: getStandardizedControls().shiftMetric() }) };\n\n\nexport default config;","map":{"version":3,"mappings":"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","names":["t","formatSelectOptions","getStandardizedControls","sections","ColorBy","config","controlPanelSections","legacyRegularTime","label","expanded","controlSetRows","name","type","default","choices","description","renderTrigger","freeForm","metric","options","country","controlOverrides","entity","secondary_metric","color_picker","linear_color_scheme","visibility","controls","Boolean","color_by","value","color_scheme","formDataOverrides","formData","shiftColumn","shiftMetric"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/legacy-plugin-chart-world-map/src/controlPanel.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\nimport {\n  ControlPanelConfig,\n  formatSelectOptions,\n  getStandardizedControls,\n  sections,\n} from '@superset-ui/chart-controls';\nimport { ColorBy } from './utils';\n\nconst config: ControlPanelConfig = {\n  controlPanelSections: [\n    sections.legacyRegularTime,\n    {\n      label: t('Query'),\n      expanded: true,\n      controlSetRows: [\n        ['entity'],\n        [\n          {\n            name: 'country_fieldtype',\n            config: {\n              type: 'SelectControl',\n              label: t('Country Field Type'),\n              default: 'cca2',\n              choices: [\n                ['name', t('Full name')],\n                ['cioc', t('code International Olympic Committee (cioc)')],\n                ['cca2', t('code ISO 3166-1 alpha-2 (cca2)')],\n                ['cca3', t('code ISO 3166-1 alpha-3 (cca3)')],\n              ],\n              description: t(\n                'The country code standard that Superset should expect ' +\n                  'to find in the [country] column',\n              ),\n            },\n          },\n        ],\n        ['metric'],\n        ['adhoc_filters'],\n        ['row_limit'],\n        [\n          {\n            name: 'sort_by_metric',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Sort by metric'),\n              description: t(\n                'Whether to sort results by the selected metric in descending order.',\n              ),\n            },\n          },\n        ],\n      ],\n    },\n    {\n      label: t('Options'),\n      expanded: true,\n      controlSetRows: [\n        [\n          {\n            name: 'show_bubbles',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Show Bubbles'),\n              default: false,\n              renderTrigger: true,\n              description: t('Whether to display bubbles on top of countries'),\n            },\n          },\n        ],\n        ['secondary_metric'],\n        [\n          {\n            name: 'max_bubble_size',\n            config: {\n              type: 'SelectControl',\n              freeForm: true,\n              label: t('Max Bubble Size'),\n              default: '25',\n              choices: formatSelectOptions([\n                '5',\n                '10',\n                '15',\n                '25',\n                '50',\n                '75',\n                '100',\n              ]),\n            },\n          },\n        ],\n        ['color_picker'],\n        [\n          {\n            name: 'color_by',\n            config: {\n              type: 'RadioButtonControl',\n              label: t('Color by'),\n              default: ColorBy.metric,\n              options: [\n                [ColorBy.metric, t('Metric')],\n                [ColorBy.country, t('Country')],\n              ],\n              description: t(\n                'Choose whether a country should be shaded by the metric, or assigned a color based on a categorical color palette',\n              ),\n            },\n          },\n        ],\n        ['linear_color_scheme'],\n        ['color_scheme'],\n      ],\n    },\n  ],\n  controlOverrides: {\n    entity: {\n      label: t('Country Column'),\n      description: t('3 letter code of the country'),\n    },\n    secondary_metric: {\n      label: t('Bubble Size'),\n      description: t('Metric that defines the size of the bubble'),\n    },\n    color_picker: {\n      label: t('Bubble Color'),\n    },\n    linear_color_scheme: {\n      label: t('Country Color Scheme'),\n      visibility: ({ controls }) =>\n        Boolean(controls?.color_by.value === ColorBy.metric),\n    },\n    color_scheme: {\n      label: t('Country Color Scheme'),\n      visibility: ({ controls }) =>\n        Boolean(controls?.color_by.value === ColorBy.country),\n    },\n  },\n  formDataOverrides: formData => ({\n    ...formData,\n    entity: getStandardizedControls().shiftColumn(),\n    metric: getStandardizedControls().shiftMetric(),\n  }),\n};\n\nexport default config;\n"]},"metadata":{},"sourceType":"module"}