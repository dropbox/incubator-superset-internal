{"ast":null,"code":"import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\nSupersetClient,\ngetTimeFormatter,\nTimeFormats,\nensureIsArray } from\n'@superset-ui/core';\n\n// ATTENTION: If you change any constants, make sure to also change constants.py\n\nexport const EMPTY_STRING = '<empty string>';\nexport const NULL_STRING = '<NULL>';\nexport const TRUE_STRING = 'TRUE';\nexport const FALSE_STRING = 'FALSE';\n\n// moment time format strings\nexport const SHORT_DATE = 'MMM D, YYYY';\nexport const SHORT_TIME = 'h:m a';\n\nconst DATETIME_FORMATTER = getTimeFormatter(TimeFormats.DATABASE_DATETIME);\n\nexport function storeQuery(query) {\n  return SupersetClient.post({\n    endpoint: '/kv/store/',\n    postPayload: { data: query } }).\n  then((response) => {\n    const baseUrl = window.location.origin + window.location.pathname;\n    const url = `${baseUrl}?id=${response.json.id}`;\n    return url;\n  });\n}\n\nexport function optionLabel(opt) {\n  if (opt === null) {\n    return NULL_STRING;\n  }\n  if (opt === '') {\n    return EMPTY_STRING;\n  }\n  if (opt === true) {\n    return TRUE_STRING;\n  }\n  if (opt === false) {\n    return FALSE_STRING;\n  }\n  if (typeof opt !== 'string' && opt.toString) {\n    return opt.toString();\n  }\n  return opt;\n}\n\nexport function optionValue(opt) {\n  if (opt === null) {\n    return NULL_STRING;\n  }\n  return opt;\n}\n\nexport function optionFromValue(opt) {\n  // From a list of options, handles special values & labels\n  return { value: optionValue(opt), label: optionLabel(opt) };\n}\n\nfunction getColumnName(column) {\n  return column.name || column;\n}\n\nexport function prepareCopyToClipboardTabularData(data, columns) {\n  let result = columns.length ?\n  `${columns.map(getColumnName).join('\\t')}\\n` :\n  '';\n  for (let i = 0; i < data.length; i += 1) {\n    const row = {};\n    for (let j = 0; j < columns.length; j += 1) {\n      // JavaScript does not maintain the order of a mixed set of keys (i.e integers and strings)\n      // the below function orders the keys based on the column names.\n      const key = getColumnName(columns[j]);\n      if (key in data[i]) {\n        row[j] = data[i][key];\n      } else {\n        row[j] = data[i][parseFloat(key)];\n      }\n    }\n    result += `${Object.values(row).join('\\t')}\\n`;\n  }\n  return result;\n}\n\nexport function applyFormattingToTabularData(data, timeFormattedColumns) {\n  if (\n  !data ||\n  data.length === 0 ||\n  ensureIsArray(timeFormattedColumns).length === 0)\n  {\n    return data;\n  }\n\n  return data.map((row) => ({\n    ...row,\n    /* eslint-disable no-underscore-dangle */\n    ...timeFormattedColumns.reduce((acc, colName) => {\n      if (row[colName] !== null && row[colName] !== undefined) {\n        acc[colName] = DATETIME_FORMATTER(row[colName]);\n      }\n      return acc;\n    }, {}) }));\n\n}\n\nexport const noOp = () => undefined;\n\n// Detects the user's OS through the browser\nexport const detectOS = () => {\n  const { appVersion } = navigator;\n\n  // Leveraging this condition because of stackOverflow\n  // https://stackoverflow.com/questions/11219582/how-to-detect-my-browser-version-and-operating-system-using-javascript\n  if (_includesInstanceProperty(appVersion).call(appVersion, 'Win')) return 'Windows';\n  if (_includesInstanceProperty(appVersion).call(appVersion, 'Mac')) return 'MacOS';\n  if (_includesInstanceProperty(appVersion).call(appVersion, 'X11')) return 'UNIX';\n  if (_includesInstanceProperty(appVersion).call(appVersion, 'Linux')) return 'Linux';\n\n  return 'Unknown OS';\n};\n\nexport const isSafari = () => {\n  const { userAgent } = navigator;\n\n  return userAgent && /^((?!chrome|android).)*safari/i.test(userAgent);\n};","map":{"version":3,"names":["SupersetClient","getTimeFormatter","TimeFormats","ensureIsArray","EMPTY_STRING","NULL_STRING","TRUE_STRING","FALSE_STRING","SHORT_DATE","SHORT_TIME","DATETIME_FORMATTER","DATABASE_DATETIME","storeQuery","query","post","endpoint","postPayload","data","then","response","baseUrl","window","location","origin","pathname","url","json","id","optionLabel","opt","toString","optionValue","optionFromValue","value","label","getColumnName","column","name","prepareCopyToClipboardTabularData","columns","result","length","map","join","i","row","j","key","parseFloat","Object","values","applyFormattingToTabularData","timeFormattedColumns","reduce","acc","colName","undefined","noOp","detectOS","appVersion","navigator","isSafari","userAgent","test"],"sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/utils/common.js"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  SupersetClient,\n  getTimeFormatter,\n  TimeFormats,\n  ensureIsArray,\n} from '@superset-ui/core';\n\n// ATTENTION: If you change any constants, make sure to also change constants.py\n\nexport const EMPTY_STRING = '<empty string>';\nexport const NULL_STRING = '<NULL>';\nexport const TRUE_STRING = 'TRUE';\nexport const FALSE_STRING = 'FALSE';\n\n// moment time format strings\nexport const SHORT_DATE = 'MMM D, YYYY';\nexport const SHORT_TIME = 'h:m a';\n\nconst DATETIME_FORMATTER = getTimeFormatter(TimeFormats.DATABASE_DATETIME);\n\nexport function storeQuery(query) {\n  return SupersetClient.post({\n    endpoint: '/kv/store/',\n    postPayload: { data: query },\n  }).then(response => {\n    const baseUrl = window.location.origin + window.location.pathname;\n    const url = `${baseUrl}?id=${response.json.id}`;\n    return url;\n  });\n}\n\nexport function optionLabel(opt) {\n  if (opt === null) {\n    return NULL_STRING;\n  }\n  if (opt === '') {\n    return EMPTY_STRING;\n  }\n  if (opt === true) {\n    return TRUE_STRING;\n  }\n  if (opt === false) {\n    return FALSE_STRING;\n  }\n  if (typeof opt !== 'string' && opt.toString) {\n    return opt.toString();\n  }\n  return opt;\n}\n\nexport function optionValue(opt) {\n  if (opt === null) {\n    return NULL_STRING;\n  }\n  return opt;\n}\n\nexport function optionFromValue(opt) {\n  // From a list of options, handles special values & labels\n  return { value: optionValue(opt), label: optionLabel(opt) };\n}\n\nfunction getColumnName(column) {\n  return column.name || column;\n}\n\nexport function prepareCopyToClipboardTabularData(data, columns) {\n  let result = columns.length\n    ? `${columns.map(getColumnName).join('\\t')}\\n`\n    : '';\n  for (let i = 0; i < data.length; i += 1) {\n    const row = {};\n    for (let j = 0; j < columns.length; j += 1) {\n      // JavaScript does not maintain the order of a mixed set of keys (i.e integers and strings)\n      // the below function orders the keys based on the column names.\n      const key = getColumnName(columns[j]);\n      if (key in data[i]) {\n        row[j] = data[i][key];\n      } else {\n        row[j] = data[i][parseFloat(key)];\n      }\n    }\n    result += `${Object.values(row).join('\\t')}\\n`;\n  }\n  return result;\n}\n\nexport function applyFormattingToTabularData(data, timeFormattedColumns) {\n  if (\n    !data ||\n    data.length === 0 ||\n    ensureIsArray(timeFormattedColumns).length === 0\n  ) {\n    return data;\n  }\n\n  return data.map(row => ({\n    ...row,\n    /* eslint-disable no-underscore-dangle */\n    ...timeFormattedColumns.reduce((acc, colName) => {\n      if (row[colName] !== null && row[colName] !== undefined) {\n        acc[colName] = DATETIME_FORMATTER(row[colName]);\n      }\n      return acc;\n    }, {}),\n  }));\n}\n\nexport const noOp = () => undefined;\n\n// Detects the user's OS through the browser\nexport const detectOS = () => {\n  const { appVersion } = navigator;\n\n  // Leveraging this condition because of stackOverflow\n  // https://stackoverflow.com/questions/11219582/how-to-detect-my-browser-version-and-operating-system-using-javascript\n  if (appVersion.includes('Win')) return 'Windows';\n  if (appVersion.includes('Mac')) return 'MacOS';\n  if (appVersion.includes('X11')) return 'UNIX';\n  if (appVersion.includes('Linux')) return 'Linux';\n\n  return 'Unknown OS';\n};\n\nexport const isSafari = () => {\n  const { userAgent } = navigator;\n\n  return userAgent && /^((?!chrome|android).)*safari/i.test(userAgent);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}