{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useRef } from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\nimport { DragContainer } from 'src/explore/components/controls/OptionControls';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { StyledColumnOption } from 'src/explore/components/optionRenderers';\nimport { styled, isAdhocColumn } from '@superset-ui/core';\nimport Option from './Option';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport const OptionLabel = styled.div`\n  width: 100%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\nexport default function OptionWrapper(props) {\n  const { index, label, tooltipTitle, column, type, onShiftOptions, clickClose, withCaret, isExtra, datasourceWarningMessage, canDelete = true, ...rest } = props;\n  const ref = useRef(null);\n  const labelRef = useRef(null);\n  const [{ isDragging }, drag] = useDrag({\n    item: {\n      type,\n      dragIndex: index },\n\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging() }) });\n\n\n  const [, drop] = useDrop({\n    accept: type,\n    hover: (item, monitor) => {var _ref$current;\n      if (!ref.current) {\n        return;\n      }\n      const { dragIndex } = item;\n      const hoverIndex = index;\n      // Don't replace items with themselves\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n      // Determine rectangle on screen\n      const hoverBoundingRect = (_ref$current = ref.current) == null ? void 0 : _ref$current.getBoundingClientRect();\n      // Get vertical middle\n      const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n      // Determine mouse position\n      const clientOffset = monitor.getClientOffset();\n      // Get pixels to the top\n      const hoverClientY = clientOffset ?\n      clientOffset.y - hoverBoundingRect.top :\n      0;\n      // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n      // Dragging downwards\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      }\n      // Dragging upwards\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      }\n      // Time to actually perform the action\n      onShiftOptions(dragIndex, hoverIndex);\n      // eslint-disable-next-line no-param-reassign\n      item.dragIndex = hoverIndex;\n    } });\n\n  const shouldShowTooltip = !isDragging && tooltipTitle && label && tooltipTitle !== label ||\n  !isDragging &&\n  labelRef &&\n  labelRef.current &&\n  labelRef.current.scrollWidth > labelRef.current.clientWidth;\n  const LabelContent = () => {\n    if (!shouldShowTooltip) {\n      return ___EmotionJSX(\"span\", null, label);\n    }\n    return ___EmotionJSX(Tooltip, { title: tooltipTitle || label },\n    ___EmotionJSX(\"span\", null, label));\n\n  };\n  const ColumnOption = () => {\n    const transformedCol = column && isAdhocColumn(column) ?\n    { verbose_name: column.label, expression: column.sqlExpression } :\n    column;\n    return ___EmotionJSX(StyledColumnOption, { column: transformedCol, labelRef: labelRef, showType: true });\n  };\n  const Label = () => {\n    if (label) {\n      return ___EmotionJSX(OptionLabel, { ref: labelRef },\n      ___EmotionJSX(LabelContent, null));\n\n    }\n    if (column) {\n      return ___EmotionJSX(OptionLabel, null,\n      ___EmotionJSX(ColumnOption, null));\n\n    }\n    return null;\n  };\n  drag(drop(ref));\n  return ___EmotionJSX(DragContainer, _extends({ ref: ref }, rest),\n  ___EmotionJSX(Option, { index: index, clickClose: clickClose, withCaret: withCaret, isExtra: isExtra, datasourceWarningMessage: datasourceWarningMessage, canDelete: canDelete },\n  ___EmotionJSX(Label, null)));\n\n\n}__signature__(OptionWrapper, \"useRef{ref}\\nuseRef{labelRef}\\nuseDrag{[{ isDragging }, drag]}\\nuseDrop{[, drop]}\", () => [useDrag, useDrop]);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(OptionLabel, \"OptionLabel\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/OptionWrapper.tsx\");reactHotLoader.register(OptionWrapper, \"OptionWrapper\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/OptionWrapper.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"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","names":["React","useRef","useDrag","useDrop","DragContainer","Tooltip","StyledColumnOption","styled","isAdhocColumn","Option","OptionLabel","div","OptionWrapper","props","index","label","tooltipTitle","column","type","onShiftOptions","clickClose","withCaret","isExtra","datasourceWarningMessage","canDelete","rest","ref","labelRef","isDragging","drag","item","dragIndex","collect","monitor","drop","accept","hover","current","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","clientOffset","getClientOffset","hoverClientY","y","shouldShowTooltip","scrollWidth","clientWidth","LabelContent","ColumnOption","transformedCol","verbose_name","expression","sqlExpression","Label"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/OptionWrapper.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useRef } from 'react';\nimport {\n  useDrag,\n  useDrop,\n  DropTargetMonitor,\n  DragSourceMonitor,\n} from 'react-dnd';\nimport { DragContainer } from 'src/explore/components/controls/OptionControls';\nimport {\n  OptionProps,\n  OptionItemInterface,\n} from 'src/explore/components/controls/DndColumnSelectControl/types';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { StyledColumnOption } from 'src/explore/components/optionRenderers';\nimport { styled, isAdhocColumn } from '@superset-ui/core';\nimport { ColumnMeta } from '@superset-ui/chart-controls';\nimport Option from './Option';\n\nexport const OptionLabel = styled.div`\n  width: 100%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\nexport default function OptionWrapper(\n  props: OptionProps & {\n    type: string;\n    onShiftOptions: (dragIndex: number, hoverIndex: number) => void;\n  },\n) {\n  const {\n    index,\n    label,\n    tooltipTitle,\n    column,\n    type,\n    onShiftOptions,\n    clickClose,\n    withCaret,\n    isExtra,\n    datasourceWarningMessage,\n    canDelete = true,\n    ...rest\n  } = props;\n  const ref = useRef<HTMLDivElement>(null);\n  const labelRef = useRef<HTMLDivElement>(null);\n\n  const [{ isDragging }, drag] = useDrag({\n    item: {\n      type,\n      dragIndex: index,\n    },\n    collect: (monitor: DragSourceMonitor) => ({\n      isDragging: monitor.isDragging(),\n    }),\n  });\n\n  const [, drop] = useDrop({\n    accept: type,\n\n    hover: (item: OptionItemInterface, monitor: DropTargetMonitor) => {\n      if (!ref.current) {\n        return;\n      }\n      const { dragIndex } = item;\n      const hoverIndex = index;\n\n      // Don't replace items with themselves\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n      // Determine rectangle on screen\n      const hoverBoundingRect = ref.current?.getBoundingClientRect();\n      // Get vertical middle\n      const hoverMiddleY =\n        (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n      // Determine mouse position\n      const clientOffset = monitor.getClientOffset();\n      // Get pixels to the top\n      const hoverClientY = clientOffset\n        ? clientOffset.y - hoverBoundingRect.top\n        : 0;\n      // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n      // Dragging downwards\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      }\n      // Dragging upwards\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      }\n\n      // Time to actually perform the action\n      onShiftOptions(dragIndex, hoverIndex);\n      // eslint-disable-next-line no-param-reassign\n      item.dragIndex = hoverIndex;\n    },\n  });\n\n  const shouldShowTooltip =\n    (!isDragging && tooltipTitle && label && tooltipTitle !== label) ||\n    (!isDragging &&\n      labelRef &&\n      labelRef.current &&\n      labelRef.current.scrollWidth > labelRef.current.clientWidth);\n\n  const LabelContent = () => {\n    if (!shouldShowTooltip) {\n      return <span>{label}</span>;\n    }\n    return (\n      <Tooltip title={tooltipTitle || label}>\n        <span>{label}</span>\n      </Tooltip>\n    );\n  };\n\n  const ColumnOption = () => {\n    const transformedCol =\n      column && isAdhocColumn(column)\n        ? { verbose_name: column.label, expression: column.sqlExpression }\n        : column;\n    return (\n      <StyledColumnOption\n        column={transformedCol as ColumnMeta}\n        labelRef={labelRef}\n        showType\n      />\n    );\n  };\n\n  const Label = () => {\n    if (label) {\n      return (\n        <OptionLabel ref={labelRef}>\n          <LabelContent />\n        </OptionLabel>\n      );\n    }\n    if (column) {\n      return (\n        <OptionLabel>\n          <ColumnOption />\n        </OptionLabel>\n      );\n    }\n    return null;\n  };\n\n  drag(drop(ref));\n\n  return (\n    <DragContainer ref={ref} {...rest}>\n      <Option\n        index={index}\n        clickClose={clickClose}\n        withCaret={withCaret}\n        isExtra={isExtra}\n        datasourceWarningMessage={datasourceWarningMessage}\n        canDelete={canDelete}\n      >\n        <Label />\n      </Option>\n    </DragContainer>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}