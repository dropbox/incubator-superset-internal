{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { FeatureFlag, styled, t, useTheme } from '@superset-ui/core';\nimport Button from 'src/components/Button';\nimport Icons from 'src/components/Icons';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport CopyToClipboard from 'src/components/CopyToClipboard';\nimport { storeQuery } from 'src/utils/common';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport { isFeatureEnabled } from 'src/featureFlags';\nimport useQueryEditor from 'src/SqlLab/hooks/useQueryEditor';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst StyledIcon = styled(Icons.Link)`\n  &:first-of-type {\n    margin: 0;\n    display: flex;\n    svg {\n      margin: 0;\n    }\n  }\n`;\nconst ShareSqlLabQuery = (_ref) => {let { queryEditorId, addDangerToast } = _ref;\n  const theme = useTheme();\n  const { dbId, name, schema, autorun, sql, remoteId, templateParams } = useQueryEditor(queryEditorId, [\n  'dbId',\n  'name',\n  'schema',\n  'autorun',\n  'sql',\n  'remoteId',\n  'templateParams']);\n\n  const getCopyUrlForKvStore = (callback) => {\n    const sharedQuery = { dbId, name, schema, autorun, sql, templateParams };\n    return storeQuery(sharedQuery).\n    then((shortUrl) => {\n      callback(shortUrl);\n    }).\n    catch((response) => {\n      getClientErrorObject(response).then(() => {\n        addDangerToast(t('There was an error with your request'));\n      });\n    });\n  };\n  const getCopyUrlForSavedQuery = (callback) => {\n    let savedQueryToastContent;\n    if (remoteId) {\n      savedQueryToastContent = `${window.location.origin + window.location.pathname}?savedQueryId=${remoteId}`;\n      callback(savedQueryToastContent);\n    } else\n    {\n      savedQueryToastContent = t('Please save the query to enable sharing');\n      callback(savedQueryToastContent);\n    }\n  };\n  const getCopyUrl = (callback) => {\n    if (isFeatureEnabled(FeatureFlag.SHARE_QUERIES_VIA_KV_STORE)) {\n      return getCopyUrlForKvStore(callback);\n    }\n    return getCopyUrlForSavedQuery(callback);\n  };\n  const buildButton = (canShare) => {\n    const tooltip = canShare ?\n    t('Copy query link to your clipboard') :\n    t('Save the query to enable this feature');\n    return ___EmotionJSX(Button, { buttonSize: \"small\", tooltip: tooltip, disabled: !canShare },\n    ___EmotionJSX(StyledIcon, { iconColor: canShare ? theme.colors.primary.base : theme.colors.grayscale.base, iconSize: \"xl\" }),\n    t('Copy link'));\n\n  };\n  const canShare = !!remoteId || isFeatureEnabled(FeatureFlag.SHARE_QUERIES_VIA_KV_STORE);\n  return ___EmotionJSX(React.Fragment, null,\n  canShare ? ___EmotionJSX(CopyToClipboard, { getText: getCopyUrl, wrapped: false, copyNode: buildButton(canShare) }) : buildButton(canShare));\n\n};__signature__(ShareSqlLabQuery, \"useTheme{theme}\\nuseQueryEditor{{ dbId, name, schema, autorun, sql, remoteId, templateParams }}\", () => [useTheme, useQueryEditor]);const _default =\nwithToasts(ShareSqlLabQuery);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(StyledIcon, \"StyledIcon\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/SqlLab/components/ShareSqlLabQuery/index.tsx\");reactHotLoader.register(ShareSqlLabQuery, \"ShareSqlLabQuery\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/SqlLab/components/ShareSqlLabQuery/index.tsx\");reactHotLoader.register(_default, \"default\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/SqlLab/components/ShareSqlLabQuery/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"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","names":["React","FeatureFlag","styled","t","useTheme","Button","Icons","withToasts","CopyToClipboard","storeQuery","getClientErrorObject","isFeatureEnabled","useQueryEditor","StyledIcon","Link","ShareSqlLabQuery","queryEditorId","addDangerToast","theme","dbId","name","schema","autorun","sql","remoteId","templateParams","getCopyUrlForKvStore","callback","sharedQuery","then","shortUrl","catch","response","getCopyUrlForSavedQuery","savedQueryToastContent","window","location","origin","pathname","getCopyUrl","SHARE_QUERIES_VIA_KV_STORE","buildButton","canShare","tooltip","colors","primary","base","grayscale"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/SqlLab/components/ShareSqlLabQuery/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { FeatureFlag, styled, t, useTheme } from '@superset-ui/core';\nimport Button from 'src/components/Button';\nimport Icons from 'src/components/Icons';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport CopyToClipboard from 'src/components/CopyToClipboard';\nimport { storeQuery } from 'src/utils/common';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport { isFeatureEnabled } from 'src/featureFlags';\nimport useQueryEditor from 'src/SqlLab/hooks/useQueryEditor';\n\ninterface ShareSqlLabQueryProps {\n  queryEditorId: string;\n  addDangerToast: (msg: string) => void;\n}\n\nconst StyledIcon = styled(Icons.Link)`\n  &:first-of-type {\n    margin: 0;\n    display: flex;\n    svg {\n      margin: 0;\n    }\n  }\n`;\n\nconst ShareSqlLabQuery = ({\n  queryEditorId,\n  addDangerToast,\n}: ShareSqlLabQueryProps) => {\n  const theme = useTheme();\n\n  const { dbId, name, schema, autorun, sql, remoteId, templateParams } =\n    useQueryEditor(queryEditorId, [\n      'dbId',\n      'name',\n      'schema',\n      'autorun',\n      'sql',\n      'remoteId',\n      'templateParams',\n    ]);\n\n  const getCopyUrlForKvStore = (callback: Function) => {\n    const sharedQuery = { dbId, name, schema, autorun, sql, templateParams };\n\n    return storeQuery(sharedQuery)\n      .then(shortUrl => {\n        callback(shortUrl);\n      })\n      .catch(response => {\n        getClientErrorObject(response).then(() => {\n          addDangerToast(t('There was an error with your request'));\n        });\n      });\n  };\n\n  const getCopyUrlForSavedQuery = (callback: Function) => {\n    let savedQueryToastContent;\n\n    if (remoteId) {\n      savedQueryToastContent = `${\n        window.location.origin + window.location.pathname\n      }?savedQueryId=${remoteId}`;\n      callback(savedQueryToastContent);\n    } else {\n      savedQueryToastContent = t('Please save the query to enable sharing');\n      callback(savedQueryToastContent);\n    }\n  };\n  const getCopyUrl = (callback: Function) => {\n    if (isFeatureEnabled(FeatureFlag.SHARE_QUERIES_VIA_KV_STORE)) {\n      return getCopyUrlForKvStore(callback);\n    }\n    return getCopyUrlForSavedQuery(callback);\n  };\n\n  const buildButton = (canShare: boolean) => {\n    const tooltip = canShare\n      ? t('Copy query link to your clipboard')\n      : t('Save the query to enable this feature');\n    return (\n      <Button buttonSize=\"small\" tooltip={tooltip} disabled={!canShare}>\n        <StyledIcon\n          iconColor={\n            canShare ? theme.colors.primary.base : theme.colors.grayscale.base\n          }\n          iconSize=\"xl\"\n        />\n        {t('Copy link')}\n      </Button>\n    );\n  };\n\n  const canShare =\n    !!remoteId || isFeatureEnabled(FeatureFlag.SHARE_QUERIES_VIA_KV_STORE);\n\n  return (\n    <>\n      {canShare ? (\n        <CopyToClipboard\n          getText={getCopyUrl}\n          wrapped={false}\n          copyNode={buildButton(canShare)}\n        />\n      ) : (\n        buildButton(canShare)\n      )}\n    </>\n  );\n};\n\nexport default withToasts(ShareSqlLabQuery);\n"]},"metadata":{},"sourceType":"module"}