{"ast":null,"code":"import _isEqual from \"lodash/isEqual\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useMemo, useState } from 'react';\nimport { useFilters, usePagination, useRowSelect, useRowState, useSortBy, useTable } from 'react-table';\nimport { NumberParam, StringParam, useQueryParams } from 'use-query-params';\nimport rison from 'rison';\n\n// Define custom RisonParam for proper encoding/decoding; note that\n// %, &, +, and # must be encoded to avoid breaking the url\nconst RisonParam = {\n  encode: (data) => data === undefined ?\n  undefined :\n  rison.\n  encode(data).\n  replace(/%/g, '%25').\n  replace(/&/g, '%26').\n  replace(/\\+/g, '%2B').\n  replace(/#/g, '%23'),\n  decode: (dataStr) => dataStr === undefined || Array.isArray(dataStr) ?\n  undefined :\n  rison.decode(dataStr) };\n\nexport const SELECT_WIDTH = 200;\nexport class ListViewError extends Error {constructor() {super(...arguments);this.\n    name = 'ListViewError';} // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}} // removes element from a list, returns new list\nexport function removeFromList(list, index) {\n  return list.filter((_, i) => index !== i);\n}\n// apply update to elements of object list, returns new list\nfunction updateInList(list, index, update) {\n  const element = list.find((_, i) => index === i);\n  return [\n  ...list.slice(0, index),\n  { ...element, ...update },\n  ...list.slice(index + 1)];\n\n}\nfunction mergeCreateFilterValues(list, updateObj) {\n  return list.map((_ref) => {let { id, urlDisplay, operator } = _ref;\n    const currentFilterId = urlDisplay || id;\n    const update = updateObj[currentFilterId];\n    return { id, urlDisplay, operator, value: update };\n  });\n}\n// convert filters from UI objects to data objects\nexport function convertFilters(fts) {\n  return fts.\n  filter((f) => !(typeof f.value === 'undefined' ||\n  Array.isArray(f.value) && !f.value.length)).\n  map((_ref2) => {let { value, operator, id } = _ref2;\n    // handle between filter using 2 api filters\n    if (operator === 'between' && Array.isArray(value)) {\n      return [\n      {\n        value: value[0],\n        operator: 'gt',\n        id },\n\n      {\n        value: value[1],\n        operator: 'lt',\n        id }];\n\n\n    }\n    return {\n      value,\n      operator,\n      id };\n\n  }).\n  flat();\n}\n// convertFilters but to handle new decoded rison format\nexport function convertFiltersRison(filterObj, list) {\n  const filters = [];\n  const refs = {};\n  Object.keys(filterObj).forEach((id) => {\n    const filter = {\n      id,\n      value: filterObj[id]\n      // operator: filterObj[id][1], // TODO: can probably get rid of this\n    };\n    refs[id] = filter;\n    filters.push(filter);\n  });\n  // Add operators from filter list\n  list.forEach((value) => {\n    const currentFilterId = value.urlDisplay || value.id;\n    const filter = refs[currentFilterId];\n    if (filter) {\n      filter.operator = value.operator;\n      filter.id = value.id;\n    }\n  });\n  return filters;\n}\nexport function extractInputValue(inputType, event) {\n  if (!inputType || inputType === 'text') {\n    return event.currentTarget.value;\n  }\n  if (inputType === 'checkbox') {\n    return event.currentTarget.checked;\n  }\n  return null;\n}\nexport function useListViewState(_ref3) {let { fetchData, columns, data, count, initialPageSize, initialFilters = [], initialSort = [], bulkSelectMode = false, bulkSelectColumnConfig, renderCard = false, defaultViewMode = 'card' } = _ref3;\n  const [query, setQuery] = useQueryParams({\n    filters: RisonParam,\n    pageIndex: NumberParam,\n    sortColumn: StringParam,\n    sortOrder: StringParam,\n    viewMode: StringParam });\n\n  const initialSortBy = useMemo(() => query.sortColumn && query.sortOrder ?\n  [{ id: query.sortColumn, desc: query.sortOrder === 'desc' }] :\n  initialSort, [query.sortColumn, query.sortOrder]);\n  const initialState = {\n    filters: query.filters ?\n    convertFiltersRison(query.filters, initialFilters) :\n    [],\n    pageIndex: query.pageIndex || 0,\n    pageSize: initialPageSize,\n    sortBy: initialSortBy };\n\n  const [viewMode, setViewMode] = useState(query.viewMode || (\n  renderCard ? defaultViewMode : 'table'));\n  const columnsWithSelect = useMemo(() => {\n    // add exact filter type so filters with falsey values are not filtered out\n    const columnsWithFilter = columns.map((f) => ({ ...f, filter: 'exact' }));\n    return bulkSelectMode ?\n    [bulkSelectColumnConfig, ...columnsWithFilter] :\n    columnsWithFilter;\n  }, [bulkSelectMode, columns]);\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow, canPreviousPage, canNextPage, pageCount, gotoPage, setAllFilters, selectedFlatRows, toggleAllRowsSelected, state: { pageIndex, pageSize, sortBy, filters } } = useTable({\n    columns: columnsWithSelect,\n    count,\n    data,\n    disableFilters: true,\n    disableSortRemove: true,\n    initialState,\n    manualFilters: true,\n    manualPagination: true,\n    manualSortBy: true,\n    autoResetFilters: false,\n    pageCount: Math.ceil(count / initialPageSize) },\n  useFilters, useSortBy, usePagination, useRowState, useRowSelect);\n  const [internalFilters, setInternalFilters] = useState(query.filters && initialFilters.length ?\n  mergeCreateFilterValues(initialFilters, query.filters) :\n  []);\n  useEffect(() => {\n    if (initialFilters.length) {\n      setInternalFilters(mergeCreateFilterValues(initialFilters, query.filters ? query.filters : {}));\n    }\n  }, [initialFilters]);\n  useEffect(() => {\n    // From internalFilters, produce a simplified obj\n    const filterObj = {};\n    internalFilters.forEach((filter) => {\n      if (filter.value !== undefined && (\n      typeof filter.value !== 'string' || filter.value.length > 0)) {\n        const currentFilterId = filter.urlDisplay || filter.id;\n        filterObj[currentFilterId] = filter.value;\n      }\n    });\n    const queryParams = {\n      filters: Object.keys(filterObj).length ? filterObj : undefined,\n      pageIndex };\n\n    if (sortBy[0]) {\n      queryParams.sortColumn = sortBy[0].id;\n      queryParams.sortOrder = sortBy[0].desc ? 'desc' : 'asc';\n    }\n    if (renderCard) {\n      queryParams.viewMode = viewMode;\n    }\n    const method = typeof query.pageIndex !== 'undefined' &&\n    queryParams.pageIndex !== query.pageIndex ?\n    'push' :\n    'replace';\n    setQuery(queryParams, method);\n    fetchData({ pageIndex, pageSize, sortBy, filters });\n  }, [fetchData, pageIndex, pageSize, sortBy, filters]);\n  useEffect(() => {\n    if (!_isEqual(initialState.pageIndex, pageIndex)) {\n      gotoPage(initialState.pageIndex);\n    }\n  }, [query]);\n  const applyFilterValue = (index, value) => {\n    setInternalFilters((currentInternalFilters) => {\n      // skip redundant updates\n      if (currentInternalFilters[index].value === value) {\n        return currentInternalFilters;\n      }\n      const update = { ...currentInternalFilters[index], value };\n      const updatedFilters = updateInList(currentInternalFilters, index, update);\n      setAllFilters(convertFilters(updatedFilters));\n      gotoPage(0); // clear pagination on filter\n      return updatedFilters;\n    });\n  };\n  return {\n    canNextPage,\n    canPreviousPage,\n    getTableBodyProps,\n    getTableProps,\n    gotoPage,\n    headerGroups,\n    pageCount,\n    prepareRow,\n    rows,\n    selectedFlatRows,\n    setAllFilters,\n    state: { pageIndex, pageSize, sortBy, filters, internalFilters, viewMode },\n    toggleAllRowsSelected,\n    applyFilterValue,\n    setViewMode,\n    query };\n\n}__signature__(useListViewState, \"useQueryParams{[query, setQuery]}\\nuseMemo{initialSortBy}\\nuseState{[viewMode, setViewMode](query.viewMode ||\\n        (renderCard ? defaultViewMode : 'table'))}\\nuseMemo{columnsWithSelect}\\nuseTable{{ getTableProps, getTableBodyProps, headerGroups, rows, prepareRow, canPreviousPage, canNextPage, pageCount, gotoPage, setAllFilters, selectedFlatRows, toggleAllRowsSelected, state: { pageIndex, pageSize, sortBy, filters }, }}\\nuseState{[internalFilters, setInternalFilters](query.filters && initialFilters.length\\n        ? mergeCreateFilterValues(initialFilters, query.filters)\\n        : [])}\\nuseEffect{}\\nuseEffect{}\\nuseEffect{}\", () => [useQueryParams, useTable]);\nexport const filterSelectStyles = {\n  container: (provider, _ref4) => {let { getValue } = _ref4;return {\n      ...provider,\n      // dynamic width based on label string length\n      minWidth: `${Math.min(12, Math.max(5, 3 + getValue()[0].label.length / 2))}em` };},\n\n  control: (provider) => ({\n    ...provider,\n    borderWidth: 0,\n    boxShadow: 'none',\n    cursor: 'pointer',\n    backgroundColor: 'transparent' }) };;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(RisonParam, \"RisonParam\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/ListView/utils.ts\");reactHotLoader.register(SELECT_WIDTH, \"SELECT_WIDTH\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/ListView/utils.ts\");reactHotLoader.register(ListViewError, \"ListViewError\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/ListView/utils.ts\");reactHotLoader.register(removeFromList, \"removeFromList\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/ListView/utils.ts\");reactHotLoader.register(updateInList, \"updateInList\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/ListView/utils.ts\");reactHotLoader.register(mergeCreateFilterValues, \"mergeCreateFilterValues\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/ListView/utils.ts\");reactHotLoader.register(convertFilters, \"convertFilters\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/ListView/utils.ts\");reactHotLoader.register(convertFiltersRison, \"convertFiltersRison\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/ListView/utils.ts\");reactHotLoader.register(extractInputValue, \"extractInputValue\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/ListView/utils.ts\");reactHotLoader.register(useListViewState, \"useListViewState\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/ListView/utils.ts\");reactHotLoader.register(filterSelectStyles, \"filterSelectStyles\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/ListView/utils.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"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","names":["useEffect","useMemo","useState","useFilters","usePagination","useRowSelect","useRowState","useSortBy","useTable","NumberParam","StringParam","useQueryParams","rison","RisonParam","encode","data","undefined","replace","decode","dataStr","Array","isArray","SELECT_WIDTH","ListViewError","Error","name","removeFromList","list","index","filter","_","i","updateInList","update","element","find","slice","mergeCreateFilterValues","updateObj","map","id","urlDisplay","operator","currentFilterId","value","convertFilters","fts","f","length","flat","convertFiltersRison","filterObj","filters","refs","Object","keys","forEach","push","extractInputValue","inputType","event","currentTarget","checked","useListViewState","fetchData","columns","count","initialPageSize","initialFilters","initialSort","bulkSelectMode","bulkSelectColumnConfig","renderCard","defaultViewMode","query","setQuery","pageIndex","sortColumn","sortOrder","viewMode","initialSortBy","desc","initialState","pageSize","sortBy","setViewMode","columnsWithSelect","columnsWithFilter","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","canPreviousPage","canNextPage","pageCount","gotoPage","setAllFilters","selectedFlatRows","toggleAllRowsSelected","state","disableFilters","disableSortRemove","manualFilters","manualPagination","manualSortBy","autoResetFilters","Math","ceil","internalFilters","setInternalFilters","queryParams","method","applyFilterValue","currentInternalFilters","updatedFilters","filterSelectStyles","container","provider","getValue","minWidth","min","max","label","control","borderWidth","boxShadow","cursor","backgroundColor"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/ListView/utils.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useMemo, useState } from 'react';\nimport {\n  useFilters,\n  usePagination,\n  useRowSelect,\n  useRowState,\n  useSortBy,\n  useTable,\n} from 'react-table';\n\nimport {\n  NumberParam,\n  StringParam,\n  useQueryParams,\n  QueryParamConfig,\n} from 'use-query-params';\n\nimport rison from 'rison';\nimport { isEqual } from 'lodash';\nimport { PartialStylesConfig } from 'src/components/DeprecatedSelect';\nimport {\n  FetchDataConfig,\n  Filter,\n  FilterValue,\n  InternalFilter,\n  SortColumn,\n  ViewModeType,\n} from './types';\n\n// Define custom RisonParam for proper encoding/decoding; note that\n// %, &, +, and # must be encoded to avoid breaking the url\nconst RisonParam: QueryParamConfig<string, any> = {\n  encode: (data?: any | null) =>\n    data === undefined\n      ? undefined\n      : rison\n          .encode(data)\n          .replace(/%/g, '%25')\n          .replace(/&/g, '%26')\n          .replace(/\\+/g, '%2B')\n          .replace(/#/g, '%23'),\n  decode: (dataStr?: string | string[]) =>\n    dataStr === undefined || Array.isArray(dataStr)\n      ? undefined\n      : rison.decode(dataStr),\n};\n\nexport const SELECT_WIDTH = 200;\n\nexport class ListViewError extends Error {\n  name = 'ListViewError';\n}\n\n// removes element from a list, returns new list\nexport function removeFromList(list: any[], index: number): any[] {\n  return list.filter((_, i) => index !== i);\n}\n\n// apply update to elements of object list, returns new list\nfunction updateInList(list: any[], index: number, update: any): any[] {\n  const element = list.find((_, i) => index === i);\n\n  return [\n    ...list.slice(0, index),\n    { ...element, ...update },\n    ...list.slice(index + 1),\n  ];\n}\n\ntype QueryFilterState = {\n  [id: string]: FilterValue['value'];\n};\n\nfunction mergeCreateFilterValues(list: Filter[], updateObj: QueryFilterState) {\n  return list.map(({ id, urlDisplay, operator }) => {\n    const currentFilterId = urlDisplay || id;\n    const update = updateObj[currentFilterId];\n\n    return { id, urlDisplay, operator, value: update };\n  });\n}\n\n// convert filters from UI objects to data objects\nexport function convertFilters(fts: InternalFilter[]): FilterValue[] {\n  return fts\n    .filter(\n      f =>\n        !(\n          typeof f.value === 'undefined' ||\n          (Array.isArray(f.value) && !f.value.length)\n        ),\n    )\n    .map(({ value, operator, id }) => {\n      // handle between filter using 2 api filters\n      if (operator === 'between' && Array.isArray(value)) {\n        return [\n          {\n            value: value[0],\n            operator: 'gt',\n            id,\n          },\n          {\n            value: value[1],\n            operator: 'lt',\n            id,\n          },\n        ];\n      }\n      return {\n        value,\n        operator,\n        id,\n      };\n    })\n    .flat();\n}\n\n// convertFilters but to handle new decoded rison format\nexport function convertFiltersRison(\n  filterObj: any,\n  list: Filter[],\n): FilterValue[] {\n  const filters: FilterValue[] = [];\n  const refs = {};\n\n  Object.keys(filterObj).forEach(id => {\n    const filter: FilterValue = {\n      id,\n      value: filterObj[id],\n      // operator: filterObj[id][1], // TODO: can probably get rid of this\n    };\n\n    refs[id] = filter;\n    filters.push(filter);\n  });\n\n  // Add operators from filter list\n  list.forEach(value => {\n    const currentFilterId = value.urlDisplay || value.id;\n    const filter = refs[currentFilterId];\n\n    if (filter) {\n      filter.operator = value.operator;\n      filter.id = value.id;\n    }\n  });\n\n  return filters;\n}\n\nexport function extractInputValue(inputType: Filter['input'], event: any) {\n  if (!inputType || inputType === 'text') {\n    return event.currentTarget.value;\n  }\n  if (inputType === 'checkbox') {\n    return event.currentTarget.checked;\n  }\n\n  return null;\n}\n\ninterface UseListViewConfig {\n  fetchData: (conf: FetchDataConfig) => any;\n  columns: any[];\n  data: any[];\n  count: number;\n  initialPageSize: number;\n  initialSort?: SortColumn[];\n  bulkSelectMode?: boolean;\n  initialFilters?: Filter[];\n  bulkSelectColumnConfig?: {\n    id: string;\n    Header: (conf: any) => React.ReactNode;\n    Cell: (conf: any) => React.ReactNode;\n  };\n  renderCard?: boolean;\n  defaultViewMode?: ViewModeType;\n}\n\nexport function useListViewState({\n  fetchData,\n  columns,\n  data,\n  count,\n  initialPageSize,\n  initialFilters = [],\n  initialSort = [],\n  bulkSelectMode = false,\n  bulkSelectColumnConfig,\n  renderCard = false,\n  defaultViewMode = 'card',\n}: UseListViewConfig) {\n  const [query, setQuery] = useQueryParams({\n    filters: RisonParam,\n    pageIndex: NumberParam,\n    sortColumn: StringParam,\n    sortOrder: StringParam,\n    viewMode: StringParam,\n  });\n\n  const initialSortBy = useMemo(\n    () =>\n      query.sortColumn && query.sortOrder\n        ? [{ id: query.sortColumn, desc: query.sortOrder === 'desc' }]\n        : initialSort,\n    [query.sortColumn, query.sortOrder],\n  );\n\n  const initialState = {\n    filters: query.filters\n      ? convertFiltersRison(query.filters, initialFilters)\n      : [],\n    pageIndex: query.pageIndex || 0,\n    pageSize: initialPageSize,\n    sortBy: initialSortBy,\n  };\n\n  const [viewMode, setViewMode] = useState<ViewModeType>(\n    (query.viewMode as ViewModeType) ||\n      (renderCard ? defaultViewMode : 'table'),\n  );\n\n  const columnsWithSelect = useMemo(() => {\n    // add exact filter type so filters with falsey values are not filtered out\n    const columnsWithFilter = columns.map(f => ({ ...f, filter: 'exact' }));\n    return bulkSelectMode\n      ? [bulkSelectColumnConfig, ...columnsWithFilter]\n      : columnsWithFilter;\n  }, [bulkSelectMode, columns]);\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    canPreviousPage,\n    canNextPage,\n    pageCount,\n    gotoPage,\n    setAllFilters,\n    selectedFlatRows,\n    toggleAllRowsSelected,\n    state: { pageIndex, pageSize, sortBy, filters },\n  } = useTable(\n    {\n      columns: columnsWithSelect,\n      count,\n      data,\n      disableFilters: true,\n      disableSortRemove: true,\n      initialState,\n      manualFilters: true,\n      manualPagination: true,\n      manualSortBy: true,\n      autoResetFilters: false,\n      pageCount: Math.ceil(count / initialPageSize),\n    },\n    useFilters,\n    useSortBy,\n    usePagination,\n    useRowState,\n    useRowSelect,\n  );\n\n  const [internalFilters, setInternalFilters] = useState<InternalFilter[]>(\n    query.filters && initialFilters.length\n      ? mergeCreateFilterValues(initialFilters, query.filters)\n      : [],\n  );\n\n  useEffect(() => {\n    if (initialFilters.length) {\n      setInternalFilters(\n        mergeCreateFilterValues(\n          initialFilters,\n          query.filters ? query.filters : {},\n        ),\n      );\n    }\n  }, [initialFilters]);\n\n  useEffect(() => {\n    // From internalFilters, produce a simplified obj\n    const filterObj = {};\n\n    internalFilters.forEach(filter => {\n      if (\n        filter.value !== undefined &&\n        (typeof filter.value !== 'string' || filter.value.length > 0)\n      ) {\n        const currentFilterId = filter.urlDisplay || filter.id;\n        filterObj[currentFilterId] = filter.value;\n      }\n    });\n\n    const queryParams: any = {\n      filters: Object.keys(filterObj).length ? filterObj : undefined,\n      pageIndex,\n    };\n    if (sortBy[0]) {\n      queryParams.sortColumn = sortBy[0].id;\n      queryParams.sortOrder = sortBy[0].desc ? 'desc' : 'asc';\n    }\n\n    if (renderCard) {\n      queryParams.viewMode = viewMode;\n    }\n\n    const method =\n      typeof query.pageIndex !== 'undefined' &&\n      queryParams.pageIndex !== query.pageIndex\n        ? 'push'\n        : 'replace';\n\n    setQuery(queryParams, method);\n\n    fetchData({ pageIndex, pageSize, sortBy, filters });\n  }, [fetchData, pageIndex, pageSize, sortBy, filters]);\n\n  useEffect(() => {\n    if (!isEqual(initialState.pageIndex, pageIndex)) {\n      gotoPage(initialState.pageIndex);\n    }\n  }, [query]);\n\n  const applyFilterValue = (index: number, value: any) => {\n    setInternalFilters(currentInternalFilters => {\n      // skip redundant updates\n      if (currentInternalFilters[index].value === value) {\n        return currentInternalFilters;\n      }\n\n      const update = { ...currentInternalFilters[index], value };\n      const updatedFilters = updateInList(\n        currentInternalFilters,\n        index,\n        update,\n      );\n\n      setAllFilters(convertFilters(updatedFilters));\n      gotoPage(0); // clear pagination on filter\n      return updatedFilters;\n    });\n  };\n\n  return {\n    canNextPage,\n    canPreviousPage,\n    getTableBodyProps,\n    getTableProps,\n    gotoPage,\n    headerGroups,\n    pageCount,\n    prepareRow,\n    rows,\n    selectedFlatRows,\n    setAllFilters,\n    state: { pageIndex, pageSize, sortBy, filters, internalFilters, viewMode },\n    toggleAllRowsSelected,\n    applyFilterValue,\n    setViewMode,\n    query,\n  };\n}\n\nexport const filterSelectStyles: PartialStylesConfig = {\n  container: (provider, { getValue }) => ({\n    ...provider,\n    // dynamic width based on label string length\n    minWidth: `${Math.min(\n      12,\n      Math.max(5, 3 + getValue()[0].label.length / 2),\n    )}em`,\n  }),\n  control: provider => ({\n    ...provider,\n    borderWidth: 0,\n    boxShadow: 'none',\n    cursor: 'pointer',\n    backgroundColor: 'transparent',\n  }),\n};\n"]},"metadata":{},"sourceType":"module"}