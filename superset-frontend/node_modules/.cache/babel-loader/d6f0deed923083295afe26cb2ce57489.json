{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { makeApi } from '@superset-ui/core';\nimport { useEffect, useMemo, useRef, useState } from 'react';\nexport var ResourceStatus;\n(function (ResourceStatus) {\n  ResourceStatus[\"LOADING\"] = \"loading\";\n  ResourceStatus[\"COMPLETE\"] = \"complete\";\n  ResourceStatus[\"ERROR\"] = \"error\";\n})(ResourceStatus || (ResourceStatus = {}));\nconst initialState = {\n  status: ResourceStatus.LOADING,\n  result: null,\n  error: null };\n\n/**\n * A general-purpose hook to fetch the response from an endpoint.\n * Returns the full response body from the API, including metadata.\n *\n * Note: You likely want {useApiV1Resource} instead of this!\n *\n * TODO Store the state in redux or something, share state between hook instances.\n *\n * TODO Include a function in the returned resource object to refresh the data.\n *\n * A core design decision here is composition > configuration,\n * and every hook should only have one job.\n * Please address new needs with new hooks if possible,\n * rather than adding config options to this hook.\n *\n * @param endpoint The url where the resource is located.\n */\nexport function useApiResourceFullBody(endpoint) {\n  const [resource, setResource] = useState(initialState);\n  const cancelRef = useRef(() => {});\n  useEffect(() => {\n    // If refresh is implemented, this will need to change.\n    // The previous values should stay during refresh.\n    setResource(initialState);\n    // when this effect runs, the endpoint has changed.\n    // cancel any current calls so that state doesn't get messed up.\n    cancelRef.current();\n    let cancelled = false;\n    cancelRef.current = () => {\n      cancelled = true;\n    };\n    const fetchResource = makeApi({\n      method: 'GET',\n      endpoint });\n\n    fetchResource({}).\n    then((result) => {\n      if (!cancelled) {\n        setResource({\n          status: ResourceStatus.COMPLETE,\n          result,\n          error: null });\n\n      }\n    }).\n    catch((error) => {\n      if (!cancelled) {\n        setResource({\n          status: ResourceStatus.ERROR,\n          result: null,\n          error });\n\n      }\n    });\n    // Cancel the request when the component un-mounts\n    return () => {\n      cancelled = true;\n    };\n  }, [endpoint]);\n  return resource;\n}\n/**\n * For when you want to transform the result of an api resource hook before using it.\n *\n * @param resource the Resource object returned from useApiV1Resource\n * @param transformFn a callback that transforms the result object into the shape you want.\n * Make sure to use a persistent function for this so it doesn't constantly recalculate!\n */\nexport function useTransformedResource(resource, transformFn) {\n  return useMemo(() => {\n    if (resource.status !== ResourceStatus.COMPLETE) {\n      // While incomplete, there is no result - no need to transform.\n      return resource;\n    }\n    try {\n      return {\n        ...resource,\n        result: transformFn(resource.result) };\n\n    }\n    catch (e) {\n      return {\n        status: ResourceStatus.ERROR,\n        result: null,\n        error: e };\n\n    }\n  }, [resource, transformFn]);\n}\n// returns the \"result\" field from a fetched API v1 endpoint\nconst extractInnerResult = (responseBody) => responseBody.result;\n/**\n * A general-purpose hook to fetch a Superset resource from a v1 API endpoint.\n * Handles request lifecycle and async logic so you don't have to.\n *\n * This returns the data under the \"result\" field in the API response body.\n * If you need the full response body, use {useFullApiResource} instead.\n *\n * @param endpoint The url where the resource is located.\n */\nexport function useApiV1Resource(endpoint) {\n  return useTransformedResource(useApiResourceFullBody(endpoint), extractInnerResult);\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAmBA,SAASA,OAAT,QAAwB,mBAAxB;AACA,SAASC,SAAT,EAAoBC,OAApB,EAA6BC,MAA7B,EAAqCC,QAArC,QAAqD,OAArD;AAEA,WAAYC,cAAZ;AAAA,WAAYA,cAAZ,EAA0B;EACxBA;EACAA;EACAA;AACD,CAJD,EAAYA,cAAc,KAAdA,cAAc,MAA1B;AAyCA,MAAMC,YAAY,GAAiB;EACjCC,MAAM,EAAEF,cAAc,CAACG,OADU;EAEjCC,MAAM,EAAE,IAFyB;EAGjCC,KAAK,EAAE,IAH0B,EAAnC;;AAMA;;;;;;;;;;;;;;;;;AAiBA,OAAM,SAAUC,sBAAV,CACJC,QADI,EACY;EAEhB,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAmBE,YAAnB,CAAxC;EACA,MAAMS,SAAS,GAAGZ,MAAM,CAAa,MAAK,CAAG,CAArB,CAAxB;EAEAF,SAAS,CAAC,MAAK;IACb;IACA;IACAa,WAAW,CAACR,YAAD,CAAX;IAEA;IACA;IACAS,SAAS,CAACC,OAAV;IACA,IAAIC,SAAS,GAAG,KAAhB;IACAF,SAAS,CAACC,OAAV,GAAoB,MAAK;MACvBC,SAAS,GAAG,IAAZ;IACD,CAFD;IAIA,MAAMC,aAAa,GAAGlB,OAAO,CAAa;MACxCmB,MAAM,EAAE,KADgC;MAExCP,QAFwC,EAAb,CAA7B;;IAKAM,aAAa,CAAC,EAAD,CAAb;IACGE,IADH,CACQ,OAAM,KAAG;MACb,IAAI,CAACH,SAAL,EAAgB;QACdH,WAAW,CAAC;UACVP,MAAM,EAAEF,cAAc,CAACgB,QADb;UAEVZ,MAFU;UAGVC,KAAK,EAAE,IAHG,EAAD,CAAX;;MAKD;IACF,CATH;IAUGY,KAVH,CAUS,MAAK,KAAG;MACb,IAAI,CAACL,SAAL,EAAgB;QACdH,WAAW,CAAC;UACVP,MAAM,EAAEF,cAAc,CAACkB,KADb;UAEVd,MAAM,EAAE,IAFE;UAGVC,KAHU,EAAD,CAAX;;MAKD;IACF,CAlBH;IAoBA;IACA,OAAO,MAAK;MACVO,SAAS,GAAG,IAAZ;IACD,CAFD;EAGD,CA1CQ,EA0CN,CAACL,QAAD,CA1CM,CAAT;EA4CA,OAAOC,QAAP;AACD;AAED;;;;;;;AAOA,OAAM,SAAUW,sBAAV,CACJX,QADI,EAEJY,WAFI,EAE4B;EAEhC,OAAOvB,OAAO,CAAC,MAAK;IAClB,IAAIW,QAAQ,CAACN,MAAT,KAAoBF,cAAc,CAACgB,QAAvC,EAAiD;MAC/C;MACA,OAAOR,QAAP;IACD;IACD,IAAI;MACF,OAAO;QACL,GAAGA,QADE;QAELJ,MAAM,EAAEgB,WAAW,CAACZ,QAAQ,CAACJ,MAAV,CAFd,EAAP;;IAID;IAAC,OAAOiB,CAAP,EAAU;MACV,OAAO;QACLnB,MAAM,EAAEF,cAAc,CAACkB,KADlB;QAELd,MAAM,EAAE,IAFH;QAGLC,KAAK,EAAEgB,CAHF,EAAP;;IAKD;EACF,CAjBa,EAiBX,CAACb,QAAD,EAAWY,WAAX,CAjBW,CAAd;AAkBD;AAED;AACA,MAAME,kBAAkB,GAAG,CAAIC,YAAJ,KACzBA,YAAY,CAACnB,MADf;AAGA;;;;;;;;;AASA,OAAM,SAAUoB,gBAAV,CAAmCjB,QAAnC,EAAmD;EACvD,OAAOY,sBAAsB,CAC3Bb,sBAAsB,CAAqBC,QAArB,CADK,EAE3Be,kBAF2B,CAA7B;AAID","names":["makeApi","useEffect","useMemo","useRef","useState","ResourceStatus","initialState","status","LOADING","result","error","useApiResourceFullBody","endpoint","resource","setResource","cancelRef","current","cancelled","fetchResource","method","then","COMPLETE","catch","ERROR","useTransformedResource","transformFn","e","extractInnerResult","responseBody","useApiV1Resource"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/hooks/apiResources/apiResources.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { makeApi } from '@superset-ui/core';\nimport { useEffect, useMemo, useRef, useState } from 'react';\n\nexport enum ResourceStatus {\n  LOADING = 'loading',\n  COMPLETE = 'complete',\n  ERROR = 'error',\n}\n\n/**\n * An object containing the data fetched from the API,\n * as well as loading and error info\n */\nexport type Resource<T> = LoadingState | CompleteState<T> | ErrorState;\n\n// Trying out something a little different: a separate type per status.\n// This should let Typescript know whether a Resource has a result or error.\n// It's possible that I'm expecting too much from Typescript here.\n// If this ends up causing problems, we can change the type to:\n//\n// export type Resource<T> = {\n//   status: ResourceStatus;\n//   result: null | T;\n//   error: null | Error;\n// }\n\ntype LoadingState = {\n  status: ResourceStatus.LOADING;\n  result: null;\n  error: null;\n};\n\ntype CompleteState<T> = {\n  status: ResourceStatus.COMPLETE;\n  result: T;\n  error: null;\n};\n\ntype ErrorState = {\n  status: ResourceStatus.ERROR;\n  result: null;\n  error: Error;\n};\n\nconst initialState: LoadingState = {\n  status: ResourceStatus.LOADING,\n  result: null,\n  error: null,\n};\n\n/**\n * A general-purpose hook to fetch the response from an endpoint.\n * Returns the full response body from the API, including metadata.\n *\n * Note: You likely want {useApiV1Resource} instead of this!\n *\n * TODO Store the state in redux or something, share state between hook instances.\n *\n * TODO Include a function in the returned resource object to refresh the data.\n *\n * A core design decision here is composition > configuration,\n * and every hook should only have one job.\n * Please address new needs with new hooks if possible,\n * rather than adding config options to this hook.\n *\n * @param endpoint The url where the resource is located.\n */\nexport function useApiResourceFullBody<RESULT>(\n  endpoint: string,\n): Resource<RESULT> {\n  const [resource, setResource] = useState<Resource<RESULT>>(initialState);\n  const cancelRef = useRef<() => void>(() => {});\n\n  useEffect(() => {\n    // If refresh is implemented, this will need to change.\n    // The previous values should stay during refresh.\n    setResource(initialState);\n\n    // when this effect runs, the endpoint has changed.\n    // cancel any current calls so that state doesn't get messed up.\n    cancelRef.current();\n    let cancelled = false;\n    cancelRef.current = () => {\n      cancelled = true;\n    };\n\n    const fetchResource = makeApi<{}, RESULT>({\n      method: 'GET',\n      endpoint,\n    });\n\n    fetchResource({})\n      .then(result => {\n        if (!cancelled) {\n          setResource({\n            status: ResourceStatus.COMPLETE,\n            result,\n            error: null,\n          });\n        }\n      })\n      .catch(error => {\n        if (!cancelled) {\n          setResource({\n            status: ResourceStatus.ERROR,\n            result: null,\n            error,\n          });\n        }\n      });\n\n    // Cancel the request when the component un-mounts\n    return () => {\n      cancelled = true;\n    };\n  }, [endpoint]);\n\n  return resource;\n}\n\n/**\n * For when you want to transform the result of an api resource hook before using it.\n *\n * @param resource the Resource object returned from useApiV1Resource\n * @param transformFn a callback that transforms the result object into the shape you want.\n * Make sure to use a persistent function for this so it doesn't constantly recalculate!\n */\nexport function useTransformedResource<IN, OUT>(\n  resource: Resource<IN>,\n  transformFn: (result: IN) => OUT,\n): Resource<OUT> {\n  return useMemo(() => {\n    if (resource.status !== ResourceStatus.COMPLETE) {\n      // While incomplete, there is no result - no need to transform.\n      return resource;\n    }\n    try {\n      return {\n        ...resource,\n        result: transformFn(resource.result),\n      };\n    } catch (e) {\n      return {\n        status: ResourceStatus.ERROR,\n        result: null,\n        error: e,\n      };\n    }\n  }, [resource, transformFn]);\n}\n\n// returns the \"result\" field from a fetched API v1 endpoint\nconst extractInnerResult = <T>(responseBody: { result: T }) =>\n  responseBody.result;\n\n/**\n * A general-purpose hook to fetch a Superset resource from a v1 API endpoint.\n * Handles request lifecycle and async logic so you don't have to.\n *\n * This returns the data under the \"result\" field in the API response body.\n * If you need the full response body, use {useFullApiResource} instead.\n *\n * @param endpoint The url where the resource is located.\n */\nexport function useApiV1Resource<RESULT>(endpoint: string): Resource<RESULT> {\n  return useTransformedResource(\n    useApiResourceFullBody<{ result: RESULT }>(endpoint),\n    extractInnerResult,\n  );\n}\n"]},"metadata":{},"sourceType":"module"}