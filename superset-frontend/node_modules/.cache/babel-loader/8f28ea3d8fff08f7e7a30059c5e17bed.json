{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useContext, useEffect, useMemo, useState } from 'react';\nimport { css, ensureIsArray, isDefined, t, useTheme } from '@superset-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport Modal from 'src/components/Modal';\nimport Loading from 'src/components/Loading';\nimport Button from 'src/components/Button';\nimport { DashboardPageIdContext } from 'src/dashboard/containers/DashboardPage';\nimport { postFormData } from 'src/explore/exploreUtils/formData';\nimport { simpleFilterToAdhoc } from 'src/utils/simpleFilterToAdhoc';\nimport { useDatasetMetadataBar } from 'src/features/datasets/metadataBar/useDatasetMetadataBar';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\nimport Alert from 'src/components/Alert';\nimport { logEvent } from 'src/logger/actions';\nimport { LOG_ACTIONS_DRILL_BY_BREADCRUMB_CLICKED, LOG_ACTIONS_DRILL_BY_EDIT_CHART, LOG_ACTIONS_DRILL_BY_MODAL_OPENED, LOG_ACTIONS_FURTHER_DRILL_BY } from 'src/logger/LogUtils';\nimport { DrillByType } from '../types';\nimport DrillByChart from './DrillByChart';\nimport { ContextMenuItem } from '../ChartContextMenu/ChartContextMenu';\nimport { useContextMenu } from '../ChartContextMenu/useContextMenu';\nimport { getChartDataRequest } from '../chartAction';\nimport { useDisplayModeToggle } from './useDisplayModeToggle';\nimport { useDrillByBreadcrumbs } from './useDrillByBreadcrumbs';\nimport { useResultsTableView } from './useResultsTableView';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst DEFAULT_ADHOC_FILTER_FIELD_NAME = 'adhoc_filters';\nconst ModalFooter = (_ref) => {let { formData, closeModal } = _ref;\n  const dispatch = useDispatch();\n  const { addDangerToast } = useToasts();\n  const [url, setUrl] = useState('');\n  const dashboardPageId = useContext(DashboardPageIdContext);\n  const onEditChartClick = useCallback(() => {\n    dispatch(logEvent(LOG_ACTIONS_DRILL_BY_EDIT_CHART, {\n      slice_id: formData.slice_id }));\n\n  }, [dispatch, formData.slice_id]);\n  const [datasource_id, datasource_type] = formData.datasource.split('__');\n  useEffect(() => {\n    postFormData(Number(datasource_id), datasource_type, formData, 0).\n    then((key) => {\n      setUrl(`/explore/?form_data_key=${key}&dashboard_page_id=${dashboardPageId}`);\n    }).\n    catch(() => {\n      addDangerToast(t('Failed to generate chart edit URL'));\n    });\n  }, [\n  addDangerToast,\n  dashboardPageId,\n  datasource_id,\n  datasource_type,\n  formData]);\n\n  return ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(Button, { buttonStyle: \"secondary\", buttonSize: \"small\", onClick: onEditChartClick, disabled: !url },\n  ___EmotionJSX(Link, { css: css`\n            &:hover {\n              text-decoration: none;\n            }\n          `, to: url },\n  t('Edit chart'))),\n\n\n\n  ___EmotionJSX(Button, { buttonStyle: \"primary\", buttonSize: \"small\", onClick: closeModal, \"data-test\": \"close-drill-by-modal\" },\n  t('Close')));\n\n\n};__signature__(ModalFooter, \"useDispatch{dispatch}\\nuseToasts{{ addDangerToast }}\\nuseState{[url, setUrl]('')}\\nuseContext{dashboardPageId}\\nuseCallback{onEditChartClick}\\nuseEffect{}\", () => [useDispatch, useToasts]);\nexport default function DrillByModal(_ref2) {let { column, dataset, drillByConfig, formData, onHideModal } = _ref2;\n  const dispatch = useDispatch();\n  const theme = useTheme();\n  const { addDangerToast } = useToasts();\n  const [isChartDataLoading, setIsChartDataLoading] = useState(true);\n  const [drillByConfigs, setDrillByConfigs] = useState([\n  { ...drillByConfig, column }]);\n\n  useEffect(() => {\n    dispatch(logEvent(LOG_ACTIONS_DRILL_BY_MODAL_OPENED, {\n      slice_id: formData.slice_id }));\n\n  }, [dispatch, formData.slice_id]);\n  const { column: currentColumn, groupbyFieldName = drillByConfig.groupbyFieldName } = drillByConfigs[drillByConfigs.length - 1] || {};\n  const initialGroupbyColumns = useMemo(() => ensureIsArray(formData[groupbyFieldName]).\n  map((colName) => {var _dataset$columns;return (_dataset$columns = dataset.columns) == null ? void 0 : _dataset$columns.find((col) => col.column_name === colName);}).\n  filter(isDefined), [dataset.columns, formData, groupbyFieldName]);\n  const { displayModeToggle, drillByDisplayMode } = useDisplayModeToggle();\n  const [chartDataResult, setChartDataResult] = useState();\n  const resultsTable = useResultsTableView(chartDataResult, formData.datasource);\n  const [currentFormData, setCurrentFormData] = useState(formData);\n  const [usedGroupbyColumns, setUsedGroupbyColumns] = useState([...initialGroupbyColumns, column].filter(isDefined));\n  const [breadcrumbsData, setBreadcrumbsData] = useState([\n  { groupby: initialGroupbyColumns, filters: drillByConfig.filters },\n  { groupby: column || [] }]);\n\n  const getNewGroupby = useCallback(function (groupbyCol, fieldName) {if (fieldName === void 0) {fieldName = groupbyFieldName;}return Array.isArray(formData[fieldName]) ?\n    [groupbyCol.column_name] :\n    groupbyCol.column_name;}, [formData, groupbyFieldName]);\n  const getFormDataChangesFromConfigs = useCallback((configs) => configs.reduce((acc, config) => {\n    if (config != null && config.groupbyFieldName && config.column) {\n      acc.formData[config.groupbyFieldName] = getNewGroupby(config.column, config.groupbyFieldName);\n      acc.overridenGroupbyFields.add(config.groupbyFieldName);\n    }\n    const adhocFilterFieldName = (config == null ? void 0 : config.adhocFilterFieldName) || DEFAULT_ADHOC_FILTER_FIELD_NAME;\n    acc.formData[adhocFilterFieldName] = [\n    ...ensureIsArray(acc[adhocFilterFieldName]),\n    ...ensureIsArray(config.filters).map((filter) => simpleFilterToAdhoc(filter))];\n\n    acc.overridenAdhocFilterFields.add(adhocFilterFieldName);\n    return acc;\n  }, {\n    formData: {},\n    overridenGroupbyFields: new Set(),\n    overridenAdhocFilterFields: new Set() }),\n  [getNewGroupby]);\n  const getFiltersFromConfigsByFieldName = useCallback(() => drillByConfigs.reduce((acc, config) => {\n    const adhocFilterFieldName = config.adhocFilterFieldName || DEFAULT_ADHOC_FILTER_FIELD_NAME;\n    acc[adhocFilterFieldName] = [\n    ...(acc[adhocFilterFieldName] || []),\n    ...config.filters.map((filter) => simpleFilterToAdhoc(filter))];\n\n    return acc;\n  }, {}), [drillByConfigs]);\n  const onBreadcrumbClick = useCallback((breadcrumb, index) => {\n    dispatch(logEvent(LOG_ACTIONS_DRILL_BY_BREADCRUMB_CLICKED, {\n      slice_id: formData.slice_id }));\n\n    setDrillByConfigs((prevConfigs) => prevConfigs.slice(0, index));\n    setBreadcrumbsData((prevBreadcrumbs) => {\n      const newBreadcrumbs = prevBreadcrumbs.slice(0, index + 1);\n      delete newBreadcrumbs[newBreadcrumbs.length - 1].filters;\n      return newBreadcrumbs;\n    });\n    setUsedGroupbyColumns((prevUsedGroupbyColumns) => prevUsedGroupbyColumns.slice(0, index));\n    setCurrentFormData(() => {\n      if (index === 0) {\n        return formData;\n      }\n      const { formData: overrideFormData, overridenAdhocFilterFields } = getFormDataChangesFromConfigs(drillByConfigs.slice(0, index));\n      const newFormData = {\n        ...formData,\n        ...overrideFormData };\n\n      overridenAdhocFilterFields.forEach((adhocFilterField) => ({\n        ...newFormData,\n        [adhocFilterField]: [\n        ...formData[adhocFilterField],\n        ...overrideFormData[adhocFilterField]] }));\n\n\n      return newFormData;\n    });\n  }, [dispatch, drillByConfigs, formData, getFormDataChangesFromConfigs]);\n  const breadcrumbs = useDrillByBreadcrumbs(breadcrumbsData, onBreadcrumbClick);\n  const drilledFormData = useMemo(() => {\n    let updatedFormData = { ...currentFormData };\n    if (currentColumn && groupbyFieldName) {\n      updatedFormData[groupbyFieldName] = getNewGroupby(currentColumn);\n    }\n    const adhocFilters = getFiltersFromConfigsByFieldName();\n    Object.keys(adhocFilters).forEach((adhocFilterFieldName) => {\n      updatedFormData = {\n        ...updatedFormData,\n        [adhocFilterFieldName]: [\n        ...ensureIsArray(formData[adhocFilterFieldName]),\n        ...adhocFilters[adhocFilterFieldName]] };\n\n\n    });\n    updatedFormData.slice_id = 0;\n    delete updatedFormData.slice_name;\n    delete updatedFormData.dashboards;\n    return updatedFormData;\n  }, [\n  currentFormData,\n  currentColumn,\n  groupbyFieldName,\n  getFiltersFromConfigsByFieldName,\n  getNewGroupby,\n  formData]);\n\n  useEffect(() => {\n    setUsedGroupbyColumns((usedCols) => !currentColumn ||\n    usedCols.some((usedCol) => usedCol.column_name === currentColumn.column_name) ?\n    usedCols :\n    [...usedCols, currentColumn]);\n  }, [currentColumn]);\n  const onSelection = useCallback((newColumn, drillByConfig) => {\n    dispatch(logEvent(LOG_ACTIONS_FURTHER_DRILL_BY, {\n      drill_depth: drillByConfigs.length + 1,\n      slice_id: formData.slice_id }));\n\n    setCurrentFormData(drilledFormData);\n    setDrillByConfigs((prevConfigs) => [\n    ...prevConfigs,\n    { ...drillByConfig, column: newColumn }]);\n\n    setBreadcrumbsData((prevBreadcrumbs) => {\n      const newBreadcrumbs = [...prevBreadcrumbs, { groupby: newColumn }];\n      newBreadcrumbs[newBreadcrumbs.length - 2].filters =\n      drillByConfig.filters;\n      return newBreadcrumbs;\n    });\n  }, [dispatch, drillByConfigs.length, drilledFormData, formData.slice_id]);\n  const additionalConfig = useMemo(() => ({\n    drillBy: { excludedColumns: usedGroupbyColumns, openNewModal: false } }),\n  [usedGroupbyColumns]);\n  const { contextMenu, inContextMenu, onContextMenu } = useContextMenu(0, currentFormData, onSelection, ContextMenuItem.DrillBy, additionalConfig);\n  const chartName = useSelector((state) => {\n    const chartLayoutItem = Object.values(state.dashboardLayout.present).find((layoutItem) => {var _layoutItem$meta;return ((_layoutItem$meta = layoutItem.meta) == null ? void 0 : _layoutItem$meta.chartId) === formData.slice_id;});\n    return (chartLayoutItem == null ? void 0 : chartLayoutItem.meta.sliceNameOverride) || (chartLayoutItem == null ? void 0 : chartLayoutItem.meta.sliceName);\n  });\n  useEffect(() => {\n    if (drilledFormData) {\n      setIsChartDataLoading(true);\n      setChartDataResult(undefined);\n      getChartDataRequest({\n        formData: drilledFormData }).\n\n      then((_ref3) => {let { json } = _ref3;\n        setChartDataResult(json.result);\n      }).\n      catch(() => {\n        addDangerToast(t('Failed to load chart data.'));\n      }).\n      finally(() => {\n        setIsChartDataLoading(false);\n      });\n    }\n  }, [addDangerToast, drilledFormData]);\n  const { metadataBar } = useDatasetMetadataBar({ dataset });\n  return ___EmotionJSX(Modal, { css: css`\n        .ant-modal-footer {\n          border-top: none;\n        }\n      `, show: true, onHide: onHideModal != null ? onHideModal : () => null, title: t('Drill by: %s', chartName), footer: ___EmotionJSX(ModalFooter, { formData: drilledFormData }), responsive: true, resizable: true, resizableConfig: {\n      minHeight: theme.gridUnit * 128,\n      minWidth: theme.gridUnit * 128,\n      defaultSize: {\n        width: 'auto',\n        height: '80vh' } },\n\n    draggable: true, destroyOnClose: true, maskClosable: false },\n  ___EmotionJSX(\"div\", { css: css`\n          display: flex;\n          flex-direction: column;\n          height: 100%;\n        ` },\n  metadataBar,\n  breadcrumbs,\n  displayModeToggle,\n  isChartDataLoading && ___EmotionJSX(Loading, null),\n  !isChartDataLoading && !chartDataResult && ___EmotionJSX(Alert, { type: \"error\", message: t('There was an error loading the chart data') }),\n  drillByDisplayMode === DrillByType.Chart && chartDataResult && ___EmotionJSX(DrillByChart, { dataset: dataset, formData: drilledFormData, result: chartDataResult, onContextMenu: onContextMenu, inContextMenu: inContextMenu }),\n  drillByDisplayMode === DrillByType.Table &&\n  chartDataResult &&\n  resultsTable,\n  contextMenu));\n\n\n}__signature__(DrillByModal, \"useDispatch{dispatch}\\nuseTheme{theme}\\nuseToasts{{ addDangerToast }}\\nuseState{[isChartDataLoading, setIsChartDataLoading](true)}\\nuseState{[drillByConfigs, setDrillByConfigs]([\\n        { ...drillByConfig, column },\\n    ])}\\nuseEffect{}\\nuseMemo{initialGroupbyColumns}\\nuseDisplayModeToggle{{ displayModeToggle, drillByDisplayMode }}\\nuseState{[chartDataResult, setChartDataResult]}\\nuseResultsTableView{resultsTable}\\nuseState{[currentFormData, setCurrentFormData](formData)}\\nuseState{[usedGroupbyColumns, setUsedGroupbyColumns]([...initialGroupbyColumns, column].filter(isDefined))}\\nuseState{[breadcrumbsData, setBreadcrumbsData]([\\n        { groupby: initialGroupbyColumns, filters: drillByConfig.filters },\\n        { groupby: column || [] },\\n    ])}\\nuseCallback{getNewGroupby}\\nuseCallback{getFormDataChangesFromConfigs}\\nuseCallback{getFiltersFromConfigsByFieldName}\\nuseCallback{onBreadcrumbClick}\\nuseDrillByBreadcrumbs{breadcrumbs}\\nuseMemo{drilledFormData}\\nuseEffect{}\\nuseCallback{onSelection}\\nuseMemo{additionalConfig}\\nuseContextMenu{{ contextMenu, inContextMenu, onContextMenu }}\\nuseSelector{chartName}\\nuseEffect{}\\nuseDatasetMetadataBar{{ metadataBar }}\", () => [useDispatch, useTheme, useToasts, useDisplayModeToggle, useResultsTableView, useDrillByBreadcrumbs, useContextMenu, useSelector, useDatasetMetadataBar]);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(DEFAULT_ADHOC_FILTER_FIELD_NAME, \"DEFAULT_ADHOC_FILTER_FIELD_NAME\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/Chart/DrillBy/DrillByModal.tsx\");reactHotLoader.register(ModalFooter, \"ModalFooter\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/Chart/DrillBy/DrillByModal.tsx\");reactHotLoader.register(DrillByModal, \"DrillByModal\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/Chart/DrillBy/DrillByModal.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"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","names":["React","useCallback","useContext","useEffect","useMemo","useState","css","ensureIsArray","isDefined","t","useTheme","useDispatch","useSelector","Link","Modal","Loading","Button","DashboardPageIdContext","postFormData","simpleFilterToAdhoc","useDatasetMetadataBar","useToasts","Alert","logEvent","LOG_ACTIONS_DRILL_BY_BREADCRUMB_CLICKED","LOG_ACTIONS_DRILL_BY_EDIT_CHART","LOG_ACTIONS_DRILL_BY_MODAL_OPENED","LOG_ACTIONS_FURTHER_DRILL_BY","DrillByType","DrillByChart","ContextMenuItem","useContextMenu","getChartDataRequest","useDisplayModeToggle","useDrillByBreadcrumbs","useResultsTableView","DEFAULT_ADHOC_FILTER_FIELD_NAME","ModalFooter","formData","closeModal","dispatch","addDangerToast","url","setUrl","dashboardPageId","onEditChartClick","slice_id","datasource_id","datasource_type","datasource","split","Number","then","key","catch","DrillByModal","column","dataset","drillByConfig","onHideModal","theme","isChartDataLoading","setIsChartDataLoading","drillByConfigs","setDrillByConfigs","currentColumn","groupbyFieldName","length","initialGroupbyColumns","map","columns","find","col","column_name","colName","filter","displayModeToggle","drillByDisplayMode","chartDataResult","setChartDataResult","resultsTable","currentFormData","setCurrentFormData","usedGroupbyColumns","setUsedGroupbyColumns","breadcrumbsData","setBreadcrumbsData","groupby","filters","getNewGroupby","groupbyCol","fieldName","Array","isArray","getFormDataChangesFromConfigs","configs","reduce","acc","config","overridenGroupbyFields","add","adhocFilterFieldName","overridenAdhocFilterFields","Set","getFiltersFromConfigsByFieldName","onBreadcrumbClick","breadcrumb","index","prevConfigs","slice","newBreadcrumbs","prevBreadcrumbs","prevUsedGroupbyColumns","overrideFormData","newFormData","forEach","adhocFilterField","breadcrumbs","drilledFormData","updatedFormData","adhocFilters","Object","keys","slice_name","dashboards","usedCols","some","usedCol","onSelection","newColumn","drill_depth","additionalConfig","drillBy","excludedColumns","openNewModal","contextMenu","inContextMenu","onContextMenu","DrillBy","chartName","chartLayoutItem","values","state","dashboardLayout","present","meta","chartId","sliceNameOverride","sliceName","undefined","json","result","finally","metadataBar","minHeight","gridUnit","minWidth","defaultSize","width","height","Chart","Table"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/Chart/DrillBy/DrillByModal.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport {\n  BaseFormData,\n  Column,\n  QueryData,\n  css,\n  ensureIsArray,\n  isDefined,\n  t,\n  useTheme,\n  ContextMenuFilters,\n} from '@superset-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport Modal from 'src/components/Modal';\nimport Loading from 'src/components/Loading';\nimport Button from 'src/components/Button';\nimport { RootState } from 'src/dashboard/types';\nimport { DashboardPageIdContext } from 'src/dashboard/containers/DashboardPage';\nimport { postFormData } from 'src/explore/exploreUtils/formData';\nimport { simpleFilterToAdhoc } from 'src/utils/simpleFilterToAdhoc';\nimport { useDatasetMetadataBar } from 'src/features/datasets/metadataBar/useDatasetMetadataBar';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\nimport Alert from 'src/components/Alert';\nimport { logEvent } from 'src/logger/actions';\nimport {\n  LOG_ACTIONS_DRILL_BY_BREADCRUMB_CLICKED,\n  LOG_ACTIONS_DRILL_BY_EDIT_CHART,\n  LOG_ACTIONS_DRILL_BY_MODAL_OPENED,\n  LOG_ACTIONS_FURTHER_DRILL_BY,\n} from 'src/logger/LogUtils';\nimport { Dataset, DrillByType } from '../types';\nimport DrillByChart from './DrillByChart';\nimport { ContextMenuItem } from '../ChartContextMenu/ChartContextMenu';\nimport { useContextMenu } from '../ChartContextMenu/useContextMenu';\nimport { getChartDataRequest } from '../chartAction';\nimport { useDisplayModeToggle } from './useDisplayModeToggle';\nimport {\n  DrillByBreadcrumb,\n  useDrillByBreadcrumbs,\n} from './useDrillByBreadcrumbs';\nimport { useResultsTableView } from './useResultsTableView';\n\nconst DEFAULT_ADHOC_FILTER_FIELD_NAME = 'adhoc_filters';\ninterface ModalFooterProps {\n  closeModal?: () => void;\n  formData: BaseFormData;\n}\n\nconst ModalFooter = ({ formData, closeModal }: ModalFooterProps) => {\n  const dispatch = useDispatch();\n  const { addDangerToast } = useToasts();\n  const [url, setUrl] = useState('');\n  const dashboardPageId = useContext(DashboardPageIdContext);\n  const onEditChartClick = useCallback(() => {\n    dispatch(\n      logEvent(LOG_ACTIONS_DRILL_BY_EDIT_CHART, {\n        slice_id: formData.slice_id,\n      }),\n    );\n  }, [dispatch, formData.slice_id]);\n\n  const [datasource_id, datasource_type] = formData.datasource.split('__');\n  useEffect(() => {\n    postFormData(Number(datasource_id), datasource_type, formData, 0)\n      .then(key => {\n        setUrl(\n          `/explore/?form_data_key=${key}&dashboard_page_id=${dashboardPageId}`,\n        );\n      })\n      .catch(() => {\n        addDangerToast(t('Failed to generate chart edit URL'));\n      });\n  }, [\n    addDangerToast,\n    dashboardPageId,\n    datasource_id,\n    datasource_type,\n    formData,\n  ]);\n  return (\n    <>\n      <Button\n        buttonStyle=\"secondary\"\n        buttonSize=\"small\"\n        onClick={onEditChartClick}\n        disabled={!url}\n      >\n        <Link\n          css={css`\n            &:hover {\n              text-decoration: none;\n            }\n          `}\n          to={url}\n        >\n          {t('Edit chart')}\n        </Link>\n      </Button>\n\n      <Button\n        buttonStyle=\"primary\"\n        buttonSize=\"small\"\n        onClick={closeModal}\n        data-test=\"close-drill-by-modal\"\n      >\n        {t('Close')}\n      </Button>\n    </>\n  );\n};\n\nexport interface DrillByModalProps {\n  column?: Column;\n  dataset: Dataset;\n  drillByConfig: Required<ContextMenuFilters>['drillBy'];\n  formData: BaseFormData & { [key: string]: any };\n  onHideModal: () => void;\n}\n\ntype DrillByConfigs = (ContextMenuFilters['drillBy'] & { column?: Column })[];\n\nexport default function DrillByModal({\n  column,\n  dataset,\n  drillByConfig,\n  formData,\n  onHideModal,\n}: DrillByModalProps) {\n  const dispatch = useDispatch();\n  const theme = useTheme();\n  const { addDangerToast } = useToasts();\n  const [isChartDataLoading, setIsChartDataLoading] = useState(true);\n\n  const [drillByConfigs, setDrillByConfigs] = useState<DrillByConfigs>([\n    { ...drillByConfig, column },\n  ]);\n\n  useEffect(() => {\n    dispatch(\n      logEvent(LOG_ACTIONS_DRILL_BY_MODAL_OPENED, {\n        slice_id: formData.slice_id,\n      }),\n    );\n  }, [dispatch, formData.slice_id]);\n\n  const {\n    column: currentColumn,\n    groupbyFieldName = drillByConfig.groupbyFieldName,\n  } = drillByConfigs[drillByConfigs.length - 1] || {};\n\n  const initialGroupbyColumns = useMemo(\n    () =>\n      ensureIsArray(formData[groupbyFieldName])\n        .map(colName =>\n          dataset.columns?.find(col => col.column_name === colName),\n        )\n        .filter(isDefined),\n    [dataset.columns, formData, groupbyFieldName],\n  );\n\n  const { displayModeToggle, drillByDisplayMode } = useDisplayModeToggle();\n  const [chartDataResult, setChartDataResult] = useState<QueryData[]>();\n\n  const resultsTable = useResultsTableView(\n    chartDataResult,\n    formData.datasource,\n  );\n\n  const [currentFormData, setCurrentFormData] = useState(formData);\n  const [usedGroupbyColumns, setUsedGroupbyColumns] = useState<Column[]>(\n    [...initialGroupbyColumns, column].filter(isDefined),\n  );\n  const [breadcrumbsData, setBreadcrumbsData] = useState<DrillByBreadcrumb[]>([\n    { groupby: initialGroupbyColumns, filters: drillByConfig.filters },\n    { groupby: column || [] },\n  ]);\n\n  const getNewGroupby = useCallback(\n    (groupbyCol: Column, fieldName = groupbyFieldName) =>\n      Array.isArray(formData[fieldName])\n        ? [groupbyCol.column_name]\n        : groupbyCol.column_name,\n    [formData, groupbyFieldName],\n  );\n\n  const getFormDataChangesFromConfigs = useCallback(\n    (configs: DrillByConfigs) =>\n      configs.reduce(\n        (acc, config) => {\n          if (config?.groupbyFieldName && config.column) {\n            acc.formData[config.groupbyFieldName] = getNewGroupby(\n              config.column,\n              config.groupbyFieldName,\n            );\n            acc.overridenGroupbyFields.add(config.groupbyFieldName);\n          }\n          const adhocFilterFieldName =\n            config?.adhocFilterFieldName || DEFAULT_ADHOC_FILTER_FIELD_NAME;\n          acc.formData[adhocFilterFieldName] = [\n            ...ensureIsArray(acc[adhocFilterFieldName]),\n            ...ensureIsArray(config.filters).map(filter =>\n              simpleFilterToAdhoc(filter),\n            ),\n          ];\n          acc.overridenAdhocFilterFields.add(adhocFilterFieldName);\n\n          return acc;\n        },\n        {\n          formData: {},\n          overridenGroupbyFields: new Set<string>(),\n          overridenAdhocFilterFields: new Set<string>(),\n        },\n      ),\n    [getNewGroupby],\n  );\n\n  const getFiltersFromConfigsByFieldName = useCallback(\n    () =>\n      drillByConfigs.reduce((acc, config) => {\n        const adhocFilterFieldName =\n          config.adhocFilterFieldName || DEFAULT_ADHOC_FILTER_FIELD_NAME;\n        acc[adhocFilterFieldName] = [\n          ...(acc[adhocFilterFieldName] || []),\n          ...config.filters.map(filter => simpleFilterToAdhoc(filter)),\n        ];\n        return acc;\n      }, {}),\n    [drillByConfigs],\n  );\n\n  const onBreadcrumbClick = useCallback(\n    (breadcrumb: DrillByBreadcrumb, index: number) => {\n      dispatch(\n        logEvent(LOG_ACTIONS_DRILL_BY_BREADCRUMB_CLICKED, {\n          slice_id: formData.slice_id,\n        }),\n      );\n      setDrillByConfigs(prevConfigs => prevConfigs.slice(0, index));\n      setBreadcrumbsData(prevBreadcrumbs => {\n        const newBreadcrumbs = prevBreadcrumbs.slice(0, index + 1);\n        delete newBreadcrumbs[newBreadcrumbs.length - 1].filters;\n        return newBreadcrumbs;\n      });\n      setUsedGroupbyColumns(prevUsedGroupbyColumns =>\n        prevUsedGroupbyColumns.slice(0, index),\n      );\n      setCurrentFormData(() => {\n        if (index === 0) {\n          return formData;\n        }\n        const { formData: overrideFormData, overridenAdhocFilterFields } =\n          getFormDataChangesFromConfigs(drillByConfigs.slice(0, index));\n\n        const newFormData = {\n          ...formData,\n          ...overrideFormData,\n        };\n        overridenAdhocFilterFields.forEach(adhocFilterField => ({\n          ...newFormData,\n          [adhocFilterField]: [\n            ...formData[adhocFilterField],\n            ...overrideFormData[adhocFilterField],\n          ],\n        }));\n        return newFormData;\n      });\n    },\n    [dispatch, drillByConfigs, formData, getFormDataChangesFromConfigs],\n  );\n\n  const breadcrumbs = useDrillByBreadcrumbs(breadcrumbsData, onBreadcrumbClick);\n\n  const drilledFormData = useMemo(() => {\n    let updatedFormData = { ...currentFormData };\n    if (currentColumn && groupbyFieldName) {\n      updatedFormData[groupbyFieldName] = getNewGroupby(currentColumn);\n    }\n\n    const adhocFilters = getFiltersFromConfigsByFieldName();\n    Object.keys(adhocFilters).forEach(adhocFilterFieldName => {\n      updatedFormData = {\n        ...updatedFormData,\n        [adhocFilterFieldName]: [\n          ...ensureIsArray(formData[adhocFilterFieldName]),\n          ...adhocFilters[adhocFilterFieldName],\n        ],\n      };\n    });\n\n    updatedFormData.slice_id = 0;\n    delete updatedFormData.slice_name;\n    delete updatedFormData.dashboards;\n    return updatedFormData;\n  }, [\n    currentFormData,\n    currentColumn,\n    groupbyFieldName,\n    getFiltersFromConfigsByFieldName,\n    getNewGroupby,\n    formData,\n  ]);\n\n  useEffect(() => {\n    setUsedGroupbyColumns(usedCols =>\n      !currentColumn ||\n      usedCols.some(\n        usedCol => usedCol.column_name === currentColumn.column_name,\n      )\n        ? usedCols\n        : [...usedCols, currentColumn],\n    );\n  }, [currentColumn]);\n\n  const onSelection = useCallback(\n    (\n      newColumn: Column,\n      drillByConfig: Required<ContextMenuFilters>['drillBy'],\n    ) => {\n      dispatch(\n        logEvent(LOG_ACTIONS_FURTHER_DRILL_BY, {\n          drill_depth: drillByConfigs.length + 1,\n          slice_id: formData.slice_id,\n        }),\n      );\n      setCurrentFormData(drilledFormData);\n      setDrillByConfigs(prevConfigs => [\n        ...prevConfigs,\n        { ...drillByConfig, column: newColumn },\n      ]);\n      setBreadcrumbsData(prevBreadcrumbs => {\n        const newBreadcrumbs = [...prevBreadcrumbs, { groupby: newColumn }];\n        newBreadcrumbs[newBreadcrumbs.length - 2].filters =\n          drillByConfig.filters;\n        return newBreadcrumbs;\n      });\n    },\n    [dispatch, drillByConfigs.length, drilledFormData, formData.slice_id],\n  );\n\n  const additionalConfig = useMemo(\n    () => ({\n      drillBy: { excludedColumns: usedGroupbyColumns, openNewModal: false },\n    }),\n    [usedGroupbyColumns],\n  );\n\n  const { contextMenu, inContextMenu, onContextMenu } = useContextMenu(\n    0,\n    currentFormData,\n    onSelection,\n    ContextMenuItem.DrillBy,\n    additionalConfig,\n  );\n\n  const chartName = useSelector<RootState, string | undefined>(state => {\n    const chartLayoutItem = Object.values(state.dashboardLayout.present).find(\n      layoutItem => layoutItem.meta?.chartId === formData.slice_id,\n    );\n    return (\n      chartLayoutItem?.meta.sliceNameOverride || chartLayoutItem?.meta.sliceName\n    );\n  });\n\n  useEffect(() => {\n    if (drilledFormData) {\n      setIsChartDataLoading(true);\n      setChartDataResult(undefined);\n      getChartDataRequest({\n        formData: drilledFormData,\n      })\n        .then(({ json }) => {\n          setChartDataResult(json.result);\n        })\n        .catch(() => {\n          addDangerToast(t('Failed to load chart data.'));\n        })\n        .finally(() => {\n          setIsChartDataLoading(false);\n        });\n    }\n  }, [addDangerToast, drilledFormData]);\n  const { metadataBar } = useDatasetMetadataBar({ dataset });\n\n  return (\n    <Modal\n      css={css`\n        .ant-modal-footer {\n          border-top: none;\n        }\n      `}\n      show\n      onHide={onHideModal ?? (() => null)}\n      title={t('Drill by: %s', chartName)}\n      footer={<ModalFooter formData={drilledFormData} />}\n      responsive\n      resizable\n      resizableConfig={{\n        minHeight: theme.gridUnit * 128,\n        minWidth: theme.gridUnit * 128,\n        defaultSize: {\n          width: 'auto',\n          height: '80vh',\n        },\n      }}\n      draggable\n      destroyOnClose\n      maskClosable={false}\n    >\n      <div\n        css={css`\n          display: flex;\n          flex-direction: column;\n          height: 100%;\n        `}\n      >\n        {metadataBar}\n        {breadcrumbs}\n        {displayModeToggle}\n        {isChartDataLoading && <Loading />}\n        {!isChartDataLoading && !chartDataResult && (\n          <Alert\n            type=\"error\"\n            message={t('There was an error loading the chart data')}\n          />\n        )}\n        {drillByDisplayMode === DrillByType.Chart && chartDataResult && (\n          <DrillByChart\n            dataset={dataset}\n            formData={drilledFormData}\n            result={chartDataResult}\n            onContextMenu={onContextMenu}\n            inContextMenu={inContextMenu}\n          />\n        )}\n        {drillByDisplayMode === DrillByType.Table &&\n          chartDataResult &&\n          resultsTable}\n        {contextMenu}\n      </div>\n    </Modal>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}