{"ast":null,"code":"import _pick from \"lodash/pick\";import _isEmpty from \"lodash/isEmpty\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t, styled, FeatureFlag, isFeatureEnabled, getExtensionsRegistry } from '@superset-ui/core';\nimport React, { useEffect, useRef, useState, useReducer } from 'react';\nimport { setItem, LocalStorageKeys } from 'src/utils/localStorageHelpers';\nimport Tabs from 'src/components/Tabs';\nimport { AntdSelect, Upload } from 'src/components';\nimport Alert from 'src/components/Alert';\nimport Modal from 'src/components/Modal';\nimport Button from 'src/components/Button';\nimport IconButton from 'src/components/IconButton';\nimport InfoTooltip from 'src/components/InfoTooltip';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport ValidatedInput from 'src/components/Form/LabeledErrorBoundInput';\nimport ErrorMessageWithStackTrace from 'src/components/ErrorMessage/ErrorMessageWithStackTrace';\nimport ErrorAlert from 'src/components/ImportModal/ErrorAlert';\nimport { testDatabaseConnection, useSingleViewResource, useAvailableDatabases, useDatabaseValidation, getDatabaseImages, getConnectionAlert, useImportResource } from 'src/views/CRUD/hooks';\nimport { useCommonConf } from 'src/features/databases/state';\nimport Loading from 'src/components/Loading';\n\nimport { CONFIGURATION_METHOD, Engines } from '../types';\nimport ExtraOptions from './ExtraOptions';\nimport SqlAlchemyForm from './SqlAlchemyForm';\nimport DatabaseConnectionForm from './DatabaseConnectionForm';\nimport { antDAlertStyles, antdWarningAlertStyles, StyledAlertMargin, antDModalNoPaddingStyles, antDModalStyles, antDTabsStyles, buttonLinkStyles, importDbButtonLinkStyles, alchemyButtonLinkStyles, TabHeader, formHelperStyles, formStyles, StyledAlignment, SelectDatabaseStyles, infoTooltip, StyledFooterButton, StyledStickyHeader, formScrollableStyles, StyledUploadWrapper } from './styles';\nimport ModalHeader, { DOCUMENTATION_LINK } from './ModalHeader';\nimport SSHTunnelForm from './SSHTunnelForm';\nimport SSHTunnelSwitch from './SSHTunnelSwitch';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst extensionsRegistry = getExtensionsRegistry();\nconst DEFAULT_EXTRA = JSON.stringify({ allows_virtual_table_explore: true });\nconst engineSpecificAlertMapping = {\n  [Engines.GSheet]: {\n    message: 'Why do I need to create a database?',\n    description: 'To begin using your Google Sheets, you need to create a database first. ' +\n    'Databases are used as a way to identify ' +\n    'your data so that it can be queried and visualized. This ' +\n    'database will hold all of your individual Google Sheets ' +\n    'you choose to connect here.' } };\n\n\nconst TabsStyled = styled(Tabs)`\n  .ant-tabs-content {\n    display: flex;\n    width: 100%;\n    overflow: inherit;\n\n    & > .ant-tabs-tabpane {\n      position: relative;\n    }\n  }\n`;\nconst ErrorAlertContainer = styled.div`\n  ${(_ref) => {let { theme } = _ref;return `\n    margin: ${theme.gridUnit * 8}px ${theme.gridUnit * 4}px;\n  `;}};\n`;\nconst SSHTunnelContainer = styled.div`\n  ${(_ref2) => {let { theme } = _ref2;return `\n    padding: 0px ${theme.gridUnit * 4}px;\n  `;}};\n`;\nexport var ActionType;\n(function (ActionType) {\n  ActionType[ActionType[\"addTableCatalogSheet\"] = 0] = \"addTableCatalogSheet\";\n  ActionType[ActionType[\"configMethodChange\"] = 1] = \"configMethodChange\";\n  ActionType[ActionType[\"dbSelected\"] = 2] = \"dbSelected\";\n  ActionType[ActionType[\"editorChange\"] = 3] = \"editorChange\";\n  ActionType[ActionType[\"extraEditorChange\"] = 4] = \"extraEditorChange\";\n  ActionType[ActionType[\"extraInputChange\"] = 5] = \"extraInputChange\";\n  ActionType[ActionType[\"fetched\"] = 6] = \"fetched\";\n  ActionType[ActionType[\"inputChange\"] = 7] = \"inputChange\";\n  ActionType[ActionType[\"parametersChange\"] = 8] = \"parametersChange\";\n  ActionType[ActionType[\"queryChange\"] = 9] = \"queryChange\";\n  ActionType[ActionType[\"removeTableCatalogSheet\"] = 10] = \"removeTableCatalogSheet\";\n  ActionType[ActionType[\"reset\"] = 11] = \"reset\";\n  ActionType[ActionType[\"textChange\"] = 12] = \"textChange\";\n  ActionType[ActionType[\"parametersSSHTunnelChange\"] = 13] = \"parametersSSHTunnelChange\";\n  ActionType[ActionType[\"setSSHTunnelLoginMethod\"] = 14] = \"setSSHTunnelLoginMethod\";\n  ActionType[ActionType[\"removeSSHTunnelConfig\"] = 15] = \"removeSSHTunnelConfig\";\n})(ActionType || (ActionType = {}));\nexport var AuthType;\n(function (AuthType) {\n  AuthType[AuthType[\"password\"] = 0] = \"password\";\n  AuthType[AuthType[\"privateKey\"] = 1] = \"privateKey\";\n})(AuthType || (AuthType = {}));\nconst StyledBtns = styled.div`\n  margin-bottom: ${(_ref3) => {let { theme } = _ref3;return theme.gridUnit * 3;}}px;\n  margin-left: ${(_ref4) => {let { theme } = _ref4;return theme.gridUnit * 3;}}px;\n`;\nexport function dbReducer(state, action) {var _action$payload$type, _trimmedState$catalog, _action$payload, _action$payload$param;\n  const trimmedState = {\n    ...(state || {}) };\n\n  let query = {};\n  let query_input = '';\n  let parametersCatalog;\n  let actionPayloadJson;\n  const extraJson = JSON.parse(trimmedState.extra || '{}');\n  switch (action.type) {\n    case ActionType.extraEditorChange:\n      // \"extra\" payload in state is a string\n      try {\n        // we don't want to stringify encoded strings twice\n        actionPayloadJson = JSON.parse(action.payload.json || '{}');\n      }\n      catch (e) {\n        actionPayloadJson = action.payload.json;\n      }\n      return {\n        ...trimmedState,\n        extra: JSON.stringify({\n          ...extraJson,\n          [action.payload.name]: actionPayloadJson }) };\n\n\n    case ActionType.extraInputChange:\n      // \"extra\" payload in state is a string\n      if (action.payload.name === 'schema_cache_timeout' ||\n      action.payload.name === 'table_cache_timeout') {\n        return {\n          ...trimmedState,\n          extra: JSON.stringify({\n            ...extraJson,\n            metadata_cache_timeout: {\n              ...(extraJson == null ? void 0 : extraJson.metadata_cache_timeout),\n              [action.payload.name]: action.payload.value } }) };\n\n\n\n      }\n      if (action.payload.name === 'schemas_allowed_for_file_upload') {\n        return {\n          ...trimmedState,\n          extra: JSON.stringify({\n            ...extraJson,\n            schemas_allowed_for_file_upload: (action.payload.value || '').\n            split(',').\n            filter((schema) => schema !== '') }) };\n\n\n      }\n      if (action.payload.name === 'http_path') {var _action$payload$value;\n        return {\n          ...trimmedState,\n          extra: JSON.stringify({\n            ...extraJson,\n            engine_params: {\n              connect_args: {\n                [action.payload.name]: (_action$payload$value = action.payload.value) == null ? void 0 : _action$payload$value.trim() } } }) };\n\n\n\n\n      }\n      return {\n        ...trimmedState,\n        extra: JSON.stringify({\n          ...extraJson,\n          [action.payload.name]: action.payload.type === 'checkbox' ?\n          action.payload.checked :\n          action.payload.value }) };\n\n\n    case ActionType.inputChange:\n      if (action.payload.type === 'checkbox') {\n        return {\n          ...trimmedState,\n          [action.payload.name]: action.payload.checked };\n\n      }\n      return {\n        ...trimmedState,\n        [action.payload.name]: action.payload.value };\n\n    case ActionType.parametersChange:\n      // catalog params will always have a catalog state for\n      // dbs that use a catalog, i.e., gsheets, even if the\n      // fields are empty strings\n      if ((_action$payload$type = action.payload.type) != null && _action$payload$type.startsWith('catalog') &&\n      trimmedState.catalog !== undefined) {var _action$payload$type2;\n        // Formatting wrapping google sheets table catalog\n        const catalogCopy = [...trimmedState.catalog];\n        const idx = (_action$payload$type2 = action.payload.type) == null ? void 0 : _action$payload$type2.split('-')[1];\n        const catalogToUpdate = catalogCopy[idx] || {};\n        catalogToUpdate[action.payload.name] = action.payload.value;\n        // insert updated catalog to existing state\n        catalogCopy.splice(parseInt(idx, 10), 1, catalogToUpdate);\n        // format catalog for state\n        // eslint-disable-next-line array-callback-return\n        parametersCatalog = catalogCopy.reduce((obj, item) => {\n          const catalog = { ...obj };\n          catalog[item.name] = item.value;\n          return catalog;\n        }, {});\n        return {\n          ...trimmedState,\n          catalog: catalogCopy,\n          parameters: {\n            ...trimmedState.parameters,\n            catalog: parametersCatalog } };\n\n\n      }\n      return {\n        ...trimmedState,\n        parameters: {\n          ...trimmedState.parameters,\n          [action.payload.name]: action.payload.value } };\n\n\n    case ActionType.parametersSSHTunnelChange:\n      return {\n        ...trimmedState,\n        ssh_tunnel: {\n          ...trimmedState.ssh_tunnel,\n          [action.payload.name]: action.payload.value } };\n\n\n    case ActionType.setSSHTunnelLoginMethod:{\n        let ssh_tunnel = {};\n        if (trimmedState != null && trimmedState.ssh_tunnel) {\n          // remove any attributes that are considered sensitive\n          ssh_tunnel = _pick(trimmedState.ssh_tunnel, [\n          'id',\n          'server_address',\n          'server_port',\n          'username']);\n\n        }\n        if (action.payload.login_method === AuthType.privateKey) {var _trimmedState$ssh_tun, _trimmedState$ssh_tun2;\n          return {\n            ...trimmedState,\n            ssh_tunnel: {\n              private_key: trimmedState == null ? void 0 : (_trimmedState$ssh_tun = trimmedState.ssh_tunnel) == null ? void 0 : _trimmedState$ssh_tun.private_key,\n              private_key_password: trimmedState == null ? void 0 : (_trimmedState$ssh_tun2 = trimmedState.ssh_tunnel) == null ? void 0 : _trimmedState$ssh_tun2.private_key_password,\n              ...ssh_tunnel } };\n\n\n        }\n        if (action.payload.login_method === AuthType.password) {var _trimmedState$ssh_tun3;\n          return {\n            ...trimmedState,\n            ssh_tunnel: {\n              password: trimmedState == null ? void 0 : (_trimmedState$ssh_tun3 = trimmedState.ssh_tunnel) == null ? void 0 : _trimmedState$ssh_tun3.password,\n              ...ssh_tunnel } };\n\n\n        }\n        return {\n          ...trimmedState };\n\n      }\n    case ActionType.removeSSHTunnelConfig:\n      return {\n        ...trimmedState,\n        ssh_tunnel: undefined };\n\n    case ActionType.addTableCatalogSheet:\n      if (trimmedState.catalog !== undefined) {\n        return {\n          ...trimmedState,\n          catalog: [...trimmedState.catalog, { name: '', value: '' }] };\n\n      }\n      return {\n        ...trimmedState,\n        catalog: [{ name: '', value: '' }] };\n\n    case ActionType.removeTableCatalogSheet:\n      (_trimmedState$catalog = trimmedState.catalog) == null ? void 0 : _trimmedState$catalog.splice(action.payload.indexToDelete, 1);\n      return {\n        ...trimmedState };\n\n    case ActionType.editorChange:\n      return {\n        ...trimmedState,\n        [action.payload.name]: action.payload.json };\n\n    case ActionType.queryChange:\n      return {\n        ...trimmedState,\n        parameters: {\n          ...trimmedState.parameters,\n          query: Object.fromEntries(new URLSearchParams(action.payload.value)) },\n\n        query_input: action.payload.value };\n\n    case ActionType.textChange:\n      return {\n        ...trimmedState,\n        [action.payload.name]: action.payload.value };\n\n    case ActionType.fetched:\n      // convert query to a string and store in query_input\n      query = ((_action$payload = action.payload) == null ? void 0 : (_action$payload$param = _action$payload.parameters) == null ? void 0 : _action$payload$param.query) || {};\n      query_input = Object.entries(query).\n      map((_ref5) => {let [key, value] = _ref5;return `${key}=${value}`;}).\n      join('&');\n      if (action.payload.masked_encrypted_extra &&\n      action.payload.configuration_method ===\n      CONFIGURATION_METHOD.DYNAMIC_FORM) {var _extraJsonPayload$eng;\n        // \"extra\" payload from the api is a string\n        const extraJsonPayload = {\n          ...JSON.parse(action.payload.extra || '{}') };\n\n        const payloadCatalog = (_extraJsonPayload$eng = extraJsonPayload.engine_params) == null ? void 0 : _extraJsonPayload$eng.catalog;\n        const engineRootCatalog = Object.entries(payloadCatalog || {}).map((_ref6) => {let [name, value] = _ref6;return { name, value };});\n        return {\n          ...action.payload,\n          engine: action.payload.backend || trimmedState.engine,\n          configuration_method: action.payload.configuration_method,\n          catalog: engineRootCatalog,\n          parameters: {\n            ...(action.payload.parameters || trimmedState.parameters),\n            catalog: payloadCatalog },\n\n          query_input };\n\n      }\n      return {\n        ...action.payload,\n        masked_encrypted_extra: action.payload.masked_encrypted_extra || '',\n        engine: action.payload.backend || trimmedState.engine,\n        configuration_method: action.payload.configuration_method,\n        parameters: action.payload.parameters || trimmedState.parameters,\n        ssh_tunnel: action.payload.ssh_tunnel || trimmedState.ssh_tunnel,\n        query_input };\n\n    case ActionType.dbSelected:\n      // set initial state for blank form\n      return {\n        ...action.payload,\n        extra: DEFAULT_EXTRA,\n        expose_in_sqllab: true };\n\n    case ActionType.configMethodChange:\n      return {\n        ...action.payload };\n\n    case ActionType.reset:\n    default:\n      return null;}\n\n}\nconst DEFAULT_TAB_KEY = '1';\nconst DatabaseModal = (_ref7) => {var _extensionsRegistry$g, _availableDbs$databas, _availableDbs$databas2, _availableDbs$databas3, _availableDbs$databas6;let { addDangerToast, addSuccessToast, onDatabaseAdd, onHide, show, databaseId, dbEngine, history } = _ref7;\n  const [db, setDB] = useReducer(dbReducer, null);\n  // Database fetch logic\n  const { state: { loading: dbLoading, resource: dbFetched, error: dbErrors }, fetchResource, createResource, updateResource, clearError } = useSingleViewResource('database', t('database'), addDangerToast, 'connection');\n  const [tabKey, setTabKey] = useState(DEFAULT_TAB_KEY);\n  const [availableDbs, getAvailableDbs] = useAvailableDatabases();\n  const [validationErrors, getValidation, setValidationErrors] = useDatabaseValidation();\n  const [hasConnectedDb, setHasConnectedDb] = useState(false);\n  const [showCTAbtns, setShowCTAbtns] = useState(false);\n  const [dbName, setDbName] = useState('');\n  const [editNewDb, setEditNewDb] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n  const [testInProgress, setTestInProgress] = useState(false);\n  const [passwords, setPasswords] = useState({});\n  const [sshTunnelPasswords, setSSHTunnelPasswords] = useState({});\n  const [sshTunnelPrivateKeys, setSSHTunnelPrivateKeys] = useState({});\n  const [sshTunnelPrivateKeyPasswords, setSSHTunnelPrivateKeyPasswords] = useState({});\n  const [confirmedOverwrite, setConfirmedOverwrite] = useState(false);\n  const [fileList, setFileList] = useState([]);\n  const [importingModal, setImportingModal] = useState(false);\n  const [importingErrorMessage, setImportingErrorMessage] = useState();\n  const [passwordFields, setPasswordFields] = useState([]);\n  const [sshTunnelPasswordFields, setSSHTunnelPasswordFields] = useState([]);\n  const [sshTunnelPrivateKeyFields, setSSHTunnelPrivateKeyFields] = useState([]);\n  const [sshTunnelPrivateKeyPasswordFields, setSSHTunnelPrivateKeyPasswordFields] = useState([]);\n  const [extraExtensionComponentState, setExtraExtensionComponentState] = useState({});\n  const SSHTunnelSwitchComponent = (_extensionsRegistry$g = extensionsRegistry.get('ssh_tunnel.form.switch')) != null ? _extensionsRegistry$g : SSHTunnelSwitch;\n  const [useSSHTunneling, setUseSSHTunneling] = useState(false);\n  let dbConfigExtraExtension = extensionsRegistry.get('databaseconnection.extraOption');\n  if (dbConfigExtraExtension) {\n    // add method for db modal to store data\n    dbConfigExtraExtension = {\n      ...dbConfigExtraExtension,\n      onEdit: (componentState) => {\n        setExtraExtensionComponentState({\n          ...extraExtensionComponentState,\n          ...componentState });\n\n      } };\n\n  }\n  const conf = useCommonConf();\n  const dbImages = getDatabaseImages();\n  const connectionAlert = getConnectionAlert();\n  const isEditMode = !!databaseId;\n  const disableSSHTunnelingForEngine = availableDbs == null ? void 0 : (_availableDbs$databas = availableDbs.databases) == null ? void 0 : (_availableDbs$databas2 = _availableDbs$databas.find((DB) => DB.backend === (db == null ? void 0 : db.engine) || DB.engine === (db == null ? void 0 : db.engine))) == null ? void 0 : (_availableDbs$databas3 = _availableDbs$databas2.engine_information) == null ? void 0 : _availableDbs$databas3.disable_ssh_tunneling;\n  const isSSHTunneling = isFeatureEnabled(FeatureFlag.SSH_TUNNELING) &&\n  !disableSSHTunnelingForEngine;\n  const hasAlert = connectionAlert || !!(db != null && db.engine && engineSpecificAlertMapping[db.engine]);\n  const useSqlAlchemyForm = (db == null ? void 0 : db.configuration_method) === CONFIGURATION_METHOD.SQLALCHEMY_URI;\n  const useTabLayout = isEditMode || useSqlAlchemyForm;\n  const isDynamic = (engine) => {var _availableDbs$databas4, _availableDbs$databas5;return (availableDbs == null ? void 0 : (_availableDbs$databas4 = availableDbs.databases) == null ? void 0 : (_availableDbs$databas5 = _availableDbs$databas4.find((DB) => DB.backend === engine || DB.engine === engine)) == null ? void 0 : _availableDbs$databas5.parameters) !== undefined;};\n  const showDBError = validationErrors || dbErrors;\n  const dbModel = (availableDbs == null ? void 0 : (_availableDbs$databas6 = availableDbs.databases) == null ? void 0 : _availableDbs$databas6.find((available) =>\n  // TODO: we need a centralized engine in one place\n  available.engine === (isEditMode ? db == null ? void 0 : db.backend : db == null ? void 0 : db.engine))) || {};\n  // Test Connection logic\n  const testConnection = () => {var _db$database_name;\n    if (!(db != null && db.sqlalchemy_uri)) {\n      addDangerToast(t('Please enter a SQLAlchemy URI to test'));\n      return;\n    }\n    const connection = {\n      sqlalchemy_uri: (db == null ? void 0 : db.sqlalchemy_uri) || '',\n      database_name: (db == null ? void 0 : (_db$database_name = db.database_name) == null ? void 0 : _db$database_name.trim()) || undefined,\n      impersonate_user: (db == null ? void 0 : db.impersonate_user) || undefined,\n      extra: db == null ? void 0 : db.extra,\n      masked_encrypted_extra: (db == null ? void 0 : db.masked_encrypted_extra) || '',\n      server_cert: (db == null ? void 0 : db.server_cert) || undefined,\n      ssh_tunnel: (db == null ? void 0 : db.ssh_tunnel) || undefined };\n\n    setTestInProgress(true);\n    testDatabaseConnection(connection, (errorMsg) => {\n      setTestInProgress(false);\n      addDangerToast(errorMsg);\n    }, (errorMsg) => {\n      setTestInProgress(false);\n      addSuccessToast(errorMsg);\n    });\n  };\n  const getPlaceholder = (field) => {\n    if (field === 'database') {\n      switch (db == null ? void 0 : db.engine) {\n        case Engines.Snowflake:\n          return t('e.g. xy12345.us-east-2.aws');\n        default:\n          return t('e.g. world_population');}\n\n    }\n    return undefined;\n  };\n  const removeFile = (removedFile) => {\n    setFileList(fileList.filter((file) => file.uid !== removedFile.uid));\n    return false;\n  };\n  const onClose = () => {\n    setDB({ type: ActionType.reset });\n    setHasConnectedDb(false);\n    setValidationErrors(null); // reset validation errors on close\n    clearError();\n    setEditNewDb(false);\n    setFileList([]);\n    setImportingModal(false);\n    setImportingErrorMessage('');\n    setPasswordFields([]);\n    setSSHTunnelPasswordFields([]);\n    setSSHTunnelPrivateKeyFields([]);\n    setSSHTunnelPrivateKeyPasswordFields([]);\n    setPasswords({});\n    setSSHTunnelPasswords({});\n    setSSHTunnelPrivateKeys({});\n    setSSHTunnelPrivateKeyPasswords({});\n    setConfirmedOverwrite(false);\n    setUseSSHTunneling(false);\n    onHide();\n  };\n  const redirectURL = (url) => {\n    /* TODO (lyndsiWilliams): This check and passing history\n      as a prop can be removed once SQL Lab is in the SPA */\n    if (!_isEmpty(history)) {\n      history == null ? void 0 : history.push(url);\n    } else\n    {\n      window.location.href = url;\n    }\n  };\n  // Database import logic\n  const { state: { alreadyExists, passwordsNeeded, sshPasswordNeeded, sshPrivateKeyNeeded, sshPrivateKeyPasswordNeeded, loading: importLoading, failed: importErrored }, importResource } = useImportResource('database', t('database'), (msg) => {\n    setImportingErrorMessage(msg);\n  });\n  const onChange = (type, payload) => {\n    setDB({ type, payload });\n  };\n  const onSave = async () => {var _dbConfigExtraExtensi, _dbToUpdate$parameter7;\n    let dbConfigExtraExtensionOnSaveError;\n    (_dbConfigExtraExtensi = dbConfigExtraExtension) == null ? void 0 : _dbConfigExtraExtensi.\n    onSave(extraExtensionComponentState, db).\n    then((_ref8) => {let { error } = _ref8;\n      if (error) {\n        dbConfigExtraExtensionOnSaveError = error;\n        addDangerToast(error);\n      }\n    });\n    if (dbConfigExtraExtensionOnSaveError) {\n      setLoading(false);\n      return;\n    }\n    // Clone DB object\n    const dbToUpdate = { ...(db || {}) };\n    if (dbToUpdate.configuration_method === CONFIGURATION_METHOD.DYNAMIC_FORM) {var _dbToUpdate$parameter, _dbToUpdate$parameter2;\n      // Validate DB before saving\n      if (dbToUpdate != null && (_dbToUpdate$parameter = dbToUpdate.parameters) != null && _dbToUpdate$parameter.catalog) {\n        // need to stringify gsheets catalog to allow it to be serialized\n        dbToUpdate.extra = JSON.stringify({\n          ...JSON.parse(dbToUpdate.extra || '{}'),\n          engine_params: {\n            catalog: dbToUpdate.parameters.catalog } });\n\n\n      }\n      // only do validation for non ssh tunnel connections\n      if (!(dbToUpdate != null && dbToUpdate.ssh_tunnel)) {\n        // make sure that button spinner animates\n        setLoading(true);\n        const errors = await getValidation(dbToUpdate, true);\n        if (validationErrors && !_isEmpty(validationErrors) || errors) {\n          setLoading(false);\n          return;\n        }\n        // end spinner animation\n        setLoading(false);\n      }\n      const parameters_schema = isEditMode ? (_dbToUpdate$parameter2 =\n      dbToUpdate.parameters_schema) == null ? void 0 : _dbToUpdate$parameter2.properties :\n      dbModel == null ? void 0 : dbModel.parameters.properties;\n      const additionalEncryptedExtra = JSON.parse(dbToUpdate.masked_encrypted_extra || '{}');\n      const paramConfigArray = Object.keys(parameters_schema || {});\n      paramConfigArray.forEach((paramConfig) => {var _dbToUpdate$parameter3;\n        /*\n         * Parameters that are annotated with the `x-encrypted-extra` properties should be\n         * moved to `masked_encrypted_extra`, so that they are stored encrypted in the\n         * backend when the database is created or edited.\n         */\n        if (parameters_schema[paramConfig]['x-encrypted-extra'] && (_dbToUpdate$parameter3 =\n        dbToUpdate.parameters) != null && _dbToUpdate$parameter3[paramConfig]) {var _dbToUpdate$parameter4;\n          if (typeof ((_dbToUpdate$parameter4 = dbToUpdate.parameters) == null ? void 0 : _dbToUpdate$parameter4[paramConfig]) === 'object') {var _dbToUpdate$parameter5;\n            // add new encrypted extra to masked_encrypted_extra object\n            additionalEncryptedExtra[paramConfig] = (_dbToUpdate$parameter5 =\n            dbToUpdate.parameters) == null ? void 0 : _dbToUpdate$parameter5[paramConfig];\n            // The backend expects `masked_encrypted_extra` as a string for historical\n            // reasons.\n            dbToUpdate.parameters[paramConfig] = JSON.stringify(dbToUpdate.parameters[paramConfig]);\n          } else\n          {var _dbToUpdate$parameter6;\n            additionalEncryptedExtra[paramConfig] = JSON.parse(((_dbToUpdate$parameter6 = dbToUpdate.parameters) == null ? void 0 : _dbToUpdate$parameter6[paramConfig]) || '{}');\n          }\n        }\n      });\n      // cast the new encrypted extra object into a string\n      dbToUpdate.masked_encrypted_extra = JSON.stringify(additionalEncryptedExtra);\n      // this needs to be added by default to gsheets\n      if (dbToUpdate.engine === Engines.GSheet) {\n        dbToUpdate.impersonate_user = true;\n      }\n    }\n    if (dbToUpdate != null && (_dbToUpdate$parameter7 = dbToUpdate.parameters) != null && _dbToUpdate$parameter7.catalog) {\n      // need to stringify gsheets catalog to allow it to be serialized\n      dbToUpdate.extra = JSON.stringify({\n        ...JSON.parse(dbToUpdate.extra || '{}'),\n        engine_params: {\n          catalog: dbToUpdate.parameters.catalog } });\n\n\n    }\n    setLoading(true);\n    if (db != null && db.id) {\n      const result = await updateResource(db.id, dbToUpdate, dbToUpdate.configuration_method === CONFIGURATION_METHOD.DYNAMIC_FORM);\n      if (result) {var _dbConfigExtraExtensi2;\n        if (onDatabaseAdd)\n        onDatabaseAdd();\n        (_dbConfigExtraExtensi2 = dbConfigExtraExtension) == null ? void 0 : _dbConfigExtraExtensi2.\n        onSave(extraExtensionComponentState, db).\n        then((_ref9) => {let { error } = _ref9;\n          if (error) {\n            dbConfigExtraExtensionOnSaveError = error;\n            addDangerToast(error);\n          }\n        });\n        if (dbConfigExtraExtensionOnSaveError) {\n          setLoading(false);\n          return;\n        }\n        if (!editNewDb) {\n          onClose();\n          addSuccessToast(t('Database settings updated'));\n        }\n      }\n    } else\n    if (db) {\n      // Create\n      const dbId = await createResource(dbToUpdate, dbToUpdate.configuration_method === CONFIGURATION_METHOD.DYNAMIC_FORM);\n      if (dbId) {var _dbConfigExtraExtensi3;\n        setHasConnectedDb(true);\n        if (onDatabaseAdd)\n        onDatabaseAdd();\n        (_dbConfigExtraExtensi3 = dbConfigExtraExtension) == null ? void 0 : _dbConfigExtraExtensi3.\n        onSave(extraExtensionComponentState, db).\n        then((_ref10) => {let { error } = _ref10;\n          if (error) {\n            dbConfigExtraExtensionOnSaveError = error;\n            addDangerToast(error);\n          }\n        });\n        if (dbConfigExtraExtensionOnSaveError) {\n          setLoading(false);\n          return;\n        }\n        if (useTabLayout) {\n          // tab layout only has one step\n          // so it should close immediately on save\n          onClose();\n          addSuccessToast(t('Database connected'));\n        }\n      }\n    } else\n    {\n      // Import - doesn't use db state\n      setImportingModal(true);\n      if (!(fileList[0].originFileObj instanceof File)) {\n        return;\n      }\n      const dbId = await importResource(fileList[0].originFileObj, passwords, sshTunnelPasswords, sshTunnelPrivateKeys, sshTunnelPrivateKeyPasswords, confirmedOverwrite);\n      if (dbId) {\n        if (onDatabaseAdd)\n        onDatabaseAdd();\n        onClose();\n        addSuccessToast(t('Database connected'));\n      }\n    }\n    setShowCTAbtns(true);\n    setEditNewDb(false);\n    setLoading(false);\n  };\n  // Initialize\n  const fetchDB = () => {\n    if (isEditMode && databaseId) {\n      if (!dbLoading) {\n        fetchResource(databaseId).catch((e) => addDangerToast(t('Sorry there was an error fetching database information: %s', e.message)));\n      }\n    }\n  };\n  const setDatabaseModel = (database_name) => {\n    if (database_name === 'Other') {\n      // Allow users to connect to DB via legacy SQLA form\n      setDB({\n        type: ActionType.dbSelected,\n        payload: {\n          database_name,\n          configuration_method: CONFIGURATION_METHOD.SQLALCHEMY_URI,\n          engine: undefined,\n          engine_information: {\n            supports_file_upload: true } } });\n\n\n\n    } else\n    {\n      const selectedDbModel = availableDbs == null ? void 0 : availableDbs.databases.filter((db) => db.name === database_name)[0];\n      const { engine, parameters, engine_information, default_driver } = selectedDbModel;\n      const isDynamic = parameters !== undefined;\n      setDB({\n        type: ActionType.dbSelected,\n        payload: {\n          database_name,\n          engine,\n          configuration_method: isDynamic ?\n          CONFIGURATION_METHOD.DYNAMIC_FORM :\n          CONFIGURATION_METHOD.SQLALCHEMY_URI,\n          engine_information,\n          driver: default_driver } });\n\n\n      if (engine === Engines.GSheet) {\n        // only create a catalog if the DB is Google Sheets\n        setDB({ type: ActionType.addTableCatalogSheet });\n      }\n    }\n  };\n  const renderAvailableSelector = () => {var _ref11, _connectionAlert$ADD_;return ___EmotionJSX(\"div\", { className: \"available\" },\n    ___EmotionJSX(\"h4\", { className: \"available-label\" },\n    t('Or choose from a list of other databases we support:')),\n\n    ___EmotionJSX(\"div\", { className: \"control-label\" }, t('Supported databases')),\n    ___EmotionJSX(AntdSelect, { className: \"available-select\", onChange: setDatabaseModel, placeholder: t('Choose a database...'), showSearch: true }, (_ref11 =\n    [...((availableDbs == null ? void 0 : availableDbs.databases) || [])]) == null ? void 0 : _ref11.\n    sort((a, b) => a.name.localeCompare(b.name)).\n    map((database, index) => ___EmotionJSX(AntdSelect.Option, { value: database.name, key: `database-${index}` },\n    database.name)),\n\n\n    ___EmotionJSX(AntdSelect.Option, { value: \"Other\", key: \"Other\" },\n    t('Other'))),\n\n\n    ___EmotionJSX(Alert, { showIcon: true, closable: false, css: (theme) => antDAlertStyles(theme), type: \"info\", message: (connectionAlert == null ? void 0 : (_connectionAlert$ADD_ = connectionAlert.ADD_DATABASE) == null ? void 0 : _connectionAlert$ADD_.message) ||\n      t('Want to add a new database?'), description: connectionAlert != null && connectionAlert.ADD_DATABASE ? ___EmotionJSX(React.Fragment, null,\n      t('Any databases that allow connections via SQL Alchemy URIs can be added. '),\n      ___EmotionJSX(\"a\", { href: connectionAlert == null ? void 0 : connectionAlert.ADD_DATABASE.contact_link, target: \"_blank\", rel: \"noopener noreferrer\" },\n      connectionAlert == null ? void 0 : connectionAlert.ADD_DATABASE.contact_description_link),\n      ' ',\n      connectionAlert == null ? void 0 : connectionAlert.ADD_DATABASE.description) :\n      ___EmotionJSX(React.Fragment, null,\n      t('Any databases that allow connections via SQL Alchemy URIs can be added. Learn about how to connect a database driver '),\n      ___EmotionJSX(\"a\", { href: DOCUMENTATION_LINK, target: \"_blank\", rel: \"noopener noreferrer\" },\n      t('here')), \".\") }));};\n\n\n\n\n  const renderPreferredSelector = () => {var _availableDbs$databas7;return ___EmotionJSX(\"div\", { className: \"preferred\" },\n    availableDbs == null ? void 0 : (_availableDbs$databas7 = availableDbs.databases) == null ? void 0 : _availableDbs$databas7.\n    filter((db) => db.preferred).\n    map((database) => ___EmotionJSX(IconButton, { className: \"preferred-item\", onClick: () => setDatabaseModel(database.name), buttonText: database.name, icon: dbImages == null ? void 0 : dbImages[database.engine], key: `${database.name}` })));};\n\n  const handleBackButtonOnFinish = () => {\n    if (dbFetched) {\n      fetchResource(dbFetched.id);\n    }\n    setShowCTAbtns(false);\n    setEditNewDb(true);\n  };\n  const handleBackButtonOnConnect = () => {\n    if (editNewDb)\n    setHasConnectedDb(false);\n    if (importingModal)\n    setImportingModal(false);\n    if (importErrored) {\n      setImportingModal(false);\n      setImportingErrorMessage('');\n      setPasswordFields([]);\n      setSSHTunnelPasswordFields([]);\n      setSSHTunnelPrivateKeyFields([]);\n      setSSHTunnelPrivateKeyPasswordFields([]);\n      setPasswords({});\n      setSSHTunnelPasswords({});\n      setSSHTunnelPrivateKeys({});\n      setSSHTunnelPrivateKeyPasswords({});\n    }\n    setDB({ type: ActionType.reset });\n    setFileList([]);\n  };\n  const handleDisableOnImport = () => {\n    if (importLoading ||\n    alreadyExists.length && !confirmedOverwrite ||\n    passwordsNeeded.length && JSON.stringify(passwords) === '{}' ||\n    sshPasswordNeeded.length &&\n    JSON.stringify(sshTunnelPasswords) === '{}' ||\n    sshPrivateKeyNeeded.length &&\n    JSON.stringify(sshTunnelPrivateKeys) === '{}' ||\n    sshPrivateKeyPasswordNeeded.length &&\n    JSON.stringify(sshTunnelPrivateKeyPasswords) === '{}')\n    return true;\n    return false;\n  };\n  const renderModalFooter = () => {\n    if (db) {\n      // if db show back + connect\n      if (!hasConnectedDb || editNewDb) {\n        return ___EmotionJSX(React.Fragment, null,\n        ___EmotionJSX(StyledFooterButton, { key: \"back\", onClick: handleBackButtonOnConnect },\n        t('Back')),\n\n        ___EmotionJSX(StyledFooterButton, { key: \"submit\", buttonStyle: \"primary\", onClick: onSave, loading: isLoading },\n        t('Connect')));\n\n\n      }\n      return ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(StyledFooterButton, { key: \"back\", onClick: handleBackButtonOnFinish },\n      t('Back')),\n\n      ___EmotionJSX(StyledFooterButton, { key: \"submit\", buttonStyle: \"primary\", onClick: onSave, loading: isLoading },\n      t('Finish')));\n\n\n    }\n    // Import doesn't use db state, so footer will not render in the if statement above\n    if (importingModal) {\n      return ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(StyledFooterButton, { key: \"back\", onClick: handleBackButtonOnConnect },\n      t('Back')),\n\n      ___EmotionJSX(StyledFooterButton, { key: \"submit\", buttonStyle: \"primary\", onClick: onSave, disabled: handleDisableOnImport(), loading: isLoading },\n      t('Connect')));\n\n\n    }\n    return ___EmotionJSX(React.Fragment, null);\n  };\n  const renderEditModalFooter = (db) => ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(StyledFooterButton, { key: \"close\", onClick: onClose },\n  t('Close')),\n\n  ___EmotionJSX(StyledFooterButton, { key: \"submit\", buttonStyle: \"primary\", onClick: onSave, disabled: db == null ? void 0 : db.is_managed_externally, loading: isLoading, tooltip: db != null && db.is_managed_externally ?\n    t(\"This database is managed externally, and can't be edited in Superset\") :\n    '' },\n  t('Finish')));\n\n\n  const firstUpdate = useRef(true); // Captures first render\n  // Only runs when importing files don't need user input\n  useEffect(() => {\n    // Will not run on first render\n    if (firstUpdate.current) {\n      firstUpdate.current = false;\n      return;\n    }\n    if (!importLoading &&\n    !alreadyExists.length &&\n    !passwordsNeeded.length &&\n    !sshPasswordNeeded.length &&\n    !sshPrivateKeyNeeded.length &&\n    !sshPrivateKeyPasswordNeeded.length &&\n    !isLoading && // This prevents a double toast for non-related imports\n    !importErrored // This prevents a success toast on error\n    ) {\n      onClose();\n      addSuccessToast(t('Database connected'));\n    }\n  }, [\n  alreadyExists,\n  passwordsNeeded,\n  importLoading,\n  importErrored,\n  sshPasswordNeeded,\n  sshPrivateKeyNeeded,\n  sshPrivateKeyPasswordNeeded]);\n\n  useEffect(() => {\n    if (show) {\n      setTabKey(DEFAULT_TAB_KEY);\n      setLoading(true);\n      getAvailableDbs();\n    }\n    if (databaseId && show) {\n      fetchDB();\n    }\n  }, [show, databaseId]);\n  useEffect(() => {\n    if (dbFetched) {\n      setDB({\n        type: ActionType.fetched,\n        payload: dbFetched });\n\n      // keep a copy of the name separate for display purposes\n      // because it shouldn't change when the form is updated\n      setDbName(dbFetched.database_name);\n    }\n  }, [dbFetched]);\n  useEffect(() => {\n    if (isLoading) {\n      setLoading(false);\n    }\n    if (availableDbs && dbEngine) {\n      // set model if passed into props\n      setDatabaseModel(dbEngine);\n    }\n  }, [availableDbs]);\n  // This forces the modal to scroll until the importing filename is in view\n  useEffect(() => {\n    if (importingModal) {\n      document.\n      getElementsByClassName('ant-upload-list-item-name')[0].\n      scrollIntoView();\n    }\n  }, [importingModal]);\n  useEffect(() => {\n    setPasswordFields([...passwordsNeeded]);\n  }, [passwordsNeeded]);\n  useEffect(() => {\n    setSSHTunnelPasswordFields([...sshPasswordNeeded]);\n  }, [sshPasswordNeeded]);\n  useEffect(() => {\n    setSSHTunnelPrivateKeyFields([...sshPrivateKeyNeeded]);\n  }, [sshPrivateKeyNeeded]);\n  useEffect(() => {\n    setSSHTunnelPrivateKeyPasswordFields([...sshPrivateKeyPasswordNeeded]);\n  }, [sshPrivateKeyPasswordNeeded]);\n  useEffect(() => {\n    if (db && isSSHTunneling) {\n      setUseSSHTunneling(!_isEmpty(db == null ? void 0 : db.ssh_tunnel));\n    }\n  }, [db, isSSHTunneling]);\n  const onDbImport = async (info) => {\n    setImportingErrorMessage('');\n    setPasswordFields([]);\n    setSSHTunnelPasswordFields([]);\n    setSSHTunnelPrivateKeyFields([]);\n    setSSHTunnelPrivateKeyPasswordFields([]);\n    setPasswords({});\n    setSSHTunnelPasswords({});\n    setSSHTunnelPrivateKeys({});\n    setSSHTunnelPrivateKeyPasswords({});\n    setImportingModal(true);\n    setFileList([\n    {\n      ...info.file,\n      status: 'done' }]);\n\n\n    if (!(info.file.originFileObj instanceof File))\n    return;\n    const dbId = await importResource(info.file.originFileObj, passwords, sshTunnelPasswords, sshTunnelPrivateKeys, sshTunnelPrivateKeyPasswords, confirmedOverwrite);\n    if (dbId)\n    onDatabaseAdd == null ? void 0 : onDatabaseAdd();\n  };\n  const passwordNeededField = () => {\n    if (!passwordFields.length &&\n    !sshTunnelPasswordFields.length &&\n    !sshTunnelPrivateKeyFields.length &&\n    !sshTunnelPrivateKeyPasswordFields.length)\n    return null;\n    const files = [\n    ...new Set([\n    ...passwordFields,\n    ...sshTunnelPasswordFields,\n    ...sshTunnelPrivateKeyFields,\n    ...sshTunnelPrivateKeyPasswordFields])];\n\n\n    return files.map((database) => ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(StyledAlertMargin, null,\n    ___EmotionJSX(Alert, { closable: false, css: (theme) => antDAlertStyles(theme), type: \"info\", showIcon: true, message: \"Database passwords\", description: t(`The passwords for the databases below are needed in order to import them. Please note that the \"Secure Extra\" and \"Certificate\" sections of the database configuration are not present in explore files and should be added manually after the import if they are needed.`) })),\n\n    (passwordFields == null ? void 0 : passwordFields.indexOf(database)) >= 0 && ___EmotionJSX(ValidatedInput, { id: \"password_needed\", name: \"password_needed\", required: true, value: passwords[database], onChange: (event) => setPasswords({ ...passwords, [database]: event.target.value }), validationMethods: { onBlur: () => {} }, errorMessage: validationErrors == null ? void 0 : validationErrors.password_needed, label: t('%s PASSWORD', database.slice(10)), css: formScrollableStyles }),\n    (sshTunnelPasswordFields == null ? void 0 : sshTunnelPasswordFields.indexOf(database)) >= 0 && ___EmotionJSX(ValidatedInput, { id: \"ssh_tunnel_password_needed\", name: \"ssh_tunnel_password_needed\", required: true, value: sshTunnelPasswords[database], onChange: (event) => setSSHTunnelPasswords({\n        ...sshTunnelPasswords,\n        [database]: event.target.value }),\n      validationMethods: { onBlur: () => {} }, errorMessage: validationErrors == null ? void 0 : validationErrors.ssh_tunnel_password_needed, label: t('%s SSH TUNNEL PASSWORD', database.slice(10)), css: formScrollableStyles }),\n    (sshTunnelPrivateKeyFields == null ? void 0 : sshTunnelPrivateKeyFields.indexOf(database)) >= 0 && ___EmotionJSX(ValidatedInput, { id: \"ssh_tunnel_private_key_needed\", name: \"ssh_tunnel_private_key_needed\", required: true, value: sshTunnelPrivateKeys[database], onChange: (event) => setSSHTunnelPrivateKeys({\n        ...sshTunnelPrivateKeys,\n        [database]: event.target.value }),\n      validationMethods: { onBlur: () => {} }, errorMessage: validationErrors == null ? void 0 : validationErrors.ssh_tunnel_private_key_needed, label: t('%s SSH TUNNEL PRIVATE KEY', database.slice(10)), css: formScrollableStyles }),\n    (sshTunnelPrivateKeyPasswordFields == null ? void 0 : sshTunnelPrivateKeyPasswordFields.indexOf(database)) >= 0 && ___EmotionJSX(ValidatedInput, { id: \"ssh_tunnel_private_key_password_needed\", name: \"ssh_tunnel_private_key_password_needed\", required: true, value: sshTunnelPrivateKeyPasswords[database], onChange: (event) => setSSHTunnelPrivateKeyPasswords({\n        ...sshTunnelPrivateKeyPasswords,\n        [database]: event.target.value }),\n      validationMethods: { onBlur: () => {} }, errorMessage: validationErrors == null ? void 0 : validationErrors.ssh_tunnel_private_key_password_needed, label: t('%s SSH TUNNEL PRIVATE KEY PASSWORD', database.slice(10)), css: formScrollableStyles })));\n\n  };\n  const importingErrorAlert = () => {\n    if (!importingErrorMessage)\n    return null;\n    return ___EmotionJSX(StyledAlertMargin, null,\n    ___EmotionJSX(ErrorAlert, { errorMessage: importingErrorMessage, showDbInstallInstructions: passwordFields.length > 0 }));\n\n  };\n  const confirmOverwrite = (event) => {var _event$currentTarget$, _event$currentTarget;\n    const targetValue = (_event$currentTarget$ = (_event$currentTarget = event.currentTarget) == null ? void 0 : _event$currentTarget.value) != null ? _event$currentTarget$ : '';\n    setConfirmedOverwrite(targetValue.toUpperCase() === t('OVERWRITE'));\n  };\n  const confirmOverwriteField = () => {\n    if (!alreadyExists.length)\n    return null;\n    return ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(StyledAlertMargin, null,\n    ___EmotionJSX(Alert, { closable: false, css: (theme) => antdWarningAlertStyles(theme), type: \"warning\", showIcon: true, message: \"\", description: t('You are importing one or more databases that already exist. Overwriting might cause you to lose some of your work. Are you sure you want to overwrite?') })),\n\n    ___EmotionJSX(ValidatedInput, { id: \"confirm_overwrite\", name: \"confirm_overwrite\", required: true, validationMethods: { onBlur: () => {} }, errorMessage: validationErrors == null ? void 0 : validationErrors.confirm_overwrite, label: t('Type \"%s\" to confirm', t('OVERWRITE')), onChange: confirmOverwrite, css: formScrollableStyles }));\n\n  };\n  const tabChange = (key) => setTabKey(key);\n  const renderStepTwoAlert = () => {var _connectionAlert$REGI, _engineSpecificAlertM, _connectionAlert$DEFA, _engineSpecificAlertM2, _connectionAlert$DEFA2;\n    const { hostname } = window.location;\n    let ipAlert = (connectionAlert == null ? void 0 : (_connectionAlert$REGI = connectionAlert.REGIONAL_IPS) == null ? void 0 : _connectionAlert$REGI.default) || '';\n    const regionalIPs = (connectionAlert == null ? void 0 : connectionAlert.REGIONAL_IPS) || {};\n    Object.entries(regionalIPs).forEach((_ref12) => {let [ipRegion, ipRange] = _ref12;\n      const regex = new RegExp(ipRegion);\n      if (hostname.match(regex))\n      ipAlert = ipRange;\n    });\n    return (db == null ? void 0 : db.engine) && ___EmotionJSX(StyledAlertMargin, null,\n    ___EmotionJSX(Alert, { closable: false, css: (theme) => antDAlertStyles(theme), type: \"info\", showIcon: true, message: ((_engineSpecificAlertM = engineSpecificAlertMapping[db.engine]) == null ? void 0 : _engineSpecificAlertM.message) || (\n      connectionAlert == null ? void 0 : (_connectionAlert$DEFA = connectionAlert.DEFAULT) == null ? void 0 : _connectionAlert$DEFA.message), description: ((_engineSpecificAlertM2 = engineSpecificAlertMapping[db.engine]) == null ? void 0 : _engineSpecificAlertM2.description) ||\n      (connectionAlert == null ? void 0 : (_connectionAlert$DEFA2 = connectionAlert.DEFAULT) == null ? void 0 : _connectionAlert$DEFA2.description) + ipAlert }));\n\n  };\n  // eslint-disable-next-line consistent-return\n  const errorAlert = () => {\n    let alertErrors = [];\n    if (!_isEmpty(dbErrors)) {\n      alertErrors =\n      typeof dbErrors === 'object' ?\n      Object.values(dbErrors) :\n      typeof dbErrors === 'string' ?\n      [dbErrors] :\n      [];\n    } else\n    if (!_isEmpty(validationErrors) &&\n    (validationErrors == null ? void 0 : validationErrors.error_type) === 'GENERIC_DB_ENGINE_ERROR') {\n      alertErrors = [\n      (validationErrors == null ? void 0 : validationErrors.description) || (validationErrors == null ? void 0 : validationErrors.message)];\n\n    }\n    if (alertErrors.length) {var _alertErrors;\n      return ___EmotionJSX(ErrorAlertContainer, null,\n      ___EmotionJSX(ErrorMessageWithStackTrace, { title: t('Database Creation Error'), description: t('We are unable to connect to your database. Click \"See more\" for database-provided information that may help troubleshoot the issue.'), subtitle: ((_alertErrors = alertErrors) == null ? void 0 : _alertErrors[0]) || (validationErrors == null ? void 0 : validationErrors.description), copyText: validationErrors == null ? void 0 : validationErrors.description }));\n\n    }\n    return ___EmotionJSX(React.Fragment, null);\n  };\n  const fetchAndSetDB = () => {\n    setLoading(true);\n    fetchResource(dbFetched == null ? void 0 : dbFetched.id).then((r) => {\n      setItem(LocalStorageKeys.db, r);\n    });\n  };\n  const renderSSHTunnelForm = () => ___EmotionJSX(SSHTunnelForm, { db: db, onSSHTunnelParametersChange: (_ref13) => {let { target } = _ref13;return onChange(ActionType.parametersSSHTunnelChange, {\n        type: target.type,\n        name: target.name,\n        value: target.value });},\n    setSSHTunnelLoginMethod: (method) => setDB({\n      type: ActionType.setSSHTunnelLoginMethod,\n      payload: { login_method: method } }) });\n\n  const renderCTABtns = () => ___EmotionJSX(StyledBtns, null,\n  ___EmotionJSX(Button, { buttonStyle: \"secondary\", onClick: () => {\n      setLoading(true);\n      fetchAndSetDB();\n      redirectURL('/dataset/add/');\n    } },\n  t('CREATE DATASET')),\n\n  ___EmotionJSX(Button, { buttonStyle: \"secondary\", onClick: () => {\n      setLoading(true);\n      fetchAndSetDB();\n      redirectURL(`/superset/sqllab/?db=true`);\n    } },\n  t('QUERY DATA IN SQL LAB')));\n\n\n  const renderDatabaseConnectionForm = () => {var _db$parameters;return ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(DatabaseConnectionForm, { isEditMode: isEditMode, db: db, sslForced: false, dbModel: dbModel, onAddTableCatalog: () => {\n        setDB({ type: ActionType.addTableCatalogSheet });\n      }, onQueryChange: (_ref14) => {let { target } = _ref14;return onChange(ActionType.queryChange, {\n          name: target.name,\n          value: target.value });},\n      onExtraInputChange: (_ref15) => {let { target } = _ref15;return onChange(ActionType.extraInputChange, {\n          name: target.name,\n          value: target.value });},\n      onRemoveTableCatalog: (idx) => {\n        setDB({\n          type: ActionType.removeTableCatalogSheet,\n          payload: { indexToDelete: idx } });\n\n      }, onParametersChange: (_ref16) => {let { target } = _ref16;return onChange(ActionType.parametersChange, {\n          type: target.type,\n          name: target.name,\n          checked: target.checked,\n          value: target.value });},\n      onChange: (_ref17) => {let { target } = _ref17;return onChange(ActionType.textChange, {\n          name: target.name,\n          value: target.value });},\n      getValidation: () => getValidation(db), validationErrors: validationErrors, getPlaceholder: getPlaceholder, clearValidationErrors: () => setValidationErrors(null) }),\n    (db == null ? void 0 : (_db$parameters = db.parameters) == null ? void 0 : _db$parameters.ssh) && ___EmotionJSX(SSHTunnelContainer, null, renderSSHTunnelForm()));};\n\n  const renderFinishState = () => {\n    if (!editNewDb) {\n      return ___EmotionJSX(ExtraOptions, { extraExtension: dbConfigExtraExtension, db: db, onInputChange: (_ref18) => {let { target } = _ref18;return onChange(ActionType.inputChange, {\n            type: target.type,\n            name: target.name,\n            checked: target.checked,\n            value: target.value });},\n        onTextChange: (_ref19) => {let { target } = _ref19;return onChange(ActionType.textChange, {\n            name: target.name,\n            value: target.value });},\n        onEditorChange: (payload) => onChange(ActionType.editorChange, payload), onExtraInputChange: (_ref20) => {let { target } = _ref20;\n          onChange(ActionType.extraInputChange, {\n            type: target.type,\n            name: target.name,\n            checked: target.checked,\n            value: target.value });\n\n        }, onExtraEditorChange: (payload) => onChange(ActionType.extraEditorChange, payload) });\n    }\n    return renderDatabaseConnectionForm();\n  };\n  if (fileList.length > 0 && (\n  alreadyExists.length ||\n  passwordFields.length ||\n  sshTunnelPasswordFields.length ||\n  sshTunnelPrivateKeyFields.length ||\n  sshTunnelPrivateKeyPasswordFields.length)) {\n    return ___EmotionJSX(Modal, { css: (theme) => [\n      antDModalNoPaddingStyles,\n      antDModalStyles(theme),\n      formHelperStyles(theme),\n      formStyles(theme)],\n      name: \"database\", onHandledPrimaryAction: onSave, onHide: onClose, primaryButtonName: t('Connect'), width: \"500px\", centered: true, show: show, title: ___EmotionJSX(\"h4\", null, t('Connect a database')), footer: renderModalFooter() },\n    ___EmotionJSX(ModalHeader, { isLoading: isLoading, isEditMode: isEditMode, useSqlAlchemyForm: useSqlAlchemyForm, hasConnectedDb: hasConnectedDb, db: db, dbName: dbName, dbModel: dbModel, fileList: fileList }),\n    passwordNeededField(),\n    confirmOverwriteField(),\n    importingErrorAlert());\n\n  }\n  const modalFooter = isEditMode ?\n  renderEditModalFooter(db) :\n  renderModalFooter();\n  return useTabLayout ? ___EmotionJSX(Modal, { css: (theme) => [\n    antDTabsStyles,\n    antDModalNoPaddingStyles,\n    antDModalStyles(theme),\n    formHelperStyles(theme),\n    formStyles(theme)],\n    name: \"database\", onHandledPrimaryAction: onSave, onHide: onClose, primaryButtonName: isEditMode ? t('Save') : t('Connect'), width: \"500px\", centered: true, show: show, title: ___EmotionJSX(\"h4\", null, isEditMode ? t('Edit database') : t('Connect a database')), footer: modalFooter },\n  ___EmotionJSX(StyledStickyHeader, null,\n  ___EmotionJSX(TabHeader, null,\n  ___EmotionJSX(ModalHeader, { isLoading: isLoading, isEditMode: isEditMode, useSqlAlchemyForm: useSqlAlchemyForm, hasConnectedDb: hasConnectedDb, db: db, dbName: dbName, dbModel: dbModel }))),\n\n\n  ___EmotionJSX(TabsStyled, { defaultActiveKey: DEFAULT_TAB_KEY, activeKey: tabKey, onTabClick: tabChange, animated: { inkBar: true, tabPane: true } },\n  ___EmotionJSX(Tabs.TabPane, { tab: ___EmotionJSX(\"span\", null, t('Basic')), key: \"1\" },\n  useSqlAlchemyForm ? ___EmotionJSX(StyledAlignment, null,\n  ___EmotionJSX(SqlAlchemyForm, { db: db, onInputChange: (_ref21) => {let { target } = _ref21;return onChange(ActionType.inputChange, {\n        type: target.type,\n        name: target.name,\n        checked: target.checked,\n        value: target.value });},\n    conf: conf, testConnection: testConnection, testInProgress: testInProgress },\n  ___EmotionJSX(SSHTunnelSwitchComponent, { isEditMode: isEditMode, dbFetched: dbFetched, disableSSHTunnelingForEngine: disableSSHTunnelingForEngine, useSSHTunneling: useSSHTunneling, setUseSSHTunneling: setUseSSHTunneling, setDB: setDB, isSSHTunneling: isSSHTunneling }),\n  useSSHTunneling && renderSSHTunnelForm()),\n\n  isDynamic((db == null ? void 0 : db.backend) || (db == null ? void 0 : db.engine)) && !isEditMode && ___EmotionJSX(\"div\", { css: (theme) => infoTooltip(theme) },\n  ___EmotionJSX(Button, { buttonStyle: \"link\", onClick: () => setDB({\n      type: ActionType.configMethodChange,\n      payload: {\n        database_name: db == null ? void 0 : db.database_name,\n        configuration_method: CONFIGURATION_METHOD.DYNAMIC_FORM,\n        engine: db == null ? void 0 : db.engine } }),\n\n    css: (theme) => alchemyButtonLinkStyles(theme) },\n  t('Connect this database using the dynamic form instead')),\n\n  ___EmotionJSX(InfoTooltip, { tooltip: t('Click this link to switch to an alternate form that exposes only the required fields needed to connect this database.'), viewBox: \"0 -6 24 24\" }))) :\n\n  renderDatabaseConnectionForm(),\n  !isEditMode && ___EmotionJSX(StyledAlertMargin, null,\n  ___EmotionJSX(Alert, { closable: false, css: (theme) => antDAlertStyles(theme), message: t('Additional fields may be required'), showIcon: true, description: ___EmotionJSX(React.Fragment, null,\n    t('Select databases require additional fields to be completed in the Advanced tab to successfully connect the database. Learn what requirements your databases has '),\n    ___EmotionJSX(\"a\", { href: DOCUMENTATION_LINK, target: \"_blank\", rel: \"noopener noreferrer\", className: \"additional-fields-alert-description\" },\n    t('here')), \".\"),\n\n\n    type: \"info\" })),\n\n  showDBError && errorAlert()),\n\n  ___EmotionJSX(Tabs.TabPane, { tab: ___EmotionJSX(\"span\", null, t('Advanced')), key: \"2\" },\n  ___EmotionJSX(ExtraOptions, { extraExtension: dbConfigExtraExtension, db: db, onInputChange: (_ref22) => {let { target } = _ref22;return onChange(ActionType.inputChange, {\n        type: target.type,\n        name: target.name,\n        checked: target.checked,\n        value: target.value });},\n    onTextChange: (_ref23) => {let { target } = _ref23;return onChange(ActionType.textChange, {\n        name: target.name,\n        value: target.value });},\n    onEditorChange: (payload) => onChange(ActionType.editorChange, payload), onExtraInputChange: (_ref24) => {let { target } = _ref24;\n      onChange(ActionType.extraInputChange, {\n        type: target.type,\n        name: target.name,\n        checked: target.checked,\n        value: target.value });\n\n    }, onExtraEditorChange: (payload) => {\n      onChange(ActionType.extraEditorChange, payload);\n    } })))) :\n\n\n  ___EmotionJSX(Modal, { css: (theme) => [\n    antDModalNoPaddingStyles,\n    antDModalStyles(theme),\n    formHelperStyles(theme),\n    formStyles(theme)],\n    name: \"database\", onHandledPrimaryAction: onSave, onHide: onClose, primaryButtonName: hasConnectedDb ? t('Finish') : t('Connect'), width: \"500px\", centered: true, show: show, title: ___EmotionJSX(\"h4\", null, t('Connect a database')), footer: renderModalFooter() },\n  !isLoading && hasConnectedDb ? ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(ModalHeader, { isLoading: isLoading, isEditMode: isEditMode, useSqlAlchemyForm: useSqlAlchemyForm, hasConnectedDb: hasConnectedDb, db: db, dbName: dbName, dbModel: dbModel, editNewDb: editNewDb }),\n  showCTAbtns && renderCTABtns(),\n  renderFinishState()) :\n  ___EmotionJSX(React.Fragment, null,\n\n  !isLoading && (\n  !db ? ___EmotionJSX(SelectDatabaseStyles, null,\n  ___EmotionJSX(ModalHeader, { isLoading: isLoading, isEditMode: isEditMode, useSqlAlchemyForm: useSqlAlchemyForm, hasConnectedDb: hasConnectedDb, db: db, dbName: dbName, dbModel: dbModel }),\n  renderPreferredSelector(),\n  renderAvailableSelector(),\n  ___EmotionJSX(StyledUploadWrapper, null,\n  ___EmotionJSX(Upload, { name: \"databaseFile\", id: \"databaseFile\", accept: \".yaml,.json,.yml,.zip\", customRequest: () => {}, onChange: onDbImport, onRemove: removeFile },\n  ___EmotionJSX(Button, { buttonStyle: \"link\", type: \"link\", css: importDbButtonLinkStyles },\n  t('Import database from file')))),\n\n\n\n  importingErrorAlert()) :\n  ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(ModalHeader, { isLoading: isLoading, isEditMode: isEditMode, useSqlAlchemyForm: useSqlAlchemyForm, hasConnectedDb: hasConnectedDb, db: db, dbName: dbName, dbModel: dbModel }),\n  hasAlert && renderStepTwoAlert(),\n  renderDatabaseConnectionForm(),\n  ___EmotionJSX(\"div\", { css: (theme) => infoTooltip(theme) },\n  dbModel.engine !== Engines.GSheet && ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(Button, { buttonStyle: \"link\", onClick: () => setDB({\n      type: ActionType.configMethodChange,\n      payload: {\n        engine: db.engine,\n        configuration_method: CONFIGURATION_METHOD.SQLALCHEMY_URI,\n        database_name: db.database_name } }),\n\n    css: buttonLinkStyles },\n  t('Connect this database with a SQLAlchemy URI string instead')),\n\n  ___EmotionJSX(InfoTooltip, { tooltip: t('Click this link to switch to an alternate form that allows you to input the SQLAlchemy URL for this database manually.'), viewBox: \"0 -6 24 24\" }))),\n\n\n\n  showDBError && errorAlert()))),\n\n\n  isLoading && ___EmotionJSX(Loading, null));\n\n};\nexport default withToasts(DatabaseModal);","map":{"version":3,"mappings":"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","names":["t","styled","FeatureFlag","isFeatureEnabled","getExtensionsRegistry","React","useEffect","useRef","useState","useReducer","setItem","LocalStorageKeys","Tabs","AntdSelect","Upload","Alert","Modal","Button","IconButton","InfoTooltip","withToasts","ValidatedInput","ErrorMessageWithStackTrace","ErrorAlert","testDatabaseConnection","useSingleViewResource","useAvailableDatabases","useDatabaseValidation","getDatabaseImages","getConnectionAlert","useImportResource","useCommonConf","Loading","CONFIGURATION_METHOD","Engines","ExtraOptions","SqlAlchemyForm","DatabaseConnectionForm","antDAlertStyles","antdWarningAlertStyles","StyledAlertMargin","antDModalNoPaddingStyles","antDModalStyles","antDTabsStyles","buttonLinkStyles","importDbButtonLinkStyles","alchemyButtonLinkStyles","TabHeader","formHelperStyles","formStyles","StyledAlignment","SelectDatabaseStyles","infoTooltip","StyledFooterButton","StyledStickyHeader","formScrollableStyles","StyledUploadWrapper","ModalHeader","DOCUMENTATION_LINK","SSHTunnelForm","SSHTunnelSwitch","extensionsRegistry","DEFAULT_EXTRA","JSON","stringify","allows_virtual_table_explore","engineSpecificAlertMapping","GSheet","message","description","TabsStyled","ErrorAlertContainer","div","theme","gridUnit","SSHTunnelContainer","ActionType","AuthType","StyledBtns","dbReducer","state","action","trimmedState","query","query_input","parametersCatalog","actionPayloadJson","extraJson","parse","extra","type","extraEditorChange","payload","json","e","name","extraInputChange","metadata_cache_timeout","value","schemas_allowed_for_file_upload","split","filter","schema","engine_params","connect_args","trim","checked","inputChange","parametersChange","startsWith","catalog","undefined","catalogCopy","idx","catalogToUpdate","splice","parseInt","reduce","obj","item","parameters","parametersSSHTunnelChange","ssh_tunnel","setSSHTunnelLoginMethod","login_method","privateKey","private_key","private_key_password","password","removeSSHTunnelConfig","addTableCatalogSheet","removeTableCatalogSheet","indexToDelete","editorChange","queryChange","Object","fromEntries","URLSearchParams","textChange","fetched","entries","map","key","join","masked_encrypted_extra","configuration_method","DYNAMIC_FORM","extraJsonPayload","payloadCatalog","engineRootCatalog","engine","backend","dbSelected","expose_in_sqllab","configMethodChange","reset","DEFAULT_TAB_KEY","DatabaseModal","addDangerToast","addSuccessToast","onDatabaseAdd","onHide","show","databaseId","dbEngine","history","db","setDB","loading","dbLoading","resource","dbFetched","error","dbErrors","fetchResource","createResource","updateResource","clearError","tabKey","setTabKey","availableDbs","getAvailableDbs","validationErrors","getValidation","setValidationErrors","hasConnectedDb","setHasConnectedDb","showCTAbtns","setShowCTAbtns","dbName","setDbName","editNewDb","setEditNewDb","isLoading","setLoading","testInProgress","setTestInProgress","passwords","setPasswords","sshTunnelPasswords","setSSHTunnelPasswords","sshTunnelPrivateKeys","setSSHTunnelPrivateKeys","sshTunnelPrivateKeyPasswords","setSSHTunnelPrivateKeyPasswords","confirmedOverwrite","setConfirmedOverwrite","fileList","setFileList","importingModal","setImportingModal","importingErrorMessage","setImportingErrorMessage","passwordFields","setPasswordFields","sshTunnelPasswordFields","setSSHTunnelPasswordFields","sshTunnelPrivateKeyFields","setSSHTunnelPrivateKeyFields","sshTunnelPrivateKeyPasswordFields","setSSHTunnelPrivateKeyPasswordFields","extraExtensionComponentState","setExtraExtensionComponentState","SSHTunnelSwitchComponent","get","useSSHTunneling","setUseSSHTunneling","dbConfigExtraExtension","onEdit","componentState","conf","dbImages","connectionAlert","isEditMode","disableSSHTunnelingForEngine","databases","find","DB","engine_information","disable_ssh_tunneling","isSSHTunneling","SSH_TUNNELING","hasAlert","useSqlAlchemyForm","SQLALCHEMY_URI","useTabLayout","isDynamic","showDBError","dbModel","available","testConnection","sqlalchemy_uri","connection","database_name","impersonate_user","server_cert","errorMsg","getPlaceholder","field","Snowflake","removeFile","removedFile","file","uid","onClose","redirectURL","url","push","window","location","href","alreadyExists","passwordsNeeded","sshPasswordNeeded","sshPrivateKeyNeeded","sshPrivateKeyPasswordNeeded","importLoading","failed","importErrored","importResource","msg","onChange","onSave","dbConfigExtraExtensionOnSaveError","then","dbToUpdate","errors","parameters_schema","properties","additionalEncryptedExtra","paramConfigArray","keys","forEach","paramConfig","id","result","dbId","originFileObj","File","fetchDB","catch","setDatabaseModel","supports_file_upload","selectedDbModel","default_driver","driver","renderAvailableSelector","sort","a","b","localeCompare","database","index","ADD_DATABASE","contact_link","contact_description_link","renderPreferredSelector","preferred","handleBackButtonOnFinish","handleBackButtonOnConnect","handleDisableOnImport","length","renderModalFooter","renderEditModalFooter","is_managed_externally","firstUpdate","current","document","getElementsByClassName","scrollIntoView","onDbImport","info","status","passwordNeededField","files","Set","indexOf","event","target","onBlur","password_needed","slice","ssh_tunnel_password_needed","ssh_tunnel_private_key_needed","ssh_tunnel_private_key_password_needed","importingErrorAlert","confirmOverwrite","targetValue","currentTarget","toUpperCase","confirmOverwriteField","confirm_overwrite","tabChange","renderStepTwoAlert","hostname","ipAlert","REGIONAL_IPS","default","regionalIPs","ipRegion","ipRange","regex","RegExp","match","DEFAULT","errorAlert","alertErrors","values","error_type","fetchAndSetDB","r","renderSSHTunnelForm","method","renderCTABtns","renderDatabaseConnectionForm","ssh","renderFinishState","modalFooter","inkBar","tabPane"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/features/databases/DatabaseModal/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  t,\n  styled,\n  SupersetTheme,\n  FeatureFlag,\n  isFeatureEnabled,\n  getExtensionsRegistry,\n} from '@superset-ui/core';\nimport React, {\n  FunctionComponent,\n  useEffect,\n  useRef,\n  useState,\n  useReducer,\n  Reducer,\n} from 'react';\nimport { setItem, LocalStorageKeys } from 'src/utils/localStorageHelpers';\nimport { UploadChangeParam, UploadFile } from 'antd/lib/upload/interface';\nimport Tabs from 'src/components/Tabs';\nimport { AntdSelect, Upload } from 'src/components';\nimport Alert from 'src/components/Alert';\nimport Modal from 'src/components/Modal';\nimport Button from 'src/components/Button';\nimport IconButton from 'src/components/IconButton';\nimport InfoTooltip from 'src/components/InfoTooltip';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport ValidatedInput from 'src/components/Form/LabeledErrorBoundInput';\nimport ErrorMessageWithStackTrace from 'src/components/ErrorMessage/ErrorMessageWithStackTrace';\nimport ErrorAlert from 'src/components/ImportModal/ErrorAlert';\nimport {\n  testDatabaseConnection,\n  useSingleViewResource,\n  useAvailableDatabases,\n  useDatabaseValidation,\n  getDatabaseImages,\n  getConnectionAlert,\n  useImportResource,\n} from 'src/views/CRUD/hooks';\nimport { useCommonConf } from 'src/features/databases/state';\nimport Loading from 'src/components/Loading';\nimport { isEmpty, pick } from 'lodash';\nimport {\n  DatabaseObject,\n  DatabaseForm,\n  CONFIGURATION_METHOD,\n  CatalogObject,\n  Engines,\n  ExtraJson,\n} from '../types';\nimport ExtraOptions from './ExtraOptions';\nimport SqlAlchemyForm from './SqlAlchemyForm';\nimport DatabaseConnectionForm from './DatabaseConnectionForm';\nimport {\n  antDAlertStyles,\n  antdWarningAlertStyles,\n  StyledAlertMargin,\n  antDModalNoPaddingStyles,\n  antDModalStyles,\n  antDTabsStyles,\n  buttonLinkStyles,\n  importDbButtonLinkStyles,\n  alchemyButtonLinkStyles,\n  TabHeader,\n  formHelperStyles,\n  formStyles,\n  StyledAlignment,\n  SelectDatabaseStyles,\n  infoTooltip,\n  StyledFooterButton,\n  StyledStickyHeader,\n  formScrollableStyles,\n  StyledUploadWrapper,\n} from './styles';\nimport ModalHeader, { DOCUMENTATION_LINK } from './ModalHeader';\nimport SSHTunnelForm from './SSHTunnelForm';\nimport SSHTunnelSwitch from './SSHTunnelSwitch';\n\nconst extensionsRegistry = getExtensionsRegistry();\n\nconst DEFAULT_EXTRA = JSON.stringify({ allows_virtual_table_explore: true });\n\nconst engineSpecificAlertMapping = {\n  [Engines.GSheet]: {\n    message: 'Why do I need to create a database?',\n    description:\n      'To begin using your Google Sheets, you need to create a database first. ' +\n      'Databases are used as a way to identify ' +\n      'your data so that it can be queried and visualized. This ' +\n      'database will hold all of your individual Google Sheets ' +\n      'you choose to connect here.',\n  },\n};\n\nconst TabsStyled = styled(Tabs)`\n  .ant-tabs-content {\n    display: flex;\n    width: 100%;\n    overflow: inherit;\n\n    & > .ant-tabs-tabpane {\n      position: relative;\n    }\n  }\n`;\n\nconst ErrorAlertContainer = styled.div`\n  ${({ theme }) => `\n    margin: ${theme.gridUnit * 8}px ${theme.gridUnit * 4}px;\n  `};\n`;\n\nconst SSHTunnelContainer = styled.div`\n  ${({ theme }) => `\n    padding: 0px ${theme.gridUnit * 4}px;\n  `};\n`;\n\ninterface DatabaseModalProps {\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n  onDatabaseAdd?: (database?: DatabaseObject) => void;\n  onHide: () => void;\n  show: boolean;\n  databaseId: number | undefined; // If included, will go into edit mode\n  dbEngine: string | undefined; // if included goto step 2 with engine already set\n  history?: any;\n}\n\nexport enum ActionType {\n  addTableCatalogSheet,\n  configMethodChange,\n  dbSelected,\n  editorChange,\n  extraEditorChange,\n  extraInputChange,\n  fetched,\n  inputChange,\n  parametersChange,\n  queryChange,\n  removeTableCatalogSheet,\n  reset,\n  textChange,\n  parametersSSHTunnelChange,\n  setSSHTunnelLoginMethod,\n  removeSSHTunnelConfig,\n}\n\nexport enum AuthType {\n  password,\n  privateKey,\n}\n\ninterface DBReducerPayloadType {\n  target?: string;\n  name: string;\n  json?: string;\n  type?: string;\n  checked?: boolean;\n  value?: string;\n}\n\nexport type DBReducerActionType =\n  | {\n      type:\n        | ActionType.extraEditorChange\n        | ActionType.extraInputChange\n        | ActionType.textChange\n        | ActionType.queryChange\n        | ActionType.inputChange\n        | ActionType.editorChange\n        | ActionType.parametersChange\n        | ActionType.parametersSSHTunnelChange;\n      payload: DBReducerPayloadType;\n    }\n  | {\n      type: ActionType.fetched;\n      payload: Partial<DatabaseObject>;\n    }\n  | {\n      type: ActionType.dbSelected;\n      payload: {\n        database_name?: string;\n        engine?: string;\n        configuration_method: CONFIGURATION_METHOD;\n        engine_information?: {};\n        driver?: string;\n      };\n    }\n  | {\n      type:\n        | ActionType.reset\n        | ActionType.addTableCatalogSheet\n        | ActionType.removeSSHTunnelConfig;\n    }\n  | {\n      type: ActionType.removeTableCatalogSheet;\n      payload: {\n        indexToDelete: number;\n      };\n    }\n  | {\n      type: ActionType.configMethodChange;\n      payload: {\n        database_name?: string;\n        engine?: string;\n        configuration_method: CONFIGURATION_METHOD;\n      };\n    }\n  | {\n      type: ActionType.setSSHTunnelLoginMethod;\n      payload: {\n        login_method: AuthType;\n      };\n    };\n\nconst StyledBtns = styled.div`\n  margin-bottom: ${({ theme }) => theme.gridUnit * 3}px;\n  margin-left: ${({ theme }) => theme.gridUnit * 3}px;\n`;\n\nexport function dbReducer(\n  state: Partial<DatabaseObject> | null,\n  action: DBReducerActionType,\n): Partial<DatabaseObject> | null {\n  const trimmedState = {\n    ...(state || {}),\n  };\n  let query = {};\n  let query_input = '';\n  let parametersCatalog;\n  let actionPayloadJson;\n  const extraJson: ExtraJson = JSON.parse(trimmedState.extra || '{}');\n\n  switch (action.type) {\n    case ActionType.extraEditorChange:\n      // \"extra\" payload in state is a string\n      try {\n        // we don't want to stringify encoded strings twice\n        actionPayloadJson = JSON.parse(action.payload.json || '{}');\n      } catch (e) {\n        actionPayloadJson = action.payload.json;\n      }\n      return {\n        ...trimmedState,\n        extra: JSON.stringify({\n          ...extraJson,\n          [action.payload.name]: actionPayloadJson,\n        }),\n      };\n    case ActionType.extraInputChange:\n      // \"extra\" payload in state is a string\n      if (\n        action.payload.name === 'schema_cache_timeout' ||\n        action.payload.name === 'table_cache_timeout'\n      ) {\n        return {\n          ...trimmedState,\n          extra: JSON.stringify({\n            ...extraJson,\n            metadata_cache_timeout: {\n              ...extraJson?.metadata_cache_timeout,\n              [action.payload.name]: action.payload.value,\n            },\n          }),\n        };\n      }\n      if (action.payload.name === 'schemas_allowed_for_file_upload') {\n        return {\n          ...trimmedState,\n          extra: JSON.stringify({\n            ...extraJson,\n            schemas_allowed_for_file_upload: (action.payload.value || '')\n              .split(',')\n              .filter(schema => schema !== ''),\n          }),\n        };\n      }\n      if (action.payload.name === 'http_path') {\n        return {\n          ...trimmedState,\n          extra: JSON.stringify({\n            ...extraJson,\n            engine_params: {\n              connect_args: {\n                [action.payload.name]: action.payload.value?.trim(),\n              },\n            },\n          }),\n        };\n      }\n      return {\n        ...trimmedState,\n        extra: JSON.stringify({\n          ...extraJson,\n          [action.payload.name]:\n            action.payload.type === 'checkbox'\n              ? action.payload.checked\n              : action.payload.value,\n        }),\n      };\n    case ActionType.inputChange:\n      if (action.payload.type === 'checkbox') {\n        return {\n          ...trimmedState,\n          [action.payload.name]: action.payload.checked,\n        };\n      }\n      return {\n        ...trimmedState,\n        [action.payload.name]: action.payload.value,\n      };\n    case ActionType.parametersChange:\n      // catalog params will always have a catalog state for\n      // dbs that use a catalog, i.e., gsheets, even if the\n      // fields are empty strings\n      if (\n        action.payload.type?.startsWith('catalog') &&\n        trimmedState.catalog !== undefined\n      ) {\n        // Formatting wrapping google sheets table catalog\n        const catalogCopy: CatalogObject[] = [...trimmedState.catalog];\n        const idx = action.payload.type?.split('-')[1];\n        const catalogToUpdate: CatalogObject = catalogCopy[idx] || {};\n        catalogToUpdate[action.payload.name] = action.payload.value;\n\n        // insert updated catalog to existing state\n        catalogCopy.splice(parseInt(idx, 10), 1, catalogToUpdate);\n\n        // format catalog for state\n        // eslint-disable-next-line array-callback-return\n        parametersCatalog = catalogCopy.reduce((obj, item: any) => {\n          const catalog = { ...obj };\n          catalog[item.name] = item.value;\n          return catalog;\n        }, {});\n\n        return {\n          ...trimmedState,\n          catalog: catalogCopy,\n          parameters: {\n            ...trimmedState.parameters,\n            catalog: parametersCatalog,\n          },\n        };\n      }\n      return {\n        ...trimmedState,\n        parameters: {\n          ...trimmedState.parameters,\n          [action.payload.name]: action.payload.value,\n        },\n      };\n\n    case ActionType.parametersSSHTunnelChange:\n      return {\n        ...trimmedState,\n        ssh_tunnel: {\n          ...trimmedState.ssh_tunnel,\n          [action.payload.name]: action.payload.value,\n        },\n      };\n    case ActionType.setSSHTunnelLoginMethod: {\n      let ssh_tunnel = {};\n      if (trimmedState?.ssh_tunnel) {\n        // remove any attributes that are considered sensitive\n        ssh_tunnel = pick(trimmedState.ssh_tunnel, [\n          'id',\n          'server_address',\n          'server_port',\n          'username',\n        ]);\n      }\n      if (action.payload.login_method === AuthType.privateKey) {\n        return {\n          ...trimmedState,\n          ssh_tunnel: {\n            private_key: trimmedState?.ssh_tunnel?.private_key,\n            private_key_password:\n              trimmedState?.ssh_tunnel?.private_key_password,\n            ...ssh_tunnel,\n          },\n        };\n      }\n      if (action.payload.login_method === AuthType.password) {\n        return {\n          ...trimmedState,\n          ssh_tunnel: {\n            password: trimmedState?.ssh_tunnel?.password,\n            ...ssh_tunnel,\n          },\n        };\n      }\n      return {\n        ...trimmedState,\n      };\n    }\n    case ActionType.removeSSHTunnelConfig:\n      return {\n        ...trimmedState,\n        ssh_tunnel: undefined,\n      };\n    case ActionType.addTableCatalogSheet:\n      if (trimmedState.catalog !== undefined) {\n        return {\n          ...trimmedState,\n          catalog: [...trimmedState.catalog, { name: '', value: '' }],\n        };\n      }\n      return {\n        ...trimmedState,\n        catalog: [{ name: '', value: '' }],\n      };\n    case ActionType.removeTableCatalogSheet:\n      trimmedState.catalog?.splice(action.payload.indexToDelete, 1);\n      return {\n        ...trimmedState,\n      };\n    case ActionType.editorChange:\n      return {\n        ...trimmedState,\n        [action.payload.name]: action.payload.json,\n      };\n    case ActionType.queryChange:\n      return {\n        ...trimmedState,\n        parameters: {\n          ...trimmedState.parameters,\n          query: Object.fromEntries(new URLSearchParams(action.payload.value)),\n        },\n        query_input: action.payload.value,\n      };\n    case ActionType.textChange:\n      return {\n        ...trimmedState,\n        [action.payload.name]: action.payload.value,\n      };\n    case ActionType.fetched:\n      // convert query to a string and store in query_input\n      query = action.payload?.parameters?.query || {};\n      query_input = Object.entries(query)\n        .map(([key, value]) => `${key}=${value}`)\n        .join('&');\n\n      if (\n        action.payload.masked_encrypted_extra &&\n        action.payload.configuration_method ===\n          CONFIGURATION_METHOD.DYNAMIC_FORM\n      ) {\n        // \"extra\" payload from the api is a string\n        const extraJsonPayload: ExtraJson = {\n          ...JSON.parse((action.payload.extra as string) || '{}'),\n        };\n\n        const payloadCatalog = extraJsonPayload.engine_params?.catalog;\n\n        const engineRootCatalog = Object.entries(payloadCatalog || {}).map(\n          ([name, value]: string[]) => ({ name, value }),\n        );\n\n        return {\n          ...action.payload,\n          engine: action.payload.backend || trimmedState.engine,\n          configuration_method: action.payload.configuration_method,\n          catalog: engineRootCatalog,\n          parameters: {\n            ...(action.payload.parameters || trimmedState.parameters),\n            catalog: payloadCatalog,\n          },\n          query_input,\n        };\n      }\n      return {\n        ...action.payload,\n        masked_encrypted_extra: action.payload.masked_encrypted_extra || '',\n        engine: action.payload.backend || trimmedState.engine,\n        configuration_method: action.payload.configuration_method,\n        parameters: action.payload.parameters || trimmedState.parameters,\n        ssh_tunnel: action.payload.ssh_tunnel || trimmedState.ssh_tunnel,\n        query_input,\n      };\n\n    case ActionType.dbSelected:\n      // set initial state for blank form\n      return {\n        ...action.payload,\n        extra: DEFAULT_EXTRA,\n        expose_in_sqllab: true,\n      };\n    case ActionType.configMethodChange:\n      return {\n        ...action.payload,\n      };\n\n    case ActionType.reset:\n    default:\n      return null;\n  }\n}\n\nconst DEFAULT_TAB_KEY = '1';\n\nconst DatabaseModal: FunctionComponent<DatabaseModalProps> = ({\n  addDangerToast,\n  addSuccessToast,\n  onDatabaseAdd,\n  onHide,\n  show,\n  databaseId,\n  dbEngine,\n  history,\n}) => {\n  const [db, setDB] = useReducer<\n    Reducer<Partial<DatabaseObject> | null, DBReducerActionType>\n  >(dbReducer, null);\n  // Database fetch logic\n  const {\n    state: { loading: dbLoading, resource: dbFetched, error: dbErrors },\n    fetchResource,\n    createResource,\n    updateResource,\n    clearError,\n  } = useSingleViewResource<DatabaseObject>(\n    'database',\n    t('database'),\n    addDangerToast,\n    'connection',\n  );\n\n  const [tabKey, setTabKey] = useState<string>(DEFAULT_TAB_KEY);\n  const [availableDbs, getAvailableDbs] = useAvailableDatabases();\n  const [validationErrors, getValidation, setValidationErrors] =\n    useDatabaseValidation();\n  const [hasConnectedDb, setHasConnectedDb] = useState<boolean>(false);\n  const [showCTAbtns, setShowCTAbtns] = useState(false);\n  const [dbName, setDbName] = useState('');\n  const [editNewDb, setEditNewDb] = useState<boolean>(false);\n  const [isLoading, setLoading] = useState<boolean>(false);\n  const [testInProgress, setTestInProgress] = useState<boolean>(false);\n  const [passwords, setPasswords] = useState<Record<string, string>>({});\n  const [sshTunnelPasswords, setSSHTunnelPasswords] = useState<\n    Record<string, string>\n  >({});\n  const [sshTunnelPrivateKeys, setSSHTunnelPrivateKeys] = useState<\n    Record<string, string>\n  >({});\n  const [sshTunnelPrivateKeyPasswords, setSSHTunnelPrivateKeyPasswords] =\n    useState<Record<string, string>>({});\n  const [confirmedOverwrite, setConfirmedOverwrite] = useState<boolean>(false);\n  const [fileList, setFileList] = useState<UploadFile[]>([]);\n  const [importingModal, setImportingModal] = useState<boolean>(false);\n  const [importingErrorMessage, setImportingErrorMessage] = useState<string>();\n  const [passwordFields, setPasswordFields] = useState<string[]>([]);\n  const [sshTunnelPasswordFields, setSSHTunnelPasswordFields] = useState<\n    string[]\n  >([]);\n  const [sshTunnelPrivateKeyFields, setSSHTunnelPrivateKeyFields] = useState<\n    string[]\n  >([]);\n  const [\n    sshTunnelPrivateKeyPasswordFields,\n    setSSHTunnelPrivateKeyPasswordFields,\n  ] = useState<string[]>([]);\n  const [extraExtensionComponentState, setExtraExtensionComponentState] =\n    useState<object>({});\n\n  const SSHTunnelSwitchComponent =\n    extensionsRegistry.get('ssh_tunnel.form.switch') ?? SSHTunnelSwitch;\n\n  const [useSSHTunneling, setUseSSHTunneling] = useState<boolean>(false);\n\n  let dbConfigExtraExtension = extensionsRegistry.get(\n    'databaseconnection.extraOption',\n  );\n\n  if (dbConfigExtraExtension) {\n    // add method for db modal to store data\n    dbConfigExtraExtension = {\n      ...dbConfigExtraExtension,\n      onEdit: componentState => {\n        setExtraExtensionComponentState({\n          ...extraExtensionComponentState,\n          ...componentState,\n        });\n      },\n    };\n  }\n\n  const conf = useCommonConf();\n  const dbImages = getDatabaseImages();\n  const connectionAlert = getConnectionAlert();\n  const isEditMode = !!databaseId;\n  const disableSSHTunnelingForEngine = (\n    availableDbs?.databases?.find(\n      (DB: DatabaseObject) =>\n        DB.backend === db?.engine || DB.engine === db?.engine,\n    ) as DatabaseObject\n  )?.engine_information?.disable_ssh_tunneling;\n  const isSSHTunneling =\n    isFeatureEnabled(FeatureFlag.SSH_TUNNELING) &&\n    !disableSSHTunnelingForEngine;\n  const hasAlert =\n    connectionAlert || !!(db?.engine && engineSpecificAlertMapping[db.engine]);\n  const useSqlAlchemyForm =\n    db?.configuration_method === CONFIGURATION_METHOD.SQLALCHEMY_URI;\n  const useTabLayout = isEditMode || useSqlAlchemyForm;\n  const isDynamic = (engine: string | undefined) =>\n    availableDbs?.databases?.find(\n      (DB: DatabaseObject) => DB.backend === engine || DB.engine === engine,\n    )?.parameters !== undefined;\n  const showDBError = validationErrors || dbErrors;\n\n  const dbModel: DatabaseForm =\n    availableDbs?.databases?.find(\n      (available: { engine: string | undefined }) =>\n        // TODO: we need a centralized engine in one place\n        available.engine === (isEditMode ? db?.backend : db?.engine),\n    ) || {};\n\n  // Test Connection logic\n  const testConnection = () => {\n    if (!db?.sqlalchemy_uri) {\n      addDangerToast(t('Please enter a SQLAlchemy URI to test'));\n      return;\n    }\n\n    const connection = {\n      sqlalchemy_uri: db?.sqlalchemy_uri || '',\n      database_name: db?.database_name?.trim() || undefined,\n      impersonate_user: db?.impersonate_user || undefined,\n      extra: db?.extra,\n      masked_encrypted_extra: db?.masked_encrypted_extra || '',\n      server_cert: db?.server_cert || undefined,\n      ssh_tunnel: db?.ssh_tunnel || undefined,\n    };\n    setTestInProgress(true);\n    testDatabaseConnection(\n      connection,\n      (errorMsg: string) => {\n        setTestInProgress(false);\n        addDangerToast(errorMsg);\n      },\n      (errorMsg: string) => {\n        setTestInProgress(false);\n        addSuccessToast(errorMsg);\n      },\n    );\n  };\n\n  const getPlaceholder = (field: string) => {\n    if (field === 'database') {\n      switch (db?.engine) {\n        case Engines.Snowflake:\n          return t('e.g. xy12345.us-east-2.aws');\n        default:\n          return t('e.g. world_population');\n      }\n    }\n    return undefined;\n  };\n\n  const removeFile = (removedFile: UploadFile) => {\n    setFileList(fileList.filter(file => file.uid !== removedFile.uid));\n    return false;\n  };\n\n  const onClose = () => {\n    setDB({ type: ActionType.reset });\n    setHasConnectedDb(false);\n    setValidationErrors(null); // reset validation errors on close\n    clearError();\n    setEditNewDb(false);\n    setFileList([]);\n    setImportingModal(false);\n    setImportingErrorMessage('');\n    setPasswordFields([]);\n    setSSHTunnelPasswordFields([]);\n    setSSHTunnelPrivateKeyFields([]);\n    setSSHTunnelPrivateKeyPasswordFields([]);\n    setPasswords({});\n    setSSHTunnelPasswords({});\n    setSSHTunnelPrivateKeys({});\n    setSSHTunnelPrivateKeyPasswords({});\n    setConfirmedOverwrite(false);\n    setUseSSHTunneling(false);\n    onHide();\n  };\n\n  const redirectURL = (url: string) => {\n    /* TODO (lyndsiWilliams): This check and passing history\n      as a prop can be removed once SQL Lab is in the SPA */\n    if (!isEmpty(history)) {\n      history?.push(url);\n    } else {\n      window.location.href = url;\n    }\n  };\n\n  // Database import logic\n  const {\n    state: {\n      alreadyExists,\n      passwordsNeeded,\n      sshPasswordNeeded,\n      sshPrivateKeyNeeded,\n      sshPrivateKeyPasswordNeeded,\n      loading: importLoading,\n      failed: importErrored,\n    },\n    importResource,\n  } = useImportResource('database', t('database'), msg => {\n    setImportingErrorMessage(msg);\n  });\n\n  const onChange = (type: any, payload: any) => {\n    setDB({ type, payload } as DBReducerActionType);\n  };\n\n  const onSave = async () => {\n    let dbConfigExtraExtensionOnSaveError;\n    dbConfigExtraExtension\n      ?.onSave(extraExtensionComponentState, db)\n      .then(({ error }: { error: any }) => {\n        if (error) {\n          dbConfigExtraExtensionOnSaveError = error;\n          addDangerToast(error);\n        }\n      });\n    if (dbConfigExtraExtensionOnSaveError) {\n      setLoading(false);\n      return;\n    }\n    // Clone DB object\n    const dbToUpdate = { ...(db || {}) };\n\n    if (dbToUpdate.configuration_method === CONFIGURATION_METHOD.DYNAMIC_FORM) {\n      // Validate DB before saving\n      if (dbToUpdate?.parameters?.catalog) {\n        // need to stringify gsheets catalog to allow it to be serialized\n        dbToUpdate.extra = JSON.stringify({\n          ...JSON.parse(dbToUpdate.extra || '{}'),\n          engine_params: {\n            catalog: dbToUpdate.parameters.catalog,\n          },\n        });\n      }\n\n      // only do validation for non ssh tunnel connections\n      if (!dbToUpdate?.ssh_tunnel) {\n        // make sure that button spinner animates\n        setLoading(true);\n        const errors = await getValidation(dbToUpdate, true);\n        if ((validationErrors && !isEmpty(validationErrors)) || errors) {\n          setLoading(false);\n          return;\n        }\n        // end spinner animation\n        setLoading(false);\n      }\n\n      const parameters_schema = isEditMode\n        ? dbToUpdate.parameters_schema?.properties\n        : dbModel?.parameters.properties;\n      const additionalEncryptedExtra = JSON.parse(\n        dbToUpdate.masked_encrypted_extra || '{}',\n      );\n      const paramConfigArray = Object.keys(parameters_schema || {});\n\n      paramConfigArray.forEach(paramConfig => {\n        /*\n         * Parameters that are annotated with the `x-encrypted-extra` properties should be\n         * moved to `masked_encrypted_extra`, so that they are stored encrypted in the\n         * backend when the database is created or edited.\n         */\n        if (\n          parameters_schema[paramConfig]['x-encrypted-extra'] &&\n          dbToUpdate.parameters?.[paramConfig]\n        ) {\n          if (typeof dbToUpdate.parameters?.[paramConfig] === 'object') {\n            // add new encrypted extra to masked_encrypted_extra object\n            additionalEncryptedExtra[paramConfig] =\n              dbToUpdate.parameters?.[paramConfig];\n            // The backend expects `masked_encrypted_extra` as a string for historical\n            // reasons.\n            dbToUpdate.parameters[paramConfig] = JSON.stringify(\n              dbToUpdate.parameters[paramConfig],\n            );\n          } else {\n            additionalEncryptedExtra[paramConfig] = JSON.parse(\n              dbToUpdate.parameters?.[paramConfig] || '{}',\n            );\n          }\n        }\n      });\n      // cast the new encrypted extra object into a string\n      dbToUpdate.masked_encrypted_extra = JSON.stringify(\n        additionalEncryptedExtra,\n      );\n      // this needs to be added by default to gsheets\n      if (dbToUpdate.engine === Engines.GSheet) {\n        dbToUpdate.impersonate_user = true;\n      }\n    }\n\n    if (dbToUpdate?.parameters?.catalog) {\n      // need to stringify gsheets catalog to allow it to be serialized\n      dbToUpdate.extra = JSON.stringify({\n        ...JSON.parse(dbToUpdate.extra || '{}'),\n        engine_params: {\n          catalog: dbToUpdate.parameters.catalog,\n        },\n      });\n    }\n\n    setLoading(true);\n    if (db?.id) {\n      const result = await updateResource(\n        db.id as number,\n        dbToUpdate as DatabaseObject,\n        dbToUpdate.configuration_method === CONFIGURATION_METHOD.DYNAMIC_FORM, // onShow toast on SQLA Forms\n      );\n      if (result) {\n        if (onDatabaseAdd) onDatabaseAdd();\n        dbConfigExtraExtension\n          ?.onSave(extraExtensionComponentState, db)\n          .then(({ error }: { error: any }) => {\n            if (error) {\n              dbConfigExtraExtensionOnSaveError = error;\n              addDangerToast(error);\n            }\n          });\n        if (dbConfigExtraExtensionOnSaveError) {\n          setLoading(false);\n          return;\n        }\n        if (!editNewDb) {\n          onClose();\n          addSuccessToast(t('Database settings updated'));\n        }\n      }\n    } else if (db) {\n      // Create\n      const dbId = await createResource(\n        dbToUpdate as DatabaseObject,\n        dbToUpdate.configuration_method === CONFIGURATION_METHOD.DYNAMIC_FORM, // onShow toast on SQLA Forms\n      );\n      if (dbId) {\n        setHasConnectedDb(true);\n        if (onDatabaseAdd) onDatabaseAdd();\n        dbConfigExtraExtension\n          ?.onSave(extraExtensionComponentState, db)\n          .then(({ error }: { error: any }) => {\n            if (error) {\n              dbConfigExtraExtensionOnSaveError = error;\n              addDangerToast(error);\n            }\n          });\n        if (dbConfigExtraExtensionOnSaveError) {\n          setLoading(false);\n          return;\n        }\n\n        if (useTabLayout) {\n          // tab layout only has one step\n          // so it should close immediately on save\n          onClose();\n          addSuccessToast(t('Database connected'));\n        }\n      }\n    } else {\n      // Import - doesn't use db state\n      setImportingModal(true);\n\n      if (!(fileList[0].originFileObj instanceof File)) {\n        return;\n      }\n\n      const dbId = await importResource(\n        fileList[0].originFileObj,\n        passwords,\n        sshTunnelPasswords,\n        sshTunnelPrivateKeys,\n        sshTunnelPrivateKeyPasswords,\n        confirmedOverwrite,\n      );\n      if (dbId) {\n        if (onDatabaseAdd) onDatabaseAdd();\n        onClose();\n        addSuccessToast(t('Database connected'));\n      }\n    }\n\n    setShowCTAbtns(true);\n    setEditNewDb(false);\n    setLoading(false);\n  };\n\n  // Initialize\n  const fetchDB = () => {\n    if (isEditMode && databaseId) {\n      if (!dbLoading) {\n        fetchResource(databaseId).catch(e =>\n          addDangerToast(\n            t(\n              'Sorry there was an error fetching database information: %s',\n              e.message,\n            ),\n          ),\n        );\n      }\n    }\n  };\n\n  const setDatabaseModel = (database_name: string) => {\n    if (database_name === 'Other') {\n      // Allow users to connect to DB via legacy SQLA form\n      setDB({\n        type: ActionType.dbSelected,\n        payload: {\n          database_name,\n          configuration_method: CONFIGURATION_METHOD.SQLALCHEMY_URI,\n          engine: undefined,\n          engine_information: {\n            supports_file_upload: true,\n          },\n        },\n      });\n    } else {\n      const selectedDbModel = availableDbs?.databases.filter(\n        (db: DatabaseObject) => db.name === database_name,\n      )[0];\n      const { engine, parameters, engine_information, default_driver } =\n        selectedDbModel;\n      const isDynamic = parameters !== undefined;\n      setDB({\n        type: ActionType.dbSelected,\n        payload: {\n          database_name,\n          engine,\n          configuration_method: isDynamic\n            ? CONFIGURATION_METHOD.DYNAMIC_FORM\n            : CONFIGURATION_METHOD.SQLALCHEMY_URI,\n          engine_information,\n          driver: default_driver,\n        },\n      });\n\n      if (engine === Engines.GSheet) {\n        // only create a catalog if the DB is Google Sheets\n        setDB({ type: ActionType.addTableCatalogSheet });\n      }\n    }\n  };\n\n  const renderAvailableSelector = () => (\n    <div className=\"available\">\n      <h4 className=\"available-label\">\n        {t('Or choose from a list of other databases we support:')}\n      </h4>\n      <div className=\"control-label\">{t('Supported databases')}</div>\n      <AntdSelect\n        className=\"available-select\"\n        onChange={setDatabaseModel}\n        placeholder={t('Choose a database...')}\n        showSearch\n      >\n        {[...(availableDbs?.databases || [])]\n          ?.sort((a: DatabaseForm, b: DatabaseForm) =>\n            a.name.localeCompare(b.name),\n          )\n          .map((database: DatabaseForm, index: number) => (\n            <AntdSelect.Option value={database.name} key={`database-${index}`}>\n              {database.name}\n            </AntdSelect.Option>\n          ))}\n        {/* Allow users to connect to DB via legacy SQLA form */}\n        <AntdSelect.Option value=\"Other\" key=\"Other\">\n          {t('Other')}\n        </AntdSelect.Option>\n      </AntdSelect>\n      <Alert\n        showIcon\n        closable={false}\n        css={(theme: SupersetTheme) => antDAlertStyles(theme)}\n        type=\"info\"\n        message={\n          connectionAlert?.ADD_DATABASE?.message ||\n          t('Want to add a new database?')\n        }\n        description={\n          connectionAlert?.ADD_DATABASE ? (\n            <>\n              {t(\n                'Any databases that allow connections via SQL Alchemy URIs can be added. ',\n              )}\n              <a\n                href={connectionAlert?.ADD_DATABASE.contact_link}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                {connectionAlert?.ADD_DATABASE.contact_description_link}\n              </a>{' '}\n              {connectionAlert?.ADD_DATABASE.description}\n            </>\n          ) : (\n            <>\n              {t(\n                'Any databases that allow connections via SQL Alchemy URIs can be added. Learn about how to connect a database driver ',\n              )}\n              <a\n                href={DOCUMENTATION_LINK}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                {t('here')}\n              </a>\n              .\n            </>\n          )\n        }\n      />\n    </div>\n  );\n\n  const renderPreferredSelector = () => (\n    <div className=\"preferred\">\n      {availableDbs?.databases\n        ?.filter((db: DatabaseForm) => db.preferred)\n        .map((database: DatabaseForm) => (\n          <IconButton\n            className=\"preferred-item\"\n            onClick={() => setDatabaseModel(database.name)}\n            buttonText={database.name}\n            icon={dbImages?.[database.engine]}\n            key={`${database.name}`}\n          />\n        ))}\n    </div>\n  );\n\n  const handleBackButtonOnFinish = () => {\n    if (dbFetched) {\n      fetchResource(dbFetched.id as number);\n    }\n    setShowCTAbtns(false);\n    setEditNewDb(true);\n  };\n\n  const handleBackButtonOnConnect = () => {\n    if (editNewDb) setHasConnectedDb(false);\n    if (importingModal) setImportingModal(false);\n    if (importErrored) {\n      setImportingModal(false);\n      setImportingErrorMessage('');\n      setPasswordFields([]);\n      setSSHTunnelPasswordFields([]);\n      setSSHTunnelPrivateKeyFields([]);\n      setSSHTunnelPrivateKeyPasswordFields([]);\n      setPasswords({});\n      setSSHTunnelPasswords({});\n      setSSHTunnelPrivateKeys({});\n      setSSHTunnelPrivateKeyPasswords({});\n    }\n    setDB({ type: ActionType.reset });\n    setFileList([]);\n  };\n\n  const handleDisableOnImport = () => {\n    if (\n      importLoading ||\n      (alreadyExists.length && !confirmedOverwrite) ||\n      (passwordsNeeded.length && JSON.stringify(passwords) === '{}') ||\n      (sshPasswordNeeded.length &&\n        JSON.stringify(sshTunnelPasswords) === '{}') ||\n      (sshPrivateKeyNeeded.length &&\n        JSON.stringify(sshTunnelPrivateKeys) === '{}') ||\n      (sshPrivateKeyPasswordNeeded.length &&\n        JSON.stringify(sshTunnelPrivateKeyPasswords) === '{}')\n    )\n      return true;\n    return false;\n  };\n\n  const renderModalFooter = () => {\n    if (db) {\n      // if db show back + connect\n      if (!hasConnectedDb || editNewDb) {\n        return (\n          <>\n            <StyledFooterButton key=\"back\" onClick={handleBackButtonOnConnect}>\n              {t('Back')}\n            </StyledFooterButton>\n            <StyledFooterButton\n              key=\"submit\"\n              buttonStyle=\"primary\"\n              onClick={onSave}\n              loading={isLoading}\n            >\n              {t('Connect')}\n            </StyledFooterButton>\n          </>\n        );\n      }\n\n      return (\n        <>\n          <StyledFooterButton key=\"back\" onClick={handleBackButtonOnFinish}>\n            {t('Back')}\n          </StyledFooterButton>\n          <StyledFooterButton\n            key=\"submit\"\n            buttonStyle=\"primary\"\n            onClick={onSave}\n            data-test=\"modal-confirm-button\"\n            loading={isLoading}\n          >\n            {t('Finish')}\n          </StyledFooterButton>\n        </>\n      );\n    }\n\n    // Import doesn't use db state, so footer will not render in the if statement above\n    if (importingModal) {\n      return (\n        <>\n          <StyledFooterButton key=\"back\" onClick={handleBackButtonOnConnect}>\n            {t('Back')}\n          </StyledFooterButton>\n          <StyledFooterButton\n            key=\"submit\"\n            buttonStyle=\"primary\"\n            onClick={onSave}\n            disabled={handleDisableOnImport()}\n            loading={isLoading}\n          >\n            {t('Connect')}\n          </StyledFooterButton>\n        </>\n      );\n    }\n\n    return <></>;\n  };\n\n  const renderEditModalFooter = (db: Partial<DatabaseObject> | null) => (\n    <>\n      <StyledFooterButton key=\"close\" onClick={onClose}>\n        {t('Close')}\n      </StyledFooterButton>\n      <StyledFooterButton\n        key=\"submit\"\n        buttonStyle=\"primary\"\n        onClick={onSave}\n        disabled={db?.is_managed_externally}\n        loading={isLoading}\n        tooltip={\n          db?.is_managed_externally\n            ? t(\n                \"This database is managed externally, and can't be edited in Superset\",\n              )\n            : ''\n        }\n      >\n        {t('Finish')}\n      </StyledFooterButton>\n    </>\n  );\n\n  const firstUpdate = useRef(true); // Captures first render\n  // Only runs when importing files don't need user input\n  useEffect(() => {\n    // Will not run on first render\n    if (firstUpdate.current) {\n      firstUpdate.current = false;\n      return;\n    }\n\n    if (\n      !importLoading &&\n      !alreadyExists.length &&\n      !passwordsNeeded.length &&\n      !sshPasswordNeeded.length &&\n      !sshPrivateKeyNeeded.length &&\n      !sshPrivateKeyPasswordNeeded.length &&\n      !isLoading && // This prevents a double toast for non-related imports\n      !importErrored // This prevents a success toast on error\n    ) {\n      onClose();\n      addSuccessToast(t('Database connected'));\n    }\n  }, [\n    alreadyExists,\n    passwordsNeeded,\n    importLoading,\n    importErrored,\n    sshPasswordNeeded,\n    sshPrivateKeyNeeded,\n    sshPrivateKeyPasswordNeeded,\n  ]);\n\n  useEffect(() => {\n    if (show) {\n      setTabKey(DEFAULT_TAB_KEY);\n      setLoading(true);\n      getAvailableDbs();\n    }\n    if (databaseId && show) {\n      fetchDB();\n    }\n  }, [show, databaseId]);\n\n  useEffect(() => {\n    if (dbFetched) {\n      setDB({\n        type: ActionType.fetched,\n        payload: dbFetched,\n      });\n      // keep a copy of the name separate for display purposes\n      // because it shouldn't change when the form is updated\n      setDbName(dbFetched.database_name);\n    }\n  }, [dbFetched]);\n\n  useEffect(() => {\n    if (isLoading) {\n      setLoading(false);\n    }\n\n    if (availableDbs && dbEngine) {\n      // set model if passed into props\n      setDatabaseModel(dbEngine);\n    }\n  }, [availableDbs]);\n\n  // This forces the modal to scroll until the importing filename is in view\n  useEffect(() => {\n    if (importingModal) {\n      document\n        .getElementsByClassName('ant-upload-list-item-name')[0]\n        .scrollIntoView();\n    }\n  }, [importingModal]);\n\n  useEffect(() => {\n    setPasswordFields([...passwordsNeeded]);\n  }, [passwordsNeeded]);\n\n  useEffect(() => {\n    setSSHTunnelPasswordFields([...sshPasswordNeeded]);\n  }, [sshPasswordNeeded]);\n\n  useEffect(() => {\n    setSSHTunnelPrivateKeyFields([...sshPrivateKeyNeeded]);\n  }, [sshPrivateKeyNeeded]);\n\n  useEffect(() => {\n    setSSHTunnelPrivateKeyPasswordFields([...sshPrivateKeyPasswordNeeded]);\n  }, [sshPrivateKeyPasswordNeeded]);\n\n  useEffect(() => {\n    if (db && isSSHTunneling) {\n      setUseSSHTunneling(!isEmpty(db?.ssh_tunnel));\n    }\n  }, [db, isSSHTunneling]);\n\n  const onDbImport = async (info: UploadChangeParam) => {\n    setImportingErrorMessage('');\n    setPasswordFields([]);\n    setSSHTunnelPasswordFields([]);\n    setSSHTunnelPrivateKeyFields([]);\n    setSSHTunnelPrivateKeyPasswordFields([]);\n    setPasswords({});\n    setSSHTunnelPasswords({});\n    setSSHTunnelPrivateKeys({});\n    setSSHTunnelPrivateKeyPasswords({});\n    setImportingModal(true);\n    setFileList([\n      {\n        ...info.file,\n        status: 'done',\n      },\n    ]);\n\n    if (!(info.file.originFileObj instanceof File)) return;\n    const dbId = await importResource(\n      info.file.originFileObj,\n      passwords,\n      sshTunnelPasswords,\n      sshTunnelPrivateKeys,\n      sshTunnelPrivateKeyPasswords,\n      confirmedOverwrite,\n    );\n    if (dbId) onDatabaseAdd?.();\n  };\n\n  const passwordNeededField = () => {\n    if (\n      !passwordFields.length &&\n      !sshTunnelPasswordFields.length &&\n      !sshTunnelPrivateKeyFields.length &&\n      !sshTunnelPrivateKeyPasswordFields.length\n    )\n      return null;\n\n    const files = [\n      ...new Set([\n        ...passwordFields,\n        ...sshTunnelPasswordFields,\n        ...sshTunnelPrivateKeyFields,\n        ...sshTunnelPrivateKeyPasswordFields,\n      ]),\n    ];\n\n    return files.map(database => (\n      <>\n        <StyledAlertMargin>\n          <Alert\n            closable={false}\n            css={(theme: SupersetTheme) => antDAlertStyles(theme)}\n            type=\"info\"\n            showIcon\n            message=\"Database passwords\"\n            description={t(\n              `The passwords for the databases below are needed in order to import them. Please note that the \"Secure Extra\" and \"Certificate\" sections of the database configuration are not present in explore files and should be added manually after the import if they are needed.`,\n            )}\n          />\n        </StyledAlertMargin>\n        {passwordFields?.indexOf(database) >= 0 && (\n          <ValidatedInput\n            id=\"password_needed\"\n            name=\"password_needed\"\n            required\n            value={passwords[database]}\n            onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n              setPasswords({ ...passwords, [database]: event.target.value })\n            }\n            validationMethods={{ onBlur: () => {} }}\n            errorMessage={validationErrors?.password_needed}\n            label={t('%s PASSWORD', database.slice(10))}\n            css={formScrollableStyles}\n          />\n        )}\n        {sshTunnelPasswordFields?.indexOf(database) >= 0 && (\n          <ValidatedInput\n            id=\"ssh_tunnel_password_needed\"\n            name=\"ssh_tunnel_password_needed\"\n            required\n            value={sshTunnelPasswords[database]}\n            onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n              setSSHTunnelPasswords({\n                ...sshTunnelPasswords,\n                [database]: event.target.value,\n              })\n            }\n            validationMethods={{ onBlur: () => {} }}\n            errorMessage={validationErrors?.ssh_tunnel_password_needed}\n            label={t('%s SSH TUNNEL PASSWORD', database.slice(10))}\n            css={formScrollableStyles}\n          />\n        )}\n        {sshTunnelPrivateKeyFields?.indexOf(database) >= 0 && (\n          <ValidatedInput\n            id=\"ssh_tunnel_private_key_needed\"\n            name=\"ssh_tunnel_private_key_needed\"\n            required\n            value={sshTunnelPrivateKeys[database]}\n            onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n              setSSHTunnelPrivateKeys({\n                ...sshTunnelPrivateKeys,\n                [database]: event.target.value,\n              })\n            }\n            validationMethods={{ onBlur: () => {} }}\n            errorMessage={validationErrors?.ssh_tunnel_private_key_needed}\n            label={t('%s SSH TUNNEL PRIVATE KEY', database.slice(10))}\n            css={formScrollableStyles}\n          />\n        )}\n        {sshTunnelPrivateKeyPasswordFields?.indexOf(database) >= 0 && (\n          <ValidatedInput\n            id=\"ssh_tunnel_private_key_password_needed\"\n            name=\"ssh_tunnel_private_key_password_needed\"\n            required\n            value={sshTunnelPrivateKeyPasswords[database]}\n            onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n              setSSHTunnelPrivateKeyPasswords({\n                ...sshTunnelPrivateKeyPasswords,\n                [database]: event.target.value,\n              })\n            }\n            validationMethods={{ onBlur: () => {} }}\n            errorMessage={\n              validationErrors?.ssh_tunnel_private_key_password_needed\n            }\n            label={t('%s SSH TUNNEL PRIVATE KEY PASSWORD', database.slice(10))}\n            css={formScrollableStyles}\n          />\n        )}\n      </>\n    ));\n  };\n\n  const importingErrorAlert = () => {\n    if (!importingErrorMessage) return null;\n\n    return (\n      <StyledAlertMargin>\n        <ErrorAlert\n          errorMessage={importingErrorMessage}\n          showDbInstallInstructions={passwordFields.length > 0}\n        />\n      </StyledAlertMargin>\n    );\n  };\n\n  const confirmOverwrite = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const targetValue = (event.currentTarget?.value as string) ?? '';\n    setConfirmedOverwrite(targetValue.toUpperCase() === t('OVERWRITE'));\n  };\n\n  const confirmOverwriteField = () => {\n    if (!alreadyExists.length) return null;\n\n    return (\n      <>\n        <StyledAlertMargin>\n          <Alert\n            closable={false}\n            css={(theme: SupersetTheme) => antdWarningAlertStyles(theme)}\n            type=\"warning\"\n            showIcon\n            message=\"\"\n            description={t(\n              'You are importing one or more databases that already exist. Overwriting might cause you to lose some of your work. Are you sure you want to overwrite?',\n            )}\n          />\n        </StyledAlertMargin>\n        <ValidatedInput\n          id=\"confirm_overwrite\"\n          name=\"confirm_overwrite\"\n          required\n          validationMethods={{ onBlur: () => {} }}\n          errorMessage={validationErrors?.confirm_overwrite}\n          label={t('Type \"%s\" to confirm', t('OVERWRITE'))}\n          onChange={confirmOverwrite}\n          css={formScrollableStyles}\n        />\n      </>\n    );\n  };\n\n  const tabChange = (key: string) => setTabKey(key);\n\n  const renderStepTwoAlert = () => {\n    const { hostname } = window.location;\n    let ipAlert = connectionAlert?.REGIONAL_IPS?.default || '';\n    const regionalIPs = connectionAlert?.REGIONAL_IPS || {};\n    Object.entries(regionalIPs).forEach(([ipRegion, ipRange]) => {\n      const regex = new RegExp(ipRegion);\n      if (hostname.match(regex)) ipAlert = ipRange;\n    });\n    return (\n      db?.engine && (\n        <StyledAlertMargin>\n          <Alert\n            closable={false}\n            css={(theme: SupersetTheme) => antDAlertStyles(theme)}\n            type=\"info\"\n            showIcon\n            message={\n              engineSpecificAlertMapping[db.engine]?.message ||\n              connectionAlert?.DEFAULT?.message\n            }\n            description={\n              engineSpecificAlertMapping[db.engine]?.description ||\n              connectionAlert?.DEFAULT?.description + ipAlert\n            }\n          />\n        </StyledAlertMargin>\n      )\n    );\n  };\n\n  // eslint-disable-next-line consistent-return\n  const errorAlert = () => {\n    let alertErrors: string[] = [];\n    if (!isEmpty(dbErrors)) {\n      alertErrors =\n        typeof dbErrors === 'object'\n          ? Object.values(dbErrors)\n          : typeof dbErrors === 'string'\n          ? [dbErrors]\n          : [];\n    } else if (\n      !isEmpty(validationErrors) &&\n      validationErrors?.error_type === 'GENERIC_DB_ENGINE_ERROR'\n    ) {\n      alertErrors = [\n        validationErrors?.description || validationErrors?.message,\n      ];\n    }\n    if (alertErrors.length) {\n      return (\n        <ErrorAlertContainer>\n          <ErrorMessageWithStackTrace\n            title={t('Database Creation Error')}\n            description={t(\n              'We are unable to connect to your database. Click \"See more\" for database-provided information that may help troubleshoot the issue.',\n            )}\n            subtitle={alertErrors?.[0] || validationErrors?.description}\n            copyText={validationErrors?.description}\n          />\n        </ErrorAlertContainer>\n      );\n    }\n    return <></>;\n  };\n\n  const fetchAndSetDB = () => {\n    setLoading(true);\n    fetchResource(dbFetched?.id as number).then(r => {\n      setItem(LocalStorageKeys.db, r);\n    });\n  };\n\n  const renderSSHTunnelForm = () => (\n    <SSHTunnelForm\n      db={db as DatabaseObject}\n      onSSHTunnelParametersChange={({\n        target,\n      }: {\n        target: HTMLInputElement | HTMLTextAreaElement;\n      }) =>\n        onChange(ActionType.parametersSSHTunnelChange, {\n          type: target.type,\n          name: target.name,\n          value: target.value,\n        })\n      }\n      setSSHTunnelLoginMethod={(method: AuthType) =>\n        setDB({\n          type: ActionType.setSSHTunnelLoginMethod,\n          payload: { login_method: method },\n        })\n      }\n    />\n  );\n\n  const renderCTABtns = () => (\n    <StyledBtns>\n      <Button\n        buttonStyle=\"secondary\"\n        onClick={() => {\n          setLoading(true);\n          fetchAndSetDB();\n          redirectURL('/dataset/add/');\n        }}\n      >\n        {t('CREATE DATASET')}\n      </Button>\n      <Button\n        buttonStyle=\"secondary\"\n        onClick={() => {\n          setLoading(true);\n          fetchAndSetDB();\n          redirectURL(`/superset/sqllab/?db=true`);\n        }}\n      >\n        {t('QUERY DATA IN SQL LAB')}\n      </Button>\n    </StyledBtns>\n  );\n\n  const renderDatabaseConnectionForm = () => (\n    <>\n      <DatabaseConnectionForm\n        isEditMode={isEditMode}\n        db={db as DatabaseObject}\n        sslForced={false}\n        dbModel={dbModel}\n        onAddTableCatalog={() => {\n          setDB({ type: ActionType.addTableCatalogSheet });\n        }}\n        onQueryChange={({ target }: { target: HTMLInputElement }) =>\n          onChange(ActionType.queryChange, {\n            name: target.name,\n            value: target.value,\n          })\n        }\n        onExtraInputChange={({ target }: { target: HTMLInputElement }) =>\n          onChange(ActionType.extraInputChange, {\n            name: target.name,\n            value: target.value,\n          })\n        }\n        onRemoveTableCatalog={(idx: number) => {\n          setDB({\n            type: ActionType.removeTableCatalogSheet,\n            payload: { indexToDelete: idx },\n          });\n        }}\n        onParametersChange={({ target }: { target: HTMLInputElement }) =>\n          onChange(ActionType.parametersChange, {\n            type: target.type,\n            name: target.name,\n            checked: target.checked,\n            value: target.value,\n          })\n        }\n        onChange={({ target }: { target: HTMLInputElement }) =>\n          onChange(ActionType.textChange, {\n            name: target.name,\n            value: target.value,\n          })\n        }\n        getValidation={() => getValidation(db)}\n        validationErrors={validationErrors}\n        getPlaceholder={getPlaceholder}\n        clearValidationErrors={() => setValidationErrors(null)}\n      />\n      {db?.parameters?.ssh && (\n        <SSHTunnelContainer>{renderSSHTunnelForm()}</SSHTunnelContainer>\n      )}\n    </>\n  );\n\n  const renderFinishState = () => {\n    if (!editNewDb) {\n      return (\n        <ExtraOptions\n          extraExtension={dbConfigExtraExtension}\n          db={db as DatabaseObject}\n          onInputChange={({ target }: { target: HTMLInputElement }) =>\n            onChange(ActionType.inputChange, {\n              type: target.type,\n              name: target.name,\n              checked: target.checked,\n              value: target.value,\n            })\n          }\n          onTextChange={({ target }: { target: HTMLTextAreaElement }) =>\n            onChange(ActionType.textChange, {\n              name: target.name,\n              value: target.value,\n            })\n          }\n          onEditorChange={(payload: { name: string; json: any }) =>\n            onChange(ActionType.editorChange, payload)\n          }\n          onExtraInputChange={({ target }: { target: HTMLInputElement }) => {\n            onChange(ActionType.extraInputChange, {\n              type: target.type,\n              name: target.name,\n              checked: target.checked,\n              value: target.value,\n            });\n          }}\n          onExtraEditorChange={(payload: { name: string; json: any }) =>\n            onChange(ActionType.extraEditorChange, payload)\n          }\n        />\n      );\n    }\n    return renderDatabaseConnectionForm();\n  };\n\n  if (\n    fileList.length > 0 &&\n    (alreadyExists.length ||\n      passwordFields.length ||\n      sshTunnelPasswordFields.length ||\n      sshTunnelPrivateKeyFields.length ||\n      sshTunnelPrivateKeyPasswordFields.length)\n  ) {\n    return (\n      <Modal\n        css={(theme: SupersetTheme) => [\n          antDModalNoPaddingStyles,\n          antDModalStyles(theme),\n          formHelperStyles(theme),\n          formStyles(theme),\n        ]}\n        name=\"database\"\n        onHandledPrimaryAction={onSave}\n        onHide={onClose}\n        primaryButtonName={t('Connect')}\n        width=\"500px\"\n        centered\n        show={show}\n        title={<h4>{t('Connect a database')}</h4>}\n        footer={renderModalFooter()}\n      >\n        <ModalHeader\n          isLoading={isLoading}\n          isEditMode={isEditMode}\n          useSqlAlchemyForm={useSqlAlchemyForm}\n          hasConnectedDb={hasConnectedDb}\n          db={db}\n          dbName={dbName}\n          dbModel={dbModel}\n          fileList={fileList}\n        />\n        {passwordNeededField()}\n        {confirmOverwriteField()}\n        {importingErrorAlert()}\n      </Modal>\n    );\n  }\n  const modalFooter = isEditMode\n    ? renderEditModalFooter(db)\n    : renderModalFooter();\n  return useTabLayout ? (\n    <Modal\n      css={(theme: SupersetTheme) => [\n        antDTabsStyles,\n        antDModalNoPaddingStyles,\n        antDModalStyles(theme),\n        formHelperStyles(theme),\n        formStyles(theme),\n      ]}\n      name=\"database\"\n      data-test=\"database-modal\"\n      onHandledPrimaryAction={onSave}\n      onHide={onClose}\n      primaryButtonName={isEditMode ? t('Save') : t('Connect')}\n      width=\"500px\"\n      centered\n      show={show}\n      title={\n        <h4>{isEditMode ? t('Edit database') : t('Connect a database')}</h4>\n      }\n      footer={modalFooter}\n    >\n      <StyledStickyHeader>\n        <TabHeader>\n          <ModalHeader\n            isLoading={isLoading}\n            isEditMode={isEditMode}\n            useSqlAlchemyForm={useSqlAlchemyForm}\n            hasConnectedDb={hasConnectedDb}\n            db={db}\n            dbName={dbName}\n            dbModel={dbModel}\n          />\n        </TabHeader>\n      </StyledStickyHeader>\n      <TabsStyled\n        defaultActiveKey={DEFAULT_TAB_KEY}\n        activeKey={tabKey}\n        onTabClick={tabChange}\n        animated={{ inkBar: true, tabPane: true }}\n      >\n        <Tabs.TabPane tab={<span>{t('Basic')}</span>} key=\"1\">\n          {useSqlAlchemyForm ? (\n            <StyledAlignment>\n              <SqlAlchemyForm\n                db={db as DatabaseObject}\n                onInputChange={({ target }: { target: HTMLInputElement }) =>\n                  onChange(ActionType.inputChange, {\n                    type: target.type,\n                    name: target.name,\n                    checked: target.checked,\n                    value: target.value,\n                  })\n                }\n                conf={conf}\n                testConnection={testConnection}\n                testInProgress={testInProgress}\n              >\n                <SSHTunnelSwitchComponent\n                  isEditMode={isEditMode}\n                  dbFetched={dbFetched}\n                  disableSSHTunnelingForEngine={disableSSHTunnelingForEngine}\n                  useSSHTunneling={useSSHTunneling}\n                  setUseSSHTunneling={setUseSSHTunneling}\n                  setDB={setDB}\n                  isSSHTunneling={isSSHTunneling}\n                />\n                {useSSHTunneling && renderSSHTunnelForm()}\n              </SqlAlchemyForm>\n              {isDynamic(db?.backend || db?.engine) && !isEditMode && (\n                <div css={(theme: SupersetTheme) => infoTooltip(theme)}>\n                  <Button\n                    buttonStyle=\"link\"\n                    onClick={() =>\n                      setDB({\n                        type: ActionType.configMethodChange,\n                        payload: {\n                          database_name: db?.database_name,\n                          configuration_method:\n                            CONFIGURATION_METHOD.DYNAMIC_FORM,\n                          engine: db?.engine,\n                        },\n                      })\n                    }\n                    css={theme => alchemyButtonLinkStyles(theme)}\n                  >\n                    {t('Connect this database using the dynamic form instead')}\n                  </Button>\n                  <InfoTooltip\n                    tooltip={t(\n                      'Click this link to switch to an alternate form that exposes only the required fields needed to connect this database.',\n                    )}\n                    viewBox=\"0 -6 24 24\"\n                  />\n                </div>\n              )}\n            </StyledAlignment>\n          ) : (\n            renderDatabaseConnectionForm()\n          )}\n          {!isEditMode && (\n            <StyledAlertMargin>\n              <Alert\n                closable={false}\n                css={(theme: SupersetTheme) => antDAlertStyles(theme)}\n                message={t('Additional fields may be required')}\n                showIcon\n                description={\n                  <>\n                    {t(\n                      'Select databases require additional fields to be completed in the Advanced tab to successfully connect the database. Learn what requirements your databases has ',\n                    )}\n                    <a\n                      href={DOCUMENTATION_LINK}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"additional-fields-alert-description\"\n                    >\n                      {t('here')}\n                    </a>\n                    .\n                  </>\n                }\n                type=\"info\"\n              />\n            </StyledAlertMargin>\n          )}\n          {showDBError && errorAlert()}\n        </Tabs.TabPane>\n        <Tabs.TabPane tab={<span>{t('Advanced')}</span>} key=\"2\">\n          <ExtraOptions\n            extraExtension={dbConfigExtraExtension}\n            db={db as DatabaseObject}\n            onInputChange={({ target }: { target: HTMLInputElement }) =>\n              onChange(ActionType.inputChange, {\n                type: target.type,\n                name: target.name,\n                checked: target.checked,\n                value: target.value,\n              })\n            }\n            onTextChange={({ target }: { target: HTMLTextAreaElement }) =>\n              onChange(ActionType.textChange, {\n                name: target.name,\n                value: target.value,\n              })\n            }\n            onEditorChange={(payload: { name: string; json: any }) =>\n              onChange(ActionType.editorChange, payload)\n            }\n            onExtraInputChange={({ target }: { target: HTMLInputElement }) => {\n              onChange(ActionType.extraInputChange, {\n                type: target.type,\n                name: target.name,\n                checked: target.checked,\n                value: target.value,\n              });\n            }}\n            onExtraEditorChange={(payload: { name: string; json: any }) => {\n              onChange(ActionType.extraEditorChange, payload);\n            }}\n          />\n        </Tabs.TabPane>\n      </TabsStyled>\n    </Modal>\n  ) : (\n    <Modal\n      css={(theme: SupersetTheme) => [\n        antDModalNoPaddingStyles,\n        antDModalStyles(theme),\n        formHelperStyles(theme),\n        formStyles(theme),\n      ]}\n      name=\"database\"\n      onHandledPrimaryAction={onSave}\n      onHide={onClose}\n      primaryButtonName={hasConnectedDb ? t('Finish') : t('Connect')}\n      width=\"500px\"\n      centered\n      show={show}\n      title={<h4>{t('Connect a database')}</h4>}\n      footer={renderModalFooter()}\n    >\n      {!isLoading && hasConnectedDb ? (\n        <>\n          <ModalHeader\n            isLoading={isLoading}\n            isEditMode={isEditMode}\n            useSqlAlchemyForm={useSqlAlchemyForm}\n            hasConnectedDb={hasConnectedDb}\n            db={db}\n            dbName={dbName}\n            dbModel={dbModel}\n            editNewDb={editNewDb}\n          />\n          {showCTAbtns && renderCTABtns()}\n          {renderFinishState()}\n        </>\n      ) : (\n        <>\n          {/* Dynamic Form Step 1 */}\n          {!isLoading &&\n            (!db ? (\n              <SelectDatabaseStyles>\n                <ModalHeader\n                  isLoading={isLoading}\n                  isEditMode={isEditMode}\n                  useSqlAlchemyForm={useSqlAlchemyForm}\n                  hasConnectedDb={hasConnectedDb}\n                  db={db}\n                  dbName={dbName}\n                  dbModel={dbModel}\n                />\n                {renderPreferredSelector()}\n                {renderAvailableSelector()}\n                <StyledUploadWrapper>\n                  <Upload\n                    name=\"databaseFile\"\n                    id=\"databaseFile\"\n                    data-test=\"database-file-input\"\n                    accept=\".yaml,.json,.yml,.zip\"\n                    customRequest={() => {}}\n                    onChange={onDbImport}\n                    onRemove={removeFile}\n                  >\n                    <Button\n                      data-test=\"import-database-btn\"\n                      buttonStyle=\"link\"\n                      type=\"link\"\n                      css={importDbButtonLinkStyles}\n                    >\n                      {t('Import database from file')}\n                    </Button>\n                  </Upload>\n                </StyledUploadWrapper>\n                {importingErrorAlert()}\n              </SelectDatabaseStyles>\n            ) : (\n              <>\n                <ModalHeader\n                  isLoading={isLoading}\n                  isEditMode={isEditMode}\n                  useSqlAlchemyForm={useSqlAlchemyForm}\n                  hasConnectedDb={hasConnectedDb}\n                  db={db}\n                  dbName={dbName}\n                  dbModel={dbModel}\n                />\n                {hasAlert && renderStepTwoAlert()}\n                {renderDatabaseConnectionForm()}\n                <div css={(theme: SupersetTheme) => infoTooltip(theme)}>\n                  {dbModel.engine !== Engines.GSheet && (\n                    <>\n                      <Button\n                        data-test=\"sqla-connect-btn\"\n                        buttonStyle=\"link\"\n                        onClick={() =>\n                          setDB({\n                            type: ActionType.configMethodChange,\n                            payload: {\n                              engine: db.engine,\n                              configuration_method:\n                                CONFIGURATION_METHOD.SQLALCHEMY_URI,\n                              database_name: db.database_name,\n                            },\n                          })\n                        }\n                        css={buttonLinkStyles}\n                      >\n                        {t(\n                          'Connect this database with a SQLAlchemy URI string instead',\n                        )}\n                      </Button>\n                      <InfoTooltip\n                        tooltip={t(\n                          'Click this link to switch to an alternate form that allows you to input the SQLAlchemy URL for this database manually.',\n                        )}\n                        viewBox=\"0 -6 24 24\"\n                      />\n                    </>\n                  )}\n                </div>\n                {/* Step 2 */}\n                {showDBError && errorAlert()}\n              </>\n            ))}\n        </>\n      )}\n      {isLoading && <Loading />}\n    </Modal>\n  );\n};\n\nexport default withToasts(DatabaseModal);\n"]},"metadata":{},"sourceType":"module"}