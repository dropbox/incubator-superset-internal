{"ast":null,"code":"import { OVERWRITE_INSPECT_FIELDS } from 'src/dashboard/constants';\nconst JSON_KEYS = new Set(['json_metadata', 'position_json']);\nfunction extractValue(object, keyPath) {\n  return keyPath.split('.').reduce((obj, key) => {\n    const value = obj == null ? void 0 : obj[key];\n    return JSON_KEYS.has(key) && value ? JSON.parse(value) : value;\n  }, object);\n}\nexport default function getOverwriteItems(prev, next) {\n  return OVERWRITE_INSPECT_FIELDS.map((keyPath) => ({\n    keyPath,\n    ...(keyPath.split('.').find((key) => JSON_KEYS.has(key)) ?\n    {\n      oldValue: JSON.stringify(extractValue(prev, keyPath), null, 2) || '{}',\n      newValue: JSON.stringify(extractValue(next, keyPath), null, 2) || '{}' } :\n\n    {\n      oldValue: extractValue(prev, keyPath) || '',\n      newValue: extractValue(next, keyPath) || '' }) })).\n\n  filter((_ref) => {let { oldValue, newValue } = _ref;return oldValue !== newValue;});\n}","map":{"version":3,"mappings":"AAmBA,SAASA,wBAAT,QAAyC,yBAAzC;AAEA,MAAMC,SAAS,GAAG,IAAIC,GAAJ,CAAQ,CAAC,eAAD,EAAkB,eAAlB,CAAR,CAAlB;AAEA,SAASC,YAAT,CAAsBC,MAAtB,EAA0CC,OAA1C,EAAyD;EACvD,OAAOA,OAAO,CAACC,KAAR,CAAc,GAAd,EAAmBC,MAAnB,CAA0B,CAACC,GAAD,EAAkBC,GAAlB,KAAiC;IAChE,MAAMC,KAAK,GAAGF,GAAH,oBAAGA,GAAG,CAAGC,GAAH,CAAjB;IACA,OAAOR,SAAS,CAACU,GAAV,CAAcF,GAAd,KAAsBC,KAAtB,GAA8BE,IAAI,CAACC,KAAL,CAAWH,KAAX,CAA9B,GAAkDA,KAAzD;EACD,CAHM,EAGJN,MAHI,CAAP;AAID;AAED,eAAc,SAAUU,iBAAV,CAA4BC,IAA5B,EAA8CC,IAA9C,EAA8D;EAC1E,OAAOhB,wBAAwB,CAACiB,GAAzB,CAA6B,QAAO,MAAK;IAC9CZ,OAD8C;IAE9C,IAAIA,OAAO,CAACC,KAAR,CAAc,GAAd,EAAmBY,IAAnB,CAAwB,IAAG,KAAIjB,SAAS,CAACU,GAAV,CAAcF,GAAd,CAA/B;IACA;MACEU,QAAQ,EACNP,IAAI,CAACQ,SAAL,CAAejB,YAAY,CAACY,IAAD,EAAOV,OAAP,CAA3B,EAA4C,IAA5C,EAAkD,CAAlD,KAAwD,IAF5D;MAGEgB,QAAQ,EACNT,IAAI,CAACQ,SAAL,CAAejB,YAAY,CAACa,IAAD,EAAOX,OAAP,CAA3B,EAA4C,IAA5C,EAAkD,CAAlD,KAAwD,IAJ5D,EADA;;IAOA;MACEc,QAAQ,EAAEhB,YAAY,CAACY,IAAD,EAAOV,OAAP,CAAZ,IAA+B,EAD3C;MAEEgB,QAAQ,EAAElB,YAAY,CAACa,IAAD,EAAOX,OAAP,CAAZ,IAA+B,EAF3C,EAPJ,CAF8C,EAAL,CAApC;;EAaHiB,MAbG,CAaI,eAAC,EAAEH,QAAF,EAAYE,QAAZ,EAAD,eAA4BF,QAAQ,KAAKE,QAAzC,EAbJ,CAAP;AAcD","names":["OVERWRITE_INSPECT_FIELDS","JSON_KEYS","Set","extractValue","object","keyPath","split","reduce","obj","key","value","has","JSON","parse","getOverwriteItems","prev","next","map","find","oldValue","stringify","newValue","filter"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/dashboard/util/getOverwriteItems.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { JsonObject } from '@superset-ui/core';\nimport { OVERWRITE_INSPECT_FIELDS } from 'src/dashboard/constants';\n\nconst JSON_KEYS = new Set(['json_metadata', 'position_json']);\n\nfunction extractValue(object: JsonObject, keyPath: string) {\n  return keyPath.split('.').reduce((obj: JsonObject, key: string) => {\n    const value = obj?.[key];\n    return JSON_KEYS.has(key) && value ? JSON.parse(value) : value;\n  }, object);\n}\n\nexport default function getOverwriteItems(prev: JsonObject, next: JsonObject) {\n  return OVERWRITE_INSPECT_FIELDS.map(keyPath => ({\n    keyPath,\n    ...(keyPath.split('.').find(key => JSON_KEYS.has(key))\n      ? {\n          oldValue:\n            JSON.stringify(extractValue(prev, keyPath), null, 2) || '{}',\n          newValue:\n            JSON.stringify(extractValue(next, keyPath), null, 2) || '{}',\n        }\n      : {\n          oldValue: extractValue(prev, keyPath) || '',\n          newValue: extractValue(next, keyPath) || '',\n        }),\n  })).filter(({ oldValue, newValue }) => oldValue !== newValue);\n}\n"]},"metadata":{},"sourceType":"module"}