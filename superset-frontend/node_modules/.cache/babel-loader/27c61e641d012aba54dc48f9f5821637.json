{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useRef, useState } from 'react';\nimport AntdIcon from '@ant-design/icons';\nimport { styled } from '@superset-ui/core';\nimport TransparentIcon from 'src/assets/images/icons/transparent.svg';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst AntdIconComponent = (_ref) => {let {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    iconColor,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    iconSize, viewBox, ...rest } = _ref;return ___EmotionJSX(AntdIcon, _extends({ viewBox: viewBox || '0 0 24 24' }, rest));};\nexport const StyledIcon = styled(AntdIconComponent)`\n  ${(_ref2) => {let { iconColor } = _ref2;return iconColor && `color: ${iconColor};`;}};\n  font-size: ${(_ref3) => {let { iconSize, theme } = _ref3;return iconSize ?\n  `${theme.typography.sizes[iconSize] || theme.typography.sizes.m}px` :\n  '24px';}};\n`;\nexport const Icon = (props) => {\n  const { fileName, ...iconProps } = props;\n  const [, setLoaded] = useState(false);\n  const ImportedSVG = useRef();\n  const name = fileName.replace('_', '-');\n  useEffect(() => {\n    let cancelled = false;\n    async function importIcon() {\n      ImportedSVG.current = (await import(`!!@svgr/webpack?-svgo,+titleProp,+ref!src/assets/images/icons/${fileName}.svg`)).default;\n      if (!cancelled) {\n        setLoaded(true);\n      }\n    }\n    importIcon();\n    return () => {\n      cancelled = true;\n    };\n  }, [fileName, ImportedSVG]);\n  return ___EmotionJSX(StyledIcon, _extends({ component: ImportedSVG.current || TransparentIcon, \"aria-label\": name }, iconProps));\n};\nexport default Icon;","map":{"version":3,"mappings":"+DAAA;;;;;;;;;;;;;;;;;;AAmBA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,OAAOC,eAAP,MAA4B,yCAA5B,C;AAGA,MAAMC,iBAAiB,GAAG,eAAC;IACzB;IACAC,SAFyB;IAGzB;IACAC,QAJyB,EAKzBC,OALyB,EAMzB,GAAGC,IANsB,EAAD,eAQxB,cAAC,QAAD,aAAU,OAAO,EAAED,OAAO,IAAI,WAA9B,IAA+CC,IAA/C,EARwB,EAA1B;AAWA,OAAO,MAAMC,UAAU,GAAGP,MAAM,CAACE,iBAAD,CAA6B;IACzD,gBAAC,EAAEC,SAAF,EAAD,gBAAmBA,SAAS,IAAI,UAAUA,SAAS,GAAnD,EAAsD;eAC3C,gBAAC,EAAEC,QAAF,EAAYI,KAAZ,EAAD,gBACXJ,QAAQ;EACJ,GAAGI,KAAK,CAACC,UAAN,CAAiBC,KAAjB,CAAuBN,QAAvB,KAAoCI,KAAK,CAACC,UAAN,CAAiBC,KAAjB,CAAuBC,CAAC,IAD3D;EAEJ,MAHO,EAGD;CALP;AAYP,OAAO,MAAMC,IAAI,GAAG,CAACC,KAAD,KAAqB;EACvC,MAAM,EAAEC,QAAF,EAAY,GAAGC,SAAf,KAA6BF,KAAnC;EACA,MAAM,GAAGG,SAAH,IAAgBlB,QAAQ,CAAC,KAAD,CAA9B;EACA,MAAMmB,WAAW,GAAGpB,MAAM,EAA1B;EACA,MAAMqB,IAAI,GAAGJ,QAAQ,CAACK,OAAT,CAAiB,GAAjB,EAAsB,GAAtB,CAAb;EAEAvB,SAAS,CAAC,MAAK;IACb,IAAIwB,SAAS,GAAG,KAAhB;IACA,eAAeC,UAAf,GAAyB;MACvBJ,WAAW,CAACK,OAAZ,GAAsB,CACpB,MAAM,OACJ,iEAAiER,QAAQ,MADrE,CADc,EAIpBS,OAJF;MAKA,IAAI,CAACH,SAAL,EAAgB;QACdJ,SAAS,CAAC,IAAD,CAAT;MACD;IACF;IACDK,UAAU;IACV,OAAO,MAAK;MACVD,SAAS,GAAG,IAAZ;IACD,CAFD;EAGD,CAhBQ,EAgBN,CAACN,QAAD,EAAWG,WAAX,CAhBM,CAAT;EAkBA,OACE,cAAC,UAAD,aACE,SAAS,EAAEA,WAAW,CAACK,OAAZ,IAAuBrB,eADpC,EAEE,cAAYiB,IAFd,IAGMH,SAHN,EADF;AAOD,CA/BM;AAiCP,eAAeH,IAAf","names":["React","useEffect","useRef","useState","AntdIcon","styled","TransparentIcon","AntdIconComponent","iconColor","iconSize","viewBox","rest","StyledIcon","theme","typography","sizes","m","Icon","props","fileName","iconProps","setLoaded","ImportedSVG","name","replace","cancelled","importIcon","current","default"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/Icons/Icon.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport AntdIcon from '@ant-design/icons';\nimport { styled } from '@superset-ui/core';\nimport TransparentIcon from 'src/assets/images/icons/transparent.svg';\nimport IconType from './IconType';\n\nconst AntdIconComponent = ({\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  iconColor,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  iconSize,\n  viewBox,\n  ...rest\n}: Omit<IconType, 'ref' | 'css'>) => (\n  <AntdIcon viewBox={viewBox || '0 0 24 24'} {...rest} />\n);\n\nexport const StyledIcon = styled(AntdIconComponent)<IconType>`\n  ${({ iconColor }) => iconColor && `color: ${iconColor};`};\n  font-size: ${({ iconSize, theme }) =>\n    iconSize\n      ? `${theme.typography.sizes[iconSize] || theme.typography.sizes.m}px`\n      : '24px'};\n`;\n\nexport interface IconProps extends IconType {\n  fileName: string;\n}\n\nexport const Icon = (props: IconProps) => {\n  const { fileName, ...iconProps } = props;\n  const [, setLoaded] = useState(false);\n  const ImportedSVG = useRef<React.FC<React.SVGProps<SVGSVGElement>>>();\n  const name = fileName.replace('_', '-');\n\n  useEffect(() => {\n    let cancelled = false;\n    async function importIcon(): Promise<void> {\n      ImportedSVG.current = (\n        await import(\n          `!!@svgr/webpack?-svgo,+titleProp,+ref!src/assets/images/icons/${fileName}.svg`\n        )\n      ).default;\n      if (!cancelled) {\n        setLoaded(true);\n      }\n    }\n    importIcon();\n    return () => {\n      cancelled = true;\n    };\n  }, [fileName, ImportedSVG]);\n\n  return (\n    <StyledIcon\n      component={ImportedSVG.current || TransparentIcon}\n      aria-label={name}\n      {...iconProps}\n    />\n  );\n};\n\nexport default Icon;\n"]},"metadata":{},"sourceType":"module"}