{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { css } from '@superset-ui/core';\nimport React, { useRef, useState } from 'react';\nimport { Tooltip } from 'src/components/Tooltip';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport default function ColorSchemeLabel(props) {\n  const { id, label, colors } = props;\n  const [showTooltip, setShowTooltip] = useState(false);\n  const labelNameRef = useRef(null);\n  const labelColorsRef = useRef(null);\n  const handleShowTooltip = () => {\n    const labelNameElement = labelNameRef.current;\n    const labelColorsElement = labelColorsRef.current;\n    if (labelNameElement &&\n    labelColorsElement && (\n    labelNameElement.scrollWidth > labelNameElement.offsetWidth ||\n    labelNameElement.scrollHeight > labelNameElement.offsetHeight ||\n    labelColorsElement.scrollWidth > labelColorsElement.offsetWidth ||\n    labelColorsElement.scrollHeight > labelColorsElement.offsetHeight)) {\n      setShowTooltip(true);\n    }\n  };\n  const handleHideTooltip = () => {\n    setShowTooltip(false);\n  };\n  const colorsList = () => colors.map((color, i) => ___EmotionJSX(\"span\", { key: `${id}-${i}`, css: (theme) => css`\n          padding-left: ${theme.gridUnit / 2}px;\n          :before {\n            content: '';\n            display: inline-block;\n            background-color: ${color};\n            border: 1px solid ${color === 'white' ? 'black' : color};\n            width: 9px;\n            height: 10px;\n          }\n        ` }));\n  const tooltipContent = () => ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(\"span\", null, label),\n  ___EmotionJSX(\"div\", null, colorsList()));\n\n  return ___EmotionJSX(Tooltip, { \"data-testid\": \"tooltip\", overlayClassName: \"color-scheme-tooltip\", title: tooltipContent, key: id, visible: showTooltip },\n  ___EmotionJSX(\"span\", { className: \"color-scheme-option\", onMouseEnter: handleShowTooltip, onMouseLeave: handleHideTooltip, css: css`\n          display: flex;\n          align-items: center;\n          justify-content: flex-start;\n        ` },\n  ___EmotionJSX(\"span\", { className: \"color-scheme-label\", ref: labelNameRef, css: (theme) => css`\n            min-width: 125px;\n            padding-right: ${theme.gridUnit * 2}px;\n            text-overflow: ellipsis;\n            overflow: hidden;\n            white-space: nowrap;\n          ` },\n  label),\n\n  ___EmotionJSX(\"span\", { ref: labelColorsRef, css: (theme) => css`\n            flex: 100%;\n            text-overflow: ellipsis;\n            overflow: hidden;\n            white-space: nowrap;\n            padding-right: ${theme.gridUnit}px;\n          ` },\n  colorsList())));\n\n\n\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAmBA,SAASA,GAAT,QAAmC,mBAAnC;AACA,OAAOC,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,SAASC,OAAT,QAAwB,wBAAxB,C;AAQA,eAAc,SAAUC,gBAAV,CAA2BC,KAA3B,EAAuD;EACnE,MAAM,EAAEC,EAAF,EAAMC,KAAN,EAAaC,MAAb,KAAwBH,KAA9B;EACA,MAAM,CAACI,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAU,KAAV,CAA9C;EACA,MAAMS,YAAY,GAAGV,MAAM,CAAc,IAAd,CAA3B;EACA,MAAMW,cAAc,GAAGX,MAAM,CAAc,IAAd,CAA7B;EACA,MAAMY,iBAAiB,GAAG,MAAK;IAC7B,MAAMC,gBAAgB,GAAGH,YAAY,CAACI,OAAtC;IACA,MAAMC,kBAAkB,GAAGJ,cAAc,CAACG,OAA1C;IACA,IACED,gBAAgB;IAChBE,kBADA;IAECF,gBAAgB,CAACG,WAAjB,GAA+BH,gBAAgB,CAACI,WAAhD;IACCJ,gBAAgB,CAACK,YAAjB,GAAgCL,gBAAgB,CAACM,YADlD;IAECJ,kBAAkB,CAACC,WAAnB,GAAiCD,kBAAkB,CAACE,WAFrD;IAGCF,kBAAkB,CAACG,YAAnB,GAAkCH,kBAAkB,CAACI,YALvD,CADF,EAOE;MACAV,cAAc,CAAC,IAAD,CAAd;IACD;EACF,CAbD;EAcA,MAAMW,iBAAiB,GAAG,MAAK;IAC7BX,cAAc,CAAC,KAAD,CAAd;EACD,CAFD;EAIA,MAAMY,UAAU,GAAG,MACjBd,MAAM,CAACe,GAAP,CAAW,CAACC,KAAD,EAAgBC,CAAhB,KACT,wBAEE,GAAG,EAAE,GAAGnB,EAAE,IAAImB,CAAC,EAFjB,EAGE,GAAG,EAAE,CAACC,KAAD,KAAiC3B,GAAG;0BACvB2B,KAAK,CAACC,QAAN,GAAiB,CAAC;;;;gCAIZH,KAAK;gCACLA,KAAK,KAAK,OAAV,GAAoB,OAApB,GAA8BA,KAAK;;;;SAT7D,GADF,CADF;EAmBA,MAAMI,cAAc,GAAG,MACrB;EACE,4BAAOrB,KAAP,CADF;EAEE,2BAAMe,UAAU,EAAhB,CAFF,CADF;;EAOA,OACE,cAAC,OAAD,IACE,eAAY,SADd,EAEE,gBAAgB,EAAC,sBAFnB,EAGE,KAAK,EAAEM,cAHT,EAIE,GAAG,EAAEtB,EAJP,EAKE,OAAO,EAAEG,WALX;EAOE,wBACE,SAAS,EAAC,qBADZ,EAEE,YAAY,EAAEI,iBAFhB,EAGE,YAAY,EAAEQ,iBAHhB,EAIE,GAAG,EAAEtB,GAAG;;;;SAJV;EAWE,wBACE,SAAS,EAAC,oBADZ,EAEE,GAAG,EAAEY,YAFP,EAGE,GAAG,EAAE,CAACe,KAAD,KAA0B3B,GAAG;;6BAEf2B,KAAK,CAACC,QAAN,GAAiB,CAAC;;;;WALvC;EAWGpB,KAXH,CAXF;;EAwBE,wBACE,GAAG,EAAEK,cADP,EAEE,GAAG,EAAE,CAACc,KAAD,KAA0B3B,GAAG;;;;;6BAKf2B,KAAK,CAACC,QAAQ;WAPnC;EAUGL,UAAU,EAVb,CAxBF,CAPF,CADF;;;;AA+CD","names":["css","React","useRef","useState","Tooltip","ColorSchemeLabel","props","id","label","colors","showTooltip","setShowTooltip","labelNameRef","labelColorsRef","handleShowTooltip","labelNameElement","current","labelColorsElement","scrollWidth","offsetWidth","scrollHeight","offsetHeight","handleHideTooltip","colorsList","map","color","i","theme","gridUnit","tooltipContent"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/explore/components/controls/ColorSchemeControl/ColorSchemeLabel.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { css, SupersetTheme } from '@superset-ui/core';\nimport React, { useRef, useState } from 'react';\nimport { Tooltip } from 'src/components/Tooltip';\n\ntype ColorSchemeLabelProps = {\n  colors: string[];\n  id: string;\n  label: string;\n};\n\nexport default function ColorSchemeLabel(props: ColorSchemeLabelProps) {\n  const { id, label, colors } = props;\n  const [showTooltip, setShowTooltip] = useState<boolean>(false);\n  const labelNameRef = useRef<HTMLElement>(null);\n  const labelColorsRef = useRef<HTMLElement>(null);\n  const handleShowTooltip = () => {\n    const labelNameElement = labelNameRef.current;\n    const labelColorsElement = labelColorsRef.current;\n    if (\n      labelNameElement &&\n      labelColorsElement &&\n      (labelNameElement.scrollWidth > labelNameElement.offsetWidth ||\n        labelNameElement.scrollHeight > labelNameElement.offsetHeight ||\n        labelColorsElement.scrollWidth > labelColorsElement.offsetWidth ||\n        labelColorsElement.scrollHeight > labelColorsElement.offsetHeight)\n    ) {\n      setShowTooltip(true);\n    }\n  };\n  const handleHideTooltip = () => {\n    setShowTooltip(false);\n  };\n\n  const colorsList = () =>\n    colors.map((color: string, i: number) => (\n      <span\n        data-test=\"color\"\n        key={`${id}-${i}`}\n        css={(theme: { gridUnit: number }) => css`\n          padding-left: ${theme.gridUnit / 2}px;\n          :before {\n            content: '';\n            display: inline-block;\n            background-color: ${color};\n            border: 1px solid ${color === 'white' ? 'black' : color};\n            width: 9px;\n            height: 10px;\n          }\n        `}\n      />\n    ));\n\n  const tooltipContent = () => (\n    <>\n      <span>{label}</span>\n      <div>{colorsList()}</div>\n    </>\n  );\n\n  return (\n    <Tooltip\n      data-testid=\"tooltip\"\n      overlayClassName=\"color-scheme-tooltip\"\n      title={tooltipContent}\n      key={id}\n      visible={showTooltip}\n    >\n      <span\n        className=\"color-scheme-option\"\n        onMouseEnter={handleShowTooltip}\n        onMouseLeave={handleHideTooltip}\n        css={css`\n          display: flex;\n          align-items: center;\n          justify-content: flex-start;\n        `}\n        data-test={id}\n      >\n        <span\n          className=\"color-scheme-label\"\n          ref={labelNameRef}\n          css={(theme: SupersetTheme) => css`\n            min-width: 125px;\n            padding-right: ${theme.gridUnit * 2}px;\n            text-overflow: ellipsis;\n            overflow: hidden;\n            white-space: nowrap;\n          `}\n        >\n          {label}\n        </span>\n        <span\n          ref={labelColorsRef}\n          css={(theme: SupersetTheme) => css`\n            flex: 100%;\n            text-overflow: ellipsis;\n            overflow: hidden;\n            white-space: nowrap;\n            padding-right: ${theme.gridUnit}px;\n          `}\n        >\n          {colorsList()}\n        </span>\n      </span>\n    </Tooltip>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}