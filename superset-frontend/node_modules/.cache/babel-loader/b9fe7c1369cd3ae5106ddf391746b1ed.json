{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { isFeatureEnabled, FeatureFlag } from '@superset-ui/core';\nimport { isUserWithPermissionsAndRoles } from 'src/types/bootstrapTypes';\nimport { findPermission } from 'src/utils/findPermission';\n// this should really be a config value,\n// but is hardcoded in backend logic already, so...\nconst ADMIN_ROLE_NAME = 'admin';\nexport const isUserAdmin = (user) => isUserWithPermissionsAndRoles(user) &&\nObject.keys(user.roles || {}).some((role) => role.toLowerCase() === ADMIN_ROLE_NAME);\nconst isUserDashboardOwner = (dashboard, user) => isUserWithPermissionsAndRoles(user) &&\ndashboard.owners.some((owner) => owner.id === user.userId);\nexport const canUserEditDashboard = (dashboard, user) => isUserWithPermissionsAndRoles(user) && (\nisUserAdmin(user) || isUserDashboardOwner(dashboard, user)) &&\nfindPermission('can_write', 'Dashboard', user == null ? void 0 : user.roles);\nexport function userHasPermission(user, viewName, permissionName) {\n  return isUserAdmin(user) ||\n  isUserWithPermissionsAndRoles(user) &&\n  Object.values(user.roles || {}).\n  flat().\n  some((permissionView) => permissionView[0] === permissionName &&\n  permissionView[1] === viewName);\n}\nexport const canUserSaveAsDashboard = (dashboard, user) => isUserWithPermissionsAndRoles(user) &&\nfindPermission('can_write', 'Dashboard', user == null ? void 0 : user.roles) && (\n!isFeatureEnabled(FeatureFlag.DASHBOARD_RBAC) ||\nisUserAdmin(user) ||\nisUserDashboardOwner(dashboard, user));","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,mBAA9C;AACA,SACEC,6BADF,QAIO,0BAJP;AAMA,SAASC,cAAT,QAA+B,0BAA/B;AAEA;AACA;AACA,MAAMC,eAAe,GAAG,OAAxB;AAEA,OAAO,MAAMC,WAAW,GAAG,CACzBC,IADyB,KAGzBJ,6BAA6B,CAACI,IAAD,CAA7B;AACAC,MAAM,CAACC,IAAP,CAAYF,IAAI,CAACG,KAAL,IAAc,EAA1B,EAA8BC,IAA9B,CACE,KAAI,KAAIC,IAAI,CAACC,WAAL,OAAuBR,eADjC,CAJK;AAQP,MAAMS,oBAAoB,GAAG,CAC3BC,SAD2B,EAE3BR,IAF2B,KAI3BJ,6BAA6B,CAACI,IAAD,CAA7B;AACAQ,SAAS,CAACC,MAAV,CAAiBL,IAAjB,CAAsB,MAAK,KAAIM,KAAK,CAACC,EAAN,KAAaX,IAAI,CAACY,MAAjD,CALF;AAOA,OAAO,MAAMC,oBAAoB,GAAG,CAClCL,SADkC,EAElCR,IAFkC,KAIlCJ,6BAA6B,CAACI,IAAD,CAA7B;AACCD,WAAW,CAACC,IAAD,CAAX,IAAqBO,oBAAoB,CAACC,SAAD,EAAYR,IAAZ,CAD1C;AAEAH,cAAc,CAAC,WAAD,EAAc,WAAd,EAA2BG,IAA3B,oBAA2BA,IAAI,CAAEG,KAAjC,CANT;AAQP,OAAM,SAAUW,iBAAV,CACJd,IADI,EAEJe,QAFI,EAGJC,cAHI,EAGkB;EAEtB,OACEjB,WAAW,CAACC,IAAD,CAAX;EACCJ,6BAA6B,CAACI,IAAD,CAA7B;EACCC,MAAM,CAACgB,MAAP,CAAcjB,IAAI,CAACG,KAAL,IAAc,EAA5B;EACGe,IADH;EAEGd,IAFH,CAGI,eAAc,KACZe,cAAc,CAAC,CAAD,CAAd,KAAsBH,cAAtB;EACAG,cAAc,CAAC,CAAD,CAAd,KAAsBJ,QAL5B,CAHJ;AAWD;AAED,OAAO,MAAMK,sBAAsB,GAAG,CACpCZ,SADoC,EAEpCR,IAFoC,KAIpCJ,6BAA6B,CAACI,IAAD,CAA7B;AACAH,cAAc,CAAC,WAAD,EAAc,WAAd,EAA2BG,IAA3B,oBAA2BA,IAAI,CAAEG,KAAjC,CADd;AAEC,CAACT,gBAAgB,CAACC,WAAW,CAAC0B,cAAb,CAAjB;AACCtB,WAAW,CAACC,IAAD,CADZ;AAECO,oBAAoB,CAACC,SAAD,EAAYR,IAAZ,CAJtB,CAJK","names":["isFeatureEnabled","FeatureFlag","isUserWithPermissionsAndRoles","findPermission","ADMIN_ROLE_NAME","isUserAdmin","user","Object","keys","roles","some","role","toLowerCase","isUserDashboardOwner","dashboard","owners","owner","id","userId","canUserEditDashboard","userHasPermission","viewName","permissionName","values","flat","permissionView","canUserSaveAsDashboard","DASHBOARD_RBAC"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/dashboard/util/permissionUtils.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { isFeatureEnabled, FeatureFlag } from '@superset-ui/core';\nimport {\n  isUserWithPermissionsAndRoles,\n  UndefinedUser,\n  UserWithPermissionsAndRoles,\n} from 'src/types/bootstrapTypes';\nimport { Dashboard } from 'src/types/Dashboard';\nimport { findPermission } from 'src/utils/findPermission';\n\n// this should really be a config value,\n// but is hardcoded in backend logic already, so...\nconst ADMIN_ROLE_NAME = 'admin';\n\nexport const isUserAdmin = (\n  user?: UserWithPermissionsAndRoles | UndefinedUser,\n) =>\n  isUserWithPermissionsAndRoles(user) &&\n  Object.keys(user.roles || {}).some(\n    role => role.toLowerCase() === ADMIN_ROLE_NAME,\n  );\n\nconst isUserDashboardOwner = (\n  dashboard: Dashboard,\n  user: UserWithPermissionsAndRoles | UndefinedUser,\n) =>\n  isUserWithPermissionsAndRoles(user) &&\n  dashboard.owners.some(owner => owner.id === user.userId);\n\nexport const canUserEditDashboard = (\n  dashboard: Dashboard,\n  user?: UserWithPermissionsAndRoles | UndefinedUser | null,\n) =>\n  isUserWithPermissionsAndRoles(user) &&\n  (isUserAdmin(user) || isUserDashboardOwner(dashboard, user)) &&\n  findPermission('can_write', 'Dashboard', user?.roles);\n\nexport function userHasPermission(\n  user: UserWithPermissionsAndRoles | UndefinedUser,\n  viewName: string,\n  permissionName: string,\n) {\n  return (\n    isUserAdmin(user) ||\n    (isUserWithPermissionsAndRoles(user) &&\n      Object.values(user.roles || {})\n        .flat()\n        .some(\n          permissionView =>\n            permissionView[0] === permissionName &&\n            permissionView[1] === viewName,\n        ))\n  );\n}\n\nexport const canUserSaveAsDashboard = (\n  dashboard: Dashboard,\n  user?: UserWithPermissionsAndRoles | UndefinedUser | null,\n) =>\n  isUserWithPermissionsAndRoles(user) &&\n  findPermission('can_write', 'Dashboard', user?.roles) &&\n  (!isFeatureEnabled(FeatureFlag.DASHBOARD_RBAC) ||\n    isUserAdmin(user) ||\n    isUserDashboardOwner(dashboard, user));\n"]},"metadata":{},"sourceType":"module"}