{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { roundDecimal } from './utils';\n\nexport const defaultViewport = {\n  bearing: 0,\n  latitude: 31.222656842808707,\n  longitude: 6.85236157047845,\n  pitch: 0,\n  zoom: 1 };\n\n\nconst METER_TO_MILE = 1609.34;\n\nexport function unitToRadius(unit, num) {\n  if (unit === 'square_m') {\n    return Math.sqrt(num / Math.PI);\n  }\n  if (unit === 'radius_m') {\n    return num;\n  }\n  if (unit === 'radius_km') {\n    return num * 1000;\n  }\n  if (unit === 'radius_miles') {\n    return num * METER_TO_MILE;\n  }\n  if (unit === 'square_km') {\n    return Math.sqrt(num / Math.PI) * 1000;\n  }\n  if (unit === 'square_miles') {\n    return Math.sqrt(num / Math.PI) * METER_TO_MILE;\n  }\n\n  return null;\n}\n\nexport const EARTH_CIRCUMFERENCE_KM = 40075.16;\nexport const MILES_PER_KM = 1.60934;\n\nexport function kmToPixels(kilometers, latitude, zoomLevel) {\n  // Algorithm from: https://wiki.openstreetmap.org/wiki/Zoom_levels\n  const latitudeRad = latitude * (Math.PI / 180);\n  // Seems like the zoomLevel is off by one\n  const kmPerPixel =\n  EARTH_CIRCUMFERENCE_KM * Math.cos(latitudeRad) / 2 ** (zoomLevel + 9);\n\n  return roundDecimal(kilometers / kmPerPixel, 2);\n}","map":{"version":3,"names":["roundDecimal","defaultViewport","bearing","latitude","longitude","pitch","zoom","METER_TO_MILE","unitToRadius","unit","num","Math","sqrt","PI","EARTH_CIRCUMFERENCE_KM","MILES_PER_KM","kmToPixels","kilometers","zoomLevel","latitudeRad","kmPerPixel","cos"],"sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/plugins/legacy-preset-chart-deckgl/src/utils/geo.js"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { roundDecimal } from './utils';\n\nexport const defaultViewport = {\n  bearing: 0,\n  latitude: 31.222656842808707,\n  longitude: 6.85236157047845,\n  pitch: 0,\n  zoom: 1,\n};\n\nconst METER_TO_MILE = 1609.34;\n\nexport function unitToRadius(unit, num) {\n  if (unit === 'square_m') {\n    return Math.sqrt(num / Math.PI);\n  }\n  if (unit === 'radius_m') {\n    return num;\n  }\n  if (unit === 'radius_km') {\n    return num * 1000;\n  }\n  if (unit === 'radius_miles') {\n    return num * METER_TO_MILE;\n  }\n  if (unit === 'square_km') {\n    return Math.sqrt(num / Math.PI) * 1000;\n  }\n  if (unit === 'square_miles') {\n    return Math.sqrt(num / Math.PI) * METER_TO_MILE;\n  }\n\n  return null;\n}\n\nexport const EARTH_CIRCUMFERENCE_KM = 40075.16;\nexport const MILES_PER_KM = 1.60934;\n\nexport function kmToPixels(kilometers, latitude, zoomLevel) {\n  // Algorithm from: https://wiki.openstreetmap.org/wiki/Zoom_levels\n  const latitudeRad = latitude * (Math.PI / 180);\n  // Seems like the zoomLevel is off by one\n  const kmPerPixel =\n    (EARTH_CIRCUMFERENCE_KM * Math.cos(latitudeRad)) / 2 ** (zoomLevel + 9);\n\n  return roundDecimal(kilometers / kmPerPixel, 2);\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,QAA6B,SAA7B;;AAEA,OAAO,MAAMC,eAAe,GAAG;EAC7BC,OAAO,EAAE,CADoB;EAE7BC,QAAQ,EAAE,kBAFmB;EAG7BC,SAAS,EAAE,gBAHkB;EAI7BC,KAAK,EAAE,CAJsB;EAK7BC,IAAI,EAAE,CALuB,EAAxB;;;AAQP,MAAMC,aAAa,GAAG,OAAtB;;AAEA,OAAO,SAASC,YAAT,CAAsBC,IAAtB,EAA4BC,GAA5B,EAAiC;EACtC,IAAID,IAAI,KAAK,UAAb,EAAyB;IACvB,OAAOE,IAAI,CAACC,IAAL,CAAUF,GAAG,GAAGC,IAAI,CAACE,EAArB,CAAP;EACD;EACD,IAAIJ,IAAI,KAAK,UAAb,EAAyB;IACvB,OAAOC,GAAP;EACD;EACD,IAAID,IAAI,KAAK,WAAb,EAA0B;IACxB,OAAOC,GAAG,GAAG,IAAb;EACD;EACD,IAAID,IAAI,KAAK,cAAb,EAA6B;IAC3B,OAAOC,GAAG,GAAGH,aAAb;EACD;EACD,IAAIE,IAAI,KAAK,WAAb,EAA0B;IACxB,OAAOE,IAAI,CAACC,IAAL,CAAUF,GAAG,GAAGC,IAAI,CAACE,EAArB,IAA2B,IAAlC;EACD;EACD,IAAIJ,IAAI,KAAK,cAAb,EAA6B;IAC3B,OAAOE,IAAI,CAACC,IAAL,CAAUF,GAAG,GAAGC,IAAI,CAACE,EAArB,IAA2BN,aAAlC;EACD;;EAED,OAAO,IAAP;AACD;;AAED,OAAO,MAAMO,sBAAsB,GAAG,QAA/B;AACP,OAAO,MAAMC,YAAY,GAAG,OAArB;;AAEP,OAAO,SAASC,UAAT,CAAoBC,UAApB,EAAgCd,QAAhC,EAA0Ce,SAA1C,EAAqD;EAC1D;EACA,MAAMC,WAAW,GAAGhB,QAAQ,IAAIQ,IAAI,CAACE,EAAL,GAAU,GAAd,CAA5B;EACA;EACA,MAAMO,UAAU;EACbN,sBAAsB,GAAGH,IAAI,CAACU,GAAL,CAASF,WAAT,CAA1B,GAAmD,MAAMD,SAAS,GAAG,CAAlB,CADrD;;EAGA,OAAOlB,YAAY,CAACiB,UAAU,GAAGG,UAAd,EAA0B,CAA1B,CAAnB;AACD"},"metadata":{},"sourceType":"module"}