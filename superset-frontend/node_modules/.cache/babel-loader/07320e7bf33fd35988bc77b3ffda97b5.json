{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { SupersetClient } from '@superset-ui/core';\nimport { addDangerToast } from 'src/components/MessageToasts/actions';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport { updateFormDataByDatasource } from './exploreActions';\nexport const SET_DATASOURCE = 'SET_DATASOURCE';\nexport function setDatasource(datasource) {\n  return { type: SET_DATASOURCE, datasource };\n}\nexport function saveDataset(_ref) {let { schema, sql, database, templateParams, datasourceName, columns } = _ref;\n  return async function (dispatch) {\n    // Create a dataset object\n    try {\n      const { json: { data } } = await SupersetClient.post({\n        endpoint: '/superset/sqllab_viz/',\n        postPayload: {\n          data: {\n            schema,\n            sql,\n            dbId: database == null ? void 0 : database.id,\n            templateParams,\n            datasourceName,\n            metrics: [],\n            columns } } });\n\n\n\n      // Update form_data to point to new dataset\n      dispatch(changeDatasource(data));\n      return data;\n    }\n    catch (error) {\n      getClientErrorObject(error).then((e) => {\n        dispatch(addDangerToast(e.error));\n      });\n      throw error;\n    }\n  };\n}\nexport function changeDatasource(newDatasource) {\n  return function (dispatch, getState) {\n    const { explore: { datasource: prevDatasource } } = getState();\n    dispatch(setDatasource(newDatasource));\n    dispatch(updateFormDataByDatasource(prevDatasource, newDatasource));\n  };\n}\nexport const datasourcesActions = {\n  setDatasource,\n  changeDatasource,\n  saveDataset };","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAsBA,SAASA,cAAT,QAA+B,mBAA/B;AACA,SAASC,cAAT,QAA+B,sCAA/B;AACA,SAASC,oBAAT,QAAqC,gCAArC;AACA,SAASC,0BAAT,QAA2C,kBAA3C;AAGA,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AAKP,OAAM,SAAUC,aAAV,CAAwBC,UAAxB,EAA2C;EAC/C,OAAO,EAAEC,IAAI,EAAEH,cAAR,EAAwBE,UAAxB,EAAP;AACD;AAED,OAAM,SAAUE,WAAV,OAOmE,KAP7C,EAC1BC,MAD0B,EAE1BC,GAF0B,EAG1BC,QAH0B,EAI1BC,cAJ0B,EAK1BC,cAL0B,EAM1BC,OAN0B,EAO6C;EACvE,OAAO,gBAAgBC,QAAhB,EAAkE;IACvE;IACA,IAAI;MACF,MAAM,EACJC,IAAI,EAAE,EAAEC,IAAF,EADF,KAEF,MAAMjB,cAAc,CAACkB,IAAf,CAAoB;QAC5BC,QAAQ,EAAE,uBADkB;QAE5BC,WAAW,EAAE;UACXH,IAAI,EAAE;YACJR,MADI;YAEJC,GAFI;YAGJW,IAAI,EAAEV,QAAF,oBAAEA,QAAQ,CAAEW,EAHZ;YAIJV,cAJI;YAKJC,cALI;YAMJU,OAAO,EAAE,EANL;YAOJT,OAPI,EADK,EAFe,EAApB,CAFV;;;;MAgBA;MACAC,QAAQ,CAACS,gBAAgB,CAACP,IAAD,CAAjB,CAAR;MACA,OAAOA,IAAP;IACD;IAAC,OAAOQ,KAAP,EAAc;MACdvB,oBAAoB,CAACuB,KAAD,CAApB,CAA4BC,IAA5B,CAAiC,EAAC,KAAG;QACnCX,QAAQ,CAACd,cAAc,CAAC0B,CAAC,CAACF,KAAH,CAAf,CAAR;MACD,CAFD;MAGA,MAAMA,KAAN;IACD;EACF,CA5BD;AA6BD;AAED,OAAM,SAAUD,gBAAV,CAA2BI,aAA3B,EAAiD;EACrD,OAAO,UAAUb,QAAV,EAA8Bc,QAA9B,EAA8D;IACnE,MAAM,EACJC,OAAO,EAAE,EAAExB,UAAU,EAAEyB,cAAd,EADL,KAEFF,QAAQ,EAFZ;IAGAd,QAAQ,CAACV,aAAa,CAACuB,aAAD,CAAd,CAAR;IACAb,QAAQ,CAACZ,0BAA0B,CAAC4B,cAAD,EAAiBH,aAAjB,CAA3B,CAAR;EACD,CAND;AAOD;AAED,OAAO,MAAMI,kBAAkB,GAAG;EAChC3B,aADgC;EAEhCmB,gBAFgC;EAGhChB,WAHgC,EAA3B","names":["SupersetClient","addDangerToast","getClientErrorObject","updateFormDataByDatasource","SET_DATASOURCE","setDatasource","datasource","type","saveDataset","schema","sql","database","templateParams","datasourceName","columns","dispatch","json","data","post","endpoint","postPayload","dbId","id","metrics","changeDatasource","error","then","e","newDatasource","getState","explore","prevDatasource","datasourcesActions"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/actions/datasourcesActions.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { Dispatch, AnyAction } from 'redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { Dataset } from '@superset-ui/chart-controls';\nimport { SupersetClient } from '@superset-ui/core';\nimport { addDangerToast } from 'src/components/MessageToasts/actions';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport { updateFormDataByDatasource } from './exploreActions';\nimport { ExplorePageState } from '../types';\n\nexport const SET_DATASOURCE = 'SET_DATASOURCE';\nexport interface SetDatasource {\n  type: string;\n  datasource: Dataset;\n}\nexport function setDatasource(datasource: Dataset) {\n  return { type: SET_DATASOURCE, datasource };\n}\n\nexport function saveDataset({\n  schema,\n  sql,\n  database,\n  templateParams,\n  datasourceName,\n  columns,\n}: Omit<SqlLabPostRequest['data'], 'dbId'> & { database: { id: number } }) {\n  return async function (dispatch: ThunkDispatch<any, undefined, AnyAction>) {\n    // Create a dataset object\n    try {\n      const {\n        json: { data },\n      } = await SupersetClient.post({\n        endpoint: '/superset/sqllab_viz/',\n        postPayload: {\n          data: {\n            schema,\n            sql,\n            dbId: database?.id,\n            templateParams,\n            datasourceName,\n            metrics: [],\n            columns,\n          },\n        },\n      });\n      // Update form_data to point to new dataset\n      dispatch(changeDatasource(data));\n      return data;\n    } catch (error) {\n      getClientErrorObject(error).then(e => {\n        dispatch(addDangerToast(e.error));\n      });\n      throw error;\n    }\n  };\n}\n\nexport function changeDatasource(newDatasource: Dataset) {\n  return function (dispatch: Dispatch, getState: () => ExplorePageState) {\n    const {\n      explore: { datasource: prevDatasource },\n    } = getState();\n    dispatch(setDatasource(newDatasource));\n    dispatch(updateFormDataByDatasource(prevDatasource, newDatasource));\n  };\n}\n\nexport const datasourcesActions = {\n  setDatasource,\n  changeDatasource,\n  saveDataset,\n};\n\nexport type AnyDatasourcesAction = SetDatasource;\n"]},"metadata":{},"sourceType":"module"}