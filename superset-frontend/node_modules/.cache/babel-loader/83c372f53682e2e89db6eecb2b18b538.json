{"ast":null,"code":"import _isEmpty from \"lodash/isEmpty\";import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport { t, getCategoricalSchemeRegistry, getSequentialSchemeRegistry, legacyValidateInteger, ComparisonType, isAdhocColumn, isPhysicalColumn, ensureIsArray, isDefined, hasGenericChartAxes, NO_TIME_RANGE } from '@superset-ui/core';\nimport { formatSelectOptions, D3_FORMAT_OPTIONS, D3_FORMAT_DOCS, D3_TIME_FORMAT_OPTIONS, D3_TIME_FORMAT_DOCS, DEFAULT_TIME_FORMAT, DEFAULT_NUMBER_FORMAT } from '../utils';\nimport { TIME_FILTER_LABELS } from '../constants';\nimport { dndAdhocFilterControl, dndAdhocMetricControl, dndAdhocMetricsControl, dndGranularitySqlaControl, dndSortByControl, dndSecondaryMetricControl, dndSizeControl, dndXControl, dndYControl, dndColumnsControl, dndEntityControl, dndGroupByControl, dndSeriesControl, dndAdhocMetricControl2, dndXAxisControl } from './dndControls';\nexport { withDndFallback } from './dndControls';\nconst categoricalSchemeRegistry = getCategoricalSchemeRegistry();\nconst sequentialSchemeRegistry = getSequentialSchemeRegistry();\nexport const PRIMARY_COLOR = { r: 0, g: 122, b: 135, a: 1 };\nconst ROW_LIMIT_OPTIONS = [10, 50, 100, 250, 500, 1000, 5000, 10000, 50000];\nconst SERIES_LIMITS = [5, 10, 25, 50, 100, 500];\nconst appContainer = document.getElementById('app');\nconst { user } = JSON.parse((appContainer == null ? void 0 : appContainer.getAttribute('data-bootstrap')) || '{}');\nconst datasourceControl = {\n  type: 'DatasourceControl',\n  label: t('Datasource'),\n  default: null,\n  description: null,\n  mapStateToProps: (_ref) => {let { datasource, form_data } = _ref;return {\n      datasource,\n      form_data,\n      user };} };\n\n\nconst viz_type = {\n  type: 'VizTypeControl',\n  label: t('Visualization Type'),\n  default: 'table',\n  description: t('The type of visualization to display') };\n\nconst color_picker = {\n  type: 'ColorPickerControl',\n  label: t('Fixed Color'),\n  description: t('Use this to define a static color for all circles'),\n  default: PRIMARY_COLOR,\n  renderTrigger: true };\n\nconst linear_color_scheme = {\n  type: 'ColorSchemeControl',\n  label: t('Linear Color Scheme'),\n  choices: () => sequentialSchemeRegistry.values().map((value) => [\n  value.id,\n  value.label]),\n\n  default: sequentialSchemeRegistry.getDefaultKey(),\n  clearable: false,\n  description: '',\n  renderTrigger: true,\n  schemes: () => sequentialSchemeRegistry.getMap(),\n  isLinear: true,\n  mapStateToProps: (state) => {var _state$form_data;return {\n      dashboardId: state == null ? void 0 : (_state$form_data = state.form_data) == null ? void 0 : _state$form_data.dashboardId };} };\n\n\nconst granularity = {\n  type: 'SelectControl',\n  freeForm: true,\n  label: TIME_FILTER_LABELS.granularity,\n  default: 'one day',\n  choices: [\n  [null, t('all')],\n  ['PT5S', t('5 seconds')],\n  ['PT30S', t('30 seconds')],\n  ['PT1M', t('1 minute')],\n  ['PT5M', t('5 minutes')],\n  ['PT30M', t('30 minutes')],\n  ['PT1H', t('1 hour')],\n  ['PT6H', t('6 hour')],\n  ['P1D', t('1 day')],\n  ['P7D', t('7 days')],\n  ['P1W', t('week')],\n  ['week_starting_sunday', t('week starting Sunday')],\n  ['week_ending_saturday', t('week ending Saturday')],\n  ['P1M', t('month')],\n  ['P3M', t('quarter')],\n  ['P1Y', t('year')]],\n\n  description: t('The time granularity for the visualization. Note that you ' +\n  'can type and use simple natural language as in `10 seconds`, ' +\n  '`1 day` or `56 weeks`') };\n\nconst time_grain_sqla = {\n  type: 'SelectControl',\n  label: TIME_FILTER_LABELS.time_grain_sqla,\n  placeholder: t('None'),\n  initialValue: (control, state) => {var _state$form_data2, _state$form_data3;\n    if (!isDefined(state)) {\n      // If a chart is in a Dashboard, the ControlPanelState is empty.\n      return control.value;\n    }\n    // If a chart is a new one that isn't saved, metadata is null. In this\n    // case we want to default P1D. If the chart has been saved, we want\n    // to use whichever value was chosen, either nothing or valid a time grain.\n    return state != null && state.metadata || 'time_grain_sqla' in ((_state$form_data2 = state == null ? void 0 : state.form_data) != null ? _state$form_data2 : {}) ?\n    state == null ? void 0 : (_state$form_data3 = state.form_data) == null ? void 0 : _state$form_data3.time_grain_sqla :\n    'P1D';\n  },\n  description: t('The time granularity for the visualization. This ' +\n  'applies a date transformation to alter ' +\n  'your time column and defines a new time granularity. ' +\n  'The options here are defined on a per database ' +\n  'engine basis in the Superset source code.'),\n  mapStateToProps: (_ref2) => {let { datasource } = _ref2;return {\n      choices: (datasource == null ? void 0 : datasource.time_grain_sqla) || [] };},\n\n  visibility: (_ref3) => {let { controls } = _ref3;\n    if (!hasGenericChartAxes) {\n      return true;\n    }\n    const xAxis = controls == null ? void 0 : controls.x_axis;\n    const xAxisValue = xAxis == null ? void 0 : xAxis.value;\n    if (isAdhocColumn(xAxisValue)) {\n      return true;\n    }\n    if (isPhysicalColumn(xAxisValue)) {var _find, _xAxis$options;\n      return !!((_find = ((_xAxis$options = xAxis == null ? void 0 : xAxis.options) != null ? _xAxis$options : []).find((col) => (col == null ? void 0 : col.column_name) === xAxisValue)) != null && _find.is_dttm);\n    }\n    return false;\n  } };\n\nconst time_range = {\n  type: 'DateFilterControl',\n  freeForm: true,\n  label: TIME_FILTER_LABELS.time_range,\n  default: NO_TIME_RANGE,\n  description: t('The time range for the visualization. All relative times, e.g. \"Last month\", ' +\n  '\"Last 7 days\", \"now\", etc. are evaluated on the server using the server\\'s ' +\n  'local time (sans timezone). All tooltips and placeholder times are expressed ' +\n  'in UTC (sans timezone). The timestamps are then evaluated by the database ' +\n  \"using the engine's local timezone. Note one can explicitly set the timezone \" +\n  'per the ISO 8601 format if specifying either the start and/or end time.') };\n\nconst row_limit = {\n  type: 'SelectControl',\n  freeForm: true,\n  label: t('Row limit'),\n  validators: [legacyValidateInteger],\n  default: 10000,\n  choices: formatSelectOptions(ROW_LIMIT_OPTIONS),\n  description: t('Limits the number of rows that get displayed.') };\n\nconst order_desc = {\n  type: 'CheckboxControl',\n  label: t('Sort Descending'),\n  default: true,\n  description: t('Whether to sort descending or ascending'),\n  visibility: (_ref4) => {let { controls } = _ref4;return Boolean((controls == null ? void 0 : controls.timeseries_limit_metric.value) &&\n    !_isEmpty(controls == null ? void 0 : controls.timeseries_limit_metric.value));} };\n\nconst limit = {\n  type: 'SelectControl',\n  freeForm: true,\n  label: t('Series limit'),\n  placeholder: t('None'),\n  validators: [legacyValidateInteger],\n  choices: formatSelectOptions(SERIES_LIMITS),\n  clearable: true,\n  description: t('Limits the number of series that get displayed. A joined subquery (or an extra phase ' +\n  'where subqueries are not supported) is applied to limit the number of series that get ' +\n  'fetched and rendered. This feature is useful when grouping by high cardinality ' +\n  'column(s) though does increase the query complexity and cost.') };\n\nconst series_limit = {\n  type: 'SelectControl',\n  freeForm: true,\n  label: t('Series limit'),\n  placeholder: t('None'),\n  validators: [legacyValidateInteger],\n  choices: formatSelectOptions(SERIES_LIMITS),\n  description: t('Limits the number of series that get displayed. A joined subquery (or an extra phase ' +\n  'where subqueries are not supported) is applied to limit the number of series that get ' +\n  'fetched and rendered. This feature is useful when grouping by high cardinality ' +\n  'column(s) though does increase the query complexity and cost.') };\n\nconst y_axis_format = {\n  type: 'SelectControl',\n  freeForm: true,\n  label: t('Y Axis Format'),\n  renderTrigger: true,\n  default: DEFAULT_NUMBER_FORMAT,\n  choices: D3_FORMAT_OPTIONS,\n  description: D3_FORMAT_DOCS,\n  tokenSeparators: ['\\n', '\\t', ';'],\n  filterOption: (_ref5, search) => {var _context, _context2;let { data: option } = _ref5;return _includesInstanceProperty(_context = option.label).call(_context, search) || _includesInstanceProperty(_context2 = option.value).call(_context2, search);},\n  mapStateToProps: (state) => {var _state$controls, _state$controls$compa;\n    const isPercentage = ((_state$controls = state.controls) == null ? void 0 : (_state$controls$compa = _state$controls.comparison_type) == null ? void 0 : _state$controls$compa.value) === ComparisonType.Percentage;\n    return {\n      choices: isPercentage ?\n      D3_FORMAT_OPTIONS.filter((option) => {var _context3;return _includesInstanceProperty(_context3 = option[0]).call(_context3, '%');}) :\n      D3_FORMAT_OPTIONS };\n\n  } };\n\nconst x_axis_time_format = {\n  type: 'SelectControl',\n  freeForm: true,\n  label: t('Time format'),\n  renderTrigger: true,\n  default: DEFAULT_TIME_FORMAT,\n  choices: D3_TIME_FORMAT_OPTIONS,\n  description: D3_TIME_FORMAT_DOCS,\n  filterOption: (_ref6, search) => {var _context4, _context5;let { data: option } = _ref6;return _includesInstanceProperty(_context4 = option.label).call(_context4, search) || _includesInstanceProperty(_context5 = option.value).call(_context5, search);} };\n\nconst color_scheme = {\n  type: 'ColorSchemeControl',\n  label: t('Color Scheme'),\n  default: categoricalSchemeRegistry.getDefaultKey(),\n  renderTrigger: true,\n  choices: () => categoricalSchemeRegistry.keys().map((s) => [s, s]),\n  description: t('The color scheme for rendering chart'),\n  schemes: () => categoricalSchemeRegistry.getMap(),\n  mapStateToProps: (state) => {var _state$form_data4;return {\n      dashboardId: state == null ? void 0 : (_state$form_data4 = state.form_data) == null ? void 0 : _state$form_data4.dashboardId };} };\n\n\nconst truncate_metric = {\n  type: 'CheckboxControl',\n  label: t('Truncate Metric'),\n  default: true,\n  description: t('Whether to truncate metrics') };\n\nconst show_empty_columns = {\n  type: 'CheckboxControl',\n  label: t('Show empty columns'),\n  default: true,\n  description: t('Show empty columns') };\n\nconst temporal_columns_lookup = {\n  type: 'HiddenControl',\n  initialValue: (control, state) => {var _state$datasource;return Object.fromEntries(ensureIsArray(state == null ? void 0 : (_state$datasource = state.datasource) == null ? void 0 : _state$datasource.columns).\n    filter((option) => option.is_dttm).\n    map((option) => {var _option$column_name;return [(_option$column_name = option.column_name) != null ? _option$column_name : option.name, option.is_dttm];}));} };\n\nexport default {\n  metrics: dndAdhocMetricsControl,\n  metric: dndAdhocMetricControl,\n  datasource: datasourceControl,\n  viz_type,\n  color_picker,\n  metric_2: dndAdhocMetricControl2,\n  linear_color_scheme,\n  secondary_metric: dndSecondaryMetricControl,\n  groupby: dndGroupByControl,\n  columns: dndColumnsControl,\n  granularity,\n  granularity_sqla: dndGranularitySqlaControl,\n  time_grain_sqla,\n  time_range,\n  row_limit,\n  limit,\n  timeseries_limit_metric: dndSortByControl,\n  orderby: dndSortByControl,\n  order_desc,\n  series: dndSeriesControl,\n  entity: dndEntityControl,\n  x: dndXControl,\n  y: dndYControl,\n  size: dndSizeControl,\n  y_axis_format,\n  x_axis_time_format,\n  adhoc_filters: dndAdhocFilterControl,\n  color_scheme,\n  series_columns: dndColumnsControl,\n  series_limit,\n  series_limit_metric: dndSortByControl,\n  legacy_order_by: dndSortByControl,\n  truncate_metric,\n  x_axis: dndXAxisControl,\n  show_empty_columns,\n  temporal_columns_lookup };","map":{"version":3,"mappings":"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","names":["t","getCategoricalSchemeRegistry","getSequentialSchemeRegistry","legacyValidateInteger","ComparisonType","isAdhocColumn","isPhysicalColumn","ensureIsArray","isDefined","hasGenericChartAxes","NO_TIME_RANGE","formatSelectOptions","D3_FORMAT_OPTIONS","D3_FORMAT_DOCS","D3_TIME_FORMAT_OPTIONS","D3_TIME_FORMAT_DOCS","DEFAULT_TIME_FORMAT","DEFAULT_NUMBER_FORMAT","TIME_FILTER_LABELS","dndAdhocFilterControl","dndAdhocMetricControl","dndAdhocMetricsControl","dndGranularitySqlaControl","dndSortByControl","dndSecondaryMetricControl","dndSizeControl","dndXControl","dndYControl","dndColumnsControl","dndEntityControl","dndGroupByControl","dndSeriesControl","dndAdhocMetricControl2","dndXAxisControl","withDndFallback","categoricalSchemeRegistry","sequentialSchemeRegistry","PRIMARY_COLOR","r","g","b","a","ROW_LIMIT_OPTIONS","SERIES_LIMITS","appContainer","document","getElementById","user","JSON","parse","getAttribute","datasourceControl","type","label","default","description","mapStateToProps","datasource","form_data","viz_type","color_picker","renderTrigger","linear_color_scheme","choices","values","map","value","id","getDefaultKey","clearable","schemes","getMap","isLinear","dashboardId","state","granularity","freeForm","time_grain_sqla","placeholder","initialValue","control","metadata","visibility","controls","xAxis","x_axis","xAxisValue","options","find","col","column_name","is_dttm","time_range","row_limit","validators","order_desc","Boolean","timeseries_limit_metric","limit","series_limit","y_axis_format","tokenSeparators","filterOption","search","data","option","isPercentage","comparison_type","Percentage","filter","x_axis_time_format","color_scheme","keys","s","truncate_metric","show_empty_columns","temporal_columns_lookup","Object","fromEntries","columns","name","metrics","metric","metric_2","secondary_metric","groupby","granularity_sqla","orderby","series","entity","x","y","size","adhoc_filters","series_columns","series_limit_metric","legacy_order_by"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-chart-controls/src/shared-controls/sharedControls.tsx"],"sourcesContent":["/* eslint-disable camelcase */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/**\n * This file exports all controls available for use in chart plugins internal to Superset.\n * It is not recommended to use the controls here for any third-party plugins.\n *\n * While the React components located in `controls/components` represent different\n * types of controls (CheckboxControl, SelectControl, TextControl, ...), the controls here\n * represent instances of control types, that can be reused across visualization types.\n *\n * When controls are reused across viz types, their values are carried over as a user\n * changes the chart types.\n *\n * While the keys defined in the control itself get passed to the controlType as props,\n * here's a list of the keys that are common to all controls, and as a result define the\n * control interface.\n */\nimport { isEmpty } from 'lodash';\nimport {\n  t,\n  getCategoricalSchemeRegistry,\n  getSequentialSchemeRegistry,\n  SequentialScheme,\n  legacyValidateInteger,\n  ComparisonType,\n  isAdhocColumn,\n  isPhysicalColumn,\n  ensureIsArray,\n  isDefined,\n  hasGenericChartAxes,\n  NO_TIME_RANGE,\n} from '@superset-ui/core';\n\nimport {\n  formatSelectOptions,\n  D3_FORMAT_OPTIONS,\n  D3_FORMAT_DOCS,\n  D3_TIME_FORMAT_OPTIONS,\n  D3_TIME_FORMAT_DOCS,\n  DEFAULT_TIME_FORMAT,\n  DEFAULT_NUMBER_FORMAT,\n} from '../utils';\nimport { TIME_FILTER_LABELS } from '../constants';\nimport {\n  SharedControlConfig,\n  Dataset,\n  ColumnMeta,\n  ControlState,\n  ControlPanelState,\n} from '../types';\n\nimport {\n  dndAdhocFilterControl,\n  dndAdhocMetricControl,\n  dndAdhocMetricsControl,\n  dndGranularitySqlaControl,\n  dndSortByControl,\n  dndSecondaryMetricControl,\n  dndSizeControl,\n  dndXControl,\n  dndYControl,\n  dndColumnsControl,\n  dndEntityControl,\n  dndGroupByControl,\n  dndSeriesControl,\n  dndAdhocMetricControl2,\n  dndXAxisControl,\n} from './dndControls';\n\nexport { withDndFallback } from './dndControls';\n\nconst categoricalSchemeRegistry = getCategoricalSchemeRegistry();\nconst sequentialSchemeRegistry = getSequentialSchemeRegistry();\n\nexport const PRIMARY_COLOR = { r: 0, g: 122, b: 135, a: 1 };\n\nconst ROW_LIMIT_OPTIONS = [10, 50, 100, 250, 500, 1000, 5000, 10000, 50000];\nconst SERIES_LIMITS = [5, 10, 25, 50, 100, 500];\n\nconst appContainer = document.getElementById('app');\nconst { user } = JSON.parse(\n  appContainer?.getAttribute('data-bootstrap') || '{}',\n);\n\ntype SelectDefaultOption = {\n  label: string;\n  value: string;\n};\n\nconst datasourceControl: SharedControlConfig<'DatasourceControl'> = {\n  type: 'DatasourceControl',\n  label: t('Datasource'),\n  default: null,\n  description: null,\n  mapStateToProps: ({ datasource, form_data }) => ({\n    datasource,\n    form_data,\n    user,\n  }),\n};\n\nconst viz_type: SharedControlConfig<'VizTypeControl'> = {\n  type: 'VizTypeControl',\n  label: t('Visualization Type'),\n  default: 'table',\n  description: t('The type of visualization to display'),\n};\n\nconst color_picker: SharedControlConfig<'ColorPickerControl'> = {\n  type: 'ColorPickerControl',\n  label: t('Fixed Color'),\n  description: t('Use this to define a static color for all circles'),\n  default: PRIMARY_COLOR,\n  renderTrigger: true,\n};\n\nconst linear_color_scheme: SharedControlConfig<'ColorSchemeControl'> = {\n  type: 'ColorSchemeControl',\n  label: t('Linear Color Scheme'),\n  choices: () =>\n    (sequentialSchemeRegistry.values() as SequentialScheme[]).map(value => [\n      value.id,\n      value.label,\n    ]),\n  default: sequentialSchemeRegistry.getDefaultKey(),\n  clearable: false,\n  description: '',\n  renderTrigger: true,\n  schemes: () => sequentialSchemeRegistry.getMap(),\n  isLinear: true,\n  mapStateToProps: state => ({\n    dashboardId: state?.form_data?.dashboardId,\n  }),\n};\n\nconst granularity: SharedControlConfig<'SelectControl'> = {\n  type: 'SelectControl',\n  freeForm: true,\n  label: TIME_FILTER_LABELS.granularity,\n  default: 'one day',\n  choices: [\n    [null, t('all')],\n    ['PT5S', t('5 seconds')],\n    ['PT30S', t('30 seconds')],\n    ['PT1M', t('1 minute')],\n    ['PT5M', t('5 minutes')],\n    ['PT30M', t('30 minutes')],\n    ['PT1H', t('1 hour')],\n    ['PT6H', t('6 hour')],\n    ['P1D', t('1 day')],\n    ['P7D', t('7 days')],\n    ['P1W', t('week')],\n    ['week_starting_sunday', t('week starting Sunday')],\n    ['week_ending_saturday', t('week ending Saturday')],\n    ['P1M', t('month')],\n    ['P3M', t('quarter')],\n    ['P1Y', t('year')],\n  ],\n  description: t(\n    'The time granularity for the visualization. Note that you ' +\n      'can type and use simple natural language as in `10 seconds`, ' +\n      '`1 day` or `56 weeks`',\n  ),\n};\n\nconst time_grain_sqla: SharedControlConfig<'SelectControl'> = {\n  type: 'SelectControl',\n  label: TIME_FILTER_LABELS.time_grain_sqla,\n  placeholder: t('None'),\n  initialValue: (control: ControlState, state: ControlPanelState) => {\n    if (!isDefined(state)) {\n      // If a chart is in a Dashboard, the ControlPanelState is empty.\n      return control.value;\n    }\n    // If a chart is a new one that isn't saved, metadata is null. In this\n    // case we want to default P1D. If the chart has been saved, we want\n    // to use whichever value was chosen, either nothing or valid a time grain.\n    return state?.metadata || 'time_grain_sqla' in (state?.form_data ?? {})\n      ? state?.form_data?.time_grain_sqla\n      : 'P1D';\n  },\n  description: t(\n    'The time granularity for the visualization. This ' +\n      'applies a date transformation to alter ' +\n      'your time column and defines a new time granularity. ' +\n      'The options here are defined on a per database ' +\n      'engine basis in the Superset source code.',\n  ),\n  mapStateToProps: ({ datasource }) => ({\n    choices: (datasource as Dataset)?.time_grain_sqla || [],\n  }),\n  visibility: ({ controls }) => {\n    if (!hasGenericChartAxes) {\n      return true;\n    }\n\n    const xAxis = controls?.x_axis;\n    const xAxisValue = xAxis?.value;\n    if (isAdhocColumn(xAxisValue)) {\n      return true;\n    }\n    if (isPhysicalColumn(xAxisValue)) {\n      return !!(xAxis?.options ?? []).find(\n        (col: ColumnMeta) => col?.column_name === xAxisValue,\n      )?.is_dttm;\n    }\n    return false;\n  },\n};\n\nconst time_range: SharedControlConfig<'DateFilterControl'> = {\n  type: 'DateFilterControl',\n  freeForm: true,\n  label: TIME_FILTER_LABELS.time_range,\n  default: NO_TIME_RANGE, // this value is an empty filter constant so shouldn't translate it.\n  description: t(\n    'The time range for the visualization. All relative times, e.g. \"Last month\", ' +\n      '\"Last 7 days\", \"now\", etc. are evaluated on the server using the server\\'s ' +\n      'local time (sans timezone). All tooltips and placeholder times are expressed ' +\n      'in UTC (sans timezone). The timestamps are then evaluated by the database ' +\n      \"using the engine's local timezone. Note one can explicitly set the timezone \" +\n      'per the ISO 8601 format if specifying either the start and/or end time.',\n  ),\n};\n\nconst row_limit: SharedControlConfig<'SelectControl'> = {\n  type: 'SelectControl',\n  freeForm: true,\n  label: t('Row limit'),\n  validators: [legacyValidateInteger],\n  default: 10000,\n  choices: formatSelectOptions(ROW_LIMIT_OPTIONS),\n  description: t('Limits the number of rows that get displayed.'),\n};\n\nconst order_desc: SharedControlConfig<'CheckboxControl'> = {\n  type: 'CheckboxControl',\n  label: t('Sort Descending'),\n  default: true,\n  description: t('Whether to sort descending or ascending'),\n  visibility: ({ controls }) =>\n    Boolean(\n      controls?.timeseries_limit_metric.value &&\n        !isEmpty(controls?.timeseries_limit_metric.value),\n    ),\n};\n\nconst limit: SharedControlConfig<'SelectControl'> = {\n  type: 'SelectControl',\n  freeForm: true,\n  label: t('Series limit'),\n  placeholder: t('None'),\n  validators: [legacyValidateInteger],\n  choices: formatSelectOptions(SERIES_LIMITS),\n  clearable: true,\n  description: t(\n    'Limits the number of series that get displayed. A joined subquery (or an extra phase ' +\n      'where subqueries are not supported) is applied to limit the number of series that get ' +\n      'fetched and rendered. This feature is useful when grouping by high cardinality ' +\n      'column(s) though does increase the query complexity and cost.',\n  ),\n};\n\nconst series_limit: SharedControlConfig<'SelectControl'> = {\n  type: 'SelectControl',\n  freeForm: true,\n  label: t('Series limit'),\n  placeholder: t('None'),\n  validators: [legacyValidateInteger],\n  choices: formatSelectOptions(SERIES_LIMITS),\n  description: t(\n    'Limits the number of series that get displayed. A joined subquery (or an extra phase ' +\n      'where subqueries are not supported) is applied to limit the number of series that get ' +\n      'fetched and rendered. This feature is useful when grouping by high cardinality ' +\n      'column(s) though does increase the query complexity and cost.',\n  ),\n};\n\nconst y_axis_format: SharedControlConfig<'SelectControl', SelectDefaultOption> =\n  {\n    type: 'SelectControl',\n    freeForm: true,\n    label: t('Y Axis Format'),\n    renderTrigger: true,\n    default: DEFAULT_NUMBER_FORMAT,\n    choices: D3_FORMAT_OPTIONS,\n    description: D3_FORMAT_DOCS,\n    tokenSeparators: ['\\n', '\\t', ';'],\n    filterOption: ({ data: option }, search) =>\n      option.label.includes(search) || option.value.includes(search),\n    mapStateToProps: state => {\n      const isPercentage =\n        state.controls?.comparison_type?.value === ComparisonType.Percentage;\n      return {\n        choices: isPercentage\n          ? D3_FORMAT_OPTIONS.filter(option => option[0].includes('%'))\n          : D3_FORMAT_OPTIONS,\n      };\n    },\n  };\n\nconst x_axis_time_format: SharedControlConfig<\n  'SelectControl',\n  SelectDefaultOption\n> = {\n  type: 'SelectControl',\n  freeForm: true,\n  label: t('Time format'),\n  renderTrigger: true,\n  default: DEFAULT_TIME_FORMAT,\n  choices: D3_TIME_FORMAT_OPTIONS,\n  description: D3_TIME_FORMAT_DOCS,\n  filterOption: ({ data: option }, search) =>\n    option.label.includes(search) || option.value.includes(search),\n};\n\nconst color_scheme: SharedControlConfig<'ColorSchemeControl'> = {\n  type: 'ColorSchemeControl',\n  label: t('Color Scheme'),\n  default: categoricalSchemeRegistry.getDefaultKey(),\n  renderTrigger: true,\n  choices: () => categoricalSchemeRegistry.keys().map(s => [s, s]),\n  description: t('The color scheme for rendering chart'),\n  schemes: () => categoricalSchemeRegistry.getMap(),\n  mapStateToProps: state => ({\n    dashboardId: state?.form_data?.dashboardId,\n  }),\n};\n\nconst truncate_metric: SharedControlConfig<'CheckboxControl'> = {\n  type: 'CheckboxControl',\n  label: t('Truncate Metric'),\n  default: true,\n  description: t('Whether to truncate metrics'),\n};\n\nconst show_empty_columns: SharedControlConfig<'CheckboxControl'> = {\n  type: 'CheckboxControl',\n  label: t('Show empty columns'),\n  default: true,\n  description: t('Show empty columns'),\n};\n\nconst temporal_columns_lookup: SharedControlConfig<'HiddenControl'> = {\n  type: 'HiddenControl',\n  initialValue: (control: ControlState, state: ControlPanelState | null) =>\n    Object.fromEntries(\n      ensureIsArray<Record<string, any>>(state?.datasource?.columns)\n        .filter(option => option.is_dttm)\n        .map(option => [option.column_name ?? option.name, option.is_dttm]),\n    ),\n};\n\nexport default {\n  metrics: dndAdhocMetricsControl,\n  metric: dndAdhocMetricControl,\n  datasource: datasourceControl,\n  viz_type,\n  color_picker,\n  metric_2: dndAdhocMetricControl2,\n  linear_color_scheme,\n  secondary_metric: dndSecondaryMetricControl,\n  groupby: dndGroupByControl,\n  columns: dndColumnsControl,\n  granularity,\n  granularity_sqla: dndGranularitySqlaControl,\n  time_grain_sqla,\n  time_range,\n  row_limit,\n  limit,\n  timeseries_limit_metric: dndSortByControl,\n  orderby: dndSortByControl,\n  order_desc,\n  series: dndSeriesControl,\n  entity: dndEntityControl,\n  x: dndXControl,\n  y: dndYControl,\n  size: dndSizeControl,\n  y_axis_format,\n  x_axis_time_format,\n  adhoc_filters: dndAdhocFilterControl,\n  color_scheme,\n  series_columns: dndColumnsControl,\n  series_limit,\n  series_limit_metric: dndSortByControl,\n  legacy_order_by: dndSortByControl,\n  truncate_metric,\n  x_axis: dndXAxisControl,\n  show_empty_columns,\n  temporal_columns_lookup,\n};\n"]},"metadata":{},"sourceType":"module"}