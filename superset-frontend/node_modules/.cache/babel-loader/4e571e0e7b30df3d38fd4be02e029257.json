{"ast":null,"code":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint react/sort-comp: 'off' */\nimport React from 'react';\nimport ChartClient from '../clients/ChartClient';\nclass ChartDataProvider extends React.PureComponent {\n\n  constructor(props) {\n    super(props);this.chartClient = void 0;this.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    handleFetchData = () => {\n      const { loadDatasource, formDataRequestOptions, datasourceRequestOptions, queryRequestOptions } = this.props;\n      this.setState({ status: 'loading' }, () => {\n        try {\n          this.chartClient.\n          loadFormData(this.extractSliceIdAndFormData(), formDataRequestOptions).\n          then((formData) => Promise.all([\n          loadDatasource ?\n          this.chartClient.loadDatasource(formData.datasource, datasourceRequestOptions) :\n          Promise.resolve(undefined),\n          this.chartClient.loadQueryData(formData, queryRequestOptions)]).\n          then((_ref) => {let [datasource, queriesData] = _ref;return (\n              // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n              {\n                datasource,\n                formData,\n                queriesData });})).\n\n          then(this.handleReceiveData).\n          catch(this.handleError);\n        }\n        catch (error) {\n          this.handleError(error);\n        }\n      });\n    };this.\n    handleReceiveData = (payload) => {\n      const { onLoaded } = this.props;\n      if (onLoaded)\n      onLoaded(payload);\n      this.setState({ payload, status: 'loaded' });\n    };this.\n    handleError = (error) => {\n      const { onError } = this.props;\n      if (onError)\n      onError(error);\n      this.setState({ error, status: 'error' });\n    };this.state = { status: 'uninitialized' };this.chartClient = new ChartClient({ client: props.client });}componentDidMount() {this.handleFetchData();}componentDidUpdate(prevProps) {const { formData, sliceId } = this.props;if (formData !== prevProps.formData || sliceId !== prevProps.sliceId) {this.handleFetchData();}}extractSliceIdAndFormData() {const { formData, sliceId } = this.props;return formData ? { formData } : { sliceId: sliceId };}\n  render() {\n    const { children } = this.props;\n    const { status, payload, error } = this.state;\n    switch (status) {\n      case 'loading':\n        return children({ loading: true });\n      case 'loaded':\n        return children({ payload });\n      case 'error':\n        return children({ error });\n      case 'uninitialized':\n      default:\n        return null;}\n\n  }}\n\nexport default ChartDataProvider;","map":{"version":3,"mappings":"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","names":["React","ChartClient","ChartDataProvider","PureComponent","constructor","props","chartClient","handleFetchData","loadDatasource","formDataRequestOptions","datasourceRequestOptions","queryRequestOptions","setState","status","loadFormData","extractSliceIdAndFormData","then","Promise","all","formData","datasource","resolve","undefined","loadQueryData","queriesData","handleReceiveData","catch","handleError","error","payload","onLoaded","onError","state","client","componentDidMount","componentDidUpdate","prevProps","sliceId","render","children","loading"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/packages/superset-ui-core/src/chart/components/ChartDataProvider.tsx"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/* eslint react/sort-comp: 'off' */\nimport React, { ReactNode } from 'react';\nimport {\n  SupersetClientInterface,\n  RequestConfig,\n  QueryFormData,\n  Datasource,\n} from '../..';\nimport ChartClient, { SliceIdAndOrFormData } from '../clients/ChartClient';\nimport { QueryData } from '../types/QueryResponse';\n\ninterface Payload {\n  formData: Partial<QueryFormData>;\n  queriesData: QueryData[];\n  datasource?: Datasource;\n}\n\nexport interface ProvidedProps {\n  payload?: Payload;\n  error?: Error;\n  loading?: boolean;\n}\n\nexport type ChartDataProviderProps =\n  /** User can pass either one or both of sliceId or formData */\n  SliceIdAndOrFormData & {\n    /** Child function called with ProvidedProps */\n    children: (provided: ProvidedProps) => ReactNode;\n    /** Superset client which is used to fetch data. It should already be configured and initialized. */\n    client?: SupersetClientInterface;\n    /** Will fetch and include datasource metadata for SliceIdAndOrFormData in the payload. */\n    loadDatasource?: boolean;\n    /** Callback when an error occurs. Enables wrapping the Provider in an ErrorBoundary. */\n    onError?: (error: ProvidedProps['error']) => void;\n    /** Callback when data is loaded. */\n    onLoaded?: (payload: ProvidedProps['payload']) => void;\n    /** Hook to override the formData request config. */\n    formDataRequestOptions?: Partial<RequestConfig>;\n    /** Hook to override the datasource request config. */\n    datasourceRequestOptions?: Partial<RequestConfig>;\n    /** Hook to override the queriesData request config. */\n    queryRequestOptions?: Partial<RequestConfig>;\n  };\n\nexport type ChartDataProviderState = {\n  status: 'uninitialized' | 'loading' | 'error' | 'loaded';\n  payload?: ProvidedProps['payload'];\n  error?: ProvidedProps['error'];\n};\n\nclass ChartDataProvider extends React.PureComponent<\n  ChartDataProviderProps,\n  ChartDataProviderState\n> {\n  readonly chartClient: ChartClient;\n\n  constructor(props: ChartDataProviderProps) {\n    super(props);\n    this.state = { status: 'uninitialized' };\n    this.chartClient = new ChartClient({ client: props.client });\n  }\n\n  componentDidMount() {\n    this.handleFetchData();\n  }\n\n  componentDidUpdate(prevProps: ChartDataProviderProps) {\n    const { formData, sliceId } = this.props;\n    if (formData !== prevProps.formData || sliceId !== prevProps.sliceId) {\n      this.handleFetchData();\n    }\n  }\n\n  private extractSliceIdAndFormData() {\n    const { formData, sliceId } = this.props;\n    return formData ? { formData } : { sliceId: sliceId as number };\n  }\n\n  private handleFetchData = () => {\n    const {\n      loadDatasource,\n      formDataRequestOptions,\n      datasourceRequestOptions,\n      queryRequestOptions,\n    } = this.props;\n\n    this.setState({ status: 'loading' }, () => {\n      try {\n        this.chartClient\n          .loadFormData(\n            this.extractSliceIdAndFormData(),\n            formDataRequestOptions,\n          )\n          .then(formData =>\n            Promise.all([\n              loadDatasource\n                ? this.chartClient.loadDatasource(\n                    formData.datasource,\n                    datasourceRequestOptions,\n                  )\n                : Promise.resolve(undefined),\n              this.chartClient.loadQueryData(formData, queryRequestOptions),\n            ]).then(\n              ([datasource, queriesData]) =>\n                // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n                ({\n                  datasource,\n                  formData,\n                  queriesData,\n                } as Payload),\n            ),\n          )\n          .then(this.handleReceiveData)\n          .catch(this.handleError);\n      } catch (error) {\n        this.handleError(error as Error);\n      }\n    });\n  };\n\n  private handleReceiveData = (payload?: Payload) => {\n    const { onLoaded } = this.props;\n    if (onLoaded) onLoaded(payload);\n    this.setState({ payload, status: 'loaded' });\n  };\n\n  private handleError = (error: ProvidedProps['error']) => {\n    const { onError } = this.props;\n    if (onError) onError(error);\n    this.setState({ error, status: 'error' });\n  };\n\n  render() {\n    const { children } = this.props;\n    const { status, payload, error } = this.state;\n\n    switch (status) {\n      case 'loading':\n        return children({ loading: true });\n      case 'loaded':\n        return children({ payload });\n      case 'error':\n        return children({ error });\n      case 'uninitialized':\n      default:\n        return null;\n    }\n  }\n}\n\nexport default ChartDataProvider;\n"]},"metadata":{},"sourceType":"module"}