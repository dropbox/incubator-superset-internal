{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport CategoricalColorScale from './CategoricalColorScale';\nimport getCategoricalSchemeRegistry from './CategoricalSchemeRegistrySingleton';\nimport stringifyAndTrim from './stringifyAndTrim';\nexport default class CategoricalColorNamespace {\n\n\n\n  constructor(name) {this.name = void 0;this.forcedItems = void 0;this.scales = void 0;\n    this.name = name;\n    this.scales = {};\n    this.forcedItems = {};\n  }\n  getScale(schemeId) {var _ref, _scheme$colors;\n    const id = (_ref = schemeId != null ? schemeId : getCategoricalSchemeRegistry().getDefaultKey()) != null ? _ref : '';\n    const scheme = getCategoricalSchemeRegistry().get(id);\n    return new CategoricalColorScale((_scheme$colors = scheme == null ? void 0 : scheme.colors) != null ? _scheme$colors : [], this.forcedItems);\n  }\n  /**\n   * Enforce specific color for given value\n   * This will apply across all color scales\n   * in this namespace.\n   * @param {*} value value\n   * @param {*} forcedColor color\n   */\n  setColor(value, forcedColor) {\n    this.forcedItems[stringifyAndTrim(value)] = forcedColor;\n    return this;\n  }\n  resetColors() {\n    this.forcedItems = {};\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}const namespaces = {};\nexport const DEFAULT_NAMESPACE = 'GLOBAL';\nexport function getNamespace(name) {if (name === void 0) {name = DEFAULT_NAMESPACE;}\n  const instance = namespaces[name];\n  if (instance) {\n    return instance;\n  }\n  const newInstance = new CategoricalColorNamespace(name);\n  namespaces[name] = newInstance;\n  return newInstance;\n}\nexport function getColor(value, schemeId, namespace) {\n  return getNamespace(namespace).getScale(schemeId).getColor(value);\n}\n/*\n  Returns a new scale instance within the same namespace.\n  Especially useful when a chart is booting for the first time\n*/\nexport function getScale(scheme, namespace) {\n  return getNamespace(namespace).getScale(scheme);\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(CategoricalColorNamespace, \"CategoricalColorNamespace\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/color/CategoricalColorNamespace.ts\");reactHotLoader.register(namespaces, \"namespaces\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/color/CategoricalColorNamespace.ts\");reactHotLoader.register(DEFAULT_NAMESPACE, \"DEFAULT_NAMESPACE\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/color/CategoricalColorNamespace.ts\");reactHotLoader.register(getNamespace, \"getNamespace\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/color/CategoricalColorNamespace.ts\");reactHotLoader.register(getColor, \"getColor\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/color/CategoricalColorNamespace.ts\");reactHotLoader.register(getScale, \"getScale\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/color/CategoricalColorNamespace.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAmBA,OAAOA,qBAAP,MAAkC,yBAAlC;AAEA,OAAOC,4BAAP,MAAyC,sCAAzC;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AAEA,eAAc,MAAOC,yBAAP,CAAgC;;;;EAS5CC,YAAYC,IAAZ,EAAwB,MARxBA,IAQwB,eANxBC,WAMwB,eAJxBC,MAIwB;IACtB,KAAKF,IAAL,GAAYA,IAAZ;IACA,KAAKE,MAAL,GAAc,EAAd;IACA,KAAKD,WAAL,GAAmB,EAAnB;EACD;EAEDE,QAAQ,CAACC,QAAD,EAAkB;IACxB,MAAMC,EAAE,WAAGD,QAAH,WAAGA,QAAH,GAAeR,4BAA4B,GAAGU,aAA/B,EAAf,mBAAiE,EAAzE;IACA,MAAMC,MAAM,GAAGX,4BAA4B,GAAGY,GAA/B,CAAmCH,EAAnC,CAAf;IACA,OAAO,IAAIV,qBAAJ,mBAA0BY,MAA1B,oBAA0BA,MAAM,CAAEE,MAAlC,6BAA4C,EAA5C,EAAgD,KAAKR,WAArD,CAAP;EACD;EAED;;;;;;;EAOAS,QAAQ,CAACC,KAAD,EAAgBC,WAAhB,EAAmC;IACzC,KAAKX,WAAL,CAAiBJ,gBAAgB,CAACc,KAAD,CAAjC,IAA4CC,WAA5C;IAEA,OAAO,IAAP;EACD;EAEDC,WAAW;IACT,KAAKZ,WAAL,GAAmB,EAAnB;EACD,CApC2C;EAAA;IAAA,yBAuC9C,MAAMa,UAAU,GAEZ,EAFJ;AAIA,OAAO,MAAMC,iBAAiB,GAAG,QAA1B;AAEP,OAAM,SAAUC,YAAV,CAAuBhB,IAAvB,EAAuD,KAAhCA,IAAgC,cAAhCA,IAAgC,GAAjBe,iBAAiB;EAC3D,MAAME,QAAQ,GAAGH,UAAU,CAACd,IAAD,CAA3B;EACA,IAAIiB,QAAJ,EAAc;IACZ,OAAOA,QAAP;EACD;EACD,MAAMC,WAAW,GAAG,IAAIpB,yBAAJ,CAA8BE,IAA9B,CAApB;EACAc,UAAU,CAACd,IAAD,CAAV,GAAmBkB,WAAnB;EAEA,OAAOA,WAAP;AACD;AAED,OAAM,SAAUC,QAAV,CACJR,KADI,EAEJP,QAFI,EAGJgB,SAHI,EAGc;EAElB,OAAOJ,YAAY,CAACI,SAAD,CAAZ,CAAwBjB,QAAxB,CAAiCC,QAAjC,EAA2Ce,QAA3C,CAAoDR,KAApD,CAAP;AACD;AAED;;;;AAIA,OAAM,SAAUR,QAAV,CAAmBI,MAAnB,EAAoCa,SAApC,EAAsD;EAC1D,OAAOJ,YAAY,CAACI,SAAD,CAAZ,CAAwBjB,QAAxB,CAAiCI,MAAjC,CAAP;AACD,C,iLAtEoBT,yB,4LAuCfgB,U,6KAIOC,iB,oLAEGC,Y,+KAWAG,Q,2KAYAhB,Q","names":["CategoricalColorScale","getCategoricalSchemeRegistry","stringifyAndTrim","CategoricalColorNamespace","constructor","name","forcedItems","scales","getScale","schemeId","id","getDefaultKey","scheme","get","colors","setColor","value","forcedColor","resetColors","namespaces","DEFAULT_NAMESPACE","getNamespace","instance","newInstance","getColor","namespace"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/color/CategoricalColorNamespace.ts"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport CategoricalColorScale from './CategoricalColorScale';\nimport { ColorsLookup } from './types';\nimport getCategoricalSchemeRegistry from './CategoricalSchemeRegistrySingleton';\nimport stringifyAndTrim from './stringifyAndTrim';\n\nexport default class CategoricalColorNamespace {\n  name: string;\n\n  forcedItems: ColorsLookup;\n\n  scales: {\n    [key: string]: CategoricalColorScale;\n  };\n\n  constructor(name: string) {\n    this.name = name;\n    this.scales = {};\n    this.forcedItems = {};\n  }\n\n  getScale(schemeId?: string) {\n    const id = schemeId ?? getCategoricalSchemeRegistry().getDefaultKey() ?? '';\n    const scheme = getCategoricalSchemeRegistry().get(id);\n    return new CategoricalColorScale(scheme?.colors ?? [], this.forcedItems);\n  }\n\n  /**\n   * Enforce specific color for given value\n   * This will apply across all color scales\n   * in this namespace.\n   * @param {*} value value\n   * @param {*} forcedColor color\n   */\n  setColor(value: string, forcedColor: string) {\n    this.forcedItems[stringifyAndTrim(value)] = forcedColor;\n\n    return this;\n  }\n\n  resetColors() {\n    this.forcedItems = {};\n  }\n}\n\nconst namespaces: {\n  [key: string]: CategoricalColorNamespace;\n} = {};\n\nexport const DEFAULT_NAMESPACE = 'GLOBAL';\n\nexport function getNamespace(name: string = DEFAULT_NAMESPACE) {\n  const instance = namespaces[name];\n  if (instance) {\n    return instance;\n  }\n  const newInstance = new CategoricalColorNamespace(name);\n  namespaces[name] = newInstance;\n\n  return newInstance;\n}\n\nexport function getColor(\n  value?: string,\n  schemeId?: string,\n  namespace?: string,\n) {\n  return getNamespace(namespace).getScale(schemeId).getColor(value);\n}\n\n/*\n  Returns a new scale instance within the same namespace.\n  Especially useful when a chart is booting for the first time\n*/\nexport function getScale(scheme?: string, namespace?: string) {\n  return getNamespace(namespace).getScale(scheme);\n}\n"]},"metadata":{},"sourceType":"module"}