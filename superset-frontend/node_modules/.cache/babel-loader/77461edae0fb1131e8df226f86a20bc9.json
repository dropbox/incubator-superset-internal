{"ast":null,"code":"import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { Behavior, EXTRA_FORM_DATA_APPEND_KEYS, EXTRA_FORM_DATA_OVERRIDE_KEYS, FeatureFlag, getChartMetadataRegistry } from '@superset-ui/core';\nimport extractUrlParams from 'src/dashboard/util/extractUrlParams';\nimport { isFeatureEnabled } from 'src/featureFlags';\nimport { CHART_TYPE, TAB_TYPE } from '../../util/componentTypes';\nimport { DASHBOARD_GRID_ID, DASHBOARD_ROOT_ID } from '../../util/constants';\nexport const getFormData = (_ref) => {var _defaultDataMask$filt;let { datasetId, dependencies = {}, groupby, defaultDataMask, controlValues, filterType, sortMetric, adhoc_filters, time_range, granularity_sqla, type } = _ref;\n  const otherProps = {};\n  if (datasetId) {\n    otherProps.datasource = `${datasetId}__table`;\n  }\n  if (groupby) {\n    otherProps.groupby = [groupby];\n  }\n  if (sortMetric) {\n    otherProps.sortMetric = sortMetric;\n  }\n  return {\n    ...controlValues,\n    ...otherProps,\n    adhoc_filters: adhoc_filters != null ? adhoc_filters : [],\n    extra_filters: [],\n    extra_form_data: dependencies,\n    granularity_sqla,\n    metrics: ['count'],\n    row_limit: 1000,\n    showSearch: true,\n    defaultValue: defaultDataMask == null ? void 0 : (_defaultDataMask$filt = defaultDataMask.filterState) == null ? void 0 : _defaultDataMask$filt.value,\n    time_range,\n    url_params: extractUrlParams('regular'),\n    inView: true,\n    viz_type: filterType,\n    type };\n\n};\nexport function mergeExtraFormData(originalExtra, newExtra) {if (originalExtra === void 0) {originalExtra = {};}if (newExtra === void 0) {newExtra = {};}\n  const mergedExtra = {};\n  EXTRA_FORM_DATA_APPEND_KEYS.forEach((key) => {\n    const mergedValues = [\n    ...(originalExtra[key] || []),\n    ...(newExtra[key] || [])];\n\n    if (mergedValues.length) {\n      mergedExtra[key] = mergedValues;\n    }\n  });\n  EXTRA_FORM_DATA_OVERRIDE_KEYS.forEach((key) => {\n    const originalValue = originalExtra[key];\n    if (originalValue !== undefined) {\n      mergedExtra[key] = originalValue;\n    }\n    const newValue = newExtra[key];\n    if (newValue !== undefined) {\n      mergedExtra[key] = newValue;\n    }\n  });\n  return mergedExtra;\n}\nexport function isCrossFilter(vizType) {var _getChartMetadataRegi, _getChartMetadataRegi2;\n  // @ts-ignore need export from superset-ui `ItemWithValue`\n  return (_getChartMetadataRegi = getChartMetadataRegistry().items[vizType]) == null ? void 0 : (_getChartMetadataRegi2 = _getChartMetadataRegi.value.behaviors) == null ? void 0 : _includesInstanceProperty(_getChartMetadataRegi2).call(_getChartMetadataRegi2, Behavior.INTERACTIVE_CHART);\n}\nexport function getExtraFormData(dataMask, filterIdsAppliedOnChart) {\n  let extraFormData = {};\n  filterIdsAppliedOnChart.forEach((key) => {var _dataMask$key$extraFo, _dataMask$key;\n    extraFormData = mergeExtraFormData(extraFormData, (_dataMask$key$extraFo = (_dataMask$key = dataMask[key]) == null ? void 0 : _dataMask$key.extraFormData) != null ? _dataMask$key$extraFo : {});\n  });\n  return extraFormData;\n}\nexport function nativeFilterGate(behaviors) {\n  return !_includesInstanceProperty(behaviors).call(behaviors, Behavior.NATIVE_FILTER) ||\n  isFeatureEnabled(FeatureFlag.DASHBOARD_FILTERS_EXPERIMENTAL) &&\n  isFeatureEnabled(FeatureFlag.DASHBOARD_CROSS_FILTERS) &&\n  _includesInstanceProperty(behaviors).call(behaviors, Behavior.INTERACTIVE_CHART);\n}\nconst isComponentATab = (dashboardLayout, componentId) => {var _dashboardLayout$comp;return (dashboardLayout == null ? void 0 : (_dashboardLayout$comp = dashboardLayout[componentId]) == null ? void 0 : _dashboardLayout$comp.type) === TAB_TYPE;};\nconst findTabsWithChartsInScopeHelper = (dashboardLayout, chartsInScope, componentId, tabIds, tabsToHighlight) => {var _dashboardLayout$comp2, _dashboardLayout$comp3, _dashboardLayout$comp4, _dashboardLayout$comp5, _dashboardLayout$comp6, _dashboardLayout$comp7;\n  if ((dashboardLayout == null ? void 0 : (_dashboardLayout$comp2 = dashboardLayout[componentId]) == null ? void 0 : _dashboardLayout$comp2.type) === CHART_TYPE &&\n  _includesInstanceProperty(chartsInScope).call(chartsInScope, (_dashboardLayout$comp3 = dashboardLayout[componentId]) == null ? void 0 : (_dashboardLayout$comp4 = _dashboardLayout$comp3.meta) == null ? void 0 : _dashboardLayout$comp4.chartId)) {\n    tabIds.forEach(tabsToHighlight.add, tabsToHighlight);\n  }\n  if ((dashboardLayout == null ? void 0 : (_dashboardLayout$comp5 = dashboardLayout[componentId]) == null ? void 0 : (_dashboardLayout$comp6 = _dashboardLayout$comp5.children) == null ? void 0 : _dashboardLayout$comp6.length) === 0 ||\n  isComponentATab(dashboardLayout, componentId) &&\n  tabsToHighlight.has(componentId)) {\n    return;\n  }\n  (_dashboardLayout$comp7 = dashboardLayout[componentId]) == null ? void 0 : _dashboardLayout$comp7.children.forEach((childId) => findTabsWithChartsInScopeHelper(dashboardLayout, chartsInScope, childId, isComponentATab(dashboardLayout, childId) ? [...tabIds, childId] : tabIds, tabsToHighlight));\n};\nexport const findTabsWithChartsInScope = (dashboardLayout, chartsInScope) => {\n  const dashboardRoot = dashboardLayout[DASHBOARD_ROOT_ID];\n  const rootChildId = dashboardRoot.children[0];\n  const hasTopLevelTabs = rootChildId !== DASHBOARD_GRID_ID;\n  const tabsInScope = new Set();\n  if (hasTopLevelTabs) {var _dashboardLayout$root, _dashboardLayout$root2;\n    (_dashboardLayout$root = dashboardLayout[rootChildId]) == null ? void 0 : (_dashboardLayout$root2 = _dashboardLayout$root.children) == null ? void 0 : _dashboardLayout$root2.forEach((tabId) => findTabsWithChartsInScopeHelper(dashboardLayout, chartsInScope, tabId, [tabId], tabsInScope));\n  } else\n  {\n    Object.values(dashboardLayout).\n    filter((element) => (element == null ? void 0 : element.type) === TAB_TYPE).\n    forEach((element) => findTabsWithChartsInScopeHelper(dashboardLayout, chartsInScope, element.id, [element.id], tabsInScope));\n  }\n  return tabsInScope;\n};","map":{"version":3,"mappings":"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","names":["Behavior","EXTRA_FORM_DATA_APPEND_KEYS","EXTRA_FORM_DATA_OVERRIDE_KEYS","FeatureFlag","getChartMetadataRegistry","extractUrlParams","isFeatureEnabled","CHART_TYPE","TAB_TYPE","DASHBOARD_GRID_ID","DASHBOARD_ROOT_ID","getFormData","datasetId","dependencies","groupby","defaultDataMask","controlValues","filterType","sortMetric","adhoc_filters","time_range","granularity_sqla","type","otherProps","datasource","extra_filters","extra_form_data","metrics","row_limit","showSearch","defaultValue","filterState","value","url_params","inView","viz_type","mergeExtraFormData","originalExtra","newExtra","mergedExtra","forEach","key","mergedValues","length","originalValue","undefined","newValue","isCrossFilter","vizType","items","behaviors","INTERACTIVE_CHART","getExtraFormData","dataMask","filterIdsAppliedOnChart","extraFormData","nativeFilterGate","NATIVE_FILTER","DASHBOARD_FILTERS_EXPERIMENTAL","DASHBOARD_CROSS_FILTERS","isComponentATab","dashboardLayout","componentId","findTabsWithChartsInScopeHelper","chartsInScope","tabIds","tabsToHighlight","meta","chartId","add","children","has","childId","findTabsWithChartsInScope","dashboardRoot","rootChildId","hasTopLevelTabs","tabsInScope","Set","tabId","Object","values","filter","element","id"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/components/nativeFilters/utils.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  AdhocFilter,\n  Behavior,\n  DataMaskStateWithId,\n  EXTRA_FORM_DATA_APPEND_KEYS,\n  EXTRA_FORM_DATA_OVERRIDE_KEYS,\n  ExtraFormData,\n  FeatureFlag,\n  Filter,\n  getChartMetadataRegistry,\n  QueryFormData,\n} from '@superset-ui/core';\nimport { DashboardLayout } from 'src/dashboard/types';\nimport extractUrlParams from 'src/dashboard/util/extractUrlParams';\nimport { isFeatureEnabled } from 'src/featureFlags';\nimport { CHART_TYPE, TAB_TYPE } from '../../util/componentTypes';\nimport { DASHBOARD_GRID_ID, DASHBOARD_ROOT_ID } from '../../util/constants';\n\nexport const getFormData = ({\n  datasetId,\n  dependencies = {},\n  groupby,\n  defaultDataMask,\n  controlValues,\n  filterType,\n  sortMetric,\n  adhoc_filters,\n  time_range,\n  granularity_sqla,\n  type,\n}: Partial<Filter> & {\n  datasetId?: number;\n  dependencies?: object;\n  groupby?: string;\n  adhoc_filters?: AdhocFilter[];\n  time_range?: string;\n}): Partial<QueryFormData> => {\n  const otherProps: {\n    datasource?: string;\n    groupby?: string[];\n    sortMetric?: string;\n  } = {};\n  if (datasetId) {\n    otherProps.datasource = `${datasetId}__table`;\n  }\n  if (groupby) {\n    otherProps.groupby = [groupby];\n  }\n  if (sortMetric) {\n    otherProps.sortMetric = sortMetric;\n  }\n  return {\n    ...controlValues,\n    ...otherProps,\n    adhoc_filters: adhoc_filters ?? [],\n    extra_filters: [],\n    extra_form_data: dependencies,\n    granularity_sqla,\n    metrics: ['count'],\n    row_limit: 1000,\n    showSearch: true,\n    defaultValue: defaultDataMask?.filterState?.value,\n    time_range,\n    url_params: extractUrlParams('regular'),\n    inView: true,\n    viz_type: filterType,\n    type,\n  };\n};\n\nexport function mergeExtraFormData(\n  originalExtra: ExtraFormData = {},\n  newExtra: ExtraFormData = {},\n): ExtraFormData {\n  const mergedExtra: ExtraFormData = {};\n  EXTRA_FORM_DATA_APPEND_KEYS.forEach((key: string) => {\n    const mergedValues = [\n      ...(originalExtra[key] || []),\n      ...(newExtra[key] || []),\n    ];\n    if (mergedValues.length) {\n      mergedExtra[key] = mergedValues;\n    }\n  });\n  EXTRA_FORM_DATA_OVERRIDE_KEYS.forEach((key: string) => {\n    const originalValue = originalExtra[key];\n    if (originalValue !== undefined) {\n      mergedExtra[key] = originalValue;\n    }\n    const newValue = newExtra[key];\n    if (newValue !== undefined) {\n      mergedExtra[key] = newValue;\n    }\n  });\n  return mergedExtra;\n}\n\nexport function isCrossFilter(vizType: string) {\n  // @ts-ignore need export from superset-ui `ItemWithValue`\n  return getChartMetadataRegistry().items[vizType]?.value.behaviors?.includes(\n    Behavior.INTERACTIVE_CHART,\n  );\n}\n\nexport function getExtraFormData(\n  dataMask: DataMaskStateWithId,\n  filterIdsAppliedOnChart: string[],\n): ExtraFormData {\n  let extraFormData: ExtraFormData = {};\n  filterIdsAppliedOnChart.forEach(key => {\n    extraFormData = mergeExtraFormData(\n      extraFormData,\n      dataMask[key]?.extraFormData ?? {},\n    );\n  });\n  return extraFormData;\n}\n\nexport function nativeFilterGate(behaviors: Behavior[]): boolean {\n  return (\n    !behaviors.includes(Behavior.NATIVE_FILTER) ||\n    (isFeatureEnabled(FeatureFlag.DASHBOARD_FILTERS_EXPERIMENTAL) &&\n      isFeatureEnabled(FeatureFlag.DASHBOARD_CROSS_FILTERS) &&\n      behaviors.includes(Behavior.INTERACTIVE_CHART))\n  );\n}\n\nconst isComponentATab = (\n  dashboardLayout: DashboardLayout,\n  componentId: string,\n) => dashboardLayout?.[componentId]?.type === TAB_TYPE;\n\nconst findTabsWithChartsInScopeHelper = (\n  dashboardLayout: DashboardLayout,\n  chartsInScope: number[],\n  componentId: string,\n  tabIds: string[],\n  tabsToHighlight: Set<string>,\n) => {\n  if (\n    dashboardLayout?.[componentId]?.type === CHART_TYPE &&\n    chartsInScope.includes(dashboardLayout[componentId]?.meta?.chartId)\n  ) {\n    tabIds.forEach(tabsToHighlight.add, tabsToHighlight);\n  }\n  if (\n    dashboardLayout?.[componentId]?.children?.length === 0 ||\n    (isComponentATab(dashboardLayout, componentId) &&\n      tabsToHighlight.has(componentId))\n  ) {\n    return;\n  }\n  dashboardLayout[componentId]?.children.forEach(childId =>\n    findTabsWithChartsInScopeHelper(\n      dashboardLayout,\n      chartsInScope,\n      childId,\n      isComponentATab(dashboardLayout, childId) ? [...tabIds, childId] : tabIds,\n      tabsToHighlight,\n    ),\n  );\n};\n\nexport const findTabsWithChartsInScope = (\n  dashboardLayout: DashboardLayout,\n  chartsInScope: number[],\n) => {\n  const dashboardRoot = dashboardLayout[DASHBOARD_ROOT_ID];\n  const rootChildId = dashboardRoot.children[0];\n  const hasTopLevelTabs = rootChildId !== DASHBOARD_GRID_ID;\n  const tabsInScope = new Set<string>();\n  if (hasTopLevelTabs) {\n    dashboardLayout[rootChildId]?.children?.forEach(tabId =>\n      findTabsWithChartsInScopeHelper(\n        dashboardLayout,\n        chartsInScope,\n        tabId,\n        [tabId],\n        tabsInScope,\n      ),\n    );\n  } else {\n    Object.values(dashboardLayout)\n      .filter(element => element?.type === TAB_TYPE)\n      .forEach(element =>\n        findTabsWithChartsInScopeHelper(\n          dashboardLayout,\n          chartsInScope,\n          element.id,\n          [element.id],\n          tabsInScope,\n        ),\n      );\n  }\n  return tabsInScope;\n};\n"]},"metadata":{},"sourceType":"module"}