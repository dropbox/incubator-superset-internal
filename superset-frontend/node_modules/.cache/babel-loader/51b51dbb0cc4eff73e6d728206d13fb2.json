{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ExtensibleFunction } from '../models';\nimport { getNumberFormatter, NumberFormats } from '../number-format';\nexport const getCurrencySymbol = (currency) => {var _Intl$NumberFormat$fo;return (_Intl$NumberFormat$fo = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: currency.symbol }).\n\n  formatToParts(1).\n  find((x) => x.type === 'currency')) == null ? void 0 : _Intl$NumberFormat$fo.value;};\nclass CurrencyFormatter extends ExtensibleFunction {\n\n\n\n  constructor(config) {\n    super((value) => this.format(value));this.d3Format = void 0;this.locale = void 0;this.currency = void 0;\n    this.d3Format = config.d3Format || NumberFormats.SMART_NUMBER;\n    this.currency = config.currency;\n    this.locale = config.locale || 'en-US';\n  }\n  hasValidCurrency() {var _this$currency;\n    return Boolean((_this$currency = this.currency) == null ? void 0 : _this$currency.symbol);\n  }\n  getNormalizedD3Format() {\n    return this.d3Format.replace(/\\$|%/g, '');\n  }\n  format(value) {\n    const formattedValue = getNumberFormatter(this.getNormalizedD3Format())(value);\n    if (!this.hasValidCurrency()) {\n      return formattedValue;\n    }\n    if (this.currency.symbolPosition === 'prefix') {\n      return `${getCurrencySymbol(this.currency)} ${formattedValue}`;\n    }\n    return `${formattedValue} ${getCurrencySymbol(this.currency)}`;\n  }}\n\nexport default CurrencyFormatter;","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAmBA,SAASA,kBAAT,QAAmC,WAAnC;AACA,SAASC,kBAAT,EAA6BC,aAA7B,QAAkD,kBAAlD;AAaA,OAAO,MAAMC,iBAAiB,GAAG,CAACC,QAAD,gEAC/B,IAAIC,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+B;IAC7BC,KAAK,EAAE,UADsB;IAE7BH,QAAQ,EAAEA,QAAQ,CAACI,MAFU,EAA/B;;EAIGC,aAJH,CAIiB,CAJjB;EAKGC,IALH,CAKQ,EAAC,KAAIC,CAAC,CAACC,IAAF,KAAW,UALxB,CAD+B,qBAC/B,sBAKqCC,KANN,EAA1B;AAQP,MAAMC,iBAAN,SAAgCd,kBAAhC,CAAkD;;;;EAOhDe,YAAYC,MAAZ,EAA2C;IACzC,MAAM,CAACH,KAAD,KAAmB,KAAKI,MAAL,CAAYJ,KAAZ,CAAzB,EADyC,KAN3CK,QAM2C,eAJ3CC,MAI2C,eAF3Cf,QAE2C;IAEzC,KAAKc,QAAL,GAAgBF,MAAM,CAACE,QAAP,IAAmBhB,aAAa,CAACkB,YAAjD;IACA,KAAKhB,QAAL,GAAgBY,MAAM,CAACZ,QAAvB;IACA,KAAKe,MAAL,GAAcH,MAAM,CAACG,MAAP,IAAiB,OAA/B;EACD;EAEDE,gBAAgB;IACd,OAAOC,OAAO,mBAAC,KAAKlB,QAAN,qBAAC,eAAeI,MAAhB,CAAd;EACD;EAEDe,qBAAqB;IACnB,OAAO,KAAKL,QAAL,CAAcM,OAAd,CAAsB,OAAtB,EAA+B,EAA/B,CAAP;EACD;EAEDP,MAAM,CAACJ,KAAD,EAAc;IAClB,MAAMY,cAAc,GAAGxB,kBAAkB,CAAC,KAAKsB,qBAAL,EAAD,CAAlB,CACrBV,KADqB,CAAvB;IAGA,IAAI,CAAC,KAAKQ,gBAAL,EAAL,EAA8B;MAC5B,OAAOI,cAAP;IACD;IAED,IAAI,KAAKrB,QAAL,CAAcsB,cAAd,KAAiC,QAArC,EAA+C;MAC7C,OAAO,GAAGvB,iBAAiB,CAAC,KAAKC,QAAN,CAAe,IAAIqB,cAAc,EAA5D;IACD;IACD,OAAO,GAAGA,cAAc,IAAItB,iBAAiB,CAAC,KAAKC,QAAN,CAAe,EAA5D;EACD,CAlC+C;;AAqClD,eAAeU,iBAAf","names":["ExtensibleFunction","getNumberFormatter","NumberFormats","getCurrencySymbol","currency","Intl","NumberFormat","style","symbol","formatToParts","find","x","type","value","CurrencyFormatter","constructor","config","format","d3Format","locale","SMART_NUMBER","hasValidCurrency","Boolean","getNormalizedD3Format","replace","formattedValue","symbolPosition"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/packages/superset-ui-core/src/currency-format/CurrencyFormatter.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { ExtensibleFunction } from '../models';\nimport { getNumberFormatter, NumberFormats } from '../number-format';\nimport { Currency } from '../query';\n\ninterface CurrencyFormatterConfig {\n  d3Format?: string;\n  currency: Currency;\n  locale?: string;\n}\n\ninterface CurrencyFormatter {\n  (value: number | null | undefined): string;\n}\n\nexport const getCurrencySymbol = (currency: Currency) =>\n  new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: currency.symbol,\n  })\n    .formatToParts(1)\n    .find(x => x.type === 'currency')?.value;\n\nclass CurrencyFormatter extends ExtensibleFunction {\n  d3Format: string;\n\n  locale: string;\n\n  currency: Currency;\n\n  constructor(config: CurrencyFormatterConfig) {\n    super((value: number) => this.format(value));\n    this.d3Format = config.d3Format || NumberFormats.SMART_NUMBER;\n    this.currency = config.currency;\n    this.locale = config.locale || 'en-US';\n  }\n\n  hasValidCurrency() {\n    return Boolean(this.currency?.symbol);\n  }\n\n  getNormalizedD3Format() {\n    return this.d3Format.replace(/\\$|%/g, '');\n  }\n\n  format(value: number) {\n    const formattedValue = getNumberFormatter(this.getNormalizedD3Format())(\n      value,\n    );\n    if (!this.hasValidCurrency()) {\n      return formattedValue as string;\n    }\n\n    if (this.currency.symbolPosition === 'prefix') {\n      return `${getCurrencySymbol(this.currency)} ${formattedValue}`;\n    }\n    return `${formattedValue} ${getCurrencySymbol(this.currency)}`;\n  }\n}\n\nexport default CurrencyFormatter;\n"]},"metadata":{},"sourceType":"module"}