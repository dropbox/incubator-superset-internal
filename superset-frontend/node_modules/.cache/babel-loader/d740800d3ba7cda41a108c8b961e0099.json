{"ast":null,"code":"import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\"; /* eslint-disable camelcase */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitationsxw\n * under the License.\n */\nimport { ensureIsArray, getMetricLabel, ComparisonType, getXAxisLabel } from '@superset-ui/core';\nimport { getMetricOffsetsMap, isTimeComparison } from './utils';\nexport const renameOperator = (formData, queryObject) => {var _context;\n  const metrics = ensureIsArray(queryObject.metrics);\n  const columns = ensureIsArray(queryObject.series_columns || queryObject.columns);\n  const { truncate_metric } = formData;\n  const xAxisLabel = getXAxisLabel(formData);\n  // remove or rename top level of column name(metric name) in the MultiIndex when\n  // 1) only 1 metric\n  // 2) dimension exist\n  // 3) xAxis exist\n  // 4) time comparison exist, and comparison type is \"actual values\"\n  // 5) truncate_metric in form_data and truncate_metric is true\n  if (metrics.length === 1 &&\n  columns.length > 0 &&\n  xAxisLabel &&\n  !(\n  // todo: we should provide an approach to handle derived metrics\n  isTimeComparison(formData, queryObject) &&\n  _includesInstanceProperty(_context = [\n  ComparisonType.Difference,\n  ComparisonType.Ratio,\n  ComparisonType.Percentage]).call(_context,\n  formData.comparison_type)) &&\n  truncate_metric !== undefined &&\n  !!truncate_metric) {\n    const renamePairs = [];\n    if (\n    // \"actual values\" will add derived metric.\n    // we will rename the \"metric\" from the metricWithOffset label\n    // for example: \"count__1 year ago\" =>\t\"1 year ago\"\n    isTimeComparison(formData, queryObject) &&\n    formData.comparison_type === ComparisonType.Values) {\n      const metricOffsetMap = getMetricOffsetsMap(formData, queryObject);\n      const timeOffsets = ensureIsArray(formData.time_compare);\n      [...metricOffsetMap.keys()].forEach((metricWithOffset) => {\n        const offsetLabel = timeOffsets.find((offset) => _includesInstanceProperty(metricWithOffset).call(metricWithOffset, offset));\n        renamePairs.push([metricWithOffset, offsetLabel]);\n      });\n    }\n    renamePairs.push([getMetricLabel(metrics[0]), null]);\n    return {\n      operation: 'rename',\n      options: {\n        columns: Object.fromEntries(renamePairs),\n        level: 0,\n        inplace: true } };\n\n\n  }\n  return undefined;\n};","map":{"version":3,"mappings":"iGAAA;AACA;;;;;;;;;;;;;;;;;;AAkBA,SAEEA,aAFF,EAGEC,cAHF,EAIEC,cAJF,EAKEC,aALF,QAMO,mBANP;AAQA,SAASC,mBAAT,EAA8BC,gBAA9B,QAAsD,SAAtD;AAEA,OAAO,MAAMC,cAAc,GAAgD,CACzEC,QADyE,EAEzEC,WAFyE,KAGvE;EACF,MAAMC,OAAO,GAAGT,aAAa,CAACQ,WAAW,CAACC,OAAb,CAA7B;EACA,MAAMC,OAAO,GAAGV,aAAa,CAC3BQ,WAAW,CAACG,cAAZ,IAA8BH,WAAW,CAACE,OADf,CAA7B;EAGA,MAAM,EAAEE,eAAF,KAAsBL,QAA5B;EACA,MAAMM,UAAU,GAAGV,aAAa,CAACI,QAAD,CAAhC;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IACEE,OAAO,CAACK,MAAR,KAAmB,CAAnB;EACAJ,OAAO,CAACI,MAAR,GAAiB,CADjB;EAEAD,UAFA;EAGA;EACE;EAEER,gBAAgB,CAACE,QAAD,EAAWC,WAAX,CAAhB;EACA;EACEN,cAAc,CAACa,UADjB;EAEEb,cAAc,CAACc,KAFjB;EAGEd,cAAc,CAACe,UAHjB;EAIWV,QAAQ,CAACW,eAJpB,CAJJ,CAHA;EAcAN,eAAe,KAAKO,SAdpB;EAeA,CAAC,CAACP,eAhBJ,EAiBE;IACA,MAAMQ,WAAW,GAA8B,EAA/C;IAEA;IACE;IACA;IACA;IACAf,gBAAgB,CAACE,QAAD,EAAWC,WAAX,CAAhB;IACAD,QAAQ,CAACW,eAAT,KAA6BhB,cAAc,CAACmB,MAL9C,EAME;MACA,MAAMC,eAAe,GAAGlB,mBAAmB,CAACG,QAAD,EAAWC,WAAX,CAA3C;MACA,MAAMe,WAAW,GAAGvB,aAAa,CAACO,QAAQ,CAACiB,YAAV,CAAjC;MACA,CAAC,GAAGF,eAAe,CAACG,IAAhB,EAAJ,EAA4BC,OAA5B,CAAoC,iBAAgB,KAAG;QACrD,MAAMC,WAAW,GAAGJ,WAAW,CAACK,IAAZ,CAAiB,OAAM,KACzC,0CAAgB,MAAhB,iBAAgB,EAAUC,MAAV,CADE,CAApB;QAGAT,WAAW,CAACU,IAAZ,CAAiB,CAACC,gBAAD,EAAmBJ,WAAnB,CAAjB;MACD,CALD;IAMD;IAEDP,WAAW,CAACU,IAAZ,CAAiB,CAAC7B,cAAc,CAACQ,OAAO,CAAC,CAAD,CAAR,CAAf,EAA6B,IAA7B,CAAjB;IAEA,OAAO;MACLuB,SAAS,EAAE,QADN;MAELC,OAAO,EAAE;QACPvB,OAAO,EAAEwB,MAAM,CAACC,WAAP,CAAmBf,WAAnB,CADF;QAEPgB,KAAK,EAAE,CAFA;QAGPC,OAAO,EAAE,IAHF,EAFJ,EAAP;;;EAQD;EAED,OAAOlB,SAAP;AACD,CAlEM","names":["ensureIsArray","getMetricLabel","ComparisonType","getXAxisLabel","getMetricOffsetsMap","isTimeComparison","renameOperator","formData","queryObject","metrics","columns","series_columns","truncate_metric","xAxisLabel","length","Difference","Ratio","Percentage","comparison_type","undefined","renamePairs","Values","metricOffsetMap","timeOffsets","time_compare","keys","forEach","offsetLabel","find","offset","push","metricWithOffset","operation","options","Object","fromEntries","level","inplace"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/packages/superset-ui-chart-controls/src/operators/renameOperator.ts"],"sourcesContent":["/* eslint-disable camelcase */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitationsxw\n * under the License.\n */\nimport {\n  PostProcessingRename,\n  ensureIsArray,\n  getMetricLabel,\n  ComparisonType,\n  getXAxisLabel,\n} from '@superset-ui/core';\nimport { PostProcessingFactory } from './types';\nimport { getMetricOffsetsMap, isTimeComparison } from './utils';\n\nexport const renameOperator: PostProcessingFactory<PostProcessingRename> = (\n  formData,\n  queryObject,\n) => {\n  const metrics = ensureIsArray(queryObject.metrics);\n  const columns = ensureIsArray(\n    queryObject.series_columns || queryObject.columns,\n  );\n  const { truncate_metric } = formData;\n  const xAxisLabel = getXAxisLabel(formData);\n  // remove or rename top level of column name(metric name) in the MultiIndex when\n  // 1) only 1 metric\n  // 2) dimension exist\n  // 3) xAxis exist\n  // 4) time comparison exist, and comparison type is \"actual values\"\n  // 5) truncate_metric in form_data and truncate_metric is true\n  if (\n    metrics.length === 1 &&\n    columns.length > 0 &&\n    xAxisLabel &&\n    !(\n      // todo: we should provide an approach to handle derived metrics\n      (\n        isTimeComparison(formData, queryObject) &&\n        [\n          ComparisonType.Difference,\n          ComparisonType.Ratio,\n          ComparisonType.Percentage,\n        ].includes(formData.comparison_type)\n      )\n    ) &&\n    truncate_metric !== undefined &&\n    !!truncate_metric\n  ) {\n    const renamePairs: [string, string | null][] = [];\n\n    if (\n      // \"actual values\" will add derived metric.\n      // we will rename the \"metric\" from the metricWithOffset label\n      // for example: \"count__1 year ago\" =>\t\"1 year ago\"\n      isTimeComparison(formData, queryObject) &&\n      formData.comparison_type === ComparisonType.Values\n    ) {\n      const metricOffsetMap = getMetricOffsetsMap(formData, queryObject);\n      const timeOffsets = ensureIsArray(formData.time_compare);\n      [...metricOffsetMap.keys()].forEach(metricWithOffset => {\n        const offsetLabel = timeOffsets.find(offset =>\n          metricWithOffset.includes(offset),\n        );\n        renamePairs.push([metricWithOffset, offsetLabel]);\n      });\n    }\n\n    renamePairs.push([getMetricLabel(metrics[0]), null]);\n\n    return {\n      operation: 'rename',\n      options: {\n        columns: Object.fromEntries(renamePairs),\n        level: 0,\n        inplace: true,\n      },\n    };\n  }\n\n  return undefined;\n};\n"]},"metadata":{},"sourceType":"module"}