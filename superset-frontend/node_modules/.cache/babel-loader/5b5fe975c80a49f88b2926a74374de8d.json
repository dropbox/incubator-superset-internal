{"ast":null,"code":"/* eslint-disable camelcase */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nexport function isPhysicalColumn(column) {\n  return typeof column === 'string';\n}\nexport function isAdhocColumn(column) {\n  return typeof column !== 'string' &&\n  (column == null ? void 0 : column.sqlExpression) !== undefined &&\n  (column == null ? void 0 : column.label) !== undefined && (\n  (column == null ? void 0 : column.expressionType) === undefined || (column == null ? void 0 : column.expressionType) === 'SQL');\n}\nexport function isQueryFormColumn(column) {\n  return isPhysicalColumn(column) || isAdhocColumn(column);\n}\nexport default {};","map":{"version":3,"mappings":"AAAA;AACA;;;;;;;;;;;;;;;;;;AA8DA,OAAM,SAAUA,gBAAV,CAA2BC,MAA3B,EAAuC;EAC3C,OAAO,OAAOA,MAAP,KAAkB,QAAzB;AACD;AAED,OAAM,SAAUC,aAAV,CAAwBD,MAAxB,EAAoC;EACxC,OACE,OAAOA,MAAP,KAAkB,QAAlB;EACA,OAAM,QAAN,kBAAM,CAAEE,aAAR,MAA0BC,SAD1B;EAEA,OAAM,QAAN,kBAAM,CAAEC,KAAR,MAAkBD,SAFlB;EAGC,OAAM,QAAN,kBAAM,CAAEE,cAAR,MAA2BF,SAA3B,IAAwC,OAAM,QAAN,kBAAM,CAAEE,cAAR,MAA2B,KAHpE,CADF;AAMD;AAED,OAAM,SAAUC,iBAAV,CAA4BN,MAA5B,EAAuC;EAC3C,OAAOD,gBAAgB,CAACC,MAAD,CAAhB,IAA4BC,aAAa,CAACD,MAAD,CAAhD;AACD;AAED,eAAe,EAAf","names":["isPhysicalColumn","column","isAdhocColumn","sqlExpression","undefined","label","expressionType","isQueryFormColumn"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/query/types/Column.ts"],"sourcesContent":["/* eslint-disable camelcase */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { GenericDataType } from './QueryResponse';\nimport { QueryFormColumn } from './QueryFormData';\n\nexport interface AdhocColumn {\n  hasCustomLabel?: boolean;\n  label?: string;\n  optionName?: string;\n  sqlExpression: string;\n  expressionType: 'SQL';\n  columnType?: 'BASE_AXIS' | 'SERIES';\n  timeGrain?: string;\n  datasourceWarning?: boolean;\n}\n\n/**\n * A column that is physically defined in datasource.\n */\nexport type PhysicalColumn = string;\n\n/**\n * Column information defined in datasource.\n */\nexport interface Column {\n  id?: number;\n  type?: string;\n  type_generic?: GenericDataType;\n  column_name: string;\n  groupby?: boolean;\n  is_dttm?: boolean;\n  filterable?: boolean;\n  verbose_name?: string | null;\n  description?: string | null;\n  expression?: string | null;\n  database_expression?: string | null;\n  python_date_format?: string | null;\n\n  // used for advanced_data_type\n  optionName?: string;\n  filterBy?: string;\n  value?: string;\n  advanced_data_type?: string;\n}\n\nexport function isPhysicalColumn(column?: any): column is PhysicalColumn {\n  return typeof column === 'string';\n}\n\nexport function isAdhocColumn(column?: any): column is AdhocColumn {\n  return (\n    typeof column !== 'string' &&\n    column?.sqlExpression !== undefined &&\n    column?.label !== undefined &&\n    (column?.expressionType === undefined || column?.expressionType === 'SQL')\n  );\n}\n\nexport function isQueryFormColumn(column: any): column is QueryFormColumn {\n  return isPhysicalColumn(column) || isAdhocColumn(column);\n}\n\nexport default {};\n"]},"metadata":{},"sourceType":"module"}