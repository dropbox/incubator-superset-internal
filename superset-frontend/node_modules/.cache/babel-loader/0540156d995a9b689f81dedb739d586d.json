{"ast":null,"code":"import _transform from \"lodash/transform\";import _groupBy from \"lodash/groupBy\";import _isNumber from \"lodash/isNumber\";\nfunction getMetricValue(datum, metric) {\n  return _isNumber(datum[metric]) ? datum[metric] : 0;\n}\nexport function treeBuilder(data, groupBy, metric, secondaryMetric) {\n  const [curGroupBy, ...restGroupby] = groupBy;\n  const curData = _groupBy(data, curGroupBy);\n  return _transform(curData, (result, value, key) => {\n    const name = curData[key][0][curGroupBy];\n    if (!restGroupby.length) {\n      (value != null ? value : []).forEach((datum) => {\n        const metricValue = getMetricValue(datum, metric);\n        const secondaryValue = secondaryMetric ?\n        getMetricValue(datum, secondaryMetric) :\n        metricValue;\n        const item = {\n          name,\n          value: metricValue,\n          secondaryValue,\n          groupBy: curGroupBy };\n\n        result.push(item);\n      });\n    } else\n    {\n      const children = treeBuilder(value, restGroupby, metric, secondaryMetric);\n      const metricValue = children.reduce((prev, cur) => prev + cur.value, 0);\n      const secondaryValue = secondaryMetric ?\n      children.reduce((prev, cur) => prev + cur.secondaryValue, 0) :\n      metricValue;\n      result.push({\n        name,\n        children,\n        value: metricValue,\n        secondaryValue,\n        groupBy: curGroupBy });\n\n    }\n  }, []);\n}","map":{"version":3,"mappings":";AA6BA,SAASA,cAAT,CAAwBC,KAAxB,EAA2CC,MAA3C,EAAyD;EACvD,OAAO,UAAWD,KAAK,CAACC,MAAD,CAAhB,IAA6BD,KAAK,CAACC,MAAD,CAAlC,GAAwD,CAA/D;AACD;AAED,OAAM,SAAUC,WAAV,CACJC,IADI,EAEJC,OAFI,EAGJH,MAHI,EAIJI,eAJI,EAIoB;EAExB,MAAM,CAACC,UAAD,EAAa,GAAGC,WAAhB,IAA+BH,OAArC;EACA,MAAMI,OAAO,GAAG,SAAUL,IAAV,EAAgBG,UAAhB,CAAhB;EACA,OAAO,WACLE,OADK,EAEL,CAACC,MAAD,EAASC,KAAT,EAAgBC,GAAhB,KAAuB;IACrB,MAAMC,IAAI,GAAGJ,OAAO,CAACG,GAAD,CAAP,CAAa,CAAb,EAAgBL,UAAhB,CAAb;IACA,IAAI,CAACC,WAAW,CAACM,MAAjB,EAAyB;MACvB,CAACH,KAAD,WAACA,KAAD,GAAU,EAAV,EAAcI,OAAd,CAAsB,MAAK,KAAG;QAC5B,MAAMC,WAAW,GAAGhB,cAAc,CAACC,KAAD,EAAQC,MAAR,CAAlC;QACA,MAAMe,cAAc,GAAGX,eAAe;QAClCN,cAAc,CAACC,KAAD,EAAQK,eAAR,CADoB;QAElCU,WAFJ;QAGA,MAAME,IAAI,GAAG;UACXL,IADW;UAEXF,KAAK,EAAEK,WAFI;UAGXC,cAHW;UAIXZ,OAAO,EAAEE,UAJE,EAAb;;QAMAG,MAAM,CAACS,IAAP,CAAYD,IAAZ;MACD,CAZD;IAaD,CAdD;IAcO;MACL,MAAME,QAAQ,GAAGjB,WAAW,CAC1BQ,KAD0B,EAE1BH,WAF0B,EAG1BN,MAH0B,EAI1BI,eAJ0B,CAA5B;MAMA,MAAMU,WAAW,GAAGI,QAAQ,CAACC,MAAT,CAClB,CAACC,IAAD,EAAOC,GAAP,KAAeD,IAAI,GAAIC,GAAG,CAACZ,KADT,EAElB,CAFkB,CAApB;MAIA,MAAMM,cAAc,GAAGX,eAAe;MAClCc,QAAQ,CAACC,MAAT,CACE,CAACC,IAAD,EAAOC,GAAP,KAAeD,IAAI,GAAIC,GAAG,CAACN,cAD7B,EAEE,CAFF,CADkC;MAKlCD,WALJ;MAMAN,MAAM,CAACS,IAAP,CAAY;QACVN,IADU;QAEVO,QAFU;QAGVT,KAAK,EAAEK,WAHG;QAIVC,cAJU;QAKVZ,OAAO,EAAEE,UALC,EAAZ;;IAOD;EACF,CA3CI,EA4CL,EA5CK,CAAP;AA8CD","names":["getMetricValue","datum","metric","treeBuilder","data","groupBy","secondaryMetric","curGroupBy","restGroupby","curData","result","value","key","name","length","forEach","metricValue","secondaryValue","item","push","children","reduce","prev","cur"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/plugins/plugin-chart-echarts/src/utils/treeBuilder.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { DataRecord, DataRecordValue } from '@superset-ui/core';\nimport _ from 'lodash';\n\nexport type TreeNode = {\n  name: DataRecordValue;\n  value: number;\n  secondaryValue: number;\n  groupBy: string;\n  children?: TreeNode[];\n};\n\nfunction getMetricValue(datum: DataRecord, metric: string) {\n  return _.isNumber(datum[metric]) ? (datum[metric] as number) : 0;\n}\n\nexport function treeBuilder(\n  data: DataRecord[],\n  groupBy: string[],\n  metric: string,\n  secondaryMetric?: string,\n): TreeNode[] {\n  const [curGroupBy, ...restGroupby] = groupBy;\n  const curData = _.groupBy(data, curGroupBy);\n  return _.transform(\n    curData,\n    (result, value, key) => {\n      const name = curData[key][0][curGroupBy]!;\n      if (!restGroupby.length) {\n        (value ?? []).forEach(datum => {\n          const metricValue = getMetricValue(datum, metric);\n          const secondaryValue = secondaryMetric\n            ? getMetricValue(datum, secondaryMetric)\n            : metricValue;\n          const item = {\n            name,\n            value: metricValue,\n            secondaryValue,\n            groupBy: curGroupBy,\n          };\n          result.push(item);\n        });\n      } else {\n        const children = treeBuilder(\n          value,\n          restGroupby,\n          metric,\n          secondaryMetric,\n        );\n        const metricValue = children.reduce(\n          (prev, cur) => prev + (cur.value as number),\n          0,\n        );\n        const secondaryValue = secondaryMetric\n          ? children.reduce(\n              (prev, cur) => prev + (cur.secondaryValue as number),\n              0,\n            )\n          : metricValue;\n        result.push({\n          name,\n          children,\n          value: metricValue,\n          secondaryValue,\n          groupBy: curGroupBy,\n        });\n      }\n    },\n    [] as TreeNode[],\n  );\n}\n"]},"metadata":{},"sourceType":"module"}