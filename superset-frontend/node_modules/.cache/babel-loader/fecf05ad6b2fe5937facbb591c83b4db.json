{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { TimeGranularity } from '../types';\nimport createTime from './createTime';\nconst MS_IN_SECOND = 1000;\nconst MS_IN_MINUTE = 60 * MS_IN_SECOND;\nconst MS_IN_HOUR = 60 * MS_IN_MINUTE;\nfunction deductOneMs(time) {\n  return new Date(time.getTime() - 1);\n}\nfunction computeEndTimeFromGranularity(time, granularity, useLocalTime) {\n  const date = useLocalTime ? time.getDate() : time.getUTCDate();\n  const month = useLocalTime ? time.getMonth() : time.getUTCMonth();\n  const year = useLocalTime ? time.getFullYear() : time.getUTCFullYear();\n  const mode = useLocalTime ? 'local' : 'utc';\n  switch (granularity) {\n    case TimeGranularity.SECOND:\n      return new Date(time.getTime() + MS_IN_SECOND - 1);\n    case TimeGranularity.MINUTE:\n      return new Date(time.getTime() + MS_IN_MINUTE - 1);\n    case TimeGranularity.FIVE_MINUTES:\n      return new Date(time.getTime() + MS_IN_MINUTE * 5 - 1);\n    case TimeGranularity.TEN_MINUTES:\n      return new Date(time.getTime() + MS_IN_MINUTE * 10 - 1);\n    case TimeGranularity.FIFTEEN_MINUTES:\n      return new Date(time.getTime() + MS_IN_MINUTE * 15 - 1);\n    case TimeGranularity.THIRTY_MINUTES:\n      return new Date(time.getTime() + MS_IN_MINUTE * 30 - 1);\n    case TimeGranularity.HOUR:\n      return new Date(time.getTime() + MS_IN_HOUR - 1);\n    // For the day granularity and above, using Date overflow is better than adding timestamp\n    // because it will also handle daylight saving.\n    case TimeGranularity.WEEK:\n    case TimeGranularity.WEEK_STARTING_SUNDAY:\n    case TimeGranularity.WEEK_STARTING_MONDAY:\n      return deductOneMs(createTime(mode, year, month, date + 7));\n    case TimeGranularity.MONTH:\n      return deductOneMs(createTime(mode, year, month + 1));\n    case TimeGranularity.QUARTER:\n      return deductOneMs(createTime(mode, year, (Math.floor(month / 3) + 1) * 3));\n    case TimeGranularity.YEAR:\n      return deductOneMs(createTime(mode, year + 1));\n    // For the WEEK_ENDING_XXX cases,\n    // currently assume \"time\" returned from database is supposed to be the end time\n    // (in contrast to all other granularities that the returned time is start time).\n    // However, the returned \"time\" is at 00:00:00.000, so have to add 23:59:59.999.\n    case TimeGranularity.WEEK_ENDING_SATURDAY:\n    case TimeGranularity.WEEK_ENDING_SUNDAY:\n    case TimeGranularity.DATE:\n    case TimeGranularity.DAY:\n    default:\n      return deductOneMs(createTime(mode, year, month, date + 1));}\n\n}\nexport default function createTimeRangeFromGranularity(time, granularity, useLocalTime) {if (useLocalTime === void 0) {useLocalTime = false;}\n  const endTime = computeEndTimeFromGranularity(time, granularity, useLocalTime);\n  if (granularity === TimeGranularity.WEEK_ENDING_SATURDAY ||\n  granularity === TimeGranularity.WEEK_ENDING_SUNDAY) {\n    const date = useLocalTime ? time.getDate() : time.getUTCDate();\n    const month = useLocalTime ? time.getMonth() : time.getUTCMonth();\n    const year = useLocalTime ? time.getFullYear() : time.getUTCFullYear();\n    const startTime = createTime(useLocalTime ? 'local' : 'utc', year, month, date - 6);\n    return [startTime, endTime];\n  }\n  return [time, endTime];\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(MS_IN_SECOND, \"MS_IN_SECOND\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/time-format/utils/createTimeRangeFromGranularity.ts\");reactHotLoader.register(MS_IN_MINUTE, \"MS_IN_MINUTE\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/time-format/utils/createTimeRangeFromGranularity.ts\");reactHotLoader.register(MS_IN_HOUR, \"MS_IN_HOUR\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/time-format/utils/createTimeRangeFromGranularity.ts\");reactHotLoader.register(deductOneMs, \"deductOneMs\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/time-format/utils/createTimeRangeFromGranularity.ts\");reactHotLoader.register(computeEndTimeFromGranularity, \"computeEndTimeFromGranularity\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/time-format/utils/createTimeRangeFromGranularity.ts\");reactHotLoader.register(createTimeRangeFromGranularity, \"createTimeRangeFromGranularity\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/time-format/utils/createTimeRangeFromGranularity.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"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","names":["TimeGranularity","createTime","MS_IN_SECOND","MS_IN_MINUTE","MS_IN_HOUR","deductOneMs","time","Date","getTime","computeEndTimeFromGranularity","granularity","useLocalTime","date","getDate","getUTCDate","month","getMonth","getUTCMonth","year","getFullYear","getUTCFullYear","mode","SECOND","MINUTE","FIVE_MINUTES","TEN_MINUTES","FIFTEEN_MINUTES","THIRTY_MINUTES","HOUR","WEEK","WEEK_STARTING_SUNDAY","WEEK_STARTING_MONDAY","MONTH","QUARTER","Math","floor","YEAR","WEEK_ENDING_SATURDAY","WEEK_ENDING_SUNDAY","DATE","DAY","createTimeRangeFromGranularity","endTime","startTime"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/time-format/utils/createTimeRangeFromGranularity.ts"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { TimeGranularity } from '../types';\nimport createTime from './createTime';\n\nconst MS_IN_SECOND = 1000;\nconst MS_IN_MINUTE = 60 * MS_IN_SECOND;\nconst MS_IN_HOUR = 60 * MS_IN_MINUTE;\n\nfunction deductOneMs(time: Date) {\n  return new Date(time.getTime() - 1);\n}\n\nfunction computeEndTimeFromGranularity(\n  time: Date,\n  granularity: TimeGranularity,\n  useLocalTime: boolean,\n) {\n  const date = useLocalTime ? time.getDate() : time.getUTCDate();\n  const month = useLocalTime ? time.getMonth() : time.getUTCMonth();\n  const year = useLocalTime ? time.getFullYear() : time.getUTCFullYear();\n  const mode = useLocalTime ? 'local' : 'utc';\n\n  switch (granularity) {\n    case TimeGranularity.SECOND:\n      return new Date(time.getTime() + MS_IN_SECOND - 1);\n    case TimeGranularity.MINUTE:\n      return new Date(time.getTime() + MS_IN_MINUTE - 1);\n    case TimeGranularity.FIVE_MINUTES:\n      return new Date(time.getTime() + MS_IN_MINUTE * 5 - 1);\n    case TimeGranularity.TEN_MINUTES:\n      return new Date(time.getTime() + MS_IN_MINUTE * 10 - 1);\n    case TimeGranularity.FIFTEEN_MINUTES:\n      return new Date(time.getTime() + MS_IN_MINUTE * 15 - 1);\n    case TimeGranularity.THIRTY_MINUTES:\n      return new Date(time.getTime() + MS_IN_MINUTE * 30 - 1);\n    case TimeGranularity.HOUR:\n      return new Date(time.getTime() + MS_IN_HOUR - 1);\n    // For the day granularity and above, using Date overflow is better than adding timestamp\n    // because it will also handle daylight saving.\n    case TimeGranularity.WEEK:\n    case TimeGranularity.WEEK_STARTING_SUNDAY:\n    case TimeGranularity.WEEK_STARTING_MONDAY:\n      return deductOneMs(createTime(mode, year, month, date + 7));\n    case TimeGranularity.MONTH:\n      return deductOneMs(createTime(mode, year, month + 1));\n    case TimeGranularity.QUARTER:\n      return deductOneMs(\n        createTime(mode, year, (Math.floor(month / 3) + 1) * 3),\n      );\n    case TimeGranularity.YEAR:\n      return deductOneMs(createTime(mode, year + 1));\n    // For the WEEK_ENDING_XXX cases,\n    // currently assume \"time\" returned from database is supposed to be the end time\n    // (in contrast to all other granularities that the returned time is start time).\n    // However, the returned \"time\" is at 00:00:00.000, so have to add 23:59:59.999.\n    case TimeGranularity.WEEK_ENDING_SATURDAY:\n    case TimeGranularity.WEEK_ENDING_SUNDAY:\n    case TimeGranularity.DATE:\n    case TimeGranularity.DAY:\n    default:\n      return deductOneMs(createTime(mode, year, month, date + 1));\n  }\n}\n\nexport default function createTimeRangeFromGranularity(\n  time: Date,\n  granularity: TimeGranularity,\n  useLocalTime = false,\n) {\n  const endTime = computeEndTimeFromGranularity(\n    time,\n    granularity,\n    useLocalTime,\n  );\n\n  if (\n    granularity === TimeGranularity.WEEK_ENDING_SATURDAY ||\n    granularity === TimeGranularity.WEEK_ENDING_SUNDAY\n  ) {\n    const date = useLocalTime ? time.getDate() : time.getUTCDate();\n    const month = useLocalTime ? time.getMonth() : time.getUTCMonth();\n    const year = useLocalTime ? time.getFullYear() : time.getUTCFullYear();\n    const startTime = createTime(\n      useLocalTime ? 'local' : 'utc',\n      year,\n      month,\n      date - 6,\n    );\n    return [startTime, endTime];\n  }\n\n  return [time, endTime];\n}\n"]},"metadata":{},"sourceType":"module"}