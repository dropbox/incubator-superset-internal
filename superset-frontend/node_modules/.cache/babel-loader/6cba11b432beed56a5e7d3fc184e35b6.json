{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useMemo } from 'react';\nimport { css, styled, t, useTheme } from '@superset-ui/core';\nimport { isCrossFilterScopeGlobal } from 'src/dashboard/types';\nimport { useSelector } from 'react-redux';\nimport { CHART_TYPE } from 'src/dashboard/util/componentTypes';\nimport Icons from 'src/components/Icons';\nimport Button from 'src/components/Button';\nimport { FilterTitle } from 'src/dashboard/components/nativeFilters/FiltersConfigModal/FilterTitleContainer';\nimport { NEW_CHART_SCOPING_ID } from './constants';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst AddButtonContainer = styled.div`\n  ${(_ref) => {let { theme } = _ref;return css`\n    margin-top: ${theme.gridUnit * 2}px;\n\n    & button > [role='img']:first-of-type {\n      margin-right: ${theme.gridUnit}px;\n      line-height: 0;\n    }\n\n    span[role='img'] {\n      padding-bottom: 1px;\n    }\n\n    .ant-btn > .anticon + span {\n      margin-left: 0;\n    }\n  `;}}\n`;\nconst ScopingTitle = (_ref2) => {let { isActive, onClick, id, label, onRemove } = _ref2;\n  const theme = useTheme();\n  return ___EmotionJSX(FilterTitle, { className: isActive ? 'active' : '', onClick: () => onClick(id) },\n  label,\n  ___EmotionJSX(Icons.Trash, { iconColor: theme.colors.grayscale.light3, onClick: (event) => {\n      event.stopPropagation();\n      onRemove(id);\n    }, css: css`\n          margin-left: auto;\n        ` }));\n\n};\nexport const ChartsScopingListPanel = (_ref3) => {let { activeChartId, chartConfigs, setCurrentChartId, removeCustomScope, addNewCustomScope } = _ref3;\n  const theme = useTheme();\n  const layout = useSelector((state) => state.dashboardLayout.present);\n  const customScopedCharts = useMemo(() => {\n    const chartLayoutItems = Object.values(layout).filter((item) => item.type === CHART_TYPE);\n    return Object.values(chartConfigs).\n    filter((config) => !isCrossFilterScopeGlobal(config.crossFilters.scope) &&\n    config.id !== NEW_CHART_SCOPING_ID).\n    map((config) => {\n      const chartLayoutItem = chartLayoutItems.find((item) => item.meta.chartId === config.id);\n      return {\n        id: config.id,\n        label: (chartLayoutItem == null ? void 0 : chartLayoutItem.meta.sliceNameOverride) || (\n        chartLayoutItem == null ? void 0 : chartLayoutItem.meta.sliceName) ||\n        '' };\n\n    });\n  }, [chartConfigs, layout]);\n  const newScoping = chartConfigs[NEW_CHART_SCOPING_ID];\n  return ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(AddButtonContainer, null,\n  ___EmotionJSX(Button, { buttonStyle: \"link\", buttonSize: \"xsmall\", onClick: addNewCustomScope },\n  ___EmotionJSX(Icons.PlusSmall, null), \" \", t('Add custom scoping'))),\n\n\n  ___EmotionJSX(FilterTitle, { onClick: () => setCurrentChartId(undefined), className: activeChartId === undefined ? 'active' : '' },\n  t('All charts/global scoping')),\n\n  ___EmotionJSX(\"div\", { css: css`\n          width: 100%;\n          height: 1px;\n          background-color: ${theme.colors.grayscale.light3};\n          margin: ${theme.gridUnit * 3}px 0;\n        ` }),\n  customScopedCharts.map((chartInfo) => ___EmotionJSX(ScopingTitle, { key: chartInfo.id, id: chartInfo.id, onClick: setCurrentChartId, onRemove: removeCustomScope, isActive: activeChartId === chartInfo.id, label: chartInfo.label })),\n  newScoping && ___EmotionJSX(ScopingTitle, { id: newScoping.id, onClick: setCurrentChartId, onRemove: removeCustomScope, isActive: activeChartId === newScoping.id, label: `[${t('new custom scoping')}]` }));\n\n};","map":{"version":3,"mappings":"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","names":["React","useMemo","css","styled","t","useTheme","isCrossFilterScopeGlobal","useSelector","CHART_TYPE","Icons","Button","FilterTitle","NEW_CHART_SCOPING_ID","AddButtonContainer","div","theme","gridUnit","ScopingTitle","isActive","onClick","id","label","onRemove","colors","grayscale","light3","event","stopPropagation","ChartsScopingListPanel","activeChartId","chartConfigs","setCurrentChartId","removeCustomScope","addNewCustomScope","layout","state","dashboardLayout","present","customScopedCharts","chartLayoutItems","Object","values","filter","item","type","config","crossFilters","scope","map","chartLayoutItem","find","meta","chartId","sliceNameOverride","sliceName","newScoping","undefined","chartInfo"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/components/nativeFilters/FilterBar/CrossFilters/ScopingModal/ChartsScopingListPanel.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { ReactNode, useMemo } from 'react';\nimport { css, styled, t, useTheme } from '@superset-ui/core';\nimport {\n  ChartConfiguration,\n  DashboardLayout,\n  isCrossFilterScopeGlobal,\n  RootState,\n} from 'src/dashboard/types';\nimport { useSelector } from 'react-redux';\nimport { CHART_TYPE } from 'src/dashboard/util/componentTypes';\nimport Icons from 'src/components/Icons';\nimport Button from 'src/components/Button';\nimport { FilterTitle } from 'src/dashboard/components/nativeFilters/FiltersConfigModal/FilterTitleContainer';\nimport { NEW_CHART_SCOPING_ID } from './constants';\n\nconst AddButtonContainer = styled.div`\n  ${({ theme }) => css`\n    margin-top: ${theme.gridUnit * 2}px;\n\n    & button > [role='img']:first-of-type {\n      margin-right: ${theme.gridUnit}px;\n      line-height: 0;\n    }\n\n    span[role='img'] {\n      padding-bottom: 1px;\n    }\n\n    .ant-btn > .anticon + span {\n      margin-left: 0;\n    }\n  `}\n`;\n\nconst ScopingTitle = ({\n  isActive,\n  onClick,\n  id,\n  label,\n  onRemove,\n}: {\n  isActive: boolean;\n  onClick: (id: number) => void;\n  id: number;\n  label: ReactNode;\n  onRemove: (id: number) => void;\n}) => {\n  const theme = useTheme();\n  return (\n    <FilterTitle\n      className={isActive ? 'active' : ''}\n      onClick={() => onClick(id)}\n    >\n      {label}\n      <Icons.Trash\n        iconColor={theme.colors.grayscale.light3}\n        onClick={event => {\n          event.stopPropagation();\n          onRemove(id);\n        }}\n        css={css`\n          margin-left: auto;\n        `}\n      />\n    </FilterTitle>\n  );\n};\n\nexport interface ChartsScopingListPanelProps {\n  activeChartId: number | undefined;\n  chartConfigs: ChartConfiguration;\n  setCurrentChartId: (chartId: number | undefined) => void;\n  removeCustomScope: (chartId: number) => void;\n  addNewCustomScope: () => void;\n}\nexport const ChartsScopingListPanel = ({\n  activeChartId,\n  chartConfigs,\n  setCurrentChartId,\n  removeCustomScope,\n  addNewCustomScope,\n}: ChartsScopingListPanelProps) => {\n  const theme = useTheme();\n  const layout = useSelector<RootState, DashboardLayout>(\n    state => state.dashboardLayout.present,\n  );\n  const customScopedCharts = useMemo(() => {\n    const chartLayoutItems = Object.values(layout).filter(\n      item => item.type === CHART_TYPE,\n    );\n    return Object.values(chartConfigs)\n      .filter(\n        config =>\n          !isCrossFilterScopeGlobal(config.crossFilters.scope) &&\n          config.id !== NEW_CHART_SCOPING_ID,\n      )\n      .map(config => {\n        const chartLayoutItem = chartLayoutItems.find(\n          item => item.meta.chartId === config.id,\n        );\n        return {\n          id: config.id,\n          label:\n            chartLayoutItem?.meta.sliceNameOverride ||\n            chartLayoutItem?.meta.sliceName ||\n            '',\n        };\n      });\n  }, [chartConfigs, layout]);\n\n  const newScoping = chartConfigs[NEW_CHART_SCOPING_ID];\n  return (\n    <>\n      <AddButtonContainer>\n        <Button\n          buttonStyle=\"link\"\n          buttonSize=\"xsmall\"\n          onClick={addNewCustomScope}\n        >\n          <Icons.PlusSmall /> {t('Add custom scoping')}\n        </Button>\n      </AddButtonContainer>\n      <FilterTitle\n        onClick={() => setCurrentChartId(undefined)}\n        className={activeChartId === undefined ? 'active' : ''}\n      >\n        {t('All charts/global scoping')}\n      </FilterTitle>\n      <div\n        css={css`\n          width: 100%;\n          height: 1px;\n          background-color: ${theme.colors.grayscale.light3};\n          margin: ${theme.gridUnit * 3}px 0;\n        `}\n      />\n      {customScopedCharts.map(chartInfo => (\n        <ScopingTitle\n          key={chartInfo.id}\n          id={chartInfo.id}\n          onClick={setCurrentChartId}\n          onRemove={removeCustomScope}\n          isActive={activeChartId === chartInfo.id}\n          label={chartInfo.label}\n        />\n      ))}\n      {newScoping && (\n        <ScopingTitle\n          id={newScoping.id}\n          onClick={setCurrentChartId}\n          onRemove={removeCustomScope}\n          isActive={activeChartId === newScoping.id}\n          label={`[${t('new custom scoping')}]`}\n        />\n      )}\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}