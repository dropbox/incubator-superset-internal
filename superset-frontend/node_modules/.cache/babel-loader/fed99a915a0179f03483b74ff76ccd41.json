{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nclass LRUCache {\n\n\n  constructor(capacity) {this.cache = void 0;this.capacity = void 0;\n    if (capacity < 1) {\n      throw new Error('The capacity in LRU must be greater than 0.');\n    }\n    this.capacity = capacity;\n    this.cache = new Map();\n  }\n  has(key) {\n    return this.cache.has(key);\n  }\n  get(key) {\n    // Prevent runtime errors\n    if (typeof key !== 'string') {\n      throw new TypeError('The LRUCache key must be string.');\n    }\n    if (this.cache.has(key)) {\n      const tmp = this.cache.get(key);\n      this.cache.delete(key);\n      this.cache.set(key, tmp);\n      return tmp;\n    }\n    return undefined;\n  }\n  set(key, value) {\n    // Prevent runtime errors\n    if (typeof key !== 'string') {\n      throw new TypeError('The LRUCache key must be string.');\n    }\n    if (this.cache.size >= this.capacity) {\n      this.cache.delete(this.cache.keys().next().value);\n    }\n    this.cache.set(key, value);\n  }\n  clear() {\n    this.cache.clear();\n  }\n  get size() {\n    return this.cache.size;\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}export function lruCache(capacity) {if (capacity === void 0) {capacity = 100;}\n  return new LRUCache(capacity);\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(LRUCache, \"LRUCache\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/utils/lruCache.ts\");reactHotLoader.register(lruCache, \"lruCache\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/utils/lruCache.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAmBA,MAAMA,QAAN,CAAc;;;EAKZC,YAAYC,QAAZ,EAA4B,MAJpBC,KAIoB,eAFnBD,QAEmB;IAC1B,IAAIA,QAAQ,GAAG,CAAf,EAAkB;MAChB,MAAM,IAAIE,KAAJ,CAAU,6CAAV,CAAN;IACD;IACD,KAAKF,QAAL,GAAgBA,QAAhB;IACA,KAAKC,KAAL,GAAa,IAAIE,GAAJ,EAAb;EACD;EAEMC,GAAG,CAACC,GAAD,EAAY;IACpB,OAAO,KAAKJ,KAAL,CAAWG,GAAX,CAAeC,GAAf,CAAP;EACD;EAEMC,GAAG,CAACD,GAAD,EAAY;IACpB;IACA,IAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;MAC3B,MAAM,IAAIE,SAAJ,CAAc,kCAAd,CAAN;IACD;IAED,IAAI,KAAKN,KAAL,CAAWG,GAAX,CAAeC,GAAf,CAAJ,EAAyB;MACvB,MAAMG,GAAG,GAAG,KAAKP,KAAL,CAAWK,GAAX,CAAeD,GAAf,CAAZ;MACA,KAAKJ,KAAL,CAAWQ,MAAX,CAAkBJ,GAAlB;MACA,KAAKJ,KAAL,CAAWS,GAAX,CAAeL,GAAf,EAAoBG,GAApB;MACA,OAAOA,GAAP;IACD;IACD,OAAOG,SAAP;EACD;EAEMD,GAAG,CAACL,GAAD,EAAcO,KAAd,EAAsB;IAC9B;IACA,IAAI,OAAOP,GAAP,KAAe,QAAnB,EAA6B;MAC3B,MAAM,IAAIE,SAAJ,CAAc,kCAAd,CAAN;IACD;IACD,IAAI,KAAKN,KAAL,CAAWY,IAAX,IAAmB,KAAKb,QAA5B,EAAsC;MACpC,KAAKC,KAAL,CAAWQ,MAAX,CAAkB,KAAKR,KAAL,CAAWa,IAAX,GAAkBC,IAAlB,GAAyBH,KAA3C;IACD;IACD,KAAKX,KAAL,CAAWS,GAAX,CAAeL,GAAf,EAAoBO,KAApB;EACD;EAEMI,KAAK;IACV,KAAKf,KAAL,CAAWe,KAAX;EACD;EAEc,IAAJH,IAAI;IACb,OAAO,KAAKZ,KAAL,CAAWY,IAAlB;EACD,CAjDW;EAAA;IAAA,yBAoDd,OAAM,SAAUI,QAAV,CAAsBjB,QAAtB,EAAoC,KAAdA,QAAc,cAAdA,QAAc,GAAH,GAAG;EACxC,OAAO,IAAIF,QAAJ,CAAgBE,QAAhB,CAAP;AACD,C,iLAtDKF,Q,0JAoDUmB,Q","names":["LRUCache","constructor","capacity","cache","Error","Map","has","key","get","TypeError","tmp","delete","set","undefined","value","size","keys","next","clear","lruCache"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/utils/lruCache.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nclass LRUCache<T> {\n  private cache: Map<string, T>;\n\n  readonly capacity: number;\n\n  constructor(capacity: number) {\n    if (capacity < 1) {\n      throw new Error('The capacity in LRU must be greater than 0.');\n    }\n    this.capacity = capacity;\n    this.cache = new Map<string, T>();\n  }\n\n  public has(key: string): boolean {\n    return this.cache.has(key);\n  }\n\n  public get(key: string): T | undefined {\n    // Prevent runtime errors\n    if (typeof key !== 'string') {\n      throw new TypeError('The LRUCache key must be string.');\n    }\n\n    if (this.cache.has(key)) {\n      const tmp = this.cache.get(key) as T;\n      this.cache.delete(key);\n      this.cache.set(key, tmp);\n      return tmp;\n    }\n    return undefined;\n  }\n\n  public set(key: string, value: T) {\n    // Prevent runtime errors\n    if (typeof key !== 'string') {\n      throw new TypeError('The LRUCache key must be string.');\n    }\n    if (this.cache.size >= this.capacity) {\n      this.cache.delete(this.cache.keys().next().value);\n    }\n    this.cache.set(key, value);\n  }\n\n  public clear() {\n    this.cache.clear();\n  }\n\n  public get size() {\n    return this.cache.size;\n  }\n}\n\nexport function lruCache<T>(capacity = 100) {\n  return new LRUCache<T>(capacity);\n}\n"]},"metadata":{},"sourceType":"module"}