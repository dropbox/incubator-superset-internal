{"ast":null,"code":"import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ensureIsArray, isAdhocColumn, isPhysicalColumn, t, validateNonEmpty } from '@superset-ui/core';\nimport { D3_FORMAT_DOCS, D3_NUMBER_FORMAT_DESCRIPTION_VALUES_TEXT, D3_FORMAT_OPTIONS, D3_TIME_FORMAT_OPTIONS, sections, getStandardizedControls, getTemporalColumns, sharedControls } from '@superset-ui/chart-controls';\nconst config = {\n  controlPanelSections: [\n  sections.legacyRegularTime,\n  {\n    label: t('Query'),\n    expanded: true,\n    controlSetRows: [\n    ['columns'],\n    [\n    {\n      name: 'time_grain_sqla',\n      config: {\n        ...sharedControls.time_grain_sqla,\n        visibility: (_ref) => {var _controls$columns;let { controls } = _ref;\n          const dttmLookup = Object.fromEntries(ensureIsArray(controls == null ? void 0 : (_controls$columns = controls.columns) == null ? void 0 : _controls$columns.options).map((option) => [\n          option.column_name,\n          option.is_dttm]));\n\n          return ensureIsArray(controls == null ? void 0 : controls.columns.value).\n          map((selection) => {\n            if (isAdhocColumn(selection)) {\n              return true;\n            }\n            if (isPhysicalColumn(selection)) {\n              return !!dttmLookup[selection];\n            }\n            return false;\n          }).\n          some(Boolean);\n        } } },\n\n\n    'temporal_columns_lookup'],\n\n    ['groupby'],\n    ['metrics'],\n    ['adhoc_filters'],\n    ['series_limit'],\n    ['series_limit_metric'],\n    [\n    {\n      name: 'whiskerOptions',\n      config: {\n        clearable: false,\n        type: 'SelectControl',\n        freeForm: true,\n        label: t('Whisker/outlier options'),\n        default: 'Tukey',\n        description: t('Determines how whiskers and outliers are calculated.'),\n        choices: [\n        ['Tukey', t('Tukey')],\n        ['Min/max (no outliers)', t('Min/max (no outliers)')],\n        ['2/98 percentiles', t('2/98 percentiles')],\n        ['9/91 percentiles', t('9/91 percentiles')]] } }]] },\n\n\n\n\n\n\n  sections.titleControls,\n  {\n    label: t('Chart Options'),\n    expanded: true,\n    controlSetRows: [\n    ['color_scheme'],\n    [\n    {\n      name: 'x_ticks_layout',\n      config: {\n        type: 'SelectControl',\n        label: t('X Tick Layout'),\n        choices: [\n        ['auto', t('auto')],\n        ['flat', t('flat')],\n        ['45째', '45째'],\n        ['90째', '90째'],\n        ['staggered', t('staggered')]],\n\n        default: 'auto',\n        clearable: false,\n        renderTrigger: true,\n        description: t('The way the ticks are laid out on the X-axis') } }],\n\n\n\n    [\n    {\n      name: 'number_format',\n      config: {\n        type: 'SelectControl',\n        freeForm: true,\n        label: t('Number format'),\n        renderTrigger: true,\n        default: 'SMART_NUMBER',\n        choices: D3_FORMAT_OPTIONS,\n        description: `${D3_FORMAT_DOCS} ${D3_NUMBER_FORMAT_DESCRIPTION_VALUES_TEXT}` } }],\n\n\n\n    [\n    {\n      name: 'date_format',\n      config: {\n        type: 'SelectControl',\n        freeForm: true,\n        label: t('Date format'),\n        renderTrigger: true,\n        choices: D3_TIME_FORMAT_OPTIONS,\n        default: 'smart_date',\n        description: D3_FORMAT_DOCS } }]] }],\n\n\n\n\n\n\n  controlOverrides: {\n    groupby: {\n      label: t('Dimensions'),\n      description: t('Categories to group by on the x-axis.') },\n\n    columns: {\n      label: t('Distribute across'),\n      multi: true,\n      description: t('Columns to calculate distribution across.'),\n      initialValue: (control, state) => {\n        if (state && (\n        !(control != null && control.value) ||\n        Array.isArray(control == null ? void 0 : control.value) && control.value.length === 0)) {\n          return [getTemporalColumns(state.datasource).defaultTemporalColumn];\n        }\n        return control.value;\n      },\n      validators: [validateNonEmpty] } },\n\n\n  formDataOverrides: (formData) => {\n    const groupby = getStandardizedControls().controls.columns.filter((col) => {var _context;return !_includesInstanceProperty(_context = ensureIsArray(formData.columns)).call(_context, col);});\n    getStandardizedControls().controls.columns =\n    getStandardizedControls().controls.columns.filter((col) => !_includesInstanceProperty(groupby).call(groupby, col));\n    return {\n      ...formData,\n      metrics: getStandardizedControls().popAllMetrics(),\n      groupby };\n\n  } };\n\nexport default config;","map":{"version":3,"mappings":"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","names":["ensureIsArray","isAdhocColumn","isPhysicalColumn","t","validateNonEmpty","D3_FORMAT_DOCS","D3_NUMBER_FORMAT_DESCRIPTION_VALUES_TEXT","D3_FORMAT_OPTIONS","D3_TIME_FORMAT_OPTIONS","sections","getStandardizedControls","getTemporalColumns","sharedControls","config","controlPanelSections","legacyRegularTime","label","expanded","controlSetRows","name","time_grain_sqla","visibility","controls","dttmLookup","Object","fromEntries","columns","options","map","option","column_name","is_dttm","value","selection","some","Boolean","clearable","type","freeForm","default","description","choices","titleControls","renderTrigger","controlOverrides","groupby","multi","initialValue","control","state","Array","isArray","length","datasource","defaultTemporalColumn","validators","formDataOverrides","filter","formData","col","metrics","popAllMetrics"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/plugins/plugin-chart-echarts/src/BoxPlot/controlPanel.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  ensureIsArray,\n  isAdhocColumn,\n  isPhysicalColumn,\n  t,\n  validateNonEmpty,\n} from '@superset-ui/core';\nimport {\n  D3_FORMAT_DOCS,\n  D3_NUMBER_FORMAT_DESCRIPTION_VALUES_TEXT,\n  D3_FORMAT_OPTIONS,\n  D3_TIME_FORMAT_OPTIONS,\n  sections,\n  ControlPanelConfig,\n  getStandardizedControls,\n  ControlState,\n  ControlPanelState,\n  getTemporalColumns,\n  sharedControls,\n} from '@superset-ui/chart-controls';\n\nconst config: ControlPanelConfig = {\n  controlPanelSections: [\n    sections.legacyRegularTime,\n    {\n      label: t('Query'),\n      expanded: true,\n      controlSetRows: [\n        ['columns'],\n        [\n          {\n            name: 'time_grain_sqla',\n            config: {\n              ...sharedControls.time_grain_sqla,\n              visibility: ({ controls }) => {\n                const dttmLookup = Object.fromEntries(\n                  ensureIsArray(controls?.columns?.options).map(option => [\n                    option.column_name,\n                    option.is_dttm,\n                  ]),\n                );\n\n                return ensureIsArray(controls?.columns.value)\n                  .map(selection => {\n                    if (isAdhocColumn(selection)) {\n                      return true;\n                    }\n                    if (isPhysicalColumn(selection)) {\n                      return !!dttmLookup[selection];\n                    }\n                    return false;\n                  })\n                  .some(Boolean);\n              },\n            },\n          },\n          'temporal_columns_lookup',\n        ],\n        ['groupby'],\n        ['metrics'],\n        ['adhoc_filters'],\n        ['series_limit'],\n        ['series_limit_metric'],\n        [\n          {\n            name: 'whiskerOptions',\n            config: {\n              clearable: false,\n              type: 'SelectControl',\n              freeForm: true,\n              label: t('Whisker/outlier options'),\n              default: 'Tukey',\n              description: t(\n                'Determines how whiskers and outliers are calculated.',\n              ),\n              choices: [\n                ['Tukey', t('Tukey')],\n                ['Min/max (no outliers)', t('Min/max (no outliers)')],\n                ['2/98 percentiles', t('2/98 percentiles')],\n                ['9/91 percentiles', t('9/91 percentiles')],\n              ],\n            },\n          },\n        ],\n      ],\n    },\n    sections.titleControls,\n    {\n      label: t('Chart Options'),\n      expanded: true,\n      controlSetRows: [\n        ['color_scheme'],\n        [\n          {\n            name: 'x_ticks_layout',\n            config: {\n              type: 'SelectControl',\n              label: t('X Tick Layout'),\n              choices: [\n                ['auto', t('auto')],\n                ['flat', t('flat')],\n                ['45째', '45째'],\n                ['90째', '90째'],\n                ['staggered', t('staggered')],\n              ],\n              default: 'auto',\n              clearable: false,\n              renderTrigger: true,\n              description: t('The way the ticks are laid out on the X-axis'),\n            },\n          },\n        ],\n        [\n          {\n            name: 'number_format',\n            config: {\n              type: 'SelectControl',\n              freeForm: true,\n              label: t('Number format'),\n              renderTrigger: true,\n              default: 'SMART_NUMBER',\n              choices: D3_FORMAT_OPTIONS,\n              description: `${D3_FORMAT_DOCS} ${D3_NUMBER_FORMAT_DESCRIPTION_VALUES_TEXT}`,\n            },\n          },\n        ],\n        [\n          {\n            name: 'date_format',\n            config: {\n              type: 'SelectControl',\n              freeForm: true,\n              label: t('Date format'),\n              renderTrigger: true,\n              choices: D3_TIME_FORMAT_OPTIONS,\n              default: 'smart_date',\n              description: D3_FORMAT_DOCS,\n            },\n          },\n        ],\n      ],\n    },\n  ],\n  controlOverrides: {\n    groupby: {\n      label: t('Dimensions'),\n      description: t('Categories to group by on the x-axis.'),\n    },\n    columns: {\n      label: t('Distribute across'),\n      multi: true,\n      description: t('Columns to calculate distribution across.'),\n      initialValue: (\n        control: ControlState,\n        state: ControlPanelState | null,\n      ) => {\n        if (\n          state &&\n          (!control?.value ||\n            (Array.isArray(control?.value) && control.value.length === 0))\n        ) {\n          return [getTemporalColumns(state.datasource).defaultTemporalColumn];\n        }\n        return control.value;\n      },\n      validators: [validateNonEmpty],\n    },\n  },\n  formDataOverrides: formData => {\n    const groupby = getStandardizedControls().controls.columns.filter(\n      col => !ensureIsArray(formData.columns).includes(col),\n    );\n    getStandardizedControls().controls.columns =\n      getStandardizedControls().controls.columns.filter(\n        col => !groupby.includes(col),\n      );\n\n    return {\n      ...formData,\n      metrics: getStandardizedControls().popAllMetrics(),\n      groupby,\n    };\n  },\n};\nexport default config;\n"]},"metadata":{},"sourceType":"module"}