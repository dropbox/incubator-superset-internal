{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport useAsyncState from '../utils/useAsyncState';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nfunction DefaultSearchInput(_ref) {let { count, value, onChange } = _ref;\n  return ___EmotionJSX(\"span\", { className: \"dt-global-filter\" }, \"Search\",\n  ' ',\n  ___EmotionJSX(\"input\", { className: \"form-control input-sm\", placeholder: `${count} records...`, value: value, onChange: onChange }));\n\n}const _default = /*#__PURE__*/\nReact.memo(__signature__(function GlobalFilter(_ref2) {let { preGlobalFilteredRows, filterValue = '', searchInput, setGlobalFilter } = _ref2;\n  const count = preGlobalFilteredRows.length;\n  const [value, setValue] = useAsyncState(filterValue, (newValue) => {\n    setGlobalFilter(newValue || undefined);\n  }, 200);\n  const SearchInput = searchInput || DefaultSearchInput;\n  return ___EmotionJSX(SearchInput, { count: count, value: value, onChange: (e) => {\n      const target = e.target;\n      e.preventDefault();\n      setValue(target.value);\n    } });\n}, \"useAsyncState{[value, setValue]}\", () => [useAsyncState]));export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(DefaultSearchInput, \"DefaultSearchInput\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-table/src/DataTable/components/GlobalFilter.tsx\");reactHotLoader.register(_default, \"default\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-table/src/DataTable/components/GlobalFilter.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,KAAP,MAAyD,OAAzD;AAEA,OAAOC,aAAP,MAA0B,wBAA1B,C;AAiBA,SAASC,kBAAT,OAAwE,KAA5C,EAAEC,KAAF,EAASC,KAAT,EAAgBC,QAAhB,EAA4C;EACtE,OACE,wBAAM,SAAS,EAAC,kBAAhB;EACS,GADT;EAEE,yBACE,SAAS,EAAC,uBADZ,EAEE,WAAW,EAAE,GAAGF,KAAK,aAFvB,EAGE,KAAK,EAAEC,KAHT,EAIE,QAAQ,EAAEC,QAJZ,GAFF,CADF;;AAWD,C;AAEeL,KAAK,CAACM,IAAN,eAA+B,SAASC,YAAT,QAOxB,KALrB,EACAC,qBADA,EAEAC,WAAW,GAAG,EAFd,EAGAC,WAHA,EAIAC,eAJA,EAKqB;EACrB,MAAMR,KAAK,GAAGK,qBAAqB,CAACI,MAApC;EACA,MAAM,CAACR,KAAD,EAAQS,QAAR,IAAoBZ,aAAa,CACrCQ,WADqC,EAErC,CAACK,QAAD,KAAqB;IACnBH,eAAe,CAACG,QAAQ,IAAIC,SAAb,CAAf;EACD,CAJoC,EAKrC,GALqC,CAAvC;EAQA,MAAMC,WAAW,GAAGN,WAAW,IAAIR,kBAAnC;EAEA,OACE,cAAC,WAAD,IACE,KAAK,EAAEC,KADT,EAEE,KAAK,EAAEC,KAFT,EAGE,QAAQ,EAAE,EAAC,KAAG;MACZ,MAAMa,MAAM,GAAGC,CAAC,CAACD,MAAjB;MACAC,CAAC,CAACC,cAAF;MACAN,QAAQ,CAACI,MAAM,CAACb,KAAR,CAAR;IACD,CAPH,GADF;AAWD,CA9Be,6CASYH,aATZ,G,CAAhB,wB,iLAdSC,kB","names":["React","useAsyncState","DefaultSearchInput","count","value","onChange","memo","GlobalFilter","preGlobalFilteredRows","filterValue","searchInput","setGlobalFilter","length","setValue","newValue","undefined","SearchInput","target","e","preventDefault"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-table/src/DataTable/components/GlobalFilter.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { ComponentType, ChangeEventHandler } from 'react';\nimport { Row, FilterValue } from 'react-table';\nimport useAsyncState from '../utils/useAsyncState';\n\nexport interface SearchInputProps {\n  count: number;\n  value: string;\n  onChange: ChangeEventHandler<HTMLInputElement>;\n}\n\nexport interface GlobalFilterProps<D extends object> {\n  preGlobalFilteredRows: Row<D>[];\n  // filter value cannot be `undefined` otherwise React will report component\n  // control type undefined error\n  filterValue: string;\n  setGlobalFilter: (filterValue: FilterValue) => void;\n  searchInput?: ComponentType<SearchInputProps>;\n}\n\nfunction DefaultSearchInput({ count, value, onChange }: SearchInputProps) {\n  return (\n    <span className=\"dt-global-filter\">\n      Search{' '}\n      <input\n        className=\"form-control input-sm\"\n        placeholder={`${count} records...`}\n        value={value}\n        onChange={onChange}\n      />\n    </span>\n  );\n}\n\nexport default (React.memo as <T>(fn: T) => T)(function GlobalFilter<\n  D extends object,\n>({\n  preGlobalFilteredRows,\n  filterValue = '',\n  searchInput,\n  setGlobalFilter,\n}: GlobalFilterProps<D>) {\n  const count = preGlobalFilteredRows.length;\n  const [value, setValue] = useAsyncState(\n    filterValue,\n    (newValue: string) => {\n      setGlobalFilter(newValue || undefined);\n    },\n    200,\n  );\n\n  const SearchInput = searchInput || DefaultSearchInput;\n\n  return (\n    <SearchInput\n      count={count}\n      value={value}\n      onChange={e => {\n        const target = e.target as HTMLInputElement;\n        e.preventDefault();\n        setValue(target.value);\n      }}\n    />\n  );\n});\n"]},"metadata":{},"sourceType":"module"}