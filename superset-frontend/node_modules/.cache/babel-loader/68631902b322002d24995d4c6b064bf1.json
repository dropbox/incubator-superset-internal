{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { CurrencyFormatter, ensureIsArray, getNumberFormatter, isSavedMetric } from '@superset-ui/core';\nexport const buildCustomFormatters = (metrics, currencyFormats, columnFormats, d3Format) => {\n  const metricsArray = ensureIsArray(metrics);\n  return metricsArray.reduce((acc, metric) => {\n    if (isSavedMetric(metric)) {\n      const actualD3Format = d3Format != null ? d3Format : columnFormats[metric];\n      return currencyFormats[metric] ?\n      {\n        ...acc,\n        [metric]: new CurrencyFormatter({\n          d3Format: actualD3Format,\n          currency: currencyFormats[metric] }) } :\n\n\n      {\n        ...acc,\n        [metric]: getNumberFormatter(actualD3Format) };\n\n    }\n    return acc;\n  }, {});\n};\nexport const getCustomFormatter = (customFormatters, metrics, key) => {\n  const metricsArray = ensureIsArray(metrics);\n  if (metricsArray.length === 1 && isSavedMetric(metricsArray[0])) {\n    return customFormatters[metricsArray[0]];\n  }\n  return key ? customFormatters[key] : undefined;\n};\nexport const getValueFormatter = (metrics, currencyFormats, columnFormats, d3Format, key) => {var _getCustomFormatter;return (_getCustomFormatter = getCustomFormatter(buildCustomFormatters(metrics, currencyFormats, columnFormats, d3Format), metrics, key)) != null ? _getCustomFormatter : getNumberFormatter(d3Format);};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,SAEEA,iBAFF,EAGEC,aAHF,EAIEC,kBAJF,EAKEC,aALF,QAQO,mBARP;AAUA,OAAO,MAAMC,qBAAqB,GAAG,CACnCC,OADmC,EAEnCC,eAFmC,EAGnCC,aAHmC,EAInCC,QAJmC,KAKjC;EACF,MAAMC,YAAY,GAAGR,aAAa,CAACI,OAAD,CAAlC;EACA,OAAOI,YAAY,CAACC,MAAb,CAAoB,CAACC,GAAD,EAAMC,MAAN,KAAgB;IACzC,IAAIT,aAAa,CAACS,MAAD,CAAjB,EAA2B;MACzB,MAAMC,cAAc,GAAGL,QAAH,WAAGA,QAAH,GAAeD,aAAa,CAACK,MAAD,CAAhD;MACA,OAAON,eAAe,CAACM,MAAD,CAAf;MACH;QACE,GAAGD,GADL;QAEE,CAACC,MAAD,GAAU,IAAIZ,iBAAJ,CAAsB;UAC9BQ,QAAQ,EAAEK,cADoB;UAE9BC,QAAQ,EAAER,eAAe,CAACM,MAAD,CAFK,EAAtB,CAFZ,EADG;;;MAQH;QACE,GAAGD,GADL;QAEE,CAACC,MAAD,GAAUV,kBAAkB,CAACW,cAAD,CAF9B,EARJ;;IAYD;IACD,OAAOF,GAAP;EACD,CAjBM,EAiBJ,EAjBI,CAAP;AAkBD,CAzBM;AA2BP,OAAO,MAAMI,kBAAkB,GAAG,CAChCC,gBADgC,EAEhCX,OAFgC,EAGhCY,GAHgC,KAI9B;EACF,MAAMR,YAAY,GAAGR,aAAa,CAACI,OAAD,CAAlC;EACA,IAAII,YAAY,CAACS,MAAb,KAAwB,CAAxB,IAA6Bf,aAAa,CAACM,YAAY,CAAC,CAAD,CAAb,CAA9C,EAAiE;IAC/D,OAAOO,gBAAgB,CAACP,YAAY,CAAC,CAAD,CAAb,CAAvB;EACD;EACD,OAAOQ,GAAG,GAAGD,gBAAgB,CAACC,GAAD,CAAnB,GAA2BE,SAArC;AACD,CAVM;AAYP,OAAO,MAAMC,iBAAiB,GAAG,CAC/Bf,OAD+B,EAE/BC,eAF+B,EAG/BC,aAH+B,EAI/BC,QAJ+B,EAK/BS,GAL+B,4DAO/BF,kBAAkB,CAChBX,qBAAqB,CAACC,OAAD,EAAUC,eAAV,EAA2BC,aAA3B,EAA0CC,QAA1C,CADL,EAEhBH,OAFgB,EAGhBY,GAHgB,CAPa,kCAW1Bf,kBAAkB,CAACM,QAAD,CAXQ,EAA1B","names":["CurrencyFormatter","ensureIsArray","getNumberFormatter","isSavedMetric","buildCustomFormatters","metrics","currencyFormats","columnFormats","d3Format","metricsArray","reduce","acc","metric","actualD3Format","currency","getCustomFormatter","customFormatters","key","length","undefined","getValueFormatter"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/packages/superset-ui-core/src/currency-format/utils.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  Currency,\n  CurrencyFormatter,\n  ensureIsArray,\n  getNumberFormatter,\n  isSavedMetric,\n  QueryFormMetric,\n  ValueFormatter,\n} from '@superset-ui/core';\n\nexport const buildCustomFormatters = (\n  metrics: QueryFormMetric | QueryFormMetric[] | undefined,\n  currencyFormats: Record<string, Currency>,\n  columnFormats: Record<string, string>,\n  d3Format: string | undefined,\n) => {\n  const metricsArray = ensureIsArray(metrics);\n  return metricsArray.reduce((acc, metric) => {\n    if (isSavedMetric(metric)) {\n      const actualD3Format = d3Format ?? columnFormats[metric];\n      return currencyFormats[metric]\n        ? {\n            ...acc,\n            [metric]: new CurrencyFormatter({\n              d3Format: actualD3Format,\n              currency: currencyFormats[metric],\n            }),\n          }\n        : {\n            ...acc,\n            [metric]: getNumberFormatter(actualD3Format),\n          };\n    }\n    return acc;\n  }, {});\n};\n\nexport const getCustomFormatter = (\n  customFormatters: Record<string, ValueFormatter>,\n  metrics: QueryFormMetric | QueryFormMetric[] | undefined,\n  key?: string,\n) => {\n  const metricsArray = ensureIsArray(metrics);\n  if (metricsArray.length === 1 && isSavedMetric(metricsArray[0])) {\n    return customFormatters[metricsArray[0]];\n  }\n  return key ? customFormatters[key] : undefined;\n};\n\nexport const getValueFormatter = (\n  metrics: QueryFormMetric | QueryFormMetric[] | undefined,\n  currencyFormats: Record<string, Currency>,\n  columnFormats: Record<string, string>,\n  d3Format: string | undefined,\n  key?: string,\n) =>\n  getCustomFormatter(\n    buildCustomFormatters(metrics, currencyFormats, columnFormats, d3Format),\n    metrics,\n    key,\n  ) ?? getNumberFormatter(d3Format);\n"]},"metadata":{},"sourceType":"module"}