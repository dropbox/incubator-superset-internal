{"ast":null,"code":"export default function transformProps(chartProps) {\n  const { height, datasource, formData, queriesData } = chartProps;\n  const { columnCollection = [], groupby, metrics, url } = formData;\n  const { records, columns } = queriesData[0].data;\n  const isGroupBy = (groupby == null ? void 0 : groupby.length) > 0;\n  // When there is a \"group by\",\n  // each row in the table is a database column\n  // Otherwise each row in the table is a metric\n  let rows;\n  if (isGroupBy) {\n    rows = columns.map((column) => typeof column === 'object' ? column : { label: column });\n  } else\n  {\n    /* eslint-disable */\n    const metricMap = datasource.metrics.reduce((acc, current) => {\n      const map = acc;\n      map[current.metric_name] = current;\n      return map;\n    }, {});\n    /* eslint-disable */\n    rows = metrics.map((metric) => typeof metric === 'object' ? metric : metricMap[metric]);\n  }\n  // TODO: Better parse this from controls instead of mutative value here.\n  columnCollection.forEach((column) => {\n    const c = column;\n    if (typeof c.timeLag === 'string' && c.timeLag) {\n      c.timeLag = parseInt(c.timeLag, 10);\n    }\n  });\n  return {\n    height,\n    data: records,\n    columnConfigs: columnCollection,\n    rows,\n    rowType: isGroupBy ? 'column' : 'metric',\n    url };\n\n}","map":{"version":3,"mappings":"AA0CA,eAAc,SAAUA,cAAV,CAAyBC,UAAzB,EAAoD;EAChE,MAAM,EAAEC,MAAF,EAAUC,UAAV,EAAsBC,QAAtB,EAAgCC,WAAhC,KAAgDJ,UAAtD;EACA,MAAM,EAAEK,gBAAgB,GAAG,EAArB,EAAyBC,OAAzB,EAAkCC,OAAlC,EAA2CC,GAA3C,KAAmDL,QAAzD;EACA,MAAM,EAAEM,OAAF,EAAWC,OAAX,KAAuBN,WAAW,CAAC,CAAD,CAAX,CAAeO,IAA5C;EACA,MAAMC,SAAS,GAAG,QAAO,QAAP,mBAAO,CAAEC,MAAT,IAAkB,CAApC;EAEA;EACA;EACA;EACA,IAAIC,IAAJ;EACA,IAAIF,SAAJ,EAAe;IACbE,IAAI,GAAGJ,OAAO,CAACK,GAAR,CAAY,OAAM,KACvB,OAAOC,MAAP,KAAkB,QAAlB,GAA6BA,MAA7B,GAAsC,EAAEC,KAAK,EAAED,MAAT,EADjC,CAAP;EAGD,CAJD;EAIO;IACL;IACA,MAAME,SAAS,GAAGhB,UAAU,CAACK,OAAX,CAAmBY,MAAnB,CAA0B,CAACC,GAAD,EAAMC,OAAN,KAAiB;MAC3D,MAAMN,GAAG,GAAGK,GAAZ;MACAL,GAAG,CAACM,OAAO,CAACC,WAAT,CAAH,GAA2BD,OAA3B;MACA,OAAON,GAAP;IACD,CAJiB,EAIf,EAJe,CAAlB;IAKA;IACAD,IAAI,GAAGP,OAAO,CAACQ,GAAR,CAAY,OAAM,KACvB,OAAOQ,MAAP,KAAkB,QAAlB,GAA6BA,MAA7B,GAAsCL,SAAS,CAACK,MAAD,CAD1C,CAAP;EAGD;EAED;EACAlB,gBAAgB,CAACmB,OAAjB,CAAyB,OAAM,KAAG;IAChC,MAAMC,CAAC,GAAeT,MAAtB;IACA,IAAI,OAAOS,CAAC,CAACC,OAAT,KAAqB,QAArB,IAAiCD,CAAC,CAACC,OAAvC,EAAgD;MAC9CD,CAAC,CAACC,OAAF,GAAYC,QAAQ,CAACF,CAAC,CAACC,OAAH,EAAY,EAAZ,CAApB;IACD;EACF,CALD;EAOA,OAAO;IACLzB,MADK;IAELU,IAAI,EAAEF,OAFD;IAGLmB,aAAa,EAAEvB,gBAHV;IAILS,IAJK;IAKLe,OAAO,EAAEjB,SAAS,GAAG,QAAH,GAAc,QAL3B;IAMLJ,GANK,EAAP;;AAQD","names":["transformProps","chartProps","height","datasource","formData","queriesData","columnCollection","groupby","metrics","url","records","columns","data","isGroupBy","length","rows","map","column","label","metricMap","reduce","acc","current","metric_name","metric","forEach","c","timeLag","parseInt","columnConfigs","rowType"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/visualizations/TimeTable/transformProps.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ChartProps, DataRecord, Metric } from '@superset-ui/core';\n\ninterface FormData {\n  groupby: string[];\n  metrics: Array<object>;\n  url: string;\n  columnCollection: Array<object> | [];\n}\n\ninterface QueryData {\n  data: {\n    records: DataRecord[];\n    columns: string[];\n  };\n}\n\nexport type TableChartProps = ChartProps & {\n  formData: FormData;\n  queriesData: QueryData[];\n};\n\ninterface ColumnData {\n  timeLag?: string | number;\n}\nexport default function transformProps(chartProps: TableChartProps) {\n  const { height, datasource, formData, queriesData } = chartProps;\n  const { columnCollection = [], groupby, metrics, url } = formData;\n  const { records, columns } = queriesData[0].data;\n  const isGroupBy = groupby?.length > 0;\n\n  // When there is a \"group by\",\n  // each row in the table is a database column\n  // Otherwise each row in the table is a metric\n  let rows;\n  if (isGroupBy) {\n    rows = columns.map(column =>\n      typeof column === 'object' ? column : { label: column },\n    );\n  } else {\n    /* eslint-disable */\n    const metricMap = datasource.metrics.reduce((acc, current) => {\n      const map = acc;\n      map[current.metric_name] = current;\n      return map;\n    }, {} as Record<string, Metric>);\n    /* eslint-disable */\n    rows = metrics.map(metric =>\n      typeof metric === 'object' ? metric : metricMap[metric],\n    );\n  }\n\n  // TODO: Better parse this from controls instead of mutative value here.\n  columnCollection.forEach(column => {\n    const c: ColumnData = column;\n    if (typeof c.timeLag === 'string' && c.timeLag) {\n      c.timeLag = parseInt(c.timeLag, 10);\n    }\n  });\n\n  return {\n    height,\n    data: records,\n    columnConfigs: columnCollection,\n    rows,\n    rowType: isGroupBy ? 'column' : 'metric',\n    url,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}