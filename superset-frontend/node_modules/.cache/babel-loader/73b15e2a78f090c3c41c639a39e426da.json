{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useMemo, useState } from 'react';\nimport { css, t } from '@superset-ui/core';\nimport { Radio } from 'src/components/Radio';\nimport { DrillByType } from '../types';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport const useDisplayModeToggle = () => {\n  const [drillByDisplayMode, setDrillByDisplayMode] = useState(DrillByType.Chart);\n  const displayModeToggle = useMemo(() => ___EmotionJSX(\"div\", { css: (theme) => css`\n          margin-bottom: ${theme.gridUnit * 6}px;\n          .ant-radio-button-wrapper-checked:not(.ant-radio-button-wrapper-disabled):focus-within {\n            box-shadow: none;\n          }\n        ` },\n  ___EmotionJSX(Radio.Group, { onChange: (_ref) => {let { target: { value } } = _ref;\n      setDrillByDisplayMode(value);\n    }, defaultValue: DrillByType.Chart },\n  ___EmotionJSX(Radio.Button, { value: DrillByType.Chart },\n  t('Chart')),\n\n  ___EmotionJSX(Radio.Button, { value: DrillByType.Table },\n  t('Table')))),\n\n\n  []);\n  return { displayModeToggle, drillByDisplayMode };\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAmBA,OAAOA,KAAP,IAAgBC,OAAhB,EAAyBC,QAAzB,QAAyC,OAAzC;AACA,SAASC,GAAT,EAA6BC,CAA7B,QAAsC,mBAAtC;AACA,SAASC,KAAT,QAAsB,sBAAtB;AACA,SAASC,WAAT,QAA4B,UAA5B,C;AAEA,OAAO,MAAMC,oBAAoB,GAAG,MAAK;EACvC,MAAM,CAACC,kBAAD,EAAqBC,qBAArB,IAA8CP,QAAQ,CAC1DI,WAAW,CAACI,KAD8C,CAA5D;EAIA,MAAMC,iBAAiB,GAAGV,OAAO,CAC/B,MACE,uBACE,GAAG,EAAE,CAACW,KAAD,KAA0BT,GAAG;2BACfS,KAAK,CAACC,QAAN,GAAiB,CAAC;;;;SAFvC;EASE,cAAC,KAAD,CAAO,KAAP,IACE,QAAQ,EAAE,UAA0B,KAAzB,EAAEC,MAAM,EAAE,EAAEC,KAAF,EAAV,EAAyB;MAClCN,qBAAqB,CAACM,KAAD,CAArB;IACD,CAHH,EAIE,YAAY,EAAET,WAAW,CAACI,KAJ5B;EAME,cAAC,KAAD,CAAO,MAAP,IACE,KAAK,EAAEJ,WAAW,CAACI,KADrB;EAIGN,CAAC,CAAC,OAAD,CAJJ,CANF;;EAYE,cAAC,KAAD,CAAO,MAAP,IACE,KAAK,EAAEE,WAAW,CAACU,KADrB;EAIGZ,CAAC,CAAC,OAAD,CAJJ,CAZF,CATF,CAF6B;;;EAgC/B,EAhC+B,CAAjC;EAkCA,OAAO,EAAEO,iBAAF,EAAqBH,kBAArB,EAAP;AACD,CAxCM","names":["React","useMemo","useState","css","t","Radio","DrillByType","useDisplayModeToggle","drillByDisplayMode","setDrillByDisplayMode","Chart","displayModeToggle","theme","gridUnit","target","value","Table"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/Chart/DrillBy/useDisplayModeToggle.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useMemo, useState } from 'react';\nimport { css, SupersetTheme, t } from '@superset-ui/core';\nimport { Radio } from 'src/components/Radio';\nimport { DrillByType } from '../types';\n\nexport const useDisplayModeToggle = () => {\n  const [drillByDisplayMode, setDrillByDisplayMode] = useState<DrillByType>(\n    DrillByType.Chart,\n  );\n\n  const displayModeToggle = useMemo(\n    () => (\n      <div\n        css={(theme: SupersetTheme) => css`\n          margin-bottom: ${theme.gridUnit * 6}px;\n          .ant-radio-button-wrapper-checked:not(.ant-radio-button-wrapper-disabled):focus-within {\n            box-shadow: none;\n          }\n        `}\n        data-test=\"drill-by-display-toggle\"\n      >\n        <Radio.Group\n          onChange={({ target: { value } }) => {\n            setDrillByDisplayMode(value);\n          }}\n          defaultValue={DrillByType.Chart}\n        >\n          <Radio.Button\n            value={DrillByType.Chart}\n            data-test=\"drill-by-chart-radio\"\n          >\n            {t('Chart')}\n          </Radio.Button>\n          <Radio.Button\n            value={DrillByType.Table}\n            data-test=\"drill-by-table-radio\"\n          >\n            {t('Table')}\n          </Radio.Button>\n        </Radio.Group>\n      </div>\n    ),\n    [],\n  );\n  return { displayModeToggle, drillByDisplayMode };\n};\n"]},"metadata":{},"sourceType":"module"}