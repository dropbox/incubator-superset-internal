{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nexport function getNestedValue(obj, id, separator) {if (separator === void 0) {separator = '.';}\n  /*\n   * Given a nested object and an id, return the nested value.\n   *\n   * > getNestedValue({a:{b:1}}, 'a.b')\n   * < 1\n   */\n  const index = id.indexOf(separator);\n  if (index === -1) {\n    return obj[id];\n  }\n  const name = id.slice(0, index);\n  const rest = id.slice(index + separator.length);\n  return getNestedValue(obj[name], rest, separator);\n}\n\nexport function interpolate(str, obj) {\n  /*\n   * Programmatic template string for interpolation.\n   *\n   * > interpolate('foo ${a.b}', {a:{b:1}})\n   * < \"foo 1\"\n   */\n  return str.replace(/\\$\\{(.+?)\\}/g, (match, id) => getNestedValue(obj, id));\n}","map":{"version":3,"names":["getNestedValue","obj","id","separator","index","indexOf","name","slice","rest","length","interpolate","str","replace","match"],"sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/showSavedQuery/utils.js"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nexport function getNestedValue(obj, id, separator = '.') {\n  /*\n   * Given a nested object and an id, return the nested value.\n   *\n   * > getNestedValue({a:{b:1}}, 'a.b')\n   * < 1\n   */\n  const index = id.indexOf(separator);\n  if (index === -1) {\n    return obj[id];\n  }\n  const name = id.slice(0, index);\n  const rest = id.slice(index + separator.length);\n  return getNestedValue(obj[name], rest, separator);\n}\n\nexport function interpolate(str, obj) {\n  /*\n   * Programmatic template string for interpolation.\n   *\n   * > interpolate('foo ${a.b}', {a:{b:1}})\n   * < \"foo 1\"\n   */\n  return str.replace(/\\$\\{(.+?)\\}/g, (match, id) => getNestedValue(obj, id));\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASA,cAAT,CAAwBC,GAAxB,EAA6BC,EAA7B,EAAiCC,SAAjC,EAAkD,KAAjBA,SAAiB,cAAjBA,SAAiB,GAAL,GAAK;EACvD;AACF;AACA;AACA;AACA;AACA;EACE,MAAMC,KAAK,GAAGF,EAAE,CAACG,OAAH,CAAWF,SAAX,CAAd;EACA,IAAIC,KAAK,KAAK,CAAC,CAAf,EAAkB;IAChB,OAAOH,GAAG,CAACC,EAAD,CAAV;EACD;EACD,MAAMI,IAAI,GAAGJ,EAAE,CAACK,KAAH,CAAS,CAAT,EAAYH,KAAZ,CAAb;EACA,MAAMI,IAAI,GAAGN,EAAE,CAACK,KAAH,CAASH,KAAK,GAAGD,SAAS,CAACM,MAA3B,CAAb;EACA,OAAOT,cAAc,CAACC,GAAG,CAACK,IAAD,CAAJ,EAAYE,IAAZ,EAAkBL,SAAlB,CAArB;AACD;;AAED,OAAO,SAASO,WAAT,CAAqBC,GAArB,EAA0BV,GAA1B,EAA+B;EACpC;AACF;AACA;AACA;AACA;AACA;EACE,OAAOU,GAAG,CAACC,OAAJ,CAAY,cAAZ,EAA4B,CAACC,KAAD,EAAQX,EAAR,KAAeF,cAAc,CAACC,GAAD,EAAMC,EAAN,CAAzD,CAAP;AACD"},"metadata":{},"sourceType":"module"}