{"ast":null,"code":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { format as d3Format } from 'd3-format';\nimport NumberFormatter from '../NumberFormatter';\nimport NumberFormats from '../NumberFormats';\nconst siFormatter = d3Format(`.3~s`);\nconst float2PointFormatter = d3Format(`.2~f`);\nconst float4PointFormatter = d3Format(`.4~f`);\nfunction formatValue(value) {\n  if (value === 0) {\n    return '0';\n  }\n  const absoluteValue = Math.abs(value);\n  if (absoluteValue >= 1000) {\n    // Normal human being are more familiar\n    // with billion (B) that giga (G)\n    return siFormatter(value).replace('G', 'B');\n  }\n  if (absoluteValue >= 1) {\n    return float2PointFormatter(value);\n  }\n  if (absoluteValue >= 0.001) {\n    return float4PointFormatter(value);\n  }\n  if (absoluteValue > 0.000001) {\n    return `${siFormatter(value * 1000000)}µ`;\n  }\n  return siFormatter(value);\n}\nexport default function createSmartNumberFormatter(config) {if (config === void 0) {config = {};}\n  const { description, signed = false, id, label } = config;\n  const getSign = signed ? (value) => value > 0 ? '+' : '' : () => '';\n  return new NumberFormatter({\n    description,\n    formatFunc: (value) => `${getSign(value)}${formatValue(value)}`,\n    id: id || signed ?\n    NumberFormats.SMART_NUMBER_SIGNED :\n    NumberFormats.SMART_NUMBER,\n    label: label != null ? label : 'Adaptive formatter' });\n\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAmBA,SAASA,MAAM,IAAIC,QAAnB,QAAmC,WAAnC;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AAEA,MAAMC,WAAW,GAAGH,QAAQ,CAAC,MAAD,CAA5B;AACA,MAAMI,oBAAoB,GAAGJ,QAAQ,CAAC,MAAD,CAArC;AACA,MAAMK,oBAAoB,GAAGL,QAAQ,CAAC,MAAD,CAArC;AAEA,SAASM,WAAT,CAAqBC,KAArB,EAAkC;EAChC,IAAIA,KAAK,KAAK,CAAd,EAAiB;IACf,OAAO,GAAP;EACD;EACD,MAAMC,aAAa,GAAGC,IAAI,CAACC,GAAL,CAASH,KAAT,CAAtB;EACA,IAAIC,aAAa,IAAI,IAArB,EAA2B;IACzB;IACA;IACA,OAAOL,WAAW,CAACI,KAAD,CAAX,CAAmBI,OAAnB,CAA2B,GAA3B,EAAgC,GAAhC,CAAP;EACD;EACD,IAAIH,aAAa,IAAI,CAArB,EAAwB;IACtB,OAAOJ,oBAAoB,CAACG,KAAD,CAA3B;EACD;EACD,IAAIC,aAAa,IAAI,KAArB,EAA4B;IAC1B,OAAOH,oBAAoB,CAACE,KAAD,CAA3B;EACD;EACD,IAAIC,aAAa,GAAG,QAApB,EAA8B;IAC5B,OAAO,GAAGL,WAAW,CAACI,KAAK,GAAG,OAAT,CAAiB,GAAtC;EACD;EACD,OAAOJ,WAAW,CAACI,KAAD,CAAlB;AACD;AAED,eAAc,SAAUK,0BAAV,CACZC,MADY,EAMN,KALNA,MAKM,cALNA,MAKM,GAAF,EAAE;EAEN,MAAM,EAAEC,WAAF,EAAeC,MAAM,GAAG,KAAxB,EAA+BC,EAA/B,EAAmCC,KAAnC,KAA6CJ,MAAnD;EACA,MAAMK,OAAO,GAAGH,MAAM,GAAG,CAACR,KAAD,KAAoBA,KAAK,GAAG,CAAR,GAAY,GAAZ,GAAkB,EAAzC,GAA+C,MAAM,EAA3E;EAEA,OAAO,IAAIN,eAAJ,CAAoB;IACzBa,WADyB;IAEzBK,UAAU,EAAE,MAAK,KAAI,GAAGD,OAAO,CAACX,KAAD,CAAO,GAAGD,WAAW,CAACC,KAAD,CAAO,EAFlC;IAGzBS,EAAE,EACAA,EAAE,IAAID,MAAN;IACIb,aAAa,CAACkB,mBADlB;IAEIlB,aAAa,CAACmB,YANK;IAOzBJ,KAAK,EAAEA,KAAF,WAAEA,KAAF,GAAW,oBAPS,EAApB,CAAP;;AASD","names":["format","d3Format","NumberFormatter","NumberFormats","siFormatter","float2PointFormatter","float4PointFormatter","formatValue","value","absoluteValue","Math","abs","replace","createSmartNumberFormatter","config","description","signed","id","label","getSign","formatFunc","SMART_NUMBER_SIGNED","SMART_NUMBER"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/packages/superset-ui-core/src/number-format/factories/createSmartNumberFormatter.ts"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { format as d3Format } from 'd3-format';\nimport NumberFormatter from '../NumberFormatter';\nimport NumberFormats from '../NumberFormats';\n\nconst siFormatter = d3Format(`.3~s`);\nconst float2PointFormatter = d3Format(`.2~f`);\nconst float4PointFormatter = d3Format(`.4~f`);\n\nfunction formatValue(value: number) {\n  if (value === 0) {\n    return '0';\n  }\n  const absoluteValue = Math.abs(value);\n  if (absoluteValue >= 1000) {\n    // Normal human being are more familiar\n    // with billion (B) that giga (G)\n    return siFormatter(value).replace('G', 'B');\n  }\n  if (absoluteValue >= 1) {\n    return float2PointFormatter(value);\n  }\n  if (absoluteValue >= 0.001) {\n    return float4PointFormatter(value);\n  }\n  if (absoluteValue > 0.000001) {\n    return `${siFormatter(value * 1000000)}µ`;\n  }\n  return siFormatter(value);\n}\n\nexport default function createSmartNumberFormatter(\n  config: {\n    description?: string;\n    signed?: boolean;\n    id?: string;\n    label?: string;\n  } = {},\n) {\n  const { description, signed = false, id, label } = config;\n  const getSign = signed ? (value: number) => (value > 0 ? '+' : '') : () => '';\n\n  return new NumberFormatter({\n    description,\n    formatFunc: value => `${getSign(value)}${formatValue(value)}`,\n    id:\n      id || signed\n        ? NumberFormats.SMART_NUMBER_SIGNED\n        : NumberFormats.SMART_NUMBER,\n    label: label ?? 'Adaptive formatter',\n  });\n}\n"]},"metadata":{},"sourceType":"module"}