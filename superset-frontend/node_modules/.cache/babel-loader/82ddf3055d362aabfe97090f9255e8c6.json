{"ast":null,"code":"/* eslint-disable camelcase */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitationsxw\n * under the License.\n */\nimport { ComparisonType } from '@superset-ui/core';\nimport { getMetricOffsetsMap, isTimeComparison } from './utils';\nexport const timeCompareOperator = (formData, queryObject) => {\n  const comparisonType = formData.comparison_type;\n  const metricOffsetMap = getMetricOffsetsMap(formData, queryObject);\n  if (isTimeComparison(formData, queryObject) &&\n  comparisonType !== ComparisonType.Values) {\n    return {\n      operation: 'compare',\n      options: {\n        source_columns: Array.from(metricOffsetMap.values()),\n        compare_columns: Array.from(metricOffsetMap.keys()),\n        compare_type: comparisonType,\n        drop_original_columns: true } };\n\n\n  }\n  return undefined;\n};","map":{"version":3,"mappings":"AAAA;AACA;;;;;;;;;;;;;;;;;;AAkBA,SAASA,cAAT,QAAsD,mBAAtD;AACA,SAASC,mBAAT,EAA8BC,gBAA9B,QAAsD,SAAtD;AAGA,OAAO,MAAMC,mBAAmB,GAC9B,CAACC,QAAD,EAAWC,WAAX,KAA0B;EACxB,MAAMC,cAAc,GAAGF,QAAQ,CAACG,eAAhC;EACA,MAAMC,eAAe,GAAGP,mBAAmB,CAACG,QAAD,EAAWC,WAAX,CAA3C;EAEA,IACEH,gBAAgB,CAACE,QAAD,EAAWC,WAAX,CAAhB;EACAC,cAAc,KAAKN,cAAc,CAACS,MAFpC,EAGE;IACA,OAAO;MACLC,SAAS,EAAE,SADN;MAELC,OAAO,EAAE;QACPC,cAAc,EAAEC,KAAK,CAACC,IAAN,CAAWN,eAAe,CAACO,MAAhB,EAAX,CADT;QAEPC,eAAe,EAAEH,KAAK,CAACC,IAAN,CAAWN,eAAe,CAACS,IAAhB,EAAX,CAFV;QAGPC,YAAY,EAAEZ,cAHP;QAIPa,qBAAqB,EAAE,IAJhB,EAFJ,EAAP;;;EASD;EAED,OAAOC,SAAP;AACD,CArBI","names":["ComparisonType","getMetricOffsetsMap","isTimeComparison","timeCompareOperator","formData","queryObject","comparisonType","comparison_type","metricOffsetMap","Values","operation","options","source_columns","Array","from","values","compare_columns","keys","compare_type","drop_original_columns","undefined"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/packages/superset-ui-chart-controls/src/operators/timeCompareOperator.ts"],"sourcesContent":["/* eslint-disable camelcase */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitationsxw\n * under the License.\n */\nimport { ComparisonType, PostProcessingCompare } from '@superset-ui/core';\nimport { getMetricOffsetsMap, isTimeComparison } from './utils';\nimport { PostProcessingFactory } from './types';\n\nexport const timeCompareOperator: PostProcessingFactory<PostProcessingCompare> =\n  (formData, queryObject) => {\n    const comparisonType = formData.comparison_type;\n    const metricOffsetMap = getMetricOffsetsMap(formData, queryObject);\n\n    if (\n      isTimeComparison(formData, queryObject) &&\n      comparisonType !== ComparisonType.Values\n    ) {\n      return {\n        operation: 'compare',\n        options: {\n          source_columns: Array.from(metricOffsetMap.values()),\n          compare_columns: Array.from(metricOffsetMap.keys()),\n          compare_type: comparisonType,\n          drop_original_columns: true,\n        },\n      };\n    }\n\n    return undefined;\n  };\n"]},"metadata":{},"sourceType":"module"}