{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState, useEffect } from 'react';\nexport default function useQueryPreviewState(_ref) {let { queries, fetchData, currentQueryId } = _ref;\n  const index = queries.findIndex((query) => query.id === currentQueryId);\n  const [currentIndex, setCurrentIndex] = useState(index);\n  const [disablePrevious, setDisablePrevious] = useState(false);\n  const [disableNext, setDisableNext] = useState(false);\n  function checkIndex() {\n    setDisablePrevious(currentIndex === 0);\n    setDisableNext(currentIndex === queries.length - 1);\n  }\n  function handleDataChange(previous) {\n    const offset = previous ? -1 : 1;\n    const index = currentIndex + offset;\n    if (index >= 0 && index < queries.length) {\n      fetchData(queries[index].id);\n      setCurrentIndex(index);\n      checkIndex();\n    }\n  }\n  function handleKeyPress(ev) {\n    if (currentIndex >= 0 && currentIndex < queries.length) {\n      if (ev.key === 'ArrowDown' || ev.key === 'k') {\n        ev.preventDefault();\n        handleDataChange(false);\n      } else\n      if (ev.key === 'ArrowUp' || ev.key === 'j') {\n        ev.preventDefault();\n        handleDataChange(true);\n      }\n    }\n  }\n  useEffect(() => {\n    checkIndex();\n  });\n  return {\n    handleKeyPress,\n    handleDataChange,\n    disablePrevious,\n    disableNext };\n\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAMA,eAAc,SAAUC,oBAAV,OAQb,KAR6E,EAC5EC,OAD4E,EAE5EC,SAF4E,EAG5EC,cAH4E,EAQ7E;EACC,MAAMC,KAAK,GAAGH,OAAO,CAACI,SAAR,CAAkB,MAAK,KAAIC,KAAK,CAACC,EAAN,KAAaJ,cAAxC,CAAd;EACA,MAAM,CAACK,YAAD,EAAeC,eAAf,IAAkCX,QAAQ,CAACM,KAAD,CAAhD;EACA,MAAM,CAACM,eAAD,EAAkBC,kBAAlB,IAAwCb,QAAQ,CAAC,KAAD,CAAtD;EACA,MAAM,CAACc,WAAD,EAAcC,cAAd,IAAgCf,QAAQ,CAAC,KAAD,CAA9C;EAEA,SAASgB,UAAT,GAAmB;IACjBH,kBAAkB,CAACH,YAAY,KAAK,CAAlB,CAAlB;IACAK,cAAc,CAACL,YAAY,KAAKP,OAAO,CAACc,MAAR,GAAiB,CAAnC,CAAd;EACD;EAED,SAASC,gBAAT,CAA0BC,QAA1B,EAA2C;IACzC,MAAMC,MAAM,GAAGD,QAAQ,GAAG,CAAC,CAAJ,GAAQ,CAA/B;IACA,MAAMb,KAAK,GAAGI,YAAY,GAAGU,MAA7B;IACA,IAAId,KAAK,IAAI,CAAT,IAAcA,KAAK,GAAGH,OAAO,CAACc,MAAlC,EAA0C;MACxCb,SAAS,CAACD,OAAO,CAACG,KAAD,CAAP,CAAeG,EAAhB,CAAT;MACAE,eAAe,CAACL,KAAD,CAAf;MACAU,UAAU;IACX;EACF;EAED,SAASK,cAAT,CAAwBC,EAAxB,EAA+B;IAC7B,IAAIZ,YAAY,IAAI,CAAhB,IAAqBA,YAAY,GAAGP,OAAO,CAACc,MAAhD,EAAwD;MACtD,IAAIK,EAAE,CAACC,GAAH,KAAW,WAAX,IAA0BD,EAAE,CAACC,GAAH,KAAW,GAAzC,EAA8C;QAC5CD,EAAE,CAACE,cAAH;QACAN,gBAAgB,CAAC,KAAD,CAAhB;MACD,CAHD;MAGO,IAAII,EAAE,CAACC,GAAH,KAAW,SAAX,IAAwBD,EAAE,CAACC,GAAH,KAAW,GAAvC,EAA4C;QACjDD,EAAE,CAACE,cAAH;QACAN,gBAAgB,CAAC,IAAD,CAAhB;MACD;IACF;EACF;EAEDjB,SAAS,CAAC,MAAK;IACbe,UAAU;EACX,CAFQ,CAAT;EAIA,OAAO;IACLK,cADK;IAELH,gBAFK;IAGLN,eAHK;IAILE,WAJK,EAAP;;AAMD","names":["useState","useEffect","useQueryPreviewState","queries","fetchData","currentQueryId","index","findIndex","query","id","currentIndex","setCurrentIndex","disablePrevious","setDisablePrevious","disableNext","setDisableNext","checkIndex","length","handleDataChange","previous","offset","handleKeyPress","ev","key","preventDefault"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/features/queries/hooks/useQueryPreviewState.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState, useEffect } from 'react';\n\ntype BaseQueryObject = {\n  id: number;\n};\n\nexport default function useQueryPreviewState<D extends BaseQueryObject = any>({\n  queries,\n  fetchData,\n  currentQueryId,\n}: {\n  queries: D[];\n  fetchData: (id: number) => any;\n  currentQueryId: number;\n}) {\n  const index = queries.findIndex(query => query.id === currentQueryId);\n  const [currentIndex, setCurrentIndex] = useState(index);\n  const [disablePrevious, setDisablePrevious] = useState(false);\n  const [disableNext, setDisableNext] = useState(false);\n\n  function checkIndex() {\n    setDisablePrevious(currentIndex === 0);\n    setDisableNext(currentIndex === queries.length - 1);\n  }\n\n  function handleDataChange(previous: boolean) {\n    const offset = previous ? -1 : 1;\n    const index = currentIndex + offset;\n    if (index >= 0 && index < queries.length) {\n      fetchData(queries[index].id);\n      setCurrentIndex(index);\n      checkIndex();\n    }\n  }\n\n  function handleKeyPress(ev: any) {\n    if (currentIndex >= 0 && currentIndex < queries.length) {\n      if (ev.key === 'ArrowDown' || ev.key === 'k') {\n        ev.preventDefault();\n        handleDataChange(false);\n      } else if (ev.key === 'ArrowUp' || ev.key === 'j') {\n        ev.preventDefault();\n        handleDataChange(true);\n      }\n    }\n  }\n\n  useEffect(() => {\n    checkIndex();\n  });\n\n  return {\n    handleKeyPress,\n    handleDataChange,\n    disablePrevious,\n    disableNext,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}