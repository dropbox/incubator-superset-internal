{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport Echart from '../components/Echart';\nimport { allEventHandlers } from '../utils/eventHandlers';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport default function EchartsGauge(props) {\n  const { height, width, echartOptions, selectedValues, refs } = props;\n  const eventHandlers = allEventHandlers(props);\n  return ___EmotionJSX(Echart, { refs: refs, height: height, width: width, echartOptions: echartOptions, eventHandlers: eventHandlers, selectedValues: selectedValues });\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(EchartsGauge, \"EchartsGauge\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-echarts/src/Gauge/EchartsGauge.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,gBAAT,QAAiC,wBAAjC,C;AAEA,eAAc,SAAUC,YAAV,CAAuBC,KAAvB,EAAwD;EACpE,MAAM,EAAEC,MAAF,EAAUC,KAAV,EAAiBC,aAAjB,EAAgCC,cAAhC,EAAgDC,IAAhD,KAAyDL,KAA/D;EAEA,MAAMM,aAAa,GAAGR,gBAAgB,CAACE,KAAD,CAAtC;EAEA,OACE,cAAC,MAAD,IACE,IAAI,EAAEK,IADR,EAEE,MAAM,EAAEJ,MAFV,EAGE,KAAK,EAAEC,KAHT,EAIE,aAAa,EAAEC,aAJjB,EAKE,aAAa,EAAEG,aALjB,EAME,cAAc,EAAEF,cANlB,GADF;AAUD,C,iLAfuBL,Y","names":["React","Echart","allEventHandlers","EchartsGauge","props","height","width","echartOptions","selectedValues","refs","eventHandlers"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-echarts/src/Gauge/EchartsGauge.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { GaugeChartTransformedProps } from './types';\nimport Echart from '../components/Echart';\nimport { allEventHandlers } from '../utils/eventHandlers';\n\nexport default function EchartsGauge(props: GaugeChartTransformedProps) {\n  const { height, width, echartOptions, selectedValues, refs } = props;\n\n  const eventHandlers = allEventHandlers(props);\n\n  return (\n    <Echart\n      refs={refs}\n      height={height}\n      width={width}\n      echartOptions={echartOptions}\n      eventHandlers={eventHandlers}\n      selectedValues={selectedValues}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}