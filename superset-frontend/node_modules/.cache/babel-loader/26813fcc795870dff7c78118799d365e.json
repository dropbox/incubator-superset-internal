{"ast":null,"code":"import React from 'react';\nimport { FilterXSS, getDefaultWhiteList } from 'xss';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst xssFilter = new FilterXSS({\n  whiteList: {\n    ...getDefaultWhiteList(),\n    span: ['style', 'class', 'title'],\n    div: ['style', 'class'],\n    a: ['style', 'class', 'href', 'title', 'target'],\n    img: ['style', 'class', 'src', 'alt', 'title', 'width', 'height'],\n    video: [\n    'autoplay',\n    'controls',\n    'loop',\n    'preload',\n    'src',\n    'height',\n    'width',\n    'muted'] },\n\n\n  stripIgnoreTag: true,\n  css: false });\n\nexport function sanitizeHtml(htmlString) {\n  return xssFilter.process(htmlString);\n}\nexport function isProbablyHTML(text) {\n  return /<[^>]+>/.test(text);\n}\nexport function sanitizeHtmlIfNeeded(htmlString) {\n  return isProbablyHTML(htmlString) ? sanitizeHtml(htmlString) : htmlString;\n}\nexport function safeHtmlSpan(possiblyHtmlString) {\n  const isHtml = isProbablyHTML(possiblyHtmlString);\n  if (isHtml) {\n    return ___EmotionJSX(\"span\", { className: \"safe-html-wrapper\", dangerouslySetInnerHTML: { __html: sanitizeHtml(possiblyHtmlString) } });\n  }\n  return possiblyHtmlString;\n}\nexport function removeHTMLTags(str) {\n  return str.replace(/<[^>]*>/g, '');\n}","map":{"version":3,"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,mBAApB,QAA+C,KAA/C,C;AAEA,MAAMC,SAAS,GAAG,IAAIF,SAAJ,CAAc;EAC9BG,SAAS,EAAE;IACT,GAAGF,mBAAmB,EADb;IAETG,IAAI,EAAE,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,CAFG;IAGTC,GAAG,EAAE,CAAC,OAAD,EAAU,OAAV,CAHI;IAITC,CAAC,EAAE,CAAC,OAAD,EAAU,OAAV,EAAmB,MAAnB,EAA2B,OAA3B,EAAoC,QAApC,CAJM;IAKTC,GAAG,EAAE,CAAC,OAAD,EAAU,OAAV,EAAmB,KAAnB,EAA0B,KAA1B,EAAiC,OAAjC,EAA0C,OAA1C,EAAmD,QAAnD,CALI;IAMTC,KAAK,EAAE;IACL,UADK;IAEL,UAFK;IAGL,MAHK;IAIL,SAJK;IAKL,KALK;IAML,QANK;IAOL,OAPK;IAQL,OARK,CANE,EADmB;;;EAkB9BC,cAAc,EAAE,IAlBc;EAmB9BC,GAAG,EAAE,KAnByB,EAAd,CAAlB;;AAsBA,OAAM,SAAUC,YAAV,CAAuBC,UAAvB,EAAyC;EAC7C,OAAOV,SAAS,CAACW,OAAV,CAAkBD,UAAlB,CAAP;AACD;AAED,OAAM,SAAUE,cAAV,CAAyBC,IAAzB,EAAqC;EACzC,OAAO,UAAUC,IAAV,CAAeD,IAAf,CAAP;AACD;AAED,OAAM,SAAUE,oBAAV,CAA+BL,UAA/B,EAAiD;EACrD,OAAOE,cAAc,CAACF,UAAD,CAAd,GAA6BD,YAAY,CAACC,UAAD,CAAzC,GAAwDA,UAA/D;AACD;AAED,OAAM,SAAUM,YAAV,CAAuBC,kBAAvB,EAAiD;EACrD,MAAMC,MAAM,GAAGN,cAAc,CAACK,kBAAD,CAA7B;EACA,IAAIC,MAAJ,EAAY;IACV,OACE,wBACE,SAAS,EAAC,mBADZ,EAEE,uBAAuB,EAAE,EAAEC,MAAM,EAAEV,YAAY,CAACQ,kBAAD,CAAtB,EAF3B,GADF;EAMD;EACD,OAAOA,kBAAP;AACD;AAED,OAAM,SAAUG,cAAV,CAAyBC,GAAzB,EAAoC;EACxC,OAAOA,GAAG,CAACC,OAAJ,CAAY,UAAZ,EAAwB,EAAxB,CAAP;AACD","names":["React","FilterXSS","getDefaultWhiteList","xssFilter","whiteList","span","div","a","img","video","stripIgnoreTag","css","sanitizeHtml","htmlString","process","isProbablyHTML","text","test","sanitizeHtmlIfNeeded","safeHtmlSpan","possiblyHtmlString","isHtml","__html","removeHTMLTags","str","replace"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/packages/superset-ui-core/src/utils/html.tsx"],"sourcesContent":["import React from 'react';\nimport { FilterXSS, getDefaultWhiteList } from 'xss';\n\nconst xssFilter = new FilterXSS({\n  whiteList: {\n    ...getDefaultWhiteList(),\n    span: ['style', 'class', 'title'],\n    div: ['style', 'class'],\n    a: ['style', 'class', 'href', 'title', 'target'],\n    img: ['style', 'class', 'src', 'alt', 'title', 'width', 'height'],\n    video: [\n      'autoplay',\n      'controls',\n      'loop',\n      'preload',\n      'src',\n      'height',\n      'width',\n      'muted',\n    ],\n  },\n  stripIgnoreTag: true,\n  css: false,\n});\n\nexport function sanitizeHtml(htmlString: string) {\n  return xssFilter.process(htmlString);\n}\n\nexport function isProbablyHTML(text: string) {\n  return /<[^>]+>/.test(text);\n}\n\nexport function sanitizeHtmlIfNeeded(htmlString: string) {\n  return isProbablyHTML(htmlString) ? sanitizeHtml(htmlString) : htmlString;\n}\n\nexport function safeHtmlSpan(possiblyHtmlString: string) {\n  const isHtml = isProbablyHTML(possiblyHtmlString);\n  if (isHtml) {\n    return (\n      <span\n        className=\"safe-html-wrapper\"\n        dangerouslySetInnerHTML={{ __html: sanitizeHtml(possiblyHtmlString) }}\n      />\n    );\n  }\n  return possiblyHtmlString;\n}\n\nexport function removeHTMLTags(str: string): string {\n  return str.replace(/<[^>]*>/g, '');\n}\n"]},"metadata":{},"sourceType":"module"}