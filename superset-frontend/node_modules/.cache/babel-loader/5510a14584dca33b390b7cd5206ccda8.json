{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /* eslint-disable camelcase */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { ensureIsArray, FeatureFlag, GenericDataType, hasGenericChartAxes, isAdhocColumn, isFeatureEnabled, isPhysicalColumn, QueryMode, smartDateFormatter, t } from '@superset-ui/core';\nimport { ColumnOption, D3_TIME_FORMAT_OPTIONS, QueryModeLabel, sections, sharedControls, defineSavedMetrics, getStandardizedControls } from '@superset-ui/chart-controls';\nimport { PAGE_SIZE_OPTIONS } from './consts';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nfunction getQueryMode(controls) {var _controls$query_mode, _controls$all_columns;\n  const mode = controls == null ? void 0 : (_controls$query_mode = controls.query_mode) == null ? void 0 : _controls$query_mode.value;\n  if (mode === QueryMode.aggregate || mode === QueryMode.raw) {\n    return mode;\n  }\n  const rawColumns = controls == null ? void 0 : (_controls$all_columns = controls.all_columns) == null ? void 0 : _controls$all_columns.value;\n  const hasRawColumns = rawColumns && rawColumns.length > 0;\n  return hasRawColumns ? QueryMode.raw : QueryMode.aggregate;\n}\n/**\n * Visibility check\n */\nfunction isQueryMode(mode) {\n  return (_ref) => {let { controls } = _ref;return getQueryMode(controls) === mode;};\n}\nconst isAggMode = isQueryMode(QueryMode.aggregate);\nconst isRawMode = isQueryMode(QueryMode.raw);\nconst validateAggControlValues = (controls, values) => {\n  const areControlsEmpty = values.every((val) => ensureIsArray(val).length === 0);\n  return areControlsEmpty && isAggMode({ controls }) ?\n  [t('Group By, Metrics or Percentage Metrics must have a value')] :\n  [];\n};\nconst queryMode = {\n  type: 'RadioButtonControl',\n  label: t('Query mode'),\n  default: null,\n  options: [\n  [QueryMode.aggregate, QueryModeLabel[QueryMode.aggregate]],\n  [QueryMode.raw, QueryModeLabel[QueryMode.raw]]],\n\n  mapStateToProps: (_ref2) => {let { controls } = _ref2;return { value: getQueryMode(controls) };},\n  rerender: ['all_columns', 'groupby', 'metrics', 'percent_metrics'] };\n\nconst allColumnsControl = {\n  ...sharedControls.groupby,\n  label: t('Columns'),\n  description: t('Columns to display'),\n  multi: true,\n  freeForm: true,\n  allowAll: true,\n  commaChoosesOption: false,\n  optionRenderer: (c) => ___EmotionJSX(ColumnOption, { showType: true, column: c }),\n  valueRenderer: (c) => ___EmotionJSX(ColumnOption, { column: c }),\n  valueKey: 'column_name',\n  mapStateToProps: (_ref3, controlState) => {let { datasource, controls } = _ref3;return {\n      options: (datasource == null ? void 0 : datasource.columns) || [],\n      queryMode: getQueryMode(controls),\n      externalValidationErrors: isRawMode({ controls }) && ensureIsArray(controlState == null ? void 0 : controlState.value).length === 0 ?\n      [t('must have a value')] :\n      [] };},\n\n  visibility: isRawMode,\n  resetOnHide: false };\n\nconst percentMetricsControl = {\n  ...sharedControls.metrics,\n  label: t('Percentage metrics'),\n  description: t('Metrics for which percentage of total are to be displayed. Calculated from only data within the row limit.'),\n  visibility: isAggMode,\n  resetOnHide: false,\n  mapStateToProps: (_ref4, controlState) => {var _controls$groupby, _controls$metrics;let { datasource, controls } = _ref4;return {\n      columns: (datasource == null ? void 0 : datasource.columns) || [],\n      savedMetrics: defineSavedMetrics(datasource),\n      datasource,\n      datasourceType: datasource == null ? void 0 : datasource.type,\n      queryMode: getQueryMode(controls),\n      externalValidationErrors: validateAggControlValues(controls, [(_controls$groupby =\n      controls.groupby) == null ? void 0 : _controls$groupby.value, (_controls$metrics =\n      controls.metrics) == null ? void 0 : _controls$metrics.value,\n      controlState == null ? void 0 : controlState.value]) };},\n\n\n  rerender: ['groupby', 'metrics'],\n  default: [],\n  validators: [] };\n\nconst config = {\n  controlPanelSections: [\n  sections.genericTime,\n  {\n    label: t('Query'),\n    expanded: true,\n    controlSetRows: [\n    [\n    {\n      name: 'query_mode',\n      config: queryMode }],\n\n\n    [\n    {\n      name: 'groupby',\n      override: {\n        visibility: isAggMode,\n        resetOnHide: false,\n        mapStateToProps: (state, controlState) => {var _sharedControls$group, _originalMapStateToPr, _controls$metrics2, _controls$percent_met;\n          const { controls } = state;\n          const originalMapStateToProps = sharedControls == null ? void 0 : (_sharedControls$group = sharedControls.groupby) == null ? void 0 : _sharedControls$group.mapStateToProps;\n          const newState = (_originalMapStateToPr = originalMapStateToProps == null ? void 0 : originalMapStateToProps(state, controlState)) != null ? _originalMapStateToPr : {};\n          newState.externalValidationErrors = validateAggControlValues(controls, [(_controls$metrics2 =\n          controls.metrics) == null ? void 0 : _controls$metrics2.value, (_controls$percent_met =\n          controls.percent_metrics) == null ? void 0 : _controls$percent_met.value,\n          controlState.value]);\n\n          return newState;\n        },\n        rerender: ['metrics', 'percent_metrics'] } }],\n\n\n\n    [\n    hasGenericChartAxes && isAggMode ?\n    {\n      name: 'time_grain_sqla',\n      config: {\n        ...sharedControls.time_grain_sqla,\n        visibility: (_ref5) => {var _controls$groupby2;let { controls } = _ref5;\n          const dttmLookup = Object.fromEntries(ensureIsArray(controls == null ? void 0 : (_controls$groupby2 = controls.groupby) == null ? void 0 : _controls$groupby2.options).map((option) => [\n          option.column_name,\n          option.is_dttm]));\n\n          return ensureIsArray(controls == null ? void 0 : controls.groupby.value).\n          map((selection) => {\n            if (isAdhocColumn(selection)) {\n              return true;\n            }\n            if (isPhysicalColumn(selection)) {\n              return !!dttmLookup[selection];\n            }\n            return false;\n          }).\n          some(Boolean);\n        } } } :\n\n\n    null,\n    hasGenericChartAxes && isAggMode ? 'temporal_columns_lookup' : null],\n\n    [\n    {\n      name: 'metrics',\n      override: {\n        validators: [],\n        visibility: isAggMode,\n        resetOnHide: false,\n        mapStateToProps: (_ref6, controlState) => {var _datasource$columns$, _datasource$columns, _controls$groupby3, _controls$percent_met2;let { controls, datasource, form_data } = _ref6;return {\n            columns: datasource != null && (_datasource$columns$ = datasource.columns[0]) != null && _datasource$columns$.hasOwnProperty('filterable') ?\n            datasource == null ? void 0 : (_datasource$columns = datasource.columns) == null ? void 0 : _datasource$columns.filter((c) => c.filterable) :\n            datasource == null ? void 0 : datasource.columns,\n            savedMetrics: defineSavedMetrics(datasource),\n            // current active adhoc metrics\n            selectedMetrics: form_data.metrics || (\n            form_data.metric ? [form_data.metric] : []),\n            datasource,\n            externalValidationErrors: validateAggControlValues(controls, [(_controls$groupby3 =\n            controls.groupby) == null ? void 0 : _controls$groupby3.value, (_controls$percent_met2 =\n            controls.percent_metrics) == null ? void 0 : _controls$percent_met2.value,\n            controlState.value]) };},\n\n\n        rerender: ['groupby', 'percent_metrics'] } },\n\n\n    {\n      name: 'all_columns',\n      config: allColumnsControl }],\n\n\n    [\n    {\n      name: 'percent_metrics',\n      config: percentMetricsControl }],\n\n\n    ['adhoc_filters'],\n    [\n    {\n      name: 'timeseries_limit_metric',\n      override: {\n        visibility: isAggMode,\n        resetOnHide: false } },\n\n\n    {\n      name: 'order_by_cols',\n      config: {\n        type: 'SelectControl',\n        label: t('Ordering'),\n        description: t('Order results by selected columns'),\n        multi: true,\n        default: [],\n        mapStateToProps: (_ref7) => {let { datasource } = _ref7;return {\n            choices: datasource != null && datasource.hasOwnProperty('order_by_choices') ?\n            datasource == null ? void 0 : datasource.order_by_choices :\n            (datasource == null ? void 0 : datasource.columns) || [] };},\n\n        visibility: isRawMode,\n        resetOnHide: false } }],\n\n\n\n    isFeatureEnabled(FeatureFlag.DASHBOARD_CROSS_FILTERS) ||\n    isFeatureEnabled(FeatureFlag.DASHBOARD_NATIVE_FILTERS) ?\n    [\n    {\n      name: 'server_pagination',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Server pagination'),\n        description: t('Enable server side pagination of results (experimental feature)'),\n        default: false } }] :\n\n\n\n    [],\n    [\n    {\n      name: 'row_limit',\n      override: {\n        default: 1000,\n        visibility: (_ref8) => {var _controls$server_pagi;let { controls } = _ref8;return !(controls != null && (_controls$server_pagi = controls.server_pagination) != null && _controls$server_pagi.value);} } },\n\n\n    {\n      name: 'server_page_length',\n      config: {\n        type: 'SelectControl',\n        freeForm: true,\n        label: t('Server Page Length'),\n        default: 10,\n        choices: PAGE_SIZE_OPTIONS,\n        description: t('Rows per page, 0 means no pagination'),\n        visibility: (_ref9) => {var _controls$server_pagi2;let { controls } = _ref9;return Boolean(controls == null ? void 0 : (_controls$server_pagi2 = controls.server_pagination) == null ? void 0 : _controls$server_pagi2.value);} } }],\n\n\n\n    !hasGenericChartAxes ?\n    [\n    {\n      name: 'include_time',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Include time'),\n        description: t('Whether to include the time granularity as defined in the time section'),\n        default: false,\n        visibility: isAggMode,\n        resetOnHide: false } }] :\n\n\n\n    [null],\n    [\n    {\n      name: 'order_desc',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Sort descending'),\n        default: true,\n        description: t('Whether to sort descending or ascending'),\n        visibility: isAggMode,\n        resetOnHide: false } }],\n\n\n\n    [\n    {\n      name: 'show_totals',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Show totals'),\n        default: false,\n        description: t('Show total aggregations of selected metrics. Note that row limit does not apply to the result.'),\n        visibility: isAggMode,\n        resetOnHide: false } }]] },\n\n\n\n\n\n  {\n    label: t('Options'),\n    expanded: true,\n    controlSetRows: [\n    [\n    {\n      name: 'table_timestamp_format',\n      config: {\n        type: 'SelectControl',\n        freeForm: true,\n        label: t('Timestamp format'),\n        default: smartDateFormatter.id,\n        renderTrigger: true,\n        clearable: false,\n        choices: D3_TIME_FORMAT_OPTIONS,\n        description: t('D3 time format for datetime columns') } }],\n\n\n\n    [\n    {\n      name: 'page_length',\n      config: {\n        type: 'SelectControl',\n        freeForm: true,\n        renderTrigger: true,\n        label: t('Page length'),\n        default: null,\n        choices: PAGE_SIZE_OPTIONS,\n        description: t('Rows per page, 0 means no pagination'),\n        visibility: (_ref10) => {var _controls$server_pagi3;let { controls } = _ref10;return !(controls != null && (_controls$server_pagi3 = controls.server_pagination) != null && _controls$server_pagi3.value);} } },\n\n\n    null],\n\n    [\n    {\n      name: 'include_search',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Search box'),\n        renderTrigger: true,\n        default: false,\n        description: t('Whether to include a client-side search box') } },\n\n\n    {\n      name: 'show_cell_bars',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Cell bars'),\n        renderTrigger: true,\n        default: true,\n        description: t('Whether to display a bar chart background in table columns') } }],\n\n\n\n    [\n    {\n      name: 'align_pn',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Align +/-'),\n        renderTrigger: true,\n        default: false,\n        description: t('Whether to align background charts with both positive and negative values at 0') } },\n\n\n    {\n      name: 'color_pn',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Color +/-'),\n        renderTrigger: true,\n        default: true,\n        description: t('Whether to colorize numeric values by if they are positive or negative') } }],\n\n\n\n    [\n    {\n      name: 'allow_rearrange_columns',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Allow columns to be rearranged'),\n        renderTrigger: true,\n        default: false,\n        description: t(\"Allow end user to drag-and-drop column headers to rearrange them. Note their changes won't persist for the next time they open the chart.\") } }],\n\n\n\n    [\n    {\n      name: 'column_config',\n      config: {\n        type: 'ColumnConfigControl',\n        label: t('Customize columns'),\n        description: t('Further customize how to display each column'),\n        renderTrigger: true,\n        shouldMapStateToProps() {\n          return true;\n        },\n        mapStateToProps(explore, _, chart) {var _chart$queriesRespons;\n          return {\n            queryResponse: chart == null ? void 0 : (_chart$queriesRespons = chart.queriesResponse) == null ? void 0 : _chart$queriesRespons[0] };\n\n        } } }],\n\n\n\n    [\n    {\n      name: 'conditional_formatting',\n      config: {\n        type: 'ConditionalFormattingControl',\n        renderTrigger: true,\n        label: t('Conditional formatting'),\n        description: t('Apply conditional color formatting to numeric columns'),\n        shouldMapStateToProps() {\n          return true;\n        },\n        mapStateToProps(explore, _, chart) {var _explore$datasource, _explore$datasource2, _explore$datasource$c, _explore$datasource3, _chart$queriesRespons2, _chart$queriesRespons3;\n          const verboseMap = explore != null && (_explore$datasource = explore.datasource) != null && _explore$datasource.hasOwnProperty('verbose_map') ?\n          explore == null ? void 0 : (_explore$datasource2 = explore.datasource) == null ? void 0 : _explore$datasource2.verbose_map : (_explore$datasource$c =\n          explore == null ? void 0 : (_explore$datasource3 = explore.datasource) == null ? void 0 : _explore$datasource3.columns) != null ? _explore$datasource$c : {};\n          const chartStatus = chart == null ? void 0 : chart.chartStatus;\n          const { colnames, coltypes } = (_chart$queriesRespons2 = chart == null ? void 0 : (_chart$queriesRespons3 = chart.queriesResponse) == null ? void 0 : _chart$queriesRespons3[0]) != null ? _chart$queriesRespons2 : {};\n          const numericColumns = Array.isArray(colnames) && Array.isArray(coltypes) ?\n          colnames.\n          filter((colname, index) => coltypes[index] === GenericDataType.NUMERIC).\n          map((colname) => {var _verboseMap$colname;return {\n              value: colname,\n              label: (_verboseMap$colname = verboseMap[colname]) != null ? _verboseMap$colname : colname };}) :\n\n          [];\n          return {\n            removeIrrelevantConditions: chartStatus === 'success',\n            columnOptions: numericColumns,\n            verboseMap };\n\n        } } }]] }],\n\n\n\n\n\n\n  formDataOverrides: (formData) => ({\n    ...formData,\n    metrics: getStandardizedControls().popAllMetrics(),\n    groupby: getStandardizedControls().popAllColumns() }) };const _default =\n\n\nconfig;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(getQueryMode, \"getQueryMode\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-table/src/controlPanel.tsx\");reactHotLoader.register(isQueryMode, \"isQueryMode\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-table/src/controlPanel.tsx\");reactHotLoader.register(isAggMode, \"isAggMode\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-table/src/controlPanel.tsx\");reactHotLoader.register(isRawMode, \"isRawMode\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-table/src/controlPanel.tsx\");reactHotLoader.register(validateAggControlValues, \"validateAggControlValues\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-table/src/controlPanel.tsx\");reactHotLoader.register(queryMode, \"queryMode\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-table/src/controlPanel.tsx\");reactHotLoader.register(allColumnsControl, \"allColumnsControl\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-table/src/controlPanel.tsx\");reactHotLoader.register(percentMetricsControl, \"percentMetricsControl\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-table/src/controlPanel.tsx\");reactHotLoader.register(config, \"config\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-table/src/controlPanel.tsx\");reactHotLoader.register(_default, \"default\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-table/src/controlPanel.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"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","names":["React","ensureIsArray","FeatureFlag","GenericDataType","hasGenericChartAxes","isAdhocColumn","isFeatureEnabled","isPhysicalColumn","QueryMode","smartDateFormatter","t","ColumnOption","D3_TIME_FORMAT_OPTIONS","QueryModeLabel","sections","sharedControls","defineSavedMetrics","getStandardizedControls","PAGE_SIZE_OPTIONS","getQueryMode","controls","mode","query_mode","value","aggregate","raw","rawColumns","all_columns","hasRawColumns","length","isQueryMode","isAggMode","isRawMode","validateAggControlValues","values","areControlsEmpty","every","val","queryMode","type","label","default","options","mapStateToProps","rerender","allColumnsControl","groupby","description","multi","freeForm","allowAll","commaChoosesOption","optionRenderer","c","valueRenderer","valueKey","controlState","datasource","columns","externalValidationErrors","visibility","resetOnHide","percentMetricsControl","metrics","savedMetrics","datasourceType","validators","config","controlPanelSections","genericTime","expanded","controlSetRows","name","override","state","originalMapStateToProps","newState","percent_metrics","time_grain_sqla","dttmLookup","Object","fromEntries","map","option","column_name","is_dttm","selection","some","Boolean","form_data","hasOwnProperty","filter","filterable","selectedMetrics","metric","choices","order_by_choices","DASHBOARD_CROSS_FILTERS","DASHBOARD_NATIVE_FILTERS","server_pagination","id","renderTrigger","clearable","shouldMapStateToProps","explore","_","chart","queryResponse","queriesResponse","verboseMap","verbose_map","chartStatus","colnames","coltypes","numericColumns","Array","isArray","colname","index","NUMERIC","removeIrrelevantConditions","columnOptions","formDataOverrides","formData","popAllMetrics","popAllColumns"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-table/src/controlPanel.tsx"],"sourcesContent":["/* eslint-disable camelcase */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport {\n  ChartDataResponseResult,\n  ensureIsArray,\n  FeatureFlag,\n  GenericDataType,\n  hasGenericChartAxes,\n  isAdhocColumn,\n  isFeatureEnabled,\n  isPhysicalColumn,\n  QueryFormColumn,\n  QueryMode,\n  smartDateFormatter,\n  t,\n} from '@superset-ui/core';\nimport {\n  ColumnOption,\n  ControlConfig,\n  ControlPanelConfig,\n  ControlPanelsContainerProps,\n  ControlStateMapping,\n  D3_TIME_FORMAT_OPTIONS,\n  QueryModeLabel,\n  sections,\n  sharedControls,\n  ControlPanelState,\n  ControlState,\n  Dataset,\n  ColumnMeta,\n  defineSavedMetrics,\n  getStandardizedControls,\n} from '@superset-ui/chart-controls';\n\nimport { PAGE_SIZE_OPTIONS } from './consts';\n\nfunction getQueryMode(controls: ControlStateMapping): QueryMode {\n  const mode = controls?.query_mode?.value;\n  if (mode === QueryMode.aggregate || mode === QueryMode.raw) {\n    return mode as QueryMode;\n  }\n  const rawColumns = controls?.all_columns?.value as\n    | QueryFormColumn[]\n    | undefined;\n  const hasRawColumns = rawColumns && rawColumns.length > 0;\n  return hasRawColumns ? QueryMode.raw : QueryMode.aggregate;\n}\n\n/**\n * Visibility check\n */\nfunction isQueryMode(mode: QueryMode) {\n  return ({ controls }: Pick<ControlPanelsContainerProps, 'controls'>) =>\n    getQueryMode(controls) === mode;\n}\n\nconst isAggMode = isQueryMode(QueryMode.aggregate);\nconst isRawMode = isQueryMode(QueryMode.raw);\n\nconst validateAggControlValues = (\n  controls: ControlStateMapping,\n  values: any[],\n) => {\n  const areControlsEmpty = values.every(val => ensureIsArray(val).length === 0);\n  return areControlsEmpty && isAggMode({ controls })\n    ? [t('Group By, Metrics or Percentage Metrics must have a value')]\n    : [];\n};\n\nconst queryMode: ControlConfig<'RadioButtonControl'> = {\n  type: 'RadioButtonControl',\n  label: t('Query mode'),\n  default: null,\n  options: [\n    [QueryMode.aggregate, QueryModeLabel[QueryMode.aggregate]],\n    [QueryMode.raw, QueryModeLabel[QueryMode.raw]],\n  ],\n  mapStateToProps: ({ controls }) => ({ value: getQueryMode(controls) }),\n  rerender: ['all_columns', 'groupby', 'metrics', 'percent_metrics'],\n};\n\nconst allColumnsControl: typeof sharedControls.groupby = {\n  ...sharedControls.groupby,\n  label: t('Columns'),\n  description: t('Columns to display'),\n  multi: true,\n  freeForm: true,\n  allowAll: true,\n  commaChoosesOption: false,\n  optionRenderer: c => <ColumnOption showType column={c} />,\n  valueRenderer: c => <ColumnOption column={c} />,\n  valueKey: 'column_name',\n  mapStateToProps: ({ datasource, controls }, controlState) => ({\n    options: datasource?.columns || [],\n    queryMode: getQueryMode(controls),\n    externalValidationErrors:\n      isRawMode({ controls }) && ensureIsArray(controlState?.value).length === 0\n        ? [t('must have a value')]\n        : [],\n  }),\n  visibility: isRawMode,\n  resetOnHide: false,\n};\n\nconst percentMetricsControl: typeof sharedControls.metrics = {\n  ...sharedControls.metrics,\n  label: t('Percentage metrics'),\n  description: t(\n    'Metrics for which percentage of total are to be displayed. Calculated from only data within the row limit.',\n  ),\n  visibility: isAggMode,\n  resetOnHide: false,\n  mapStateToProps: ({ datasource, controls }, controlState) => ({\n    columns: datasource?.columns || [],\n    savedMetrics: defineSavedMetrics(datasource),\n    datasource,\n    datasourceType: datasource?.type,\n    queryMode: getQueryMode(controls),\n    externalValidationErrors: validateAggControlValues(controls, [\n      controls.groupby?.value,\n      controls.metrics?.value,\n      controlState?.value,\n    ]),\n  }),\n  rerender: ['groupby', 'metrics'],\n  default: [],\n  validators: [],\n};\n\nconst config: ControlPanelConfig = {\n  controlPanelSections: [\n    sections.genericTime,\n    {\n      label: t('Query'),\n      expanded: true,\n      controlSetRows: [\n        [\n          {\n            name: 'query_mode',\n            config: queryMode,\n          },\n        ],\n        [\n          {\n            name: 'groupby',\n            override: {\n              visibility: isAggMode,\n              resetOnHide: false,\n              mapStateToProps: (\n                state: ControlPanelState,\n                controlState: ControlState,\n              ) => {\n                const { controls } = state;\n                const originalMapStateToProps =\n                  sharedControls?.groupby?.mapStateToProps;\n                const newState =\n                  originalMapStateToProps?.(state, controlState) ?? {};\n                newState.externalValidationErrors = validateAggControlValues(\n                  controls,\n                  [\n                    controls.metrics?.value,\n                    controls.percent_metrics?.value,\n                    controlState.value,\n                  ],\n                );\n\n                return newState;\n              },\n              rerender: ['metrics', 'percent_metrics'],\n            },\n          },\n        ],\n        [\n          hasGenericChartAxes && isAggMode\n            ? {\n                name: 'time_grain_sqla',\n                config: {\n                  ...sharedControls.time_grain_sqla,\n                  visibility: ({ controls }) => {\n                    const dttmLookup = Object.fromEntries(\n                      ensureIsArray(controls?.groupby?.options).map(option => [\n                        option.column_name,\n                        option.is_dttm,\n                      ]),\n                    );\n\n                    return ensureIsArray(controls?.groupby.value)\n                      .map(selection => {\n                        if (isAdhocColumn(selection)) {\n                          return true;\n                        }\n                        if (isPhysicalColumn(selection)) {\n                          return !!dttmLookup[selection];\n                        }\n                        return false;\n                      })\n                      .some(Boolean);\n                  },\n                },\n              }\n            : null,\n          hasGenericChartAxes && isAggMode ? 'temporal_columns_lookup' : null,\n        ],\n        [\n          {\n            name: 'metrics',\n            override: {\n              validators: [],\n              visibility: isAggMode,\n              resetOnHide: false,\n              mapStateToProps: (\n                { controls, datasource, form_data }: ControlPanelState,\n                controlState: ControlState,\n              ) => ({\n                columns: datasource?.columns[0]?.hasOwnProperty('filterable')\n                  ? (datasource as Dataset)?.columns?.filter(\n                      (c: ColumnMeta) => c.filterable,\n                    )\n                  : datasource?.columns,\n                savedMetrics: defineSavedMetrics(datasource),\n                // current active adhoc metrics\n                selectedMetrics:\n                  form_data.metrics ||\n                  (form_data.metric ? [form_data.metric] : []),\n                datasource,\n                externalValidationErrors: validateAggControlValues(controls, [\n                  controls.groupby?.value,\n                  controls.percent_metrics?.value,\n                  controlState.value,\n                ]),\n              }),\n              rerender: ['groupby', 'percent_metrics'],\n            },\n          },\n          {\n            name: 'all_columns',\n            config: allColumnsControl,\n          },\n        ],\n        [\n          {\n            name: 'percent_metrics',\n            config: percentMetricsControl,\n          },\n        ],\n        ['adhoc_filters'],\n        [\n          {\n            name: 'timeseries_limit_metric',\n            override: {\n              visibility: isAggMode,\n              resetOnHide: false,\n            },\n          },\n          {\n            name: 'order_by_cols',\n            config: {\n              type: 'SelectControl',\n              label: t('Ordering'),\n              description: t('Order results by selected columns'),\n              multi: true,\n              default: [],\n              mapStateToProps: ({ datasource }) => ({\n                choices: datasource?.hasOwnProperty('order_by_choices')\n                  ? (datasource as Dataset)?.order_by_choices\n                  : datasource?.columns || [],\n              }),\n              visibility: isRawMode,\n              resetOnHide: false,\n            },\n          },\n        ],\n        isFeatureEnabled(FeatureFlag.DASHBOARD_CROSS_FILTERS) ||\n        isFeatureEnabled(FeatureFlag.DASHBOARD_NATIVE_FILTERS)\n          ? [\n              {\n                name: 'server_pagination',\n                config: {\n                  type: 'CheckboxControl',\n                  label: t('Server pagination'),\n                  description: t(\n                    'Enable server side pagination of results (experimental feature)',\n                  ),\n                  default: false,\n                },\n              },\n            ]\n          : [],\n        [\n          {\n            name: 'row_limit',\n            override: {\n              default: 1000,\n              visibility: ({ controls }: ControlPanelsContainerProps) =>\n                !controls?.server_pagination?.value,\n            },\n          },\n          {\n            name: 'server_page_length',\n            config: {\n              type: 'SelectControl',\n              freeForm: true,\n              label: t('Server Page Length'),\n              default: 10,\n              choices: PAGE_SIZE_OPTIONS,\n              description: t('Rows per page, 0 means no pagination'),\n              visibility: ({ controls }: ControlPanelsContainerProps) =>\n                Boolean(controls?.server_pagination?.value),\n            },\n          },\n        ],\n        !hasGenericChartAxes\n          ? [\n              {\n                name: 'include_time',\n                config: {\n                  type: 'CheckboxControl',\n                  label: t('Include time'),\n                  description: t(\n                    'Whether to include the time granularity as defined in the time section',\n                  ),\n                  default: false,\n                  visibility: isAggMode,\n                  resetOnHide: false,\n                },\n              },\n            ]\n          : [null],\n        [\n          {\n            name: 'order_desc',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Sort descending'),\n              default: true,\n              description: t('Whether to sort descending or ascending'),\n              visibility: isAggMode,\n              resetOnHide: false,\n            },\n          },\n        ],\n        [\n          {\n            name: 'show_totals',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Show totals'),\n              default: false,\n              description: t(\n                'Show total aggregations of selected metrics. Note that row limit does not apply to the result.',\n              ),\n              visibility: isAggMode,\n              resetOnHide: false,\n            },\n          },\n        ],\n      ],\n    },\n    {\n      label: t('Options'),\n      expanded: true,\n      controlSetRows: [\n        [\n          {\n            name: 'table_timestamp_format',\n            config: {\n              type: 'SelectControl',\n              freeForm: true,\n              label: t('Timestamp format'),\n              default: smartDateFormatter.id,\n              renderTrigger: true,\n              clearable: false,\n              choices: D3_TIME_FORMAT_OPTIONS,\n              description: t('D3 time format for datetime columns'),\n            },\n          },\n        ],\n        [\n          {\n            name: 'page_length',\n            config: {\n              type: 'SelectControl',\n              freeForm: true,\n              renderTrigger: true,\n              label: t('Page length'),\n              default: null,\n              choices: PAGE_SIZE_OPTIONS,\n              description: t('Rows per page, 0 means no pagination'),\n              visibility: ({ controls }: ControlPanelsContainerProps) =>\n                !controls?.server_pagination?.value,\n            },\n          },\n          null,\n        ],\n        [\n          {\n            name: 'include_search',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Search box'),\n              renderTrigger: true,\n              default: false,\n              description: t('Whether to include a client-side search box'),\n            },\n          },\n          {\n            name: 'show_cell_bars',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Cell bars'),\n              renderTrigger: true,\n              default: true,\n              description: t(\n                'Whether to display a bar chart background in table columns',\n              ),\n            },\n          },\n        ],\n        [\n          {\n            name: 'align_pn',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Align +/-'),\n              renderTrigger: true,\n              default: false,\n              description: t(\n                'Whether to align background charts with both positive and negative values at 0',\n              ),\n            },\n          },\n          {\n            name: 'color_pn',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Color +/-'),\n              renderTrigger: true,\n              default: true,\n              description: t(\n                'Whether to colorize numeric values by if they are positive or negative',\n              ),\n            },\n          },\n        ],\n        [\n          {\n            name: 'allow_rearrange_columns',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Allow columns to be rearranged'),\n              renderTrigger: true,\n              default: false,\n              description: t(\n                \"Allow end user to drag-and-drop column headers to rearrange them. Note their changes won't persist for the next time they open the chart.\",\n              ),\n            },\n          },\n        ],\n        [\n          {\n            name: 'column_config',\n            config: {\n              type: 'ColumnConfigControl',\n              label: t('Customize columns'),\n              description: t('Further customize how to display each column'),\n              renderTrigger: true,\n              shouldMapStateToProps() {\n                return true;\n              },\n              mapStateToProps(explore, _, chart) {\n                return {\n                  queryResponse: chart?.queriesResponse?.[0] as\n                    | ChartDataResponseResult\n                    | undefined,\n                };\n              },\n            },\n          },\n        ],\n        [\n          {\n            name: 'conditional_formatting',\n            config: {\n              type: 'ConditionalFormattingControl',\n              renderTrigger: true,\n              label: t('Conditional formatting'),\n              description: t(\n                'Apply conditional color formatting to numeric columns',\n              ),\n              shouldMapStateToProps() {\n                return true;\n              },\n              mapStateToProps(explore, _, chart) {\n                const verboseMap = explore?.datasource?.hasOwnProperty(\n                  'verbose_map',\n                )\n                  ? (explore?.datasource as Dataset)?.verbose_map\n                  : explore?.datasource?.columns ?? {};\n                const chartStatus = chart?.chartStatus;\n                const { colnames, coltypes } =\n                  chart?.queriesResponse?.[0] ?? {};\n                const numericColumns =\n                  Array.isArray(colnames) && Array.isArray(coltypes)\n                    ? colnames\n                        .filter(\n                          (colname: string, index: number) =>\n                            coltypes[index] === GenericDataType.NUMERIC,\n                        )\n                        .map(colname => ({\n                          value: colname,\n                          label: verboseMap[colname] ?? colname,\n                        }))\n                    : [];\n                return {\n                  removeIrrelevantConditions: chartStatus === 'success',\n                  columnOptions: numericColumns,\n                  verboseMap,\n                };\n              },\n            },\n          },\n        ],\n      ],\n    },\n  ],\n  formDataOverrides: formData => ({\n    ...formData,\n    metrics: getStandardizedControls().popAllMetrics(),\n    groupby: getStandardizedControls().popAllColumns(),\n  }),\n};\n\nexport default config;\n"]},"metadata":{},"sourceType":"module"}