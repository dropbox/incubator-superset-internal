{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { FeatureFlag, isFeatureEnabled, t } from '@superset-ui/core';\nimport { columnChoices, formatSelectOptions, sections, sharedControls, getStandardizedControls } from '@superset-ui/chart-controls';\nconst allColumns = {\n  type: 'SelectControl',\n  default: null,\n  mapStateToProps: (state) => ({\n    choices: columnChoices(state.datasource) }) };\n\n\nconst columnsConfig = isFeatureEnabled(FeatureFlag.ENABLE_EXPLORE_DRAG_AND_DROP) ?\nsharedControls.entity :\nallColumns;\nconst colorChoices = [\n['rgb(0, 139, 139)', t('Dark Cyan')],\n['rgb(128, 0, 128)', t('Purple')],\n['rgb(255, 215, 0)', t('Gold')],\n['rgb(69, 69, 69)', t('Dim Gray')],\n['rgb(220, 20, 60)', t('Crimson')],\n['rgb(34, 139, 34)', t('Forest Green')]];\n\nconst config = {\n  controlPanelSections: [\n  sections.legacyRegularTime,\n  {\n    label: t('Query'),\n    expanded: true,\n    controlSetRows: [\n    [\n    {\n      name: 'all_columns_x',\n      config: {\n        ...columnsConfig,\n        label: t('Longitude'),\n        description: t('Column containing longitude data') } }],\n\n\n\n    [\n    {\n      name: 'all_columns_y',\n      config: {\n        ...columnsConfig,\n        label: t('Latitude'),\n        description: t('Column containing latitude data') } }],\n\n\n\n    [\n    {\n      name: 'clustering_radius',\n      config: {\n        type: 'SelectControl',\n        freeForm: true,\n        label: t('Clustering Radius'),\n        default: '60',\n        choices: formatSelectOptions([\n        '0',\n        '20',\n        '40',\n        '60',\n        '80',\n        '100',\n        '200',\n        '500',\n        '1000']),\n\n        description: t('The radius (in pixels) the algorithm uses to define a cluster. ' +\n        'Choose 0 to turn off clustering, but beware that a large ' +\n        'number of points (>1000) will cause lag.') } }],\n\n\n\n    ['row_limit'],\n    ['adhoc_filters'],\n    ['groupby']] },\n\n\n  {\n    label: t('Points'),\n    controlSetRows: [\n    [\n    {\n      name: 'point_radius',\n      config: {\n        type: 'SelectControl',\n        label: t('Point Radius'),\n        default: 'Auto',\n        description: t('The radius of individual points (ones that are not in a cluster). ' +\n        'Either a numerical column or `Auto`, which scales the point based ' +\n        'on the largest cluster'),\n        mapStateToProps: (state) => {\n          const datasourceChoices = columnChoices(state.datasource);\n          const choices = [['Auto', t('Auto')]];\n          return {\n            choices: choices.concat(datasourceChoices) };\n\n        } } }],\n\n\n\n    [\n    {\n      name: 'point_radius_unit',\n      config: {\n        type: 'SelectControl',\n        label: t('Point Radius Unit'),\n        default: 'Pixels',\n        choices: [\n        ['Pixels', t('Pixels')],\n        ['Miles', t('Miles')],\n        ['Kilometers', t('Kilometers')]],\n\n        description: t('The unit of measure for the specified point radius') } }]] },\n\n\n\n\n\n  {\n    label: t('Labelling'),\n    controlSetRows: [\n    [\n    {\n      name: 'mapbox_label',\n      config: {\n        type: 'SelectControl',\n        multi: true,\n        label: t('label'),\n        default: [],\n        description: t('`count` is COUNT(*) if a group by is used. ' +\n        'Numerical columns will be aggregated with the aggregator. ' +\n        'Non-numerical columns will be used to label points. ' +\n        'Leave empty to get a count of points in each cluster.'),\n        mapStateToProps: (state) => ({\n          choices: columnChoices(state.datasource) }) } }],\n\n\n\n\n    [\n    {\n      name: 'pandas_aggfunc',\n      config: {\n        type: 'SelectControl',\n        label: t('Cluster label aggregator'),\n        clearable: false,\n        choices: [\n        ['sum', t('sum')],\n        ['mean', t('mean')],\n        ['min', t('min')],\n        ['max', t('max')],\n        ['std', t('std')],\n        ['var', t('var')]],\n\n        default: 'sum',\n        description: t('Aggregate function applied to the list of points ' +\n        'in each cluster to produce the cluster label.') } }]] },\n\n\n\n\n\n  {\n    label: t('Visual Tweaks'),\n    controlSetRows: [\n    [\n    {\n      name: 'render_while_dragging',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Live render'),\n        default: true,\n        description: t('Points and clusters will update as the viewport is being changed') } }],\n\n\n\n    [\n    {\n      name: 'mapbox_style',\n      config: {\n        type: 'SelectControl',\n        label: t('Map Style'),\n        clearable: false,\n        renderTrigger: true,\n        choices: [\n        ['mapbox://styles/mapbox/streets-v9', t('Streets')],\n        ['mapbox://styles/mapbox/dark-v9', t('Dark')],\n        ['mapbox://styles/mapbox/light-v9', t('Light')],\n        [\n        'mapbox://styles/mapbox/satellite-streets-v9',\n        t('Satellite Streets')],\n\n        ['mapbox://styles/mapbox/satellite-v9', t('Satellite')],\n        ['mapbox://styles/mapbox/outdoors-v9', t('Outdoors')]],\n\n        default: 'mapbox://styles/mapbox/light-v9',\n        description: t('Base layer map style') } }],\n\n\n\n    [\n    {\n      name: 'global_opacity',\n      config: {\n        type: 'TextControl',\n        label: t('Opacity'),\n        default: 1,\n        isFloat: true,\n        description: t('Opacity of all clusters, points, and labels. Between 0 and 1.') } }],\n\n\n\n    [\n    {\n      name: 'mapbox_color',\n      config: {\n        type: 'SelectControl',\n        freeForm: true,\n        label: t('RGB Color'),\n        default: colorChoices[0][0],\n        choices: colorChoices,\n        description: t('The color for points and clusters in RGB') } }]] },\n\n\n\n\n\n  {\n    label: t('Viewport'),\n    expanded: true,\n    controlSetRows: [\n    [\n    {\n      name: 'viewport_longitude',\n      config: {\n        type: 'TextControl',\n        label: t('Default longitude'),\n        renderTrigger: true,\n        default: -122.405293,\n        isFloat: true,\n        description: t('Longitude of default viewport'),\n        places: 8,\n        // Viewport longitude changes shouldn't prompt user to re-run query\n        dontRefreshOnChange: true } },\n\n\n    {\n      name: 'viewport_latitude',\n      config: {\n        type: 'TextControl',\n        label: t('Default latitude'),\n        renderTrigger: true,\n        default: 37.772123,\n        isFloat: true,\n        description: t('Latitude of default viewport'),\n        places: 8,\n        // Viewport latitude changes shouldn't prompt user to re-run query\n        dontRefreshOnChange: true } }],\n\n\n\n    [\n    {\n      name: 'viewport_zoom',\n      config: {\n        type: 'TextControl',\n        label: t('Zoom'),\n        renderTrigger: true,\n        isFloat: true,\n        default: 11,\n        description: t('Zoom level of the map'),\n        places: 8,\n        // Viewport zoom shouldn't prompt user to re-run query\n        dontRefreshOnChange: true } },\n\n\n    null]] }],\n\n\n\n\n  controlOverrides: {\n    groupby: {\n      description: t('One or many controls to group by. If grouping, latitude ' +\n      'and longitude columns must be present.') } },\n\n\n  formDataOverrides: (formData) => ({\n    ...formData,\n    groupby: getStandardizedControls().popAllColumns() }) };const _default =\n\n\nconfig;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(allColumns, \"allColumns\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/legacy-plugin-chart-map-box/src/controlPanel.ts\");reactHotLoader.register(columnsConfig, \"columnsConfig\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/legacy-plugin-chart-map-box/src/controlPanel.ts\");reactHotLoader.register(colorChoices, \"colorChoices\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/legacy-plugin-chart-map-box/src/controlPanel.ts\");reactHotLoader.register(config, \"config\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/legacy-plugin-chart-map-box/src/controlPanel.ts\");reactHotLoader.register(_default, \"default\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/legacy-plugin-chart-map-box/src/controlPanel.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"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","names":["FeatureFlag","isFeatureEnabled","t","columnChoices","formatSelectOptions","sections","sharedControls","getStandardizedControls","allColumns","type","default","mapStateToProps","state","choices","datasource","columnsConfig","ENABLE_EXPLORE_DRAG_AND_DROP","entity","colorChoices","config","controlPanelSections","legacyRegularTime","label","expanded","controlSetRows","name","description","freeForm","datasourceChoices","concat","multi","clearable","renderTrigger","isFloat","places","dontRefreshOnChange","controlOverrides","groupby","formDataOverrides","formData","popAllColumns"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/legacy-plugin-chart-map-box/src/controlPanel.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { FeatureFlag, isFeatureEnabled, t } from '@superset-ui/core';\nimport {\n  columnChoices,\n  ControlPanelConfig,\n  ControlPanelState,\n  formatSelectOptions,\n  sections,\n  sharedControls,\n  getStandardizedControls,\n} from '@superset-ui/chart-controls';\n\nconst allColumns = {\n  type: 'SelectControl',\n  default: null,\n  mapStateToProps: (state: ControlPanelState) => ({\n    choices: columnChoices(state.datasource),\n  }),\n};\n\nconst columnsConfig = isFeatureEnabled(FeatureFlag.ENABLE_EXPLORE_DRAG_AND_DROP)\n  ? sharedControls.entity\n  : allColumns;\n\nconst colorChoices = [\n  ['rgb(0, 139, 139)', t('Dark Cyan')],\n  ['rgb(128, 0, 128)', t('Purple')],\n  ['rgb(255, 215, 0)', t('Gold')],\n  ['rgb(69, 69, 69)', t('Dim Gray')],\n  ['rgb(220, 20, 60)', t('Crimson')],\n  ['rgb(34, 139, 34)', t('Forest Green')],\n];\n\nconst config: ControlPanelConfig = {\n  controlPanelSections: [\n    sections.legacyRegularTime,\n    {\n      label: t('Query'),\n      expanded: true,\n      controlSetRows: [\n        [\n          {\n            name: 'all_columns_x',\n            config: {\n              ...columnsConfig,\n              label: t('Longitude'),\n              description: t('Column containing longitude data'),\n            },\n          },\n        ],\n        [\n          {\n            name: 'all_columns_y',\n            config: {\n              ...columnsConfig,\n              label: t('Latitude'),\n              description: t('Column containing latitude data'),\n            },\n          },\n        ],\n        [\n          {\n            name: 'clustering_radius',\n            config: {\n              type: 'SelectControl',\n              freeForm: true,\n              label: t('Clustering Radius'),\n              default: '60',\n              choices: formatSelectOptions([\n                '0',\n                '20',\n                '40',\n                '60',\n                '80',\n                '100',\n                '200',\n                '500',\n                '1000',\n              ]),\n              description: t(\n                'The radius (in pixels) the algorithm uses to define a cluster. ' +\n                  'Choose 0 to turn off clustering, but beware that a large ' +\n                  'number of points (>1000) will cause lag.',\n              ),\n            },\n          },\n        ],\n        ['row_limit'],\n        ['adhoc_filters'],\n        ['groupby'],\n      ],\n    },\n    {\n      label: t('Points'),\n      controlSetRows: [\n        [\n          {\n            name: 'point_radius',\n            config: {\n              type: 'SelectControl',\n              label: t('Point Radius'),\n              default: 'Auto',\n              description: t(\n                'The radius of individual points (ones that are not in a cluster). ' +\n                  'Either a numerical column or `Auto`, which scales the point based ' +\n                  'on the largest cluster',\n              ),\n              mapStateToProps: state => {\n                const datasourceChoices = columnChoices(state.datasource);\n                const choices: [string, string][] = [['Auto', t('Auto')]];\n                return {\n                  choices: choices.concat(datasourceChoices),\n                };\n              },\n            },\n          },\n        ],\n        [\n          {\n            name: 'point_radius_unit',\n            config: {\n              type: 'SelectControl',\n              label: t('Point Radius Unit'),\n              default: 'Pixels',\n              choices: [\n                ['Pixels', t('Pixels')],\n                ['Miles', t('Miles')],\n                ['Kilometers', t('Kilometers')],\n              ],\n              description: t(\n                'The unit of measure for the specified point radius',\n              ),\n            },\n          },\n        ],\n      ],\n    },\n    {\n      label: t('Labelling'),\n      controlSetRows: [\n        [\n          {\n            name: 'mapbox_label',\n            config: {\n              type: 'SelectControl',\n              multi: true,\n              label: t('label'),\n              default: [],\n              description: t(\n                '`count` is COUNT(*) if a group by is used. ' +\n                  'Numerical columns will be aggregated with the aggregator. ' +\n                  'Non-numerical columns will be used to label points. ' +\n                  'Leave empty to get a count of points in each cluster.',\n              ),\n              mapStateToProps: state => ({\n                choices: columnChoices(state.datasource),\n              }),\n            },\n          },\n        ],\n        [\n          {\n            name: 'pandas_aggfunc',\n            config: {\n              type: 'SelectControl',\n              label: t('Cluster label aggregator'),\n              clearable: false,\n              choices: [\n                ['sum', t('sum')],\n                ['mean', t('mean')],\n                ['min', t('min')],\n                ['max', t('max')],\n                ['std', t('std')],\n                ['var', t('var')],\n              ],\n              default: 'sum',\n              description: t(\n                'Aggregate function applied to the list of points ' +\n                  'in each cluster to produce the cluster label.',\n              ),\n            },\n          },\n        ],\n      ],\n    },\n    {\n      label: t('Visual Tweaks'),\n      controlSetRows: [\n        [\n          {\n            name: 'render_while_dragging',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Live render'),\n              default: true,\n              description: t(\n                'Points and clusters will update as the viewport is being changed',\n              ),\n            },\n          },\n        ],\n        [\n          {\n            name: 'mapbox_style',\n            config: {\n              type: 'SelectControl',\n              label: t('Map Style'),\n              clearable: false,\n              renderTrigger: true,\n              choices: [\n                ['mapbox://styles/mapbox/streets-v9', t('Streets')],\n                ['mapbox://styles/mapbox/dark-v9', t('Dark')],\n                ['mapbox://styles/mapbox/light-v9', t('Light')],\n                [\n                  'mapbox://styles/mapbox/satellite-streets-v9',\n                  t('Satellite Streets'),\n                ],\n                ['mapbox://styles/mapbox/satellite-v9', t('Satellite')],\n                ['mapbox://styles/mapbox/outdoors-v9', t('Outdoors')],\n              ],\n              default: 'mapbox://styles/mapbox/light-v9',\n              description: t('Base layer map style'),\n            },\n          },\n        ],\n        [\n          {\n            name: 'global_opacity',\n            config: {\n              type: 'TextControl',\n              label: t('Opacity'),\n              default: 1,\n              isFloat: true,\n              description: t(\n                'Opacity of all clusters, points, and labels. Between 0 and 1.',\n              ),\n            },\n          },\n        ],\n        [\n          {\n            name: 'mapbox_color',\n            config: {\n              type: 'SelectControl',\n              freeForm: true,\n              label: t('RGB Color'),\n              default: colorChoices[0][0],\n              choices: colorChoices,\n              description: t('The color for points and clusters in RGB'),\n            },\n          },\n        ],\n      ],\n    },\n    {\n      label: t('Viewport'),\n      expanded: true,\n      controlSetRows: [\n        [\n          {\n            name: 'viewport_longitude',\n            config: {\n              type: 'TextControl',\n              label: t('Default longitude'),\n              renderTrigger: true,\n              default: -122.405293,\n              isFloat: true,\n              description: t('Longitude of default viewport'),\n              places: 8,\n              // Viewport longitude changes shouldn't prompt user to re-run query\n              dontRefreshOnChange: true,\n            },\n          },\n          {\n            name: 'viewport_latitude',\n            config: {\n              type: 'TextControl',\n              label: t('Default latitude'),\n              renderTrigger: true,\n              default: 37.772123,\n              isFloat: true,\n              description: t('Latitude of default viewport'),\n              places: 8,\n              // Viewport latitude changes shouldn't prompt user to re-run query\n              dontRefreshOnChange: true,\n            },\n          },\n        ],\n        [\n          {\n            name: 'viewport_zoom',\n            config: {\n              type: 'TextControl',\n              label: t('Zoom'),\n              renderTrigger: true,\n              isFloat: true,\n              default: 11,\n              description: t('Zoom level of the map'),\n              places: 8,\n              // Viewport zoom shouldn't prompt user to re-run query\n              dontRefreshOnChange: true,\n            },\n          },\n          null,\n        ],\n      ],\n    },\n  ],\n  controlOverrides: {\n    groupby: {\n      description: t(\n        'One or many controls to group by. If grouping, latitude ' +\n          'and longitude columns must be present.',\n      ),\n    },\n  },\n  formDataOverrides: formData => ({\n    ...formData,\n    groupby: getStandardizedControls().popAllColumns(),\n  }),\n};\n\nexport default config;\n"]},"metadata":{},"sourceType":"module"}