{"ast":null,"code":"/**\n * Superset API error types.\n * Ref: https://github.com/apache/incubator-superset/blob/318e5347bc6f88119725775baa4ab9a398a6f0b0/superset/errors.py#L24\n *\n * TODO: migrate superset-frontend/src/components/ErrorMessage/types.ts over\n */\nexport var SupersetApiErrorType;\n(function (SupersetApiErrorType) {\n  // Generic unknown error\n  SupersetApiErrorType[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n  // Frontend errors\n  SupersetApiErrorType[\"FRONTEND_CSRF_ERROR\"] = \"FRONTEND_CSRF_ERROR\";\n  SupersetApiErrorType[\"FRONTEND_NETWORK_ERROR\"] = \"FRONTEND_NETWORK_ERROR\";\n  SupersetApiErrorType[\"FRONTEND_TIMEOUT_ERROR\"] = \"FRONTEND_TIMEOUT_ERROR\";\n  // DB Engine errors,\n  SupersetApiErrorType[\"GENERIC_DB_ENGINE_ERROR\"] = \"GENERIC_DB_ENGINE_ERROR\";\n  // Viz errors,\n  SupersetApiErrorType[\"VIZ_GET_DF_ERROR\"] = \"VIZ_GET_DF_ERROR\";\n  SupersetApiErrorType[\"UNKNOWN_DATASOURCE_TYPE_ERROR\"] = \"UNKNOWN_DATASOURCE_TYPE_ERROR\";\n  SupersetApiErrorType[\"FAILED_FETCHING_DATASOURCE_INFO_ERROR\"] = \"FAILED_FETCHING_DATASOURCE_INFO_ERROR\";\n  // Security access errors,\n  SupersetApiErrorType[\"TABLE_SECURITY_ACCESS_ERROR\"] = \"TABLE_SECURITY_ACCESS_ERROR\";\n  SupersetApiErrorType[\"DATASOURCE_SECURITY_ACCESS_ERROR\"] = \"DATASOURCE_SECURITY_ACCESS_ERROR\";\n  SupersetApiErrorType[\"MISSING_OWNERSHIP_ERROR\"] = \"MISSING_OWNERSHIP_ERROR\";\n})(SupersetApiErrorType || (SupersetApiErrorType = {}));\nexport class SupersetApiError extends Error {\n\n\n\n\n\n  constructor(_ref) {let { status, statusText, message, link, extra, stack, error_type: errorType, originalError } = _ref;\n    super(message);this.status = void 0;this.statusText = void 0;this.errorType = void 0;this.extra = void 0;this.originalError = void 0;\n    const originalErrorStack = stack || (\n    originalError instanceof Error ? originalError.stack : undefined);\n    this.stack =\n    originalErrorStack && this.stack ?\n    [\n    this.stack.split('\\n')[0],\n    ...originalErrorStack.split('\\n').slice(1)].\n    join('\\n') :\n    this.stack;\n    this.name = 'SupersetApiError';\n    this.errorType = errorType || SupersetApiErrorType.UNKNOWN_ERROR;\n    this.extra = extra || {};\n    if (link) {\n      this.extra.link = link;\n    }\n    this.status = status;\n    this.statusText = statusText;\n    this.originalError = originalError;\n  }}","map":{"version":3,"mappings":"AAyCA;;;;;;AAMA,WAAYA,oBAAZ;AAAA,WAAYA,oBAAZ,EAAgC;EAC9B;EACAA;EAEA;EACAA;EACAA;EACAA;EAEA;EACAA;EAEA;EACAA;EACAA;EACAA;EAEA;EACAA;EACAA;EACAA;AACD,CArBD,EAAYA,oBAAoB,KAApBA,oBAAoB,MAAhC;AA4CA,OAAM,MAAOC,gBAAP,SAAgCC,KAAhC,CAAqC;;;;;;EAWzCC,kBAgBC,KAhBW,EACVC,MADU,EAEVC,UAFU,EAGVC,OAHU,EAIVC,IAJU,EAKVC,KALU,EAMVC,KANU,EAOVC,UAAU,EAAEC,SAPF,EAQVC,aARU,EAgBX;IACC,MAAMN,OAAN,EADD,KA1BDF,MA0BC,eAxBDC,UAwBC,eAtBDM,SAsBC,eApBDH,KAoBC,eAlBDI,aAkBC;IAEC,MAAMC,kBAAkB,GACtBJ,KAAK;IACJG,aAAa,YAAYV,KAAzB,GAAiCU,aAAa,CAACH,KAA/C,GAAuDK,SADnD,CADP;IAGA,KAAKL,KAAL;IACEI,kBAAkB,IAAI,KAAKJ,KAA3B;IACI;IACE,KAAKA,KAAL,CAAWM,KAAX,CAAiB,IAAjB,EAAuB,CAAvB,CADF;IAEE,GAAGF,kBAAkB,CAACE,KAAnB,CAAyB,IAAzB,EAA+BC,KAA/B,CAAqC,CAArC,CAFL;IAGEC,IAHF,CAGO,IAHP,CADJ;IAKI,KAAKR,KANX;IAOA,KAAKS,IAAL,GAAY,kBAAZ;IACA,KAAKP,SAAL,GAAiBA,SAAS,IAAIX,oBAAoB,CAACmB,aAAnD;IACA,KAAKX,KAAL,GAAaA,KAAK,IAAI,EAAtB;IACA,IAAID,IAAJ,EAAU;MACR,KAAKC,KAAL,CAAWD,IAAX,GAAkBA,IAAlB;IACD;IACD,KAAKH,MAAL,GAAcA,MAAd;IACA,KAAKC,UAAL,GAAkBA,UAAlB;IACA,KAAKO,aAAL,GAAqBA,aAArB;EACD,CAhDwC","names":["SupersetApiErrorType","SupersetApiError","Error","constructor","status","statusText","message","link","extra","stack","error_type","errorType","originalError","originalErrorStack","undefined","split","slice","join","name","UNKNOWN_ERROR"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/packages/superset-ui-core/src/query/api/v1/types.ts"],"sourcesContent":["/* eslint-disable camelcase */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  SupersetClientClass,\n  SupersetClientInterface,\n  StrictJsonObject,\n  JsonValue,\n  JsonObject,\n} from '../../../connection';\n\nexport type ParsedResponseType<T> = T extends 'text'\n  ? string\n  : T extends 'raw' | null\n  ? Response\n  : JsonValue;\n\n/**\n * Runtime options when calling a Superset API. Currently only allow overriding\n * SupersetClient instance.\n */\nexport interface SupersetApiRequestOptions {\n  client?: SupersetClientInterface | SupersetClientClass;\n}\n\n/**\n * Superset API error types.\n * Ref: https://github.com/apache/incubator-superset/blob/318e5347bc6f88119725775baa4ab9a398a6f0b0/superset/errors.py#L24\n *\n * TODO: migrate superset-frontend/src/components/ErrorMessage/types.ts over\n */\nexport enum SupersetApiErrorType {\n  // Generic unknown error\n  UNKNOWN_ERROR = 'UNKNOWN_ERROR',\n\n  // Frontend errors\n  FRONTEND_CSRF_ERROR = 'FRONTEND_CSRF_ERROR',\n  FRONTEND_NETWORK_ERROR = 'FRONTEND_NETWORK_ERROR',\n  FRONTEND_TIMEOUT_ERROR = 'FRONTEND_TIMEOUT_ERROR',\n\n  // DB Engine errors,\n  GENERIC_DB_ENGINE_ERROR = 'GENERIC_DB_ENGINE_ERROR',\n\n  // Viz errors,\n  VIZ_GET_DF_ERROR = 'VIZ_GET_DF_ERROR',\n  UNKNOWN_DATASOURCE_TYPE_ERROR = 'UNKNOWN_DATASOURCE_TYPE_ERROR',\n  FAILED_FETCHING_DATASOURCE_INFO_ERROR = 'FAILED_FETCHING_DATASOURCE_INFO_ERROR',\n\n  // Security access errors,\n  TABLE_SECURITY_ACCESS_ERROR = 'TABLE_SECURITY_ACCESS_ERROR',\n  DATASOURCE_SECURITY_ACCESS_ERROR = 'DATASOURCE_SECURITY_ACCESS_ERROR',\n  MISSING_OWNERSHIP_ERROR = 'MISSING_OWNERSHIP_ERROR',\n}\n\n/**\n * API Error json response from the backend (or fetch API in the frontend).\n * See SIP-40 and SIP-41: https://github.com/apache/incubator-superset/issues/9298\n */\nexport interface SupersetApiErrorPayload {\n  message?: string; // error message via FlaskAppBuilder, e.g. `response_404(message=...)`\n  error_type?: SupersetApiErrorType;\n  level?: 'error' | 'warn' | 'info';\n  extra?: StrictJsonObject;\n  /**\n   * Error message returned via `json_error_response`.\n   * Ref https://github.com/apache/incubator-superset/blob/8e23d4f369f35724b34b14def8a5a8bafb1d2ecb/superset/views/base.py#L94\n   */\n  error?: string | SupersetApiErrorPayload;\n  link?: string;\n}\n\nexport interface SupersetApiMultiErrorsPayload {\n  errors: SupersetApiErrorPayload[];\n}\n\nexport class SupersetApiError extends Error {\n  status?: number;\n\n  statusText?: string;\n\n  errorType: SupersetApiErrorType;\n\n  extra: JsonObject;\n\n  originalError?: Error | Response | JsonValue;\n\n  constructor({\n    status,\n    statusText,\n    message,\n    link,\n    extra,\n    stack,\n    error_type: errorType,\n    originalError,\n  }: Omit<SupersetApiErrorPayload, 'error'> & {\n    status?: number;\n    statusText?: string;\n    message: string;\n    stack?: Error['stack'];\n    // original JavaScript error or backend JSON response captured\n    originalError?: SupersetApiError['originalError'];\n  }) {\n    super(message);\n    const originalErrorStack =\n      stack ||\n      (originalError instanceof Error ? originalError.stack : undefined);\n    this.stack =\n      originalErrorStack && this.stack\n        ? [\n            this.stack.split('\\n')[0],\n            ...originalErrorStack.split('\\n').slice(1),\n          ].join('\\n')\n        : this.stack;\n    this.name = 'SupersetApiError';\n    this.errorType = errorType || SupersetApiErrorType.UNKNOWN_ERROR;\n    this.extra = extra || {};\n    if (link) {\n      this.extra.link = link;\n    }\n    this.status = status;\n    this.statusText = statusText;\n    this.originalError = originalError;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}