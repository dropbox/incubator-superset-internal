{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { t } from '@superset-ui/core';\nimport AdhocMetricEditPopoverTitle from 'src/explore/components/controls/MetricControl/AdhocMetricEditPopoverTitle';\nimport { ExplorePopoverContent } from 'src/explore/components/ExploreContentPopover';\nimport { SaveDatasetModal } from 'src/SqlLab/components/SaveDatasetModal';\nimport AdhocMetricEditPopover, { SAVED_TAB_KEY } from './AdhocMetricEditPopover';\nimport ControlPopover from '../ControlPopover/ControlPopover';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nclass AdhocMetricPopoverTrigger extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.onPopoverResize = this.onPopoverResize.bind(this);\n    this.onLabelChange = this.onLabelChange.bind(this);\n    this.closePopover = this.closePopover.bind(this);\n    this.togglePopover = this.togglePopover.bind(this);\n    this.getCurrentTab = this.getCurrentTab.bind(this);\n    this.getCurrentLabel = this.getCurrentLabel.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.handleDatasetModal = this.handleDatasetModal.bind(this);\n    this.state = {\n      adhocMetric: props.adhocMetric,\n      popoverVisible: false,\n      title: {\n        label: props.adhocMetric.label,\n        hasCustomLabel: props.adhocMetric.hasCustomLabel },\n\n      currentLabel: '',\n      labelModified: false,\n      isTitleEditDisabled: false,\n      showSaveDatasetModal: false };\n\n  }\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (prevState.adhocMetric.optionName !== nextProps.adhocMetric.optionName) {\n      return {\n        adhocMetric: nextProps.adhocMetric,\n        title: {\n          label: nextProps.adhocMetric.label,\n          hasCustomLabel: nextProps.adhocMetric.hasCustomLabel },\n\n        currentLabel: '',\n        labelModified: false };\n\n    }\n    return {\n      adhocMetric: nextProps.adhocMetric };\n\n  }\n  onLabelChange(e) {var _this$props$adhocMetr;\n    const { verbose_name, metric_name } = this.props.savedMetric;\n    const defaultMetricLabel = (_this$props$adhocMetr = this.props.adhocMetric) == null ? void 0 : _this$props$adhocMetr.getDefaultLabel();\n    const label = e.target.value;\n    this.setState((state) => ({\n      title: {\n        label: label ||\n        state.currentLabel ||\n        verbose_name ||\n        metric_name ||\n        defaultMetricLabel,\n        hasCustomLabel: !!label },\n\n      labelModified: true }));\n\n  }\n  onPopoverResize() {\n    this.forceUpdate();\n  }\n  handleDatasetModal(showModal) {\n    this.setState({ showSaveDatasetModal: showModal });\n  }\n  closePopover() {\n    this.togglePopover(false);\n    this.setState({\n      labelModified: false });\n\n  }\n  togglePopover(visible) {\n    this.setState({\n      popoverVisible: visible });\n\n  }\n  getCurrentTab(tab) {\n    this.setState({\n      isTitleEditDisabled: tab === SAVED_TAB_KEY });\n\n  }\n  getCurrentLabel(_ref) {let { savedMetricLabel, adhocMetricLabel } = _ref;\n    const currentLabel = savedMetricLabel || adhocMetricLabel;\n    this.setState({\n      currentLabel,\n      labelModified: true });\n\n    if (savedMetricLabel || !this.state.title.hasCustomLabel) {\n      this.setState({\n        title: {\n          label: currentLabel,\n          hasCustomLabel: false } });\n\n\n    }\n  }\n  onChange(newMetric, oldMetric) {\n    this.props.onMetricEdit({ ...newMetric, ...this.state.title }, oldMetric);\n  }\n  render() {\n    const { adhocMetric, savedMetric, columns, savedMetricsOptions, datasource, isControlledComponent } = this.props;\n    const { verbose_name, metric_name } = savedMetric;\n    const { hasCustomLabel, label } = adhocMetric;\n    const adhocMetricLabel = hasCustomLabel ?\n    label :\n    adhocMetric.getDefaultLabel();\n    const title = this.state.labelModified ?\n    this.state.title :\n    {\n      label: verbose_name || metric_name || adhocMetricLabel,\n      hasCustomLabel };\n\n    const { visible, togglePopover, closePopover } = isControlledComponent ?\n    {\n      visible: this.props.visible,\n      togglePopover: this.props.togglePopover,\n      closePopover: this.props.closePopover } :\n\n    {\n      visible: this.state.popoverVisible,\n      togglePopover: this.togglePopover,\n      closePopover: this.closePopover };\n\n    const overlayContent = ___EmotionJSX(ExplorePopoverContent, null,\n    ___EmotionJSX(AdhocMetricEditPopover, { adhocMetric: adhocMetric, columns: columns, savedMetricsOptions: savedMetricsOptions, savedMetric: savedMetric, datasource: datasource, handleDatasetModal: this.handleDatasetModal, onResize: this.onPopoverResize, onClose: closePopover, onChange: this.onChange, getCurrentTab: this.getCurrentTab, getCurrentLabel: this.getCurrentLabel, isNewMetric: this.props.isNew, isLabelModified: this.state.labelModified &&\n      adhocMetricLabel !== this.state.title.label }));\n\n    const popoverTitle = ___EmotionJSX(AdhocMetricEditPopoverTitle, { title: title, onChange: this.onLabelChange, isEditDisabled: this.state.isTitleEditDisabled });\n    return ___EmotionJSX(React.Fragment, null,\n    this.state.showSaveDatasetModal && ___EmotionJSX(SaveDatasetModal, { visible: this.state.showSaveDatasetModal, onHide: () => this.handleDatasetModal(false), buttonTextOnSave: t('Save'), buttonTextOnOverwrite: t('Overwrite'), modalDescription: t('Save this query as a virtual dataset to continue exploring'), datasource: datasource }),\n    ___EmotionJSX(ControlPopover, { placement: \"right\", trigger: \"click\", content: overlayContent, defaultVisible: visible, visible: visible, onVisibleChange: togglePopover, title: popoverTitle, destroyTooltipOnHide: true },\n    this.props.children));\n\n\n  }}\n\nexport default AdhocMetricPopoverTrigger;","map":{"version":3,"mappings":"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","names":["React","t","AdhocMetricEditPopoverTitle","ExplorePopoverContent","SaveDatasetModal","AdhocMetricEditPopover","SAVED_TAB_KEY","ControlPopover","AdhocMetricPopoverTrigger","PureComponent","constructor","props","onPopoverResize","bind","onLabelChange","closePopover","togglePopover","getCurrentTab","getCurrentLabel","onChange","handleDatasetModal","state","adhocMetric","popoverVisible","title","label","hasCustomLabel","currentLabel","labelModified","isTitleEditDisabled","showSaveDatasetModal","getDerivedStateFromProps","nextProps","prevState","optionName","e","verbose_name","metric_name","savedMetric","defaultMetricLabel","getDefaultLabel","target","value","setState","forceUpdate","showModal","visible","tab","savedMetricLabel","adhocMetricLabel","newMetric","oldMetric","onMetricEdit","render","columns","savedMetricsOptions","datasource","isControlledComponent","overlayContent","isNew","popoverTitle","children"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/controls/MetricControl/AdhocMetricPopoverTrigger.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { ReactNode } from 'react';\nimport { Metric, t } from '@superset-ui/core';\nimport AdhocMetricEditPopoverTitle from 'src/explore/components/controls/MetricControl/AdhocMetricEditPopoverTitle';\nimport { ExplorePopoverContent } from 'src/explore/components/ExploreContentPopover';\nimport {\n  ISaveableDatasource,\n  SaveDatasetModal,\n} from 'src/SqlLab/components/SaveDatasetModal';\nimport { Datasource } from 'src/explore/types';\nimport AdhocMetricEditPopover, {\n  SAVED_TAB_KEY,\n} from './AdhocMetricEditPopover';\nimport AdhocMetric from './AdhocMetric';\nimport { savedMetricType } from './types';\nimport ControlPopover from '../ControlPopover/ControlPopover';\n\nexport type AdhocMetricPopoverTriggerProps = {\n  adhocMetric: AdhocMetric;\n  onMetricEdit(newMetric: Metric, oldMetric: Metric): void;\n  columns: { column_name: string; type: string }[];\n  savedMetricsOptions: savedMetricType[];\n  savedMetric: savedMetricType;\n  datasource: Datasource & ISaveableDatasource;\n  children: ReactNode;\n  isControlledComponent?: boolean;\n  visible?: boolean;\n  togglePopover?: (visible: boolean) => void;\n  closePopover?: () => void;\n  isNew?: boolean;\n};\n\nexport type AdhocMetricPopoverTriggerState = {\n  adhocMetric: AdhocMetric;\n  popoverVisible: boolean;\n  title: { label: string; hasCustomLabel: boolean };\n  currentLabel: string;\n  labelModified: boolean;\n  isTitleEditDisabled: boolean;\n  showSaveDatasetModal: boolean;\n};\n\nclass AdhocMetricPopoverTrigger extends React.PureComponent<\n  AdhocMetricPopoverTriggerProps,\n  AdhocMetricPopoverTriggerState\n> {\n  constructor(props: AdhocMetricPopoverTriggerProps) {\n    super(props);\n    this.onPopoverResize = this.onPopoverResize.bind(this);\n    this.onLabelChange = this.onLabelChange.bind(this);\n    this.closePopover = this.closePopover.bind(this);\n    this.togglePopover = this.togglePopover.bind(this);\n    this.getCurrentTab = this.getCurrentTab.bind(this);\n    this.getCurrentLabel = this.getCurrentLabel.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.handleDatasetModal = this.handleDatasetModal.bind(this);\n\n    this.state = {\n      adhocMetric: props.adhocMetric,\n      popoverVisible: false,\n      title: {\n        label: props.adhocMetric.label,\n        hasCustomLabel: props.adhocMetric.hasCustomLabel,\n      },\n      currentLabel: '',\n      labelModified: false,\n      isTitleEditDisabled: false,\n      showSaveDatasetModal: false,\n    };\n  }\n\n  static getDerivedStateFromProps(\n    nextProps: AdhocMetricPopoverTriggerProps,\n    prevState: AdhocMetricPopoverTriggerState,\n  ) {\n    if (prevState.adhocMetric.optionName !== nextProps.adhocMetric.optionName) {\n      return {\n        adhocMetric: nextProps.adhocMetric,\n        title: {\n          label: nextProps.adhocMetric.label,\n          hasCustomLabel: nextProps.adhocMetric.hasCustomLabel,\n        },\n        currentLabel: '',\n        labelModified: false,\n      };\n    }\n    return {\n      adhocMetric: nextProps.adhocMetric,\n    };\n  }\n\n  onLabelChange(e: any) {\n    const { verbose_name, metric_name } = this.props.savedMetric;\n    const defaultMetricLabel = this.props.adhocMetric?.getDefaultLabel();\n    const label = e.target.value;\n    this.setState(state => ({\n      title: {\n        label:\n          label ||\n          state.currentLabel ||\n          verbose_name ||\n          metric_name ||\n          defaultMetricLabel,\n        hasCustomLabel: !!label,\n      },\n      labelModified: true,\n    }));\n  }\n\n  onPopoverResize() {\n    this.forceUpdate();\n  }\n\n  handleDatasetModal(showModal: boolean) {\n    this.setState({ showSaveDatasetModal: showModal });\n  }\n\n  closePopover() {\n    this.togglePopover(false);\n    this.setState({\n      labelModified: false,\n    });\n  }\n\n  togglePopover(visible: boolean) {\n    this.setState({\n      popoverVisible: visible,\n    });\n  }\n\n  getCurrentTab(tab: string) {\n    this.setState({\n      isTitleEditDisabled: tab === SAVED_TAB_KEY,\n    });\n  }\n\n  getCurrentLabel({\n    savedMetricLabel,\n    adhocMetricLabel,\n  }: {\n    savedMetricLabel: string;\n    adhocMetricLabel: string;\n  }) {\n    const currentLabel = savedMetricLabel || adhocMetricLabel;\n    this.setState({\n      currentLabel,\n      labelModified: true,\n    });\n    if (savedMetricLabel || !this.state.title.hasCustomLabel) {\n      this.setState({\n        title: {\n          label: currentLabel,\n          hasCustomLabel: false,\n        },\n      });\n    }\n  }\n\n  onChange(newMetric: Metric, oldMetric: Metric) {\n    this.props.onMetricEdit({ ...newMetric, ...this.state.title }, oldMetric);\n  }\n\n  render() {\n    const {\n      adhocMetric,\n      savedMetric,\n      columns,\n      savedMetricsOptions,\n      datasource,\n      isControlledComponent,\n    } = this.props;\n    const { verbose_name, metric_name } = savedMetric;\n    const { hasCustomLabel, label } = adhocMetric;\n    const adhocMetricLabel = hasCustomLabel\n      ? label\n      : adhocMetric.getDefaultLabel();\n    const title = this.state.labelModified\n      ? this.state.title\n      : {\n          label: verbose_name || metric_name || adhocMetricLabel,\n          hasCustomLabel,\n        };\n\n    const { visible, togglePopover, closePopover } = isControlledComponent\n      ? {\n          visible: this.props.visible,\n          togglePopover: this.props.togglePopover,\n          closePopover: this.props.closePopover,\n        }\n      : {\n          visible: this.state.popoverVisible,\n          togglePopover: this.togglePopover,\n          closePopover: this.closePopover,\n        };\n\n    const overlayContent = (\n      <ExplorePopoverContent>\n        <AdhocMetricEditPopover\n          adhocMetric={adhocMetric}\n          columns={columns}\n          savedMetricsOptions={savedMetricsOptions}\n          savedMetric={savedMetric}\n          datasource={datasource}\n          handleDatasetModal={this.handleDatasetModal}\n          onResize={this.onPopoverResize}\n          onClose={closePopover}\n          onChange={this.onChange}\n          getCurrentTab={this.getCurrentTab}\n          getCurrentLabel={this.getCurrentLabel}\n          isNewMetric={this.props.isNew}\n          isLabelModified={\n            this.state.labelModified &&\n            adhocMetricLabel !== this.state.title.label\n          }\n        />\n      </ExplorePopoverContent>\n    );\n\n    const popoverTitle = (\n      <AdhocMetricEditPopoverTitle\n        title={title}\n        onChange={this.onLabelChange}\n        isEditDisabled={this.state.isTitleEditDisabled}\n      />\n    );\n\n    return (\n      <>\n        {this.state.showSaveDatasetModal && (\n          <SaveDatasetModal\n            visible={this.state.showSaveDatasetModal}\n            onHide={() => this.handleDatasetModal(false)}\n            buttonTextOnSave={t('Save')}\n            buttonTextOnOverwrite={t('Overwrite')}\n            modalDescription={t(\n              'Save this query as a virtual dataset to continue exploring',\n            )}\n            datasource={datasource}\n          />\n        )}\n        <ControlPopover\n          placement=\"right\"\n          trigger=\"click\"\n          content={overlayContent}\n          defaultVisible={visible}\n          visible={visible}\n          onVisibleChange={togglePopover}\n          title={popoverTitle}\n          destroyTooltipOnHide\n        >\n          {this.props.children}\n        </ControlPopover>\n      </>\n    );\n  }\n}\n\nexport default AdhocMetricPopoverTrigger;\n"]},"metadata":{},"sourceType":"module"}