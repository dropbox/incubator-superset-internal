{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { t } from '@superset-ui/core';\nimport { AntdSwitch } from 'src/components';\nimport InfoTooltip from 'src/components/InfoTooltip';\nimport ValidatedInput from 'src/components/Form/LabeledErrorBoundInput';\nimport { toggleStyle, infoTooltip } from '../styles';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport const hostField = (_ref) => {var _db$parameters;let { required, changeMethods, getValidation, validationErrors, db } = _ref;return ___EmotionJSX(ValidatedInput, { id: \"host\", name: \"host\", value: db == null ? void 0 : (_db$parameters = db.parameters) == null ? void 0 : _db$parameters.host, required: required, hasTooltip: true, tooltipText: t('This can be either an IP address (e.g. 127.0.0.1) or a domain name (e.g. mydatabase.com).'), validationMethods: { onBlur: getValidation }, errorMessage: validationErrors == null ? void 0 : validationErrors.host, placeholder: t('e.g. 127.0.0.1'), className: \"form-group-w-50\", label: t('Host'), onChange: changeMethods.onParametersChange });};\nexport const portField = (_ref2) => {var _db$parameters2;let { required, changeMethods, getValidation, validationErrors, db } = _ref2;return ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(ValidatedInput, { id: \"port\", name: \"port\", type: \"number\", required: required, value: db == null ? void 0 : (_db$parameters2 = db.parameters) == null ? void 0 : _db$parameters2.port, validationMethods: { onBlur: getValidation }, errorMessage: validationErrors == null ? void 0 : validationErrors.port, placeholder: t('e.g. 5432'), className: \"form-group-w-50\", label: t('Port'), onChange: changeMethods.onParametersChange }));};\n\nexport const httpPath = (_ref3) => {var _extraJson$engine_par, _extraJson$engine_par2;let { required, changeMethods, getValidation, validationErrors, db } = _ref3;\n  const extraJson = JSON.parse((db == null ? void 0 : db.extra) || '{}');\n  return ___EmotionJSX(ValidatedInput, { id: \"http_path\", name: \"http_path\", required: required, value: (_extraJson$engine_par = extraJson.engine_params) == null ? void 0 : (_extraJson$engine_par2 = _extraJson$engine_par.connect_args) == null ? void 0 : _extraJson$engine_par2.http_path, validationMethods: { onBlur: getValidation }, errorMessage: validationErrors == null ? void 0 : validationErrors.http_path, placeholder: t('e.g. sql/protocolv1/o/12345'), label: \"HTTP Path\", onChange: changeMethods.onExtraInputChange, helpText: t('Copy the name of the HTTP Path of your cluster.') });\n};\nexport const databaseField = (_ref4) => {var _db$parameters3;let { required, changeMethods, getValidation, validationErrors, placeholder, db } = _ref4;return ___EmotionJSX(ValidatedInput, { id: \"database\", name: \"database\", required: required, value: db == null ? void 0 : (_db$parameters3 = db.parameters) == null ? void 0 : _db$parameters3.database, validationMethods: { onBlur: getValidation }, errorMessage: validationErrors == null ? void 0 : validationErrors.database, placeholder: placeholder != null ? placeholder : t('e.g. world_population'), label: t('Database name'), onChange: changeMethods.onParametersChange, helpText: t('Copy the name of the database you are trying to connect to.') });};\nexport const usernameField = (_ref5) => {var _db$parameters4;let { required, changeMethods, getValidation, validationErrors, db } = _ref5;return ___EmotionJSX(ValidatedInput, { id: \"username\", name: \"username\", required: required, value: db == null ? void 0 : (_db$parameters4 = db.parameters) == null ? void 0 : _db$parameters4.username, validationMethods: { onBlur: getValidation }, errorMessage: validationErrors == null ? void 0 : validationErrors.username, placeholder: t('e.g. Analytics'), label: t('Username'), onChange: changeMethods.onParametersChange });};\nexport const passwordField = (_ref6) => {var _db$parameters5;let { required, changeMethods, getValidation, validationErrors, db, isEditMode } = _ref6;return ___EmotionJSX(ValidatedInput, { id: \"password\", name: \"password\", required: required, visibilityToggle: !isEditMode, value: db == null ? void 0 : (_db$parameters5 = db.parameters) == null ? void 0 : _db$parameters5.password, validationMethods: { onBlur: getValidation }, errorMessage: validationErrors == null ? void 0 : validationErrors.password, placeholder: t('e.g. ********'), label: t('Password'), onChange: changeMethods.onParametersChange });};\nexport const accessTokenField = (_ref7) => {var _db$parameters6;let { required, changeMethods, getValidation, validationErrors, db, isEditMode } = _ref7;return ___EmotionJSX(ValidatedInput, { id: \"access_token\", name: \"access_token\", required: required, visibilityToggle: !isEditMode, value: db == null ? void 0 : (_db$parameters6 = db.parameters) == null ? void 0 : _db$parameters6.access_token, validationMethods: { onBlur: getValidation }, errorMessage: validationErrors == null ? void 0 : validationErrors.access_token, placeholder: t('e.g. ********'), label: t('Access token'), onChange: changeMethods.onParametersChange });};\nexport const displayField = (_ref8) => {let { changeMethods, getValidation, validationErrors, db } = _ref8;return ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(ValidatedInput, { id: \"database_name\", name: \"database_name\", required: true, value: db == null ? void 0 : db.database_name, validationMethods: { onBlur: getValidation }, errorMessage: validationErrors == null ? void 0 : validationErrors.database_name, placeholder: \"\", label: t('Display Name'), onChange: changeMethods.onChange, helpText: t('Pick a nickname for how the database will display in Superset.') }));};\n\nexport const queryField = (_ref9) => {let { required, changeMethods, getValidation, validationErrors, db } = _ref9;return ___EmotionJSX(ValidatedInput, { id: \"query_input\", name: \"query_input\", required: required, value: (db == null ? void 0 : db.query_input) || '', validationMethods: { onBlur: getValidation }, errorMessage: validationErrors == null ? void 0 : validationErrors.query, placeholder: t('e.g. param1=value1&param2=value2'), label: t('Additional Parameters'), onChange: changeMethods.onQueryChange, helpText: t('Add additional custom parameters') });};\nexport const forceSSLField = (_ref10) => {var _db$parameters7;let { isEditMode, changeMethods, db, sslForced } = _ref10;return ___EmotionJSX(\"div\", { css: (theme) => infoTooltip(theme) },\n  ___EmotionJSX(AntdSwitch, { disabled: sslForced && !isEditMode, checked: (db == null ? void 0 : (_db$parameters7 = db.parameters) == null ? void 0 : _db$parameters7.encryption) || sslForced, onChange: (changed) => {\n      changeMethods.onParametersChange({\n        target: {\n          type: 'toggle',\n          name: 'encryption',\n          checked: true,\n          value: changed } });\n\n\n    } }),\n  ___EmotionJSX(\"span\", { css: toggleStyle }, \"SSL\"),\n  ___EmotionJSX(InfoTooltip, { tooltip: t('SSL Mode \"require\" will be used.'), placement: \"right\", viewBox: \"0 -5 24 24\" }));};","map":{"version":3,"mappings":"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","names":["React","t","AntdSwitch","InfoTooltip","ValidatedInput","toggleStyle","infoTooltip","hostField","required","changeMethods","getValidation","validationErrors","db","parameters","host","onBlur","onParametersChange","portField","port","httpPath","extraJson","JSON","parse","extra","engine_params","connect_args","http_path","onExtraInputChange","databaseField","placeholder","database","usernameField","username","passwordField","isEditMode","password","accessTokenField","access_token","displayField","database_name","onChange","queryField","query_input","query","onQueryChange","forceSSLField","sslForced","theme","encryption","target","type","name","checked","value","changed"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/features/databases/DatabaseModal/DatabaseConnectionForm/CommonParameters.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { SupersetTheme, t } from '@superset-ui/core';\nimport { AntdSwitch } from 'src/components';\nimport InfoTooltip from 'src/components/InfoTooltip';\nimport ValidatedInput from 'src/components/Form/LabeledErrorBoundInput';\nimport { FieldPropTypes } from '.';\nimport { toggleStyle, infoTooltip } from '../styles';\n\nexport const hostField = ({\n  required,\n  changeMethods,\n  getValidation,\n  validationErrors,\n  db,\n}: FieldPropTypes) => (\n  <ValidatedInput\n    id=\"host\"\n    name=\"host\"\n    value={db?.parameters?.host}\n    required={required}\n    hasTooltip\n    tooltipText={t(\n      'This can be either an IP address (e.g. 127.0.0.1) or a domain name (e.g. mydatabase.com).',\n    )}\n    validationMethods={{ onBlur: getValidation }}\n    errorMessage={validationErrors?.host}\n    placeholder={t('e.g. 127.0.0.1')}\n    className=\"form-group-w-50\"\n    label={t('Host')}\n    onChange={changeMethods.onParametersChange}\n  />\n);\nexport const portField = ({\n  required,\n  changeMethods,\n  getValidation,\n  validationErrors,\n  db,\n}: FieldPropTypes) => (\n  <>\n    <ValidatedInput\n      id=\"port\"\n      name=\"port\"\n      type=\"number\"\n      required={required}\n      value={db?.parameters?.port as number}\n      validationMethods={{ onBlur: getValidation }}\n      errorMessage={validationErrors?.port}\n      placeholder={t('e.g. 5432')}\n      className=\"form-group-w-50\"\n      label={t('Port')}\n      onChange={changeMethods.onParametersChange}\n    />\n  </>\n);\nexport const httpPath = ({\n  required,\n  changeMethods,\n  getValidation,\n  validationErrors,\n  db,\n}: FieldPropTypes) => {\n  const extraJson = JSON.parse(db?.extra || '{}');\n  return (\n    <ValidatedInput\n      id=\"http_path\"\n      name=\"http_path\"\n      required={required}\n      value={extraJson.engine_params?.connect_args?.http_path}\n      validationMethods={{ onBlur: getValidation }}\n      errorMessage={validationErrors?.http_path}\n      placeholder={t('e.g. sql/protocolv1/o/12345')}\n      label=\"HTTP Path\"\n      onChange={changeMethods.onExtraInputChange}\n      helpText={t('Copy the name of the HTTP Path of your cluster.')}\n    />\n  );\n};\nexport const databaseField = ({\n  required,\n  changeMethods,\n  getValidation,\n  validationErrors,\n  placeholder,\n  db,\n}: FieldPropTypes) => (\n  <ValidatedInput\n    id=\"database\"\n    name=\"database\"\n    required={required}\n    value={db?.parameters?.database}\n    validationMethods={{ onBlur: getValidation }}\n    errorMessage={validationErrors?.database}\n    placeholder={placeholder ?? t('e.g. world_population')}\n    label={t('Database name')}\n    onChange={changeMethods.onParametersChange}\n    helpText={t('Copy the name of the database you are trying to connect to.')}\n  />\n);\nexport const usernameField = ({\n  required,\n  changeMethods,\n  getValidation,\n  validationErrors,\n  db,\n}: FieldPropTypes) => (\n  <ValidatedInput\n    id=\"username\"\n    name=\"username\"\n    required={required}\n    value={db?.parameters?.username}\n    validationMethods={{ onBlur: getValidation }}\n    errorMessage={validationErrors?.username}\n    placeholder={t('e.g. Analytics')}\n    label={t('Username')}\n    onChange={changeMethods.onParametersChange}\n  />\n);\nexport const passwordField = ({\n  required,\n  changeMethods,\n  getValidation,\n  validationErrors,\n  db,\n  isEditMode,\n}: FieldPropTypes) => (\n  <ValidatedInput\n    id=\"password\"\n    name=\"password\"\n    required={required}\n    visibilityToggle={!isEditMode}\n    value={db?.parameters?.password}\n    validationMethods={{ onBlur: getValidation }}\n    errorMessage={validationErrors?.password}\n    placeholder={t('e.g. ********')}\n    label={t('Password')}\n    onChange={changeMethods.onParametersChange}\n  />\n);\nexport const accessTokenField = ({\n  required,\n  changeMethods,\n  getValidation,\n  validationErrors,\n  db,\n  isEditMode,\n}: FieldPropTypes) => (\n  <ValidatedInput\n    id=\"access_token\"\n    name=\"access_token\"\n    required={required}\n    visibilityToggle={!isEditMode}\n    value={db?.parameters?.access_token}\n    validationMethods={{ onBlur: getValidation }}\n    errorMessage={validationErrors?.access_token}\n    placeholder={t('e.g. ********')}\n    label={t('Access token')}\n    onChange={changeMethods.onParametersChange}\n  />\n);\nexport const displayField = ({\n  changeMethods,\n  getValidation,\n  validationErrors,\n  db,\n}: FieldPropTypes) => (\n  <>\n    <ValidatedInput\n      id=\"database_name\"\n      name=\"database_name\"\n      required\n      value={db?.database_name}\n      validationMethods={{ onBlur: getValidation }}\n      errorMessage={validationErrors?.database_name}\n      placeholder=\"\"\n      label={t('Display Name')}\n      onChange={changeMethods.onChange}\n      helpText={t(\n        'Pick a nickname for how the database will display in Superset.',\n      )}\n    />\n  </>\n);\n\nexport const queryField = ({\n  required,\n  changeMethods,\n  getValidation,\n  validationErrors,\n  db,\n}: FieldPropTypes) => (\n  <ValidatedInput\n    id=\"query_input\"\n    name=\"query_input\"\n    required={required}\n    value={db?.query_input || ''}\n    validationMethods={{ onBlur: getValidation }}\n    errorMessage={validationErrors?.query}\n    placeholder={t('e.g. param1=value1&param2=value2')}\n    label={t('Additional Parameters')}\n    onChange={changeMethods.onQueryChange}\n    helpText={t('Add additional custom parameters')}\n  />\n);\n\nexport const forceSSLField = ({\n  isEditMode,\n  changeMethods,\n  db,\n  sslForced,\n}: FieldPropTypes) => (\n  <div css={(theme: SupersetTheme) => infoTooltip(theme)}>\n    <AntdSwitch\n      disabled={sslForced && !isEditMode}\n      checked={db?.parameters?.encryption || sslForced}\n      onChange={changed => {\n        changeMethods.onParametersChange({\n          target: {\n            type: 'toggle',\n            name: 'encryption',\n            checked: true,\n            value: changed,\n          },\n        });\n      }}\n    />\n    <span css={toggleStyle}>SSL</span>\n    <InfoTooltip\n      tooltip={t('SSL Mode \"require\" will be used.')}\n      placement=\"right\"\n      viewBox=\"0 -5 24 24\"\n    />\n  </div>\n);\n"]},"metadata":{},"sourceType":"module"}