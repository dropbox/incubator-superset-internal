{"ast":null,"code":"import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { getColumnLabel, getNumberFormatter, getTimeFormatter } from '@superset-ui/core';\nimport { formatSeriesName } from './series';\nconst getCrossFilterDataMask = (selectedValues, groupby, labelMap) => (value) => {\n  const selected = Object.values(selectedValues);\n  let values;\n  if (_includesInstanceProperty(selected).call(selected, value)) {\n    values = selected.filter((v) => v !== value);\n  } else\n  {\n    values = [value];\n  }\n  const groupbyValues = values.map((value) => labelMap[value]);\n  return {\n    dataMask: {\n      extraFormData: {\n        filters: values.length === 0 ?\n        [] :\n        groupby.map((col, idx) => {\n          const val = groupbyValues.map((v) => v[idx]);\n          if (val === null || val === undefined)\n          return {\n            col,\n            op: 'IS NULL' };\n\n          return {\n            col,\n            op: 'IN',\n            val: val };\n\n        }) },\n\n      filterState: {\n        value: groupbyValues.length ? groupbyValues : null,\n        selectedValues: values.length ? values : null } },\n\n\n    isCurrentValueSelected: _includesInstanceProperty(selected).call(selected, value) };\n\n};\nexport const clickEventHandler = (getCrossFilterDataMask, setDataMask, emitCrossFilters) => (_ref) => {var _getCrossFilterDataMa;let { name } = _ref;\n  if (!emitCrossFilters) {\n    return;\n  }\n  const dataMask = (_getCrossFilterDataMa = getCrossFilterDataMask(name)) == null ? void 0 : _getCrossFilterDataMa.dataMask;\n  if (dataMask) {\n    setDataMask(dataMask);\n  }\n};\nexport const contextMenuEventHandler = (groupby, onContextMenu, labelMap, getCrossFilterDataMask, formData, coltypeMapping) => (e) => {\n  if (onContextMenu) {\n    e.event.stop();\n    const pointerEvent = e.event.event;\n    const drillFilters = [];\n    if (groupby.length > 0) {\n      const values = labelMap[e.name];\n      groupby.forEach((dimension, i) => {\n        drillFilters.push({\n          col: dimension,\n          op: '==',\n          val: values[i],\n          formattedVal: formatSeriesName(values[i], {\n            timeFormatter: getTimeFormatter(formData.dateFormat),\n            numberFormatter: getNumberFormatter(formData.numberFormat),\n            coltype: coltypeMapping == null ? void 0 : coltypeMapping[getColumnLabel(dimension)] }) });\n\n\n      });\n    }\n    onContextMenu(pointerEvent.clientX, pointerEvent.clientY, {\n      drillToDetail: drillFilters,\n      crossFilter: getCrossFilterDataMask(e.name),\n      drillBy: { filters: drillFilters, groupbyFieldName: 'groupby' } });\n\n  }\n};\nexport const allEventHandlers = (transformedProps) => {\n  const { groupby, onContextMenu, setDataMask, labelMap, emitCrossFilters, selectedValues, coltypeMapping, formData } = transformedProps;\n  const eventHandlers = {\n    click: clickEventHandler(getCrossFilterDataMask(selectedValues, groupby, labelMap), setDataMask, emitCrossFilters),\n    contextmenu: contextMenuEventHandler(groupby, onContextMenu, labelMap, getCrossFilterDataMask(selectedValues, groupby, labelMap), formData, coltypeMapping) };\n\n  return eventHandlers;\n};","map":{"version":3,"mappings":"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","names":["getColumnLabel","getNumberFormatter","getTimeFormatter","formatSeriesName","getCrossFilterDataMask","selectedValues","groupby","labelMap","value","selected","Object","values","filter","v","groupbyValues","map","dataMask","extraFormData","filters","length","col","idx","val","undefined","op","filterState","isCurrentValueSelected","clickEventHandler","setDataMask","emitCrossFilters","name","contextMenuEventHandler","onContextMenu","formData","coltypeMapping","e","event","stop","pointerEvent","drillFilters","forEach","dimension","i","push","formattedVal","timeFormatter","dateFormat","numberFormatter","numberFormat","coltype","clientX","clientY","drillToDetail","crossFilter","drillBy","groupbyFieldName","allEventHandlers","transformedProps","eventHandlers","click","contextmenu"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/plugins/plugin-chart-echarts/src/utils/eventHandlers.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  BinaryQueryObjectFilterClause,\n  ContextMenuFilters,\n  DataMask,\n  QueryFormColumn,\n  QueryFormData,\n  getColumnLabel,\n  getNumberFormatter,\n  getTimeFormatter,\n} from '@superset-ui/core';\n\nimport {\n  BaseTransformedProps,\n  CrossFilterTransformedProps,\n  EventHandlers,\n} from '../types';\nimport { formatSeriesName } from './series';\n\nexport type Event = {\n  name: string;\n  event: { stop: () => void; event: PointerEvent };\n};\n\nconst getCrossFilterDataMask =\n  (\n    selectedValues: Record<number, string>,\n    groupby: QueryFormColumn[],\n    labelMap: Record<string, string[]>,\n  ) =>\n  (value: string) => {\n    const selected = Object.values(selectedValues);\n    let values: string[];\n    if (selected.includes(value)) {\n      values = selected.filter(v => v !== value);\n    } else {\n      values = [value];\n    }\n\n    const groupbyValues = values.map(value => labelMap[value]);\n\n    return {\n      dataMask: {\n        extraFormData: {\n          filters:\n            values.length === 0\n              ? []\n              : groupby.map((col, idx) => {\n                  const val = groupbyValues.map(v => v[idx]);\n                  if (val === null || val === undefined)\n                    return {\n                      col,\n                      op: 'IS NULL' as const,\n                    };\n                  return {\n                    col,\n                    op: 'IN' as const,\n                    val: val as (string | number | boolean)[],\n                  };\n                }),\n        },\n        filterState: {\n          value: groupbyValues.length ? groupbyValues : null,\n          selectedValues: values.length ? values : null,\n        },\n      },\n      isCurrentValueSelected: selected.includes(value),\n    };\n  };\n\nexport const clickEventHandler =\n  (\n    getCrossFilterDataMask: (\n      value: string,\n    ) => ContextMenuFilters['crossFilter'],\n    setDataMask: (dataMask: DataMask) => void,\n    emitCrossFilters?: boolean,\n  ) =>\n  ({ name }: { name: string }) => {\n    if (!emitCrossFilters) {\n      return;\n    }\n    const dataMask = getCrossFilterDataMask(name)?.dataMask;\n    if (dataMask) {\n      setDataMask(dataMask);\n    }\n  };\n\nexport const contextMenuEventHandler =\n  (\n    groupby: (BaseTransformedProps<any> &\n      CrossFilterTransformedProps)['groupby'],\n    onContextMenu: BaseTransformedProps<any>['onContextMenu'],\n    labelMap: Record<string, string[]>,\n    getCrossFilterDataMask: (\n      value: string,\n    ) => ContextMenuFilters['crossFilter'],\n    formData: QueryFormData,\n    coltypeMapping?: Record<string, number>,\n  ) =>\n  (e: Event) => {\n    if (onContextMenu) {\n      e.event.stop();\n      const pointerEvent = e.event.event;\n      const drillFilters: BinaryQueryObjectFilterClause[] = [];\n      if (groupby.length > 0) {\n        const values = labelMap[e.name];\n        groupby.forEach((dimension, i) => {\n          drillFilters.push({\n            col: dimension,\n            op: '==',\n            val: values[i],\n            formattedVal: formatSeriesName(values[i], {\n              timeFormatter: getTimeFormatter(formData.dateFormat),\n              numberFormatter: getNumberFormatter(formData.numberFormat),\n              coltype: coltypeMapping?.[getColumnLabel(dimension)],\n            }),\n          });\n        });\n      }\n      onContextMenu(pointerEvent.clientX, pointerEvent.clientY, {\n        drillToDetail: drillFilters,\n        crossFilter: getCrossFilterDataMask(e.name),\n        drillBy: { filters: drillFilters, groupbyFieldName: 'groupby' },\n      });\n    }\n  };\n\nexport const allEventHandlers = (\n  transformedProps: BaseTransformedProps<any> & CrossFilterTransformedProps,\n) => {\n  const {\n    groupby,\n    onContextMenu,\n    setDataMask,\n    labelMap,\n    emitCrossFilters,\n    selectedValues,\n    coltypeMapping,\n    formData,\n  } = transformedProps;\n  const eventHandlers: EventHandlers = {\n    click: clickEventHandler(\n      getCrossFilterDataMask(selectedValues, groupby, labelMap),\n      setDataMask,\n      emitCrossFilters,\n    ),\n    contextmenu: contextMenuEventHandler(\n      groupby,\n      onContextMenu,\n      labelMap,\n      getCrossFilterDataMask(selectedValues, groupby, labelMap),\n      formData,\n      coltypeMapping,\n    ),\n  };\n  return eventHandlers;\n};\n"]},"metadata":{},"sourceType":"module"}