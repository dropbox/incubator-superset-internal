{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useState } from 'react';\nimport { t, styled } from '@superset-ui/core';\nimport { Input } from 'src/components/Input';\nimport { Tooltip } from 'src/components/Tooltip';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst TitleLabel = styled.span`\n  display: inline-block;\n  padding: 2px 0;\n`;\nconst StyledInput = styled(Input)`\n  border-radius: ${(_ref) => {let { theme } = _ref;return theme.borderRadius;}};\n  height: 26px;\n  padding-left: ${(_ref2) => {let { theme } = _ref2;return theme.gridUnit * 2.5;}}px;\n`;\nconst AdhocMetricEditPopoverTitle = (_ref3) => {let { title, isEditDisabled, onChange } = _ref3;\n  const [isHovered, setIsHovered] = useState(false);\n  const [isEditMode, setIsEditMode] = useState(false);\n  const defaultLabel = t('My metric');\n  const handleMouseOver = useCallback(() => setIsHovered(true), []);\n  const handleMouseOut = useCallback(() => setIsHovered(false), []);\n  const handleClick = useCallback(() => setIsEditMode(true), []);\n  const handleBlur = useCallback(() => setIsEditMode(false), []);\n  const handleKeyPress = useCallback((ev) => {\n    if (ev.key === 'Enter') {\n      ev.preventDefault();\n      handleBlur();\n    }\n  }, [handleBlur]);\n  const handleInputBlur = useCallback((e) => {\n    if (e.target.value === '') {\n      onChange(e);\n    }\n    handleBlur();\n  }, [onChange, handleBlur]);\n  if (isEditDisabled) {\n    return ___EmotionJSX(\"span\", null, (title == null ? void 0 : title.label) || defaultLabel);\n  }\n  if (isEditMode) {\n    return ___EmotionJSX(StyledInput, { type: \"text\", placeholder: title == null ? void 0 : title.label, value: title != null && title.hasCustomLabel ? title.label : '', autoFocus: true, onChange: onChange, onBlur: handleInputBlur, onKeyPress: handleKeyPress });\n  }\n  return ___EmotionJSX(Tooltip, { placement: \"top\", title: t('Click to edit label') },\n  ___EmotionJSX(\"span\", { className: \"AdhocMetricEditPopoverTitle inline-editable\", onMouseOver: handleMouseOver, onMouseOut: handleMouseOut, onClick: handleClick, onBlur: handleBlur, role: \"button\", tabIndex: 0 },\n  ___EmotionJSX(TitleLabel, null, (title == null ? void 0 : title.label) || defaultLabel), \"\\xA0\",\n\n  ___EmotionJSX(\"i\", { className: \"fa fa-pencil\", style: { color: isHovered ? 'black' : 'grey' } })));\n\n\n};\nexport default AdhocMetricEditPopoverTitle;","map":{"version":3,"mappings":"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","names":["React","useCallback","useState","t","styled","Input","Tooltip","TitleLabel","span","StyledInput","theme","borderRadius","gridUnit","AdhocMetricEditPopoverTitle","title","isEditDisabled","onChange","isHovered","setIsHovered","isEditMode","setIsEditMode","defaultLabel","handleMouseOver","handleMouseOut","handleClick","handleBlur","handleKeyPress","ev","key","preventDefault","handleInputBlur","e","target","value","label","hasCustomLabel","color"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/explore/components/controls/MetricControl/AdhocMetricEditPopoverTitle.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, {\n  ChangeEventHandler,\n  FocusEvent,\n  KeyboardEvent,\n  useCallback,\n  useState,\n} from 'react';\nimport { t, styled } from '@superset-ui/core';\nimport { Input } from 'src/components/Input';\nimport { Tooltip } from 'src/components/Tooltip';\n\nconst TitleLabel = styled.span`\n  display: inline-block;\n  padding: 2px 0;\n`;\n\nconst StyledInput = styled(Input)`\n  border-radius: ${({ theme }) => theme.borderRadius};\n  height: 26px;\n  padding-left: ${({ theme }) => theme.gridUnit * 2.5}px;\n`;\n\nexport interface AdhocMetricEditPopoverTitleProps {\n  title?: {\n    label?: string;\n    hasCustomLabel?: boolean;\n  };\n  isEditDisabled?: boolean;\n  onChange: ChangeEventHandler<HTMLInputElement>;\n}\n\nconst AdhocMetricEditPopoverTitle: React.FC<AdhocMetricEditPopoverTitleProps> =\n  ({ title, isEditDisabled, onChange }) => {\n    const [isHovered, setIsHovered] = useState(false);\n    const [isEditMode, setIsEditMode] = useState(false);\n\n    const defaultLabel = t('My metric');\n\n    const handleMouseOver = useCallback(() => setIsHovered(true), []);\n    const handleMouseOut = useCallback(() => setIsHovered(false), []);\n    const handleClick = useCallback(() => setIsEditMode(true), []);\n    const handleBlur = useCallback(() => setIsEditMode(false), []);\n\n    const handleKeyPress = useCallback(\n      (ev: KeyboardEvent<HTMLInputElement>) => {\n        if (ev.key === 'Enter') {\n          ev.preventDefault();\n          handleBlur();\n        }\n      },\n      [handleBlur],\n    );\n\n    const handleInputBlur = useCallback(\n      (e: FocusEvent<HTMLInputElement>) => {\n        if (e.target.value === '') {\n          onChange(e);\n        }\n\n        handleBlur();\n      },\n      [onChange, handleBlur],\n    );\n\n    if (isEditDisabled) {\n      return (\n        <span data-test=\"AdhocMetricTitle\">{title?.label || defaultLabel}</span>\n      );\n    }\n\n    if (isEditMode) {\n      return (\n        <StyledInput\n          type=\"text\"\n          placeholder={title?.label}\n          value={title?.hasCustomLabel ? title.label : ''}\n          autoFocus\n          onChange={onChange}\n          onBlur={handleInputBlur}\n          onKeyPress={handleKeyPress}\n          data-test=\"AdhocMetricEditTitle#input\"\n        />\n      );\n    }\n\n    return (\n      <Tooltip placement=\"top\" title={t('Click to edit label')}>\n        <span\n          className=\"AdhocMetricEditPopoverTitle inline-editable\"\n          data-test=\"AdhocMetricEditTitle#trigger\"\n          onMouseOver={handleMouseOver}\n          onMouseOut={handleMouseOut}\n          onClick={handleClick}\n          onBlur={handleBlur}\n          role=\"button\"\n          tabIndex={0}\n        >\n          <TitleLabel>{title?.label || defaultLabel}</TitleLabel>\n          &nbsp;\n          <i\n            className=\"fa fa-pencil\"\n            style={{ color: isHovered ? 'black' : 'grey' }}\n          />\n        </span>\n      </Tooltip>\n    );\n  };\n\nexport default AdhocMetricEditPopoverTitle;\n"]},"metadata":{},"sourceType":"module"}