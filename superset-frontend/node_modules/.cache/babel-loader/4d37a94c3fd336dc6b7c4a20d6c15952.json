{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nexport const registryGetAll = (_ref) => {let { registryKeys, registry } = _ref;return () => registryKeys.map((key) => registry[key]);};\nexport const registryDelete = (_ref2) => {let { registryKeys, registry } = _ref2;return (keyToDelete) => {\n    // eslint-disable-next-line no-param-reassign\n    registryKeys = registryKeys.filter((key) => key !== keyToDelete);\n    // eslint-disable-next-line no-param-reassign\n    delete registry[keyToDelete];\n  };};\nexport const registryGet = (_ref3) => {let { registry } = _ref3;return (key) => registry[key];};\nexport const registrySet = (_ref4) => {let { registryKeys, registry } = _ref4;return (key, item) => {\n    registryKeys.push(key);\n    // eslint-disable-next-line no-param-reassign\n    registry[key] = {\n      key,\n      ...item };\n\n  };};\nexport const registrySetComponent = (_ref5) => {let { registryKeys, registry } = _ref5;return (key, item) => {\n    registryKeys.push(key);\n    // eslint-disable-next-line no-param-reassign\n    registry[key] = {\n      key,\n      metadata: item.metadata,\n      Component: /*#__PURE__*/React.lazy(item.loadComponent) };\n\n  };};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAmBA,OAAOA,KAAP,MAAqC,OAArC;AAuBA,OAAO,MAAMC,cAAc,GACzB,eAAY,EAAEC,YAAF,EAAgBC,QAAhB,EAAZ,eACA,MACED,YAAY,CAACE,GAAb,CAAiB,IAAG,KAAID,QAAQ,CAACE,GAAD,CAAhC,CAFF,EADK;AAKP,OAAO,MAAMC,cAAc,GACzB,gBAAY,EAAEJ,YAAF,EAAgBC,QAAhB,EAAZ,gBACA,CAACI,WAAD,KAAwB;IACtB;IACAL,YAAY,GAAGA,YAAY,CAACM,MAAb,CAAoB,IAAG,KAAIH,GAAG,KAAKE,WAAnC,CAAf;IACA;IACA,OAAOJ,QAAQ,CAACI,WAAD,CAAf;EACD,CAND,EADK;AASP,OAAO,MAAME,WAAW,GACtB,gBAAY,EAAEN,QAAF,EAAZ,gBACA,CAACE,GAAD,KACEF,QAAQ,CAACE,GAAD,CAFV,EADK;AAKP,OAAO,MAAMK,WAAW,GACtB,gBAAC,EAAER,YAAF,EAAgBC,QAAhB,EAAD,gBACA,CAACE,GAAD,EAAcM,IAAd,KAAkC;IAChCT,YAAY,CAACU,IAAb,CAAkBP,GAAlB;IACA;IACAF,QAAQ,CAACE,GAAD,CAAR,GAAgB;MACdA,GADc;MAEd,GAAGM,IAFW,EAAhB;;EAID,CARD,EADK;AAWP,OAAO,MAAME,oBAAoB,GAC/B,gBAAC,EAAEX,YAAF,EAAgBC,QAAhB,EAAD,gBACA,CAACE,GAAD,EAAcM,IAAd,KAAqC;IACnCT,YAAY,CAACU,IAAb,CAAkBP,GAAlB;IACA;IACAF,QAAQ,CAACE,GAAD,CAAR,GAAgB;MACdA,GADc;MAEdS,QAAQ,EAAEH,IAAI,CAACG,QAFD;MAGdC,SAAS,eAAEf,KAAK,CAACgB,IAAN,CAAWL,IAAI,CAACM,aAAhB,CAHG,EAAhB;;EAKD,CATD,EADK","names":["React","registryGetAll","registryKeys","registry","map","key","registryDelete","keyToDelete","filter","registryGet","registrySet","item","push","registrySetComponent","metadata","Component","lazy","loadComponent"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/utils/functionalRegistry.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { ComponentType } from 'react';\nimport { JsonObject } from '@superset-ui/core';\n\nexport interface RegistryMetadata {\n  description: string;\n  name: string;\n}\n\nexport interface ComponentItem<Metadata = RegistryMetadata> {\n  metadata: Metadata;\n  loadComponent: () => Promise<{ default: ComponentType<any> }>;\n}\n\nexport interface ComponentRegistry<Metadata = RegistryMetadata> {\n  metadata: Metadata;\n  Component: ComponentType<any>;\n}\n\nexport type FunctionalRegistryState<RegistryT> = {\n  registry: { [key: string]: RegistryT & { key: string } };\n  registryKeys: string[];\n};\n\nexport const registryGetAll =\n  <RegistryT>({ registryKeys, registry }: FunctionalRegistryState<RegistryT>) =>\n  () =>\n    registryKeys.map(key => registry[key]);\n\nexport const registryDelete =\n  <RegistryT>({ registryKeys, registry }: FunctionalRegistryState<RegistryT>) =>\n  (keyToDelete: string) => {\n    // eslint-disable-next-line no-param-reassign\n    registryKeys = registryKeys.filter(key => key !== keyToDelete);\n    // eslint-disable-next-line no-param-reassign\n    delete registry[keyToDelete];\n  };\n\nexport const registryGet =\n  <RegistryT>({ registry }: FunctionalRegistryState<RegistryT>) =>\n  (key: string) =>\n    registry[key];\n\nexport const registrySet =\n  ({ registryKeys, registry }: FunctionalRegistryState<JsonObject>) =>\n  (key: string, item: JsonObject) => {\n    registryKeys.push(key);\n    // eslint-disable-next-line no-param-reassign\n    registry[key] = {\n      key,\n      ...item,\n    };\n  };\n\nexport const registrySetComponent =\n  ({ registryKeys, registry }: FunctionalRegistryState<ComponentRegistry>) =>\n  (key: string, item: ComponentItem) => {\n    registryKeys.push(key);\n    // eslint-disable-next-line no-param-reassign\n    registry[key] = {\n      key,\n      metadata: item.metadata,\n      Component: React.lazy(item.loadComponent),\n    };\n  };\n"]},"metadata":{},"sourceType":"module"}