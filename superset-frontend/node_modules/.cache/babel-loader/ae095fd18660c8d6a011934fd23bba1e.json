{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { t } from '@superset-ui/core';\nimport { ControlSubSectionHeader, DEFAULT_SORT_SERIES_DATA, SORT_SERIES_CHOICES, sharedControls } from '@superset-ui/chart-controls';\nimport { DEFAULT_LEGEND_FORM_DATA, StackControlOptions } from './constants';\nimport { DEFAULT_FORM_DATA } from './Timeseries/constants';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst { legendMargin, legendOrientation, legendType, showLegend } = DEFAULT_LEGEND_FORM_DATA;\nconst showLegendControl = {\n  name: 'show_legend',\n  config: {\n    type: 'CheckboxControl',\n    label: t('Show legend'),\n    renderTrigger: true,\n    default: showLegend,\n    description: t('Whether to display a legend for the chart') } };\n\n\nconst legendMarginControl = {\n  name: 'legendMargin',\n  config: {\n    type: 'TextControl',\n    label: t('Margin'),\n    renderTrigger: true,\n    isInt: true,\n    default: legendMargin,\n    description: t('Additional padding for legend.'),\n    visibility: (_ref) => {var _controls$show_legend;let { controls } = _ref;return Boolean(controls == null ? void 0 : (_controls$show_legend = controls.show_legend) == null ? void 0 : _controls$show_legend.value);} } };\n\n\nconst legendTypeControl = {\n  name: 'legendType',\n  config: {\n    type: 'SelectControl',\n    freeForm: false,\n    label: t('Type'),\n    choices: [\n    ['scroll', t('Scroll')],\n    ['plain', t('Plain')]],\n\n    default: legendType,\n    renderTrigger: true,\n    description: t('Legend type'),\n    visibility: (_ref2) => {var _controls$show_legend2;let { controls } = _ref2;return Boolean(controls == null ? void 0 : (_controls$show_legend2 = controls.show_legend) == null ? void 0 : _controls$show_legend2.value);} } };\n\n\nconst legendOrientationControl = {\n  name: 'legendOrientation',\n  config: {\n    type: 'SelectControl',\n    freeForm: false,\n    label: t('Orientation'),\n    choices: [\n    ['top', t('Top')],\n    ['bottom', t('Bottom')],\n    ['left', t('Left')],\n    ['right', t('Right')]],\n\n    default: legendOrientation,\n    renderTrigger: true,\n    description: t('Legend Orientation'),\n    visibility: (_ref3) => {var _controls$show_legend3;let { controls } = _ref3;return Boolean(controls == null ? void 0 : (_controls$show_legend3 = controls.show_legend) == null ? void 0 : _controls$show_legend3.value);} } };\n\n\nexport const legendSection = [\n[___EmotionJSX(ControlSubSectionHeader, null, t('Legend'))],\n[showLegendControl],\n[legendTypeControl],\n[legendOrientationControl],\n[legendMarginControl]];\n\nexport const showValueControl = {\n  name: 'show_value',\n  config: {\n    type: 'CheckboxControl',\n    label: t('Show Value'),\n    default: false,\n    renderTrigger: true,\n    description: t('Show series values on the chart') } };\n\n\nexport const stackControl = {\n  name: 'stack',\n  config: {\n    type: 'SelectControl',\n    label: t('Stacked Style'),\n    renderTrigger: true,\n    choices: StackControlOptions,\n    default: null,\n    description: t('Stack series on top of each other') } };\n\n\nexport const onlyTotalControl = {\n  name: 'only_total',\n  config: {\n    type: 'CheckboxControl',\n    label: t('Only Total'),\n    default: true,\n    renderTrigger: true,\n    description: t('Only show the total value on the stacked chart, and not show on the selected category'),\n    visibility: (_ref4) => {var _controls$show_value, _controls$stack;let { controls } = _ref4;return Boolean(controls == null ? void 0 : (_controls$show_value = controls.show_value) == null ? void 0 : _controls$show_value.value) && Boolean(controls == null ? void 0 : (_controls$stack = controls.stack) == null ? void 0 : _controls$stack.value);} } };\n\n\nexport const percentageThresholdControl = {\n  name: 'percentage_threshold',\n  config: {\n    type: 'TextControl',\n    label: t('Percentage threshold'),\n    renderTrigger: true,\n    isFloat: true,\n    default: DEFAULT_FORM_DATA.percentageThreshold,\n    description: t('Minimum threshold in percentage points for showing labels.'),\n    visibility: (_ref5) => {var _controls$show_value2, _controls$stack2, _controls$only_total;let { controls } = _ref5;return Boolean(controls == null ? void 0 : (_controls$show_value2 = controls.show_value) == null ? void 0 : _controls$show_value2.value) &&\n      Boolean(controls == null ? void 0 : (_controls$stack2 = controls.stack) == null ? void 0 : _controls$stack2.value) &&\n      Boolean(!(controls != null && (_controls$only_total = controls.only_total) != null && _controls$only_total.value));} } };\n\n\nexport const showValueSection = [\n[showValueControl],\n[stackControl],\n[onlyTotalControl],\n[percentageThresholdControl]];\n\nexport const showValueSectionWithoutStack = [\n[showValueControl],\n[onlyTotalControl]];\n\nconst richTooltipControl = {\n  name: 'rich_tooltip',\n  config: {\n    type: 'CheckboxControl',\n    label: t('Rich tooltip'),\n    renderTrigger: true,\n    default: true,\n    description: t('Shows a list of all series available at that point in time') } };\n\n\nconst tooltipTimeFormatControl = {\n  name: 'tooltipTimeFormat',\n  config: {\n    ...sharedControls.x_axis_time_format,\n    label: t('Tooltip time format'),\n    default: 'smart_date',\n    clearable: false } };\n\n\nconst tooltipSortByMetricControl = {\n  name: 'tooltipSortByMetric',\n  config: {\n    type: 'CheckboxControl',\n    label: t('Tooltip sort by metric'),\n    renderTrigger: true,\n    default: false,\n    description: t('Whether to sort tooltip by the selected metric in descending order.'),\n    visibility: (_ref6) => {var _controls$rich_toolti;let { controls } = _ref6;return Boolean(controls == null ? void 0 : (_controls$rich_toolti = controls.rich_tooltip) == null ? void 0 : _controls$rich_toolti.value);} } };\n\n\nexport const richTooltipSection = [\n[___EmotionJSX(ControlSubSectionHeader, null, t('Tooltip'))],\n[richTooltipControl],\n[tooltipSortByMetricControl],\n[tooltipTimeFormatControl]];\n\nconst sortSeriesType = {\n  name: 'sort_series_type',\n  config: {\n    type: 'SelectControl',\n    freeForm: false,\n    label: t('Sort Series By'),\n    choices: SORT_SERIES_CHOICES,\n    default: DEFAULT_SORT_SERIES_DATA.sort_series_type,\n    renderTrigger: true,\n    description: t('Based on what should series be ordered on the chart and legend') } };\n\n\nconst sortSeriesAscending = {\n  name: 'sort_series_ascending',\n  config: {\n    type: 'CheckboxControl',\n    label: t('Sort Series Ascending'),\n    default: DEFAULT_SORT_SERIES_DATA.sort_series_ascending,\n    renderTrigger: true,\n    description: t('Sort series in ascending order') } };\n\n\nexport const seriesOrderSection = [\n[___EmotionJSX(ControlSubSectionHeader, null, t('Series Order'))],\n[sortSeriesType],\n[sortSeriesAscending]];","map":{"version":3,"mappings":"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","names":["React","t","ControlSubSectionHeader","DEFAULT_SORT_SERIES_DATA","SORT_SERIES_CHOICES","sharedControls","DEFAULT_LEGEND_FORM_DATA","StackControlOptions","DEFAULT_FORM_DATA","legendMargin","legendOrientation","legendType","showLegend","showLegendControl","name","config","type","label","renderTrigger","default","description","legendMarginControl","isInt","visibility","controls","Boolean","show_legend","value","legendTypeControl","freeForm","choices","legendOrientationControl","legendSection","showValueControl","stackControl","onlyTotalControl","show_value","stack","percentageThresholdControl","isFloat","percentageThreshold","only_total","showValueSection","showValueSectionWithoutStack","richTooltipControl","tooltipTimeFormatControl","x_axis_time_format","clearable","tooltipSortByMetricControl","rich_tooltip","richTooltipSection","sortSeriesType","sort_series_type","sortSeriesAscending","sort_series_ascending","seriesOrderSection"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/plugins/plugin-chart-echarts/src/controls.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { t } from '@superset-ui/core';\nimport {\n  ControlPanelsContainerProps,\n  ControlSetItem,\n  ControlSetRow,\n  ControlSubSectionHeader,\n  DEFAULT_SORT_SERIES_DATA,\n  SORT_SERIES_CHOICES,\n  sharedControls,\n} from '@superset-ui/chart-controls';\nimport { DEFAULT_LEGEND_FORM_DATA, StackControlOptions } from './constants';\nimport { DEFAULT_FORM_DATA } from './Timeseries/constants';\n\nconst { legendMargin, legendOrientation, legendType, showLegend } =\n  DEFAULT_LEGEND_FORM_DATA;\n\nconst showLegendControl: ControlSetItem = {\n  name: 'show_legend',\n  config: {\n    type: 'CheckboxControl',\n    label: t('Show legend'),\n    renderTrigger: true,\n    default: showLegend,\n    description: t('Whether to display a legend for the chart'),\n  },\n};\n\nconst legendMarginControl: ControlSetItem = {\n  name: 'legendMargin',\n  config: {\n    type: 'TextControl',\n    label: t('Margin'),\n    renderTrigger: true,\n    isInt: true,\n    default: legendMargin,\n    description: t('Additional padding for legend.'),\n    visibility: ({ controls }: ControlPanelsContainerProps) =>\n      Boolean(controls?.show_legend?.value),\n  },\n};\n\nconst legendTypeControl: ControlSetItem = {\n  name: 'legendType',\n  config: {\n    type: 'SelectControl',\n    freeForm: false,\n    label: t('Type'),\n    choices: [\n      ['scroll', t('Scroll')],\n      ['plain', t('Plain')],\n    ],\n    default: legendType,\n    renderTrigger: true,\n    description: t('Legend type'),\n    visibility: ({ controls }: ControlPanelsContainerProps) =>\n      Boolean(controls?.show_legend?.value),\n  },\n};\n\nconst legendOrientationControl: ControlSetItem = {\n  name: 'legendOrientation',\n  config: {\n    type: 'SelectControl',\n    freeForm: false,\n    label: t('Orientation'),\n    choices: [\n      ['top', t('Top')],\n      ['bottom', t('Bottom')],\n      ['left', t('Left')],\n      ['right', t('Right')],\n    ],\n    default: legendOrientation,\n    renderTrigger: true,\n    description: t('Legend Orientation'),\n    visibility: ({ controls }: ControlPanelsContainerProps) =>\n      Boolean(controls?.show_legend?.value),\n  },\n};\n\nexport const legendSection: ControlSetRow[] = [\n  [<ControlSubSectionHeader>{t('Legend')}</ControlSubSectionHeader>],\n  [showLegendControl],\n  [legendTypeControl],\n  [legendOrientationControl],\n  [legendMarginControl],\n];\n\nexport const showValueControl: ControlSetItem = {\n  name: 'show_value',\n  config: {\n    type: 'CheckboxControl',\n    label: t('Show Value'),\n    default: false,\n    renderTrigger: true,\n    description: t('Show series values on the chart'),\n  },\n};\n\nexport const stackControl: ControlSetItem = {\n  name: 'stack',\n  config: {\n    type: 'SelectControl',\n    label: t('Stacked Style'),\n    renderTrigger: true,\n    choices: StackControlOptions,\n    default: null,\n    description: t('Stack series on top of each other'),\n  },\n};\n\nexport const onlyTotalControl: ControlSetItem = {\n  name: 'only_total',\n  config: {\n    type: 'CheckboxControl',\n    label: t('Only Total'),\n    default: true,\n    renderTrigger: true,\n    description: t(\n      'Only show the total value on the stacked chart, and not show on the selected category',\n    ),\n    visibility: ({ controls }: ControlPanelsContainerProps) =>\n      Boolean(controls?.show_value?.value) && Boolean(controls?.stack?.value),\n  },\n};\n\nexport const percentageThresholdControl: ControlSetItem = {\n  name: 'percentage_threshold',\n  config: {\n    type: 'TextControl',\n    label: t('Percentage threshold'),\n    renderTrigger: true,\n    isFloat: true,\n    default: DEFAULT_FORM_DATA.percentageThreshold,\n    description: t(\n      'Minimum threshold in percentage points for showing labels.',\n    ),\n    visibility: ({ controls }: ControlPanelsContainerProps) =>\n      Boolean(controls?.show_value?.value) &&\n      Boolean(controls?.stack?.value) &&\n      Boolean(!controls?.only_total?.value),\n  },\n};\n\nexport const showValueSection: ControlSetRow[] = [\n  [showValueControl],\n  [stackControl],\n  [onlyTotalControl],\n  [percentageThresholdControl],\n];\n\nexport const showValueSectionWithoutStack: ControlSetRow[] = [\n  [showValueControl],\n  [onlyTotalControl],\n];\n\nconst richTooltipControl: ControlSetItem = {\n  name: 'rich_tooltip',\n  config: {\n    type: 'CheckboxControl',\n    label: t('Rich tooltip'),\n    renderTrigger: true,\n    default: true,\n    description: t(\n      'Shows a list of all series available at that point in time',\n    ),\n  },\n};\n\nconst tooltipTimeFormatControl: ControlSetItem = {\n  name: 'tooltipTimeFormat',\n  config: {\n    ...sharedControls.x_axis_time_format,\n    label: t('Tooltip time format'),\n    default: 'smart_date',\n    clearable: false,\n  },\n};\n\nconst tooltipSortByMetricControl: ControlSetItem = {\n  name: 'tooltipSortByMetric',\n  config: {\n    type: 'CheckboxControl',\n    label: t('Tooltip sort by metric'),\n    renderTrigger: true,\n    default: false,\n    description: t(\n      'Whether to sort tooltip by the selected metric in descending order.',\n    ),\n    visibility: ({ controls }: ControlPanelsContainerProps) =>\n      Boolean(controls?.rich_tooltip?.value),\n  },\n};\n\nexport const richTooltipSection: ControlSetRow[] = [\n  [<ControlSubSectionHeader>{t('Tooltip')}</ControlSubSectionHeader>],\n  [richTooltipControl],\n  [tooltipSortByMetricControl],\n  [tooltipTimeFormatControl],\n];\n\nconst sortSeriesType: ControlSetItem = {\n  name: 'sort_series_type',\n  config: {\n    type: 'SelectControl',\n    freeForm: false,\n    label: t('Sort Series By'),\n    choices: SORT_SERIES_CHOICES,\n    default: DEFAULT_SORT_SERIES_DATA.sort_series_type,\n    renderTrigger: true,\n    description: t(\n      'Based on what should series be ordered on the chart and legend',\n    ),\n  },\n};\n\nconst sortSeriesAscending: ControlSetItem = {\n  name: 'sort_series_ascending',\n  config: {\n    type: 'CheckboxControl',\n    label: t('Sort Series Ascending'),\n    default: DEFAULT_SORT_SERIES_DATA.sort_series_ascending,\n    renderTrigger: true,\n    description: t('Sort series in ascending order'),\n  },\n};\n\nexport const seriesOrderSection: ControlSetRow[] = [\n  [<ControlSubSectionHeader>{t('Series Order')}</ControlSubSectionHeader>],\n  [sortSeriesType],\n  [sortSeriesAscending],\n];\n"]},"metadata":{},"sourceType":"module"}