{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nexport function getDashboardFilterKey(_ref) {let { chartId, column } = _ref;\n  return `${chartId}_${column}`;\n}\nconst filterKeySplitter = /^([0-9]+)_(.*)$/;\nexport function getChartIdAndColumnFromFilterKey(key) {\n  const match = filterKeySplitter.exec(key);\n  if (!match)\n  throw new Error('Cannot parse invalid filter key');\n  return { chartId: parseInt(match[1], 10), column: match[2] };\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(getDashboardFilterKey, \"getDashboardFilterKey\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/util/getDashboardFilterKey.ts\");reactHotLoader.register(filterKeySplitter, \"filterKeySplitter\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/util/getDashboardFilterKey.ts\");reactHotLoader.register(getChartIdAndColumnFromFilterKey, \"getChartIdAndColumnFromFilterKey\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/util/getDashboardFilterKey.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAwBA,OAAM,SAAUA,qBAAV,OAGuB,KAHS,EACpCC,OADoC,EAEpCC,MAFoC,EAGT;EAC3B,OAAO,GAAGD,OAAO,IAAIC,MAAM,EAA3B;AACD;AAED,MAAMC,iBAAiB,GAAG,iBAA1B;AAEA,OAAM,SAAUC,gCAAV,CAA2CC,GAA3C,EAAsD;EAC1D,MAAMC,KAAK,GAAGH,iBAAiB,CAACI,IAAlB,CAAuBF,GAAvB,CAAd;EACA,IAAI,CAACC,KAAL;EAAY,MAAM,IAAIE,KAAJ,CAAU,iCAAV,CAAN;EACZ,OAAO,EAAEP,OAAO,EAAEQ,QAAQ,CAACH,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAAnB,EAAmCJ,MAAM,EAAEI,KAAK,CAAC,CAAD,CAAhD,EAAP;AACD,C,iLAbeN,qB,mKAOVG,iB,+JAEUC,gC","names":["getDashboardFilterKey","chartId","column","filterKeySplitter","getChartIdAndColumnFromFilterKey","key","match","exec","Error","parseInt"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/util/getDashboardFilterKey.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\ninterface GetDashboardFilterKeyProps {\n  chartId: string;\n  column: string;\n}\n\nexport function getDashboardFilterKey({\n  chartId,\n  column,\n}: GetDashboardFilterKeyProps) {\n  return `${chartId}_${column}`;\n}\n\nconst filterKeySplitter = /^([0-9]+)_(.*)$/;\n\nexport function getChartIdAndColumnFromFilterKey(key: string) {\n  const match = filterKeySplitter.exec(key);\n  if (!match) throw new Error('Cannot parse invalid filter key');\n  return { chartId: parseInt(match[1], 10), column: match[2] };\n}\n"]},"metadata":{},"sourceType":"module"}