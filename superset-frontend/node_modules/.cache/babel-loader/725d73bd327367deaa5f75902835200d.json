{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport JSONbig from 'json-bigint';\nimport React, { useEffect, useRef, useState, useMemo } from 'react';\nimport { JSONTree } from 'react-json-tree';\nimport { getMultipleTextDimensions, t, styled, useTheme } from '@superset-ui/core';\nimport { useDebounceValue } from 'src/hooks/useDebounceValue';\nimport Button from '../Button';\nimport CopyToClipboard from '../CopyToClipboard';\nimport ModalTrigger from '../ModalTrigger';\nimport { Table, TableSize } from '../Table';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nfunction safeJsonObjectParse(data) {\n  // First perform a cheap proxy to avoid calling JSON.parse on data that is clearly not a\n  // JSON object or array\n  if (typeof data !== 'string' ||\n  ['{', '['].indexOf(data.substring(0, 1)) === -1) {\n    return null;\n  }\n  // We know `data` is a string starting with '{' or '[', so try to parse it as a valid object\n  try {\n    const jsonData = JSONbig({ storeAsString: true }).parse(data);\n    if (jsonData && typeof jsonData === 'object') {\n      return jsonData;\n    }\n    return null;\n  }\n  catch (_) {\n    return null;\n  }\n}\nexport function convertBigIntStrToNumber(value) {\n  if (typeof value === 'string' && /^\"-?\\d+\"$/.test(value)) {\n    return value.substring(1, value.length - 1);\n  }\n  return value;\n}\nfunction renderBigIntStrToNumber(value) {\n  return ___EmotionJSX(React.Fragment, null, convertBigIntStrToNumber(value));\n}\nconst SCROLL_BAR_HEIGHT = 15;\n// This regex handles all possible number formats in javascript, including ints, floats,\n// exponential notation, NaN, and Infinity.\n// See https://stackoverflow.com/a/30987109 for more details\nconst ONLY_NUMBER_REGEX = /^(NaN|-?((\\d*\\.\\d+|\\d+)([Ee][+-]?\\d+)?|Infinity))$/;\nconst StyledFilterableTable = styled.div`\n  ${(_ref) => {let { theme } = _ref;return `\n    height: 100%;\n    overflow: hidden;\n    margin-top: ${theme.gridUnit * 2}px;\n\n    .ant-table-cell {\n      font-weight: ${theme.typography.weights.bold};\n      background-color: ${theme.colors.grayscale.light5};\n    }\n\n    .ant-table-cell,\n    .virtual-table-cell {\n      min-width: 0px;\n      align-self: center;\n      font-size: ${theme.typography.sizes.s}px;\n    }\n\n    .even-row {\n      background: ${theme.colors.grayscale.light4};\n    }\n\n    .odd-row {\n      background: ${theme.colors.grayscale.light5};\n    }\n\n    .cell-text-for-measuring {\n      font-family: ${theme.typography.families.sansSerif};\n      font-size: ${theme.typography.sizes.s}px;\n    }\n  `;}}\n`;\nconst FilterableTable = (_ref2) => {let { orderedColumnKeys, data, height, filterText = '', expandedColumns = [] } = _ref2;\n  const formatTableData = (data) => data.map((row) => {\n    const newRow = {};\n    Object.entries(row).forEach((_ref3) => {let [key, val] = _ref3;\n      if (['string', 'number'].indexOf(typeof val) >= 0) {\n        newRow[key] = val;\n      } else\n      {\n        newRow[key] = val === null ? null : JSONbig.stringify(val);\n      }\n    });\n    return newRow;\n  });\n  const [fitted, setFitted] = useState(false);\n  const [list] = useState(() => formatTableData(data));\n  // columns that have complex type and were expanded into sub columns\n  const complexColumns = useMemo(() => orderedColumnKeys.reduce((obj, key) => ({\n    ...obj,\n    [key]: expandedColumns.some((name) => name.startsWith(`${key}.`)) }),\n  {}), [expandedColumns, orderedColumnKeys]);\n  const getCellContent = (_ref4) => {let { cellData, columnKey } = _ref4;\n    if (cellData === null) {\n      return 'NULL';\n    }\n    const content = String(cellData);\n    const firstCharacter = content.substring(0, 1);\n    let truncated;\n    if (firstCharacter === '[') {\n      truncated = '[…]';\n    } else\n    if (firstCharacter === '{') {\n      truncated = '{…}';\n    } else\n    {\n      truncated = '';\n    }\n    return complexColumns[columnKey] ? truncated : content;\n  };\n  const theme = useTheme();\n  const [jsonTreeTheme, setJsonTreeTheme] = useState();\n  const getJsonTreeTheme = () => {\n    if (!jsonTreeTheme) {\n      setJsonTreeTheme({\n        base00: theme.colors.grayscale.dark2,\n        base01: theme.colors.grayscale.dark1,\n        base02: theme.colors.grayscale.base,\n        base03: theme.colors.grayscale.light1,\n        base04: theme.colors.grayscale.light2,\n        base05: theme.colors.grayscale.light3,\n        base06: theme.colors.grayscale.light4,\n        base07: theme.colors.grayscale.light5,\n        base08: theme.colors.error.base,\n        base09: theme.colors.error.light1,\n        base0A: theme.colors.error.light2,\n        base0B: theme.colors.success.base,\n        base0C: theme.colors.primary.light1,\n        base0D: theme.colors.primary.base,\n        base0E: theme.colors.primary.dark1,\n        base0F: theme.colors.error.dark1 });\n\n    }\n    return jsonTreeTheme;\n  };\n  const getWidthsForColumns = () => {\n    const PADDING = 50; // accounts for cell padding and width of sorting icon\n    const widthsByColumnKey = {};\n    const cellContent = [].concat(...orderedColumnKeys.map((key) => {\n      const cellContentList = list.map((data) => getCellContent({ cellData: data[key], columnKey: key }));\n      cellContentList.push(key);\n      return cellContentList;\n    }));\n    const colWidths = getMultipleTextDimensions({\n      className: 'cell-text-for-measuring',\n      texts: cellContent }).\n    map((dimension) => dimension.width);\n    orderedColumnKeys.forEach((key, index) => {\n      // we can't use Math.max(...colWidths.slice(...)) here since the number\n      // of elements might be bigger than the number of allowed arguments in a\n      // JavaScript function\n      widthsByColumnKey[key] =\n      colWidths.\n      slice(index * (list.length + 1), (index + 1) * (list.length + 1)).\n      reduce((a, b) => Math.max(a, b)) + PADDING;\n    });\n    return widthsByColumnKey;\n  };\n  const [widthsForColumnsByKey] = useState(() => getWidthsForColumns());\n  const totalTableWidth = useRef(orderedColumnKeys.\n  map((key) => widthsForColumnsByKey[key]).\n  reduce((curr, next) => curr + next));\n  const container = useRef(null);\n  const fitTableToWidthIfNeeded = () => {var _container$current$cl, _container$current;\n    const containerWidth = (_container$current$cl = (_container$current = container.current) == null ? void 0 : _container$current.clientWidth) != null ? _container$current$cl : 0;\n    if (totalTableWidth.current < containerWidth) {\n      // fit table width if content doesn't fill the width of the container\n      totalTableWidth.current = containerWidth;\n    }\n    setFitted(true);\n  };\n  useEffect(() => {\n    fitTableToWidthIfNeeded();\n  }, []);\n  const hasMatch = (text, row) => {\n    const values = [];\n    Object.keys(row).forEach((key) => {\n      if (row.hasOwnProperty(key)) {\n        const cellValue = row[key];\n        if (typeof cellValue === 'string') {\n          values.push(cellValue.toLowerCase());\n        } else\n        if (cellValue !== null &&\n        typeof cellValue.toString === 'function') {\n          values.push(cellValue.toString());\n        }\n      }\n    });\n    const lowerCaseText = text.toLowerCase();\n    return values.some((v) => _includesInstanceProperty(v).call(v, lowerCaseText));\n  };\n  const renderJsonModal = (node, jsonObject, jsonString) => ___EmotionJSX(ModalTrigger, { modalBody: ___EmotionJSX(JSONTree, { data: jsonObject, theme: getJsonTreeTheme(), valueRenderer: renderBigIntStrToNumber }), modalFooter: ___EmotionJSX(Button, null,\n    ___EmotionJSX(CopyToClipboard, { shouldShowText: false, text: jsonString })),\n    modalTitle: t('Cell content'), triggerNode: node });\n  // Parse any numbers from strings so they'll sort correctly\n  const parseNumberFromString = (value) => {\n    if (typeof value === 'string') {\n      if (ONLY_NUMBER_REGEX.test(value)) {\n        return parseFloat(value);\n      }\n    }\n    return value;\n  };\n  const sortResults = (key, a, b) => {\n    const aValue = parseNumberFromString(a[key]);\n    const bValue = parseNumberFromString(b[key]);\n    // equal items sort equally\n    if (aValue === bValue) {\n      return 0;\n    }\n    // nulls sort after anything else\n    if (aValue === null) {\n      return 1;\n    }\n    if (bValue === null) {\n      return -1;\n    }\n    return aValue < bValue ? -1 : 1;\n  };\n  const keyword = useDebounceValue(filterText);\n  const filteredList = useMemo(() => keyword ? list.filter((row) => hasMatch(keyword, row)) : list, [list, keyword]);\n  const renderTableCell = (cellData, columnKey) => {\n    const cellNode = getCellContent({ cellData, columnKey });\n    const content = cellData === null ? ___EmotionJSX(\"i\", { className: \"text-muted\" }, cellNode) : cellNode;\n    const jsonObject = safeJsonObjectParse(cellData);\n    if (jsonObject) {\n      return renderJsonModal(cellNode, jsonObject, cellData);\n    }\n    return content;\n  };\n  // exclude the height of the horizontal scroll bar from the height of the table\n  // and the height of the table container if the content overflows\n  const totalTableHeight = container.current && totalTableWidth.current > container.current.clientWidth ?\n  height - SCROLL_BAR_HEIGHT :\n  height;\n  const columns = orderedColumnKeys.map((key) => ({\n    key,\n    title: key,\n    dataIndex: key,\n    width: widthsForColumnsByKey[key],\n    sorter: (a, b) => sortResults(key, a, b),\n    render: (text) => renderTableCell(text, key) }));\n\n  return ___EmotionJSX(StyledFilterableTable, { className: \"filterable-table-container\", \"data-test\": \"table-container\", ref: container },\n  fitted && ___EmotionJSX(Table, { loading: filterText !== keyword, size: TableSize.SMALL, height: totalTableHeight + 42, usePagination: false, columns: columns, data: filteredList, virtualize: true, bordered: true }));\n\n};__signature__(FilterableTable, \"useState{[fitted, setFitted](false)}\\nuseState{[list](() => formatTableData(data))}\\nuseMemo{complexColumns}\\nuseTheme{theme}\\nuseState{[jsonTreeTheme, setJsonTreeTheme]}\\nuseState{[widthsForColumnsByKey](() => getWidthsForColumns())}\\nuseRef{totalTableWidth}\\nuseRef{container}\\nuseEffect{}\\nuseDebounceValue{keyword}\\nuseMemo{filteredList}\", () => [useTheme, useDebounceValue]);const _default =\nFilterableTable;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(safeJsonObjectParse, \"safeJsonObjectParse\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/FilterableTable/index.tsx\");reactHotLoader.register(convertBigIntStrToNumber, \"convertBigIntStrToNumber\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/FilterableTable/index.tsx\");reactHotLoader.register(renderBigIntStrToNumber, \"renderBigIntStrToNumber\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/FilterableTable/index.tsx\");reactHotLoader.register(SCROLL_BAR_HEIGHT, \"SCROLL_BAR_HEIGHT\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/FilterableTable/index.tsx\");reactHotLoader.register(ONLY_NUMBER_REGEX, \"ONLY_NUMBER_REGEX\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/FilterableTable/index.tsx\");reactHotLoader.register(StyledFilterableTable, \"StyledFilterableTable\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/FilterableTable/index.tsx\");reactHotLoader.register(FilterableTable, \"FilterableTable\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/FilterableTable/index.tsx\");reactHotLoader.register(_default, \"default\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/FilterableTable/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"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","names":["JSONbig","React","useEffect","useRef","useState","useMemo","JSONTree","getMultipleTextDimensions","t","styled","useTheme","useDebounceValue","Button","CopyToClipboard","ModalTrigger","Table","TableSize","safeJsonObjectParse","data","indexOf","substring","jsonData","storeAsString","parse","_","convertBigIntStrToNumber","value","test","length","renderBigIntStrToNumber","SCROLL_BAR_HEIGHT","ONLY_NUMBER_REGEX","StyledFilterableTable","div","theme","gridUnit","typography","weights","bold","colors","grayscale","light5","sizes","s","light4","families","sansSerif","FilterableTable","orderedColumnKeys","height","filterText","expandedColumns","formatTableData","map","newRow","Object","entries","row","forEach","key","val","stringify","fitted","setFitted","list","complexColumns","reduce","obj","some","name","startsWith","getCellContent","cellData","columnKey","content","String","firstCharacter","truncated","jsonTreeTheme","setJsonTreeTheme","getJsonTreeTheme","base00","dark2","base01","dark1","base02","base","base03","light1","base04","light2","base05","light3","base06","base07","base08","error","base09","base0A","base0B","success","base0C","primary","base0D","base0E","base0F","getWidthsForColumns","PADDING","widthsByColumnKey","cellContent","concat","cellContentList","push","colWidths","className","texts","dimension","width","index","slice","a","b","Math","max","widthsForColumnsByKey","totalTableWidth","curr","next","container","fitTableToWidthIfNeeded","containerWidth","current","clientWidth","hasMatch","text","values","keys","hasOwnProperty","cellValue","toLowerCase","toString","lowerCaseText","renderJsonModal","node","jsonObject","jsonString","parseNumberFromString","parseFloat","sortResults","aValue","bValue","keyword","filteredList","filter","renderTableCell","cellNode","totalTableHeight","columns","title","dataIndex","sorter","render","SMALL"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/FilterableTable/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport JSONbig from 'json-bigint';\nimport React, { useEffect, useRef, useState, useMemo } from 'react';\nimport { JSONTree } from 'react-json-tree';\nimport {\n  getMultipleTextDimensions,\n  t,\n  styled,\n  useTheme,\n} from '@superset-ui/core';\nimport { useDebounceValue } from 'src/hooks/useDebounceValue';\nimport Button from '../Button';\nimport CopyToClipboard from '../CopyToClipboard';\nimport ModalTrigger from '../ModalTrigger';\nimport { Table, TableSize } from '../Table';\n\nfunction safeJsonObjectParse(\n  data: unknown,\n): null | unknown[] | Record<string, unknown> {\n  // First perform a cheap proxy to avoid calling JSON.parse on data that is clearly not a\n  // JSON object or array\n  if (\n    typeof data !== 'string' ||\n    ['{', '['].indexOf(data.substring(0, 1)) === -1\n  ) {\n    return null;\n  }\n\n  // We know `data` is a string starting with '{' or '[', so try to parse it as a valid object\n  try {\n    const jsonData = JSONbig({ storeAsString: true }).parse(data);\n    if (jsonData && typeof jsonData === 'object') {\n      return jsonData;\n    }\n    return null;\n  } catch (_) {\n    return null;\n  }\n}\n\nexport function convertBigIntStrToNumber(value: string | number) {\n  if (typeof value === 'string' && /^\"-?\\d+\"$/.test(value)) {\n    return value.substring(1, value.length - 1);\n  }\n  return value;\n}\n\nfunction renderBigIntStrToNumber(value: string | number) {\n  return <>{convertBigIntStrToNumber(value)}</>;\n}\n\nconst SCROLL_BAR_HEIGHT = 15;\n// This regex handles all possible number formats in javascript, including ints, floats,\n// exponential notation, NaN, and Infinity.\n// See https://stackoverflow.com/a/30987109 for more details\nconst ONLY_NUMBER_REGEX = /^(NaN|-?((\\d*\\.\\d+|\\d+)([Ee][+-]?\\d+)?|Infinity))$/;\n\nconst StyledFilterableTable = styled.div`\n  ${({ theme }) => `\n    height: 100%;\n    overflow: hidden;\n    margin-top: ${theme.gridUnit * 2}px;\n\n    .ant-table-cell {\n      font-weight: ${theme.typography.weights.bold};\n      background-color: ${theme.colors.grayscale.light5};\n    }\n\n    .ant-table-cell,\n    .virtual-table-cell {\n      min-width: 0px;\n      align-self: center;\n      font-size: ${theme.typography.sizes.s}px;\n    }\n\n    .even-row {\n      background: ${theme.colors.grayscale.light4};\n    }\n\n    .odd-row {\n      background: ${theme.colors.grayscale.light5};\n    }\n\n    .cell-text-for-measuring {\n      font-family: ${theme.typography.families.sansSerif};\n      font-size: ${theme.typography.sizes.s}px;\n    }\n  `}\n`;\n\ntype CellDataType = string | number | null;\ntype Datum = Record<string, CellDataType>;\n\nexport interface FilterableTableProps {\n  orderedColumnKeys: string[];\n  data: Record<string, unknown>[];\n  height: number;\n  filterText?: string;\n  headerHeight?: number;\n  overscanColumnCount?: number;\n  overscanRowCount?: number;\n  rowHeight?: number;\n  // need antd 5.0 to support striped color pattern\n  striped?: boolean;\n  expandedColumns?: string[];\n}\n\nconst FilterableTable = ({\n  orderedColumnKeys,\n  data,\n  height,\n  filterText = '',\n  expandedColumns = [],\n}: FilterableTableProps) => {\n  const formatTableData = (data: Record<string, unknown>[]): Datum[] =>\n    data.map(row => {\n      const newRow = {};\n      Object.entries(row).forEach(([key, val]) => {\n        if (['string', 'number'].indexOf(typeof val) >= 0) {\n          newRow[key] = val;\n        } else {\n          newRow[key] = val === null ? null : JSONbig.stringify(val);\n        }\n      });\n      return newRow;\n    });\n\n  const [fitted, setFitted] = useState(false);\n  const [list] = useState<Datum[]>(() => formatTableData(data));\n\n  // columns that have complex type and were expanded into sub columns\n  const complexColumns = useMemo<Record<string, boolean>>(\n    () =>\n      orderedColumnKeys.reduce(\n        (obj, key) => ({\n          ...obj,\n          [key]: expandedColumns.some(name => name.startsWith(`${key}.`)),\n        }),\n        {},\n      ),\n    [expandedColumns, orderedColumnKeys],\n  );\n\n  const getCellContent = ({\n    cellData,\n    columnKey,\n  }: {\n    cellData: CellDataType;\n    columnKey: string;\n  }) => {\n    if (cellData === null) {\n      return 'NULL';\n    }\n    const content = String(cellData);\n    const firstCharacter = content.substring(0, 1);\n    let truncated;\n    if (firstCharacter === '[') {\n      truncated = '[…]';\n    } else if (firstCharacter === '{') {\n      truncated = '{…}';\n    } else {\n      truncated = '';\n    }\n    return complexColumns[columnKey] ? truncated : content;\n  };\n\n  const theme = useTheme();\n  const [jsonTreeTheme, setJsonTreeTheme] = useState<Record<string, string>>();\n\n  const getJsonTreeTheme = () => {\n    if (!jsonTreeTheme) {\n      setJsonTreeTheme({\n        base00: theme.colors.grayscale.dark2,\n        base01: theme.colors.grayscale.dark1,\n        base02: theme.colors.grayscale.base,\n        base03: theme.colors.grayscale.light1,\n        base04: theme.colors.grayscale.light2,\n        base05: theme.colors.grayscale.light3,\n        base06: theme.colors.grayscale.light4,\n        base07: theme.colors.grayscale.light5,\n        base08: theme.colors.error.base,\n        base09: theme.colors.error.light1,\n        base0A: theme.colors.error.light2,\n        base0B: theme.colors.success.base,\n        base0C: theme.colors.primary.light1,\n        base0D: theme.colors.primary.base,\n        base0E: theme.colors.primary.dark1,\n        base0F: theme.colors.error.dark1,\n      });\n    }\n    return jsonTreeTheme;\n  };\n\n  const getWidthsForColumns = () => {\n    const PADDING = 50; // accounts for cell padding and width of sorting icon\n    const widthsByColumnKey = {};\n    const cellContent = ([] as string[]).concat(\n      ...orderedColumnKeys.map(key => {\n        const cellContentList = list.map((data: Datum) =>\n          getCellContent({ cellData: data[key], columnKey: key }),\n        );\n        cellContentList.push(key);\n        return cellContentList;\n      }),\n    );\n\n    const colWidths = getMultipleTextDimensions({\n      className: 'cell-text-for-measuring',\n      texts: cellContent,\n    }).map(dimension => dimension.width);\n\n    orderedColumnKeys.forEach((key, index) => {\n      // we can't use Math.max(...colWidths.slice(...)) here since the number\n      // of elements might be bigger than the number of allowed arguments in a\n      // JavaScript function\n      widthsByColumnKey[key] =\n        colWidths\n          .slice(index * (list.length + 1), (index + 1) * (list.length + 1))\n          .reduce((a, b) => Math.max(a, b)) + PADDING;\n    });\n\n    return widthsByColumnKey;\n  };\n\n  const [widthsForColumnsByKey] = useState<Record<string, number>>(() =>\n    getWidthsForColumns(),\n  );\n\n  const totalTableWidth = useRef(\n    orderedColumnKeys\n      .map(key => widthsForColumnsByKey[key])\n      .reduce((curr, next) => curr + next),\n  );\n  const container = useRef<HTMLDivElement>(null);\n\n  const fitTableToWidthIfNeeded = () => {\n    const containerWidth = container.current?.clientWidth ?? 0;\n    if (totalTableWidth.current < containerWidth) {\n      // fit table width if content doesn't fill the width of the container\n      totalTableWidth.current = containerWidth;\n    }\n    setFitted(true);\n  };\n\n  useEffect(() => {\n    fitTableToWidthIfNeeded();\n  }, []);\n\n  const hasMatch = (text: string, row: Datum) => {\n    const values: string[] = [];\n    Object.keys(row).forEach(key => {\n      if (row.hasOwnProperty(key)) {\n        const cellValue = row[key];\n        if (typeof cellValue === 'string') {\n          values.push(cellValue.toLowerCase());\n        } else if (\n          cellValue !== null &&\n          typeof cellValue.toString === 'function'\n        ) {\n          values.push(cellValue.toString());\n        }\n      }\n    });\n    const lowerCaseText = text.toLowerCase();\n    return values.some(v => v.includes(lowerCaseText));\n  };\n\n  const renderJsonModal = (\n    node: React.ReactNode,\n    jsonObject: Record<string, unknown> | unknown[],\n    jsonString: CellDataType,\n  ) => (\n    <ModalTrigger\n      modalBody={\n        <JSONTree\n          data={jsonObject}\n          theme={getJsonTreeTheme()}\n          valueRenderer={renderBigIntStrToNumber}\n        />\n      }\n      modalFooter={\n        <Button>\n          <CopyToClipboard shouldShowText={false} text={jsonString} />\n        </Button>\n      }\n      modalTitle={t('Cell content')}\n      triggerNode={node}\n    />\n  );\n\n  // Parse any numbers from strings so they'll sort correctly\n  const parseNumberFromString = (value: string | number | null) => {\n    if (typeof value === 'string') {\n      if (ONLY_NUMBER_REGEX.test(value)) {\n        return parseFloat(value);\n      }\n    }\n\n    return value;\n  };\n\n  const sortResults = (key: string, a: Datum, b: Datum) => {\n    const aValue = parseNumberFromString(a[key]);\n    const bValue = parseNumberFromString(b[key]);\n\n    // equal items sort equally\n    if (aValue === bValue) {\n      return 0;\n    }\n\n    // nulls sort after anything else\n    if (aValue === null) {\n      return 1;\n    }\n    if (bValue === null) {\n      return -1;\n    }\n\n    return aValue < bValue ? -1 : 1;\n  };\n\n  const keyword = useDebounceValue(filterText);\n\n  const filteredList = useMemo(\n    () =>\n      keyword ? list.filter((row: Datum) => hasMatch(keyword, row)) : list,\n    [list, keyword],\n  );\n\n  const renderTableCell = (cellData: CellDataType, columnKey: string) => {\n    const cellNode = getCellContent({ cellData, columnKey });\n    const content =\n      cellData === null ? <i className=\"text-muted\">{cellNode}</i> : cellNode;\n    const jsonObject = safeJsonObjectParse(cellData);\n    if (jsonObject) {\n      return renderJsonModal(cellNode, jsonObject, cellData);\n    }\n    return content;\n  };\n\n  // exclude the height of the horizontal scroll bar from the height of the table\n  // and the height of the table container if the content overflows\n  const totalTableHeight =\n    container.current && totalTableWidth.current > container.current.clientWidth\n      ? height - SCROLL_BAR_HEIGHT\n      : height;\n\n  const columns = orderedColumnKeys.map(key => ({\n    key,\n    title: key,\n    dataIndex: key,\n    width: widthsForColumnsByKey[key],\n    sorter: (a: Datum, b: Datum) => sortResults(key, a, b),\n    render: (text: CellDataType) => renderTableCell(text, key),\n  }));\n\n  return (\n    <StyledFilterableTable\n      className=\"filterable-table-container\"\n      data-test=\"table-container\"\n      ref={container}\n    >\n      {fitted && (\n        <Table\n          loading={filterText !== keyword}\n          size={TableSize.SMALL}\n          height={totalTableHeight + 42}\n          usePagination={false}\n          columns={columns}\n          data={filteredList}\n          virtualize\n          bordered\n        />\n      )}\n    </StyledFilterableTable>\n  );\n};\n\nexport default FilterableTable;\n"]},"metadata":{},"sourceType":"module"}