{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\"; /*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport ErrorBoundary from 'react-error-boundary';\nimport { ParentSize } from '@vx/responsive';\nimport { createSelector } from 'reselect';\nimport { withTheme } from '@emotion/react';\nimport { parseLength } from '../../dimension';\nimport getChartMetadataRegistry from '../registries/ChartMetadataRegistrySingleton';\nimport SuperChartCore from './SuperChartCore';\nimport DefaultFallbackComponent from './FallbackComponent';\nimport ChartProps from '../models/ChartProps';\nimport NoResultsComponent from './NoResultsComponent';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst defaultProps = {\n  FallbackComponent: DefaultFallbackComponent,\n  height: 400,\n  width: '100%',\n  enableNoResults: true };\n\nclass SuperChart extends React.PureComponent {constructor() {super(...arguments);this.\n\n\n\n    core = void 0;this.\n    createChartProps = ChartProps.createSelector();this.\n    parseDimension = createSelector([\n    (_ref) => {let { width } = _ref;return width;},\n    (_ref2) => {let { height } = _ref2;return height;}],\n    (width, height) => {\n      // Parse them in case they are % or 'auto'\n      const widthInfo = parseLength(width);\n      const heightInfo = parseLength(height);\n      const boxHeight = heightInfo.isDynamic ?\n      `${heightInfo.multiplier * 100}%` :\n      heightInfo.value;\n      const boxWidth = widthInfo.isDynamic ?\n      `${widthInfo.multiplier * 100}%` :\n      widthInfo.value;\n      const style = {\n        height: boxHeight,\n        width: boxWidth };\n\n      // bounding box will ensure that when one dimension is not dynamic\n      // e.g. height = 300\n      // the auto size will be bound to that value instead of being 100% by default\n      // e.g. height: 300 instead of height: '100%'\n      const BoundingBox = widthInfo.isDynamic &&\n      heightInfo.isDynamic &&\n      widthInfo.multiplier === 1 &&\n      heightInfo.multiplier === 1 ?\n      React.Fragment :\n      (_ref3) => {let { children } = _ref3;return ___EmotionJSX(\"div\", { style: style }, children);};\n      return { BoundingBox, heightInfo, widthInfo };\n    });this.\n\n    setRef = (core) => {\n      this.core = core;\n    };this.\n    getQueryCount = () => {var _getChartMetadataRegi, _getChartMetadataRegi2;return (_getChartMetadataRegi = (_getChartMetadataRegi2 = getChartMetadataRegistry().get(this.props.chartType)) == null ? void 0 : _getChartMetadataRegi2.queryObjectCount) != null ? _getChartMetadataRegi : 1;};}\n  renderChart(width, height) {\n    const { id, className, chartType, preTransformProps, overrideTransformProps, postTransformProps, onRenderSuccess, onRenderFailure, disableErrorBoundary, FallbackComponent, onErrorBoundary, Wrapper, queriesData, enableNoResults, noResults, theme, ...rest } = this.props;\n    const chartProps = this.createChartProps({\n      ...rest,\n      queriesData,\n      height,\n      width,\n      theme });\n\n    let chart;\n    // Render the no results component if the query data is null or empty\n    const noResultQueries = enableNoResults && (\n    !queriesData ||\n    queriesData.\n    slice(0, this.getQueryCount()).\n    every((_ref4) => {let { data } = _ref4;return !data || Array.isArray(data) && data.length === 0;}));\n    if (noResultQueries) {\n      chart = noResults || ___EmotionJSX(NoResultsComponent, { id: id, className: className, height: height, width: width });\n    } else\n    {\n      const chartWithoutWrapper = ___EmotionJSX(SuperChartCore, { ref: this.setRef, id: id, className: className, chartType: chartType, chartProps: chartProps, preTransformProps: preTransformProps, overrideTransformProps: overrideTransformProps, postTransformProps: postTransformProps, onRenderSuccess: onRenderSuccess, onRenderFailure: onRenderFailure });\n      chart = Wrapper ? ___EmotionJSX(Wrapper, { width: width, height: height },\n      chartWithoutWrapper) :\n      chartWithoutWrapper;\n    }\n    // Include the error boundary by default unless it is specifically disabled.\n    return disableErrorBoundary === true ? chart : ___EmotionJSX(ErrorBoundary, { FallbackComponent: (props) => ___EmotionJSX(FallbackComponent, _extends({ width: width, height: height }, props)), onError: onErrorBoundary },\n    chart);\n\n  }\n  render() {\n    const { heightInfo, widthInfo, BoundingBox } = this.parseDimension(this.props);\n    // If any of the dimension is dynamic, get parent's dimension\n    if (widthInfo.isDynamic || heightInfo.isDynamic) {\n      const { debounceTime } = this.props;\n      return ___EmotionJSX(BoundingBox, null,\n      ___EmotionJSX(ParentSize, { debounceTime: debounceTime },\n      (_ref5) => {let { width, height } = _ref5;return this.renderChart(widthInfo.isDynamic ? Math.floor(width) : widthInfo.value, heightInfo.isDynamic ? Math.floor(height) : heightInfo.value);}));\n\n\n    }\n    return this.renderChart(widthInfo.value, heightInfo.value);\n  }}SuperChart.defaultProps = defaultProps;\n\nexport default withTheme(SuperChart);","map":{"version":3,"mappings":"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","names":["React","ErrorBoundary","ParentSize","createSelector","withTheme","parseLength","getChartMetadataRegistry","SuperChartCore","DefaultFallbackComponent","ChartProps","NoResultsComponent","defaultProps","FallbackComponent","height","width","enableNoResults","SuperChart","PureComponent","core","createChartProps","parseDimension","widthInfo","heightInfo","boxHeight","isDynamic","multiplier","value","boxWidth","style","BoundingBox","Fragment","children","setRef","getQueryCount","get","props","chartType","queryObjectCount","renderChart","id","className","preTransformProps","overrideTransformProps","postTransformProps","onRenderSuccess","onRenderFailure","disableErrorBoundary","onErrorBoundary","Wrapper","queriesData","noResults","theme","rest","chartProps","chart","noResultQueries","slice","every","data","Array","isArray","length","chartWithoutWrapper","render","debounceTime","Math","floor"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/packages/superset-ui-core/src/chart/components/SuperChart.tsx"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { ReactNode, RefObject } from 'react';\nimport ErrorBoundary, {\n  ErrorBoundaryProps,\n  FallbackProps,\n} from 'react-error-boundary';\nimport { ParentSize } from '@vx/responsive';\nimport { createSelector } from 'reselect';\nimport { withTheme } from '@emotion/react';\nimport { parseLength, Dimension } from '../../dimension';\nimport getChartMetadataRegistry from '../registries/ChartMetadataRegistrySingleton';\nimport SuperChartCore, { Props as SuperChartCoreProps } from './SuperChartCore';\nimport DefaultFallbackComponent from './FallbackComponent';\nimport ChartProps, { ChartPropsConfig } from '../models/ChartProps';\nimport NoResultsComponent from './NoResultsComponent';\n\nconst defaultProps = {\n  FallbackComponent: DefaultFallbackComponent,\n  height: 400 as string | number,\n  width: '100%' as string | number,\n  enableNoResults: true,\n};\n\nexport type FallbackPropsWithDimension = FallbackProps & Partial<Dimension>;\n\nexport type WrapperProps = Dimension & {\n  children: ReactNode;\n};\n\nexport type Props = Omit<SuperChartCoreProps, 'chartProps'> &\n  Omit<ChartPropsConfig, 'width' | 'height'> & {\n    /**\n     * Set this to true to disable error boundary built-in in SuperChart\n     * and let the error propagate to upper level\n     * and handle by yourself\n     */\n    disableErrorBoundary?: boolean;\n    /** debounceTime to check for container resize */\n    debounceTime?: number;\n    /** enable \"No Results\" message if empty result set */\n    enableNoResults?: boolean;\n    /** Component to render when there are unexpected errors */\n    FallbackComponent?: React.ComponentType<FallbackPropsWithDimension>;\n    /** Event listener for unexpected errors from chart */\n    onErrorBoundary?: ErrorBoundaryProps['onError'];\n    /** Prop for form plugins using superchart */\n    showOverflow?: boolean;\n    /** Prop for popovercontainer ref */\n    parentRef?: RefObject<any>;\n    /** Prop for chart ref */\n    inputRef?: RefObject<any>;\n    /** Chart width */\n    height?: number | string;\n    /** Chart height */\n    width?: number | string;\n    /**\n     * Component to wrap the actual chart\n     * after the dynamic width and height are determined.\n     * This can be useful for handling tooltip z-index, etc.\n     * e.g. <div style={{ position: 'fixed' }} />\n     * You cannot just wrap this same component outside of SuperChart\n     * when using dynamic width or height\n     * because it will clash with auto-sizing.\n     */\n    Wrapper?: React.ComponentType<WrapperProps>;\n    /**\n     * Component to display when query returns no results.\n     * If not defined, NoResultsComponent is used\n     */\n    noResults?: ReactNode;\n    /**\n     * Determines is the context menu related to the chart is open\n     */\n    inContextMenu?: boolean;\n  };\n\ntype PropsWithDefault = Props & Readonly<typeof defaultProps>;\n\nclass SuperChart extends React.PureComponent<Props, {}> {\n  /**\n   * SuperChart's core\n   */\n  core?: SuperChartCore | null;\n\n  private createChartProps = ChartProps.createSelector();\n\n  private parseDimension = createSelector(\n    [\n      ({ width }: { width: string | number; height: string | number }) => width,\n      ({ height }) => height,\n    ],\n    (width, height) => {\n      // Parse them in case they are % or 'auto'\n      const widthInfo = parseLength(width);\n      const heightInfo = parseLength(height);\n\n      const boxHeight = heightInfo.isDynamic\n        ? `${heightInfo.multiplier * 100}%`\n        : heightInfo.value;\n      const boxWidth = widthInfo.isDynamic\n        ? `${widthInfo.multiplier * 100}%`\n        : widthInfo.value;\n      const style = {\n        height: boxHeight,\n        width: boxWidth,\n      };\n\n      // bounding box will ensure that when one dimension is not dynamic\n      // e.g. height = 300\n      // the auto size will be bound to that value instead of being 100% by default\n      // e.g. height: 300 instead of height: '100%'\n      const BoundingBox =\n        widthInfo.isDynamic &&\n        heightInfo.isDynamic &&\n        widthInfo.multiplier === 1 &&\n        heightInfo.multiplier === 1\n          ? React.Fragment\n          : ({ children }: { children: ReactNode }) => (\n              <div style={style}>{children}</div>\n            );\n\n      return { BoundingBox, heightInfo, widthInfo };\n    },\n  );\n\n  static defaultProps = defaultProps;\n\n  private setRef = (core: SuperChartCore | null) => {\n    this.core = core;\n  };\n\n  private getQueryCount = () =>\n    getChartMetadataRegistry().get(this.props.chartType)?.queryObjectCount ?? 1;\n\n  renderChart(width: number, height: number) {\n    const {\n      id,\n      className,\n      chartType,\n      preTransformProps,\n      overrideTransformProps,\n      postTransformProps,\n      onRenderSuccess,\n      onRenderFailure,\n      disableErrorBoundary,\n      FallbackComponent,\n      onErrorBoundary,\n      Wrapper,\n      queriesData,\n      enableNoResults,\n      noResults,\n      theme,\n      ...rest\n    } = this.props as PropsWithDefault;\n\n    const chartProps = this.createChartProps({\n      ...rest,\n      queriesData,\n      height,\n      width,\n      theme,\n    });\n\n    let chart;\n    // Render the no results component if the query data is null or empty\n    const noResultQueries =\n      enableNoResults &&\n      (!queriesData ||\n        queriesData\n          .slice(0, this.getQueryCount())\n          .every(\n            ({ data }) => !data || (Array.isArray(data) && data.length === 0),\n          ));\n    if (noResultQueries) {\n      chart = noResults || (\n        <NoResultsComponent\n          id={id}\n          className={className}\n          height={height}\n          width={width}\n        />\n      );\n    } else {\n      const chartWithoutWrapper = (\n        <SuperChartCore\n          ref={this.setRef}\n          id={id}\n          className={className}\n          chartType={chartType}\n          chartProps={chartProps}\n          preTransformProps={preTransformProps}\n          overrideTransformProps={overrideTransformProps}\n          postTransformProps={postTransformProps}\n          onRenderSuccess={onRenderSuccess}\n          onRenderFailure={onRenderFailure}\n        />\n      );\n      chart = Wrapper ? (\n        <Wrapper width={width} height={height}>\n          {chartWithoutWrapper}\n        </Wrapper>\n      ) : (\n        chartWithoutWrapper\n      );\n    }\n    // Include the error boundary by default unless it is specifically disabled.\n    return disableErrorBoundary === true ? (\n      chart\n    ) : (\n      <ErrorBoundary\n        FallbackComponent={(props: FallbackProps) => (\n          <FallbackComponent width={width} height={height} {...props} />\n        )}\n        onError={onErrorBoundary}\n      >\n        {chart}\n      </ErrorBoundary>\n    );\n  }\n\n  render() {\n    const { heightInfo, widthInfo, BoundingBox } = this.parseDimension(\n      this.props as PropsWithDefault,\n    );\n\n    // If any of the dimension is dynamic, get parent's dimension\n    if (widthInfo.isDynamic || heightInfo.isDynamic) {\n      const { debounceTime } = this.props;\n\n      return (\n        <BoundingBox>\n          <ParentSize debounceTime={debounceTime}>\n            {({ width, height }) =>\n              this.renderChart(\n                widthInfo.isDynamic ? Math.floor(width) : widthInfo.value,\n                heightInfo.isDynamic ? Math.floor(height) : heightInfo.value,\n              )\n            }\n          </ParentSize>\n        </BoundingBox>\n      );\n    }\n\n    return this.renderChart(widthInfo.value, heightInfo.value);\n  }\n}\n\nexport default withTheme(SuperChart);\n"]},"metadata":{},"sourceType":"module"}