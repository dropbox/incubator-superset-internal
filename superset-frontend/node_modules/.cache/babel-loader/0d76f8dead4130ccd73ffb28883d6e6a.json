{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useLayoutEffect } from 'react';\nimport { css, styled } from '@superset-ui/core';\nimport { Tooltip } from './Tooltip';\nimport { ColumnTypeLabel } from './ColumnTypeLabel/ColumnTypeLabel';\nimport CertifiedIconWithTooltip from './CertifiedIconWithTooltip';\nimport { getColumnLabelText, getColumnTooltipNode, getColumnTypeTooltipNode } from './labelUtils';\nimport { SQLPopover } from './SQLPopover';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst StyleOverrides = styled.span`\n  display: flex;\n  align-items: center;\n  svg {\n    margin-right: ${(_ref) => {let { theme } = _ref;return theme.gridUnit;}}px;\n  }\n`;\nexport function ColumnOption(_ref2) {let { column, labelRef, showType = false } = _ref2;\n  const { expression, column_name, type_generic } = column;\n  const hasExpression = expression && expression !== column_name;\n  const type = hasExpression ? 'expression' : type_generic;\n  const [tooltipText, setTooltipText] = useState(column.column_name);\n  const [columnTypeTooltipText, setcolumnTypeTooltipText] = useState(column.type);\n  useLayoutEffect(() => {\n    setTooltipText(getColumnTooltipNode(column, labelRef));\n    setcolumnTypeTooltipText(getColumnTypeTooltipNode(column));\n  }, [labelRef, column]);\n  return ___EmotionJSX(StyleOverrides, null,\n  showType && type !== undefined && ___EmotionJSX(Tooltip, { id: \"metric-type-tooltip\", title: columnTypeTooltipText, placement: \"bottomRight\", align: { offset: [8, -2] } },\n  ___EmotionJSX(\"span\", null,\n  ___EmotionJSX(ColumnTypeLabel, { type: type }))),\n\n\n  ___EmotionJSX(Tooltip, { id: \"metric-name-tooltip\", title: tooltipText },\n  ___EmotionJSX(\"span\", { className: \"option-label column-option-label\", css: (theme) => css`\n            margin-right: ${theme.gridUnit}px;\n          `, ref: labelRef },\n  getColumnLabelText(column))),\n\n\n  hasExpression && ___EmotionJSX(SQLPopover, { sqlExpression: expression }),\n  column.is_certified && ___EmotionJSX(CertifiedIconWithTooltip, { metricName: column.metric_name, certifiedBy: column.certified_by, details: column.certification_details }));\n\n}\nexport default ColumnOption;","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,KAAP,IAAgBC,QAAhB,EAAqCC,eAArC,QAA4D,OAA5D;AACA,SAASC,GAAT,EAAcC,MAAd,QAA2C,mBAA3C;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,eAAT,QAAgC,mCAAhC;AACA,OAAOC,wBAAP,MAAqC,4BAArC;AAEA,SACEC,kBADF,EAEEC,oBAFF,EAGEC,wBAHF,QAIO,cAJP;AAKA,SAASC,UAAT,QAA2B,cAA3B,C;AAQA,MAAMC,cAAc,GAAGR,MAAM,CAACS,IAAI;;;;oBAId,eAAC,EAAEC,KAAF,EAAD,eAAeA,KAAK,CAACC,QAArB,EAA6B;;CAJjD;AAQA,OAAM,SAAUC,YAAV,QAIc,KAJS,EAC3BC,MAD2B,EAE3BC,QAF2B,EAG3BC,QAAQ,GAAG,KAHgB,EAIT;EAClB,MAAM,EAAEC,UAAF,EAAcC,WAAd,EAA2BC,YAA3B,KAA4CL,MAAlD;EACA,MAAMM,aAAa,GAAGH,UAAU,IAAIA,UAAU,KAAKC,WAAnD;EACA,MAAMG,IAAI,GAAGD,aAAa,GAAG,YAAH,GAAkBD,YAA5C;EACA,MAAM,CAACG,WAAD,EAAcC,cAAd,IAAgCzB,QAAQ,CAAYgB,MAAM,CAACI,WAAnB,CAA9C;EACA,MAAM,CAACM,qBAAD,EAAwBC,wBAAxB,IAAoD3B,QAAQ,CAChEgB,MAAM,CAACO,IADyD,CAAlE;EAIAtB,eAAe,CAAC,MAAK;IACnBwB,cAAc,CAACjB,oBAAoB,CAACQ,MAAD,EAASC,QAAT,CAArB,CAAd;IACAU,wBAAwB,CAAClB,wBAAwB,CAACO,MAAD,CAAzB,CAAxB;EACD,CAHc,EAGZ,CAACC,QAAD,EAAWD,MAAX,CAHY,CAAf;EAKA,OACE,cAAC,cAAD;EACGE,QAAQ,IAAIK,IAAI,KAAKK,SAArB,IACC,cAAC,OAAD,IACE,EAAE,EAAC,qBADL,EAEE,KAAK,EAAEF,qBAFT,EAGE,SAAS,EAAC,aAHZ,EAIE,KAAK,EAAE,EAAEG,MAAM,EAAE,CAAC,CAAD,EAAI,CAAC,CAAL,CAAV,EAJT;EAME;EACE,cAAC,eAAD,IAAiB,IAAI,EAAEN,IAAvB,GADF,CANF,CAFJ;;;EAaE,cAAC,OAAD,IAAS,EAAE,EAAC,qBAAZ,EAAkC,KAAK,EAAEC,WAAzC;EACE,wBACE,SAAS,EAAC,kCADZ,EAEE,GAAG,EAAE,CAACX,KAAD,KAA0BX,GAAG;4BAChBW,KAAK,CAACC,QAAQ;WAHlC,EAKE,GAAG,EAAEG,QALP;EAOGV,kBAAkB,CAACS,MAAD,CAPrB,CADF,CAbF;;;EAwBGM,aAAa,IAAI,cAAC,UAAD,IAAY,aAAa,EAAEH,UAA3B,GAxBpB;EAyBGH,MAAM,CAACc,YAAP,IACC,cAAC,wBAAD,IACE,UAAU,EAAEd,MAAM,CAACe,WADrB,EAEE,WAAW,EAAEf,MAAM,CAACgB,YAFtB,EAGE,OAAO,EAAEhB,MAAM,CAACiB,qBAHlB,GA1BJ,CADF;;AAmCD;AAED,eAAelB,YAAf","names":["React","useState","useLayoutEffect","css","styled","Tooltip","ColumnTypeLabel","CertifiedIconWithTooltip","getColumnLabelText","getColumnTooltipNode","getColumnTypeTooltipNode","SQLPopover","StyleOverrides","span","theme","gridUnit","ColumnOption","column","labelRef","showType","expression","column_name","type_generic","hasExpression","type","tooltipText","setTooltipText","columnTypeTooltipText","setcolumnTypeTooltipText","undefined","offset","is_certified","metric_name","certified_by","certification_details"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/packages/superset-ui-chart-controls/src/components/ColumnOption.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, ReactNode, useLayoutEffect } from 'react';\nimport { css, styled, SupersetTheme } from '@superset-ui/core';\nimport { Tooltip } from './Tooltip';\nimport { ColumnTypeLabel } from './ColumnTypeLabel/ColumnTypeLabel';\nimport CertifiedIconWithTooltip from './CertifiedIconWithTooltip';\nimport { ColumnMeta } from '../types';\nimport {\n  getColumnLabelText,\n  getColumnTooltipNode,\n  getColumnTypeTooltipNode,\n} from './labelUtils';\nimport { SQLPopover } from './SQLPopover';\n\nexport type ColumnOptionProps = {\n  column: ColumnMeta;\n  showType?: boolean;\n  labelRef?: React.RefObject<any>;\n};\n\nconst StyleOverrides = styled.span`\n  display: flex;\n  align-items: center;\n  svg {\n    margin-right: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n\nexport function ColumnOption({\n  column,\n  labelRef,\n  showType = false,\n}: ColumnOptionProps) {\n  const { expression, column_name, type_generic } = column;\n  const hasExpression = expression && expression !== column_name;\n  const type = hasExpression ? 'expression' : type_generic;\n  const [tooltipText, setTooltipText] = useState<ReactNode>(column.column_name);\n  const [columnTypeTooltipText, setcolumnTypeTooltipText] = useState<ReactNode>(\n    column.type,\n  );\n\n  useLayoutEffect(() => {\n    setTooltipText(getColumnTooltipNode(column, labelRef));\n    setcolumnTypeTooltipText(getColumnTypeTooltipNode(column));\n  }, [labelRef, column]);\n\n  return (\n    <StyleOverrides>\n      {showType && type !== undefined && (\n        <Tooltip\n          id=\"metric-type-tooltip\"\n          title={columnTypeTooltipText}\n          placement=\"bottomRight\"\n          align={{ offset: [8, -2] }}\n        >\n          <span>\n            <ColumnTypeLabel type={type} />\n          </span>\n        </Tooltip>\n      )}\n      <Tooltip id=\"metric-name-tooltip\" title={tooltipText}>\n        <span\n          className=\"option-label column-option-label\"\n          css={(theme: SupersetTheme) => css`\n            margin-right: ${theme.gridUnit}px;\n          `}\n          ref={labelRef}\n        >\n          {getColumnLabelText(column)}\n        </span>\n      </Tooltip>\n      {hasExpression && <SQLPopover sqlExpression={expression} />}\n      {column.is_certified && (\n        <CertifiedIconWithTooltip\n          metricName={column.metric_name}\n          certifiedBy={column.certified_by}\n          details={column.certification_details}\n        />\n      )}\n    </StyleOverrides>\n  );\n}\n\nexport default ColumnOption;\n"]},"metadata":{},"sourceType":"module"}