{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t, validateNonEmpty } from '@superset-ui/core';\nimport { getStandardizedControls, sections } from '@superset-ui/chart-controls';\nconst config = {\n  controlPanelSections: [\n  sections.legacyRegularTime,\n  {\n    label: t('Query'),\n    expanded: true,\n    controlSetRows: [\n    ['series'],\n    ['metric'],\n    ['adhoc_filters'],\n    ['row_limit'],\n    [\n    {\n      name: 'sort_by_metric',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Sort by metric'),\n        description: t('Whether to sort results by the selected metric in descending order.') } }]] },\n\n\n\n\n\n  {\n    label: t('Options'),\n    expanded: true,\n    controlSetRows: [\n    [\n    {\n      name: 'size_from',\n      config: {\n        type: 'TextControl',\n        isInt: true,\n        label: t('Minimum Font Size'),\n        renderTrigger: true,\n        default: 10,\n        description: t('Font size for the smallest value in the list') } },\n\n\n    {\n      name: 'size_to',\n      config: {\n        type: 'TextControl',\n        isInt: true,\n        label: t('Maximum Font Size'),\n        renderTrigger: true,\n        default: 70,\n        description: t('Font size for the biggest value in the list') } }],\n\n\n\n    [\n    {\n      name: 'rotation',\n      config: {\n        type: 'SelectControl',\n        label: t('Word Rotation'),\n        choices: [\n        ['random', t('random')],\n        ['flat', t('flat')],\n        ['square', t('square')]],\n\n        renderTrigger: true,\n        default: 'square',\n        clearable: false,\n        description: t('Rotation to apply to words in the cloud') } }],\n\n\n\n    ['color_scheme']] }],\n\n\n\n  controlOverrides: {\n    series: {\n      validators: [validateNonEmpty],\n      clearable: false },\n\n    row_limit: {\n      default: 100 } },\n\n\n  formDataOverrides: (formData) => ({\n    ...formData,\n    series: getStandardizedControls().shiftColumn(),\n    metric: getStandardizedControls().shiftMetric() }) };\n\n\nexport default config;","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,SAASA,CAAT,EAAYC,gBAAZ,QAAoC,mBAApC;AACA,SAEEC,uBAFF,EAGEC,QAHF,QAIO,6BAJP;AAMA,MAAMC,MAAM,GAAuB;EACjCC,oBAAoB,EAAE;EACpBF,QAAQ,CAACG,iBADW;EAEpB;IACEC,KAAK,EAAEP,CAAC,CAAC,OAAD,CADV;IAEEQ,QAAQ,EAAE,IAFZ;IAGEC,cAAc,EAAE;IACd,CAAC,QAAD,CADc;IAEd,CAAC,QAAD,CAFc;IAGd,CAAC,eAAD,CAHc;IAId,CAAC,WAAD,CAJc;IAKd;IACE;MACEC,IAAI,EAAE,gBADR;MAEEN,MAAM,EAAE;QACNO,IAAI,EAAE,iBADA;QAENJ,KAAK,EAAEP,CAAC,CAAC,gBAAD,CAFF;QAGNY,WAAW,EAAEZ,CAAC,CACZ,qEADY,CAHR,EAFV,EADF,CALc,CAHlB,EAFoB;;;;;;EAwBpB;IACEO,KAAK,EAAEP,CAAC,CAAC,SAAD,CADV;IAEEQ,QAAQ,EAAE,IAFZ;IAGEC,cAAc,EAAE;IACd;IACE;MACEC,IAAI,EAAE,WADR;MAEEN,MAAM,EAAE;QACNO,IAAI,EAAE,aADA;QAENE,KAAK,EAAE,IAFD;QAGNN,KAAK,EAAEP,CAAC,CAAC,mBAAD,CAHF;QAINc,aAAa,EAAE,IAJT;QAKNC,OAAO,EAAE,EALH;QAMNH,WAAW,EAAEZ,CAAC,CAAC,8CAAD,CANR,EAFV,EADF;;;IAYE;MACEU,IAAI,EAAE,SADR;MAEEN,MAAM,EAAE;QACNO,IAAI,EAAE,aADA;QAENE,KAAK,EAAE,IAFD;QAGNN,KAAK,EAAEP,CAAC,CAAC,mBAAD,CAHF;QAINc,aAAa,EAAE,IAJT;QAKNC,OAAO,EAAE,EALH;QAMNH,WAAW,EAAEZ,CAAC,CAAC,6CAAD,CANR,EAFV,EAZF,CADc;;;;IAyBd;IACE;MACEU,IAAI,EAAE,UADR;MAEEN,MAAM,EAAE;QACNO,IAAI,EAAE,eADA;QAENJ,KAAK,EAAEP,CAAC,CAAC,eAAD,CAFF;QAGNgB,OAAO,EAAE;QACP,CAAC,QAAD,EAAWhB,CAAC,CAAC,QAAD,CAAZ,CADO;QAEP,CAAC,MAAD,EAASA,CAAC,CAAC,MAAD,CAAV,CAFO;QAGP,CAAC,QAAD,EAAWA,CAAC,CAAC,QAAD,CAAZ,CAHO,CAHH;;QAQNc,aAAa,EAAE,IART;QASNC,OAAO,EAAE,QATH;QAUNE,SAAS,EAAE,KAVL;QAWNL,WAAW,EAAEZ,CAAC,CAAC,yCAAD,CAXR,EAFV,EADF,CAzBc;;;;IA2Cd,CAAC,cAAD,CA3Cc,CAHlB,EAxBoB,CADW;;;;EA2EjCkB,gBAAgB,EAAE;IAChBC,MAAM,EAAE;MACNC,UAAU,EAAE,CAACnB,gBAAD,CADN;MAENgB,SAAS,EAAE,KAFL,EADQ;;IAKhBI,SAAS,EAAE;MACTN,OAAO,EAAE,GADA,EALK,EA3Ee;;;EAoFjCO,iBAAiB,EAAE,SAAQ,MAAK;IAC9B,GAAGC,QAD2B;IAE9BJ,MAAM,EAAEjB,uBAAuB,GAAGsB,WAA1B,EAFsB;IAG9BC,MAAM,EAAEvB,uBAAuB,GAAGwB,WAA1B,EAHsB,EAAL,CApFM,EAAnC;;;AA2FA,eAAetB,MAAf","names":["t","validateNonEmpty","getStandardizedControls","sections","config","controlPanelSections","legacyRegularTime","label","expanded","controlSetRows","name","type","description","isInt","renderTrigger","default","choices","clearable","controlOverrides","series","validators","row_limit","formDataOverrides","formData","shiftColumn","metric","shiftMetric"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-word-cloud/src/plugin/controlPanel.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t, validateNonEmpty } from '@superset-ui/core';\nimport {\n  ControlPanelConfig,\n  getStandardizedControls,\n  sections,\n} from '@superset-ui/chart-controls';\n\nconst config: ControlPanelConfig = {\n  controlPanelSections: [\n    sections.legacyRegularTime,\n    {\n      label: t('Query'),\n      expanded: true,\n      controlSetRows: [\n        ['series'],\n        ['metric'],\n        ['adhoc_filters'],\n        ['row_limit'],\n        [\n          {\n            name: 'sort_by_metric',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Sort by metric'),\n              description: t(\n                'Whether to sort results by the selected metric in descending order.',\n              ),\n            },\n          },\n        ],\n      ],\n    },\n    {\n      label: t('Options'),\n      expanded: true,\n      controlSetRows: [\n        [\n          {\n            name: 'size_from',\n            config: {\n              type: 'TextControl',\n              isInt: true,\n              label: t('Minimum Font Size'),\n              renderTrigger: true,\n              default: 10,\n              description: t('Font size for the smallest value in the list'),\n            },\n          },\n          {\n            name: 'size_to',\n            config: {\n              type: 'TextControl',\n              isInt: true,\n              label: t('Maximum Font Size'),\n              renderTrigger: true,\n              default: 70,\n              description: t('Font size for the biggest value in the list'),\n            },\n          },\n        ],\n        [\n          {\n            name: 'rotation',\n            config: {\n              type: 'SelectControl',\n              label: t('Word Rotation'),\n              choices: [\n                ['random', t('random')],\n                ['flat', t('flat')],\n                ['square', t('square')],\n              ],\n              renderTrigger: true,\n              default: 'square',\n              clearable: false,\n              description: t('Rotation to apply to words in the cloud'),\n            },\n          },\n        ],\n        ['color_scheme'],\n      ],\n    },\n  ],\n  controlOverrides: {\n    series: {\n      validators: [validateNonEmpty],\n      clearable: false,\n    },\n    row_limit: {\n      default: 100,\n    },\n  },\n  formDataOverrides: formData => ({\n    ...formData,\n    series: getStandardizedControls().shiftColumn(),\n    metric: getStandardizedControls().shiftMetric(),\n  }),\n};\n\nexport default config;\n"]},"metadata":{},"sourceType":"module"}