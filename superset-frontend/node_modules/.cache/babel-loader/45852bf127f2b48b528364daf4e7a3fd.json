{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with work for additional information\n * regarding copyright ownership.  The ASF licenses file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { ensureIsArray, GenericDataType, isAdhocMetricSimple, isSavedMetric, t, tn } from '@superset-ui/core';\nimport { withDndFallback } from '@superset-ui/chart-controls';\nimport AdhocMetric from 'src/explore/components/controls/MetricControl/AdhocMetric';\nimport AdhocMetricPopoverTrigger from 'src/explore/components/controls/MetricControl/AdhocMetricPopoverTrigger';\nimport MetricDefinitionValue from 'src/explore/components/controls/MetricControl/MetricDefinitionValue';\nimport { isDatasourcePanelDndItem } from 'src/explore/components/DatasourcePanel/types';\nimport { DndItemType } from 'src/explore/components/DndItemType';\nimport DndSelectLabel from 'src/explore/components/controls/DndColumnSelectControl/DndSelectLabel';\nimport { AGGREGATES } from 'src/explore/constants';\nimport MetricsControl from '../MetricControl/MetricsControl';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst EMPTY_OBJECT = {};\nconst DND_ACCEPTED_TYPES = [DndItemType.Column, DndItemType.Metric];\nconst isDictionaryForAdhocMetric = (value) => value &&\n!(value instanceof AdhocMetric) &&\ntypeof value !== 'string' &&\nvalue.expressionType;\nconst coerceMetrics = (addedMetrics, savedMetrics, columns) => {\n  if (!addedMetrics) {\n    return [];\n  }\n  const metricsCompatibleWithDataset = ensureIsArray(addedMetrics).filter((metric) => {\n    if (isSavedMetric(metric)) {\n      return savedMetrics.some((savedMetric) => savedMetric.metric_name === metric);\n    }\n    if (isAdhocMetricSimple(metric)) {\n      return columns.some((column) => column.column_name === metric.column.column_name);\n    }\n    return true;\n  });\n  return metricsCompatibleWithDataset.map((metric) => {\n    if (!isDictionaryForAdhocMetric(metric)) {\n      return metric;\n    }\n    if (isAdhocMetricSimple(metric)) {\n      const column = columns.find((col) => col.column_name === metric.column.column_name);\n      if (column) {\n        return new AdhocMetric({ ...metric, column });\n      }\n    }\n    return new AdhocMetric(metric);\n  });\n};\nconst getOptionsForSavedMetrics = (savedMetrics, currentMetricValues, currentMetric) => {var _savedMetrics$filter;return (_savedMetrics$filter = savedMetrics == null ? void 0 : savedMetrics.filter((savedMetric) => {var _savedMetric$metric_n;return Array.isArray(currentMetricValues) ?\n    !_includesInstanceProperty(currentMetricValues).call(currentMetricValues, (_savedMetric$metric_n = savedMetric.metric_name) != null ? _savedMetric$metric_n : '') ||\n    savedMetric.metric_name === currentMetric :\n    savedMetric;})) != null ? _savedMetrics$filter : [];};\nconst DndMetricSelect = (props) => {\n  const { onChange, multi } = props;\n  const handleChange = useCallback((opts) => {\n    // if clear out options\n    if (opts === null) {\n      onChange(null);\n      return;\n    }\n    const transformedOpts = ensureIsArray(opts);\n    const optionValues = transformedOpts.\n    map((option) => {\n      // pre-defined metric\n      if (option.metric_name) {\n        return option.metric_name;\n      }\n      return option;\n    }).\n    filter((option) => option);\n    onChange(multi ? optionValues : optionValues[0]);\n  }, [multi, onChange]);\n  const [value, setValue] = useState(coerceMetrics(props.value, props.savedMetrics, props.columns));\n  const [droppedItem, setDroppedItem] = useState({});\n  const [newMetricPopoverVisible, setNewMetricPopoverVisible] = useState(false);\n  useEffect(() => {\n    setValue(coerceMetrics(props.value, props.savedMetrics, props.columns));\n  }, [\n  JSON.stringify(props.value),\n  JSON.stringify(props.savedMetrics),\n  JSON.stringify(props.columns)]);\n\n  const canDrop = useCallback((item) => {\n    const isMetricAlreadyInValues = item.type === 'metric' ? _includesInstanceProperty(value).call(value, item.value.metric_name) : false;\n    return !isMetricAlreadyInValues;\n  }, [value]);\n  const onNewMetric = useCallback((newMetric) => {\n    const newValue = props.multi ? [...value, newMetric] : [newMetric];\n    setValue(newValue);\n    handleChange(newValue);\n  }, [handleChange, props.multi, value]);\n  const onMetricEdit = useCallback((changedMetric, oldMetric) => {\n    if (oldMetric instanceof AdhocMetric && oldMetric.equals(changedMetric)) {\n      return;\n    }\n    const newValue = value.map((value) => {\n      if (\n      // compare saved metrics\n      'metric_name' in oldMetric && value === oldMetric.metric_name ||\n      // compare adhoc metrics\n      typeof value.optionName !== 'undefined' ?\n      value.optionName ===\n      oldMetric.optionName :\n      false) {\n        return changedMetric;\n      }\n      return value;\n    });\n    setValue(newValue);\n    handleChange(newValue);\n  }, [handleChange, value]);\n  const onRemoveMetric = useCallback((index) => {\n    if (!Array.isArray(value)) {\n      return;\n    }\n    const valuesCopy = [...value];\n    valuesCopy.splice(index, 1);\n    setValue(valuesCopy);\n    handleChange(valuesCopy);\n  }, [handleChange, value]);\n  const moveLabel = useCallback((dragIndex, hoverIndex) => {\n    const newValues = [...value];\n    [newValues[hoverIndex], newValues[dragIndex]] = [\n    newValues[dragIndex],\n    newValues[hoverIndex]];\n\n    setValue(newValues);\n  }, [value]);\n  const newSavedMetricOptions = useMemo(() => getOptionsForSavedMetrics(props.savedMetrics, props.value), [props.savedMetrics, props.value]);\n  const getSavedMetricOptionsForMetric = useCallback((index) => {var _props$value;return getOptionsForSavedMetrics(props.savedMetrics, props.value, (_props$value = props.value) == null ? void 0 : _props$value[index]);}, [props.savedMetrics, props.value]);\n  const handleDropLabel = useCallback(() => onChange(multi ? value : value[0]), [multi, onChange, value]);\n  const valueRenderer = useCallback((option, index) => ___EmotionJSX(MetricDefinitionValue, { key: index, index: index, option: option, onMetricEdit: onMetricEdit, onRemoveMetric: onRemoveMetric, columns: props.columns, savedMetrics: props.savedMetrics, savedMetricsOptions: getSavedMetricOptionsForMetric(index), datasource: props.datasource, onMoveLabel: moveLabel, onDropLabel: handleDropLabel, type: `${DndItemType.AdhocMetricOption}_${props.name}_${props.label}`, multi: multi, datasourceWarningMessage: option instanceof AdhocMetric && option.datasourceWarning ?\n    t('This metric might be incompatible with current dataset') :\n    undefined }), [\n  getSavedMetricOptionsForMetric,\n  handleDropLabel,\n  moveLabel,\n  multi,\n  onMetricEdit,\n  onRemoveMetric,\n  props.columns,\n  props.datasource,\n  props.label,\n  props.name,\n  props.savedMetrics]);\n\n  const valuesRenderer = useCallback(() => value.map((value, index) => valueRenderer(value, index)), [value, valueRenderer]);\n  const togglePopover = useCallback((visible) => {\n    setNewMetricPopoverVisible(visible);\n  }, []);\n  const closePopover = useCallback(() => {\n    togglePopover(false);\n  }, [togglePopover]);\n  const handleDrop = useCallback((item) => {\n    if (item.type === DndItemType.Metric) {\n      onNewMetric(item.value);\n    }\n    if (item.type === DndItemType.Column) {\n      setDroppedItem(item);\n      togglePopover(true);\n    }\n  }, [onNewMetric, togglePopover]);\n  const handleClickGhostButton = useCallback(() => {\n    setDroppedItem({});\n    togglePopover(true);\n  }, [togglePopover]);\n  const adhocMetric = useMemo(() => {\n    if (isDatasourcePanelDndItem(droppedItem) &&\n    droppedItem.type === DndItemType.Column) {\n      const itemValue = droppedItem.value;\n      const config = {\n        column: itemValue };\n\n      if (itemValue.type_generic === GenericDataType.NUMERIC) {\n        config.aggregate = AGGREGATES.SUM;\n      } else\n      if (itemValue.type_generic === GenericDataType.STRING ||\n      itemValue.type_generic === GenericDataType.BOOLEAN ||\n      itemValue.type_generic === GenericDataType.TEMPORAL) {\n        config.aggregate = AGGREGATES.COUNT_DISTINCT;\n      }\n      return new AdhocMetric(config);\n    }\n    return new AdhocMetric({});\n  }, [droppedItem]);\n  const ghostButtonText = tn('Drop a column/metric here or click', 'Drop columns/metrics here or click', multi ? 2 : 1);\n  return ___EmotionJSX(\"div\", { className: \"metrics-select\" },\n  ___EmotionJSX(DndSelectLabel, _extends({ onDrop: handleDrop, canDrop: canDrop, valuesRenderer: valuesRenderer, accept: DND_ACCEPTED_TYPES, ghostButtonText: ghostButtonText, displayGhostButton: multi || value.length === 0, onClickGhostButton: handleClickGhostButton }, props)),\n  ___EmotionJSX(AdhocMetricPopoverTrigger, { adhocMetric: adhocMetric, onMetricEdit: onNewMetric, columns: props.columns, savedMetricsOptions: newSavedMetricOptions, savedMetric: EMPTY_OBJECT, datasource: props.datasource, isControlledComponent: true, visible: newMetricPopoverVisible, togglePopover: togglePopover, closePopover: closePopover, isNew: true },\n  ___EmotionJSX(\"div\", null)));\n\n\n};__signature__(DndMetricSelect, \"useCallback{handleChange}\\nuseState{[value, setValue](coerceMetrics(props.value, props.savedMetrics, props.columns))}\\nuseState{[droppedItem, setDroppedItem]({})}\\nuseState{[newMetricPopoverVisible, setNewMetricPopoverVisible](false)}\\nuseEffect{}\\nuseCallback{canDrop}\\nuseCallback{onNewMetric}\\nuseCallback{onMetricEdit}\\nuseCallback{onRemoveMetric}\\nuseCallback{moveLabel}\\nuseMemo{newSavedMetricOptions}\\nuseCallback{getSavedMetricOptionsForMetric}\\nuseCallback{handleDropLabel}\\nuseCallback{valueRenderer}\\nuseCallback{valuesRenderer}\\nuseCallback{togglePopover}\\nuseCallback{closePopover}\\nuseCallback{handleDrop}\\nuseCallback{handleClickGhostButton}\\nuseMemo{adhocMetric}\");\nconst DndMetricSelectWithFallback = withDndFallback(DndMetricSelect, MetricsControl);\nexport { DndMetricSelectWithFallback as DndMetricSelect };;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(EMPTY_OBJECT, \"EMPTY_OBJECT\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndMetricSelect.tsx\");reactHotLoader.register(DND_ACCEPTED_TYPES, \"DND_ACCEPTED_TYPES\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndMetricSelect.tsx\");reactHotLoader.register(isDictionaryForAdhocMetric, \"isDictionaryForAdhocMetric\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndMetricSelect.tsx\");reactHotLoader.register(coerceMetrics, \"coerceMetrics\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndMetricSelect.tsx\");reactHotLoader.register(getOptionsForSavedMetrics, \"getOptionsForSavedMetrics\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndMetricSelect.tsx\");reactHotLoader.register(DndMetricSelect, \"DndMetricSelect\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndMetricSelect.tsx\");reactHotLoader.register(DndMetricSelectWithFallback, \"DndMetricSelectWithFallback\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndMetricSelect.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"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","names":["React","useCallback","useEffect","useMemo","useState","ensureIsArray","GenericDataType","isAdhocMetricSimple","isSavedMetric","t","tn","withDndFallback","AdhocMetric","AdhocMetricPopoverTrigger","MetricDefinitionValue","isDatasourcePanelDndItem","DndItemType","DndSelectLabel","AGGREGATES","MetricsControl","EMPTY_OBJECT","DND_ACCEPTED_TYPES","Column","Metric","isDictionaryForAdhocMetric","value","expressionType","coerceMetrics","addedMetrics","savedMetrics","columns","metricsCompatibleWithDataset","filter","metric","some","savedMetric","metric_name","column","column_name","map","find","col","getOptionsForSavedMetrics","currentMetricValues","currentMetric","Array","isArray","DndMetricSelect","props","onChange","multi","handleChange","opts","transformedOpts","optionValues","option","setValue","droppedItem","setDroppedItem","newMetricPopoverVisible","setNewMetricPopoverVisible","JSON","stringify","canDrop","item","isMetricAlreadyInValues","type","onNewMetric","newMetric","newValue","onMetricEdit","changedMetric","oldMetric","equals","optionName","onRemoveMetric","index","valuesCopy","splice","moveLabel","dragIndex","hoverIndex","newValues","newSavedMetricOptions","getSavedMetricOptionsForMetric","handleDropLabel","valueRenderer","datasource","AdhocMetricOption","name","label","datasourceWarning","undefined","valuesRenderer","togglePopover","visible","closePopover","handleDrop","handleClickGhostButton","adhocMetric","itemValue","config","type_generic","NUMERIC","aggregate","SUM","STRING","BOOLEAN","TEMPORAL","COUNT_DISTINCT","ghostButtonText","length","DndMetricSelectWithFallback"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndMetricSelect.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with work for additional information\n * regarding copyright ownership.  The ASF licenses file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport {\n  ensureIsArray,\n  GenericDataType,\n  isAdhocMetricSimple,\n  isSavedMetric,\n  Metric,\n  QueryFormMetric,\n  t,\n  tn,\n} from '@superset-ui/core';\nimport { ColumnMeta, withDndFallback } from '@superset-ui/chart-controls';\nimport AdhocMetric from 'src/explore/components/controls/MetricControl/AdhocMetric';\nimport AdhocMetricPopoverTrigger from 'src/explore/components/controls/MetricControl/AdhocMetricPopoverTrigger';\nimport MetricDefinitionValue from 'src/explore/components/controls/MetricControl/MetricDefinitionValue';\nimport {\n  DatasourcePanelDndItem,\n  isDatasourcePanelDndItem,\n} from 'src/explore/components/DatasourcePanel/types';\nimport { DndItemType } from 'src/explore/components/DndItemType';\nimport DndSelectLabel from 'src/explore/components/controls/DndColumnSelectControl/DndSelectLabel';\nimport { savedMetricType } from 'src/explore/components/controls/MetricControl/types';\nimport { AGGREGATES } from 'src/explore/constants';\nimport MetricsControl from '../MetricControl/MetricsControl';\n\nconst EMPTY_OBJECT = {};\nconst DND_ACCEPTED_TYPES = [DndItemType.Column, DndItemType.Metric];\n\nconst isDictionaryForAdhocMetric = (value: QueryFormMetric) =>\n  value &&\n  !(value instanceof AdhocMetric) &&\n  typeof value !== 'string' &&\n  value.expressionType;\n\nconst coerceMetrics = (\n  addedMetrics: QueryFormMetric | QueryFormMetric[] | undefined | null,\n  savedMetrics: Metric[],\n  columns: ColumnMeta[],\n) => {\n  if (!addedMetrics) {\n    return [];\n  }\n  const metricsCompatibleWithDataset = ensureIsArray(addedMetrics).filter(\n    metric => {\n      if (isSavedMetric(metric)) {\n        return savedMetrics.some(\n          savedMetric => savedMetric.metric_name === metric,\n        );\n      }\n      if (isAdhocMetricSimple(metric)) {\n        return columns.some(\n          column => column.column_name === metric.column.column_name,\n        );\n      }\n      return true;\n    },\n  );\n\n  return metricsCompatibleWithDataset.map(metric => {\n    if (!isDictionaryForAdhocMetric(metric)) {\n      return metric;\n    }\n    if (isAdhocMetricSimple(metric)) {\n      const column = columns.find(\n        col => col.column_name === metric.column.column_name,\n      );\n      if (column) {\n        return new AdhocMetric({ ...metric, column });\n      }\n    }\n    return new AdhocMetric(metric);\n  });\n};\n\nconst getOptionsForSavedMetrics = (\n  savedMetrics: savedMetricType[],\n  currentMetricValues: (string | AdhocMetric)[],\n  currentMetric?: string,\n) =>\n  savedMetrics?.filter(savedMetric =>\n    Array.isArray(currentMetricValues)\n      ? !currentMetricValues.includes(savedMetric.metric_name ?? '') ||\n        savedMetric.metric_name === currentMetric\n      : savedMetric,\n  ) ?? [];\n\ntype ValueType = Metric | AdhocMetric | QueryFormMetric;\n\nconst DndMetricSelect = (props: any) => {\n  const { onChange, multi } = props;\n\n  const handleChange = useCallback(\n    opts => {\n      // if clear out options\n      if (opts === null) {\n        onChange(null);\n        return;\n      }\n\n      const transformedOpts = ensureIsArray(opts);\n      const optionValues = transformedOpts\n        .map(option => {\n          // pre-defined metric\n          if (option.metric_name) {\n            return option.metric_name;\n          }\n          return option;\n        })\n        .filter(option => option);\n      onChange(multi ? optionValues : optionValues[0]);\n    },\n    [multi, onChange],\n  );\n\n  const [value, setValue] = useState<ValueType[]>(\n    coerceMetrics(props.value, props.savedMetrics, props.columns),\n  );\n  const [droppedItem, setDroppedItem] = useState<\n    DatasourcePanelDndItem | typeof EMPTY_OBJECT\n  >({});\n  const [newMetricPopoverVisible, setNewMetricPopoverVisible] = useState(false);\n\n  useEffect(() => {\n    setValue(coerceMetrics(props.value, props.savedMetrics, props.columns));\n  }, [\n    JSON.stringify(props.value),\n    JSON.stringify(props.savedMetrics),\n    JSON.stringify(props.columns),\n  ]);\n\n  const canDrop = useCallback(\n    (item: DatasourcePanelDndItem) => {\n      const isMetricAlreadyInValues =\n        item.type === 'metric' ? value.includes(item.value.metric_name) : false;\n      return !isMetricAlreadyInValues;\n    },\n    [value],\n  );\n\n  const onNewMetric = useCallback(\n    (newMetric: Metric) => {\n      const newValue = props.multi ? [...value, newMetric] : [newMetric];\n      setValue(newValue);\n      handleChange(newValue);\n    },\n    [handleChange, props.multi, value],\n  );\n\n  const onMetricEdit = useCallback(\n    (changedMetric: Metric | AdhocMetric, oldMetric: Metric | AdhocMetric) => {\n      if (oldMetric instanceof AdhocMetric && oldMetric.equals(changedMetric)) {\n        return;\n      }\n      const newValue = value.map(value => {\n        if (\n          // compare saved metrics\n          ('metric_name' in oldMetric && value === oldMetric.metric_name) ||\n          // compare adhoc metrics\n          typeof (value as AdhocMetric).optionName !== 'undefined'\n            ? (value as AdhocMetric).optionName ===\n              (oldMetric as AdhocMetric).optionName\n            : false\n        ) {\n          return changedMetric;\n        }\n        return value;\n      });\n      setValue(newValue);\n      handleChange(newValue);\n    },\n    [handleChange, value],\n  );\n\n  const onRemoveMetric = useCallback(\n    (index: number) => {\n      if (!Array.isArray(value)) {\n        return;\n      }\n      const valuesCopy = [...value];\n      valuesCopy.splice(index, 1);\n      setValue(valuesCopy);\n      handleChange(valuesCopy);\n    },\n    [handleChange, value],\n  );\n\n  const moveLabel = useCallback(\n    (dragIndex: number, hoverIndex: number) => {\n      const newValues = [...value];\n      [newValues[hoverIndex], newValues[dragIndex]] = [\n        newValues[dragIndex],\n        newValues[hoverIndex],\n      ];\n      setValue(newValues);\n    },\n    [value],\n  );\n\n  const newSavedMetricOptions = useMemo(\n    () => getOptionsForSavedMetrics(props.savedMetrics, props.value),\n    [props.savedMetrics, props.value],\n  );\n\n  const getSavedMetricOptionsForMetric = useCallback(\n    index =>\n      getOptionsForSavedMetrics(\n        props.savedMetrics,\n        props.value,\n        props.value?.[index],\n      ),\n    [props.savedMetrics, props.value],\n  );\n\n  const handleDropLabel = useCallback(\n    () => onChange(multi ? value : value[0]),\n    [multi, onChange, value],\n  );\n\n  const valueRenderer = useCallback(\n    (option: ValueType, index: number) => (\n      <MetricDefinitionValue\n        key={index}\n        index={index}\n        option={option}\n        onMetricEdit={onMetricEdit}\n        onRemoveMetric={onRemoveMetric}\n        columns={props.columns}\n        savedMetrics={props.savedMetrics}\n        savedMetricsOptions={getSavedMetricOptionsForMetric(index)}\n        datasource={props.datasource}\n        onMoveLabel={moveLabel}\n        onDropLabel={handleDropLabel}\n        type={`${DndItemType.AdhocMetricOption}_${props.name}_${props.label}`}\n        multi={multi}\n        datasourceWarningMessage={\n          option instanceof AdhocMetric && option.datasourceWarning\n            ? t('This metric might be incompatible with current dataset')\n            : undefined\n        }\n      />\n    ),\n    [\n      getSavedMetricOptionsForMetric,\n      handleDropLabel,\n      moveLabel,\n      multi,\n      onMetricEdit,\n      onRemoveMetric,\n      props.columns,\n      props.datasource,\n      props.label,\n      props.name,\n      props.savedMetrics,\n    ],\n  );\n\n  const valuesRenderer = useCallback(\n    () => value.map((value, index) => valueRenderer(value, index)),\n    [value, valueRenderer],\n  );\n\n  const togglePopover = useCallback((visible: boolean) => {\n    setNewMetricPopoverVisible(visible);\n  }, []);\n\n  const closePopover = useCallback(() => {\n    togglePopover(false);\n  }, [togglePopover]);\n\n  const handleDrop = useCallback(\n    (item: DatasourcePanelDndItem) => {\n      if (item.type === DndItemType.Metric) {\n        onNewMetric(item.value as Metric);\n      }\n      if (item.type === DndItemType.Column) {\n        setDroppedItem(item);\n        togglePopover(true);\n      }\n    },\n    [onNewMetric, togglePopover],\n  );\n\n  const handleClickGhostButton = useCallback(() => {\n    setDroppedItem({});\n    togglePopover(true);\n  }, [togglePopover]);\n\n  const adhocMetric = useMemo(() => {\n    if (\n      isDatasourcePanelDndItem(droppedItem) &&\n      droppedItem.type === DndItemType.Column\n    ) {\n      const itemValue = droppedItem.value as ColumnMeta;\n      const config: Partial<AdhocMetric> = {\n        column: itemValue,\n      };\n      if (itemValue.type_generic === GenericDataType.NUMERIC) {\n        config.aggregate = AGGREGATES.SUM;\n      } else if (\n        itemValue.type_generic === GenericDataType.STRING ||\n        itemValue.type_generic === GenericDataType.BOOLEAN ||\n        itemValue.type_generic === GenericDataType.TEMPORAL\n      ) {\n        config.aggregate = AGGREGATES.COUNT_DISTINCT;\n      }\n      return new AdhocMetric(config);\n    }\n    return new AdhocMetric({});\n  }, [droppedItem]);\n\n  const ghostButtonText = tn(\n    'Drop a column/metric here or click',\n    'Drop columns/metrics here or click',\n    multi ? 2 : 1,\n  );\n\n  return (\n    <div className=\"metrics-select\">\n      <DndSelectLabel\n        onDrop={handleDrop}\n        canDrop={canDrop}\n        valuesRenderer={valuesRenderer}\n        accept={DND_ACCEPTED_TYPES}\n        ghostButtonText={ghostButtonText}\n        displayGhostButton={multi || value.length === 0}\n        onClickGhostButton={handleClickGhostButton}\n        {...props}\n      />\n      <AdhocMetricPopoverTrigger\n        adhocMetric={adhocMetric}\n        onMetricEdit={onNewMetric}\n        columns={props.columns}\n        savedMetricsOptions={newSavedMetricOptions}\n        savedMetric={EMPTY_OBJECT as savedMetricType}\n        datasource={props.datasource}\n        isControlledComponent\n        visible={newMetricPopoverVisible}\n        togglePopover={togglePopover}\n        closePopover={closePopover}\n        isNew\n      >\n        <div />\n      </AdhocMetricPopoverTrigger>\n    </div>\n  );\n};\n\nconst DndMetricSelectWithFallback = withDndFallback(\n  DndMetricSelect,\n  MetricsControl,\n);\n\nexport { DndMetricSelectWithFallback as DndMetricSelect };\n"]},"metadata":{},"sourceType":"module"}