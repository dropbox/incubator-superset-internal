{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint camelcase: 0 */\nimport { ensureIsArray } from '@superset-ui/core';\nimport { DYNAMIC_PLUGIN_CONTROLS_READY } from 'src/components/Chart/chartAction';\nimport { getControlsState } from 'src/explore/store';\nimport {\ngetControlConfig,\ngetControlStateFromControlConfig,\ngetControlValuesCompatibleWithDatasource,\nStandardizedFormData } from\n'src/explore/controlUtils';\nimport * as actions from 'src/explore/actions/exploreActions';\nimport { HYDRATE_EXPLORE } from '../actions/hydrateExplore';\n\nexport default function exploreReducer(state, action) {if (state === void 0) {state = {};}\n  const actionHandlers = {\n    [DYNAMIC_PLUGIN_CONTROLS_READY]() {\n      return {\n        ...state,\n        controls: action.controlsState };\n\n    },\n    [actions.TOGGLE_FAVE_STAR]() {\n      return {\n        ...state,\n        isStarred: action.isStarred };\n\n    },\n    [actions.POST_DATASOURCE_STARTED]() {\n      return {\n        ...state,\n        isDatasourceMetaLoading: true };\n\n    },\n    [actions.UPDATE_FORM_DATA_BY_DATASOURCE]() {\n      const newFormData = { ...state.form_data };\n      const { prevDatasource, newDatasource } = action;\n      const controls = { ...state.controls };\n      const controlsTransferred = [];\n\n      if (\n      prevDatasource.id !== newDatasource.id ||\n      prevDatasource.type !== newDatasource.type)\n      {\n        newFormData.datasource = newDatasource.uid;\n      }\n      // reset control values for column/metric related controls\n      Object.entries(controls).forEach((_ref) => {let [controlName, controlState] = _ref;\n        if (\n        // for direct column select controls\n        controlState.valueKey === 'column_name' ||\n        // for all other controls\n        'savedMetrics' in controlState ||\n        'columns' in controlState ||\n        'options' in controlState && !Array.isArray(controlState.options))\n        {\n          newFormData[controlName] = getControlValuesCompatibleWithDatasource(\n          newDatasource,\n          controlState,\n          controlState.value);\n\n          if (\n          ensureIsArray(newFormData[controlName]).length > 0 &&\n          newFormData[controlName] !== controls[controlName].default)\n          {\n            controlsTransferred.push(controlName);\n          }\n        }\n      });\n\n      const newState = {\n        ...state,\n        controls,\n        datasource: action.newDatasource };\n\n      return {\n        ...newState,\n        form_data: newFormData,\n        controls: getControlsState(newState, newFormData),\n        controlsTransferred };\n\n    },\n    [actions.FETCH_DATASOURCES_STARTED]() {\n      return {\n        ...state,\n        isDatasourcesLoading: true };\n\n    },\n    [actions.SET_FIELD_VALUE]() {\n      const { controlName, value, validationErrors } = action;\n      let new_form_data = { ...state.form_data, [controlName]: value };\n      const old_metrics_data = state.form_data.metrics;\n      const new_column_config = state.form_data.column_config;\n\n      const vizType = new_form_data.viz_type;\n\n      // if the controlName is metrics, and the metric column name is updated,\n      // need to update column config as well to keep the previou config.\n      if (controlName === 'metrics' && old_metrics_data && new_column_config) {\n        value.forEach((item, index) => {var _old_metrics_data$ind, _old_metrics_data$ind2;\n          if (\n          (item == null ? void 0 : item.label) !== ((_old_metrics_data$ind = old_metrics_data[index]) == null ? void 0 : _old_metrics_data$ind.label) &&\n          !!new_column_config[(_old_metrics_data$ind2 = old_metrics_data[index]) == null ? void 0 : _old_metrics_data$ind2.label])\n          {\n            new_column_config[item.label] =\n            new_column_config[old_metrics_data[index].label];\n\n            delete new_column_config[old_metrics_data[index].label];\n          }\n        });\n        new_form_data.column_config = new_column_config;\n      }\n\n      // Use the processed control config (with overrides and everything)\n      // if `controlName` does not existing in current controls,\n      const controlConfig =\n      state.controls[action.controlName] ||\n      getControlConfig(action.controlName, vizType) ||\n      {};\n\n      // will call validators again\n      const control = {\n        ...getControlStateFromControlConfig(controlConfig, state, action.value) };\n\n\n      const column_config = {\n        ...state.controls.column_config,\n        ...(new_column_config && { value: new_column_config }) };\n\n\n      const newState = {\n        ...state,\n        controls: {\n          ...state.controls,\n          [controlName]: control,\n          ...(controlName === 'metrics' && { column_config }) } };\n\n\n\n      const rerenderedControls = {};\n      if (Array.isArray(control.rerender)) {\n        control.rerender.forEach((controlName) => {\n          rerenderedControls[controlName] = {\n            ...getControlStateFromControlConfig(\n            newState.controls[controlName],\n            newState,\n            newState.controls[controlName].value) };\n\n\n        });\n      }\n\n      // combine newly detected errors with errors from `onChange` event of\n      // each control component (passed via reducer action).\n      const errors = control.validationErrors || [];\n      (validationErrors || []).forEach((err) => {\n        // skip duplicated errors\n        if (!_includesInstanceProperty(errors).call(errors, err)) {\n          errors.push(err);\n        }\n      });\n      const hasErrors = errors && errors.length > 0;\n\n      const isVizSwitch =\n      action.controlName === 'viz_type' &&\n      action.value !== state.controls.viz_type.value;\n      let currentControlsState = state.controls;\n      if (isVizSwitch) {\n        // get StandardizedFormData from source form_data\n        const sfd = new StandardizedFormData(state.form_data);\n        const transformed = sfd.transform(action.value, state);\n        new_form_data = transformed.formData;\n        currentControlsState = transformed.controlsState;\n      }\n\n      return {\n        ...state,\n        form_data: new_form_data,\n        triggerRender: control.renderTrigger && !hasErrors,\n        controls: {\n          ...currentControlsState,\n          [action.controlName]: {\n            ...control,\n            validationErrors: errors },\n\n          ...rerenderedControls } };\n\n\n    },\n    [actions.SET_EXPLORE_CONTROLS]() {\n      return {\n        ...state,\n        controls: getControlsState(state, action.formData) };\n\n    },\n    [actions.SET_FORM_DATA]() {\n      return {\n        ...state,\n        form_data: action.formData };\n\n    },\n    [actions.UPDATE_CHART_TITLE]() {\n      return {\n        ...state,\n        sliceName: action.sliceName };\n\n    },\n    [actions.SET_SAVE_ACTION]() {\n      return {\n        ...state,\n        saveAction: action.saveAction };\n\n    },\n    [actions.CREATE_NEW_SLICE]() {\n      return {\n        ...state,\n        slice: action.slice,\n        controls: getControlsState(state, action.form_data),\n        can_add: action.can_add,\n        can_download: action.can_download,\n        can_overwrite: action.can_overwrite };\n\n    },\n    [actions.SLICE_UPDATED]() {var _action$slice$slice_n;\n      return {\n        ...state,\n        slice: {\n          ...state.slice,\n          ...action.slice,\n          owners: action.slice.owners ?\n          action.slice.owners.map((owner) => owner.value) :\n          null },\n\n        sliceName: (_action$slice$slice_n = action.slice.slice_name) != null ? _action$slice$slice_n : state.sliceName,\n        metadata: {\n          ...state.metadata,\n          owners: action.slice.owners ?\n          action.slice.owners.map((owner) => owner.label) :\n          null } };\n\n\n    },\n    [actions.SET_FORCE_QUERY]() {\n      return {\n        ...state,\n        force: action.force };\n\n    },\n    [HYDRATE_EXPLORE]() {\n      return {\n        ...action.data.explore };\n\n    } };\n\n  if (action.type in actionHandlers) {\n    return actionHandlers[action.type]();\n  }\n  return state;\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(exploreReducer, \"exploreReducer\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/reducers/exploreReducer.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["ensureIsArray","DYNAMIC_PLUGIN_CONTROLS_READY","getControlsState","getControlConfig","getControlStateFromControlConfig","getControlValuesCompatibleWithDatasource","StandardizedFormData","actions","HYDRATE_EXPLORE","exploreReducer","state","action","actionHandlers","controls","controlsState","TOGGLE_FAVE_STAR","isStarred","POST_DATASOURCE_STARTED","isDatasourceMetaLoading","UPDATE_FORM_DATA_BY_DATASOURCE","newFormData","form_data","prevDatasource","newDatasource","controlsTransferred","id","type","datasource","uid","Object","entries","forEach","controlName","controlState","valueKey","Array","isArray","options","value","length","default","push","newState","FETCH_DATASOURCES_STARTED","isDatasourcesLoading","SET_FIELD_VALUE","validationErrors","new_form_data","old_metrics_data","metrics","new_column_config","column_config","vizType","viz_type","item","index","label","controlConfig","control","rerenderedControls","rerender","errors","err","hasErrors","isVizSwitch","currentControlsState","sfd","transformed","transform","formData","triggerRender","renderTrigger","SET_EXPLORE_CONTROLS","SET_FORM_DATA","UPDATE_CHART_TITLE","sliceName","SET_SAVE_ACTION","saveAction","CREATE_NEW_SLICE","slice","can_add","can_download","can_overwrite","SLICE_UPDATED","owners","map","owner","slice_name","metadata","SET_FORCE_QUERY","force","data","explore"],"sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/reducers/exploreReducer.js"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint camelcase: 0 */\nimport { ensureIsArray } from '@superset-ui/core';\nimport { DYNAMIC_PLUGIN_CONTROLS_READY } from 'src/components/Chart/chartAction';\nimport { getControlsState } from 'src/explore/store';\nimport {\n  getControlConfig,\n  getControlStateFromControlConfig,\n  getControlValuesCompatibleWithDatasource,\n  StandardizedFormData,\n} from 'src/explore/controlUtils';\nimport * as actions from 'src/explore/actions/exploreActions';\nimport { HYDRATE_EXPLORE } from '../actions/hydrateExplore';\n\nexport default function exploreReducer(state = {}, action) {\n  const actionHandlers = {\n    [DYNAMIC_PLUGIN_CONTROLS_READY]() {\n      return {\n        ...state,\n        controls: action.controlsState,\n      };\n    },\n    [actions.TOGGLE_FAVE_STAR]() {\n      return {\n        ...state,\n        isStarred: action.isStarred,\n      };\n    },\n    [actions.POST_DATASOURCE_STARTED]() {\n      return {\n        ...state,\n        isDatasourceMetaLoading: true,\n      };\n    },\n    [actions.UPDATE_FORM_DATA_BY_DATASOURCE]() {\n      const newFormData = { ...state.form_data };\n      const { prevDatasource, newDatasource } = action;\n      const controls = { ...state.controls };\n      const controlsTransferred = [];\n\n      if (\n        prevDatasource.id !== newDatasource.id ||\n        prevDatasource.type !== newDatasource.type\n      ) {\n        newFormData.datasource = newDatasource.uid;\n      }\n      // reset control values for column/metric related controls\n      Object.entries(controls).forEach(([controlName, controlState]) => {\n        if (\n          // for direct column select controls\n          controlState.valueKey === 'column_name' ||\n          // for all other controls\n          'savedMetrics' in controlState ||\n          'columns' in controlState ||\n          ('options' in controlState && !Array.isArray(controlState.options))\n        ) {\n          newFormData[controlName] = getControlValuesCompatibleWithDatasource(\n            newDatasource,\n            controlState,\n            controlState.value,\n          );\n          if (\n            ensureIsArray(newFormData[controlName]).length > 0 &&\n            newFormData[controlName] !== controls[controlName].default\n          ) {\n            controlsTransferred.push(controlName);\n          }\n        }\n      });\n\n      const newState = {\n        ...state,\n        controls,\n        datasource: action.newDatasource,\n      };\n      return {\n        ...newState,\n        form_data: newFormData,\n        controls: getControlsState(newState, newFormData),\n        controlsTransferred,\n      };\n    },\n    [actions.FETCH_DATASOURCES_STARTED]() {\n      return {\n        ...state,\n        isDatasourcesLoading: true,\n      };\n    },\n    [actions.SET_FIELD_VALUE]() {\n      const { controlName, value, validationErrors } = action;\n      let new_form_data = { ...state.form_data, [controlName]: value };\n      const old_metrics_data = state.form_data.metrics;\n      const new_column_config = state.form_data.column_config;\n\n      const vizType = new_form_data.viz_type;\n\n      // if the controlName is metrics, and the metric column name is updated,\n      // need to update column config as well to keep the previou config.\n      if (controlName === 'metrics' && old_metrics_data && new_column_config) {\n        value.forEach((item, index) => {\n          if (\n            item?.label !== old_metrics_data[index]?.label &&\n            !!new_column_config[old_metrics_data[index]?.label]\n          ) {\n            new_column_config[item.label] =\n              new_column_config[old_metrics_data[index].label];\n\n            delete new_column_config[old_metrics_data[index].label];\n          }\n        });\n        new_form_data.column_config = new_column_config;\n      }\n\n      // Use the processed control config (with overrides and everything)\n      // if `controlName` does not existing in current controls,\n      const controlConfig =\n        state.controls[action.controlName] ||\n        getControlConfig(action.controlName, vizType) ||\n        {};\n\n      // will call validators again\n      const control = {\n        ...getControlStateFromControlConfig(controlConfig, state, action.value),\n      };\n\n      const column_config = {\n        ...state.controls.column_config,\n        ...(new_column_config && { value: new_column_config }),\n      };\n\n      const newState = {\n        ...state,\n        controls: {\n          ...state.controls,\n          [controlName]: control,\n          ...(controlName === 'metrics' && { column_config }),\n        },\n      };\n\n      const rerenderedControls = {};\n      if (Array.isArray(control.rerender)) {\n        control.rerender.forEach(controlName => {\n          rerenderedControls[controlName] = {\n            ...getControlStateFromControlConfig(\n              newState.controls[controlName],\n              newState,\n              newState.controls[controlName].value,\n            ),\n          };\n        });\n      }\n\n      // combine newly detected errors with errors from `onChange` event of\n      // each control component (passed via reducer action).\n      const errors = control.validationErrors || [];\n      (validationErrors || []).forEach(err => {\n        // skip duplicated errors\n        if (!errors.includes(err)) {\n          errors.push(err);\n        }\n      });\n      const hasErrors = errors && errors.length > 0;\n\n      const isVizSwitch =\n        action.controlName === 'viz_type' &&\n        action.value !== state.controls.viz_type.value;\n      let currentControlsState = state.controls;\n      if (isVizSwitch) {\n        // get StandardizedFormData from source form_data\n        const sfd = new StandardizedFormData(state.form_data);\n        const transformed = sfd.transform(action.value, state);\n        new_form_data = transformed.formData;\n        currentControlsState = transformed.controlsState;\n      }\n\n      return {\n        ...state,\n        form_data: new_form_data,\n        triggerRender: control.renderTrigger && !hasErrors,\n        controls: {\n          ...currentControlsState,\n          [action.controlName]: {\n            ...control,\n            validationErrors: errors,\n          },\n          ...rerenderedControls,\n        },\n      };\n    },\n    [actions.SET_EXPLORE_CONTROLS]() {\n      return {\n        ...state,\n        controls: getControlsState(state, action.formData),\n      };\n    },\n    [actions.SET_FORM_DATA]() {\n      return {\n        ...state,\n        form_data: action.formData,\n      };\n    },\n    [actions.UPDATE_CHART_TITLE]() {\n      return {\n        ...state,\n        sliceName: action.sliceName,\n      };\n    },\n    [actions.SET_SAVE_ACTION]() {\n      return {\n        ...state,\n        saveAction: action.saveAction,\n      };\n    },\n    [actions.CREATE_NEW_SLICE]() {\n      return {\n        ...state,\n        slice: action.slice,\n        controls: getControlsState(state, action.form_data),\n        can_add: action.can_add,\n        can_download: action.can_download,\n        can_overwrite: action.can_overwrite,\n      };\n    },\n    [actions.SLICE_UPDATED]() {\n      return {\n        ...state,\n        slice: {\n          ...state.slice,\n          ...action.slice,\n          owners: action.slice.owners\n            ? action.slice.owners.map(owner => owner.value)\n            : null,\n        },\n        sliceName: action.slice.slice_name ?? state.sliceName,\n        metadata: {\n          ...state.metadata,\n          owners: action.slice.owners\n            ? action.slice.owners.map(owner => owner.label)\n            : null,\n        },\n      };\n    },\n    [actions.SET_FORCE_QUERY]() {\n      return {\n        ...state,\n        force: action.force,\n      };\n    },\n    [HYDRATE_EXPLORE]() {\n      return {\n        ...action.data.explore,\n      };\n    },\n  };\n  if (action.type in actionHandlers) {\n    return actionHandlers[action.type]();\n  }\n  return state;\n}\n"],"mappings":"wYAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,aAAT,QAA8B,mBAA9B;AACA,SAASC,6BAAT,QAA8C,kCAA9C;AACA,SAASC,gBAAT,QAAiC,mBAAjC;AACA;AACEC,gBADF;AAEEC,gCAFF;AAGEC,wCAHF;AAIEC,oBAJF;AAKO,0BALP;AAMA,OAAO,KAAKC,OAAZ,MAAyB,oCAAzB;AACA,SAASC,eAAT,QAAgC,2BAAhC;;AAEA,eAAe,SAASC,cAAT,CAAwBC,KAAxB,EAAoCC,MAApC,EAA4C,KAApBD,KAAoB,cAApBA,KAAoB,GAAZ,EAAY;EACzD,MAAME,cAAc,GAAG;IACrB,CAACX,6BAAD,IAAkC;MAChC,OAAO;QACL,GAAGS,KADE;QAELG,QAAQ,EAAEF,MAAM,CAACG,aAFZ,EAAP;;IAID,CANoB;IAOrB,CAACP,OAAO,CAACQ,gBAAT,IAA6B;MAC3B,OAAO;QACL,GAAGL,KADE;QAELM,SAAS,EAAEL,MAAM,CAACK,SAFb,EAAP;;IAID,CAZoB;IAarB,CAACT,OAAO,CAACU,uBAAT,IAAoC;MAClC,OAAO;QACL,GAAGP,KADE;QAELQ,uBAAuB,EAAE,IAFpB,EAAP;;IAID,CAlBoB;IAmBrB,CAACX,OAAO,CAACY,8BAAT,IAA2C;MACzC,MAAMC,WAAW,GAAG,EAAE,GAAGV,KAAK,CAACW,SAAX,EAApB;MACA,MAAM,EAAEC,cAAF,EAAkBC,aAAlB,KAAoCZ,MAA1C;MACA,MAAME,QAAQ,GAAG,EAAE,GAAGH,KAAK,CAACG,QAAX,EAAjB;MACA,MAAMW,mBAAmB,GAAG,EAA5B;;MAEA;MACEF,cAAc,CAACG,EAAf,KAAsBF,aAAa,CAACE,EAApC;MACAH,cAAc,CAACI,IAAf,KAAwBH,aAAa,CAACG,IAFxC;MAGE;QACAN,WAAW,CAACO,UAAZ,GAAyBJ,aAAa,CAACK,GAAvC;MACD;MACD;MACAC,MAAM,CAACC,OAAP,CAAejB,QAAf,EAAyBkB,OAAzB,CAAiC,UAAiC,KAAhC,CAACC,WAAD,EAAcC,YAAd,CAAgC;QAChE;QACE;QACAA,YAAY,CAACC,QAAb,KAA0B,aAA1B;QACA;QACA,kBAAkBD,YAFlB;QAGA,aAAaA,YAHb;QAIC,aAAaA,YAAb,IAA6B,CAACE,KAAK,CAACC,OAAN,CAAcH,YAAY,CAACI,OAA3B,CANjC;QAOE;UACAjB,WAAW,CAACY,WAAD,CAAX,GAA2B3B,wCAAwC;UACjEkB,aADiE;UAEjEU,YAFiE;UAGjEA,YAAY,CAACK,KAHoD,CAAnE;;UAKA;UACEtC,aAAa,CAACoB,WAAW,CAACY,WAAD,CAAZ,CAAb,CAAwCO,MAAxC,GAAiD,CAAjD;UACAnB,WAAW,CAACY,WAAD,CAAX,KAA6BnB,QAAQ,CAACmB,WAAD,CAAR,CAAsBQ,OAFrD;UAGE;YACAhB,mBAAmB,CAACiB,IAApB,CAAyBT,WAAzB;UACD;QACF;MACF,CArBD;;MAuBA,MAAMU,QAAQ,GAAG;QACf,GAAGhC,KADY;QAEfG,QAFe;QAGfc,UAAU,EAAEhB,MAAM,CAACY,aAHJ,EAAjB;;MAKA,OAAO;QACL,GAAGmB,QADE;QAELrB,SAAS,EAAED,WAFN;QAGLP,QAAQ,EAAEX,gBAAgB,CAACwC,QAAD,EAAWtB,WAAX,CAHrB;QAILI,mBAJK,EAAP;;IAMD,CAlEoB;IAmErB,CAACjB,OAAO,CAACoC,yBAAT,IAAsC;MACpC,OAAO;QACL,GAAGjC,KADE;QAELkC,oBAAoB,EAAE,IAFjB,EAAP;;IAID,CAxEoB;IAyErB,CAACrC,OAAO,CAACsC,eAAT,IAA4B;MAC1B,MAAM,EAAEb,WAAF,EAAeM,KAAf,EAAsBQ,gBAAtB,KAA2CnC,MAAjD;MACA,IAAIoC,aAAa,GAAG,EAAE,GAAGrC,KAAK,CAACW,SAAX,EAAsB,CAACW,WAAD,GAAeM,KAArC,EAApB;MACA,MAAMU,gBAAgB,GAAGtC,KAAK,CAACW,SAAN,CAAgB4B,OAAzC;MACA,MAAMC,iBAAiB,GAAGxC,KAAK,CAACW,SAAN,CAAgB8B,aAA1C;;MAEA,MAAMC,OAAO,GAAGL,aAAa,CAACM,QAA9B;;MAEA;MACA;MACA,IAAIrB,WAAW,KAAK,SAAhB,IAA6BgB,gBAA7B,IAAiDE,iBAArD,EAAwE;QACtEZ,KAAK,CAACP,OAAN,CAAc,CAACuB,IAAD,EAAOC,KAAP,KAAiB;UAC7B;UACE,CAAAD,IAAI,QAAJ,YAAAA,IAAI,CAAEE,KAAN,gCAAgBR,gBAAgB,CAACO,KAAD,CAAhC,qBAAgB,sBAAyBC,KAAzC;UACA,CAAC,CAACN,iBAAiB,2BAACF,gBAAgB,CAACO,KAAD,CAAjB,qBAAC,uBAAyBC,KAA1B,CAFrB;UAGE;YACAN,iBAAiB,CAACI,IAAI,CAACE,KAAN,CAAjB;YACEN,iBAAiB,CAACF,gBAAgB,CAACO,KAAD,CAAhB,CAAwBC,KAAzB,CADnB;;YAGA,OAAON,iBAAiB,CAACF,gBAAgB,CAACO,KAAD,CAAhB,CAAwBC,KAAzB,CAAxB;UACD;QACF,CAVD;QAWAT,aAAa,CAACI,aAAd,GAA8BD,iBAA9B;MACD;;MAED;MACA;MACA,MAAMO,aAAa;MACjB/C,KAAK,CAACG,QAAN,CAAeF,MAAM,CAACqB,WAAtB;MACA7B,gBAAgB,CAACQ,MAAM,CAACqB,WAAR,EAAqBoB,OAArB,CADhB;MAEA,EAHF;;MAKA;MACA,MAAMM,OAAO,GAAG;QACd,GAAGtD,gCAAgC,CAACqD,aAAD,EAAgB/C,KAAhB,EAAuBC,MAAM,CAAC2B,KAA9B,CADrB,EAAhB;;;MAIA,MAAMa,aAAa,GAAG;QACpB,GAAGzC,KAAK,CAACG,QAAN,CAAesC,aADE;QAEpB,IAAID,iBAAiB,IAAI,EAAEZ,KAAK,EAAEY,iBAAT,EAAzB,CAFoB,EAAtB;;;MAKA,MAAMR,QAAQ,GAAG;QACf,GAAGhC,KADY;QAEfG,QAAQ,EAAE;UACR,GAAGH,KAAK,CAACG,QADD;UAER,CAACmB,WAAD,GAAe0B,OAFP;UAGR,IAAI1B,WAAW,KAAK,SAAhB,IAA6B,EAAEmB,aAAF,EAAjC,CAHQ,EAFK,EAAjB;;;;MASA,MAAMQ,kBAAkB,GAAG,EAA3B;MACA,IAAIxB,KAAK,CAACC,OAAN,CAAcsB,OAAO,CAACE,QAAtB,CAAJ,EAAqC;QACnCF,OAAO,CAACE,QAAR,CAAiB7B,OAAjB,CAAyB,CAAAC,WAAW,KAAI;UACtC2B,kBAAkB,CAAC3B,WAAD,CAAlB,GAAkC;YAChC,GAAG5B,gCAAgC;YACjCsC,QAAQ,CAAC7B,QAAT,CAAkBmB,WAAlB,CADiC;YAEjCU,QAFiC;YAGjCA,QAAQ,CAAC7B,QAAT,CAAkBmB,WAAlB,EAA+BM,KAHE,CADH,EAAlC;;;QAOD,CARD;MASD;;MAED;MACA;MACA,MAAMuB,MAAM,GAAGH,OAAO,CAACZ,gBAAR,IAA4B,EAA3C;MACA,CAACA,gBAAgB,IAAI,EAArB,EAAyBf,OAAzB,CAAiC,CAAA+B,GAAG,KAAI;QACtC;QACA,IAAI,CAAC,0BAAAD,MAAM,MAAN,CAAAA,MAAM,EAAUC,GAAV,CAAX,EAA2B;UACzBD,MAAM,CAACpB,IAAP,CAAYqB,GAAZ;QACD;MACF,CALD;MAMA,MAAMC,SAAS,GAAGF,MAAM,IAAIA,MAAM,CAACtB,MAAP,GAAgB,CAA5C;;MAEA,MAAMyB,WAAW;MACfrD,MAAM,CAACqB,WAAP,KAAuB,UAAvB;MACArB,MAAM,CAAC2B,KAAP,KAAiB5B,KAAK,CAACG,QAAN,CAAewC,QAAf,CAAwBf,KAF3C;MAGA,IAAI2B,oBAAoB,GAAGvD,KAAK,CAACG,QAAjC;MACA,IAAImD,WAAJ,EAAiB;QACf;QACA,MAAME,GAAG,GAAG,IAAI5D,oBAAJ,CAAyBI,KAAK,CAACW,SAA/B,CAAZ;QACA,MAAM8C,WAAW,GAAGD,GAAG,CAACE,SAAJ,CAAczD,MAAM,CAAC2B,KAArB,EAA4B5B,KAA5B,CAApB;QACAqC,aAAa,GAAGoB,WAAW,CAACE,QAA5B;QACAJ,oBAAoB,GAAGE,WAAW,CAACrD,aAAnC;MACD;;MAED,OAAO;QACL,GAAGJ,KADE;QAELW,SAAS,EAAE0B,aAFN;QAGLuB,aAAa,EAAEZ,OAAO,CAACa,aAAR,IAAyB,CAACR,SAHpC;QAILlD,QAAQ,EAAE;UACR,GAAGoD,oBADK;UAER,CAACtD,MAAM,CAACqB,WAAR,GAAsB;YACpB,GAAG0B,OADiB;YAEpBZ,gBAAgB,EAAEe,MAFE,EAFd;;UAMR,GAAGF,kBANK,EAJL,EAAP;;;IAaD,CA7KoB;IA8KrB,CAACpD,OAAO,CAACiE,oBAAT,IAAiC;MAC/B,OAAO;QACL,GAAG9D,KADE;QAELG,QAAQ,EAAEX,gBAAgB,CAACQ,KAAD,EAAQC,MAAM,CAAC0D,QAAf,CAFrB,EAAP;;IAID,CAnLoB;IAoLrB,CAAC9D,OAAO,CAACkE,aAAT,IAA0B;MACxB,OAAO;QACL,GAAG/D,KADE;QAELW,SAAS,EAAEV,MAAM,CAAC0D,QAFb,EAAP;;IAID,CAzLoB;IA0LrB,CAAC9D,OAAO,CAACmE,kBAAT,IAA+B;MAC7B,OAAO;QACL,GAAGhE,KADE;QAELiE,SAAS,EAAEhE,MAAM,CAACgE,SAFb,EAAP;;IAID,CA/LoB;IAgMrB,CAACpE,OAAO,CAACqE,eAAT,IAA4B;MAC1B,OAAO;QACL,GAAGlE,KADE;QAELmE,UAAU,EAAElE,MAAM,CAACkE,UAFd,EAAP;;IAID,CArMoB;IAsMrB,CAACtE,OAAO,CAACuE,gBAAT,IAA6B;MAC3B,OAAO;QACL,GAAGpE,KADE;QAELqE,KAAK,EAAEpE,MAAM,CAACoE,KAFT;QAGLlE,QAAQ,EAAEX,gBAAgB,CAACQ,KAAD,EAAQC,MAAM,CAACU,SAAf,CAHrB;QAIL2D,OAAO,EAAErE,MAAM,CAACqE,OAJX;QAKLC,YAAY,EAAEtE,MAAM,CAACsE,YALhB;QAMLC,aAAa,EAAEvE,MAAM,CAACuE,aANjB,EAAP;;IAQD,CA/MoB;IAgNrB,CAAC3E,OAAO,CAAC4E,aAAT,IAA0B;MACxB,OAAO;QACL,GAAGzE,KADE;QAELqE,KAAK,EAAE;UACL,GAAGrE,KAAK,CAACqE,KADJ;UAEL,GAAGpE,MAAM,CAACoE,KAFL;UAGLK,MAAM,EAAEzE,MAAM,CAACoE,KAAP,CAAaK,MAAb;UACJzE,MAAM,CAACoE,KAAP,CAAaK,MAAb,CAAoBC,GAApB,CAAwB,CAAAC,KAAK,KAAIA,KAAK,CAAChD,KAAvC,CADI;UAEJ,IALC,EAFF;;QASLqC,SAAS,2BAAEhE,MAAM,CAACoE,KAAP,CAAaQ,UAAf,oCAA6B7E,KAAK,CAACiE,SATvC;QAULa,QAAQ,EAAE;UACR,GAAG9E,KAAK,CAAC8E,QADD;UAERJ,MAAM,EAAEzE,MAAM,CAACoE,KAAP,CAAaK,MAAb;UACJzE,MAAM,CAACoE,KAAP,CAAaK,MAAb,CAAoBC,GAApB,CAAwB,CAAAC,KAAK,KAAIA,KAAK,CAAC9B,KAAvC,CADI;UAEJ,IAJI,EAVL,EAAP;;;IAiBD,CAlOoB;IAmOrB,CAACjD,OAAO,CAACkF,eAAT,IAA4B;MAC1B,OAAO;QACL,GAAG/E,KADE;QAELgF,KAAK,EAAE/E,MAAM,CAAC+E,KAFT,EAAP;;IAID,CAxOoB;IAyOrB,CAAClF,eAAD,IAAoB;MAClB,OAAO;QACL,GAAGG,MAAM,CAACgF,IAAP,CAAYC,OADV,EAAP;;IAGD,CA7OoB,EAAvB;;EA+OA,IAAIjF,MAAM,CAACe,IAAP,IAAed,cAAnB,EAAmC;IACjC,OAAOA,cAAc,CAACD,MAAM,CAACe,IAAR,CAAd,EAAP;EACD;EACD,OAAOhB,KAAP;AACD,C,iLApPuBD,c"},"metadata":{},"sourceType":"module"}