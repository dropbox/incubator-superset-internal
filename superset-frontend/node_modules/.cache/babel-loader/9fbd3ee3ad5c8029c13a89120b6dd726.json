{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useRef, useState } from 'react';\nexport function useElementOnScreen(options) {\n  const containerRef = useRef(null);\n  const [isSticky, setIsSticky] = useState(false);\n  const callback = (entries) => {\n    const [entry] = entries;\n    setIsSticky(entry.intersectionRatio < 1);\n  };\n  useEffect(() => {\n    const observer = new IntersectionObserver(callback, options);\n    const element = containerRef.current;\n    if (element) {\n      observer.observe(element);\n    }\n    return () => {\n      if (element) {\n        observer.unobserve(element);\n      }\n    };\n  }, [containerRef, options]);\n  return [containerRef, isSticky];\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAAuD,OAAvD;AAEA,OAAM,SAAUC,kBAAV,CACJC,OADI,EAC6B;EAEjC,MAAMC,YAAY,GAAGJ,MAAM,CAAI,IAAJ,CAA3B;EACA,MAAM,CAACK,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,KAAD,CAAxC;EAEA,MAAMM,QAAQ,GAAG,CAACC,OAAD,KAAyC;IACxD,MAAM,CAACC,KAAD,IAAUD,OAAhB;IACAF,WAAW,CAACG,KAAK,CAACC,iBAAN,GAA0B,CAA3B,CAAX;EACD,CAHD;EAKAX,SAAS,CAAC,MAAK;IACb,MAAMY,QAAQ,GAAG,IAAIC,oBAAJ,CAAyBL,QAAzB,EAAmCJ,OAAnC,CAAjB;IACA,MAAMU,OAAO,GAAGT,YAAY,CAACU,OAA7B;IACA,IAAID,OAAJ,EAAa;MACXF,QAAQ,CAACI,OAAT,CAAiBF,OAAjB;IACD;IACD,OAAO,MAAK;MACV,IAAIA,OAAJ,EAAa;QACXF,QAAQ,CAACK,SAAT,CAAmBH,OAAnB;MACD;IACF,CAJD;EAKD,CAXQ,EAWN,CAACT,YAAD,EAAeD,OAAf,CAXM,CAAT;EAaA,OAAO,CAACC,YAAD,EAAeC,QAAf,CAAP;AACD","names":["useEffect","useRef","useState","useElementOnScreen","options","containerRef","isSticky","setIsSticky","callback","entries","entry","intersectionRatio","observer","IntersectionObserver","element","current","observe","unobserve"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/packages/superset-ui-core/src/hooks/useElementOnScreen/useElementOnScreen.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useRef, useState, RefObject } from 'react';\n\nexport function useElementOnScreen<T extends Element>(\n  options: IntersectionObserverInit,\n): [RefObject<T>, boolean] {\n  const containerRef = useRef<T>(null);\n  const [isSticky, setIsSticky] = useState(false);\n\n  const callback = (entries: IntersectionObserverEntry[]) => {\n    const [entry] = entries;\n    setIsSticky(entry.intersectionRatio < 1);\n  };\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(callback, options);\n    const element = containerRef.current;\n    if (element) {\n      observer.observe(element);\n    }\n    return () => {\n      if (element) {\n        observer.unobserve(element);\n      }\n    };\n  }, [containerRef, options]);\n\n  return [containerRef, isSticky];\n}\n"]},"metadata":{},"sourceType":"module"}