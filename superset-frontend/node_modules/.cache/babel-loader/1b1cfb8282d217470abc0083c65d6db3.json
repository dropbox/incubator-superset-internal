{"ast":null,"code":"import _cloneDeep from \"lodash/cloneDeep\";import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport { Behavior, FeatureFlag, getChartMetadataRegistry, isDefined, isFeatureEnabled } from '@superset-ui/core';\nimport { getChartIdsInFilterScope } from './getChartIdsInFilterScope';\nimport { GLOBAL_SCOPE_POINTER, isCrossFilterScopeGlobal } from '../types';\nimport { DEFAULT_CROSS_FILTER_SCOPING } from '../constants';\nexport const isCrossFiltersEnabled = (metadataCrossFiltersEnabled) => isFeatureEnabled(FeatureFlag.DASHBOARD_CROSS_FILTERS) && (\nmetadataCrossFiltersEnabled === undefined || metadataCrossFiltersEnabled);\nexport const getCrossFiltersConfiguration = (dashboardLayout, metadata, charts) => {\n  if (!isFeatureEnabled(FeatureFlag.DASHBOARD_CROSS_FILTERS)) {\n    return undefined;\n  }\n  const globalChartConfiguration = metadata.global_chart_configuration ?\n  _cloneDeep(metadata.global_chart_configuration) :\n  {\n    scope: DEFAULT_CROSS_FILTER_SCOPING,\n    chartsInScope: Object.values(charts).map((chart) => chart.id) };\n\n  // If user just added cross filter to dashboard it's not saving its scope on server,\n  // so we tweak it until user will update scope and will save it in server\n  const chartConfiguration = {};\n  Object.values(dashboardLayout).forEach((layoutItem) => {var _layoutItem$meta, _behaviors, _ref, _getChartMetadataRegi, _charts$chartId, _charts$chartId$form_;\n    const chartId = (_layoutItem$meta = layoutItem.meta) == null ? void 0 : _layoutItem$meta.chartId;\n    if (!isDefined(chartId)) {\n      return;\n    }\n    const behaviors = (_behaviors = (_ref = (_getChartMetadataRegi = getChartMetadataRegistry().get((_charts$chartId = charts[chartId]) == null ? void 0 : (_charts$chartId$form_ = _charts$chartId.form_data) == null ? void 0 : _charts$chartId$form_.viz_type)) != null ? _getChartMetadataRegi :\n    {}) == null ? void 0 : _ref.behaviors) != null ? _behaviors : [];\n    if (_includesInstanceProperty(behaviors).call(behaviors, Behavior.INTERACTIVE_CHART)) {var _metadata$chart_confi;\n      if ((_metadata$chart_confi = metadata.chart_configuration) != null && _metadata$chart_confi[chartId]) {\n        // We need to clone to avoid mutating Redux state\n        chartConfiguration[chartId] = _cloneDeep(metadata.chart_configuration[chartId]);\n      }\n      if (!chartConfiguration[chartId]) {\n        chartConfiguration[chartId] = {\n          id: chartId,\n          crossFilters: {\n            scope: GLOBAL_SCOPE_POINTER } };\n\n\n      }\n      chartConfiguration[chartId].crossFilters.chartsInScope =\n      isCrossFilterScopeGlobal(chartConfiguration[chartId].crossFilters.scope) ?\n      globalChartConfiguration.chartsInScope.filter((id) => id !== Number(chartId)) :\n      getChartIdsInFilterScope(chartConfiguration[chartId].crossFilters.scope, Object.values(charts).map((chart) => chart.id), dashboardLayout);\n    }\n  });\n  return { chartConfiguration, globalChartConfiguration };\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAmBA,SACEA,QADF,EAEEC,WAFF,EAGEC,wBAHF,EAIEC,SAJF,EAKEC,gBALF,QAMO,mBANP;AAOA,SAASC,wBAAT,QAAyC,4BAAzC;AACA,SAIEC,oBAJF,EAKEC,wBALF,QAMO,UANP;AAOA,SAASC,4BAAT,QAA6C,cAA7C;AAEA,OAAO,MAAMC,qBAAqB,GAAG,CACnCC,2BADmC,KAGnCN,gBAAgB,CAACH,WAAW,CAACU,uBAAb,CAAhB;AACCD,2BAA2B,KAAKE,SAAhC,IAA6CF,2BAD9C,CAHK;AAMP,OAAO,MAAMG,4BAA4B,GAAG,CAC1CC,eAD0C,EAE1CC,QAF0C,EAM1CC,MAN0C,KAOxC;EACF,IAAI,CAACZ,gBAAgB,CAACH,WAAW,CAACU,uBAAb,CAArB,EAA4D;IAC1D,OAAOC,SAAP;EACD;EAED,MAAMK,wBAAwB,GAAGF,QAAQ,CAACG,0BAAT;EAC7B,WAAUH,QAAQ,CAACG,0BAAnB,CAD6B;EAE7B;IACEC,KAAK,EAAEX,4BADT;IAEEY,aAAa,EAAEC,MAAM,CAACC,MAAP,CAAcN,MAAd,EAAsBO,GAAtB,CAA0B,MAAK,KAAIC,KAAK,CAACC,EAAzC,CAFjB,EAFJ;;EAOA;EACA;EACA,MAAMC,kBAAkB,GAAG,EAA3B;EACAL,MAAM,CAACC,MAAP,CAAcR,eAAd,EAA+Ba,OAA/B,CAAuC,WAAU,KAAG;IAClD,MAAMC,OAAO,uBAAGC,UAAU,CAACC,IAAd,qBAAG,iBAAiBF,OAAjC;IAEA,IAAI,CAACzB,SAAS,CAACyB,OAAD,CAAd,EAAyB;MACvB;IACD;IAED,MAAMG,SAAS,kDAEX7B,wBAAwB,GAAG8B,GAA3B,oBAA+BhB,MAAM,CAACY,OAAD,CAArC,8CAA+B,gBAAiBK,SAAhD,qBAA+B,sBAA4BC,QAA3D,CAFW;IAGX,EAHW,qBACb,KAGGH,SAJU,yBAIG,EAJlB;IAMA,IAAI,mCAAS,MAAT,UAAS,EAAU/B,QAAQ,CAACmC,iBAAnB,CAAb,EAAoD;MAClD,6BAAIpB,QAAQ,CAACqB,mBAAb,aAAI,sBAA+BR,OAA/B,CAAJ,EAA6C;QAC3C;QACAF,kBAAkB,CAACE,OAAD,CAAlB,GAA8B,WAC5Bb,QAAQ,CAACqB,mBAAT,CAA6BR,OAA7B,CAD4B,CAA9B;MAGD;MACD,IAAI,CAACF,kBAAkB,CAACE,OAAD,CAAvB,EAAkC;QAChCF,kBAAkB,CAACE,OAAD,CAAlB,GAA8B;UAC5BH,EAAE,EAAEG,OADwB;UAE5BS,YAAY,EAAE;YACZlB,KAAK,EAAEb,oBADK,EAFc,EAA9B;;;MAMD;MACDoB,kBAAkB,CAACE,OAAD,CAAlB,CAA4BS,YAA5B,CAAyCjB,aAAzC;MACEb,wBAAwB,CAACmB,kBAAkB,CAACE,OAAD,CAAlB,CAA4BS,YAA5B,CAAyClB,KAA1C,CAAxB;MACIF,wBAAwB,CAACG,aAAzB,CAAuCkB,MAAvC,CACE,GAAE,KAAIb,EAAE,KAAKc,MAAM,CAACX,OAAD,CADrB,CADJ;MAIIvB,wBAAwB,CACtBqB,kBAAkB,CAACE,OAAD,CAAlB,CAA4BS,YAA5B,CAAyClB,KADnB,EAEtBE,MAAM,CAACC,MAAP,CAAcN,MAAd,EAAsBO,GAAtB,CAA0B,MAAK,KAAIC,KAAK,CAACC,EAAzC,CAFsB,EAGtBX,eAHsB,CAL9B;IAUD;EACF,CAvCD;EAyCA,OAAO,EAAEY,kBAAF,EAAsBT,wBAAtB,EAAP;AACD,CAhEM","names":["Behavior","FeatureFlag","getChartMetadataRegistry","isDefined","isFeatureEnabled","getChartIdsInFilterScope","GLOBAL_SCOPE_POINTER","isCrossFilterScopeGlobal","DEFAULT_CROSS_FILTER_SCOPING","isCrossFiltersEnabled","metadataCrossFiltersEnabled","DASHBOARD_CROSS_FILTERS","undefined","getCrossFiltersConfiguration","dashboardLayout","metadata","charts","globalChartConfiguration","global_chart_configuration","scope","chartsInScope","Object","values","map","chart","id","chartConfiguration","forEach","chartId","layoutItem","meta","behaviors","get","form_data","viz_type","INTERACTIVE_CHART","chart_configuration","crossFilters","filter","Number"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/util/crossFilters.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { cloneDeep } from 'lodash';\nimport {\n  Behavior,\n  FeatureFlag,\n  getChartMetadataRegistry,\n  isDefined,\n  isFeatureEnabled,\n} from '@superset-ui/core';\nimport { getChartIdsInFilterScope } from './getChartIdsInFilterScope';\nimport {\n  ChartsState,\n  DashboardInfo,\n  DashboardLayout,\n  GLOBAL_SCOPE_POINTER,\n  isCrossFilterScopeGlobal,\n} from '../types';\nimport { DEFAULT_CROSS_FILTER_SCOPING } from '../constants';\n\nexport const isCrossFiltersEnabled = (\n  metadataCrossFiltersEnabled: boolean | undefined,\n): boolean =>\n  isFeatureEnabled(FeatureFlag.DASHBOARD_CROSS_FILTERS) &&\n  (metadataCrossFiltersEnabled === undefined || metadataCrossFiltersEnabled);\n\nexport const getCrossFiltersConfiguration = (\n  dashboardLayout: DashboardLayout,\n  metadata: Pick<\n    DashboardInfo['metadata'],\n    'chart_configuration' | 'global_chart_configuration'\n  >,\n  charts: ChartsState,\n) => {\n  if (!isFeatureEnabled(FeatureFlag.DASHBOARD_CROSS_FILTERS)) {\n    return undefined;\n  }\n\n  const globalChartConfiguration = metadata.global_chart_configuration\n    ? cloneDeep(metadata.global_chart_configuration)\n    : {\n        scope: DEFAULT_CROSS_FILTER_SCOPING,\n        chartsInScope: Object.values(charts).map(chart => chart.id),\n      };\n\n  // If user just added cross filter to dashboard it's not saving its scope on server,\n  // so we tweak it until user will update scope and will save it in server\n  const chartConfiguration = {};\n  Object.values(dashboardLayout).forEach(layoutItem => {\n    const chartId = layoutItem.meta?.chartId;\n\n    if (!isDefined(chartId)) {\n      return;\n    }\n\n    const behaviors =\n      (\n        getChartMetadataRegistry().get(charts[chartId]?.form_data?.viz_type) ??\n        {}\n      )?.behaviors ?? [];\n\n    if (behaviors.includes(Behavior.INTERACTIVE_CHART)) {\n      if (metadata.chart_configuration?.[chartId]) {\n        // We need to clone to avoid mutating Redux state\n        chartConfiguration[chartId] = cloneDeep(\n          metadata.chart_configuration[chartId],\n        );\n      }\n      if (!chartConfiguration[chartId]) {\n        chartConfiguration[chartId] = {\n          id: chartId,\n          crossFilters: {\n            scope: GLOBAL_SCOPE_POINTER,\n          },\n        };\n      }\n      chartConfiguration[chartId].crossFilters.chartsInScope =\n        isCrossFilterScopeGlobal(chartConfiguration[chartId].crossFilters.scope)\n          ? globalChartConfiguration.chartsInScope.filter(\n              id => id !== Number(chartId),\n            )\n          : getChartIdsInFilterScope(\n              chartConfiguration[chartId].crossFilters.scope,\n              Object.values(charts).map(chart => chart.id),\n              dashboardLayout,\n            );\n    }\n  });\n\n  return { chartConfiguration, globalChartConfiguration };\n};\n"]},"metadata":{},"sourceType":"module"}