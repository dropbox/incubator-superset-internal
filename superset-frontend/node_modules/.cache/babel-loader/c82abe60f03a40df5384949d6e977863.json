{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { SupersetClient, logging } from '@superset-ui/core';\nimport parseCookie from 'src/utils/parseCookie';\nfunction getDefaultConfiguration() {var _context, _window, _window$location, _window2, _window2$location, _window$location2;\n  const csrfNode = document.querySelector('#csrf_token');\n  const csrfToken = csrfNode == null ? void 0 : csrfNode.value;\n  // when using flask-jwt-extended csrf is set in cookies\n  const cookieCSRFToken = parseCookie().csrf_access_token || '';\n  return {\n    protocol: _includesInstanceProperty(_context = ['http:', 'https:']).call(_context, (_window = window) == null ? void 0 : (_window$location = _window.location) == null ? void 0 : _window$location.protocol) ? (_window2 =\n    window) == null ? void 0 : (_window2$location = _window2.location) == null ? void 0 : _window2$location.protocol :\n    undefined,\n    host: ((_window$location2 = window.location) == null ? void 0 : _window$location2.host) || '',\n    csrfToken: csrfToken || cookieCSRFToken };\n\n}\nexport default function setupClient(customConfig) {if (customConfig === void 0) {customConfig = {};}\n  SupersetClient.configure({\n    ...getDefaultConfiguration(),\n    ...customConfig }).\n\n  init().\n  catch((error) => {\n    logging.warn('Error initializing SupersetClient', error);\n  });\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(getDefaultConfiguration, \"getDefaultConfiguration\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/setup/setupClient.ts\");reactHotLoader.register(setupClient, \"setupClient\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/setup/setupClient.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"wYAAA;;;;;;;;;;;;;;;;;;AAkBA,SAASA,cAAT,EAAyBC,OAAzB,QAAsD,mBAAtD;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AAEA,SAASC,uBAAT,GAAgC;EAC9B,MAAMC,QAAQ,GAAGC,QAAQ,CAACC,aAAT,CAAyC,aAAzC,CAAjB;EACA,MAAMC,SAAS,GAAGH,QAAH,oBAAGA,QAAQ,CAAEI,KAA5B;EAEA;EACA,MAAMC,eAAe,GAAGP,WAAW,GAAGQ,iBAAd,IAAmC,EAA3D;EAEA,OAAO;IACLC,QAAQ,EAAE,sCAAC,OAAD,EAAU,QAAV,6BAA6BC,MAA7B,yCAA6B,QAAQC,QAArC,qBAA6B,iBAAkBF,QAA/C;IACLC,MADK,0CACL,SAAQC,QADH,qBACL,kBAAkBF,QADb;IAENG,SAHC;IAILC,IAAI,EAAE,4BAAM,CAACF,QAAP,uCAAiBE,IAAjB,KAAyB,EAJ1B;IAKLR,SAAS,EAAEA,SAAS,IAAIE,eALnB,EAAP;;AAOD;AAED,eAAc,SAAUO,WAAV,CAAsBC,YAAtB,EAA8D,KAAxCA,YAAwC,cAAxCA,YAAwC,GAAF,EAAE;EAC1EjB,cAAc,CAACkB,SAAf,CAAyB;IACvB,GAAGf,uBAAuB,EADH;IAEvB,GAAGc,YAFoB,EAAzB;;EAIGE,IAJH;EAKGC,KALH,CAKS,MAAK,KAAG;IACbnB,OAAO,CAACoB,IAAR,CAAa,mCAAb,EAAkDC,KAAlD;EACD,CAPH;AAQD,C,iLAzBQnB,uB,kJAgBea,W","names":["SupersetClient","logging","parseCookie","getDefaultConfiguration","csrfNode","document","querySelector","csrfToken","value","cookieCSRFToken","csrf_access_token","protocol","window","location","undefined","host","setupClient","customConfig","configure","init","catch","warn","error"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/setup/setupClient.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { SupersetClient, logging, ClientConfig } from '@superset-ui/core';\nimport parseCookie from 'src/utils/parseCookie';\n\nfunction getDefaultConfiguration(): ClientConfig {\n  const csrfNode = document.querySelector<HTMLInputElement>('#csrf_token');\n  const csrfToken = csrfNode?.value;\n\n  // when using flask-jwt-extended csrf is set in cookies\n  const cookieCSRFToken = parseCookie().csrf_access_token || '';\n\n  return {\n    protocol: ['http:', 'https:'].includes(window?.location?.protocol)\n      ? (window?.location?.protocol as 'http:' | 'https:')\n      : undefined,\n    host: window.location?.host || '',\n    csrfToken: csrfToken || cookieCSRFToken,\n  };\n}\n\nexport default function setupClient(customConfig: Partial<ClientConfig> = {}) {\n  SupersetClient.configure({\n    ...getDefaultConfiguration(),\n    ...customConfig,\n  })\n    .init()\n    .catch(error => {\n      logging.warn('Error initializing SupersetClient', error);\n    });\n}\n"]},"metadata":{},"sourceType":"module"}