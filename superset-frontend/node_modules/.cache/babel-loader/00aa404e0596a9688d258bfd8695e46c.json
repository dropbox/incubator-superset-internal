{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ExtensibleFunction } from '../models';\nimport { isRequired } from '../utils';\nimport stringifyTimeInput from './utils/stringifyTimeInput';\nexport const PREVIEW_TIME = new Date(Date.UTC(2017, 1, 14, 11, 22, 33));\nclass TimeFormatter extends ExtensibleFunction {\n\n\n\n\n\n  constructor(config) {\n    super((value) => this.format(value));this.id = void 0;this.label = void 0;this.description = void 0;this.formatFunc = void 0;this.useLocalTime = void 0;\n    const { id = isRequired('config.id'), label, description = '', formatFunc = isRequired('config.formatFunc'), useLocalTime = false } = config;\n    this.id = id;\n    this.label = label != null ? label : id;\n    this.description = description;\n    this.formatFunc = formatFunc;\n    this.useLocalTime = useLocalTime;\n  }\n  format(value) {\n    return stringifyTimeInput(value, (time) => this.formatFunc(time));\n  }\n  preview(value) {if (value === void 0) {value = PREVIEW_TIME;}\n    return `${value.toUTCString()} => ${this.format(value)}`;\n  }}\n\nexport default TimeFormatter;","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,SAASA,kBAAT,QAAmC,WAAnC;AACA,SAASC,UAAT,QAA2B,UAA3B;AAEA,OAAOC,kBAAP,MAA+B,4BAA/B;AAEA,OAAO,MAAMC,YAAY,GAAG,IAAIC,IAAJ,CAASA,IAAI,CAACC,GAAL,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB,EAAsB,EAAtB,EAA0B,EAA1B,EAA8B,EAA9B,CAAT,CAArB;AAQP,MAAMC,aAAN,SAA4BN,kBAA5B,CAA8C;;;;;;EAW5CO,YAAYC,MAAZ,EAMC;IACC,MAAM,CAACC,KAAD,KAA6C,KAAKC,MAAL,CAAYD,KAAZ,CAAnD,EADD,KAhBDE,EAgBC,eAdDC,KAcC,eAZDC,WAYC,eAVDC,UAUC,eARDC,YAQC;IAGC,MAAM,EACJJ,EAAE,GAAGV,UAAU,CAAC,WAAD,CADX,EAEJW,KAFI,EAGJC,WAAW,GAAG,EAHV,EAIJC,UAAU,GAAGb,UAAU,CAAC,mBAAD,CAJnB,EAKJc,YAAY,GAAG,KALX,KAMFP,MANJ;IAQA,KAAKG,EAAL,GAAUA,EAAV;IACA,KAAKC,KAAL,GAAaA,KAAb,WAAaA,KAAb,GAAsBD,EAAtB;IACA,KAAKE,WAAL,GAAmBA,WAAnB;IACA,KAAKC,UAAL,GAAkBA,UAAlB;IACA,KAAKC,YAAL,GAAoBA,YAApB;EACD;EAEDL,MAAM,CAACD,KAAD,EAAwC;IAC5C,OAAOP,kBAAkB,CAACO,KAAD,EAAQ,KAAI,KAAI,KAAKK,UAAL,CAAgBE,IAAhB,CAAhB,CAAzB;EACD;EAEDC,OAAO,CAACR,KAAD,EAA2B,KAA1BA,KAA0B,cAA1BA,KAA0B,GAAZN,YAAY;IAChC,OAAO,GAAGM,KAAK,CAACS,WAAN,EAAmB,OAAO,KAAKR,MAAL,CAAYD,KAAZ,CAAkB,EAAtD;EACD,CAzC2C;;AA4C9C,eAAeH,aAAf","names":["ExtensibleFunction","isRequired","stringifyTimeInput","PREVIEW_TIME","Date","UTC","TimeFormatter","constructor","config","value","format","id","label","description","formatFunc","useLocalTime","time","preview","toUTCString"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/packages/superset-ui-core/src/time-format/TimeFormatter.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ExtensibleFunction } from '../models';\nimport { isRequired } from '../utils';\nimport { TimeFormatFunction } from './types';\nimport stringifyTimeInput from './utils/stringifyTimeInput';\n\nexport const PREVIEW_TIME = new Date(Date.UTC(2017, 1, 14, 11, 22, 33));\n\n// Use type augmentation to indicate that\n// an instance of TimeFormatter is also a function\ninterface TimeFormatter {\n  (value: Date | number | null | undefined): string;\n}\n\nclass TimeFormatter extends ExtensibleFunction {\n  id: string;\n\n  label: string;\n\n  description: string;\n\n  formatFunc: TimeFormatFunction;\n\n  useLocalTime: boolean;\n\n  constructor(config: {\n    id: string;\n    label?: string;\n    description?: string;\n    formatFunc: TimeFormatFunction;\n    useLocalTime?: boolean;\n  }) {\n    super((value: Date | number | null | undefined) => this.format(value));\n\n    const {\n      id = isRequired('config.id'),\n      label,\n      description = '',\n      formatFunc = isRequired('config.formatFunc'),\n      useLocalTime = false,\n    } = config;\n\n    this.id = id;\n    this.label = label ?? id;\n    this.description = description;\n    this.formatFunc = formatFunc;\n    this.useLocalTime = useLocalTime;\n  }\n\n  format(value: Date | number | null | undefined) {\n    return stringifyTimeInput(value, time => this.formatFunc(time));\n  }\n\n  preview(value: Date = PREVIEW_TIME) {\n    return `${value.toUTCString()} => ${this.format(value)}`;\n  }\n}\n\nexport default TimeFormatter;\n"]},"metadata":{},"sourceType":"module"}