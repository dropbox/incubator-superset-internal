{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useState } from 'react';\nimport { styled, logging } from '@superset-ui/core';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst ImageContainer = styled.div`\n  background-image: url(${(_ref) => {let { src } = _ref;return src;}});\n  background-size: cover;\n  background-position: center ${(_ref2) => {let { position } = _ref2;return position;}};\n  display: inline-block;\n  height: calc(100% - 1px);\n  width: calc(100% - 2px);\n  margin: 1px 1px 0 1px;\n`;\nexport default function ImageLoader(_ref3) {let { src, fallback, isLoading, position, ...rest } = _ref3;\n  const [imgSrc, setImgSrc] = useState(fallback);\n  useEffect(() => {\n    if (src) {\n      fetch(src).\n      then((response) => response.blob()).\n      then((blob) => {\n        if (/image/.test(blob.type)) {\n          const imgURL = URL.createObjectURL(blob);\n          setImgSrc(imgURL);\n        }\n      }).\n      catch((errMsg) => {\n        logging.error(errMsg);\n        setImgSrc(fallback);\n      });\n    }\n    return () => {\n      // theres a very brief period where isLoading is false and this component is about to unmount\n      // where the stale imgSrc is briefly rendered. Setting imgSrc to fallback smoothes the transition.\n      setImgSrc(fallback);\n    };\n  }, [src, fallback]);\n  return ___EmotionJSX(ImageContainer, _extends({ src: isLoading ? fallback : imgSrc }, rest, { position: position }));\n}","map":{"version":3,"mappings":"+DAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,MAAT,EAAiBC,OAAjB,QAAgC,mBAAhC,C;AAQA,MAAMC,cAAc,GAAGF,MAAM,CAACG,GAAwB;0BAC5B,eAAC,EAAEC,GAAF,EAAD,eAAaA,GAAb,EAAgB;;gCAEV,gBAAC,EAAEC,QAAF,EAAD,gBAAkBA,QAAlB,EAA0B;;;;;CAH1D;AAoBA,eAAc,SAAUC,WAAV,QAMK,KANiB,EAClCF,GADkC,EAElCG,QAFkC,EAGlCC,SAHkC,EAIlCH,QAJkC,EAKlC,GAAGI,IAL+B,EAMjB;EACjB,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAASQ,QAAT,CAApC;EAEAT,SAAS,CAAC,MAAK;IACb,IAAIM,GAAJ,EAAS;MACPQ,KAAK,CAACR,GAAD,CAAL;MACGS,IADH,CACQ,SAAQ,KAAIC,QAAQ,CAACC,IAAT,EADpB;MAEGF,IAFH,CAEQ,KAAI,KAAG;QACX,IAAI,QAAQG,IAAR,CAAaD,IAAI,CAACE,IAAlB,CAAJ,EAA6B;UAC3B,MAAMC,MAAM,GAAGC,GAAG,CAACC,eAAJ,CAAoBL,IAApB,CAAf;UACAJ,SAAS,CAACO,MAAD,CAAT;QACD;MACF,CAPH;MAQGG,KARH,CAQS,OAAM,KAAG;QACdpB,OAAO,CAACqB,KAAR,CAAcC,MAAd;QACAZ,SAAS,CAACJ,QAAD,CAAT;MACD,CAXH;IAYD;IAED,OAAO,MAAK;MACV;MACA;MACAI,SAAS,CAACJ,QAAD,CAAT;IACD,CAJD;EAKD,CArBQ,EAqBN,CAACH,GAAD,EAAMG,QAAN,CArBM,CAAT;EAuBA,OACE,cAAC,cAAD,aACE,GAAG,EAAEC,SAAS,GAAGD,QAAH,GAAcG,MAD9B,IAEMD,IAFN,IAGE,QAAQ,EAAEJ,QAHZ,IADF;AAOD","names":["React","useEffect","useState","styled","logging","ImageContainer","div","src","position","ImageLoader","fallback","isLoading","rest","imgSrc","setImgSrc","fetch","then","response","blob","test","type","imgURL","URL","createObjectURL","catch","error","errMsg"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/components/ListViewCard/ImageLoader.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useState } from 'react';\nimport { styled, logging } from '@superset-ui/core';\n\nexport type BackgroundPosition = 'top' | 'bottom';\ninterface ImageContainerProps {\n  src: string;\n  position: BackgroundPosition;\n}\n\nconst ImageContainer = styled.div<ImageContainerProps>`\n  background-image: url(${({ src }) => src});\n  background-size: cover;\n  background-position: center ${({ position }) => position};\n  display: inline-block;\n  height: calc(100% - 1px);\n  width: calc(100% - 2px);\n  margin: 1px 1px 0 1px;\n`;\ninterface ImageLoaderProps\n  extends React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLDivElement>,\n    HTMLDivElement\n  > {\n  fallback: string;\n  src: string;\n  isLoading?: boolean;\n  position: BackgroundPosition;\n}\n\nexport default function ImageLoader({\n  src,\n  fallback,\n  isLoading,\n  position,\n  ...rest\n}: ImageLoaderProps) {\n  const [imgSrc, setImgSrc] = useState<string>(fallback);\n\n  useEffect(() => {\n    if (src) {\n      fetch(src)\n        .then(response => response.blob())\n        .then(blob => {\n          if (/image/.test(blob.type)) {\n            const imgURL = URL.createObjectURL(blob);\n            setImgSrc(imgURL);\n          }\n        })\n        .catch(errMsg => {\n          logging.error(errMsg);\n          setImgSrc(fallback);\n        });\n    }\n\n    return () => {\n      // theres a very brief period where isLoading is false and this component is about to unmount\n      // where the stale imgSrc is briefly rendered. Setting imgSrc to fallback smoothes the transition.\n      setImgSrc(fallback);\n    };\n  }, [src, fallback]);\n\n  return (\n    <ImageContainer\n      src={isLoading ? fallback : imgSrc}\n      {...rest}\n      position={position}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}