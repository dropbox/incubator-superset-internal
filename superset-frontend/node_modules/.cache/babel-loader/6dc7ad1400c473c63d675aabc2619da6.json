{"ast":null,"code":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport tinycolor from 'tinycolor2';\nconst rgbRegex = /^rgb\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*\\)$/;\nexport function getContrastingColor(color, thresholds) {if (thresholds === void 0) {thresholds = 186;}\n  let r = 0;\n  let g = 0;\n  let b = 0;\n  if (color.length > 7) {\n    // rgb\n    const matchColor = rgbRegex.exec(color);\n    if (!matchColor) {\n      throw new Error(`Invalid color: ${color}`);\n    }\n    r = parseInt(matchColor[1], 10);\n    g = parseInt(matchColor[2], 10);\n    b = parseInt(matchColor[3], 10);\n  } else\n  {\n    // hex\n    let hex = color;\n    if (hex.startsWith('#')) {\n      hex = hex.substring(1);\n    }\n    // #FFF\n    if (hex.length === 3) {\n      hex = [hex[0], hex[0], hex[1], hex[1], hex[2], hex[2]].join('');\n    }\n    if (hex.length !== 6) {\n      throw new Error(`Invalid color: ${color}`);\n    }\n    r = parseInt(hex.slice(0, 2), 16);\n    g = parseInt(hex.slice(2, 4), 16);\n    b = parseInt(hex.slice(4, 6), 16);\n  }\n  return r * 0.299 + g * 0.587 + b * 0.114 > thresholds ? '#000' : '#FFF';\n}\nexport function getAnalogousColors(colors, results) {\n  const generatedColors = [];\n  // This is to solve the problem that the first three values generated by tinycolor.analogous\n  // may have the same or very close colors.\n  const ext = 3;\n  const analogousColors = colors.map((color) => {\n    const result = tinycolor(color).analogous(results + ext);\n    return result.slice(ext);\n  });\n  // [[A, AA, AAA], [B, BB, BBB]] => [A, B, AA, BB, AAA, BBB]\n  while ((_analogousColors = analogousColors[analogousColors.length - 1]) != null && _analogousColors.length) {var _analogousColors;\n    analogousColors.forEach((colors) => {\n      const color = colors.shift();\n      generatedColors.push(color.toHexString());\n    });\n  }\n  return generatedColors;\n}\nexport function addAlpha(color, opacity) {\n  // opacity value should be between 0 and 1.\n  if (opacity > 1 || opacity < 0) {\n    throw new Error(`The opacity should between 0 and 1, but got: ${opacity}`);\n  }\n  // the alpha value is between 00 - FF\n  const alpha = `0${Math.round(opacity * 255).\n  toString(16).\n  toUpperCase()}`.slice(-2);\n  return `${color}${alpha}`;\n}","map":{"version":3,"mappings":"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","names":["tinycolor","rgbRegex","getContrastingColor","color","thresholds","r","g","b","length","matchColor","exec","Error","parseInt","hex","startsWith","substring","join","slice","getAnalogousColors","colors","results","generatedColors","ext","analogousColors","map","result","analogous","forEach","shift","push","toHexString","addAlpha","opacity","alpha","Math","round","toString","toUpperCase"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/packages/superset-ui-core/src/color/utils.ts"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport tinycolor from 'tinycolor2';\n\nconst rgbRegex = /^rgb\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*\\)$/;\nexport function getContrastingColor(color: string, thresholds = 186) {\n  let r = 0;\n  let g = 0;\n  let b = 0;\n  if (color.length > 7) {\n    // rgb\n    const matchColor = rgbRegex.exec(color);\n    if (!matchColor) {\n      throw new Error(`Invalid color: ${color}`);\n    }\n    r = parseInt(matchColor[1], 10);\n    g = parseInt(matchColor[2], 10);\n    b = parseInt(matchColor[3], 10);\n  } else {\n    // hex\n    let hex = color;\n    if (hex.startsWith('#')) {\n      hex = hex.substring(1);\n    }\n    // #FFF\n    if (hex.length === 3) {\n      hex = [hex[0], hex[0], hex[1], hex[1], hex[2], hex[2]].join('');\n    }\n    if (hex.length !== 6) {\n      throw new Error(`Invalid color: ${color}`);\n    }\n    r = parseInt(hex.slice(0, 2), 16);\n    g = parseInt(hex.slice(2, 4), 16);\n    b = parseInt(hex.slice(4, 6), 16);\n  }\n\n  return r * 0.299 + g * 0.587 + b * 0.114 > thresholds ? '#000' : '#FFF';\n}\n\nexport function getAnalogousColors(colors: string[], results: number) {\n  const generatedColors: string[] = [];\n  // This is to solve the problem that the first three values generated by tinycolor.analogous\n  // may have the same or very close colors.\n  const ext = 3;\n  const analogousColors = colors.map(color => {\n    const result = tinycolor(color).analogous(results + ext);\n    return result.slice(ext);\n  });\n\n  // [[A, AA, AAA], [B, BB, BBB]] => [A, B, AA, BB, AAA, BBB]\n  while (analogousColors[analogousColors.length - 1]?.length) {\n    analogousColors.forEach(colors => {\n      const color = colors.shift() as tinycolor.Instance;\n      generatedColors.push(color.toHexString());\n    });\n  }\n\n  return generatedColors;\n}\n\nexport function addAlpha(color: string, opacity: number): string {\n  // opacity value should be between 0 and 1.\n  if (opacity > 1 || opacity < 0) {\n    throw new Error(`The opacity should between 0 and 1, but got: ${opacity}`);\n  }\n  // the alpha value is between 00 - FF\n  const alpha = `0${Math.round(opacity * 255)\n    .toString(16)\n    .toUpperCase()}`.slice(-2);\n\n  return `${color}${alpha}`;\n}\n"]},"metadata":{},"sourceType":"module"}