{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { getChartIdAndColumnFromFilterKey } from './getDashboardFilterKey';\n\nexport default function getSelectedChartIdForFilterScopeTree(_ref)\n\n\n{let { activeFilterField, checkedFilterFields } = _ref;\n  // we don't apply filter on filter_box itself, so we will disable\n  // checkbox in filter scope selector.\n  // this function returns chart id based on current filter scope selector local state:\n  // 1. if in single-edit mode, return the chart id for selected filter field.\n  // 2. if in multi-edit mode, if all filter fields are from same chart id,\n  // return the single chart id.\n  // otherwise, there is no chart to disable.\n  if (activeFilterField) {\n    return getChartIdAndColumnFromFilterKey(activeFilterField).chartId;\n  }\n\n  if (checkedFilterFields.length) {\n    const { chartId } = getChartIdAndColumnFromFilterKey(\n    checkedFilterFields[0]);\n\n\n    if (\n    checkedFilterFields.some(\n    (filterKey) =>\n    getChartIdAndColumnFromFilterKey(filterKey).chartId !== chartId))\n\n    {\n      return null;\n    }\n    return chartId;\n  }\n\n  return null;\n}","map":{"version":3,"names":["getChartIdAndColumnFromFilterKey","getSelectedChartIdForFilterScopeTree","activeFilterField","checkedFilterFields","chartId","length","some","filterKey"],"sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/util/getSelectedChartIdForFilterScopeTree.js"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { getChartIdAndColumnFromFilterKey } from './getDashboardFilterKey';\n\nexport default function getSelectedChartIdForFilterScopeTree({\n  activeFilterField,\n  checkedFilterFields,\n}) {\n  // we don't apply filter on filter_box itself, so we will disable\n  // checkbox in filter scope selector.\n  // this function returns chart id based on current filter scope selector local state:\n  // 1. if in single-edit mode, return the chart id for selected filter field.\n  // 2. if in multi-edit mode, if all filter fields are from same chart id,\n  // return the single chart id.\n  // otherwise, there is no chart to disable.\n  if (activeFilterField) {\n    return getChartIdAndColumnFromFilterKey(activeFilterField).chartId;\n  }\n\n  if (checkedFilterFields.length) {\n    const { chartId } = getChartIdAndColumnFromFilterKey(\n      checkedFilterFields[0],\n    );\n\n    if (\n      checkedFilterFields.some(\n        filterKey =>\n          getChartIdAndColumnFromFilterKey(filterKey).chartId !== chartId,\n      )\n    ) {\n      return null;\n    }\n    return chartId;\n  }\n\n  return null;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,gCAAT,QAAiD,yBAAjD;;AAEA,eAAe,SAASC,oCAAT;;;AAGZ,KAH0D,EAC3DC,iBAD2D,EAE3DC,mBAF2D,EAG1D;EACD;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAID,iBAAJ,EAAuB;IACrB,OAAOF,gCAAgC,CAACE,iBAAD,CAAhC,CAAoDE,OAA3D;EACD;;EAED,IAAID,mBAAmB,CAACE,MAAxB,EAAgC;IAC9B,MAAM,EAAED,OAAF,KAAcJ,gCAAgC;IAClDG,mBAAmB,CAAC,CAAD,CAD+B,CAApD;;;IAIA;IACEA,mBAAmB,CAACG,IAApB;IACE,CAAAC,SAAS;IACPP,gCAAgC,CAACO,SAAD,CAAhC,CAA4CH,OAA5C,KAAwDA,OAF5D,CADF;;IAKE;MACA,OAAO,IAAP;IACD;IACD,OAAOA,OAAP;EACD;;EAED,OAAO,IAAP;AACD"},"metadata":{},"sourceType":"module"}