{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { getChartIdAndColumnFromFilterKey } from './getDashboardFilterKey';\nexport default function getRevertedFilterScope(_ref) {let { checked = [], filterFields = [], filterScopeMap = {} } = _ref;\n  const checkedChartIdsByFilterField = checked.reduce((map, value) => {\n    const [chartId, filterField] = value.split(':');\n    return {\n      ...map,\n      [filterField]: (map[filterField] || []).concat(parseInt(chartId, 10)) };\n\n  }, {});\n  return filterFields.reduce((map, filterField) => {\n    const { chartId } = getChartIdAndColumnFromFilterKey(filterField);\n    // force display filter_box chart as unchecked, but show checkbox as disabled\n    const updatedCheckedIds = (checkedChartIdsByFilterField[filterField] || []).filter((id) => id !== chartId);\n    return {\n      ...map,\n      [filterField]: {\n        ...filterScopeMap[filterField],\n        checked: updatedCheckedIds } };\n\n\n  }, {});\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(getRevertedFilterScope, \"getRevertedFilterScope\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/util/getRevertedFilterScope.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAkBA,SAASA,gCAAT,QAAiD,yBAAjD;AAYA,eAAc,SAAUC,sBAAV,OAIc,KAJmB,EAC7CC,OAAO,GAAG,EADmC,EAE7CC,YAAY,GAAG,EAF8B,EAG7CC,cAAc,GAAG,EAH4B,EAInB;EAC1B,MAAMC,4BAA4B,GAAGH,OAAO,CAACI,MAAR,CACnC,CAACC,GAAD,EAAMC,KAAN,KAAe;IACb,MAAM,CAACC,OAAD,EAAUC,WAAV,IAAyBF,KAAK,CAACG,KAAN,CAAY,GAAZ,CAA/B;IACA,OAAO;MACL,GAAGJ,GADE;MAEL,CAACG,WAAD,GAAe,CAACH,GAAG,CAACG,WAAD,CAAH,IAAoB,EAArB,EAAyBE,MAAzB,CAAgCC,QAAQ,CAACJ,OAAD,EAAU,EAAV,CAAxC,CAFV,EAAP;;EAID,CAPkC,EAQnC,EARmC,CAArC;EAWA,OAAON,YAAY,CAACG,MAAb,CAAoC,CAACC,GAAD,EAAMG,WAAN,KAAqB;IAC9D,MAAM,EAAED,OAAF,KAAcT,gCAAgC,CAACU,WAAD,CAApD;IACA;IACA,MAAMI,iBAAiB,GAAG,CACxBT,4BAA4B,CAACK,WAAD,CAA5B,IAA6C,EADrB,EAExBK,MAFwB,CAEjB,GAAE,KAAIC,EAAE,KAAKP,OAFI,CAA1B;IAIA,OAAO;MACL,GAAGF,GADE;MAEL,CAACG,WAAD,GAAe;QACb,GAAGN,cAAc,CAACM,WAAD,CADJ;QAEbR,OAAO,EAAEY,iBAFI,EAFV,EAAP;;;EAOD,CAdM,EAcJ,EAdI,CAAP;AAeD,C,iLA/BuBb,sB","names":["getChartIdAndColumnFromFilterKey","getRevertedFilterScope","checked","filterFields","filterScopeMap","checkedChartIdsByFilterField","reduce","map","value","chartId","filterField","split","concat","parseInt","updatedCheckedIds","filter","id"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/util/getRevertedFilterScope.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { getChartIdAndColumnFromFilterKey } from './getDashboardFilterKey';\n\ninterface FilterScopeMap {\n  [key: string]: number[];\n}\n\ninterface GetRevertFilterScopeProps {\n  checked: string[];\n  filterFields: string[];\n  filterScopeMap: FilterScopeMap;\n}\n\nexport default function getRevertedFilterScope({\n  checked = [],\n  filterFields = [],\n  filterScopeMap = {},\n}: GetRevertFilterScopeProps) {\n  const checkedChartIdsByFilterField = checked.reduce<FilterScopeMap>(\n    (map, value) => {\n      const [chartId, filterField] = value.split(':');\n      return {\n        ...map,\n        [filterField]: (map[filterField] || []).concat(parseInt(chartId, 10)),\n      };\n    },\n    {},\n  );\n\n  return filterFields.reduce<FilterScopeMap>((map, filterField) => {\n    const { chartId } = getChartIdAndColumnFromFilterKey(filterField);\n    // force display filter_box chart as unchecked, but show checkbox as disabled\n    const updatedCheckedIds = (\n      checkedChartIdsByFilterField[filterField] || []\n    ).filter(id => id !== chartId);\n\n    return {\n      ...map,\n      [filterField]: {\n        ...filterScopeMap[filterField],\n        checked: updatedCheckedIds,\n      },\n    };\n  }, {});\n}\n"]},"metadata":{},"sourceType":"module"}