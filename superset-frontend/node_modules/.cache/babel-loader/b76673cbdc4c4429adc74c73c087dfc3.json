{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * Checks if a given item matches the ITableColumn interface\n * @param item Object to check if it matches the ITableColumn interface\n * @returns boolean true if matches interface\n */\nexport const isITableColumn = (item) => {\n  let match = true;\n  const BASE_ERROR = 'The object provided to isITableColumn does match the interface.';\n  if (typeof (item == null ? void 0 : item.name) !== 'string') {\n    match = false;\n    // eslint-disable-next-line no-console\n    console.error(`${BASE_ERROR} The property 'name' is required and must be a string`);\n  }\n  if (match && typeof (item == null ? void 0 : item.type) !== 'string') {\n    match = false;\n    // eslint-disable-next-line no-console\n    console.error(`${BASE_ERROR} The property 'type' is required and must be a string`);\n  }\n  return match;\n};\n/**\n * Checks if a given item matches the isIDatabsetTable interface\n * @param item Object to check if it matches the isIDatabsetTable interface\n * @returns boolean true if matches interface\n */\nexport const isIDatabaseTable = (item) => {\n  let match = true;\n  if (typeof (item == null ? void 0 : item.name) !== 'string') {\n    match = false;\n  }\n  if (match && !Array.isArray(item.columns)) {\n    match = false;\n  }\n  if (match && item.columns.length > 0) {\n    const invalid = item.columns.some((column, index) => {\n      const valid = isITableColumn(column);\n      if (!valid) {\n        // eslint-disable-next-line no-console\n        console.error(`The provided object does not match the IDatabaseTable interface. columns[${index}] is invalid and does not match the ITableColumn interface`);\n      }\n      return !valid;\n    });\n    match = !invalid;\n  }\n  return match;\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAiCA;;;;;AAKA,OAAO,MAAMA,cAAc,GAAG,CAACC,IAAD,KAAuB;EACnD,IAAIC,KAAK,GAAG,IAAZ;EACA,MAAMC,UAAU,GACd,iEADF;EAEA,IAAI,QAAOF,IAAP,oBAAOA,IAAI,CAAEG,IAAb,MAAsB,QAA1B,EAAoC;IAClCF,KAAK,GAAG,KAAR;IACA;IACAG,OAAO,CAACC,KAAR,CACE,GAAGH,UAAU,uDADf;EAGD;EACD,IAAID,KAAK,IAAI,QAAOD,IAAP,oBAAOA,IAAI,CAAEM,IAAb,MAAsB,QAAnC,EAA6C;IAC3CL,KAAK,GAAG,KAAR;IACA;IACAG,OAAO,CAACC,KAAR,CACE,GAAGH,UAAU,uDADf;EAGD;EACD,OAAOD,KAAP;AACD,CAnBM;AA0BP;;;;;AAKA,OAAO,MAAMM,gBAAgB,GAAG,CAACP,IAAD,KAAuB;EACrD,IAAIC,KAAK,GAAG,IAAZ;EACA,IAAI,QAAOD,IAAP,oBAAOA,IAAI,CAAEG,IAAb,MAAsB,QAA1B,EAAoC;IAClCF,KAAK,GAAG,KAAR;EACD;EACD,IAAIA,KAAK,IAAI,CAACO,KAAK,CAACC,OAAN,CAAcT,IAAI,CAACU,OAAnB,CAAd,EAA2C;IACzCT,KAAK,GAAG,KAAR;EACD;EACD,IAAIA,KAAK,IAAID,IAAI,CAACU,OAAL,CAAaC,MAAb,GAAsB,CAAnC,EAAsC;IACpC,MAAMC,OAAO,GAAGZ,IAAI,CAACU,OAAL,CAAaG,IAAb,CAAkB,CAACC,MAAD,EAAcC,KAAd,KAA+B;MAC/D,MAAMC,KAAK,GAAGjB,cAAc,CAACe,MAAD,CAA5B;MACA,IAAI,CAACE,KAAL,EAAY;QACV;QACAZ,OAAO,CAACC,KAAR,CACE,4EAA4EU,KAAK,4DADnF;MAGD;MACD,OAAO,CAACC,KAAR;IACD,CATe,CAAhB;IAUAf,KAAK,GAAG,CAACW,OAAT;EACD;EACD,OAAOX,KAAP;AACD,CAtBM","names":["isITableColumn","item","match","BASE_ERROR","name","console","error","type","isIDatabaseTable","Array","isArray","columns","length","invalid","some","column","index","valid"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/features/datasets/AddDataset/DatasetPanel/types.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/**\n * Interface for table columns dataset\n */\nexport interface ITableColumn {\n  /**\n   * Name of the column\n   */\n  name: string;\n  /**\n   * Datatype of the column\n   */\n  type: string;\n}\n\n/**\n * Checks if a given item matches the ITableColumn interface\n * @param item Object to check if it matches the ITableColumn interface\n * @returns boolean true if matches interface\n */\nexport const isITableColumn = (item: any): boolean => {\n  let match = true;\n  const BASE_ERROR =\n    'The object provided to isITableColumn does match the interface.';\n  if (typeof item?.name !== 'string') {\n    match = false;\n    // eslint-disable-next-line no-console\n    console.error(\n      `${BASE_ERROR} The property 'name' is required and must be a string`,\n    );\n  }\n  if (match && typeof item?.type !== 'string') {\n    match = false;\n    // eslint-disable-next-line no-console\n    console.error(\n      `${BASE_ERROR} The property 'type' is required and must be a string`,\n    );\n  }\n  return match;\n};\n\nexport interface IDatabaseTable {\n  name: string;\n  columns: ITableColumn[];\n}\n\n/**\n * Checks if a given item matches the isIDatabsetTable interface\n * @param item Object to check if it matches the isIDatabsetTable interface\n * @returns boolean true if matches interface\n */\nexport const isIDatabaseTable = (item: any): boolean => {\n  let match = true;\n  if (typeof item?.name !== 'string') {\n    match = false;\n  }\n  if (match && !Array.isArray(item.columns)) {\n    match = false;\n  }\n  if (match && item.columns.length > 0) {\n    const invalid = item.columns.some((column: any, index: number) => {\n      const valid = isITableColumn(column);\n      if (!valid) {\n        // eslint-disable-next-line no-console\n        console.error(\n          `The provided object does not match the IDatabaseTable interface. columns[${index}] is invalid and does not match the ITableColumn interface`,\n        );\n      }\n      return !valid;\n    });\n    match = !invalid;\n  }\n  return match;\n};\n"]},"metadata":{},"sourceType":"module"}