{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nexport const stopPeriodicRender = (refreshTimer) => {\n  if (refreshTimer) {\n    clearInterval(refreshTimer);\n  }\n};\nexport default function setPeriodicRunner(_ref) {let { interval = 0, periodicRender, refreshTimer } = _ref;\n  stopPeriodicRender(refreshTimer);\n  if (interval > 0) {\n    return setInterval(periodicRender, interval);\n  }\n  return 0;\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(stopPeriodicRender, \"stopPeriodicRender\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/util/setPeriodicRunner.ts\");reactHotLoader.register(setPeriodicRunner, \"setPeriodicRunner\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/util/setPeriodicRunner.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAO,MAAMA,kBAAkB,GAAG,CAACC,YAAD,KAA0B;EAC1D,IAAIA,YAAJ,EAAkB;IAChBC,aAAa,CAACD,YAAD,CAAb;EACD;AACF,CAJM;AAYP,eAAc,SAAUE,iBAAV,OAIW,KAJiB,EACxCC,QAAQ,GAAG,CAD6B,EAExCC,cAFwC,EAGxCJ,YAHwC,EAIjB;EACvBD,kBAAkB,CAACC,YAAD,CAAlB;EAEA,IAAIG,QAAQ,GAAG,CAAf,EAAkB;IAChB,OAAOE,WAAW,CAACD,cAAD,EAAiBD,QAAjB,CAAlB;EACD;EACD,OAAO,CAAP;AACD,C,iLAvBYJ,kB,4JAYWG,iB","names":["stopPeriodicRender","refreshTimer","clearInterval","setPeriodicRunner","interval","periodicRender","setInterval"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/util/setPeriodicRunner.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nexport const stopPeriodicRender = (refreshTimer?: number) => {\n  if (refreshTimer) {\n    clearInterval(refreshTimer);\n  }\n};\n\ninterface SetPeriodicRunnerProps {\n  interval?: number;\n  periodicRender: TimerHandler;\n  refreshTimer?: number;\n}\n\nexport default function setPeriodicRunner({\n  interval = 0,\n  periodicRender,\n  refreshTimer,\n}: SetPeriodicRunnerProps) {\n  stopPeriodicRender(refreshTimer);\n\n  if (interval > 0) {\n    return setInterval(periodicRender, interval);\n  }\n  return 0;\n}\n"]},"metadata":{},"sourceType":"module"}