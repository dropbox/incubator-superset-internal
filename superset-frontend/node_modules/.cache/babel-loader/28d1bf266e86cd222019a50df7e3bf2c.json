{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect, useReducer, useCallback, useMemo } from 'react';\nimport { t } from '@superset-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport { addReport, editReport } from 'src/reports/actions/reports';\nimport Alert from 'src/components/Alert';\nimport TimezoneSelector from 'src/components/TimezoneSelector';\nimport LabeledErrorBoundInput from 'src/components/Form/LabeledErrorBoundInput';\nimport Icons from 'src/components/Icons';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { NOTIFICATION_FORMATS } from 'src/reports/types';\nimport { reportSelector } from 'src/views/CRUD/hooks';\nimport { CreationMethod } from './HeaderReportDropdown';\nimport { antDErrorAlertStyles, StyledModal, StyledTopSection, StyledBottomSection, StyledIconWrapper, StyledScheduleTitle, StyledCronPicker, StyledCronError, noBottomMargin, StyledFooterButton, TimezoneHeaderStyle, SectionHeaderStyle, StyledMessageContentTitle, StyledRadio, StyledRadioGroup } from './styles';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst TEXT_BASED_VISUALIZATION_TYPES = [\n'pivot_table',\n'pivot_table_v2',\n'table',\n'paired_ttest'];\n\nconst INITIAL_STATE = {\n  crontab: '0 12 * * 1' };\n\n// Same instance to be used in useEffects\nconst EMPTY_OBJECT = {};\nfunction ReportModal(_ref) {var _chart$sliceFormData;let { onHide, show = false, dashboardId, chart, userId, userEmail, creationMethod, dashboardName, chartName } = _ref;\n  const vizType = chart == null ? void 0 : (_chart$sliceFormData = chart.sliceFormData) == null ? void 0 : _chart$sliceFormData.viz_type;\n  const isChart = !!chart;\n  const isTextBasedChart = isChart && vizType && _includesInstanceProperty(TEXT_BASED_VISUALIZATION_TYPES).call(TEXT_BASED_VISUALIZATION_TYPES, vizType);\n  const defaultNotificationFormat = isTextBasedChart ?\n  NOTIFICATION_FORMATS.TEXT :\n  NOTIFICATION_FORMATS.PNG;\n  const entityName = dashboardName || chartName;\n  const initialState = useMemo(() => ({\n    ...INITIAL_STATE,\n    name: entityName ?\n    t('Weekly Report for %s', entityName) :\n    t('Weekly Report') }),\n  [entityName]);\n  const reportReducer = useCallback((state, action) => {\n    if (action === 'reset') {\n      return initialState;\n    }\n    return {\n      ...state,\n      ...action };\n\n  }, [initialState]);\n  const [currentReport, setCurrentReport] = useReducer(reportReducer, initialState);\n  const [cronError, setCronError] = useState();\n  const dispatch = useDispatch();\n  // Report fetch logic\n  const report = useSelector((state) => {\n    const resourceType = dashboardId ?\n    CreationMethod.DASHBOARDS :\n    CreationMethod.CHARTS;\n    return reportSelector(state, resourceType, dashboardId || (chart == null ? void 0 : chart.id)) ||\n    EMPTY_OBJECT;\n  });\n  const isEditMode = report && Object.keys(report).length;\n  useEffect(() => {\n    if (isEditMode) {\n      setCurrentReport(report);\n    } else\n    {\n      setCurrentReport('reset');\n    }\n  }, [isEditMode, report]);\n  const onSave = async () => {\n    // Create new Report\n    const newReportValues = {\n      type: 'Report',\n      active: true,\n      force_screenshot: false,\n      creation_method: creationMethod,\n      dashboard: dashboardId,\n      chart: chart == null ? void 0 : chart.id,\n      owners: [userId],\n      recipients: [\n      {\n        recipient_config_json: { target: userEmail },\n        type: 'Email' }],\n\n\n      name: currentReport.name,\n      description: currentReport.description,\n      crontab: currentReport.crontab,\n      report_format: currentReport.report_format || defaultNotificationFormat,\n      timezone: currentReport.timezone };\n\n    setCurrentReport({ isSubmitting: true, error: undefined });\n    try {\n      if (isEditMode) {\n        await dispatch(editReport(currentReport.id, newReportValues));\n      } else\n      {\n        await dispatch(addReport(newReportValues));\n      }\n      onHide();\n    }\n    catch (e) {\n      const { error } = await getClientErrorObject(e);\n      setCurrentReport({ error });\n    }\n    setCurrentReport({ isSubmitting: false });\n  };\n  const wrappedTitle = ___EmotionJSX(StyledIconWrapper, null,\n  ___EmotionJSX(Icons.Calendar, null),\n  ___EmotionJSX(\"span\", { className: \"text\" },\n  isEditMode ? t('Edit email report') : t('Schedule a new email report')));\n\n\n  const renderModalFooter = ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(StyledFooterButton, { key: \"back\", onClick: onHide },\n  t('Cancel')),\n\n  ___EmotionJSX(StyledFooterButton, { key: \"submit\", buttonStyle: \"primary\", onClick: onSave, disabled: !currentReport.name, loading: currentReport.isSubmitting },\n  isEditMode ? t('Save') : t('Add')));\n\n\n  const renderMessageContentSection = ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(StyledMessageContentTitle, null,\n  ___EmotionJSX(\"h4\", null, t('Message content'))),\n\n  ___EmotionJSX(\"div\", { className: \"inline-container\" },\n  ___EmotionJSX(StyledRadioGroup, { onChange: (event) => {\n      setCurrentReport({ report_format: event.target.value });\n    }, value: currentReport.report_format || defaultNotificationFormat },\n  isTextBasedChart && ___EmotionJSX(StyledRadio, { value: NOTIFICATION_FORMATS.TEXT },\n  t('Text embedded in email')),\n\n  ___EmotionJSX(StyledRadio, { value: NOTIFICATION_FORMATS.PNG },\n  t('Image (PNG) embedded in email')),\n\n  ___EmotionJSX(StyledRadio, { value: NOTIFICATION_FORMATS.CSV },\n  t('Formatted CSV attached in email')))));\n\n\n\n\n  return ___EmotionJSX(StyledModal, { show: show, onHide: onHide, title: wrappedTitle, footer: renderModalFooter, width: \"432\", centered: true },\n  ___EmotionJSX(StyledTopSection, null,\n  ___EmotionJSX(LabeledErrorBoundInput, { id: \"name\", name: \"name\", value: currentReport.name || '', placeholder: initialState.name, required: true, validationMethods: {\n      onChange: (_ref2) => {let { target } = _ref2;return setCurrentReport({ name: target.value });} },\n    label: t('Report Name'), \"data-test\": \"report-name-test\" }),\n  ___EmotionJSX(LabeledErrorBoundInput, { id: \"description\", name: \"description\", value: (currentReport == null ? void 0 : currentReport.description) || '', validationMethods: {\n      onChange: (_ref3) => {let { target } = _ref3;\n        setCurrentReport({ description: target.value });\n      } },\n    label: t('Description'), placeholder: t('Include a description that will be sent with your report'), css: noBottomMargin, \"data-test\": \"report-description-test\" })),\n\n\n  ___EmotionJSX(StyledBottomSection, null,\n  ___EmotionJSX(StyledScheduleTitle, null,\n  ___EmotionJSX(\"h4\", { css: (theme) => SectionHeaderStyle(theme) },\n  t('Schedule')),\n\n  ___EmotionJSX(\"p\", null,\n  t('A screenshot of the dashboard will be sent to your email at'))),\n\n\n\n  ___EmotionJSX(StyledCronPicker, { clearButton: false, value: currentReport.crontab || '0 12 * * 1', setValue: (newValue) => {\n      setCurrentReport({ crontab: newValue });\n    }, onError: setCronError }),\n  ___EmotionJSX(StyledCronError, null, cronError),\n  ___EmotionJSX(\"div\", { className: \"control-label\", css: (theme) => TimezoneHeaderStyle(theme) },\n  t('Timezone')),\n\n  ___EmotionJSX(TimezoneSelector, { timezone: currentReport.timezone, onTimezoneChange: (value) => {\n      setCurrentReport({ timezone: value });\n    } }),\n  isChart && renderMessageContentSection),\n\n  currentReport.error && ___EmotionJSX(Alert, { type: \"error\", css: (theme) => antDErrorAlertStyles(theme), message: isEditMode ?\n    t('Failed to update report') :\n    t('Failed to create report'), description: currentReport.error }));\n\n}__signature__(ReportModal, \"useMemo{initialState}\\nuseCallback{reportReducer}\\nuseReducer{[currentReport, setCurrentReport](initialState)}\\nuseState{[cronError, setCronError]}\\nuseDispatch{dispatch}\\nuseSelector{report}\\nuseEffect{}\", () => [useDispatch, useSelector]);const _default =\nwithToasts(ReportModal);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(TEXT_BASED_VISUALIZATION_TYPES, \"TEXT_BASED_VISUALIZATION_TYPES\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/ReportModal/index.tsx\");reactHotLoader.register(INITIAL_STATE, \"INITIAL_STATE\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/ReportModal/index.tsx\");reactHotLoader.register(EMPTY_OBJECT, \"EMPTY_OBJECT\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/ReportModal/index.tsx\");reactHotLoader.register(ReportModal, \"ReportModal\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/ReportModal/index.tsx\");reactHotLoader.register(_default, \"default\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/ReportModal/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"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","names":["React","useState","useEffect","useReducer","useCallback","useMemo","t","useDispatch","useSelector","getClientErrorObject","addReport","editReport","Alert","TimezoneSelector","LabeledErrorBoundInput","Icons","withToasts","NOTIFICATION_FORMATS","reportSelector","CreationMethod","antDErrorAlertStyles","StyledModal","StyledTopSection","StyledBottomSection","StyledIconWrapper","StyledScheduleTitle","StyledCronPicker","StyledCronError","noBottomMargin","StyledFooterButton","TimezoneHeaderStyle","SectionHeaderStyle","StyledMessageContentTitle","StyledRadio","StyledRadioGroup","TEXT_BASED_VISUALIZATION_TYPES","INITIAL_STATE","crontab","EMPTY_OBJECT","ReportModal","onHide","show","dashboardId","chart","userId","userEmail","creationMethod","dashboardName","chartName","vizType","sliceFormData","viz_type","isChart","isTextBasedChart","defaultNotificationFormat","TEXT","PNG","entityName","initialState","name","reportReducer","state","action","currentReport","setCurrentReport","cronError","setCronError","dispatch","report","resourceType","DASHBOARDS","CHARTS","id","isEditMode","Object","keys","length","onSave","newReportValues","type","active","force_screenshot","creation_method","dashboard","owners","recipients","recipient_config_json","target","description","report_format","timezone","isSubmitting","error","undefined","e","wrappedTitle","renderModalFooter","renderMessageContentSection","event","value","CSV","onChange","theme","newValue"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/ReportModal/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, {\n  useState,\n  useEffect,\n  useReducer,\n  useCallback,\n  useMemo,\n} from 'react';\nimport { t, SupersetTheme } from '@superset-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport { addReport, editReport } from 'src/reports/actions/reports';\nimport Alert from 'src/components/Alert';\nimport TimezoneSelector from 'src/components/TimezoneSelector';\nimport LabeledErrorBoundInput from 'src/components/Form/LabeledErrorBoundInput';\nimport Icons from 'src/components/Icons';\nimport { CronError } from 'src/components/CronPicker';\nimport { RadioChangeEvent } from 'src/components';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { ChartState } from 'src/explore/types';\nimport {\n  ReportCreationMethod,\n  ReportObject,\n  NOTIFICATION_FORMATS,\n} from 'src/reports/types';\nimport { reportSelector } from 'src/views/CRUD/hooks';\nimport { CreationMethod } from './HeaderReportDropdown';\nimport {\n  antDErrorAlertStyles,\n  StyledModal,\n  StyledTopSection,\n  StyledBottomSection,\n  StyledIconWrapper,\n  StyledScheduleTitle,\n  StyledCronPicker,\n  StyledCronError,\n  noBottomMargin,\n  StyledFooterButton,\n  TimezoneHeaderStyle,\n  SectionHeaderStyle,\n  StyledMessageContentTitle,\n  StyledRadio,\n  StyledRadioGroup,\n} from './styles';\n\ninterface ReportProps {\n  onHide: () => {};\n  addDangerToast: (msg: string) => void;\n  show: boolean;\n  userId: number;\n  userEmail: string;\n  chart?: ChartState;\n  chartName?: string;\n  dashboardId?: number;\n  dashboardName?: string;\n  creationMethod: ReportCreationMethod;\n  props: any;\n}\n\nconst TEXT_BASED_VISUALIZATION_TYPES = [\n  'pivot_table',\n  'pivot_table_v2',\n  'table',\n  'paired_ttest',\n];\n\nconst INITIAL_STATE = {\n  crontab: '0 12 * * 1',\n};\n\ntype ReportObjectState = Partial<ReportObject> & {\n  error?: string;\n  /**\n   * Is submitting changes to the backend.\n   */\n  isSubmitting?: boolean;\n};\n\n// Same instance to be used in useEffects\nconst EMPTY_OBJECT = {};\n\nfunction ReportModal({\n  onHide,\n  show = false,\n  dashboardId,\n  chart,\n  userId,\n  userEmail,\n  creationMethod,\n  dashboardName,\n  chartName,\n}: ReportProps) {\n  const vizType = chart?.sliceFormData?.viz_type;\n  const isChart = !!chart;\n  const isTextBasedChart =\n    isChart && vizType && TEXT_BASED_VISUALIZATION_TYPES.includes(vizType);\n  const defaultNotificationFormat = isTextBasedChart\n    ? NOTIFICATION_FORMATS.TEXT\n    : NOTIFICATION_FORMATS.PNG;\n  const entityName = dashboardName || chartName;\n  const initialState: ReportObjectState = useMemo(\n    () => ({\n      ...INITIAL_STATE,\n      name: entityName\n        ? t('Weekly Report for %s', entityName)\n        : t('Weekly Report'),\n    }),\n    [entityName],\n  );\n\n  const reportReducer = useCallback(\n    (state: ReportObjectState | null, action: 'reset' | ReportObjectState) => {\n      if (action === 'reset') {\n        return initialState;\n      }\n      return {\n        ...state,\n        ...action,\n      };\n    },\n    [initialState],\n  );\n\n  const [currentReport, setCurrentReport] = useReducer(\n    reportReducer,\n    initialState,\n  );\n  const [cronError, setCronError] = useState<CronError>();\n\n  const dispatch = useDispatch();\n  // Report fetch logic\n  const report = useSelector<any, ReportObject>(state => {\n    const resourceType = dashboardId\n      ? CreationMethod.DASHBOARDS\n      : CreationMethod.CHARTS;\n    return (\n      reportSelector(state, resourceType, dashboardId || chart?.id) ||\n      EMPTY_OBJECT\n    );\n  });\n  const isEditMode = report && Object.keys(report).length;\n\n  useEffect(() => {\n    if (isEditMode) {\n      setCurrentReport(report);\n    } else {\n      setCurrentReport('reset');\n    }\n  }, [isEditMode, report]);\n\n  const onSave = async () => {\n    // Create new Report\n    const newReportValues: Partial<ReportObject> = {\n      type: 'Report',\n      active: true,\n      force_screenshot: false,\n      creation_method: creationMethod,\n      dashboard: dashboardId,\n      chart: chart?.id,\n      owners: [userId],\n      recipients: [\n        {\n          recipient_config_json: { target: userEmail },\n          type: 'Email',\n        },\n      ],\n      name: currentReport.name,\n      description: currentReport.description,\n      crontab: currentReport.crontab,\n      report_format: currentReport.report_format || defaultNotificationFormat,\n      timezone: currentReport.timezone,\n    };\n\n    setCurrentReport({ isSubmitting: true, error: undefined });\n    try {\n      if (isEditMode) {\n        await dispatch(\n          editReport(currentReport.id, newReportValues as ReportObject),\n        );\n      } else {\n        await dispatch(addReport(newReportValues as ReportObject));\n      }\n      onHide();\n    } catch (e) {\n      const { error } = await getClientErrorObject(e);\n      setCurrentReport({ error });\n    }\n    setCurrentReport({ isSubmitting: false });\n  };\n\n  const wrappedTitle = (\n    <StyledIconWrapper>\n      <Icons.Calendar />\n      <span className=\"text\">\n        {isEditMode ? t('Edit email report') : t('Schedule a new email report')}\n      </span>\n    </StyledIconWrapper>\n  );\n\n  const renderModalFooter = (\n    <>\n      <StyledFooterButton key=\"back\" onClick={onHide}>\n        {t('Cancel')}\n      </StyledFooterButton>\n      <StyledFooterButton\n        key=\"submit\"\n        buttonStyle=\"primary\"\n        onClick={onSave}\n        disabled={!currentReport.name}\n        loading={currentReport.isSubmitting}\n      >\n        {isEditMode ? t('Save') : t('Add')}\n      </StyledFooterButton>\n    </>\n  );\n\n  const renderMessageContentSection = (\n    <>\n      <StyledMessageContentTitle>\n        <h4>{t('Message content')}</h4>\n      </StyledMessageContentTitle>\n      <div className=\"inline-container\">\n        <StyledRadioGroup\n          onChange={(event: RadioChangeEvent) => {\n            setCurrentReport({ report_format: event.target.value });\n          }}\n          value={currentReport.report_format || defaultNotificationFormat}\n        >\n          {isTextBasedChart && (\n            <StyledRadio value={NOTIFICATION_FORMATS.TEXT}>\n              {t('Text embedded in email')}\n            </StyledRadio>\n          )}\n          <StyledRadio value={NOTIFICATION_FORMATS.PNG}>\n            {t('Image (PNG) embedded in email')}\n          </StyledRadio>\n          <StyledRadio value={NOTIFICATION_FORMATS.CSV}>\n            {t('Formatted CSV attached in email')}\n          </StyledRadio>\n        </StyledRadioGroup>\n      </div>\n    </>\n  );\n\n  return (\n    <StyledModal\n      show={show}\n      onHide={onHide}\n      title={wrappedTitle}\n      footer={renderModalFooter}\n      width=\"432\"\n      centered\n    >\n      <StyledTopSection>\n        <LabeledErrorBoundInput\n          id=\"name\"\n          name=\"name\"\n          value={currentReport.name || ''}\n          placeholder={initialState.name}\n          required\n          validationMethods={{\n            onChange: ({ target }: { target: HTMLInputElement }) =>\n              setCurrentReport({ name: target.value }),\n          }}\n          label={t('Report Name')}\n          data-test=\"report-name-test\"\n        />\n        <LabeledErrorBoundInput\n          id=\"description\"\n          name=\"description\"\n          value={currentReport?.description || ''}\n          validationMethods={{\n            onChange: ({ target }: { target: HTMLInputElement }) => {\n              setCurrentReport({ description: target.value });\n            },\n          }}\n          label={t('Description')}\n          placeholder={t(\n            'Include a description that will be sent with your report',\n          )}\n          css={noBottomMargin}\n          data-test=\"report-description-test\"\n        />\n      </StyledTopSection>\n\n      <StyledBottomSection>\n        <StyledScheduleTitle>\n          <h4 css={(theme: SupersetTheme) => SectionHeaderStyle(theme)}>\n            {t('Schedule')}\n          </h4>\n          <p>\n            {t('A screenshot of the dashboard will be sent to your email at')}\n          </p>\n        </StyledScheduleTitle>\n\n        <StyledCronPicker\n          clearButton={false}\n          value={currentReport.crontab || '0 12 * * 1'}\n          setValue={(newValue: string) => {\n            setCurrentReport({ crontab: newValue });\n          }}\n          onError={setCronError}\n        />\n        <StyledCronError>{cronError}</StyledCronError>\n        <div\n          className=\"control-label\"\n          css={(theme: SupersetTheme) => TimezoneHeaderStyle(theme)}\n        >\n          {t('Timezone')}\n        </div>\n        <TimezoneSelector\n          timezone={currentReport.timezone}\n          onTimezoneChange={value => {\n            setCurrentReport({ timezone: value });\n          }}\n        />\n        {isChart && renderMessageContentSection}\n      </StyledBottomSection>\n      {currentReport.error && (\n        <Alert\n          type=\"error\"\n          css={(theme: SupersetTheme) => antDErrorAlertStyles(theme)}\n          message={\n            isEditMode\n              ? t('Failed to update report')\n              : t('Failed to create report')\n          }\n          description={currentReport.error}\n        />\n      )}\n    </StyledModal>\n  );\n}\n\nexport default withToasts(ReportModal);\n"]},"metadata":{},"sourceType":"module"}