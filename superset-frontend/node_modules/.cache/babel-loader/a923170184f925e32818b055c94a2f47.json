{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { makeSingleton } from '../utils';\nimport TimeFormatterRegistry from './TimeFormatterRegistry';\nimport TimeFormatter from './TimeFormatter';\nimport TimeFormatsForGranularity from './TimeFormatsForGranularity';\nimport { LOCAL_PREFIX } from './TimeFormats';\nimport createTimeRangeFromGranularity from './utils/createTimeRangeFromGranularity';\nimport TimeRangeFormatter from './TimeRangeFormatter';\nconst getInstance = makeSingleton(TimeFormatterRegistry);const _default =\ngetInstance;export default _default;\nexport function getTimeRangeFormatter(formatId) {\n  return new TimeRangeFormatter({\n    id: formatId || 'undefined',\n    formatFunc: (range) => {\n      const format = getInstance().get(formatId);\n      const [start, end] = range.map((value) => format(value));\n      return start === end ? start : [start, end].join(' — ');\n    },\n    useLocalTime: formatId == null ? void 0 : formatId.startsWith(LOCAL_PREFIX) });\n\n}\nexport function formatTimeRange(formatId, range) {\n  return getTimeRangeFormatter(formatId)(range);\n}\nexport function getTimeFormatter(formatId, granularity) {\n  if (granularity) {\n    const formatString = formatId || TimeFormatsForGranularity[granularity];\n    const timeRangeFormatter = getTimeRangeFormatter(formatString);\n    return new TimeFormatter({\n      id: [formatString, granularity].join('/'),\n      formatFunc: (value) => timeRangeFormatter.format(createTimeRangeFromGranularity(value, granularity, timeRangeFormatter.useLocalTime)),\n      useLocalTime: timeRangeFormatter.useLocalTime });\n\n  }\n  return getInstance().get(formatId);\n}\n/**\n * Syntactic sugar for backward compatibility\n * TODO: will be deprecated in a future version\n * @param granularity\n */\nexport function getTimeFormatterForGranularity(granularity) {\n  return getTimeFormatter(undefined, granularity);\n}\nexport function formatTime(formatId, value, granularity) {\n  return getTimeFormatter(formatId, granularity)(value);\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(getInstance, \"getInstance\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/time-format/TimeFormatterRegistrySingleton.ts\");reactHotLoader.register(getTimeRangeFormatter, \"getTimeRangeFormatter\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/time-format/TimeFormatterRegistrySingleton.ts\");reactHotLoader.register(formatTimeRange, \"formatTimeRange\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/time-format/TimeFormatterRegistrySingleton.ts\");reactHotLoader.register(getTimeFormatter, \"getTimeFormatter\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/time-format/TimeFormatterRegistrySingleton.ts\");reactHotLoader.register(getTimeFormatterForGranularity, \"getTimeFormatterForGranularity\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/time-format/TimeFormatterRegistrySingleton.ts\");reactHotLoader.register(formatTime, \"formatTime\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/time-format/TimeFormatterRegistrySingleton.ts\");reactHotLoader.register(_default, \"default\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/time-format/TimeFormatterRegistrySingleton.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAkBA,SAASA,aAAT,QAA8B,UAA9B;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,yBAAP,MAAsC,6BAAtC;AACA,SAASC,YAAT,QAA6B,eAA7B;AAEA,OAAOC,8BAAP,MAA2C,wCAA3C;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AAEA,MAAMC,WAAW,GAAGP,aAAa,CAACC,qBAAD,CAAjC,C;AAEeM,W,CAAf;AAEA,OAAM,SAAUC,qBAAV,CAAgCC,QAAhC,EAAiD;EACrD,OAAO,IAAIH,kBAAJ,CAAuB;IAC5BI,EAAE,EAAED,QAAQ,IAAI,WADY;IAE5BE,UAAU,EAAE,CAACC,KAAD,KAAgD;MAC1D,MAAMC,MAAM,GAAGN,WAAW,GAAGO,GAAd,CAAkBL,QAAlB,CAAf;MACA,MAAM,CAACM,KAAD,EAAQC,GAAR,IAAeJ,KAAK,CAACK,GAAN,CAAU,MAAK,KAAIJ,MAAM,CAACK,KAAD,CAAzB,CAArB;MACA,OAAOH,KAAK,KAAKC,GAAV,GAAgBD,KAAhB,GAAwB,CAACA,KAAD,EAAQC,GAAR,EAAaG,IAAb,CAAkB,KAAlB,CAA/B;IACD,CAN2B;IAO5BC,YAAY,EAAEX,QAAF,oBAAEA,QAAQ,CAAEY,UAAV,CAAqBjB,YAArB,CAPc,EAAvB,CAAP;;AASD;AAED,OAAM,SAAUkB,eAAV,CACJb,QADI,EAEJG,KAFI,EAE8B;EAElC,OAAOJ,qBAAqB,CAACC,QAAD,CAArB,CAAgCG,KAAhC,CAAP;AACD;AAED,OAAM,SAAUW,gBAAV,CACJd,QADI,EAEJe,WAFI,EAEyB;EAE7B,IAAIA,WAAJ,EAAiB;IACf,MAAMC,YAAY,GAAGhB,QAAQ,IAAIN,yBAAyB,CAACqB,WAAD,CAA1D;IACA,MAAME,kBAAkB,GAAGlB,qBAAqB,CAACiB,YAAD,CAAhD;IAEA,OAAO,IAAIvB,aAAJ,CAAkB;MACvBQ,EAAE,EAAE,CAACe,YAAD,EAAeD,WAAf,EAA4BL,IAA5B,CAAiC,GAAjC,CADmB;MAEvBR,UAAU,EAAE,CAACO,KAAD,KACVQ,kBAAkB,CAACb,MAAnB,CACER,8BAA8B,CAC5Ba,KAD4B,EAE5BM,WAF4B,EAG5BE,kBAAkB,CAACN,YAHS,CADhC,CAHqB;MAUvBA,YAAY,EAAEM,kBAAkB,CAACN,YAVV,EAAlB,CAAP;;EAYD;EAED,OAAOb,WAAW,GAAGO,GAAd,CAAkBL,QAAlB,CAAP;AACD;AAED;;;;;AAKA,OAAM,SAAUkB,8BAAV,CAAyCH,WAAzC,EAAsE;EAC1E,OAAOD,gBAAgB,CAACK,SAAD,EAAYJ,WAAZ,CAAvB;AACD;AAED,OAAM,SAAUK,UAAV,CACJpB,QADI,EAEJS,KAFI,EAGJM,WAHI,EAGyB;EAE7B,OAAOD,gBAAgB,CAACd,QAAD,EAAWe,WAAX,CAAhB,CAAwCN,KAAxC,CAAP;AACD,C,iLA/DKX,W,yLAIUC,qB,mMAYAc,e,6LAOAC,gB,8LA8BAI,8B,4MAIAE,U","names":["makeSingleton","TimeFormatterRegistry","TimeFormatter","TimeFormatsForGranularity","LOCAL_PREFIX","createTimeRangeFromGranularity","TimeRangeFormatter","getInstance","getTimeRangeFormatter","formatId","id","formatFunc","range","format","get","start","end","map","value","join","useLocalTime","startsWith","formatTimeRange","getTimeFormatter","granularity","formatString","timeRangeFormatter","getTimeFormatterForGranularity","undefined","formatTime"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/time-format/TimeFormatterRegistrySingleton.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { makeSingleton } from '../utils';\nimport TimeFormatterRegistry from './TimeFormatterRegistry';\nimport TimeFormatter from './TimeFormatter';\nimport TimeFormatsForGranularity from './TimeFormatsForGranularity';\nimport { LOCAL_PREFIX } from './TimeFormats';\nimport { TimeGranularity } from './types';\nimport createTimeRangeFromGranularity from './utils/createTimeRangeFromGranularity';\nimport TimeRangeFormatter from './TimeRangeFormatter';\n\nconst getInstance = makeSingleton(TimeFormatterRegistry);\n\nexport default getInstance;\n\nexport function getTimeRangeFormatter(formatId?: string) {\n  return new TimeRangeFormatter({\n    id: formatId || 'undefined',\n    formatFunc: (range: (Date | number | null | undefined)[]) => {\n      const format = getInstance().get(formatId);\n      const [start, end] = range.map(value => format(value));\n      return start === end ? start : [start, end].join(' — ');\n    },\n    useLocalTime: formatId?.startsWith(LOCAL_PREFIX),\n  });\n}\n\nexport function formatTimeRange(\n  formatId: string | undefined,\n  range: (Date | null | undefined)[],\n) {\n  return getTimeRangeFormatter(formatId)(range);\n}\n\nexport function getTimeFormatter(\n  formatId?: string,\n  granularity?: TimeGranularity,\n) {\n  if (granularity) {\n    const formatString = formatId || TimeFormatsForGranularity[granularity];\n    const timeRangeFormatter = getTimeRangeFormatter(formatString);\n\n    return new TimeFormatter({\n      id: [formatString, granularity].join('/'),\n      formatFunc: (value: Date) =>\n        timeRangeFormatter.format(\n          createTimeRangeFromGranularity(\n            value,\n            granularity,\n            timeRangeFormatter.useLocalTime,\n          ),\n        ),\n      useLocalTime: timeRangeFormatter.useLocalTime,\n    });\n  }\n\n  return getInstance().get(formatId);\n}\n\n/**\n * Syntactic sugar for backward compatibility\n * TODO: will be deprecated in a future version\n * @param granularity\n */\nexport function getTimeFormatterForGranularity(granularity?: TimeGranularity) {\n  return getTimeFormatter(undefined, granularity);\n}\n\nexport function formatTime(\n  formatId: string | undefined,\n  value: Date | number | null | undefined,\n  granularity?: TimeGranularity,\n) {\n  return getTimeFormatter(formatId, granularity)(value);\n}\n"]},"metadata":{},"sourceType":"module"}