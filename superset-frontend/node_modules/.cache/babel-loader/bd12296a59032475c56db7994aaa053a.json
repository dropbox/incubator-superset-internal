{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nexport var LocalStorageKeys;\n(function (LocalStorageKeys) {\n  /**\n   * START LEGACY LOCAL STORAGE KEYS\n   *\n   * Do not follow the patterns here for key names. Keys should instead be namespaced to avoid\n   * collisions.\n   *\n   * TODO: Update all local storage keys to follow the new pattern. This is a breaking change,\n   * and therefore should be done in a major release.\n   */\n  LocalStorageKeys[\"filter_box_transition_snoozed_at\"] = \"filter_box_transition_snoozed_at\";\n  LocalStorageKeys[\"db\"] = \"db\";\n  LocalStorageKeys[\"chart_split_sizes\"] = \"chart_split_sizes\";\n  LocalStorageKeys[\"controls_width\"] = \"controls_width\";\n  LocalStorageKeys[\"datasource_width\"] = \"datasource_width\";\n  LocalStorageKeys[\"is_datapanel_open\"] = \"is_datapanel_open\";\n  LocalStorageKeys[\"homepage_chart_filter\"] = \"homepage_chart_filter\";\n  LocalStorageKeys[\"homepage_dashboard_filter\"] = \"homepage_dashboard_filter\";\n  LocalStorageKeys[\"homepage_collapse_state\"] = \"homepage_collapse_state\";\n  LocalStorageKeys[\"homepage_activity_filter\"] = \"homepage_activity_filter\";\n  LocalStorageKeys[\"datasetname_set_successful\"] = \"datasetname_set_successful\";\n  /** END LEGACY LOCAL STORAGE KEYS */\n  /**\n   * New local storage keys should be namespaced to avoid collisions. Keys should be named in the\n   * form [namespace]__[key].\n   *\n   * Example:\n   * sqllab__is_autocomplete_enabled\n   */\n  LocalStorageKeys[\"sqllab__is_autocomplete_enabled\"] = \"sqllab__is_autocomplete_enabled\";\n  LocalStorageKeys[\"explore__data_table_original_formatted_time_columns\"] = \"explore__data_table_original_formatted_time_columns\";\n  LocalStorageKeys[\"dashboard__custom_filter_bar_widths\"] = \"dashboard__custom_filter_bar_widths\";\n  LocalStorageKeys[\"dashboard__explore_context\"] = \"dashboard__explore_context\";\n  LocalStorageKeys[\"dashboard__editor_show_only_my_charts\"] = \"dashboard__editor_show_only_my_charts\";\n  LocalStorageKeys[\"common__resizable_sidebar_widths\"] = \"common__resizable_sidebar_widths\";\n})(LocalStorageKeys || (LocalStorageKeys = {}));\n/*\n * This function should not be used directly, as it doesn't provide any type safety or any\n * guarantees that the globally namespaced localstorage key is correct.\n *\n * Instead, use getItem and setItem. Any legacy uses should be updated/migrated in future\n * Superset versions (as they may require breaking changes).\n * */\nexport function dangerouslyGetItemDoNotUse(key, defaultValue) {\n  try {\n    const value = localStorage.getItem(key);\n    if (value === null) {\n      return defaultValue;\n    }\n    return JSON.parse(value);\n  }\n  catch {\n    return defaultValue;\n  }\n}\n/*\n * This function should not be used directly, as it doesn't provide any type safety or any\n * guarantees that the globally namespaced localstorage key is correct.\n *\n * Instead, use getItem and setItem. Any legacy uses should be updated/migrated in future\n * Superset versions (as they may require breaking changes).\n * */\nexport function dangerouslySetItemDoNotUse(key, value) {\n  try {\n    localStorage.setItem(key, JSON.stringify(value));\n  }\n  catch {\n    // Catch in case localStorage is unavailable\n  }\n}\nexport function getItem(key, defaultValue) {\n  return dangerouslyGetItemDoNotUse(key, defaultValue);\n}\nexport function setItem(key, value) {\n  dangerouslySetItemDoNotUse(key, value);\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAsBA,WAAYA,gBAAZ;AAAA,WAAYA,gBAAZ,EAA4B;EAC1B;;;;;;;;;EASAA;EACAA;EACAA;EACAA;EACAA;EACAA;EACAA;EACAA;EACAA;EACAA;EACAA;EACA;EAEA;;;;;;;EAOAA;EACAA;EACAA;EACAA;EACAA;EACAA;AACD,CApCD,EAAYA,gBAAgB,KAAhBA,gBAAgB,MAA5B;AA0DA;;;;;;;AAOA,OAAM,SAAUC,0BAAV,CACJC,GADI,EAEJC,YAFI,EAEa;EAEjB,IAAI;IACF,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqBJ,GAArB,CAAd;IACA,IAAIE,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAOD,YAAP;IACD;IACD,OAAOI,IAAI,CAACC,KAAL,CAAWJ,KAAX,CAAP;EACD;EAAC,MAAM;IACN,OAAOD,YAAP;EACD;AACF;AAED;;;;;;;AAOA,OAAM,SAAUM,0BAAV,CAAqCP,GAArC,EAAkDE,KAAlD,EAA4D;EAChE,IAAI;IACFC,YAAY,CAACK,OAAb,CAAqBR,GAArB,EAA0BK,IAAI,CAACI,SAAL,CAAeP,KAAf,CAA1B;EACD;EAAC,MAAM;IACN;EACD;AACF;AAED,OAAM,SAAUE,OAAV,CACJJ,GADI,EAEJC,YAFI,EAE+B;EAEnC,OAAOF,0BAA0B,CAACC,GAAD,EAAMC,YAAN,CAAjC;AACD;AAED,OAAM,SAAUO,OAAV,CACJR,GADI,EAEJE,KAFI,EAEwB;EAE5BK,0BAA0B,CAACP,GAAD,EAAME,KAAN,CAA1B;AACD","names":["LocalStorageKeys","dangerouslyGetItemDoNotUse","key","defaultValue","value","localStorage","getItem","JSON","parse","dangerouslySetItemDoNotUse","setItem","stringify"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/utils/localStorageHelpers.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { TableTab } from 'src/views/CRUD/types';\nimport { DashboardContextForExplore } from 'src/types/DashboardContextForExplore';\n\nexport enum LocalStorageKeys {\n  /**\n   * START LEGACY LOCAL STORAGE KEYS\n   *\n   * Do not follow the patterns here for key names. Keys should instead be namespaced to avoid\n   * collisions.\n   *\n   * TODO: Update all local storage keys to follow the new pattern. This is a breaking change,\n   * and therefore should be done in a major release.\n   */\n  filter_box_transition_snoozed_at = 'filter_box_transition_snoozed_at',\n  db = 'db',\n  chart_split_sizes = 'chart_split_sizes',\n  controls_width = 'controls_width',\n  datasource_width = 'datasource_width',\n  is_datapanel_open = 'is_datapanel_open',\n  homepage_chart_filter = 'homepage_chart_filter',\n  homepage_dashboard_filter = 'homepage_dashboard_filter',\n  homepage_collapse_state = 'homepage_collapse_state',\n  homepage_activity_filter = 'homepage_activity_filter',\n  datasetname_set_successful = 'datasetname_set_successful',\n  /** END LEGACY LOCAL STORAGE KEYS */\n\n  /**\n   * New local storage keys should be namespaced to avoid collisions. Keys should be named in the\n   * form [namespace]__[key].\n   *\n   * Example:\n   * sqllab__is_autocomplete_enabled\n   */\n  sqllab__is_autocomplete_enabled = 'sqllab__is_autocomplete_enabled',\n  explore__data_table_original_formatted_time_columns = 'explore__data_table_original_formatted_time_columns',\n  dashboard__custom_filter_bar_widths = 'dashboard__custom_filter_bar_widths',\n  dashboard__explore_context = 'dashboard__explore_context',\n  dashboard__editor_show_only_my_charts = 'dashboard__editor_show_only_my_charts',\n  common__resizable_sidebar_widths = 'common__resizable_sidebar_widths',\n}\n\nexport type LocalStorageValues = {\n  filter_box_transition_snoozed_at: Record<number, number>;\n  db: object | null;\n  chart_split_sizes: [number, number];\n  controls_width: number;\n  datasource_width: number;\n  is_datapanel_open: boolean;\n  homepage_chart_filter: TableTab;\n  homepage_dashboard_filter: TableTab;\n  homepage_collapse_state: string[];\n  datasetname_set_successful: boolean;\n  homepage_activity_filter: TableTab | null;\n  sqllab__is_autocomplete_enabled: boolean;\n  explore__data_table_original_formatted_time_columns: Record<string, string[]>;\n  dashboard__custom_filter_bar_widths: Record<string, number>;\n  dashboard__explore_context: Record<string, DashboardContextForExplore>;\n  dashboard__editor_show_only_my_charts: boolean;\n  common__resizable_sidebar_widths: Record<string, number>;\n};\n\n/*\n * This function should not be used directly, as it doesn't provide any type safety or any\n * guarantees that the globally namespaced localstorage key is correct.\n *\n * Instead, use getItem and setItem. Any legacy uses should be updated/migrated in future\n * Superset versions (as they may require breaking changes).\n * */\nexport function dangerouslyGetItemDoNotUse(\n  key: string,\n  defaultValue: any,\n): any {\n  try {\n    const value = localStorage.getItem(key);\n    if (value === null) {\n      return defaultValue;\n    }\n    return JSON.parse(value);\n  } catch {\n    return defaultValue;\n  }\n}\n\n/*\n * This function should not be used directly, as it doesn't provide any type safety or any\n * guarantees that the globally namespaced localstorage key is correct.\n *\n * Instead, use getItem and setItem. Any legacy uses should be updated/migrated in future\n * Superset versions (as they may require breaking changes).\n * */\nexport function dangerouslySetItemDoNotUse(key: string, value: any): void {\n  try {\n    localStorage.setItem(key, JSON.stringify(value));\n  } catch {\n    // Catch in case localStorage is unavailable\n  }\n}\n\nexport function getItem<K extends LocalStorageKeys>(\n  key: K,\n  defaultValue: LocalStorageValues[K],\n): LocalStorageValues[K] {\n  return dangerouslyGetItemDoNotUse(key, defaultValue);\n}\n\nexport function setItem<K extends LocalStorageKeys>(\n  key: K,\n  value: LocalStorageValues[K],\n): void {\n  dangerouslySetItemDoNotUse(key, value);\n}\n"]},"metadata":{},"sourceType":"module"}