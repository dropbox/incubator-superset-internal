{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\";import _isEmpty from \"lodash/isEmpty\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n\nimport { FeatureFlag, SupersetClient, t } from '@superset-ui/core';\n\nimport { Menu } from 'src/components/Menu';\nimport { URL_PARAMS } from 'src/constants';\nimport ShareMenuItems from 'src/dashboard/components/menu/ShareMenuItems';\nimport CssEditor from 'src/dashboard/components/CssEditor';\nimport RefreshIntervalModal from 'src/dashboard/components/RefreshIntervalModal';\nimport SaveModal from 'src/dashboard/components/SaveModal';\nimport HeaderReportDropdown from 'src/components/ReportModal/HeaderReportDropdown';\nimport injectCustomCss from 'src/dashboard/util/injectCustomCss';\nimport { SAVE_TYPE_NEWDASHBOARD } from 'src/dashboard/util/constants';\nimport FilterScopeModal from 'src/dashboard/components/filterscope/FilterScopeModal';\nimport downloadAsImage from 'src/utils/downloadAsImage';\nimport getDashboardUrl from 'src/dashboard/util/getDashboardUrl';\nimport { getActiveFilters } from 'src/dashboard/util/activeDashboardFilters';\nimport { getUrlParam } from 'src/utils/urlUtils';\nimport { LOG_ACTIONS_DASHBOARD_DOWNLOAD_AS_IMAGE } from 'src/logger/LogUtils';\nimport { isFeatureEnabled } from 'src/featureFlags';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  addSuccessToast: PropTypes.func.isRequired,\n  addDangerToast: PropTypes.func.isRequired,\n  dashboardInfo: PropTypes.object.isRequired,\n  dashboardId: PropTypes.number,\n  dashboardTitle: PropTypes.string,\n  dataMask: PropTypes.object.isRequired,\n  customCss: PropTypes.string,\n  colorNamespace: PropTypes.string,\n  colorScheme: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  updateCss: PropTypes.func.isRequired,\n  forceRefreshAllCharts: PropTypes.func.isRequired,\n  refreshFrequency: PropTypes.number,\n  shouldPersistRefreshFrequency: PropTypes.bool.isRequired,\n  setRefreshFrequency: PropTypes.func.isRequired,\n  startPeriodicRender: PropTypes.func.isRequired,\n  editMode: PropTypes.bool.isRequired,\n  userCanEdit: PropTypes.bool,\n  userCanShare: PropTypes.bool,\n  userCanSave: PropTypes.bool,\n  userCanCurate: PropTypes.bool.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  layout: PropTypes.object.isRequired,\n  expandedSlices: PropTypes.object,\n  onSave: PropTypes.func.isRequired,\n  showPropertiesModal: PropTypes.func.isRequired,\n  manageEmbedded: PropTypes.func.isRequired,\n  logEvent: PropTypes.func,\n  refreshLimit: PropTypes.number,\n  refreshWarning: PropTypes.string,\n  lastModifiedTime: PropTypes.number.isRequired };\n\n\nconst defaultProps = {\n  colorNamespace: undefined,\n  colorScheme: undefined,\n  refreshLimit: 0,\n  refreshWarning: null };\n\n\nconst MENU_KEYS = {\n  SAVE_MODAL: 'save-modal',\n  SHARE_DASHBOARD: 'share-dashboard',\n  REFRESH_DASHBOARD: 'refresh-dashboard',\n  AUTOREFRESH_MODAL: 'autorefresh-modal',\n  SET_FILTER_MAPPING: 'set-filter-mapping',\n  EDIT_PROPERTIES: 'edit-properties',\n  EDIT_CSS: 'edit-css',\n  DOWNLOAD_AS_IMAGE: 'download-as-image',\n  TOGGLE_FULLSCREEN: 'toggle-fullscreen',\n  MANAGE_EMBEDDED: 'manage-embedded',\n  MANAGE_EMAIL_REPORT: 'manage-email-report' };\n\n\nconst SCREENSHOT_NODE_SELECTOR = '.dashboard';\n\nclass HeaderActionsDropdown extends React.PureComponent {\n  static discardChanges() {\n    window.location.reload();\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      css: props.customCss,\n      cssTemplates: [],\n      showReportSubMenu: null };\n\n\n    this.changeCss = this.changeCss.bind(this);\n    this.changeRefreshInterval = this.changeRefreshInterval.bind(this);\n    this.handleMenuClick = this.handleMenuClick.bind(this);\n    this.setShowReportSubMenu = this.setShowReportSubMenu.bind(this);\n  }\n\n  UNSAFE_componentWillMount() {\n    SupersetClient.get({ endpoint: '/csstemplateasyncmodelview/api/read' }).\n    then((_ref) => {let { json } = _ref;\n      const cssTemplates = json.result.map((row) => ({\n        value: row.template_name,\n        css: row.css,\n        label: row.template_name }));\n\n      this.setState({ cssTemplates });\n    }).\n    catch(() => {\n      this.props.addDangerToast(\n      t('An error occurred while fetching available CSS templates'));\n\n    });\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.customCss !== nextProps.customCss) {\n      this.setState({ css: nextProps.customCss }, () => {\n        injectCustomCss(nextProps.customCss);\n      });\n    }\n  }\n\n  setShowReportSubMenu(show) {\n    this.setState({\n      showReportSubMenu: show });\n\n  }\n\n  changeCss(css) {\n    this.props.onChange();\n    this.props.updateCss(css);\n  }\n\n  changeRefreshInterval(refreshInterval, isPersistent) {\n    this.props.setRefreshFrequency(refreshInterval, isPersistent);\n    this.props.startPeriodicRender(refreshInterval * 1000);\n  }\n\n  handleMenuClick(_ref2) {let { key, domEvent } = _ref2;\n    switch (key) {\n      case MENU_KEYS.REFRESH_DASHBOARD:\n        this.props.forceRefreshAllCharts();\n        this.props.addSuccessToast(t('Refreshing charts'));\n        break;\n      case MENU_KEYS.EDIT_PROPERTIES:\n        this.props.showPropertiesModal();\n        break;\n      case MENU_KEYS.DOWNLOAD_AS_IMAGE:{var _this$props$logEvent, _this$props;\n          // menu closes with a delay, we need to hide it manually,\n          // so that we don't capture it on the screenshot\n          const menu = document.querySelector(\n          '.ant-dropdown:not(.ant-dropdown-hidden)');\n\n          menu.style.visibility = 'hidden';\n          downloadAsImage(\n          SCREENSHOT_NODE_SELECTOR,\n          this.props.dashboardTitle,\n          true)(\n          domEvent).then(() => {\n            menu.style.visibility = 'visible';\n          });\n          (_this$props$logEvent = (_this$props = this.props).logEvent) == null ? void 0 : _this$props$logEvent.call(_this$props, LOG_ACTIONS_DASHBOARD_DOWNLOAD_AS_IMAGE);\n          break;\n        }\n      case MENU_KEYS.TOGGLE_FULLSCREEN:{\n          const url = getDashboardUrl({\n            pathname: window.location.pathname,\n            filters: getActiveFilters(),\n            hash: window.location.hash,\n            standalone: !getUrlParam(URL_PARAMS.standalone) });\n\n          window.location.replace(url);\n          break;\n        }\n      case MENU_KEYS.MANAGE_EMBEDDED:{\n          this.props.manageEmbedded();\n          break;\n        }\n      default:\n        break;}\n\n  }\n\n  render() {var _dashboardInfo$common, _dashboardInfo$common2, _dashboardInfo$metada;\n    const {\n      dashboardTitle,\n      dashboardId,\n      dashboardInfo,\n      refreshFrequency,\n      shouldPersistRefreshFrequency,\n      editMode,\n      customCss,\n      colorNamespace,\n      colorScheme,\n      layout,\n      expandedSlices,\n      onSave,\n      userCanEdit,\n      userCanShare,\n      userCanSave,\n      userCanCurate,\n      isLoading,\n      refreshLimit,\n      refreshWarning,\n      lastModifiedTime,\n      addSuccessToast,\n      addDangerToast,\n      setIsDropdownVisible,\n      isDropdownVisible,\n      ...rest } =\n    this.props;\n\n    const emailTitle = t('Superset dashboard');\n    const emailSubject = `${emailTitle} ${dashboardTitle}`;\n    const emailBody = t('Check out this dashboard: ');\n\n    const url = getDashboardUrl({\n      pathname: window.location.pathname,\n      filters: getActiveFilters(),\n      hash: window.location.hash });\n\n\n    const refreshIntervalOptions = (_dashboardInfo$common =\n    dashboardInfo.common) == null ? void 0 : (_dashboardInfo$common2 = _dashboardInfo$common.conf) == null ? void 0 : _dashboardInfo$common2.DASHBOARD_AUTO_REFRESH_INTERVALS;\n\n    return (\n      ___EmotionJSX(Menu, _extends({ selectable: false }, rest),\n      !editMode &&\n      ___EmotionJSX(Menu.Item, {\n        key: MENU_KEYS.REFRESH_DASHBOARD,\n\n        disabled: isLoading,\n        onClick: this.handleMenuClick },\n\n      t('Refresh dashboard')),\n\n\n      !editMode &&\n      ___EmotionJSX(Menu.Item, {\n        key: MENU_KEYS.TOGGLE_FULLSCREEN,\n        onClick: this.handleMenuClick },\n\n      getUrlParam(URL_PARAMS.standalone) ?\n      t('Exit fullscreen') :\n      t('Enter fullscreen')),\n\n\n      editMode &&\n      ___EmotionJSX(Menu.Item, {\n        key: MENU_KEYS.EDIT_PROPERTIES,\n        onClick: this.handleMenuClick },\n\n      t('Edit properties')),\n\n\n      editMode &&\n      ___EmotionJSX(Menu.Item, { key: MENU_KEYS.EDIT_CSS },\n      ___EmotionJSX(CssEditor, {\n        triggerNode: ___EmotionJSX(\"span\", null, t('Edit CSS')),\n        initialCss: this.state.css,\n        templates: this.state.cssTemplates,\n        onChange: this.changeCss })),\n\n\n\n      ___EmotionJSX(Menu.Divider, null),\n      userCanSave &&\n      ___EmotionJSX(Menu.Item, { key: MENU_KEYS.SAVE_MODAL },\n      ___EmotionJSX(SaveModal, {\n        addSuccessToast: this.props.addSuccessToast,\n        addDangerToast: this.props.addDangerToast,\n        dashboardId: dashboardId,\n        dashboardTitle: dashboardTitle,\n        dashboardInfo: dashboardInfo,\n        saveType: SAVE_TYPE_NEWDASHBOARD,\n        layout: layout,\n        expandedSlices: expandedSlices,\n        refreshFrequency: refreshFrequency,\n        shouldPersistRefreshFrequency: shouldPersistRefreshFrequency,\n        lastModifiedTime: lastModifiedTime,\n        customCss: customCss,\n        colorNamespace: colorNamespace,\n        colorScheme: colorScheme,\n        onSave: onSave,\n        triggerNode:\n        ___EmotionJSX(\"span\", null, t('Save as')),\n\n        canOverwrite: userCanEdit })),\n\n\n\n      !editMode &&\n      ___EmotionJSX(Menu.Item, {\n        key: MENU_KEYS.DOWNLOAD_AS_IMAGE,\n        onClick: this.handleMenuClick },\n\n      t('Download as image')),\n\n\n      userCanShare &&\n      ___EmotionJSX(Menu.SubMenu, {\n        key: MENU_KEYS.SHARE_DASHBOARD,\n\n        disabled: isLoading,\n        title: t('Share') },\n\n      ___EmotionJSX(ShareMenuItems, {\n        url: url,\n        copyMenuItemTitle: t('Copy permalink to clipboard'),\n        emailMenuItemTitle: t('Share permalink by email'),\n        emailSubject: emailSubject,\n        emailBody: emailBody,\n        addSuccessToast: addSuccessToast,\n        addDangerToast: addDangerToast,\n        dashboardId: dashboardId })),\n\n\n\n      !editMode && userCanCurate &&\n      ___EmotionJSX(Menu.Item, {\n        key: MENU_KEYS.MANAGE_EMBEDDED,\n        onClick: this.handleMenuClick },\n\n      t('Embed dashboard')),\n\n\n      ___EmotionJSX(Menu.Divider, null),\n      !editMode ?\n      this.state.showReportSubMenu ?\n      ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(Menu.SubMenu, { title: t('Manage email report') },\n      ___EmotionJSX(HeaderReportDropdown, {\n        dashboardId: dashboardInfo.id,\n        setShowReportSubMenu: this.setShowReportSubMenu,\n        showReportSubMenu: this.state.showReportSubMenu,\n        setIsDropdownVisible: setIsDropdownVisible,\n        isDropdownVisible: isDropdownVisible,\n        useTextMenu: true })),\n\n\n      ___EmotionJSX(Menu.Divider, null)) :\n\n\n      ___EmotionJSX(Menu, null,\n      ___EmotionJSX(HeaderReportDropdown, {\n        dashboardId: dashboardInfo.id,\n        setShowReportSubMenu: this.setShowReportSubMenu,\n        setIsDropdownVisible: setIsDropdownVisible,\n        isDropdownVisible: isDropdownVisible,\n        useTextMenu: true })) :\n\n\n\n      null,\n      editMode &&\n      !(\n      isFeatureEnabled(FeatureFlag.DASHBOARD_NATIVE_FILTERS) &&\n      _isEmpty(dashboardInfo == null ? void 0 : (_dashboardInfo$metada = dashboardInfo.metadata) == null ? void 0 : _dashboardInfo$metada.filter_scopes)) &&\n\n      ___EmotionJSX(Menu.Item, { key: MENU_KEYS.SET_FILTER_MAPPING },\n      ___EmotionJSX(FilterScopeModal, {\n        className: \"m-r-5\",\n        triggerNode: t('Set filter mapping') })),\n\n\n\n\n      ___EmotionJSX(Menu.Item, { key: MENU_KEYS.AUTOREFRESH_MODAL },\n      ___EmotionJSX(RefreshIntervalModal, {\n        addSuccessToast: this.props.addSuccessToast,\n        refreshFrequency: refreshFrequency,\n        refreshLimit: refreshLimit,\n        refreshWarning: refreshWarning,\n        onChange: this.changeRefreshInterval,\n        editMode: editMode,\n        refreshIntervalOptions: refreshIntervalOptions,\n        triggerNode: ___EmotionJSX(\"span\", null, t('Set auto-refresh interval')) }))));\n\n\n\n\n  }}\n\n\nHeaderActionsDropdown.propTypes = propTypes;\nHeaderActionsDropdown.defaultProps = defaultProps;\n\nexport default HeaderActionsDropdown;","map":{"version":3,"names":["React","PropTypes","FeatureFlag","SupersetClient","t","Menu","URL_PARAMS","ShareMenuItems","CssEditor","RefreshIntervalModal","SaveModal","HeaderReportDropdown","injectCustomCss","SAVE_TYPE_NEWDASHBOARD","FilterScopeModal","downloadAsImage","getDashboardUrl","getActiveFilters","getUrlParam","LOG_ACTIONS_DASHBOARD_DOWNLOAD_AS_IMAGE","isFeatureEnabled","propTypes","addSuccessToast","func","isRequired","addDangerToast","dashboardInfo","object","dashboardId","number","dashboardTitle","string","dataMask","customCss","colorNamespace","colorScheme","onChange","updateCss","forceRefreshAllCharts","refreshFrequency","shouldPersistRefreshFrequency","bool","setRefreshFrequency","startPeriodicRender","editMode","userCanEdit","userCanShare","userCanSave","userCanCurate","isLoading","layout","expandedSlices","onSave","showPropertiesModal","manageEmbedded","logEvent","refreshLimit","refreshWarning","lastModifiedTime","defaultProps","undefined","MENU_KEYS","SAVE_MODAL","SHARE_DASHBOARD","REFRESH_DASHBOARD","AUTOREFRESH_MODAL","SET_FILTER_MAPPING","EDIT_PROPERTIES","EDIT_CSS","DOWNLOAD_AS_IMAGE","TOGGLE_FULLSCREEN","MANAGE_EMBEDDED","MANAGE_EMAIL_REPORT","SCREENSHOT_NODE_SELECTOR","HeaderActionsDropdown","PureComponent","discardChanges","window","location","reload","constructor","props","state","css","cssTemplates","showReportSubMenu","changeCss","bind","changeRefreshInterval","handleMenuClick","setShowReportSubMenu","UNSAFE_componentWillMount","get","endpoint","then","json","result","map","row","value","template_name","label","setState","catch","UNSAFE_componentWillReceiveProps","nextProps","show","refreshInterval","isPersistent","key","domEvent","menu","document","querySelector","style","visibility","url","pathname","filters","hash","standalone","replace","render","setIsDropdownVisible","isDropdownVisible","rest","emailTitle","emailSubject","emailBody","refreshIntervalOptions","common","conf","DASHBOARD_AUTO_REFRESH_INTERVALS","id","DASHBOARD_NATIVE_FILTERS","metadata","filter_scopes"],"sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/components/Header/HeaderActionsDropdown/index.jsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { isEmpty } from 'lodash';\n\nimport { FeatureFlag, SupersetClient, t } from '@superset-ui/core';\n\nimport { Menu } from 'src/components/Menu';\nimport { URL_PARAMS } from 'src/constants';\nimport ShareMenuItems from 'src/dashboard/components/menu/ShareMenuItems';\nimport CssEditor from 'src/dashboard/components/CssEditor';\nimport RefreshIntervalModal from 'src/dashboard/components/RefreshIntervalModal';\nimport SaveModal from 'src/dashboard/components/SaveModal';\nimport HeaderReportDropdown from 'src/components/ReportModal/HeaderReportDropdown';\nimport injectCustomCss from 'src/dashboard/util/injectCustomCss';\nimport { SAVE_TYPE_NEWDASHBOARD } from 'src/dashboard/util/constants';\nimport FilterScopeModal from 'src/dashboard/components/filterscope/FilterScopeModal';\nimport downloadAsImage from 'src/utils/downloadAsImage';\nimport getDashboardUrl from 'src/dashboard/util/getDashboardUrl';\nimport { getActiveFilters } from 'src/dashboard/util/activeDashboardFilters';\nimport { getUrlParam } from 'src/utils/urlUtils';\nimport { LOG_ACTIONS_DASHBOARD_DOWNLOAD_AS_IMAGE } from 'src/logger/LogUtils';\nimport { isFeatureEnabled } from 'src/featureFlags';\n\nconst propTypes = {\n  addSuccessToast: PropTypes.func.isRequired,\n  addDangerToast: PropTypes.func.isRequired,\n  dashboardInfo: PropTypes.object.isRequired,\n  dashboardId: PropTypes.number,\n  dashboardTitle: PropTypes.string,\n  dataMask: PropTypes.object.isRequired,\n  customCss: PropTypes.string,\n  colorNamespace: PropTypes.string,\n  colorScheme: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  updateCss: PropTypes.func.isRequired,\n  forceRefreshAllCharts: PropTypes.func.isRequired,\n  refreshFrequency: PropTypes.number,\n  shouldPersistRefreshFrequency: PropTypes.bool.isRequired,\n  setRefreshFrequency: PropTypes.func.isRequired,\n  startPeriodicRender: PropTypes.func.isRequired,\n  editMode: PropTypes.bool.isRequired,\n  userCanEdit: PropTypes.bool,\n  userCanShare: PropTypes.bool,\n  userCanSave: PropTypes.bool,\n  userCanCurate: PropTypes.bool.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  layout: PropTypes.object.isRequired,\n  expandedSlices: PropTypes.object,\n  onSave: PropTypes.func.isRequired,\n  showPropertiesModal: PropTypes.func.isRequired,\n  manageEmbedded: PropTypes.func.isRequired,\n  logEvent: PropTypes.func,\n  refreshLimit: PropTypes.number,\n  refreshWarning: PropTypes.string,\n  lastModifiedTime: PropTypes.number.isRequired,\n};\n\nconst defaultProps = {\n  colorNamespace: undefined,\n  colorScheme: undefined,\n  refreshLimit: 0,\n  refreshWarning: null,\n};\n\nconst MENU_KEYS = {\n  SAVE_MODAL: 'save-modal',\n  SHARE_DASHBOARD: 'share-dashboard',\n  REFRESH_DASHBOARD: 'refresh-dashboard',\n  AUTOREFRESH_MODAL: 'autorefresh-modal',\n  SET_FILTER_MAPPING: 'set-filter-mapping',\n  EDIT_PROPERTIES: 'edit-properties',\n  EDIT_CSS: 'edit-css',\n  DOWNLOAD_AS_IMAGE: 'download-as-image',\n  TOGGLE_FULLSCREEN: 'toggle-fullscreen',\n  MANAGE_EMBEDDED: 'manage-embedded',\n  MANAGE_EMAIL_REPORT: 'manage-email-report',\n};\n\nconst SCREENSHOT_NODE_SELECTOR = '.dashboard';\n\nclass HeaderActionsDropdown extends React.PureComponent {\n  static discardChanges() {\n    window.location.reload();\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      css: props.customCss,\n      cssTemplates: [],\n      showReportSubMenu: null,\n    };\n\n    this.changeCss = this.changeCss.bind(this);\n    this.changeRefreshInterval = this.changeRefreshInterval.bind(this);\n    this.handleMenuClick = this.handleMenuClick.bind(this);\n    this.setShowReportSubMenu = this.setShowReportSubMenu.bind(this);\n  }\n\n  UNSAFE_componentWillMount() {\n    SupersetClient.get({ endpoint: '/csstemplateasyncmodelview/api/read' })\n      .then(({ json }) => {\n        const cssTemplates = json.result.map(row => ({\n          value: row.template_name,\n          css: row.css,\n          label: row.template_name,\n        }));\n        this.setState({ cssTemplates });\n      })\n      .catch(() => {\n        this.props.addDangerToast(\n          t('An error occurred while fetching available CSS templates'),\n        );\n      });\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.customCss !== nextProps.customCss) {\n      this.setState({ css: nextProps.customCss }, () => {\n        injectCustomCss(nextProps.customCss);\n      });\n    }\n  }\n\n  setShowReportSubMenu(show) {\n    this.setState({\n      showReportSubMenu: show,\n    });\n  }\n\n  changeCss(css) {\n    this.props.onChange();\n    this.props.updateCss(css);\n  }\n\n  changeRefreshInterval(refreshInterval, isPersistent) {\n    this.props.setRefreshFrequency(refreshInterval, isPersistent);\n    this.props.startPeriodicRender(refreshInterval * 1000);\n  }\n\n  handleMenuClick({ key, domEvent }) {\n    switch (key) {\n      case MENU_KEYS.REFRESH_DASHBOARD:\n        this.props.forceRefreshAllCharts();\n        this.props.addSuccessToast(t('Refreshing charts'));\n        break;\n      case MENU_KEYS.EDIT_PROPERTIES:\n        this.props.showPropertiesModal();\n        break;\n      case MENU_KEYS.DOWNLOAD_AS_IMAGE: {\n        // menu closes with a delay, we need to hide it manually,\n        // so that we don't capture it on the screenshot\n        const menu = document.querySelector(\n          '.ant-dropdown:not(.ant-dropdown-hidden)',\n        );\n        menu.style.visibility = 'hidden';\n        downloadAsImage(\n          SCREENSHOT_NODE_SELECTOR,\n          this.props.dashboardTitle,\n          true,\n        )(domEvent).then(() => {\n          menu.style.visibility = 'visible';\n        });\n        this.props.logEvent?.(LOG_ACTIONS_DASHBOARD_DOWNLOAD_AS_IMAGE);\n        break;\n      }\n      case MENU_KEYS.TOGGLE_FULLSCREEN: {\n        const url = getDashboardUrl({\n          pathname: window.location.pathname,\n          filters: getActiveFilters(),\n          hash: window.location.hash,\n          standalone: !getUrlParam(URL_PARAMS.standalone),\n        });\n        window.location.replace(url);\n        break;\n      }\n      case MENU_KEYS.MANAGE_EMBEDDED: {\n        this.props.manageEmbedded();\n        break;\n      }\n      default:\n        break;\n    }\n  }\n\n  render() {\n    const {\n      dashboardTitle,\n      dashboardId,\n      dashboardInfo,\n      refreshFrequency,\n      shouldPersistRefreshFrequency,\n      editMode,\n      customCss,\n      colorNamespace,\n      colorScheme,\n      layout,\n      expandedSlices,\n      onSave,\n      userCanEdit,\n      userCanShare,\n      userCanSave,\n      userCanCurate,\n      isLoading,\n      refreshLimit,\n      refreshWarning,\n      lastModifiedTime,\n      addSuccessToast,\n      addDangerToast,\n      setIsDropdownVisible,\n      isDropdownVisible,\n      ...rest\n    } = this.props;\n\n    const emailTitle = t('Superset dashboard');\n    const emailSubject = `${emailTitle} ${dashboardTitle}`;\n    const emailBody = t('Check out this dashboard: ');\n\n    const url = getDashboardUrl({\n      pathname: window.location.pathname,\n      filters: getActiveFilters(),\n      hash: window.location.hash,\n    });\n\n    const refreshIntervalOptions =\n      dashboardInfo.common?.conf?.DASHBOARD_AUTO_REFRESH_INTERVALS;\n\n    return (\n      <Menu selectable={false} data-test=\"header-actions-menu\" {...rest}>\n        {!editMode && (\n          <Menu.Item\n            key={MENU_KEYS.REFRESH_DASHBOARD}\n            data-test=\"refresh-dashboard-menu-item\"\n            disabled={isLoading}\n            onClick={this.handleMenuClick}\n          >\n            {t('Refresh dashboard')}\n          </Menu.Item>\n        )}\n        {!editMode && (\n          <Menu.Item\n            key={MENU_KEYS.TOGGLE_FULLSCREEN}\n            onClick={this.handleMenuClick}\n          >\n            {getUrlParam(URL_PARAMS.standalone)\n              ? t('Exit fullscreen')\n              : t('Enter fullscreen')}\n          </Menu.Item>\n        )}\n        {editMode && (\n          <Menu.Item\n            key={MENU_KEYS.EDIT_PROPERTIES}\n            onClick={this.handleMenuClick}\n          >\n            {t('Edit properties')}\n          </Menu.Item>\n        )}\n        {editMode && (\n          <Menu.Item key={MENU_KEYS.EDIT_CSS}>\n            <CssEditor\n              triggerNode={<span>{t('Edit CSS')}</span>}\n              initialCss={this.state.css}\n              templates={this.state.cssTemplates}\n              onChange={this.changeCss}\n            />\n          </Menu.Item>\n        )}\n        <Menu.Divider />\n        {userCanSave && (\n          <Menu.Item key={MENU_KEYS.SAVE_MODAL}>\n            <SaveModal\n              addSuccessToast={this.props.addSuccessToast}\n              addDangerToast={this.props.addDangerToast}\n              dashboardId={dashboardId}\n              dashboardTitle={dashboardTitle}\n              dashboardInfo={dashboardInfo}\n              saveType={SAVE_TYPE_NEWDASHBOARD}\n              layout={layout}\n              expandedSlices={expandedSlices}\n              refreshFrequency={refreshFrequency}\n              shouldPersistRefreshFrequency={shouldPersistRefreshFrequency}\n              lastModifiedTime={lastModifiedTime}\n              customCss={customCss}\n              colorNamespace={colorNamespace}\n              colorScheme={colorScheme}\n              onSave={onSave}\n              triggerNode={\n                <span data-test=\"save-as-menu-item\">{t('Save as')}</span>\n              }\n              canOverwrite={userCanEdit}\n            />\n          </Menu.Item>\n        )}\n        {!editMode && (\n          <Menu.Item\n            key={MENU_KEYS.DOWNLOAD_AS_IMAGE}\n            onClick={this.handleMenuClick}\n          >\n            {t('Download as image')}\n          </Menu.Item>\n        )}\n        {userCanShare && (\n          <Menu.SubMenu\n            key={MENU_KEYS.SHARE_DASHBOARD}\n            data-test=\"share-dashboard-menu-item\"\n            disabled={isLoading}\n            title={t('Share')}\n          >\n            <ShareMenuItems\n              url={url}\n              copyMenuItemTitle={t('Copy permalink to clipboard')}\n              emailMenuItemTitle={t('Share permalink by email')}\n              emailSubject={emailSubject}\n              emailBody={emailBody}\n              addSuccessToast={addSuccessToast}\n              addDangerToast={addDangerToast}\n              dashboardId={dashboardId}\n            />\n          </Menu.SubMenu>\n        )}\n        {!editMode && userCanCurate && (\n          <Menu.Item\n            key={MENU_KEYS.MANAGE_EMBEDDED}\n            onClick={this.handleMenuClick}\n          >\n            {t('Embed dashboard')}\n          </Menu.Item>\n        )}\n        <Menu.Divider />\n        {!editMode ? (\n          this.state.showReportSubMenu ? (\n            <>\n              <Menu.SubMenu title={t('Manage email report')}>\n                <HeaderReportDropdown\n                  dashboardId={dashboardInfo.id}\n                  setShowReportSubMenu={this.setShowReportSubMenu}\n                  showReportSubMenu={this.state.showReportSubMenu}\n                  setIsDropdownVisible={setIsDropdownVisible}\n                  isDropdownVisible={isDropdownVisible}\n                  useTextMenu\n                />\n              </Menu.SubMenu>\n              <Menu.Divider />\n            </>\n          ) : (\n            <Menu>\n              <HeaderReportDropdown\n                dashboardId={dashboardInfo.id}\n                setShowReportSubMenu={this.setShowReportSubMenu}\n                setIsDropdownVisible={setIsDropdownVisible}\n                isDropdownVisible={isDropdownVisible}\n                useTextMenu\n              />\n            </Menu>\n          )\n        ) : null}\n        {editMode &&\n          !(\n            isFeatureEnabled(FeatureFlag.DASHBOARD_NATIVE_FILTERS) &&\n            isEmpty(dashboardInfo?.metadata?.filter_scopes)\n          ) && (\n            <Menu.Item key={MENU_KEYS.SET_FILTER_MAPPING}>\n              <FilterScopeModal\n                className=\"m-r-5\"\n                triggerNode={t('Set filter mapping')}\n              />\n            </Menu.Item>\n          )}\n\n        <Menu.Item key={MENU_KEYS.AUTOREFRESH_MODAL}>\n          <RefreshIntervalModal\n            addSuccessToast={this.props.addSuccessToast}\n            refreshFrequency={refreshFrequency}\n            refreshLimit={refreshLimit}\n            refreshWarning={refreshWarning}\n            onChange={this.changeRefreshInterval}\n            editMode={editMode}\n            refreshIntervalOptions={refreshIntervalOptions}\n            triggerNode={<span>{t('Set auto-refresh interval')}</span>}\n          />\n        </Menu.Item>\n      </Menu>\n    );\n  }\n}\n\nHeaderActionsDropdown.propTypes = propTypes;\nHeaderActionsDropdown.defaultProps = defaultProps;\n\nexport default HeaderActionsDropdown;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}