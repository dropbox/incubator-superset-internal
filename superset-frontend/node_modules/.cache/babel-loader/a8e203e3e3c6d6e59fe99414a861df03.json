{"ast":null,"code":"import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Tooltip } from 'src/components/Tooltip';\nimport {\nCategoricalColorNamespace,\ncss,\nlogging,\nSupersetClient,\nt,\ntn } from\n'@superset-ui/core';\nimport { chartPropShape } from 'src/dashboard/util/propShapes';\nimport AlteredSliceTag from 'src/components/AlteredSliceTag';\nimport Button from 'src/components/Button';\nimport Icons from 'src/components/Icons';\nimport PropertiesModal from 'src/explore/components/PropertiesModal';\nimport { sliceUpdated } from 'src/explore/actions/exploreActions';\nimport { PageHeaderWithActions } from 'src/components/PageHeaderWithActions';\nimport MetadataBar, { MetadataType } from 'src/components/MetadataBar';\nimport { setSaveChartModalVisibility } from 'src/explore/actions/saveModalActions';\nimport { useExploreAdditionalActionsMenu } from '../useExploreAdditionalActionsMenu';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  actions: PropTypes.object.isRequired,\n  canOverwrite: PropTypes.bool.isRequired,\n  canDownload: PropTypes.bool.isRequired,\n  dashboardId: PropTypes.number,\n  isStarred: PropTypes.bool.isRequired,\n  slice: PropTypes.object,\n  sliceName: PropTypes.string,\n  table_name: PropTypes.string,\n  formData: PropTypes.object,\n  ownState: PropTypes.object,\n  timeout: PropTypes.number,\n  chart: chartPropShape,\n  saveDisabled: PropTypes.bool };\n\n\nconst saveButtonStyles = (theme) => css`\n  color: ${theme.colors.primary.dark2};\n  & > span[role='img'] {\n    margin-right: 0;\n  }\n`;\n\nconst additionalItemsStyles = (theme) => css`\n  display: flex;\n  align-items: center;\n  margin-left: ${theme.gridUnit}px;\n  & > span {\n    margin-right: ${theme.gridUnit * 3}px;\n  }\n`;\n\nexport const ExploreChartHeader = (_ref) =>\n\n\n\n\n\n\n\n\n\n\n\n\n\n{var _context;let { dashboardId, slice, actions, formData, ownState, chart, user, canOverwrite, canDownload, isStarred, sliceName, saveDisabled, metadata } = _ref;\n  const dispatch = useDispatch();\n  const { latestQueryFormData, sliceFormData } = chart;\n  const [isPropertiesModalOpen, setIsPropertiesModalOpen] = useState(false);\n\n  const updateCategoricalNamespace = async () => {\n    const { dashboards } = metadata || {};\n    const dashboard =\n    dashboardId && dashboards && dashboards.find((d) => d.id === dashboardId);\n\n    if (dashboard) {\n      try {var _response$json;\n        // Dashboards from metadata don't contain the json_metadata field\n        // to avoid unnecessary payload. Here we query for the dashboard json_metadata.\n        const response = await SupersetClient.get({\n          endpoint: `/api/v1/dashboard/${dashboard.id}` });\n\n        const result = response == null ? void 0 : (_response$json = response.json) == null ? void 0 : _response$json.result;\n\n        // setting the chart to use the dashboard custom label colors if any\n        const metadata = JSON.parse(result.json_metadata);\n        const sharedLabelColors = metadata.shared_label_colors || {};\n        const customLabelColors = metadata.label_colors || {};\n        const mergedLabelColors = {\n          ...sharedLabelColors,\n          ...customLabelColors };\n\n\n        const categoricalNamespace = CategoricalColorNamespace.getNamespace();\n\n        Object.keys(mergedLabelColors).forEach((label) => {\n          categoricalNamespace.setColor(\n          label,\n          mergedLabelColors[label],\n          metadata.color_scheme);\n\n        });\n      } catch (error) {\n        logging.info(t('Unable to retrieve dashboard colors'));\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (dashboardId) updateCategoricalNamespace();\n  }, []);\n\n  const openPropertiesModal = () => {\n    setIsPropertiesModalOpen(true);\n  };\n\n  const closePropertiesModal = () => {\n    setIsPropertiesModalOpen(false);\n  };\n\n  const showModal = useCallback(() => {\n    dispatch(setSaveChartModalVisibility(true));\n  }, [dispatch]);\n\n  const updateSlice = useCallback(\n  (slice) => {\n    dispatch(sliceUpdated(slice));\n  },\n  [dispatch]);\n\n\n  const [menu, isDropdownVisible, setIsDropdownVisible] =\n  useExploreAdditionalActionsMenu(\n  latestQueryFormData,\n  canDownload,\n  slice,\n  actions.redirectSQLLab,\n  openPropertiesModal,\n  ownState,\n  metadata == null ? void 0 : metadata.dashboards);\n\n\n  const metadataBar = useMemo(() => {\n    if (!metadata) {\n      return null;\n    }\n    const items = [];\n    items.push({\n      type: MetadataType.DASHBOARDS,\n      title:\n      metadata.dashboards.length > 0 ?\n      tn(\n      'Added to 1 dashboard',\n      'Added to %s dashboards',\n      metadata.dashboards.length,\n      metadata.dashboards.length) :\n\n      t('Not added to any dashboard'),\n      description:\n      metadata.dashboards.length > 0 ?\n      t(\n      'You can preview the list of dashboards in the chart settings dropdown.') :\n\n      undefined });\n\n    items.push({\n      type: MetadataType.LAST_MODIFIED,\n      value: metadata.changed_on_humanized,\n      modifiedBy: metadata.changed_by || t('Not available') });\n\n    items.push({\n      type: MetadataType.OWNER,\n      createdBy: metadata.created_by || t('Not available'),\n      owners: metadata.owners.length > 0 ? metadata.owners : t('None'),\n      createdOn: metadata.created_on_humanized });\n\n    if (slice != null && slice.description) {\n      items.push({\n        type: MetadataType.DESCRIPTION,\n        value: slice == null ? void 0 : slice.description });\n\n    }\n    return ___EmotionJSX(MetadataBar, { items: items, tooltipPlacement: \"bottom\" });\n  }, [metadata, slice == null ? void 0 : slice.description]);\n\n  const oldSliceName = slice == null ? void 0 : slice.slice_name;\n  return (\n    ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(PageHeaderWithActions, {\n      editableTitleProps: {\n        title: sliceName,\n        canEdit:\n        !slice ||\n        canOverwrite ||\n        _includesInstanceProperty(_context = (slice == null ? void 0 : slice.owners) || []).call(_context, user == null ? void 0 : user.userId),\n        onSave: actions.updateChartTitle,\n        placeholder: t('Add the name of the chart'),\n        label: t('Chart title') },\n\n      showTitlePanelItems: !!slice,\n      certificatiedBadgeProps: {\n        certifiedBy: slice == null ? void 0 : slice.certified_by,\n        details: slice == null ? void 0 : slice.certification_details },\n\n      showFaveStar: !!(user != null && user.userId),\n      faveStarProps: {\n        itemId: slice == null ? void 0 : slice.slice_id,\n        fetchFaveStar: actions.fetchFaveStar,\n        saveFaveStar: actions.saveFaveStar,\n        isStarred,\n        showTooltip: true },\n\n      titlePanelAdditionalItems:\n      ___EmotionJSX(\"div\", { css: additionalItemsStyles },\n      sliceFormData ?\n      ___EmotionJSX(AlteredSliceTag, {\n        className: \"altered\",\n        origFormData: {\n          ...sliceFormData,\n          chartTitle: oldSliceName },\n\n        currentFormData: { ...formData, chartTitle: sliceName } }) :\n\n      null,\n      metadataBar),\n\n\n      rightPanelAdditionalItems:\n      ___EmotionJSX(Tooltip, {\n        title:\n        saveDisabled ?\n        t('Add required control values to save chart') :\n        null },\n\n\n\n      ___EmotionJSX(\"div\", null,\n      ___EmotionJSX(Button, {\n        buttonStyle: \"secondary\",\n        onClick: showModal,\n        disabled: saveDisabled,\n\n        css: saveButtonStyles },\n\n      ___EmotionJSX(Icons.SaveOutlined, { iconSize: \"l\" }),\n      t('Save')))),\n\n\n\n\n      additionalActionsMenu: menu,\n      menuDropdownProps: {\n        visible: isDropdownVisible,\n        onVisibleChange: setIsDropdownVisible } }),\n\n\n    isPropertiesModalOpen &&\n    ___EmotionJSX(PropertiesModal, {\n      show: isPropertiesModalOpen,\n      onHide: closePropertiesModal,\n      onSave: updateSlice,\n      slice: slice })));\n\n\n\n\n};\n\nExploreChartHeader.propTypes = propTypes;\n\nexport default ExploreChartHeader;","map":{"version":3,"names":["React","useCallback","useEffect","useMemo","useState","useDispatch","PropTypes","Tooltip","CategoricalColorNamespace","css","logging","SupersetClient","t","tn","chartPropShape","AlteredSliceTag","Button","Icons","PropertiesModal","sliceUpdated","PageHeaderWithActions","MetadataBar","MetadataType","setSaveChartModalVisibility","useExploreAdditionalActionsMenu","propTypes","actions","object","isRequired","canOverwrite","bool","canDownload","dashboardId","number","isStarred","slice","sliceName","string","table_name","formData","ownState","timeout","chart","saveDisabled","saveButtonStyles","theme","colors","primary","dark2","additionalItemsStyles","gridUnit","ExploreChartHeader","user","metadata","dispatch","latestQueryFormData","sliceFormData","isPropertiesModalOpen","setIsPropertiesModalOpen","updateCategoricalNamespace","dashboards","dashboard","find","d","id","response","get","endpoint","result","json","JSON","parse","json_metadata","sharedLabelColors","shared_label_colors","customLabelColors","label_colors","mergedLabelColors","categoricalNamespace","getNamespace","Object","keys","forEach","label","setColor","color_scheme","error","info","openPropertiesModal","closePropertiesModal","showModal","updateSlice","menu","isDropdownVisible","setIsDropdownVisible","redirectSQLLab","metadataBar","items","push","type","DASHBOARDS","title","length","description","undefined","LAST_MODIFIED","value","changed_on_humanized","modifiedBy","changed_by","OWNER","createdBy","created_by","owners","createdOn","created_on_humanized","DESCRIPTION","oldSliceName","slice_name","canEdit","userId","onSave","updateChartTitle","placeholder","certifiedBy","certified_by","details","certification_details","itemId","slice_id","fetchFaveStar","saveFaveStar","showTooltip","chartTitle","visible","onVisibleChange"],"sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/explore/components/ExploreChartHeader/index.jsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Tooltip } from 'src/components/Tooltip';\nimport {\n  CategoricalColorNamespace,\n  css,\n  logging,\n  SupersetClient,\n  t,\n  tn,\n} from '@superset-ui/core';\nimport { chartPropShape } from 'src/dashboard/util/propShapes';\nimport AlteredSliceTag from 'src/components/AlteredSliceTag';\nimport Button from 'src/components/Button';\nimport Icons from 'src/components/Icons';\nimport PropertiesModal from 'src/explore/components/PropertiesModal';\nimport { sliceUpdated } from 'src/explore/actions/exploreActions';\nimport { PageHeaderWithActions } from 'src/components/PageHeaderWithActions';\nimport MetadataBar, { MetadataType } from 'src/components/MetadataBar';\nimport { setSaveChartModalVisibility } from 'src/explore/actions/saveModalActions';\nimport { useExploreAdditionalActionsMenu } from '../useExploreAdditionalActionsMenu';\n\nconst propTypes = {\n  actions: PropTypes.object.isRequired,\n  canOverwrite: PropTypes.bool.isRequired,\n  canDownload: PropTypes.bool.isRequired,\n  dashboardId: PropTypes.number,\n  isStarred: PropTypes.bool.isRequired,\n  slice: PropTypes.object,\n  sliceName: PropTypes.string,\n  table_name: PropTypes.string,\n  formData: PropTypes.object,\n  ownState: PropTypes.object,\n  timeout: PropTypes.number,\n  chart: chartPropShape,\n  saveDisabled: PropTypes.bool,\n};\n\nconst saveButtonStyles = theme => css`\n  color: ${theme.colors.primary.dark2};\n  & > span[role='img'] {\n    margin-right: 0;\n  }\n`;\n\nconst additionalItemsStyles = theme => css`\n  display: flex;\n  align-items: center;\n  margin-left: ${theme.gridUnit}px;\n  & > span {\n    margin-right: ${theme.gridUnit * 3}px;\n  }\n`;\n\nexport const ExploreChartHeader = ({\n  dashboardId,\n  slice,\n  actions,\n  formData,\n  ownState,\n  chart,\n  user,\n  canOverwrite,\n  canDownload,\n  isStarred,\n  sliceName,\n  saveDisabled,\n  metadata,\n}) => {\n  const dispatch = useDispatch();\n  const { latestQueryFormData, sliceFormData } = chart;\n  const [isPropertiesModalOpen, setIsPropertiesModalOpen] = useState(false);\n\n  const updateCategoricalNamespace = async () => {\n    const { dashboards } = metadata || {};\n    const dashboard =\n      dashboardId && dashboards && dashboards.find(d => d.id === dashboardId);\n\n    if (dashboard) {\n      try {\n        // Dashboards from metadata don't contain the json_metadata field\n        // to avoid unnecessary payload. Here we query for the dashboard json_metadata.\n        const response = await SupersetClient.get({\n          endpoint: `/api/v1/dashboard/${dashboard.id}`,\n        });\n        const result = response?.json?.result;\n\n        // setting the chart to use the dashboard custom label colors if any\n        const metadata = JSON.parse(result.json_metadata);\n        const sharedLabelColors = metadata.shared_label_colors || {};\n        const customLabelColors = metadata.label_colors || {};\n        const mergedLabelColors = {\n          ...sharedLabelColors,\n          ...customLabelColors,\n        };\n\n        const categoricalNamespace = CategoricalColorNamespace.getNamespace();\n\n        Object.keys(mergedLabelColors).forEach(label => {\n          categoricalNamespace.setColor(\n            label,\n            mergedLabelColors[label],\n            metadata.color_scheme,\n          );\n        });\n      } catch (error) {\n        logging.info(t('Unable to retrieve dashboard colors'));\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (dashboardId) updateCategoricalNamespace();\n  }, []);\n\n  const openPropertiesModal = () => {\n    setIsPropertiesModalOpen(true);\n  };\n\n  const closePropertiesModal = () => {\n    setIsPropertiesModalOpen(false);\n  };\n\n  const showModal = useCallback(() => {\n    dispatch(setSaveChartModalVisibility(true));\n  }, [dispatch]);\n\n  const updateSlice = useCallback(\n    slice => {\n      dispatch(sliceUpdated(slice));\n    },\n    [dispatch],\n  );\n\n  const [menu, isDropdownVisible, setIsDropdownVisible] =\n    useExploreAdditionalActionsMenu(\n      latestQueryFormData,\n      canDownload,\n      slice,\n      actions.redirectSQLLab,\n      openPropertiesModal,\n      ownState,\n      metadata?.dashboards,\n    );\n\n  const metadataBar = useMemo(() => {\n    if (!metadata) {\n      return null;\n    }\n    const items = [];\n    items.push({\n      type: MetadataType.DASHBOARDS,\n      title:\n        metadata.dashboards.length > 0\n          ? tn(\n              'Added to 1 dashboard',\n              'Added to %s dashboards',\n              metadata.dashboards.length,\n              metadata.dashboards.length,\n            )\n          : t('Not added to any dashboard'),\n      description:\n        metadata.dashboards.length > 0\n          ? t(\n              'You can preview the list of dashboards in the chart settings dropdown.',\n            )\n          : undefined,\n    });\n    items.push({\n      type: MetadataType.LAST_MODIFIED,\n      value: metadata.changed_on_humanized,\n      modifiedBy: metadata.changed_by || t('Not available'),\n    });\n    items.push({\n      type: MetadataType.OWNER,\n      createdBy: metadata.created_by || t('Not available'),\n      owners: metadata.owners.length > 0 ? metadata.owners : t('None'),\n      createdOn: metadata.created_on_humanized,\n    });\n    if (slice?.description) {\n      items.push({\n        type: MetadataType.DESCRIPTION,\n        value: slice?.description,\n      });\n    }\n    return <MetadataBar items={items} tooltipPlacement=\"bottom\" />;\n  }, [metadata, slice?.description]);\n\n  const oldSliceName = slice?.slice_name;\n  return (\n    <>\n      <PageHeaderWithActions\n        editableTitleProps={{\n          title: sliceName,\n          canEdit:\n            !slice ||\n            canOverwrite ||\n            (slice?.owners || []).includes(user?.userId),\n          onSave: actions.updateChartTitle,\n          placeholder: t('Add the name of the chart'),\n          label: t('Chart title'),\n        }}\n        showTitlePanelItems={!!slice}\n        certificatiedBadgeProps={{\n          certifiedBy: slice?.certified_by,\n          details: slice?.certification_details,\n        }}\n        showFaveStar={!!user?.userId}\n        faveStarProps={{\n          itemId: slice?.slice_id,\n          fetchFaveStar: actions.fetchFaveStar,\n          saveFaveStar: actions.saveFaveStar,\n          isStarred,\n          showTooltip: true,\n        }}\n        titlePanelAdditionalItems={\n          <div css={additionalItemsStyles}>\n            {sliceFormData ? (\n              <AlteredSliceTag\n                className=\"altered\"\n                origFormData={{\n                  ...sliceFormData,\n                  chartTitle: oldSliceName,\n                }}\n                currentFormData={{ ...formData, chartTitle: sliceName }}\n              />\n            ) : null}\n            {metadataBar}\n          </div>\n        }\n        rightPanelAdditionalItems={\n          <Tooltip\n            title={\n              saveDisabled\n                ? t('Add required control values to save chart')\n                : null\n            }\n          >\n            {/* needed to wrap button in a div - antd tooltip doesn't work with disabled button */}\n            <div>\n              <Button\n                buttonStyle=\"secondary\"\n                onClick={showModal}\n                disabled={saveDisabled}\n                data-test=\"query-save-button\"\n                css={saveButtonStyles}\n              >\n                <Icons.SaveOutlined iconSize=\"l\" />\n                {t('Save')}\n              </Button>\n            </div>\n          </Tooltip>\n        }\n        additionalActionsMenu={menu}\n        menuDropdownProps={{\n          visible: isDropdownVisible,\n          onVisibleChange: setIsDropdownVisible,\n        }}\n      />\n      {isPropertiesModalOpen && (\n        <PropertiesModal\n          show={isPropertiesModalOpen}\n          onHide={closePropertiesModal}\n          onSave={updateSlice}\n          slice={slice}\n        />\n      )}\n    </>\n  );\n};\n\nExploreChartHeader.propTypes = propTypes;\n\nexport default ExploreChartHeader;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}