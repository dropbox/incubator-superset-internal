{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { GeoJsonLayer } from 'deck.gl';\nimport geojsonExtent from '@mapbox/geojson-extent';\n\nimport { DeckGLContainerStyledWrapper } from '../../DeckGLContainer';\nimport { hexToRGB } from '../../utils/colors';\nimport sandboxedEval from '../../utils/sandbox';\nimport { commonLayerProps } from '../common';\nimport TooltipRow from '../../TooltipRow';\nimport fitViewport from '../../utils/fitViewport';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propertyMap = {\n  fillColor: 'fillColor',\n  color: 'fillColor',\n  fill: 'fillColor',\n  'fill-color': 'fillColor',\n  strokeColor: 'strokeColor',\n  'stroke-color': 'strokeColor',\n  'stroke-width': 'strokeWidth' };\n\n\nconst alterProps = (props, propOverrides) => {\n  const newProps = {};\n  Object.keys(props).forEach((k) => {\n    if (k in propertyMap) {\n      newProps[propertyMap[k]] = props[k];\n    } else {\n      newProps[k] = props[k];\n    }\n  });\n  if (typeof props.fillColor === 'string') {\n    newProps.fillColor = hexToRGB(props.fillColor);\n  }\n  if (typeof props.strokeColor === 'string') {\n    newProps.strokeColor = hexToRGB(props.strokeColor);\n  }\n\n  return {\n    ...newProps,\n    ...propOverrides };\n\n};\nlet features;\nconst recurseGeoJson = (node, propOverrides, extraProps) => {\n  if (node && node.features) {\n    node.features.forEach((obj) => {\n      recurseGeoJson(obj, propOverrides, node.extraProps || extraProps);\n    });\n  }\n  if (node && node.geometry) {\n    const newNode = {\n      ...node,\n      properties: alterProps(node.properties, propOverrides) };\n\n    if (!newNode.extraProps) {\n      newNode.extraProps = extraProps;\n    }\n    features.push(newNode);\n  }\n};\n\nfunction setTooltipContent(o) {\n  return (\n    o.object.extraProps &&\n    ___EmotionJSX(\"div\", { className: \"deckgl-tooltip\" },\n    Object.keys(o.object.extraProps).map((prop, index) =>\n    ___EmotionJSX(TooltipRow, {\n      key: `prop-${index}`,\n      label: `${prop}: `,\n      value: `${o.object.extraProps[prop]}` }))));\n\n\n\n\n\n}\n\nconst getFillColor = (feature) => {var _feature$properties;return feature == null ? void 0 : (_feature$properties = feature.properties) == null ? void 0 : _feature$properties.fillColor;};\nconst getLineColor = (feature) => {var _feature$properties2;return feature == null ? void 0 : (_feature$properties2 = feature.properties) == null ? void 0 : _feature$properties2.strokeColor;};\n\nexport function getLayer(formData, payload, onAddFilter, setTooltip) {\n  const fd = formData;\n  const fc = fd.fill_color_picker;\n  const sc = fd.stroke_color_picker;\n  const fillColor = [fc.r, fc.g, fc.b, 255 * fc.a];\n  const strokeColor = [sc.r, sc.g, sc.b, 255 * sc.a];\n  const propOverrides = {};\n  if (fillColor[3] > 0) {\n    propOverrides.fillColor = fillColor;\n  }\n  if (strokeColor[3] > 0) {\n    propOverrides.strokeColor = strokeColor;\n  }\n\n  features = [];\n  recurseGeoJson(payload.data, propOverrides);\n\n  let jsFnMutator;\n  if (fd.js_data_mutator) {\n    // Applying user defined data mutator if defined\n    jsFnMutator = sandboxedEval(fd.js_data_mutator);\n    features = jsFnMutator(features);\n  }\n\n  return new GeoJsonLayer({\n    id: `geojson-layer-${fd.slice_id}`,\n    filled: fd.filled,\n    data: features,\n    stroked: fd.stroked,\n    extruded: fd.extruded,\n    pointRadiusScale: fd.point_radius_scale,\n    getFillColor,\n    getLineWidth: fd.line_width || 1,\n    getLineColor,\n    ...commonLayerProps(fd, setTooltip, setTooltipContent) });\n\n}\n\nconst propTypes = {\n  formData: PropTypes.object.isRequired,\n  payload: PropTypes.object.isRequired,\n  setControlValue: PropTypes.func.isRequired,\n  viewport: PropTypes.object.isRequired,\n  onAddFilter: PropTypes.func };\n\nconst defaultProps = {\n  onAddFilter() {} };\n\n\nclass DeckGLGeoJson extends React.Component {constructor() {super(...arguments);this.\n    containerRef = /*#__PURE__*/React.createRef();this.\n\n    setTooltip = (tooltip) => {\n      const { current } = this.containerRef;\n      if (current) {\n        current.setTooltip(tooltip);\n      }\n    };}\n\n  render() {\n    const { formData, payload, setControlValue, onAddFilter, height, width } =\n    this.props;\n\n    let { viewport } = this.props;\n    if (formData.autozoom) {var _payload$data, _payload$data$feature;\n      const points =\n      (payload == null ? void 0 : (_payload$data = payload.data) == null ? void 0 : (_payload$data$feature = _payload$data.features) == null ? void 0 : _payload$data$feature.reduce == null ? void 0 : _payload$data$feature.reduce((acc, feature) => {\n        const bounds = geojsonExtent(feature);\n        if (bounds) {\n          return [...acc, [bounds[0], bounds[1]], [bounds[2], bounds[3]]];\n        }\n\n        return acc;\n      }, [])) || [];\n\n      if (points.length) {\n        viewport = fitViewport(viewport, {\n          width,\n          height,\n          points });\n\n      }\n    }\n\n    const layer = getLayer(formData, payload, onAddFilter, this.setTooltip);\n\n    return (\n      ___EmotionJSX(DeckGLContainerStyledWrapper, {\n        ref: this.containerRef,\n        mapboxApiAccessToken: payload.data.mapboxApiKey,\n        viewport: viewport,\n        layers: [layer],\n        mapStyle: formData.mapbox_style,\n        setControlValue: setControlValue,\n        height: height,\n        width: width }));\n\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\nDeckGLGeoJson.propTypes = propTypes;\nDeckGLGeoJson.defaultProps = defaultProps;const _default =\n\nDeckGLGeoJson;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(propertyMap, \"propertyMap\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/src/layers/Geojson/Geojson.jsx\");reactHotLoader.register(alterProps, \"alterProps\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/src/layers/Geojson/Geojson.jsx\");reactHotLoader.register(features, \"features\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/src/layers/Geojson/Geojson.jsx\");reactHotLoader.register(recurseGeoJson, \"recurseGeoJson\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/src/layers/Geojson/Geojson.jsx\");reactHotLoader.register(setTooltipContent, \"setTooltipContent\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/src/layers/Geojson/Geojson.jsx\");reactHotLoader.register(getFillColor, \"getFillColor\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/src/layers/Geojson/Geojson.jsx\");reactHotLoader.register(getLineColor, \"getLineColor\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/src/layers/Geojson/Geojson.jsx\");reactHotLoader.register(getLayer, \"getLayer\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/src/layers/Geojson/Geojson.jsx\");reactHotLoader.register(propTypes, \"propTypes\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/src/layers/Geojson/Geojson.jsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/src/layers/Geojson/Geojson.jsx\");reactHotLoader.register(DeckGLGeoJson, \"DeckGLGeoJson\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/src/layers/Geojson/Geojson.jsx\");reactHotLoader.register(_default, \"default\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/src/layers/Geojson/Geojson.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["React","PropTypes","GeoJsonLayer","geojsonExtent","DeckGLContainerStyledWrapper","hexToRGB","sandboxedEval","commonLayerProps","TooltipRow","fitViewport","propertyMap","fillColor","color","fill","strokeColor","alterProps","props","propOverrides","newProps","Object","keys","forEach","k","features","recurseGeoJson","node","extraProps","obj","geometry","newNode","properties","push","setTooltipContent","o","object","map","prop","index","getFillColor","feature","getLineColor","getLayer","formData","payload","onAddFilter","setTooltip","fd","fc","fill_color_picker","sc","stroke_color_picker","r","g","b","a","data","jsFnMutator","js_data_mutator","id","slice_id","filled","stroked","extruded","pointRadiusScale","point_radius_scale","getLineWidth","line_width","propTypes","isRequired","setControlValue","func","viewport","defaultProps","DeckGLGeoJson","Component","containerRef","createRef","tooltip","current","render","height","width","autozoom","points","reduce","acc","bounds","length","layer","mapboxApiKey","mapbox_style"],"sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/src/layers/Geojson/Geojson.jsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { GeoJsonLayer } from 'deck.gl';\nimport geojsonExtent from '@mapbox/geojson-extent';\n\nimport { DeckGLContainerStyledWrapper } from '../../DeckGLContainer';\nimport { hexToRGB } from '../../utils/colors';\nimport sandboxedEval from '../../utils/sandbox';\nimport { commonLayerProps } from '../common';\nimport TooltipRow from '../../TooltipRow';\nimport fitViewport from '../../utils/fitViewport';\n\nconst propertyMap = {\n  fillColor: 'fillColor',\n  color: 'fillColor',\n  fill: 'fillColor',\n  'fill-color': 'fillColor',\n  strokeColor: 'strokeColor',\n  'stroke-color': 'strokeColor',\n  'stroke-width': 'strokeWidth',\n};\n\nconst alterProps = (props, propOverrides) => {\n  const newProps = {};\n  Object.keys(props).forEach(k => {\n    if (k in propertyMap) {\n      newProps[propertyMap[k]] = props[k];\n    } else {\n      newProps[k] = props[k];\n    }\n  });\n  if (typeof props.fillColor === 'string') {\n    newProps.fillColor = hexToRGB(props.fillColor);\n  }\n  if (typeof props.strokeColor === 'string') {\n    newProps.strokeColor = hexToRGB(props.strokeColor);\n  }\n\n  return {\n    ...newProps,\n    ...propOverrides,\n  };\n};\nlet features;\nconst recurseGeoJson = (node, propOverrides, extraProps) => {\n  if (node && node.features) {\n    node.features.forEach(obj => {\n      recurseGeoJson(obj, propOverrides, node.extraProps || extraProps);\n    });\n  }\n  if (node && node.geometry) {\n    const newNode = {\n      ...node,\n      properties: alterProps(node.properties, propOverrides),\n    };\n    if (!newNode.extraProps) {\n      newNode.extraProps = extraProps;\n    }\n    features.push(newNode);\n  }\n};\n\nfunction setTooltipContent(o) {\n  return (\n    o.object.extraProps && (\n      <div className=\"deckgl-tooltip\">\n        {Object.keys(o.object.extraProps).map((prop, index) => (\n          <TooltipRow\n            key={`prop-${index}`}\n            label={`${prop}: `}\n            value={`${o.object.extraProps[prop]}`}\n          />\n        ))}\n      </div>\n    )\n  );\n}\n\nconst getFillColor = feature => feature?.properties?.fillColor;\nconst getLineColor = feature => feature?.properties?.strokeColor;\n\nexport function getLayer(formData, payload, onAddFilter, setTooltip) {\n  const fd = formData;\n  const fc = fd.fill_color_picker;\n  const sc = fd.stroke_color_picker;\n  const fillColor = [fc.r, fc.g, fc.b, 255 * fc.a];\n  const strokeColor = [sc.r, sc.g, sc.b, 255 * sc.a];\n  const propOverrides = {};\n  if (fillColor[3] > 0) {\n    propOverrides.fillColor = fillColor;\n  }\n  if (strokeColor[3] > 0) {\n    propOverrides.strokeColor = strokeColor;\n  }\n\n  features = [];\n  recurseGeoJson(payload.data, propOverrides);\n\n  let jsFnMutator;\n  if (fd.js_data_mutator) {\n    // Applying user defined data mutator if defined\n    jsFnMutator = sandboxedEval(fd.js_data_mutator);\n    features = jsFnMutator(features);\n  }\n\n  return new GeoJsonLayer({\n    id: `geojson-layer-${fd.slice_id}`,\n    filled: fd.filled,\n    data: features,\n    stroked: fd.stroked,\n    extruded: fd.extruded,\n    pointRadiusScale: fd.point_radius_scale,\n    getFillColor,\n    getLineWidth: fd.line_width || 1,\n    getLineColor,\n    ...commonLayerProps(fd, setTooltip, setTooltipContent),\n  });\n}\n\nconst propTypes = {\n  formData: PropTypes.object.isRequired,\n  payload: PropTypes.object.isRequired,\n  setControlValue: PropTypes.func.isRequired,\n  viewport: PropTypes.object.isRequired,\n  onAddFilter: PropTypes.func,\n};\nconst defaultProps = {\n  onAddFilter() {},\n};\n\nclass DeckGLGeoJson extends React.Component {\n  containerRef = React.createRef();\n\n  setTooltip = tooltip => {\n    const { current } = this.containerRef;\n    if (current) {\n      current.setTooltip(tooltip);\n    }\n  };\n\n  render() {\n    const { formData, payload, setControlValue, onAddFilter, height, width } =\n      this.props;\n\n    let { viewport } = this.props;\n    if (formData.autozoom) {\n      const points =\n        payload?.data?.features?.reduce?.((acc, feature) => {\n          const bounds = geojsonExtent(feature);\n          if (bounds) {\n            return [...acc, [bounds[0], bounds[1]], [bounds[2], bounds[3]]];\n          }\n\n          return acc;\n        }, []) || [];\n\n      if (points.length) {\n        viewport = fitViewport(viewport, {\n          width,\n          height,\n          points,\n        });\n      }\n    }\n\n    const layer = getLayer(formData, payload, onAddFilter, this.setTooltip);\n\n    return (\n      <DeckGLContainerStyledWrapper\n        ref={this.containerRef}\n        mapboxApiAccessToken={payload.data.mapboxApiKey}\n        viewport={viewport}\n        layers={[layer]}\n        mapStyle={formData.mapbox_style}\n        setControlValue={setControlValue}\n        height={height}\n        width={width}\n      />\n    );\n  }\n}\n\nDeckGLGeoJson.propTypes = propTypes;\nDeckGLGeoJson.defaultProps = defaultProps;\n\nexport default DeckGLGeoJson;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}