{"ast":null,"code":"export default {};","map":{"version":3,"mappings":"AAwKA,eAAe,EAAf","names":[],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/packages/superset-ui-core/src/connection/types.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport SupersetClientClass from './SupersetClientClass';\n\nexport type Body = RequestInit['body'];\nexport type Cache = RequestInit['cache'];\nexport type Credentials = RequestInit['credentials'];\nexport type Endpoint = string;\nexport type FetchRetryOptions = {\n  retries?: number;\n  retryDelay?:\n    | number\n    | ((attempt: number, error: Error, response: Response) => number);\n  retryOn?:\n    | number[]\n    | ((attempt: number, error: Error, response: Response) => boolean);\n};\nexport type Headers = { [k: string]: string };\nexport type Host = string;\n\nexport type JsonPrimitive = string | number | boolean | null;\n/**\n * More strict JSON value types. If this fails to satisfy TypeScript when using\n * as function arguments, use `JsonObject` instead. `StrictJsonObject` helps make\n * sure all values are plain objects, but it does not accept specific types when\n * used as function arguments.\n * (Ref: https://github.com/microsoft/TypeScript/issues/15300).\n */\nexport type StrictJsonValue =\n  | JsonPrimitive\n  | StrictJsonObject\n  | StrictJsonArray;\nexport type StrictJsonArray = StrictJsonValue[];\n/**\n * More strict JSON objects that makes sure all values are plain objects.\n * If this fails to satisfy TypeScript when using as function arguments,\n * use `JsonObject` instead.\n * (Ref: https://github.com/microsoft/TypeScript/issues/15300).\n */\nexport type StrictJsonObject = { [member: string]: StrictJsonValue };\n\nexport type JsonValue = JsonPrimitive | JsonObject | JsonArray;\nexport type JsonArray = JsonValue[];\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type JsonObject = { [member: string]: any };\n\n/**\n * Request payload, can be use in GET query string, Post form or POST JSON.\n * If string, will parse with JSON.parse.\n */\nexport type Payload = JsonObject | string | null;\n\nexport type Method = RequestInit['method'];\nexport type Mode = RequestInit['mode'];\nexport type Redirect = RequestInit['redirect'];\nexport type ClientTimeout = number | undefined;\nexport type ParseMethod =\n  | 'json'\n  | 'json-bigint'\n  | 'text'\n  | 'raw'\n  | null\n  | undefined;\nexport type Signal = RequestInit['signal'];\nexport type Stringify = boolean;\nexport type Url = string;\n\nexport interface RequestBase {\n  body?: Body;\n  credentials?: Credentials;\n  fetchRetryOptions?: FetchRetryOptions;\n  headers?: Headers;\n  host?: Host;\n  ignoreUnauthorized?: boolean;\n  mode?: Mode;\n  method?: Method;\n  jsonPayload?: Payload;\n  postPayload?: Payload | FormData;\n  searchParams?: Payload | URLSearchParams;\n  signal?: Signal;\n  stringify?: Stringify;\n  timeout?: ClientTimeout;\n}\n\nexport interface CallApi extends RequestBase {\n  url: Url;\n  cache?: Cache;\n  redirect?: Redirect;\n}\n\nexport interface RequestWithEndpoint extends RequestBase {\n  endpoint: Endpoint;\n  url?: Url;\n}\n\nexport interface RequestWithUrl extends RequestBase {\n  url: Url;\n  endpoint?: Endpoint;\n}\n\n// this make sure at least one of `url` or `endpoint` is set\nexport type RequestConfig = RequestWithEndpoint | RequestWithUrl;\n\nexport interface JsonResponse {\n  response: Response;\n  json: JsonObject;\n}\n\nexport interface TextResponse {\n  response: Response;\n  text: string;\n}\n\nexport type CsrfToken = string;\nexport type CsrfPromise = Promise<string | undefined>;\nexport type Protocol = 'http:' | 'https:';\n\nexport interface ClientConfig {\n  baseUrl?: string;\n  host?: Host;\n  protocol?: Protocol;\n  credentials?: Credentials;\n  csrfToken?: CsrfToken;\n  guestToken?: string;\n  guestTokenHeaderName?: string;\n  fetchRetryOptions?: FetchRetryOptions;\n  headers?: Headers;\n  mode?: Mode;\n  timeout?: ClientTimeout;\n  unauthorizedHandler?: () => void;\n}\n\nexport interface SupersetClientInterface\n  extends Pick<\n    SupersetClientClass,\n    | 'delete'\n    | 'get'\n    | 'post'\n    | 'postForm'\n    | 'put'\n    | 'request'\n    | 'init'\n    | 'isAuthenticated'\n    | 'reAuthenticate'\n    | 'getGuestToken'\n  > {\n  configure: (config?: ClientConfig) => SupersetClientInterface;\n  reset: () => void;\n}\n\nexport type SupersetClientResponse = Response | JsonResponse | TextResponse;\n\nexport default {};\n"]},"metadata":{},"sourceType":"module"}