{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.excerpt = excerpt;\nexports.sanitize = sanitize;\nexports.newLineToBr = newLineToBr;\nexports.capitalizeEach = capitalizeEach;\nexports.capitalizeFirst = capitalizeFirst;\nexports.sprintf = sprintf;\nexports.lowercase = lowercase;\nexports.uppercase = uppercase;\nexports.first = first;\nexports.last = last;\nexports.concat = concat;\nexports.join = join;\n\nvar _utils = require('../util/utils');\n\n/**\n * Extract a few characters from a string. Default number of characters is 50.\n *\n * @example\n *      {{excerpt 'Just Wow' 4}}    => 'Just'\n *\n * @param {string} string\n * @param {int} length\n * @returns {string}\n */\nfunction excerpt(string, length) {\n  length = parseInt(length) || 50;\n\n  if (typeof string !== 'string' || typeof length !== 'number') {\n    return string;\n  }\n\n  if (string.length < length) {\n    return string;\n  }\n\n  return string.slice(0, length) + '...';\n}\n\n/**\n * Convert a string to url friendly dash-case string removing special characters.\n *\n * @example\n *      {{sanitize 'JuSt #Wow'}}    => 'just-wow'\n *\n * @param {string} string\n * @returns {string}\n */\nfunction sanitize(string) {\n  string = string.replace(/[^\\w\\s]/gi, '').trim();\n\n  return string.replace(/\\s+/, '-').toLowerCase();\n}\n\n/**\n * Replace \\n with <br> tags.\n *\n * @example\n *     {{newLineToBr 'newLineToBr helper \\n is very \\n useful.'}}    => newLineToBr helper <br> is very <br> useful.\n *\n * @param {string} string\n * @returns {string}\n */\nfunction newLineToBr(string) {\n  return string.replace(/\\r?\\n|\\r/g, '<br>');\n}\n\n/**\n * Capitalize each letter of a string.\n *\n * @example\n *      {{capitalizeEach 'just wow'}}   => 'Just Wow'\n *\n * @param {string} string\n * @returns {string}\n */\nfunction capitalizeEach(string) {\n  if (typeof string === 'string') {\n    return string.toLowerCase().replace(/\\w\\S*/g, function (match) {\n      return match.charAt(0).toUpperCase() + match.substr(1);\n    });\n  }\n\n  return string;\n}\n\n/**\n * Capitalize the first letter of a string.\n *\n * @example\n *      {{capitalizeFirst 'just wow'}}   => 'Just wow'\n *\n * @param {string} string\n * @returns {string}\n */\nfunction capitalizeFirst(string) {\n  if (typeof string === 'string') {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  }\n\n  return string;\n}\n\n/**\n * A sprintf helper to be used in the handlebars templates that supports arbitrary parameters.\n *\n * Make sure you have the sprintf-js (https://github.com/alexei/sprintf.js) package is available\n * either as a node module or you have sprintf/vsprintf functions available in the global scope\n * from that package.\n *\n * Check https://github.com/alexei/sprintf.js for more information.\n *\n * @example\n *      {{sprintf '%s %s!' 'Hello' 'Kabir' }}\n *      {{sprintf '%s %s %d %s %d' 'Foo' 'Bar' 55 'Baz' '20'}}\n *      {{sprintf '%(greeting)s %(name)s! How are you?' obj }}\n *      {{sprintf '%(greeting)s %(name)s! ' greeting='Hello' name='Kabir'}}\n *\n * @param {string} format\n * @param {any} args\n * @returns {string}\n */\nfunction sprintf(format) {\n  // Check if the vsprintf function is available globally\n  // if it's not available then try to require() it\n  var _vsprintf = global.vsprintf;\n\n  if (!(0, _utils.isFunction)(_vsprintf)) {\n    _vsprintf = require('sprintf-js').vsprintf;\n  }\n\n  // Normalize all the parameters before passing it to the\n  // sprintf/vsprintf function\n  var params = [];\n\n  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  args.forEach(function (arg) {\n    if ((0, _utils.isObject)(arg) && (0, _utils.isObject)(arg.hash)) {\n      arg = arg.hash;\n    }\n\n    params.push(arg);\n  });\n\n  return params.length > 0 ? _vsprintf(format, params) : format;\n}\n\n/**\n * Changes the string to lowercase.\n *\n * @example\n *    {{lowercase 'JUST WOW!!!'}}   => 'just wow!!!'\n *\n * @param {string} param\n * @returns {string}\n */\nfunction lowercase(param) {\n  return (0, _utils.isString)(param) ? param.toLowerCase() : param;\n}\n\n/**\n * Changes the string to uppercase.\n *\n * @example\n *    {{uppercase 'just wow!!!'}}   => 'JUST WOW!!!'\n *\n * @param {string} param\n * @returns {string}\n */\nfunction uppercase(param) {\n  return (0, _utils.isString)(param) ? param.toUpperCase() : param;\n}\n\n/**\n * Get the first element of a collection/array.\n *\n * @example\n *    var someArray = ['David', 'Miller', 'Jones'];\n *    {{first someArray}}   => 'David'\n *\n * @param {array} collection\n * @returns {string}\n */\nfunction first(collection) {\n  if (!(0, _utils.isArray)(collection) || collection.length === 0) {\n    return '';\n  }\n\n  return collection[0];\n}\n\n/**\n * Get the last element of a collection/array.\n *\n * @example\n *    var someArray = ['David', 'Miller', 'Jones'];\n *    {{last someArray}}   => 'Jones'\n *\n * @param {array} collection\n * @returns {string}\n */\nfunction last(collection) {\n  if (!(0, _utils.isArray)(collection) || collection.length === 0) {\n    return '';\n  }\n\n  return collection[collection.length - 1];\n}\n\n/**\n * Concat two or more strings.\n *\n * @example\n *    {{concat 'Hello' ' world' '!!!'}}   => 'Hello world!!!'\n *\n * @param {any} params\n * @returns {string}\n */\nfunction concat() {\n  for (var _len2 = arguments.length, params = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    params[_key2] = arguments[_key2];\n  }\n\n  // Ignore the object appended by handlebars.\n  if ((0, _utils.isObject)(params[params.length - 1])) {\n    params.pop();\n  }\n\n  return params.join('');\n}\n\n/**\n * Join the elements of an array using a delimeter.\n *\n * @example\n *    var someArray = ['Hands', 'legs', 'feet'];\n *    {{join someArray ' & '}}   => 'Hands & legs & feet'\n *\n * @param  {array} params\n * @param  {string} delimiter\n * @returns {string|boolean}\n */\nfunction join(params, delimiter) {\n  if (!delimiter || (0, _utils.isObject)(delimiter)) {\n    delimiter = '';\n  }\n\n  if (!(0, _utils.isArray)(params)) {\n    return false;\n  }\n\n  return params.join(delimiter);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","excerpt","sanitize","newLineToBr","capitalizeEach","capitalizeFirst","sprintf","lowercase","uppercase","first","last","concat","join","_utils","require","string","length","parseInt","slice","replace","trim","toLowerCase","match","charAt","toUpperCase","substr","format","_vsprintf","global","vsprintf","isFunction","params","_len","arguments","args","Array","_key","forEach","arg","isObject","hash","push","param","isString","collection","isArray","_len2","_key2","pop","delimiter"],"sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-handlebars/node_modules/just-handlebars-helpers/lib/helpers/strings.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.excerpt = excerpt;\nexports.sanitize = sanitize;\nexports.newLineToBr = newLineToBr;\nexports.capitalizeEach = capitalizeEach;\nexports.capitalizeFirst = capitalizeFirst;\nexports.sprintf = sprintf;\nexports.lowercase = lowercase;\nexports.uppercase = uppercase;\nexports.first = first;\nexports.last = last;\nexports.concat = concat;\nexports.join = join;\n\nvar _utils = require('../util/utils');\n\n/**\n * Extract a few characters from a string. Default number of characters is 50.\n *\n * @example\n *      {{excerpt 'Just Wow' 4}}    => 'Just'\n *\n * @param {string} string\n * @param {int} length\n * @returns {string}\n */\nfunction excerpt(string, length) {\n  length = parseInt(length) || 50;\n\n  if (typeof string !== 'string' || typeof length !== 'number') {\n    return string;\n  }\n\n  if (string.length < length) {\n    return string;\n  }\n\n  return string.slice(0, length) + '...';\n}\n\n/**\n * Convert a string to url friendly dash-case string removing special characters.\n *\n * @example\n *      {{sanitize 'JuSt #Wow'}}    => 'just-wow'\n *\n * @param {string} string\n * @returns {string}\n */\nfunction sanitize(string) {\n  string = string.replace(/[^\\w\\s]/gi, '').trim();\n\n  return string.replace(/\\s+/, '-').toLowerCase();\n}\n\n/**\n * Replace \\n with <br> tags.\n *\n * @example\n *     {{newLineToBr 'newLineToBr helper \\n is very \\n useful.'}}    => newLineToBr helper <br> is very <br> useful.\n *\n * @param {string} string\n * @returns {string}\n */\nfunction newLineToBr(string) {\n  return string.replace(/\\r?\\n|\\r/g, '<br>');\n}\n\n/**\n * Capitalize each letter of a string.\n *\n * @example\n *      {{capitalizeEach 'just wow'}}   => 'Just Wow'\n *\n * @param {string} string\n * @returns {string}\n */\nfunction capitalizeEach(string) {\n  if (typeof string === 'string') {\n    return string.toLowerCase().replace(/\\w\\S*/g, function (match) {\n      return match.charAt(0).toUpperCase() + match.substr(1);\n    });\n  }\n\n  return string;\n}\n\n/**\n * Capitalize the first letter of a string.\n *\n * @example\n *      {{capitalizeFirst 'just wow'}}   => 'Just wow'\n *\n * @param {string} string\n * @returns {string}\n */\nfunction capitalizeFirst(string) {\n  if (typeof string === 'string') {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  }\n\n  return string;\n}\n\n/**\n * A sprintf helper to be used in the handlebars templates that supports arbitrary parameters.\n *\n * Make sure you have the sprintf-js (https://github.com/alexei/sprintf.js) package is available\n * either as a node module or you have sprintf/vsprintf functions available in the global scope\n * from that package.\n *\n * Check https://github.com/alexei/sprintf.js for more information.\n *\n * @example\n *      {{sprintf '%s %s!' 'Hello' 'Kabir' }}\n *      {{sprintf '%s %s %d %s %d' 'Foo' 'Bar' 55 'Baz' '20'}}\n *      {{sprintf '%(greeting)s %(name)s! How are you?' obj }}\n *      {{sprintf '%(greeting)s %(name)s! ' greeting='Hello' name='Kabir'}}\n *\n * @param {string} format\n * @param {any} args\n * @returns {string}\n */\nfunction sprintf(format) {\n  // Check if the vsprintf function is available globally\n  // if it's not available then try to require() it\n  var _vsprintf = global.vsprintf;\n\n  if (!(0, _utils.isFunction)(_vsprintf)) {\n    _vsprintf = require('sprintf-js').vsprintf;\n  }\n\n  // Normalize all the parameters before passing it to the\n  // sprintf/vsprintf function\n  var params = [];\n\n  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  args.forEach(function (arg) {\n    if ((0, _utils.isObject)(arg) && (0, _utils.isObject)(arg.hash)) {\n      arg = arg.hash;\n    }\n\n    params.push(arg);\n  });\n\n  return params.length > 0 ? _vsprintf(format, params) : format;\n}\n\n/**\n * Changes the string to lowercase.\n *\n * @example\n *    {{lowercase 'JUST WOW!!!'}}   => 'just wow!!!'\n *\n * @param {string} param\n * @returns {string}\n */\nfunction lowercase(param) {\n  return (0, _utils.isString)(param) ? param.toLowerCase() : param;\n}\n\n/**\n * Changes the string to uppercase.\n *\n * @example\n *    {{uppercase 'just wow!!!'}}   => 'JUST WOW!!!'\n *\n * @param {string} param\n * @returns {string}\n */\nfunction uppercase(param) {\n  return (0, _utils.isString)(param) ? param.toUpperCase() : param;\n}\n\n/**\n * Get the first element of a collection/array.\n *\n * @example\n *    var someArray = ['David', 'Miller', 'Jones'];\n *    {{first someArray}}   => 'David'\n *\n * @param {array} collection\n * @returns {string}\n */\nfunction first(collection) {\n  if (!(0, _utils.isArray)(collection) || collection.length === 0) {\n    return '';\n  }\n\n  return collection[0];\n}\n\n/**\n * Get the last element of a collection/array.\n *\n * @example\n *    var someArray = ['David', 'Miller', 'Jones'];\n *    {{last someArray}}   => 'Jones'\n *\n * @param {array} collection\n * @returns {string}\n */\nfunction last(collection) {\n  if (!(0, _utils.isArray)(collection) || collection.length === 0) {\n    return '';\n  }\n\n  return collection[collection.length - 1];\n}\n\n/**\n * Concat two or more strings.\n *\n * @example\n *    {{concat 'Hello' ' world' '!!!'}}   => 'Hello world!!!'\n *\n * @param {any} params\n * @returns {string}\n */\nfunction concat() {\n  for (var _len2 = arguments.length, params = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    params[_key2] = arguments[_key2];\n  }\n\n  // Ignore the object appended by handlebars.\n  if ((0, _utils.isObject)(params[params.length - 1])) {\n    params.pop();\n  }\n\n  return params.join('');\n}\n\n/**\n * Join the elements of an array using a delimeter.\n *\n * @example\n *    var someArray = ['Hands', 'legs', 'feet'];\n *    {{join someArray ' & '}}   => 'Hands & legs & feet'\n *\n * @param  {array} params\n * @param  {string} delimiter\n * @returns {string|boolean}\n */\nfunction join(params, delimiter) {\n  if (!delimiter || (0, _utils.isObject)(delimiter)) {\n    delimiter = '';\n  }\n\n  if (!(0, _utils.isArray)(params)) {\n    return false;\n  }\n\n  return params.join(delimiter);\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}