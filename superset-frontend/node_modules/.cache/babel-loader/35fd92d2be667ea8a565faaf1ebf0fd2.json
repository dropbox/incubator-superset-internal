{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { getColumnLabel, getNumberFormatter, getTimeFormatter } from '@superset-ui/core';\nimport Echart from '../components/Echart';\nimport { formatSeriesName } from '../utils/series';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport default function EchartsGraph(_ref) {let { height, width, echartOptions, formData, onContextMenu, setDataMask, filterState, emitCrossFilters, refs, coltypeMapping } = _ref;\n  const getCrossFilterDataMask = (node) => {\n    if (!(node != null && node.name) || !(node != null && node.col)) {\n      return undefined;\n    }\n    const { name, col } = node;\n    const selected = Object.values((filterState == null ? void 0 : filterState.selectedValues) || {});\n    let values;\n    if (_includesInstanceProperty(selected).call(selected, name)) {\n      values = selected.filter((v) => v !== name);\n    } else\n    {\n      values = [name];\n    }\n    return {\n      dataMask: {\n        extraFormData: {\n          filters: values.length ?\n          [\n          {\n            col,\n            op: 'IN',\n            val: values }] :\n\n\n          [] },\n\n        filterState: {\n          value: values.length ? values : null,\n          selectedValues: values.length ? values : null } },\n\n\n      isCurrentValueSelected: _includesInstanceProperty(selected).call(selected, name) };\n\n  };\n  const eventHandlers = {\n    click: (e) => {var _getCrossFilterDataMa;\n      if (!emitCrossFilters || !setDataMask) {\n        return;\n      }\n      e.event.stop();\n      const data = echartOptions.series[0].data;\n      const node = data.find((item) => item.id === e.data.id);\n      const dataMask = (_getCrossFilterDataMa = getCrossFilterDataMask(node)) == null ? void 0 : _getCrossFilterDataMa.dataMask;\n      if (dataMask) {\n        setDataMask(dataMask);\n      }\n    },\n    contextmenu: (e) => {\n      const handleNodeClick = (data) => {\n        const node = data.find((item) => item.id === e.data.id);\n        if (node != null && node.name) {\n          return [\n          {\n            col: node.col,\n            op: '==',\n            val: node.name,\n            formattedVal: node.name }];\n\n\n        }\n        return undefined;\n      };\n      const handleEdgeClick = (data) => {var _data$find, _data$find2;\n        const sourceValue = (_data$find = data.find((item) => item.id === e.data.source)) == null ? void 0 : _data$find.name;\n        const targetValue = (_data$find2 = data.find((item) => item.id === e.data.target)) == null ? void 0 : _data$find2.name;\n        if (sourceValue && targetValue) {\n          return [\n          {\n            col: formData.source,\n            op: '==',\n            val: sourceValue,\n            formattedVal: sourceValue },\n\n          {\n            col: formData.target,\n            op: '==',\n            val: targetValue,\n            formattedVal: targetValue }];\n\n\n        }\n        return undefined;\n      };\n      if (onContextMenu) {\n        e.event.stop();\n        const pointerEvent = e.event.event;\n        const data = echartOptions.series[0].data;\n        const drillToDetailFilters = e.dataType === 'node' ? handleNodeClick(data) : handleEdgeClick(data);\n        const node = data.find((item) => item.id === e.data.id);\n        onContextMenu(pointerEvent.clientX, pointerEvent.clientY, {\n          drillToDetail: drillToDetailFilters,\n          crossFilter: getCrossFilterDataMask(node),\n          drillBy: node && {\n            filters: [\n            {\n              col: node.col,\n              op: '==',\n              val: node.name,\n              formattedVal: formatSeriesName(node.name, {\n                timeFormatter: getTimeFormatter(formData.dateFormat),\n                numberFormatter: getNumberFormatter(formData.numberFormat),\n                coltype: coltypeMapping == null ? void 0 : coltypeMapping[getColumnLabel(node.col)] }) }],\n\n\n\n            groupbyFieldName: node.col === formData.source ? 'source' : 'target' } });\n\n\n      }\n    } };\n\n  return ___EmotionJSX(Echart, { refs: refs, height: height, width: width, echartOptions: echartOptions, eventHandlers: eventHandlers });\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(EchartsGraph, \"EchartsGraph\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-echarts/src/Graph/EchartsGraph.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"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","names":["React","getColumnLabel","getNumberFormatter","getTimeFormatter","Echart","formatSeriesName","EchartsGraph","height","width","echartOptions","formData","onContextMenu","setDataMask","filterState","emitCrossFilters","refs","coltypeMapping","getCrossFilterDataMask","node","name","col","undefined","selected","Object","values","selectedValues","filter","v","dataMask","extraFormData","filters","length","op","val","value","isCurrentValueSelected","eventHandlers","click","e","event","stop","data","series","find","item","id","contextmenu","handleNodeClick","formattedVal","handleEdgeClick","sourceValue","source","targetValue","target","pointerEvent","drillToDetailFilters","dataType","clientX","clientY","drillToDetail","crossFilter","drillBy","timeFormatter","dateFormat","numberFormatter","numberFormat","coltype","groupbyFieldName"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-echarts/src/Graph/EchartsGraph.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport {\n  getColumnLabel,\n  getNumberFormatter,\n  getTimeFormatter,\n} from '@superset-ui/core';\nimport { EventHandlers } from '../types';\nimport Echart from '../components/Echart';\nimport { GraphChartTransformedProps } from './types';\nimport { formatSeriesName } from '../utils/series';\n\ntype DataRow = {\n  source?: string;\n  target?: string;\n  id?: string;\n  col: string;\n  name: string;\n};\ntype Data = DataRow[];\ntype Event = {\n  name: string;\n  event: { stop: () => void; event: PointerEvent };\n  data: DataRow;\n  dataType: 'node' | 'edge';\n};\n\nexport default function EchartsGraph({\n  height,\n  width,\n  echartOptions,\n  formData,\n  onContextMenu,\n  setDataMask,\n  filterState,\n  emitCrossFilters,\n  refs,\n  coltypeMapping,\n}: GraphChartTransformedProps) {\n  const getCrossFilterDataMask = (node: DataRow | undefined) => {\n    if (!node?.name || !node?.col) {\n      return undefined;\n    }\n    const { name, col } = node;\n    const selected = Object.values(\n      filterState?.selectedValues || {},\n    ) as string[];\n    let values: string[];\n    if (selected.includes(name)) {\n      values = selected.filter(v => v !== name);\n    } else {\n      values = [name];\n    }\n    return {\n      dataMask: {\n        extraFormData: {\n          filters: values.length\n            ? [\n                {\n                  col,\n                  op: 'IN' as const,\n                  val: values,\n                },\n              ]\n            : [],\n        },\n        filterState: {\n          value: values.length ? values : null,\n          selectedValues: values.length ? values : null,\n        },\n      },\n      isCurrentValueSelected: selected.includes(name),\n    };\n  };\n  const eventHandlers: EventHandlers = {\n    click: (e: Event) => {\n      if (!emitCrossFilters || !setDataMask) {\n        return;\n      }\n      e.event.stop();\n      const data = (echartOptions as any).series[0].data as Data;\n      const node = data.find(item => item.id === e.data.id);\n      const dataMask = getCrossFilterDataMask(node)?.dataMask;\n      if (dataMask) {\n        setDataMask(dataMask);\n      }\n    },\n    contextmenu: (e: Event) => {\n      const handleNodeClick = (data: Data) => {\n        const node = data.find(item => item.id === e.data.id);\n        if (node?.name) {\n          return [\n            {\n              col: node.col,\n              op: '==' as const,\n              val: node.name,\n              formattedVal: node.name,\n            },\n          ];\n        }\n        return undefined;\n      };\n      const handleEdgeClick = (data: Data) => {\n        const sourceValue = data.find(item => item.id === e.data.source)?.name;\n        const targetValue = data.find(item => item.id === e.data.target)?.name;\n        if (sourceValue && targetValue) {\n          return [\n            {\n              col: formData.source,\n              op: '==' as const,\n              val: sourceValue,\n              formattedVal: sourceValue,\n            },\n            {\n              col: formData.target,\n              op: '==' as const,\n              val: targetValue,\n              formattedVal: targetValue,\n            },\n          ];\n        }\n        return undefined;\n      };\n      if (onContextMenu) {\n        e.event.stop();\n        const pointerEvent = e.event.event;\n        const data = (echartOptions as any).series[0].data as Data;\n        const drillToDetailFilters =\n          e.dataType === 'node' ? handleNodeClick(data) : handleEdgeClick(data);\n        const node = data.find(item => item.id === e.data.id);\n\n        onContextMenu(pointerEvent.clientX, pointerEvent.clientY, {\n          drillToDetail: drillToDetailFilters,\n          crossFilter: getCrossFilterDataMask(node),\n          drillBy: node && {\n            filters: [\n              {\n                col: node.col,\n                op: '==',\n                val: node.name,\n                formattedVal: formatSeriesName(node.name, {\n                  timeFormatter: getTimeFormatter(formData.dateFormat),\n                  numberFormatter: getNumberFormatter(formData.numberFormat),\n                  coltype: coltypeMapping?.[getColumnLabel(node.col)],\n                }),\n              },\n            ],\n            groupbyFieldName:\n              node.col === formData.source ? 'source' : 'target',\n          },\n        });\n      }\n    },\n  };\n  return (\n    <Echart\n      refs={refs}\n      height={height}\n      width={width}\n      echartOptions={echartOptions}\n      eventHandlers={eventHandlers}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}