{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { buildQueryContext } from '@superset-ui/core';\n/**\n * The buildQuery function is used to create an instance of QueryContext that's\n * sent to the chart data endpoint. In addition to containing information of which\n * datasource to use, it specifies the type (e.g. full payload, samples, query) and\n * format (e.g. CSV or JSON) of the result and whether or not to force refresh the data from\n * the datasource as opposed to using a cached copy of the data, if available.\n *\n * More importantly though, QueryContext contains a property `queries`, which is an array of\n * QueryObjects specifying individual data requests to be made. A QueryObject specifies which\n * columns, metrics and filters, among others, to use during the query. Usually it will be enough\n * to specify just one query based on the baseQueryObject, but for some more advanced use cases\n * it is possible to define post processing operations in the QueryObject, or multiple queries\n * if a viz needs multiple different result sets.\n */\nexport default function buildQuery(formData) {\n  return buildQueryContext(formData, () => [\n  {\n    result_type: 'columns',\n    columns: [],\n    metrics: [],\n    orderby: [] }]);\n\n\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(buildQuery, \"buildQuery\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/filters/components/TimeColumn/buildQuery.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAkBA,SAASA,iBAAT,QAAiD,mBAAjD;AAEA;;;;;;;;;;;;;;AAcA,eAAc,SAAUC,UAAV,CAAqBC,QAArB,EAA4C;EACxD,OAAOF,iBAAiB,CAACE,QAAD,EAAW,MAAM;EACvC;IACEC,WAAW,EAAE,SADf;IAEEC,OAAO,EAAE,EAFX;IAGEC,OAAO,EAAE,EAHX;IAIEC,OAAO,EAAE,EAJX,EADuC,CAAjB,CAAxB;;;AAQD,C,iLATuBL,U","names":["buildQueryContext","buildQuery","formData","result_type","columns","metrics","orderby"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/filters/components/TimeColumn/buildQuery.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { buildQueryContext, QueryFormData } from '@superset-ui/core';\n\n/**\n * The buildQuery function is used to create an instance of QueryContext that's\n * sent to the chart data endpoint. In addition to containing information of which\n * datasource to use, it specifies the type (e.g. full payload, samples, query) and\n * format (e.g. CSV or JSON) of the result and whether or not to force refresh the data from\n * the datasource as opposed to using a cached copy of the data, if available.\n *\n * More importantly though, QueryContext contains a property `queries`, which is an array of\n * QueryObjects specifying individual data requests to be made. A QueryObject specifies which\n * columns, metrics and filters, among others, to use during the query. Usually it will be enough\n * to specify just one query based on the baseQueryObject, but for some more advanced use cases\n * it is possible to define post processing operations in the QueryObject, or multiple queries\n * if a viz needs multiple different result sets.\n */\nexport default function buildQuery(formData: QueryFormData) {\n  return buildQueryContext(formData, () => [\n    {\n      result_type: 'columns',\n      columns: [],\n      metrics: [],\n      orderby: [],\n    },\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}