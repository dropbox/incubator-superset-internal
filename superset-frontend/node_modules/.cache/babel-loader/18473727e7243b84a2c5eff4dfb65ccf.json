{"ast":null,"code":"import { RegistryWithDefaultKey, OverwritePolicy } from '../models';\nimport { DEFAULT_D3_FORMAT } from './D3FormatConfig';\nimport createD3NumberFormatter from './factories/createD3NumberFormatter';\nimport createSmartNumberFormatter from './factories/createSmartNumberFormatter';\nimport NumberFormats from './NumberFormats';\nexport default class NumberFormatterRegistry extends RegistryWithDefaultKey {\n\n  constructor() {\n    super({\n      name: 'NumberFormatter',\n      overwritePolicy: OverwritePolicy.WARN });this.d3Format = void 0;\n\n    this.registerValue(NumberFormats.SMART_NUMBER, createSmartNumberFormatter());\n    this.registerValue(NumberFormats.SMART_NUMBER_SIGNED, createSmartNumberFormatter({ signed: true }));\n    this.setDefaultKey(NumberFormats.SMART_NUMBER);\n    this.d3Format = DEFAULT_D3_FORMAT;\n  }\n  setD3Format(d3Format) {\n    this.d3Format = { ...DEFAULT_D3_FORMAT, ...d3Format };\n    return this;\n  }\n  get(formatterId) {\n    const targetFormat = `${formatterId === null ||\n    typeof formatterId === 'undefined' ||\n    formatterId === '' ?\n    this.defaultKey :\n    formatterId}`.trim();\n    if (this.has(targetFormat)) {\n      return super.get(targetFormat);\n    }\n    // Create new formatter if does not exist\n    const formatter = createD3NumberFormatter({\n      formatString: targetFormat,\n      locale: this.d3Format });\n\n    this.registerValue(targetFormat, formatter);\n    return formatter;\n  }\n  format(formatterId, value) {\n    return this.get(formatterId)(value);\n  }}","map":{"version":3,"mappings":"AAmBA,SAASA,sBAAT,EAAiCC,eAAjC,QAAwD,WAAxD;AACA,SAASC,iBAAT,QAAkC,kBAAlC;AACA,OAAOC,uBAAP,MAAoC,qCAApC;AACA,OAAOC,0BAAP,MAAuC,wCAAvC;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AAGA,eAAc,MAAOC,uBAAP,SAAuCN,sBAAvC,CAGb;;EAGCO;IACE,MAAM;MACJC,IAAI,EAAE,iBADF;MAEJC,eAAe,EAAER,eAAe,CAACS,IAF7B,EAAN,EADF,KAFAC,QAEA;;IAME,KAAKC,aAAL,CACEP,aAAa,CAACQ,YADhB,EAEET,0BAA0B,EAF5B;IAIA,KAAKQ,aAAL,CACEP,aAAa,CAACS,mBADhB,EAEEV,0BAA0B,CAAC,EAAEW,MAAM,EAAE,IAAV,EAAD,CAF5B;IAIA,KAAKC,aAAL,CAAmBX,aAAa,CAACQ,YAAjC;IACA,KAAKF,QAAL,GAAgBT,iBAAhB;EACD;EAEDe,WAAW,CAACN,QAAD,EAA0C;IACnD,KAAKA,QAAL,GAAgB,EAAE,GAAGT,iBAAL,EAAwB,GAAGS,QAA3B,EAAhB;IACA,OAAO,IAAP;EACD;EAEDO,GAAG,CAACC,WAAD,EAAqB;IACtB,MAAMC,YAAY,GAAG,GACnBD,WAAW,KAAK,IAAhB;IACA,OAAOA,WAAP,KAAuB,WADvB;IAEAA,WAAW,KAAK,EAFhB;IAGI,KAAKE,UAHT;IAIIF,WACN,EANqB,CAMlBG,IANkB,EAArB;IAQA,IAAI,KAAKC,GAAL,CAASH,YAAT,CAAJ,EAA4B;MAC1B,OAAO,MAAMF,GAAN,CAAUE,YAAV,CAAP;IACD;IAED;IACA,MAAMI,SAAS,GAAGrB,uBAAuB,CAAC;MACxCsB,YAAY,EAAEL,YAD0B;MAExCM,MAAM,EAAE,KAAKf,QAF2B,EAAD,CAAzC;;IAIA,KAAKC,aAAL,CAAmBQ,YAAnB,EAAiCI,SAAjC;IAEA,OAAOA,SAAP;EACD;EAEDG,MAAM,CACJR,WADI,EAEJS,KAFI,EAE4B;IAEhC,OAAO,KAAKV,GAAL,CAASC,WAAT,EAAsBS,KAAtB,CAAP;EACD,CAtDF","names":["RegistryWithDefaultKey","OverwritePolicy","DEFAULT_D3_FORMAT","createD3NumberFormatter","createSmartNumberFormatter","NumberFormats","NumberFormatterRegistry","constructor","name","overwritePolicy","WARN","d3Format","registerValue","SMART_NUMBER","SMART_NUMBER_SIGNED","signed","setDefaultKey","setD3Format","get","formatterId","targetFormat","defaultKey","trim","has","formatter","formatString","locale","format","value"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/packages/superset-ui-core/src/number-format/NumberFormatterRegistry.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { FormatLocaleDefinition } from 'd3-format';\nimport { RegistryWithDefaultKey, OverwritePolicy } from '../models';\nimport { DEFAULT_D3_FORMAT } from './D3FormatConfig';\nimport createD3NumberFormatter from './factories/createD3NumberFormatter';\nimport createSmartNumberFormatter from './factories/createSmartNumberFormatter';\nimport NumberFormats from './NumberFormats';\nimport NumberFormatter from './NumberFormatter';\n\nexport default class NumberFormatterRegistry extends RegistryWithDefaultKey<\n  NumberFormatter,\n  NumberFormatter\n> {\n  d3Format: FormatLocaleDefinition;\n\n  constructor() {\n    super({\n      name: 'NumberFormatter',\n      overwritePolicy: OverwritePolicy.WARN,\n    });\n\n    this.registerValue(\n      NumberFormats.SMART_NUMBER,\n      createSmartNumberFormatter(),\n    );\n    this.registerValue(\n      NumberFormats.SMART_NUMBER_SIGNED,\n      createSmartNumberFormatter({ signed: true }),\n    );\n    this.setDefaultKey(NumberFormats.SMART_NUMBER);\n    this.d3Format = DEFAULT_D3_FORMAT;\n  }\n\n  setD3Format(d3Format: Partial<FormatLocaleDefinition>) {\n    this.d3Format = { ...DEFAULT_D3_FORMAT, ...d3Format };\n    return this;\n  }\n\n  get(formatterId?: string) {\n    const targetFormat = `${\n      formatterId === null ||\n      typeof formatterId === 'undefined' ||\n      formatterId === ''\n        ? this.defaultKey\n        : formatterId\n    }`.trim();\n\n    if (this.has(targetFormat)) {\n      return super.get(targetFormat) as NumberFormatter;\n    }\n\n    // Create new formatter if does not exist\n    const formatter = createD3NumberFormatter({\n      formatString: targetFormat,\n      locale: this.d3Format,\n    });\n    this.registerValue(targetFormat, formatter);\n\n    return formatter;\n  }\n\n  format(\n    formatterId: string | undefined,\n    value: number | null | undefined,\n  ): string {\n    return this.get(formatterId)(value);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}