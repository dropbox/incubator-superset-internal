{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { getColorFormatters } from '@superset-ui/chart-controls';\nimport { getNumberFormatter, GenericDataType, getMetricLabel, extractTimegrain } from '@superset-ui/core';\nimport { getDateFormatter, parseMetricValue } from '../utils';\nexport default function transformProps(chartProps) {var _chartProps$datasourc, _metricEntry, _ref, _metricEntry2, _getColorFormatters;\n  const { width, height, queriesData, formData, rawFormData, hooks } = chartProps;\n  const { headerFontSize, metric = 'value', subheader = '', subheaderFontSize, forceTimestampFormatting, timeFormat, yAxisFormat, conditionalFormatting } = formData;\n  const refs = {};\n  const { data = [], coltypes = [] } = queriesData[0];\n  const granularity = extractTimegrain(rawFormData);\n  const metricName = getMetricLabel(metric);\n  const formattedSubheader = subheader;\n  const bigNumber = data.length === 0 ? null : parseMetricValue(data[0][metricName]);\n  let metricEntry;\n  if ((_chartProps$datasourc = chartProps.datasource) != null && _chartProps$datasourc.metrics) {\n    metricEntry = chartProps.datasource.metrics.find((metricItem) => metricItem.metric_name === metric);\n  }\n  const formatTime = getDateFormatter(timeFormat, granularity, (_metricEntry = metricEntry) == null ? void 0 : _metricEntry.d3format);\n  const headerFormatter = coltypes[0] === GenericDataType.TEMPORAL ||\n  coltypes[0] === GenericDataType.STRING ||\n  forceTimestampFormatting ?\n  formatTime :\n  getNumberFormatter((_ref = yAxisFormat != null ? yAxisFormat : (_metricEntry2 = metricEntry) == null ? void 0 : _metricEntry2.d3format) != null ? _ref : undefined);\n  const { onContextMenu } = hooks;\n  const defaultColorFormatters = [];\n  const colorThresholdFormatters = (_getColorFormatters = getColorFormatters(conditionalFormatting, data, false)) != null ? _getColorFormatters :\n  defaultColorFormatters;\n  return {\n    width,\n    height,\n    bigNumber,\n    headerFormatter,\n    headerFontSize,\n    subheaderFontSize,\n    subheader: formattedSubheader,\n    onContextMenu,\n    refs,\n    colorThresholdFormatters };\n\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,SAEEA,kBAFF,QAGO,6BAHP;AAIA,SACEC,kBADF,EAEEC,eAFF,EAGEC,cAHF,EAIEC,gBAJF,QAMO,mBANP;AAQA,SAASC,gBAAT,EAA2BC,gBAA3B,QAAmD,UAAnD;AAGA,eAAc,SAAUC,cAAV,CACZC,UADY,EACwB;EAEpC,MAAM,EAAEC,KAAF,EAASC,MAAT,EAAiBC,WAAjB,EAA8BC,QAA9B,EAAwCC,WAAxC,EAAqDC,KAArD,KACJN,UADF;EAEA,MAAM,EACJO,cADI,EAEJC,MAAM,GAAG,OAFL,EAGJC,SAAS,GAAG,EAHR,EAIJC,iBAJI,EAKJC,wBALI,EAMJC,UANI,EAOJC,WAPI,EAQJC,qBARI,KASFV,QATJ;EAUA,MAAMW,IAAI,GAAS,EAAnB;EACA,MAAM,EAAEC,IAAI,GAAG,EAAT,EAAaC,QAAQ,GAAG,EAAxB,KAA+Bd,WAAW,CAAC,CAAD,CAAhD;EACA,MAAMe,WAAW,GAAGtB,gBAAgB,CAACS,WAAD,CAApC;EACA,MAAMc,UAAU,GAAGxB,cAAc,CAACa,MAAD,CAAjC;EACA,MAAMY,kBAAkB,GAAGX,SAA3B;EACA,MAAMY,SAAS,GACbL,IAAI,CAACM,MAAL,KAAgB,CAAhB,GAAoB,IAApB,GAA2BxB,gBAAgB,CAACkB,IAAI,CAAC,CAAD,CAAJ,CAAQG,UAAR,CAAD,CAD7C;EAGA,IAAII,WAAJ;EACA,6BAAIvB,UAAU,CAACwB,UAAf,aAAI,sBAAuBC,OAA3B,EAAoC;IAClCF,WAAW,GAAGvB,UAAU,CAACwB,UAAX,CAAsBC,OAAtB,CAA8BC,IAA9B,CACZ,WAAU,KAAIC,UAAU,CAACC,WAAX,KAA2BpB,MAD7B,CAAd;EAGD;EAED,MAAMqB,UAAU,GAAGhC,gBAAgB,CACjCe,UADiC,EAEjCM,WAFiC,kBAGjCK,WAHiC,qBAGjC,aAAaO,QAHoB,CAAnC;EAMA,MAAMC,eAAe,GACnBd,QAAQ,CAAC,CAAD,CAAR,KAAgBvB,eAAe,CAACsC,QAAhC;EACAf,QAAQ,CAAC,CAAD,CAAR,KAAgBvB,eAAe,CAACuC,MADhC;EAEAtB,wBAFA;EAGIkB,UAHJ;EAIIpC,kBAAkB,SAACoB,WAAD,WAACA,WAAD,oBAAgBU,WAAhB,qBAAgB,cAAaO,QAA7B,mBAAyCI,SAAzC,CALxB;EAOA,MAAM,EAAEC,aAAF,KAAoB7B,KAA1B;EAEA,MAAM8B,sBAAsB,GAAG,EAA/B;EAEA,MAAMC,wBAAwB,0BAC5B7C,kBAAkB,CAACsB,qBAAD,EAAwBE,IAAxB,EAA8B,KAA9B,CADU;EAE5BoB,sBAFF;EAIA,OAAO;IACLnC,KADK;IAELC,MAFK;IAGLmB,SAHK;IAILU,eAJK;IAKLxB,cALK;IAMLG,iBANK;IAOLD,SAAS,EAAEW,kBAPN;IAQLe,aARK;IASLpB,IATK;IAULsB,wBAVK,EAAP;;AAYD","names":["getColorFormatters","getNumberFormatter","GenericDataType","getMetricLabel","extractTimegrain","getDateFormatter","parseMetricValue","transformProps","chartProps","width","height","queriesData","formData","rawFormData","hooks","headerFontSize","metric","subheader","subheaderFontSize","forceTimestampFormatting","timeFormat","yAxisFormat","conditionalFormatting","refs","data","coltypes","granularity","metricName","formattedSubheader","bigNumber","length","metricEntry","datasource","metrics","find","metricItem","metric_name","formatTime","d3format","headerFormatter","TEMPORAL","STRING","undefined","onContextMenu","defaultColorFormatters","colorThresholdFormatters"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-echarts/src/BigNumber/BigNumberTotal/transformProps.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  ColorFormatters,\n  getColorFormatters,\n} from '@superset-ui/chart-controls';\nimport {\n  getNumberFormatter,\n  GenericDataType,\n  getMetricLabel,\n  extractTimegrain,\n  QueryFormData,\n} from '@superset-ui/core';\nimport { BigNumberTotalChartProps, BigNumberVizProps } from '../types';\nimport { getDateFormatter, parseMetricValue } from '../utils';\nimport { Refs } from '../../types';\n\nexport default function transformProps(\n  chartProps: BigNumberTotalChartProps,\n): BigNumberVizProps {\n  const { width, height, queriesData, formData, rawFormData, hooks } =\n    chartProps;\n  const {\n    headerFontSize,\n    metric = 'value',\n    subheader = '',\n    subheaderFontSize,\n    forceTimestampFormatting,\n    timeFormat,\n    yAxisFormat,\n    conditionalFormatting,\n  } = formData;\n  const refs: Refs = {};\n  const { data = [], coltypes = [] } = queriesData[0];\n  const granularity = extractTimegrain(rawFormData as QueryFormData);\n  const metricName = getMetricLabel(metric);\n  const formattedSubheader = subheader;\n  const bigNumber =\n    data.length === 0 ? null : parseMetricValue(data[0][metricName]);\n\n  let metricEntry;\n  if (chartProps.datasource?.metrics) {\n    metricEntry = chartProps.datasource.metrics.find(\n      metricItem => metricItem.metric_name === metric,\n    );\n  }\n\n  const formatTime = getDateFormatter(\n    timeFormat,\n    granularity,\n    metricEntry?.d3format,\n  );\n\n  const headerFormatter =\n    coltypes[0] === GenericDataType.TEMPORAL ||\n    coltypes[0] === GenericDataType.STRING ||\n    forceTimestampFormatting\n      ? formatTime\n      : getNumberFormatter(yAxisFormat ?? metricEntry?.d3format ?? undefined);\n\n  const { onContextMenu } = hooks;\n\n  const defaultColorFormatters = [] as ColorFormatters;\n\n  const colorThresholdFormatters =\n    getColorFormatters(conditionalFormatting, data, false) ??\n    defaultColorFormatters;\n\n  return {\n    width,\n    height,\n    bigNumber,\n    headerFormatter,\n    headerFontSize,\n    subheaderFontSize,\n    subheader: formattedSubheader,\n    onContextMenu,\n    refs,\n    colorThresholdFormatters,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}