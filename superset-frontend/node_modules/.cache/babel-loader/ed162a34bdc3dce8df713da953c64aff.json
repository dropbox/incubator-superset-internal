{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { utcFormat, timeFormat } from 'd3-time-format';\nimport { utcUtils, localTimeUtils } from '../utils/d3Time';\nimport TimeFormatter from '../TimeFormatter';\nexport default function createMultiFormatter(_ref) {let { id, label, description, formats = {}, useLocalTime = false } = _ref;\n  const { millisecond = '.%L', second = ':%S', minute = '%I:%M', hour = '%I %p', day = '%a %d', week = '%b %d', month = '%B', year = '%Y' } = formats;\n  const format = useLocalTime ? timeFormat : utcFormat;\n  const formatMillisecond = format(millisecond);\n  const formatSecond = format(second);\n  const formatMinute = format(minute);\n  const formatHour = format(hour);\n  const formatDay = format(day);\n  const formatFirstDayOfWeek = format(week);\n  const formatMonth = format(month);\n  const formatYear = format(year);\n  const { hasMillisecond, hasSecond, hasMinute, hasHour, isNotFirstDayOfMonth, isNotFirstDayOfWeek, isNotFirstMonth } = useLocalTime ? localTimeUtils : utcUtils;\n  function multiFormatFunc(date) {\n    if (hasMillisecond(date)) {\n      return formatMillisecond;\n    }\n    if (hasSecond(date)) {\n      return formatSecond;\n    }\n    if (hasMinute(date)) {\n      return formatMinute;\n    }\n    if (hasHour(date)) {\n      return formatHour;\n    }\n    if (isNotFirstDayOfMonth(date)) {\n      return isNotFirstDayOfWeek(date) ? formatDay : formatFirstDayOfWeek;\n    }\n    if (isNotFirstMonth(date)) {\n      return formatMonth;\n    }\n    return formatYear;\n  }\n  return new TimeFormatter({\n    description,\n    formatFunc: (date) => multiFormatFunc(date)(date),\n    id,\n    label,\n    useLocalTime });\n\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(createMultiFormatter, \"createMultiFormatter\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/time-format/factories/createMultiFormatter.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAmBA,SAASA,SAAT,EAAoBC,UAApB,QAAsC,gBAAtC;AACA,SAASC,QAAT,EAAmBC,cAAnB,QAAyC,iBAAzC;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AAaA,eAAc,SAAUC,oBAAV,OAYb,KAZ4C,EAC3CC,EAD2C,EAE3CC,KAF2C,EAG3CC,WAH2C,EAI3CC,OAAO,GAAG,EAJiC,EAK3CC,YAAY,GAAG,KAL4B,EAY5C;EACC,MAAM,EACJC,WAAW,GAAG,KADV,EAEJC,MAAM,GAAG,KAFL,EAGJC,MAAM,GAAG,OAHL,EAIJC,IAAI,GAAG,OAJH,EAKJC,GAAG,GAAG,OALF,EAMJC,IAAI,GAAG,OANH,EAOJC,KAAK,GAAG,IAPJ,EAQJC,IAAI,GAAG,IARH,KASFT,OATJ;EAWA,MAAMU,MAAM,GAAGT,YAAY,GAAGT,UAAH,GAAgBD,SAA3C;EAEA,MAAMoB,iBAAiB,GAAGD,MAAM,CAACR,WAAD,CAAhC;EACA,MAAMU,YAAY,GAAGF,MAAM,CAACP,MAAD,CAA3B;EACA,MAAMU,YAAY,GAAGH,MAAM,CAACN,MAAD,CAA3B;EACA,MAAMU,UAAU,GAAGJ,MAAM,CAACL,IAAD,CAAzB;EACA,MAAMU,SAAS,GAAGL,MAAM,CAACJ,GAAD,CAAxB;EACA,MAAMU,oBAAoB,GAAGN,MAAM,CAACH,IAAD,CAAnC;EACA,MAAMU,WAAW,GAAGP,MAAM,CAACF,KAAD,CAA1B;EACA,MAAMU,UAAU,GAAGR,MAAM,CAACD,IAAD,CAAzB;EAEA,MAAM,EACJU,cADI,EAEJC,SAFI,EAGJC,SAHI,EAIJC,OAJI,EAKJC,oBALI,EAMJC,mBANI,EAOJC,eAPI,KAQFxB,YAAY,GAAGP,cAAH,GAAoBD,QARpC;EAUA,SAASiC,eAAT,CAAyBC,IAAzB,EAAmC;IACjC,IAAIR,cAAc,CAACQ,IAAD,CAAlB,EAA0B;MACxB,OAAOhB,iBAAP;IACD;IACD,IAAIS,SAAS,CAACO,IAAD,CAAb,EAAqB;MACnB,OAAOf,YAAP;IACD;IACD,IAAIS,SAAS,CAACM,IAAD,CAAb,EAAqB;MACnB,OAAOd,YAAP;IACD;IACD,IAAIS,OAAO,CAACK,IAAD,CAAX,EAAmB;MACjB,OAAOb,UAAP;IACD;IACD,IAAIS,oBAAoB,CAACI,IAAD,CAAxB,EAAgC;MAC9B,OAAOH,mBAAmB,CAACG,IAAD,CAAnB,GAA4BZ,SAA5B,GAAwCC,oBAA/C;IACD;IACD,IAAIS,eAAe,CAACE,IAAD,CAAnB,EAA2B;MACzB,OAAOV,WAAP;IACD;IAED,OAAOC,UAAP;EACD;EAED,OAAO,IAAIvB,aAAJ,CAAkB;IACvBI,WADuB;IAEvB6B,UAAU,EAAE,CAACD,IAAD,KAAgBD,eAAe,CAACC,IAAD,CAAf,CAAsBA,IAAtB,CAFL;IAGvB9B,EAHuB;IAIvBC,KAJuB;IAKvBG,YALuB,EAAlB,CAAP;;AAOD,C,iLA3EuBL,oB","names":["utcFormat","timeFormat","utcUtils","localTimeUtils","TimeFormatter","createMultiFormatter","id","label","description","formats","useLocalTime","millisecond","second","minute","hour","day","week","month","year","format","formatMillisecond","formatSecond","formatMinute","formatHour","formatDay","formatFirstDayOfWeek","formatMonth","formatYear","hasMillisecond","hasSecond","hasMinute","hasHour","isNotFirstDayOfMonth","isNotFirstDayOfWeek","isNotFirstMonth","multiFormatFunc","date","formatFunc"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/time-format/factories/createMultiFormatter.ts"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { utcFormat, timeFormat } from 'd3-time-format';\nimport { utcUtils, localTimeUtils } from '../utils/d3Time';\nimport TimeFormatter from '../TimeFormatter';\n\ntype FormatsByStep = Partial<{\n  millisecond: string;\n  second: string;\n  minute: string;\n  hour: string;\n  day: string;\n  week: string;\n  month: string;\n  year: string;\n}>;\n\nexport default function createMultiFormatter({\n  id,\n  label,\n  description,\n  formats = {},\n  useLocalTime = false,\n}: {\n  id: string;\n  label?: string;\n  description?: string;\n  formats?: FormatsByStep;\n  useLocalTime?: boolean;\n}) {\n  const {\n    millisecond = '.%L',\n    second = ':%S',\n    minute = '%I:%M',\n    hour = '%I %p',\n    day = '%a %d',\n    week = '%b %d',\n    month = '%B',\n    year = '%Y',\n  } = formats;\n\n  const format = useLocalTime ? timeFormat : utcFormat;\n\n  const formatMillisecond = format(millisecond);\n  const formatSecond = format(second);\n  const formatMinute = format(minute);\n  const formatHour = format(hour);\n  const formatDay = format(day);\n  const formatFirstDayOfWeek = format(week);\n  const formatMonth = format(month);\n  const formatYear = format(year);\n\n  const {\n    hasMillisecond,\n    hasSecond,\n    hasMinute,\n    hasHour,\n    isNotFirstDayOfMonth,\n    isNotFirstDayOfWeek,\n    isNotFirstMonth,\n  } = useLocalTime ? localTimeUtils : utcUtils;\n\n  function multiFormatFunc(date: Date) {\n    if (hasMillisecond(date)) {\n      return formatMillisecond;\n    }\n    if (hasSecond(date)) {\n      return formatSecond;\n    }\n    if (hasMinute(date)) {\n      return formatMinute;\n    }\n    if (hasHour(date)) {\n      return formatHour;\n    }\n    if (isNotFirstDayOfMonth(date)) {\n      return isNotFirstDayOfWeek(date) ? formatDay : formatFirstDayOfWeek;\n    }\n    if (isNotFirstMonth(date)) {\n      return formatMonth;\n    }\n\n    return formatYear;\n  }\n\n  return new TimeFormatter({\n    description,\n    formatFunc: (date: Date) => multiFormatFunc(date)(date),\n    id,\n    label,\n    useLocalTime,\n  });\n}\n"]},"metadata":{},"sourceType":"module"}