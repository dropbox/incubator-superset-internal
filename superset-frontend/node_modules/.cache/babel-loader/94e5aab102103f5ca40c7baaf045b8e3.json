{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useState } from 'react';\nimport { t, SupersetClient } from '@superset-ui/core';\nimport ControlHeader from 'src/explore/components/ControlHeader';\nimport { Select } from 'src/components';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nfunction isLabeledValue(arg) {\n  return arg.value !== undefined;\n}\nconst SelectAsyncControl = (_ref) => {let { addDangerToast, allowClear = true, ariaLabel, dataEndpoint, multi = true, mutator, onChange, placeholder, value, ...props } = _ref;\n  const [options, setOptions] = useState([]);\n  const handleOnChange = (val) => {\n    let onChangeVal = val;\n    if (Array.isArray(val)) {\n      const values = val.map((v) => isLabeledValue(v) ? v.value : v);\n      onChangeVal = values;\n    }\n    if (isLabeledValue(val)) {\n      onChangeVal = val.value;\n    }\n    onChange(onChangeVal);\n  };\n  const getValue = () => {\n    const currentValue = value || (props.default !== undefined ? props.default : undefined);\n    // safety check - the value is intended to be undefined but null was used\n    if (currentValue === null && !options.find((o) => o.value === null)) {\n      return undefined;\n    }\n    return currentValue;\n  };\n  useEffect(() => {\n    const onError = (response) => getClientErrorObject(response).then((e) => {\n      const { error } = e;\n      addDangerToast(t('Error while fetching data: %s', error));\n    });\n    const loadOptions = () => SupersetClient.get({\n      endpoint: dataEndpoint }).\n\n    then((response) => {\n      const data = mutator ? mutator(response.json) : response.json.result;\n      setOptions(data);\n    }).\n    catch(onError);\n    loadOptions();\n  }, [addDangerToast, dataEndpoint, mutator]);\n  return ___EmotionJSX(Select, { allowClear: allowClear, ariaLabel: ariaLabel || t('Select ...'), value: getValue(), header: ___EmotionJSX(ControlHeader, props), mode: multi ? 'multiple' : 'single', onChange: handleOnChange, options: options, placeholder: placeholder });\n};\nexport default withToasts(SelectAsyncControl);","map":{"version":3,"mappings":"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","names":["React","useEffect","useState","t","SupersetClient","ControlHeader","Select","withToasts","getClientErrorObject","isLabeledValue","arg","value","undefined","SelectAsyncControl","addDangerToast","allowClear","ariaLabel","dataEndpoint","multi","mutator","onChange","placeholder","props","options","setOptions","handleOnChange","val","onChangeVal","Array","isArray","values","map","v","getValue","currentValue","default","find","o","onError","response","then","error","e","loadOptions","get","endpoint","data","json","result","catch"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/explore/components/controls/SelectAsyncControl/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useState } from 'react';\nimport { t, SupersetClient } from '@superset-ui/core';\nimport ControlHeader from 'src/explore/components/ControlHeader';\nimport { Select } from 'src/components';\nimport { SelectOptionsType, SelectProps } from 'src/components/Select/types';\nimport { SelectValue, LabeledValue } from 'antd/lib/select';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\n\ntype SelectAsyncProps = Omit<SelectProps, 'options' | 'ariaLabel' | 'onChange'>;\n\ninterface SelectAsyncControlProps extends SelectAsyncProps {\n  addDangerToast: (error: string) => void;\n  ariaLabel?: string;\n  dataEndpoint: string;\n  default?: SelectValue;\n  mutator?: (response: Record<string, any>) => SelectOptionsType;\n  multi?: boolean;\n  onChange: (val: SelectValue) => void;\n  // ControlHeader related props\n  description?: string;\n  hovered?: boolean;\n  label?: string;\n}\n\nfunction isLabeledValue(arg: any): arg is LabeledValue {\n  return arg.value !== undefined;\n}\n\nconst SelectAsyncControl = ({\n  addDangerToast,\n  allowClear = true,\n  ariaLabel,\n  dataEndpoint,\n  multi = true,\n  mutator,\n  onChange,\n  placeholder,\n  value,\n  ...props\n}: SelectAsyncControlProps) => {\n  const [options, setOptions] = useState<SelectOptionsType>([]);\n\n  const handleOnChange = (val: SelectValue) => {\n    let onChangeVal = val;\n    if (Array.isArray(val)) {\n      const values = val.map(v => (isLabeledValue(v) ? v.value : v));\n      onChangeVal = values;\n    }\n    if (isLabeledValue(val)) {\n      onChangeVal = val.value;\n    }\n    onChange(onChangeVal);\n  };\n\n  const getValue = () => {\n    const currentValue =\n      value || (props.default !== undefined ? props.default : undefined);\n\n    // safety check - the value is intended to be undefined but null was used\n    if (currentValue === null && !options.find(o => o.value === null)) {\n      return undefined;\n    }\n    return currentValue;\n  };\n\n  useEffect(() => {\n    const onError = (response: Response) =>\n      getClientErrorObject(response).then(e => {\n        const { error } = e;\n        addDangerToast(t('Error while fetching data: %s', error));\n      });\n    const loadOptions = () =>\n      SupersetClient.get({\n        endpoint: dataEndpoint,\n      })\n        .then(response => {\n          const data = mutator ? mutator(response.json) : response.json.result;\n          setOptions(data);\n        })\n        .catch(onError);\n    loadOptions();\n  }, [addDangerToast, dataEndpoint, mutator]);\n\n  return (\n    <Select\n      allowClear={allowClear}\n      ariaLabel={ariaLabel || t('Select ...')}\n      value={getValue()}\n      header={<ControlHeader {...props} />}\n      mode={multi ? 'multiple' : 'single'}\n      onChange={handleOnChange}\n      options={options}\n      placeholder={placeholder}\n    />\n  );\n};\n\nexport default withToasts(SelectAsyncControl);\n"]},"metadata":{},"sourceType":"module"}