{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport buildQueryObject from './buildQueryObject';\nimport DatasourceKey from './DatasourceKey';\nimport { normalizeTimeColumn } from './normalizeTimeColumn';\nimport { isXAxisSet } from './getXAxis';\nconst WRAP_IN_ARRAY = (baseQueryObject) => [baseQueryObject];\nexport default function buildQueryContext(formData, options) {\n  const { queryFields, buildQuery = WRAP_IN_ARRAY } = typeof options === 'function' ?\n  { buildQuery: options, queryFields: {} } :\n  options || {};\n  let queries = buildQuery(buildQueryObject(formData, queryFields));\n  // --- query mutator begin ---\n  // todo(Yongjie): move the query mutator into buildQueryObject instead of buildQueryContext\n  queries.forEach((query) => {\n    if (Array.isArray(query.post_processing)) {\n      // eslint-disable-next-line no-param-reassign\n      query.post_processing = query.post_processing.filter(Boolean);\n    }\n  });\n  if (isXAxisSet(formData)) {\n    queries = queries.map((query) => normalizeTimeColumn(formData, query));\n  }\n  // --- query mutator end ---\n  return {\n    datasource: new DatasourceKey(formData.datasource).toObject(),\n    force: formData.force || false,\n    queries,\n    form_data: formData,\n    result_format: formData.result_format || 'json',\n    result_type: formData.result_type || 'full' };\n\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(WRAP_IN_ARRAY, \"WRAP_IN_ARRAY\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/query/buildQueryContext.ts\");reactHotLoader.register(buildQueryContext, \"buildQueryContext\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/query/buildQueryContext.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAmBA,OAAOA,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AAKA,SAASC,mBAAT,QAAoC,uBAApC;AACA,SAASC,UAAT,QAA2B,YAA3B;AAEA,MAAMC,aAAa,GAAG,CAACC,eAAD,KAAkC,CAACA,eAAD,CAAxD;AAMA,eAAc,SAAUC,iBAAV,CACZC,QADY,EAEZC,OAFY,EASc;EAE1B,MAAM,EAAEC,WAAF,EAAeC,UAAU,GAAGN,aAA5B,KACJ,OAAOI,OAAP,KAAmB,UAAnB;EACI,EAAEE,UAAU,EAAEF,OAAd,EAAuBC,WAAW,EAAE,EAApC,EADJ;EAEID,OAAO,IAAI,EAHjB;EAIA,IAAIG,OAAO,GAAGD,UAAU,CAACV,gBAAgB,CAACO,QAAD,EAAWE,WAAX,CAAjB,CAAxB;EACA;EACA;EACAE,OAAO,CAACC,OAAR,CAAgB,MAAK,KAAG;IACtB,IAAIC,KAAK,CAACC,OAAN,CAAcC,KAAK,CAACC,eAApB,CAAJ,EAA0C;MACxC;MACAD,KAAK,CAACC,eAAN,GAAwBD,KAAK,CAACC,eAAN,CAAsBC,MAAtB,CAA6BC,OAA7B,CAAxB;IACD;EACF,CALD;EAMA,IAAIf,UAAU,CAACI,QAAD,CAAd,EAA0B;IACxBI,OAAO,GAAGA,OAAO,CAACQ,GAAR,CAAY,MAAK,KAAIjB,mBAAmB,CAACK,QAAD,EAAWQ,KAAX,CAAxC,CAAV;EACD;EACD;EACA,OAAO;IACLK,UAAU,EAAE,IAAInB,aAAJ,CAAkBM,QAAQ,CAACa,UAA3B,EAAuCC,QAAvC,EADP;IAELC,KAAK,EAAEf,QAAQ,CAACe,KAAT,IAAkB,KAFpB;IAGLX,OAHK;IAILY,SAAS,EAAEhB,QAJN;IAKLiB,aAAa,EAAEjB,QAAQ,CAACiB,aAAT,IAA0B,MALpC;IAMLC,WAAW,EAAElB,QAAQ,CAACkB,WAAT,IAAwB,MANhC,EAAP;;AAQD,C,iLA1CKrB,a,wKAMkBE,iB","names":["buildQueryObject","DatasourceKey","normalizeTimeColumn","isXAxisSet","WRAP_IN_ARRAY","baseQueryObject","buildQueryContext","formData","options","queryFields","buildQuery","queries","forEach","Array","isArray","query","post_processing","filter","Boolean","map","datasource","toObject","force","form_data","result_format","result_type"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/query/buildQueryContext.ts"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport buildQueryObject from './buildQueryObject';\nimport DatasourceKey from './DatasourceKey';\nimport { QueryFieldAliases, QueryFormData } from './types/QueryFormData';\nimport { QueryContext, QueryObject } from './types/Query';\nimport { SetDataMaskHook } from '../chart';\nimport { JsonObject } from '../connection';\nimport { normalizeTimeColumn } from './normalizeTimeColumn';\nimport { isXAxisSet } from './getXAxis';\n\nconst WRAP_IN_ARRAY = (baseQueryObject: QueryObject) => [baseQueryObject];\n\nexport type BuildFinalQueryObjects = (\n  baseQueryObject: QueryObject,\n) => QueryObject[];\n\nexport default function buildQueryContext(\n  formData: QueryFormData,\n  options?:\n    | {\n        buildQuery?: BuildFinalQueryObjects;\n        queryFields?: QueryFieldAliases;\n        ownState?: JsonObject;\n        hooks?: { setDataMask: SetDataMaskHook };\n      }\n    | BuildFinalQueryObjects,\n): QueryContext {\n  const { queryFields, buildQuery = WRAP_IN_ARRAY } =\n    typeof options === 'function'\n      ? { buildQuery: options, queryFields: {} }\n      : options || {};\n  let queries = buildQuery(buildQueryObject(formData, queryFields));\n  // --- query mutator begin ---\n  // todo(Yongjie): move the query mutator into buildQueryObject instead of buildQueryContext\n  queries.forEach(query => {\n    if (Array.isArray(query.post_processing)) {\n      // eslint-disable-next-line no-param-reassign\n      query.post_processing = query.post_processing.filter(Boolean);\n    }\n  });\n  if (isXAxisSet(formData)) {\n    queries = queries.map(query => normalizeTimeColumn(formData, query));\n  }\n  // --- query mutator end ---\n  return {\n    datasource: new DatasourceKey(formData.datasource).toObject(),\n    force: formData.force || false,\n    queries,\n    form_data: formData,\n    result_format: formData.result_format || 'json',\n    result_type: formData.result_type || 'full',\n  };\n}\n"]},"metadata":{},"sourceType":"module"}