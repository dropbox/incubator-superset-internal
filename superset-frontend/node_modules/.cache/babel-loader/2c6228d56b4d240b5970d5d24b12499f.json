{"ast":null,"code":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { timeSecond, timeMinute, timeHour, timeDay, timeWeek, timeSunday, timeMonday, timeTuesday, timeWednesday, timeThursday, timeFriday, timeSaturday, timeMonth, timeYear, utcSecond, utcMinute, utcHour, utcDay, utcWeek, utcSunday, utcMonday, utcTuesday, utcWednesday, utcThursday, utcFriday, utcSaturday, utcMonth, utcYear } from 'd3-time';\nfunction createUtils(useLocalTime) {if (useLocalTime === void 0) {useLocalTime = false;}\n  let floorSecond;\n  let floorMinute;\n  let floorHour;\n  let floorDay;\n  let floorWeek;\n  let floorWeekStartOnSunday;\n  let floorWeekStartOnMonday;\n  let floorWeekStartOnTuesday;\n  let floorWeekStartOnWednesday;\n  let floorWeekStartOnThursday;\n  let floorWeekStartOnFriday;\n  let floorWeekStartOnSaturday;\n  let floorMonth;\n  let floorYear;\n  if (useLocalTime) {\n    floorSecond = timeSecond;\n    floorMinute = timeMinute;\n    floorHour = timeHour;\n    floorDay = timeDay;\n    floorWeek = timeWeek;\n    floorWeekStartOnSunday = timeSunday;\n    floorWeekStartOnMonday = timeMonday;\n    floorWeekStartOnTuesday = timeTuesday;\n    floorWeekStartOnWednesday = timeWednesday;\n    floorWeekStartOnThursday = timeThursday;\n    floorWeekStartOnFriday = timeFriday;\n    floorWeekStartOnSaturday = timeSaturday;\n    floorMonth = timeMonth;\n    floorYear = timeYear;\n  } else\n  {\n    floorSecond = utcSecond;\n    floorMinute = utcMinute;\n    floorHour = utcHour;\n    floorDay = utcDay;\n    floorWeek = utcWeek;\n    floorWeekStartOnSunday = utcSunday;\n    floorWeekStartOnMonday = utcMonday;\n    floorWeekStartOnTuesday = utcTuesday;\n    floorWeekStartOnWednesday = utcWednesday;\n    floorWeekStartOnThursday = utcThursday;\n    floorWeekStartOnFriday = utcFriday;\n    floorWeekStartOnSaturday = utcSaturday;\n    floorMonth = utcMonth;\n    floorYear = utcYear;\n  }\n  return {\n    floorSecond,\n    floorMinute,\n    floorHour,\n    floorDay,\n    floorWeek,\n    floorWeekStartOnSunday,\n    floorWeekStartOnMonday,\n    floorWeekStartOnTuesday,\n    floorWeekStartOnWednesday,\n    floorWeekStartOnThursday,\n    floorWeekStartOnFriday,\n    floorWeekStartOnSaturday,\n    floorMonth,\n    floorYear,\n    hasMillisecond: (date) => floorSecond(date) < date,\n    hasSecond: (date) => floorMinute(date) < date,\n    hasMinute: (date) => floorHour(date) < date,\n    hasHour: (date) => floorDay(date) < date,\n    isNotFirstDayOfMonth: (date) => floorMonth(date) < date,\n    isNotFirstDayOfWeek: (date) => floorWeek(date) < date,\n    isNotFirstDayOfWeekStartOnSunday: (date) => floorWeekStartOnSunday(date) < date,\n    isNotFirstDayOfWeekStartOnMonday: (date) => floorWeekStartOnMonday(date) < date,\n    isNotFirstDayOfWeekStartOnTuesday: (date) => floorWeekStartOnTuesday(date) < date,\n    isNotFirstDayOfWeekStartOnWednesday: (date) => floorWeekStartOnWednesday(date) < date,\n    isNotFirstDayOfWeekStartOnThursday: (date) => floorWeekStartOnThursday(date) < date,\n    isNotFirstDayOfWeekStartOnFriday: (date) => floorWeekStartOnFriday(date) < date,\n    isNotFirstDayOfWeekStartOnSaturday: (date) => floorWeekStartOnSaturday(date) < date,\n    isNotFirstMonth: (date) => floorYear(date) < date };\n\n}\nconst utcUtils = createUtils();\nconst localTimeUtils = createUtils(true);\nexport { utcUtils, localTimeUtils };","map":{"version":3,"mappings":"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","names":["timeSecond","timeMinute","timeHour","timeDay","timeWeek","timeSunday","timeMonday","timeTuesday","timeWednesday","timeThursday","timeFriday","timeSaturday","timeMonth","timeYear","utcSecond","utcMinute","utcHour","utcDay","utcWeek","utcSunday","utcMonday","utcTuesday","utcWednesday","utcThursday","utcFriday","utcSaturday","utcMonth","utcYear","createUtils","useLocalTime","floorSecond","floorMinute","floorHour","floorDay","floorWeek","floorWeekStartOnSunday","floorWeekStartOnMonday","floorWeekStartOnTuesday","floorWeekStartOnWednesday","floorWeekStartOnThursday","floorWeekStartOnFriday","floorWeekStartOnSaturday","floorMonth","floorYear","hasMillisecond","date","hasSecond","hasMinute","hasHour","isNotFirstDayOfMonth","isNotFirstDayOfWeek","isNotFirstDayOfWeekStartOnSunday","isNotFirstDayOfWeekStartOnMonday","isNotFirstDayOfWeekStartOnTuesday","isNotFirstDayOfWeekStartOnWednesday","isNotFirstDayOfWeekStartOnThursday","isNotFirstDayOfWeekStartOnFriday","isNotFirstDayOfWeekStartOnSaturday","isNotFirstMonth","utcUtils","localTimeUtils"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/packages/superset-ui-core/src/time-format/utils/d3Time.ts"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport {\n  timeSecond,\n  timeMinute,\n  timeHour,\n  timeDay,\n  timeWeek,\n  timeSunday,\n  timeMonday,\n  timeTuesday,\n  timeWednesday,\n  timeThursday,\n  timeFriday,\n  timeSaturday,\n  timeMonth,\n  timeYear,\n  utcSecond,\n  utcMinute,\n  utcHour,\n  utcDay,\n  utcWeek,\n  utcSunday,\n  utcMonday,\n  utcTuesday,\n  utcWednesday,\n  utcThursday,\n  utcFriday,\n  utcSaturday,\n  utcMonth,\n  utcYear,\n  CountableTimeInterval,\n} from 'd3-time';\n\nfunction createUtils(useLocalTime = false) {\n  let floorSecond: CountableTimeInterval;\n  let floorMinute: CountableTimeInterval;\n  let floorHour: CountableTimeInterval;\n  let floorDay: CountableTimeInterval;\n  let floorWeek: CountableTimeInterval;\n  let floorWeekStartOnSunday: CountableTimeInterval;\n  let floorWeekStartOnMonday: CountableTimeInterval;\n  let floorWeekStartOnTuesday: CountableTimeInterval;\n  let floorWeekStartOnWednesday: CountableTimeInterval;\n  let floorWeekStartOnThursday: CountableTimeInterval;\n  let floorWeekStartOnFriday: CountableTimeInterval;\n  let floorWeekStartOnSaturday: CountableTimeInterval;\n  let floorMonth: CountableTimeInterval;\n  let floorYear: CountableTimeInterval;\n  if (useLocalTime) {\n    floorSecond = timeSecond;\n    floorMinute = timeMinute;\n    floorHour = timeHour;\n    floorDay = timeDay;\n    floorWeek = timeWeek;\n    floorWeekStartOnSunday = timeSunday;\n    floorWeekStartOnMonday = timeMonday;\n    floorWeekStartOnTuesday = timeTuesday;\n    floorWeekStartOnWednesday = timeWednesday;\n    floorWeekStartOnThursday = timeThursday;\n    floorWeekStartOnFriday = timeFriday;\n    floorWeekStartOnSaturday = timeSaturday;\n    floorMonth = timeMonth;\n    floorYear = timeYear;\n  } else {\n    floorSecond = utcSecond;\n    floorMinute = utcMinute;\n    floorHour = utcHour;\n    floorDay = utcDay;\n    floorWeek = utcWeek;\n    floorWeekStartOnSunday = utcSunday;\n    floorWeekStartOnMonday = utcMonday;\n    floorWeekStartOnTuesday = utcTuesday;\n    floorWeekStartOnWednesday = utcWednesday;\n    floorWeekStartOnThursday = utcThursday;\n    floorWeekStartOnFriday = utcFriday;\n    floorWeekStartOnSaturday = utcSaturday;\n    floorMonth = utcMonth;\n    floorYear = utcYear;\n  }\n\n  return {\n    floorSecond,\n    floorMinute,\n    floorHour,\n    floorDay,\n    floorWeek,\n    floorWeekStartOnSunday,\n    floorWeekStartOnMonday,\n    floorWeekStartOnTuesday,\n    floorWeekStartOnWednesday,\n    floorWeekStartOnThursday,\n    floorWeekStartOnFriday,\n    floorWeekStartOnSaturday,\n    floorMonth,\n    floorYear,\n    hasMillisecond: (date: Date) => floorSecond(date) < date,\n    hasSecond: (date: Date) => floorMinute(date) < date,\n    hasMinute: (date: Date) => floorHour(date) < date,\n    hasHour: (date: Date) => floorDay(date) < date,\n    isNotFirstDayOfMonth: (date: Date) => floorMonth(date) < date,\n    isNotFirstDayOfWeek: (date: Date) => floorWeek(date) < date,\n    isNotFirstDayOfWeekStartOnSunday: (date: Date) =>\n      floorWeekStartOnSunday(date) < date,\n    isNotFirstDayOfWeekStartOnMonday: (date: Date) =>\n      floorWeekStartOnMonday(date) < date,\n    isNotFirstDayOfWeekStartOnTuesday: (date: Date) =>\n      floorWeekStartOnTuesday(date) < date,\n    isNotFirstDayOfWeekStartOnWednesday: (date: Date) =>\n      floorWeekStartOnWednesday(date) < date,\n    isNotFirstDayOfWeekStartOnThursday: (date: Date) =>\n      floorWeekStartOnThursday(date) < date,\n    isNotFirstDayOfWeekStartOnFriday: (date: Date) =>\n      floorWeekStartOnFriday(date) < date,\n    isNotFirstDayOfWeekStartOnSaturday: (date: Date) =>\n      floorWeekStartOnSaturday(date) < date,\n    isNotFirstMonth: (date: Date) => floorYear(date) < date,\n  };\n}\n\nconst utcUtils = createUtils();\nconst localTimeUtils = createUtils(true);\n\nexport { utcUtils, localTimeUtils };\n"]},"metadata":{},"sourceType":"module"}