{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { css, styled, t } from '@superset-ui/core';\nimport Alert from 'src/components/Alert';\nimport TableView from 'src/components/TableView';\nimport Button from 'src/components/Button';\nimport Loading from 'src/components/Loading';\nimport ModalTrigger from 'src/components/ModalTrigger';\nimport { EmptyWrapperType } from 'src/components/TableView/TableView';\nimport useQueryEditor from 'src/SqlLab/hooks/useQueryEditor';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst CostEstimateModalStyles = styled.div`\n  ${(_ref) => {let { theme } = _ref;return css`\n    font-size: ${theme.typography.sizes.s};\n  `;}}\n`;\nconst EstimateQueryCostButton = (_ref2) => {let { getEstimate, queryEditorId, tooltip = '', disabled = false } = _ref2;\n  const queryCostEstimate = useSelector((state) => {var _state$sqlLab$queryCo;return (_state$sqlLab$queryCo = state.sqlLab.queryCostEstimates) == null ? void 0 : _state$sqlLab$queryCo[queryEditorId];});\n  const { selectedText } = useQueryEditor(queryEditorId, ['selectedText']);\n  const { cost } = queryCostEstimate || {};\n  const tableData = useMemo(() => Array.isArray(cost) ? cost : [], [cost]);\n  const columns = useMemo(() => Array.isArray(cost) && cost.length ?\n  Object.keys(cost[0]).map((key) => ({ accessor: key, Header: key })) :\n  [], [cost]);\n  // A call back method to pass an event handler function as a prop to the Button element.\n  // Refer: https://reactjs.org/docs/handling-events.html\n  const onClickHandler = () => {\n    getEstimate();\n  };\n  const renderModalBody = () => {\n    if (queryCostEstimate != null && queryCostEstimate.error) {\n      return ___EmotionJSX(Alert, { key: \"query-estimate-error\", type: \"error\", message: queryCostEstimate == null ? void 0 : queryCostEstimate.error });\n    }\n    if (queryCostEstimate != null && queryCostEstimate.completed) {\n      return ___EmotionJSX(CostEstimateModalStyles, null,\n      ___EmotionJSX(TableView, { columns: columns, data: tableData, withPagination: false, emptyWrapperType: EmptyWrapperType.Small }));\n\n    }\n    return ___EmotionJSX(Loading, { position: \"normal\" });\n  };\n  const btnText = selectedText ?\n  t('Estimate selected query cost') :\n  t('Estimate cost');\n  return ___EmotionJSX(\"span\", { className: \"EstimateQueryCostButton\" },\n  ___EmotionJSX(ModalTrigger, { modalTitle: t('Cost estimate'), modalBody: renderModalBody(), triggerNode: ___EmotionJSX(Button, { style: { height: 32, padding: '4px 15px' }, onClick: onClickHandler, key: \"query-estimate-btn\", tooltip: tooltip, disabled: disabled },\n    btnText) }));\n\n\n};__signature__(EstimateQueryCostButton, \"useSelector{queryCostEstimate}\\nuseQueryEditor{{ selectedText }}\\nuseMemo{tableData}\\nuseMemo{columns}\", () => [useSelector, useQueryEditor]);const _default =\nEstimateQueryCostButton;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(CostEstimateModalStyles, \"CostEstimateModalStyles\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/SqlLab/components/EstimateQueryCostButton/index.tsx\");reactHotLoader.register(EstimateQueryCostButton, \"EstimateQueryCostButton\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/SqlLab/components/EstimateQueryCostButton/index.tsx\");reactHotLoader.register(_default, \"default\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/SqlLab/components/EstimateQueryCostButton/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,GAAT,EAAcC,MAAd,EAAsBC,CAAtB,QAA+B,mBAA/B;AAEA,OAAOC,KAAP,MAAkB,sBAAlB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AACA,SAASC,gBAAT,QAAiC,oCAAjC;AACA,OAAOC,cAAP,MAA2B,iCAA3B,C;AAUA,MAAMC,uBAAuB,GAAGT,MAAM,CAACU,GAAG;IACtC,eAAC,EAAEC,KAAF,EAAD,eAAeZ,GAAG;iBACLY,KAAK,CAACC,UAAN,CAAiBC,KAAjB,CAAuBC,CAAC;GADrC,EAED;CAHH;AAMA,MAAMC,uBAAuB,GAAG,WAKG,KALF,EAC/BC,WAD+B,EAE/BC,aAF+B,EAG/BC,OAAO,GAAG,EAHqB,EAI/BC,QAAQ,GAAG,KAJoB,EAKE;EACjC,MAAMC,iBAAiB,GAAGtB,WAAW,CAGnC,MAAK,gEAAIuB,KAAK,CAACC,MAAN,CAAaC,kBAAjB,qBAAI,sBAAkCN,aAAlC,CAAJ,EAH8B,CAArC;EAKA,MAAM,EAAEO,YAAF,KAAmBhB,cAAc,CAACS,aAAD,EAAgB,CAAC,cAAD,CAAhB,CAAvC;EACA,MAAM,EAAEQ,IAAF,KAAWL,iBAAiB,IAAI,EAAtC;EACA,MAAMM,SAAS,GAAG7B,OAAO,CAAC,MAAO8B,KAAK,CAACC,OAAN,CAAcH,IAAd,IAAsBA,IAAtB,GAA6B,EAArC,EAA0C,CAACA,IAAD,CAA1C,CAAzB;EACA,MAAMI,OAAO,GAAGhC,OAAO,CACrB,MACE8B,KAAK,CAACC,OAAN,CAAcH,IAAd,KAAuBA,IAAI,CAACK,MAA5B;EACIC,MAAM,CAACC,IAAP,CAAYP,IAAI,CAAC,CAAD,CAAhB,EAAqBQ,GAArB,CAAyB,IAAG,MAAK,EAAEC,QAAQ,EAAEC,GAAZ,EAAiBC,MAAM,EAAED,GAAzB,EAAL,CAA5B,CADJ;EAEI,EAJe,EAKrB,CAACV,IAAD,CALqB,CAAvB;EAQA;EACA;EACA,MAAMY,cAAc,GAAG,MAAK;IAC1BrB,WAAW;EACZ,CAFD;EAIA,MAAMsB,eAAe,GAAG,MAAK;IAC3B,IAAIlB,iBAAJ,YAAIA,iBAAiB,CAAEmB,KAAvB,EAA8B;MAC5B,OACE,cAAC,KAAD,IACE,GAAG,EAAC,sBADN,EAEE,IAAI,EAAC,OAFP,EAGE,OAAO,EAAEnB,iBAAF,oBAAEA,iBAAiB,CAAEmB,KAH9B,GADF;IAOD;IACD,IAAInB,iBAAJ,YAAIA,iBAAiB,CAAEoB,SAAvB,EAAkC;MAChC,OACE,cAAC,uBAAD;MACE,cAAC,SAAD,IACE,OAAO,EAAEX,OADX,EAEE,IAAI,EAAEH,SAFR,EAGE,cAAc,EAAE,KAHlB,EAIE,gBAAgB,EAAEnB,gBAAgB,CAACkC,KAJrC,GADF,CADF;;IAUD;IACD,OAAO,cAAC,OAAD,IAAS,QAAQ,EAAC,QAAlB,GAAP;EACD,CAvBD;EAyBA,MAAMC,OAAO,GAAGlB,YAAY;EACxBvB,CAAC,CAAC,8BAAD,CADuB;EAExBA,CAAC,CAAC,eAAD,CAFL;EAGA,OACE,wBAAM,SAAS,EAAC,yBAAhB;EACE,cAAC,YAAD,IACE,UAAU,EAAEA,CAAC,CAAC,eAAD,CADf,EAEE,SAAS,EAAEqC,eAAe,EAF5B,EAGE,WAAW,EACT,cAAC,MAAD,IACE,KAAK,EAAE,EAAEK,MAAM,EAAE,EAAV,EAAcC,OAAO,EAAE,UAAvB,EADT,EAEE,OAAO,EAAEP,cAFX,EAGE,GAAG,EAAC,oBAHN,EAIE,OAAO,EAAEnB,OAJX,EAKE,QAAQ,EAAEC,QALZ;IAOGuB,OAPH,CAJJ,GADF,CADF;;;AAmBD,CA3ED,C,cAAM3B,uB,mHAMsBjB,W,EAKDU,c;AAkEZO,uB,CAAf,wB,iLAnFMN,uB,iLAMAM,uB","names":["React","useMemo","useSelector","css","styled","t","Alert","TableView","Button","Loading","ModalTrigger","EmptyWrapperType","useQueryEditor","CostEstimateModalStyles","div","theme","typography","sizes","s","EstimateQueryCostButton","getEstimate","queryEditorId","tooltip","disabled","queryCostEstimate","state","sqlLab","queryCostEstimates","selectedText","cost","tableData","Array","isArray","columns","length","Object","keys","map","accessor","key","Header","onClickHandler","renderModalBody","error","completed","Small","btnText","height","padding"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/SqlLab/components/EstimateQueryCostButton/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { css, styled, t } from '@superset-ui/core';\n\nimport Alert from 'src/components/Alert';\nimport TableView from 'src/components/TableView';\nimport Button from 'src/components/Button';\nimport Loading from 'src/components/Loading';\nimport ModalTrigger from 'src/components/ModalTrigger';\nimport { EmptyWrapperType } from 'src/components/TableView/TableView';\nimport useQueryEditor from 'src/SqlLab/hooks/useQueryEditor';\nimport { SqlLabRootState, QueryCostEstimate } from 'src/SqlLab/types';\n\nexport interface EstimateQueryCostButtonProps {\n  getEstimate: Function;\n  queryEditorId: string;\n  tooltip?: string;\n  disabled?: boolean;\n}\n\nconst CostEstimateModalStyles = styled.div`\n  ${({ theme }) => css`\n    font-size: ${theme.typography.sizes.s};\n  `}\n`;\n\nconst EstimateQueryCostButton = ({\n  getEstimate,\n  queryEditorId,\n  tooltip = '',\n  disabled = false,\n}: EstimateQueryCostButtonProps) => {\n  const queryCostEstimate = useSelector<\n    SqlLabRootState,\n    QueryCostEstimate | undefined\n  >(state => state.sqlLab.queryCostEstimates?.[queryEditorId]);\n\n  const { selectedText } = useQueryEditor(queryEditorId, ['selectedText']);\n  const { cost } = queryCostEstimate || {};\n  const tableData = useMemo(() => (Array.isArray(cost) ? cost : []), [cost]);\n  const columns = useMemo(\n    () =>\n      Array.isArray(cost) && cost.length\n        ? Object.keys(cost[0]).map(key => ({ accessor: key, Header: key }))\n        : [],\n    [cost],\n  );\n\n  // A call back method to pass an event handler function as a prop to the Button element.\n  // Refer: https://reactjs.org/docs/handling-events.html\n  const onClickHandler = () => {\n    getEstimate();\n  };\n\n  const renderModalBody = () => {\n    if (queryCostEstimate?.error) {\n      return (\n        <Alert\n          key=\"query-estimate-error\"\n          type=\"error\"\n          message={queryCostEstimate?.error}\n        />\n      );\n    }\n    if (queryCostEstimate?.completed) {\n      return (\n        <CostEstimateModalStyles>\n          <TableView\n            columns={columns}\n            data={tableData}\n            withPagination={false}\n            emptyWrapperType={EmptyWrapperType.Small}\n          />\n        </CostEstimateModalStyles>\n      );\n    }\n    return <Loading position=\"normal\" />;\n  };\n\n  const btnText = selectedText\n    ? t('Estimate selected query cost')\n    : t('Estimate cost');\n  return (\n    <span className=\"EstimateQueryCostButton\">\n      <ModalTrigger\n        modalTitle={t('Cost estimate')}\n        modalBody={renderModalBody()}\n        triggerNode={\n          <Button\n            style={{ height: 32, padding: '4px 15px' }}\n            onClick={onClickHandler}\n            key=\"query-estimate-btn\"\n            tooltip={tooltip}\n            disabled={disabled}\n          >\n            {btnText}\n          </Button>\n        }\n      />\n    </span>\n  );\n};\n\nexport default EstimateQueryCostButton;\n"]},"metadata":{},"sourceType":"module"}