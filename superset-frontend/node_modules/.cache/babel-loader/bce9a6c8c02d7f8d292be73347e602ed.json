{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { sharedControls, sharedControlComponents } from '../shared-controls';\nexport function expandControlType(controlType) {\n  if (typeof controlType === 'string' &&\n  controlType in sharedControlComponents) {\n    return sharedControlComponents[controlType];\n  }\n  return controlType;\n}\n/**\n * Expand a shorthand control config item to full config in the format of\n *   {\n *     name: ...,\n *     config: {\n *        type: ...,\n *        ...\n *     }\n *   }\n */\nexport function expandControlConfig(control, controlOverrides) {if (controlOverrides === void 0) {controlOverrides = {};}\n  // one of the named shared controls\n  if (typeof control === 'string' && control in sharedControls) {\n    const name = control;\n    return {\n      name,\n      config: {\n        ...sharedControls[name],\n        ...controlOverrides[name] } };\n\n\n  }\n  // JSX/React element or NULL\n  if (!control ||\n  typeof control === 'string' || /*#__PURE__*/\n  React.isValidElement(control)) {\n    return control;\n  }\n  // already fully expanded control config, e.g.\n  // {\n  //   name: 'metric',\n  //   config: {\n  //     type: 'SelectControl' | SelectComponent\n  //   }\n  // }\n  if ('name' in control && 'config' in control) {\n    return {\n      ...control,\n      config: {\n        ...control.config,\n        type: expandControlType(control.config.type) } };\n\n\n  }\n  // apply overrides with shared controls\n  if ('override' in control && control.name in sharedControls) {\n    const { name, override } = control;\n    return {\n      name,\n      config: {\n        ...sharedControls[name],\n        ...override } };\n\n\n  }\n  return null;\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,KAAP,MAAoC,OAApC;AACA,SAASC,cAAT,EAAyBC,uBAAzB,QAAwD,oBAAxD;AAQA,OAAM,SAAUC,iBAAV,CAA4BC,WAA5B,EAAoD;EACxD,IACE,OAAOA,WAAP,KAAuB,QAAvB;EACAA,WAAW,IAAIF,uBAFjB,EAGE;IACA,OAAOA,uBAAuB,CAC5BE,WAD4B,CAA9B;EAGD;EACD,OAAOA,WAAP;AACD;AAED;;;;;;;;;;AAUA,OAAM,SAAUC,mBAAV,CACJC,OADI,EAEJC,gBAFI,EAEmC,KAAvCA,gBAAuC,cAAvCA,gBAAuC,GAAF,EAAE;EAEvC;EACA,IAAI,OAAOD,OAAP,KAAmB,QAAnB,IAA+BA,OAAO,IAAIL,cAA9C,EAA8D;IAC5D,MAAMO,IAAI,GAAGF,OAAb;IACA,OAAO;MACLE,IADK;MAELC,MAAM,EAAE;QACN,GAAGR,cAAc,CAACO,IAAD,CADX;QAEN,GAAGD,gBAAgB,CAACC,IAAD,CAFb,EAFH,EAAP;;;EAOD;EACD;EACA,IACE,CAACF,OAAD;EACA,OAAOA,OAAP,KAAmB,QADnB;EAEAN,KAAK,CAACU,cAAN,CAAqBJ,OAArB,CAHF,EAIE;IACA,OAAOA,OAAP;EACD;EACD;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAI,UAAUA,OAAV,IAAqB,YAAYA,OAArC,EAA8C;IAC5C,OAAO;MACL,GAAGA,OADE;MAELG,MAAM,EAAE;QACN,GAAGH,OAAO,CAACG,MADL;QAENE,IAAI,EAAER,iBAAiB,CAACG,OAAO,CAACG,MAAR,CAAeE,IAAhB,CAFjB,EAFH,EAAP;;;EAOD;EACD;EACA,IAAI,cAAcL,OAAd,IAAyBA,OAAO,CAACE,IAAR,IAAgBP,cAA7C,EAA6D;IAC3D,MAAM,EAAEO,IAAF,EAAQI,QAAR,KAAqBN,OAA3B;IACA,OAAO;MACLE,IADK;MAELC,MAAM,EAAE;QACN,GAAGR,cAAc,CAACO,IAAD,CADX;QAEN,GAAGI,QAFG,EAFH,EAAP;;;EAOD;EACD,OAAO,IAAP;AACD","names":["React","sharedControls","sharedControlComponents","expandControlType","controlType","expandControlConfig","control","controlOverrides","name","config","isValidElement","type","override"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/packages/superset-ui-chart-controls/src/utils/expandControlConfig.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { ReactElement } from 'react';\nimport { sharedControls, sharedControlComponents } from '../shared-controls';\nimport {\n  ControlType,\n  ControlSetItem,\n  ExpandedControlItem,\n  ControlOverrides,\n} from '../types';\n\nexport function expandControlType(controlType: ControlType) {\n  if (\n    typeof controlType === 'string' &&\n    controlType in sharedControlComponents\n  ) {\n    return sharedControlComponents[\n      controlType as keyof typeof sharedControlComponents\n    ];\n  }\n  return controlType;\n}\n\n/**\n * Expand a shorthand control config item to full config in the format of\n *   {\n *     name: ...,\n *     config: {\n *        type: ...,\n *        ...\n *     }\n *   }\n */\nexport function expandControlConfig(\n  control: ControlSetItem,\n  controlOverrides: ControlOverrides = {},\n): ExpandedControlItem {\n  // one of the named shared controls\n  if (typeof control === 'string' && control in sharedControls) {\n    const name = control;\n    return {\n      name,\n      config: {\n        ...sharedControls[name],\n        ...controlOverrides[name],\n      },\n    };\n  }\n  // JSX/React element or NULL\n  if (\n    !control ||\n    typeof control === 'string' ||\n    React.isValidElement(control)\n  ) {\n    return control as ReactElement;\n  }\n  // already fully expanded control config, e.g.\n  // {\n  //   name: 'metric',\n  //   config: {\n  //     type: 'SelectControl' | SelectComponent\n  //   }\n  // }\n  if ('name' in control && 'config' in control) {\n    return {\n      ...control,\n      config: {\n        ...control.config,\n        type: expandControlType(control.config.type as ControlType),\n      },\n    };\n  }\n  // apply overrides with shared controls\n  if ('override' in control && control.name in sharedControls) {\n    const { name, override } = control;\n    return {\n      name,\n      config: {\n        ...sharedControls[name],\n        ...override,\n      },\n    };\n  }\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}