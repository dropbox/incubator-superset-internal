{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\";import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useState } from 'react';\nimport FormItem from 'src/components/Form/FormItem';\nimport { Select } from 'src/components';\nimport { FeatureFlag, hasGenericChartAxes, isDefined, styled, SupersetClient, t } from '@superset-ui/core';\nimport { Operators, OPERATORS_OPTIONS, HAVING_OPERATORS, MULTI_OPERATORS, CUSTOM_OPERATORS, DISABLE_INPUT_OPERATORS, OPERATOR_ENUM_TO_OPERATOR_TYPE } from 'src/explore/constants';\nimport FilterDefinitionOption from 'src/explore/components/controls/MetricControl/FilterDefinitionOption';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { Input } from 'src/components/Input';\nimport { optionLabel } from 'src/utils/common';\nimport { isFeatureEnabled } from 'src/featureFlags';\nimport { isTemporalColumn } from '@superset-ui/chart-controls';\nimport useAdvancedDataTypes from './useAdvancedDataTypes';\nimport { useDatePickerInAdhocFilter } from '../utils';\nimport { useDefaultTimeFilter } from '../../DateFilterControl/utils';\nimport { CLAUSES, EXPRESSION_TYPES } from '../types';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst StyledInput = styled(Input)`\n  margin-bottom: ${(_ref) => {let { theme } = _ref;return theme.gridUnit * 4;}}px;\n`;\nexport const StyledFormItem = styled(FormItem)`\n  &.ant-row.ant-form-item {\n    margin: 0;\n  }\n`;\nconst SelectWithLabel = styled(Select)`\n  .ant-select-selector::after {\n    content: ${(_ref2) => {let { labelText } = _ref2;return labelText || '\\\\A0';}};\n    display: inline-block;\n    white-space: nowrap;\n    color: ${(_ref3) => {let { theme } = _ref3;return theme.colors.grayscale.light1;}};\n    width: max-content;\n  }\n`;\nexport const useSimpleTabFilterProps = (props) => {\n  const defaultTimeFilter = useDefaultTimeFilter();\n  const isOperatorRelevant = (operator, subject) => {var _props$datasource$col;\n    const column = (_props$datasource$col = props.datasource.columns) == null ? void 0 : _props$datasource$col.find((col) => col.column_name === subject);\n    const isColumnBoolean = !!column && (column.type === 'BOOL' || column.type === 'BOOLEAN');\n    const isColumnNumber = !!column && (column.type === 'INT' || column.type === 'INTEGER');\n    const isColumnFunction = !!column && !!column.expression;\n    if (operator && operator === Operators.LATEST_PARTITION) {\n      const { partitionColumn } = props;\n      return partitionColumn && subject && subject === partitionColumn;\n    }\n    if (operator && operator === Operators.TEMPORAL_RANGE) {\n      // hide the TEMPORAL_RANGE operator\n      return false;\n    }\n    if (operator === Operators.IS_TRUE || operator === Operators.IS_FALSE) {\n      return isColumnBoolean || isColumnNumber || isColumnFunction;\n    }\n    if (isColumnBoolean) {\n      return operator === Operators.IS_NULL || operator === Operators.IS_NOT_NULL;\n    }\n    return props.adhocFilter.clause !== CLAUSES.HAVING ||\n    HAVING_OPERATORS.indexOf(operator) !== -1;\n  };\n  const onSubjectChange = (id) => {\n    const option = props.options.find((option) => 'column_name' in option && option.column_name === id ||\n    'optionName' in option && option.optionName === id);\n    let subject = '';\n    let clause;\n    // infer the new clause based on what subject was selected.\n    if (option && 'column_name' in option) {\n      subject = option.column_name;\n      clause = CLAUSES.WHERE;\n    } else\n    if (option && 'saved_metric_name' in option) {\n      subject = option.saved_metric_name;\n      clause = CLAUSES.HAVING;\n    } else\n    if (option != null && option.label) {\n      subject = option.label;\n      clause = CLAUSES.HAVING;\n    }\n    let { operator, operatorId, comparator } = props.adhocFilter;\n    operator =\n    operator && operatorId && isOperatorRelevant(operatorId, subject) ?\n    OPERATOR_ENUM_TO_OPERATOR_TYPE[operatorId].operation :\n    null;\n    if (!isDefined(operator)) {\n      // if operator is `null`, use the `IN` and reset the comparator.\n      operator = Operators.IN;\n      operatorId = Operators.IN;\n      comparator = undefined;\n    }\n    if (hasGenericChartAxes && isTemporalColumn(id, props.datasource)) {\n      subject = id;\n      operator = Operators.TEMPORAL_RANGE;\n      operatorId = Operators.TEMPORAL_RANGE;\n      comparator = defaultTimeFilter;\n    }\n    props.onChange(props.adhocFilter.duplicateWith({\n      subject,\n      clause,\n      operator,\n      expressionType: EXPRESSION_TYPES.SIMPLE,\n      operatorId,\n      comparator }));\n\n  };\n  const onOperatorChange = (operatorId) => {\n    const currentComparator = props.adhocFilter.comparator;\n    let newComparator;\n    // convert between list of comparators and individual comparators\n    // (e.g. `in ('North America', 'Africa')` to `== 'North America'`)\n    if (MULTI_OPERATORS.has(operatorId)) {\n      newComparator = Array.isArray(currentComparator) ?\n      currentComparator :\n      [currentComparator].filter((element) => element);\n    } else\n    {\n      newComparator = Array.isArray(currentComparator) ?\n      currentComparator[0] :\n      currentComparator;\n    }\n    if (operatorId === Operators.IS_TRUE || operatorId === Operators.IS_FALSE) {\n      newComparator = Operators.IS_TRUE === operatorId;\n    }\n    if (operatorId && CUSTOM_OPERATORS.has(operatorId)) {\n      props.onChange(props.adhocFilter.duplicateWith({\n        subject: props.adhocFilter.subject,\n        clause: CLAUSES.WHERE,\n        operatorId,\n        operator: OPERATOR_ENUM_TO_OPERATOR_TYPE[operatorId].operation,\n        expressionType: EXPRESSION_TYPES.SQL,\n        datasource: props.datasource }));\n\n    } else\n    {\n      props.onChange(props.adhocFilter.duplicateWith({\n        operatorId,\n        operator: OPERATOR_ENUM_TO_OPERATOR_TYPE[operatorId].operation,\n        comparator: newComparator,\n        expressionType: EXPRESSION_TYPES.SIMPLE }));\n\n    }\n  };\n  const onComparatorChange = (comparator) => {\n    props.onChange(props.adhocFilter.duplicateWith({\n      comparator,\n      expressionType: EXPRESSION_TYPES.SIMPLE }));\n\n  };\n  const clearOperator = () => {\n    props.onChange(props.adhocFilter.duplicateWith({\n      operatorId: undefined,\n      operator: undefined }));\n\n  };\n  const onDatePickerChange = (columnName, timeRange) => {\n    props.onChange(props.adhocFilter.duplicateWith({\n      subject: columnName,\n      operator: Operators.TEMPORAL_RANGE,\n      comparator: timeRange,\n      expressionType: EXPRESSION_TYPES.SIMPLE }));\n\n  };\n  return {\n    onSubjectChange,\n    onOperatorChange,\n    onComparatorChange,\n    isOperatorRelevant,\n    clearOperator,\n    onDatePickerChange };\n\n};\nconst AdhocFilterEditPopoverSimpleTabContent = (props) => {var _props$operators, _props$operators2;\n  const { onSubjectChange, onOperatorChange, isOperatorRelevant, onComparatorChange, onDatePickerChange } = useSimpleTabFilterProps(props);\n  const [suggestions, setSuggestions] = useState([]);\n  const [comparator, setComparator] = useState(props.adhocFilter.comparator);\n  const [loadingComparatorSuggestions, setLoadingComparatorSuggestions] = useState(false);\n  const { advancedDataTypesState, subjectAdvancedDataType, fetchAdvancedDataTypeValueCallback, fetchSubjectAdvancedDataType } = useAdvancedDataTypes(props.validHandler);\n  // TODO: This does not need to exist, just use the advancedTypeOperatorList list\n  const isOperatorRelevantWrapper = (operator, subject) => {var _context;return subjectAdvancedDataType ?\n    isOperatorRelevant(operator, subject) &&\n    _includesInstanceProperty(_context = advancedDataTypesState.advancedDataTypeOperatorList).call(_context, operator) :\n    isOperatorRelevant(operator, subject);};\n  const onInputComparatorChange = (event) => {\n    const { value } = event.target;\n    setComparator(value);\n    onComparatorChange(value);\n  };\n  const renderSubjectOptionLabel = (option) => ___EmotionJSX(FilterDefinitionOption, { option: option });\n  const getOptionsRemaining = () => {var _ref4;\n    // if select is multi/value is array, we show the options not selected\n    const valuesFromSuggestionsLength = Array.isArray(comparator) ?\n    comparator.filter((v) => _includesInstanceProperty(suggestions).call(suggestions, v)).length :\n    0;\n    return (_ref4 = (suggestions == null ? void 0 : suggestions.length) - valuesFromSuggestionsLength) != null ? _ref4 : 0;\n  };\n  const createSuggestionsPlaceholder = () => {\n    const optionsRemaining = getOptionsRemaining();\n    const placeholder = t('%s option(s)', optionsRemaining);\n    return optionsRemaining ? placeholder : '';\n  };\n  const handleSubjectChange = (subject) => {\n    setComparator(undefined);\n    onSubjectChange(subject);\n  };\n  let columns = props.options;\n  const { subject, operator, operatorId } = props.adhocFilter;\n  const subjectSelectProps = {\n    ariaLabel: t('Select subject'),\n    value: subject != null ? subject : undefined,\n    onChange: handleSubjectChange,\n    notFoundContent: t('No such column found. To filter on a metric, try the Custom SQL tab.'),\n    autoFocus: !subject,\n    placeholder: '' };\n\n  subjectSelectProps.placeholder =\n  props.adhocFilter.clause === CLAUSES.WHERE ?\n  t('%s column(s)', columns.length) :\n  t('To filter on a metric, use Custom SQL tab.');\n  columns = props.options.filter((option) => 'column_name' in option && option.column_name);\n  const operatorSelectProps = {\n    placeholder: t('%s operator(s)', ((_props$operators = props.operators) != null ? _props$operators : OPERATORS_OPTIONS).filter((op) => isOperatorRelevantWrapper(op, subject)).length),\n    value: operatorId,\n    onChange: onOperatorChange,\n    autoFocus: !!subjectSelectProps.value && !operator,\n    ariaLabel: t('Select operator') };\n\n  const shouldFocusComparator = !!subjectSelectProps.value && !!operatorSelectProps.value;\n  const comparatorSelectProps = {\n    allowClear: true,\n    allowNewOptions: true,\n    ariaLabel: t('Comparator option'),\n    mode: MULTI_OPERATORS.has(operatorId) ?\n    'multiple' :\n    'single',\n    loading: loadingComparatorSuggestions,\n    value: comparator,\n    onChange: onComparatorChange,\n    notFoundContent: t('Type a value here'),\n    disabled: _includesInstanceProperty(DISABLE_INPUT_OPERATORS).call(DISABLE_INPUT_OPERATORS, operatorId),\n    placeholder: createSuggestionsPlaceholder(),\n    autoFocus: shouldFocusComparator };\n\n  const labelText = comparator && comparator.length > 0 && createSuggestionsPlaceholder();\n  const datePicker = useDatePickerInAdhocFilter({\n    columnName: props.adhocFilter.subject,\n    timeRange: props.adhocFilter.operator === Operators.TEMPORAL_RANGE ?\n    props.adhocFilter.comparator :\n    undefined,\n    datasource: props.datasource,\n    onChange: onDatePickerChange });\n\n  useEffect(() => {\n    const refreshComparatorSuggestions = () => {\n      const { datasource } = props;\n      const col = props.adhocFilter.subject;\n      const having = props.adhocFilter.clause === CLAUSES.HAVING;\n      if (col && datasource && datasource.filter_select && !having) {\n        const controller = new AbortController();\n        const { signal } = controller;\n        if (loadingComparatorSuggestions) {\n          controller.abort();\n        }\n        setLoadingComparatorSuggestions(true);\n        SupersetClient.get({\n          signal,\n          endpoint: `/api/v1/datasource/${datasource.type}/${datasource.id}/column/${col}/values/` }).\n\n        then((_ref5) => {let { json } = _ref5;\n          setSuggestions(json.result.map((suggestion) => ({\n            value: suggestion,\n            label: optionLabel(suggestion) })));\n\n          setLoadingComparatorSuggestions(false);\n        }).\n        catch(() => {\n          setSuggestions([]);\n          setLoadingComparatorSuggestions(false);\n        });\n      }\n    };\n    if (!datePicker) {\n      refreshComparatorSuggestions();\n    }\n  }, [props.adhocFilter.subject]);\n  useEffect(() => {\n    if (isFeatureEnabled(FeatureFlag.ENABLE_ADVANCED_DATA_TYPES)) {\n      fetchSubjectAdvancedDataType(props);\n    }\n  }, [props.adhocFilter.subject]);\n  useEffect(() => {\n    if (isFeatureEnabled(FeatureFlag.ENABLE_ADVANCED_DATA_TYPES)) {\n      fetchAdvancedDataTypeValueCallback(comparator === undefined ? '' : comparator, advancedDataTypesState, subjectAdvancedDataType);\n    }\n  }, [comparator, subjectAdvancedDataType, fetchAdvancedDataTypeValueCallback]);\n  useEffect(() => {\n    if (isFeatureEnabled(FeatureFlag.ENABLE_ADVANCED_DATA_TYPES)) {\n      setComparator(props.adhocFilter.comparator);\n    }\n  }, [props.adhocFilter.comparator]);\n  // another name for columns, just for following previous naming.\n  const subjectComponent = ___EmotionJSX(Select, _extends({ css: (theme) => ({\n      marginTop: theme.gridUnit * 4,\n      marginBottom: theme.gridUnit * 4 }),\n    options: columns.map((column) => ({\n      value: 'column_name' in column && column.column_name ||\n      'optionName' in column && column.optionName ||\n      '',\n      label: 'saved_metric_name' in column && column.saved_metric_name ||\n      'column_name' in column && column.column_name ||\n      'label' in column && column.label,\n      key: 'id' in column && column.id ||\n      'optionName' in column && column.optionName ||\n      undefined,\n      customLabel: renderSubjectOptionLabel(column) })) },\n  subjectSelectProps));\n  const operatorsAndOperandComponent = ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(Select, _extends({ css: (theme) => ({ marginBottom: theme.gridUnit * 4 }), options: ((_props$operators2 = props.operators) != null ? _props$operators2 : OPERATORS_OPTIONS).\n    filter((op) => isOperatorRelevantWrapper(op, subject)).\n    map((option, index) => ({\n      value: option,\n      label: OPERATOR_ENUM_TO_OPERATOR_TYPE[option].display,\n      key: option,\n      order: index })) },\n  operatorSelectProps)),\n  MULTI_OPERATORS.has(operatorId) || suggestions.length > 0 ? ___EmotionJSX(Tooltip, { title: advancedDataTypesState.errorMessage ||\n    advancedDataTypesState.parsedAdvancedDataType },\n  ___EmotionJSX(SelectWithLabel, _extends({ labelText: labelText, options: suggestions }, comparatorSelectProps))) :\n  ___EmotionJSX(Tooltip, { title: advancedDataTypesState.errorMessage ||\n    advancedDataTypesState.parsedAdvancedDataType },\n  ___EmotionJSX(StyledInput, { name: \"filter-value\", ref: (ref) => {\n      if (ref && shouldFocusComparator) {\n        ref.focus();\n      }\n    }, onChange: onInputComparatorChange, value: comparator, placeholder: t('Filter value (case sensitive)'), disabled: _includesInstanceProperty(DISABLE_INPUT_OPERATORS).call(DISABLE_INPUT_OPERATORS, operatorId) })));\n\n\n  return ___EmotionJSX(React.Fragment, null,\n  subjectComponent,\n  datePicker != null ? datePicker : operatorsAndOperandComponent);\n\n};\nexport default AdhocFilterEditPopoverSimpleTabContent;","map":{"version":3,"mappings":"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","names":["React","useEffect","useState","FormItem","Select","FeatureFlag","hasGenericChartAxes","isDefined","styled","SupersetClient","t","Operators","OPERATORS_OPTIONS","HAVING_OPERATORS","MULTI_OPERATORS","CUSTOM_OPERATORS","DISABLE_INPUT_OPERATORS","OPERATOR_ENUM_TO_OPERATOR_TYPE","FilterDefinitionOption","Tooltip","Input","optionLabel","isFeatureEnabled","isTemporalColumn","useAdvancedDataTypes","useDatePickerInAdhocFilter","useDefaultTimeFilter","CLAUSES","EXPRESSION_TYPES","StyledInput","theme","gridUnit","StyledFormItem","SelectWithLabel","labelText","colors","grayscale","light1","useSimpleTabFilterProps","props","defaultTimeFilter","isOperatorRelevant","operator","subject","column","datasource","columns","find","col","column_name","isColumnBoolean","type","isColumnNumber","isColumnFunction","expression","LATEST_PARTITION","partitionColumn","TEMPORAL_RANGE","IS_TRUE","IS_FALSE","IS_NULL","IS_NOT_NULL","adhocFilter","clause","HAVING","indexOf","onSubjectChange","id","option","options","optionName","WHERE","saved_metric_name","label","operatorId","comparator","operation","IN","undefined","onChange","duplicateWith","expressionType","SIMPLE","onOperatorChange","currentComparator","newComparator","has","Array","isArray","filter","element","SQL","onComparatorChange","clearOperator","onDatePickerChange","columnName","timeRange","AdhocFilterEditPopoverSimpleTabContent","suggestions","setSuggestions","setComparator","loadingComparatorSuggestions","setLoadingComparatorSuggestions","advancedDataTypesState","subjectAdvancedDataType","fetchAdvancedDataTypeValueCallback","fetchSubjectAdvancedDataType","validHandler","isOperatorRelevantWrapper","advancedDataTypeOperatorList","onInputComparatorChange","event","value","target","renderSubjectOptionLabel","getOptionsRemaining","valuesFromSuggestionsLength","v","length","createSuggestionsPlaceholder","optionsRemaining","placeholder","handleSubjectChange","subjectSelectProps","ariaLabel","notFoundContent","autoFocus","operatorSelectProps","operators","op","shouldFocusComparator","comparatorSelectProps","allowClear","allowNewOptions","mode","loading","disabled","datePicker","refreshComparatorSuggestions","having","filter_select","controller","AbortController","signal","abort","get","endpoint","then","json","result","map","suggestion","catch","ENABLE_ADVANCED_DATA_TYPES","subjectComponent","marginTop","marginBottom","key","customLabel","operatorsAndOperandComponent","index","display","order","errorMessage","parsedAdvancedDataType","ref","focus"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilterEditPopoverSimpleTabContent/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useState } from 'react';\nimport FormItem from 'src/components/Form/FormItem';\nimport { Select } from 'src/components';\nimport {\n  FeatureFlag,\n  hasGenericChartAxes,\n  isDefined,\n  styled,\n  SupersetClient,\n  SupersetTheme,\n  t,\n} from '@superset-ui/core';\nimport {\n  Operators,\n  OPERATORS_OPTIONS,\n  HAVING_OPERATORS,\n  MULTI_OPERATORS,\n  CUSTOM_OPERATORS,\n  DISABLE_INPUT_OPERATORS,\n  AGGREGATES,\n  OPERATOR_ENUM_TO_OPERATOR_TYPE,\n} from 'src/explore/constants';\nimport FilterDefinitionOption from 'src/explore/components/controls/MetricControl/FilterDefinitionOption';\nimport AdhocFilter from 'src/explore/components/controls/FilterControl/AdhocFilter';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { Input } from 'src/components/Input';\nimport { optionLabel } from 'src/utils/common';\nimport { isFeatureEnabled } from 'src/featureFlags';\nimport {\n  ColumnMeta,\n  Dataset,\n  isTemporalColumn,\n} from '@superset-ui/chart-controls';\nimport useAdvancedDataTypes from './useAdvancedDataTypes';\nimport { useDatePickerInAdhocFilter } from '../utils';\nimport { useDefaultTimeFilter } from '../../DateFilterControl/utils';\nimport { CLAUSES, EXPRESSION_TYPES } from '../types';\n\nconst StyledInput = styled(Input)`\n  margin-bottom: ${({ theme }) => theme.gridUnit * 4}px;\n`;\n\nexport const StyledFormItem = styled(FormItem)`\n  &.ant-row.ant-form-item {\n    margin: 0;\n  }\n`;\n\nconst SelectWithLabel = styled(Select)<{ labelText: string }>`\n  .ant-select-selector::after {\n    content: ${({ labelText }) => labelText || '\\\\A0'};\n    display: inline-block;\n    white-space: nowrap;\n    color: ${({ theme }) => theme.colors.grayscale.light1};\n    width: max-content;\n  }\n`;\n\nexport interface SimpleExpressionType {\n  expressionType: keyof typeof EXPRESSION_TYPES;\n  column: ColumnMeta;\n  aggregate: keyof typeof AGGREGATES;\n  label: string;\n}\nexport interface SQLExpressionType {\n  expressionType: keyof typeof EXPRESSION_TYPES;\n  sqlExpression: string;\n  label: string;\n}\n\nexport interface MetricColumnType {\n  saved_metric_name: string;\n}\n\nexport type ColumnType =\n  | ColumnMeta\n  | SimpleExpressionType\n  | SQLExpressionType\n  | MetricColumnType;\n\nexport interface Props {\n  adhocFilter: AdhocFilter;\n  onChange: (filter: AdhocFilter) => void;\n  options: ColumnType[];\n  datasource: Dataset;\n  partitionColumn: string;\n  operators?: Operators[];\n  validHandler: (isValid: boolean) => void;\n}\n\nexport interface AdvancedDataTypesState {\n  parsedAdvancedDataType: string;\n  advancedDataTypeOperatorList: string[];\n  errorMessage: string;\n}\n\nexport const useSimpleTabFilterProps = (props: Props) => {\n  const defaultTimeFilter = useDefaultTimeFilter();\n\n  const isOperatorRelevant = (operator: Operators, subject: string) => {\n    const column = props.datasource.columns?.find(\n      col => col.column_name === subject,\n    );\n    const isColumnBoolean =\n      !!column && (column.type === 'BOOL' || column.type === 'BOOLEAN');\n    const isColumnNumber =\n      !!column && (column.type === 'INT' || column.type === 'INTEGER');\n    const isColumnFunction = !!column && !!column.expression;\n\n    if (operator && operator === Operators.LATEST_PARTITION) {\n      const { partitionColumn } = props;\n      return partitionColumn && subject && subject === partitionColumn;\n    }\n    if (operator && operator === Operators.TEMPORAL_RANGE) {\n      // hide the TEMPORAL_RANGE operator\n      return false;\n    }\n    if (operator === Operators.IS_TRUE || operator === Operators.IS_FALSE) {\n      return isColumnBoolean || isColumnNumber || isColumnFunction;\n    }\n    if (isColumnBoolean) {\n      return (\n        operator === Operators.IS_NULL || operator === Operators.IS_NOT_NULL\n      );\n    }\n    return (\n      props.adhocFilter.clause !== CLAUSES.HAVING ||\n      HAVING_OPERATORS.indexOf(operator) !== -1\n    );\n  };\n  const onSubjectChange = (id: string) => {\n    const option = props.options.find(\n      option =>\n        ('column_name' in option && option.column_name === id) ||\n        ('optionName' in option && option.optionName === id),\n    );\n    let subject = '';\n    let clause;\n    // infer the new clause based on what subject was selected.\n    if (option && 'column_name' in option) {\n      subject = option.column_name;\n      clause = CLAUSES.WHERE;\n    } else if (option && 'saved_metric_name' in option) {\n      subject = option.saved_metric_name;\n      clause = CLAUSES.HAVING;\n    } else if (option?.label) {\n      subject = option.label;\n      clause = CLAUSES.HAVING;\n    }\n    let { operator, operatorId, comparator } = props.adhocFilter;\n    operator =\n      operator && operatorId && isOperatorRelevant(operatorId, subject)\n        ? OPERATOR_ENUM_TO_OPERATOR_TYPE[operatorId].operation\n        : null;\n    if (!isDefined(operator)) {\n      // if operator is `null`, use the `IN` and reset the comparator.\n      operator = Operators.IN;\n      operatorId = Operators.IN;\n      comparator = undefined;\n    }\n\n    if (hasGenericChartAxes && isTemporalColumn(id, props.datasource)) {\n      subject = id;\n      operator = Operators.TEMPORAL_RANGE;\n      operatorId = Operators.TEMPORAL_RANGE;\n      comparator = defaultTimeFilter;\n    }\n\n    props.onChange(\n      props.adhocFilter.duplicateWith({\n        subject,\n        clause,\n        operator,\n        expressionType: EXPRESSION_TYPES.SIMPLE,\n        operatorId,\n        comparator,\n      }),\n    );\n  };\n  const onOperatorChange = (operatorId: Operators) => {\n    const currentComparator = props.adhocFilter.comparator;\n    let newComparator;\n    // convert between list of comparators and individual comparators\n    // (e.g. `in ('North America', 'Africa')` to `== 'North America'`)\n    if (MULTI_OPERATORS.has(operatorId)) {\n      newComparator = Array.isArray(currentComparator)\n        ? currentComparator\n        : [currentComparator].filter(element => element);\n    } else {\n      newComparator = Array.isArray(currentComparator)\n        ? currentComparator[0]\n        : currentComparator;\n    }\n    if (operatorId === Operators.IS_TRUE || operatorId === Operators.IS_FALSE) {\n      newComparator = Operators.IS_TRUE === operatorId;\n    }\n    if (operatorId && CUSTOM_OPERATORS.has(operatorId)) {\n      props.onChange(\n        props.adhocFilter.duplicateWith({\n          subject: props.adhocFilter.subject,\n          clause: CLAUSES.WHERE,\n          operatorId,\n          operator: OPERATOR_ENUM_TO_OPERATOR_TYPE[operatorId].operation,\n          expressionType: EXPRESSION_TYPES.SQL,\n          datasource: props.datasource,\n        }),\n      );\n    } else {\n      props.onChange(\n        props.adhocFilter.duplicateWith({\n          operatorId,\n          operator: OPERATOR_ENUM_TO_OPERATOR_TYPE[operatorId].operation,\n          comparator: newComparator,\n          expressionType: EXPRESSION_TYPES.SIMPLE,\n        }),\n      );\n    }\n  };\n  const onComparatorChange = (comparator: string) => {\n    props.onChange(\n      props.adhocFilter.duplicateWith({\n        comparator,\n        expressionType: EXPRESSION_TYPES.SIMPLE,\n      }),\n    );\n  };\n  const clearOperator = (): void => {\n    props.onChange(\n      props.adhocFilter.duplicateWith({\n        operatorId: undefined,\n        operator: undefined,\n      }),\n    );\n  };\n  const onDatePickerChange = (columnName: string, timeRange: string) => {\n    props.onChange(\n      props.adhocFilter.duplicateWith({\n        subject: columnName,\n        operator: Operators.TEMPORAL_RANGE,\n        comparator: timeRange,\n        expressionType: EXPRESSION_TYPES.SIMPLE,\n      }),\n    );\n  };\n  return {\n    onSubjectChange,\n    onOperatorChange,\n    onComparatorChange,\n    isOperatorRelevant,\n    clearOperator,\n    onDatePickerChange,\n  };\n};\n\nconst AdhocFilterEditPopoverSimpleTabContent: React.FC<Props> = props => {\n  const {\n    onSubjectChange,\n    onOperatorChange,\n    isOperatorRelevant,\n    onComparatorChange,\n    onDatePickerChange,\n  } = useSimpleTabFilterProps(props);\n  const [suggestions, setSuggestions] = useState<\n    Record<'label' | 'value', any>[]\n  >([]);\n  const [comparator, setComparator] = useState(props.adhocFilter.comparator);\n  const [loadingComparatorSuggestions, setLoadingComparatorSuggestions] =\n    useState(false);\n\n  const {\n    advancedDataTypesState,\n    subjectAdvancedDataType,\n    fetchAdvancedDataTypeValueCallback,\n    fetchSubjectAdvancedDataType,\n  } = useAdvancedDataTypes(props.validHandler);\n  // TODO: This does not need to exist, just use the advancedTypeOperatorList list\n  const isOperatorRelevantWrapper = (operator: Operators, subject: string) =>\n    subjectAdvancedDataType\n      ? isOperatorRelevant(operator, subject) &&\n        advancedDataTypesState.advancedDataTypeOperatorList.includes(operator)\n      : isOperatorRelevant(operator, subject);\n  const onInputComparatorChange = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    const { value } = event.target;\n    setComparator(value);\n    onComparatorChange(value);\n  };\n\n  const renderSubjectOptionLabel = (option: ColumnType) => (\n    <FilterDefinitionOption option={option} />\n  );\n\n  const getOptionsRemaining = () => {\n    // if select is multi/value is array, we show the options not selected\n    const valuesFromSuggestionsLength = Array.isArray(comparator)\n      ? comparator.filter(v => suggestions.includes(v)).length\n      : 0;\n    return suggestions?.length - valuesFromSuggestionsLength ?? 0;\n  };\n  const createSuggestionsPlaceholder = () => {\n    const optionsRemaining = getOptionsRemaining();\n    const placeholder = t('%s option(s)', optionsRemaining);\n    return optionsRemaining ? placeholder : '';\n  };\n\n  const handleSubjectChange = (subject: string) => {\n    setComparator(undefined);\n    onSubjectChange(subject);\n  };\n\n  let columns = props.options;\n  const { subject, operator, operatorId } = props.adhocFilter;\n\n  const subjectSelectProps = {\n    ariaLabel: t('Select subject'),\n    value: subject ?? undefined,\n    onChange: handleSubjectChange,\n    notFoundContent: t(\n      'No such column found. To filter on a metric, try the Custom SQL tab.',\n    ),\n    autoFocus: !subject,\n    placeholder: '',\n  };\n\n  subjectSelectProps.placeholder =\n    props.adhocFilter.clause === CLAUSES.WHERE\n      ? t('%s column(s)', columns.length)\n      : t('To filter on a metric, use Custom SQL tab.');\n  columns = props.options.filter(\n    option => 'column_name' in option && option.column_name,\n  );\n\n  const operatorSelectProps = {\n    placeholder: t(\n      '%s operator(s)',\n      (props.operators ?? OPERATORS_OPTIONS).filter(op =>\n        isOperatorRelevantWrapper(op, subject),\n      ).length,\n    ),\n    value: operatorId,\n    onChange: onOperatorChange,\n    autoFocus: !!subjectSelectProps.value && !operator,\n    ariaLabel: t('Select operator'),\n  };\n\n  const shouldFocusComparator =\n    !!subjectSelectProps.value && !!operatorSelectProps.value;\n\n  const comparatorSelectProps = {\n    allowClear: true,\n    allowNewOptions: true,\n    ariaLabel: t('Comparator option'),\n    mode: MULTI_OPERATORS.has(operatorId)\n      ? ('multiple' as const)\n      : ('single' as const),\n    loading: loadingComparatorSuggestions,\n    value: comparator,\n    onChange: onComparatorChange,\n    notFoundContent: t('Type a value here'),\n    disabled: DISABLE_INPUT_OPERATORS.includes(operatorId),\n    placeholder: createSuggestionsPlaceholder(),\n    autoFocus: shouldFocusComparator,\n  };\n\n  const labelText =\n    comparator && comparator.length > 0 && createSuggestionsPlaceholder();\n\n  const datePicker = useDatePickerInAdhocFilter({\n    columnName: props.adhocFilter.subject,\n    timeRange:\n      props.adhocFilter.operator === Operators.TEMPORAL_RANGE\n        ? props.adhocFilter.comparator\n        : undefined,\n    datasource: props.datasource,\n    onChange: onDatePickerChange,\n  });\n\n  useEffect(() => {\n    const refreshComparatorSuggestions = () => {\n      const { datasource } = props;\n      const col = props.adhocFilter.subject;\n      const having = props.adhocFilter.clause === CLAUSES.HAVING;\n\n      if (col && datasource && datasource.filter_select && !having) {\n        const controller = new AbortController();\n        const { signal } = controller;\n        if (loadingComparatorSuggestions) {\n          controller.abort();\n        }\n        setLoadingComparatorSuggestions(true);\n        SupersetClient.get({\n          signal,\n          endpoint: `/api/v1/datasource/${datasource.type}/${datasource.id}/column/${col}/values/`,\n        })\n          .then(({ json }) => {\n            setSuggestions(\n              json.result.map(\n                (suggestion: null | number | boolean | string) => ({\n                  value: suggestion,\n                  label: optionLabel(suggestion),\n                }),\n              ),\n            );\n            setLoadingComparatorSuggestions(false);\n          })\n          .catch(() => {\n            setSuggestions([]);\n            setLoadingComparatorSuggestions(false);\n          });\n      }\n    };\n    if (!datePicker) {\n      refreshComparatorSuggestions();\n    }\n  }, [props.adhocFilter.subject]);\n\n  useEffect(() => {\n    if (isFeatureEnabled(FeatureFlag.ENABLE_ADVANCED_DATA_TYPES)) {\n      fetchSubjectAdvancedDataType(props);\n    }\n  }, [props.adhocFilter.subject]);\n\n  useEffect(() => {\n    if (isFeatureEnabled(FeatureFlag.ENABLE_ADVANCED_DATA_TYPES)) {\n      fetchAdvancedDataTypeValueCallback(\n        comparator === undefined ? '' : comparator,\n        advancedDataTypesState,\n        subjectAdvancedDataType,\n      );\n    }\n  }, [comparator, subjectAdvancedDataType, fetchAdvancedDataTypeValueCallback]);\n\n  useEffect(() => {\n    if (isFeatureEnabled(FeatureFlag.ENABLE_ADVANCED_DATA_TYPES)) {\n      setComparator(props.adhocFilter.comparator);\n    }\n  }, [props.adhocFilter.comparator]);\n\n  // another name for columns, just for following previous naming.\n  const subjectComponent = (\n    <Select\n      css={(theme: SupersetTheme) => ({\n        marginTop: theme.gridUnit * 4,\n        marginBottom: theme.gridUnit * 4,\n      })}\n      data-test=\"select-element\"\n      options={columns.map(column => ({\n        value:\n          ('column_name' in column && column.column_name) ||\n          ('optionName' in column && column.optionName) ||\n          '',\n        label:\n          ('saved_metric_name' in column && column.saved_metric_name) ||\n          ('column_name' in column && column.column_name) ||\n          ('label' in column && column.label),\n        key:\n          ('id' in column && column.id) ||\n          ('optionName' in column && column.optionName) ||\n          undefined,\n        customLabel: renderSubjectOptionLabel(column),\n      }))}\n      {...subjectSelectProps}\n    />\n  );\n\n  const operatorsAndOperandComponent = (\n    <>\n      <Select\n        css={(theme: SupersetTheme) => ({ marginBottom: theme.gridUnit * 4 })}\n        options={(props.operators ?? OPERATORS_OPTIONS)\n          .filter(op => isOperatorRelevantWrapper(op, subject))\n          .map((option, index) => ({\n            value: option,\n            label: OPERATOR_ENUM_TO_OPERATOR_TYPE[option].display,\n            key: option,\n            order: index,\n          }))}\n        {...operatorSelectProps}\n      />\n      {MULTI_OPERATORS.has(operatorId) || suggestions.length > 0 ? (\n        <Tooltip\n          title={\n            advancedDataTypesState.errorMessage ||\n            advancedDataTypesState.parsedAdvancedDataType\n          }\n        >\n          <SelectWithLabel\n            labelText={labelText}\n            options={suggestions}\n            {...comparatorSelectProps}\n          />\n        </Tooltip>\n      ) : (\n        <Tooltip\n          title={\n            advancedDataTypesState.errorMessage ||\n            advancedDataTypesState.parsedAdvancedDataType\n          }\n        >\n          <StyledInput\n            data-test=\"adhoc-filter-simple-value\"\n            name=\"filter-value\"\n            ref={ref => {\n              if (ref && shouldFocusComparator) {\n                ref.focus();\n              }\n            }}\n            onChange={onInputComparatorChange}\n            value={comparator}\n            placeholder={t('Filter value (case sensitive)')}\n            disabled={DISABLE_INPUT_OPERATORS.includes(operatorId)}\n          />\n        </Tooltip>\n      )}\n    </>\n  );\n  return (\n    <>\n      {subjectComponent}\n      {datePicker ?? operatorsAndOperandComponent}\n    </>\n  );\n};\n\nexport default AdhocFilterEditPopoverSimpleTabContent;\n"]},"metadata":{},"sourceType":"module"}