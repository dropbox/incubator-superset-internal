{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback } from 'react';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst NUM_COLUMNS = 12;\nexport default function ControlRow(_ref) {let { controls } = _ref;\n  const isHiddenControl = useCallback((control) => (control == null ? void 0 : control.props.type) === 'HiddenControl' ||\n  (control == null ? void 0 : control.props.isVisible) === false, []);\n  // Invisible control should not be counted\n  // in the columns number\n  const countableControls = controls.filter((control) => !isHiddenControl(control));\n  const colSize = countableControls.length ?\n  NUM_COLUMNS / countableControls.length :\n  NUM_COLUMNS;\n  return ___EmotionJSX(\"div\", { className: \"row\" },\n  controls.map((control, i) => ___EmotionJSX(\"div\", { className: `col-lg-${colSize} col-xs-12`, style: {\n      display: isHiddenControl(control) ? 'none' : 'block' },\n    key: i },\n  control)));\n\n\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC,C;AAEA,MAAMC,WAAW,GAAG,EAApB;AAIA,eAAc,SAAUC,UAAV,OAA0D,KAArC,EAAEC,QAAF,EAAqC;EACtE,MAAMC,eAAe,GAAGJ,WAAW,CACjC,CAACK,OAAD,KACE,QAAO,QAAP,mBAAO,CAAEC,KAAT,CAAeC,IAAf,MAAwB,eAAxB;EACA,QAAO,QAAP,mBAAO,CAAED,KAAT,CAAeE,SAAf,MAA6B,KAHE,EAIjC,EAJiC,CAAnC;EAMA;EACA;EACA,MAAMC,iBAAiB,GAAGN,QAAQ,CAACO,MAAT,CACxB,QAAO,KAAI,CAACN,eAAe,CAACC,OAAD,CADH,CAA1B;EAGA,MAAMM,OAAO,GAAGF,iBAAiB,CAACG,MAAlB;EACZX,WAAW,GAAGQ,iBAAiB,CAACG,MADpB;EAEZX,WAFJ;EAGA,OACE,uBAAK,SAAS,EAAC,KAAf;EACGE,QAAQ,CAACU,GAAT,CAAa,CAACR,OAAD,EAAUS,CAAV,KACZ,uBACE,SAAS,EAAE,UAAUH,OAAO,YAD9B,EAEE,KAAK,EAAE;MACLI,OAAO,EAAEX,eAAe,CAACC,OAAD,CAAf,GAA2B,MAA3B,GAAoC,OADxC,EAFT;IAKE,GAAG,EAAES,CALP;EAOGT,OAPH,CADD,CADH,CADF;;;AAeD","names":["React","useCallback","NUM_COLUMNS","ControlRow","controls","isHiddenControl","control","props","type","isVisible","countableControls","filter","colSize","length","map","i","display"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/explore/components/ControlRow.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback } from 'react';\n\nconst NUM_COLUMNS = 12;\n\ntype Control = React.ReactElement | null;\n\nexport default function ControlRow({ controls }: { controls: Control[] }) {\n  const isHiddenControl = useCallback(\n    (control: Control) =>\n      control?.props.type === 'HiddenControl' ||\n      control?.props.isVisible === false,\n    [],\n  );\n  // Invisible control should not be counted\n  // in the columns number\n  const countableControls = controls.filter(\n    control => !isHiddenControl(control),\n  );\n  const colSize = countableControls.length\n    ? NUM_COLUMNS / countableControls.length\n    : NUM_COLUMNS;\n  return (\n    <div className=\"row\">\n      {controls.map((control, i) => (\n        <div\n          className={`col-lg-${colSize} col-xs-12`}\n          style={{\n            display: isHiddenControl(control) ? 'none' : 'block',\n          }}\n          key={i}\n        >\n          {control}\n        </div>\n      ))}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}