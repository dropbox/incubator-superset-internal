{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport rison from 'rison';\nimport React from 'react';\nimport { t } from '@superset-ui/core';\nimport TableLoader from 'src/components/TableLoader';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nclass CreatedContent extends React.PureComponent {\n  renderSliceTable() {\n    const search = [\n    { col: 'created_by', opr: 'chart_created_by_me', value: 'me' }];\n\n    const query = rison.encode({\n      keys: ['none'],\n      columns: ['created_on_delta_humanized', 'slice_name', 'url'],\n      filters: search,\n      order_column: 'changed_on_delta_humanized',\n      order_direction: 'desc',\n      page: 0,\n      page_size: 100 });\n\n    const mutator = (data) => data.result.map((chart) => ({\n      chart: ___EmotionJSX(\"a\", { href: chart.url }, chart.slice_name),\n      created: chart.created_on_delta_humanized,\n      _created: chart.created_on_delta_humanized }));\n\n    return ___EmotionJSX(TableLoader, { dataEndpoint: `/api/v1/chart/?q=${query}`, className: \"table-condensed\", columns: ['chart', 'created'], mutator: mutator, noDataText: t('No charts'), sortable: true });\n  }\n  renderDashboardTable() {\n    const search = [\n    { col: 'created_by', opr: 'dashboard_created_by_me', value: 'me' }];\n\n    const query = rison.encode({\n      keys: ['none'],\n      columns: ['created_on_delta_humanized', 'dashboard_title', 'url'],\n      filters: search,\n      order_column: 'changed_on',\n      order_direction: 'desc',\n      page: 0,\n      page_size: 100 });\n\n    const mutator = (data) => data.result.map((dash) => ({\n      dashboard: ___EmotionJSX(\"a\", { href: dash.url }, dash.dashboard_title),\n      created: dash.created_on_delta_humanized,\n      _created: dash.created_on_delta_humanized }));\n\n    return ___EmotionJSX(TableLoader, { className: \"table-condensed\", mutator: mutator, dataEndpoint: `/api/v1/dashboard/?q=${query}`, noDataText: t('No dashboards'), columns: ['dashboard', 'created'], sortable: true });\n  }\n  render() {\n    return ___EmotionJSX(\"div\", null,\n    ___EmotionJSX(\"h3\", null, t('Dashboards')),\n    this.renderDashboardTable(),\n    ___EmotionJSX(\"hr\", null),\n    ___EmotionJSX(\"h3\", null, t('Charts')),\n    this.renderSliceTable());\n\n  }}\n\nexport default CreatedContent;","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,CAAT,QAAkB,mBAAlB;AAEA,OAAOC,WAAP,MAAwB,4BAAxB,C;AAWA,MAAMC,cAAN,SAA6BH,KAAK,CAACI,aAAnC,CAAqE;EACnEC,gBAAgB;IACd,MAAMC,MAAM,GAAG;IACb,EAAEC,GAAG,EAAE,YAAP,EAAqBC,GAAG,EAAE,qBAA1B,EAAiDC,KAAK,EAAE,IAAxD,EADa,CAAf;;IAGA,MAAMC,KAAK,GAAGX,KAAK,CAACY,MAAN,CAAa;MACzBC,IAAI,EAAE,CAAC,MAAD,CADmB;MAEzBC,OAAO,EAAE,CAAC,4BAAD,EAA+B,YAA/B,EAA6C,KAA7C,CAFgB;MAGzBC,OAAO,EAAER,MAHgB;MAIzBS,YAAY,EAAE,4BAJW;MAKzBC,eAAe,EAAE,MALQ;MAMzBC,IAAI,EAAE,CANmB;MAOzBC,SAAS,EAAE,GAPc,EAAb,CAAd;;IAUA,MAAMC,OAAO,GAAG,CAACC,IAAD,KACdA,IAAI,CAACC,MAAL,CAAYC,GAAZ,CAAgB,MAAK,MAAK;MACxBC,KAAK,EAAE,qBAAG,IAAI,EAAEA,KAAK,CAACC,GAAf,IAAqBD,KAAK,CAACE,UAA3B,CADiB;MAExBC,OAAO,EAAEH,KAAK,CAACI,0BAFS;MAGxBC,QAAQ,EAAEL,KAAK,CAACI,0BAHQ,EAAL,CAArB,CADF;;IAMA,OACE,cAAC,WAAD,IACE,YAAY,EAAE,oBAAoBjB,KAAK,EADzC,EAEE,SAAS,EAAC,iBAFZ,EAGE,OAAO,EAAE,CAAC,OAAD,EAAU,SAAV,CAHX,EAIE,OAAO,EAAES,OAJX,EAKE,UAAU,EAAElB,CAAC,CAAC,WAAD,CALf,EAME,QAAQ,MANV,GADF;EAUD;EAED4B,oBAAoB;IAClB,MAAMvB,MAAM,GAAG;IACb,EAAEC,GAAG,EAAE,YAAP,EAAqBC,GAAG,EAAE,yBAA1B,EAAqDC,KAAK,EAAE,IAA5D,EADa,CAAf;;IAGA,MAAMC,KAAK,GAAGX,KAAK,CAACY,MAAN,CAAa;MACzBC,IAAI,EAAE,CAAC,MAAD,CADmB;MAEzBC,OAAO,EAAE,CAAC,4BAAD,EAA+B,iBAA/B,EAAkD,KAAlD,CAFgB;MAGzBC,OAAO,EAAER,MAHgB;MAIzBS,YAAY,EAAE,YAJW;MAKzBC,eAAe,EAAE,MALQ;MAMzBC,IAAI,EAAE,CANmB;MAOzBC,SAAS,EAAE,GAPc,EAAb,CAAd;;IASA,MAAMC,OAAO,GAAG,CAACC,IAAD,KACdA,IAAI,CAACC,MAAL,CAAYC,GAAZ,CAAgB,KAAI,MAAK;MACvBQ,SAAS,EAAE,qBAAG,IAAI,EAAEC,IAAI,CAACP,GAAd,IAAoBO,IAAI,CAACC,eAAzB,CADY;MAEvBN,OAAO,EAAEK,IAAI,CAACJ,0BAFS;MAGvBC,QAAQ,EAAEG,IAAI,CAACJ,0BAHQ,EAAL,CAApB,CADF;;IAMA,OACE,cAAC,WAAD,IACE,SAAS,EAAC,iBADZ,EAEE,OAAO,EAAER,OAFX,EAGE,YAAY,EAAE,wBAAwBT,KAAK,EAH7C,EAIE,UAAU,EAAET,CAAC,CAAC,eAAD,CAJf,EAKE,OAAO,EAAE,CAAC,WAAD,EAAc,SAAd,CALX,EAME,QAAQ,MANV,GADF;EAUD;EAEDgC,MAAM;IACJ,OACE;IACE,0BAAKhC,CAAC,CAAC,YAAD,CAAN,CADF;IAEG,KAAK4B,oBAAL,EAFH;IAGE,yBAHF;IAIE,0BAAK5B,CAAC,CAAC,QAAD,CAAN,CAJF;IAKG,KAAKI,gBAAL,EALH,CADF;;EASD,CA1EkE;;AA6ErE,eAAeF,cAAf","names":["rison","React","t","TableLoader","CreatedContent","PureComponent","renderSliceTable","search","col","opr","value","query","encode","keys","columns","filters","order_column","order_direction","page","page_size","mutator","data","result","map","chart","url","slice_name","created","created_on_delta_humanized","_created","renderDashboardTable","dashboard","dash","dashboard_title","render"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/profile/components/CreatedContent.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport rison from 'rison';\nimport React from 'react';\nimport { t } from '@superset-ui/core';\n\nimport TableLoader from 'src/components/TableLoader';\nimport {\n  BootstrapUser,\n  ChartResponse,\n  DashboardResponse,\n} from 'src/types/bootstrapTypes';\n\ninterface CreatedContentProps {\n  user: BootstrapUser;\n}\n\nclass CreatedContent extends React.PureComponent<CreatedContentProps> {\n  renderSliceTable() {\n    const search = [\n      { col: 'created_by', opr: 'chart_created_by_me', value: 'me' },\n    ];\n    const query = rison.encode({\n      keys: ['none'],\n      columns: ['created_on_delta_humanized', 'slice_name', 'url'],\n      filters: search,\n      order_column: 'changed_on_delta_humanized',\n      order_direction: 'desc',\n      page: 0,\n      page_size: 100,\n    });\n\n    const mutator = (data: ChartResponse) =>\n      data.result.map(chart => ({\n        chart: <a href={chart.url}>{chart.slice_name}</a>,\n        created: chart.created_on_delta_humanized,\n        _created: chart.created_on_delta_humanized,\n      }));\n    return (\n      <TableLoader\n        dataEndpoint={`/api/v1/chart/?q=${query}`}\n        className=\"table-condensed\"\n        columns={['chart', 'created']}\n        mutator={mutator}\n        noDataText={t('No charts')}\n        sortable\n      />\n    );\n  }\n\n  renderDashboardTable() {\n    const search = [\n      { col: 'created_by', opr: 'dashboard_created_by_me', value: 'me' },\n    ];\n    const query = rison.encode({\n      keys: ['none'],\n      columns: ['created_on_delta_humanized', 'dashboard_title', 'url'],\n      filters: search,\n      order_column: 'changed_on',\n      order_direction: 'desc',\n      page: 0,\n      page_size: 100,\n    });\n    const mutator = (data: DashboardResponse) =>\n      data.result.map(dash => ({\n        dashboard: <a href={dash.url}>{dash.dashboard_title}</a>,\n        created: dash.created_on_delta_humanized,\n        _created: dash.created_on_delta_humanized,\n      }));\n    return (\n      <TableLoader\n        className=\"table-condensed\"\n        mutator={mutator}\n        dataEndpoint={`/api/v1/dashboard/?q=${query}`}\n        noDataText={t('No dashboards')}\n        columns={['dashboard', 'created']}\n        sortable\n      />\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>{t('Dashboards')}</h3>\n        {this.renderDashboardTable()}\n        <hr />\n        <h3>{t('Charts')}</h3>\n        {this.renderSliceTable()}\n      </div>\n    );\n  }\n}\n\nexport default CreatedContent;\n"]},"metadata":{},"sourceType":"module"}