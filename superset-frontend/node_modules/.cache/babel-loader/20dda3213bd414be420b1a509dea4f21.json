{"ast":null,"code":"import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useSelector } from 'react-redux';\nimport COMMON_ERR_MESSAGES from 'src/utils/errorMessages';\nimport { VALIDATION_DEBOUNCE_MS } from 'src/SqlLab/constants';\nimport { useQueryValidationsQuery } from 'src/hooks/apiResources';\nimport { useDebounceValue } from 'src/hooks/useDebounceValue';\nimport { t } from '@superset-ui/core';\nexport function useAnnotations(params) {\n  const { sql, dbId, schema, templateParams } = params;\n  const debouncedSql = useDebounceValue(sql, VALIDATION_DEBOUNCE_MS);\n  const hasValidator = useSelector((_ref) => {var _common$conf, _common$conf$SQL_VALI, _sqlLab$databases, _sqlLab$databases2;let { sqlLab, common } = _ref;return (\n      // Check whether or not we can validate the current query based on whether\n      // or not the backend has a validator configured for it.\n      Boolean(common == null ? void 0 : (_common$conf = common.conf) == null ? void 0 : (_common$conf$SQL_VALI = _common$conf.SQL_VALIDATORS_BY_ENGINE) == null ? void 0 : _common$conf$SQL_VALI[sqlLab == null ? void 0 : (_sqlLab$databases = sqlLab.databases) == null ? void 0 : (_sqlLab$databases2 = _sqlLab$databases[dbId || '']) == null ? void 0 : _sqlLab$databases2.backend]));});\n  return useQueryValidationsQuery({\n    dbId,\n    schema,\n    sql: debouncedSql,\n    templateParams },\n  {\n    skip: !(hasValidator && dbId && sql),\n    selectFromResult: (_ref2) => {let { isLoading, isError, error, data } = _ref2;\n      const errorObj = error != null ? error : {};\n      let message = (errorObj == null ? void 0 : errorObj.error) || (errorObj == null ? void 0 : errorObj.statusText) || t('Unknown error');\n      if (_includesInstanceProperty(message).call(message, 'CSRF token')) {\n        message = t(COMMON_ERR_MESSAGES.SESSION_TIMED_OUT);\n      }\n      return {\n        data: !isLoading && data != null && data.length ?\n        data.map((err) => ({\n          type: 'error',\n          row: (err.line_number || 0) - 1,\n          column: (err.start_column || 0) - 1,\n          text: err.message })) :\n\n        isError ?\n        [\n        {\n          type: 'error',\n          row: 0,\n          column: 0,\n          text: `The server failed to validate your query.\\n${message}` }] :\n\n\n        [] };\n\n    } });\n\n}","map":{"version":3,"mappings":"iGAAA;;;;;;;;;;;;;;;;;;AAkBA,SAASA,WAAT,QAA4B,aAA5B;AAGA,OAAOC,mBAAP,MAAgC,yBAAhC;AACA,SAASC,sBAAT,QAAuC,sBAAvC;AACA,SAEEC,wBAFF,QAGO,wBAHP;AAIA,SAASC,gBAAT,QAAiC,4BAAjC;AAEA,SAASC,CAAT,QAAkB,mBAAlB;AAEA,OAAM,SAAUC,cAAV,CAAyBC,MAAzB,EAA2D;EAC/D,MAAM,EAAEC,GAAF,EAAOC,IAAP,EAAaC,MAAb,EAAqBC,cAArB,KAAwCJ,MAA9C;EACA,MAAMK,YAAY,GAAGR,gBAAgB,CAACI,GAAD,EAAMN,sBAAN,CAArC;EACA,MAAMW,YAAY,GAAGb,WAAW,CAAkB,8FAAC,EAAEc,MAAF,EAAUC,MAAV,EAAD;MAChD;MACA;MACAC,OAAO,CACLD,MADK,oCACLA,MAAM,CAAEE,IADH,8CACL,aAAcC,wBADT,qBACL,sBACEJ,MADF,yCACEA,MAAM,CAAEK,SADV,2CACE,kBAAoBV,IAAI,IAAI,EAA5B,CADF,qBACE,mBAAiCW,OADnC,CADK,CAHyC,GAAlB,CAAhC;EASA,OAAOjB,wBAAwB,CAC7B;IACEM,IADF;IAEEC,MAFF;IAGEF,GAAG,EAAEI,YAHP;IAIED,cAJF,EAD6B;EAO7B;IACEU,IAAI,EAAE,EAAER,YAAY,IAAIJ,IAAhB,IAAwBD,GAA1B,CADR;IAEEc,gBAAgB,EAAE,WAAwC,KAAvC,EAAEC,SAAF,EAAaC,OAAb,EAAsBC,KAAtB,EAA6BC,IAA7B,EAAuC;MACxD,MAAMC,QAAQ,GAAIF,KAAJ,WAAIA,KAAJ,GAAa,EAA3B;MACA,IAAIG,OAAO,GACT,SAAQ,QAAR,oBAAQ,CAAEH,KAAV,MAAmBE,QAAnB,oBAAmBA,QAAQ,CAAEE,UAA7B,KAA2CxB,CAAC,CAAC,eAAD,CAD9C;MAEA,IAAI,iCAAO,MAAP,QAAO,EAAU,YAAV,CAAX,EAAoC;QAClCuB,OAAO,GAAGvB,CAAC,CAACJ,mBAAmB,CAAC6B,iBAArB,CAAX;MACD;MACD,OAAO;QACLJ,IAAI,EACF,CAACH,SAAD,IAAcG,IAAd,YAAcA,IAAI,CAAEK,MAApB;QACIL,IAAI,CAACM,GAAL,CAAS,IAAG,MAAK;UACfC,IAAI,EAAE,OADS;UAEfC,GAAG,EAAE,CAACC,GAAG,CAACC,WAAJ,IAAmB,CAApB,IAAyB,CAFf;UAGfC,MAAM,EAAE,CAACF,GAAG,CAACG,YAAJ,IAAoB,CAArB,IAA0B,CAHnB;UAIfC,IAAI,EAAEJ,GAAG,CAACP,OAJK,EAAL,CAAZ,CADJ;;QAOIJ,OAAO;QACP;QACE;UACES,IAAI,EAAE,OADR;UAEEC,GAAG,EAAE,CAFP;UAGEG,MAAM,EAAE,CAHV;UAIEE,IAAI,EAAE,8CAA8CX,OAAO,EAJ7D,EADF,CADO;;;QASP,EAlBD,EAAP;;IAoBD,CA7BH,EAP6B,CAA/B;;AAuCD","names":["useSelector","COMMON_ERR_MESSAGES","VALIDATION_DEBOUNCE_MS","useQueryValidationsQuery","useDebounceValue","t","useAnnotations","params","sql","dbId","schema","templateParams","debouncedSql","hasValidator","sqlLab","common","Boolean","conf","SQL_VALIDATORS_BY_ENGINE","databases","backend","skip","selectFromResult","isLoading","isError","error","data","errorObj","message","statusText","SESSION_TIMED_OUT","length","map","type","row","err","line_number","column","start_column","text"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/SqlLab/components/AceEditorWrapper/useAnnotations.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useSelector } from 'react-redux';\n\nimport { SqlLabRootState } from 'src/SqlLab/types';\nimport COMMON_ERR_MESSAGES from 'src/utils/errorMessages';\nimport { VALIDATION_DEBOUNCE_MS } from 'src/SqlLab/constants';\nimport {\n  FetchValidationQueryParams,\n  useQueryValidationsQuery,\n} from 'src/hooks/apiResources';\nimport { useDebounceValue } from 'src/hooks/useDebounceValue';\nimport { ClientErrorObject } from 'src/utils/getClientErrorObject';\nimport { t } from '@superset-ui/core';\n\nexport function useAnnotations(params: FetchValidationQueryParams) {\n  const { sql, dbId, schema, templateParams } = params;\n  const debouncedSql = useDebounceValue(sql, VALIDATION_DEBOUNCE_MS);\n  const hasValidator = useSelector<SqlLabRootState>(({ sqlLab, common }) =>\n    // Check whether or not we can validate the current query based on whether\n    // or not the backend has a validator configured for it.\n    Boolean(\n      common?.conf?.SQL_VALIDATORS_BY_ENGINE?.[\n        sqlLab?.databases?.[dbId || '']?.backend\n      ],\n    ),\n  );\n  return useQueryValidationsQuery(\n    {\n      dbId,\n      schema,\n      sql: debouncedSql,\n      templateParams,\n    },\n    {\n      skip: !(hasValidator && dbId && sql),\n      selectFromResult: ({ isLoading, isError, error, data }) => {\n        const errorObj = (error ?? {}) as ClientErrorObject;\n        let message =\n          errorObj?.error || errorObj?.statusText || t('Unknown error');\n        if (message.includes('CSRF token')) {\n          message = t(COMMON_ERR_MESSAGES.SESSION_TIMED_OUT);\n        }\n        return {\n          data:\n            !isLoading && data?.length\n              ? data.map(err => ({\n                  type: 'error',\n                  row: (err.line_number || 0) - 1,\n                  column: (err.start_column || 0) - 1,\n                  text: err.message,\n                }))\n              : isError\n              ? [\n                  {\n                    type: 'error',\n                    row: 0,\n                    column: 0,\n                    text: `The server failed to validate your query.\\n${message}`,\n                  },\n                ]\n              : [],\n        };\n      },\n    },\n  );\n}\n"]},"metadata":{},"sourceType":"module"}