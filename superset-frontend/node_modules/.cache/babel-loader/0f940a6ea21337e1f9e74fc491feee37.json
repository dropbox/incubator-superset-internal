{"ast":null,"code":"import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport { styled, t } from '@superset-ui/core';\nimport Icons from 'src/components/Icons';\nimport { Select } from 'src/components';\nimport { CollapsibleControl } from './CollapsibleControl';\nimport { INPUT_WIDTH } from './constants';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst MainPanel = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\nconst AddFilter = styled.div`\n  ${(_ref) => {let { theme } = _ref;return `\n    display: inline-flex;\n    flex-direction: row;\n    align-items: center;\n    cursor: pointer;\n    color: ${theme.colors.primary.base};\n    &:hover {\n      color: ${theme.colors.primary.dark1};\n    }\n  `;}}\n`;\nconst DeleteFilter = styled(Icons.Trash)`\n  ${(_ref2) => {let { theme } = _ref2;return `\n    cursor: pointer;\n    margin-left: ${theme.gridUnit * 2}px;\n    color: ${theme.colors.grayscale.base};\n    &:hover {\n      color: ${theme.colors.grayscale.dark1};\n    }\n  `;}}\n`;\nconst RowPanel = styled.div`\n  ${(_ref3) => {let { theme } = _ref3;return `\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    margin-bottom: ${theme.gridUnit}px;\n\n    & > div {\n      width: ${INPUT_WIDTH}px;\n    }\n  `;}}\n`;\nconst Label = styled.div`\n  text-transform: uppercase;\n  font-size: ${(_ref4) => {let { theme } = _ref4;return theme.typography.sizes.s;}}px;\n  color: ${(_ref5) => {let { theme } = _ref5;return theme.colors.grayscale.base;}};\n  margin-bottom: ${(_ref6) => {let { theme } = _ref6;return theme.gridUnit;}}px;\n`;\nconst Row = (_ref7) => {let { availableFilters, selection, onChange, onDelete } = _ref7;\n  let value = availableFilters.find((e) => e.value === selection);\n  let options = availableFilters;\n  if (!value) {\n    value = { label: t('(deleted or invalid type)'), value: selection };\n    options = [value, ...options];\n  }\n  return ___EmotionJSX(RowPanel, null,\n  ___EmotionJSX(Select, { ariaLabel: t('Limit type'), labelInValue: true, options: options, onChange: (option) => onChange(selection, option.value), value: value }),\n  ___EmotionJSX(DeleteFilter, { iconSize: \"xl\", onClick: () => onDelete(selection) }));\n\n};\nconst List = (_ref8) => {let { availableFilters = [], dependencies = [], onDependenciesChange } = _ref8;\n  const [rows, setRows] = useState(dependencies);\n  const updateRows = (newRows) => {\n    setRows(newRows);\n    onDependenciesChange(newRows);\n  };\n  const onAdd = () => {\n    const filter = availableFilters.find((availableFilter) => !_includesInstanceProperty(rows).call(rows, availableFilter.value));\n    if (filter) {\n      const newRows = [...rows];\n      newRows.push(filter.value);\n      updateRows(newRows);\n    }\n  };\n  const onChange = (id, value) => {\n    const indexOf = rows.findIndex((row) => row === id);\n    const newRows = [...rows];\n    newRows[indexOf] = value;\n    updateRows(newRows);\n  };\n  const onDelete = (id) => {\n    const newRows = [...rows];\n    newRows.splice(rows.indexOf(id), 1);\n    updateRows(newRows);\n  };\n  if (availableFilters.length === 0) {\n    return ___EmotionJSX(\"span\", null, t('No available filters.'));\n  }\n  return ___EmotionJSX(React.Fragment, null,\n  rows.map((row) => ___EmotionJSX(Row, { key: row, selection: row, availableFilters: availableFilters.filter((e) => e.value === row || !_includesInstanceProperty(rows).call(rows, e.value)), onChange: onChange, onDelete: onDelete })),\n  availableFilters.length > rows.length && ___EmotionJSX(AddFilter, { onClick: onAdd },\n  ___EmotionJSX(Icons.PlusSmall, null),\n  t('Add filter')));\n\n\n};\nconst DependencyList = (_ref9) => {let { availableFilters = [], dependencies = [], onDependenciesChange, getDependencySuggestion, children } = _ref9;\n  const hasAvailableFilters = availableFilters.length > 0;\n  const hasDependencies = dependencies.length > 0;\n  const onCheckChanged = (value) => {\n    const newDependencies = [];\n    if (value && !hasDependencies && hasAvailableFilters) {\n      newDependencies.push(getDependencySuggestion());\n    }\n    onDependenciesChange(newDependencies);\n  };\n  return ___EmotionJSX(MainPanel, null,\n  ___EmotionJSX(CollapsibleControl, { title: t('Values are dependent on other filters'), initialValue: hasDependencies, onChange: onCheckChanged, tooltip: t('Values selected in other filters will affect the filter options to only show relevant values') },\n  hasDependencies && ___EmotionJSX(Label, null, t('Values dependent on')),\n  ___EmotionJSX(List, { availableFilters: availableFilters, dependencies: dependencies, onDependenciesChange: onDependenciesChange, getDependencySuggestion: getDependencySuggestion }),\n  children));\n\n\n};\nexport default DependencyList;","map":{"version":3,"mappings":"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","names":["React","useState","styled","t","Icons","Select","CollapsibleControl","INPUT_WIDTH","MainPanel","div","AddFilter","theme","colors","primary","base","dark1","DeleteFilter","Trash","gridUnit","grayscale","RowPanel","Label","typography","sizes","s","Row","availableFilters","selection","onChange","onDelete","value","find","e","options","label","option","List","dependencies","onDependenciesChange","rows","setRows","updateRows","newRows","onAdd","filter","availableFilter","push","id","indexOf","findIndex","row","splice","length","map","DependencyList","getDependencySuggestion","children","hasAvailableFilters","hasDependencies","onCheckChanged","newDependencies"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/DependencyList.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport { styled, t } from '@superset-ui/core';\nimport Icons from 'src/components/Icons';\nimport { Select } from 'src/components';\nimport { CollapsibleControl } from './CollapsibleControl';\nimport { INPUT_WIDTH } from './constants';\n\ninterface DependencyListProps {\n  availableFilters: {\n    label: string;\n    value: string;\n    type: string | undefined;\n  }[];\n  dependencies: string[];\n  onDependenciesChange: (dependencies: string[]) => void;\n  getDependencySuggestion: () => string;\n  children?: JSX.Element;\n}\n\nconst MainPanel = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst AddFilter = styled.div`\n  ${({ theme }) => `\n    display: inline-flex;\n    flex-direction: row;\n    align-items: center;\n    cursor: pointer;\n    color: ${theme.colors.primary.base};\n    &:hover {\n      color: ${theme.colors.primary.dark1};\n    }\n  `}\n`;\n\nconst DeleteFilter = styled(Icons.Trash)`\n  ${({ theme }) => `\n    cursor: pointer;\n    margin-left: ${theme.gridUnit * 2}px;\n    color: ${theme.colors.grayscale.base};\n    &:hover {\n      color: ${theme.colors.grayscale.dark1};\n    }\n  `}\n`;\n\nconst RowPanel = styled.div`\n  ${({ theme }) => `\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    margin-bottom: ${theme.gridUnit}px;\n\n    & > div {\n      width: ${INPUT_WIDTH}px;\n    }\n  `}\n`;\n\nconst Label = styled.div`\n  text-transform: uppercase;\n  font-size: ${({ theme }) => theme.typography.sizes.s}px;\n  color: ${({ theme }) => theme.colors.grayscale.base};\n  margin-bottom: ${({ theme }) => theme.gridUnit}px;\n`;\n\nconst Row = ({\n  availableFilters,\n  selection,\n  onChange,\n  onDelete,\n}: {\n  availableFilters: { label: string; value: string }[];\n  selection: string;\n  onChange: (id: string, value: string) => void;\n  onDelete: (id: string) => void;\n}) => {\n  let value = availableFilters.find(e => e.value === selection);\n  let options = availableFilters;\n  if (!value) {\n    value = { label: t('(deleted or invalid type)'), value: selection };\n    options = [value, ...options];\n  }\n  return (\n    <RowPanel>\n      <Select\n        ariaLabel={t('Limit type')}\n        labelInValue\n        options={options}\n        onChange={option =>\n          onChange(selection, (option as { value: string }).value)\n        }\n        value={value}\n      />\n      <DeleteFilter iconSize=\"xl\" onClick={() => onDelete(selection)} />\n    </RowPanel>\n  );\n};\n\nconst List = ({\n  availableFilters = [],\n  dependencies = [],\n  onDependenciesChange,\n}: DependencyListProps) => {\n  const [rows, setRows] = useState<string[]>(dependencies);\n\n  const updateRows = (newRows: string[]) => {\n    setRows(newRows);\n    onDependenciesChange(newRows);\n  };\n\n  const onAdd = () => {\n    const filter = availableFilters.find(\n      availableFilter => !rows.includes(availableFilter.value),\n    );\n    if (filter) {\n      const newRows = [...rows];\n      newRows.push(filter.value);\n      updateRows(newRows);\n    }\n  };\n\n  const onChange = (id: string, value: string) => {\n    const indexOf = rows.findIndex(row => row === id);\n    const newRows = [...rows];\n    newRows[indexOf] = value;\n    updateRows(newRows);\n  };\n\n  const onDelete = (id: string) => {\n    const newRows = [...rows];\n    newRows.splice(rows.indexOf(id), 1);\n    updateRows(newRows);\n  };\n\n  if (availableFilters.length === 0) {\n    return <span>{t('No available filters.')}</span>;\n  }\n\n  return (\n    <>\n      {rows.map(row => (\n        <Row\n          key={row}\n          selection={row}\n          availableFilters={availableFilters.filter(\n            e => e.value === row || !rows.includes(e.value),\n          )}\n          onChange={onChange}\n          onDelete={onDelete}\n        />\n      ))}\n      {availableFilters.length > rows.length && (\n        <AddFilter onClick={onAdd}>\n          <Icons.PlusSmall />\n          {t('Add filter')}\n        </AddFilter>\n      )}\n    </>\n  );\n};\n\nconst DependencyList = ({\n  availableFilters = [],\n  dependencies = [],\n  onDependenciesChange,\n  getDependencySuggestion,\n  children,\n}: DependencyListProps) => {\n  const hasAvailableFilters = availableFilters.length > 0;\n  const hasDependencies = dependencies.length > 0;\n\n  const onCheckChanged = (value: boolean) => {\n    const newDependencies: string[] = [];\n    if (value && !hasDependencies && hasAvailableFilters) {\n      newDependencies.push(getDependencySuggestion());\n    }\n    onDependenciesChange(newDependencies);\n  };\n\n  return (\n    <MainPanel>\n      <CollapsibleControl\n        title={t('Values are dependent on other filters')}\n        initialValue={hasDependencies}\n        onChange={onCheckChanged}\n        tooltip={t(\n          'Values selected in other filters will affect the filter options to only show relevant values',\n        )}\n      >\n        {hasDependencies && <Label>{t('Values dependent on')}</Label>}\n        <List\n          availableFilters={availableFilters}\n          dependencies={dependencies}\n          onDependenciesChange={onDependenciesChange}\n          getDependencySuggestion={getDependencySuggestion}\n        />\n        {children}\n      </CollapsibleControl>\n    </MainPanel>\n  );\n};\n\nexport default DependencyList;\n"]},"metadata":{},"sourceType":"module"}