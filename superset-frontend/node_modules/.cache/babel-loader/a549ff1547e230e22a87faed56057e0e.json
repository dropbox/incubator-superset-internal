{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { extractTimegrain, getNumberFormatter, NumberFormats, GenericDataType, getMetricLabel, t, smartDateVerboseFormatter, getXAxisLabel } from '@superset-ui/core';\nimport { graphic } from 'echarts';\nimport { getDateFormatter, parseMetricValue } from '../utils';\nimport { getDefaultTooltip } from '../../utils/tooltip';\nconst defaultNumberFormatter = getNumberFormatter();\nexport function renderTooltipFactory(formatDate, formatValue) {if (formatDate === void 0) {formatDate = smartDateVerboseFormatter;}if (formatValue === void 0) {formatValue = defaultNumberFormatter;}\n  return function renderTooltip(params) {\n    return `\n      ${formatDate(params[0].data[0])}\n      <br />\n      <strong>\n        ${params[0].data[1] === null ? t('N/A') : formatValue(params[0].data[1])}\n      </strong>\n    `;\n  };\n}\nconst formatPercentChange = getNumberFormatter(NumberFormats.PERCENT_SIGNED_1_POINT);\nexport default function transformProps(chartProps) {var _chartProps$datasourc, _metricEntry, _ref, _metricEntry2;\n  const { width, height, queriesData, formData, rawFormData, theme, hooks, inContextMenu } = chartProps;\n  const { colorPicker, compareLag: compareLag_, compareSuffix = '', timeFormat, headerFontSize, metric = 'value', showTimestamp, showTrendLine, startYAxisAtZero, subheader = '', subheaderFontSize, forceTimestampFormatting, yAxisFormat, timeRangeFixed } = formData;\n  const granularity = extractTimegrain(rawFormData);\n  const { data = [], colnames = [], coltypes = [], from_dttm: fromDatetime, to_dttm: toDatetime } = queriesData[0];\n  const refs = {};\n  const metricName = getMetricLabel(metric);\n  const compareLag = Number(compareLag_) || 0;\n  let formattedSubheader = subheader;\n  const { r, g, b } = colorPicker;\n  const mainColor = `rgb(${r}, ${g}, ${b})`;\n  const xAxisLabel = getXAxisLabel(rawFormData);\n  let trendLineData;\n  let percentChange = 0;\n  let bigNumber = data.length === 0 ? null : data[0][metricName];\n  let timestamp = data.length === 0 ? null : data[0][xAxisLabel];\n  let bigNumberFallback;\n  const metricColtypeIndex = colnames.findIndex((name) => name === metricName);\n  const metricColtype = metricColtypeIndex > -1 ? coltypes[metricColtypeIndex] : null;\n  if (data.length > 0) {\n    const sortedData = data.\n    map((d) => [d[xAxisLabel], parseMetricValue(d[metricName])])\n    // sort in time descending order\n    .sort((a, b) => a[0] !== null && b[0] !== null ? b[0] - a[0] : 0);\n    bigNumber = sortedData[0][1];\n    timestamp = sortedData[0][0];\n    if (bigNumber === null) {\n      bigNumberFallback = sortedData.find((d) => d[1] !== null);\n      bigNumber = bigNumberFallback ? bigNumberFallback[1] : null;\n      timestamp = bigNumberFallback ? bigNumberFallback[0] : null;\n    }\n    if (compareLag > 0) {\n      const compareIndex = compareLag;\n      if (compareIndex < sortedData.length) {\n        const compareValue = sortedData[compareIndex][1];\n        // compare values must both be non-nulls\n        if (bigNumber !== null && compareValue !== null) {\n          percentChange = compareValue ?\n          (bigNumber - compareValue) / Math.abs(compareValue) :\n          0;\n          formattedSubheader = `${formatPercentChange(percentChange)} ${compareSuffix}`;\n        }\n      }\n    }\n    sortedData.reverse();\n    // @ts-ignore\n    trendLineData = showTrendLine ? sortedData : undefined;\n  }\n  let className = '';\n  if (percentChange > 0) {\n    className = 'positive';\n  } else\n  if (percentChange < 0) {\n    className = 'negative';\n  }\n  let metricEntry;\n  if ((_chartProps$datasourc = chartProps.datasource) != null && _chartProps$datasourc.metrics) {\n    metricEntry = chartProps.datasource.metrics.find((metricEntry) => metricEntry.metric_name === metric);\n  }\n  const formatTime = getDateFormatter(timeFormat, granularity, (_metricEntry = metricEntry) == null ? void 0 : _metricEntry.d3format);\n  const headerFormatter = metricColtype === GenericDataType.TEMPORAL ||\n  metricColtype === GenericDataType.STRING ||\n  forceTimestampFormatting ?\n  formatTime :\n  getNumberFormatter((_ref = yAxisFormat != null ? yAxisFormat : (_metricEntry2 = metricEntry) == null ? void 0 : _metricEntry2.d3format) != null ? _ref : undefined);\n  if (trendLineData && timeRangeFixed && fromDatetime) {\n    const toDatetimeOrToday = toDatetime != null ? toDatetime : Date.now();\n    if (!trendLineData[0][0] || trendLineData[0][0] > fromDatetime) {\n      trendLineData.unshift([fromDatetime, null]);\n    }\n    if (!trendLineData[trendLineData.length - 1][0] ||\n    trendLineData[trendLineData.length - 1][0] < toDatetimeOrToday) {\n      trendLineData.push([toDatetimeOrToday, null]);\n    }\n  }\n  const echartOptions = trendLineData ?\n  {\n    series: [\n    {\n      data: trendLineData,\n      type: 'line',\n      smooth: true,\n      symbol: 'circle',\n      symbolSize: 10,\n      showSymbol: false,\n      color: mainColor,\n      areaStyle: {\n        color: new graphic.LinearGradient(0, 0, 0, 1, [\n        {\n          offset: 0,\n          color: mainColor },\n\n        {\n          offset: 1,\n          color: theme.colors.grayscale.light5 }]) } }],\n\n\n\n\n\n    xAxis: {\n      min: trendLineData[0][0],\n      max: trendLineData[trendLineData.length - 1][0],\n      show: false,\n      type: 'value' },\n\n    yAxis: {\n      scale: !startYAxisAtZero,\n      show: false },\n\n    grid: {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0 },\n\n    tooltip: {\n      ...getDefaultTooltip(refs),\n      show: !inContextMenu,\n      trigger: 'axis',\n      formatter: renderTooltipFactory(formatTime, headerFormatter) },\n\n    aria: {\n      enabled: true,\n      label: {\n        description: `Big number visualization ${subheader}` } } } :\n\n\n\n  {};\n  const { onContextMenu } = hooks;\n  return {\n    width,\n    height,\n    bigNumber,\n    // @ts-ignore\n    bigNumberFallback,\n    className,\n    headerFormatter,\n    formatTime,\n    formData,\n    headerFontSize,\n    subheaderFontSize,\n    mainColor,\n    showTimestamp,\n    showTrendLine,\n    startYAxisAtZero,\n    subheader: formattedSubheader,\n    timestamp,\n    trendLineData,\n    echartOptions,\n    onContextMenu,\n    xValueFormatter: formatTime,\n    refs };\n\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(defaultNumberFormatter, \"defaultNumberFormatter\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-echarts/src/BigNumber/BigNumberWithTrendline/transformProps.ts\");reactHotLoader.register(renderTooltipFactory, \"renderTooltipFactory\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-echarts/src/BigNumber/BigNumberWithTrendline/transformProps.ts\");reactHotLoader.register(formatPercentChange, \"formatPercentChange\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-echarts/src/BigNumber/BigNumberWithTrendline/transformProps.ts\");reactHotLoader.register(transformProps, \"transformProps\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-echarts/src/BigNumber/BigNumberWithTrendline/transformProps.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAkBA,SACEA,gBADF,EAEEC,kBAFF,EAGEC,aAHF,EAIEC,eAJF,EAKEC,cALF,EAMEC,CANF,EAOEC,yBAPF,EAUEC,aAVF,QAWO,mBAXP;AAYA,SAA4BC,OAA5B,QAA2C,SAA3C;AAOA,SAASC,gBAAT,EAA2BC,gBAA3B,QAAmD,UAAnD;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAGA,MAAMC,sBAAsB,GAAGX,kBAAkB,EAAjD;AACA,OAAM,SAAUY,oBAAV,CACJC,UADI,EAEJC,WAFI,EAEiE,KADrED,UACqE,cADrEA,UACqE,GADzCR,yBACyC,MAArES,WAAqE,cAArEA,WAAqE,GAAtBH,sBAAsB;EAErE,OAAO,SAASI,aAAT,CAAuBC,MAAvB,EAA0D;IAC/D,OAAO;QACHH,UAAU,CAACG,MAAM,CAAC,CAAD,CAAN,CAAUC,IAAV,CAAe,CAAf,CAAD,CAAmB;;;UAI3BD,MAAM,CAAC,CAAD,CAAN,CAAUC,IAAV,CAAe,CAAf,MAAsB,IAAtB,GAA6Bb,CAAC,CAAC,KAAD,CAA9B,GAAwCU,WAAW,CAACE,MAAM,CAAC,CAAD,CAAN,CAAUC,IAAV,CAAe,CAAf,CAAD,CACrD;;KANJ;EASD,CAVD;AAWD;AAED,MAAMC,mBAAmB,GAAGlB,kBAAkB,CAC5CC,aAAa,CAACkB,sBAD8B,CAA9C;AAIA,eAAc,SAAUC,cAAV,CACZC,UADY,EACgC;EAE5C,MAAM,EACJC,KADI,EAEJC,MAFI,EAGJC,WAHI,EAIJC,QAJI,EAKJC,WALI,EAMJC,KANI,EAOJC,KAPI,EAQJC,aARI,KASFR,UATJ;EAUA,MAAM,EACJS,WADI,EAEJC,UAAU,EAAEC,WAFR,EAGJC,aAAa,GAAG,EAHZ,EAIJC,UAJI,EAKJC,cALI,EAMJC,MAAM,GAAG,OANL,EAOJC,aAPI,EAQJC,aARI,EASJC,gBATI,EAUJC,SAAS,GAAG,EAVR,EAWJC,iBAXI,EAYJC,wBAZI,EAaJC,WAbI,EAcJC,cAdI,KAeFnB,QAfJ;EAgBA,MAAMoB,WAAW,GAAG9C,gBAAgB,CAAC2B,WAAD,CAApC;EACA,MAAM,EACJT,IAAI,GAAG,EADH,EAEJ6B,QAAQ,GAAG,EAFP,EAGJC,QAAQ,GAAG,EAHP,EAIJC,SAAS,EAAEC,YAJP,EAKJC,OAAO,EAAEC,UALL,KAMF3B,WAAW,CAAC,CAAD,CANf;EAOA,MAAM4B,IAAI,GAAS,EAAnB;EACA,MAAMC,UAAU,GAAGlD,cAAc,CAACiC,MAAD,CAAjC;EACA,MAAML,UAAU,GAAGuB,MAAM,CAACtB,WAAD,CAAN,IAAuB,CAA1C;EACA,IAAIuB,kBAAkB,GAAGf,SAAzB;EAEA,MAAM,EAAEgB,CAAF,EAAKC,CAAL,EAAQC,CAAR,KAAc5B,WAApB;EACA,MAAM6B,SAAS,GAAG,OAAOH,CAAC,KAAKC,CAAC,KAAKC,CAAC,GAAtC;EAEA,MAAME,UAAU,GAAGtD,aAAa,CAACoB,WAAD,CAAhC;EACA,IAAImC,aAAJ;EACA,IAAIC,aAAa,GAAG,CAApB;EACA,IAAIC,SAAS,GAAG9C,IAAI,CAAC+C,MAAL,KAAgB,CAAhB,GAAoB,IAApB,GAA2B/C,IAAI,CAAC,CAAD,CAAJ,CAAQoC,UAAR,CAA3C;EACA,IAAIY,SAAS,GAAGhD,IAAI,CAAC+C,MAAL,KAAgB,CAAhB,GAAoB,IAApB,GAA2B/C,IAAI,CAAC,CAAD,CAAJ,CAAQ2C,UAAR,CAA3C;EACA,IAAIM,iBAAJ;EAEA,MAAMC,kBAAkB,GAAGrB,QAAQ,CAACsB,SAAT,CAAmB,KAAI,KAAIC,IAAI,KAAKhB,UAApC,CAA3B;EACA,MAAMiB,aAAa,GACjBH,kBAAkB,GAAG,CAAC,CAAtB,GAA0BpB,QAAQ,CAACoB,kBAAD,CAAlC,GAAyD,IAD3D;EAGA,IAAIlD,IAAI,CAAC+C,MAAL,GAAc,CAAlB,EAAqB;IACnB,MAAMO,UAAU,GAAItD,IAAyB;IAC1CuD,GADiB,CACb,EAAC,KAAI,CAACC,CAAC,CAACb,UAAD,CAAF,EAAgBnD,gBAAgB,CAACgE,CAAC,CAACpB,UAAD,CAAF,CAAhC,CADQ;IAElB;IAFkB,CAGjBqB,IAHiB,CAGZ,CAACC,CAAD,EAAIjB,CAAJ,KAAWiB,CAAC,CAAC,CAAD,CAAD,KAAS,IAAT,IAAiBjB,CAAC,CAAC,CAAD,CAAD,KAAS,IAA1B,GAAiCA,CAAC,CAAC,CAAD,CAAD,GAAOiB,CAAC,CAAC,CAAD,CAAzC,GAA+C,CAH9C,CAApB;IAKAZ,SAAS,GAAGQ,UAAU,CAAC,CAAD,CAAV,CAAc,CAAd,CAAZ;IACAN,SAAS,GAAGM,UAAU,CAAC,CAAD,CAAV,CAAc,CAAd,CAAZ;IAEA,IAAIR,SAAS,KAAK,IAAlB,EAAwB;MACtBG,iBAAiB,GAAGK,UAAU,CAACK,IAAX,CAAgB,EAAC,KAAIH,CAAC,CAAC,CAAD,CAAD,KAAS,IAA9B,CAApB;MACAV,SAAS,GAAGG,iBAAiB,GAAGA,iBAAiB,CAAC,CAAD,CAApB,GAA0B,IAAvD;MACAD,SAAS,GAAGC,iBAAiB,GAAGA,iBAAiB,CAAC,CAAD,CAApB,GAA0B,IAAvD;IACD;IAED,IAAInC,UAAU,GAAG,CAAjB,EAAoB;MAClB,MAAM8C,YAAY,GAAG9C,UAArB;MACA,IAAI8C,YAAY,GAAGN,UAAU,CAACP,MAA9B,EAAsC;QACpC,MAAMc,YAAY,GAAGP,UAAU,CAACM,YAAD,CAAV,CAAyB,CAAzB,CAArB;QACA;QACA,IAAId,SAAS,KAAK,IAAd,IAAsBe,YAAY,KAAK,IAA3C,EAAiD;UAC/ChB,aAAa,GAAGgB,YAAY;UACxB,CAACf,SAAS,GAAGe,YAAb,IAA6BC,IAAI,CAACC,GAAL,CAASF,YAAT,CADL;UAExB,CAFJ;UAGAvB,kBAAkB,GAAG,GAAGrC,mBAAmB,CACzC4C,aADyC,CAE1C,IAAI7B,aAAa,EAFlB;QAGD;MACF;IACF;IACDsC,UAAU,CAACU,OAAX;IACA;IACApB,aAAa,GAAGvB,aAAa,GAAGiC,UAAH,GAAgBW,SAA7C;EACD;EAED,IAAIC,SAAS,GAAG,EAAhB;EACA,IAAIrB,aAAa,GAAG,CAApB,EAAuB;IACrBqB,SAAS,GAAG,UAAZ;EACD,CAFD;EAEO,IAAIrB,aAAa,GAAG,CAApB,EAAuB;IAC5BqB,SAAS,GAAG,UAAZ;EACD;EAED,IAAIC,WAAJ;EACA,6BAAI/D,UAAU,CAACgE,UAAf,aAAI,sBAAuBC,OAA3B,EAAoC;IAClCF,WAAW,GAAG/D,UAAU,CAACgE,UAAX,CAAsBC,OAAtB,CAA8BV,IAA9B,CACZ,YAAW,KAAIQ,WAAW,CAACG,WAAZ,KAA4BnD,MAD/B,CAAd;EAGD;EAED,MAAMoD,UAAU,GAAGhF,gBAAgB,CACjC0B,UADiC,EAEjCW,WAFiC,kBAGjCuC,WAHiC,qBAGjC,aAAaK,QAHoB,CAAnC;EAMA,MAAMC,eAAe,GACnBpB,aAAa,KAAKpE,eAAe,CAACyF,QAAlC;EACArB,aAAa,KAAKpE,eAAe,CAAC0F,MADlC;EAEAlD,wBAFA;EAGI8C,UAHJ;EAIIxF,kBAAkB,SAAC2C,WAAD,WAACA,WAAD,oBAAgByC,WAAhB,qBAAgB,cAAaK,QAA7B,mBAAyCP,SAAzC,CALxB;EAOA,IAAIrB,aAAa,IAAIjB,cAAjB,IAAmCK,YAAvC,EAAqD;IACnD,MAAM4C,iBAAiB,GAAG1C,UAAH,WAAGA,UAAH,GAAiB2C,IAAI,CAACC,GAAL,EAAxC;IACA,IAAI,CAAClC,aAAa,CAAC,CAAD,CAAb,CAAiB,CAAjB,CAAD,IAAwBA,aAAa,CAAC,CAAD,CAAb,CAAiB,CAAjB,IAAsBZ,YAAlD,EAAgE;MAC9DY,aAAa,CAACmC,OAAd,CAAsB,CAAC/C,YAAD,EAAe,IAAf,CAAtB;IACD;IACD,IACE,CAACY,aAAa,CAACA,aAAa,CAACG,MAAd,GAAuB,CAAxB,CAAb,CAAwC,CAAxC,CAAD;IACAH,aAAa,CAACA,aAAa,CAACG,MAAd,GAAuB,CAAxB,CAAb,CAAwC,CAAxC,IAA8C6B,iBAFhD,EAGE;MACAhC,aAAa,CAACoC,IAAd,CAAmB,CAACJ,iBAAD,EAAoB,IAApB,CAAnB;IACD;EACF;EAED,MAAMK,aAAa,GAAsBrC,aAAa;EAClD;IACEsC,MAAM,EAAE;IACN;MACElF,IAAI,EAAE4C,aADR;MAEEuC,IAAI,EAAE,MAFR;MAGEC,MAAM,EAAE,IAHV;MAIEC,MAAM,EAAE,QAJV;MAKEC,UAAU,EAAE,EALd;MAMEC,UAAU,EAAE,KANd;MAOEC,KAAK,EAAE9C,SAPT;MAQE+C,SAAS,EAAE;QACTD,KAAK,EAAE,IAAIlG,OAAO,CAACoG,cAAZ,CAA2B,CAA3B,EAA8B,CAA9B,EAAiC,CAAjC,EAAoC,CAApC,EAAuC;QAC5C;UACEC,MAAM,EAAE,CADV;UAEEH,KAAK,EAAE9C,SAFT,EAD4C;;QAK5C;UACEiD,MAAM,EAAE,CADV;UAEEH,KAAK,EAAE9E,KAAK,CAACkF,MAAN,CAAaC,SAAb,CAAuBC,MAFhC,EAL4C,CAAvC,CADE,EARb,EADM,CADV;;;;;;IAwBEC,KAAK,EAAE;MACLC,GAAG,EAAEpD,aAAa,CAAC,CAAD,CAAb,CAAiB,CAAjB,CADA;MAELqD,GAAG,EAAErD,aAAa,CAACA,aAAa,CAACG,MAAd,GAAuB,CAAxB,CAAb,CAAwC,CAAxC,CAFA;MAGLmD,IAAI,EAAE,KAHD;MAILf,IAAI,EAAE,OAJD,EAxBT;;IA8BEgB,KAAK,EAAE;MACLC,KAAK,EAAE,CAAC9E,gBADH;MAEL4E,IAAI,EAAE,KAFD,EA9BT;;IAkCEG,IAAI,EAAE;MACJC,IAAI,EAAE,CADF;MAEJC,KAAK,EAAE,CAFH;MAGJC,GAAG,EAAE,CAHD;MAIJC,MAAM,EAAE,CAJJ,EAlCR;;IAwCEC,OAAO,EAAE;MACP,GAAGjH,iBAAiB,CAAC0C,IAAD,CADb;MAEP+D,IAAI,EAAE,CAACtF,aAFA;MAGP+F,OAAO,EAAE,MAHF;MAIPC,SAAS,EAAEjH,oBAAoB,CAAC4E,UAAD,EAAaE,eAAb,CAJxB,EAxCX;;IA8CEoC,IAAI,EAAE;MACJC,OAAO,EAAE,IADL;MAEJC,KAAK,EAAE;QACLC,WAAW,EAAE,4BAA4BzF,SAAS,EAD7C,EAFH,EA9CR,EADkD;;;;EAsDlD,EAtDJ;EAwDA,MAAM,EAAE0F,aAAF,KAAoBtG,KAA1B;EAEA,OAAO;IACLN,KADK;IAELC,MAFK;IAGLwC,SAHK;IAIL;IACAG,iBALK;IAMLiB,SANK;IAOLO,eAPK;IAQLF,UARK;IASL/D,QATK;IAULU,cAVK;IAWLM,iBAXK;IAYLkB,SAZK;IAaLtB,aAbK;IAcLC,aAdK;IAeLC,gBAfK;IAgBLC,SAAS,EAAEe,kBAhBN;IAiBLU,SAjBK;IAkBLJ,aAlBK;IAmBLqC,aAnBK;IAoBLgC,aApBK;IAqBLC,eAAe,EAAE3C,UArBZ;IAsBLpC,IAtBK,EAAP;;AAwBD,C,iLA3OKzC,sB,4MACUC,oB,0MAiBVM,mB,yMAIkBE,c","names":["extractTimegrain","getNumberFormatter","NumberFormats","GenericDataType","getMetricLabel","t","smartDateVerboseFormatter","getXAxisLabel","graphic","getDateFormatter","parseMetricValue","getDefaultTooltip","defaultNumberFormatter","renderTooltipFactory","formatDate","formatValue","renderTooltip","params","data","formatPercentChange","PERCENT_SIGNED_1_POINT","transformProps","chartProps","width","height","queriesData","formData","rawFormData","theme","hooks","inContextMenu","colorPicker","compareLag","compareLag_","compareSuffix","timeFormat","headerFontSize","metric","showTimestamp","showTrendLine","startYAxisAtZero","subheader","subheaderFontSize","forceTimestampFormatting","yAxisFormat","timeRangeFixed","granularity","colnames","coltypes","from_dttm","fromDatetime","to_dttm","toDatetime","refs","metricName","Number","formattedSubheader","r","g","b","mainColor","xAxisLabel","trendLineData","percentChange","bigNumber","length","timestamp","bigNumberFallback","metricColtypeIndex","findIndex","name","metricColtype","sortedData","map","d","sort","a","find","compareIndex","compareValue","Math","abs","reverse","undefined","className","metricEntry","datasource","metrics","metric_name","formatTime","d3format","headerFormatter","TEMPORAL","STRING","toDatetimeOrToday","Date","now","unshift","push","echartOptions","series","type","smooth","symbol","symbolSize","showSymbol","color","areaStyle","LinearGradient","offset","colors","grayscale","light5","xAxis","min","max","show","yAxis","scale","grid","left","right","top","bottom","tooltip","trigger","formatter","aria","enabled","label","description","onContextMenu","xValueFormatter"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-echarts/src/BigNumber/BigNumberWithTrendline/transformProps.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  extractTimegrain,\n  getNumberFormatter,\n  NumberFormats,\n  GenericDataType,\n  getMetricLabel,\n  t,\n  smartDateVerboseFormatter,\n  NumberFormatter,\n  TimeFormatter,\n  getXAxisLabel,\n} from '@superset-ui/core';\nimport { EChartsCoreOption, graphic } from 'echarts';\nimport {\n  BigNumberVizProps,\n  BigNumberDatum,\n  BigNumberWithTrendlineChartProps,\n  TimeSeriesDatum,\n} from '../types';\nimport { getDateFormatter, parseMetricValue } from '../utils';\nimport { getDefaultTooltip } from '../../utils/tooltip';\nimport { Refs } from '../../types';\n\nconst defaultNumberFormatter = getNumberFormatter();\nexport function renderTooltipFactory(\n  formatDate: TimeFormatter = smartDateVerboseFormatter,\n  formatValue: NumberFormatter | TimeFormatter = defaultNumberFormatter,\n) {\n  return function renderTooltip(params: { data: TimeSeriesDatum }[]) {\n    return `\n      ${formatDate(params[0].data[0])}\n      <br />\n      <strong>\n        ${\n          params[0].data[1] === null ? t('N/A') : formatValue(params[0].data[1])\n        }\n      </strong>\n    `;\n  };\n}\n\nconst formatPercentChange = getNumberFormatter(\n  NumberFormats.PERCENT_SIGNED_1_POINT,\n);\n\nexport default function transformProps(\n  chartProps: BigNumberWithTrendlineChartProps,\n): BigNumberVizProps {\n  const {\n    width,\n    height,\n    queriesData,\n    formData,\n    rawFormData,\n    theme,\n    hooks,\n    inContextMenu,\n  } = chartProps;\n  const {\n    colorPicker,\n    compareLag: compareLag_,\n    compareSuffix = '',\n    timeFormat,\n    headerFontSize,\n    metric = 'value',\n    showTimestamp,\n    showTrendLine,\n    startYAxisAtZero,\n    subheader = '',\n    subheaderFontSize,\n    forceTimestampFormatting,\n    yAxisFormat,\n    timeRangeFixed,\n  } = formData;\n  const granularity = extractTimegrain(rawFormData);\n  const {\n    data = [],\n    colnames = [],\n    coltypes = [],\n    from_dttm: fromDatetime,\n    to_dttm: toDatetime,\n  } = queriesData[0];\n  const refs: Refs = {};\n  const metricName = getMetricLabel(metric);\n  const compareLag = Number(compareLag_) || 0;\n  let formattedSubheader = subheader;\n\n  const { r, g, b } = colorPicker;\n  const mainColor = `rgb(${r}, ${g}, ${b})`;\n\n  const xAxisLabel = getXAxisLabel(rawFormData) as string;\n  let trendLineData: TimeSeriesDatum[] | undefined;\n  let percentChange = 0;\n  let bigNumber = data.length === 0 ? null : data[0][metricName];\n  let timestamp = data.length === 0 ? null : data[0][xAxisLabel];\n  let bigNumberFallback;\n\n  const metricColtypeIndex = colnames.findIndex(name => name === metricName);\n  const metricColtype =\n    metricColtypeIndex > -1 ? coltypes[metricColtypeIndex] : null;\n\n  if (data.length > 0) {\n    const sortedData = (data as BigNumberDatum[])\n      .map(d => [d[xAxisLabel], parseMetricValue(d[metricName])])\n      // sort in time descending order\n      .sort((a, b) => (a[0] !== null && b[0] !== null ? b[0] - a[0] : 0));\n\n    bigNumber = sortedData[0][1];\n    timestamp = sortedData[0][0];\n\n    if (bigNumber === null) {\n      bigNumberFallback = sortedData.find(d => d[1] !== null);\n      bigNumber = bigNumberFallback ? bigNumberFallback[1] : null;\n      timestamp = bigNumberFallback ? bigNumberFallback[0] : null;\n    }\n\n    if (compareLag > 0) {\n      const compareIndex = compareLag;\n      if (compareIndex < sortedData.length) {\n        const compareValue = sortedData[compareIndex][1];\n        // compare values must both be non-nulls\n        if (bigNumber !== null && compareValue !== null) {\n          percentChange = compareValue\n            ? (bigNumber - compareValue) / Math.abs(compareValue)\n            : 0;\n          formattedSubheader = `${formatPercentChange(\n            percentChange,\n          )} ${compareSuffix}`;\n        }\n      }\n    }\n    sortedData.reverse();\n    // @ts-ignore\n    trendLineData = showTrendLine ? sortedData : undefined;\n  }\n\n  let className = '';\n  if (percentChange > 0) {\n    className = 'positive';\n  } else if (percentChange < 0) {\n    className = 'negative';\n  }\n\n  let metricEntry;\n  if (chartProps.datasource?.metrics) {\n    metricEntry = chartProps.datasource.metrics.find(\n      metricEntry => metricEntry.metric_name === metric,\n    );\n  }\n\n  const formatTime = getDateFormatter(\n    timeFormat,\n    granularity,\n    metricEntry?.d3format,\n  );\n\n  const headerFormatter =\n    metricColtype === GenericDataType.TEMPORAL ||\n    metricColtype === GenericDataType.STRING ||\n    forceTimestampFormatting\n      ? formatTime\n      : getNumberFormatter(yAxisFormat ?? metricEntry?.d3format ?? undefined);\n\n  if (trendLineData && timeRangeFixed && fromDatetime) {\n    const toDatetimeOrToday = toDatetime ?? Date.now();\n    if (!trendLineData[0][0] || trendLineData[0][0] > fromDatetime) {\n      trendLineData.unshift([fromDatetime, null]);\n    }\n    if (\n      !trendLineData[trendLineData.length - 1][0] ||\n      trendLineData[trendLineData.length - 1][0]! < toDatetimeOrToday\n    ) {\n      trendLineData.push([toDatetimeOrToday, null]);\n    }\n  }\n\n  const echartOptions: EChartsCoreOption = trendLineData\n    ? {\n        series: [\n          {\n            data: trendLineData,\n            type: 'line',\n            smooth: true,\n            symbol: 'circle',\n            symbolSize: 10,\n            showSymbol: false,\n            color: mainColor,\n            areaStyle: {\n              color: new graphic.LinearGradient(0, 0, 0, 1, [\n                {\n                  offset: 0,\n                  color: mainColor,\n                },\n                {\n                  offset: 1,\n                  color: theme.colors.grayscale.light5,\n                },\n              ]),\n            },\n          },\n        ],\n        xAxis: {\n          min: trendLineData[0][0],\n          max: trendLineData[trendLineData.length - 1][0],\n          show: false,\n          type: 'value',\n        },\n        yAxis: {\n          scale: !startYAxisAtZero,\n          show: false,\n        },\n        grid: {\n          left: 0,\n          right: 0,\n          top: 0,\n          bottom: 0,\n        },\n        tooltip: {\n          ...getDefaultTooltip(refs),\n          show: !inContextMenu,\n          trigger: 'axis',\n          formatter: renderTooltipFactory(formatTime, headerFormatter),\n        },\n        aria: {\n          enabled: true,\n          label: {\n            description: `Big number visualization ${subheader}`,\n          },\n        },\n      }\n    : {};\n\n  const { onContextMenu } = hooks;\n\n  return {\n    width,\n    height,\n    bigNumber,\n    // @ts-ignore\n    bigNumberFallback,\n    className,\n    headerFormatter,\n    formatTime,\n    formData,\n    headerFontSize,\n    subheaderFontSize,\n    mainColor,\n    showTimestamp,\n    showTrendLine,\n    startYAxisAtZero,\n    subheader: formattedSubheader,\n    timestamp,\n    trendLineData,\n    echartOptions,\n    onContextMenu,\n    xValueFormatter: formatTime,\n    refs,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}