{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { RegistryWithDefaultKey, OverwritePolicy } from '../models';\nimport TimeFormats, { LOCAL_PREFIX } from './TimeFormats';\nimport createD3TimeFormatter from './factories/createD3TimeFormatter';\nexport default class TimeFormatterRegistry extends RegistryWithDefaultKey {\n  constructor() {\n    super({\n      initialDefaultKey: TimeFormats.DATABASE_DATETIME,\n      name: 'TimeFormatter',\n      overwritePolicy: OverwritePolicy.WARN });\n\n  }\n  get(format) {\n    const targetFormat = `${format === null || typeof format === 'undefined' || format === '' ?\n    this.defaultKey :\n    format}`.trim();\n    if (this.has(targetFormat)) {\n      return super.get(targetFormat);\n    }\n    // Create new formatter if does not exist\n    const useLocalTime = targetFormat.startsWith(LOCAL_PREFIX);\n    const formatString = targetFormat.replace(LOCAL_PREFIX, '');\n    const formatter = createD3TimeFormatter({ formatString, useLocalTime });\n    this.registerValue(targetFormat, formatter);\n    return formatter;\n  }\n  format(format, value) {\n    return this.get(format)(value);\n  }}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,SAASA,sBAAT,EAAiCC,eAAjC,QAAwD,WAAxD;AACA,OAAOC,WAAP,IAAsBC,YAAtB,QAA0C,eAA1C;AACA,OAAOC,qBAAP,MAAkC,mCAAlC;AAGA,eAAc,MAAOC,qBAAP,SAAqCL,sBAArC,CAGb;EACCM;IACE,MAAM;MACJC,iBAAiB,EAAEL,WAAW,CAACM,iBAD3B;MAEJC,IAAI,EAAE,eAFF;MAGJC,eAAe,EAAET,eAAe,CAACU,IAH7B,EAAN;;EAKD;EAEDC,GAAG,CAACC,MAAD,EAAgB;IACjB,MAAMC,YAAY,GAAG,GACnBD,MAAM,KAAK,IAAX,IAAmB,OAAOA,MAAP,KAAkB,WAArC,IAAoDA,MAAM,KAAK,EAA/D;IACI,KAAKE,UADT;IAEIF,MACN,EAJqB,CAIlBG,IAJkB,EAArB;IAMA,IAAI,KAAKC,GAAL,CAASH,YAAT,CAAJ,EAA4B;MAC1B,OAAO,MAAMF,GAAN,CAAUE,YAAV,CAAP;IACD;IAED;IACA,MAAMI,YAAY,GAAGJ,YAAY,CAACK,UAAb,CAAwBhB,YAAxB,CAArB;IACA,MAAMiB,YAAY,GAAGN,YAAY,CAACO,OAAb,CAAqBlB,YAArB,EAAmC,EAAnC,CAArB;IACA,MAAMmB,SAAS,GAAGlB,qBAAqB,CAAC,EAAEgB,YAAF,EAAgBF,YAAhB,EAAD,CAAvC;IACA,KAAKK,aAAL,CAAmBT,YAAnB,EAAiCQ,SAAjC;IAEA,OAAOA,SAAP;EACD;EAEDT,MAAM,CAACA,MAAD,EAA6BW,KAA7B,EAA2D;IAC/D,OAAO,KAAKZ,GAAL,CAASC,MAAT,EAAiBW,KAAjB,CAAP;EACD,CA/BF","names":["RegistryWithDefaultKey","OverwritePolicy","TimeFormats","LOCAL_PREFIX","createD3TimeFormatter","TimeFormatterRegistry","constructor","initialDefaultKey","DATABASE_DATETIME","name","overwritePolicy","WARN","get","format","targetFormat","defaultKey","trim","has","useLocalTime","startsWith","formatString","replace","formatter","registerValue","value"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/time-format/TimeFormatterRegistry.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { RegistryWithDefaultKey, OverwritePolicy } from '../models';\nimport TimeFormats, { LOCAL_PREFIX } from './TimeFormats';\nimport createD3TimeFormatter from './factories/createD3TimeFormatter';\nimport TimeFormatter from './TimeFormatter';\n\nexport default class TimeFormatterRegistry extends RegistryWithDefaultKey<\n  TimeFormatter,\n  TimeFormatter\n> {\n  constructor() {\n    super({\n      initialDefaultKey: TimeFormats.DATABASE_DATETIME,\n      name: 'TimeFormatter',\n      overwritePolicy: OverwritePolicy.WARN,\n    });\n  }\n\n  get(format?: string) {\n    const targetFormat = `${\n      format === null || typeof format === 'undefined' || format === ''\n        ? this.defaultKey\n        : format\n    }`.trim();\n\n    if (this.has(targetFormat)) {\n      return super.get(targetFormat) as TimeFormatter;\n    }\n\n    // Create new formatter if does not exist\n    const useLocalTime = targetFormat.startsWith(LOCAL_PREFIX);\n    const formatString = targetFormat.replace(LOCAL_PREFIX, '');\n    const formatter = createD3TimeFormatter({ formatString, useLocalTime });\n    this.registerValue(targetFormat, formatter);\n\n    return formatter;\n  }\n\n  format(format: string | undefined, value: Date | null | undefined): string {\n    return this.get(format)(value);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}