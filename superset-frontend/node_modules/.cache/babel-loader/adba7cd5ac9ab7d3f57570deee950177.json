{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { forwardRef } from 'react';\nimport { acequire } from 'ace-builds/src-noconflict/ace';\nimport AsyncEsmComponent from 'src/components/AsyncEsmComponent';\n/**\n * Async loaders to import brace modules. Must manually create call `import(...)`\n * promises because webpack can only analyze async imports statically.\n */import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst aceModuleLoaders = {\n  'mode/sql': () => import('brace/mode/sql'),\n  'mode/markdown': () => import('brace/mode/markdown'),\n  'mode/css': () => import('brace/mode/css'),\n  'mode/json': () => import('brace/mode/json'),\n  'mode/yaml': () => import('brace/mode/yaml'),\n  'mode/html': () => import('brace/mode/html'),\n  'mode/javascript': () => import('brace/mode/javascript'),\n  'theme/textmate': () => import('brace/theme/textmate'),\n  'theme/github': () => import('brace/theme/github'),\n  'ext/language_tools': () => import('brace/ext/language_tools'),\n  'ext/searchbox': () => import('brace/ext/searchbox') };\n\n/**\n * Get an async AceEditor with automatical loading of specified ace modules.\n */\nexport default function AsyncAceEditor(aceModules, _temp) {let { defaultMode, defaultTheme, defaultTabSize = 2, fontFamily = 'Menlo, Consolas, Courier New, Ubuntu Mono, source-code-pro, Lucida Console, monospace', placeholder } = _temp === void 0 ? {} : _temp;\n  return AsyncEsmComponent(async () => {var _aceModules$find, _aceModules$find2;\n    const { default: ReactAceEditor } = await import('react-ace');\n    await Promise.all(aceModules.map((x) => aceModuleLoaders[x]()));\n    const inferredMode = defaultMode || ((_aceModules$find =\n    aceModules.find((x) => x.startsWith('mode/'))) == null ? void 0 : _aceModules$find.replace('mode/', ''));\n    const inferredTheme = defaultTheme || ((_aceModules$find2 =\n    aceModules.find((x) => x.startsWith('theme/'))) == null ? void 0 : _aceModules$find2.replace('theme/', ''));\n    return /*#__PURE__*/forwardRef(function ExtendedAceEditor(_ref, ref) {let { keywords, mode = inferredMode, theme = inferredTheme, tabSize = defaultTabSize, defaultValue = '', ...props } = _ref;\n      if (keywords) {\n        const langTools = acequire('ace/ext/language_tools');\n        const completer = {\n          getCompletions: (editor, session, pos, prefix, callback) => {\n            // If the prefix starts with a number, don't try to autocomplete\n            if (!Number.isNaN(parseInt(prefix, 10))) {\n              return;\n            }\n            if (session.getMode().$id === `ace/mode/${mode}`) {\n              callback(null, keywords);\n            }\n          } };\n\n        langTools.setCompleters([completer]);\n      }\n      return ___EmotionJSX(ReactAceEditor, _extends({ ref: ref, mode: mode, theme: theme, tabSize: tabSize, defaultValue: defaultValue, setOptions: { fontFamily } }, props));\n    });\n  }, placeholder);\n}\nexport const SQLEditor = AsyncAceEditor([\n'mode/sql',\n'theme/github',\n'ext/language_tools',\n'ext/searchbox']);\n\nexport const FullSQLEditor = AsyncAceEditor(['mode/sql', 'theme/github', 'ext/language_tools', 'ext/searchbox'], {\n  // a custom placeholder in SQL lab for less jumpy re-renders\n  placeholder: () => {\n    const gutterBackground = '#e8e8e8'; // from ace-github theme\n    return ___EmotionJSX(\"div\", { style: {\n        height: '100%' } },\n\n    ___EmotionJSX(\"div\", { style: { width: 41, height: '100%', background: gutterBackground } }),\n\n    ___EmotionJSX(\"div\", { className: \"ace_content\" }));\n\n  } });\n\nexport const MarkdownEditor = AsyncAceEditor([\n'mode/markdown',\n'theme/textmate']);\n\nexport const TextAreaEditor = AsyncAceEditor([\n'mode/markdown',\n'mode/sql',\n'mode/json',\n'mode/html',\n'mode/javascript',\n'theme/textmate']);\n\nexport const CssEditor = AsyncAceEditor(['mode/css', 'theme/github']);\nexport const JsonEditor = AsyncAceEditor(['mode/json', 'theme/github']);\n/**\n * JSON or Yaml config editor.\n */\nexport const ConfigEditor = AsyncAceEditor([\n'mode/json',\n'mode/yaml',\n'theme/github']);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(aceModuleLoaders, \"aceModuleLoaders\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/AsyncAceEditor/index.tsx\");reactHotLoader.register(AsyncAceEditor, \"AsyncAceEditor\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/AsyncAceEditor/index.tsx\");reactHotLoader.register(SQLEditor, \"SQLEditor\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/AsyncAceEditor/index.tsx\");reactHotLoader.register(FullSQLEditor, \"FullSQLEditor\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/AsyncAceEditor/index.tsx\");reactHotLoader.register(MarkdownEditor, \"MarkdownEditor\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/AsyncAceEditor/index.tsx\");reactHotLoader.register(TextAreaEditor, \"TextAreaEditor\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/AsyncAceEditor/index.tsx\");reactHotLoader.register(CssEditor, \"CssEditor\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/AsyncAceEditor/index.tsx\");reactHotLoader.register(JsonEditor, \"JsonEditor\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/AsyncAceEditor/index.tsx\");reactHotLoader.register(ConfigEditor, \"ConfigEditor\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/AsyncAceEditor/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"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","names":["React","forwardRef","acequire","AsyncEsmComponent","aceModuleLoaders","AsyncAceEditor","aceModules","defaultMode","defaultTheme","defaultTabSize","fontFamily","placeholder","default","ReactAceEditor","Promise","all","map","x","inferredMode","find","startsWith","replace","inferredTheme","ExtendedAceEditor","ref","keywords","mode","theme","tabSize","defaultValue","props","langTools","completer","getCompletions","editor","session","pos","prefix","callback","Number","isNaN","parseInt","getMode","$id","setCompleters","SQLEditor","FullSQLEditor","gutterBackground","height","width","background","MarkdownEditor","TextAreaEditor","CssEditor","JsonEditor","ConfigEditor"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/AsyncAceEditor/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { forwardRef } from 'react';\nimport {\n  Editor as OrigEditor,\n  IEditSession,\n  Position,\n  TextMode as OrigTextMode,\n} from 'brace';\nimport AceEditor, { IAceEditorProps } from 'react-ace';\nimport { acequire } from 'ace-builds/src-noconflict/ace';\nimport AsyncEsmComponent, {\n  PlaceholderProps,\n} from 'src/components/AsyncEsmComponent';\n\nexport interface AceCompleterKeywordData {\n  name: string;\n  value: string;\n  score: number;\n  meta: string;\n}\n\nexport type TextMode = OrigTextMode & { $id: string };\n\nexport interface AceCompleter {\n  insertMatch: (\n    data?: Editor | { value: string } | string,\n    options?: AceCompleterKeywordData,\n  ) => void;\n}\n\nexport type Editor = OrigEditor & {\n  completer: AceCompleter;\n  completers: AceCompleter[];\n};\n\nexport interface AceCompleterKeyword extends AceCompleterKeywordData {\n  completer?: AceCompleter;\n}\n\n/**\n * Async loaders to import brace modules. Must manually create call `import(...)`\n * promises because webpack can only analyze async imports statically.\n */\nconst aceModuleLoaders = {\n  'mode/sql': () => import('brace/mode/sql'),\n  'mode/markdown': () => import('brace/mode/markdown'),\n  'mode/css': () => import('brace/mode/css'),\n  'mode/json': () => import('brace/mode/json'),\n  'mode/yaml': () => import('brace/mode/yaml'),\n  'mode/html': () => import('brace/mode/html'),\n  'mode/javascript': () => import('brace/mode/javascript'),\n  'theme/textmate': () => import('brace/theme/textmate'),\n  'theme/github': () => import('brace/theme/github'),\n  'ext/language_tools': () => import('brace/ext/language_tools'),\n  'ext/searchbox': () => import('brace/ext/searchbox'),\n};\n\nexport type AceModule = keyof typeof aceModuleLoaders;\n\nexport type AsyncAceEditorProps = IAceEditorProps & {\n  keywords?: AceCompleterKeyword[];\n};\n\nexport type AceEditorMode = 'sql';\nexport type AceEditorTheme = 'textmate' | 'github';\nexport type AsyncAceEditorOptions = {\n  defaultMode?: AceEditorMode;\n  defaultTheme?: AceEditorTheme;\n  defaultTabSize?: number;\n  fontFamily?: string;\n  placeholder?: React.ComponentType<\n    PlaceholderProps & Partial<IAceEditorProps>\n  > | null;\n};\n\n/**\n * Get an async AceEditor with automatical loading of specified ace modules.\n */\nexport default function AsyncAceEditor(\n  aceModules: AceModule[],\n  {\n    defaultMode,\n    defaultTheme,\n    defaultTabSize = 2,\n    fontFamily = 'Menlo, Consolas, Courier New, Ubuntu Mono, source-code-pro, Lucida Console, monospace',\n    placeholder,\n  }: AsyncAceEditorOptions = {},\n) {\n  return AsyncEsmComponent(async () => {\n    const { default: ReactAceEditor } = await import('react-ace');\n\n    await Promise.all(aceModules.map(x => aceModuleLoaders[x]()));\n\n    const inferredMode =\n      defaultMode ||\n      aceModules.find(x => x.startsWith('mode/'))?.replace('mode/', '');\n    const inferredTheme =\n      defaultTheme ||\n      aceModules.find(x => x.startsWith('theme/'))?.replace('theme/', '');\n\n    return forwardRef<AceEditor, AsyncAceEditorProps>(\n      function ExtendedAceEditor(\n        {\n          keywords,\n          mode = inferredMode,\n          theme = inferredTheme,\n          tabSize = defaultTabSize,\n          defaultValue = '',\n          ...props\n        },\n        ref,\n      ) {\n        if (keywords) {\n          const langTools = acequire('ace/ext/language_tools');\n          const completer = {\n            getCompletions: (\n              editor: AceEditor,\n              session: IEditSession,\n              pos: Position,\n              prefix: string,\n              callback: (error: null, wordList: object[]) => void,\n            ) => {\n              // If the prefix starts with a number, don't try to autocomplete\n              if (!Number.isNaN(parseInt(prefix, 10))) {\n                return;\n              }\n              if ((session.getMode() as TextMode).$id === `ace/mode/${mode}`) {\n                callback(null, keywords);\n              }\n            },\n          };\n          langTools.setCompleters([completer]);\n        }\n        return (\n          <ReactAceEditor\n            ref={ref}\n            mode={mode}\n            theme={theme}\n            tabSize={tabSize}\n            defaultValue={defaultValue}\n            setOptions={{ fontFamily }}\n            {...props}\n          />\n        );\n      },\n    );\n  }, placeholder);\n}\n\nexport const SQLEditor = AsyncAceEditor([\n  'mode/sql',\n  'theme/github',\n  'ext/language_tools',\n  'ext/searchbox',\n]);\n\nexport const FullSQLEditor = AsyncAceEditor(\n  ['mode/sql', 'theme/github', 'ext/language_tools', 'ext/searchbox'],\n  {\n    // a custom placeholder in SQL lab for less jumpy re-renders\n    placeholder: () => {\n      const gutterBackground = '#e8e8e8'; // from ace-github theme\n      return (\n        <div\n          style={{\n            height: '100%',\n          }}\n        >\n          <div\n            style={{ width: 41, height: '100%', background: gutterBackground }}\n          />\n          {/* make it possible to resize the placeholder */}\n          <div className=\"ace_content\" />\n        </div>\n      );\n    },\n  },\n);\n\nexport const MarkdownEditor = AsyncAceEditor([\n  'mode/markdown',\n  'theme/textmate',\n]);\n\nexport const TextAreaEditor = AsyncAceEditor([\n  'mode/markdown',\n  'mode/sql',\n  'mode/json',\n  'mode/html',\n  'mode/javascript',\n  'theme/textmate',\n]);\n\nexport const CssEditor = AsyncAceEditor(['mode/css', 'theme/github']);\n\nexport const JsonEditor = AsyncAceEditor(['mode/json', 'theme/github']);\n\n/**\n * JSON or Yaml config editor.\n */\nexport const ConfigEditor = AsyncAceEditor([\n  'mode/json',\n  'mode/yaml',\n  'theme/github',\n]);\n"]},"metadata":{},"sourceType":"module"}