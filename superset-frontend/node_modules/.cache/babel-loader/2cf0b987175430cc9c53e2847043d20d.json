{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nexport var COMPARATOR;\n(function (COMPARATOR) {\n  COMPARATOR[\"NONE\"] = \"None\";\n  COMPARATOR[\"GREATER_THAN\"] = \">\";\n  COMPARATOR[\"LESS_THAN\"] = \"<\";\n  COMPARATOR[\"GREATER_OR_EQUAL\"] = \"\\u2265\";\n  COMPARATOR[\"LESS_OR_EQUAL\"] = \"\\u2264\";\n  COMPARATOR[\"EQUAL\"] = \"=\";\n  COMPARATOR[\"NOT_EQUAL\"] = \"\\u2260\";\n  COMPARATOR[\"BETWEEN\"] = \"< x <\";\n  COMPARATOR[\"BETWEEN_OR_EQUAL\"] = \"\\u2264 x \\u2264\";\n  COMPARATOR[\"BETWEEN_OR_LEFT_EQUAL\"] = \"\\u2264 x <\";\n  COMPARATOR[\"BETWEEN_OR_RIGHT_EQUAL\"] = \"< x \\u2264\";\n})(COMPARATOR || (COMPARATOR = {}));\nexport const MULTIPLE_VALUE_COMPARATORS = [\nCOMPARATOR.BETWEEN,\nCOMPARATOR.BETWEEN_OR_EQUAL,\nCOMPARATOR.BETWEEN_OR_LEFT_EQUAL,\nCOMPARATOR.BETWEEN_OR_RIGHT_EQUAL];","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAuBA,WAAYA,UAAZ;AAAA,WAAYA,UAAZ,EAAsB;EACpBA;EACAA;EACAA;EACAA;EACAA;EACAA;EACAA;EACAA;EACAA;EACAA;EACAA;AACD,CAZD,EAAYA,UAAU,KAAVA,UAAU,MAAtB;AAcA,OAAO,MAAMC,0BAA0B,GAAG;AACxCD,UAAU,CAACE,OAD6B;AAExCF,UAAU,CAACG,gBAF6B;AAGxCH,UAAU,CAACI,qBAH6B;AAIxCJ,UAAU,CAACK,sBAJ6B,CAAnC","names":["COMPARATOR","MULTIPLE_VALUE_COMPARATORS","BETWEEN","BETWEEN_OR_EQUAL","BETWEEN_OR_LEFT_EQUAL","BETWEEN_OR_RIGHT_EQUAL"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/explore/components/controls/ConditionalFormattingControl/types.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { ReactNode } from 'react';\nimport { PopoverProps } from 'antd/lib/popover';\nimport { ControlComponentProps } from '@superset-ui/chart-controls';\n\nexport enum COMPARATOR {\n  NONE = 'None',\n  GREATER_THAN = '>',\n  LESS_THAN = '<',\n  GREATER_OR_EQUAL = '≥',\n  LESS_OR_EQUAL = '≤',\n  EQUAL = '=',\n  NOT_EQUAL = '≠',\n  BETWEEN = '< x <',\n  BETWEEN_OR_EQUAL = '≤ x ≤',\n  BETWEEN_OR_LEFT_EQUAL = '≤ x <',\n  BETWEEN_OR_RIGHT_EQUAL = '< x ≤',\n}\n\nexport const MULTIPLE_VALUE_COMPARATORS = [\n  COMPARATOR.BETWEEN,\n  COMPARATOR.BETWEEN_OR_EQUAL,\n  COMPARATOR.BETWEEN_OR_LEFT_EQUAL,\n  COMPARATOR.BETWEEN_OR_RIGHT_EQUAL,\n];\n\nexport type ConditionalFormattingConfig = {\n  operator?: COMPARATOR;\n  targetValue?: number;\n  targetValueLeft?: number;\n  targetValueRight?: number;\n  column?: string;\n  colorScheme?: string;\n};\n\nexport type ConditionalFormattingControlProps = ControlComponentProps<\n  ConditionalFormattingConfig[]\n> & {\n  columnOptions: { label: string; value: string }[];\n  removeIrrelevantConditions: boolean;\n  verboseMap: Record<string, string>;\n  label: string;\n  description: string;\n};\n\nexport type FormattingPopoverProps = PopoverProps & {\n  columns: { label: string; value: string }[];\n  onChange: (value: ConditionalFormattingConfig) => void;\n  config?: ConditionalFormattingConfig;\n  title: string;\n  children: ReactNode;\n};\n"]},"metadata":{},"sourceType":"module"}