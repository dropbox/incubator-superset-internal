{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { addAlpha, css, styled, t } from '@superset-ui/core';\nimport { EmptyStateBig } from 'src/components/EmptyState';\nimport { componentShape } from '../util/propShapes';\nimport DashboardComponent from '../containers/DashboardComponent';\nimport DragDroppable from './dnd/DragDroppable';\nimport { GRID_GUTTER_SIZE, GRID_COLUMN_COUNT } from '../util/constants';\nimport { TAB_TYPE } from '../util/componentTypes';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  depth: PropTypes.number.isRequired,\n  editMode: PropTypes.bool,\n  gridComponent: componentShape,\n  handleComponentDrop: PropTypes.func.isRequired,\n  isComponentVisible: PropTypes.bool.isRequired,\n  resizeComponent: PropTypes.func.isRequired,\n  setDirectPathToChild: PropTypes.func.isRequired,\n  width: PropTypes.number.isRequired,\n  dashboardId: PropTypes.number };\n\n\nconst defaultProps = {};\n\nconst renderDraggableContentBottom = (dropProps) =>\ndropProps.dropIndicatorProps &&\n___EmotionJSX(\"div\", { className: \"drop-indicator drop-indicator--bottom\" });\n\n\nconst renderDraggableContentTop = (dropProps) =>\ndropProps.dropIndicatorProps &&\n___EmotionJSX(\"div\", { className: \"drop-indicator drop-indicator--top\" });\n\n\nconst DashboardEmptyStateContainer = styled.div`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n`;\n\nconst GridContent = styled.div`\n  ${(_ref) => {let { theme } = _ref;return css`\n    display: flex;\n    flex-direction: column;\n\n    /* gutters between rows */\n    & > div:not(:last-child):not(.empty-droptarget) {\n      margin-bottom: ${theme.gridUnit * 4}px;\n    }\n\n    & > .empty-droptarget {\n      width: 100%;\n      height: 100%;\n    }\n\n    & > .empty-droptarget:first-child {\n      height: ${theme.gridUnit * 12}px;\n      margin-top: ${theme.gridUnit * -6}px;\n      margin-bottom: ${theme.gridUnit * -6}px;\n    }\n\n    & > .empty-droptarget:only-child {\n      height: 80vh;\n    }\n  `;}}\n`;\n\nconst GridColumnGuide = styled.div`\n  ${(_ref2) => {let { theme } = _ref2;return css`\n    // /* Editing guides */\n    &.grid-column-guide {\n      position: absolute;\n      top: 0;\n      min-height: 100%;\n      background-color: ${addAlpha(\n  theme.colors.primary.base,\n  parseFloat(theme.opacity.light) / 100)\n  };\n      pointer-events: none;\n      box-shadow: inset 0 0 0 1px\n        ${addAlpha(\n  theme.colors.primary.base,\n  parseFloat(theme.opacity.mediumHeavy) / 100)\n  };\n    }\n  `;}};\n`;\n\nclass DashboardGrid extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isResizing: false };\n\n\n    this.handleResizeStart = this.handleResizeStart.bind(this);\n    this.handleResizeStop = this.handleResizeStop.bind(this);\n    this.handleTopDropTargetDrop = this.handleTopDropTargetDrop.bind(this);\n    this.getRowGuidePosition = this.getRowGuidePosition.bind(this);\n    this.setGridRef = this.setGridRef.bind(this);\n    this.handleChangeTab = this.handleChangeTab.bind(this);\n  }\n\n  getRowGuidePosition(resizeRef) {\n    if (resizeRef && this.grid) {\n      return (\n        resizeRef.getBoundingClientRect().bottom -\n        this.grid.getBoundingClientRect().top -\n        2);\n\n    }\n    return null;\n  }\n\n  setGridRef(ref) {\n    this.grid = ref;\n  }\n\n  handleResizeStart() {\n    this.setState(() => ({\n      isResizing: true }));\n\n  }\n\n  handleResizeStop(_ref3) {let { id, widthMultiple: width, heightMultiple: height } = _ref3;\n    this.props.resizeComponent({ id, width, height });\n\n    this.setState(() => ({\n      isResizing: false }));\n\n  }\n\n  handleTopDropTargetDrop(dropResult) {\n    if (dropResult) {\n      this.props.handleComponentDrop({\n        ...dropResult,\n        destination: {\n          ...dropResult.destination,\n          // force appending as the first child if top drop target\n          index: 0 } });\n\n\n    }\n  }\n\n  handleChangeTab(_ref4) {let { pathToTabIndex } = _ref4;\n    this.props.setDirectPathToChild(pathToTabIndex);\n  }\n\n  render() {var _gridComponent$childr, _gridComponent$childr2, _gridComponent$childr3;\n    const {\n      gridComponent,\n      handleComponentDrop,\n      depth,\n      width,\n      isComponentVisible,\n      editMode,\n      canEdit,\n      setEditMode,\n      dashboardId } =\n    this.props;\n    const columnPlusGutterWidth =\n    (width + GRID_GUTTER_SIZE) / GRID_COLUMN_COUNT;\n\n    const columnWidth = columnPlusGutterWidth - GRID_GUTTER_SIZE;\n    const { isResizing } = this.state;\n\n    const shouldDisplayEmptyState = (gridComponent == null ? void 0 : (_gridComponent$childr = gridComponent.children) == null ? void 0 : _gridComponent$childr.length) === 0;\n    const shouldDisplayTopLevelTabEmptyState =\n    shouldDisplayEmptyState && gridComponent.type === TAB_TYPE;\n\n    const dashboardEmptyState = editMode &&\n    ___EmotionJSX(EmptyStateBig, {\n      title: t('Drag and drop components and charts to the dashboard'),\n      description: t(\n      'You can create a new chart or use existing ones from the panel on the right'),\n\n      buttonText:\n      ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(\"i\", { className: \"fa fa-plus\" }),\n      t('Create a new chart')),\n\n\n      buttonAction: () => {\n        window.open(\n        `/chart/add?dashboard_id=${dashboardId}`,\n        '_blank',\n        'noopener noreferrer');\n\n      },\n      image: \"chart.svg\" });\n\n\n\n    const topLevelTabEmptyState = editMode ?\n    ___EmotionJSX(EmptyStateBig, {\n      title: t('Drag and drop components to this tab'),\n      description: t(\n      `You can create a new chart or use existing ones from the panel on the right`),\n\n      buttonText:\n      ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(\"i\", { className: \"fa fa-plus\" }),\n      t('Create a new chart')),\n\n\n      buttonAction: () => {\n        window.open(\n        `/chart/add?dashboard_id=${dashboardId}`,\n        '_blank',\n        'noopener noreferrer');\n\n      },\n      image: \"chart.svg\" }) :\n\n\n    ___EmotionJSX(EmptyStateBig, {\n      title: t('There are no components added to this tab'),\n      description:\n      canEdit && t('You can add the components in the edit mode.'),\n\n      buttonText: canEdit && t('Edit the dashboard'),\n      buttonAction:\n      canEdit && (\n      () => {\n        setEditMode(true);\n      }),\n\n      image: \"chart.svg\" });\n\n\n\n    return width < 100 ? null :\n    ___EmotionJSX(React.Fragment, null,\n    shouldDisplayEmptyState &&\n    ___EmotionJSX(DashboardEmptyStateContainer, null,\n    shouldDisplayTopLevelTabEmptyState ?\n    topLevelTabEmptyState :\n    dashboardEmptyState),\n\n\n    ___EmotionJSX(\"div\", { className: \"dashboard-grid\", ref: this.setGridRef },\n    ___EmotionJSX(GridContent, { className: \"grid-content\" },\n\n    editMode &&\n    ___EmotionJSX(DragDroppable, {\n      component: gridComponent,\n      depth: depth,\n      parentComponent: null,\n      index: 0,\n      orientation: \"column\",\n      onDrop: this.handleTopDropTargetDrop,\n      className: \"empty-droptarget\",\n      editMode: true },\n\n    renderDraggableContentBottom),\n\n\n    gridComponent == null ? void 0 : (_gridComponent$childr2 = gridComponent.children) == null ? void 0 : _gridComponent$childr2.map((id, index) =>\n    ___EmotionJSX(DashboardComponent, {\n      key: id,\n      id: id,\n      parentId: gridComponent.id,\n      depth: depth + 1,\n      index: index,\n      availableColumnCount: GRID_COLUMN_COUNT,\n      columnWidth: columnWidth,\n      isComponentVisible: isComponentVisible,\n      onResizeStart: this.handleResizeStart,\n      onResize: this.handleResize,\n      onResizeStop: this.handleResizeStop,\n      onChangeTab: this.handleChangeTab })),\n\n\n\n    editMode && (gridComponent == null ? void 0 : (_gridComponent$childr3 = gridComponent.children) == null ? void 0 : _gridComponent$childr3.length) > 0 &&\n    ___EmotionJSX(DragDroppable, {\n      component: gridComponent,\n      depth: depth,\n      parentComponent: null,\n      index: gridComponent.children.length,\n      orientation: \"column\",\n      onDrop: handleComponentDrop,\n      className: \"empty-droptarget\",\n      editMode: true },\n\n    renderDraggableContentTop),\n\n\n    isResizing &&\n    Array(GRID_COLUMN_COUNT).\n    fill(null).\n    map((_, i) =>\n    ___EmotionJSX(GridColumnGuide, {\n      key: `grid-column-${i}`,\n      className: \"grid-column-guide\",\n      style: {\n        left: i * GRID_GUTTER_SIZE + i * columnWidth,\n        width: columnWidth } })))));\n\n\n\n\n\n\n\n  }}\n\n\nDashboardGrid.propTypes = propTypes;\nDashboardGrid.defaultProps = defaultProps;\n\nexport default DashboardGrid;","map":{"version":3,"names":["React","PropTypes","addAlpha","css","styled","t","EmptyStateBig","componentShape","DashboardComponent","DragDroppable","GRID_GUTTER_SIZE","GRID_COLUMN_COUNT","TAB_TYPE","propTypes","depth","number","isRequired","editMode","bool","gridComponent","handleComponentDrop","func","isComponentVisible","resizeComponent","setDirectPathToChild","width","dashboardId","defaultProps","renderDraggableContentBottom","dropProps","dropIndicatorProps","renderDraggableContentTop","DashboardEmptyStateContainer","div","GridContent","theme","gridUnit","GridColumnGuide","colors","primary","base","parseFloat","opacity","light","mediumHeavy","DashboardGrid","PureComponent","constructor","props","state","isResizing","handleResizeStart","bind","handleResizeStop","handleTopDropTargetDrop","getRowGuidePosition","setGridRef","handleChangeTab","resizeRef","grid","getBoundingClientRect","bottom","top","ref","setState","id","widthMultiple","heightMultiple","height","dropResult","destination","index","pathToTabIndex","render","canEdit","setEditMode","columnPlusGutterWidth","columnWidth","shouldDisplayEmptyState","children","length","shouldDisplayTopLevelTabEmptyState","type","dashboardEmptyState","window","open","topLevelTabEmptyState","map","handleResize","Array","fill","_","i","left"],"sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/components/DashboardGrid.jsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { addAlpha, css, styled, t } from '@superset-ui/core';\nimport { EmptyStateBig } from 'src/components/EmptyState';\nimport { componentShape } from '../util/propShapes';\nimport DashboardComponent from '../containers/DashboardComponent';\nimport DragDroppable from './dnd/DragDroppable';\nimport { GRID_GUTTER_SIZE, GRID_COLUMN_COUNT } from '../util/constants';\nimport { TAB_TYPE } from '../util/componentTypes';\n\nconst propTypes = {\n  depth: PropTypes.number.isRequired,\n  editMode: PropTypes.bool,\n  gridComponent: componentShape,\n  handleComponentDrop: PropTypes.func.isRequired,\n  isComponentVisible: PropTypes.bool.isRequired,\n  resizeComponent: PropTypes.func.isRequired,\n  setDirectPathToChild: PropTypes.func.isRequired,\n  width: PropTypes.number.isRequired,\n  dashboardId: PropTypes.number,\n};\n\nconst defaultProps = {};\n\nconst renderDraggableContentBottom = dropProps =>\n  dropProps.dropIndicatorProps && (\n    <div className=\"drop-indicator drop-indicator--bottom\" />\n  );\n\nconst renderDraggableContentTop = dropProps =>\n  dropProps.dropIndicatorProps && (\n    <div className=\"drop-indicator drop-indicator--top\" />\n  );\n\nconst DashboardEmptyStateContainer = styled.div`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n`;\n\nconst GridContent = styled.div`\n  ${({ theme }) => css`\n    display: flex;\n    flex-direction: column;\n\n    /* gutters between rows */\n    & > div:not(:last-child):not(.empty-droptarget) {\n      margin-bottom: ${theme.gridUnit * 4}px;\n    }\n\n    & > .empty-droptarget {\n      width: 100%;\n      height: 100%;\n    }\n\n    & > .empty-droptarget:first-child {\n      height: ${theme.gridUnit * 12}px;\n      margin-top: ${theme.gridUnit * -6}px;\n      margin-bottom: ${theme.gridUnit * -6}px;\n    }\n\n    & > .empty-droptarget:only-child {\n      height: 80vh;\n    }\n  `}\n`;\n\nconst GridColumnGuide = styled.div`\n  ${({ theme }) => css`\n    // /* Editing guides */\n    &.grid-column-guide {\n      position: absolute;\n      top: 0;\n      min-height: 100%;\n      background-color: ${addAlpha(\n        theme.colors.primary.base,\n        parseFloat(theme.opacity.light) / 100,\n      )};\n      pointer-events: none;\n      box-shadow: inset 0 0 0 1px\n        ${addAlpha(\n          theme.colors.primary.base,\n          parseFloat(theme.opacity.mediumHeavy) / 100,\n        )};\n    }\n  `};\n`;\n\nclass DashboardGrid extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isResizing: false,\n    };\n\n    this.handleResizeStart = this.handleResizeStart.bind(this);\n    this.handleResizeStop = this.handleResizeStop.bind(this);\n    this.handleTopDropTargetDrop = this.handleTopDropTargetDrop.bind(this);\n    this.getRowGuidePosition = this.getRowGuidePosition.bind(this);\n    this.setGridRef = this.setGridRef.bind(this);\n    this.handleChangeTab = this.handleChangeTab.bind(this);\n  }\n\n  getRowGuidePosition(resizeRef) {\n    if (resizeRef && this.grid) {\n      return (\n        resizeRef.getBoundingClientRect().bottom -\n        this.grid.getBoundingClientRect().top -\n        2\n      );\n    }\n    return null;\n  }\n\n  setGridRef(ref) {\n    this.grid = ref;\n  }\n\n  handleResizeStart() {\n    this.setState(() => ({\n      isResizing: true,\n    }));\n  }\n\n  handleResizeStop({ id, widthMultiple: width, heightMultiple: height }) {\n    this.props.resizeComponent({ id, width, height });\n\n    this.setState(() => ({\n      isResizing: false,\n    }));\n  }\n\n  handleTopDropTargetDrop(dropResult) {\n    if (dropResult) {\n      this.props.handleComponentDrop({\n        ...dropResult,\n        destination: {\n          ...dropResult.destination,\n          // force appending as the first child if top drop target\n          index: 0,\n        },\n      });\n    }\n  }\n\n  handleChangeTab({ pathToTabIndex }) {\n    this.props.setDirectPathToChild(pathToTabIndex);\n  }\n\n  render() {\n    const {\n      gridComponent,\n      handleComponentDrop,\n      depth,\n      width,\n      isComponentVisible,\n      editMode,\n      canEdit,\n      setEditMode,\n      dashboardId,\n    } = this.props;\n    const columnPlusGutterWidth =\n      (width + GRID_GUTTER_SIZE) / GRID_COLUMN_COUNT;\n\n    const columnWidth = columnPlusGutterWidth - GRID_GUTTER_SIZE;\n    const { isResizing } = this.state;\n\n    const shouldDisplayEmptyState = gridComponent?.children?.length === 0;\n    const shouldDisplayTopLevelTabEmptyState =\n      shouldDisplayEmptyState && gridComponent.type === TAB_TYPE;\n\n    const dashboardEmptyState = editMode && (\n      <EmptyStateBig\n        title={t('Drag and drop components and charts to the dashboard')}\n        description={t(\n          'You can create a new chart or use existing ones from the panel on the right',\n        )}\n        buttonText={\n          <>\n            <i className=\"fa fa-plus\" />\n            {t('Create a new chart')}\n          </>\n        }\n        buttonAction={() => {\n          window.open(\n            `/chart/add?dashboard_id=${dashboardId}`,\n            '_blank',\n            'noopener noreferrer',\n          );\n        }}\n        image=\"chart.svg\"\n      />\n    );\n\n    const topLevelTabEmptyState = editMode ? (\n      <EmptyStateBig\n        title={t('Drag and drop components to this tab')}\n        description={t(\n          `You can create a new chart or use existing ones from the panel on the right`,\n        )}\n        buttonText={\n          <>\n            <i className=\"fa fa-plus\" />\n            {t('Create a new chart')}\n          </>\n        }\n        buttonAction={() => {\n          window.open(\n            `/chart/add?dashboard_id=${dashboardId}`,\n            '_blank',\n            'noopener noreferrer',\n          );\n        }}\n        image=\"chart.svg\"\n      />\n    ) : (\n      <EmptyStateBig\n        title={t('There are no components added to this tab')}\n        description={\n          canEdit && t('You can add the components in the edit mode.')\n        }\n        buttonText={canEdit && t('Edit the dashboard')}\n        buttonAction={\n          canEdit &&\n          (() => {\n            setEditMode(true);\n          })\n        }\n        image=\"chart.svg\"\n      />\n    );\n\n    return width < 100 ? null : (\n      <>\n        {shouldDisplayEmptyState && (\n          <DashboardEmptyStateContainer>\n            {shouldDisplayTopLevelTabEmptyState\n              ? topLevelTabEmptyState\n              : dashboardEmptyState}\n          </DashboardEmptyStateContainer>\n        )}\n        <div className=\"dashboard-grid\" ref={this.setGridRef}>\n          <GridContent className=\"grid-content\" data-test=\"grid-content\">\n            {/* make the area above components droppable */}\n            {editMode && (\n              <DragDroppable\n                component={gridComponent}\n                depth={depth}\n                parentComponent={null}\n                index={0}\n                orientation=\"column\"\n                onDrop={this.handleTopDropTargetDrop}\n                className=\"empty-droptarget\"\n                editMode\n              >\n                {renderDraggableContentBottom}\n              </DragDroppable>\n            )}\n            {gridComponent?.children?.map((id, index) => (\n              <DashboardComponent\n                key={id}\n                id={id}\n                parentId={gridComponent.id}\n                depth={depth + 1}\n                index={index}\n                availableColumnCount={GRID_COLUMN_COUNT}\n                columnWidth={columnWidth}\n                isComponentVisible={isComponentVisible}\n                onResizeStart={this.handleResizeStart}\n                onResize={this.handleResize}\n                onResizeStop={this.handleResizeStop}\n                onChangeTab={this.handleChangeTab}\n              />\n            ))}\n            {/* make the area below components droppable */}\n            {editMode && gridComponent?.children?.length > 0 && (\n              <DragDroppable\n                component={gridComponent}\n                depth={depth}\n                parentComponent={null}\n                index={gridComponent.children.length}\n                orientation=\"column\"\n                onDrop={handleComponentDrop}\n                className=\"empty-droptarget\"\n                editMode\n              >\n                {renderDraggableContentTop}\n              </DragDroppable>\n            )}\n            {isResizing &&\n              Array(GRID_COLUMN_COUNT)\n                .fill(null)\n                .map((_, i) => (\n                  <GridColumnGuide\n                    key={`grid-column-${i}`}\n                    className=\"grid-column-guide\"\n                    style={{\n                      left: i * GRID_GUTTER_SIZE + i * columnWidth,\n                      width: columnWidth,\n                    }}\n                  />\n                ))}\n          </GridContent>\n        </div>\n      </>\n    );\n  }\n}\n\nDashboardGrid.propTypes = propTypes;\nDashboardGrid.defaultProps = defaultProps;\n\nexport default DashboardGrid;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,QAAT,EAAmBC,GAAnB,EAAwBC,MAAxB,EAAgCC,CAAhC,QAAyC,mBAAzC;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,SAASC,cAAT,QAA+B,oBAA/B;AACA,OAAOC,kBAAP,MAA+B,kCAA/B;AACA,OAAOC,aAAP,MAA0B,qBAA1B;AACA,SAASC,gBAAT,EAA2BC,iBAA3B,QAAoD,mBAApD;AACA,SAASC,QAAT,QAAyB,wBAAzB,C;;AAEA,MAAMC,SAAS,GAAG;EAChBC,KAAK,EAAEb,SAAS,CAACc,MAAV,CAAiBC,UADR;EAEhBC,QAAQ,EAAEhB,SAAS,CAACiB,IAFJ;EAGhBC,aAAa,EAAEZ,cAHC;EAIhBa,mBAAmB,EAAEnB,SAAS,CAACoB,IAAV,CAAeL,UAJpB;EAKhBM,kBAAkB,EAAErB,SAAS,CAACiB,IAAV,CAAeF,UALnB;EAMhBO,eAAe,EAAEtB,SAAS,CAACoB,IAAV,CAAeL,UANhB;EAOhBQ,oBAAoB,EAAEvB,SAAS,CAACoB,IAAV,CAAeL,UAPrB;EAQhBS,KAAK,EAAExB,SAAS,CAACc,MAAV,CAAiBC,UARR;EAShBU,WAAW,EAAEzB,SAAS,CAACc,MATP,EAAlB;;;AAYA,MAAMY,YAAY,GAAG,EAArB;;AAEA,MAAMC,4BAA4B,GAAG,CAAAC,SAAS;AAC5CA,SAAS,CAACC,kBAAV;AACE,uBAAK,SAAS,EAAC,uCAAf,GAFJ;;;AAKA,MAAMC,yBAAyB,GAAG,CAAAF,SAAS;AACzCA,SAAS,CAACC,kBAAV;AACE,uBAAK,SAAS,EAAC,oCAAf,GAFJ;;;AAKA,MAAME,4BAA4B,GAAG5B,MAAM,CAAC6B,GAAI;AAChD;AACA;AACA;AACA;AACA;AACA,CANA;;AAQA,MAAMC,WAAW,GAAG9B,MAAM,CAAC6B,GAAI;AAC/B,IAAI,eAAC,EAAEE,KAAF,EAAD,eAAehC,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA,uBAAuBgC,KAAK,CAACC,QAAN,GAAiB,CAAE;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgBD,KAAK,CAACC,QAAN,GAAiB,EAAG;AACpC,oBAAoBD,KAAK,CAACC,QAAN,GAAiB,CAAC,CAAE;AACxC,uBAAuBD,KAAK,CAACC,QAAN,GAAiB,CAAC,CAAE;AAC3C;AACA;AACA;AACA;AACA;AACA,GAvBI,EAuBA;AACJ,CAzBA;;AA2BA,MAAMC,eAAe,GAAGjC,MAAM,CAAC6B,GAAI;AACnC,IAAI,gBAAC,EAAEE,KAAF,EAAD,gBAAehC,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA,0BAA0BD,QAAQ;EAC1BiC,KAAK,CAACG,MAAN,CAAaC,OAAb,CAAqBC,IADK;EAE1BC,UAAU,CAACN,KAAK,CAACO,OAAN,CAAcC,KAAf,CAAV,GAAkC,GAFR;EAG1B;AACR;AACA;AACA,UAAUzC,QAAQ;EACRiC,KAAK,CAACG,MAAN,CAAaC,OAAb,CAAqBC,IADb;EAERC,UAAU,CAACN,KAAK,CAACO,OAAN,CAAcE,WAAf,CAAV,GAAwC,GAFhC;EAGR;AACV;AACA,GAjBI,EAiBA;AACJ,CAnBA;;AAqBA,MAAMC,aAAN,SAA4B7C,KAAK,CAAC8C,aAAlC,CAAgD;EAC9CC,WAAW,CAACC,KAAD,EAAQ;IACjB,MAAMA,KAAN;IACA,KAAKC,KAAL,GAAa;MACXC,UAAU,EAAE,KADD,EAAb;;;IAIA,KAAKC,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAAzB;IACA,KAAKC,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBD,IAAtB,CAA2B,IAA3B,CAAxB;IACA,KAAKE,uBAAL,GAA+B,KAAKA,uBAAL,CAA6BF,IAA7B,CAAkC,IAAlC,CAA/B;IACA,KAAKG,mBAAL,GAA2B,KAAKA,mBAAL,CAAyBH,IAAzB,CAA8B,IAA9B,CAA3B;IACA,KAAKI,UAAL,GAAkB,KAAKA,UAAL,CAAgBJ,IAAhB,CAAqB,IAArB,CAAlB;IACA,KAAKK,eAAL,GAAuB,KAAKA,eAAL,CAAqBL,IAArB,CAA0B,IAA1B,CAAvB;EACD;;EAEDG,mBAAmB,CAACG,SAAD,EAAY;IAC7B,IAAIA,SAAS,IAAI,KAAKC,IAAtB,EAA4B;MAC1B;QACED,SAAS,CAACE,qBAAV,GAAkCC,MAAlC;QACA,KAAKF,IAAL,CAAUC,qBAAV,GAAkCE,GADlC;QAEA,CAHF;;IAKD;IACD,OAAO,IAAP;EACD;;EAEDN,UAAU,CAACO,GAAD,EAAM;IACd,KAAKJ,IAAL,GAAYI,GAAZ;EACD;;EAEDZ,iBAAiB,GAAG;IAClB,KAAKa,QAAL,CAAc,OAAO;MACnBd,UAAU,EAAE,IADO,EAAP,CAAd;;EAGD;;EAEDG,gBAAgB,QAAuD,KAAtD,EAAEY,EAAF,EAAMC,aAAa,EAAEzC,KAArB,EAA4B0C,cAAc,EAAEC,MAA5C,EAAsD;IACrE,KAAKpB,KAAL,CAAWzB,eAAX,CAA2B,EAAE0C,EAAF,EAAMxC,KAAN,EAAa2C,MAAb,EAA3B;;IAEA,KAAKJ,QAAL,CAAc,OAAO;MACnBd,UAAU,EAAE,KADO,EAAP,CAAd;;EAGD;;EAEDI,uBAAuB,CAACe,UAAD,EAAa;IAClC,IAAIA,UAAJ,EAAgB;MACd,KAAKrB,KAAL,CAAW5B,mBAAX,CAA+B;QAC7B,GAAGiD,UAD0B;QAE7BC,WAAW,EAAE;UACX,GAAGD,UAAU,CAACC,WADH;UAEX;UACAC,KAAK,EAAE,CAHI,EAFgB,EAA/B;;;IAQD;EACF;;EAEDd,eAAe,QAAqB,KAApB,EAAEe,cAAF,EAAoB;IAClC,KAAKxB,KAAL,CAAWxB,oBAAX,CAAgCgD,cAAhC;EACD;;EAEDC,MAAM,GAAG;IACP,MAAM;MACJtD,aADI;MAEJC,mBAFI;MAGJN,KAHI;MAIJW,KAJI;MAKJH,kBALI;MAMJL,QANI;MAOJyD,OAPI;MAQJC,WARI;MASJjD,WATI;IAUF,KAAKsB,KAVT;IAWA,MAAM4B,qBAAqB;IACzB,CAACnD,KAAK,GAAGf,gBAAT,IAA6BC,iBAD/B;;IAGA,MAAMkE,WAAW,GAAGD,qBAAqB,GAAGlE,gBAA5C;IACA,MAAM,EAAEwC,UAAF,KAAiB,KAAKD,KAA5B;;IAEA,MAAM6B,uBAAuB,GAAG,CAAA3D,aAAa,QAAb,qCAAAA,aAAa,CAAE4D,QAAf,2CAAyBC,MAAzB,MAAoC,CAApE;IACA,MAAMC,kCAAkC;IACtCH,uBAAuB,IAAI3D,aAAa,CAAC+D,IAAd,KAAuBtE,QADpD;;IAGA,MAAMuE,mBAAmB,GAAGlE,QAAQ;IAClC,cAAC,aAAD;MACE,KAAK,EAAEZ,CAAC,CAAC,sDAAD,CADV;MAEE,WAAW,EAAEA,CAAC;MACZ,6EADY,CAFhB;;MAKE,UAAU;MACR;MACE,qBAAG,SAAS,EAAC,YAAb,GADF;MAEGA,CAAC,CAAC,oBAAD,CAFJ,CANJ;;;MAWE,YAAY,EAAE,MAAM;QAClB+E,MAAM,CAACC,IAAP;QACG,2BAA0B3D,WAAY,EADzC;QAEE,QAFF;QAGE,qBAHF;;MAKD,CAjBH;MAkBE,KAAK,EAAC,WAlBR,GADF;;;;IAuBA,MAAM4D,qBAAqB,GAAGrE,QAAQ;IACpC,cAAC,aAAD;MACE,KAAK,EAAEZ,CAAC,CAAC,sCAAD,CADV;MAEE,WAAW,EAAEA,CAAC;MACX,6EADW,CAFhB;;MAKE,UAAU;MACR;MACE,qBAAG,SAAS,EAAC,YAAb,GADF;MAEGA,CAAC,CAAC,oBAAD,CAFJ,CANJ;;;MAWE,YAAY,EAAE,MAAM;QAClB+E,MAAM,CAACC,IAAP;QACG,2BAA0B3D,WAAY,EADzC;QAEE,QAFF;QAGE,qBAHF;;MAKD,CAjBH;MAkBE,KAAK,EAAC,WAlBR,GADoC;;;IAsBpC,cAAC,aAAD;MACE,KAAK,EAAErB,CAAC,CAAC,2CAAD,CADV;MAEE,WAAW;MACTqE,OAAO,IAAIrE,CAAC,CAAC,8CAAD,CAHhB;;MAKE,UAAU,EAAEqE,OAAO,IAAIrE,CAAC,CAAC,oBAAD,CAL1B;MAME,YAAY;MACVqE,OAAO;MACN,MAAM;QACLC,WAAW,CAAC,IAAD,CAAX;MACD,CAHM,CAPX;;MAYE,KAAK,EAAC,WAZR,GAtBF;;;;IAsCA,OAAOlD,KAAK,GAAG,GAAR,GAAc,IAAd;IACL;IACGqD,uBAAuB;IACtB,cAAC,4BAAD;IACGG,kCAAkC;IAC/BK,qBAD+B;IAE/BH,mBAHN,CAFJ;;;IAQE,uBAAK,SAAS,EAAC,gBAAf,EAAgC,GAAG,EAAE,KAAK3B,UAA1C;IACE,cAAC,WAAD,IAAa,SAAS,EAAC,cAAvB;;IAEGvC,QAAQ;IACP,cAAC,aAAD;MACE,SAAS,EAAEE,aADb;MAEE,KAAK,EAAEL,KAFT;MAGE,eAAe,EAAE,IAHnB;MAIE,KAAK,EAAE,CAJT;MAKE,WAAW,EAAC,QALd;MAME,MAAM,EAAE,KAAKwC,uBANf;MAOE,SAAS,EAAC,kBAPZ;MAQE,QAAQ,MARV;;IAUG1B,4BAVH,CAHJ;;;IAgBGT,aAhBH,8CAgBGA,aAAa,CAAE4D,QAhBlB,qBAgBG,uBAAyBQ,GAAzB,CAA6B,CAACtB,EAAD,EAAKM,KAAL;IAC5B,cAAC,kBAAD;MACE,GAAG,EAAEN,EADP;MAEE,EAAE,EAAEA,EAFN;MAGE,QAAQ,EAAE9C,aAAa,CAAC8C,EAH1B;MAIE,KAAK,EAAEnD,KAAK,GAAG,CAJjB;MAKE,KAAK,EAAEyD,KALT;MAME,oBAAoB,EAAE5D,iBANxB;MAOE,WAAW,EAAEkE,WAPf;MAQE,kBAAkB,EAAEvD,kBARtB;MASE,aAAa,EAAE,KAAK6B,iBATtB;MAUE,QAAQ,EAAE,KAAKqC,YAVjB;MAWE,YAAY,EAAE,KAAKnC,gBAXrB;MAYE,WAAW,EAAE,KAAKI,eAZpB,GADD,CAhBH;;;;IAiCGxC,QAAQ,IAAI,CAAAE,aAAa,QAAb,sCAAAA,aAAa,CAAE4D,QAAf,4CAAyBC,MAAzB,IAAkC,CAA9C;IACC,cAAC,aAAD;MACE,SAAS,EAAE7D,aADb;MAEE,KAAK,EAAEL,KAFT;MAGE,eAAe,EAAE,IAHnB;MAIE,KAAK,EAAEK,aAAa,CAAC4D,QAAd,CAAuBC,MAJhC;MAKE,WAAW,EAAC,QALd;MAME,MAAM,EAAE5D,mBANV;MAOE,SAAS,EAAC,kBAPZ;MAQE,QAAQ,MARV;;IAUGW,yBAVH,CAlCJ;;;IA+CGmB,UAAU;IACTuC,KAAK,CAAC9E,iBAAD,CAAL;IACG+E,IADH,CACQ,IADR;IAEGH,GAFH,CAEO,CAACI,CAAD,EAAIC,CAAJ;IACH,cAAC,eAAD;MACE,GAAG,EAAG,eAAcA,CAAE,EADxB;MAEE,SAAS,EAAC,mBAFZ;MAGE,KAAK,EAAE;QACLC,IAAI,EAAED,CAAC,GAAGlF,gBAAJ,GAAuBkF,CAAC,GAAGf,WAD5B;QAELpD,KAAK,EAAEoD,WAFF,EAHT,GAHJ,CAhDJ,CADF,CARF,CADF;;;;;;;;EA0ED,CA1N6C;;;AA6NhDhC,aAAa,CAAChC,SAAd,GAA0BA,SAA1B;AACAgC,aAAa,CAAClB,YAAd,GAA6BA,YAA7B;;AAEA,eAAekB,aAAf"},"metadata":{},"sourceType":"module"}