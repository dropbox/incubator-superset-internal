{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { Form } from 'src/components/Form';\nimport { accessTokenField, databaseField, displayField, forceSSLField, hostField, httpPath, passwordField, portField, queryField, usernameField } from './CommonParameters';\nimport { validatedInputField } from './ValidatedInputField';\nimport { EncryptedField } from './EncryptedField';\nimport { TableCatalog } from './TableCatalog';\nimport { formScrollableStyles, validatedFormStyles } from '../styles';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport const FormFieldOrder = [\n'host',\n'port',\n'database',\n'username',\n'password',\n'access_token',\n'http_path',\n'database_name',\n'credentials_info',\n'service_account_info',\n'catalog',\n'query',\n'encryption',\n'account',\n'warehouse',\n'role'];\n\nconst FORM_FIELD_MAP = {\n  host: hostField,\n  http_path: httpPath,\n  port: portField,\n  database: databaseField,\n  username: usernameField,\n  password: passwordField,\n  access_token: accessTokenField,\n  database_name: displayField,\n  query: queryField,\n  encryption: forceSSLField,\n  credentials_info: EncryptedField,\n  service_account_info: EncryptedField,\n  catalog: TableCatalog,\n  warehouse: validatedInputField,\n  role: validatedInputField,\n  account: validatedInputField };\n\nconst DatabaseConnectionForm = (_ref) => {let { dbModel: { parameters }, db, editNewDb, getPlaceholder, getValidation, isEditMode = false, onAddTableCatalog, onChange, onExtraInputChange, onParametersChange, onParametersUploadFileChange, onQueryChange, onRemoveTableCatalog, sslForced, validationErrors } = _ref;return ___EmotionJSX(Form, null,\n  ___EmotionJSX(\"div\", {\n    // @ts-ignore\n    css: (theme) => [\n    formScrollableStyles,\n    validatedFormStyles(theme)] },\n\n  parameters &&\n  FormFieldOrder.filter((key) => {var _context;return _includesInstanceProperty(_context = Object.keys(parameters.properties)).call(_context, key) ||\n    key === 'database_name';}).map((field) => {var _parameters$required;return FORM_FIELD_MAP[field]({\n      required: (_parameters$required = parameters.required) == null ? void 0 : _includesInstanceProperty(_parameters$required).call(_parameters$required, field),\n      changeMethods: {\n        onParametersChange,\n        onChange,\n        onQueryChange,\n        onParametersUploadFileChange,\n        onAddTableCatalog,\n        onRemoveTableCatalog,\n        onExtraInputChange },\n\n      validationErrors,\n      getValidation,\n      db,\n      key: field,\n      field,\n      isEditMode,\n      sslForced,\n      editNewDb,\n      placeholder: getPlaceholder ? getPlaceholder(field) : undefined });})));};\n\n\n\nexport const FormFieldMap = FORM_FIELD_MAP;const _default =\nDatabaseConnectionForm;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(FormFieldOrder, \"FormFieldOrder\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/features/databases/DatabaseModal/DatabaseConnectionForm/index.tsx\");reactHotLoader.register(FORM_FIELD_MAP, \"FORM_FIELD_MAP\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/features/databases/DatabaseModal/DatabaseConnectionForm/index.tsx\");reactHotLoader.register(DatabaseConnectionForm, \"DatabaseConnectionForm\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/features/databases/DatabaseModal/DatabaseConnectionForm/index.tsx\");reactHotLoader.register(FormFieldMap, \"FormFieldMap\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/features/databases/DatabaseModal/DatabaseConnectionForm/index.tsx\");reactHotLoader.register(_default, \"default\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/features/databases/DatabaseModal/DatabaseConnectionForm/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"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","names":["React","Form","accessTokenField","databaseField","displayField","forceSSLField","hostField","httpPath","passwordField","portField","queryField","usernameField","validatedInputField","EncryptedField","TableCatalog","formScrollableStyles","validatedFormStyles","FormFieldOrder","FORM_FIELD_MAP","host","http_path","port","database","username","password","access_token","database_name","query","encryption","credentials_info","service_account_info","catalog","warehouse","role","account","DatabaseConnectionForm","dbModel","parameters","db","editNewDb","getPlaceholder","getValidation","isEditMode","onAddTableCatalog","onChange","onExtraInputChange","onParametersChange","onParametersUploadFileChange","onQueryChange","onRemoveTableCatalog","sslForced","validationErrors","theme","filter","key","keys","properties","map","field","required","changeMethods","placeholder","undefined","FormFieldMap"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/features/databases/DatabaseModal/DatabaseConnectionForm/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { FormEvent } from 'react';\nimport { SupersetTheme, JsonObject } from '@superset-ui/core';\nimport { InputProps } from 'antd/lib/input';\nimport { Form } from 'src/components/Form';\nimport {\n  accessTokenField,\n  databaseField,\n  displayField,\n  forceSSLField,\n  hostField,\n  httpPath,\n  passwordField,\n  portField,\n  queryField,\n  usernameField,\n} from './CommonParameters';\nimport { validatedInputField } from './ValidatedInputField';\nimport { EncryptedField } from './EncryptedField';\nimport { TableCatalog } from './TableCatalog';\nimport { formScrollableStyles, validatedFormStyles } from '../styles';\nimport { DatabaseForm, DatabaseObject } from '../../types';\n\nexport const FormFieldOrder = [\n  'host',\n  'port',\n  'database',\n  'username',\n  'password',\n  'access_token',\n  'http_path',\n  'database_name',\n  'credentials_info',\n  'service_account_info',\n  'catalog',\n  'query',\n  'encryption',\n  'account',\n  'warehouse',\n  'role',\n];\n\nexport interface FieldPropTypes {\n  required: boolean;\n  hasTooltip?: boolean;\n  tooltipText?: (value: any) => string;\n  placeholder?: string;\n  onParametersChange: (value: any) => string;\n  onParametersUploadFileChange: (value: any) => string;\n  changeMethods: { onParametersChange: (value: any) => string } & {\n    onChange: (value: any) => string;\n  } & {\n    onQueryChange: (value: any) => string;\n  } & { onParametersUploadFileChange: (value: any) => string } & {\n    onAddTableCatalog: () => void;\n    onRemoveTableCatalog: (idx: number) => void;\n  } & {\n    onExtraInputChange: (value: any) => void;\n    onSSHTunnelParametersChange: (value: any) => string;\n  };\n  validationErrors: JsonObject | null;\n  getValidation: () => void;\n  db?: DatabaseObject;\n  field: string;\n  isEditMode?: boolean;\n  sslForced?: boolean;\n  defaultDBName?: string;\n  editNewDb?: boolean;\n}\n\nconst FORM_FIELD_MAP = {\n  host: hostField,\n  http_path: httpPath,\n  port: portField,\n  database: databaseField,\n  username: usernameField,\n  password: passwordField,\n  access_token: accessTokenField,\n  database_name: displayField,\n  query: queryField,\n  encryption: forceSSLField,\n  credentials_info: EncryptedField,\n  service_account_info: EncryptedField,\n  catalog: TableCatalog,\n  warehouse: validatedInputField,\n  role: validatedInputField,\n  account: validatedInputField,\n};\n\ninterface DatabaseConnectionFormProps {\n  isEditMode?: boolean;\n  sslForced: boolean;\n  editNewDb?: boolean;\n  dbModel: DatabaseForm;\n  db: Partial<DatabaseObject> | null;\n  onParametersChange: (\n    event: FormEvent<InputProps> | { target: HTMLInputElement },\n  ) => void;\n  onChange: (\n    event: FormEvent<InputProps> | { target: HTMLInputElement },\n  ) => void;\n  onQueryChange: (\n    event: FormEvent<InputProps> | { target: HTMLInputElement },\n  ) => void;\n  onParametersUploadFileChange?: (\n    event: FormEvent<InputProps> | { target: HTMLInputElement },\n  ) => void;\n  onExtraInputChange: (\n    event: FormEvent<InputProps> | { target: HTMLInputElement },\n  ) => void;\n  onAddTableCatalog: () => void;\n  onRemoveTableCatalog: (idx: number) => void;\n  validationErrors: JsonObject | null;\n  getValidation: () => void;\n  getPlaceholder?: (field: string) => string | undefined;\n}\n\nconst DatabaseConnectionForm = ({\n  dbModel: { parameters },\n  db,\n  editNewDb,\n  getPlaceholder,\n  getValidation,\n  isEditMode = false,\n  onAddTableCatalog,\n  onChange,\n  onExtraInputChange,\n  onParametersChange,\n  onParametersUploadFileChange,\n  onQueryChange,\n  onRemoveTableCatalog,\n  sslForced,\n  validationErrors,\n}: DatabaseConnectionFormProps) => (\n  <Form>\n    <div\n      // @ts-ignore\n      css={(theme: SupersetTheme) => [\n        formScrollableStyles,\n        validatedFormStyles(theme),\n      ]}\n    >\n      {parameters &&\n        FormFieldOrder.filter(\n          (key: string) =>\n            Object.keys(parameters.properties).includes(key) ||\n            key === 'database_name',\n        ).map(field =>\n          FORM_FIELD_MAP[field]({\n            required: parameters.required?.includes(field),\n            changeMethods: {\n              onParametersChange,\n              onChange,\n              onQueryChange,\n              onParametersUploadFileChange,\n              onAddTableCatalog,\n              onRemoveTableCatalog,\n              onExtraInputChange,\n            },\n            validationErrors,\n            getValidation,\n            db,\n            key: field,\n            field,\n            isEditMode,\n            sslForced,\n            editNewDb,\n            placeholder: getPlaceholder ? getPlaceholder(field) : undefined,\n          }),\n        )}\n    </div>\n  </Form>\n);\nexport const FormFieldMap = FORM_FIELD_MAP;\n\nexport default DatabaseConnectionForm;\n"]},"metadata":{},"sourceType":"module"}