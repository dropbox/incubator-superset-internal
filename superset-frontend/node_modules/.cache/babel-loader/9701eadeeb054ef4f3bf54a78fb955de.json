{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { createRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport shortid from 'shortid';\nimport Alert from 'src/components/Alert';\nimport Tabs from 'src/components/Tabs';\nimport { EmptyStateMedium } from 'src/components/EmptyState';\nimport { FeatureFlag, styled, t, isFeatureEnabled } from '@superset-ui/core';\nimport { setActiveSouthPaneTab } from 'src/SqlLab/actions/sqlLab';\nimport Label from 'src/components/Label';\nimport QueryHistory from '../QueryHistory';\nimport ResultSet from '../ResultSet';\nimport { STATUS_OPTIONS, STATE_TYPE_MAP, LOCALSTORAGE_MAX_QUERY_AGE_MS, STATUS_OPTIONS_LOCALIZED } from '../../constants';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst TAB_HEIGHT = 140;\nconst StyledPane = styled.div`\n  width: 100%;\n  height: ${(props) => props.height}px;\n  .ant-tabs .ant-tabs-content-holder {\n    overflow: visible;\n  }\n  .SouthPaneTabs {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    .scrollable {\n      overflow-y: auto;\n    }\n  }\n  .ant-tabs-tabpane {\n    .scrollable {\n      overflow-y: auto;\n    }\n  }\n  .tab-content {\n    .alert {\n      margin-top: ${(_ref) => {let { theme } = _ref;return theme.gridUnit * 2;}}px;\n    }\n\n    button.fetch {\n      margin-top: ${(_ref2) => {let { theme } = _ref2;return theme.gridUnit * 2;}}px;\n    }\n  }\n`;\nconst EXTRA_HEIGHT_RESULTS = 24; // we need extra height in RESULTS tab. because the height from props was calculated based on PREVIEW tab.\nconst StyledEmptyStateWrapper = styled.div`\n  height: 100%;\n  .ant-empty-image img {\n    margin-right: 28px;\n  }\n\n  p {\n    margin-right: 28px;\n  }\n`;\nconst SouthPane = (_ref3) => {var _useSelector;let { queryEditorId, latestQueryId, height, displayLimit, defaultQueryLimit } = _ref3;\n  const dispatch = useDispatch();\n  const { editorQueries, dataPreviewQueries, databases, offline, user } = useSelector((_ref4) => {let { sqlLab } = _ref4;\n    const { databases, offline, user, queries, tables } = sqlLab;\n    const dataPreviewQueries = tables.\n    filter((_ref5) => {let { dataPreviewQueryId, queryEditorId: qeId } = _ref5;return dataPreviewQueryId &&\n      queryEditorId === qeId &&\n      queries[dataPreviewQueryId];}).\n    map((_ref6) => {let { name, dataPreviewQueryId } = _ref6;return {\n        ...queries[dataPreviewQueryId],\n        tableName: name };});\n\n    const editorQueries = Object.values(queries).filter((_ref7) => {let { sqlEditorId } = _ref7;return sqlEditorId === queryEditorId;});\n    return {\n      editorQueries,\n      dataPreviewQueries,\n      databases,\n      offline: offline != null ? offline : false,\n      user };\n\n  });\n  const activeSouthPaneTab = (_useSelector = useSelector((state) => state.sqlLab.activeSouthPaneTab)) != null ? _useSelector : 'Results';\n  const innerTabContentHeight = height - TAB_HEIGHT;\n  const southPaneRef = /*#__PURE__*/createRef();\n  const switchTab = (id) => {\n    dispatch(setActiveSouthPaneTab(id));\n  };\n  const renderOfflineStatus = () => ___EmotionJSX(Label, { className: \"m-r-3\", type: STATE_TYPE_MAP[STATUS_OPTIONS.offline] },\n  STATUS_OPTIONS_LOCALIZED.offline);\n\n  const renderResults = () => {\n    let latestQuery;\n    if (editorQueries.length > 0) {\n      // get the latest query\n      latestQuery = editorQueries.find((_ref8) => {let { id } = _ref8;return id === latestQueryId;});\n    }\n    let results;\n    if (latestQuery) {var _latestQuery, _latestQuery$extra;\n      if ((_latestQuery = latestQuery) != null && (_latestQuery$extra = _latestQuery.extra) != null && _latestQuery$extra.errors) {\n        latestQuery.errors = latestQuery.extra.errors;\n      }\n      if (isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) &&\n      latestQuery.state === 'success' &&\n      !latestQuery.resultsKey &&\n      !latestQuery.results) {\n        results = ___EmotionJSX(Alert, { type: \"warning\", message: t('No stored results found, you need to re-run your query') });\n        return results;\n      }\n      if (Date.now() - latestQuery.startDttm <= LOCALSTORAGE_MAX_QUERY_AGE_MS) {\n        results = ___EmotionJSX(ResultSet, { search: true, query: latestQuery, user: user, height: innerTabContentHeight + EXTRA_HEIGHT_RESULTS, database: databases[latestQuery.dbId], displayLimit: displayLimit, defaultQueryLimit: defaultQueryLimit });\n      }\n    } else\n    {\n      results = ___EmotionJSX(StyledEmptyStateWrapper, null,\n      ___EmotionJSX(EmptyStateMedium, { title: t('Run a query to display results'), image: \"document.svg\" }));\n\n    }\n    return results;\n  };\n  const renderDataPreviewTabs = () => dataPreviewQueries.map((query) => ___EmotionJSX(Tabs.TabPane, { tab: t('Preview: `%s`', decodeURIComponent(query.tableName)), key: query.id },\n  ___EmotionJSX(ResultSet, { query: query, visualize: false, csv: false, cache: true, user: user, height: innerTabContentHeight, displayLimit: displayLimit, defaultQueryLimit: defaultQueryLimit })));\n\n  return offline ? renderOfflineStatus() : ___EmotionJSX(StyledPane, { className: \"SouthPane\", height: height, ref: southPaneRef },\n  ___EmotionJSX(Tabs, { activeKey: activeSouthPaneTab, className: \"SouthPaneTabs\", onChange: switchTab, id: shortid.generate(), fullWidth: false, animated: false },\n  ___EmotionJSX(Tabs.TabPane, { tab: t('Results'), key: \"Results\" },\n  renderResults()),\n\n  ___EmotionJSX(Tabs.TabPane, { tab: t('Query history'), key: \"History\" },\n  ___EmotionJSX(QueryHistory, { queries: editorQueries, displayLimit: displayLimit, latestQueryId: latestQueryId })),\n\n  renderDataPreviewTabs()));\n\n\n};\nexport default SouthPane;","map":{"version":3,"mappings":"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","names":["React","createRef","useDispatch","useSelector","shortid","Alert","Tabs","EmptyStateMedium","FeatureFlag","styled","t","isFeatureEnabled","setActiveSouthPaneTab","Label","QueryHistory","ResultSet","STATUS_OPTIONS","STATE_TYPE_MAP","LOCALSTORAGE_MAX_QUERY_AGE_MS","STATUS_OPTIONS_LOCALIZED","TAB_HEIGHT","StyledPane","div","props","height","theme","gridUnit","EXTRA_HEIGHT_RESULTS","StyledEmptyStateWrapper","SouthPane","queryEditorId","latestQueryId","displayLimit","defaultQueryLimit","dispatch","editorQueries","dataPreviewQueries","databases","offline","user","sqlLab","queries","tables","filter","dataPreviewQueryId","qeId","map","name","tableName","Object","values","sqlEditorId","activeSouthPaneTab","state","innerTabContentHeight","southPaneRef","switchTab","id","renderOfflineStatus","renderResults","latestQuery","length","find","results","extra","errors","SQLLAB_BACKEND_PERSISTENCE","resultsKey","Date","now","startDttm","dbId","renderDataPreviewTabs","decodeURIComponent","query","generate"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/SqlLab/components/SouthPane/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { createRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport shortid from 'shortid';\nimport Alert from 'src/components/Alert';\nimport Tabs from 'src/components/Tabs';\nimport { EmptyStateMedium } from 'src/components/EmptyState';\nimport { FeatureFlag, styled, t, isFeatureEnabled } from '@superset-ui/core';\n\nimport { setActiveSouthPaneTab } from 'src/SqlLab/actions/sqlLab';\n\nimport Label from 'src/components/Label';\nimport { SqlLabRootState } from 'src/SqlLab/types';\nimport QueryHistory from '../QueryHistory';\nimport ResultSet from '../ResultSet';\nimport {\n  STATUS_OPTIONS,\n  STATE_TYPE_MAP,\n  LOCALSTORAGE_MAX_QUERY_AGE_MS,\n  STATUS_OPTIONS_LOCALIZED,\n} from '../../constants';\n\nconst TAB_HEIGHT = 140;\n\n/*\n    editorQueries are queries executed by users passed from SqlEditor component\n    dataPreviewQueries are all queries executed for preview of table data (from SqlEditorLeft)\n*/\nexport interface SouthPaneProps {\n  queryEditorId: string;\n  latestQueryId?: string;\n  height: number;\n  displayLimit: number;\n  defaultQueryLimit: number;\n}\n\ntype StyledPaneProps = {\n  height: number;\n};\n\nconst StyledPane = styled.div<StyledPaneProps>`\n  width: 100%;\n  height: ${props => props.height}px;\n  .ant-tabs .ant-tabs-content-holder {\n    overflow: visible;\n  }\n  .SouthPaneTabs {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    .scrollable {\n      overflow-y: auto;\n    }\n  }\n  .ant-tabs-tabpane {\n    .scrollable {\n      overflow-y: auto;\n    }\n  }\n  .tab-content {\n    .alert {\n      margin-top: ${({ theme }) => theme.gridUnit * 2}px;\n    }\n\n    button.fetch {\n      margin-top: ${({ theme }) => theme.gridUnit * 2}px;\n    }\n  }\n`;\n\nconst EXTRA_HEIGHT_RESULTS = 24; // we need extra height in RESULTS tab. because the height from props was calculated based on PREVIEW tab.\nconst StyledEmptyStateWrapper = styled.div`\n  height: 100%;\n  .ant-empty-image img {\n    margin-right: 28px;\n  }\n\n  p {\n    margin-right: 28px;\n  }\n`;\n\nconst SouthPane = ({\n  queryEditorId,\n  latestQueryId,\n  height,\n  displayLimit,\n  defaultQueryLimit,\n}: SouthPaneProps) => {\n  const dispatch = useDispatch();\n\n  const { editorQueries, dataPreviewQueries, databases, offline, user } =\n    useSelector(({ sqlLab }: SqlLabRootState) => {\n      const { databases, offline, user, queries, tables } = sqlLab;\n      const dataPreviewQueries = tables\n        .filter(\n          ({ dataPreviewQueryId, queryEditorId: qeId }) =>\n            dataPreviewQueryId &&\n            queryEditorId === qeId &&\n            queries[dataPreviewQueryId],\n        )\n        .map(({ name, dataPreviewQueryId }) => ({\n          ...queries[dataPreviewQueryId],\n          tableName: name,\n        }));\n      const editorQueries = Object.values(queries).filter(\n        ({ sqlEditorId }) => sqlEditorId === queryEditorId,\n      );\n      return {\n        editorQueries,\n        dataPreviewQueries,\n        databases,\n        offline: offline ?? false,\n        user,\n      };\n    });\n\n  const activeSouthPaneTab =\n    useSelector<SqlLabRootState, string>(\n      state => state.sqlLab.activeSouthPaneTab as string,\n    ) ?? 'Results';\n  const innerTabContentHeight = height - TAB_HEIGHT;\n  const southPaneRef = createRef<HTMLDivElement>();\n  const switchTab = (id: string) => {\n    dispatch(setActiveSouthPaneTab(id));\n  };\n  const renderOfflineStatus = () => (\n    <Label className=\"m-r-3\" type={STATE_TYPE_MAP[STATUS_OPTIONS.offline]}>\n      {STATUS_OPTIONS_LOCALIZED.offline}\n    </Label>\n  );\n\n  const renderResults = () => {\n    let latestQuery;\n    if (editorQueries.length > 0) {\n      // get the latest query\n      latestQuery = editorQueries.find(({ id }) => id === latestQueryId);\n    }\n    let results;\n    if (latestQuery) {\n      if (latestQuery?.extra?.errors) {\n        latestQuery.errors = latestQuery.extra.errors;\n      }\n      if (\n        isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) &&\n        latestQuery.state === 'success' &&\n        !latestQuery.resultsKey &&\n        !latestQuery.results\n      ) {\n        results = (\n          <Alert\n            type=\"warning\"\n            message={t(\n              'No stored results found, you need to re-run your query',\n            )}\n          />\n        );\n        return results;\n      }\n      if (Date.now() - latestQuery.startDttm <= LOCALSTORAGE_MAX_QUERY_AGE_MS) {\n        results = (\n          <ResultSet\n            search\n            query={latestQuery}\n            user={user}\n            height={innerTabContentHeight + EXTRA_HEIGHT_RESULTS}\n            database={databases[latestQuery.dbId]}\n            displayLimit={displayLimit}\n            defaultQueryLimit={defaultQueryLimit}\n          />\n        );\n      }\n    } else {\n      results = (\n        <StyledEmptyStateWrapper>\n          <EmptyStateMedium\n            title={t('Run a query to display results')}\n            image=\"document.svg\"\n          />\n        </StyledEmptyStateWrapper>\n      );\n    }\n    return results;\n  };\n\n  const renderDataPreviewTabs = () =>\n    dataPreviewQueries.map(query => (\n      <Tabs.TabPane\n        tab={t('Preview: `%s`', decodeURIComponent(query.tableName))}\n        key={query.id}\n      >\n        <ResultSet\n          query={query}\n          visualize={false}\n          csv={false}\n          cache\n          user={user}\n          height={innerTabContentHeight}\n          displayLimit={displayLimit}\n          defaultQueryLimit={defaultQueryLimit}\n        />\n      </Tabs.TabPane>\n    ));\n  return offline ? (\n    renderOfflineStatus()\n  ) : (\n    <StyledPane\n      data-test=\"south-pane\"\n      className=\"SouthPane\"\n      height={height}\n      ref={southPaneRef}\n    >\n      <Tabs\n        activeKey={activeSouthPaneTab}\n        className=\"SouthPaneTabs\"\n        onChange={switchTab}\n        id={shortid.generate()}\n        fullWidth={false}\n        animated={false}\n      >\n        <Tabs.TabPane tab={t('Results')} key=\"Results\">\n          {renderResults()}\n        </Tabs.TabPane>\n        <Tabs.TabPane tab={t('Query history')} key=\"History\">\n          <QueryHistory\n            queries={editorQueries}\n            displayLimit={displayLimit}\n            latestQueryId={latestQueryId}\n          />\n        </Tabs.TabPane>\n        {renderDataPreviewTabs()}\n      </Tabs>\n    </StyledPane>\n  );\n};\n\nexport default SouthPane;\n"]},"metadata":{},"sourceType":"module"}