{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable camelcase */\nimport { FeatureFlag } from '@superset-ui/core';\nimport { chart } from 'src/components/Chart/chartReducer';\nimport { initSliceEntities } from 'src/dashboard/reducers/sliceEntities';\nimport { getInitialState as getInitialNativeFilterState } from 'src/dashboard/reducers/nativeFilters';\nimport { applyDefaultFormData } from 'src/explore/store';\nimport { buildActiveFilters } from 'src/dashboard/util/activeDashboardFilters';\nimport { findPermission } from 'src/utils/findPermission';\nimport { canUserEditDashboard } from 'src/dashboard/util/permissionUtils';\nimport {\ngetCrossFiltersConfiguration,\nisCrossFiltersEnabled } from\n'src/dashboard/util/crossFilters';\nimport {\nDASHBOARD_FILTER_SCOPE_GLOBAL,\ndashboardFilter } from\n'src/dashboard/reducers/dashboardFilters';\nimport {\nDASHBOARD_HEADER_ID,\nGRID_DEFAULT_CHART_WIDTH,\nGRID_COLUMN_COUNT,\nDASHBOARD_ROOT_ID } from\n'src/dashboard/util/constants';\nimport {\nDASHBOARD_HEADER_TYPE,\nCHART_TYPE,\nROW_TYPE } from\n'src/dashboard/util/componentTypes';\nimport findFirstParentContainerId from 'src/dashboard/util/findFirstParentContainer';\nimport getEmptyLayout from 'src/dashboard/util/getEmptyLayout';\nimport getFilterConfigsFromFormdata from 'src/dashboard/util/getFilterConfigsFromFormdata';\nimport getLocationHash from 'src/dashboard/util/getLocationHash';\nimport newComponentFactory from 'src/dashboard/util/newComponentFactory';\nimport { TIME_RANGE } from 'src/visualizations/FilterBox/FilterBox';\nimport { URL_PARAMS } from 'src/constants';\nimport { getUrlParam } from 'src/utils/urlUtils';\nimport { ResourceStatus } from 'src/hooks/apiResources/apiResources';\nimport { isFeatureEnabled } from '../../featureFlags';\nimport extractUrlParams from '../util/extractUrlParams';\nimport { updateColorSchema } from './dashboardInfo';\nimport updateComponentParentsList from '../util/updateComponentParentsList';\nimport { FilterBarOrientation } from '../types';\n\nexport const HYDRATE_DASHBOARD = 'HYDRATE_DASHBOARD';\n\nexport const hydrateDashboard =\n(_ref) => {let { history, dashboard, charts, dataMask, activeTabs } = _ref;return (\n    (dispatch, getState) => {\n      const { user, common, dashboardState } = getState();\n      const { metadata, position_data: positionData } = dashboard;\n      const regularUrlParams = extractUrlParams('regular');\n      const reservedUrlParams = extractUrlParams('reserved');\n      const editMode = reservedUrlParams.edit === 'true';\n\n      let preselectFilters = {};\n\n      charts.forEach((chart) => {\n        // eslint-disable-next-line no-param-reassign\n        chart.slice_id = chart.form_data.slice_id;\n      });\n      try {\n        // allow request parameter overwrite dashboard metadata\n        preselectFilters =\n        getUrlParam(URL_PARAMS.preselectFilters) ||\n        JSON.parse(metadata.default_filters);\n      } catch (e) {\n        //\n      }\n\n      if (metadata != null && metadata.shared_label_colors) {\n        updateColorSchema(metadata, metadata == null ? void 0 : metadata.shared_label_colors);\n      }\n\n      // Priming the color palette with user's label-color mapping provided in\n      // the dashboard's JSON metadata\n      if (metadata != null && metadata.label_colors) {\n        updateColorSchema(metadata, metadata == null ? void 0 : metadata.label_colors);\n      }\n\n      // new dash: position_json could be {} or null\n      const layout =\n      positionData && Object.keys(positionData).length > 0 ?\n      positionData :\n      getEmptyLayout();\n\n      // create a lookup to sync layout names with slice names\n      const chartIdToLayoutId = {};\n      Object.values(layout).forEach((layoutComponent) => {\n        if (layoutComponent.type === CHART_TYPE) {\n          chartIdToLayoutId[layoutComponent.meta.chartId] = layoutComponent.id;\n        }\n      });\n\n      // find root level chart container node for newly-added slices\n      const parentId = findFirstParentContainerId(layout);\n      const parent = layout[parentId];\n      let newSlicesContainer;\n      let newSlicesContainerWidth = 0;\n\n      const filterScopes = (metadata == null ? void 0 : metadata.filter_scopes) || {};\n\n      const chartQueries = {};\n      const dashboardFilters = {};\n      const slices = {};\n      const sliceIds = new Set();\n      const slicesFromExploreCount = new Map();\n\n      charts.forEach((slice) => {\n        const key = slice.slice_id;\n        const formData = {\n          ...slice.form_data,\n          url_params: {\n            ...slice.form_data.url_params,\n            ...regularUrlParams } };\n\n\n        chartQueries[key] = {\n          ...chart,\n          id: key,\n          form_data: applyDefaultFormData(formData) };\n\n\n        slices[key] = {\n          slice_id: key,\n          slice_url: slice.slice_url,\n          slice_name: slice.slice_name,\n          form_data: slice.form_data,\n          viz_type: slice.form_data.viz_type,\n          datasource: slice.form_data.datasource,\n          description: slice.description,\n          description_markeddown: slice.description_markeddown,\n          owners: slice.owners,\n          modified: slice.modified,\n          changed_on: new Date(slice.changed_on).getTime() };\n\n\n        sliceIds.add(key);\n\n        // if there are newly added slices from explore view, fill slices into 1 or more rows\n        if (!chartIdToLayoutId[key] && layout[parentId]) {var _slicesFromExploreCou;\n          if (\n          newSlicesContainerWidth === 0 ||\n          newSlicesContainerWidth + GRID_DEFAULT_CHART_WIDTH > GRID_COLUMN_COUNT)\n          {\n            newSlicesContainer = newComponentFactory(\n            ROW_TYPE,\n            (parent.parents || []).slice());\n\n            layout[newSlicesContainer.id] = newSlicesContainer;\n            parent.children.push(newSlicesContainer.id);\n            newSlicesContainerWidth = 0;\n          }\n\n          const chartHolder = newComponentFactory(\n          CHART_TYPE,\n          {\n            chartId: slice.slice_id },\n\n          (newSlicesContainer.parents || []).slice());\n\n\n          const count = ((_slicesFromExploreCou = slicesFromExploreCount.get(slice.slice_id)) != null ? _slicesFromExploreCou : 0) + 1;\n          chartHolder.id = `${CHART_TYPE}-explore-${slice.slice_id}-${count}`;\n          slicesFromExploreCount.set(slice.slice_id, count);\n\n          layout[chartHolder.id] = chartHolder;\n          newSlicesContainer.children.push(chartHolder.id);\n          chartIdToLayoutId[chartHolder.meta.chartId] = chartHolder.id;\n          newSlicesContainerWidth += GRID_DEFAULT_CHART_WIDTH;\n        }\n\n        // build DashboardFilters for interactive filter features\n        if (slice.form_data.viz_type === 'filter_box') {var _context;\n          const configs = getFilterConfigsFromFormdata(slice.form_data);\n          let { columns } = configs;\n          const { labels } = configs;\n          if (preselectFilters[key]) {\n            Object.keys(columns).forEach((col) => {\n              if (preselectFilters[key][col]) {\n                columns = {\n                  ...columns,\n                  [col]: preselectFilters[key][col] };\n\n              }\n            });\n          }\n\n          const scopesByChartId = Object.keys(columns).reduce((map, column) => {\n            const scopeSettings = {\n              ...filterScopes[key] };\n\n            const { scope, immune } = {\n              ...DASHBOARD_FILTER_SCOPE_GLOBAL,\n              ...scopeSettings[column] };\n\n\n            return {\n              ...map,\n              [column]: {\n                scope,\n                immune } };\n\n\n          }, {});\n\n          const componentId = chartIdToLayoutId[key];\n          const directPathToFilter = (layout[componentId].parents || []).slice();\n          directPathToFilter.push(componentId);\n          dashboardFilters[key] = {\n            ...dashboardFilter,\n            chartId: key,\n            componentId,\n            datasourceId: slice.form_data.datasource,\n            filterName: slice.slice_name,\n            directPathToFilter,\n            columns,\n            labels,\n            scopes: scopesByChartId,\n            isDateFilter: _includesInstanceProperty(_context = Object.keys(columns)).call(_context, TIME_RANGE) };\n\n        }\n\n        // sync layout names with current slice names in case a slice was edited\n        // in explore since the layout was updated. name updates go through layout for undo/redo\n        // functionality and python updates slice names based on layout upon dashboard save\n        const layoutId = chartIdToLayoutId[key];\n        if (layoutId && layout[layoutId]) {\n          layout[layoutId].meta.sliceName = slice.slice_name;\n        }\n      });\n\n      // make sure that parents tree is built\n      if (\n      Object.values(layout).some(\n      (element) => element.id !== DASHBOARD_ROOT_ID && !element.parents))\n\n      {\n        updateComponentParentsList({\n          currentComponent: layout[DASHBOARD_ROOT_ID],\n          layout });\n\n      }\n\n      buildActiveFilters({\n        dashboardFilters,\n        components: layout });\n\n\n      // store the header as a layout component so we can undo/redo changes\n      layout[DASHBOARD_HEADER_ID] = {\n        id: DASHBOARD_HEADER_ID,\n        type: DASHBOARD_HEADER_TYPE,\n        meta: {\n          text: dashboard.dashboard_title } };\n\n\n\n      const dashboardLayout = {\n        past: [],\n        present: layout,\n        future: [] };\n\n\n      // Searches for a focused_chart parameter in the URL to automatically focus a chart\n      const focusedChartId = getUrlParam(URL_PARAMS.dashboardFocusedChart);\n      let focusedChartLayoutId;\n      if (focusedChartId) {\n        // Converts focused_chart to dashboard layout id\n        const found = Object.values(dashboardLayout.present).find(\n        (element) => {var _element$meta;return ((_element$meta = element.meta) == null ? void 0 : _element$meta.chartId) === focusedChartId;});\n\n        focusedChartLayoutId = found == null ? void 0 : found.id;\n        // Removes the focused_chart parameter from the URL\n        const params = new URLSearchParams(window.location.search);\n        params.delete(URL_PARAMS.dashboardFocusedChart.name);\n        history.replace({\n          search: params.toString() });\n\n      }\n\n      // find direct link component and path from root\n      const directLinkComponentId = focusedChartLayoutId || getLocationHash();\n      let directPathToChild = dashboardState.directPathToChild || [];\n      if (layout[directLinkComponentId]) {\n        directPathToChild = (layout[directLinkComponentId].parents || []).slice();\n        directPathToChild.push(directLinkComponentId);\n      }\n\n      const nativeFilters = getInitialNativeFilterState({\n        filterConfig: (metadata == null ? void 0 : metadata.native_filter_configuration) || [] });\n\n\n      if (isFeatureEnabled(FeatureFlag.DASHBOARD_CROSS_FILTERS)) {\n        const { chartConfiguration, globalChartConfiguration } =\n        getCrossFiltersConfiguration(\n        dashboardLayout.present,\n        metadata,\n        chartQueries);\n\n        metadata.chart_configuration = chartConfiguration;\n        metadata.global_chart_configuration = globalChartConfiguration;\n      }\n\n      const { roles } = user;\n      const canEdit = canUserEditDashboard(dashboard, user);\n      const crossFiltersEnabled = isCrossFiltersEnabled(\n      metadata.cross_filters_enabled);\n\n\n      return dispatch({\n        type: HYDRATE_DASHBOARD,\n        data: {\n          sliceEntities: { ...initSliceEntities, slices, isLoading: false },\n          charts: chartQueries,\n          // read-only data\n          dashboardInfo: {\n            ...dashboard,\n            metadata,\n            userId: user.userId ? String(user.userId) : null, // legacy, please use state.user instead\n            dash_edit_perm: canEdit,\n            dash_save_perm: findPermission('can_save_dash', 'Superset', roles),\n            dash_share_perm: findPermission(\n            'can_share_dashboard',\n            'Superset',\n            roles),\n\n            superset_can_explore: findPermission(\n            'can_explore',\n            'Superset',\n            roles),\n\n            superset_can_share: findPermission(\n            'can_share_chart',\n            'Superset',\n            roles),\n\n            superset_can_csv: findPermission('can_csv', 'Superset', roles),\n            slice_can_edit: findPermission('can_slice', 'Superset', roles),\n            common: {\n              // legacy, please use state.common instead\n              flash_messages: common == null ? void 0 : common.flash_messages,\n              conf: common == null ? void 0 : common.conf },\n\n            filterBarOrientation:\n            isFeatureEnabled(FeatureFlag.HORIZONTAL_FILTER_BAR) &&\n            metadata.filter_bar_orientation ||\n            FilterBarOrientation.VERTICAL,\n            crossFiltersEnabled },\n\n          dataMask,\n          dashboardFilters,\n          nativeFilters,\n          dashboardState: {\n            preselectNativeFilters: getUrlParam(URL_PARAMS.nativeFilters),\n            sliceIds: Array.from(sliceIds),\n            directPathToChild,\n            directPathLastUpdated: Date.now(),\n            focusedFilterField: null,\n            expandedSlices: (metadata == null ? void 0 : metadata.expanded_slices) || {},\n            refreshFrequency: (metadata == null ? void 0 : metadata.refresh_frequency) || 0,\n            // dashboard viewers can set refresh frequency for the current visit,\n            // only persistent refreshFrequency will be saved to backend\n            shouldPersistRefreshFrequency: false,\n            css: dashboard.css || '',\n            colorNamespace: (metadata == null ? void 0 : metadata.color_namespace) || null,\n            colorScheme: (metadata == null ? void 0 : metadata.color_scheme) || null,\n            editMode: canEdit && editMode,\n            isPublished: dashboard.published,\n            hasUnsavedChanges: false,\n            dashboardIsSaving: false,\n            maxUndoHistoryExceeded: false,\n            lastModifiedTime: dashboard.changed_on,\n            isRefreshing: false,\n            isFiltersRefreshing: false,\n            activeTabs: activeTabs || (dashboardState == null ? void 0 : dashboardState.activeTabs) || [],\n            datasetsStatus: ResourceStatus.LOADING },\n\n          dashboardLayout } });\n\n\n    });};;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(HYDRATE_DASHBOARD, \"HYDRATE_DASHBOARD\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/actions/hydrate.js\");reactHotLoader.register(hydrateDashboard, \"hydrateDashboard\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/actions/hydrate.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["FeatureFlag","chart","initSliceEntities","getInitialState","getInitialNativeFilterState","applyDefaultFormData","buildActiveFilters","findPermission","canUserEditDashboard","getCrossFiltersConfiguration","isCrossFiltersEnabled","DASHBOARD_FILTER_SCOPE_GLOBAL","dashboardFilter","DASHBOARD_HEADER_ID","GRID_DEFAULT_CHART_WIDTH","GRID_COLUMN_COUNT","DASHBOARD_ROOT_ID","DASHBOARD_HEADER_TYPE","CHART_TYPE","ROW_TYPE","findFirstParentContainerId","getEmptyLayout","getFilterConfigsFromFormdata","getLocationHash","newComponentFactory","TIME_RANGE","URL_PARAMS","getUrlParam","ResourceStatus","isFeatureEnabled","extractUrlParams","updateColorSchema","updateComponentParentsList","FilterBarOrientation","HYDRATE_DASHBOARD","hydrateDashboard","history","dashboard","charts","dataMask","activeTabs","dispatch","getState","user","common","dashboardState","metadata","position_data","positionData","regularUrlParams","reservedUrlParams","editMode","edit","preselectFilters","forEach","slice_id","form_data","JSON","parse","default_filters","e","shared_label_colors","label_colors","layout","Object","keys","length","chartIdToLayoutId","values","layoutComponent","type","meta","chartId","id","parentId","parent","newSlicesContainer","newSlicesContainerWidth","filterScopes","filter_scopes","chartQueries","dashboardFilters","slices","sliceIds","Set","slicesFromExploreCount","Map","slice","key","formData","url_params","slice_url","slice_name","viz_type","datasource","description","description_markeddown","owners","modified","changed_on","Date","getTime","add","parents","children","push","chartHolder","count","get","set","configs","columns","labels","col","scopesByChartId","reduce","map","column","scopeSettings","scope","immune","componentId","directPathToFilter","datasourceId","filterName","scopes","isDateFilter","layoutId","sliceName","some","element","currentComponent","components","text","dashboard_title","dashboardLayout","past","present","future","focusedChartId","dashboardFocusedChart","focusedChartLayoutId","found","find","params","URLSearchParams","window","location","search","delete","name","replace","toString","directLinkComponentId","directPathToChild","nativeFilters","filterConfig","native_filter_configuration","DASHBOARD_CROSS_FILTERS","chartConfiguration","globalChartConfiguration","chart_configuration","global_chart_configuration","roles","canEdit","crossFiltersEnabled","cross_filters_enabled","data","sliceEntities","isLoading","dashboardInfo","userId","String","dash_edit_perm","dash_save_perm","dash_share_perm","superset_can_explore","superset_can_share","superset_can_csv","slice_can_edit","flash_messages","conf","filterBarOrientation","HORIZONTAL_FILTER_BAR","filter_bar_orientation","VERTICAL","preselectNativeFilters","Array","from","directPathLastUpdated","now","focusedFilterField","expandedSlices","expanded_slices","refreshFrequency","refresh_frequency","shouldPersistRefreshFrequency","css","colorNamespace","color_namespace","colorScheme","color_scheme","isPublished","published","hasUnsavedChanges","dashboardIsSaving","maxUndoHistoryExceeded","lastModifiedTime","isRefreshing","isFiltersRefreshing","datasetsStatus","LOADING"],"sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/actions/hydrate.js"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable camelcase */\nimport { FeatureFlag } from '@superset-ui/core';\nimport { chart } from 'src/components/Chart/chartReducer';\nimport { initSliceEntities } from 'src/dashboard/reducers/sliceEntities';\nimport { getInitialState as getInitialNativeFilterState } from 'src/dashboard/reducers/nativeFilters';\nimport { applyDefaultFormData } from 'src/explore/store';\nimport { buildActiveFilters } from 'src/dashboard/util/activeDashboardFilters';\nimport { findPermission } from 'src/utils/findPermission';\nimport { canUserEditDashboard } from 'src/dashboard/util/permissionUtils';\nimport {\n  getCrossFiltersConfiguration,\n  isCrossFiltersEnabled,\n} from 'src/dashboard/util/crossFilters';\nimport {\n  DASHBOARD_FILTER_SCOPE_GLOBAL,\n  dashboardFilter,\n} from 'src/dashboard/reducers/dashboardFilters';\nimport {\n  DASHBOARD_HEADER_ID,\n  GRID_DEFAULT_CHART_WIDTH,\n  GRID_COLUMN_COUNT,\n  DASHBOARD_ROOT_ID,\n} from 'src/dashboard/util/constants';\nimport {\n  DASHBOARD_HEADER_TYPE,\n  CHART_TYPE,\n  ROW_TYPE,\n} from 'src/dashboard/util/componentTypes';\nimport findFirstParentContainerId from 'src/dashboard/util/findFirstParentContainer';\nimport getEmptyLayout from 'src/dashboard/util/getEmptyLayout';\nimport getFilterConfigsFromFormdata from 'src/dashboard/util/getFilterConfigsFromFormdata';\nimport getLocationHash from 'src/dashboard/util/getLocationHash';\nimport newComponentFactory from 'src/dashboard/util/newComponentFactory';\nimport { TIME_RANGE } from 'src/visualizations/FilterBox/FilterBox';\nimport { URL_PARAMS } from 'src/constants';\nimport { getUrlParam } from 'src/utils/urlUtils';\nimport { ResourceStatus } from 'src/hooks/apiResources/apiResources';\nimport { isFeatureEnabled } from '../../featureFlags';\nimport extractUrlParams from '../util/extractUrlParams';\nimport { updateColorSchema } from './dashboardInfo';\nimport updateComponentParentsList from '../util/updateComponentParentsList';\nimport { FilterBarOrientation } from '../types';\n\nexport const HYDRATE_DASHBOARD = 'HYDRATE_DASHBOARD';\n\nexport const hydrateDashboard =\n  ({ history, dashboard, charts, dataMask, activeTabs }) =>\n  (dispatch, getState) => {\n    const { user, common, dashboardState } = getState();\n    const { metadata, position_data: positionData } = dashboard;\n    const regularUrlParams = extractUrlParams('regular');\n    const reservedUrlParams = extractUrlParams('reserved');\n    const editMode = reservedUrlParams.edit === 'true';\n\n    let preselectFilters = {};\n\n    charts.forEach(chart => {\n      // eslint-disable-next-line no-param-reassign\n      chart.slice_id = chart.form_data.slice_id;\n    });\n    try {\n      // allow request parameter overwrite dashboard metadata\n      preselectFilters =\n        getUrlParam(URL_PARAMS.preselectFilters) ||\n        JSON.parse(metadata.default_filters);\n    } catch (e) {\n      //\n    }\n\n    if (metadata?.shared_label_colors) {\n      updateColorSchema(metadata, metadata?.shared_label_colors);\n    }\n\n    // Priming the color palette with user's label-color mapping provided in\n    // the dashboard's JSON metadata\n    if (metadata?.label_colors) {\n      updateColorSchema(metadata, metadata?.label_colors);\n    }\n\n    // new dash: position_json could be {} or null\n    const layout =\n      positionData && Object.keys(positionData).length > 0\n        ? positionData\n        : getEmptyLayout();\n\n    // create a lookup to sync layout names with slice names\n    const chartIdToLayoutId = {};\n    Object.values(layout).forEach(layoutComponent => {\n      if (layoutComponent.type === CHART_TYPE) {\n        chartIdToLayoutId[layoutComponent.meta.chartId] = layoutComponent.id;\n      }\n    });\n\n    // find root level chart container node for newly-added slices\n    const parentId = findFirstParentContainerId(layout);\n    const parent = layout[parentId];\n    let newSlicesContainer;\n    let newSlicesContainerWidth = 0;\n\n    const filterScopes = metadata?.filter_scopes || {};\n\n    const chartQueries = {};\n    const dashboardFilters = {};\n    const slices = {};\n    const sliceIds = new Set();\n    const slicesFromExploreCount = new Map();\n\n    charts.forEach(slice => {\n      const key = slice.slice_id;\n      const formData = {\n        ...slice.form_data,\n        url_params: {\n          ...slice.form_data.url_params,\n          ...regularUrlParams,\n        },\n      };\n      chartQueries[key] = {\n        ...chart,\n        id: key,\n        form_data: applyDefaultFormData(formData),\n      };\n\n      slices[key] = {\n        slice_id: key,\n        slice_url: slice.slice_url,\n        slice_name: slice.slice_name,\n        form_data: slice.form_data,\n        viz_type: slice.form_data.viz_type,\n        datasource: slice.form_data.datasource,\n        description: slice.description,\n        description_markeddown: slice.description_markeddown,\n        owners: slice.owners,\n        modified: slice.modified,\n        changed_on: new Date(slice.changed_on).getTime(),\n      };\n\n      sliceIds.add(key);\n\n      // if there are newly added slices from explore view, fill slices into 1 or more rows\n      if (!chartIdToLayoutId[key] && layout[parentId]) {\n        if (\n          newSlicesContainerWidth === 0 ||\n          newSlicesContainerWidth + GRID_DEFAULT_CHART_WIDTH > GRID_COLUMN_COUNT\n        ) {\n          newSlicesContainer = newComponentFactory(\n            ROW_TYPE,\n            (parent.parents || []).slice(),\n          );\n          layout[newSlicesContainer.id] = newSlicesContainer;\n          parent.children.push(newSlicesContainer.id);\n          newSlicesContainerWidth = 0;\n        }\n\n        const chartHolder = newComponentFactory(\n          CHART_TYPE,\n          {\n            chartId: slice.slice_id,\n          },\n          (newSlicesContainer.parents || []).slice(),\n        );\n\n        const count = (slicesFromExploreCount.get(slice.slice_id) ?? 0) + 1;\n        chartHolder.id = `${CHART_TYPE}-explore-${slice.slice_id}-${count}`;\n        slicesFromExploreCount.set(slice.slice_id, count);\n\n        layout[chartHolder.id] = chartHolder;\n        newSlicesContainer.children.push(chartHolder.id);\n        chartIdToLayoutId[chartHolder.meta.chartId] = chartHolder.id;\n        newSlicesContainerWidth += GRID_DEFAULT_CHART_WIDTH;\n      }\n\n      // build DashboardFilters for interactive filter features\n      if (slice.form_data.viz_type === 'filter_box') {\n        const configs = getFilterConfigsFromFormdata(slice.form_data);\n        let { columns } = configs;\n        const { labels } = configs;\n        if (preselectFilters[key]) {\n          Object.keys(columns).forEach(col => {\n            if (preselectFilters[key][col]) {\n              columns = {\n                ...columns,\n                [col]: preselectFilters[key][col],\n              };\n            }\n          });\n        }\n\n        const scopesByChartId = Object.keys(columns).reduce((map, column) => {\n          const scopeSettings = {\n            ...filterScopes[key],\n          };\n          const { scope, immune } = {\n            ...DASHBOARD_FILTER_SCOPE_GLOBAL,\n            ...scopeSettings[column],\n          };\n\n          return {\n            ...map,\n            [column]: {\n              scope,\n              immune,\n            },\n          };\n        }, {});\n\n        const componentId = chartIdToLayoutId[key];\n        const directPathToFilter = (layout[componentId].parents || []).slice();\n        directPathToFilter.push(componentId);\n        dashboardFilters[key] = {\n          ...dashboardFilter,\n          chartId: key,\n          componentId,\n          datasourceId: slice.form_data.datasource,\n          filterName: slice.slice_name,\n          directPathToFilter,\n          columns,\n          labels,\n          scopes: scopesByChartId,\n          isDateFilter: Object.keys(columns).includes(TIME_RANGE),\n        };\n      }\n\n      // sync layout names with current slice names in case a slice was edited\n      // in explore since the layout was updated. name updates go through layout for undo/redo\n      // functionality and python updates slice names based on layout upon dashboard save\n      const layoutId = chartIdToLayoutId[key];\n      if (layoutId && layout[layoutId]) {\n        layout[layoutId].meta.sliceName = slice.slice_name;\n      }\n    });\n\n    // make sure that parents tree is built\n    if (\n      Object.values(layout).some(\n        element => element.id !== DASHBOARD_ROOT_ID && !element.parents,\n      )\n    ) {\n      updateComponentParentsList({\n        currentComponent: layout[DASHBOARD_ROOT_ID],\n        layout,\n      });\n    }\n\n    buildActiveFilters({\n      dashboardFilters,\n      components: layout,\n    });\n\n    // store the header as a layout component so we can undo/redo changes\n    layout[DASHBOARD_HEADER_ID] = {\n      id: DASHBOARD_HEADER_ID,\n      type: DASHBOARD_HEADER_TYPE,\n      meta: {\n        text: dashboard.dashboard_title,\n      },\n    };\n\n    const dashboardLayout = {\n      past: [],\n      present: layout,\n      future: [],\n    };\n\n    // Searches for a focused_chart parameter in the URL to automatically focus a chart\n    const focusedChartId = getUrlParam(URL_PARAMS.dashboardFocusedChart);\n    let focusedChartLayoutId;\n    if (focusedChartId) {\n      // Converts focused_chart to dashboard layout id\n      const found = Object.values(dashboardLayout.present).find(\n        element => element.meta?.chartId === focusedChartId,\n      );\n      focusedChartLayoutId = found?.id;\n      // Removes the focused_chart parameter from the URL\n      const params = new URLSearchParams(window.location.search);\n      params.delete(URL_PARAMS.dashboardFocusedChart.name);\n      history.replace({\n        search: params.toString(),\n      });\n    }\n\n    // find direct link component and path from root\n    const directLinkComponentId = focusedChartLayoutId || getLocationHash();\n    let directPathToChild = dashboardState.directPathToChild || [];\n    if (layout[directLinkComponentId]) {\n      directPathToChild = (layout[directLinkComponentId].parents || []).slice();\n      directPathToChild.push(directLinkComponentId);\n    }\n\n    const nativeFilters = getInitialNativeFilterState({\n      filterConfig: metadata?.native_filter_configuration || [],\n    });\n\n    if (isFeatureEnabled(FeatureFlag.DASHBOARD_CROSS_FILTERS)) {\n      const { chartConfiguration, globalChartConfiguration } =\n        getCrossFiltersConfiguration(\n          dashboardLayout.present,\n          metadata,\n          chartQueries,\n        );\n      metadata.chart_configuration = chartConfiguration;\n      metadata.global_chart_configuration = globalChartConfiguration;\n    }\n\n    const { roles } = user;\n    const canEdit = canUserEditDashboard(dashboard, user);\n    const crossFiltersEnabled = isCrossFiltersEnabled(\n      metadata.cross_filters_enabled,\n    );\n\n    return dispatch({\n      type: HYDRATE_DASHBOARD,\n      data: {\n        sliceEntities: { ...initSliceEntities, slices, isLoading: false },\n        charts: chartQueries,\n        // read-only data\n        dashboardInfo: {\n          ...dashboard,\n          metadata,\n          userId: user.userId ? String(user.userId) : null, // legacy, please use state.user instead\n          dash_edit_perm: canEdit,\n          dash_save_perm: findPermission('can_save_dash', 'Superset', roles),\n          dash_share_perm: findPermission(\n            'can_share_dashboard',\n            'Superset',\n            roles,\n          ),\n          superset_can_explore: findPermission(\n            'can_explore',\n            'Superset',\n            roles,\n          ),\n          superset_can_share: findPermission(\n            'can_share_chart',\n            'Superset',\n            roles,\n          ),\n          superset_can_csv: findPermission('can_csv', 'Superset', roles),\n          slice_can_edit: findPermission('can_slice', 'Superset', roles),\n          common: {\n            // legacy, please use state.common instead\n            flash_messages: common?.flash_messages,\n            conf: common?.conf,\n          },\n          filterBarOrientation:\n            (isFeatureEnabled(FeatureFlag.HORIZONTAL_FILTER_BAR) &&\n              metadata.filter_bar_orientation) ||\n            FilterBarOrientation.VERTICAL,\n          crossFiltersEnabled,\n        },\n        dataMask,\n        dashboardFilters,\n        nativeFilters,\n        dashboardState: {\n          preselectNativeFilters: getUrlParam(URL_PARAMS.nativeFilters),\n          sliceIds: Array.from(sliceIds),\n          directPathToChild,\n          directPathLastUpdated: Date.now(),\n          focusedFilterField: null,\n          expandedSlices: metadata?.expanded_slices || {},\n          refreshFrequency: metadata?.refresh_frequency || 0,\n          // dashboard viewers can set refresh frequency for the current visit,\n          // only persistent refreshFrequency will be saved to backend\n          shouldPersistRefreshFrequency: false,\n          css: dashboard.css || '',\n          colorNamespace: metadata?.color_namespace || null,\n          colorScheme: metadata?.color_scheme || null,\n          editMode: canEdit && editMode,\n          isPublished: dashboard.published,\n          hasUnsavedChanges: false,\n          dashboardIsSaving: false,\n          maxUndoHistoryExceeded: false,\n          lastModifiedTime: dashboard.changed_on,\n          isRefreshing: false,\n          isFiltersRefreshing: false,\n          activeTabs: activeTabs || dashboardState?.activeTabs || [],\n          datasetsStatus: ResourceStatus.LOADING,\n        },\n        dashboardLayout,\n      },\n    });\n  };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}