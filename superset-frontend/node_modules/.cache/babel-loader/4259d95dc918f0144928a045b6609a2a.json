{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n// mapping { url_param: v1_explore_request_param }\nconst EXPLORE_URL_SEARCH_PARAMS = {\n  form_data: {\n    name: 'form_data',\n    parser: (formData) => {\n      const formDataObject = JSON.parse(formData);\n      if (formDataObject.datasource) {\n        const [datasource_id, datasource_type] = formDataObject.datasource.split('__');\n        formDataObject.datasource_id = datasource_id;\n        formDataObject.datasource_type = datasource_type;\n        delete formDataObject.datasource;\n      }\n      return formDataObject;\n    } },\n\n  slice_id: {\n    name: 'slice_id' },\n\n  datasource_id: {\n    name: 'datasource_id' },\n\n  datasource_type: {\n    name: 'datasource_type' },\n\n  datasource: {\n    name: 'datasource',\n    parser: (datasource) => {\n      const [datasource_id, datasource_type] = datasource.split('__');\n      return { datasource_id, datasource_type };\n    } },\n\n  form_data_key: {\n    name: 'form_data_key' },\n\n  permalink_key: {\n    name: 'permalink_key' },\n\n  viz_type: {\n    name: 'viz_type' },\n\n  dashboard_id: {\n    name: 'dashboard_id' } };\n\n\nconst EXPLORE_URL_PATH_PARAMS = {\n  p: 'permalink_key',\n  table: 'datasource_id' };\n\n// search params can be placed in form_data object\n// we need to \"flatten\" the search params to use them with /v1/explore endpoint\nconst getParsedExploreURLSearchParams = (search) => {\n  const urlSearchParams = new URLSearchParams(search);\n  return Array.from(urlSearchParams.keys()).reduce((acc, currentParam) => {var _EXPLORE_URL_SEARCH_P4;\n    const paramValue = urlSearchParams.get(currentParam);\n    if (paramValue === null) {\n      return acc;\n    }\n    let parsedParamValue;\n    try {var _EXPLORE_URL_SEARCH_P, _EXPLORE_URL_SEARCH_P2, _EXPLORE_URL_SEARCH_P3;\n      parsedParamValue = (_EXPLORE_URL_SEARCH_P = (_EXPLORE_URL_SEARCH_P2 =\n      (_EXPLORE_URL_SEARCH_P3 = EXPLORE_URL_SEARCH_PARAMS[currentParam]).parser) == null ? void 0 : _EXPLORE_URL_SEARCH_P2.call(_EXPLORE_URL_SEARCH_P3, paramValue)) != null ? _EXPLORE_URL_SEARCH_P :\n      paramValue;\n    }\n    catch {\n      parsedParamValue = paramValue;\n    }\n    if (typeof parsedParamValue === 'object') {\n      return { ...acc, ...parsedParamValue };\n    }\n    const key = ((_EXPLORE_URL_SEARCH_P4 = EXPLORE_URL_SEARCH_PARAMS[currentParam]) == null ? void 0 : _EXPLORE_URL_SEARCH_P4.name) || currentParam;\n    return {\n      ...acc,\n      [key]: parsedParamValue };\n\n  }, {});\n};\n// path params need to be transformed to search params to use them with /v1/explore endpoint\nconst getParsedExploreURLPathParams = (pathname) => Object.keys(EXPLORE_URL_PATH_PARAMS).reduce((acc, currentParam) => {\n  const re = new RegExp(`/(${currentParam})/(\\\\w+)`);\n  const pathGroups = pathname.match(re);\n  if (pathGroups != null && pathGroups[2]) {\n    return { ...acc, [EXPLORE_URL_PATH_PARAMS[currentParam]]: pathGroups[2] };\n  }\n  return acc;\n}, {});\nexport const getParsedExploreURLParams = function (location) {if (location === void 0) {location = window.location;}return new URLSearchParams(Object.entries({\n    ...getParsedExploreURLSearchParams(location.search),\n    ...getParsedExploreURLPathParams(location.pathname) }).\n\n  map((entry) => entry.join('=')).\n  join('&'));};","map":{"version":3,"mappings":"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","names":["EXPLORE_URL_SEARCH_PARAMS","form_data","name","parser","formData","formDataObject","JSON","parse","datasource","datasource_id","datasource_type","split","slice_id","form_data_key","permalink_key","viz_type","dashboard_id","EXPLORE_URL_PATH_PARAMS","p","table","getParsedExploreURLSearchParams","search","urlSearchParams","URLSearchParams","Array","from","keys","reduce","acc","currentParam","paramValue","get","parsedParamValue","key","getParsedExploreURLPathParams","pathname","Object","re","RegExp","pathGroups","match","getParsedExploreURLParams","location","window","entries","map","entry","join"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/explore/exploreUtils/getParsedExploreURLParams.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nexport interface Location {\n  search: string;\n  pathname: string;\n}\n\n// mapping { url_param: v1_explore_request_param }\nconst EXPLORE_URL_SEARCH_PARAMS = {\n  form_data: {\n    name: 'form_data',\n    parser: (formData: string) => {\n      const formDataObject = JSON.parse(formData);\n      if (formDataObject.datasource) {\n        const [datasource_id, datasource_type] =\n          formDataObject.datasource.split('__');\n        formDataObject.datasource_id = datasource_id;\n        formDataObject.datasource_type = datasource_type;\n        delete formDataObject.datasource;\n      }\n      return formDataObject;\n    },\n  },\n  slice_id: {\n    name: 'slice_id',\n  },\n  datasource_id: {\n    name: 'datasource_id',\n  },\n  datasource_type: {\n    name: 'datasource_type',\n  },\n  datasource: {\n    name: 'datasource',\n    parser: (datasource: string) => {\n      const [datasource_id, datasource_type] = datasource.split('__');\n      return { datasource_id, datasource_type };\n    },\n  },\n  form_data_key: {\n    name: 'form_data_key',\n  },\n  permalink_key: {\n    name: 'permalink_key',\n  },\n  viz_type: {\n    name: 'viz_type',\n  },\n  dashboard_id: {\n    name: 'dashboard_id',\n  },\n};\n\nconst EXPLORE_URL_PATH_PARAMS = {\n  p: 'permalink_key', // permalink\n  table: 'datasource_id',\n};\n\n// search params can be placed in form_data object\n// we need to \"flatten\" the search params to use them with /v1/explore endpoint\nconst getParsedExploreURLSearchParams = (search: string) => {\n  const urlSearchParams = new URLSearchParams(search);\n  return Array.from(urlSearchParams.keys()).reduce((acc, currentParam) => {\n    const paramValue = urlSearchParams.get(currentParam);\n    if (paramValue === null) {\n      return acc;\n    }\n    let parsedParamValue;\n    try {\n      parsedParamValue =\n        EXPLORE_URL_SEARCH_PARAMS[currentParam].parser?.(paramValue) ??\n        paramValue;\n    } catch {\n      parsedParamValue = paramValue;\n    }\n    if (typeof parsedParamValue === 'object') {\n      return { ...acc, ...parsedParamValue };\n    }\n    const key = EXPLORE_URL_SEARCH_PARAMS[currentParam]?.name || currentParam;\n    return {\n      ...acc,\n      [key]: parsedParamValue,\n    };\n  }, {});\n};\n\n// path params need to be transformed to search params to use them with /v1/explore endpoint\nconst getParsedExploreURLPathParams = (pathname: string) =>\n  Object.keys(EXPLORE_URL_PATH_PARAMS).reduce((acc, currentParam) => {\n    const re = new RegExp(`/(${currentParam})/(\\\\w+)`);\n    const pathGroups = pathname.match(re);\n    if (pathGroups?.[2]) {\n      return { ...acc, [EXPLORE_URL_PATH_PARAMS[currentParam]]: pathGroups[2] };\n    }\n    return acc;\n  }, {});\n\nexport const getParsedExploreURLParams = (\n  location: Location = window.location,\n) =>\n  new URLSearchParams(\n    Object.entries({\n      ...getParsedExploreURLSearchParams(location.search),\n      ...getParsedExploreURLPathParams(location.pathname),\n    })\n      .map(entry => entry.join('='))\n      .join('&'),\n  );\n"]},"metadata":{},"sourceType":"module"}