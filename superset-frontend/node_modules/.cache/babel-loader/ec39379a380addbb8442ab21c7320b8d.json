{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { t, validateNonEmpty } from '@superset-ui/core';\nimport { columnChoices, ColumnOption, formatSelectOptionsForRange, sections } from '@superset-ui/chart-controls';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst config = {\n  controlPanelSections: [\n  sections.legacyRegularTime,\n  {\n    label: t('Event definition'),\n    controlSetRows: [\n    ['entity'],\n    [\n    {\n      name: 'all_columns_x',\n      config: {\n        type: 'SelectControl',\n        label: t('Event Names'),\n        description: t('Columns to display'),\n        mapStateToProps: (state) => ({\n          choices: columnChoices(state == null ? void 0 : state.datasource) }),\n\n        // choices is from `mapStateToProps`\n        default: (control) => {var _control$choices, _control$choices$;return ((_control$choices = control.choices) == null ? void 0 : (_control$choices$ = _control$choices[0]) == null ? void 0 : _control$choices$[0]) || null;},\n        validators: [validateNonEmpty] } }],\n\n\n\n    ['row_limit'],\n    [\n    {\n      name: 'order_by_entity',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Order by entity id'),\n        description: t('Important! Select this if the table is not already sorted by entity id, ' +\n        'else there is no guarantee that all events for each entity are returned.'),\n        default: true } }],\n\n\n\n    [\n    {\n      name: 'min_leaf_node_event_count',\n      config: {\n        type: 'SelectControl',\n        freeForm: false,\n        label: t('Minimum leaf node event count'),\n        default: 1,\n        choices: formatSelectOptionsForRange(1, 10),\n        description: t('Leaf nodes that represent fewer than this number of events will be initially ' +\n        'hidden in the visualization') } }]] },\n\n\n\n\n\n  {\n    label: t('Query'),\n    expanded: true,\n    controlSetRows: [['adhoc_filters']] },\n\n  {\n    label: t('Additional metadata'),\n    controlSetRows: [\n    [\n    {\n      name: 'all_columns',\n      // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n      config: {\n        type: 'SelectControl',\n        multi: true,\n        label: t('Metadata'),\n        default: [],\n        description: t('Select any columns for metadata inspection'),\n        optionRenderer: (c) => ___EmotionJSX(ColumnOption, { showType: true, column: c }),\n        valueRenderer: (c) => ___EmotionJSX(ColumnOption, { column: c }),\n        valueKey: 'column_name',\n        allowAll: true,\n        mapStateToProps: (state) => {var _state$datasource;return {\n            options: ((_state$datasource = state.datasource) == null ? void 0 : _state$datasource.columns) || [] };},\n\n        commaChoosesOption: false,\n        freeForm: true } }]] }],\n\n\n\n\n\n\n  controlOverrides: {\n    entity: {\n      label: t('Entity ID'),\n      description: t('e.g., a \"user id\" column') },\n\n    row_limit: {\n      label: t('Max Events'),\n      description: t('The maximum number of events to return, equivalent to the number of rows') } } };const _default =\n\n\n\nconfig;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(config, \"config\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/legacy-plugin-chart-event-flow/src/controlPanel.tsx\");reactHotLoader.register(_default, \"default\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/legacy-plugin-chart-event-flow/src/controlPanel.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,CAAT,EAAYC,gBAAZ,QAAoC,mBAApC;AACA,SACEC,aADF,EAEEC,YAFF,EAMEC,2BANF,EAOEC,QAPF,QASO,6BATP,C;AAWA,MAAMC,MAAM,GAAuB;EACjCC,oBAAoB,EAAE;EACpBF,QAAQ,CAACG,iBADW;EAEpB;IACEC,KAAK,EAAET,CAAC,CAAC,kBAAD,CADV;IAEEU,cAAc,EAAE;IACd,CAAC,QAAD,CADc;IAEd;IACE;MACEC,IAAI,EAAE,eADR;MAEEL,MAAM,EAAE;QACNM,IAAI,EAAE,eADA;QAENH,KAAK,EAAET,CAAC,CAAC,aAAD,CAFF;QAGNa,WAAW,EAAEb,CAAC,CAAC,oBAAD,CAHR;QAINc,eAAe,EAAE,MAAK,MAAK;UACzBC,OAAO,EAAEb,aAAa,CAACc,KAAD,oBAACA,KAAK,CAAEC,UAAR,CADG,EAAL,CAJhB;;QAON;QACAC,OAAO,EAAE,CAACC,OAAD,qDACP,4BAAO,CAACJ,OAAR,2DAAkB,CAAlB,wCAAuB,CAAvB,MAA6B,IADtB,EARH;QAUNK,UAAU,EAAE,CAACnB,gBAAD,CAVN,EAFV,EADF,CAFc;;;;IAmBd,CAAC,WAAD,CAnBc;IAoBd;IACE;MACEU,IAAI,EAAE,iBADR;MAEEL,MAAM,EAAE;QACNM,IAAI,EAAE,iBADA;QAENH,KAAK,EAAET,CAAC,CAAC,oBAAD,CAFF;QAGNa,WAAW,EAAEb,CAAC,CACZ;QACE,0EAFU,CAHR;QAONkB,OAAO,EAAE,IAPH,EAFV,EADF,CApBc;;;;IAkCd;IACE;MACEP,IAAI,EAAE,2BADR;MAEEL,MAAM,EAAE;QACNM,IAAI,EAAE,eADA;QAENS,QAAQ,EAAE,KAFJ;QAGNZ,KAAK,EAAET,CAAC,CAAC,+BAAD,CAHF;QAINkB,OAAO,EAAE,CAJH;QAKNH,OAAO,EAAEX,2BAA2B,CAAC,CAAD,EAAI,EAAJ,CAL9B;QAMNS,WAAW,EAAEb,CAAC,CACZ;QACE,6BAFU,CANR,EAFV,EADF,CAlCc,CAFlB,EAFoB;;;;;;EAwDpB;IACES,KAAK,EAAET,CAAC,CAAC,OAAD,CADV;IAEEsB,QAAQ,EAAE,IAFZ;IAGEZ,cAAc,EAAE,CAAC,CAAC,eAAD,CAAD,CAHlB,EAxDoB;;EA6DpB;IACED,KAAK,EAAET,CAAC,CAAC,qBAAD,CADV;IAEEU,cAAc,EAAE;IACd;IACE;MACEC,IAAI,EAAE,aADR;MAEE;MACAL,MAAM,EAAE;QACNM,IAAI,EAAE,eADA;QAENW,KAAK,EAAE,IAFD;QAGNd,KAAK,EAAET,CAAC,CAAC,UAAD,CAHF;QAINkB,OAAO,EAAE,EAJH;QAKNL,WAAW,EAAEb,CAAC,CAAC,4CAAD,CALR;QAMNwB,cAAc,EAAE,EAAC,KAAI,cAAC,YAAD,IAAc,QAAQ,MAAtB,EAAuB,MAAM,EAAEC,CAA/B,GANf;QAONC,aAAa,EAAE,EAAC,KAAI,cAAC,YAAD,IAAc,MAAM,EAAED,CAAtB,GAPd;QAQNE,QAAQ,EAAE,aARJ;QASNC,QAAQ,EAAE,IATJ;QAUNd,eAAe,EAAE,MAAK,mCAAK;YACzBe,OAAO,EAAE,2BAAK,CAACZ,UAAN,uCAAkBa,OAAlB,KAA6B,EADb,EAAL,EAVhB;;QAaNC,kBAAkB,EAAE,KAbd;QAcNV,QAAQ,EAAE,IAdJ,EAHV,EADF,CADc,CAFlB,EA7DoB,CADW;;;;;;;EA0FjCW,gBAAgB,EAAE;IAChBC,MAAM,EAAE;MACNxB,KAAK,EAAET,CAAC,CAAC,WAAD,CADF;MAENa,WAAW,EAAEb,CAAC,CAAC,0BAAD,CAFR,EADQ;;IAKhBkC,SAAS,EAAE;MACTzB,KAAK,EAAET,CAAC,CAAC,YAAD,CADC;MAETa,WAAW,EAAEb,CAAC,CACZ,0EADY,CAFL,EALK,EA1Fe,EAAnC,C;;;;AAwGeM,M,CAAf,wB,iLAxGMA,M","names":["React","t","validateNonEmpty","columnChoices","ColumnOption","formatSelectOptionsForRange","sections","config","controlPanelSections","legacyRegularTime","label","controlSetRows","name","type","description","mapStateToProps","choices","state","datasource","default","control","validators","freeForm","expanded","multi","optionRenderer","c","valueRenderer","valueKey","allowAll","options","columns","commaChoosesOption","controlOverrides","entity","row_limit"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/legacy-plugin-chart-event-flow/src/controlPanel.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { t, validateNonEmpty } from '@superset-ui/core';\nimport {\n  columnChoices,\n  ColumnOption,\n  ColumnMeta,\n  ControlPanelConfig,\n  ControlState,\n  formatSelectOptionsForRange,\n  sections,\n  SelectControlConfig,\n} from '@superset-ui/chart-controls';\n\nconst config: ControlPanelConfig = {\n  controlPanelSections: [\n    sections.legacyRegularTime,\n    {\n      label: t('Event definition'),\n      controlSetRows: [\n        ['entity'],\n        [\n          {\n            name: 'all_columns_x',\n            config: {\n              type: 'SelectControl',\n              label: t('Event Names'),\n              description: t('Columns to display'),\n              mapStateToProps: state => ({\n                choices: columnChoices(state?.datasource),\n              }),\n              // choices is from `mapStateToProps`\n              default: (control: ControlState) =>\n                control.choices?.[0]?.[0] || null,\n              validators: [validateNonEmpty],\n            },\n          },\n        ],\n        ['row_limit'],\n        [\n          {\n            name: 'order_by_entity',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Order by entity id'),\n              description: t(\n                'Important! Select this if the table is not already sorted by entity id, ' +\n                  'else there is no guarantee that all events for each entity are returned.',\n              ),\n              default: true,\n            },\n          },\n        ],\n        [\n          {\n            name: 'min_leaf_node_event_count',\n            config: {\n              type: 'SelectControl',\n              freeForm: false,\n              label: t('Minimum leaf node event count'),\n              default: 1,\n              choices: formatSelectOptionsForRange(1, 10),\n              description: t(\n                'Leaf nodes that represent fewer than this number of events will be initially ' +\n                  'hidden in the visualization',\n              ),\n            },\n          },\n        ],\n      ],\n    },\n    {\n      label: t('Query'),\n      expanded: true,\n      controlSetRows: [['adhoc_filters']],\n    },\n    {\n      label: t('Additional metadata'),\n      controlSetRows: [\n        [\n          {\n            name: 'all_columns',\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            config: {\n              type: 'SelectControl',\n              multi: true,\n              label: t('Metadata'),\n              default: [],\n              description: t('Select any columns for metadata inspection'),\n              optionRenderer: c => <ColumnOption showType column={c} />,\n              valueRenderer: c => <ColumnOption column={c} />,\n              valueKey: 'column_name',\n              allowAll: true,\n              mapStateToProps: state => ({\n                options: state.datasource?.columns || [],\n              }),\n              commaChoosesOption: false,\n              freeForm: true,\n            } as SelectControlConfig<ColumnMeta>,\n          },\n        ],\n      ],\n    },\n  ],\n  controlOverrides: {\n    entity: {\n      label: t('Entity ID'),\n      description: t('e.g., a \"user id\" column'),\n    },\n    row_limit: {\n      label: t('Max Events'),\n      description: t(\n        'The maximum number of events to return, equivalent to the number of rows',\n      ),\n    },\n  },\n};\n\nexport default config;\n"]},"metadata":{},"sourceType":"module"}