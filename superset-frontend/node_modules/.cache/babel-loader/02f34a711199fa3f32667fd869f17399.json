{"ast":null,"code":"import _debounce from \"lodash/debounce\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useState } from 'react';\nimport { ensureIsArray, SupersetClient, t } from '@superset-ui/core';\n\nimport rison from 'rison';\nconst INITIAL_ADVANCED_DATA_TYPES_STATE = {\n  parsedAdvancedDataType: '',\n  advancedDataTypeOperatorList: [],\n  errorMessage: '' };\n\nconst useAdvancedDataTypes = (validHandler) => {\n  const [advancedDataTypesState, setAdvancedDataTypesState] = useState(INITIAL_ADVANCED_DATA_TYPES_STATE);\n  const [subjectAdvancedDataType, setSubjectAdvancedDataType] = useState();\n  const fetchAdvancedDataTypeValueCallback = useCallback((comp, advancedDataTypesState, subjectAdvancedDataType) => {\n    const values = ensureIsArray(comp);\n    if (!subjectAdvancedDataType) {\n      setAdvancedDataTypesState(INITIAL_ADVANCED_DATA_TYPES_STATE);\n      return;\n    }\n    _debounce(() => {\n      const queryParams = rison.encode({\n        type: subjectAdvancedDataType,\n        values });\n\n      const endpoint = `/api/v1/advanced_data_type/convert?q=${queryParams}`;\n      SupersetClient.get({ endpoint }).\n      then((_ref) => {let { json } = _ref;\n        setAdvancedDataTypesState({\n          parsedAdvancedDataType: json.result.display_value,\n          advancedDataTypeOperatorList: json.result.valid_filter_operators,\n          errorMessage: json.result.error_message });\n\n        // Changed due to removal of status field\n        validHandler(!json.result.error_message);\n      }).\n      catch(() => {\n        setAdvancedDataTypesState({\n          parsedAdvancedDataType: '',\n          advancedDataTypeOperatorList: advancedDataTypesState.advancedDataTypeOperatorList,\n          errorMessage: t('Failed to retrieve advanced type') });\n\n        validHandler(false);\n      });\n    }, 600)();\n  }, [validHandler]);\n  const fetchSubjectAdvancedDataType = (props) => {\n    const option = props.options.find((option) => 'column_name' in option &&\n    option.column_name === props.adhocFilter.subject ||\n    'optionName' in option &&\n    option.optionName === props.adhocFilter.subject);\n    if (option && 'advanced_data_type' in option) {\n      setSubjectAdvancedDataType(option.advanced_data_type);\n    } else\n    {\n      props.validHandler(true);\n    }\n  };\n  return {\n    advancedDataTypesState,\n    subjectAdvancedDataType,\n    setAdvancedDataTypesState,\n    fetchAdvancedDataTypeValueCallback,\n    fetchSubjectAdvancedDataType };\n\n};\nexport default useAdvancedDataTypes;","map":{"version":3,"mappings":"yCAAA;;;;;;;;;;;;;;;;;;AAkBA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AACA,SAASC,aAAT,EAAwBC,cAAxB,EAAwCC,CAAxC,QAAiD,mBAAjD;;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,MAAMC,iCAAiC,GAA2B;EAChEC,sBAAsB,EAAE,EADwC;EAEhEC,4BAA4B,EAAE,EAFkC;EAGhEC,YAAY,EAAE,EAHkD,EAAlE;;AAMA,MAAMC,oBAAoB,GAAG,CAACC,YAAD,KAA6C;EACxE,MAAM,CAACC,sBAAD,EAAyBC,yBAAzB,IACJZ,QAAQ,CAAyBK,iCAAzB,CADV;EAEA,MAAM,CAACQ,uBAAD,EAA0BC,0BAA1B,IAAwDd,QAAQ,EAAtE;EAIA,MAAMe,kCAAkC,GAAGhB,WAAW,CACpD,CACEiB,IADF,EAEEL,sBAFF,EAGEE,uBAHF,KAII;IACF,MAAMI,MAAM,GAAGhB,aAAa,CAACe,IAAD,CAA5B;IACA,IAAI,CAACH,uBAAL,EAA8B;MAC5BD,yBAAyB,CAACP,iCAAD,CAAzB;MACA;IACD;IACD,UAAS,MAAK;MACZ,MAAMa,WAAW,GAAGd,KAAK,CAACe,MAAN,CAAa;QAC/BC,IAAI,EAAEP,uBADyB;QAE/BI,MAF+B,EAAb,CAApB;;MAIA,MAAMI,QAAQ,GAAG,wCAAwCH,WAAW,EAApE;MACAhB,cAAc,CAACoB,GAAf,CAAmB,EAAED,QAAF,EAAnB;MACGE,IADH,CACQ,UAAa,KAAZ,EAAEC,IAAF,EAAY;QACjBZ,yBAAyB,CAAC;UACxBN,sBAAsB,EAAEkB,IAAI,CAACC,MAAL,CAAYC,aADZ;UAExBnB,4BAA4B,EAAEiB,IAAI,CAACC,MAAL,CAAYE,sBAFlB;UAGxBnB,YAAY,EAAEgB,IAAI,CAACC,MAAL,CAAYG,aAHF,EAAD,CAAzB;;QAKA;QACAlB,YAAY,CAAC,CAACc,IAAI,CAACC,MAAL,CAAYG,aAAd,CAAZ;MACD,CATH;MAUGC,KAVH,CAUS,MAAK;QACVjB,yBAAyB,CAAC;UACxBN,sBAAsB,EAAE,EADA;UAExBC,4BAA4B,EAC1BI,sBAAsB,CAACJ,4BAHD;UAIxBC,YAAY,EAAEL,CAAC,CAAC,kCAAD,CAJS,EAAD,CAAzB;;QAMAO,YAAY,CAAC,KAAD,CAAZ;MACD,CAlBH;IAmBD,CAzBD,EAyBG,GAzBH;EA0BD,CArCmD,EAsCpD,CAACA,YAAD,CAtCoD,CAAtD;EAyCA,MAAMoB,4BAA4B,GAAG,CAACC,KAAD,KAAiB;IACpD,MAAMC,MAAM,GAAGD,KAAK,CAACE,OAAN,CAAcC,IAAd,CACb,OAAM,KACH,iBAAiBF,MAAjB;IACCA,MAAM,CAACG,WAAP,KAAuBJ,KAAK,CAACK,WAAN,CAAkBC,OAD3C;IAEC,gBAAgBL,MAAhB;IACCA,MAAM,CAACM,UAAP,KAAsBP,KAAK,CAACK,WAAN,CAAkBC,OAL/B,CAAf;IAOA,IAAIL,MAAM,IAAI,wBAAwBA,MAAtC,EAA8C;MAC5ClB,0BAA0B,CAACkB,MAAM,CAACO,kBAAR,CAA1B;IACD,CAFD;IAEO;MACLR,KAAK,CAACrB,YAAN,CAAmB,IAAnB;IACD;EACF,CAbD;EAeA,OAAO;IACLC,sBADK;IAELE,uBAFK;IAGLD,yBAHK;IAILG,kCAJK;IAKLe,4BALK,EAAP;;AAOD,CAtED;AAwEA,eAAerB,oBAAf","names":["useCallback","useState","ensureIsArray","SupersetClient","t","rison","INITIAL_ADVANCED_DATA_TYPES_STATE","parsedAdvancedDataType","advancedDataTypeOperatorList","errorMessage","useAdvancedDataTypes","validHandler","advancedDataTypesState","setAdvancedDataTypesState","subjectAdvancedDataType","setSubjectAdvancedDataType","fetchAdvancedDataTypeValueCallback","comp","values","queryParams","encode","type","endpoint","get","then","json","result","display_value","valid_filter_operators","error_message","catch","fetchSubjectAdvancedDataType","props","option","options","find","column_name","adhocFilter","subject","optionName","advanced_data_type"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilterEditPopoverSimpleTabContent/useAdvancedDataTypes.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useState } from 'react';\nimport { ensureIsArray, SupersetClient, t } from '@superset-ui/core';\nimport { debounce } from 'lodash';\nimport rison from 'rison';\nimport { AdvancedDataTypesState, Props } from './index';\n\nconst INITIAL_ADVANCED_DATA_TYPES_STATE: AdvancedDataTypesState = {\n  parsedAdvancedDataType: '',\n  advancedDataTypeOperatorList: [],\n  errorMessage: '',\n};\n\nconst useAdvancedDataTypes = (validHandler: (isValid: boolean) => void) => {\n  const [advancedDataTypesState, setAdvancedDataTypesState] =\n    useState<AdvancedDataTypesState>(INITIAL_ADVANCED_DATA_TYPES_STATE);\n  const [subjectAdvancedDataType, setSubjectAdvancedDataType] = useState<\n    string | undefined\n  >();\n\n  const fetchAdvancedDataTypeValueCallback = useCallback(\n    (\n      comp: string | string[],\n      advancedDataTypesState: AdvancedDataTypesState,\n      subjectAdvancedDataType?: string,\n    ) => {\n      const values = ensureIsArray(comp);\n      if (!subjectAdvancedDataType) {\n        setAdvancedDataTypesState(INITIAL_ADVANCED_DATA_TYPES_STATE);\n        return;\n      }\n      debounce(() => {\n        const queryParams = rison.encode({\n          type: subjectAdvancedDataType,\n          values,\n        });\n        const endpoint = `/api/v1/advanced_data_type/convert?q=${queryParams}`;\n        SupersetClient.get({ endpoint })\n          .then(({ json }) => {\n            setAdvancedDataTypesState({\n              parsedAdvancedDataType: json.result.display_value,\n              advancedDataTypeOperatorList: json.result.valid_filter_operators,\n              errorMessage: json.result.error_message,\n            });\n            // Changed due to removal of status field\n            validHandler(!json.result.error_message);\n          })\n          .catch(() => {\n            setAdvancedDataTypesState({\n              parsedAdvancedDataType: '',\n              advancedDataTypeOperatorList:\n                advancedDataTypesState.advancedDataTypeOperatorList,\n              errorMessage: t('Failed to retrieve advanced type'),\n            });\n            validHandler(false);\n          });\n      }, 600)();\n    },\n    [validHandler],\n  );\n\n  const fetchSubjectAdvancedDataType = (props: Props) => {\n    const option = props.options.find(\n      option =>\n        ('column_name' in option &&\n          option.column_name === props.adhocFilter.subject) ||\n        ('optionName' in option &&\n          option.optionName === props.adhocFilter.subject),\n    );\n    if (option && 'advanced_data_type' in option) {\n      setSubjectAdvancedDataType(option.advanced_data_type);\n    } else {\n      props.validHandler(true);\n    }\n  };\n\n  return {\n    advancedDataTypesState,\n    subjectAdvancedDataType,\n    setAdvancedDataTypesState,\n    fetchAdvancedDataTypeValueCallback,\n    fetchSubjectAdvancedDataType,\n  };\n};\n\nexport default useAdvancedDataTypes;\n"]},"metadata":{},"sourceType":"module"}