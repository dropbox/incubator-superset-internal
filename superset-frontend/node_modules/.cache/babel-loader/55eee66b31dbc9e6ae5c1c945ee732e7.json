{"ast":null,"code":"import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\"; /* eslint-disable camelcase */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useMemo } from 'react';\nimport { FeatureFlag, isFeatureEnabled, t, validateNonEmpty } from '@superset-ui/core';\nimport { isDataset } from '../types';\nimport { DATASET_TIME_COLUMN_OPTION, TIME_FILTER_LABELS } from '../constants';\nimport { QUERY_TIME_COLUMN_OPTION, defineSavedMetrics, ColumnOption, temporalColumnMixin, datePickerInAdhocFilterMixin, xAxisMixin } from '..';\n/*\n * Note: Previous to the commit that introduced this comment, the shared controls module\n * would check feature flags at module execution time and expose a different control\n * configuration (component + props) depending on the status of drag-and-drop feature\n * flags.  This commit combines those configs, merging the required props for both the\n * drag-and-drop and non-drag-and-drop components, and renders a wrapper component that\n * checks feature flags at component render time to avoid race conditions between when\n * feature flags are set and when they're checked.\n */import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport const dndGroupByControl = {\n  type: 'DndColumnSelect',\n  label: t('Dimensions'),\n  multi: true,\n  freeForm: true,\n  clearable: true,\n  default: [],\n  includeTime: false,\n  description: t('One or many columns to group by. High cardinality groupings should include a sort by metric ' +\n  'and series limit to limit the number of fetched and rendered series.'),\n  optionRenderer: (c) => ___EmotionJSX(ColumnOption, { showType: true, column: c }),\n  valueRenderer: (c) => ___EmotionJSX(ColumnOption, { column: c }),\n  valueKey: 'column_name',\n  allowAll: true,\n  filterOption: (_ref, text) => {var _opt$column_name, _context, _opt$verbose_name, _context2;let { data: opt } = _ref;return ((_opt$column_name = opt.column_name) == null ? void 0 : _includesInstanceProperty(_context = _opt$column_name.toLowerCase()).call(_context, text.toLowerCase())) || ((_opt$verbose_name =\n    opt.verbose_name) == null ? void 0 : _includesInstanceProperty(_context2 = _opt$verbose_name.toLowerCase()).call(_context2, text.toLowerCase())) ||\n    false;},\n  promptTextCreator: (label) => label,\n  mapStateToProps(state, controlState) {var _datasource$columns$;\n    const newState = {};\n    const { datasource } = state;\n    if (datasource != null && (_datasource$columns$ = datasource.columns[0]) != null && _datasource$columns$.hasOwnProperty('groupby')) {\n      const options = datasource.columns.filter((c) => c.groupby);\n      if (controlState != null && controlState.includeTime) {\n        options.unshift(DATASET_TIME_COLUMN_OPTION);\n      }\n      newState.options = options;\n      newState.savedMetrics = datasource.metrics || [];\n    } else\n    {\n      const options = (datasource == null ? void 0 : datasource.columns) || [];\n      if (controlState != null && controlState.includeTime) {\n        options.unshift(QUERY_TIME_COLUMN_OPTION);\n      }\n      newState.options = options;\n    }\n    return newState;\n  },\n  commaChoosesOption: false };\n\nexport const dndColumnsControl = {\n  ...dndGroupByControl,\n  label: t('Columns'),\n  description: t('One or many columns to pivot as columns') };\n\nexport const dndSeriesControl = {\n  ...dndGroupByControl,\n  label: t('Dimension'),\n  multi: false,\n  default: null,\n  description: t('Defines the grouping of entities. ' +\n  'Each series is shown as a specific color on the chart and ' +\n  'has a legend toggle') };\n\nexport const dndEntityControl = {\n  ...dndGroupByControl,\n  label: t('Entity'),\n  default: null,\n  multi: false,\n  validators: [validateNonEmpty],\n  description: t('This defines the element to be plotted on the chart') };\n\nexport const dndAdhocFilterControl = {\n  type: 'DndFilterSelect',\n  label: t('Filters'),\n  default: [],\n  description: '',\n  mapStateToProps: (_ref2) => {let { datasource, form_data } = _ref2;return {\n      columns: isDataset(datasource) ?\n      datasource.columns.filter((c) => c.filterable) :\n      (datasource == null ? void 0 : datasource.columns) || [],\n      savedMetrics: defineSavedMetrics(datasource),\n      // current active adhoc metrics\n      selectedMetrics: form_data.metrics || (form_data.metric ? [form_data.metric] : []),\n      datasource };},\n\n  provideFormDataToProps: true,\n  ...datePickerInAdhocFilterMixin };\n\nexport const dndAdhocMetricsControl = {\n  type: 'DndMetricSelect',\n  multi: true,\n  label: t('Metrics'),\n  validators: [validateNonEmpty],\n  mapStateToProps: (_ref3) => {let { datasource } = _ref3;return {\n      columns: (datasource == null ? void 0 : datasource.columns) || [],\n      savedMetrics: defineSavedMetrics(datasource),\n      datasource,\n      datasourceType: datasource == null ? void 0 : datasource.type };},\n\n  description: t('One or many metrics to display') };\n\nexport const dndAdhocMetricControl = {\n  ...dndAdhocMetricsControl,\n  multi: false,\n  label: t('Metric'),\n  description: t('Metric') };\n\nexport const dndAdhocMetricControl2 = {\n  ...dndAdhocMetricControl,\n  label: t('Right Axis Metric'),\n  clearable: true,\n  description: t('Choose a metric for right axis') };\n\nexport const dndSortByControl = {\n  type: 'DndMetricSelect',\n  label: t('Sort by'),\n  default: null,\n  description: t('Metric used to define how the top series are sorted if a series or row limit is present. ' +\n  'If undefined reverts to the first metric (where appropriate).'),\n  mapStateToProps: (_ref4) => {let { datasource } = _ref4;return {\n      columns: (datasource == null ? void 0 : datasource.columns) || [],\n      savedMetrics: defineSavedMetrics(datasource),\n      datasource,\n      datasourceType: datasource == null ? void 0 : datasource.type };} };\n\n\nexport const dndSizeControl = {\n  ...dndAdhocMetricControl,\n  label: t('Bubble Size'),\n  description: t('Metric used to calculate bubble size'),\n  default: null };\n\nexport const dndXControl = {\n  ...dndAdhocMetricControl,\n  label: t('X Axis'),\n  description: t('Metric assigned to the [X] axis'),\n  default: null };\n\nexport const dndYControl = {\n  ...dndAdhocMetricControl,\n  label: t('Y Axis'),\n  description: t('Metric assigned to the [Y] axis'),\n  default: null };\n\nexport const dndSecondaryMetricControl = {\n  ...dndAdhocMetricControl,\n  label: t('Color Metric'),\n  default: null,\n  validators: [],\n  description: t('A metric to use for color') };\n\nexport const dndGranularitySqlaControl = {\n  ...dndSeriesControl,\n  ...temporalColumnMixin,\n  label: TIME_FILTER_LABELS.granularity_sqla,\n  description: t('The time column for the visualization. Note that you ' +\n  'can define arbitrary expression that return a DATETIME ' +\n  'column in the table. Also note that the ' +\n  'filter below is applied against this column or ' +\n  'expression'),\n  default: (c) => c.default,\n  clearable: false,\n  canDelete: false,\n  ghostButtonText: t('Drop a temporal column here or click'),\n  optionRenderer: (c) => ___EmotionJSX(ColumnOption, { showType: true, column: c }),\n  valueRenderer: (c) => ___EmotionJSX(ColumnOption, { column: c }),\n  valueKey: 'column_name' };\n\nexport const dndXAxisControl = {\n  ...dndGroupByControl,\n  ...xAxisMixin };\n\nexport function withDndFallback(DndComponent, FallbackComponent) {\n  return function DndControl(props) {\n    const enableExploreDnd = useMemo(() => isFeatureEnabled(FeatureFlag.ENABLE_EXPLORE_DRAG_AND_DROP), []);\n    return enableExploreDnd ? ___EmotionJSX(DndComponent, props) : ___EmotionJSX(FallbackComponent, props);\n  };\n}","map":{"version":3,"mappings":"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","names":["React","useMemo","FeatureFlag","isFeatureEnabled","t","validateNonEmpty","isDataset","DATASET_TIME_COLUMN_OPTION","TIME_FILTER_LABELS","QUERY_TIME_COLUMN_OPTION","defineSavedMetrics","ColumnOption","temporalColumnMixin","datePickerInAdhocFilterMixin","xAxisMixin","dndGroupByControl","type","label","multi","freeForm","clearable","default","includeTime","description","optionRenderer","c","valueRenderer","valueKey","allowAll","filterOption","text","data","opt","column_name","toLowerCase","verbose_name","promptTextCreator","mapStateToProps","state","controlState","newState","datasource","columns","hasOwnProperty","options","filter","groupby","unshift","savedMetrics","metrics","commaChoosesOption","dndColumnsControl","dndSeriesControl","dndEntityControl","validators","dndAdhocFilterControl","form_data","filterable","selectedMetrics","metric","provideFormDataToProps","dndAdhocMetricsControl","datasourceType","dndAdhocMetricControl","dndAdhocMetricControl2","dndSortByControl","dndSizeControl","dndXControl","dndYControl","dndSecondaryMetricControl","dndGranularitySqlaControl","granularity_sqla","canDelete","ghostButtonText","dndXAxisControl","withDndFallback","DndComponent","FallbackComponent","DndControl","props","enableExploreDnd","ENABLE_EXPLORE_DRAG_AND_DROP"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-chart-controls/src/shared-controls/dndControls.tsx"],"sourcesContent":["/* eslint-disable camelcase */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useMemo } from 'react';\nimport {\n  FeatureFlag,\n  isFeatureEnabled,\n  QueryColumn,\n  t,\n  validateNonEmpty,\n} from '@superset-ui/core';\nimport {\n  ExtraControlProps,\n  SharedControlConfig,\n  Dataset,\n  Metric,\n  isDataset,\n} from '../types';\nimport { DATASET_TIME_COLUMN_OPTION, TIME_FILTER_LABELS } from '../constants';\nimport {\n  QUERY_TIME_COLUMN_OPTION,\n  defineSavedMetrics,\n  ColumnOption,\n  ColumnMeta,\n  FilterOption,\n  temporalColumnMixin,\n  datePickerInAdhocFilterMixin,\n  xAxisMixin,\n} from '..';\n\ntype Control = {\n  savedMetrics?: Metric[] | null;\n  default?: unknown;\n};\n\n/*\n * Note: Previous to the commit that introduced this comment, the shared controls module\n * would check feature flags at module execution time and expose a different control\n * configuration (component + props) depending on the status of drag-and-drop feature\n * flags.  This commit combines those configs, merging the required props for both the\n * drag-and-drop and non-drag-and-drop components, and renders a wrapper component that\n * checks feature flags at component render time to avoid race conditions between when\n * feature flags are set and when they're checked.\n */\n\nexport const dndGroupByControl: SharedControlConfig<\n  'DndColumnSelect' | 'SelectControl',\n  ColumnMeta\n> = {\n  type: 'DndColumnSelect',\n  label: t('Dimensions'),\n  multi: true,\n  freeForm: true,\n  clearable: true,\n  default: [],\n  includeTime: false,\n  description: t(\n    'One or many columns to group by. High cardinality groupings should include a sort by metric ' +\n      'and series limit to limit the number of fetched and rendered series.',\n  ),\n  optionRenderer: (c: ColumnMeta) => <ColumnOption showType column={c} />,\n  valueRenderer: (c: ColumnMeta) => <ColumnOption column={c} />,\n  valueKey: 'column_name',\n  allowAll: true,\n  filterOption: ({ data: opt }: FilterOption<ColumnMeta>, text: string) =>\n    opt.column_name?.toLowerCase().includes(text.toLowerCase()) ||\n    opt.verbose_name?.toLowerCase().includes(text.toLowerCase()) ||\n    false,\n  promptTextCreator: (label: unknown) => label,\n  mapStateToProps(state, controlState) {\n    const newState: ExtraControlProps = {};\n    const { datasource } = state;\n    if (datasource?.columns[0]?.hasOwnProperty('groupby')) {\n      const options = (datasource as Dataset).columns.filter(c => c.groupby);\n      if (controlState?.includeTime) {\n        options.unshift(DATASET_TIME_COLUMN_OPTION);\n      }\n      newState.options = options;\n      newState.savedMetrics = (datasource as Dataset).metrics || [];\n    } else {\n      const options = (datasource?.columns as QueryColumn[]) || [];\n      if (controlState?.includeTime) {\n        options.unshift(QUERY_TIME_COLUMN_OPTION);\n      }\n      newState.options = options;\n    }\n    return newState;\n  },\n  commaChoosesOption: false,\n};\n\nexport const dndColumnsControl: typeof dndGroupByControl = {\n  ...dndGroupByControl,\n  label: t('Columns'),\n  description: t('One or many columns to pivot as columns'),\n};\n\nexport const dndSeriesControl: typeof dndGroupByControl = {\n  ...dndGroupByControl,\n  label: t('Dimension'),\n  multi: false,\n  default: null,\n  description: t(\n    'Defines the grouping of entities. ' +\n      'Each series is shown as a specific color on the chart and ' +\n      'has a legend toggle',\n  ),\n};\n\nexport const dndEntityControl: typeof dndGroupByControl = {\n  ...dndGroupByControl,\n  label: t('Entity'),\n  default: null,\n  multi: false,\n  validators: [validateNonEmpty],\n  description: t('This defines the element to be plotted on the chart'),\n};\n\nexport const dndAdhocFilterControl: SharedControlConfig<\n  'DndFilterSelect' | 'AdhocFilterControl'\n> = {\n  type: 'DndFilterSelect',\n  label: t('Filters'),\n  default: [],\n  description: '',\n  mapStateToProps: ({ datasource, form_data }) => ({\n    columns: isDataset(datasource)\n      ? datasource.columns.filter(c => c.filterable)\n      : datasource?.columns || [],\n    savedMetrics: defineSavedMetrics(datasource),\n    // current active adhoc metrics\n    selectedMetrics:\n      form_data.metrics || (form_data.metric ? [form_data.metric] : []),\n    datasource,\n  }),\n  provideFormDataToProps: true,\n  ...datePickerInAdhocFilterMixin,\n};\n\nexport const dndAdhocMetricsControl: SharedControlConfig<\n  'DndMetricSelect' | 'MetricsControl'\n> = {\n  type: 'DndMetricSelect',\n  multi: true,\n  label: t('Metrics'),\n  validators: [validateNonEmpty],\n  mapStateToProps: ({ datasource }) => ({\n    columns: datasource?.columns || [],\n    savedMetrics: defineSavedMetrics(datasource),\n    datasource,\n    datasourceType: datasource?.type,\n  }),\n  description: t('One or many metrics to display'),\n};\n\nexport const dndAdhocMetricControl: typeof dndAdhocMetricsControl = {\n  ...dndAdhocMetricsControl,\n  multi: false,\n  label: t('Metric'),\n  description: t('Metric'),\n};\n\nexport const dndAdhocMetricControl2: typeof dndAdhocMetricControl = {\n  ...dndAdhocMetricControl,\n  label: t('Right Axis Metric'),\n  clearable: true,\n  description: t('Choose a metric for right axis'),\n};\n\nexport const dndSortByControl: SharedControlConfig<\n  'DndMetricSelect' | 'MetricsControl'\n> = {\n  type: 'DndMetricSelect',\n  label: t('Sort by'),\n  default: null,\n  description: t(\n    'Metric used to define how the top series are sorted if a series or row limit is present. ' +\n      'If undefined reverts to the first metric (where appropriate).',\n  ),\n  mapStateToProps: ({ datasource }) => ({\n    columns: datasource?.columns || [],\n    savedMetrics: defineSavedMetrics(datasource),\n    datasource,\n    datasourceType: datasource?.type,\n  }),\n};\n\nexport const dndSizeControl: typeof dndAdhocMetricControl = {\n  ...dndAdhocMetricControl,\n  label: t('Bubble Size'),\n  description: t('Metric used to calculate bubble size'),\n  default: null,\n};\n\nexport const dndXControl: typeof dndAdhocMetricControl = {\n  ...dndAdhocMetricControl,\n  label: t('X Axis'),\n  description: t('Metric assigned to the [X] axis'),\n  default: null,\n};\n\nexport const dndYControl: typeof dndAdhocMetricControl = {\n  ...dndAdhocMetricControl,\n  label: t('Y Axis'),\n  description: t('Metric assigned to the [Y] axis'),\n  default: null,\n};\n\nexport const dndSecondaryMetricControl: typeof dndAdhocMetricControl = {\n  ...dndAdhocMetricControl,\n  label: t('Color Metric'),\n  default: null,\n  validators: [],\n  description: t('A metric to use for color'),\n};\n\nexport const dndGranularitySqlaControl: typeof dndSeriesControl = {\n  ...dndSeriesControl,\n  ...temporalColumnMixin,\n  label: TIME_FILTER_LABELS.granularity_sqla,\n  description: t(\n    'The time column for the visualization. Note that you ' +\n      'can define arbitrary expression that return a DATETIME ' +\n      'column in the table. Also note that the ' +\n      'filter below is applied against this column or ' +\n      'expression',\n  ),\n  default: (c: Control) => c.default,\n  clearable: false,\n  canDelete: false,\n  ghostButtonText: t('Drop a temporal column here or click'),\n  optionRenderer: (c: ColumnMeta) => <ColumnOption showType column={c} />,\n  valueRenderer: (c: ColumnMeta) => <ColumnOption column={c} />,\n  valueKey: 'column_name',\n};\n\nexport const dndXAxisControl: typeof dndGroupByControl = {\n  ...dndGroupByControl,\n  ...xAxisMixin,\n};\n\nexport function withDndFallback(\n  DndComponent: React.ComponentType<any>,\n  FallbackComponent: React.ComponentType<any>,\n) {\n  return function DndControl(props: any) {\n    const enableExploreDnd = useMemo(\n      () => isFeatureEnabled(FeatureFlag.ENABLE_EXPLORE_DRAG_AND_DROP),\n      [],\n    );\n\n    return enableExploreDnd ? (\n      <DndComponent {...props} />\n    ) : (\n      <FallbackComponent {...props} />\n    );\n  };\n}\n"]},"metadata":{},"sourceType":"module"}