{"ast":null,"code":"/* eslint camelcase: 0 */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { DatasourceType } from './Datasource';\nexport const ErrorTypeEnum = {\n  // Frontend errors\n  FRONTEND_CSRF_ERROR: 'FRONTEND_CSRF_ERROR',\n  FRONTEND_NETWORK_ERROR: 'FRONTEND_NETWORK_ERROR',\n  FRONTEND_TIMEOUT_ERROR: 'FRONTEND_TIMEOUT_ERROR',\n  // DB Engine errors\n  GENERIC_DB_ENGINE_ERROR: 'GENERIC_DB_ENGINE_ERROR',\n  COLUMN_DOES_NOT_EXIST_ERROR: 'COLUMN_DOES_NOT_EXIST_ERROR',\n  TABLE_DOES_NOT_EXIST_ERROR: 'TABLE_DOES_NOT_EXIST_ERROR',\n  SCHEMA_DOES_NOT_EXIST_ERROR: 'SCHEMA_DOES_NOT_EXIST_ERROR',\n  CONNECTION_INVALID_USERNAME_ERROR: 'CONNECTION_INVALID_USERNAME_ERROR',\n  CONNECTION_INVALID_PASSWORD_ERROR: 'CONNECTION_INVALID_PASSWORD_ERROR',\n  CONNECTION_INVALID_HOSTNAME_ERROR: 'CONNECTION_INVALID_HOSTNAME_ERROR',\n  CONNECTION_PORT_CLOSED_ERROR: 'CONNECTION_PORT_CLOSED_ERROR',\n  CONNECTION_INVALID_PORT_ERROR: 'CONNECTION_INVALID_PORT_ERROR',\n  CONNECTION_HOST_DOWN_ERROR: 'CONNECTION_HOST_DOWN_ERROR',\n  CONNECTION_ACCESS_DENIED_ERROR: 'CONNECTION_ACCESS_DENIED_ERROR',\n  CONNECTION_UNKNOWN_DATABASE_ERROR: 'CONNECTION_UNKNOWN_DATABASE_ERROR',\n  CONNECTION_DATABASE_PERMISSIONS_ERROR: 'CONNECTION_DATABASE_PERMISSIONS_ERROR',\n  CONNECTION_MISSING_PARAMETERS_ERRORS: 'CONNECTION_MISSING_PARAMETERS_ERRORS',\n  OBJECT_DOES_NOT_EXIST_ERROR: 'OBJECT_DOES_NOT_EXIST_ERROR',\n  SYNTAX_ERROR: 'SYNTAX_ERROR',\n  // Viz errors\n  VIZ_GET_DF_ERROR: 'VIZ_GET_DF_ERROR',\n  UNKNOWN_DATASOURCE_TYPE_ERROR: 'UNKNOWN_DATASOURCE_TYPE_ERROR',\n  FAILED_FETCHING_DATASOURCE_INFO_ERROR: 'FAILED_FETCHING_DATASOURCE_INFO_ERROR',\n  // Security access errors\n  TABLE_SECURITY_ACCESS_ERROR: 'TABLE_SECURITY_ACCESS_ERROR',\n  DATASOURCE_SECURITY_ACCESS_ERROR: 'DATASOURCE_SECURITY_ACCESS_ERROR',\n  DATABASE_SECURITY_ACCESS_ERROR: 'DATABASE_SECURITY_ACCESS_ERROR',\n  QUERY_SECURITY_ACCESS_ERROR: 'QUERY_SECURITY_ACCESS_ERROR',\n  MISSING_OWNERSHIP_ERROR: 'MISSING_OWNERSHIP_ERROR',\n  // Other errors\n  BACKEND_TIMEOUT_ERROR: 'BACKEND_TIMEOUT_ERROR',\n  DATABASE_NOT_FOUND_ERROR: 'DATABASE_NOT_FOUND_ERROR',\n  // Sqllab error\n  MISSING_TEMPLATE_PARAMS_ERROR: 'MISSING_TEMPLATE_PARAMS_ERROR',\n  INVALID_TEMPLATE_PARAMS_ERROR: 'INVALID_TEMPLATE_PARAMS_ERROR',\n  RESULTS_BACKEND_NOT_CONFIGURED_ERROR: 'RESULTS_BACKEND_NOT_CONFIGURED_ERROR',\n  DML_NOT_ALLOWED_ERROR: 'DML_NOT_ALLOWED_ERROR',\n  INVALID_CTAS_QUERY_ERROR: 'INVALID_CTAS_QUERY_ERROR',\n  INVALID_CVAS_QUERY_ERROR: 'INVALID_CVAS_QUERY_ERROR',\n  SQLLAB_TIMEOUT_ERROR: 'SQLLAB_TIMEOUT_ERROR',\n  RESULTS_BACKEND_ERROR: 'RESULTS_BACKEND_ERROR',\n  ASYNC_WORKERS_ERROR: 'ASYNC_WORKERS_ERROR',\n  // Generic errors\n  GENERIC_COMMAND_ERROR: 'GENERIC_COMMAND_ERROR',\n  GENERIC_BACKEND_ERROR: 'GENERIC_BACKEND_ERROR',\n  // API errors\n  INVALID_PAYLOAD_FORMAT_ERROR: 'INVALID_PAYLOAD_FORMAT_ERROR',\n  INVALID_PAYLOAD_SCHEMA_ERROR: 'INVALID_PAYLOAD_SCHEMA_ERROR' };\n\nexport const CtasEnum = {\n  TABLE: 'TABLE',\n  VIEW: 'VIEW' };\n\n// Possible states of a query object for processing on the server\nexport var QueryState;\n(function (QueryState) {\n  QueryState[\"STARTED\"] = \"started\";\n  QueryState[\"STOPPED\"] = \"stopped\";\n  QueryState[\"FAILED\"] = \"failed\";\n  QueryState[\"PENDING\"] = \"pending\";\n  QueryState[\"RUNNING\"] = \"running\";\n  QueryState[\"SCHEDULED\"] = \"scheduled\";\n  QueryState[\"SUCCESS\"] = \"success\";\n  QueryState[\"FETCHING\"] = \"fetching\";\n  QueryState[\"TIMED_OUT\"] = \"timed_out\";\n})(QueryState || (QueryState = {}));\n// Inidcates a Query's state is still processing\nexport const runningQueryStateList = [\nQueryState.RUNNING,\nQueryState.STARTED,\nQueryState.PENDING,\nQueryState.FETCHING,\nQueryState.SCHEDULED];\n\n// Indicates a Query's state has completed processing regardless of success / failure\nexport const concludedQueryStateList = [\nQueryState.STOPPED,\nQueryState.FAILED,\nQueryState.SUCCESS,\nQueryState.TIMED_OUT];\n\n// todo: move out from typing\nexport const testQuery = {\n  id: 'clientId2353',\n  dbId: 1,\n  sql: 'SELECT * FROM something',\n  sqlEditorId: 'dfsadfs',\n  tab: 'unimportant',\n  tempTable: '',\n  ctas: false,\n  cached: false,\n  errorMessage: null,\n  extra: { progress: null },\n  isDataPreview: false,\n  progress: 0,\n  resultsKey: null,\n  state: QueryState.SUCCESS,\n  tempSchema: null,\n  trackingUrl: null,\n  templateParams: null,\n  rows: 42,\n  queryLimit: 100,\n  limitingFactor: '',\n  endDttm: 1476910579693,\n  duration: '',\n  startDttm: 1476910566092.96,\n  time: {},\n  user: {},\n  userId: 1,\n  db: {},\n  started: '',\n  querylink: {},\n  queryId: 1,\n  executedSql: '',\n  output: '',\n  actions: {},\n  type: DatasourceType.Query,\n  columns: [\n  {\n    column_name: 'Column 1',\n    type: 'STRING',\n    is_dttm: false },\n\n  {\n    column_name: 'Column 3',\n    type: 'STRING',\n    is_dttm: false },\n\n  {\n    column_name: 'Column 2',\n    type: 'TIMESTAMP',\n    is_dttm: true }] };\n\n\n\nexport const testQueryResults = {\n  results: {\n    displayLimitReached: false,\n    columns: [\n    {\n      column_name: 'Column 1',\n      type: 'STRING',\n      is_dttm: false },\n\n    {\n      column_name: 'Column 3',\n      type: 'STRING',\n      is_dttm: false },\n\n    {\n      column_name: 'Column 2',\n      type: 'TIMESTAMP',\n      is_dttm: true }],\n\n\n    data: [\n    { 'Column 1': 'a', 'Column 2': 'b', 'Column 3': '2014-11-11T00:00:00' }],\n\n    expanded_columns: [],\n    selected_columns: [\n    {\n      column_name: 'Column 1',\n      type: 'STRING',\n      is_dttm: false },\n\n    {\n      column_name: 'Column 3',\n      type: 'STRING',\n      is_dttm: false },\n\n    {\n      column_name: 'Column 2',\n      type: 'TIMESTAMP',\n      is_dttm: true }],\n\n\n    query: { limit: 6 } } };\n\n\nexport const testQueryResponse = { ...testQuery, ...testQueryResults };\nexport var ContributionType;\n(function (ContributionType) {\n  ContributionType[\"Row\"] = \"row\";\n  ContributionType[\"Column\"] = \"column\";\n})(ContributionType || (ContributionType = {}));\nexport default {};","map":{"version":3,"mappings":"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","names":["DatasourceType","ErrorTypeEnum","FRONTEND_CSRF_ERROR","FRONTEND_NETWORK_ERROR","FRONTEND_TIMEOUT_ERROR","GENERIC_DB_ENGINE_ERROR","COLUMN_DOES_NOT_EXIST_ERROR","TABLE_DOES_NOT_EXIST_ERROR","SCHEMA_DOES_NOT_EXIST_ERROR","CONNECTION_INVALID_USERNAME_ERROR","CONNECTION_INVALID_PASSWORD_ERROR","CONNECTION_INVALID_HOSTNAME_ERROR","CONNECTION_PORT_CLOSED_ERROR","CONNECTION_INVALID_PORT_ERROR","CONNECTION_HOST_DOWN_ERROR","CONNECTION_ACCESS_DENIED_ERROR","CONNECTION_UNKNOWN_DATABASE_ERROR","CONNECTION_DATABASE_PERMISSIONS_ERROR","CONNECTION_MISSING_PARAMETERS_ERRORS","OBJECT_DOES_NOT_EXIST_ERROR","SYNTAX_ERROR","VIZ_GET_DF_ERROR","UNKNOWN_DATASOURCE_TYPE_ERROR","FAILED_FETCHING_DATASOURCE_INFO_ERROR","TABLE_SECURITY_ACCESS_ERROR","DATASOURCE_SECURITY_ACCESS_ERROR","DATABASE_SECURITY_ACCESS_ERROR","QUERY_SECURITY_ACCESS_ERROR","MISSING_OWNERSHIP_ERROR","BACKEND_TIMEOUT_ERROR","DATABASE_NOT_FOUND_ERROR","MISSING_TEMPLATE_PARAMS_ERROR","INVALID_TEMPLATE_PARAMS_ERROR","RESULTS_BACKEND_NOT_CONFIGURED_ERROR","DML_NOT_ALLOWED_ERROR","INVALID_CTAS_QUERY_ERROR","INVALID_CVAS_QUERY_ERROR","SQLLAB_TIMEOUT_ERROR","RESULTS_BACKEND_ERROR","ASYNC_WORKERS_ERROR","GENERIC_COMMAND_ERROR","GENERIC_BACKEND_ERROR","INVALID_PAYLOAD_FORMAT_ERROR","INVALID_PAYLOAD_SCHEMA_ERROR","CtasEnum","TABLE","VIEW","QueryState","runningQueryStateList","RUNNING","STARTED","PENDING","FETCHING","SCHEDULED","concludedQueryStateList","STOPPED","FAILED","SUCCESS","TIMED_OUT","testQuery","id","dbId","sql","sqlEditorId","tab","tempTable","ctas","cached","errorMessage","extra","progress","isDataPreview","resultsKey","state","tempSchema","trackingUrl","templateParams","rows","queryLimit","limitingFactor","endDttm","duration","startDttm","time","user","userId","db","started","querylink","queryId","executedSql","output","actions","type","Query","columns","column_name","is_dttm","testQueryResults","results","displayLimitReached","data","expanded_columns","selected_columns","query","limit","testQueryResponse","ContributionType"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/packages/superset-ui-core/src/query/types/Query.ts"],"sourcesContent":["/* eslint camelcase: 0 */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { DatasourceType } from './Datasource';\nimport { BinaryOperator, SetOperator, UnaryOperator } from './Operator';\nimport { AppliedTimeExtras, TimeRange } from './Time';\nimport { AnnotationLayer } from './AnnotationLayer';\nimport {\n  QueryFields,\n  QueryFormColumn,\n  QueryFormData,\n  QueryFormMetric,\n} from './QueryFormData';\nimport { Maybe } from '../../types';\nimport { PostProcessingRule } from './PostProcessing';\nimport { JsonObject } from '../../connection';\nimport { TimeGranularity } from '../../time-format';\n\nexport type BaseQueryObjectFilterClause = {\n  col: QueryFormColumn;\n  grain?: TimeGranularity;\n  isExtra?: boolean;\n};\n\nexport type BinaryQueryObjectFilterClause = BaseQueryObjectFilterClause & {\n  op: BinaryOperator;\n  val: string | number | boolean;\n  formattedVal?: string;\n};\n\nexport type SetQueryObjectFilterClause = BaseQueryObjectFilterClause & {\n  op: SetOperator;\n  val: (string | number | boolean)[];\n  formattedVal?: string[];\n};\n\nexport type UnaryQueryObjectFilterClause = BaseQueryObjectFilterClause & {\n  op: UnaryOperator;\n  formattedVal?: string;\n};\n\nexport type QueryObjectFilterClause =\n  | BinaryQueryObjectFilterClause\n  | SetQueryObjectFilterClause\n  | UnaryQueryObjectFilterClause;\n\nexport type QueryObjectExtras = Partial<{\n  /** HAVING condition for SQLAlchemy */\n  having?: string;\n  relative_start?: string;\n  relative_end?: string;\n  time_grain_sqla?: TimeGranularity;\n  /** WHERE condition */\n  where?: string;\n}>;\n\nexport type ResidualQueryObjectData = {\n  [key: string]: unknown;\n};\n\n/**\n * Query object directly compatible with the new chart data API.\n * A stricter version of query form data.\n *\n * All information should be related to generating database queries. Config values\n * for client-side processing and chart rendering should happen in `buildQuery`\n * and `transformProps`.\n */\nexport interface QueryObject\n  extends QueryFields,\n    TimeRange,\n    ResidualQueryObjectData {\n  /**\n   * Definition for annotation layers.\n   */\n  annotation_layers?: AnnotationLayer[];\n\n  /** Time filters that have been applied to the query object */\n  applied_time_extras?: AppliedTimeExtras;\n\n  /** add fetch value predicate to query if defined in datasource */\n  apply_fetch_values_predicate?: boolean;\n\n  /**\n   * Extra form data. Current stores information about time granularity, may be\n   * cleaned up in the future.\n   */\n  extras?: QueryObjectExtras;\n\n  /** SIMPLE where filters */\n  filters?: QueryObjectFilterClause[];\n\n  /** Time column for SQL */\n  granularity?: string;\n\n  /** If set, will group by timestamp */\n  is_timeseries?: boolean;\n\n  /** Should the rowcount of the query be fetched */\n  is_rowcount?: boolean;\n\n  /** Free-form HAVING SQL, multiple clauses are concatenated by AND */\n  having?: string;\n\n  post_processing?: (PostProcessingRule | undefined)[];\n\n  /** Maximum numbers of rows to return */\n  row_limit?: number;\n\n  /** Number of rows to skip */\n  row_offset?: number;\n\n  /** The column to which direct temporal filters (forthcoming) */\n  time_column?: string;\n\n  /** The size of bucket by which to group timeseries data (forthcoming) */\n  time_grain?: string;\n\n  /** Direction to ordered by */\n  order_desc?: boolean;\n\n  url_params?: Record<string, string>;\n\n  custom_params?: JsonObject;\n\n  /** Free-form WHERE SQL: multiple clauses are concatenated by AND */\n  where?: string;\n\n  /** Limit number of series */\n  series_columns?: QueryFormColumn[];\n  series_limit?: number;\n  series_limit_metric?: Maybe<QueryFormMetric>;\n}\n\nexport interface QueryContext {\n  datasource: {\n    id: number;\n    type: DatasourceType;\n  };\n  /** Force refresh of all queries */\n  force: boolean;\n  /** Type of result to return for queries */\n  result_type: string;\n  /** Response format */\n  result_format: string;\n  queries: QueryObject[];\n  form_data?: QueryFormData;\n}\n\nexport const ErrorTypeEnum = {\n  // Frontend errors\n  FRONTEND_CSRF_ERROR: 'FRONTEND_CSRF_ERROR',\n  FRONTEND_NETWORK_ERROR: 'FRONTEND_NETWORK_ERROR',\n  FRONTEND_TIMEOUT_ERROR: 'FRONTEND_TIMEOUT_ERROR',\n\n  // DB Engine errors\n  GENERIC_DB_ENGINE_ERROR: 'GENERIC_DB_ENGINE_ERROR',\n  COLUMN_DOES_NOT_EXIST_ERROR: 'COLUMN_DOES_NOT_EXIST_ERROR',\n  TABLE_DOES_NOT_EXIST_ERROR: 'TABLE_DOES_NOT_EXIST_ERROR',\n  SCHEMA_DOES_NOT_EXIST_ERROR: 'SCHEMA_DOES_NOT_EXIST_ERROR',\n  CONNECTION_INVALID_USERNAME_ERROR: 'CONNECTION_INVALID_USERNAME_ERROR',\n  CONNECTION_INVALID_PASSWORD_ERROR: 'CONNECTION_INVALID_PASSWORD_ERROR',\n  CONNECTION_INVALID_HOSTNAME_ERROR: 'CONNECTION_INVALID_HOSTNAME_ERROR',\n  CONNECTION_PORT_CLOSED_ERROR: 'CONNECTION_PORT_CLOSED_ERROR',\n  CONNECTION_INVALID_PORT_ERROR: 'CONNECTION_INVALID_PORT_ERROR',\n  CONNECTION_HOST_DOWN_ERROR: 'CONNECTION_HOST_DOWN_ERROR',\n  CONNECTION_ACCESS_DENIED_ERROR: 'CONNECTION_ACCESS_DENIED_ERROR',\n  CONNECTION_UNKNOWN_DATABASE_ERROR: 'CONNECTION_UNKNOWN_DATABASE_ERROR',\n  CONNECTION_DATABASE_PERMISSIONS_ERROR:\n    'CONNECTION_DATABASE_PERMISSIONS_ERROR',\n  CONNECTION_MISSING_PARAMETERS_ERRORS: 'CONNECTION_MISSING_PARAMETERS_ERRORS',\n  OBJECT_DOES_NOT_EXIST_ERROR: 'OBJECT_DOES_NOT_EXIST_ERROR',\n  SYNTAX_ERROR: 'SYNTAX_ERROR',\n\n  // Viz errors\n  VIZ_GET_DF_ERROR: 'VIZ_GET_DF_ERROR',\n  UNKNOWN_DATASOURCE_TYPE_ERROR: 'UNKNOWN_DATASOURCE_TYPE_ERROR',\n  FAILED_FETCHING_DATASOURCE_INFO_ERROR:\n    'FAILED_FETCHING_DATASOURCE_INFO_ERROR',\n\n  // Security access errors\n  TABLE_SECURITY_ACCESS_ERROR: 'TABLE_SECURITY_ACCESS_ERROR',\n  DATASOURCE_SECURITY_ACCESS_ERROR: 'DATASOURCE_SECURITY_ACCESS_ERROR',\n  DATABASE_SECURITY_ACCESS_ERROR: 'DATABASE_SECURITY_ACCESS_ERROR',\n  QUERY_SECURITY_ACCESS_ERROR: 'QUERY_SECURITY_ACCESS_ERROR',\n  MISSING_OWNERSHIP_ERROR: 'MISSING_OWNERSHIP_ERROR',\n\n  // Other errors\n  BACKEND_TIMEOUT_ERROR: 'BACKEND_TIMEOUT_ERROR',\n  DATABASE_NOT_FOUND_ERROR: 'DATABASE_NOT_FOUND_ERROR',\n\n  // Sqllab error\n  MISSING_TEMPLATE_PARAMS_ERROR: 'MISSING_TEMPLATE_PARAMS_ERROR',\n  INVALID_TEMPLATE_PARAMS_ERROR: 'INVALID_TEMPLATE_PARAMS_ERROR',\n  RESULTS_BACKEND_NOT_CONFIGURED_ERROR: 'RESULTS_BACKEND_NOT_CONFIGURED_ERROR',\n  DML_NOT_ALLOWED_ERROR: 'DML_NOT_ALLOWED_ERROR',\n  INVALID_CTAS_QUERY_ERROR: 'INVALID_CTAS_QUERY_ERROR',\n  INVALID_CVAS_QUERY_ERROR: 'INVALID_CVAS_QUERY_ERROR',\n  SQLLAB_TIMEOUT_ERROR: 'SQLLAB_TIMEOUT_ERROR',\n  RESULTS_BACKEND_ERROR: 'RESULTS_BACKEND_ERROR',\n  ASYNC_WORKERS_ERROR: 'ASYNC_WORKERS_ERROR',\n\n  // Generic errors\n  GENERIC_COMMAND_ERROR: 'GENERIC_COMMAND_ERROR',\n  GENERIC_BACKEND_ERROR: 'GENERIC_BACKEND_ERROR',\n\n  // API errors\n  INVALID_PAYLOAD_FORMAT_ERROR: 'INVALID_PAYLOAD_FORMAT_ERROR',\n  INVALID_PAYLOAD_SCHEMA_ERROR: 'INVALID_PAYLOAD_SCHEMA_ERROR',\n} as const;\n\ntype ValueOf<T> = T[keyof T];\n\nexport type ErrorType = ValueOf<typeof ErrorTypeEnum>;\n\n// Keep in sync with superset/views/errors.py\nexport type ErrorLevel = 'info' | 'warning' | 'error';\n\nexport type ErrorSource = 'dashboard' | 'explore' | 'sqllab';\n\nexport type SupersetError<ExtraType = Record<string, any> | null> = {\n  error_type: ErrorType;\n  extra: ExtraType;\n  level: ErrorLevel;\n  message: string;\n};\n\nexport const CtasEnum = {\n  TABLE: 'TABLE',\n  VIEW: 'VIEW',\n};\n\nexport type QueryColumn = {\n  name?: string;\n  column_name: string;\n  type: string | null;\n  is_dttm: boolean;\n};\n\n// Possible states of a query object for processing on the server\nexport enum QueryState {\n  STARTED = 'started',\n  STOPPED = 'stopped',\n  FAILED = 'failed',\n  PENDING = 'pending',\n  RUNNING = 'running',\n  SCHEDULED = 'scheduled',\n  SUCCESS = 'success',\n  FETCHING = 'fetching',\n  TIMED_OUT = 'timed_out',\n}\n\n// Inidcates a Query's state is still processing\nexport const runningQueryStateList: QueryState[] = [\n  QueryState.RUNNING,\n  QueryState.STARTED,\n  QueryState.PENDING,\n  QueryState.FETCHING,\n  QueryState.SCHEDULED,\n];\n\n// Indicates a Query's state has completed processing regardless of success / failure\nexport const concludedQueryStateList: QueryState[] = [\n  QueryState.STOPPED,\n  QueryState.FAILED,\n  QueryState.SUCCESS,\n  QueryState.TIMED_OUT,\n];\n\nexport type Query = {\n  cached: boolean;\n  ctas: boolean;\n  ctas_method?: keyof typeof CtasEnum;\n  dbId: number;\n  errors?: SupersetError[];\n  errorMessage: string | null;\n  extra: {\n    progress: string | null;\n    errors?: SupersetError[];\n  };\n  id: string;\n  isDataPreview: boolean;\n  link?: string;\n  progress: number;\n  resultsKey: string | null;\n  schema?: string;\n  sql: string;\n  sqlEditorId: string;\n  state: QueryState;\n  tab: string | null;\n  tempSchema: string | null;\n  tempTable: string;\n  trackingUrl: string | null;\n  templateParams: any;\n  rows: number;\n  queryLimit: number;\n  limitingFactor: string;\n  endDttm: number;\n  duration: string;\n  startDttm: number;\n  time: Record<string, any>;\n  user: Record<string, any>;\n  userId: number;\n  db: Record<string, any>;\n  started: string;\n  querylink: Record<string, any>;\n  queryId: number;\n  executedSql: string;\n  output: string | Record<string, any>;\n  actions: Record<string, any>;\n  type: DatasourceType;\n  columns: QueryColumn[];\n};\n\nexport type QueryResults = {\n  results: {\n    displayLimitReached: boolean;\n    columns: QueryColumn[];\n    data: Record<string, unknown>[];\n    expanded_columns: QueryColumn[];\n    selected_columns: QueryColumn[];\n    query: { limit: number };\n    query_id?: number;\n  };\n};\n\nexport type QueryResponse = Query & QueryResults;\n\n// todo: move out from typing\nexport const testQuery: Query = {\n  id: 'clientId2353',\n  dbId: 1,\n  sql: 'SELECT * FROM something',\n  sqlEditorId: 'dfsadfs',\n  tab: 'unimportant',\n  tempTable: '',\n  ctas: false,\n  cached: false,\n  errorMessage: null,\n  extra: { progress: null },\n  isDataPreview: false,\n  progress: 0,\n  resultsKey: null,\n  state: QueryState.SUCCESS,\n  tempSchema: null,\n  trackingUrl: null,\n  templateParams: null,\n  rows: 42,\n  queryLimit: 100,\n  limitingFactor: '',\n  endDttm: 1476910579693,\n  duration: '',\n  startDttm: 1476910566092.96,\n  time: {},\n  user: {},\n  userId: 1,\n  db: {},\n  started: '',\n  querylink: {},\n  queryId: 1,\n  executedSql: '',\n  output: '',\n  actions: {},\n  type: DatasourceType.Query,\n  columns: [\n    {\n      column_name: 'Column 1',\n      type: 'STRING',\n      is_dttm: false,\n    },\n    {\n      column_name: 'Column 3',\n      type: 'STRING',\n      is_dttm: false,\n    },\n    {\n      column_name: 'Column 2',\n      type: 'TIMESTAMP',\n      is_dttm: true,\n    },\n  ],\n};\n\nexport const testQueryResults = {\n  results: {\n    displayLimitReached: false,\n    columns: [\n      {\n        column_name: 'Column 1',\n        type: 'STRING',\n        is_dttm: false,\n      },\n      {\n        column_name: 'Column 3',\n        type: 'STRING',\n        is_dttm: false,\n      },\n      {\n        column_name: 'Column 2',\n        type: 'TIMESTAMP',\n        is_dttm: true,\n      },\n    ],\n    data: [\n      { 'Column 1': 'a', 'Column 2': 'b', 'Column 3': '2014-11-11T00:00:00' },\n    ],\n    expanded_columns: [],\n    selected_columns: [\n      {\n        column_name: 'Column 1',\n        type: 'STRING',\n        is_dttm: false,\n      },\n      {\n        column_name: 'Column 3',\n        type: 'STRING',\n        is_dttm: false,\n      },\n      {\n        column_name: 'Column 2',\n        type: 'TIMESTAMP',\n        is_dttm: true,\n      },\n    ],\n    query: { limit: 6 },\n  },\n};\n\nexport const testQueryResponse = { ...testQuery, ...testQueryResults };\n\nexport enum ContributionType {\n  Row = 'row',\n  Column = 'column',\n}\n\nexport type DatasourceSamplesQuery = {\n  filters?: QueryObjectFilterClause[];\n};\n\nexport default {};\n"]},"metadata":{},"sourceType":"module"}