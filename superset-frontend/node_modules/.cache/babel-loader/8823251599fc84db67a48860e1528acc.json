{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useMemo, useRef, useState } from 'react';\nimport ChartContextMenu from './ChartContextMenu';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport const useContextMenu = (chartId, formData, onSelection, displayedItems, additionalConfig) => {\n  const contextMenuRef = useRef(null);\n  const [inContextMenu, setInContextMenu] = useState(false);\n  const onContextMenu = (offsetX, offsetY, filters) => {var _contextMenuRef$curre;\n    (_contextMenuRef$curre = contextMenuRef.current) == null ? void 0 : _contextMenuRef$curre.open(offsetX, offsetY, filters);\n    setInContextMenu(true);\n  };\n  const handleContextMenuSelected = useCallback(function () {\n    setInContextMenu(false);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}\n    onSelection == null ? void 0 : onSelection(...args);\n  }, [onSelection]);\n  const handleContextMenuClosed = useCallback(() => {\n    setInContextMenu(false);\n  }, []);\n  const contextMenu = useMemo(() => ___EmotionJSX(ChartContextMenu, { ref: contextMenuRef, id: chartId, formData: formData, onSelection: handleContextMenuSelected, onClose: handleContextMenuClosed, displayedItems: displayedItems, additionalConfig: additionalConfig }), [\n  additionalConfig,\n  chartId,\n  displayedItems,\n  formData,\n  handleContextMenuClosed,\n  handleContextMenuSelected]);\n\n  return { contextMenu, inContextMenu, onContextMenu };\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,OAA7B,EAAsCC,MAAtC,EAA8CC,QAA9C,QAA8D,OAA9D;AAEA,OAAOC,gBAAP,MAGO,oBAHP,C;AAKA,OAAO,MAAMC,cAAc,GAAG,CAC5BC,OAD4B,EAE5BC,QAF4B,EAG5BC,WAH4B,EAI5BC,cAJ4B,EAK5BC,gBAL4B,KAU1B;EACF,MAAMC,cAAc,GAAGT,MAAM,CAAsB,IAAtB,CAA7B;EACA,MAAM,CAACU,aAAD,EAAgBC,gBAAhB,IAAoCV,QAAQ,CAAC,KAAD,CAAlD;EACA,MAAMW,aAAa,GAAG,CACpBC,OADoB,EAEpBC,OAFoB,EAGpBC,OAHoB,KAIlB;IACF,uCAAc,CAACC,OAAf,2CAAwBC,IAAxB,CAA6BJ,OAA7B,EAAsCC,OAAtC,EAA+CC,OAA/C;IACAJ,gBAAgB,CAAC,IAAD,CAAhB;EACD,CAPD;EASA,MAAMO,yBAAyB,GAAGpB,WAAW,CAC3C,YAAiB;IACfa,gBAAgB,CAAC,KAAD,CAAhB,CADe,kCAAbQ,IAAa,oDAAbA,IAAa;IAEfb,WAAW,QAAX,uBAAW,CAAG,GAAGa,IAAN,CAAX;EACD,CAJ0C,EAK3C,CAACb,WAAD,CAL2C,CAA7C;EAQA,MAAMc,uBAAuB,GAAGtB,WAAW,CAAC,MAAK;IAC/Ca,gBAAgB,CAAC,KAAD,CAAhB;EACD,CAF0C,EAExC,EAFwC,CAA3C;EAIA,MAAMU,WAAW,GAAGtB,OAAO,CACzB,MACE,cAAC,gBAAD,IACE,GAAG,EAAEU,cADP,EAEE,EAAE,EAAEL,OAFN,EAGE,QAAQ,EAAEC,QAHZ,EAIE,WAAW,EAAEa,yBAJf,EAKE,OAAO,EAAEE,uBALX,EAME,cAAc,EAAEb,cANlB,EAOE,gBAAgB,EAAEC,gBAPpB,GAFuB,EAYzB;EACEA,gBADF;EAEEJ,OAFF;EAGEG,cAHF;EAIEF,QAJF;EAKEe,uBALF;EAMEF,yBANF,CAZyB,CAA3B;;EAqBA,OAAO,EAAEG,WAAF,EAAeX,aAAf,EAA8BE,aAA9B,EAAP;AACD,CAxDM","names":["React","useCallback","useMemo","useRef","useState","ChartContextMenu","useContextMenu","chartId","formData","onSelection","displayedItems","additionalConfig","contextMenuRef","inContextMenu","setInContextMenu","onContextMenu","offsetX","offsetY","filters","current","open","handleContextMenuSelected","args","handleContextMenuClosed","contextMenu"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/components/Chart/ChartContextMenu/useContextMenu.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useMemo, useRef, useState } from 'react';\nimport { BaseFormData, ContextMenuFilters } from '@superset-ui/core';\nimport ChartContextMenu, {\n  ChartContextMenuRef,\n  ContextMenuItem,\n} from './ChartContextMenu';\n\nexport const useContextMenu = (\n  chartId: number,\n  formData: BaseFormData & { [key: string]: any },\n  onSelection?: (...args: any) => void,\n  displayedItems?: ContextMenuItem[] | ContextMenuItem,\n  additionalConfig?: {\n    crossFilter?: Record<string, any>;\n    drillToDetail?: Record<string, any>;\n    drillBy?: Record<string, any>;\n  },\n) => {\n  const contextMenuRef = useRef<ChartContextMenuRef>(null);\n  const [inContextMenu, setInContextMenu] = useState(false);\n  const onContextMenu = (\n    offsetX: number,\n    offsetY: number,\n    filters: ContextMenuFilters,\n  ) => {\n    contextMenuRef.current?.open(offsetX, offsetY, filters);\n    setInContextMenu(true);\n  };\n\n  const handleContextMenuSelected = useCallback(\n    (...args: any) => {\n      setInContextMenu(false);\n      onSelection?.(...args);\n    },\n    [onSelection],\n  );\n\n  const handleContextMenuClosed = useCallback(() => {\n    setInContextMenu(false);\n  }, []);\n\n  const contextMenu = useMemo(\n    () => (\n      <ChartContextMenu\n        ref={contextMenuRef}\n        id={chartId}\n        formData={formData}\n        onSelection={handleContextMenuSelected}\n        onClose={handleContextMenuClosed}\n        displayedItems={displayedItems}\n        additionalConfig={additionalConfig}\n      />\n    ),\n    [\n      additionalConfig,\n      chartId,\n      displayedItems,\n      formData,\n      handleContextMenuClosed,\n      handleContextMenuSelected,\n    ],\n  );\n  return { contextMenu, inContextMenu, onContextMenu };\n};\n"]},"metadata":{},"sourceType":"module"}