{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { ClassNames } from '@emotion/react';\nimport { styled, useTheme, t } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst StyledTooltip = (props) => {\n  const theme = useTheme();\n  return ___EmotionJSX(ClassNames, null,\n  (_ref) => {let { css } = _ref;return ___EmotionJSX(Tooltip, _extends({ overlayClassName: css`\n            .ant-tooltip-inner {\n              max-width: ${theme.gridUnit * 125}px;\n              word-wrap: break-word;\n              text-align: center;\n\n              pre {\n                background: transparent;\n                border: none;\n                text-align: left;\n                color: ${theme.colors.grayscale.light5};\n                font-size: ${theme.typography.sizes.xs}px;\n              }\n            }\n          ` }, props));});\n\n};__signature__(StyledTooltip, \"useTheme{theme}\", () => [useTheme]);\nconst Hr = styled.hr`\n  margin-top: ${(_ref2) => {let { theme } = _ref2;return theme.gridUnit * 1.5;}}px;\n`;\nconst iconMap = {\n  pk: 'fa-key',\n  fk: 'fa-link',\n  index: 'fa-bookmark' };\n\nconst tooltipTitleMap = {\n  pk: t('Primary key'),\n  fk: t('Foreign key'),\n  index: t('Index') };\n\nconst NowrapDiv = styled.div`\n  white-space: nowrap;\n`;\nconst ColumnElement = (_ref3) => {let { column } = _ref3;\n  let columnName = column.name;\n  let icons;\n  if (column.keys && column.keys.length > 0) {\n    columnName = ___EmotionJSX(\"strong\", null, column.name);\n    icons = column.keys.map((key, i) => ___EmotionJSX(\"span\", { key: i, className: \"ColumnElement\" },\n    ___EmotionJSX(StyledTooltip, { placement: \"right\", title: ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(\"strong\", null, tooltipTitleMap[key.type]),\n      ___EmotionJSX(Hr, null),\n      ___EmotionJSX(\"pre\", { className: \"text-small\" },\n      JSON.stringify(key, null, '  '))) },\n\n\n    ___EmotionJSX(\"i\", { className: `fa text-muted m-l-2 ${iconMap[key.type]}` }))));\n\n\n  }\n  return ___EmotionJSX(\"div\", { className: \"clearfix table-column\" },\n  ___EmotionJSX(\"div\", { className: \"pull-left m-l-10 col-name\" },\n  columnName,\n  icons),\n\n  ___EmotionJSX(NowrapDiv, { className: \"pull-right text-muted\" },\n  ___EmotionJSX(\"small\", null, \" \", column.type)));\n\n\n};const _default =\nColumnElement;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(StyledTooltip, \"StyledTooltip\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/SqlLab/components/ColumnElement/index.tsx\");reactHotLoader.register(Hr, \"Hr\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/SqlLab/components/ColumnElement/index.tsx\");reactHotLoader.register(iconMap, \"iconMap\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/SqlLab/components/ColumnElement/index.tsx\");reactHotLoader.register(tooltipTitleMap, \"tooltipTitleMap\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/SqlLab/components/ColumnElement/index.tsx\");reactHotLoader.register(NowrapDiv, \"NowrapDiv\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/SqlLab/components/ColumnElement/index.tsx\");reactHotLoader.register(ColumnElement, \"ColumnElement\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/SqlLab/components/ColumnElement/index.tsx\");reactHotLoader.register(_default, \"default\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/SqlLab/components/ColumnElement/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"sWAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,gBAA3B;AACA,SAASC,MAAT,EAAiBC,QAAjB,EAA2BC,CAA3B,QAAoC,mBAApC;AACA,SAASC,OAAT,QAAwB,wBAAxB,C;AAEA,MAAMC,aAAa,GAAG,CAACC,KAAD,KAAe;EACnC,MAAMC,KAAK,GAAGL,QAAQ,EAAtB;EACA,OACE,cAAC,UAAD;EACG,eAAC,EAAEM,GAAF,EAAD,eACC,cAAC,OAAD,aACE,gBAAgB,EAAEA,GAAG;;2BAEJD,KAAK,CAACE,QAAN,GAAiB,GAAG;;;;;;;;yBAQtBF,KAAK,CAACG,MAAN,CAAaC,SAAb,CAAuBC,MAAM;6BACzBL,KAAK,CAACM,UAAN,CAAiBC,KAAjB,CAAuBC,EAAE;;;WAZ9C,IAgBMT,KAhBN,EADD,EADH,CADF;;AAwBD,CA1BD,C,cAAMD,a,4BACUH,Q;AA2BhB,MAAMc,EAAE,GAAGf,MAAM,CAACgB,EAAE;gBACJ,gBAAC,EAAEV,KAAF,EAAD,gBAAeA,KAAK,CAACE,QAAN,GAAiB,GAAhC,EAAmC;CADnD;AAIA,MAAMS,OAAO,GAAG;EACdC,EAAE,EAAE,QADU;EAEdC,EAAE,EAAE,SAFU;EAGdC,KAAK,EAAE,aAHO,EAAhB;;AAMA,MAAMC,eAAe,GAAG;EACtBH,EAAE,EAAEhB,CAAC,CAAC,aAAD,CADiB;EAEtBiB,EAAE,EAAEjB,CAAC,CAAC,aAAD,CAFiB;EAGtBkB,KAAK,EAAElB,CAAC,CAAC,OAAD,CAHc,EAAxB;;AAgBA,MAAMoB,SAAS,GAAGtB,MAAM,CAACuB,GAAG;;CAA5B;AAIA,MAAMC,aAAa,GAAG,WAAmC,KAAlC,EAAEC,MAAF,EAAkC;EACvD,IAAIC,UAAU,GAAoBD,MAAM,CAACE,IAAzC;EACA,IAAIC,KAAJ;EACA,IAAIH,MAAM,CAACI,IAAP,IAAeJ,MAAM,CAACI,IAAP,CAAYC,MAAZ,GAAqB,CAAxC,EAA2C;IACzCJ,UAAU,GAAG,8BAASD,MAAM,CAACE,IAAhB,CAAb;IACAC,KAAK,GAAGH,MAAM,CAACI,IAAP,CAAYE,GAAZ,CAAgB,CAACC,GAAD,EAAMC,CAAN,KACtB,wBAAM,GAAG,EAAEA,CAAX,EAAc,SAAS,EAAC,eAAxB;IACE,cAAC,aAAD,IACE,SAAS,EAAC,OADZ,EAEE,KAAK,EACH;MACE,8BAASZ,eAAe,CAACW,GAAG,CAACE,IAAL,CAAxB,CADF;MAEE,cAAC,EAAD,OAFF;MAGE,uBAAK,SAAS,EAAC,YAAf;MACGC,IAAI,CAACC,SAAL,CAAeJ,GAAf,EAAoB,IAApB,EAA0B,IAA1B,CADH,CAHF,CAHJ;;;IAYE,qBAAG,SAAS,EAAE,uBAAuBf,OAAO,CAACe,GAAG,CAACE,IAAL,CAAU,EAAtD,GAZF,CADF,CADM,CAAR;;;EAkBD;EACD,OACE,uBAAK,SAAS,EAAC,uBAAf;EACE,uBAAK,SAAS,EAAC,2BAAf;EACGR,UADH;EAEGE,KAFH,CADF;;EAKE,cAAC,SAAD,IAAW,SAAS,EAAC,uBAArB;EACE,kCAASH,MAAM,CAACS,IAAhB,CADF,CALF,CADF;;;AAWD,CAnCD,C;AAqCeV,a,CAAf,wB,iLA/FMpB,a,6JA4BAW,E,kJAIAE,O,uJAMAI,e,+JAgBAC,S,yJAIAE,a","names":["React","ClassNames","styled","useTheme","t","Tooltip","StyledTooltip","props","theme","css","gridUnit","colors","grayscale","light5","typography","sizes","xs","Hr","hr","iconMap","pk","fk","index","tooltipTitleMap","NowrapDiv","div","ColumnElement","column","columnName","name","icons","keys","length","map","key","i","type","JSON","stringify"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/SqlLab/components/ColumnElement/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { ClassNames } from '@emotion/react';\nimport { styled, useTheme, t } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';\n\nconst StyledTooltip = (props: any) => {\n  const theme = useTheme();\n  return (\n    <ClassNames>\n      {({ css }) => (\n        <Tooltip\n          overlayClassName={css`\n            .ant-tooltip-inner {\n              max-width: ${theme.gridUnit * 125}px;\n              word-wrap: break-word;\n              text-align: center;\n\n              pre {\n                background: transparent;\n                border: none;\n                text-align: left;\n                color: ${theme.colors.grayscale.light5};\n                font-size: ${theme.typography.sizes.xs}px;\n              }\n            }\n          `}\n          {...props}\n        />\n      )}\n    </ClassNames>\n  );\n};\n\nconst Hr = styled.hr`\n  margin-top: ${({ theme }) => theme.gridUnit * 1.5}px;\n`;\n\nconst iconMap = {\n  pk: 'fa-key',\n  fk: 'fa-link',\n  index: 'fa-bookmark',\n};\n\nconst tooltipTitleMap = {\n  pk: t('Primary key'),\n  fk: t('Foreign key'),\n  index: t('Index'),\n};\n\nexport type ColumnKeyTypeType = keyof typeof tooltipTitleMap;\n\ninterface ColumnElementProps {\n  column: {\n    name: string;\n    keys?: { type: ColumnKeyTypeType }[];\n    type: string;\n  };\n}\n\nconst NowrapDiv = styled.div`\n  white-space: nowrap;\n`;\n\nconst ColumnElement = ({ column }: ColumnElementProps) => {\n  let columnName: React.ReactNode = column.name;\n  let icons;\n  if (column.keys && column.keys.length > 0) {\n    columnName = <strong>{column.name}</strong>;\n    icons = column.keys.map((key, i) => (\n      <span key={i} className=\"ColumnElement\">\n        <StyledTooltip\n          placement=\"right\"\n          title={\n            <>\n              <strong>{tooltipTitleMap[key.type]}</strong>\n              <Hr />\n              <pre className=\"text-small\">\n                {JSON.stringify(key, null, '  ')}\n              </pre>\n            </>\n          }\n        >\n          <i className={`fa text-muted m-l-2 ${iconMap[key.type]}`} />\n        </StyledTooltip>\n      </span>\n    ));\n  }\n  return (\n    <div className=\"clearfix table-column\">\n      <div className=\"pull-left m-l-10 col-name\">\n        {columnName}\n        {icons}\n      </div>\n      <NowrapDiv className=\"pull-right text-muted\">\n        <small> {column.type}</small>\n      </NowrapDiv>\n    </div>\n  );\n};\n\nexport default ColumnElement;\n"]},"metadata":{},"sourceType":"module"}