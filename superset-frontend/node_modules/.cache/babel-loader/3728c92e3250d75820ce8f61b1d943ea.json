{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { HeatmapLayer } from 'deck.gl';\nimport React from 'react';\nimport { t, getSequentialSchemeRegistry } from '@superset-ui/core';\nimport { commonLayerProps } from '../common';\nimport sandboxedEval from '../../utils/sandbox';\nimport { hexToRGB } from '../../utils/colors';\nimport { createDeckGLComponent } from '../../factory';\nimport TooltipRow from '../../TooltipRow';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nfunction setTooltipContent(o) {\n  return ___EmotionJSX(\"div\", { className: \"deckgl-tooltip\" },\n  ___EmotionJSX(TooltipRow, { label: t('Centroid (Longitude and Latitude): '), value: `(${o.coordinate[0]}, ${o.coordinate[1]})` }));\n\n}\nexport const getLayer = (formData, payload, onAddFilter, setTooltip) => {var _getSequentialSchemeR, _getSequentialSchemeR2, _colorScale$range, _colorScale$range$map;\n  const fd = formData;\n  const { intensity = 1, radius_pixels: radiusPixels = 30, aggregation = 'SUM', js_data_mutator: jsFnMutator, linear_color_scheme: colorScheme } = fd;\n  let data = payload.data.features;\n  if (jsFnMutator) {\n    // Applying user defined data mutator if defined\n    const jsFnMutatorFunction = sandboxedEval(fd.js_data_mutator);\n    data = jsFnMutatorFunction(data);\n  }\n  const colorScale = (_getSequentialSchemeR = getSequentialSchemeRegistry()) == null ? void 0 : (_getSequentialSchemeR2 = _getSequentialSchemeR.\n  get(colorScheme)) == null ? void 0 : _getSequentialSchemeR2.\n  createLinearScale([0, 6]);\n  const colorRange = colorScale == null ? void 0 : (_colorScale$range = colorScale.\n  range()) == null ? void 0 : (_colorScale$range$map = _colorScale$range.\n  map((color) => hexToRGB(color))) == null ? void 0 : _colorScale$range$map.\n  reverse();\n  return new HeatmapLayer({\n    id: `heatmp-layer-${fd.slice_id}`,\n    data,\n    intensity,\n    radiusPixels,\n    colorRange,\n    aggregation: aggregation.toUpperCase(),\n    getPosition: (d) => d.position,\n    getWeight: (d) => d.weight ? d.weight : 1,\n    ...commonLayerProps(fd, setTooltip, setTooltipContent) });\n\n};\nfunction getPoints(data) {\n  return data.map((d) => d.position);\n}\nexport default createDeckGLComponent(getLayer, getPoints);","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,SAASA,YAAT,QAA6B,SAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,CAAT,EAAYC,2BAAZ,QAA+C,mBAA/C;AACA,SAASC,gBAAT,QAAiC,WAAjC;AACA,OAAOC,aAAP,MAA0B,qBAA1B;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,qBAAT,QAAoD,eAApD;AACA,OAAOC,UAAP,MAAuB,kBAAvB,C;AAEA,SAASC,iBAAT,CAA2BC,CAA3B,EAAiC;EAC/B,OACE,uBAAK,SAAS,EAAC,gBAAf;EACE,cAAC,UAAD,IACE,KAAK,EAAER,CAAC,CAAC,qCAAD,CADV,EAEE,KAAK,EAAE,IAAIQ,CAAC,CAACC,UAAF,CAAa,CAAb,CAAe,KAAKD,CAAC,CAACC,UAAF,CAAa,CAAb,CAAe,GAFhD,GADF,CADF;;AAQD;AACD,OAAO,MAAMC,QAAQ,GAA0B,CAC7CC,QAD6C,EAE7CC,OAF6C,EAG7CC,WAH6C,EAI7CC,UAJ6C,KAK3C;EACF,MAAMC,EAAE,GAAGJ,QAAX;EACA,MAAM,EACJK,SAAS,GAAG,CADR,EAEJC,aAAa,EAAEC,YAAY,GAAG,EAF1B,EAGJC,WAAW,GAAG,KAHV,EAIJC,eAAe,EAAEC,WAJb,EAKJC,mBAAmB,EAAEC,WALjB,KAMFR,EANJ;EAOA,IAAIS,IAAI,GAAGZ,OAAO,CAACY,IAAR,CAAaC,QAAxB;EAEA,IAAIJ,WAAJ,EAAiB;IACf;IACA,MAAMK,mBAAmB,GAAGvB,aAAa,CAACY,EAAE,CAACK,eAAJ,CAAzC;IACAI,IAAI,GAAGE,mBAAmB,CAACF,IAAD,CAA1B;EACD;EAED,MAAMG,UAAU,4BAAG1B,2BAA2B,EAA9B,+CAAG;EACf2B,GADe,CACXL,WADW,CAAH,qBAAG;EAEfM,iBAFe,CAEG,CAAC,CAAD,EAAI,CAAJ,CAFH,CAAnB;EAGA,MAAMC,UAAU,GAAGH,UAAH,yCAAGA,UAAU;EACzBI,KADe,EAAH,8CAAG;EAEfC,GAFe,CAEX,MAAK,KAAI5B,QAAQ,CAAC6B,KAAD,CAFN,CAAH,qBAAG;EAGfC,OAHe,EAAnB;EAKA,OAAO,IAAIpC,YAAJ,CAAiB;IACtBqC,EAAE,EAAE,gBAAgBpB,EAAE,CAACqB,QAAQ,EADT;IAEtBZ,IAFsB;IAGtBR,SAHsB;IAItBE,YAJsB;IAKtBY,UALsB;IAMtBX,WAAW,EAAEA,WAAW,CAACkB,WAAZ,EANS;IAOtBC,WAAW,EAAE,CAACC,CAAD,KAA+CA,CAAC,CAACC,QAPxC;IAQtBC,SAAS,EAAE,CAACF,CAAD,KACTA,CAAC,CAACG,MAAF,GAAWH,CAAC,CAACG,MAAb,GAAsB,CATF;IAUtB,GAAGxC,gBAAgB,CAACa,EAAD,EAAKD,UAAL,EAAiBP,iBAAjB,CAVG,EAAjB,CAAP;;AAYD,CA1CM;AA4CP,SAASoC,SAAT,CAAmBnB,IAAnB,EAA8B;EAC5B,OAAOA,IAAI,CAACQ,GAAL,CAAS,EAAC,KAAIO,CAAC,CAACC,QAAhB,CAAP;AACD;AAED,eAAenC,qBAAqB,CAACK,QAAD,EAAWiC,SAAX,CAApC","names":["HeatmapLayer","React","t","getSequentialSchemeRegistry","commonLayerProps","sandboxedEval","hexToRGB","createDeckGLComponent","TooltipRow","setTooltipContent","o","coordinate","getLayer","formData","payload","onAddFilter","setTooltip","fd","intensity","radius_pixels","radiusPixels","aggregation","js_data_mutator","jsFnMutator","linear_color_scheme","colorScheme","data","features","jsFnMutatorFunction","colorScale","get","createLinearScale","colorRange","range","map","color","reverse","id","slice_id","toUpperCase","getPosition","d","position","getWeight","weight","getPoints"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/plugins/legacy-preset-chart-deckgl/src/layers/Heatmap/Heatmap.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { HeatmapLayer } from 'deck.gl';\nimport React from 'react';\nimport { t, getSequentialSchemeRegistry } from '@superset-ui/core';\nimport { commonLayerProps } from '../common';\nimport sandboxedEval from '../../utils/sandbox';\nimport { hexToRGB } from '../../utils/colors';\nimport { createDeckGLComponent, getLayerType } from '../../factory';\nimport TooltipRow from '../../TooltipRow';\n\nfunction setTooltipContent(o: any) {\n  return (\n    <div className=\"deckgl-tooltip\">\n      <TooltipRow\n        label={t('Centroid (Longitude and Latitude): ')}\n        value={`(${o.coordinate[0]}, ${o.coordinate[1]})`}\n      />\n    </div>\n  );\n}\nexport const getLayer: getLayerType<unknown> = (\n  formData,\n  payload,\n  onAddFilter,\n  setTooltip,\n) => {\n  const fd = formData;\n  const {\n    intensity = 1,\n    radius_pixels: radiusPixels = 30,\n    aggregation = 'SUM',\n    js_data_mutator: jsFnMutator,\n    linear_color_scheme: colorScheme,\n  } = fd;\n  let data = payload.data.features;\n\n  if (jsFnMutator) {\n    // Applying user defined data mutator if defined\n    const jsFnMutatorFunction = sandboxedEval(fd.js_data_mutator);\n    data = jsFnMutatorFunction(data);\n  }\n\n  const colorScale = getSequentialSchemeRegistry()\n    ?.get(colorScheme)\n    ?.createLinearScale([0, 6]);\n  const colorRange = colorScale\n    ?.range()\n    ?.map(color => hexToRGB(color))\n    ?.reverse();\n\n  return new HeatmapLayer({\n    id: `heatmp-layer-${fd.slice_id}`,\n    data,\n    intensity,\n    radiusPixels,\n    colorRange,\n    aggregation: aggregation.toUpperCase(),\n    getPosition: (d: { position: number[]; weight: number }) => d.position,\n    getWeight: (d: { position: number[]; weight: number }) =>\n      d.weight ? d.weight : 1,\n    ...commonLayerProps(fd, setTooltip, setTooltipContent),\n  });\n};\n\nfunction getPoints(data: any[]) {\n  return data.map(d => d.position);\n}\n\nexport default createDeckGLComponent(getLayer, getPoints);\n"]},"metadata":{},"sourceType":"module"}