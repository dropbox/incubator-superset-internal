{"ast":null,"code":"import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { css, FeatureFlag, styled, SupersetClient, t } from '@superset-ui/core';\nimport rison from 'rison';\nimport { useSingleViewResource } from 'src/views/CRUD/hooks';\nimport Icons from 'src/components/Icons';\nimport { Switch } from 'src/components/Switch';\nimport Modal from 'src/components/Modal';\nimport TimezoneSelector from 'src/components/TimezoneSelector';\nimport { Radio } from 'src/components/Radio';\nimport { propertyComparator } from 'src/components/Select/utils';\nimport { isFeatureEnabled } from 'src/featureFlags';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { AntdCheckbox, AsyncSelect, Select } from 'src/components';\nimport TextAreaControl from 'src/explore/components/controls/TextAreaControl';\nimport { useCommonConf } from 'src/features/databases/state';\nimport { InfoTooltipWithTrigger } from '@superset-ui/chart-controls';\nimport { useSelector } from 'react-redux';\nimport { AlertReportCronScheduler } from './components/AlertReportCronScheduler';\nimport { NotificationMethod } from './components/NotificationMethod';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst TIMEOUT_MIN = 1;\nconst TEXT_BASED_VISUALIZATION_TYPES = [\n'pivot_table',\n'pivot_table_v2',\n'table',\n'paired_ttest'];\n\nconst DEFAULT_WORKING_TIMEOUT = 3600;\nconst DEFAULT_CRON_VALUE = '0 * * * *'; // every hour\nconst DEFAULT_RETENTION = 90;\nconst DEFAULT_NOTIFICATION_METHODS = ['Email'];\nconst DEFAULT_NOTIFICATION_FORMAT = 'PNG';\nconst CONDITIONS = [\n{\n  label: t('< (Smaller than)'),\n  value: '<' },\n\n{\n  label: t('> (Larger than)'),\n  value: '>' },\n\n{\n  label: t('<= (Smaller or equal)'),\n  value: '<=' },\n\n{\n  label: t('>= (Larger or equal)'),\n  value: '>=' },\n\n{\n  label: t('== (Is equal)'),\n  value: '==' },\n\n{\n  label: t('!= (Is not equal)'),\n  value: '!=' },\n\n{\n  label: t('Not null'),\n  value: 'not null' }];\n\n\nconst RETENTION_OPTIONS = [\n{\n  label: t('None'),\n  value: 0 },\n\n{\n  label: t('30 days'),\n  value: 30 },\n\n{\n  label: t('60 days'),\n  value: 60 },\n\n{\n  label: t('90 days'),\n  value: 90 }];\n\n\nconst StyledModal = styled(Modal)`\n  max-width: 1200px;\n  width: 100%;\n\n  .ant-modal-body {\n    overflow: initial;\n  }\n`;\nconst StyledIcon = (theme) => css`\n  margin: auto ${theme.gridUnit * 2}px auto 0;\n  color: ${theme.colors.grayscale.base};\n`;\nconst StyledSectionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  .control-label {\n    margin-top: ${(_ref) => {let { theme } = _ref;return theme.gridUnit;}}px;\n  }\n\n  .header-section {\n    display: flex;\n    flex: 0 0 auto;\n    align-items: center;\n    width: 100%;\n    padding: ${(_ref2) => {let { theme } = _ref2;return theme.gridUnit * 4;}}px;\n    border-bottom: 1px solid ${(_ref3) => {let { theme } = _ref3;return theme.colors.grayscale.light2;}};\n  }\n\n  .column-section {\n    display: flex;\n    flex: 1 1 auto;\n\n    .column {\n      flex: 1 1 auto;\n      min-width: calc(33.33% - ${(_ref4) => {let { theme } = _ref4;return theme.gridUnit * 8;}}px);\n      padding: ${(_ref5) => {let { theme } = _ref5;return theme.gridUnit * 4;}}px;\n\n      .async-select {\n        margin: 10px 0 20px;\n      }\n\n      &.condition {\n        border-right: 1px solid ${(_ref6) => {let { theme } = _ref6;return theme.colors.grayscale.light2;}};\n      }\n\n      &.message {\n        border-left: 1px solid ${(_ref7) => {let { theme } = _ref7;return theme.colors.grayscale.light2;}};\n      }\n    }\n  }\n\n  .inline-container {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    &.wrap {\n      flex-wrap: wrap;\n    }\n\n    > div {\n      flex: 1 1 auto;\n    }\n\n    &.add-margin {\n      margin-bottom: 5px;\n    }\n\n    .styled-input {\n      margin: 0 0 0 10px;\n\n      input {\n        flex: 0 0 auto;\n      }\n    }\n  }\n`;\nconst StyledSectionTitle = styled.div`\n  display: flex;\n  align-items: center;\n  margin: ${(_ref8) => {let { theme } = _ref8;return theme.gridUnit * 2;}}px auto\n    ${(_ref9) => {let { theme } = _ref9;return theme.gridUnit * 4;}}px auto;\n\n  h4 {\n    margin: 0;\n  }\n\n  .required {\n    margin-left: ${(_ref10) => {let { theme } = _ref10;return theme.gridUnit;}}px;\n    color: ${(_ref11) => {let { theme } = _ref11;return theme.colors.error.base;}};\n  }\n`;\nconst StyledSwitchContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 10px;\n\n  .switch-label {\n    margin-left: 10px;\n  }\n`;\nexport const StyledInputContainer = styled.div`\n  flex: 1;\n  margin-top: 0;\n\n  .helper {\n    display: block;\n    color: ${(_ref12) => {let { theme } = _ref12;return theme.colors.grayscale.base;}};\n    font-size: ${(_ref13) => {let { theme } = _ref13;return theme.typography.sizes.s;}}px;\n    padding: ${(_ref14) => {let { theme } = _ref14;return theme.gridUnit;}}px 0;\n    text-align: left;\n  }\n\n  .required {\n    margin-left: ${(_ref15) => {let { theme } = _ref15;return theme.gridUnit / 2;}}px;\n    color: ${(_ref16) => {let { theme } = _ref16;return theme.colors.error.base;}};\n  }\n\n  .input-container {\n    display: flex;\n    align-items: center;\n\n    > div {\n      width: 100%;\n    }\n\n    label {\n      display: flex;\n      margin-right: ${(_ref17) => {let { theme } = _ref17;return theme.gridUnit * 2;}}px;\n    }\n\n    i {\n      margin: 0 ${(_ref18) => {let { theme } = _ref18;return theme.gridUnit;}}px;\n    }\n  }\n\n  input,\n  textarea {\n    flex: 1 1 auto;\n  }\n\n  input[disabled] {\n    color: ${(_ref19) => {let { theme } = _ref19;return theme.colors.grayscale.base;}};\n  }\n\n  textarea {\n    height: 300px;\n    resize: none;\n  }\n\n  input::placeholder,\n  textarea::placeholder {\n    color: ${(_ref20) => {let { theme } = _ref20;return theme.colors.grayscale.light1;}};\n  }\n\n  textarea,\n  input[type='text'],\n  input[type='number'] {\n    padding: ${(_ref21) => {let { theme } = _ref21;return theme.gridUnit;}}px\n      ${(_ref22) => {let { theme } = _ref22;return theme.gridUnit * 2;}}px;\n    border-style: none;\n    border: 1px solid ${(_ref23) => {let { theme } = _ref23;return theme.colors.grayscale.light2;}};\n    border-radius: ${(_ref24) => {let { theme } = _ref24;return theme.gridUnit;}}px;\n\n    &[name='description'] {\n      flex: 1 1 auto;\n    }\n  }\n\n  .input-label {\n    margin-left: 10px;\n  }\n`;\nconst StyledRadio = styled(Radio)`\n  display: block;\n  line-height: ${(_ref25) => {let { theme } = _ref25;return theme.gridUnit * 7;}}px;\n`;\nconst StyledRadioGroup = styled(Radio.Group)`\n  margin-left: ${(_ref26) => {let { theme } = _ref26;return theme.gridUnit * 5.5;}}px;\n`;\nconst StyledCheckbox = styled(AntdCheckbox)`\n  margin-left: ${(_ref27) => {let { theme } = _ref27;return theme.gridUnit * 5.5;}}px;\n  margin-top: ${(_ref28) => {let { theme } = _ref28;return theme.gridUnit;}}px;\n`;\n// Notification Method components\nconst StyledNotificationAddButton = styled.div`\n  color: ${(_ref29) => {let { theme } = _ref29;return theme.colors.primary.dark1;}};\n  cursor: pointer;\n\n  i {\n    margin-right: ${(_ref30) => {let { theme } = _ref30;return theme.gridUnit * 2;}}px;\n  }\n\n  &.disabled {\n    color: ${(_ref31) => {let { theme } = _ref31;return theme.colors.grayscale.light1;}};\n    cursor: default;\n  }\n`;\nconst StyledNotificationMethodWrapper = styled.div`\n  .inline-container .input-container {\n    margin-left: 0;\n  }\n`;\nconst timezoneHeaderStyle = (theme) => css`\n  margin: ${theme.gridUnit * 3}px 0;\n`;\nconst inputSpacer = (theme) => css`\n  margin-right: ${theme.gridUnit * 3}px;\n`;\nconst TRANSLATIONS = {\n  ADD_NOTIFICATION_METHOD_TEXT: t('Add notification method'),\n  ADD_DELIVERY_METHOD_TEXT: t('Add delivery method'),\n  SAVE_TEXT: t('Save'),\n  ADD_TEXT: t('Add'),\n  EDIT_REPORT_TEXT: t('Edit Report'),\n  EDIT_ALERT_TEXT: t('Edit Alert'),\n  ADD_REPORT_TEXT: t('Add Report'),\n  ADD_ALERT_TEXT: t('Add Alert'),\n  REPORT_NAME_TEXT: t('Report name'),\n  ALERT_NAME_TEXT: t('Alert name'),\n  OWNERS_TEXT: t('Owners'),\n  DESCRIPTION_TEXT: t('Description'),\n  ACTIVE_TEXT: t('Active'),\n  ALERT_CONDITION_TEXT: t('Alert condition'),\n  DATABASE_TEXT: t('Database'),\n  SQL_QUERY_TEXT: t('SQL Query'),\n  TRIGGER_ALERT_IF_TEXT: t('Trigger Alert If...'),\n  CONDITION_TEXT: t('Condition'),\n  VALUE_TEXT: t('Value'),\n  VALUE_TOOLTIP: t('Threshold value should be double precision number'),\n  REPORT_SCHEDULE_TEXT: t('Report schedule'),\n  ALERT_CONDITION_SCHEDULE_TEXT: t('Alert condition schedule'),\n  TIMEZONE_TEXT: t('Timezone'),\n  SCHEDULE_SETTINGS_TEXT: t('Schedule settings'),\n  LOG_RETENTION_TEXT: t('Log retention'),\n  WORKING_TIMEOUT_TEXT: t('Working timeout'),\n  TIME_IN_SECONDS_TEXT: t('Time in seconds'),\n  SECONDS_TEXT: t('seconds'),\n  GRACE_PERIOD_TEXT: t('Grace period'),\n  MESSAGE_CONTENT_TEXT: t('Message content'),\n  DASHBOARD_TEXT: t('Dashboard'),\n  CHART_TEXT: t('Chart'),\n  SEND_AS_PNG_TEXT: t('Send as PNG'),\n  SEND_AS_CSV_TEXT: t('Send as CSV'),\n  SEND_AS_TEXT: t('Send as text'),\n  IGNORE_CACHE_TEXT: t('Ignore cache when generating screenshot'),\n  NOTIFICATION_METHOD_TEXT: t('Notification method') };\n\nconst NotificationMethodAdd = (_ref32) => {let { status = 'active', onClick } = _ref32;\n  if (status === 'hidden') {\n    return null;\n  }\n  const checkStatus = () => {\n    if (status !== 'disabled') {\n      onClick();\n    }\n  };\n  return ___EmotionJSX(StyledNotificationAddButton, { className: status, onClick: checkStatus },\n  ___EmotionJSX(\"i\", { className: \"fa fa-plus\" }), ' ',\n  status === 'active' ?\n  TRANSLATIONS.ADD_NOTIFICATION_METHOD_TEXT :\n  TRANSLATIONS.ADD_DELIVERY_METHOD_TEXT);\n\n};\nconst AlertReportModal = (_ref33) => {var _currentAlert$databas2, _currentAlert$databas3, _currentAlert$validat5, _currentAlert$validat6, _currentAlert$chart2, _currentAlert$chart3, _currentAlert$dashboa2, _currentAlert$dashboa3;let { addDangerToast, onAdd, onHide, show, alert = null, isReport = false, addSuccessToast } = _ref33;\n  const currentUser = useSelector((state) => state.user);\n  const conf = useCommonConf();\n  const allowedNotificationMethods = (conf == null ? void 0 : conf.ALERT_REPORTS_NOTIFICATION_METHODS) || DEFAULT_NOTIFICATION_METHODS;\n  const [disableSave, setDisableSave] = useState(true);\n  const [currentAlert, setCurrentAlert] = useState();\n  const [isHidden, setIsHidden] = useState(true);\n  const [contentType, setContentType] = useState('dashboard');\n  const [reportFormat, setReportFormat] = useState(DEFAULT_NOTIFICATION_FORMAT);\n  const [forceScreenshot, setForceScreenshot] = useState(false);\n  // Dropdown options\n  const [conditionNotNull, setConditionNotNull] = useState(false);\n  const [sourceOptions, setSourceOptions] = useState([]);\n  const [dashboardOptions, setDashboardOptions] = useState([]);\n  const [chartOptions, setChartOptions] = useState([]);\n  // Chart metadata\n  const [chartVizType, setChartVizType] = useState('');\n  const isEditMode = alert !== null;\n  const formatOptionEnabled = contentType === 'chart' && (\n  isFeatureEnabled(FeatureFlag.ALERTS_ATTACH_REPORTS) || isReport);\n  const [notificationAddState, setNotificationAddState] = useState('active');\n  const [notificationSettings, setNotificationSettings] = useState([]);\n  const onNotificationAdd = () => {\n    const settings = notificationSettings.slice();\n    settings.push({\n      recipients: '',\n      options: allowedNotificationMethods });\n\n    setNotificationSettings(settings);\n    setNotificationAddState(settings.length === allowedNotificationMethods.length ?\n    'hidden' :\n    'disabled');\n  };\n  const { ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT, ALERT_REPORTS_DEFAULT_CRON_VALUE, ALERT_REPORTS_DEFAULT_RETENTION } = useSelector((state) => {var _state$common, _conf$ALERT_REPORTS_D, _conf$ALERT_REPORTS_D2, _conf$ALERT_REPORTS_D3;\n    const conf = (_state$common = state.common) == null ? void 0 : _state$common.conf;\n    return {\n      ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT: (_conf$ALERT_REPORTS_D = conf == null ? void 0 : conf.ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT) != null ? _conf$ALERT_REPORTS_D : DEFAULT_WORKING_TIMEOUT,\n      ALERT_REPORTS_DEFAULT_CRON_VALUE: (_conf$ALERT_REPORTS_D2 = conf == null ? void 0 : conf.ALERT_REPORTS_DEFAULT_CRON_VALUE) != null ? _conf$ALERT_REPORTS_D2 : DEFAULT_CRON_VALUE,\n      ALERT_REPORTS_DEFAULT_RETENTION: (_conf$ALERT_REPORTS_D3 = conf == null ? void 0 : conf.ALERT_REPORTS_DEFAULT_RETENTION) != null ? _conf$ALERT_REPORTS_D3 : DEFAULT_RETENTION };\n\n  });\n  const defaultAlert = {\n    active: true,\n    creation_method: 'alerts_reports',\n    crontab: ALERT_REPORTS_DEFAULT_CRON_VALUE,\n    log_retention: ALERT_REPORTS_DEFAULT_RETENTION,\n    working_timeout: ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT,\n    name: '',\n    owners: [],\n    recipients: [],\n    sql: '',\n    validator_config_json: {},\n    validator_type: '',\n    force_screenshot: false,\n    grace_period: undefined };\n\n  const updateNotificationSetting = (index, setting) => {\n    const settings = notificationSettings.slice();\n    settings[index] = setting;\n    setNotificationSettings(settings);\n    if (setting.method !== undefined && notificationAddState !== 'hidden') {\n      setNotificationAddState('active');\n    }\n  };\n  const removeNotificationSetting = (index) => {\n    const settings = notificationSettings.slice();\n    settings.splice(index, 1);\n    setNotificationSettings(settings);\n    setNotificationAddState('active');\n  };\n  // Alert fetch logic\n  const { state: { loading, resource, error: fetchError }, fetchResource, createResource, updateResource, clearError } = useSingleViewResource('report', t('report'), addDangerToast);\n  // Functions\n  const hide = () => {\n    clearError();\n    setIsHidden(true);\n    onHide();\n    setNotificationSettings([]);\n    setCurrentAlert({ ...defaultAlert });\n    setNotificationAddState('active');\n  };\n  const onSave = () => {var _currentAlert$chart, _currentAlert$dashboa, _currentAlert$databas;\n    // Notification Settings\n    const recipients = [];\n    notificationSettings.forEach((setting) => {\n      if (setting.method && setting.recipients.length) {\n        recipients.push({\n          recipient_config_json: {\n            target: setting.recipients },\n\n          type: setting.method });\n\n      }\n    });\n    const shouldEnableForceScreenshot = contentType === 'chart' && !isReport;\n    const data = {\n      ...currentAlert,\n      type: isReport ? 'Report' : 'Alert',\n      force_screenshot: shouldEnableForceScreenshot || forceScreenshot,\n      validator_type: conditionNotNull ? 'not null' : 'operator',\n      validator_config_json: conditionNotNull ?\n      {} :\n      currentAlert == null ? void 0 : currentAlert.validator_config_json,\n      chart: contentType === 'chart' ? currentAlert == null ? void 0 : (_currentAlert$chart = currentAlert.chart) == null ? void 0 : _currentAlert$chart.value : null,\n      dashboard: contentType === 'dashboard' ? currentAlert == null ? void 0 : (_currentAlert$dashboa = currentAlert.dashboard) == null ? void 0 : _currentAlert$dashboa.value : null,\n      database: currentAlert == null ? void 0 : (_currentAlert$databas = currentAlert.database) == null ? void 0 : _currentAlert$databas.value,\n      owners: ((currentAlert == null ? void 0 : currentAlert.owners) || []).map((owner) => owner.value || owner.id),\n      recipients,\n      report_format: contentType === 'dashboard' ?\n      DEFAULT_NOTIFICATION_FORMAT :\n      reportFormat || DEFAULT_NOTIFICATION_FORMAT };\n\n    if (data.recipients && !data.recipients.length) {\n      delete data.recipients;\n    }\n    data.context_markdown = 'string';\n    if (isEditMode) {\n      // Edit\n      if (currentAlert != null && currentAlert.id) {\n        const update_id = currentAlert.id;\n        delete data.id;\n        delete data.created_by;\n        delete data.last_eval_dttm;\n        delete data.last_state;\n        delete data.last_value;\n        delete data.last_value_row_json;\n        updateResource(update_id, data).then((response) => {\n          if (!response) {\n            return;\n          }\n          addSuccessToast(t('%s updated', data.type));\n          if (onAdd) {\n            onAdd();\n          }\n          hide();\n        });\n      }\n    } else\n    if (currentAlert) {\n      // Create\n      createResource(data).then((response) => {\n        if (!response) {\n          return;\n        }\n        addSuccessToast(t('%s updated', data.type));\n        if (onAdd) {\n          onAdd(response);\n        }\n        hide();\n      });\n    }\n  };\n  // Fetch data to populate form dropdowns\n  const loadOwnerOptions = useMemo(() => function (input, page, pageSize) {if (input === void 0) {input = '';}\n    const query = rison.encode({\n      filter: input,\n      page,\n      page_size: pageSize });\n\n    return SupersetClient.get({\n      endpoint: `/api/v1/report/related/created_by?q=${query}` }).\n    then((response) => ({\n      data: response.json.result.map((item) => ({\n        value: item.value,\n        label: item.text })),\n\n      totalCount: response.json.count }));\n\n  }, []);\n  const getSourceData = useCallback((db) => {\n    const database = db || (currentAlert == null ? void 0 : currentAlert.database);\n    if (!database || database.label) {\n      return null;\n    }\n    let result;\n    // Cycle through source options to find the selected option\n    sourceOptions.forEach((source) => {\n      if (source.value === database.value || source.value === database.id) {\n        result = source;\n      }\n    });\n    return result;\n  }, [currentAlert == null ? void 0 : currentAlert.database, sourceOptions]);\n  // Updating alert/report state\n  const updateAlertState = (name, value) => {\n    setCurrentAlert((currentAlertData) => ({\n      ...currentAlertData,\n      [name]: value }));\n\n  };\n  const loadSourceOptions = useMemo(() => function (input, page, pageSize) {if (input === void 0) {input = '';}\n    const query = rison.encode({\n      filter: input,\n      page,\n      page_size: pageSize });\n\n    return SupersetClient.get({\n      endpoint: `/api/v1/report/related/database?q=${query}` }).\n    then((response) => {\n      const list = response.json.result.map((item) => ({\n        value: item.value,\n        label: item.text }));\n\n      setSourceOptions(list);\n      return { data: list, totalCount: response.json.count };\n    });\n  }, []);\n  const databaseLabel = (currentAlert == null ? void 0 : currentAlert.database) && !currentAlert.database.label;\n  useEffect(() => {\n    // Find source if current alert has one set\n    if (databaseLabel) {\n      updateAlertState('database', getSourceData());\n    }\n  }, [databaseLabel, getSourceData]);\n  const loadDashboardOptions = useMemo(() => function (input, page, pageSize) {if (input === void 0) {input = '';}\n    const query = rison.encode_uri({\n      filter: input,\n      page,\n      page_size: pageSize });\n\n    return SupersetClient.get({\n      endpoint: `/api/v1/report/related/dashboard?q=${query}` }).\n    then((response) => {\n      const list = response.json.result.map((item) => ({\n        value: item.value,\n        label: item.text }));\n\n      setDashboardOptions(list);\n      return { data: list, totalCount: response.json.count };\n    });\n  }, []);\n  const getDashboardData = (db) => {\n    const dashboard = db || (currentAlert == null ? void 0 : currentAlert.dashboard);\n    if (!dashboard || dashboard.label) {\n      return null;\n    }\n    let result;\n    // Cycle through dashboard options to find the selected option\n    dashboardOptions.forEach((dash) => {\n      if (dash.value === dashboard.value || dash.value === dashboard.id) {\n        result = dash;\n      }\n    });\n    return result;\n  };\n  const getChartData = useCallback((chartData) => {\n    const chart = chartData || (currentAlert == null ? void 0 : currentAlert.chart);\n    if (!chart || chart.label) {\n      return null;\n    }\n    let result;\n    // Cycle through chart options to find the selected option\n    chartOptions.forEach((slice) => {\n      if (slice.value === chart.value || slice.value === chart.id) {\n        result = slice;\n      }\n    });\n    return result;\n  }, [chartOptions, currentAlert == null ? void 0 : currentAlert.chart]);\n  const noChartLabel = (currentAlert == null ? void 0 : currentAlert.chart) && !(currentAlert != null && currentAlert.chart.label);\n  useEffect(() => {\n    // Find source if current alert has one set\n    if (noChartLabel) {\n      updateAlertState('chart', getChartData());\n    }\n  }, [getChartData, noChartLabel]);\n  const loadChartOptions = useMemo(() => function (input, page, pageSize) {if (input === void 0) {input = '';}\n    const query = rison.encode_uri({\n      filter: input,\n      page,\n      page_size: pageSize });\n\n    return SupersetClient.get({\n      endpoint: `/api/v1/report/related/chart?q=${query}` }).\n    then((response) => {\n      const list = response.json.result.map((item) => ({\n        value: item.value,\n        label: item.text }));\n\n      setChartOptions(list);\n      return { data: list, totalCount: response.json.count };\n    });\n  }, []);\n  const getChartVisualizationType = (chart) => SupersetClient.get({\n    endpoint: `/api/v1/chart/${chart.value}` }).\n  then((response) => setChartVizType(response.json.result.viz_type));\n  // Handle input/textarea updates\n  const onTextChange = (event) => {\n    const { target } = event;\n    updateAlertState(target.name, target.value);\n  };\n  const onTimeoutVerifyChange = (event) => {\n    const { target } = event;\n    const value = +target.value;\n    // Need to make sure grace period is not lower than TIMEOUT_MIN\n    if (value === 0) {\n      updateAlertState(target.name, null);\n    } else\n    {\n      updateAlertState(target.name, value ? Math.max(value, TIMEOUT_MIN) : value);\n    }\n  };\n  const onSQLChange = (value) => {\n    updateAlertState('sql', value || '');\n  };\n  const onOwnersChange = (value) => {\n    updateAlertState('owners', value || []);\n  };\n  const onSourceChange = (value) => {\n    updateAlertState('database', value || []);\n  };\n  const onDashboardChange = (dashboard) => {\n    updateAlertState('dashboard', dashboard || undefined);\n    updateAlertState('chart', null);\n  };\n  const onChartChange = (chart) => {\n    getChartVisualizationType(chart);\n    updateAlertState('chart', chart || undefined);\n    updateAlertState('dashboard', null);\n  };\n  const onActiveSwitch = (checked) => {\n    updateAlertState('active', checked);\n  };\n  const onConditionChange = (op) => {var _currentAlert$validat;\n    setConditionNotNull(op === 'not null');\n    const config = {\n      op,\n      threshold: currentAlert ? (_currentAlert$validat =\n      currentAlert.validator_config_json) == null ? void 0 : _currentAlert$validat.threshold :\n      undefined };\n\n    updateAlertState('validator_config_json', config);\n  };\n  const onThresholdChange = (event) => {var _currentAlert$validat2;\n    const { target } = event;\n    const config = {\n      op: currentAlert ? (_currentAlert$validat2 = currentAlert.validator_config_json) == null ? void 0 : _currentAlert$validat2.op : undefined,\n      threshold: target.value };\n\n    updateAlertState('validator_config_json', config);\n  };\n  const onLogRetentionChange = (retention) => {\n    updateAlertState('log_retention', retention);\n  };\n  const onTimezoneChange = (timezone) => {\n    updateAlertState('timezone', timezone);\n  };\n  const onContentTypeChange = (event) => {\n    const { target } = event;\n    // When switch content type, reset force_screenshot to false\n    setForceScreenshot(false);\n    // Gives time to close the select before changing the type\n    setTimeout(() => setContentType(target.value), 200);\n  };\n  const onFormatChange = (event) => {\n    const { target } = event;\n    setReportFormat(target.value);\n  };\n  const onForceScreenshotChange = (event) => {\n    setForceScreenshot(event.target.checked);\n  };\n  // Make sure notification settings has the required info\n  const checkNotificationSettings = () => {\n    if (!notificationSettings.length) {\n      return false;\n    }\n    let hasInfo = false;\n    notificationSettings.forEach((setting) => {var _setting$recipients;\n      if (!!setting.method && (_setting$recipients = setting.recipients) != null && _setting$recipients.length) {\n        hasInfo = true;\n      }\n    });\n    return hasInfo;\n  };\n  const validate = () => {var _currentAlert$name, _currentAlert$owners, _currentAlert$crontab;\n    if (currentAlert != null && (_currentAlert$name = currentAlert.name) != null && _currentAlert$name.length &&\n    currentAlert != null && (_currentAlert$owners = currentAlert.owners) != null && _currentAlert$owners.length &&\n    currentAlert != null && (_currentAlert$crontab = currentAlert.crontab) != null && _currentAlert$crontab.length &&\n    (currentAlert == null ? void 0 : currentAlert.working_timeout) !== undefined && (\n    contentType === 'dashboard' && !!(currentAlert != null && currentAlert.dashboard) ||\n    contentType === 'chart' && !!(currentAlert != null && currentAlert.chart)) &&\n    checkNotificationSettings()) {var _currentAlert$sql, _currentAlert$validat3, _currentAlert$validat4;\n      if (isReport) {\n        setDisableSave(false);\n      } else\n      if (!!currentAlert.database && (_currentAlert$sql =\n      currentAlert.sql) != null && _currentAlert$sql.length && (\n      conditionNotNull || !!((_currentAlert$validat3 = currentAlert.validator_config_json) != null && _currentAlert$validat3.op)) && (\n      conditionNotNull ||\n      ((_currentAlert$validat4 = currentAlert.validator_config_json) == null ? void 0 : _currentAlert$validat4.threshold) !== undefined)) {\n        setDisableSave(false);\n      } else\n      {\n        setDisableSave(true);\n      }\n    } else\n    {\n      setDisableSave(true);\n    }\n  };\n  // Initialize\n  useEffect(() => {\n    if (isEditMode && (\n    !(currentAlert != null && currentAlert.id) || (alert == null ? void 0 : alert.id) !== currentAlert.id || isHidden && show)) {\n      if ((alert == null ? void 0 : alert.id) !== null && !loading && !fetchError) {\n        const id = alert.id || 0;\n        fetchResource(id);\n      }\n    } else\n    if (!isEditMode && (\n    !currentAlert || currentAlert.id || isHidden && show)) {\n      setCurrentAlert({\n        ...defaultAlert,\n        owners: currentUser ?\n        [\n        {\n          value: currentUser.userId,\n          label: `${currentUser.firstName} ${currentUser.lastName}` }] :\n\n\n        [] });\n\n      setNotificationSettings([]);\n      setNotificationAddState('active');\n    }\n  }, [alert]);\n  useEffect(() => {\n    if (resource) {\n      // Add notification settings\n      const settings = (resource.recipients || []).map((setting) => {\n        const config = typeof setting.recipient_config_json === 'string' ?\n        JSON.parse(setting.recipient_config_json) :\n        {};\n        return {\n          method: setting.type,\n          // @ts-ignore: Type not assignable\n          recipients: config.target || setting.recipient_config_json,\n          options: allowedNotificationMethods };\n\n      });\n      setNotificationSettings(settings);\n      setNotificationAddState(settings.length === allowedNotificationMethods.length ?\n      'hidden' :\n      'active');\n      setContentType(resource.chart ? 'chart' : 'dashboard');\n      setReportFormat(resource.chart ?\n      resource.report_format || DEFAULT_NOTIFICATION_FORMAT :\n      DEFAULT_NOTIFICATION_FORMAT);\n      const validatorConfig = typeof resource.validator_config_json === 'string' ?\n      JSON.parse(resource.validator_config_json) :\n      resource.validator_config_json;\n      setConditionNotNull(resource.validator_type === 'not null');\n      if (resource.chart) {\n        setChartVizType(resource.chart.viz_type);\n      }\n      setForceScreenshot(resource.force_screenshot);\n      setCurrentAlert({\n        ...resource,\n        chart: resource.chart ?\n        getChartData(resource.chart) || {\n          value: resource.chart.id,\n          label: resource.chart.slice_name } :\n\n        undefined,\n        dashboard: resource.dashboard ?\n        getDashboardData(resource.dashboard) || {\n          value: resource.dashboard.id,\n          label: resource.dashboard.dashboard_title } :\n\n        undefined,\n        database: resource.database ?\n        getSourceData(resource.database) || {\n          value: resource.database.id,\n          label: resource.database.database_name } :\n\n        undefined,\n        owners: ((alert == null ? void 0 : alert.owners) || []).map((owner) => ({\n          value: owner.value || owner.id,\n          label: owner.label ||\n          `${owner.first_name} ${owner.last_name}` })),\n\n        // @ts-ignore: Type not assignable\n        validator_config_json: resource.validator_type === 'not null' ?\n        {\n          op: 'not null' } :\n\n        validatorConfig });\n\n    }\n  }, [resource]);\n  // Validation\n  const currentAlertSafe = currentAlert || {};\n  useEffect(() => {\n    validate();\n  }, [\n  currentAlertSafe.name,\n  currentAlertSafe.owners,\n  currentAlertSafe.database,\n  currentAlertSafe.sql,\n  currentAlertSafe.validator_config_json,\n  currentAlertSafe.crontab,\n  currentAlertSafe.working_timeout,\n  currentAlertSafe.dashboard,\n  currentAlertSafe.chart,\n  contentType,\n  notificationSettings,\n  conditionNotNull]);\n\n  // Show/hide\n  if (isHidden && show) {\n    setIsHidden(false);\n  }\n  return ___EmotionJSX(StyledModal, { className: \"no-content-padding\", responsive: true, disablePrimaryButton: disableSave, onHandledPrimaryAction: onSave, onHide: hide, primaryButtonName: isEditMode ? TRANSLATIONS.SAVE_TEXT : TRANSLATIONS.ADD_TEXT, show: show, width: \"100%\", maxWidth: \"1450px\", title: ___EmotionJSX(\"h4\", null,\n    isEditMode ? ___EmotionJSX(Icons.EditAlt, { css: StyledIcon }) : ___EmotionJSX(Icons.PlusLarge, { css: StyledIcon }),\n    isEditMode && isReport ?\n    TRANSLATIONS.EDIT_REPORT_TEXT :\n    isEditMode ?\n    TRANSLATIONS.EDIT_ALERT_TEXT :\n    isReport ?\n    TRANSLATIONS.ADD_REPORT_TEXT :\n    TRANSLATIONS.ADD_ALERT_TEXT) },\n\n  ___EmotionJSX(StyledSectionContainer, null,\n  ___EmotionJSX(\"div\", { className: \"header-section\" },\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" },\n  isReport ?\n  TRANSLATIONS.REPORT_NAME_TEXT :\n  TRANSLATIONS.ALERT_NAME_TEXT,\n  ___EmotionJSX(\"span\", { className: \"required\" }, \"*\")),\n\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(\"input\", { type: \"text\", name: \"name\", value: currentAlert ? currentAlert.name : '', placeholder: isReport ?\n    TRANSLATIONS.REPORT_NAME_TEXT :\n    TRANSLATIONS.ALERT_NAME_TEXT, onChange: onTextChange, css: inputSpacer }))),\n\n\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" },\n  TRANSLATIONS.OWNERS_TEXT,\n  ___EmotionJSX(\"span\", { className: \"required\" }, \"*\")),\n\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(AsyncSelect, { ariaLabel: TRANSLATIONS.OWNERS_TEXT, allowClear: true, name: \"owners\", mode: \"multiple\", value: (currentAlert == null ? void 0 : currentAlert.owners) || [], options: loadOwnerOptions, onChange: onOwnersChange, css: inputSpacer }))),\n\n\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" }, TRANSLATIONS.DESCRIPTION_TEXT),\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(\"input\", { type: \"text\", name: \"description\", value: currentAlert ? currentAlert.description || '' : '', placeholder: TRANSLATIONS.DESCRIPTION_TEXT, onChange: onTextChange, css: inputSpacer }))),\n\n\n  ___EmotionJSX(StyledSwitchContainer, null,\n  ___EmotionJSX(Switch, { onChange: onActiveSwitch, checked: currentAlert ? currentAlert.active : true }),\n  ___EmotionJSX(\"div\", { className: \"switch-label\" }, TRANSLATIONS.ACTIVE_TEXT))),\n\n\n  ___EmotionJSX(\"div\", { className: \"column-section\" },\n  !isReport && ___EmotionJSX(\"div\", { className: \"column condition\" },\n  ___EmotionJSX(StyledSectionTitle, null,\n  ___EmotionJSX(\"h4\", null, TRANSLATIONS.ALERT_CONDITION_TEXT)),\n\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" },\n  TRANSLATIONS.DATABASE_TEXT,\n  ___EmotionJSX(\"span\", { className: \"required\" }, \"*\")),\n\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(AsyncSelect, { ariaLabel: TRANSLATIONS.DATABASE_TEXT, name: \"source\", value: currentAlert != null && (_currentAlert$databas2 = currentAlert.database) != null && _currentAlert$databas2.label &&\n    currentAlert != null && (_currentAlert$databas3 = currentAlert.database) != null && _currentAlert$databas3.value ?\n    {\n      value: currentAlert.database.value,\n      label: currentAlert.database.label } :\n\n    undefined, options: loadSourceOptions, onChange: onSourceChange }))),\n\n\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" },\n  TRANSLATIONS.SQL_QUERY_TEXT,\n  ___EmotionJSX(\"span\", { className: \"required\" }, \"*\")),\n\n  ___EmotionJSX(TextAreaControl, { name: \"sql\", language: \"sql\", offerEditInModal: false, minLines: 15, maxLines: 15, onChange: onSQLChange, readOnly: false, initialValue: resource == null ? void 0 : resource.sql, key: currentAlert == null ? void 0 : currentAlert.id })),\n\n  ___EmotionJSX(\"div\", { className: \"inline-container wrap\" },\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\", css: inputSpacer },\n  TRANSLATIONS.TRIGGER_ALERT_IF_TEXT,\n  ___EmotionJSX(\"span\", { className: \"required\" }, \"*\")),\n\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(Select, { ariaLabel: TRANSLATIONS.CONDITION_TEXT, onChange: onConditionChange, placeholder: \"Condition\", value: (currentAlert == null ? void 0 : (_currentAlert$validat5 = currentAlert.validator_config_json) == null ? void 0 : _currentAlert$validat5.op) || undefined, options: CONDITIONS, css: inputSpacer }))),\n\n\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" },\n  TRANSLATIONS.VALUE_TEXT, ' ',\n  ___EmotionJSX(InfoTooltipWithTrigger, { tooltip: TRANSLATIONS.VALUE_TOOLTIP }),\n  ___EmotionJSX(\"span\", { className: \"required\" }, \"*\")),\n\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(\"input\", { type: \"number\", name: \"threshold\", disabled: conditionNotNull, value: (currentAlert == null ? void 0 : (_currentAlert$validat6 = currentAlert.validator_config_json) == null ? void 0 : _currentAlert$validat6.threshold) !==\n    undefined ?\n    currentAlert.validator_config_json.threshold :\n    '', placeholder: TRANSLATIONS.VALUE_TEXT, onChange: onThresholdChange }))))),\n\n\n\n\n  ___EmotionJSX(\"div\", { className: \"column schedule\" },\n  ___EmotionJSX(StyledSectionTitle, null,\n  ___EmotionJSX(\"h4\", null,\n  isReport ?\n  TRANSLATIONS.REPORT_SCHEDULE_TEXT :\n  TRANSLATIONS.ALERT_CONDITION_SCHEDULE_TEXT),\n\n  ___EmotionJSX(\"span\", { className: \"required\" }, \"*\")),\n\n  ___EmotionJSX(AlertReportCronScheduler, { value: (currentAlert == null ? void 0 : currentAlert.crontab) || ALERT_REPORTS_DEFAULT_CRON_VALUE, onChange: (newVal) => updateAlertState('crontab', newVal) }),\n  ___EmotionJSX(\"div\", { className: \"control-label\" }, TRANSLATIONS.TIMEZONE_TEXT),\n  ___EmotionJSX(\"div\", { className: \"input-container\", css: (theme) => timezoneHeaderStyle(theme) },\n  ___EmotionJSX(TimezoneSelector, { onTimezoneChange: onTimezoneChange, timezone: currentAlert == null ? void 0 : currentAlert.timezone, minWidth: \"100%\" })),\n\n  ___EmotionJSX(StyledSectionTitle, null,\n  ___EmotionJSX(\"h4\", null, TRANSLATIONS.SCHEDULE_SETTINGS_TEXT)),\n\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" },\n  TRANSLATIONS.LOG_RETENTION_TEXT,\n  ___EmotionJSX(\"span\", { className: \"required\" }, \"*\")),\n\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(Select, { ariaLabel: TRANSLATIONS.LOG_RETENTION_TEXT, placeholder: TRANSLATIONS.LOG_RETENTION_TEXT, onChange: onLogRetentionChange, value: typeof (currentAlert == null ? void 0 : currentAlert.log_retention) === 'number' ?\n    currentAlert == null ? void 0 : currentAlert.log_retention :\n    ALERT_REPORTS_DEFAULT_RETENTION, options: RETENTION_OPTIONS, sortComparator: propertyComparator('value') }))),\n\n\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" },\n  TRANSLATIONS.WORKING_TIMEOUT_TEXT,\n  ___EmotionJSX(\"span\", { className: \"required\" }, \"*\")),\n\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(\"input\", { type: \"number\", min: \"1\", name: \"working_timeout\", value: (currentAlert == null ? void 0 : currentAlert.working_timeout) || '', placeholder: TRANSLATIONS.TIME_IN_SECONDS_TEXT, onChange: onTimeoutVerifyChange }),\n  ___EmotionJSX(\"span\", { className: \"input-label\" }, TRANSLATIONS.SECONDS_TEXT))),\n\n\n  !isReport && ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" },\n  TRANSLATIONS.GRACE_PERIOD_TEXT),\n\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(\"input\", { type: \"number\", min: \"1\", name: \"grace_period\", value: (currentAlert == null ? void 0 : currentAlert.grace_period) || '', placeholder: TRANSLATIONS.TIME_IN_SECONDS_TEXT, onChange: onTimeoutVerifyChange }),\n  ___EmotionJSX(\"span\", { className: \"input-label\" },\n  TRANSLATIONS.SECONDS_TEXT)))),\n\n\n\n\n  ___EmotionJSX(\"div\", { className: \"column message\" },\n  ___EmotionJSX(StyledSectionTitle, null,\n  ___EmotionJSX(\"h4\", null, TRANSLATIONS.MESSAGE_CONTENT_TEXT),\n  ___EmotionJSX(\"span\", { className: \"required\" }, \"*\")),\n\n  ___EmotionJSX(Radio.Group, { onChange: onContentTypeChange, value: contentType },\n  ___EmotionJSX(StyledRadio, { value: \"dashboard\" },\n  TRANSLATIONS.DASHBOARD_TEXT),\n\n  ___EmotionJSX(StyledRadio, { value: \"chart\" }, TRANSLATIONS.CHART_TEXT)),\n\n  contentType === 'chart' ? ___EmotionJSX(AsyncSelect, { ariaLabel: TRANSLATIONS.CHART_TEXT, name: \"chart\", value: currentAlert != null && (_currentAlert$chart2 = currentAlert.chart) != null && _currentAlert$chart2.label && currentAlert != null && (_currentAlert$chart3 = currentAlert.chart) != null && _currentAlert$chart3.value ?\n    {\n      value: currentAlert.chart.value,\n      label: currentAlert.chart.label } :\n\n    undefined, options: loadChartOptions, onChange: onChartChange }) : ___EmotionJSX(AsyncSelect, { ariaLabel: TRANSLATIONS.DASHBOARD_TEXT, name: \"dashboard\", value: currentAlert != null && (_currentAlert$dashboa2 = currentAlert.dashboard) != null && _currentAlert$dashboa2.label &&\n    currentAlert != null && (_currentAlert$dashboa3 = currentAlert.dashboard) != null && _currentAlert$dashboa3.value ?\n    {\n      value: currentAlert.dashboard.value,\n      label: currentAlert.dashboard.label } :\n\n    undefined, options: loadDashboardOptions, onChange: onDashboardChange }),\n  formatOptionEnabled && ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(\"div\", { className: \"inline-container\" },\n  ___EmotionJSX(StyledRadioGroup, { onChange: onFormatChange, value: reportFormat },\n  ___EmotionJSX(StyledRadio, { value: \"PNG\" },\n  TRANSLATIONS.SEND_AS_PNG_TEXT),\n\n  ___EmotionJSX(StyledRadio, { value: \"CSV\" },\n  TRANSLATIONS.SEND_AS_CSV_TEXT),\n\n  _includesInstanceProperty(TEXT_BASED_VISUALIZATION_TYPES).call(TEXT_BASED_VISUALIZATION_TYPES, chartVizType) && ___EmotionJSX(StyledRadio, { value: \"TEXT\" },\n  TRANSLATIONS.SEND_AS_TEXT)))),\n\n\n\n\n  (isReport || contentType === 'dashboard') && ___EmotionJSX(\"div\", { className: \"inline-container\" },\n  ___EmotionJSX(StyledCheckbox, { className: \"checkbox\", checked: forceScreenshot, onChange: onForceScreenshotChange },\n  TRANSLATIONS.IGNORE_CACHE_TEXT)),\n\n\n  ___EmotionJSX(StyledSectionTitle, null,\n  ___EmotionJSX(\"h4\", null, TRANSLATIONS.NOTIFICATION_METHOD_TEXT),\n  ___EmotionJSX(\"span\", { className: \"required\" }, \"*\")),\n\n  notificationSettings.map((notificationSetting, i) => ___EmotionJSX(StyledNotificationMethodWrapper, null,\n  ___EmotionJSX(NotificationMethod, { setting: notificationSetting, index: i, key: `NotificationMethod-${i}`, onUpdate: updateNotificationSetting, onRemove: removeNotificationSetting }))),\n\n  ___EmotionJSX(NotificationMethodAdd, { status: notificationAddState, onClick: onNotificationAdd })))));\n\n\n\n\n};\nexport default withToasts(AlertReportModal);","map":{"version":3,"mappings":"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","names":["React","useState","useEffect","useMemo","useCallback","css","FeatureFlag","styled","SupersetClient","t","rison","useSingleViewResource","Icons","Switch","Modal","TimezoneSelector","Radio","propertyComparator","isFeatureEnabled","withToasts","AntdCheckbox","AsyncSelect","Select","TextAreaControl","useCommonConf","InfoTooltipWithTrigger","useSelector","AlertReportCronScheduler","NotificationMethod","TIMEOUT_MIN","TEXT_BASED_VISUALIZATION_TYPES","DEFAULT_WORKING_TIMEOUT","DEFAULT_CRON_VALUE","DEFAULT_RETENTION","DEFAULT_NOTIFICATION_METHODS","DEFAULT_NOTIFICATION_FORMAT","CONDITIONS","label","value","RETENTION_OPTIONS","StyledModal","StyledIcon","theme","gridUnit","colors","grayscale","base","StyledSectionContainer","div","light2","StyledSectionTitle","error","StyledSwitchContainer","StyledInputContainer","typography","sizes","s","light1","StyledRadio","StyledRadioGroup","Group","StyledCheckbox","StyledNotificationAddButton","primary","dark1","StyledNotificationMethodWrapper","timezoneHeaderStyle","inputSpacer","TRANSLATIONS","ADD_NOTIFICATION_METHOD_TEXT","ADD_DELIVERY_METHOD_TEXT","SAVE_TEXT","ADD_TEXT","EDIT_REPORT_TEXT","EDIT_ALERT_TEXT","ADD_REPORT_TEXT","ADD_ALERT_TEXT","REPORT_NAME_TEXT","ALERT_NAME_TEXT","OWNERS_TEXT","DESCRIPTION_TEXT","ACTIVE_TEXT","ALERT_CONDITION_TEXT","DATABASE_TEXT","SQL_QUERY_TEXT","TRIGGER_ALERT_IF_TEXT","CONDITION_TEXT","VALUE_TEXT","VALUE_TOOLTIP","REPORT_SCHEDULE_TEXT","ALERT_CONDITION_SCHEDULE_TEXT","TIMEZONE_TEXT","SCHEDULE_SETTINGS_TEXT","LOG_RETENTION_TEXT","WORKING_TIMEOUT_TEXT","TIME_IN_SECONDS_TEXT","SECONDS_TEXT","GRACE_PERIOD_TEXT","MESSAGE_CONTENT_TEXT","DASHBOARD_TEXT","CHART_TEXT","SEND_AS_PNG_TEXT","SEND_AS_CSV_TEXT","SEND_AS_TEXT","IGNORE_CACHE_TEXT","NOTIFICATION_METHOD_TEXT","NotificationMethodAdd","status","onClick","checkStatus","AlertReportModal","addDangerToast","onAdd","onHide","show","alert","isReport","addSuccessToast","currentUser","state","user","conf","allowedNotificationMethods","ALERT_REPORTS_NOTIFICATION_METHODS","disableSave","setDisableSave","currentAlert","setCurrentAlert","isHidden","setIsHidden","contentType","setContentType","reportFormat","setReportFormat","forceScreenshot","setForceScreenshot","conditionNotNull","setConditionNotNull","sourceOptions","setSourceOptions","dashboardOptions","setDashboardOptions","chartOptions","setChartOptions","chartVizType","setChartVizType","isEditMode","formatOptionEnabled","ALERTS_ATTACH_REPORTS","notificationAddState","setNotificationAddState","notificationSettings","setNotificationSettings","onNotificationAdd","settings","slice","push","recipients","options","length","ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT","ALERT_REPORTS_DEFAULT_CRON_VALUE","ALERT_REPORTS_DEFAULT_RETENTION","common","defaultAlert","active","creation_method","crontab","log_retention","working_timeout","name","owners","sql","validator_config_json","validator_type","force_screenshot","grace_period","undefined","updateNotificationSetting","index","setting","method","removeNotificationSetting","splice","loading","resource","fetchError","fetchResource","createResource","updateResource","clearError","hide","onSave","forEach","recipient_config_json","target","type","shouldEnableForceScreenshot","data","chart","dashboard","database","map","owner","id","report_format","context_markdown","update_id","created_by","last_eval_dttm","last_state","last_value","last_value_row_json","then","response","loadOwnerOptions","input","page","pageSize","query","encode","filter","page_size","get","endpoint","json","result","item","text","totalCount","count","getSourceData","db","source","updateAlertState","currentAlertData","loadSourceOptions","list","databaseLabel","loadDashboardOptions","encode_uri","getDashboardData","dash","getChartData","chartData","noChartLabel","loadChartOptions","getChartVisualizationType","viz_type","onTextChange","event","onTimeoutVerifyChange","Math","max","onSQLChange","onOwnersChange","onSourceChange","onDashboardChange","onChartChange","onActiveSwitch","checked","onConditionChange","op","config","threshold","onThresholdChange","onLogRetentionChange","retention","onTimezoneChange","timezone","onContentTypeChange","setTimeout","onFormatChange","onForceScreenshotChange","checkNotificationSettings","hasInfo","validate","userId","firstName","lastName","JSON","parse","validatorConfig","slice_name","dashboard_title","database_name","first_name","last_name","currentAlertSafe","description","newVal","notificationSetting","i"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/features/alerts/AlertReportModal.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, {\n  FunctionComponent,\n  useState,\n  useEffect,\n  useMemo,\n  useCallback,\n} from 'react';\nimport {\n  css,\n  FeatureFlag,\n  styled,\n  SupersetClient,\n  SupersetTheme,\n  t,\n} from '@superset-ui/core';\nimport rison from 'rison';\nimport { useSingleViewResource } from 'src/views/CRUD/hooks';\n\nimport Icons from 'src/components/Icons';\nimport { Switch } from 'src/components/Switch';\nimport Modal from 'src/components/Modal';\nimport TimezoneSelector from 'src/components/TimezoneSelector';\nimport { Radio } from 'src/components/Radio';\nimport { propertyComparator } from 'src/components/Select/utils';\nimport { isFeatureEnabled } from 'src/featureFlags';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport Owner from 'src/types/Owner';\nimport { AntdCheckbox, AsyncSelect, Select } from 'src/components';\nimport TextAreaControl from 'src/explore/components/controls/TextAreaControl';\nimport { useCommonConf } from 'src/features/databases/state';\nimport { InfoTooltipWithTrigger } from '@superset-ui/chart-controls';\nimport {\n  NotificationMethodOption,\n  AlertObject,\n  ChartObject,\n  DashboardObject,\n  DatabaseObject,\n  MetaObject,\n  Operator,\n  Recipient,\n  AlertsReportsConfig,\n} from 'src/features/alerts/types';\nimport { useSelector } from 'react-redux';\nimport { UserWithPermissionsAndRoles } from 'src/types/bootstrapTypes';\nimport { AlertReportCronScheduler } from './components/AlertReportCronScheduler';\nimport { NotificationMethod } from './components/NotificationMethod';\n\nconst TIMEOUT_MIN = 1;\nconst TEXT_BASED_VISUALIZATION_TYPES = [\n  'pivot_table',\n  'pivot_table_v2',\n  'table',\n  'paired_ttest',\n];\n\ntype SelectValue = {\n  value: string;\n  label: string;\n};\n\ninterface AlertReportModalProps {\n  addSuccessToast: (msg: string) => void;\n  addDangerToast: (msg: string) => void;\n  alert?: AlertObject | null;\n  isReport?: boolean;\n  onAdd?: (alert?: AlertObject) => void;\n  onHide: () => void;\n  show: boolean;\n}\n\nconst DEFAULT_WORKING_TIMEOUT = 3600;\nconst DEFAULT_CRON_VALUE = '0 * * * *'; // every hour\nconst DEFAULT_RETENTION = 90;\n\nconst DEFAULT_NOTIFICATION_METHODS: NotificationMethodOption[] = ['Email'];\nconst DEFAULT_NOTIFICATION_FORMAT = 'PNG';\nconst CONDITIONS = [\n  {\n    label: t('< (Smaller than)'),\n    value: '<',\n  },\n  {\n    label: t('> (Larger than)'),\n    value: '>',\n  },\n  {\n    label: t('<= (Smaller or equal)'),\n    value: '<=',\n  },\n  {\n    label: t('>= (Larger or equal)'),\n    value: '>=',\n  },\n  {\n    label: t('== (Is equal)'),\n    value: '==',\n  },\n  {\n    label: t('!= (Is not equal)'),\n    value: '!=',\n  },\n  {\n    label: t('Not null'),\n    value: 'not null',\n  },\n];\n\nconst RETENTION_OPTIONS = [\n  {\n    label: t('None'),\n    value: 0,\n  },\n  {\n    label: t('30 days'),\n    value: 30,\n  },\n  {\n    label: t('60 days'),\n    value: 60,\n  },\n  {\n    label: t('90 days'),\n    value: 90,\n  },\n];\n\nconst StyledModal = styled(Modal)`\n  max-width: 1200px;\n  width: 100%;\n\n  .ant-modal-body {\n    overflow: initial;\n  }\n`;\n\nconst StyledIcon = (theme: SupersetTheme) => css`\n  margin: auto ${theme.gridUnit * 2}px auto 0;\n  color: ${theme.colors.grayscale.base};\n`;\n\nconst StyledSectionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  .control-label {\n    margin-top: ${({ theme }) => theme.gridUnit}px;\n  }\n\n  .header-section {\n    display: flex;\n    flex: 0 0 auto;\n    align-items: center;\n    width: 100%;\n    padding: ${({ theme }) => theme.gridUnit * 4}px;\n    border-bottom: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n  }\n\n  .column-section {\n    display: flex;\n    flex: 1 1 auto;\n\n    .column {\n      flex: 1 1 auto;\n      min-width: calc(33.33% - ${({ theme }) => theme.gridUnit * 8}px);\n      padding: ${({ theme }) => theme.gridUnit * 4}px;\n\n      .async-select {\n        margin: 10px 0 20px;\n      }\n\n      &.condition {\n        border-right: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n      }\n\n      &.message {\n        border-left: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n      }\n    }\n  }\n\n  .inline-container {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    &.wrap {\n      flex-wrap: wrap;\n    }\n\n    > div {\n      flex: 1 1 auto;\n    }\n\n    &.add-margin {\n      margin-bottom: 5px;\n    }\n\n    .styled-input {\n      margin: 0 0 0 10px;\n\n      input {\n        flex: 0 0 auto;\n      }\n    }\n  }\n`;\n\nconst StyledSectionTitle = styled.div`\n  display: flex;\n  align-items: center;\n  margin: ${({ theme }) => theme.gridUnit * 2}px auto\n    ${({ theme }) => theme.gridUnit * 4}px auto;\n\n  h4 {\n    margin: 0;\n  }\n\n  .required {\n    margin-left: ${({ theme }) => theme.gridUnit}px;\n    color: ${({ theme }) => theme.colors.error.base};\n  }\n`;\n\nconst StyledSwitchContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 10px;\n\n  .switch-label {\n    margin-left: 10px;\n  }\n`;\n\nexport const StyledInputContainer = styled.div`\n  flex: 1;\n  margin-top: 0;\n\n  .helper {\n    display: block;\n    color: ${({ theme }) => theme.colors.grayscale.base};\n    font-size: ${({ theme }) => theme.typography.sizes.s}px;\n    padding: ${({ theme }) => theme.gridUnit}px 0;\n    text-align: left;\n  }\n\n  .required {\n    margin-left: ${({ theme }) => theme.gridUnit / 2}px;\n    color: ${({ theme }) => theme.colors.error.base};\n  }\n\n  .input-container {\n    display: flex;\n    align-items: center;\n\n    > div {\n      width: 100%;\n    }\n\n    label {\n      display: flex;\n      margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n    }\n\n    i {\n      margin: 0 ${({ theme }) => theme.gridUnit}px;\n    }\n  }\n\n  input,\n  textarea {\n    flex: 1 1 auto;\n  }\n\n  input[disabled] {\n    color: ${({ theme }) => theme.colors.grayscale.base};\n  }\n\n  textarea {\n    height: 300px;\n    resize: none;\n  }\n\n  input::placeholder,\n  textarea::placeholder {\n    color: ${({ theme }) => theme.colors.grayscale.light1};\n  }\n\n  textarea,\n  input[type='text'],\n  input[type='number'] {\n    padding: ${({ theme }) => theme.gridUnit}px\n      ${({ theme }) => theme.gridUnit * 2}px;\n    border-style: none;\n    border: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n    border-radius: ${({ theme }) => theme.gridUnit}px;\n\n    &[name='description'] {\n      flex: 1 1 auto;\n    }\n  }\n\n  .input-label {\n    margin-left: 10px;\n  }\n`;\n\nconst StyledRadio = styled(Radio)`\n  display: block;\n  line-height: ${({ theme }) => theme.gridUnit * 7}px;\n`;\n\nconst StyledRadioGroup = styled(Radio.Group)`\n  margin-left: ${({ theme }) => theme.gridUnit * 5.5}px;\n`;\n\nconst StyledCheckbox = styled(AntdCheckbox)`\n  margin-left: ${({ theme }) => theme.gridUnit * 5.5}px;\n  margin-top: ${({ theme }) => theme.gridUnit}px;\n`;\n\n// Notification Method components\nconst StyledNotificationAddButton = styled.div`\n  color: ${({ theme }) => theme.colors.primary.dark1};\n  cursor: pointer;\n\n  i {\n    margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n  }\n\n  &.disabled {\n    color: ${({ theme }) => theme.colors.grayscale.light1};\n    cursor: default;\n  }\n`;\n\nconst StyledNotificationMethodWrapper = styled.div`\n  .inline-container .input-container {\n    margin-left: 0;\n  }\n`;\n\nconst timezoneHeaderStyle = (theme: SupersetTheme) => css`\n  margin: ${theme.gridUnit * 3}px 0;\n`;\n\nconst inputSpacer = (theme: SupersetTheme) => css`\n  margin-right: ${theme.gridUnit * 3}px;\n`;\n\ntype NotificationAddStatus = 'active' | 'disabled' | 'hidden';\n\ninterface NotificationMethodAddProps {\n  status: NotificationAddStatus;\n  onClick: () => void;\n}\n\nconst TRANSLATIONS = {\n  ADD_NOTIFICATION_METHOD_TEXT: t('Add notification method'),\n  ADD_DELIVERY_METHOD_TEXT: t('Add delivery method'),\n  SAVE_TEXT: t('Save'),\n  ADD_TEXT: t('Add'),\n  EDIT_REPORT_TEXT: t('Edit Report'),\n  EDIT_ALERT_TEXT: t('Edit Alert'),\n  ADD_REPORT_TEXT: t('Add Report'),\n  ADD_ALERT_TEXT: t('Add Alert'),\n  REPORT_NAME_TEXT: t('Report name'),\n  ALERT_NAME_TEXT: t('Alert name'),\n  OWNERS_TEXT: t('Owners'),\n  DESCRIPTION_TEXT: t('Description'),\n  ACTIVE_TEXT: t('Active'),\n  ALERT_CONDITION_TEXT: t('Alert condition'),\n  DATABASE_TEXT: t('Database'),\n  SQL_QUERY_TEXT: t('SQL Query'),\n  TRIGGER_ALERT_IF_TEXT: t('Trigger Alert If...'),\n  CONDITION_TEXT: t('Condition'),\n  VALUE_TEXT: t('Value'),\n  VALUE_TOOLTIP: t('Threshold value should be double precision number'),\n  REPORT_SCHEDULE_TEXT: t('Report schedule'),\n  ALERT_CONDITION_SCHEDULE_TEXT: t('Alert condition schedule'),\n  TIMEZONE_TEXT: t('Timezone'),\n  SCHEDULE_SETTINGS_TEXT: t('Schedule settings'),\n  LOG_RETENTION_TEXT: t('Log retention'),\n  WORKING_TIMEOUT_TEXT: t('Working timeout'),\n  TIME_IN_SECONDS_TEXT: t('Time in seconds'),\n  SECONDS_TEXT: t('seconds'),\n  GRACE_PERIOD_TEXT: t('Grace period'),\n  MESSAGE_CONTENT_TEXT: t('Message content'),\n  DASHBOARD_TEXT: t('Dashboard'),\n  CHART_TEXT: t('Chart'),\n  SEND_AS_PNG_TEXT: t('Send as PNG'),\n  SEND_AS_CSV_TEXT: t('Send as CSV'),\n  SEND_AS_TEXT: t('Send as text'),\n  IGNORE_CACHE_TEXT: t('Ignore cache when generating screenshot'),\n  NOTIFICATION_METHOD_TEXT: t('Notification method'),\n};\n\nconst NotificationMethodAdd: FunctionComponent<NotificationMethodAddProps> = ({\n  status = 'active',\n  onClick,\n}) => {\n  if (status === 'hidden') {\n    return null;\n  }\n\n  const checkStatus = () => {\n    if (status !== 'disabled') {\n      onClick();\n    }\n  };\n\n  return (\n    <StyledNotificationAddButton className={status} onClick={checkStatus}>\n      <i className=\"fa fa-plus\" />{' '}\n      {status === 'active'\n        ? TRANSLATIONS.ADD_NOTIFICATION_METHOD_TEXT\n        : TRANSLATIONS.ADD_DELIVERY_METHOD_TEXT}\n    </StyledNotificationAddButton>\n  );\n};\n\ntype NotificationSetting = {\n  method?: NotificationMethodOption;\n  recipients: string;\n  options: NotificationMethodOption[];\n};\n\nconst AlertReportModal: FunctionComponent<AlertReportModalProps> = ({\n  addDangerToast,\n  onAdd,\n  onHide,\n  show,\n  alert = null,\n  isReport = false,\n  addSuccessToast,\n}) => {\n  const currentUser = useSelector<any, UserWithPermissionsAndRoles>(\n    state => state.user,\n  );\n  const conf = useCommonConf();\n  const allowedNotificationMethods: NotificationMethodOption[] =\n    conf?.ALERT_REPORTS_NOTIFICATION_METHODS || DEFAULT_NOTIFICATION_METHODS;\n\n  const [disableSave, setDisableSave] = useState<boolean>(true);\n  const [currentAlert, setCurrentAlert] =\n    useState<Partial<AlertObject> | null>();\n  const [isHidden, setIsHidden] = useState<boolean>(true);\n  const [contentType, setContentType] = useState<string>('dashboard');\n  const [reportFormat, setReportFormat] = useState<string>(\n    DEFAULT_NOTIFICATION_FORMAT,\n  );\n  const [forceScreenshot, setForceScreenshot] = useState<boolean>(false);\n\n  // Dropdown options\n  const [conditionNotNull, setConditionNotNull] = useState<boolean>(false);\n  const [sourceOptions, setSourceOptions] = useState<MetaObject[]>([]);\n  const [dashboardOptions, setDashboardOptions] = useState<MetaObject[]>([]);\n  const [chartOptions, setChartOptions] = useState<MetaObject[]>([]);\n\n  // Chart metadata\n  const [chartVizType, setChartVizType] = useState<string>('');\n\n  const isEditMode = alert !== null;\n  const formatOptionEnabled =\n    contentType === 'chart' &&\n    (isFeatureEnabled(FeatureFlag.ALERTS_ATTACH_REPORTS) || isReport);\n\n  const [notificationAddState, setNotificationAddState] =\n    useState<NotificationAddStatus>('active');\n  const [notificationSettings, setNotificationSettings] = useState<\n    NotificationSetting[]\n  >([]);\n\n  const onNotificationAdd = () => {\n    const settings: NotificationSetting[] = notificationSettings.slice();\n\n    settings.push({\n      recipients: '',\n      options: allowedNotificationMethods,\n    });\n\n    setNotificationSettings(settings);\n    setNotificationAddState(\n      settings.length === allowedNotificationMethods.length\n        ? 'hidden'\n        : 'disabled',\n    );\n  };\n\n  const {\n    ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT,\n    ALERT_REPORTS_DEFAULT_CRON_VALUE,\n    ALERT_REPORTS_DEFAULT_RETENTION,\n  } = useSelector<any, AlertsReportsConfig>(state => {\n    const conf = state.common?.conf;\n    return {\n      ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT:\n        conf?.ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT ?? DEFAULT_WORKING_TIMEOUT,\n      ALERT_REPORTS_DEFAULT_CRON_VALUE:\n        conf?.ALERT_REPORTS_DEFAULT_CRON_VALUE ?? DEFAULT_CRON_VALUE,\n      ALERT_REPORTS_DEFAULT_RETENTION:\n        conf?.ALERT_REPORTS_DEFAULT_RETENTION ?? DEFAULT_RETENTION,\n    };\n  });\n\n  const defaultAlert = {\n    active: true,\n    creation_method: 'alerts_reports',\n    crontab: ALERT_REPORTS_DEFAULT_CRON_VALUE,\n    log_retention: ALERT_REPORTS_DEFAULT_RETENTION,\n    working_timeout: ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT,\n    name: '',\n    owners: [],\n    recipients: [],\n    sql: '',\n    validator_config_json: {},\n    validator_type: '',\n    force_screenshot: false,\n    grace_period: undefined,\n  };\n\n  const updateNotificationSetting = (\n    index: number,\n    setting: NotificationSetting,\n  ) => {\n    const settings = notificationSettings.slice();\n\n    settings[index] = setting;\n    setNotificationSettings(settings);\n\n    if (setting.method !== undefined && notificationAddState !== 'hidden') {\n      setNotificationAddState('active');\n    }\n  };\n\n  const removeNotificationSetting = (index: number) => {\n    const settings = notificationSettings.slice();\n\n    settings.splice(index, 1);\n    setNotificationSettings(settings);\n    setNotificationAddState('active');\n  };\n\n  // Alert fetch logic\n  const {\n    state: { loading, resource, error: fetchError },\n    fetchResource,\n    createResource,\n    updateResource,\n    clearError,\n  } = useSingleViewResource<AlertObject>('report', t('report'), addDangerToast);\n\n  // Functions\n  const hide = () => {\n    clearError();\n    setIsHidden(true);\n    onHide();\n    setNotificationSettings([]);\n    setCurrentAlert({ ...defaultAlert });\n    setNotificationAddState('active');\n  };\n\n  const onSave = () => {\n    // Notification Settings\n    const recipients: Recipient[] = [];\n\n    notificationSettings.forEach(setting => {\n      if (setting.method && setting.recipients.length) {\n        recipients.push({\n          recipient_config_json: {\n            target: setting.recipients,\n          },\n          type: setting.method,\n        });\n      }\n    });\n\n    const shouldEnableForceScreenshot = contentType === 'chart' && !isReport;\n    const data: any = {\n      ...currentAlert,\n      type: isReport ? 'Report' : 'Alert',\n      force_screenshot: shouldEnableForceScreenshot || forceScreenshot,\n      validator_type: conditionNotNull ? 'not null' : 'operator',\n      validator_config_json: conditionNotNull\n        ? {}\n        : currentAlert?.validator_config_json,\n      chart: contentType === 'chart' ? currentAlert?.chart?.value : null,\n      dashboard:\n        contentType === 'dashboard' ? currentAlert?.dashboard?.value : null,\n      database: currentAlert?.database?.value,\n      owners: (currentAlert?.owners || []).map(\n        owner => (owner as MetaObject).value || owner.id,\n      ),\n      recipients,\n      report_format:\n        contentType === 'dashboard'\n          ? DEFAULT_NOTIFICATION_FORMAT\n          : reportFormat || DEFAULT_NOTIFICATION_FORMAT,\n    };\n\n    if (data.recipients && !data.recipients.length) {\n      delete data.recipients;\n    }\n\n    data.context_markdown = 'string';\n\n    if (isEditMode) {\n      // Edit\n      if (currentAlert?.id) {\n        const update_id = currentAlert.id;\n\n        delete data.id;\n        delete data.created_by;\n        delete data.last_eval_dttm;\n        delete data.last_state;\n        delete data.last_value;\n        delete data.last_value_row_json;\n\n        updateResource(update_id, data).then(response => {\n          if (!response) {\n            return;\n          }\n\n          addSuccessToast(t('%s updated', data.type));\n\n          if (onAdd) {\n            onAdd();\n          }\n\n          hide();\n        });\n      }\n    } else if (currentAlert) {\n      // Create\n      createResource(data).then(response => {\n        if (!response) {\n          return;\n        }\n\n        addSuccessToast(t('%s updated', data.type));\n\n        if (onAdd) {\n          onAdd(response);\n        }\n\n        hide();\n      });\n    }\n  };\n\n  // Fetch data to populate form dropdowns\n  const loadOwnerOptions = useMemo(\n    () =>\n      (input = '', page: number, pageSize: number) => {\n        const query = rison.encode({\n          filter: input,\n          page,\n          page_size: pageSize,\n        });\n        return SupersetClient.get({\n          endpoint: `/api/v1/report/related/created_by?q=${query}`,\n        }).then(response => ({\n          data: response.json.result.map(\n            (item: { value: number; text: string }) => ({\n              value: item.value,\n              label: item.text,\n            }),\n          ),\n          totalCount: response.json.count,\n        }));\n      },\n    [],\n  );\n\n  const getSourceData = useCallback(\n    (db?: MetaObject) => {\n      const database = db || currentAlert?.database;\n\n      if (!database || database.label) {\n        return null;\n      }\n\n      let result;\n\n      // Cycle through source options to find the selected option\n      sourceOptions.forEach(source => {\n        if (source.value === database.value || source.value === database.id) {\n          result = source;\n        }\n      });\n\n      return result;\n    },\n    [currentAlert?.database, sourceOptions],\n  );\n\n  // Updating alert/report state\n  const updateAlertState = (name: string, value: any) => {\n    setCurrentAlert(currentAlertData => ({\n      ...currentAlertData,\n      [name]: value,\n    }));\n  };\n\n  const loadSourceOptions = useMemo(\n    () =>\n      (input = '', page: number, pageSize: number) => {\n        const query = rison.encode({\n          filter: input,\n          page,\n          page_size: pageSize,\n        });\n        return SupersetClient.get({\n          endpoint: `/api/v1/report/related/database?q=${query}`,\n        }).then(response => {\n          const list = response.json.result.map(\n            (item: { value: number; text: string }) => ({\n              value: item.value,\n              label: item.text,\n            }),\n          );\n          setSourceOptions(list);\n          return { data: list, totalCount: response.json.count };\n        });\n      },\n    [],\n  );\n\n  const databaseLabel = currentAlert?.database && !currentAlert.database.label;\n  useEffect(() => {\n    // Find source if current alert has one set\n    if (databaseLabel) {\n      updateAlertState('database', getSourceData());\n    }\n  }, [databaseLabel, getSourceData]);\n\n  const loadDashboardOptions = useMemo(\n    () =>\n      (input = '', page: number, pageSize: number) => {\n        const query = rison.encode_uri({\n          filter: input,\n          page,\n          page_size: pageSize,\n        });\n        return SupersetClient.get({\n          endpoint: `/api/v1/report/related/dashboard?q=${query}`,\n        }).then(response => {\n          const list = response.json.result.map(\n            (item: { value: number; text: string }) => ({\n              value: item.value,\n              label: item.text,\n            }),\n          );\n          setDashboardOptions(list);\n          return { data: list, totalCount: response.json.count };\n        });\n      },\n    [],\n  );\n\n  const getDashboardData = (db?: MetaObject) => {\n    const dashboard = db || currentAlert?.dashboard;\n\n    if (!dashboard || dashboard.label) {\n      return null;\n    }\n\n    let result;\n\n    // Cycle through dashboard options to find the selected option\n    dashboardOptions.forEach(dash => {\n      if (dash.value === dashboard.value || dash.value === dashboard.id) {\n        result = dash;\n      }\n    });\n\n    return result;\n  };\n\n  const getChartData = useCallback(\n    (chartData?: MetaObject) => {\n      const chart = chartData || currentAlert?.chart;\n\n      if (!chart || chart.label) {\n        return null;\n      }\n\n      let result;\n\n      // Cycle through chart options to find the selected option\n      chartOptions.forEach(slice => {\n        if (slice.value === chart.value || slice.value === chart.id) {\n          result = slice;\n        }\n      });\n\n      return result;\n    },\n    [chartOptions, currentAlert?.chart],\n  );\n\n  const noChartLabel = currentAlert?.chart && !currentAlert?.chart.label;\n  useEffect(() => {\n    // Find source if current alert has one set\n    if (noChartLabel) {\n      updateAlertState('chart', getChartData());\n    }\n  }, [getChartData, noChartLabel]);\n\n  const loadChartOptions = useMemo(\n    () =>\n      (input = '', page: number, pageSize: number) => {\n        const query = rison.encode_uri({\n          filter: input,\n          page,\n          page_size: pageSize,\n        });\n        return SupersetClient.get({\n          endpoint: `/api/v1/report/related/chart?q=${query}`,\n        }).then(response => {\n          const list = response.json.result.map(\n            (item: { value: number; text: string }) => ({\n              value: item.value,\n              label: item.text,\n            }),\n          );\n\n          setChartOptions(list);\n          return { data: list, totalCount: response.json.count };\n        });\n      },\n    [],\n  );\n\n  const getChartVisualizationType = (chart: SelectValue) =>\n    SupersetClient.get({\n      endpoint: `/api/v1/chart/${chart.value}`,\n    }).then(response => setChartVizType(response.json.result.viz_type));\n\n  // Handle input/textarea updates\n  const onTextChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n  ) => {\n    const { target } = event;\n\n    updateAlertState(target.name, target.value);\n  };\n\n  const onTimeoutVerifyChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n  ) => {\n    const { target } = event;\n    const value = +target.value;\n\n    // Need to make sure grace period is not lower than TIMEOUT_MIN\n    if (value === 0) {\n      updateAlertState(target.name, null);\n    } else {\n      updateAlertState(\n        target.name,\n        value ? Math.max(value, TIMEOUT_MIN) : value,\n      );\n    }\n  };\n\n  const onSQLChange = (value: string) => {\n    updateAlertState('sql', value || '');\n  };\n\n  const onOwnersChange = (value: Array<SelectValue>) => {\n    updateAlertState('owners', value || []);\n  };\n\n  const onSourceChange = (value: Array<SelectValue>) => {\n    updateAlertState('database', value || []);\n  };\n\n  const onDashboardChange = (dashboard: SelectValue) => {\n    updateAlertState('dashboard', dashboard || undefined);\n    updateAlertState('chart', null);\n  };\n\n  const onChartChange = (chart: SelectValue) => {\n    getChartVisualizationType(chart);\n    updateAlertState('chart', chart || undefined);\n    updateAlertState('dashboard', null);\n  };\n\n  const onActiveSwitch = (checked: boolean) => {\n    updateAlertState('active', checked);\n  };\n\n  const onConditionChange = (op: Operator) => {\n    setConditionNotNull(op === 'not null');\n\n    const config = {\n      op,\n      threshold: currentAlert\n        ? currentAlert.validator_config_json?.threshold\n        : undefined,\n    };\n\n    updateAlertState('validator_config_json', config);\n  };\n\n  const onThresholdChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { target } = event;\n\n    const config = {\n      op: currentAlert ? currentAlert.validator_config_json?.op : undefined,\n      threshold: target.value,\n    };\n\n    updateAlertState('validator_config_json', config);\n  };\n\n  const onLogRetentionChange = (retention: number) => {\n    updateAlertState('log_retention', retention);\n  };\n\n  const onTimezoneChange = (timezone: string) => {\n    updateAlertState('timezone', timezone);\n  };\n\n  const onContentTypeChange = (event: any) => {\n    const { target } = event;\n    // When switch content type, reset force_screenshot to false\n    setForceScreenshot(false);\n    // Gives time to close the select before changing the type\n    setTimeout(() => setContentType(target.value), 200);\n  };\n\n  const onFormatChange = (event: any) => {\n    const { target } = event;\n\n    setReportFormat(target.value);\n  };\n\n  const onForceScreenshotChange = (event: any) => {\n    setForceScreenshot(event.target.checked);\n  };\n\n  // Make sure notification settings has the required info\n  const checkNotificationSettings = () => {\n    if (!notificationSettings.length) {\n      return false;\n    }\n\n    let hasInfo = false;\n\n    notificationSettings.forEach(setting => {\n      if (!!setting.method && setting.recipients?.length) {\n        hasInfo = true;\n      }\n    });\n\n    return hasInfo;\n  };\n\n  const validate = () => {\n    if (\n      currentAlert?.name?.length &&\n      currentAlert?.owners?.length &&\n      currentAlert?.crontab?.length &&\n      currentAlert?.working_timeout !== undefined &&\n      ((contentType === 'dashboard' && !!currentAlert?.dashboard) ||\n        (contentType === 'chart' && !!currentAlert?.chart)) &&\n      checkNotificationSettings()\n    ) {\n      if (isReport) {\n        setDisableSave(false);\n      } else if (\n        !!currentAlert.database &&\n        currentAlert.sql?.length &&\n        (conditionNotNull || !!currentAlert.validator_config_json?.op) &&\n        (conditionNotNull ||\n          currentAlert.validator_config_json?.threshold !== undefined)\n      ) {\n        setDisableSave(false);\n      } else {\n        setDisableSave(true);\n      }\n    } else {\n      setDisableSave(true);\n    }\n  };\n\n  // Initialize\n  useEffect(() => {\n    if (\n      isEditMode &&\n      (!currentAlert?.id || alert?.id !== currentAlert.id || (isHidden && show))\n    ) {\n      if (alert?.id !== null && !loading && !fetchError) {\n        const id = alert.id || 0;\n        fetchResource(id);\n      }\n    } else if (\n      !isEditMode &&\n      (!currentAlert || currentAlert.id || (isHidden && show))\n    ) {\n      setCurrentAlert({\n        ...defaultAlert,\n        owners: currentUser\n          ? [\n              {\n                value: currentUser.userId,\n                label: `${currentUser.firstName} ${currentUser.lastName}`,\n              },\n            ]\n          : [],\n      });\n      setNotificationSettings([]);\n      setNotificationAddState('active');\n    }\n  }, [alert]);\n\n  useEffect(() => {\n    if (resource) {\n      // Add notification settings\n      const settings = (resource.recipients || []).map(setting => {\n        const config =\n          typeof setting.recipient_config_json === 'string'\n            ? JSON.parse(setting.recipient_config_json)\n            : {};\n        return {\n          method: setting.type,\n          // @ts-ignore: Type not assignable\n          recipients: config.target || setting.recipient_config_json,\n          options: allowedNotificationMethods,\n        };\n      });\n\n      setNotificationSettings(settings);\n      setNotificationAddState(\n        settings.length === allowedNotificationMethods.length\n          ? 'hidden'\n          : 'active',\n      );\n      setContentType(resource.chart ? 'chart' : 'dashboard');\n      setReportFormat(\n        resource.chart\n          ? resource.report_format || DEFAULT_NOTIFICATION_FORMAT\n          : DEFAULT_NOTIFICATION_FORMAT,\n      );\n      const validatorConfig =\n        typeof resource.validator_config_json === 'string'\n          ? JSON.parse(resource.validator_config_json)\n          : resource.validator_config_json;\n\n      setConditionNotNull(resource.validator_type === 'not null');\n\n      if (resource.chart) {\n        setChartVizType((resource.chart as ChartObject).viz_type);\n      }\n      setForceScreenshot(resource.force_screenshot);\n\n      setCurrentAlert({\n        ...resource,\n        chart: resource.chart\n          ? getChartData(resource.chart) || {\n              value: (resource.chart as ChartObject).id,\n              label: (resource.chart as ChartObject).slice_name,\n            }\n          : undefined,\n        dashboard: resource.dashboard\n          ? getDashboardData(resource.dashboard) || {\n              value: (resource.dashboard as DashboardObject).id,\n              label: (resource.dashboard as DashboardObject).dashboard_title,\n            }\n          : undefined,\n        database: resource.database\n          ? getSourceData(resource.database) || {\n              value: (resource.database as DatabaseObject).id,\n              label: (resource.database as DatabaseObject).database_name,\n            }\n          : undefined,\n        owners: (alert?.owners || []).map(owner => ({\n          value: (owner as MetaObject).value || owner.id,\n          label:\n            (owner as MetaObject).label ||\n            `${(owner as Owner).first_name} ${(owner as Owner).last_name}`,\n        })),\n        // @ts-ignore: Type not assignable\n        validator_config_json:\n          resource.validator_type === 'not null'\n            ? {\n                op: 'not null',\n              }\n            : validatorConfig,\n      });\n    }\n  }, [resource]);\n\n  // Validation\n  const currentAlertSafe = currentAlert || {};\n  useEffect(() => {\n    validate();\n  }, [\n    currentAlertSafe.name,\n    currentAlertSafe.owners,\n    currentAlertSafe.database,\n    currentAlertSafe.sql,\n    currentAlertSafe.validator_config_json,\n    currentAlertSafe.crontab,\n    currentAlertSafe.working_timeout,\n    currentAlertSafe.dashboard,\n    currentAlertSafe.chart,\n    contentType,\n    notificationSettings,\n    conditionNotNull,\n  ]);\n\n  // Show/hide\n  if (isHidden && show) {\n    setIsHidden(false);\n  }\n\n  return (\n    <StyledModal\n      className=\"no-content-padding\"\n      responsive\n      disablePrimaryButton={disableSave}\n      onHandledPrimaryAction={onSave}\n      onHide={hide}\n      primaryButtonName={\n        isEditMode ? TRANSLATIONS.SAVE_TEXT : TRANSLATIONS.ADD_TEXT\n      }\n      show={show}\n      width=\"100%\"\n      maxWidth=\"1450px\"\n      title={\n        <h4 data-test=\"alert-report-modal-title\">\n          {isEditMode ? (\n            <Icons.EditAlt css={StyledIcon} />\n          ) : (\n            <Icons.PlusLarge css={StyledIcon} />\n          )}\n          {isEditMode && isReport\n            ? TRANSLATIONS.EDIT_REPORT_TEXT\n            : isEditMode\n            ? TRANSLATIONS.EDIT_ALERT_TEXT\n            : isReport\n            ? TRANSLATIONS.ADD_REPORT_TEXT\n            : TRANSLATIONS.ADD_ALERT_TEXT}\n        </h4>\n      }\n    >\n      <StyledSectionContainer>\n        <div className=\"header-section\">\n          <StyledInputContainer>\n            <div className=\"control-label\">\n              {isReport\n                ? TRANSLATIONS.REPORT_NAME_TEXT\n                : TRANSLATIONS.ALERT_NAME_TEXT}\n              <span className=\"required\">*</span>\n            </div>\n            <div className=\"input-container\">\n              <input\n                type=\"text\"\n                name=\"name\"\n                value={currentAlert ? currentAlert.name : ''}\n                placeholder={\n                  isReport\n                    ? TRANSLATIONS.REPORT_NAME_TEXT\n                    : TRANSLATIONS.ALERT_NAME_TEXT\n                }\n                onChange={onTextChange}\n                css={inputSpacer}\n              />\n            </div>\n          </StyledInputContainer>\n          <StyledInputContainer>\n            <div className=\"control-label\">\n              {TRANSLATIONS.OWNERS_TEXT}\n              <span className=\"required\">*</span>\n            </div>\n            <div data-test=\"owners-select\" className=\"input-container\">\n              <AsyncSelect\n                ariaLabel={TRANSLATIONS.OWNERS_TEXT}\n                allowClear\n                name=\"owners\"\n                mode=\"multiple\"\n                value={\n                  (currentAlert?.owners as {\n                    label: string;\n                    value: number;\n                  }[]) || []\n                }\n                options={loadOwnerOptions}\n                onChange={onOwnersChange}\n                css={inputSpacer}\n              />\n            </div>\n          </StyledInputContainer>\n          <StyledInputContainer>\n            <div className=\"control-label\">{TRANSLATIONS.DESCRIPTION_TEXT}</div>\n            <div className=\"input-container\">\n              <input\n                type=\"text\"\n                name=\"description\"\n                value={currentAlert ? currentAlert.description || '' : ''}\n                placeholder={TRANSLATIONS.DESCRIPTION_TEXT}\n                onChange={onTextChange}\n                css={inputSpacer}\n              />\n            </div>\n          </StyledInputContainer>\n          <StyledSwitchContainer>\n            <Switch\n              onChange={onActiveSwitch}\n              checked={currentAlert ? currentAlert.active : true}\n            />\n            <div className=\"switch-label\">{TRANSLATIONS.ACTIVE_TEXT}</div>\n          </StyledSwitchContainer>\n        </div>\n        <div className=\"column-section\">\n          {!isReport && (\n            <div className=\"column condition\">\n              <StyledSectionTitle>\n                <h4>{TRANSLATIONS.ALERT_CONDITION_TEXT}</h4>\n              </StyledSectionTitle>\n              <StyledInputContainer>\n                <div className=\"control-label\">\n                  {TRANSLATIONS.DATABASE_TEXT}\n                  <span className=\"required\">*</span>\n                </div>\n                <div className=\"input-container\">\n                  <AsyncSelect\n                    ariaLabel={TRANSLATIONS.DATABASE_TEXT}\n                    name=\"source\"\n                    value={\n                      currentAlert?.database?.label &&\n                      currentAlert?.database?.value\n                        ? {\n                            value: currentAlert.database.value,\n                            label: currentAlert.database.label,\n                          }\n                        : undefined\n                    }\n                    options={loadSourceOptions}\n                    onChange={onSourceChange}\n                  />\n                </div>\n              </StyledInputContainer>\n              <StyledInputContainer>\n                <div className=\"control-label\">\n                  {TRANSLATIONS.SQL_QUERY_TEXT}\n                  <span className=\"required\">*</span>\n                </div>\n                <TextAreaControl\n                  name=\"sql\"\n                  language=\"sql\"\n                  offerEditInModal={false}\n                  minLines={15}\n                  maxLines={15}\n                  onChange={onSQLChange}\n                  readOnly={false}\n                  initialValue={resource?.sql}\n                  key={currentAlert?.id}\n                />\n              </StyledInputContainer>\n              <div className=\"inline-container wrap\">\n                <StyledInputContainer>\n                  <div className=\"control-label\" css={inputSpacer}>\n                    {TRANSLATIONS.TRIGGER_ALERT_IF_TEXT}\n                    <span className=\"required\">*</span>\n                  </div>\n                  <div className=\"input-container\">\n                    <Select\n                      ariaLabel={TRANSLATIONS.CONDITION_TEXT}\n                      onChange={onConditionChange}\n                      placeholder=\"Condition\"\n                      value={\n                        currentAlert?.validator_config_json?.op || undefined\n                      }\n                      options={CONDITIONS}\n                      css={inputSpacer}\n                    />\n                  </div>\n                </StyledInputContainer>\n                <StyledInputContainer>\n                  <div className=\"control-label\">\n                    {TRANSLATIONS.VALUE_TEXT}{' '}\n                    <InfoTooltipWithTrigger\n                      tooltip={TRANSLATIONS.VALUE_TOOLTIP}\n                    />\n                    <span className=\"required\">*</span>\n                  </div>\n                  <div className=\"input-container\">\n                    <input\n                      type=\"number\"\n                      name=\"threshold\"\n                      disabled={conditionNotNull}\n                      value={\n                        currentAlert?.validator_config_json?.threshold !==\n                        undefined\n                          ? currentAlert.validator_config_json.threshold\n                          : ''\n                      }\n                      placeholder={TRANSLATIONS.VALUE_TEXT}\n                      onChange={onThresholdChange}\n                    />\n                  </div>\n                </StyledInputContainer>\n              </div>\n            </div>\n          )}\n          <div className=\"column schedule\">\n            <StyledSectionTitle>\n              <h4>\n                {isReport\n                  ? TRANSLATIONS.REPORT_SCHEDULE_TEXT\n                  : TRANSLATIONS.ALERT_CONDITION_SCHEDULE_TEXT}\n              </h4>\n              <span className=\"required\">*</span>\n            </StyledSectionTitle>\n            <AlertReportCronScheduler\n              value={currentAlert?.crontab || ALERT_REPORTS_DEFAULT_CRON_VALUE}\n              onChange={newVal => updateAlertState('crontab', newVal)}\n            />\n            <div className=\"control-label\">{TRANSLATIONS.TIMEZONE_TEXT}</div>\n            <div\n              className=\"input-container\"\n              css={(theme: SupersetTheme) => timezoneHeaderStyle(theme)}\n            >\n              <TimezoneSelector\n                onTimezoneChange={onTimezoneChange}\n                timezone={currentAlert?.timezone}\n                minWidth=\"100%\"\n              />\n            </div>\n            <StyledSectionTitle>\n              <h4>{TRANSLATIONS.SCHEDULE_SETTINGS_TEXT}</h4>\n            </StyledSectionTitle>\n            <StyledInputContainer>\n              <div className=\"control-label\">\n                {TRANSLATIONS.LOG_RETENTION_TEXT}\n                <span className=\"required\">*</span>\n              </div>\n              <div className=\"input-container\">\n                <Select\n                  ariaLabel={TRANSLATIONS.LOG_RETENTION_TEXT}\n                  placeholder={TRANSLATIONS.LOG_RETENTION_TEXT}\n                  onChange={onLogRetentionChange}\n                  value={\n                    typeof currentAlert?.log_retention === 'number'\n                      ? currentAlert?.log_retention\n                      : ALERT_REPORTS_DEFAULT_RETENTION\n                  }\n                  options={RETENTION_OPTIONS}\n                  sortComparator={propertyComparator('value')}\n                />\n              </div>\n            </StyledInputContainer>\n            <StyledInputContainer>\n              <div className=\"control-label\">\n                {TRANSLATIONS.WORKING_TIMEOUT_TEXT}\n                <span className=\"required\">*</span>\n              </div>\n              <div className=\"input-container\">\n                <input\n                  type=\"number\"\n                  min=\"1\"\n                  name=\"working_timeout\"\n                  value={currentAlert?.working_timeout || ''}\n                  placeholder={TRANSLATIONS.TIME_IN_SECONDS_TEXT}\n                  onChange={onTimeoutVerifyChange}\n                />\n                <span className=\"input-label\">{TRANSLATIONS.SECONDS_TEXT}</span>\n              </div>\n            </StyledInputContainer>\n            {!isReport && (\n              <StyledInputContainer>\n                <div className=\"control-label\">\n                  {TRANSLATIONS.GRACE_PERIOD_TEXT}\n                </div>\n                <div className=\"input-container\">\n                  <input\n                    type=\"number\"\n                    min=\"1\"\n                    name=\"grace_period\"\n                    value={currentAlert?.grace_period || ''}\n                    placeholder={TRANSLATIONS.TIME_IN_SECONDS_TEXT}\n                    onChange={onTimeoutVerifyChange}\n                  />\n                  <span className=\"input-label\">\n                    {TRANSLATIONS.SECONDS_TEXT}\n                  </span>\n                </div>\n              </StyledInputContainer>\n            )}\n          </div>\n          <div className=\"column message\">\n            <StyledSectionTitle>\n              <h4>{TRANSLATIONS.MESSAGE_CONTENT_TEXT}</h4>\n              <span className=\"required\">*</span>\n            </StyledSectionTitle>\n            <Radio.Group onChange={onContentTypeChange} value={contentType}>\n              <StyledRadio value=\"dashboard\">\n                {TRANSLATIONS.DASHBOARD_TEXT}\n              </StyledRadio>\n              <StyledRadio value=\"chart\">{TRANSLATIONS.CHART_TEXT}</StyledRadio>\n            </Radio.Group>\n            {contentType === 'chart' ? (\n              <AsyncSelect\n                ariaLabel={TRANSLATIONS.CHART_TEXT}\n                name=\"chart\"\n                value={\n                  currentAlert?.chart?.label && currentAlert?.chart?.value\n                    ? {\n                        value: currentAlert.chart.value,\n                        label: currentAlert.chart.label,\n                      }\n                    : undefined\n                }\n                options={loadChartOptions}\n                onChange={onChartChange}\n              />\n            ) : (\n              <AsyncSelect\n                ariaLabel={TRANSLATIONS.DASHBOARD_TEXT}\n                name=\"dashboard\"\n                value={\n                  currentAlert?.dashboard?.label &&\n                  currentAlert?.dashboard?.value\n                    ? {\n                        value: currentAlert.dashboard.value,\n                        label: currentAlert.dashboard.label,\n                      }\n                    : undefined\n                }\n                options={loadDashboardOptions}\n                onChange={onDashboardChange}\n              />\n            )}\n            {formatOptionEnabled && (\n              <>\n                <div className=\"inline-container\">\n                  <StyledRadioGroup\n                    onChange={onFormatChange}\n                    value={reportFormat}\n                  >\n                    <StyledRadio value=\"PNG\">\n                      {TRANSLATIONS.SEND_AS_PNG_TEXT}\n                    </StyledRadio>\n                    <StyledRadio value=\"CSV\">\n                      {TRANSLATIONS.SEND_AS_CSV_TEXT}\n                    </StyledRadio>\n                    {TEXT_BASED_VISUALIZATION_TYPES.includes(chartVizType) && (\n                      <StyledRadio value=\"TEXT\">\n                        {TRANSLATIONS.SEND_AS_TEXT}\n                      </StyledRadio>\n                    )}\n                  </StyledRadioGroup>\n                </div>\n              </>\n            )}\n            {(isReport || contentType === 'dashboard') && (\n              <div className=\"inline-container\">\n                <StyledCheckbox\n                  data-test=\"bypass-cache\"\n                  className=\"checkbox\"\n                  checked={forceScreenshot}\n                  onChange={onForceScreenshotChange}\n                >\n                  {TRANSLATIONS.IGNORE_CACHE_TEXT}\n                </StyledCheckbox>\n              </div>\n            )}\n            <StyledSectionTitle>\n              <h4>{TRANSLATIONS.NOTIFICATION_METHOD_TEXT}</h4>\n              <span className=\"required\">*</span>\n            </StyledSectionTitle>\n            {notificationSettings.map((notificationSetting, i) => (\n              <StyledNotificationMethodWrapper>\n                <NotificationMethod\n                  setting={notificationSetting}\n                  index={i}\n                  key={`NotificationMethod-${i}`}\n                  onUpdate={updateNotificationSetting}\n                  onRemove={removeNotificationSetting}\n                />\n              </StyledNotificationMethodWrapper>\n            ))}\n            <NotificationMethodAdd\n              data-test=\"notification-add\"\n              status={notificationAddState}\n              onClick={onNotificationAdd}\n            />\n          </div>\n        </div>\n      </StyledSectionContainer>\n    </StyledModal>\n  );\n};\n\nexport default withToasts(AlertReportModal);\n"]},"metadata":{},"sourceType":"module"}