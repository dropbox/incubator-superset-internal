{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\nsqlaAutoGeneratedMetricRegex,\nAGGREGATES } from\n'src/explore/constants';\n\nexport const EXPRESSION_TYPES = {\n  SIMPLE: 'SIMPLE',\n  SQL: 'SQL' };\n\n\nfunction inferSqlExpressionColumn(adhocMetric) {\n  if (\n  adhocMetric.sqlExpression &&\n  sqlaAutoGeneratedMetricRegex.test(adhocMetric.sqlExpression))\n  {\n    const indexFirstCloseParen = adhocMetric.sqlExpression.indexOf(')');\n    const indexPairedOpenParen = adhocMetric.sqlExpression.\n    substring(0, indexFirstCloseParen).\n    lastIndexOf('(');\n    if (indexFirstCloseParen > 0 && indexPairedOpenParen > 0) {\n      return adhocMetric.sqlExpression.substring(\n      indexPairedOpenParen + 1,\n      indexFirstCloseParen);\n\n    }\n  }\n  return null;\n}\n\nfunction inferSqlExpressionAggregate(adhocMetric) {\n  if (\n  adhocMetric.sqlExpression &&\n  sqlaAutoGeneratedMetricRegex.test(adhocMetric.sqlExpression))\n  {\n    const indexFirstOpenParen = adhocMetric.sqlExpression.indexOf('(');\n    if (indexFirstOpenParen > 0) {\n      return adhocMetric.sqlExpression.substring(0, indexFirstOpenParen);\n    }\n  }\n  return null;\n}\n\nexport default class AdhocMetric {\n  constructor(adhocMetric) {\n    this.expressionType = adhocMetric.expressionType || EXPRESSION_TYPES.SIMPLE;\n    if (this.expressionType === EXPRESSION_TYPES.SIMPLE) {\n      // try to be clever in the case of transitioning from Sql expression back to simple expression\n      const inferredColumn = inferSqlExpressionColumn(adhocMetric);\n      this.column =\n      adhocMetric.column ||\n      inferredColumn && { column_name: inferredColumn };\n      this.aggregate =\n      adhocMetric.aggregate || inferSqlExpressionAggregate(adhocMetric);\n      this.sqlExpression = null;\n    } else if (this.expressionType === EXPRESSION_TYPES.SQL) {\n      this.sqlExpression = adhocMetric.sqlExpression;\n      this.column = null;\n      this.aggregate = null;\n    }\n    this.datasourceWarning = !!adhocMetric.datasourceWarning;\n    this.hasCustomLabel = !!(adhocMetric.hasCustomLabel && adhocMetric.label);\n    this.label = this.hasCustomLabel ?\n    adhocMetric.label :\n    this.getDefaultLabel();\n\n    this.optionName =\n    adhocMetric.optionName ||\n    `metric_${Math.random().toString(36).substring(2, 15)}_${Math.random().\n    toString(36).\n    substring(2, 15)}`;\n  }\n\n  getDefaultLabel() {\n    const label = this.translateToSql({ useVerboseName: true });\n    return label.length < 43 ? label : `${label.substring(0, 40)}...`;\n  }\n\n  translateToSql(\n  params)\n  {if (params === void 0) {params = { useVerboseName: false, transformCountDistinct: false };}\n    if (this.expressionType === EXPRESSION_TYPES.SIMPLE) {var _this$column, _this$column2;\n      const aggregate = this.aggregate || '';\n      // eslint-disable-next-line camelcase\n      const column =\n      params.useVerboseName && (_this$column = this.column) != null && _this$column.verbose_name ?\n      `(${this.column.verbose_name})` :\n      (_this$column2 = this.column) != null && _this$column2.column_name ?\n      `(${this.column.column_name})` :\n      '';\n      // transform from `count_distinct(column)` to `count(distinct column)`\n      if (\n      params.transformCountDistinct &&\n      aggregate === AGGREGATES.COUNT_DISTINCT &&\n      /^\\(.*\\)$/.test(column))\n      {\n        return `COUNT(DISTINCT ${column.slice(1, -1)})`;\n      }\n      return aggregate + column;\n    }\n    if (this.expressionType === EXPRESSION_TYPES.SQL) {\n      return this.sqlExpression;\n    }\n    return '';\n  }\n\n  duplicateWith(nextFields) {\n    return new AdhocMetric({\n      ...this,\n      ...nextFields });\n\n  }\n\n  equals(adhocMetric) {\n    return (\n      adhocMetric.label === this.label &&\n      adhocMetric.expressionType === this.expressionType &&\n      adhocMetric.sqlExpression === this.sqlExpression &&\n      adhocMetric.aggregate === this.aggregate &&\n      (adhocMetric.column && adhocMetric.column.column_name) === (\n      this.column && this.column.column_name));\n\n  }\n\n  isValid() {\n    if (this.expressionType === EXPRESSION_TYPES.SIMPLE) {\n      return !!(this.column && this.aggregate);\n    }\n    if (this.expressionType === EXPRESSION_TYPES.SQL) {\n      return !!this.sqlExpression;\n    }\n    return false;\n  }\n\n  inferSqlExpressionAggregate() {\n    return inferSqlExpressionAggregate(this);\n  }\n\n  inferSqlExpressionColumn() {\n    return inferSqlExpressionColumn(this);\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(EXPRESSION_TYPES, \"EXPRESSION_TYPES\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/controls/MetricControl/AdhocMetric.js\");reactHotLoader.register(inferSqlExpressionColumn, \"inferSqlExpressionColumn\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/controls/MetricControl/AdhocMetric.js\");reactHotLoader.register(inferSqlExpressionAggregate, \"inferSqlExpressionAggregate\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/controls/MetricControl/AdhocMetric.js\");reactHotLoader.register(AdhocMetric, \"AdhocMetric\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/controls/MetricControl/AdhocMetric.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["sqlaAutoGeneratedMetricRegex","AGGREGATES","EXPRESSION_TYPES","SIMPLE","SQL","inferSqlExpressionColumn","adhocMetric","sqlExpression","test","indexFirstCloseParen","indexOf","indexPairedOpenParen","substring","lastIndexOf","inferSqlExpressionAggregate","indexFirstOpenParen","AdhocMetric","constructor","expressionType","inferredColumn","column","column_name","aggregate","datasourceWarning","hasCustomLabel","label","getDefaultLabel","optionName","Math","random","toString","translateToSql","useVerboseName","length","params","transformCountDistinct","verbose_name","COUNT_DISTINCT","slice","duplicateWith","nextFields","equals","isValid"],"sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/controls/MetricControl/AdhocMetric.js"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  sqlaAutoGeneratedMetricRegex,\n  AGGREGATES,\n} from 'src/explore/constants';\n\nexport const EXPRESSION_TYPES = {\n  SIMPLE: 'SIMPLE',\n  SQL: 'SQL',\n};\n\nfunction inferSqlExpressionColumn(adhocMetric) {\n  if (\n    adhocMetric.sqlExpression &&\n    sqlaAutoGeneratedMetricRegex.test(adhocMetric.sqlExpression)\n  ) {\n    const indexFirstCloseParen = adhocMetric.sqlExpression.indexOf(')');\n    const indexPairedOpenParen = adhocMetric.sqlExpression\n      .substring(0, indexFirstCloseParen)\n      .lastIndexOf('(');\n    if (indexFirstCloseParen > 0 && indexPairedOpenParen > 0) {\n      return adhocMetric.sqlExpression.substring(\n        indexPairedOpenParen + 1,\n        indexFirstCloseParen,\n      );\n    }\n  }\n  return null;\n}\n\nfunction inferSqlExpressionAggregate(adhocMetric) {\n  if (\n    adhocMetric.sqlExpression &&\n    sqlaAutoGeneratedMetricRegex.test(adhocMetric.sqlExpression)\n  ) {\n    const indexFirstOpenParen = adhocMetric.sqlExpression.indexOf('(');\n    if (indexFirstOpenParen > 0) {\n      return adhocMetric.sqlExpression.substring(0, indexFirstOpenParen);\n    }\n  }\n  return null;\n}\n\nexport default class AdhocMetric {\n  constructor(adhocMetric) {\n    this.expressionType = adhocMetric.expressionType || EXPRESSION_TYPES.SIMPLE;\n    if (this.expressionType === EXPRESSION_TYPES.SIMPLE) {\n      // try to be clever in the case of transitioning from Sql expression back to simple expression\n      const inferredColumn = inferSqlExpressionColumn(adhocMetric);\n      this.column =\n        adhocMetric.column ||\n        (inferredColumn && { column_name: inferredColumn });\n      this.aggregate =\n        adhocMetric.aggregate || inferSqlExpressionAggregate(adhocMetric);\n      this.sqlExpression = null;\n    } else if (this.expressionType === EXPRESSION_TYPES.SQL) {\n      this.sqlExpression = adhocMetric.sqlExpression;\n      this.column = null;\n      this.aggregate = null;\n    }\n    this.datasourceWarning = !!adhocMetric.datasourceWarning;\n    this.hasCustomLabel = !!(adhocMetric.hasCustomLabel && adhocMetric.label);\n    this.label = this.hasCustomLabel\n      ? adhocMetric.label\n      : this.getDefaultLabel();\n\n    this.optionName =\n      adhocMetric.optionName ||\n      `metric_${Math.random().toString(36).substring(2, 15)}_${Math.random()\n        .toString(36)\n        .substring(2, 15)}`;\n  }\n\n  getDefaultLabel() {\n    const label = this.translateToSql({ useVerboseName: true });\n    return label.length < 43 ? label : `${label.substring(0, 40)}...`;\n  }\n\n  translateToSql(\n    params = { useVerboseName: false, transformCountDistinct: false },\n  ) {\n    if (this.expressionType === EXPRESSION_TYPES.SIMPLE) {\n      const aggregate = this.aggregate || '';\n      // eslint-disable-next-line camelcase\n      const column =\n        params.useVerboseName && this.column?.verbose_name\n          ? `(${this.column.verbose_name})`\n          : this.column?.column_name\n          ? `(${this.column.column_name})`\n          : '';\n      // transform from `count_distinct(column)` to `count(distinct column)`\n      if (\n        params.transformCountDistinct &&\n        aggregate === AGGREGATES.COUNT_DISTINCT &&\n        /^\\(.*\\)$/.test(column)\n      ) {\n        return `COUNT(DISTINCT ${column.slice(1, -1)})`;\n      }\n      return aggregate + column;\n    }\n    if (this.expressionType === EXPRESSION_TYPES.SQL) {\n      return this.sqlExpression;\n    }\n    return '';\n  }\n\n  duplicateWith(nextFields) {\n    return new AdhocMetric({\n      ...this,\n      ...nextFields,\n    });\n  }\n\n  equals(adhocMetric) {\n    return (\n      adhocMetric.label === this.label &&\n      adhocMetric.expressionType === this.expressionType &&\n      adhocMetric.sqlExpression === this.sqlExpression &&\n      adhocMetric.aggregate === this.aggregate &&\n      (adhocMetric.column && adhocMetric.column.column_name) ===\n        (this.column && this.column.column_name)\n    );\n  }\n\n  isValid() {\n    if (this.expressionType === EXPRESSION_TYPES.SIMPLE) {\n      return !!(this.column && this.aggregate);\n    }\n    if (this.expressionType === EXPRESSION_TYPES.SQL) {\n      return !!this.sqlExpression;\n    }\n    return false;\n  }\n\n  inferSqlExpressionAggregate() {\n    return inferSqlExpressionAggregate(this);\n  }\n\n  inferSqlExpressionColumn() {\n    return inferSqlExpressionColumn(this);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}