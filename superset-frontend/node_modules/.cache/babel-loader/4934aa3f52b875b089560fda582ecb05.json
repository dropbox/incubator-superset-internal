{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useMemo, useCallback, createRef } from 'react';\nimport moment from 'moment';\nimport { useDispatch } from 'react-redux';\nimport ReactDiffViewer from 'react-diff-viewer-continued';\nimport { useInView } from 'react-intersection-observer';\nimport Modal from 'src/components/Modal';\nimport Button from 'src/components/Button';\nimport { saveDashboardRequest, setOverrideConfirm } from 'src/dashboard/actions/dashboardState';\nimport { t, styled } from '@superset-ui/core';\nimport { SAVE_TYPE_OVERWRITE_CONFIRMED } from 'src/dashboard/util/constants';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst STICKY_HEADER_TOP = 16;\nconst STICKY_HEADER_HEIGHT = 32;\nconst StyledTitle = styled.h2`\n  ${(_ref) => {let { theme } = _ref;return `\n     color:  ${theme.colors.grayscale.dark1}\n   `;}}\n`;\nconst StyledEditor = styled.div`\n  ${(_ref2) => {let { theme } = _ref2;return `\n     table {\n       border: 1px ${theme.colors.grayscale.light2} solid;\n     }\n     pre {\n       font-size: 11px;\n       padding: 0px;\n       background-color: transparent;\n       border: 0px;\n       line-height: 110%;\n     }\n   `;}}\n`;\nconst StackableHeader = styled(Button)`\n  ${(_ref3) => {let { theme, top } = _ref3;return `\n     position: sticky;\n     top: ${top}px;\n     background-color: ${theme.colors.grayscale.light5};\n     margin: 0px;\n     padding: 8px 4px;\n     z-index: 1;\n     border: 0px;\n     border-radius: 0px;\n     width: 100%;\n     justify-content: flex-start;\n     border-bottom: 1px ${theme.colors.grayscale.light1} solid;\n     &::before {\n       display: inline-block;\n       position: relative;\n       opacity: 1;\n       content: \"\\\\00BB\";\n     }\n   `;}}\n`;\nconst StyledBottom = styled.div`\n  ${(_ref4) => {let { inView } = _ref4;return `\n     margin: 8px auto;\n     text-align: center;\n     opacity: ${inView ? 0 : 1};\n  `;}}\n`;\nconst OverrideConfirmModal = (_ref5) => {let { overwriteConfirmMetadata } = _ref5;\n  const [bottomRef, hasReviewed] = useInView({ triggerOnce: true });\n  const dispatch = useDispatch();\n  const onHide = useCallback(() => dispatch(setOverrideConfirm(undefined)), [dispatch]);\n  const anchors = useMemo(() => overwriteConfirmMetadata ?\n  overwriteConfirmMetadata.overwriteConfirmItems.map(() => /*#__PURE__*/createRef()) :\n  [], [overwriteConfirmMetadata]);\n  const onAnchorClicked = useCallback((index) => {var _anchors$index, _anchors$index$curren;\n    (_anchors$index = anchors[index]) == null ? void 0 : (_anchors$index$curren = _anchors$index.current) == null ? void 0 : _anchors$index$curren.scrollIntoView({ behavior: 'smooth' });\n  }, [anchors]);\n  const onConfirmOverwrite = useCallback(() => {\n    if (overwriteConfirmMetadata) {\n      dispatch(saveDashboardRequest(overwriteConfirmMetadata.data, overwriteConfirmMetadata.dashboardId, SAVE_TYPE_OVERWRITE_CONFIRMED));\n    }\n  }, [dispatch, overwriteConfirmMetadata]);\n  return ___EmotionJSX(Modal, { responsive: true, maxWidth: \"1024px\", height: \"50vh\", show: Boolean(overwriteConfirmMetadata), title: t('Confirm overwrite'), footer: ___EmotionJSX(React.Fragment, null,\n    t('Scroll down to the bottom to enable overwriting changes. '),\n    ___EmotionJSX(Button, { htmlType: \"button\", buttonSize: \"small\", onClick: onHide, cta: true },\n    t('No')),\n\n    ___EmotionJSX(Button, { htmlType: \"button\", buttonSize: \"small\", cta: true, buttonStyle: \"primary\", onClick: onConfirmOverwrite, disabled: !hasReviewed },\n    t('Yes, overwrite changes'))),\n\n    onHide: onHide },\n  overwriteConfirmMetadata && ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(StyledTitle, null,\n  t('Are you sure you intend to overwrite the following values?')),\n\n  ___EmotionJSX(StyledEditor, null,\n  overwriteConfirmMetadata.overwriteConfirmItems.map((_ref6, index) => {let { keyPath, oldValue, newValue } = _ref6;return ___EmotionJSX(React.Fragment, { key: keyPath },\n    ___EmotionJSX(\"div\", { ref: anchors[index] }),\n    ___EmotionJSX(StackableHeader, { top: index * STICKY_HEADER_HEIGHT - STICKY_HEADER_TOP, buttonStyle: \"tertiary\", onClick: () => onAnchorClicked(index) },\n    keyPath),\n\n    ___EmotionJSX(ReactDiffViewer, { oldValue: oldValue, newValue: newValue, leftTitle: t('Last Updated %s by %s', moment.utc(overwriteConfirmMetadata.updatedAt).calendar(), overwriteConfirmMetadata.updatedBy), rightTitle: \"new value\" }));}),\n\n  ___EmotionJSX(StyledBottom, { ref: bottomRef, inView: hasReviewed },\n\n  ___EmotionJSX(Button, { htmlType: \"button\", buttonSize: \"small\", cta: true, buttonStyle: \"primary\", onClick: onConfirmOverwrite },\n  t('Yes, overwrite changes'))))));\n\n\n\n\n\n};\nexport default OverrideConfirmModal;","map":{"version":3,"mappings":"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","names":["React","useMemo","useCallback","createRef","moment","useDispatch","ReactDiffViewer","useInView","Modal","Button","saveDashboardRequest","setOverrideConfirm","t","styled","SAVE_TYPE_OVERWRITE_CONFIRMED","STICKY_HEADER_TOP","STICKY_HEADER_HEIGHT","StyledTitle","h2","theme","colors","grayscale","dark1","StyledEditor","div","light2","StackableHeader","top","light5","light1","StyledBottom","inView","OverrideConfirmModal","overwriteConfirmMetadata","bottomRef","hasReviewed","triggerOnce","dispatch","onHide","undefined","anchors","overwriteConfirmItems","map","onAnchorClicked","index","current","scrollIntoView","behavior","onConfirmOverwrite","data","dashboardId","Boolean","keyPath","oldValue","newValue","utc","updatedAt","calendar","updatedBy"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/dashboard/components/OverwriteConfirm/OverwriteConfirmModal.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useMemo, useCallback, RefObject, createRef } from 'react';\nimport moment from 'moment';\nimport { useDispatch } from 'react-redux';\nimport ReactDiffViewer from 'react-diff-viewer-continued';\nimport { useInView } from 'react-intersection-observer';\nimport Modal from 'src/components/Modal';\nimport Button from 'src/components/Button';\nimport { DashboardState } from 'src/dashboard/types';\nimport {\n  saveDashboardRequest,\n  setOverrideConfirm,\n} from 'src/dashboard/actions/dashboardState';\nimport { t, styled } from '@superset-ui/core';\nimport { SAVE_TYPE_OVERWRITE_CONFIRMED } from 'src/dashboard/util/constants';\n\nconst STICKY_HEADER_TOP = 16;\nconst STICKY_HEADER_HEIGHT = 32;\n\nconst StyledTitle = styled.h2`\n  ${({ theme }) => `\n     color:  ${theme.colors.grayscale.dark1}\n   `}\n`;\n\nconst StyledEditor = styled.div`\n  ${({ theme }) => `\n     table {\n       border: 1px ${theme.colors.grayscale.light2} solid;\n     }\n     pre {\n       font-size: 11px;\n       padding: 0px;\n       background-color: transparent;\n       border: 0px;\n       line-height: 110%;\n     }\n   `}\n`;\n\nconst StackableHeader = styled(Button)<{ top: number }>`\n  ${({ theme, top }) => `\n     position: sticky;\n     top: ${top}px;\n     background-color: ${theme.colors.grayscale.light5};\n     margin: 0px;\n     padding: 8px 4px;\n     z-index: 1;\n     border: 0px;\n     border-radius: 0px;\n     width: 100%;\n     justify-content: flex-start;\n     border-bottom: 1px ${theme.colors.grayscale.light1} solid;\n     &::before {\n       display: inline-block;\n       position: relative;\n       opacity: 1;\n       content: \"\\\\00BB\";\n     }\n   `}\n`;\n\nconst StyledBottom = styled.div<{ inView: boolean }>`\n  ${({ inView }) => `\n     margin: 8px auto;\n     text-align: center;\n     opacity: ${inView ? 0 : 1};\n  `}\n`;\n\ntype Props = {\n  overwriteConfirmMetadata: DashboardState['overwriteConfirmMetadata'];\n};\n\nconst OverrideConfirmModal = ({ overwriteConfirmMetadata }: Props) => {\n  const [bottomRef, hasReviewed] = useInView({ triggerOnce: true });\n  const dispatch = useDispatch();\n  const onHide = useCallback(\n    () => dispatch(setOverrideConfirm(undefined)),\n    [dispatch],\n  );\n  const anchors = useMemo<RefObject<HTMLDivElement>[]>(\n    () =>\n      overwriteConfirmMetadata\n        ? overwriteConfirmMetadata.overwriteConfirmItems.map(() =>\n            createRef<HTMLDivElement>(),\n          )\n        : [],\n    [overwriteConfirmMetadata],\n  );\n  const onAnchorClicked = useCallback(\n    (index: number) => {\n      anchors[index]?.current?.scrollIntoView({ behavior: 'smooth' });\n    },\n    [anchors],\n  );\n  const onConfirmOverwrite = useCallback(() => {\n    if (overwriteConfirmMetadata) {\n      dispatch(\n        saveDashboardRequest(\n          overwriteConfirmMetadata.data,\n          overwriteConfirmMetadata.dashboardId,\n          SAVE_TYPE_OVERWRITE_CONFIRMED,\n        ),\n      );\n    }\n  }, [dispatch, overwriteConfirmMetadata]);\n\n  return (\n    <Modal\n      responsive\n      maxWidth=\"1024px\"\n      height=\"50vh\"\n      show={Boolean(overwriteConfirmMetadata)}\n      title={t('Confirm overwrite')}\n      footer={\n        <>\n          {t('Scroll down to the bottom to enable overwriting changes. ')}\n          <Button\n            htmlType=\"button\"\n            buttonSize=\"small\"\n            onClick={onHide}\n            data-test=\"override-confirm-modal-cancel-button\"\n            cta\n          >\n            {t('No')}\n          </Button>\n          <Button\n            data-test=\"overwrite-confirm-save-button\"\n            htmlType=\"button\"\n            buttonSize=\"small\"\n            cta\n            buttonStyle=\"primary\"\n            onClick={onConfirmOverwrite}\n            disabled={!hasReviewed}\n          >\n            {t('Yes, overwrite changes')}\n          </Button>\n        </>\n      }\n      onHide={onHide}\n    >\n      {overwriteConfirmMetadata && (\n        <>\n          <StyledTitle>\n            {t('Are you sure you intend to overwrite the following values?')}\n          </StyledTitle>\n          <StyledEditor>\n            {overwriteConfirmMetadata.overwriteConfirmItems.map(\n              ({ keyPath, oldValue, newValue }, index) => (\n                <React.Fragment key={keyPath}>\n                  <div ref={anchors[index]} />\n                  <StackableHeader\n                    top={index * STICKY_HEADER_HEIGHT - STICKY_HEADER_TOP}\n                    buttonStyle=\"tertiary\"\n                    onClick={() => onAnchorClicked(index)}\n                  >\n                    {keyPath}\n                  </StackableHeader>\n                  <ReactDiffViewer\n                    oldValue={oldValue}\n                    newValue={newValue}\n                    leftTitle={t(\n                      'Last Updated %s by %s',\n                      moment.utc(overwriteConfirmMetadata.updatedAt).calendar(),\n                      overwriteConfirmMetadata.updatedBy,\n                    )}\n                    rightTitle=\"new value\"\n                  />\n                </React.Fragment>\n              ),\n            )}\n            <StyledBottom ref={bottomRef} inView={hasReviewed}>\n              {/* Add submit button at the bottom in case of intersection-observer fallback */}\n              <Button\n                htmlType=\"button\"\n                buttonSize=\"small\"\n                cta\n                buttonStyle=\"primary\"\n                onClick={onConfirmOverwrite}\n              >\n                {t('Yes, overwrite changes')}\n              </Button>\n            </StyledBottom>\n          </StyledEditor>\n        </>\n      )}\n    </Modal>\n  );\n};\n\nexport default OverrideConfirmModal;\n"]},"metadata":{},"sourceType":"module"}