{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport { t, styled } from '@superset-ui/core';\nimport { AntdForm, Col, Row } from 'src/components';\nimport { Form, FormLabel } from 'src/components/Form';\nimport { Radio } from 'src/components/Radio';\nimport { Input, TextArea } from 'src/components/Input';\nimport { Input as AntdInput, Tooltip } from 'antd';\nimport { EyeInvisibleOutlined, EyeOutlined } from '@ant-design/icons';\nimport { AuthType } from '.';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst StyledDiv = styled.div`\n  padding-top: ${(_ref) => {let { theme } = _ref;return theme.gridUnit * 2;}}px;\n  label {\n    color: ${(_ref2) => {let { theme } = _ref2;return theme.colors.grayscale.base;}};\n    text-transform: uppercase;\n    margin-bottom: ${(_ref3) => {let { theme } = _ref3;return theme.gridUnit * 2;}}px;\n  }\n`;\nconst StyledRow = styled(Row)`\n  padding-bottom: ${(_ref4) => {let { theme } = _ref4;return theme.gridUnit * 2;}}px;\n`;\nconst StyledFormItem = styled(AntdForm.Item)`\n  margin-bottom: 0 !important;\n`;\nconst StyledInputPassword = styled(AntdInput.Password)`\n  margin: ${(_ref5) => {let { theme } = _ref5;return `${theme.gridUnit}px 0 ${theme.gridUnit * 2}px`;}};\n`;\nconst SSHTunnelForm = (_ref6) => {var _db$ssh_tunnel, _db$ssh_tunnel2, _db$ssh_tunnel3, _db$ssh_tunnel4, _db$ssh_tunnel5, _db$ssh_tunnel6;let { db, onSSHTunnelParametersChange, setSSHTunnelLoginMethod } = _ref6;\n  const [usePassword, setUsePassword] = useState(AuthType.password);\n  return ___EmotionJSX(Form, null,\n  ___EmotionJSX(StyledRow, { gutter: 16 },\n  ___EmotionJSX(Col, { xs: 24, md: 12 },\n  ___EmotionJSX(StyledDiv, null,\n  ___EmotionJSX(FormLabel, { htmlFor: \"server_address\", required: true },\n  t('SSH Host')),\n\n  ___EmotionJSX(Input, { name: \"server_address\", type: \"text\", placeholder: t('e.g. 127.0.0.1'), value: (db == null ? void 0 : (_db$ssh_tunnel = db.ssh_tunnel) == null ? void 0 : _db$ssh_tunnel.server_address) || '', onChange: onSSHTunnelParametersChange, \"data-test\": \"ssh-tunnel-server_address-input\" }))),\n\n\n  ___EmotionJSX(Col, { xs: 24, md: 12 },\n  ___EmotionJSX(StyledDiv, null,\n  ___EmotionJSX(FormLabel, { htmlFor: \"server_port\", required: true },\n  t('SSH Port')),\n\n  ___EmotionJSX(Input, { name: \"server_port\", type: \"text\", placeholder: t('22'), value: (db == null ? void 0 : (_db$ssh_tunnel2 = db.ssh_tunnel) == null ? void 0 : _db$ssh_tunnel2.server_port) || '', onChange: onSSHTunnelParametersChange, \"data-test\": \"ssh-tunnel-server_port-input\" })))),\n\n\n\n  ___EmotionJSX(StyledRow, { gutter: 16 },\n  ___EmotionJSX(Col, { xs: 24 },\n  ___EmotionJSX(StyledDiv, null,\n  ___EmotionJSX(FormLabel, { htmlFor: \"username\", required: true },\n  t('Username')),\n\n  ___EmotionJSX(Input, { name: \"username\", type: \"text\", placeholder: t('e.g. Analytics'), value: (db == null ? void 0 : (_db$ssh_tunnel3 = db.ssh_tunnel) == null ? void 0 : _db$ssh_tunnel3.username) || '', onChange: onSSHTunnelParametersChange, \"data-test\": \"ssh-tunnel-username-input\" })))),\n\n\n\n  ___EmotionJSX(StyledRow, { gutter: 16 },\n  ___EmotionJSX(Col, { xs: 24 },\n  ___EmotionJSX(StyledDiv, null,\n  ___EmotionJSX(FormLabel, { htmlFor: \"use_password\", required: true },\n  t('Login with')),\n\n  ___EmotionJSX(StyledFormItem, { name: \"use_password\", initialValue: usePassword },\n  ___EmotionJSX(Radio.Group, { onChange: (_ref7) => {let { target: { value } } = _ref7;\n      setUsePassword(value);\n      setSSHTunnelLoginMethod(value);\n    } },\n  ___EmotionJSX(Radio, { value: AuthType.password, \"data-test\": \"ssh-tunnel-use_password-radio\" },\n  t('Password')),\n\n  ___EmotionJSX(Radio, { value: AuthType.privateKey, \"data-test\": \"ssh-tunnel-use_private_key-radio\" },\n  t('Private Key & Password'))))))),\n\n\n\n\n\n\n  usePassword === AuthType.password && ___EmotionJSX(StyledRow, { gutter: 16 },\n  ___EmotionJSX(Col, { xs: 24 },\n  ___EmotionJSX(StyledDiv, null,\n  ___EmotionJSX(FormLabel, { htmlFor: \"password\", required: true },\n  t('SSH Password')),\n\n  ___EmotionJSX(StyledInputPassword, { name: \"password\", placeholder: t('e.g. ********'), value: (db == null ? void 0 : (_db$ssh_tunnel4 = db.ssh_tunnel) == null ? void 0 : _db$ssh_tunnel4.password) || '', onChange: onSSHTunnelParametersChange, \"data-test\": \"ssh-tunnel-password-input\", iconRender: (visible) => visible ? ___EmotionJSX(Tooltip, { title: \"Hide password.\" },\n    ___EmotionJSX(EyeInvisibleOutlined, null)) :\n    ___EmotionJSX(Tooltip, { title: \"Show password.\" },\n    ___EmotionJSX(EyeOutlined, null)),\n    role: \"textbox\" })))),\n\n\n\n  usePassword === AuthType.privateKey && ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(StyledRow, { gutter: 16 },\n  ___EmotionJSX(Col, { xs: 24 },\n  ___EmotionJSX(StyledDiv, null,\n  ___EmotionJSX(FormLabel, { htmlFor: \"private_key\", required: true },\n  t('Private Key')),\n\n  ___EmotionJSX(TextArea, { name: \"private_key\", placeholder: t('Paste Private Key here'), value: (db == null ? void 0 : (_db$ssh_tunnel5 = db.ssh_tunnel) == null ? void 0 : _db$ssh_tunnel5.private_key) || '', onChange: onSSHTunnelParametersChange, \"data-test\": \"ssh-tunnel-private_key-input\", rows: 4 })))),\n\n\n\n  ___EmotionJSX(StyledRow, { gutter: 16 },\n  ___EmotionJSX(Col, { xs: 24 },\n  ___EmotionJSX(StyledDiv, null,\n  ___EmotionJSX(FormLabel, { htmlFor: \"private_key_password\", required: true },\n  t('Private Key Password')),\n\n  ___EmotionJSX(StyledInputPassword, { name: \"private_key_password\", placeholder: t('e.g. ********'), value: (db == null ? void 0 : (_db$ssh_tunnel6 = db.ssh_tunnel) == null ? void 0 : _db$ssh_tunnel6.private_key_password) || '', onChange: onSSHTunnelParametersChange, \"data-test\": \"ssh-tunnel-private_key_password-input\", iconRender: (visible) => visible ? ___EmotionJSX(Tooltip, { title: \"Hide password.\" },\n    ___EmotionJSX(EyeInvisibleOutlined, null)) :\n    ___EmotionJSX(Tooltip, { title: \"Show password.\" },\n    ___EmotionJSX(EyeOutlined, null)),\n    role: \"textbox\" }))))));\n\n\n\n\n\n};__signature__(SSHTunnelForm, \"useState{[usePassword, setUsePassword](AuthType.password)}\");const _default =\nSSHTunnelForm;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(StyledDiv, \"StyledDiv\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/features/databases/DatabaseModal/SSHTunnelForm.tsx\");reactHotLoader.register(StyledRow, \"StyledRow\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/features/databases/DatabaseModal/SSHTunnelForm.tsx\");reactHotLoader.register(StyledFormItem, \"StyledFormItem\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/features/databases/DatabaseModal/SSHTunnelForm.tsx\");reactHotLoader.register(StyledInputPassword, \"StyledInputPassword\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/features/databases/DatabaseModal/SSHTunnelForm.tsx\");reactHotLoader.register(SSHTunnelForm, \"SSHTunnelForm\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/features/databases/DatabaseModal/SSHTunnelForm.tsx\");reactHotLoader.register(_default, \"default\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/features/databases/DatabaseModal/SSHTunnelForm.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,KAAP,IAA2CC,QAA3C,QAA2D,OAA3D;AACA,SAASC,CAAT,EAAYC,MAAZ,QAA0B,mBAA1B;AACA,SAASC,QAAT,EAAmBC,GAAnB,EAAwBC,GAAxB,QAAmC,gBAAnC;AACA,SAASC,IAAT,EAAeC,SAAf,QAAgC,qBAAhC;AACA,SAASC,KAAT,QAAsB,sBAAtB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,sBAAhC;AACA,SAASD,KAAK,IAAIE,SAAlB,EAA6BC,OAA7B,QAA4C,MAA5C;AACA,SAASC,oBAAT,EAA+BC,WAA/B,QAAkD,mBAAlD;AAEA,SAASC,QAAT,QAAyB,GAAzB,C;AAEA,MAAMC,SAAS,GAAGd,MAAM,CAACe,GAAG;iBACX,eAAC,EAAEC,KAAF,EAAD,eAAeA,KAAK,CAACC,QAAN,GAAiB,CAAhC,EAAiC;;aAErC,gBAAC,EAAED,KAAF,EAAD,gBAAeA,KAAK,CAACE,MAAN,CAAaC,SAAb,CAAuBC,IAAtC,EAA0C;;qBAElC,gBAAC,EAAEJ,KAAF,EAAD,gBAAeA,KAAK,CAACC,QAAN,GAAiB,CAAhC,EAAiC;;CALtD;AASA,MAAMI,SAAS,GAAGrB,MAAM,CAACG,GAAD,CAAK;oBACT,gBAAC,EAAEa,KAAF,EAAD,gBAAeA,KAAK,CAACC,QAAN,GAAiB,CAAhC,EAAiC;CADrD;AAIA,MAAMK,cAAc,GAAGtB,MAAM,CAACC,QAAQ,CAACsB,IAAV,CAAe;;CAA5C;AAIA,MAAMC,mBAAmB,GAAGxB,MAAM,CAACS,SAAS,CAACgB,QAAX,CAAoB;YAC1C,gBAAC,EAAET,KAAF,EAAD,gBAAe,GAAGA,KAAK,CAACC,QAAQ,QAAQD,KAAK,CAACC,QAAN,GAAiB,CAAC,IAA1D,EAA8D;CAD1E;AAIA,MAAMS,aAAa,GAAG,WAUjB,6GAVkB,EACrBC,EADqB,EAErBC,2BAFqB,EAGrBC,uBAHqB,EAUlB;EACH,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCjC,QAAQ,CAAWe,QAAQ,CAACmB,QAApB,CAA9C;EAEA,OACE,cAAC,IAAD;EACE,cAAC,SAAD,IAAW,MAAM,EAAE,EAAnB;EACE,cAAC,GAAD,IAAK,EAAE,EAAE,EAAT,EAAa,EAAE,EAAE,EAAjB;EACE,cAAC,SAAD;EACE,cAAC,SAAD,IAAW,OAAO,EAAC,gBAAnB,EAAoC,QAAQ,MAA5C;EACGjC,CAAC,CAAC,UAAD,CADJ,CADF;;EAIE,cAAC,KAAD,IACE,IAAI,EAAC,gBADP,EAEE,IAAI,EAAC,MAFP,EAGE,WAAW,EAAEA,CAAC,CAAC,gBAAD,CAHhB,EAIE,KAAK,EAAE,GAAE,QAAF,gCAAE,CAAEkC,UAAJ,oCAAgBC,cAAhB,KAAkC,EAJ3C,EAKE,QAAQ,EAAEN,2BALZ,EAME,aAAU,iCANZ,GAJF,CADF,CADF;;;EAgBE,cAAC,GAAD,IAAK,EAAE,EAAE,EAAT,EAAa,EAAE,EAAE,EAAjB;EACE,cAAC,SAAD;EACE,cAAC,SAAD,IAAW,OAAO,EAAC,aAAnB,EAAiC,QAAQ,MAAzC;EACG7B,CAAC,CAAC,UAAD,CADJ,CADF;;EAIE,cAAC,KAAD,IACE,IAAI,EAAC,aADP,EAEE,IAAI,EAAC,MAFP,EAGE,WAAW,EAAEA,CAAC,CAAC,IAAD,CAHhB,EAIE,KAAK,EAAE,GAAE,QAAF,iCAAE,CAAEkC,UAAJ,qCAAgBE,WAAhB,KAA+B,EAJxC,EAKE,QAAQ,EAAEP,2BALZ,EAME,aAAU,8BANZ,GAJF,CADF,CAhBF,CADF;;;;EAiCE,cAAC,SAAD,IAAW,MAAM,EAAE,EAAnB;EACE,cAAC,GAAD,IAAK,EAAE,EAAE,EAAT;EACE,cAAC,SAAD;EACE,cAAC,SAAD,IAAW,OAAO,EAAC,UAAnB,EAA8B,QAAQ,MAAtC;EACG7B,CAAC,CAAC,UAAD,CADJ,CADF;;EAIE,cAAC,KAAD,IACE,IAAI,EAAC,UADP,EAEE,IAAI,EAAC,MAFP,EAGE,WAAW,EAAEA,CAAC,CAAC,gBAAD,CAHhB,EAIE,KAAK,EAAE,GAAE,QAAF,iCAAE,CAAEkC,UAAJ,qCAAgBG,QAAhB,KAA4B,EAJrC,EAKE,QAAQ,EAAER,2BALZ,EAME,aAAU,2BANZ,GAJF,CADF,CADF,CAjCF;;;;EAkDE,cAAC,SAAD,IAAW,MAAM,EAAE,EAAnB;EACE,cAAC,GAAD,IAAK,EAAE,EAAE,EAAT;EACE,cAAC,SAAD;EACE,cAAC,SAAD,IAAW,OAAO,EAAC,cAAnB,EAAkC,QAAQ,MAA1C;EACG7B,CAAC,CAAC,YAAD,CADJ,CADF;;EAIE,cAAC,cAAD,IAAgB,IAAI,EAAC,cAArB,EAAoC,YAAY,EAAE+B,WAAlD;EACE,cAAC,KAAD,CAAO,KAAP,IACE,QAAQ,EAAE,WAA0B,KAAzB,EAAEO,MAAM,EAAE,EAAEC,KAAF,EAAV,EAAyB;MAClCP,cAAc,CAACO,KAAD,CAAd;MACAT,uBAAuB,CAACS,KAAD,CAAvB;IACD,CAJH;EAME,cAAC,KAAD,IACE,KAAK,EAAEzB,QAAQ,CAACmB,QADlB,EAEE,aAAU,+BAFZ;EAIGjC,CAAC,CAAC,UAAD,CAJJ,CANF;;EAYE,cAAC,KAAD,IACE,KAAK,EAAEc,QAAQ,CAAC0B,UADlB,EAEE,aAAU,kCAFZ;EAIGxC,CAAC,CAAC,wBAAD,CAJJ,CAZF,CADF,CAJF,CADF,CADF,CAlDF;;;;;;;EAgFG+B,WAAW,KAAKjB,QAAQ,CAACmB,QAAzB,IACC,cAAC,SAAD,IAAW,MAAM,EAAE,EAAnB;EACE,cAAC,GAAD,IAAK,EAAE,EAAE,EAAT;EACE,cAAC,SAAD;EACE,cAAC,SAAD,IAAW,OAAO,EAAC,UAAnB,EAA8B,QAAQ,MAAtC;EACGjC,CAAC,CAAC,cAAD,CADJ,CADF;;EAIE,cAAC,mBAAD,IACE,IAAI,EAAC,UADP,EAEE,WAAW,EAAEA,CAAC,CAAC,eAAD,CAFhB,EAGE,KAAK,EAAE,GAAE,QAAF,iCAAE,CAAEkC,UAAJ,qCAAgBD,QAAhB,KAA4B,EAHrC,EAIE,QAAQ,EAAEJ,2BAJZ,EAKE,aAAU,2BALZ,EAME,UAAU,EAAE,QAAO,KACjBY,OAAO,GACL,cAAC,OAAD,IAAS,KAAK,EAAC,gBAAf;IACE,cAAC,oBAAD,OADF,CADK;IAKL,cAAC,OAAD,IAAS,KAAK,EAAC,gBAAf;IACE,cAAC,WAAD,OADF,CAZN;IAiBE,IAAI,EAAC,SAjBP,GAJF,CADF,CADF,CAjFJ;;;;EA8GGV,WAAW,KAAKjB,QAAQ,CAAC0B,UAAzB,IACC;EACE,cAAC,SAAD,IAAW,MAAM,EAAE,EAAnB;EACE,cAAC,GAAD,IAAK,EAAE,EAAE,EAAT;EACE,cAAC,SAAD;EACE,cAAC,SAAD,IAAW,OAAO,EAAC,aAAnB,EAAiC,QAAQ,MAAzC;EACGxC,CAAC,CAAC,aAAD,CADJ,CADF;;EAIE,cAAC,QAAD,IACE,IAAI,EAAC,aADP,EAEE,WAAW,EAAEA,CAAC,CAAC,wBAAD,CAFhB,EAGE,KAAK,EAAE,GAAE,QAAF,iCAAE,CAAEkC,UAAJ,qCAAgBQ,WAAhB,KAA+B,EAHxC,EAIE,QAAQ,EAAEb,2BAJZ,EAKE,aAAU,8BALZ,EAME,IAAI,EAAE,CANR,GAJF,CADF,CADF,CADF;;;;EAkBE,cAAC,SAAD,IAAW,MAAM,EAAE,EAAnB;EACE,cAAC,GAAD,IAAK,EAAE,EAAE,EAAT;EACE,cAAC,SAAD;EACE,cAAC,SAAD,IAAW,OAAO,EAAC,sBAAnB,EAA0C,QAAQ,MAAlD;EACG7B,CAAC,CAAC,sBAAD,CADJ,CADF;;EAIE,cAAC,mBAAD,IACE,IAAI,EAAC,sBADP,EAEE,WAAW,EAAEA,CAAC,CAAC,eAAD,CAFhB,EAGE,KAAK,EAAE,GAAE,QAAF,iCAAE,CAAEkC,UAAJ,qCAAgBS,oBAAhB,KAAwC,EAHjD,EAIE,QAAQ,EAAEd,2BAJZ,EAKE,aAAU,uCALZ,EAME,UAAU,EAAE,QAAO,KACjBY,OAAO,GACL,cAAC,OAAD,IAAS,KAAK,EAAC,gBAAf;IACE,cAAC,oBAAD,OADF,CADK;IAKL,cAAC,OAAD,IAAS,KAAK,EAAC,gBAAf;IACE,cAAC,WAAD,OADF,CAZN;IAiBE,IAAI,EAAC,SAjBP,GAJF,CADF,CADF,CAlBF,CA/GJ,CADF;;;;;;AAkKD,CA/KD,C,cAAMd,a;AAgLSA,a,CAAf,wB,iLArMMZ,S,kKASAO,S,kKAIAC,c,uKAIAE,mB,4KAIAE,a","names":["React","useState","t","styled","AntdForm","Col","Row","Form","FormLabel","Radio","Input","TextArea","AntdInput","Tooltip","EyeInvisibleOutlined","EyeOutlined","AuthType","StyledDiv","div","theme","gridUnit","colors","grayscale","base","StyledRow","StyledFormItem","Item","StyledInputPassword","Password","SSHTunnelForm","db","onSSHTunnelParametersChange","setSSHTunnelLoginMethod","usePassword","setUsePassword","password","ssh_tunnel","server_address","server_port","username","target","value","privateKey","visible","private_key","private_key_password"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/features/databases/DatabaseModal/SSHTunnelForm.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { EventHandler, ChangeEvent, useState } from 'react';\nimport { t, styled } from '@superset-ui/core';\nimport { AntdForm, Col, Row } from 'src/components';\nimport { Form, FormLabel } from 'src/components/Form';\nimport { Radio } from 'src/components/Radio';\nimport { Input, TextArea } from 'src/components/Input';\nimport { Input as AntdInput, Tooltip } from 'antd';\nimport { EyeInvisibleOutlined, EyeOutlined } from '@ant-design/icons';\nimport { DatabaseObject } from '../types';\nimport { AuthType } from '.';\n\nconst StyledDiv = styled.div`\n  padding-top: ${({ theme }) => theme.gridUnit * 2}px;\n  label {\n    color: ${({ theme }) => theme.colors.grayscale.base};\n    text-transform: uppercase;\n    margin-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n  }\n`;\n\nconst StyledRow = styled(Row)`\n  padding-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n`;\n\nconst StyledFormItem = styled(AntdForm.Item)`\n  margin-bottom: 0 !important;\n`;\n\nconst StyledInputPassword = styled(AntdInput.Password)`\n  margin: ${({ theme }) => `${theme.gridUnit}px 0 ${theme.gridUnit * 2}px`};\n`;\n\nconst SSHTunnelForm = ({\n  db,\n  onSSHTunnelParametersChange,\n  setSSHTunnelLoginMethod,\n}: {\n  db: DatabaseObject | null;\n  onSSHTunnelParametersChange: EventHandler<\n    ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  >;\n  setSSHTunnelLoginMethod: (method: AuthType) => void;\n}) => {\n  const [usePassword, setUsePassword] = useState<AuthType>(AuthType.password);\n\n  return (\n    <Form>\n      <StyledRow gutter={16}>\n        <Col xs={24} md={12}>\n          <StyledDiv>\n            <FormLabel htmlFor=\"server_address\" required>\n              {t('SSH Host')}\n            </FormLabel>\n            <Input\n              name=\"server_address\"\n              type=\"text\"\n              placeholder={t('e.g. 127.0.0.1')}\n              value={db?.ssh_tunnel?.server_address || ''}\n              onChange={onSSHTunnelParametersChange}\n              data-test=\"ssh-tunnel-server_address-input\"\n            />\n          </StyledDiv>\n        </Col>\n        <Col xs={24} md={12}>\n          <StyledDiv>\n            <FormLabel htmlFor=\"server_port\" required>\n              {t('SSH Port')}\n            </FormLabel>\n            <Input\n              name=\"server_port\"\n              type=\"text\"\n              placeholder={t('22')}\n              value={db?.ssh_tunnel?.server_port || ''}\n              onChange={onSSHTunnelParametersChange}\n              data-test=\"ssh-tunnel-server_port-input\"\n            />\n          </StyledDiv>\n        </Col>\n      </StyledRow>\n      <StyledRow gutter={16}>\n        <Col xs={24}>\n          <StyledDiv>\n            <FormLabel htmlFor=\"username\" required>\n              {t('Username')}\n            </FormLabel>\n            <Input\n              name=\"username\"\n              type=\"text\"\n              placeholder={t('e.g. Analytics')}\n              value={db?.ssh_tunnel?.username || ''}\n              onChange={onSSHTunnelParametersChange}\n              data-test=\"ssh-tunnel-username-input\"\n            />\n          </StyledDiv>\n        </Col>\n      </StyledRow>\n      <StyledRow gutter={16}>\n        <Col xs={24}>\n          <StyledDiv>\n            <FormLabel htmlFor=\"use_password\" required>\n              {t('Login with')}\n            </FormLabel>\n            <StyledFormItem name=\"use_password\" initialValue={usePassword}>\n              <Radio.Group\n                onChange={({ target: { value } }) => {\n                  setUsePassword(value);\n                  setSSHTunnelLoginMethod(value);\n                }}\n              >\n                <Radio\n                  value={AuthType.password}\n                  data-test=\"ssh-tunnel-use_password-radio\"\n                >\n                  {t('Password')}\n                </Radio>\n                <Radio\n                  value={AuthType.privateKey}\n                  data-test=\"ssh-tunnel-use_private_key-radio\"\n                >\n                  {t('Private Key & Password')}\n                </Radio>\n              </Radio.Group>\n            </StyledFormItem>\n          </StyledDiv>\n        </Col>\n      </StyledRow>\n      {usePassword === AuthType.password && (\n        <StyledRow gutter={16}>\n          <Col xs={24}>\n            <StyledDiv>\n              <FormLabel htmlFor=\"password\" required>\n                {t('SSH Password')}\n              </FormLabel>\n              <StyledInputPassword\n                name=\"password\"\n                placeholder={t('e.g. ********')}\n                value={db?.ssh_tunnel?.password || ''}\n                onChange={onSSHTunnelParametersChange}\n                data-test=\"ssh-tunnel-password-input\"\n                iconRender={visible =>\n                  visible ? (\n                    <Tooltip title=\"Hide password.\">\n                      <EyeInvisibleOutlined />\n                    </Tooltip>\n                  ) : (\n                    <Tooltip title=\"Show password.\">\n                      <EyeOutlined />\n                    </Tooltip>\n                  )\n                }\n                role=\"textbox\"\n              />\n            </StyledDiv>\n          </Col>\n        </StyledRow>\n      )}\n      {usePassword === AuthType.privateKey && (\n        <>\n          <StyledRow gutter={16}>\n            <Col xs={24}>\n              <StyledDiv>\n                <FormLabel htmlFor=\"private_key\" required>\n                  {t('Private Key')}\n                </FormLabel>\n                <TextArea\n                  name=\"private_key\"\n                  placeholder={t('Paste Private Key here')}\n                  value={db?.ssh_tunnel?.private_key || ''}\n                  onChange={onSSHTunnelParametersChange}\n                  data-test=\"ssh-tunnel-private_key-input\"\n                  rows={4}\n                />\n              </StyledDiv>\n            </Col>\n          </StyledRow>\n          <StyledRow gutter={16}>\n            <Col xs={24}>\n              <StyledDiv>\n                <FormLabel htmlFor=\"private_key_password\" required>\n                  {t('Private Key Password')}\n                </FormLabel>\n                <StyledInputPassword\n                  name=\"private_key_password\"\n                  placeholder={t('e.g. ********')}\n                  value={db?.ssh_tunnel?.private_key_password || ''}\n                  onChange={onSSHTunnelParametersChange}\n                  data-test=\"ssh-tunnel-private_key_password-input\"\n                  iconRender={visible =>\n                    visible ? (\n                      <Tooltip title=\"Hide password.\">\n                        <EyeInvisibleOutlined />\n                      </Tooltip>\n                    ) : (\n                      <Tooltip title=\"Show password.\">\n                        <EyeOutlined />\n                      </Tooltip>\n                    )\n                  }\n                  role=\"textbox\"\n                />\n              </StyledDiv>\n            </Col>\n          </StyledRow>\n        </>\n      )}\n    </Form>\n  );\n};\nexport default SSHTunnelForm;\n"]},"metadata":{},"sourceType":"module"}