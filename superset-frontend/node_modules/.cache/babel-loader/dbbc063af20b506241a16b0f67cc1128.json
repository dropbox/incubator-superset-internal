{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useState } from 'react';\nimport { styled, t } from '@superset-ui/core';\nimport Button from 'src/components/Button';\nimport Modal from 'src/components/Modal';\nimport { Upload } from 'src/components';\nimport { useImportResource } from 'src/views/CRUD/hooks';\nimport ErrorAlert from './ErrorAlert';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst HelperMessage = styled.div`\n  display: block;\n  color: ${(_ref) => {let { theme } = _ref;return theme.colors.grayscale.base;}};\n  font-size: ${(_ref2) => {let { theme } = _ref2;return theme.typography.sizes.s;}}px;\n`;\nconst StyledInputContainer = styled.div`\n  padding-bottom: ${(_ref3) => {let { theme } = _ref3;return theme.gridUnit * 2;}}px;\n  padding-top: ${(_ref4) => {let { theme } = _ref4;return theme.gridUnit * 2;}}px;\n\n  & > div {\n    margin: ${(_ref5) => {let { theme } = _ref5;return theme.gridUnit;}}px 0;\n  }\n\n  &.extra-container {\n    padding-top: 8px;\n  }\n\n  .confirm-overwrite {\n    margin-bottom: ${(_ref6) => {let { theme } = _ref6;return theme.gridUnit * 2;}}px;\n  }\n\n  .input-container {\n    display: flex;\n    align-items: center;\n\n    label {\n      display: flex;\n      margin-right: ${(_ref7) => {let { theme } = _ref7;return theme.gridUnit * 2;}}px;\n    }\n\n    i {\n      margin: 0 ${(_ref8) => {let { theme } = _ref8;return theme.gridUnit;}}px;\n    }\n  }\n\n  input,\n  textarea {\n    flex: 1 1 auto;\n  }\n\n  textarea {\n    height: 160px;\n    resize: none;\n  }\n\n  input::placeholder,\n  textarea::placeholder {\n    color: ${(_ref9) => {let { theme } = _ref9;return theme.colors.grayscale.light1;}};\n  }\n\n  textarea,\n  input[type='text'],\n  input[type='number'] {\n    padding: ${(_ref10) => {let { theme } = _ref10;return theme.gridUnit * 1.5;}}px\n      ${(_ref11) => {let { theme } = _ref11;return theme.gridUnit * 2;}}px;\n    border-style: none;\n    border: 1px solid ${(_ref12) => {let { theme } = _ref12;return theme.colors.grayscale.light2;}};\n    border-radius: ${(_ref13) => {let { theme } = _ref13;return theme.gridUnit;}}px;\n\n    &[name='name'] {\n      flex: 0 1 auto;\n      width: 40%;\n    }\n\n    &[name='sqlalchemy_uri'] {\n      margin-right: ${(_ref14) => {let { theme } = _ref14;return theme.gridUnit * 3;}}px;\n    }\n  }\n`;\nconst ImportModelsModal = (_ref15) => {let { resourceName, resourceLabel, passwordsNeededMessage, confirmOverwriteMessage, onModelImport, show, onHide, passwordFields = [], setPasswordFields = () => {}, sshTunnelPasswordFields = [], setSSHTunnelPasswordFields = () => {}, sshTunnelPrivateKeyFields = [], setSSHTunnelPrivateKeyFields = () => {}, sshTunnelPrivateKeyPasswordFields = [], setSSHTunnelPrivateKeyPasswordFields = () => {} } = _ref15;\n  const [isHidden, setIsHidden] = useState(true);\n  const [passwords, setPasswords] = useState({});\n  const [needsOverwriteConfirm, setNeedsOverwriteConfirm] = useState(false);\n  const [confirmedOverwrite, setConfirmedOverwrite] = useState(false);\n  const [fileList, setFileList] = useState([]);\n  const [importingModel, setImportingModel] = useState(false);\n  const [errorMessage, setErrorMessage] = useState();\n  const [sshTunnelPasswords, setSSHTunnelPasswords] = useState({});\n  const [sshTunnelPrivateKeys, setSSHTunnelPrivateKeys] = useState({});\n  const [sshTunnelPrivateKeyPasswords, setSSHTunnelPrivateKeyPasswords] = useState({});\n  const clearModal = () => {\n    setFileList([]);\n    setPasswordFields([]);\n    setPasswords({});\n    setNeedsOverwriteConfirm(false);\n    setConfirmedOverwrite(false);\n    setImportingModel(false);\n    setErrorMessage('');\n    setSSHTunnelPasswordFields([]);\n    setSSHTunnelPrivateKeyFields([]);\n    setSSHTunnelPrivateKeyPasswordFields([]);\n    setSSHTunnelPasswords({});\n    setSSHTunnelPrivateKeys({});\n    setSSHTunnelPrivateKeyPasswords({});\n  };\n  const handleErrorMsg = (msg) => {\n    setErrorMessage(msg);\n  };\n  const { state: { alreadyExists, passwordsNeeded, sshPasswordNeeded, sshPrivateKeyNeeded, sshPrivateKeyPasswordNeeded }, importResource } = useImportResource(resourceName, resourceLabel, handleErrorMsg);\n  useEffect(() => {\n    setPasswordFields(passwordsNeeded);\n    if (passwordsNeeded.length > 0) {\n      setImportingModel(false);\n    }\n  }, [passwordsNeeded, setPasswordFields]);\n  useEffect(() => {\n    setNeedsOverwriteConfirm(alreadyExists.length > 0);\n    if (alreadyExists.length > 0) {\n      setImportingModel(false);\n    }\n  }, [alreadyExists, setNeedsOverwriteConfirm]);\n  useEffect(() => {\n    setSSHTunnelPasswordFields(sshPasswordNeeded);\n    if (sshPasswordNeeded.length > 0) {\n      setImportingModel(false);\n    }\n  }, [sshPasswordNeeded, setSSHTunnelPasswordFields]);\n  useEffect(() => {\n    setSSHTunnelPrivateKeyFields(sshPrivateKeyNeeded);\n    if (sshPrivateKeyNeeded.length > 0) {\n      setImportingModel(false);\n    }\n  }, [sshPrivateKeyNeeded, setSSHTunnelPrivateKeyFields]);\n  useEffect(() => {\n    setSSHTunnelPrivateKeyPasswordFields(sshPrivateKeyPasswordNeeded);\n    if (sshPrivateKeyPasswordNeeded.length > 0) {\n      setImportingModel(false);\n    }\n  }, [sshPrivateKeyPasswordNeeded, setSSHTunnelPrivateKeyPasswordFields]);\n  // Functions\n  const hide = () => {\n    setIsHidden(true);\n    onHide();\n    clearModal();\n  };\n  const onUpload = () => {var _fileList$;\n    if (!(((_fileList$ = fileList[0]) == null ? void 0 : _fileList$.originFileObj) instanceof File)) {\n      return;\n    }\n    setImportingModel(true);\n    importResource(fileList[0].originFileObj, passwords, sshTunnelPasswords, sshTunnelPrivateKeys, sshTunnelPrivateKeyPasswords, confirmedOverwrite).then((result) => {\n      if (result) {\n        clearModal();\n        onModelImport();\n      }\n    });\n  };\n  const changeFile = (info) => {\n    setFileList([\n    {\n      ...info.file,\n      status: 'done' }]);\n\n\n  };\n  const removeFile = (removedFile) => {\n    setFileList(fileList.filter((file) => file.uid !== removedFile.uid));\n    return false;\n  };\n  const confirmOverwrite = (event) => {var _event$currentTarget$, _event$currentTarget;\n    const targetValue = (_event$currentTarget$ = (_event$currentTarget = event.currentTarget) == null ? void 0 : _event$currentTarget.value) != null ? _event$currentTarget$ : '';\n    setConfirmedOverwrite(targetValue.toUpperCase() === t('OVERWRITE'));\n  };\n  const renderPasswordFields = () => {\n    if (passwordFields.length === 0 &&\n    sshTunnelPasswordFields.length === 0 &&\n    sshTunnelPrivateKeyFields.length === 0 &&\n    sshTunnelPrivateKeyPasswordFields.length === 0) {\n      return null;\n    }\n    const files = [\n    ...new Set([\n    ...passwordFields,\n    ...sshTunnelPasswordFields,\n    ...sshTunnelPrivateKeyFields,\n    ...sshTunnelPrivateKeyPasswordFields])];\n\n\n    return ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(\"h5\", null, t('Database passwords')),\n    ___EmotionJSX(HelperMessage, null, passwordsNeededMessage),\n    files.map((fileName) => ___EmotionJSX(React.Fragment, null,\n    (passwordFields == null ? void 0 : passwordFields.indexOf(fileName)) >= 0 && ___EmotionJSX(StyledInputContainer, { key: `password-for-${fileName}` },\n    ___EmotionJSX(\"div\", { className: \"control-label\" },\n    t('%s PASSWORD', fileName.slice(10)),\n    ___EmotionJSX(\"span\", { className: \"required\" }, \"*\")),\n\n    ___EmotionJSX(\"input\", { name: `password-${fileName}`, autoComplete: `password-${fileName}`, type: \"password\", value: passwords[fileName], onChange: (event) => setPasswords({\n        ...passwords,\n        [fileName]: event.target.value }) })),\n\n\n    (sshTunnelPasswordFields == null ? void 0 : sshTunnelPasswordFields.indexOf(fileName)) >= 0 && ___EmotionJSX(StyledInputContainer, { key: `ssh_tunnel_password-for-${fileName}` },\n    ___EmotionJSX(\"div\", { className: \"control-label\" },\n    t('%s SSH TUNNEL PASSWORD', fileName.slice(10)),\n    ___EmotionJSX(\"span\", { className: \"required\" }, \"*\")),\n\n    ___EmotionJSX(\"input\", { name: `ssh_tunnel_password-${fileName}`, autoComplete: `ssh_tunnel_password-${fileName}`, type: \"password\", value: sshTunnelPasswords[fileName], onChange: (event) => setSSHTunnelPasswords({\n        ...sshTunnelPasswords,\n        [fileName]: event.target.value }),\n      \"data-test\": \"ssh_tunnel_password\" })),\n\n    (sshTunnelPrivateKeyFields == null ? void 0 : sshTunnelPrivateKeyFields.indexOf(fileName)) >= 0 && ___EmotionJSX(StyledInputContainer, { key: `ssh_tunnel_private_key-for-${fileName}` },\n    ___EmotionJSX(\"div\", { className: \"control-label\" },\n    t('%s SSH TUNNEL PRIVATE KEY', fileName.slice(10)),\n    ___EmotionJSX(\"span\", { className: \"required\" }, \"*\")),\n\n    ___EmotionJSX(\"textarea\", { name: `ssh_tunnel_private_key-${fileName}`, autoComplete: `ssh_tunnel_private_key-${fileName}`, value: sshTunnelPrivateKeys[fileName], onChange: (event) => setSSHTunnelPrivateKeys({\n        ...sshTunnelPrivateKeys,\n        [fileName]: event.target.value }),\n      \"data-test\": \"ssh_tunnel_private_key\" })),\n\n    (sshTunnelPrivateKeyPasswordFields == null ? void 0 : sshTunnelPrivateKeyPasswordFields.indexOf(fileName)) >= 0 && ___EmotionJSX(StyledInputContainer, { key: `ssh_tunnel_private_key_password-for-${fileName}` },\n    ___EmotionJSX(\"div\", { className: \"control-label\" },\n    t('%s SSH TUNNEL PRIVATE KEY PASSWORD', fileName.slice(10)),\n    ___EmotionJSX(\"span\", { className: \"required\" }, \"*\")),\n\n    ___EmotionJSX(\"input\", { name: `ssh_tunnel_private_key_password-${fileName}`, autoComplete: `ssh_tunnel_private_key_password-${fileName}`, type: \"password\", value: sshTunnelPrivateKeyPasswords[fileName], onChange: (event) => setSSHTunnelPrivateKeyPasswords({\n        ...sshTunnelPrivateKeyPasswords,\n        [fileName]: event.target.value }),\n      \"data-test\": \"ssh_tunnel_private_key_password\" })))));\n\n\n\n  };\n  const renderOverwriteConfirmation = () => {\n    if (!needsOverwriteConfirm) {\n      return null;\n    }\n    return ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(StyledInputContainer, null,\n    ___EmotionJSX(\"div\", { className: \"confirm-overwrite\" }, confirmOverwriteMessage),\n    ___EmotionJSX(\"div\", { className: \"control-label\" },\n    t('Type \"%s\" to confirm', t('OVERWRITE'))),\n\n    ___EmotionJSX(\"input\", { \"data-test\": \"overwrite-modal-input\", id: \"overwrite\", type: \"text\", onChange: confirmOverwrite })));\n\n\n  };\n  // Show/hide\n  if (isHidden && show) {\n    setIsHidden(false);\n  }\n  return ___EmotionJSX(Modal, { name: \"model\", className: \"import-model-modal\", disablePrimaryButton: fileList.length === 0 ||\n    needsOverwriteConfirm && !confirmedOverwrite ||\n    importingModel, onHandledPrimaryAction: onUpload, onHide: hide, primaryButtonName: needsOverwriteConfirm ? t('Overwrite') : t('Import'), primaryButtonType: needsOverwriteConfirm ? 'danger' : 'primary', width: \"750px\", show: show, title: ___EmotionJSX(\"h4\", null, t('Import %s', resourceLabel)) },\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(Upload, { name: \"modelFile\", id: \"modelFile\", \"data-test\": \"model-file-input\", accept: \".yaml,.json,.yml,.zip\", fileList: fileList, onChange: changeFile, onRemove: removeFile\n    // upload is handled by hook\n    , customRequest: () => {}, disabled: importingModel },\n  ___EmotionJSX(Button, { loading: importingModel }, t('Select file')))),\n\n\n  errorMessage && ___EmotionJSX(ErrorAlert, { errorMessage: errorMessage, showDbInstallInstructions: passwordFields.length > 0 ||\n    sshTunnelPasswordFields.length > 0 ||\n    sshTunnelPrivateKeyFields.length > 0 ||\n    sshTunnelPrivateKeyPasswordFields.length > 0 }),\n  renderPasswordFields(),\n  renderOverwriteConfirmation());\n\n};__signature__(ImportModelsModal, \"useState{[isHidden, setIsHidden](true)}\\nuseState{[passwords, setPasswords]({})}\\nuseState{[needsOverwriteConfirm, setNeedsOverwriteConfirm](false)}\\nuseState{[confirmedOverwrite, setConfirmedOverwrite](false)}\\nuseState{[fileList, setFileList]([])}\\nuseState{[importingModel, setImportingModel](false)}\\nuseState{[errorMessage, setErrorMessage]}\\nuseState{[sshTunnelPasswords, setSSHTunnelPasswords]({})}\\nuseState{[sshTunnelPrivateKeys, setSSHTunnelPrivateKeys]({})}\\nuseState{[sshTunnelPrivateKeyPasswords, setSSHTunnelPrivateKeyPasswords]({})}\\nuseImportResource{{ state: { alreadyExists, passwordsNeeded, sshPasswordNeeded, sshPrivateKeyNeeded, sshPrivateKeyPasswordNeeded, }, importResource, }}\\nuseEffect{}\\nuseEffect{}\\nuseEffect{}\\nuseEffect{}\\nuseEffect{}\", () => [useImportResource]);const _default =\nImportModelsModal;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(HelperMessage, \"HelperMessage\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/ImportModal/index.tsx\");reactHotLoader.register(StyledInputContainer, \"StyledInputContainer\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/ImportModal/index.tsx\");reactHotLoader.register(ImportModelsModal, \"ImportModelsModal\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/ImportModal/index.tsx\");reactHotLoader.register(_default, \"default\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/ImportModal/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,KAAP,IAAmCC,SAAnC,EAA8CC,QAA9C,QAA8D,OAA9D;AAEA,SAASC,MAAT,EAAiBC,CAAjB,QAA0B,mBAA1B;AAEA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,OAAOC,KAAP,MAAkB,sBAAlB;AACA,SAASC,MAAT,QAAuB,gBAAvB;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AAEA,OAAOC,UAAP,MAAuB,cAAvB,C;AAEA,MAAMC,aAAa,GAAGP,MAAM,CAACQ,GAAG;;WAErB,eAAC,EAAEC,KAAF,EAAD,eAAeA,KAAK,CAACC,MAAN,CAAaC,SAAb,CAAuBC,IAAtC,EAA0C;eACtC,gBAAC,EAAEH,KAAF,EAAD,gBAAeA,KAAK,CAACI,UAAN,CAAiBC,KAAjB,CAAuBC,CAAtC,EAAuC;CAHtD;AAMA,MAAMC,oBAAoB,GAAGhB,MAAM,CAACQ,GAAG;oBACnB,gBAAC,EAAEC,KAAF,EAAD,gBAAeA,KAAK,CAACQ,QAAN,GAAiB,CAAhC,EAAiC;iBACpC,gBAAC,EAAER,KAAF,EAAD,gBAAeA,KAAK,CAACQ,QAAN,GAAiB,CAAhC,EAAiC;;;cAGpC,gBAAC,EAAER,KAAF,EAAD,gBAAeA,KAAK,CAACQ,QAArB,EAA6B;;;;;;;;qBAQtB,gBAAC,EAAER,KAAF,EAAD,gBAAeA,KAAK,CAACQ,QAAN,GAAiB,CAAhC,EAAiC;;;;;;;;;sBAShC,gBAAC,EAAER,KAAF,EAAD,gBAAeA,KAAK,CAACQ,QAAN,GAAiB,CAAhC,EAAiC;;;;kBAIrC,gBAAC,EAAER,KAAF,EAAD,gBAAeA,KAAK,CAACQ,QAArB,EAA6B;;;;;;;;;;;;;;;;aAgBlC,gBAAC,EAAER,KAAF,EAAD,gBAAeA,KAAK,CAACC,MAAN,CAAaC,SAAb,CAAuBO,MAAtC,EAA4C;;;;;;eAM1C,iBAAC,EAAET,KAAF,EAAD,iBAAeA,KAAK,CAACQ,QAAN,GAAiB,GAAhC,EAAmC;QAC1C,iBAAC,EAAER,KAAF,EAAD,iBAAeA,KAAK,CAACQ,QAAN,GAAiB,CAAhC,EAAiC;;wBAEjB,iBAAC,EAAER,KAAF,EAAD,iBAAeA,KAAK,CAACC,MAAN,CAAaC,SAAb,CAAuBQ,MAAtC,EAA4C;qBAC/C,iBAAC,EAAEV,KAAF,EAAD,iBAAeA,KAAK,CAACQ,QAArB,EAA6B;;;;;;;;sBAQ5B,iBAAC,EAAER,KAAF,EAAD,iBAAeA,KAAK,CAACQ,QAAN,GAAiB,CAAhC,EAAiC;;;CA5DvD;AAuFA,MAAMG,iBAAiB,GAA8C,YAgBhE,KAhBiE,EACpEC,YADoE,EAEpEC,aAFoE,EAGpEC,sBAHoE,EAIpEC,uBAJoE,EAKpEC,aALoE,EAMpEC,IANoE,EAOpEC,MAPoE,EAQpEC,cAAc,GAAG,EARmD,EASpEC,iBAAiB,GAAG,MAAK,CAAG,CATwC,EAUpEC,uBAAuB,GAAG,EAV0C,EAWpEC,0BAA0B,GAAG,MAAK,CAAG,CAX+B,EAYpEC,yBAAyB,GAAG,EAZwC,EAapEC,4BAA4B,GAAG,MAAK,CAAG,CAb6B,EAcpEC,iCAAiC,GAAG,EAdgC,EAepEC,oCAAoC,GAAG,MAAK,CAAG,CAfqB,EAgBjE;EACH,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BtC,QAAQ,CAAU,IAAV,CAAxC;EACA,MAAM,CAACuC,SAAD,EAAYC,YAAZ,IAA4BxC,QAAQ,CAAyB,EAAzB,CAA1C;EACA,MAAM,CAACyC,qBAAD,EAAwBC,wBAAxB,IACJ1C,QAAQ,CAAU,KAAV,CADV;EAEA,MAAM,CAAC2C,kBAAD,EAAqBC,qBAArB,IAA8C5C,QAAQ,CAAU,KAAV,CAA5D;EACA,MAAM,CAAC6C,QAAD,EAAWC,WAAX,IAA0B9C,QAAQ,CAAe,EAAf,CAAxC;EACA,MAAM,CAAC+C,cAAD,EAAiBC,iBAAjB,IAAsChD,QAAQ,CAAU,KAAV,CAApD;EACA,MAAM,CAACiD,YAAD,EAAeC,eAAf,IAAkClD,QAAQ,EAAhD;EACA,MAAM,CAACmD,kBAAD,EAAqBC,qBAArB,IAA8CpD,QAAQ,CAE1D,EAF0D,CAA5D;EAGA,MAAM,CAACqD,oBAAD,EAAuBC,uBAAvB,IAAkDtD,QAAQ,CAE9D,EAF8D,CAAhE;EAGA,MAAM,CAACuD,4BAAD,EAA+BC,+BAA/B,IACJxD,QAAQ,CAAyB,EAAzB,CADV;EAGA,MAAMyD,UAAU,GAAG,MAAK;IACtBX,WAAW,CAAC,EAAD,CAAX;IACAhB,iBAAiB,CAAC,EAAD,CAAjB;IACAU,YAAY,CAAC,EAAD,CAAZ;IACAE,wBAAwB,CAAC,KAAD,CAAxB;IACAE,qBAAqB,CAAC,KAAD,CAArB;IACAI,iBAAiB,CAAC,KAAD,CAAjB;IACAE,eAAe,CAAC,EAAD,CAAf;IACAlB,0BAA0B,CAAC,EAAD,CAA1B;IACAE,4BAA4B,CAAC,EAAD,CAA5B;IACAE,oCAAoC,CAAC,EAAD,CAApC;IACAgB,qBAAqB,CAAC,EAAD,CAArB;IACAE,uBAAuB,CAAC,EAAD,CAAvB;IACAE,+BAA+B,CAAC,EAAD,CAA/B;EACD,CAdD;EAgBA,MAAME,cAAc,GAAG,CAACC,GAAD,KAAgB;IACrCT,eAAe,CAACS,GAAD,CAAf;EACD,CAFD;EAIA,MAAM,EACJC,KAAK,EAAE,EACLC,aADK,EAELC,eAFK,EAGLC,iBAHK,EAILC,mBAJK,EAKLC,2BALK,EADH,EAQJC,cARI,KASF5D,iBAAiB,CAACgB,YAAD,EAAeC,aAAf,EAA8BmC,cAA9B,CATrB;EAWA3D,SAAS,CAAC,MAAK;IACb+B,iBAAiB,CAACgC,eAAD,CAAjB;IACA,IAAIA,eAAe,CAACK,MAAhB,GAAyB,CAA7B,EAAgC;MAC9BnB,iBAAiB,CAAC,KAAD,CAAjB;IACD;EACF,CALQ,EAKN,CAACc,eAAD,EAAkBhC,iBAAlB,CALM,CAAT;EAOA/B,SAAS,CAAC,MAAK;IACb2C,wBAAwB,CAACmB,aAAa,CAACM,MAAd,GAAuB,CAAxB,CAAxB;IACA,IAAIN,aAAa,CAACM,MAAd,GAAuB,CAA3B,EAA8B;MAC5BnB,iBAAiB,CAAC,KAAD,CAAjB;IACD;EACF,CALQ,EAKN,CAACa,aAAD,EAAgBnB,wBAAhB,CALM,CAAT;EAOA3C,SAAS,CAAC,MAAK;IACbiC,0BAA0B,CAAC+B,iBAAD,CAA1B;IACA,IAAIA,iBAAiB,CAACI,MAAlB,GAA2B,CAA/B,EAAkC;MAChCnB,iBAAiB,CAAC,KAAD,CAAjB;IACD;EACF,CALQ,EAKN,CAACe,iBAAD,EAAoB/B,0BAApB,CALM,CAAT;EAOAjC,SAAS,CAAC,MAAK;IACbmC,4BAA4B,CAAC8B,mBAAD,CAA5B;IACA,IAAIA,mBAAmB,CAACG,MAApB,GAA6B,CAAjC,EAAoC;MAClCnB,iBAAiB,CAAC,KAAD,CAAjB;IACD;EACF,CALQ,EAKN,CAACgB,mBAAD,EAAsB9B,4BAAtB,CALM,CAAT;EAOAnC,SAAS,CAAC,MAAK;IACbqC,oCAAoC,CAAC6B,2BAAD,CAApC;IACA,IAAIA,2BAA2B,CAACE,MAA5B,GAAqC,CAAzC,EAA4C;MAC1CnB,iBAAiB,CAAC,KAAD,CAAjB;IACD;EACF,CALQ,EAKN,CAACiB,2BAAD,EAA8B7B,oCAA9B,CALM,CAAT;EAOA;EACA,MAAMgC,IAAI,GAAG,MAAK;IAChB9B,WAAW,CAAC,IAAD,CAAX;IACAV,MAAM;IACN6B,UAAU;EACX,CAJD;EAMA,MAAMY,QAAQ,GAAG,MAAK;IACpB,IAAI,EAAE,uBAAQ,CAAC,CAAD,CAAR,gCAAaC,aAAb,aAAsCC,IAAxC,CAAJ,EAAmD;MACjD;IACD;IAEDvB,iBAAiB,CAAC,IAAD,CAAjB;IACAkB,cAAc,CACZrB,QAAQ,CAAC,CAAD,CAAR,CAAYyB,aADA,EAEZ/B,SAFY,EAGZY,kBAHY,EAIZE,oBAJY,EAKZE,4BALY,EAMZZ,kBANY,CAAd,CAOE6B,IAPF,CAOO,OAAM,KAAG;MACd,IAAIC,MAAJ,EAAY;QACVhB,UAAU;QACV/B,aAAa;MACd;IACF,CAZD;EAaD,CAnBD;EAqBA,MAAMgD,UAAU,GAAG,CAACC,IAAD,KAA4B;IAC7C7B,WAAW,CAAC;IACV;MACE,GAAG6B,IAAI,CAACC,IADV;MAEEC,MAAM,EAAE,MAFV,EADU,CAAD,CAAX;;;EAMD,CAPD;EASA,MAAMC,UAAU,GAAG,CAACC,WAAD,KAA4B;IAC7CjC,WAAW,CAACD,QAAQ,CAACmC,MAAT,CAAgB,KAAI,KAAIJ,IAAI,CAACK,GAAL,KAAaF,WAAW,CAACE,GAAjD,CAAD,CAAX;IACA,OAAO,KAAP;EACD,CAHD;EAKA,MAAMC,gBAAgB,GAAG,CAACC,KAAD,KAA+C;IACtE,MAAMC,WAAW,oDAAID,KAAK,CAACE,aAAV,qBAAI,qBAAqBC,KAAzB,oCAA6C,EAA9D;IACA1C,qBAAqB,CAACwC,WAAW,CAACG,WAAZ,OAA8BrF,CAAC,CAAC,WAAD,CAAhC,CAArB;EACD,CAHD;EAKA,MAAMsF,oBAAoB,GAAG,MAAK;IAChC,IACE3D,cAAc,CAACsC,MAAf,KAA0B,CAA1B;IACApC,uBAAuB,CAACoC,MAAxB,KAAmC,CADnC;IAEAlC,yBAAyB,CAACkC,MAA1B,KAAqC,CAFrC;IAGAhC,iCAAiC,CAACgC,MAAlC,KAA6C,CAJ/C,EAKE;MACA,OAAO,IAAP;IACD;IAED,MAAMsB,KAAK,GAAG;IACZ,GAAG,IAAIC,GAAJ,CAAQ;IACT,GAAG7D,cADM;IAET,GAAGE,uBAFM;IAGT,GAAGE,yBAHM;IAIT,GAAGE,iCAJM,CAAR,CADS,CAAd;;;IASA,OACE;IACE,0BAAKjC,CAAC,CAAC,oBAAD,CAAN,CADF;IAEE,cAAC,aAAD,QAAgBsB,sBAAhB,CAFF;IAGGiE,KAAK,CAACE,GAAN,CAAU,SAAQ,KACjB;IACG,eAAc,QAAd,0BAAc,CAAEC,OAAhB,CAAwBC,QAAxB,MAAqC,CAArC,IACC,cAAC,oBAAD,IAAsB,GAAG,EAAE,gBAAgBA,QAAQ,EAAnD;IACE,uBAAK,SAAS,EAAC,eAAf;IACG3F,CAAC,CAAC,aAAD,EAAgB2F,QAAQ,CAACC,KAAT,CAAe,EAAf,CAAhB,CADJ;IAEE,wBAAM,SAAS,EAAC,UAAhB,QAFF,CADF;;IAKE,yBACE,IAAI,EAAE,YAAYD,QAAQ,EAD5B,EAEE,YAAY,EAAE,YAAYA,QAAQ,EAFpC,EAGE,IAAI,EAAC,UAHP,EAIE,KAAK,EAAEtD,SAAS,CAACsD,QAAD,CAJlB,EAKE,QAAQ,EAAE,MAAK,KACbrD,YAAY,CAAC;QACX,GAAGD,SADQ;QAEX,CAACsD,QAAD,GAAYV,KAAK,CAACY,MAAN,CAAaT,KAFd,EAAD,CANhB,GALF,CAFJ;;;IAqBG,wBAAuB,QAAvB,mCAAuB,CAAEM,OAAzB,CAAiCC,QAAjC,MAA8C,CAA9C,IACC,cAAC,oBAAD,IAAsB,GAAG,EAAE,2BAA2BA,QAAQ,EAA9D;IACE,uBAAK,SAAS,EAAC,eAAf;IACG3F,CAAC,CAAC,wBAAD,EAA2B2F,QAAQ,CAACC,KAAT,CAAe,EAAf,CAA3B,CADJ;IAEE,wBAAM,SAAS,EAAC,UAAhB,QAFF,CADF;;IAKE,yBACE,IAAI,EAAE,uBAAuBD,QAAQ,EADvC,EAEE,YAAY,EAAE,uBAAuBA,QAAQ,EAF/C,EAGE,IAAI,EAAC,UAHP,EAIE,KAAK,EAAE1C,kBAAkB,CAAC0C,QAAD,CAJ3B,EAKE,QAAQ,EAAE,MAAK,KACbzC,qBAAqB,CAAC;QACpB,GAAGD,kBADiB;QAEpB,CAAC0C,QAAD,GAAYV,KAAK,CAACY,MAAN,CAAaT,KAFL,EAAD,CANzB;MAWE,aAAU,qBAXZ,GALF,CAtBJ;;IA0CG,0BAAyB,QAAzB,qCAAyB,CAAEM,OAA3B,CAAmCC,QAAnC,MAAgD,CAAhD,IACC,cAAC,oBAAD,IACE,GAAG,EAAE,8BAA8BA,QAAQ,EAD7C;IAGE,uBAAK,SAAS,EAAC,eAAf;IACG3F,CAAC,CAAC,2BAAD,EAA8B2F,QAAQ,CAACC,KAAT,CAAe,EAAf,CAA9B,CADJ;IAEE,wBAAM,SAAS,EAAC,UAAhB,QAFF,CAHF;;IAOE,4BACE,IAAI,EAAE,0BAA0BD,QAAQ,EAD1C,EAEE,YAAY,EAAE,0BAA0BA,QAAQ,EAFlD,EAGE,KAAK,EAAExC,oBAAoB,CAACwC,QAAD,CAH7B,EAIE,QAAQ,EAAE,MAAK,KACbvC,uBAAuB,CAAC;QACtB,GAAGD,oBADmB;QAEtB,CAACwC,QAAD,GAAYV,KAAK,CAACY,MAAN,CAAaT,KAFH,EAAD,CAL3B;MAUE,aAAU,wBAVZ,GAPF,CA3CJ;;IAgEG,kCAAiC,QAAjC,6CAAiC,CAAEM,OAAnC,CAA2CC,QAA3C,MAAwD,CAAxD,IACC,cAAC,oBAAD,IACE,GAAG,EAAE,uCAAuCA,QAAQ,EADtD;IAGE,uBAAK,SAAS,EAAC,eAAf;IACG3F,CAAC,CAAC,oCAAD,EAAuC2F,QAAQ,CAACC,KAAT,CAAe,EAAf,CAAvC,CADJ;IAEE,wBAAM,SAAS,EAAC,UAAhB,QAFF,CAHF;;IAOE,yBACE,IAAI,EAAE,mCAAmCD,QAAQ,EADnD,EAEE,YAAY,EAAE,mCAAmCA,QAAQ,EAF3D,EAGE,IAAI,EAAC,UAHP,EAIE,KAAK,EAAEtC,4BAA4B,CAACsC,QAAD,CAJrC,EAKE,QAAQ,EAAE,MAAK,KACbrC,+BAA+B,CAAC;QAC9B,GAAGD,4BAD2B;QAE9B,CAACsC,QAAD,GAAYV,KAAK,CAACY,MAAN,CAAaT,KAFK,EAAD,CANnC;MAWE,aAAU,iCAXZ,GAPF,CAjEJ,CADD,CAHH,CADF;;;;EAgGD,CAnHD;EAqHA,MAAMU,2BAA2B,GAAG,MAAK;IACvC,IAAI,CAACvD,qBAAL,EAA4B;MAC1B,OAAO,IAAP;IACD;IAED,OACE;IACE,cAAC,oBAAD;IACE,uBAAK,SAAS,EAAC,mBAAf,IAAoChB,uBAApC,CADF;IAEE,uBAAK,SAAS,EAAC,eAAf;IACGvB,CAAC,CAAC,sBAAD,EAAyBA,CAAC,CAAC,WAAD,CAA1B,CADJ,CAFF;;IAKE,yBACE,aAAU,uBADZ,EAEE,EAAE,EAAC,WAFL,EAGE,IAAI,EAAC,MAHP,EAIE,QAAQ,EAAEgF,gBAJZ,GALF,CADF,CADF;;;EAgBD,CArBD;EAuBA;EACA,IAAI7C,QAAQ,IAAIV,IAAhB,EAAsB;IACpBW,WAAW,CAAC,KAAD,CAAX;EACD;EAED,OACE,cAAC,KAAD,IACE,IAAI,EAAC,OADP,EAEE,SAAS,EAAC,oBAFZ,EAGE,oBAAoB,EAClBO,QAAQ,CAACsB,MAAT,KAAoB,CAApB;IACC1B,qBAAqB,IAAI,CAACE,kBAD3B;IAEAI,cANJ,EAQE,sBAAsB,EAAEsB,QAR1B,EASE,MAAM,EAAED,IATV,EAUE,iBAAiB,EAAE3B,qBAAqB,GAAGvC,CAAC,CAAC,WAAD,CAAJ,GAAoBA,CAAC,CAAC,QAAD,CAV/D,EAWE,iBAAiB,EAAEuC,qBAAqB,GAAG,QAAH,GAAc,SAXxD,EAYE,KAAK,EAAC,OAZR,EAaE,IAAI,EAAEd,IAbR,EAcE,KAAK,EAAE,0BAAKzB,CAAC,CAAC,WAAD,EAAcqB,aAAd,CAAN,CAdT;EAgBE,cAAC,oBAAD;EACE,cAAC,MAAD,IACE,IAAI,EAAC,WADP,EAEE,EAAE,EAAC,WAFL,EAGE,aAAU,kBAHZ,EAIE,MAAM,EAAC,uBAJT,EAKE,QAAQ,EAAEsB,QALZ,EAME,QAAQ,EAAE6B,UANZ,EAOE,QAAQ,EAAEI;IACV;IARF,EASE,aAAa,EAAE,MAAK,CAAG,CATzB,EAUE,QAAQ,EAAE/B,cAVZ;EAYE,cAAC,MAAD,IAAQ,OAAO,EAAEA,cAAjB,IAAkC7C,CAAC,CAAC,aAAD,CAAnC,CAZF,CADF,CAhBF;;;EAgCG+C,YAAY,IACX,cAAC,UAAD,IACE,YAAY,EAAEA,YADhB,EAEE,yBAAyB,EACvBpB,cAAc,CAACsC,MAAf,GAAwB,CAAxB;IACApC,uBAAuB,CAACoC,MAAxB,GAAiC,CADjC;IAEAlC,yBAAyB,CAACkC,MAA1B,GAAmC,CAFnC;IAGAhC,iCAAiC,CAACgC,MAAlC,GAA2C,CAN/C,GAjCJ;EA2CGqB,oBAAoB,EA3CvB;EA4CGQ,2BAA2B,EA5C9B,CADF;;AAgDD,CApVD,C,cAAM3E,iB,0wBA+DAf,iB;AAuRSe,iB,CAAf,wB,iLAnbMb,a,oJAMAS,oB,2JAuFAI,iB","names":["React","useEffect","useState","styled","t","Button","Modal","Upload","useImportResource","ErrorAlert","HelperMessage","div","theme","colors","grayscale","base","typography","sizes","s","StyledInputContainer","gridUnit","light1","light2","ImportModelsModal","resourceName","resourceLabel","passwordsNeededMessage","confirmOverwriteMessage","onModelImport","show","onHide","passwordFields","setPasswordFields","sshTunnelPasswordFields","setSSHTunnelPasswordFields","sshTunnelPrivateKeyFields","setSSHTunnelPrivateKeyFields","sshTunnelPrivateKeyPasswordFields","setSSHTunnelPrivateKeyPasswordFields","isHidden","setIsHidden","passwords","setPasswords","needsOverwriteConfirm","setNeedsOverwriteConfirm","confirmedOverwrite","setConfirmedOverwrite","fileList","setFileList","importingModel","setImportingModel","errorMessage","setErrorMessage","sshTunnelPasswords","setSSHTunnelPasswords","sshTunnelPrivateKeys","setSSHTunnelPrivateKeys","sshTunnelPrivateKeyPasswords","setSSHTunnelPrivateKeyPasswords","clearModal","handleErrorMsg","msg","state","alreadyExists","passwordsNeeded","sshPasswordNeeded","sshPrivateKeyNeeded","sshPrivateKeyPasswordNeeded","importResource","length","hide","onUpload","originFileObj","File","then","result","changeFile","info","file","status","removeFile","removedFile","filter","uid","confirmOverwrite","event","targetValue","currentTarget","value","toUpperCase","renderPasswordFields","files","Set","map","indexOf","fileName","slice","target","renderOverwriteConfirmation"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/ImportModal/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { FunctionComponent, useEffect, useState } from 'react';\nimport { UploadChangeParam, UploadFile } from 'antd/lib/upload/interface';\nimport { styled, t } from '@superset-ui/core';\n\nimport Button from 'src/components/Button';\nimport Modal from 'src/components/Modal';\nimport { Upload } from 'src/components';\nimport { useImportResource } from 'src/views/CRUD/hooks';\nimport { ImportResourceName } from 'src/views/CRUD/types';\nimport ErrorAlert from './ErrorAlert';\n\nconst HelperMessage = styled.div`\n  display: block;\n  color: ${({ theme }) => theme.colors.grayscale.base};\n  font-size: ${({ theme }) => theme.typography.sizes.s}px;\n`;\n\nconst StyledInputContainer = styled.div`\n  padding-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n  padding-top: ${({ theme }) => theme.gridUnit * 2}px;\n\n  & > div {\n    margin: ${({ theme }) => theme.gridUnit}px 0;\n  }\n\n  &.extra-container {\n    padding-top: 8px;\n  }\n\n  .confirm-overwrite {\n    margin-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n  }\n\n  .input-container {\n    display: flex;\n    align-items: center;\n\n    label {\n      display: flex;\n      margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n    }\n\n    i {\n      margin: 0 ${({ theme }) => theme.gridUnit}px;\n    }\n  }\n\n  input,\n  textarea {\n    flex: 1 1 auto;\n  }\n\n  textarea {\n    height: 160px;\n    resize: none;\n  }\n\n  input::placeholder,\n  textarea::placeholder {\n    color: ${({ theme }) => theme.colors.grayscale.light1};\n  }\n\n  textarea,\n  input[type='text'],\n  input[type='number'] {\n    padding: ${({ theme }) => theme.gridUnit * 1.5}px\n      ${({ theme }) => theme.gridUnit * 2}px;\n    border-style: none;\n    border: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n    border-radius: ${({ theme }) => theme.gridUnit}px;\n\n    &[name='name'] {\n      flex: 0 1 auto;\n      width: 40%;\n    }\n\n    &[name='sqlalchemy_uri'] {\n      margin-right: ${({ theme }) => theme.gridUnit * 3}px;\n    }\n  }\n`;\n\nexport interface ImportModelsModalProps {\n  resourceName: ImportResourceName;\n  resourceLabel: string;\n  passwordsNeededMessage: string;\n  confirmOverwriteMessage: string;\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n  onModelImport: () => void;\n  show: boolean;\n  onHide: () => void;\n  passwordFields?: string[];\n  setPasswordFields?: (passwordFields: string[]) => void;\n  sshTunnelPasswordFields?: string[];\n  setSSHTunnelPasswordFields?: (sshTunnelPasswordFields: string[]) => void;\n  sshTunnelPrivateKeyFields?: string[];\n  setSSHTunnelPrivateKeyFields?: (sshTunnelPrivateKeyFields: string[]) => void;\n  sshTunnelPrivateKeyPasswordFields?: string[];\n  setSSHTunnelPrivateKeyPasswordFields?: (\n    sshTunnelPrivateKeyPasswordFields: string[],\n  ) => void;\n}\n\nconst ImportModelsModal: FunctionComponent<ImportModelsModalProps> = ({\n  resourceName,\n  resourceLabel,\n  passwordsNeededMessage,\n  confirmOverwriteMessage,\n  onModelImport,\n  show,\n  onHide,\n  passwordFields = [],\n  setPasswordFields = () => {},\n  sshTunnelPasswordFields = [],\n  setSSHTunnelPasswordFields = () => {},\n  sshTunnelPrivateKeyFields = [],\n  setSSHTunnelPrivateKeyFields = () => {},\n  sshTunnelPrivateKeyPasswordFields = [],\n  setSSHTunnelPrivateKeyPasswordFields = () => {},\n}) => {\n  const [isHidden, setIsHidden] = useState<boolean>(true);\n  const [passwords, setPasswords] = useState<Record<string, string>>({});\n  const [needsOverwriteConfirm, setNeedsOverwriteConfirm] =\n    useState<boolean>(false);\n  const [confirmedOverwrite, setConfirmedOverwrite] = useState<boolean>(false);\n  const [fileList, setFileList] = useState<UploadFile[]>([]);\n  const [importingModel, setImportingModel] = useState<boolean>(false);\n  const [errorMessage, setErrorMessage] = useState<string>();\n  const [sshTunnelPasswords, setSSHTunnelPasswords] = useState<\n    Record<string, string>\n  >({});\n  const [sshTunnelPrivateKeys, setSSHTunnelPrivateKeys] = useState<\n    Record<string, string>\n  >({});\n  const [sshTunnelPrivateKeyPasswords, setSSHTunnelPrivateKeyPasswords] =\n    useState<Record<string, string>>({});\n\n  const clearModal = () => {\n    setFileList([]);\n    setPasswordFields([]);\n    setPasswords({});\n    setNeedsOverwriteConfirm(false);\n    setConfirmedOverwrite(false);\n    setImportingModel(false);\n    setErrorMessage('');\n    setSSHTunnelPasswordFields([]);\n    setSSHTunnelPrivateKeyFields([]);\n    setSSHTunnelPrivateKeyPasswordFields([]);\n    setSSHTunnelPasswords({});\n    setSSHTunnelPrivateKeys({});\n    setSSHTunnelPrivateKeyPasswords({});\n  };\n\n  const handleErrorMsg = (msg: string) => {\n    setErrorMessage(msg);\n  };\n\n  const {\n    state: {\n      alreadyExists,\n      passwordsNeeded,\n      sshPasswordNeeded,\n      sshPrivateKeyNeeded,\n      sshPrivateKeyPasswordNeeded,\n    },\n    importResource,\n  } = useImportResource(resourceName, resourceLabel, handleErrorMsg);\n\n  useEffect(() => {\n    setPasswordFields(passwordsNeeded);\n    if (passwordsNeeded.length > 0) {\n      setImportingModel(false);\n    }\n  }, [passwordsNeeded, setPasswordFields]);\n\n  useEffect(() => {\n    setNeedsOverwriteConfirm(alreadyExists.length > 0);\n    if (alreadyExists.length > 0) {\n      setImportingModel(false);\n    }\n  }, [alreadyExists, setNeedsOverwriteConfirm]);\n\n  useEffect(() => {\n    setSSHTunnelPasswordFields(sshPasswordNeeded);\n    if (sshPasswordNeeded.length > 0) {\n      setImportingModel(false);\n    }\n  }, [sshPasswordNeeded, setSSHTunnelPasswordFields]);\n\n  useEffect(() => {\n    setSSHTunnelPrivateKeyFields(sshPrivateKeyNeeded);\n    if (sshPrivateKeyNeeded.length > 0) {\n      setImportingModel(false);\n    }\n  }, [sshPrivateKeyNeeded, setSSHTunnelPrivateKeyFields]);\n\n  useEffect(() => {\n    setSSHTunnelPrivateKeyPasswordFields(sshPrivateKeyPasswordNeeded);\n    if (sshPrivateKeyPasswordNeeded.length > 0) {\n      setImportingModel(false);\n    }\n  }, [sshPrivateKeyPasswordNeeded, setSSHTunnelPrivateKeyPasswordFields]);\n\n  // Functions\n  const hide = () => {\n    setIsHidden(true);\n    onHide();\n    clearModal();\n  };\n\n  const onUpload = () => {\n    if (!(fileList[0]?.originFileObj instanceof File)) {\n      return;\n    }\n\n    setImportingModel(true);\n    importResource(\n      fileList[0].originFileObj,\n      passwords,\n      sshTunnelPasswords,\n      sshTunnelPrivateKeys,\n      sshTunnelPrivateKeyPasswords,\n      confirmedOverwrite,\n    ).then(result => {\n      if (result) {\n        clearModal();\n        onModelImport();\n      }\n    });\n  };\n\n  const changeFile = (info: UploadChangeParam) => {\n    setFileList([\n      {\n        ...info.file,\n        status: 'done',\n      },\n    ]);\n  };\n\n  const removeFile = (removedFile: UploadFile) => {\n    setFileList(fileList.filter(file => file.uid !== removedFile.uid));\n    return false;\n  };\n\n  const confirmOverwrite = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const targetValue = (event.currentTarget?.value as string) ?? '';\n    setConfirmedOverwrite(targetValue.toUpperCase() === t('OVERWRITE'));\n  };\n\n  const renderPasswordFields = () => {\n    if (\n      passwordFields.length === 0 &&\n      sshTunnelPasswordFields.length === 0 &&\n      sshTunnelPrivateKeyFields.length === 0 &&\n      sshTunnelPrivateKeyPasswordFields.length === 0\n    ) {\n      return null;\n    }\n\n    const files = [\n      ...new Set([\n        ...passwordFields,\n        ...sshTunnelPasswordFields,\n        ...sshTunnelPrivateKeyFields,\n        ...sshTunnelPrivateKeyPasswordFields,\n      ]),\n    ];\n\n    return (\n      <>\n        <h5>{t('Database passwords')}</h5>\n        <HelperMessage>{passwordsNeededMessage}</HelperMessage>\n        {files.map(fileName => (\n          <>\n            {passwordFields?.indexOf(fileName) >= 0 && (\n              <StyledInputContainer key={`password-for-${fileName}`}>\n                <div className=\"control-label\">\n                  {t('%s PASSWORD', fileName.slice(10))}\n                  <span className=\"required\">*</span>\n                </div>\n                <input\n                  name={`password-${fileName}`}\n                  autoComplete={`password-${fileName}`}\n                  type=\"password\"\n                  value={passwords[fileName]}\n                  onChange={event =>\n                    setPasswords({\n                      ...passwords,\n                      [fileName]: event.target.value,\n                    })\n                  }\n                />\n              </StyledInputContainer>\n            )}\n            {sshTunnelPasswordFields?.indexOf(fileName) >= 0 && (\n              <StyledInputContainer key={`ssh_tunnel_password-for-${fileName}`}>\n                <div className=\"control-label\">\n                  {t('%s SSH TUNNEL PASSWORD', fileName.slice(10))}\n                  <span className=\"required\">*</span>\n                </div>\n                <input\n                  name={`ssh_tunnel_password-${fileName}`}\n                  autoComplete={`ssh_tunnel_password-${fileName}`}\n                  type=\"password\"\n                  value={sshTunnelPasswords[fileName]}\n                  onChange={event =>\n                    setSSHTunnelPasswords({\n                      ...sshTunnelPasswords,\n                      [fileName]: event.target.value,\n                    })\n                  }\n                  data-test=\"ssh_tunnel_password\"\n                />\n              </StyledInputContainer>\n            )}\n            {sshTunnelPrivateKeyFields?.indexOf(fileName) >= 0 && (\n              <StyledInputContainer\n                key={`ssh_tunnel_private_key-for-${fileName}`}\n              >\n                <div className=\"control-label\">\n                  {t('%s SSH TUNNEL PRIVATE KEY', fileName.slice(10))}\n                  <span className=\"required\">*</span>\n                </div>\n                <textarea\n                  name={`ssh_tunnel_private_key-${fileName}`}\n                  autoComplete={`ssh_tunnel_private_key-${fileName}`}\n                  value={sshTunnelPrivateKeys[fileName]}\n                  onChange={event =>\n                    setSSHTunnelPrivateKeys({\n                      ...sshTunnelPrivateKeys,\n                      [fileName]: event.target.value,\n                    })\n                  }\n                  data-test=\"ssh_tunnel_private_key\"\n                />\n              </StyledInputContainer>\n            )}\n            {sshTunnelPrivateKeyPasswordFields?.indexOf(fileName) >= 0 && (\n              <StyledInputContainer\n                key={`ssh_tunnel_private_key_password-for-${fileName}`}\n              >\n                <div className=\"control-label\">\n                  {t('%s SSH TUNNEL PRIVATE KEY PASSWORD', fileName.slice(10))}\n                  <span className=\"required\">*</span>\n                </div>\n                <input\n                  name={`ssh_tunnel_private_key_password-${fileName}`}\n                  autoComplete={`ssh_tunnel_private_key_password-${fileName}`}\n                  type=\"password\"\n                  value={sshTunnelPrivateKeyPasswords[fileName]}\n                  onChange={event =>\n                    setSSHTunnelPrivateKeyPasswords({\n                      ...sshTunnelPrivateKeyPasswords,\n                      [fileName]: event.target.value,\n                    })\n                  }\n                  data-test=\"ssh_tunnel_private_key_password\"\n                />\n              </StyledInputContainer>\n            )}\n          </>\n        ))}\n      </>\n    );\n  };\n\n  const renderOverwriteConfirmation = () => {\n    if (!needsOverwriteConfirm) {\n      return null;\n    }\n\n    return (\n      <>\n        <StyledInputContainer>\n          <div className=\"confirm-overwrite\">{confirmOverwriteMessage}</div>\n          <div className=\"control-label\">\n            {t('Type \"%s\" to confirm', t('OVERWRITE'))}\n          </div>\n          <input\n            data-test=\"overwrite-modal-input\"\n            id=\"overwrite\"\n            type=\"text\"\n            onChange={confirmOverwrite}\n          />\n        </StyledInputContainer>\n      </>\n    );\n  };\n\n  // Show/hide\n  if (isHidden && show) {\n    setIsHidden(false);\n  }\n\n  return (\n    <Modal\n      name=\"model\"\n      className=\"import-model-modal\"\n      disablePrimaryButton={\n        fileList.length === 0 ||\n        (needsOverwriteConfirm && !confirmedOverwrite) ||\n        importingModel\n      }\n      onHandledPrimaryAction={onUpload}\n      onHide={hide}\n      primaryButtonName={needsOverwriteConfirm ? t('Overwrite') : t('Import')}\n      primaryButtonType={needsOverwriteConfirm ? 'danger' : 'primary'}\n      width=\"750px\"\n      show={show}\n      title={<h4>{t('Import %s', resourceLabel)}</h4>}\n    >\n      <StyledInputContainer>\n        <Upload\n          name=\"modelFile\"\n          id=\"modelFile\"\n          data-test=\"model-file-input\"\n          accept=\".yaml,.json,.yml,.zip\"\n          fileList={fileList}\n          onChange={changeFile}\n          onRemove={removeFile}\n          // upload is handled by hook\n          customRequest={() => {}}\n          disabled={importingModel}\n        >\n          <Button loading={importingModel}>{t('Select file')}</Button>\n        </Upload>\n      </StyledInputContainer>\n      {errorMessage && (\n        <ErrorAlert\n          errorMessage={errorMessage}\n          showDbInstallInstructions={\n            passwordFields.length > 0 ||\n            sshTunnelPasswordFields.length > 0 ||\n            sshTunnelPrivateKeyFields.length > 0 ||\n            sshTunnelPrivateKeyPasswordFields.length > 0\n          }\n        />\n      )}\n      {renderPasswordFields()}\n      {renderOverwriteConfirmation()}\n    </Modal>\n  );\n};\n\nexport default ImportModelsModal;\n"]},"metadata":{},"sourceType":"module"}