{"ast":null,"code":"import { slice } from \"./array.js\";\nimport bisect from \"./bisect.js\";\nimport constant from \"./constant.js\";\nimport extent from \"./extent.js\";\nimport identity from \"./identity.js\";\nimport nice from \"./nice.js\";\nimport ticks, { tickIncrement } from \"./ticks.js\";\nimport sturges from \"./threshold/sturges.js\";\n\nexport default function () {\n  var value = identity,\n  domain = extent,\n  threshold = sturges;\n\n  function histogram(data) {\n    if (!Array.isArray(data)) data = Array.from(data);\n\n    var i,\n    n = data.length,\n    x,\n    values = new Array(n);\n\n    for (i = 0; i < n; ++i) {\n      values[i] = value(data[i], i, data);\n    }\n\n    var xz = domain(values),\n    x0 = xz[0],\n    x1 = xz[1],\n    tz = threshold(values, x0, x1);\n\n    // Convert number of thresholds into uniform thresholds, and nice the\n    // default domain accordingly.\n    if (!Array.isArray(tz)) {\n      const max = x1,tn = +tz;\n      if (domain === extent) [x0, x1] = nice(x0, x1, tn);\n      tz = ticks(x0, x1, tn);\n\n      // If the last threshold is coincident with the domain’s upper bound, the\n      // last bin will be zero-width. If the default domain is used, and this\n      // last threshold is coincident with the maximum input value, we can\n      // extend the niced upper bound by one tick to ensure uniform bin widths;\n      // otherwise, we simply remove the last threshold. Note that we don’t\n      // coerce values or the domain to numbers, and thus must be careful to\n      // compare order (>=) rather than strict equality (===)!\n      if (tz[tz.length - 1] >= x1) {\n        if (max >= x1 && domain === extent) {\n          const step = tickIncrement(x0, x1, tn);\n          if (isFinite(step)) {\n            if (step > 0) {\n              x1 = (Math.floor(x1 / step) + 1) * step;\n            } else if (step < 0) {\n              x1 = (Math.ceil(x1 * -step) + 1) / -step;\n            }\n          }\n        } else {\n          tz.pop();\n        }\n      }\n    }\n\n    // Remove any thresholds outside the domain.\n    var m = tz.length;\n    while (tz[0] <= x0) tz.shift(), --m;\n    while (tz[m - 1] > x1) tz.pop(), --m;\n\n    var bins = new Array(m + 1),\n    bin;\n\n    // Initialize bins.\n    for (i = 0; i <= m; ++i) {\n      bin = bins[i] = [];\n      bin.x0 = i > 0 ? tz[i - 1] : x0;\n      bin.x1 = i < m ? tz[i] : x1;\n    }\n\n    // Assign data to bins by value, ignoring any outside the domain.\n    for (i = 0; i < n; ++i) {\n      x = values[i];\n      if (x0 <= x && x <= x1) {\n        bins[bisect(tz, x, 0, m)].push(data[i]);\n      }\n    }\n\n    return bins;\n  }\n\n  histogram.value = function (_) {\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(_), histogram) : value;\n  };\n\n  histogram.domain = function (_) {\n    return arguments.length ? (domain = typeof _ === \"function\" ? _ : constant([_[0], _[1]]), histogram) : domain;\n  };\n\n  histogram.thresholds = function (_) {\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;\n  };\n\n  return histogram;\n}","map":{"version":3,"names":["slice","bisect","constant","extent","identity","nice","ticks","tickIncrement","sturges","value","domain","threshold","histogram","data","Array","isArray","from","i","n","length","x","values","xz","x0","x1","tz","max","tn","step","isFinite","Math","floor","ceil","pop","m","shift","bins","bin","push","_","arguments","thresholds","call"],"sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/legacy-plugin-chart-world-map/node_modules/d3-array/src/bin.js"],"sourcesContent":["import {slice} from \"./array.js\";\nimport bisect from \"./bisect.js\";\nimport constant from \"./constant.js\";\nimport extent from \"./extent.js\";\nimport identity from \"./identity.js\";\nimport nice from \"./nice.js\";\nimport ticks, {tickIncrement} from \"./ticks.js\";\nimport sturges from \"./threshold/sturges.js\";\n\nexport default function() {\n  var value = identity,\n      domain = extent,\n      threshold = sturges;\n\n  function histogram(data) {\n    if (!Array.isArray(data)) data = Array.from(data);\n\n    var i,\n        n = data.length,\n        x,\n        values = new Array(n);\n\n    for (i = 0; i < n; ++i) {\n      values[i] = value(data[i], i, data);\n    }\n\n    var xz = domain(values),\n        x0 = xz[0],\n        x1 = xz[1],\n        tz = threshold(values, x0, x1);\n\n    // Convert number of thresholds into uniform thresholds, and nice the\n    // default domain accordingly.\n    if (!Array.isArray(tz)) {\n      const max = x1, tn = +tz;\n      if (domain === extent) [x0, x1] = nice(x0, x1, tn);\n      tz = ticks(x0, x1, tn);\n\n      // If the last threshold is coincident with the domain’s upper bound, the\n      // last bin will be zero-width. If the default domain is used, and this\n      // last threshold is coincident with the maximum input value, we can\n      // extend the niced upper bound by one tick to ensure uniform bin widths;\n      // otherwise, we simply remove the last threshold. Note that we don’t\n      // coerce values or the domain to numbers, and thus must be careful to\n      // compare order (>=) rather than strict equality (===)!\n      if (tz[tz.length - 1] >= x1) {\n        if (max >= x1 && domain === extent) {\n          const step = tickIncrement(x0, x1, tn);\n          if (isFinite(step)) {\n            if (step > 0) {\n              x1 = (Math.floor(x1 / step) + 1) * step;\n            } else if (step < 0) {\n              x1 = (Math.ceil(x1 * -step) + 1) / -step;\n            }\n          }\n        } else {\n          tz.pop();\n        }\n      }\n    }\n\n    // Remove any thresholds outside the domain.\n    var m = tz.length;\n    while (tz[0] <= x0) tz.shift(), --m;\n    while (tz[m - 1] > x1) tz.pop(), --m;\n\n    var bins = new Array(m + 1),\n        bin;\n\n    // Initialize bins.\n    for (i = 0; i <= m; ++i) {\n      bin = bins[i] = [];\n      bin.x0 = i > 0 ? tz[i - 1] : x0;\n      bin.x1 = i < m ? tz[i] : x1;\n    }\n\n    // Assign data to bins by value, ignoring any outside the domain.\n    for (i = 0; i < n; ++i) {\n      x = values[i];\n      if (x0 <= x && x <= x1) {\n        bins[bisect(tz, x, 0, m)].push(data[i]);\n      }\n    }\n\n    return bins;\n  }\n\n  histogram.value = function(_) {\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(_), histogram) : value;\n  };\n\n  histogram.domain = function(_) {\n    return arguments.length ? (domain = typeof _ === \"function\" ? _ : constant([_[0], _[1]]), histogram) : domain;\n  };\n\n  histogram.thresholds = function(_) {\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;\n  };\n\n  return histogram;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}