{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useMemo, useRef } from 'react';\nimport { styled, t, useTruncation } from '@superset-ui/core';\nimport { Tooltip } from '../Tooltip';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst StyledTruncatedList = styled.div`\n  & > span {\n    width: 100%;\n    display: flex;\n\n    .ant-tooltip-open {\n      display: inline;\n    }\n  }\n`;\nconst StyledVisibleItems = styled.span`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  display: inline-block;\n  width: 100%;\n  vertical-align: bottom;\n`;\nconst StyledVisibleItem = styled.span`\n  &:not(:last-child)::after {\n    content: ', ';\n  }\n`;\nconst StyledTooltipItem = styled.div`\n  .link {\n    color: ${(_ref) => {let { theme } = _ref;return theme.colors.grayscale.light5;}};\n    display: block;\n    text-decoration: underline;\n  }\n`;\nconst StyledPlus = styled.span`\n  ${(_ref2) => {let { theme } = _ref2;return `\n  cursor: pointer;\n  color: ${theme.colors.primary.dark1};\n  font-weight: ${theme.typography.weights.normal};\n  `;}}\n`;\nexport default function TruncatedList(_ref3) {let { items, renderVisibleItem = (item) => item, renderTooltipItem = (item) => item, getKey = (item) => item, maxLinks = 20 } = _ref3;\n  const itemsNotInTooltipRef = useRef(null);\n  const plusRef = useRef(null);\n  const [elementsTruncated, hasHiddenElements] = useTruncation(itemsNotInTooltipRef, plusRef);\n  const nMoreItems = useMemo(() => items.length > maxLinks ? items.length - maxLinks : undefined, [items, maxLinks]);\n  const itemsNotInTooltip = useMemo(() => ___EmotionJSX(StyledVisibleItems, { ref: itemsNotInTooltipRef },\n  items.map((item) => ___EmotionJSX(StyledVisibleItem, { key: getKey(item) },\n  renderVisibleItem(item)))),\n\n  [getKey, items, renderVisibleItem]);\n  const itemsInTooltip = useMemo(() => items.\n  slice(0, maxLinks).\n  map((item) => ___EmotionJSX(StyledTooltipItem, { key: getKey(item) },\n  renderTooltipItem(item))),\n  [getKey, items, maxLinks, renderTooltipItem]);\n  return ___EmotionJSX(StyledTruncatedList, null,\n  ___EmotionJSX(Tooltip, { placement: \"top\", title: elementsTruncated ? ___EmotionJSX(React.Fragment, null,\n    itemsInTooltip,\n    nMoreItems && ___EmotionJSX(\"span\", null, t('+ %s more', nMoreItems))) :\n    null },\n  itemsNotInTooltip,\n  hasHiddenElements && ___EmotionJSX(StyledPlus, { ref: plusRef }, \"+\", elementsTruncated)));\n\n\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAmBA,OAAOA,KAAP,IAA2BC,OAA3B,EAAoCC,MAApC,QAAkD,OAAlD;AACA,SAASC,MAAT,EAAiBC,CAAjB,EAAoBC,aAApB,QAAyC,mBAAzC;AACA,SAASC,OAAT,QAAwB,YAAxB,C;AA+BA,MAAMC,mBAAmB,GAAGJ,MAAM,CAACK,GAAG;;;;;;;;;CAAtC;AAWA,MAAMC,kBAAkB,GAAGN,MAAM,CAACO,IAAI;;;;;;;CAAtC;AASA,MAAMC,iBAAiB,GAAGR,MAAM,CAACO,IAAI;;;;CAArC;AAMA,MAAME,iBAAiB,GAAGT,MAAM,CAACK,GAAG;;aAEvB,eAAC,EAAEK,KAAF,EAAD,eAAeA,KAAK,CAACC,MAAN,CAAaC,SAAb,CAAuBC,MAAtC,EAA4C;;;;CAFzD;AAQA,MAAMC,UAAU,GAAGd,MAAM,CAACO,IAAI;IAC1B,gBAAC,EAAEG,KAAF,EAAD,gBAAe;;WAERA,KAAK,CAACC,MAAN,CAAaI,OAAb,CAAqBC,KAAK;iBACpBN,KAAK,CAACO,UAAN,CAAiBC,OAAjB,CAAyBC,MAAM;GAH5C,EAID;CALH;AAQA,eAAc,SAAUC,aAAV,QAMqB,KANiB,EAClDC,KADkD,EAElDC,iBAAiB,GAAG,KAAI,KAAIC,IAFsB,EAGlDC,iBAAiB,GAAG,KAAI,KAAID,IAHsB,EAIlDE,MAAM,GAAG,KAAI,KAAIF,IAJiC,EAKlDG,QAAQ,GAAG,EALuC,EAMjB;EACjC,MAAMC,oBAAoB,GAAG5B,MAAM,CAAiB,IAAjB,CAAnC;EACA,MAAM6B,OAAO,GAAG7B,MAAM,CAAiB,IAAjB,CAAtB;EACA,MAAM,CAAC8B,iBAAD,EAAoBC,iBAApB,IAAyC5B,aAAa,CAC1DyB,oBAD0D,EAE1DC,OAF0D,CAA5D;EAKA,MAAMG,UAAU,GAAGjC,OAAO,CACxB,MAAOuB,KAAK,CAACW,MAAN,GAAeN,QAAf,GAA0BL,KAAK,CAACW,MAAN,GAAeN,QAAzC,GAAoDO,SADnC,EAExB,CAACZ,KAAD,EAAQK,QAAR,CAFwB,CAA1B;EAKA,MAAMQ,iBAAiB,GAAGpC,OAAO,CAC/B,MACE,cAAC,kBAAD,IAAoB,GAAG,EAAE6B,oBAAzB;EACGN,KAAK,CAACc,GAAN,CAAU,KAAI,KACb,cAAC,iBAAD,IAAmB,GAAG,EAAEV,MAAM,CAACF,IAAD,CAA9B;EACGD,iBAAiB,CAACC,IAAD,CADpB,CADD,CADH,CAF6B;;EAU/B,CAACE,MAAD,EAASJ,KAAT,EAAgBC,iBAAhB,CAV+B,CAAjC;EAaA,MAAMc,cAAc,GAAGtC,OAAO,CAC5B,MACEuB,KAAK;EACFgB,KADH,CACS,CADT,EACYX,QADZ;EAEGS,GAFH,CAEO,KAAI,KACP,cAAC,iBAAD,IAAmB,GAAG,EAAEV,MAAM,CAACF,IAAD,CAA9B;EACGC,iBAAiB,CAACD,IAAD,CADpB,CAHJ,CAF0B;EAS5B,CAACE,MAAD,EAASJ,KAAT,EAAgBK,QAAhB,EAA0BF,iBAA1B,CAT4B,CAA9B;EAYA,OACE,cAAC,mBAAD;EACE,cAAC,OAAD,IACE,SAAS,EAAC,KADZ,EAEE,KAAK,EACHK,iBAAiB,GACf;IACGO,cADH;IAEGL,UAAU,IAAI,4BAAO9B,CAAC,CAAC,WAAD,EAAc8B,UAAd,CAAR,CAFjB,CADe;IAKb,IARR;EAWGG,iBAXH;EAYGJ,iBAAiB,IAChB,cAAC,UAAD,IAAY,GAAG,EAAEF,OAAjB,SAA4BC,iBAA5B,CAbJ,CADF,CADF;;;AAoBD","names":["React","useMemo","useRef","styled","t","useTruncation","Tooltip","StyledTruncatedList","div","StyledVisibleItems","span","StyledVisibleItem","StyledTooltipItem","theme","colors","grayscale","light5","StyledPlus","primary","dark1","typography","weights","normal","TruncatedList","items","renderVisibleItem","item","renderTooltipItem","getKey","maxLinks","itemsNotInTooltipRef","plusRef","elementsTruncated","hasHiddenElements","nMoreItems","length","undefined","itemsNotInTooltip","map","itemsInTooltip","slice"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/components/TruncatedList/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { ReactNode, useMemo, useRef } from 'react';\nimport { styled, t, useTruncation } from '@superset-ui/core';\nimport { Tooltip } from '../Tooltip';\n\nexport type TruncatedListProps<ListItemType> = {\n  /**\n   * Array of input items of type `ListItemType`.\n   */\n  items: ListItemType[];\n\n  /**\n   * Renderer for items not overflowed into the tooltip.\n   * Required if `ListItemType` is not renderable by React.\n   */\n  renderVisibleItem?: (item: ListItemType) => ReactNode;\n\n  /**\n   * Renderer for items that are overflowed into the tooltip.\n   * Required if `ListItemType` is not renderable by React.\n   */\n  renderTooltipItem?: (item: ListItemType) => ReactNode;\n\n  /**\n   * Returns the React key for an item.\n   */\n  getKey?: (item: ListItemType) => React.Key;\n\n  /**\n   * The max number of links that should appear in the tooltip.\n   */\n  maxLinks?: number;\n};\n\nconst StyledTruncatedList = styled.div`\n  & > span {\n    width: 100%;\n    display: flex;\n\n    .ant-tooltip-open {\n      display: inline;\n    }\n  }\n`;\n\nconst StyledVisibleItems = styled.span`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  display: inline-block;\n  width: 100%;\n  vertical-align: bottom;\n`;\n\nconst StyledVisibleItem = styled.span`\n  &:not(:last-child)::after {\n    content: ', ';\n  }\n`;\n\nconst StyledTooltipItem = styled.div`\n  .link {\n    color: ${({ theme }) => theme.colors.grayscale.light5};\n    display: block;\n    text-decoration: underline;\n  }\n`;\n\nconst StyledPlus = styled.span`\n  ${({ theme }) => `\n  cursor: pointer;\n  color: ${theme.colors.primary.dark1};\n  font-weight: ${theme.typography.weights.normal};\n  `}\n`;\n\nexport default function TruncatedList<ListItemType>({\n  items,\n  renderVisibleItem = item => item,\n  renderTooltipItem = item => item,\n  getKey = item => item as unknown as React.Key,\n  maxLinks = 20,\n}: TruncatedListProps<ListItemType>) {\n  const itemsNotInTooltipRef = useRef<HTMLDivElement>(null);\n  const plusRef = useRef<HTMLDivElement>(null);\n  const [elementsTruncated, hasHiddenElements] = useTruncation(\n    itemsNotInTooltipRef,\n    plusRef,\n  ) as [number, boolean];\n\n  const nMoreItems = useMemo(\n    () => (items.length > maxLinks ? items.length - maxLinks : undefined),\n    [items, maxLinks],\n  );\n\n  const itemsNotInTooltip = useMemo(\n    () => (\n      <StyledVisibleItems ref={itemsNotInTooltipRef} data-test=\"crosslinks\">\n        {items.map(item => (\n          <StyledVisibleItem key={getKey(item)}>\n            {renderVisibleItem(item)}\n          </StyledVisibleItem>\n        ))}\n      </StyledVisibleItems>\n    ),\n    [getKey, items, renderVisibleItem],\n  );\n\n  const itemsInTooltip = useMemo(\n    () =>\n      items\n        .slice(0, maxLinks)\n        .map(item => (\n          <StyledTooltipItem key={getKey(item)}>\n            {renderTooltipItem(item)}\n          </StyledTooltipItem>\n        )),\n    [getKey, items, maxLinks, renderTooltipItem],\n  );\n\n  return (\n    <StyledTruncatedList>\n      <Tooltip\n        placement=\"top\"\n        title={\n          elementsTruncated ? (\n            <>\n              {itemsInTooltip}\n              {nMoreItems && <span>{t('+ %s more', nMoreItems)}</span>}\n            </>\n          ) : null\n        }\n      >\n        {itemsNotInTooltip}\n        {hasHiddenElements && (\n          <StyledPlus ref={plusRef}>+{elementsTruncated}</StyledPlus>\n        )}\n      </Tooltip>\n    </StyledTruncatedList>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}