{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable camelcase */\nimport {\nFILTER_CONFIG_ATTRIBUTES,\nTIME_FILTER_LABELS,\nTIME_FILTER_MAP } from\n'src/explore/constants';\n\nexport default function getFilterConfigsFromFormdata(form_data) {if (form_data === void 0) {form_data = {};}\n  const {\n    date_filter,\n    filter_configs = [],\n    show_druid_time_granularity,\n    show_sqla_time_column,\n    show_sqla_time_granularity } =\n  form_data;\n  let configs = filter_configs.reduce(\n  (_ref, config) => {let { columns, labels } = _ref;\n    let defaultValues = config[FILTER_CONFIG_ATTRIBUTES.DEFAULT_VALUE];\n\n    // treat empty string as null (no default value)\n    if (defaultValues === '') {\n      defaultValues = null;\n    }\n\n    // defaultValue could be ; separated values,\n    // could be null or ''\n    if (defaultValues && config[FILTER_CONFIG_ATTRIBUTES.MULTIPLE]) {\n      defaultValues = config.defaultValue.split(';');\n    }\n\n    const updatedColumns = {\n      ...columns,\n      [config.column]: config.vals || defaultValues };\n\n    const updatedLabels = {\n      ...labels,\n      [config.column]: config.label };\n\n\n    return {\n      columns: updatedColumns,\n      labels: updatedLabels };\n\n  },\n  { columns: {}, labels: {} });\n\n\n  if (date_filter) {\n    let updatedColumns = {\n      ...configs.columns,\n      [TIME_FILTER_MAP.time_range]: form_data.time_range };\n\n    const updatedLabels = {\n      ...configs.labels,\n      ...Object.entries(TIME_FILTER_MAP).reduce(\n      (map, _ref2) => {let [key, value] = _ref2;return {\n          ...map,\n          [value]: TIME_FILTER_LABELS[key] };},\n\n      {}) };\n\n\n\n    if (show_sqla_time_granularity) {\n      updatedColumns = {\n        ...updatedColumns,\n        [TIME_FILTER_MAP.time_grain_sqla]: form_data.time_grain_sqla };\n\n    }\n\n    if (show_sqla_time_column) {\n      updatedColumns = {\n        ...updatedColumns,\n        [TIME_FILTER_MAP.granularity_sqla]: form_data.granularity_sqla };\n\n    }\n\n    if (show_druid_time_granularity) {\n      updatedColumns = {\n        ...updatedColumns,\n        [TIME_FILTER_MAP.granularity]: form_data.granularity };\n\n    }\n\n    configs = {\n      ...configs,\n      columns: updatedColumns,\n      labels: updatedLabels };\n\n  }\n  return configs;\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(getFilterConfigsFromFormdata, \"getFilterConfigsFromFormdata\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/util/getFilterConfigsFromFormdata.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["FILTER_CONFIG_ATTRIBUTES","TIME_FILTER_LABELS","TIME_FILTER_MAP","getFilterConfigsFromFormdata","form_data","date_filter","filter_configs","show_druid_time_granularity","show_sqla_time_column","show_sqla_time_granularity","configs","reduce","config","columns","labels","defaultValues","DEFAULT_VALUE","MULTIPLE","defaultValue","split","updatedColumns","column","vals","updatedLabels","label","time_range","Object","entries","map","key","value","time_grain_sqla","granularity_sqla","granularity"],"sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/util/getFilterConfigsFromFormdata.js"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable camelcase */\nimport {\n  FILTER_CONFIG_ATTRIBUTES,\n  TIME_FILTER_LABELS,\n  TIME_FILTER_MAP,\n} from 'src/explore/constants';\n\nexport default function getFilterConfigsFromFormdata(form_data = {}) {\n  const {\n    date_filter,\n    filter_configs = [],\n    show_druid_time_granularity,\n    show_sqla_time_column,\n    show_sqla_time_granularity,\n  } = form_data;\n  let configs = filter_configs.reduce(\n    ({ columns, labels }, config) => {\n      let defaultValues = config[FILTER_CONFIG_ATTRIBUTES.DEFAULT_VALUE];\n\n      // treat empty string as null (no default value)\n      if (defaultValues === '') {\n        defaultValues = null;\n      }\n\n      // defaultValue could be ; separated values,\n      // could be null or ''\n      if (defaultValues && config[FILTER_CONFIG_ATTRIBUTES.MULTIPLE]) {\n        defaultValues = config.defaultValue.split(';');\n      }\n\n      const updatedColumns = {\n        ...columns,\n        [config.column]: config.vals || defaultValues,\n      };\n      const updatedLabels = {\n        ...labels,\n        [config.column]: config.label,\n      };\n\n      return {\n        columns: updatedColumns,\n        labels: updatedLabels,\n      };\n    },\n    { columns: {}, labels: {} },\n  );\n\n  if (date_filter) {\n    let updatedColumns = {\n      ...configs.columns,\n      [TIME_FILTER_MAP.time_range]: form_data.time_range,\n    };\n    const updatedLabels = {\n      ...configs.labels,\n      ...Object.entries(TIME_FILTER_MAP).reduce(\n        (map, [key, value]) => ({\n          ...map,\n          [value]: TIME_FILTER_LABELS[key],\n        }),\n        {},\n      ),\n    };\n\n    if (show_sqla_time_granularity) {\n      updatedColumns = {\n        ...updatedColumns,\n        [TIME_FILTER_MAP.time_grain_sqla]: form_data.time_grain_sqla,\n      };\n    }\n\n    if (show_sqla_time_column) {\n      updatedColumns = {\n        ...updatedColumns,\n        [TIME_FILTER_MAP.granularity_sqla]: form_data.granularity_sqla,\n      };\n    }\n\n    if (show_druid_time_granularity) {\n      updatedColumns = {\n        ...updatedColumns,\n        [TIME_FILTER_MAP.granularity]: form_data.granularity,\n      };\n    }\n\n    configs = {\n      ...configs,\n      columns: updatedColumns,\n      labels: updatedLabels,\n    };\n  }\n  return configs;\n}\n"],"mappings":"wSAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEA,wBADF;AAEEC,kBAFF;AAGEC,eAHF;AAIO,uBAJP;;AAMA,eAAe,SAASC,4BAAT,CAAsCC,SAAtC,EAAsD,KAAhBA,SAAgB,cAAhBA,SAAgB,GAAJ,EAAI;EACnE,MAAM;IACJC,WADI;IAEJC,cAAc,GAAG,EAFb;IAGJC,2BAHI;IAIJC,qBAJI;IAKJC,0BALI;EAMFL,SANJ;EAOA,IAAIM,OAAO,GAAGJ,cAAc,CAACK,MAAf;EACZ,OAAsBC,MAAtB,KAAiC,KAAhC,EAAEC,OAAF,EAAWC,MAAX,EAAgC;IAC/B,IAAIC,aAAa,GAAGH,MAAM,CAACZ,wBAAwB,CAACgB,aAA1B,CAA1B;;IAEA;IACA,IAAID,aAAa,KAAK,EAAtB,EAA0B;MACxBA,aAAa,GAAG,IAAhB;IACD;;IAED;IACA;IACA,IAAIA,aAAa,IAAIH,MAAM,CAACZ,wBAAwB,CAACiB,QAA1B,CAA3B,EAAgE;MAC9DF,aAAa,GAAGH,MAAM,CAACM,YAAP,CAAoBC,KAApB,CAA0B,GAA1B,CAAhB;IACD;;IAED,MAAMC,cAAc,GAAG;MACrB,GAAGP,OADkB;MAErB,CAACD,MAAM,CAACS,MAAR,GAAiBT,MAAM,CAACU,IAAP,IAAeP,aAFX,EAAvB;;IAIA,MAAMQ,aAAa,GAAG;MACpB,GAAGT,MADiB;MAEpB,CAACF,MAAM,CAACS,MAAR,GAAiBT,MAAM,CAACY,KAFJ,EAAtB;;;IAKA,OAAO;MACLX,OAAO,EAAEO,cADJ;MAELN,MAAM,EAAES,aAFH,EAAP;;EAID,CA5BW;EA6BZ,EAAEV,OAAO,EAAE,EAAX,EAAeC,MAAM,EAAE,EAAvB,EA7BY,CAAd;;;EAgCA,IAAIT,WAAJ,EAAiB;IACf,IAAIe,cAAc,GAAG;MACnB,GAAGV,OAAO,CAACG,OADQ;MAEnB,CAACX,eAAe,CAACuB,UAAjB,GAA8BrB,SAAS,CAACqB,UAFrB,EAArB;;IAIA,MAAMF,aAAa,GAAG;MACpB,GAAGb,OAAO,CAACI,MADS;MAEpB,GAAGY,MAAM,CAACC,OAAP,CAAezB,eAAf,EAAgCS,MAAhC;MACD,CAACiB,GAAD,iBAAM,CAACC,GAAD,EAAMC,KAAN,CAAN,gBAAwB;UACtB,GAAGF,GADmB;UAEtB,CAACE,KAAD,GAAS7B,kBAAkB,CAAC4B,GAAD,CAFL,EAAxB,EADC;;MAKD,EALC,CAFiB,EAAtB;;;;IAWA,IAAIpB,0BAAJ,EAAgC;MAC9BW,cAAc,GAAG;QACf,GAAGA,cADY;QAEf,CAAClB,eAAe,CAAC6B,eAAjB,GAAmC3B,SAAS,CAAC2B,eAF9B,EAAjB;;IAID;;IAED,IAAIvB,qBAAJ,EAA2B;MACzBY,cAAc,GAAG;QACf,GAAGA,cADY;QAEf,CAAClB,eAAe,CAAC8B,gBAAjB,GAAoC5B,SAAS,CAAC4B,gBAF/B,EAAjB;;IAID;;IAED,IAAIzB,2BAAJ,EAAiC;MAC/Ba,cAAc,GAAG;QACf,GAAGA,cADY;QAEf,CAAClB,eAAe,CAAC+B,WAAjB,GAA+B7B,SAAS,CAAC6B,WAF1B,EAAjB;;IAID;;IAEDvB,OAAO,GAAG;MACR,GAAGA,OADK;MAERG,OAAO,EAAEO,cAFD;MAGRN,MAAM,EAAES,aAHA,EAAV;;EAKD;EACD,OAAOb,OAAP;AACD,C,iLApFuBP,4B"},"metadata":{},"sourceType":"module"}