{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { ensureIsArray, styled, t } from '@superset-ui/core';\nimport Icons from 'src/components/Icons';\nimport { MetadataType } from '.';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst Header = styled.div`\n  font-weight: ${(_ref) => {let { theme } = _ref;return theme.typography.weights.bold;}};\n`;\nconst Info = (_ref2) => {let { text, header } = _ref2;\n  const values = ensureIsArray(text);\n  return ___EmotionJSX(React.Fragment, null,\n  header && ___EmotionJSX(Header, null, header),\n  values.map((value) => ___EmotionJSX(\"div\", { key: value }, value)));\n\n};\nconst config = (contentType) => {\n  const { type } = contentType;\n  /**\n   * Tooltips are very similar. It's pretty much blocks\n   * of header/text pairs. That's why they are implemented here.\n   * If more complex tooltips emerge, then we should extract the different\n   * types of tooltips to their own components and reference them here.\n   */\n  switch (type) {\n    case MetadataType.DASHBOARDS:\n      return {\n        icon: Icons.FundProjectionScreenOutlined,\n        title: contentType.title,\n        tooltip: contentType.description ? ___EmotionJSX(\"div\", null,\n        ___EmotionJSX(Info, { header: contentType.title, text: contentType.description })) :\n        undefined };\n\n    case MetadataType.DESCRIPTION:\n      return {\n        icon: Icons.BookOutlined,\n        title: contentType.value };\n\n    case MetadataType.LAST_MODIFIED:\n      return {\n        icon: Icons.EditOutlined,\n        title: contentType.value,\n        tooltip: ___EmotionJSX(\"div\", null,\n        ___EmotionJSX(Info, { header: t('Last modified'), text: contentType.value }),\n        ___EmotionJSX(Info, { header: t('Modified by'), text: contentType.modifiedBy })) };\n\n\n    case MetadataType.OWNER:\n      return {\n        icon: Icons.UserOutlined,\n        title: contentType.createdBy,\n        tooltip: ___EmotionJSX(\"div\", null,\n        ___EmotionJSX(Info, { header: t('Created by'), text: contentType.createdBy }),\n        ___EmotionJSX(Info, { header: t('Owners'), text: contentType.owners }),\n        ___EmotionJSX(Info, { header: t('Created on'), text: contentType.createdOn })) };\n\n\n    case MetadataType.ROWS:\n      return {\n        icon: Icons.InsertRowBelowOutlined,\n        title: contentType.title,\n        tooltip: contentType.title };\n\n    case MetadataType.SQL:\n      return {\n        icon: Icons.ConsoleSqlOutlined,\n        title: contentType.title,\n        tooltip: contentType.title };\n\n    case MetadataType.TABLE:\n      return {\n        icon: Icons.Table,\n        title: contentType.title,\n        tooltip: contentType.title };\n\n    case MetadataType.TAGS:\n      return {\n        icon: Icons.TagsOutlined,\n        title: contentType.values.join(', '),\n        tooltip: ___EmotionJSX(\"div\", null,\n        ___EmotionJSX(Info, { header: t('Tags'), text: contentType.values })) };\n\n\n    default:\n      throw Error(`Invalid type provided: ${type}`);}\n\n};\nexport { config };","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,MAAxB,EAAgCC,CAAhC,QAAyC,mBAAzC;AACA,OAAOC,KAAP,MAAkB,sBAAlB;AACA,SAAsBC,YAAtB,QAA0C,GAA1C,C;AAEA,MAAMC,MAAM,GAAGJ,MAAM,CAACK,GAAG;iBACR,eAAC,EAAEC,KAAF,EAAD,eAAeA,KAAK,CAACC,UAAN,CAAiBC,OAAjB,CAAyBC,IAAxC,EAA4C;CAD7D;AAIA,MAAMC,IAAI,GAAG,WAMR,KANS,EACZC,IADY,EAEZC,MAFY,EAMT;EACH,MAAMC,MAAM,GAAGd,aAAa,CAACY,IAAD,CAA5B;EACA,OACE;EACGC,MAAM,IAAI,cAAC,MAAD,QAASA,MAAT,CADb;EAEGC,MAAM,CAACC,GAAP,CAAW,MAAK,KACf,uBAAK,GAAG,EAAEC,KAAV,IAAkBA,KAAlB,CADD,CAFH,CADF;;AAQD,CAhBD;AAkBA,MAAMC,MAAM,GAAG,CAACC,WAAD,KAA6B;EAC1C,MAAM,EAAEC,IAAF,KAAWD,WAAjB;EAEA;;;;;;EAOA,QAAQC,IAAR;IACE,KAAKf,YAAY,CAACgB,UAAlB;MACE,OAAO;QACLC,IAAI,EAAElB,KAAK,CAACmB,4BADP;QAELC,KAAK,EAAEL,WAAW,CAACK,KAFd;QAGLC,OAAO,EAAEN,WAAW,CAACO,WAAZ,GACP;QACE,cAAC,IAAD,IAAM,MAAM,EAAEP,WAAW,CAACK,KAA1B,EAAiC,IAAI,EAAEL,WAAW,CAACO,WAAnD,GADF,CADO;QAILC,SAPC,EAAP;;IAUF,KAAKtB,YAAY,CAACuB,WAAlB;MACE,OAAO;QACLN,IAAI,EAAElB,KAAK,CAACyB,YADP;QAELL,KAAK,EAAEL,WAAW,CAACF,KAFd,EAAP;;IAKF,KAAKZ,YAAY,CAACyB,aAAlB;MACE,OAAO;QACLR,IAAI,EAAElB,KAAK,CAAC2B,YADP;QAELP,KAAK,EAAEL,WAAW,CAACF,KAFd;QAGLQ,OAAO,EACL;QACE,cAAC,IAAD,IAAM,MAAM,EAAEtB,CAAC,CAAC,eAAD,CAAf,EAAkC,IAAI,EAAEgB,WAAW,CAACF,KAApD,GADF;QAEE,cAAC,IAAD,IAAM,MAAM,EAAEd,CAAC,CAAC,aAAD,CAAf,EAAgC,IAAI,EAAEgB,WAAW,CAACa,UAAlD,GAFF,CAJG,EAAP;;;IAWF,KAAK3B,YAAY,CAAC4B,KAAlB;MACE,OAAO;QACLX,IAAI,EAAElB,KAAK,CAAC8B,YADP;QAELV,KAAK,EAAEL,WAAW,CAACgB,SAFd;QAGLV,OAAO,EACL;QACE,cAAC,IAAD,IAAM,MAAM,EAAEtB,CAAC,CAAC,YAAD,CAAf,EAA+B,IAAI,EAAEgB,WAAW,CAACgB,SAAjD,GADF;QAEE,cAAC,IAAD,IAAM,MAAM,EAAEhC,CAAC,CAAC,QAAD,CAAf,EAA2B,IAAI,EAAEgB,WAAW,CAACiB,MAA7C,GAFF;QAGE,cAAC,IAAD,IAAM,MAAM,EAAEjC,CAAC,CAAC,YAAD,CAAf,EAA+B,IAAI,EAAEgB,WAAW,CAACkB,SAAjD,GAHF,CAJG,EAAP;;;IAYF,KAAKhC,YAAY,CAACiC,IAAlB;MACE,OAAO;QACLhB,IAAI,EAAElB,KAAK,CAACmC,sBADP;QAELf,KAAK,EAAEL,WAAW,CAACK,KAFd;QAGLC,OAAO,EAAEN,WAAW,CAACK,KAHhB,EAAP;;IAMF,KAAKnB,YAAY,CAACmC,GAAlB;MACE,OAAO;QACLlB,IAAI,EAAElB,KAAK,CAACqC,kBADP;QAELjB,KAAK,EAAEL,WAAW,CAACK,KAFd;QAGLC,OAAO,EAAEN,WAAW,CAACK,KAHhB,EAAP;;IAMF,KAAKnB,YAAY,CAACqC,KAAlB;MACE,OAAO;QACLpB,IAAI,EAAElB,KAAK,CAACuC,KADP;QAELnB,KAAK,EAAEL,WAAW,CAACK,KAFd;QAGLC,OAAO,EAAEN,WAAW,CAACK,KAHhB,EAAP;;IAMF,KAAKnB,YAAY,CAACuC,IAAlB;MACE,OAAO;QACLtB,IAAI,EAAElB,KAAK,CAACyC,YADP;QAELrB,KAAK,EAAEL,WAAW,CAACJ,MAAZ,CAAmB+B,IAAnB,CAAwB,IAAxB,CAFF;QAGLrB,OAAO,EACL;QACE,cAAC,IAAD,IAAM,MAAM,EAAEtB,CAAC,CAAC,MAAD,CAAf,EAAyB,IAAI,EAAEgB,WAAW,CAACJ,MAA3C,GADF,CAJG,EAAP;;;IAUF;MACE,MAAMgC,KAAK,CAAC,0BAA0B3B,IAAI,EAA/B,CAAX,CA5EJ;;AA8ED,CAxFD;AA0FA,SAASF,MAAT","names":["React","ensureIsArray","styled","t","Icons","MetadataType","Header","div","theme","typography","weights","bold","Info","text","header","values","map","value","config","contentType","type","DASHBOARDS","icon","FundProjectionScreenOutlined","title","tooltip","description","undefined","DESCRIPTION","BookOutlined","LAST_MODIFIED","EditOutlined","modifiedBy","OWNER","UserOutlined","createdBy","owners","createdOn","ROWS","InsertRowBelowOutlined","SQL","ConsoleSqlOutlined","TABLE","Table","TAGS","TagsOutlined","join","Error"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/MetadataBar/ContentConfig.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { ensureIsArray, styled, t } from '@superset-ui/core';\nimport Icons from 'src/components/Icons';\nimport { ContentType, MetadataType } from '.';\n\nconst Header = styled.div`\n  font-weight: ${({ theme }) => theme.typography.weights.bold};\n`;\n\nconst Info = ({\n  text,\n  header,\n}: {\n  text?: string | string[];\n  header?: string;\n}) => {\n  const values = ensureIsArray(text);\n  return (\n    <>\n      {header && <Header>{header}</Header>}\n      {values.map(value => (\n        <div key={value}>{value}</div>\n      ))}\n    </>\n  );\n};\n\nconst config = (contentType: ContentType) => {\n  const { type } = contentType;\n\n  /**\n   * Tooltips are very similar. It's pretty much blocks\n   * of header/text pairs. That's why they are implemented here.\n   * If more complex tooltips emerge, then we should extract the different\n   * types of tooltips to their own components and reference them here.\n   */\n\n  switch (type) {\n    case MetadataType.DASHBOARDS:\n      return {\n        icon: Icons.FundProjectionScreenOutlined,\n        title: contentType.title,\n        tooltip: contentType.description ? (\n          <div>\n            <Info header={contentType.title} text={contentType.description} />\n          </div>\n        ) : undefined,\n      };\n\n    case MetadataType.DESCRIPTION:\n      return {\n        icon: Icons.BookOutlined,\n        title: contentType.value,\n      };\n\n    case MetadataType.LAST_MODIFIED:\n      return {\n        icon: Icons.EditOutlined,\n        title: contentType.value,\n        tooltip: (\n          <div>\n            <Info header={t('Last modified')} text={contentType.value} />\n            <Info header={t('Modified by')} text={contentType.modifiedBy} />\n          </div>\n        ),\n      };\n\n    case MetadataType.OWNER:\n      return {\n        icon: Icons.UserOutlined,\n        title: contentType.createdBy,\n        tooltip: (\n          <div>\n            <Info header={t('Created by')} text={contentType.createdBy} />\n            <Info header={t('Owners')} text={contentType.owners} />\n            <Info header={t('Created on')} text={contentType.createdOn} />\n          </div>\n        ),\n      };\n\n    case MetadataType.ROWS:\n      return {\n        icon: Icons.InsertRowBelowOutlined,\n        title: contentType.title,\n        tooltip: contentType.title,\n      };\n\n    case MetadataType.SQL:\n      return {\n        icon: Icons.ConsoleSqlOutlined,\n        title: contentType.title,\n        tooltip: contentType.title,\n      };\n\n    case MetadataType.TABLE:\n      return {\n        icon: Icons.Table,\n        title: contentType.title,\n        tooltip: contentType.title,\n      };\n\n    case MetadataType.TAGS:\n      return {\n        icon: Icons.TagsOutlined,\n        title: contentType.values.join(', '),\n        tooltip: (\n          <div>\n            <Info header={t('Tags')} text={contentType.values} />\n          </div>\n        ),\n      };\n\n    default:\n      throw Error(`Invalid type provided: ${type}`);\n  }\n};\n\nexport { config };\n"]},"metadata":{},"sourceType":"module"}