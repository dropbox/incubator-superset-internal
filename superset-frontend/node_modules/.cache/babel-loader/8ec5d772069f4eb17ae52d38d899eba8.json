{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { buildQueryContext, ensureIsArray, normalizeOrderBy, isXAxisSet, getXAxisColumn } from '@superset-ui/core';\nimport { pivotOperator, renameOperator, flattenOperator, isTimeComparison, timeComparePivotOperator, rollingWindowOperator, timeCompareOperator, resampleOperator } from '@superset-ui/chart-controls';\nimport { retainFormDataSuffix, removeFormDataSuffix } from '../utils/formDataSuffix';\nexport default function buildQuery(formData) {\n  const baseFormData = {\n    ...formData };\n\n  const formData1 = removeFormDataSuffix(baseFormData, '_b');\n  const formData2 = retainFormDataSuffix(baseFormData, '_b');\n  const queryContexts = [formData1, formData2].map((fd) => buildQueryContext(fd, (baseQueryObject) => {\n    const queryObject = {\n      ...baseQueryObject,\n      columns: [\n      ...(isXAxisSet(formData) ?\n      ensureIsArray(getXAxisColumn(formData)) :\n      []),\n      ...ensureIsArray(fd.groupby)],\n\n      series_columns: fd.groupby,\n      ...(isXAxisSet(formData) ? {} : { is_timeseries: true }) };\n\n    const pivotOperatorInRuntime = isTimeComparison(fd, queryObject) ?\n    timeComparePivotOperator(fd, queryObject) :\n    pivotOperator(fd, queryObject);\n    const tmpQueryObject = {\n      ...queryObject,\n      time_offsets: isTimeComparison(fd, queryObject) ? fd.time_compare : [],\n      post_processing: [\n      pivotOperatorInRuntime,\n      rollingWindowOperator(fd, queryObject),\n      timeCompareOperator(fd, queryObject),\n      resampleOperator(fd, queryObject),\n      renameOperator(fd, queryObject),\n      flattenOperator(fd, queryObject)] };\n\n\n    return [normalizeOrderBy(tmpQueryObject)];\n  }));\n  return {\n    ...queryContexts[0],\n    queries: [...queryContexts[0].queries, ...queryContexts[1].queries] };\n\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,SACEA,iBADF,EAEEC,aAFF,EAGEC,gBAHF,EAOEC,UAPF,EAQEC,cARF,QASO,mBATP;AAUA,SACEC,aADF,EAEEC,cAFF,EAGEC,eAHF,EAIEC,gBAJF,EAKEC,wBALF,EAMEC,qBANF,EAOEC,mBAPF,EAQEC,gBARF,QASO,6BATP;AAUA,SACEC,oBADF,EAEEC,oBAFF,QAGO,yBAHP;AAKA,eAAc,SAAUC,UAAV,CAAqBC,QAArB,EAA4C;EACxD,MAAMC,YAAY,GAAG;IACnB,GAAGD,QADgB,EAArB;;EAIA,MAAME,SAAS,GAAGJ,oBAAoB,CAACG,YAAD,EAAe,IAAf,CAAtC;EACA,MAAME,SAAS,GAAGN,oBAAoB,CAACI,YAAD,EAAe,IAAf,CAAtC;EAEA,MAAMG,aAAa,GAAG,CAACF,SAAD,EAAYC,SAAZ,EAAuBE,GAAvB,CAA2B,GAAE,KACjDrB,iBAAiB,CAACsB,EAAD,EAAK,gBAAe,KAAG;IACtC,MAAMC,WAAW,GAAG;MAClB,GAAGC,eADe;MAElBC,OAAO,EAAE;MACP,IAAItB,UAAU,CAACa,QAAD,CAAV;MACAf,aAAa,CAACG,cAAc,CAACY,QAAD,CAAf,CADb;MAEA,EAFJ,CADO;MAIP,GAAGf,aAAa,CAACqB,EAAE,CAACI,OAAJ,CAJT,CAFS;;MAQlBC,cAAc,EAAEL,EAAE,CAACI,OARD;MASlB,IAAIvB,UAAU,CAACa,QAAD,CAAV,GAAuB,EAAvB,GAA4B,EAAEY,aAAa,EAAE,IAAjB,EAAhC,CATkB,EAApB;;IAYA,MAAMC,sBAAsB,GAAwBrB,gBAAgB,CAClEc,EADkE,EAElEC,WAFkE,CAAhB;IAIhDd,wBAAwB,CAACa,EAAD,EAAKC,WAAL,CAJwB;IAKhDlB,aAAa,CAACiB,EAAD,EAAKC,WAAL,CALjB;IAOA,MAAMO,cAAc,GAAG;MACrB,GAAGP,WADkB;MAErBQ,YAAY,EAAEvB,gBAAgB,CAACc,EAAD,EAAKC,WAAL,CAAhB,GAAoCD,EAAE,CAACU,YAAvC,GAAsD,EAF/C;MAGrBC,eAAe,EAAE;MACfJ,sBADe;MAEfnB,qBAAqB,CAACY,EAAD,EAAKC,WAAL,CAFN;MAGfZ,mBAAmB,CAACW,EAAD,EAAKC,WAAL,CAHJ;MAIfX,gBAAgB,CAACU,EAAD,EAAKC,WAAL,CAJD;MAKfjB,cAAc,CAACgB,EAAD,EAAKC,WAAL,CALC;MAMfhB,eAAe,CAACe,EAAD,EAAKC,WAAL,CANA,CAHI,EAAvB;;;IAYA,OAAO,CAACrB,gBAAgB,CAAC4B,cAAD,CAAjB,CAAP;EACD,CAjCgB,CADG,CAAtB;EAqCA,OAAO;IACL,GAAGV,aAAa,CAAC,CAAD,CADX;IAELc,OAAO,EAAE,CAAC,GAAGd,aAAa,CAAC,CAAD,CAAb,CAAiBc,OAArB,EAA8B,GAAGd,aAAa,CAAC,CAAD,CAAb,CAAiBc,OAAlD,CAFJ,EAAP;;AAID","names":["buildQueryContext","ensureIsArray","normalizeOrderBy","isXAxisSet","getXAxisColumn","pivotOperator","renameOperator","flattenOperator","isTimeComparison","timeComparePivotOperator","rollingWindowOperator","timeCompareOperator","resampleOperator","retainFormDataSuffix","removeFormDataSuffix","buildQuery","formData","baseFormData","formData1","formData2","queryContexts","map","fd","queryObject","baseQueryObject","columns","groupby","series_columns","is_timeseries","pivotOperatorInRuntime","tmpQueryObject","time_offsets","time_compare","post_processing","queries"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-echarts/src/MixedTimeseries/buildQuery.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  buildQueryContext,\n  ensureIsArray,\n  normalizeOrderBy,\n  PostProcessingPivot,\n  QueryFormData,\n  QueryObject,\n  isXAxisSet,\n  getXAxisColumn,\n} from '@superset-ui/core';\nimport {\n  pivotOperator,\n  renameOperator,\n  flattenOperator,\n  isTimeComparison,\n  timeComparePivotOperator,\n  rollingWindowOperator,\n  timeCompareOperator,\n  resampleOperator,\n} from '@superset-ui/chart-controls';\nimport {\n  retainFormDataSuffix,\n  removeFormDataSuffix,\n} from '../utils/formDataSuffix';\n\nexport default function buildQuery(formData: QueryFormData) {\n  const baseFormData = {\n    ...formData,\n  };\n\n  const formData1 = removeFormDataSuffix(baseFormData, '_b');\n  const formData2 = retainFormDataSuffix(baseFormData, '_b');\n\n  const queryContexts = [formData1, formData2].map(fd =>\n    buildQueryContext(fd, baseQueryObject => {\n      const queryObject = {\n        ...baseQueryObject,\n        columns: [\n          ...(isXAxisSet(formData)\n            ? ensureIsArray(getXAxisColumn(formData))\n            : []),\n          ...ensureIsArray(fd.groupby),\n        ],\n        series_columns: fd.groupby,\n        ...(isXAxisSet(formData) ? {} : { is_timeseries: true }),\n      };\n\n      const pivotOperatorInRuntime: PostProcessingPivot = isTimeComparison(\n        fd,\n        queryObject,\n      )\n        ? timeComparePivotOperator(fd, queryObject)\n        : pivotOperator(fd, queryObject);\n\n      const tmpQueryObject = {\n        ...queryObject,\n        time_offsets: isTimeComparison(fd, queryObject) ? fd.time_compare : [],\n        post_processing: [\n          pivotOperatorInRuntime,\n          rollingWindowOperator(fd, queryObject),\n          timeCompareOperator(fd, queryObject),\n          resampleOperator(fd, queryObject),\n          renameOperator(fd, queryObject),\n          flattenOperator(fd, queryObject),\n        ],\n      } as QueryObject;\n      return [normalizeOrderBy(tmpQueryObject)];\n    }),\n  );\n\n  return {\n    ...queryContexts[0],\n    queries: [...queryContexts[0].queries, ...queryContexts[1].queries],\n  };\n}\n"]},"metadata":{},"sourceType":"module"}