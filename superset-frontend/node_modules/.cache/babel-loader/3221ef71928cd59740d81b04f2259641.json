{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\";import _isFunction from \"lodash/isFunction\";import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useMemo } from 'react';\nimport { styled, t } from '@superset-ui/core';\n\nimport { Select } from 'src/components';\nimport ControlHeader from 'src/explore/components/ControlHeader';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport ColorSchemeLabel from './ColorSchemeLabel';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst StyledAlert = styled(Icons.AlertSolid)`\n  color: ${(_ref) => {let { theme } = _ref;return theme.colors.alert.base;}};\n`;\nconst CUSTOM_LABEL_ALERT = t(`This color scheme is being overridden by custom label colors.\n    Check the JSON metadata in the Advanced settings`);\nconst DASHBOARD_ALERT = t(`The color scheme is determined by the related dashboard.\n        Edit the color scheme in the dashboard properties.`);\nconst Label = (_ref2) => {let { label, hasCustomLabelColors, dashboardId } = _ref2;\n  if (hasCustomLabelColors || dashboardId) {\n    const alertTitle = hasCustomLabelColors ?\n    CUSTOM_LABEL_ALERT :\n    DASHBOARD_ALERT;\n    return ___EmotionJSX(React.Fragment, null,\n    label, ' ',\n    ___EmotionJSX(Tooltip, { title: alertTitle },\n    ___EmotionJSX(StyledAlert, { iconSize: \"s\" })));\n\n\n  }\n  return ___EmotionJSX(React.Fragment, null, label);\n};\nconst ColorSchemeControl = (_ref3) => {let { hasCustomLabelColors = false, dashboardId, label = t('Color scheme'), name, onChange = () => {}, value, clearable = false, defaultScheme, choices = [], schemes = {}, isLinear, ...rest } = _ref3;\n  const currentScheme = useMemo(() => {\n    if (dashboardId) {\n      return 'dashboard';\n    }\n    let result = value || defaultScheme;\n    if (result === 'SUPERSET_DEFAULT') {var _schemesObject$SUPERS;\n      const schemesObject = _isFunction(schemes) ? schemes() : schemes;\n      result = schemesObject == null ? void 0 : (_schemesObject$SUPERS = schemesObject.SUPERSET_DEFAULT) == null ? void 0 : _schemesObject$SUPERS.id;\n    }\n    return result;\n  }, [dashboardId, defaultScheme, schemes, value]);\n  const options = useMemo(() => {\n    if (dashboardId) {\n      return [\n      {\n        value: 'dashboard',\n        label: t('dashboard'),\n        customLabel: ___EmotionJSX(Tooltip, { title: DASHBOARD_ALERT }, t('Dashboard scheme')) }];\n\n\n    }\n    const schemesObject = _isFunction(schemes) ? schemes() : schemes;\n    const controlChoices = _isFunction(choices) ? choices() : choices;\n    const allColorOptions = [];\n    const filteredColorOptions = controlChoices.filter((o) => {\n      const option = o[0];\n      const isValidColorOption = option !== 'SUPERSET_DEFAULT' && !_includesInstanceProperty(allColorOptions).call(allColorOptions, option);\n      allColorOptions.push(option);\n      return isValidColorOption;\n    });\n    return filteredColorOptions.map((_ref4) => {var _schemesObject$value;let [value] = _ref4;\n      const currentScheme = schemesObject[value];\n      // For categorical scheme, display all the colors\n      // For sequential scheme, show 10 or interpolate to 10.\n      // Sequential schemes usually have at most 10 colors.\n      let colors = [];\n      if (currentScheme) {\n        colors = isLinear ?\n        currentScheme.getColors(10) :\n        currentScheme.colors;\n      }\n      return {\n        customLabel: ___EmotionJSX(ColorSchemeLabel, { id: currentScheme.id, label: currentScheme.label, colors: colors }),\n        label: (schemesObject == null ? void 0 : (_schemesObject$value = schemesObject[value]) == null ? void 0 : _schemesObject$value.label) || value,\n        value };\n\n    });\n  }, [choices, dashboardId, isLinear, schemes]);\n  // We can't pass on change directly because it receives a second\n  // parameter and it would be interpreted as the error parameter\n  const handleOnChange = (value) => onChange(value);\n  return ___EmotionJSX(Select, { header: ___EmotionJSX(ControlHeader, _extends({}, rest, { label: ___EmotionJSX(Label, { label: label, hasCustomLabelColors: hasCustomLabelColors, dashboardId: dashboardId }) })), ariaLabel: t('Select color scheme'), allowClear: clearable, disabled: !!dashboardId, name: `select-${name}`, onChange: handleOnChange, options: options, placeholder: t('Select scheme'), value: currentScheme });\n};\nexport default ColorSchemeControl;","map":{"version":3,"mappings":"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","names":["React","useMemo","styled","t","Select","ControlHeader","Tooltip","Icons","ColorSchemeLabel","StyledAlert","AlertSolid","theme","colors","alert","base","CUSTOM_LABEL_ALERT","DASHBOARD_ALERT","Label","label","hasCustomLabelColors","dashboardId","alertTitle","ColorSchemeControl","name","onChange","value","clearable","defaultScheme","choices","schemes","isLinear","rest","currentScheme","result","schemesObject","SUPERSET_DEFAULT","id","options","customLabel","controlChoices","allColorOptions","filteredColorOptions","filter","option","o","isValidColorOption","push","map","getColors","handleOnChange"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/controls/ColorSchemeControl/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useMemo } from 'react';\nimport { ColorScheme, SequentialScheme, styled, t } from '@superset-ui/core';\nimport { isFunction } from 'lodash';\nimport { Select } from 'src/components';\nimport ControlHeader from 'src/explore/components/ControlHeader';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport ColorSchemeLabel from './ColorSchemeLabel';\n\nexport interface ColorSchemes {\n  [key: string]: ColorScheme;\n}\n\nexport interface ColorSchemeControlProps {\n  hasCustomLabelColors: boolean;\n  dashboardId?: number;\n  label: string;\n  name: string;\n  onChange?: (value: string) => void;\n  value: string;\n  clearable: boolean;\n  defaultScheme?: string;\n  choices: string[][] | (() => string[][]);\n  schemes: ColorSchemes | (() => ColorSchemes);\n  isLinear: boolean;\n}\n\nconst StyledAlert = styled(Icons.AlertSolid)`\n  color: ${({ theme }) => theme.colors.alert.base};\n`;\n\nconst CUSTOM_LABEL_ALERT = t(\n  `This color scheme is being overridden by custom label colors.\n    Check the JSON metadata in the Advanced settings`,\n);\n\nconst DASHBOARD_ALERT = t(\n  `The color scheme is determined by the related dashboard.\n        Edit the color scheme in the dashboard properties.`,\n);\n\nconst Label = ({\n  label,\n  hasCustomLabelColors,\n  dashboardId,\n}: Pick<\n  ColorSchemeControlProps,\n  'label' | 'hasCustomLabelColors' | 'dashboardId'\n>) => {\n  if (hasCustomLabelColors || dashboardId) {\n    const alertTitle = hasCustomLabelColors\n      ? CUSTOM_LABEL_ALERT\n      : DASHBOARD_ALERT;\n    return (\n      <>\n        {label}{' '}\n        <Tooltip title={alertTitle}>\n          <StyledAlert iconSize=\"s\" />\n        </Tooltip>\n      </>\n    );\n  }\n  return <>{label}</>;\n};\n\nconst ColorSchemeControl = ({\n  hasCustomLabelColors = false,\n  dashboardId,\n  label = t('Color scheme'),\n  name,\n  onChange = () => {},\n  value,\n  clearable = false,\n  defaultScheme,\n  choices = [],\n  schemes = {},\n  isLinear,\n  ...rest\n}: ColorSchemeControlProps) => {\n  const currentScheme = useMemo(() => {\n    if (dashboardId) {\n      return 'dashboard';\n    }\n    let result = value || defaultScheme;\n    if (result === 'SUPERSET_DEFAULT') {\n      const schemesObject = isFunction(schemes) ? schemes() : schemes;\n      result = schemesObject?.SUPERSET_DEFAULT?.id;\n    }\n    return result;\n  }, [dashboardId, defaultScheme, schemes, value]);\n\n  const options = useMemo(() => {\n    if (dashboardId) {\n      return [\n        {\n          value: 'dashboard',\n          label: t('dashboard'),\n          customLabel: (\n            <Tooltip title={DASHBOARD_ALERT}>{t('Dashboard scheme')}</Tooltip>\n          ),\n        },\n      ];\n    }\n    const schemesObject = isFunction(schemes) ? schemes() : schemes;\n    const controlChoices = isFunction(choices) ? choices() : choices;\n    const allColorOptions: string[] = [];\n    const filteredColorOptions = controlChoices.filter(o => {\n      const option = o[0];\n      const isValidColorOption =\n        option !== 'SUPERSET_DEFAULT' && !allColorOptions.includes(option);\n      allColorOptions.push(option);\n      return isValidColorOption;\n    });\n\n    return filteredColorOptions.map(([value]) => {\n      const currentScheme = schemesObject[value];\n\n      // For categorical scheme, display all the colors\n      // For sequential scheme, show 10 or interpolate to 10.\n      // Sequential schemes usually have at most 10 colors.\n      let colors: string[] = [];\n      if (currentScheme) {\n        colors = isLinear\n          ? (currentScheme as SequentialScheme).getColors(10)\n          : currentScheme.colors;\n      }\n      return {\n        customLabel: (\n          <ColorSchemeLabel\n            id={currentScheme.id}\n            label={currentScheme.label}\n            colors={colors}\n          />\n        ),\n        label: schemesObject?.[value]?.label || value,\n        value,\n      };\n    });\n  }, [choices, dashboardId, isLinear, schemes]);\n\n  // We can't pass on change directly because it receives a second\n  // parameter and it would be interpreted as the error parameter\n  const handleOnChange = (value: string) => onChange(value);\n\n  return (\n    <Select\n      header={\n        <ControlHeader\n          {...rest}\n          label={\n            <Label\n              label={label}\n              hasCustomLabelColors={hasCustomLabelColors}\n              dashboardId={dashboardId}\n            />\n          }\n        />\n      }\n      ariaLabel={t('Select color scheme')}\n      allowClear={clearable}\n      disabled={!!dashboardId}\n      name={`select-${name}`}\n      onChange={handleOnChange}\n      options={options}\n      placeholder={t('Select scheme')}\n      value={currentScheme}\n    />\n  );\n};\n\nexport default ColorSchemeControl;\n"]},"metadata":{},"sourceType":"module"}