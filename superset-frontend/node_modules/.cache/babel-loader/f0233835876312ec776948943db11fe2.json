{"ast":null,"code":"export var PandasAxis;\n(function (PandasAxis) {\n  PandasAxis[PandasAxis[\"Row\"] = 0] = \"Row\";\n  PandasAxis[PandasAxis[\"Column\"] = 1] = \"Column\";\n})(PandasAxis || (PandasAxis = {}));\nexport function isPostProcessingAggregation(rule) {\n  return (rule == null ? void 0 : rule.operation) === 'aggregation';\n}\nexport function isPostProcessingBoxplot(rule) {\n  return (rule == null ? void 0 : rule.operation) === 'boxplot';\n}\nexport function isPostProcessingContribution(rule) {\n  return (rule == null ? void 0 : rule.operation) === 'contribution';\n}\nexport function isPostProcessingPivot(rule) {\n  return (rule == null ? void 0 : rule.operation) === 'pivot';\n}\nexport function isPostProcessingProphet(rule) {\n  return (rule == null ? void 0 : rule.operation) === 'prophet';\n}\nexport function isPostProcessingDiff(rule) {\n  return (rule == null ? void 0 : rule.operation) === 'diff';\n}\nexport function isPostProcessingRolling(rule) {\n  return (rule == null ? void 0 : rule.operation) === 'rolling';\n}\nexport function isPostProcessingCum(rule) {\n  return (rule == null ? void 0 : rule.operation) === 'cum';\n}\nexport function isPostProcessingCompare(rule) {\n  return (rule == null ? void 0 : rule.operation) === 'compare';\n}\nexport function isPostProcessingSort(rule) {\n  return (rule == null ? void 0 : rule.operation) === 'sort';\n}\nexport function isPostProcessingResample(rule) {\n  return (rule == null ? void 0 : rule.operation) === 'resample';\n}","map":{"version":3,"mappings":"AA+CA,WAAYA,UAAZ;AAAA,WAAYA,UAAZ,EAAsB;EACpBA;EACAA;AACD,CAHD,EAAYA,UAAU,KAAVA,UAAU,MAAtB;AAsMA,OAAM,SAAUC,2BAAV,CACJC,IADI,EACqB;EAEzB,OAAO,KAAI,QAAJ,gBAAI,CAAEC,SAAN,MAAoB,aAA3B;AACD;AAED,OAAM,SAAUC,uBAAV,CACJF,IADI,EACqB;EAEzB,OAAO,KAAI,QAAJ,gBAAI,CAAEC,SAAN,MAAoB,SAA3B;AACD;AAED,OAAM,SAAUE,4BAAV,CACJH,IADI,EACqB;EAEzB,OAAO,KAAI,QAAJ,gBAAI,CAAEC,SAAN,MAAoB,cAA3B;AACD;AAED,OAAM,SAAUG,qBAAV,CACJJ,IADI,EACqB;EAEzB,OAAO,KAAI,QAAJ,gBAAI,CAAEC,SAAN,MAAoB,OAA3B;AACD;AAED,OAAM,SAAUI,uBAAV,CACJL,IADI,EACqB;EAEzB,OAAO,KAAI,QAAJ,gBAAI,CAAEC,SAAN,MAAoB,SAA3B;AACD;AAED,OAAM,SAAUK,oBAAV,CACJN,IADI,EACqB;EAEzB,OAAO,KAAI,QAAJ,gBAAI,CAAEC,SAAN,MAAoB,MAA3B;AACD;AAED,OAAM,SAAUM,uBAAV,CACJP,IADI,EACqB;EAEzB,OAAO,KAAI,QAAJ,gBAAI,CAAEC,SAAN,MAAoB,SAA3B;AACD;AAED,OAAM,SAAUO,mBAAV,CACJR,IADI,EACqB;EAEzB,OAAO,KAAI,QAAJ,gBAAI,CAAEC,SAAN,MAAoB,KAA3B;AACD;AAED,OAAM,SAAUQ,uBAAV,CACJT,IADI,EACqB;EAEzB,OAAO,KAAI,QAAJ,gBAAI,CAAEC,SAAN,MAAoB,SAA3B;AACD;AAED,OAAM,SAAUS,oBAAV,CACJV,IADI,EACqB;EAEzB,OAAO,KAAI,QAAJ,gBAAI,CAAEC,SAAN,MAAoB,MAA3B;AACD;AAED,OAAM,SAAUU,wBAAV,CACJX,IADI,EACqB;EAEzB,OAAO,KAAI,QAAJ,gBAAI,CAAEC,SAAN,MAAoB,UAA3B;AACD","names":["PandasAxis","isPostProcessingAggregation","rule","operation","isPostProcessingBoxplot","isPostProcessingContribution","isPostProcessingPivot","isPostProcessingProphet","isPostProcessingDiff","isPostProcessingRolling","isPostProcessingCum","isPostProcessingCompare","isPostProcessingSort","isPostProcessingResample"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/packages/superset-ui-core/src/query/types/PostProcessing.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { JsonObject } from '../../connection';\nimport { TimeGranularity } from '../../time-format';\nimport { RollingType, ComparisonType } from './AdvancedAnalytics';\n\nexport type NumpyFunction =\n  | 'average'\n  | 'argmin'\n  | 'argmax'\n  | 'count'\n  | 'count_nonzero'\n  | 'cumsum'\n  | 'cumprod'\n  | 'max'\n  | 'mean'\n  | 'median'\n  | 'nansum'\n  | 'nanmin'\n  | 'nanmax'\n  | 'nanmean'\n  | 'nanmedian'\n  | 'nanpercentile'\n  | 'min'\n  | 'percentile'\n  | 'prod'\n  | 'product'\n  | 'std'\n  | 'sum'\n  | 'var';\n\nexport enum PandasAxis {\n  Row = 0,\n  Column = 1,\n}\n\nexport interface Aggregates {\n  /**\n   * The name of the generated aggregate column.\n   */\n  [colname: string]: {\n    operator: NumpyFunction;\n    /**\n     * the name of the column to generate aggregates from.\n     */\n    column?: string;\n    options?: JsonObject;\n  };\n}\n\nexport type DefaultPostProcessing = undefined;\n\ninterface _PostProcessingAggregation {\n  operation: 'aggregation';\n  options: {\n    groupby: string[];\n    aggregates: Aggregates;\n  };\n}\nexport type PostProcessingAggregation =\n  | _PostProcessingAggregation\n  | DefaultPostProcessing;\n\nexport type BoxPlotQueryObjectWhiskerType = 'tukey' | 'min/max' | 'percentile';\ninterface _PostProcessingBoxplot {\n  operation: 'boxplot';\n  options: {\n    groupby: string[];\n    metrics: string[];\n    whisker_type: BoxPlotQueryObjectWhiskerType;\n    percentiles?: [number, number];\n  };\n}\nexport type PostProcessingBoxplot =\n  | _PostProcessingBoxplot\n  | DefaultPostProcessing;\n\ninterface _PostProcessingContribution {\n  operation: 'contribution';\n  options?: {\n    orientation?: 'row' | 'column';\n    columns?: string[];\n    rename_columns?: string[];\n  };\n}\nexport type PostProcessingContribution =\n  | _PostProcessingContribution\n  | DefaultPostProcessing;\n\ninterface _PostProcessingPivot {\n  operation: 'pivot';\n  options: {\n    aggregates: Aggregates;\n    column_fill_value?: string;\n    columns: string[];\n    combine_value_with_metric?: boolean;\n    drop_missing_columns?: boolean;\n    index: string[];\n    marginal_distribution_name?: string;\n    marginal_distributions?: boolean;\n    metric_fill_value?: any;\n  };\n}\nexport type PostProcessingPivot = _PostProcessingPivot | DefaultPostProcessing;\n\ninterface _PostProcessingProphet {\n  operation: 'prophet';\n  options: {\n    time_grain: TimeGranularity | undefined;\n    periods: number;\n    confidence_interval: number;\n    yearly_seasonality?: boolean | number;\n    weekly_seasonality?: boolean | number;\n    daily_seasonality?: boolean | number;\n  };\n}\nexport type PostProcessingProphet =\n  | _PostProcessingProphet\n  | DefaultPostProcessing;\n\ninterface _PostProcessingDiff {\n  operation: 'diff';\n  options: {\n    columns: string[];\n    periods: number;\n    axis: PandasAxis;\n  };\n}\nexport type PostProcessingDiff = _PostProcessingDiff | DefaultPostProcessing;\n\ninterface _PostProcessingRolling {\n  operation: 'rolling';\n  options: {\n    rolling_type: RollingType;\n    window: number;\n    min_periods: number;\n    columns: string[];\n  };\n}\nexport type PostProcessingRolling =\n  | _PostProcessingRolling\n  | DefaultPostProcessing;\n\ninterface _PostProcessingCum {\n  operation: 'cum';\n  options: {\n    columns: string[];\n    operator: NumpyFunction;\n  };\n}\nexport type PostProcessingCum = _PostProcessingCum | DefaultPostProcessing;\n\nexport interface _PostProcessingCompare {\n  operation: 'compare';\n  options: {\n    source_columns: string[];\n    compare_columns: string[];\n    compare_type: Omit<ComparisonType, ComparisonType.Values>;\n    drop_original_columns: boolean;\n  };\n}\nexport type PostProcessingCompare =\n  | _PostProcessingCompare\n  | DefaultPostProcessing;\n\ninterface _PostProcessingSort {\n  operation: 'sort';\n  options: {\n    is_sort_index?: boolean;\n    by?: string[] | string;\n    ascending?: boolean[] | boolean;\n  };\n}\nexport type PostProcessingSort = _PostProcessingSort | DefaultPostProcessing;\n\ninterface _PostProcessingResample {\n  operation: 'resample';\n  options: {\n    method: string;\n    rule: string;\n    fill_value?: number | null;\n  };\n}\nexport type PostProcessingResample =\n  | _PostProcessingResample\n  | DefaultPostProcessing;\n\ninterface _PostProcessingRename {\n  operation: 'rename';\n  options: {\n    columns: Record<string, string | null>;\n    inplace?: boolean;\n    level?: number | string;\n  };\n}\nexport type PostProcessingRename =\n  | _PostProcessingRename\n  | DefaultPostProcessing;\n\ninterface _PostProcessingFlatten {\n  operation: 'flatten';\n  options?: {\n    reset_index?: boolean;\n    drop_levels?: number[] | string[];\n  };\n}\nexport type PostProcessingFlatten =\n  | _PostProcessingFlatten\n  | DefaultPostProcessing;\n\n/**\n * Parameters for chart data postprocessing.\n * See superset/utils/pandas_processing.py.\n */\nexport type PostProcessingRule =\n  | PostProcessingAggregation\n  | PostProcessingBoxplot\n  | PostProcessingContribution\n  | PostProcessingPivot\n  | PostProcessingProphet\n  | PostProcessingDiff\n  | PostProcessingRolling\n  | PostProcessingCum\n  | PostProcessingCompare\n  | PostProcessingSort\n  | PostProcessingResample\n  | PostProcessingRename\n  | PostProcessingFlatten;\n\nexport function isPostProcessingAggregation(\n  rule?: PostProcessingRule,\n): rule is PostProcessingAggregation {\n  return rule?.operation === 'aggregation';\n}\n\nexport function isPostProcessingBoxplot(\n  rule?: PostProcessingRule,\n): rule is PostProcessingBoxplot {\n  return rule?.operation === 'boxplot';\n}\n\nexport function isPostProcessingContribution(\n  rule?: PostProcessingRule,\n): rule is PostProcessingContribution {\n  return rule?.operation === 'contribution';\n}\n\nexport function isPostProcessingPivot(\n  rule?: PostProcessingRule,\n): rule is PostProcessingPivot {\n  return rule?.operation === 'pivot';\n}\n\nexport function isPostProcessingProphet(\n  rule?: PostProcessingRule,\n): rule is PostProcessingProphet {\n  return rule?.operation === 'prophet';\n}\n\nexport function isPostProcessingDiff(\n  rule?: PostProcessingRule,\n): rule is PostProcessingDiff {\n  return rule?.operation === 'diff';\n}\n\nexport function isPostProcessingRolling(\n  rule?: PostProcessingRule,\n): rule is PostProcessingRolling {\n  return rule?.operation === 'rolling';\n}\n\nexport function isPostProcessingCum(\n  rule?: PostProcessingRule,\n): rule is PostProcessingCum {\n  return rule?.operation === 'cum';\n}\n\nexport function isPostProcessingCompare(\n  rule?: PostProcessingRule,\n): rule is PostProcessingCompare {\n  return rule?.operation === 'compare';\n}\n\nexport function isPostProcessingSort(\n  rule?: PostProcessingRule,\n): rule is PostProcessingSort {\n  return rule?.operation === 'sort';\n}\n\nexport function isPostProcessingResample(\n  rule?: PostProcessingRule,\n): rule is PostProcessingResample {\n  return rule?.operation === 'resample';\n}\n"]},"metadata":{},"sourceType":"module"}