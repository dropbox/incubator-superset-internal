{"ast":null,"code":"import { SyncRegistry, OverwritePolicy } from '@encodable/registry';\nexport default class FormatterRegistry extends SyncRegistry {\n  constructor(_ref)\n\n\n  {let { overwritePolicy = OverwritePolicy.WARN, ...rest } = _ref;\n    super({\n      overwritePolicy,\n      ...rest });\n\n  }\n  /**\n   * Subclasses must implement this to create formatter from format string.\n   * Worst-case can return `fallbackFormatter`.\n   */\n\n\n  /**\n   * Get a Formatter by name\n   * @param format Formatter name, usually is a format string\n   */\n  get(format) {\n    const targetFormat = (\"\" + (format === null || typeof format === 'undefined' || format.trim().length === 0 ? this.getDefaultKey() : format)).trim();\n\n    if (this.has(targetFormat)) {\n      return super.get(targetFormat);\n    } // Create new formatter if does not exist\n\n\n    const formatter = this.createFormatter(targetFormat);\n    this.registerValue(targetFormat, formatter);\n    return formatter;\n  }\n  /**\n   * Format value with the named Formatter\n   * @param format Formatter name, usually is a format string\n   * @param value value to be formatted\n   */\n\n\n  format(format, value) {\n    return this.get(format)(value);\n  }}","map":{"version":3,"names":["SyncRegistry","OverwritePolicy","FormatterRegistry","constructor","overwritePolicy","WARN","rest","get","format","targetFormat","trim","length","getDefaultKey","has","formatter","createFormatter","registerValue","value"],"sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/node_modules/@encodable/format/esm/FormatterRegistry.js"],"sourcesContent":["import { SyncRegistry, OverwritePolicy } from '@encodable/registry';\nexport default class FormatterRegistry extends SyncRegistry {\n  constructor({\n    overwritePolicy = OverwritePolicy.WARN,\n    ...rest\n  }) {\n    super({\n      overwritePolicy,\n      ...rest\n    });\n  }\n  /**\n   * Subclasses must implement this to create formatter from format string.\n   * Worst-case can return `fallbackFormatter`.\n   */\n\n\n  /**\n   * Get a Formatter by name\n   * @param format Formatter name, usually is a format string\n   */\n  get(format) {\n    const targetFormat = (\"\" + (format === null || typeof format === 'undefined' || format.trim().length === 0 ? this.getDefaultKey() : format)).trim();\n\n    if (this.has(targetFormat)) {\n      return super.get(targetFormat);\n    } // Create new formatter if does not exist\n\n\n    const formatter = this.createFormatter(targetFormat);\n    this.registerValue(targetFormat, formatter);\n    return formatter;\n  }\n  /**\n   * Format value with the named Formatter\n   * @param format Formatter name, usually is a format string\n   * @param value value to be formatted\n   */\n\n\n  format(format, value) {\n    return this.get(format)(value);\n  }\n\n}"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,eAAvB,QAA8C,qBAA9C;AACA,eAAe,MAAMC,iBAAN,SAAgCF,YAAhC,CAA6C;EAC1DG,WAAW;;;EAGR,KAHS,EACVC,eAAe,GAAGH,eAAe,CAACI,IADxB,EAEV,GAAGC,IAFO,EAGT;IACD,MAAM;MACJF,eADI;MAEJ,GAAGE,IAFC,EAAN;;EAID;EACD;AACF;AACA;AACA;;;EAGE;AACF;AACA;AACA;EACEC,GAAG,CAACC,MAAD,EAAS;IACV,MAAMC,YAAY,GAAG,CAAC,MAAMD,MAAM,KAAK,IAAX,IAAmB,OAAOA,MAAP,KAAkB,WAArC,IAAoDA,MAAM,CAACE,IAAP,GAAcC,MAAd,KAAyB,CAA7E,GAAiF,KAAKC,aAAL,EAAjF,GAAwGJ,MAA9G,CAAD,EAAwHE,IAAxH,EAArB;;IAEA,IAAI,KAAKG,GAAL,CAASJ,YAAT,CAAJ,EAA4B;MAC1B,OAAO,MAAMF,GAAN,CAAUE,YAAV,CAAP;IACD,CALS,CAKR;;;IAGF,MAAMK,SAAS,GAAG,KAAKC,eAAL,CAAqBN,YAArB,CAAlB;IACA,KAAKO,aAAL,CAAmBP,YAAnB,EAAiCK,SAAjC;IACA,OAAOA,SAAP;EACD;EACD;AACF;AACA;AACA;AACA;;;EAGEN,MAAM,CAACA,MAAD,EAASS,KAAT,EAAgB;IACpB,OAAO,KAAKV,GAAL,CAASC,MAAT,EAAiBS,KAAjB,CAAP;EACD,CAzCyD"},"metadata":{},"sourceType":"module"}