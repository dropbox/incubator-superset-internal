{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useEffect, useLayoutEffect, useRef, useState } from 'react';\nimport { css, t } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { useResizeDetector } from 'react-resize-detector';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst titleStyles = (theme) => css`\n  display: flex;\n  font-size: ${theme.typography.sizes.xl}px;\n  font-weight: ${theme.typography.weights.bold};\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n\n  & .dynamic-title,\n  & .dynamic-title-input {\n    display: inline-block;\n    max-width: 100%;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  }\n\n  & .dynamic-title {\n    cursor: default;\n  }\n  & .dynamic-title-input {\n    border: none;\n    padding: 0;\n    outline: none;\n\n    &::placeholder {\n      color: ${theme.colors.grayscale.light1};\n    }\n  }\n\n  & .input-sizer {\n    position: absolute;\n    left: -9999px;\n    display: inline-block;\n  }\n`;\nexport const DynamicEditableTitle = (_ref) => {let { title, placeholder, onSave, canEdit, label } = _ref;\n  const [isEditing, setIsEditing] = useState(false);\n  const [currentTitle, setCurrentTitle] = useState(title || '');\n  const contentRef = useRef(null);\n  const [showTooltip, setShowTooltip] = useState(false);\n  const { width: inputWidth, ref: sizerRef } = useResizeDetector();\n  const { width: containerWidth, ref: containerRef } = useResizeDetector({\n    refreshMode: 'debounce' });\n\n  useEffect(() => {\n    setCurrentTitle(title);\n  }, [title]);\n  useEffect(() => {\n    if (isEditing && contentRef != null && contentRef.current) {\n      contentRef.current.focus();\n      // move cursor and scroll to the end\n      if (contentRef.current.setSelectionRange) {\n        const { length } = contentRef.current.value;\n        contentRef.current.setSelectionRange(length, length);\n        contentRef.current.scrollLeft = contentRef.current.scrollWidth;\n      }\n    }\n  }, [isEditing]);\n  // a trick to make the input grow when user types text\n  // we make additional span component, place it somewhere out of view and copy input\n  // then we can measure the width of that span to resize the input element\n  useLayoutEffect(() => {\n    if (sizerRef != null && sizerRef.current) {\n      sizerRef.current.innerHTML = (currentTitle || placeholder).replace(/\\s/g, '&nbsp;');\n    }\n  }, [currentTitle, placeholder, sizerRef]);\n  useEffect(() => {\n    if (contentRef.current &&\n    contentRef.current.scrollWidth > contentRef.current.clientWidth) {\n      setShowTooltip(true);\n    } else\n    {\n      setShowTooltip(false);\n    }\n  }, [inputWidth, containerWidth]);\n  const handleClick = useCallback(() => {\n    if (!canEdit || isEditing) {\n      return;\n    }\n    setIsEditing(true);\n  }, [canEdit, isEditing]);\n  const handleBlur = useCallback(() => {\n    if (!canEdit) {\n      return;\n    }\n    const formattedTitle = currentTitle.trim();\n    setCurrentTitle(formattedTitle);\n    if (title !== formattedTitle) {\n      onSave(formattedTitle);\n    }\n    setIsEditing(false);\n  }, [canEdit, currentTitle, onSave, title]);\n  const handleChange = useCallback((ev) => {\n    if (!canEdit || !isEditing) {\n      return;\n    }\n    setCurrentTitle(ev.target.value);\n  }, [canEdit, isEditing]);\n  const handleKeyPress = useCallback((ev) => {\n    if (!canEdit) {\n      return;\n    }\n    if (ev.key === 'Enter') {var _contentRef$current;\n      ev.preventDefault();\n      (_contentRef$current = contentRef.current) == null ? void 0 : _contentRef$current.blur();\n    }\n  }, [canEdit]);\n  return ___EmotionJSX(\"div\", { css: titleStyles, ref: containerRef },\n  ___EmotionJSX(Tooltip, { id: \"title-tooltip\", title: showTooltip && currentTitle && !isEditing ? currentTitle : null },\n  canEdit ? ___EmotionJSX(\"input\", { className: \"dynamic-title-input\", \"aria-label\": label != null ? label : t('Title'), ref: contentRef, onChange: handleChange, onBlur: handleBlur, onClick: handleClick, onKeyPress: handleKeyPress, placeholder: placeholder, value: currentTitle, css: css`\n              cursor: ${isEditing ? 'text' : 'pointer'};\n\n              ${inputWidth &&\n    inputWidth > 0 &&\n    css`\n                width: ${inputWidth + 1}px;\n              `}\n            ` }) : ___EmotionJSX(\"span\", { className: \"dynamic-title\", \"aria-label\": label != null ? label : t('Title'), ref: contentRef },\n  currentTitle)),\n\n\n  ___EmotionJSX(\"span\", { ref: sizerRef, className: \"input-sizer\", \"aria-hidden\": true, tabIndex: -1 }));\n\n};","map":{"version":3,"mappings":"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","names":["React","useCallback","useEffect","useLayoutEffect","useRef","useState","css","t","Tooltip","useResizeDetector","titleStyles","theme","typography","sizes","xl","weights","bold","colors","grayscale","light1","DynamicEditableTitle","title","placeholder","onSave","canEdit","label","isEditing","setIsEditing","currentTitle","setCurrentTitle","contentRef","showTooltip","setShowTooltip","width","inputWidth","ref","sizerRef","containerWidth","containerRef","refreshMode","current","focus","setSelectionRange","length","value","scrollLeft","scrollWidth","innerHTML","replace","clientWidth","handleClick","handleBlur","formattedTitle","trim","handleChange","ev","target","handleKeyPress","key","preventDefault","blur"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/components/DynamicEditableTitle/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, {\n  ChangeEvent,\n  KeyboardEvent,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { css, SupersetTheme, t } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { useResizeDetector } from 'react-resize-detector';\n\nexport type DynamicEditableTitleProps = {\n  title: string;\n  placeholder: string;\n  onSave: (title: string) => void;\n  canEdit: boolean;\n  label: string | undefined;\n};\n\nconst titleStyles = (theme: SupersetTheme) => css`\n  display: flex;\n  font-size: ${theme.typography.sizes.xl}px;\n  font-weight: ${theme.typography.weights.bold};\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n\n  & .dynamic-title,\n  & .dynamic-title-input {\n    display: inline-block;\n    max-width: 100%;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  }\n\n  & .dynamic-title {\n    cursor: default;\n  }\n  & .dynamic-title-input {\n    border: none;\n    padding: 0;\n    outline: none;\n\n    &::placeholder {\n      color: ${theme.colors.grayscale.light1};\n    }\n  }\n\n  & .input-sizer {\n    position: absolute;\n    left: -9999px;\n    display: inline-block;\n  }\n`;\n\nexport const DynamicEditableTitle = ({\n  title,\n  placeholder,\n  onSave,\n  canEdit,\n  label,\n}: DynamicEditableTitleProps) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [currentTitle, setCurrentTitle] = useState(title || '');\n  const contentRef = useRef<HTMLInputElement>(null);\n  const [showTooltip, setShowTooltip] = useState(false);\n\n  const { width: inputWidth, ref: sizerRef } = useResizeDetector();\n  const { width: containerWidth, ref: containerRef } = useResizeDetector({\n    refreshMode: 'debounce',\n  });\n\n  useEffect(() => {\n    setCurrentTitle(title);\n  }, [title]);\n\n  useEffect(() => {\n    if (isEditing && contentRef?.current) {\n      contentRef.current.focus();\n      // move cursor and scroll to the end\n      if (contentRef.current.setSelectionRange) {\n        const { length } = contentRef.current.value;\n        contentRef.current.setSelectionRange(length, length);\n        contentRef.current.scrollLeft = contentRef.current.scrollWidth;\n      }\n    }\n  }, [isEditing]);\n\n  // a trick to make the input grow when user types text\n  // we make additional span component, place it somewhere out of view and copy input\n  // then we can measure the width of that span to resize the input element\n  useLayoutEffect(() => {\n    if (sizerRef?.current) {\n      sizerRef.current.innerHTML = (currentTitle || placeholder).replace(\n        /\\s/g,\n        '&nbsp;',\n      );\n    }\n  }, [currentTitle, placeholder, sizerRef]);\n\n  useEffect(() => {\n    if (\n      contentRef.current &&\n      contentRef.current.scrollWidth > contentRef.current.clientWidth\n    ) {\n      setShowTooltip(true);\n    } else {\n      setShowTooltip(false);\n    }\n  }, [inputWidth, containerWidth]);\n\n  const handleClick = useCallback(() => {\n    if (!canEdit || isEditing) {\n      return;\n    }\n    setIsEditing(true);\n  }, [canEdit, isEditing]);\n\n  const handleBlur = useCallback(() => {\n    if (!canEdit) {\n      return;\n    }\n    const formattedTitle = currentTitle.trim();\n    setCurrentTitle(formattedTitle);\n    if (title !== formattedTitle) {\n      onSave(formattedTitle);\n    }\n    setIsEditing(false);\n  }, [canEdit, currentTitle, onSave, title]);\n\n  const handleChange = useCallback(\n    (ev: ChangeEvent<HTMLInputElement>) => {\n      if (!canEdit || !isEditing) {\n        return;\n      }\n      setCurrentTitle(ev.target.value);\n    },\n    [canEdit, isEditing],\n  );\n\n  const handleKeyPress = useCallback(\n    (ev: KeyboardEvent<HTMLInputElement>) => {\n      if (!canEdit) {\n        return;\n      }\n      if (ev.key === 'Enter') {\n        ev.preventDefault();\n        contentRef.current?.blur();\n      }\n    },\n    [canEdit],\n  );\n\n  return (\n    <div css={titleStyles} ref={containerRef}>\n      <Tooltip\n        id=\"title-tooltip\"\n        title={showTooltip && currentTitle && !isEditing ? currentTitle : null}\n      >\n        {canEdit ? (\n          <input\n            data-test=\"editable-title-input\"\n            className=\"dynamic-title-input\"\n            aria-label={label ?? t('Title')}\n            ref={contentRef}\n            onChange={handleChange}\n            onBlur={handleBlur}\n            onClick={handleClick}\n            onKeyPress={handleKeyPress}\n            placeholder={placeholder}\n            value={currentTitle}\n            css={css`\n              cursor: ${isEditing ? 'text' : 'pointer'};\n\n              ${inputWidth &&\n              inputWidth > 0 &&\n              css`\n                width: ${inputWidth + 1}px;\n              `}\n            `}\n          />\n        ) : (\n          <span\n            className=\"dynamic-title\"\n            aria-label={label ?? t('Title')}\n            ref={contentRef}\n            data-test=\"editable-title\"\n          >\n            {currentTitle}\n          </span>\n        )}\n      </Tooltip>\n      <span ref={sizerRef} className=\"input-sizer\" aria-hidden tabIndex={-1} />\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}