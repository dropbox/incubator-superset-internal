{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};import { SupersetClient } from '@superset-ui/core';\n// update datasources index for Dashboard\nexport var DatasourcesAction;\n(function (DatasourcesAction) {\n  DatasourcesAction[\"SET_DATASOURCES\"] = \"SET_DATASOURCES\";\n  DatasourcesAction[\"SET_DATASOURCE\"] = \"SET_DATASOURCE\";\n})(DatasourcesAction || (DatasourcesAction = {}));\nexport function setDatasources(datasources) {\n  return {\n    type: DatasourcesAction.SET_DATASOURCES,\n    datasources };\n\n}\nexport function setDatasource(datasource, key) {\n  return {\n    type: DatasourcesAction.SET_DATASOURCE,\n    key,\n    datasource };\n\n}\nexport function fetchDatasourceMetadata(key) {\n  return (dispatch, getState) => {\n    const { datasources } = getState();\n    const datasource = datasources[key];\n    if (datasource) {\n      return dispatch(setDatasource(datasource, key));\n    }\n    return SupersetClient.get({\n      endpoint: `/superset/fetch_datasource_metadata?datasourceKey=${key}` }).\n    then((_ref) => {let { json } = _ref;return dispatch(setDatasource(json, key));});\n  };\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(DatasourcesAction, \"DatasourcesAction\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/actions/datasources.ts\");reactHotLoader.register(setDatasources, \"setDatasources\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/actions/datasources.ts\");reactHotLoader.register(setDatasource, \"setDatasource\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/actions/datasources.ts\");reactHotLoader.register(fetchDatasourceMetadata, \"fetchDatasourceMetadata\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/actions/datasources.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"uSAmBA,SAASA,cAAT,QAA+B,mBAA/B;AAGA;AACA,WAAYC,iBAAZ;AAAA,WAAYA,iBAAZ,EAA6B;EAC3BA;EACAA;AACD,CAHD,EAAYA,iBAAiB,KAAjBA,iBAAiB,MAA7B;AAgBA,OAAM,SAAUC,cAAV,CAAyBC,WAAzB,EAAyD;EAC7D,OAAO;IACLC,IAAI,EAAEH,iBAAiB,CAACI,eADnB;IAELF,WAFK,EAAP;;AAID;AAED,OAAM,SAAUG,aAAV,CAAwBC,UAAxB,EAAgDC,GAAhD,EAA2D;EAC/D,OAAO;IACLJ,IAAI,EAAEH,iBAAiB,CAACQ,cADnB;IAELD,GAFK;IAGLD,UAHK,EAAP;;AAKD;AAED,OAAM,SAAUG,uBAAV,CAAkCF,GAAlC,EAA6C;EACjD,OAAO,CAACG,QAAD,EAAqBC,QAArB,KAAkD;IACvD,MAAM,EAAET,WAAF,KAAkBS,QAAQ,EAAhC;IACA,MAAML,UAAU,GAAGJ,WAAW,CAACK,GAAD,CAA9B;IAEA,IAAID,UAAJ,EAAgB;MACd,OAAOI,QAAQ,CAACL,aAAa,CAACC,UAAD,EAAaC,GAAb,CAAd,CAAf;IACD;IAED,OAAOR,cAAc,CAACa,GAAf,CAAmB;MACxBC,QAAQ,EAAE,qDAAqDN,GAAG,EAD1C,EAAnB;IAEJO,IAFI,CAEC,eAAC,EAAEC,IAAF,EAAD,eAAcL,QAAQ,CAACL,aAAa,CAACU,IAAD,EAAqBR,GAArB,CAAd,CAAtB,EAFD,CAAP;EAGD,CAXD;AAYD,C,iLA5CWP,iB,wJAgBIC,c,qJAOAI,a,oJAQAI,uB","names":["SupersetClient","DatasourcesAction","setDatasources","datasources","type","SET_DATASOURCES","setDatasource","datasource","key","SET_DATASOURCE","fetchDatasourceMetadata","dispatch","getState","get","endpoint","then","json"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/actions/datasources.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { Dispatch } from 'redux';\nimport { SupersetClient } from '@superset-ui/core';\nimport { Datasource, RootState } from 'src/dashboard/types';\n\n// update datasources index for Dashboard\nexport enum DatasourcesAction {\n  SET_DATASOURCES = 'SET_DATASOURCES',\n  SET_DATASOURCE = 'SET_DATASOURCE',\n}\n\nexport type DatasourcesActionPayload =\n  | {\n      type: DatasourcesAction.SET_DATASOURCES;\n      datasources: Datasource[] | null;\n    }\n  | {\n      type: DatasourcesAction.SET_DATASOURCE;\n      key: Datasource['uid'];\n      datasource: Datasource;\n    };\n\nexport function setDatasources(datasources: Datasource[] | null) {\n  return {\n    type: DatasourcesAction.SET_DATASOURCES,\n    datasources,\n  };\n}\n\nexport function setDatasource(datasource: Datasource, key: string) {\n  return {\n    type: DatasourcesAction.SET_DATASOURCE,\n    key,\n    datasource,\n  };\n}\n\nexport function fetchDatasourceMetadata(key: string) {\n  return (dispatch: Dispatch, getState: () => RootState) => {\n    const { datasources } = getState();\n    const datasource = datasources[key];\n\n    if (datasource) {\n      return dispatch(setDatasource(datasource, key));\n    }\n\n    return SupersetClient.get({\n      endpoint: `/superset/fetch_datasource_metadata?datasourceKey=${key}`,\n    }).then(({ json }) => dispatch(setDatasource(json as Datasource, key)));\n  };\n}\n"]},"metadata":{},"sourceType":"module"}