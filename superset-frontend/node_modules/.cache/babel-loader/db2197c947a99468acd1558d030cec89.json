{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useState, forwardRef } from 'react';\nimport Loading from '../Loading';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nfunction DefaultPlaceholder(_ref) {let { width, height, showLoadingForImport = false, placeholderStyle: style } = _ref;\n  return (\n    // since `width` defaults to 100%, we can display the placeholder once\n    // height is specified.\n    height && ___EmotionJSX(\"div\", { key: \"async-asm-placeholder\", style: { width, height, ...style } },\n    showLoadingForImport && ___EmotionJSX(Loading, { position: \"floating\" })) ||\n\n    // `|| null` is for in case of height=0.\n    null);\n}\n/**\n * Asynchronously import an ES module as a React component, render a placeholder\n * first (if provided) and re-render once import is complete.\n */\nexport default function AsyncEsmComponent(\n/**\n * A promise generator that returns the React component to render.\n */\nloadComponent,\n/**\n * Placeholder while still importing.\n */\nplaceholder) {if (placeholder === void 0) {placeholder = DefaultPlaceholder;}\n  let promise;\n  let component;\n  /**\n   * Safely wait for promise, make sure the loader function only execute once.\n   */\n  function waitForPromise() {\n    if (!promise) {\n      // load component on initialization\n      promise =\n      loadComponent instanceof Promise ? loadComponent : loadComponent();\n    }\n    if (!component) {\n      promise.then((result) => {\n        component = result.default ||\n        result;\n      });\n    }\n    return promise;\n  }\n  const AsyncComponent = /*#__PURE__*/forwardRef(function AsyncComponent(props, ref) {\n    const [loaded, setLoaded] = useState(component !== undefined);\n    useEffect(() => {\n      let isMounted = true;\n      if (!loaded) {\n        // update state to trigger a re-render\n        waitForPromise().then(() => {\n          if (isMounted) {\n            setLoaded(true);\n          }\n        });\n      }\n      return () => {\n        isMounted = false;\n      };\n    });\n    const Component = component || placeholder;\n    return Component ?\n    // placeholder does not get the ref\n    ___EmotionJSX(Component, _extends({ ref: Component === component ? ref : null }, props)) : null;\n  });\n  // preload the async component before rendering\n  AsyncComponent.preload = waitForPromise;\n  return AsyncComponent;\n}","map":{"version":3,"mappings":"+DAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,KAAP,IAEEC,SAFF,EAGEC,QAHF,EAKEC,UALF,QAMO,OANP;AAOA,OAAOC,OAAP,MAAoB,YAApB,C;AAWA,SAASC,kBAAT,OAKmB,KALS,EAC1BC,KAD0B,EAE1BC,MAF0B,EAG1BC,oBAAoB,GAAG,KAHG,EAI1BC,gBAAgB,EAAEC,KAJQ,EAKT;EACjB;IACE;IACA;IACCH,MAAM,IACL,uBAAK,GAAG,EAAC,uBAAT,EAAiC,KAAK,EAAE,EAAED,KAAF,EAASC,MAAT,EAAiB,GAAGG,KAApB,EAAxC;IACGF,oBAAoB,IAAI,cAAC,OAAD,IAAS,QAAQ,EAAC,UAAlB,GAD3B,CADF;;IAKA;IACA,IATF;AAWD;AAED;;;;AAIA,eAAc,SAAUG,iBAAV;AAIZ;;;AAGAC,aAPY;AAQZ;;;AAGAC,WAXY,EAaiB,KAF7BA,WAE6B,cAF7BA,WAE6B,GAAlBR,kBAAkB;EAI7B,IAAIS,OAAJ;EACA,IAAIC,SAAJ;EAEA;;;EAGA,SAASC,cAAT,GAAuB;IACrB,IAAI,CAACF,OAAL,EAAc;MACZ;MACAA,OAAO;MACLF,aAAa,YAAYK,OAAzB,GAAmCL,aAAnC,GAAmDA,aAAa,EADlE;IAED;IACD,IAAI,CAACG,SAAL,EAAgB;MACdD,OAAO,CAACI,IAAR,CAAa,OAAM,KAAG;QACpBH,SAAS,GAAKI,MAA+C,CAACC,OAAhD;QACZD,MADF;MAED,CAHD;IAID;IACD,OAAOL,OAAP;EACD;EASD,MAAMO,cAAc,gBAAmBlB,UAAU,CAAC,SAASkB,cAAT,CAChDC,KADgD,EAEhDC,GAFgD,EAEF;IAE9C,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBvB,QAAQ,CAACa,SAAS,KAAKW,SAAf,CAApC;IACAzB,SAAS,CAAC,MAAK;MACb,IAAI0B,SAAS,GAAG,IAAhB;MACA,IAAI,CAACH,MAAL,EAAa;QACX;QACAR,cAAc,GAAGE,IAAjB,CAAsB,MAAK;UACzB,IAAIS,SAAJ,EAAe;YACbF,SAAS,CAAC,IAAD,CAAT;UACD;QACF,CAJD;MAKD;MACD,OAAO,MAAK;QACVE,SAAS,GAAG,KAAZ;MACD,CAFD;IAGD,CAbQ,CAAT;IAcA,MAAMC,SAAS,GAAGb,SAAS,IAAIF,WAA/B;IACA,OAAOe,SAAS;IACd;IACA,cAAC,SAAD,aAAW,GAAG,EAAEA,SAAS,KAAKb,SAAd,GAA0BQ,GAA1B,GAAgC,IAAhD,IAA0DD,KAA1D,EAFc,GAGZ,IAHJ;EAID,CAxBgD,CAAjD;EAyBA;EACAD,cAAc,CAACQ,OAAf,GAAyBb,cAAzB;EAEA,OAAOK,cAAP;AAGD","names":["React","useEffect","useState","forwardRef","Loading","DefaultPlaceholder","width","height","showLoadingForImport","placeholderStyle","style","AsyncEsmComponent","loadComponent","placeholder","promise","component","waitForPromise","Promise","then","result","default","AsyncComponent","props","ref","loaded","setLoaded","undefined","isMounted","Component","preload"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/AsyncEsmComponent/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, {\n  CSSProperties,\n  useEffect,\n  useState,\n  RefObject,\n  forwardRef,\n} from 'react';\nimport Loading from '../Loading';\n\nexport type PlaceholderProps = {\n  showLoadingForImport?: boolean;\n  width?: string | number;\n  height?: string | number;\n  placeholderStyle?: CSSProperties;\n} & {\n  [key: string]: any;\n};\n\nfunction DefaultPlaceholder({\n  width,\n  height,\n  showLoadingForImport = false,\n  placeholderStyle: style,\n}: PlaceholderProps) {\n  return (\n    // since `width` defaults to 100%, we can display the placeholder once\n    // height is specified.\n    (height && (\n      <div key=\"async-asm-placeholder\" style={{ width, height, ...style }}>\n        {showLoadingForImport && <Loading position=\"floating\" />}\n      </div>\n    )) ||\n    // `|| null` is for in case of height=0.\n    null\n  );\n}\n\n/**\n * Asynchronously import an ES module as a React component, render a placeholder\n * first (if provided) and re-render once import is complete.\n */\nexport default function AsyncEsmComponent<\n  P = PlaceholderProps,\n  M = React.ComponentType<P> | { default: React.ComponentType<P> },\n>(\n  /**\n   * A promise generator that returns the React component to render.\n   */\n  loadComponent: Promise<M> | (() => Promise<M>),\n  /**\n   * Placeholder while still importing.\n   */\n  placeholder: React.ComponentType<\n    PlaceholderProps & Partial<P>\n  > | null = DefaultPlaceholder,\n) {\n  // component props + placeholder props\n  type FullProps = P & PlaceholderProps;\n  let promise: Promise<M> | undefined;\n  let component: React.ComponentType<FullProps>;\n\n  /**\n   * Safely wait for promise, make sure the loader function only execute once.\n   */\n  function waitForPromise() {\n    if (!promise) {\n      // load component on initialization\n      promise =\n        loadComponent instanceof Promise ? loadComponent : loadComponent();\n    }\n    if (!component) {\n      promise.then(result => {\n        component = ((result as { default?: React.ComponentType<P> }).default ||\n          result) as React.ComponentType<FullProps>;\n      });\n    }\n    return promise;\n  }\n\n  type AsyncComponent = React.ForwardRefExoticComponent<\n    React.PropsWithoutRef<FullProps> &\n      React.RefAttributes<React.ComponentType<FullProps>>\n  > & {\n    preload?: typeof waitForPromise;\n  };\n\n  const AsyncComponent: AsyncComponent = forwardRef(function AsyncComponent(\n    props: FullProps,\n    ref: RefObject<React.ComponentType<FullProps>>,\n  ) {\n    const [loaded, setLoaded] = useState(component !== undefined);\n    useEffect(() => {\n      let isMounted = true;\n      if (!loaded) {\n        // update state to trigger a re-render\n        waitForPromise().then(() => {\n          if (isMounted) {\n            setLoaded(true);\n          }\n        });\n      }\n      return () => {\n        isMounted = false;\n      };\n    });\n    const Component = component || placeholder;\n    return Component ? (\n      // placeholder does not get the ref\n      <Component ref={Component === component ? ref : null} {...props} />\n    ) : null;\n  });\n  // preload the async component before rendering\n  AsyncComponent.preload = waitForPromise;\n\n  return AsyncComponent as AsyncComponent & {\n    preload: typeof waitForPromise;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}