{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-env browser */\nimport React from 'react';\nimport { Radio } from 'src/components/Radio';\nimport { Input } from 'src/components/Input';\nimport Button from 'src/components/Button';\nimport { t } from '@superset-ui/core';\nimport ModalTrigger from 'src/components/ModalTrigger';\nimport Checkbox from 'src/components/Checkbox';\nimport { SAVE_TYPE_OVERWRITE, SAVE_TYPE_NEWDASHBOARD } from 'src/dashboard/util/constants';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst defaultProps = {\n  saveType: SAVE_TYPE_OVERWRITE,\n  colorNamespace: undefined,\n  colorScheme: undefined,\n  shouldPersistRefreshFrequency: false };\n\nclass SaveModal extends React.PureComponent {\n\n\n\n  constructor(props) {\n    super(props);this.modal = void 0;this.onSave = void 0;\n    this.state = {\n      saveType: props.saveType,\n      newDashName: `${props.dashboardTitle} ${t('[copy]')}`,\n      duplicateSlices: false };\n\n    this.handleSaveTypeChange = this.handleSaveTypeChange.bind(this);\n    this.handleNameChange = this.handleNameChange.bind(this);\n    this.saveDashboard = this.saveDashboard.bind(this);\n    this.toggleDuplicateSlices = this.toggleDuplicateSlices.bind(this);\n    this.onSave = this.props.onSave.bind(this);\n    this.modal = /*#__PURE__*/React.createRef();\n  }\n  toggleDuplicateSlices() {\n    this.setState((prevState) => ({\n      duplicateSlices: !prevState.duplicateSlices }));\n\n  }\n  handleSaveTypeChange(event) {\n    this.setState({\n      saveType: event.target.value });\n\n  }\n  handleNameChange(name) {\n    this.setState({\n      newDashName: name,\n      saveType: SAVE_TYPE_NEWDASHBOARD });\n\n  }\n  saveDashboard() {var _dashboardInfo$metada;\n    const { saveType, newDashName } = this.state;\n    const { dashboardTitle, dashboardInfo, layout: positions, customCss, dashboardId, refreshFrequency: currentRefreshFrequency, shouldPersistRefreshFrequency, lastModifiedTime } = this.props;\n    // check refresh frequency is for current session or persist\n    const refreshFrequency = shouldPersistRefreshFrequency ?\n    currentRefreshFrequency : (_dashboardInfo$metada =\n    dashboardInfo.metadata) == null ? void 0 : _dashboardInfo$metada.refresh_frequency; // eslint-disable camelcase\n    const data = {\n      certified_by: dashboardInfo.certified_by,\n      certification_details: dashboardInfo.certification_details,\n      css: customCss,\n      dashboard_title: saveType === SAVE_TYPE_NEWDASHBOARD ? newDashName : dashboardTitle,\n      duplicate_slices: this.state.duplicateSlices,\n      last_modified_time: lastModifiedTime,\n      owners: dashboardInfo.owners,\n      roles: dashboardInfo.roles,\n      metadata: {\n        ...(dashboardInfo == null ? void 0 : dashboardInfo.metadata),\n        positions,\n        refresh_frequency: refreshFrequency } };\n\n\n    if (saveType === SAVE_TYPE_NEWDASHBOARD && !newDashName) {\n      this.props.addDangerToast(t('You must pick a name for the new dashboard'));\n    } else\n    {var _this$modal, _this$modal$current;\n      this.onSave(data, dashboardId, saveType).then((resp) => {var _resp$json, _resp$json$result;\n        if (saveType === SAVE_TYPE_NEWDASHBOARD && (_resp$json = resp.json) != null && (_resp$json$result = _resp$json.result) != null && _resp$json$result.id) {\n          window.location.href = `/superset/dashboard/${resp.json.result.id}/`;\n        }\n      });\n      (_this$modal = this.modal) == null ? void 0 : (_this$modal$current = _this$modal.current) == null ? void 0 : _this$modal$current.close == null ? void 0 : _this$modal$current.close();\n    }\n  }\n  render() {\n    return ___EmotionJSX(ModalTrigger, { ref: this.modal, triggerNode: this.props.triggerNode, modalTitle: t('Save dashboard'), modalBody: ___EmotionJSX(\"div\", null,\n      ___EmotionJSX(Radio, { value: SAVE_TYPE_OVERWRITE, onChange: this.handleSaveTypeChange, checked: this.state.saveType === SAVE_TYPE_OVERWRITE, disabled: !this.props.canOverwrite },\n      t('Overwrite Dashboard [%s]', this.props.dashboardTitle)),\n\n      ___EmotionJSX(\"hr\", null),\n      ___EmotionJSX(Radio, { value: SAVE_TYPE_NEWDASHBOARD, onChange: this.handleSaveTypeChange, checked: this.state.saveType === SAVE_TYPE_NEWDASHBOARD },\n      t('Save as:')),\n\n      ___EmotionJSX(Input, { type: \"text\", placeholder: t('[dashboard name]'), value: this.state.newDashName, onFocus: (e) => this.handleNameChange(e.target.value), onChange: (e) => this.handleNameChange(e.target.value) }),\n      ___EmotionJSX(\"div\", { className: \"m-l-25 m-t-5\" },\n      ___EmotionJSX(Checkbox, { checked: this.state.duplicateSlices, onChange: () => this.toggleDuplicateSlices() }),\n      ___EmotionJSX(\"span\", { className: \"m-l-5\" }, t('also copy (duplicate) charts')))),\n\n      modalFooter: ___EmotionJSX(\"div\", null,\n      ___EmotionJSX(Button, { buttonStyle: \"primary\", onClick: this.saveDashboard },\n      t('Save'))) });\n\n\n  }}SaveModal.defaultProps = defaultProps;\n\nexport default SaveModal;","map":{"version":3,"mappings":"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","names":["React","Radio","Input","Button","t","ModalTrigger","Checkbox","SAVE_TYPE_OVERWRITE","SAVE_TYPE_NEWDASHBOARD","defaultProps","saveType","colorNamespace","undefined","colorScheme","shouldPersistRefreshFrequency","SaveModal","PureComponent","constructor","props","modal","onSave","state","newDashName","dashboardTitle","duplicateSlices","handleSaveTypeChange","bind","handleNameChange","saveDashboard","toggleDuplicateSlices","createRef","setState","prevState","event","target","value","name","dashboardInfo","layout","positions","customCss","dashboardId","refreshFrequency","currentRefreshFrequency","lastModifiedTime","metadata","refresh_frequency","data","certified_by","certification_details","css","dashboard_title","duplicate_slices","last_modified_time","owners","roles","addDangerToast","then","resp","json","result","id","window","location","href","current","close","render","triggerNode","canOverwrite","e"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/dashboard/components/SaveModal.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-env browser */\nimport React from 'react';\nimport { Radio } from 'src/components/Radio';\nimport { RadioChangeEvent } from 'src/components';\nimport { Input } from 'src/components/Input';\nimport Button from 'src/components/Button';\nimport { t, JsonResponse } from '@superset-ui/core';\n\nimport ModalTrigger, { ModalTriggerRef } from 'src/components/ModalTrigger';\nimport Checkbox from 'src/components/Checkbox';\nimport {\n  SAVE_TYPE_OVERWRITE,\n  SAVE_TYPE_NEWDASHBOARD,\n} from 'src/dashboard/util/constants';\n\ntype SaveType = typeof SAVE_TYPE_OVERWRITE | typeof SAVE_TYPE_NEWDASHBOARD;\n\ntype SaveModalProps = {\n  addSuccessToast: (arg: string) => void;\n  addDangerToast: (arg: string) => void;\n  dashboardId: number;\n  dashboardTitle: string;\n  dashboardInfo: Record<string, any>;\n  expandedSlices: Record<string, any>;\n  layout: Record<string, any>;\n  saveType: SaveType;\n  triggerNode: JSX.Element;\n  customCss: string;\n  colorNamespace?: string;\n  colorScheme?: string;\n  onSave: (data: any, id: number | string, saveType: SaveType) => void;\n  canOverwrite: boolean;\n  shouldPersistRefreshFrequency: boolean;\n  refreshFrequency: number;\n  lastModifiedTime: number;\n};\n\ntype SaveModalState = {\n  saveType: SaveType;\n  newDashName: string;\n  duplicateSlices: boolean;\n};\n\nconst defaultProps = {\n  saveType: SAVE_TYPE_OVERWRITE,\n  colorNamespace: undefined,\n  colorScheme: undefined,\n  shouldPersistRefreshFrequency: false,\n};\n\nclass SaveModal extends React.PureComponent<SaveModalProps, SaveModalState> {\n  static defaultProps = defaultProps;\n\n  modal: ModalTriggerRef | null;\n\n  onSave: (\n    data: Record<string, any>,\n    dashboardId: number | string,\n    saveType: SaveType,\n  ) => Promise<JsonResponse>;\n\n  constructor(props: SaveModalProps) {\n    super(props);\n    this.state = {\n      saveType: props.saveType,\n      newDashName: `${props.dashboardTitle} ${t('[copy]')}`,\n      duplicateSlices: false,\n    };\n\n    this.handleSaveTypeChange = this.handleSaveTypeChange.bind(this);\n    this.handleNameChange = this.handleNameChange.bind(this);\n    this.saveDashboard = this.saveDashboard.bind(this);\n    this.toggleDuplicateSlices = this.toggleDuplicateSlices.bind(this);\n    this.onSave = this.props.onSave.bind(this);\n    this.modal = React.createRef() as ModalTriggerRef;\n  }\n\n  toggleDuplicateSlices(): void {\n    this.setState(prevState => ({\n      duplicateSlices: !prevState.duplicateSlices,\n    }));\n  }\n\n  handleSaveTypeChange(event: RadioChangeEvent) {\n    this.setState({\n      saveType: (event.target as HTMLInputElement).value as SaveType,\n    });\n  }\n\n  handleNameChange(name: string) {\n    this.setState({\n      newDashName: name,\n      saveType: SAVE_TYPE_NEWDASHBOARD,\n    });\n  }\n\n  saveDashboard() {\n    const { saveType, newDashName } = this.state;\n    const {\n      dashboardTitle,\n      dashboardInfo,\n      layout: positions,\n      customCss,\n      dashboardId,\n      refreshFrequency: currentRefreshFrequency,\n      shouldPersistRefreshFrequency,\n      lastModifiedTime,\n    } = this.props;\n\n    // check refresh frequency is for current session or persist\n    const refreshFrequency = shouldPersistRefreshFrequency\n      ? currentRefreshFrequency\n      : dashboardInfo.metadata?.refresh_frequency; // eslint-disable camelcase\n\n    const data = {\n      certified_by: dashboardInfo.certified_by,\n      certification_details: dashboardInfo.certification_details,\n      css: customCss,\n      dashboard_title:\n        saveType === SAVE_TYPE_NEWDASHBOARD ? newDashName : dashboardTitle,\n      duplicate_slices: this.state.duplicateSlices,\n      last_modified_time: lastModifiedTime,\n      owners: dashboardInfo.owners,\n      roles: dashboardInfo.roles,\n      metadata: {\n        ...dashboardInfo?.metadata,\n        positions,\n        refresh_frequency: refreshFrequency,\n      },\n    };\n\n    if (saveType === SAVE_TYPE_NEWDASHBOARD && !newDashName) {\n      this.props.addDangerToast(\n        t('You must pick a name for the new dashboard'),\n      );\n    } else {\n      this.onSave(data, dashboardId, saveType).then((resp: JsonResponse) => {\n        if (saveType === SAVE_TYPE_NEWDASHBOARD && resp.json?.result?.id) {\n          window.location.href = `/superset/dashboard/${resp.json.result.id}/`;\n        }\n      });\n      this.modal?.current?.close?.();\n    }\n  }\n\n  render() {\n    return (\n      <ModalTrigger\n        ref={this.modal}\n        triggerNode={this.props.triggerNode}\n        modalTitle={t('Save dashboard')}\n        modalBody={\n          <div>\n            <Radio\n              value={SAVE_TYPE_OVERWRITE}\n              onChange={this.handleSaveTypeChange}\n              checked={this.state.saveType === SAVE_TYPE_OVERWRITE}\n              disabled={!this.props.canOverwrite}\n            >\n              {t('Overwrite Dashboard [%s]', this.props.dashboardTitle)}\n            </Radio>\n            <hr />\n            <Radio\n              value={SAVE_TYPE_NEWDASHBOARD}\n              onChange={this.handleSaveTypeChange}\n              checked={this.state.saveType === SAVE_TYPE_NEWDASHBOARD}\n            >\n              {t('Save as:')}\n            </Radio>\n            <Input\n              type=\"text\"\n              placeholder={t('[dashboard name]')}\n              value={this.state.newDashName}\n              onFocus={e => this.handleNameChange(e.target.value)}\n              onChange={e => this.handleNameChange(e.target.value)}\n            />\n            <div className=\"m-l-25 m-t-5\">\n              <Checkbox\n                checked={this.state.duplicateSlices}\n                onChange={() => this.toggleDuplicateSlices()}\n              />\n              <span className=\"m-l-5\">{t('also copy (duplicate) charts')}</span>\n            </div>\n          </div>\n        }\n        modalFooter={\n          <div>\n            <Button\n              data-test=\"modal-save-dashboard-button\"\n              buttonStyle=\"primary\"\n              onClick={this.saveDashboard}\n            >\n              {t('Save')}\n            </Button>\n          </div>\n        }\n      />\n    );\n  }\n}\n\nexport default SaveModal;\n"]},"metadata":{},"sourceType":"module"}