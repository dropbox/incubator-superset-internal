{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\";import _isEmpty from \"lodash/isEmpty\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { tn, t, isAdhocColumn } from '@superset-ui/core';\nimport { isColumnMeta, withDndFallback } from '@superset-ui/chart-controls';\n\nimport DndSelectLabel from 'src/explore/components/controls/DndColumnSelectControl/DndSelectLabel';\nimport OptionWrapper from 'src/explore/components/controls/DndColumnSelectControl/OptionWrapper';\nimport { OptionSelector } from 'src/explore/components/controls/DndColumnSelectControl/utils';\nimport { DndItemType } from 'src/explore/components/DndItemType';\nimport ColumnSelectPopoverTrigger from './ColumnSelectPopoverTrigger';\nimport SelectControl from '../SelectControl';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nfunction DndColumnSelect(props) {\n  const { value, options, multi = true, onChange, canDelete = true, ghostButtonText, name, label, isTemporal } = props;\n  const [newColumnPopoverVisible, setNewColumnPopoverVisible] = useState(false);\n  const optionSelector = useMemo(() => {\n    const optionsMap = Object.fromEntries(options.map((option) => [option.column_name, option]));\n    return new OptionSelector(optionsMap, multi, value);\n  }, [multi, options, value]);\n  const onDrop = useCallback((item) => {\n    const column = item.value;\n    if (!optionSelector.multi && !_isEmpty(optionSelector.values)) {\n      optionSelector.replace(0, column.column_name);\n    } else\n    {\n      optionSelector.add(column.column_name);\n    }\n    onChange(optionSelector.getValues());\n  }, [onChange, optionSelector]);\n  const canDrop = useCallback((item) => {\n    const columnName = item.value.column_name;\n    return columnName in optionSelector.options && !optionSelector.has(columnName);\n  }, [optionSelector]);\n  const onClickClose = useCallback((index) => {\n    optionSelector.del(index);\n    onChange(optionSelector.getValues());\n  }, [onChange, optionSelector]);\n  const onShiftOptions = useCallback((dragIndex, hoverIndex) => {\n    optionSelector.swap(dragIndex, hoverIndex);\n    onChange(optionSelector.getValues());\n  }, [onChange, optionSelector]);\n  const valuesRenderer = useCallback(() => optionSelector.values.map((column, idx) => {\n    const datasourceWarningMessage = isAdhocColumn(column) && column.datasourceWarning ?\n    t('This column might be incompatible with current dataset') :\n    undefined;\n    return ___EmotionJSX(ColumnSelectPopoverTrigger, { key: idx, columns: options, onColumnEdit: (newColumn) => {\n        if (isColumnMeta(newColumn)) {\n          optionSelector.replace(idx, newColumn.column_name);\n        } else\n        {\n          optionSelector.replace(idx, newColumn);\n        }\n        onChange(optionSelector.getValues());\n      }, editedColumn: column, isTemporal: isTemporal },\n    ___EmotionJSX(OptionWrapper, { key: idx, index: idx, clickClose: onClickClose, onShiftOptions: onShiftOptions, type: `${DndItemType.ColumnOption}_${name}_${label}`, canDelete: canDelete, column: column, datasourceWarningMessage: datasourceWarningMessage, withCaret: true }));\n\n  }), [\n  canDelete,\n  isTemporal,\n  label,\n  name,\n  onChange,\n  onClickClose,\n  onShiftOptions,\n  optionSelector,\n  options]);\n\n  const addNewColumnWithPopover = useCallback((newColumn) => {\n    if (isColumnMeta(newColumn)) {\n      optionSelector.add(newColumn.column_name);\n    } else\n    {\n      optionSelector.add(newColumn);\n    }\n    onChange(optionSelector.getValues());\n  }, [onChange, optionSelector]);\n  const togglePopover = useCallback((visible) => {\n    setNewColumnPopoverVisible(visible);\n  }, []);\n  const closePopover = useCallback(() => {\n    togglePopover(false);\n  }, [togglePopover]);\n  const openPopover = useCallback(() => {\n    togglePopover(true);\n  }, [togglePopover]);\n  const labelGhostButtonText = useMemo(() => ghostButtonText != null ? ghostButtonText :\n  tn('Drop a column here or click', 'Drop columns here or click', multi ? 2 : 1), [ghostButtonText, multi]);\n  return ___EmotionJSX(\"div\", null,\n  ___EmotionJSX(DndSelectLabel, _extends({ onDrop: onDrop, canDrop: canDrop, valuesRenderer: valuesRenderer, accept: DndItemType.Column, displayGhostButton: multi || optionSelector.values.length === 0, ghostButtonText: labelGhostButtonText, onClickGhostButton: openPopover }, props)),\n  ___EmotionJSX(ColumnSelectPopoverTrigger, { columns: options, onColumnEdit: addNewColumnWithPopover, isControlledComponent: true, togglePopover: togglePopover, closePopover: closePopover, visible: newColumnPopoverVisible, isTemporal: isTemporal },\n  ___EmotionJSX(\"div\", null)));\n\n\n}\nconst DndColumnSelectWithFallback = withDndFallback(DndColumnSelect, SelectControl);\nexport { DndColumnSelectWithFallback as DndColumnSelect };","map":{"version":3,"mappings":"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","names":["React","useCallback","useMemo","useState","tn","t","isAdhocColumn","isColumnMeta","withDndFallback","DndSelectLabel","OptionWrapper","OptionSelector","DndItemType","ColumnSelectPopoverTrigger","SelectControl","DndColumnSelect","props","value","options","multi","onChange","canDelete","ghostButtonText","name","label","isTemporal","newColumnPopoverVisible","setNewColumnPopoverVisible","optionSelector","optionsMap","Object","fromEntries","map","option","column_name","onDrop","item","column","values","replace","add","getValues","canDrop","columnName","has","onClickClose","index","del","onShiftOptions","dragIndex","hoverIndex","swap","valuesRenderer","idx","datasourceWarningMessage","datasourceWarning","undefined","newColumn","ColumnOption","addNewColumnWithPopover","togglePopover","visible","closePopover","openPopover","labelGhostButtonText","Column","length","DndColumnSelectWithFallback"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndColumnSelect.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useMemo, useState } from 'react';\nimport {\n  AdhocColumn,\n  tn,\n  QueryFormColumn,\n  t,\n  isAdhocColumn,\n} from '@superset-ui/core';\nimport {\n  ColumnMeta,\n  isColumnMeta,\n  withDndFallback,\n} from '@superset-ui/chart-controls';\nimport { isEmpty } from 'lodash';\nimport DndSelectLabel from 'src/explore/components/controls/DndColumnSelectControl/DndSelectLabel';\nimport OptionWrapper from 'src/explore/components/controls/DndColumnSelectControl/OptionWrapper';\nimport { OptionSelector } from 'src/explore/components/controls/DndColumnSelectControl/utils';\nimport { DatasourcePanelDndItem } from 'src/explore/components/DatasourcePanel/types';\nimport { DndItemType } from 'src/explore/components/DndItemType';\nimport ColumnSelectPopoverTrigger from './ColumnSelectPopoverTrigger';\nimport { DndControlProps } from './types';\nimport SelectControl from '../SelectControl';\n\nexport type DndColumnSelectProps = DndControlProps<QueryFormColumn> & {\n  options: ColumnMeta[];\n  isTemporal?: boolean;\n};\n\nfunction DndColumnSelect(props: DndColumnSelectProps) {\n  const {\n    value,\n    options,\n    multi = true,\n    onChange,\n    canDelete = true,\n    ghostButtonText,\n    name,\n    label,\n    isTemporal,\n  } = props;\n  const [newColumnPopoverVisible, setNewColumnPopoverVisible] = useState(false);\n\n  const optionSelector = useMemo(() => {\n    const optionsMap = Object.fromEntries(\n      options.map(option => [option.column_name, option]),\n    );\n\n    return new OptionSelector(optionsMap, multi, value);\n  }, [multi, options, value]);\n\n  const onDrop = useCallback(\n    (item: DatasourcePanelDndItem) => {\n      const column = item.value as ColumnMeta;\n      if (!optionSelector.multi && !isEmpty(optionSelector.values)) {\n        optionSelector.replace(0, column.column_name);\n      } else {\n        optionSelector.add(column.column_name);\n      }\n      onChange(optionSelector.getValues());\n    },\n    [onChange, optionSelector],\n  );\n\n  const canDrop = useCallback(\n    (item: DatasourcePanelDndItem) => {\n      const columnName = (item.value as ColumnMeta).column_name;\n      return (\n        columnName in optionSelector.options && !optionSelector.has(columnName)\n      );\n    },\n    [optionSelector],\n  );\n\n  const onClickClose = useCallback(\n    (index: number) => {\n      optionSelector.del(index);\n      onChange(optionSelector.getValues());\n    },\n    [onChange, optionSelector],\n  );\n\n  const onShiftOptions = useCallback(\n    (dragIndex: number, hoverIndex: number) => {\n      optionSelector.swap(dragIndex, hoverIndex);\n      onChange(optionSelector.getValues());\n    },\n    [onChange, optionSelector],\n  );\n\n  const valuesRenderer = useCallback(\n    () =>\n      optionSelector.values.map((column, idx) => {\n        const datasourceWarningMessage =\n          isAdhocColumn(column) && column.datasourceWarning\n            ? t('This column might be incompatible with current dataset')\n            : undefined;\n        return (\n          <ColumnSelectPopoverTrigger\n            key={idx}\n            columns={options}\n            onColumnEdit={newColumn => {\n              if (isColumnMeta(newColumn)) {\n                optionSelector.replace(idx, newColumn.column_name);\n              } else {\n                optionSelector.replace(idx, newColumn as AdhocColumn);\n              }\n              onChange(optionSelector.getValues());\n            }}\n            editedColumn={column}\n            isTemporal={isTemporal}\n          >\n            <OptionWrapper\n              key={idx}\n              index={idx}\n              clickClose={onClickClose}\n              onShiftOptions={onShiftOptions}\n              type={`${DndItemType.ColumnOption}_${name}_${label}`}\n              canDelete={canDelete}\n              column={column}\n              datasourceWarningMessage={datasourceWarningMessage}\n              withCaret\n            />\n          </ColumnSelectPopoverTrigger>\n        );\n      }),\n    [\n      canDelete,\n      isTemporal,\n      label,\n      name,\n      onChange,\n      onClickClose,\n      onShiftOptions,\n      optionSelector,\n      options,\n    ],\n  );\n\n  const addNewColumnWithPopover = useCallback(\n    (newColumn: ColumnMeta | AdhocColumn) => {\n      if (isColumnMeta(newColumn)) {\n        optionSelector.add(newColumn.column_name);\n      } else {\n        optionSelector.add(newColumn as AdhocColumn);\n      }\n      onChange(optionSelector.getValues());\n    },\n    [onChange, optionSelector],\n  );\n\n  const togglePopover = useCallback((visible: boolean) => {\n    setNewColumnPopoverVisible(visible);\n  }, []);\n\n  const closePopover = useCallback(() => {\n    togglePopover(false);\n  }, [togglePopover]);\n\n  const openPopover = useCallback(() => {\n    togglePopover(true);\n  }, [togglePopover]);\n\n  const labelGhostButtonText = useMemo(\n    () =>\n      ghostButtonText ??\n      tn(\n        'Drop a column here or click',\n        'Drop columns here or click',\n        multi ? 2 : 1,\n      ),\n    [ghostButtonText, multi],\n  );\n\n  return (\n    <div>\n      <DndSelectLabel\n        onDrop={onDrop}\n        canDrop={canDrop}\n        valuesRenderer={valuesRenderer}\n        accept={DndItemType.Column}\n        displayGhostButton={multi || optionSelector.values.length === 0}\n        ghostButtonText={labelGhostButtonText}\n        onClickGhostButton={openPopover}\n        {...props}\n      />\n      <ColumnSelectPopoverTrigger\n        columns={options}\n        onColumnEdit={addNewColumnWithPopover}\n        isControlledComponent\n        togglePopover={togglePopover}\n        closePopover={closePopover}\n        visible={newColumnPopoverVisible}\n        isTemporal={isTemporal}\n      >\n        <div />\n      </ColumnSelectPopoverTrigger>\n    </div>\n  );\n}\n\nconst DndColumnSelectWithFallback = withDndFallback(\n  DndColumnSelect,\n  SelectControl,\n);\n\nexport { DndColumnSelectWithFallback as DndColumnSelect };\n"]},"metadata":{},"sourceType":"module"}