{"ast":null,"code":"import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";import domToImage from 'dom-to-image-more';\nimport kebabCase from 'lodash/kebabCase';\nimport { t, supersetTheme } from '@superset-ui/core';\nimport { addWarningToast } from 'src/components/MessageToasts/actions';\n/**\n * generate a consistent file stem from a description and date\n *\n * @param description title or description of content of file\n * @param date date when file was generated\n */\nconst generateFileStem = function (description, date) {if (date === void 0) {date = new Date();}return `${kebabCase(description)}-${date.toISOString().replace(/[: ]/g, '-')}`;};\n/**\n * Create an event handler for turning an element into an image\n *\n * @param selector css selector of the parent element which should be turned into image\n * @param description name or a short description of what is being printed.\n *   Value will be normalized, and a date as well as a file extension will be added.\n * @param isExactSelector if false, searches for the closest ancestor that matches selector.\n * @returns event handler\n */\nexport default function downloadAsImage(selector, description, isExactSelector) {if (isExactSelector === void 0) {isExactSelector = false;}\n  return (event) => {\n    const elementToPrint = isExactSelector ?\n    document.querySelector(selector) :\n    event.currentTarget.closest(selector);\n    if (!elementToPrint) {\n      return addWarningToast(t('Image download failed, please refresh and try again.'));\n    }\n    // Mapbox controls are loaded from different origin, causing CORS error\n    // See https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL#exceptions\n    const filter = (node) => {\n      if (typeof node.className === 'string') {var _context;\n        return node.className !== 'mapboxgl-control-container' &&\n        !_includesInstanceProperty(_context = node.className).call(_context, 'ant-dropdown');\n      }\n      return true;\n    };\n    return domToImage.\n    toJpeg(elementToPrint, {\n      quality: 0.95,\n      bgcolor: supersetTheme.colors.grayscale.light4,\n      filter }).\n\n    then((dataUrl) => {\n      const link = document.createElement('a');\n      link.download = `${generateFileStem(description)}.jpg`;\n      link.href = dataUrl;\n      link.click();\n    }).\n    catch((e) => {\n      console.error('Creating image failed', e);\n    });\n  };\n}","map":{"version":3,"mappings":"gGAmBA,OAAOA,UAAP,MAAuB,mBAAvB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,SAASC,CAAT,EAAYC,aAAZ,QAAiC,mBAAjC;AACA,SAASC,eAAT,QAAgC,sCAAhC;AAEA;;;;;;AAMA,MAAMC,gBAAgB,GAAG,UAACC,WAAD,EAAsBC,IAAtB,OAAsBA,IAAtB,cAAsBA,IAAtB,GAA6B,IAAIC,IAAJ,EAA7B,SACvB,GAAGP,SAAS,CAACK,WAAD,CAAa,IAAIC,IAAI,CAACE,WAAL,GAAmBC,OAAnB,CAA2B,OAA3B,EAAoC,GAApC,CAAwC,EAD9C,EAAzB;AAGA;;;;;;;;;AASA,eAAc,SAAUC,eAAV,CACZC,QADY,EAEZN,WAFY,EAGZO,eAHY,EAGW,KAAvBA,eAAuB,cAAvBA,eAAuB,GAAL,KAAK;EAEvB,OAAO,CAACC,KAAD,KAA0B;IAC/B,MAAMC,cAAc,GAAGF,eAAe;IAClCG,QAAQ,CAACC,aAAT,CAAuBL,QAAvB,CADkC;IAElCE,KAAK,CAACI,aAAN,CAAoBC,OAApB,CAA4BP,QAA5B,CAFJ;IAIA,IAAI,CAACG,cAAL,EAAqB;MACnB,OAAOX,eAAe,CACpBF,CAAC,CAAC,sDAAD,CADmB,CAAtB;IAGD;IAED;IACA;IACA,MAAMkB,MAAM,GAAG,CAACC,IAAD,KAAkB;MAC/B,IAAI,OAAOA,IAAI,CAACC,SAAZ,KAA0B,QAA9B,EAAwC;QACtC,OACED,IAAI,CAACC,SAAL,KAAmB,4BAAnB;QACA,CAAC,yCAAI,CAACA,SAAL,iBAAwB,cAAxB,CAFH;MAID;MACD,OAAO,IAAP;IACD,CARD;IAUA,OAAOtB,UAAU;IACduB,MADI,CACGR,cADH,EACmB;MACtBS,OAAO,EAAE,IADa;MAEtBC,OAAO,EAAEtB,aAAa,CAACuB,MAAd,CAAqBC,SAArB,CAA+BC,MAFlB;MAGtBR,MAHsB,EADnB;;IAMJS,IANI,CAMC,QAAO,KAAG;MACd,MAAMC,IAAI,GAAGd,QAAQ,CAACe,aAAT,CAAuB,GAAvB,CAAb;MACAD,IAAI,CAACE,QAAL,GAAgB,GAAG3B,gBAAgB,CAACC,WAAD,CAAa,MAAhD;MACAwB,IAAI,CAACG,IAAL,GAAYC,OAAZ;MACAJ,IAAI,CAACK,KAAL;IACD,CAXI;IAYJC,KAZI,CAYE,EAAC,KAAG;MACTC,OAAO,CAACC,KAAR,CAAc,uBAAd,EAAuCC,CAAvC;IACD,CAdI,CAAP;EAeD,CAtCD;AAuCD","names":["domToImage","kebabCase","t","supersetTheme","addWarningToast","generateFileStem","description","date","Date","toISOString","replace","downloadAsImage","selector","isExactSelector","event","elementToPrint","document","querySelector","currentTarget","closest","filter","node","className","toJpeg","quality","bgcolor","colors","grayscale","light4","then","link","createElement","download","href","dataUrl","click","catch","console","error","e"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/utils/downloadAsImage.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { SyntheticEvent } from 'react';\nimport domToImage from 'dom-to-image-more';\nimport kebabCase from 'lodash/kebabCase';\nimport { t, supersetTheme } from '@superset-ui/core';\nimport { addWarningToast } from 'src/components/MessageToasts/actions';\n\n/**\n * generate a consistent file stem from a description and date\n *\n * @param description title or description of content of file\n * @param date date when file was generated\n */\nconst generateFileStem = (description: string, date = new Date()) =>\n  `${kebabCase(description)}-${date.toISOString().replace(/[: ]/g, '-')}`;\n\n/**\n * Create an event handler for turning an element into an image\n *\n * @param selector css selector of the parent element which should be turned into image\n * @param description name or a short description of what is being printed.\n *   Value will be normalized, and a date as well as a file extension will be added.\n * @param isExactSelector if false, searches for the closest ancestor that matches selector.\n * @returns event handler\n */\nexport default function downloadAsImage(\n  selector: string,\n  description: string,\n  isExactSelector = false,\n) {\n  return (event: SyntheticEvent) => {\n    const elementToPrint = isExactSelector\n      ? document.querySelector(selector)\n      : event.currentTarget.closest(selector);\n\n    if (!elementToPrint) {\n      return addWarningToast(\n        t('Image download failed, please refresh and try again.'),\n      );\n    }\n\n    // Mapbox controls are loaded from different origin, causing CORS error\n    // See https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL#exceptions\n    const filter = (node: Element) => {\n      if (typeof node.className === 'string') {\n        return (\n          node.className !== 'mapboxgl-control-container' &&\n          !node.className.includes('ant-dropdown')\n        );\n      }\n      return true;\n    };\n\n    return domToImage\n      .toJpeg(elementToPrint, {\n        quality: 0.95,\n        bgcolor: supersetTheme.colors.grayscale.light4,\n        filter,\n      })\n      .then(dataUrl => {\n        const link = document.createElement('a');\n        link.download = `${generateFileStem(description)}.jpg`;\n        link.href = dataUrl;\n        link.click();\n      })\n      .catch(e => {\n        console.error('Creating image failed', e);\n      });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}