{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable no-param-reassign */\nimport { useSelector } from 'react-redux';\nimport { useEffect, useMemo, useState } from 'react';\nimport { NATIVE_FILTER_PREFIX } from '../FiltersConfigModal/utils';\nexport const useFilterSets = () => useSelector((state) => state.nativeFilters.filterSets || {});\nexport const useFilters = () => {\n  const preselectedNativeFilters = useSelector((state) => {var _state$dashboardState;return (_state$dashboardState = state.dashboardState) == null ? void 0 : _state$dashboardState.preselectNativeFilters;});\n  const nativeFilters = useSelector((state) => state.nativeFilters.filters);\n  return useMemo(() => Object.entries(nativeFilters).reduce((acc, _ref) => {let [filterId, filter] = _ref;return {\n      ...acc,\n      [filterId]: {\n        ...filter,\n        preselect: preselectedNativeFilters == null ? void 0 : preselectedNativeFilters[filterId] } };},\n\n  {}), [nativeFilters, preselectedNativeFilters]);\n};\nexport const useNativeFiltersDataMask = () => {\n  const dataMask = useSelector((state) => state.dataMask);\n  return useMemo(() => Object.values(dataMask).\n  filter((item) => String(item.id).startsWith(NATIVE_FILTER_PREFIX)).\n  reduce((prev, next) => ({ ...prev, [next.id]: next }), {}), [dataMask]);\n};\nexport const useFilterUpdates = (dataMaskSelected, setDataMaskSelected) => {\n  const filters = useFilters();\n  const dataMaskApplied = useNativeFiltersDataMask();\n  useEffect(() => {\n    // Remove deleted filters from local state\n    Object.keys(dataMaskSelected).forEach((selectedId) => {\n      if (!filters[selectedId]) {\n        setDataMaskSelected((draft) => {\n          delete draft[selectedId];\n        });\n      }\n    });\n  }, [dataMaskApplied, dataMaskSelected, filters, setDataMaskSelected]);\n};\n// Load filters after charts loaded\nexport const useInitialization = () => {\n  const [isInitialized, setIsInitialized] = useState(false);\n  const filters = useFilters();\n  const charts = useSelector((state) => state.charts);\n  // We need to know how much charts now shown on dashboard to know how many of all charts should be loaded\n  let numberOfLoadingCharts = 0;\n  if (!isInitialized) {\n    numberOfLoadingCharts = document.querySelectorAll('[data-ui-anchor=\"chart\"]').length;\n  }\n  useEffect(() => {\n    if (isInitialized) {\n      return;\n    }\n    if (Object.values(filters).find((_ref2) => {let { requiredFirst } = _ref2;return requiredFirst;})) {\n      setIsInitialized(true);\n      return;\n    }\n    // For some dashboards may be there are no charts on first page,\n    // so we check up to 1 sec if there is at least on chart to load\n    let filterTimeout;\n    if (numberOfLoadingCharts === 0) {\n      filterTimeout = setTimeout(() => {\n        setIsInitialized(true);\n      }, 1000);\n    }\n    // @ts-ignore\n    if (numberOfLoadingCharts > 0 && filterTimeout !== undefined) {\n      clearTimeout(filterTimeout);\n    }\n    const numberOfLoadedCharts = Object.values(charts).filter((_ref3) => {let { chartStatus } = _ref3;return chartStatus !== 'loading';}).length;\n    if (numberOfLoadingCharts > 0 &&\n    numberOfLoadedCharts >= numberOfLoadingCharts) {\n      setIsInitialized(true);\n    }\n  }, [charts, isInitialized, numberOfLoadingCharts]);\n  return isInitialized;\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA;AACA,SAASA,WAAT,QAA4B,aAA5B;AASA,SAASC,SAAT,EAAoBC,OAApB,EAA6BC,QAA7B,QAA6C,OAA7C;AAEA,SAASC,oBAAT,QAAqC,6BAArC;AAEA,OAAO,MAAMC,aAAa,GAAG,MAC3BL,WAAW,CACT,MAAK,KAAIM,KAAK,CAACC,aAAN,CAAoBC,UAApB,IAAkC,EADlC,CADN;AAKP,OAAO,MAAMC,UAAU,GAAG,MAAK;EAC7B,MAAMC,wBAAwB,GAAGV,WAAW,CAC1C,MAAK,gEAAIM,KAAK,CAACK,cAAV,qBAAI,sBAAsBC,sBAA1B,EADqC,CAA5C;EAGA,MAAML,aAAa,GAAGP,WAAW,CAC/B,MAAK,KAAIM,KAAK,CAACC,aAAN,CAAoBM,OADE,CAAjC;EAGA,OAAOX,OAAO,CACZ,MACEY,MAAM,CAACC,OAAP,CAAeR,aAAf,EAA8BS,MAA9B,CACE,CAACC,GAAD,gBAAM,CAACC,QAAD,EAAWC,MAAX,CAAN,eAAgD;MAC9C,GAAGF,GAD2C;MAE9C,CAACC,QAAD,GAAY;QACV,GAAGC,MADO;QAEVC,SAAS,EAAEV,wBAAF,oBAAEA,wBAAwB,CAAGQ,QAAH,CAFzB,EAFkC,EAAhD,EADF;;EAQE,EARF,CAFU,EAYZ,CAACX,aAAD,EAAgBG,wBAAhB,CAZY,CAAd;AAcD,CArBM;AAuBP,OAAO,MAAMW,wBAAwB,GAAG,MAAK;EAC3C,MAAMC,QAAQ,GAAGtB,WAAW,CAC1B,MAAK,KAAIM,KAAK,CAACgB,QADW,CAA5B;EAIA,OAAOpB,OAAO,CACZ,MACEY,MAAM,CAACS,MAAP,CAAcD,QAAd;EACGH,MADH,CACU,CAACK,IAAD,KACNC,MAAM,CAACD,IAAI,CAACE,EAAN,CAAN,CAAgBC,UAAhB,CAA2BvB,oBAA3B,CAFJ;EAIGY,MAJH,CAKI,CAACY,IAAD,EAAOC,IAAP,MAAiC,EAAE,GAAGD,IAAL,EAAW,CAACC,IAAI,CAACH,EAAN,GAAWG,IAAtB,EAAjC,CALJ,EAMI,EANJ,CAFU,EAUZ,CAACP,QAAD,CAVY,CAAd;AAYD,CAjBM;AAmBP,OAAO,MAAMQ,gBAAgB,GAAG,CAC9BC,gBAD8B,EAE9BC,mBAF8B,KAG5B;EACF,MAAMnB,OAAO,GAAGJ,UAAU,EAA1B;EACA,MAAMwB,eAAe,GAAGZ,wBAAwB,EAAhD;EACApB,SAAS,CAAC,MAAK;IACb;IACAa,MAAM,CAACoB,IAAP,CAAYH,gBAAZ,EAA8BI,OAA9B,CAAsC,WAAU,KAAG;MACjD,IAAI,CAACtB,OAAO,CAACuB,UAAD,CAAZ,EAA0B;QACxBJ,mBAAmB,CAAC,MAAK,KAAG;UAC1B,OAAOK,KAAK,CAACD,UAAD,CAAZ;QACD,CAFkB,CAAnB;MAGD;IACF,CAND;EAOD,CATQ,EASN,CAACH,eAAD,EAAkBF,gBAAlB,EAAoClB,OAApC,EAA6CmB,mBAA7C,CATM,CAAT;AAUD,CAhBM;AAkBP;AACA,OAAO,MAAMM,iBAAiB,GAAG,MAAK;EACpC,MAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCrC,QAAQ,CAAU,KAAV,CAAlD;EACA,MAAMU,OAAO,GAAGJ,UAAU,EAA1B;EACA,MAAMgC,MAAM,GAAGzC,WAAW,CAAyB,MAAK,KAAIM,KAAK,CAACmC,MAAxC,CAA1B;EAEA;EACA,IAAIC,qBAAqB,GAAG,CAA5B;EACA,IAAI,CAACH,aAAL,EAAoB;IAClBG,qBAAqB,GAAGC,QAAQ,CAACC,gBAAT,CACtB,0BADsB,EAEtBC,MAFF;EAGD;EACD5C,SAAS,CAAC,MAAK;IACb,IAAIsC,aAAJ,EAAmB;MACjB;IACD;IAED,IAAIzB,MAAM,CAACS,MAAP,CAAcV,OAAd,EAAuBiC,IAAvB,CAA4B,gBAAC,EAAEC,aAAF,EAAD,gBAAuBA,aAAvB,EAA5B,CAAJ,EAAuE;MACrEP,gBAAgB,CAAC,IAAD,CAAhB;MACA;IACD;IAED;IACA;IACA,IAAIQ,aAAJ;IACA,IAAIN,qBAAqB,KAAK,CAA9B,EAAiC;MAC/BM,aAAa,GAAGC,UAAU,CAAC,MAAK;QAC9BT,gBAAgB,CAAC,IAAD,CAAhB;MACD,CAFyB,EAEvB,IAFuB,CAA1B;IAGD;IAED;IACA,IAAIE,qBAAqB,GAAG,CAAxB,IAA6BM,aAAa,KAAKE,SAAnD,EAA8D;MAC5DC,YAAY,CAACH,aAAD,CAAZ;IACD;IAED,MAAMI,oBAAoB,GAAGtC,MAAM,CAACS,MAAP,CAAckB,MAAd,EAAsBtB,MAAtB,CAC3B,gBAAC,EAAEkC,WAAF,EAAD,gBAAqBA,WAAW,KAAK,SAArC,EAD2B,EAE3BR,MAFF;IAGA,IACEH,qBAAqB,GAAG,CAAxB;IACAU,oBAAoB,IAAIV,qBAF1B,EAGE;MACAF,gBAAgB,CAAC,IAAD,CAAhB;IACD;EACF,CAjCQ,EAiCN,CAACC,MAAD,EAASF,aAAT,EAAwBG,qBAAxB,CAjCM,CAAT;EAmCA,OAAOH,aAAP;AACD,CAhDM","names":["useSelector","useEffect","useMemo","useState","NATIVE_FILTER_PREFIX","useFilterSets","state","nativeFilters","filterSets","useFilters","preselectedNativeFilters","dashboardState","preselectNativeFilters","filters","Object","entries","reduce","acc","filterId","filter","preselect","useNativeFiltersDataMask","dataMask","values","item","String","id","startsWith","prev","next","useFilterUpdates","dataMaskSelected","setDataMaskSelected","dataMaskApplied","keys","forEach","selectedId","draft","useInitialization","isInitialized","setIsInitialized","charts","numberOfLoadingCharts","document","querySelectorAll","length","find","requiredFirst","filterTimeout","setTimeout","undefined","clearTimeout","numberOfLoadedCharts","chartStatus"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/dashboard/components/nativeFilters/FilterBar/state.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable no-param-reassign */\nimport { useSelector } from 'react-redux';\nimport {\n  DataMaskState,\n  DataMaskStateWithId,\n  DataMaskWithId,\n  Filter,\n  Filters,\n  FilterSets as FilterSetsType,\n} from '@superset-ui/core';\nimport { useEffect, useMemo, useState } from 'react';\nimport { ChartsState, RootState } from 'src/dashboard/types';\nimport { NATIVE_FILTER_PREFIX } from '../FiltersConfigModal/utils';\n\nexport const useFilterSets = () =>\n  useSelector<any, FilterSetsType>(\n    state => state.nativeFilters.filterSets || {},\n  );\n\nexport const useFilters = () => {\n  const preselectedNativeFilters = useSelector<any, Filters>(\n    state => state.dashboardState?.preselectNativeFilters,\n  );\n  const nativeFilters = useSelector<RootState, Filters>(\n    state => state.nativeFilters.filters,\n  );\n  return useMemo(\n    () =>\n      Object.entries(nativeFilters).reduce(\n        (acc, [filterId, filter]: [string, Filter]) => ({\n          ...acc,\n          [filterId]: {\n            ...filter,\n            preselect: preselectedNativeFilters?.[filterId],\n          },\n        }),\n        {} as Filters,\n      ),\n    [nativeFilters, preselectedNativeFilters],\n  );\n};\n\nexport const useNativeFiltersDataMask = () => {\n  const dataMask = useSelector<RootState, DataMaskStateWithId>(\n    state => state.dataMask,\n  );\n\n  return useMemo(\n    () =>\n      Object.values(dataMask)\n        .filter((item: DataMaskWithId) =>\n          String(item.id).startsWith(NATIVE_FILTER_PREFIX),\n        )\n        .reduce(\n          (prev, next: DataMaskWithId) => ({ ...prev, [next.id]: next }),\n          {},\n        ) as DataMaskStateWithId,\n    [dataMask],\n  );\n};\n\nexport const useFilterUpdates = (\n  dataMaskSelected: DataMaskState,\n  setDataMaskSelected: (arg0: (arg0: DataMaskState) => void) => void,\n) => {\n  const filters = useFilters();\n  const dataMaskApplied = useNativeFiltersDataMask();\n  useEffect(() => {\n    // Remove deleted filters from local state\n    Object.keys(dataMaskSelected).forEach(selectedId => {\n      if (!filters[selectedId]) {\n        setDataMaskSelected(draft => {\n          delete draft[selectedId];\n        });\n      }\n    });\n  }, [dataMaskApplied, dataMaskSelected, filters, setDataMaskSelected]);\n};\n\n// Load filters after charts loaded\nexport const useInitialization = () => {\n  const [isInitialized, setIsInitialized] = useState<boolean>(false);\n  const filters = useFilters();\n  const charts = useSelector<RootState, ChartsState>(state => state.charts);\n\n  // We need to know how much charts now shown on dashboard to know how many of all charts should be loaded\n  let numberOfLoadingCharts = 0;\n  if (!isInitialized) {\n    numberOfLoadingCharts = document.querySelectorAll(\n      '[data-ui-anchor=\"chart\"]',\n    ).length;\n  }\n  useEffect(() => {\n    if (isInitialized) {\n      return;\n    }\n\n    if (Object.values(filters).find(({ requiredFirst }) => requiredFirst)) {\n      setIsInitialized(true);\n      return;\n    }\n\n    // For some dashboards may be there are no charts on first page,\n    // so we check up to 1 sec if there is at least on chart to load\n    let filterTimeout: NodeJS.Timeout;\n    if (numberOfLoadingCharts === 0) {\n      filterTimeout = setTimeout(() => {\n        setIsInitialized(true);\n      }, 1000);\n    }\n\n    // @ts-ignore\n    if (numberOfLoadingCharts > 0 && filterTimeout !== undefined) {\n      clearTimeout(filterTimeout);\n    }\n\n    const numberOfLoadedCharts = Object.values(charts).filter(\n      ({ chartStatus }) => chartStatus !== 'loading',\n    ).length;\n    if (\n      numberOfLoadingCharts > 0 &&\n      numberOfLoadedCharts >= numberOfLoadingCharts\n    ) {\n      setIsInitialized(true);\n    }\n  }, [charts, isInitialized, numberOfLoadingCharts]);\n\n  return isInitialized;\n};\n"]},"metadata":{},"sourceType":"module"}