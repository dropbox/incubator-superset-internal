{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { t, RollingType, ComparisonType } from '@superset-ui/core';\nimport { ControlSubSectionHeader } from '../components/ControlSubSectionHeader';\nimport { formatSelectOptions } from '../utils';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport const advancedAnalyticsControls = {\n  label: t('Advanced analytics'),\n  tabOverride: 'data',\n  description: t('This section contains options ' +\n  'that allow for advanced analytical post processing ' +\n  'of query results'),\n  controlSetRows: [\n  [___EmotionJSX(ControlSubSectionHeader, null, t('Rolling window'))],\n  [\n  {\n    name: 'rolling_type',\n    config: {\n      type: 'SelectControl',\n      label: t('Rolling function'),\n      default: null,\n      choices: [[null, t('None')]].concat(formatSelectOptions(Object.values(RollingType))),\n      description: t('Defines a rolling window function to apply, works along ' +\n      'with the [Periods] text box') } }],\n\n\n\n  [\n  {\n    name: 'rolling_periods',\n    config: {\n      type: 'TextControl',\n      label: t('Periods'),\n      isInt: true,\n      description: t('Defines the size of the rolling window function, ' +\n      'relative to the time granularity selected'),\n      visibility: (_ref, _ref2) => {var _controls$rollingType, _controls$rollingType2;let { controls } = _ref;let { name } = _ref2;\n        // `rolling_type_b` refer to rolling_type in mixed timeseries Query B\n        const rollingTypeControlName = name.endsWith('_b') ?\n        'rolling_type_b' :\n        'rolling_type';\n        return Boolean((_controls$rollingType = controls[rollingTypeControlName]) == null ? void 0 : _controls$rollingType.value) &&\n        ((_controls$rollingType2 = controls[rollingTypeControlName]) == null ? void 0 : _controls$rollingType2.value) !== RollingType.Cumsum;\n      } } }],\n\n\n\n  [\n  {\n    name: 'min_periods',\n    config: {\n      type: 'TextControl',\n      label: t('Min periods'),\n      isInt: true,\n      description: t('The minimum number of rolling periods required to show ' +\n      'a value. For instance if you do a cumulative sum on 7 days ' +\n      'you may want your \"Min Period\" to be 7, so that all data points ' +\n      'shown are the total of 7 periods. This will hide the \"ramp up\" ' +\n      'taking place over the first 7 periods'),\n      visibility: (_ref3, _ref4) => {var _controls$rollingType3, _controls$rollingType4;let { controls } = _ref3;let { name } = _ref4;\n        // `rolling_type_b` refer to rolling_type in mixed timeseries Query B\n        const rollingTypeControlName = name.endsWith('_b') ?\n        'rolling_type_b' :\n        'rolling_type';\n        return Boolean((_controls$rollingType3 = controls[rollingTypeControlName]) == null ? void 0 : _controls$rollingType3.value) &&\n        ((_controls$rollingType4 = controls[rollingTypeControlName]) == null ? void 0 : _controls$rollingType4.value) !== RollingType.Cumsum;\n      } } }],\n\n\n\n  [___EmotionJSX(ControlSubSectionHeader, null, t('Time comparison'))],\n  [\n  {\n    name: 'time_compare',\n    config: {\n      type: 'SelectControl',\n      multi: true,\n      freeForm: true,\n      label: t('Time shift'),\n      choices: [\n      ['1 day ago', t('1 day ago')],\n      ['1 week ago', t('1 week ago')],\n      ['28 days ago', t('28 days ago')],\n      ['30 days ago', t('30 days ago')],\n      ['52 weeks ago', t('52 weeks ago')],\n      ['1 year ago', t('1 year ago')],\n      ['104 weeks ago', t('104 weeks ago')],\n      ['2 years ago', t('2 years ago')],\n      ['156 weeks ago', t('156 weeks ago')],\n      ['3 years ago', t('3 years ago')]],\n\n      description: t('Overlay one or more timeseries from a ' +\n      'relative time period. Expects relative time deltas ' +\n      'in natural language (example:  24 hours, 7 days, ' +\n      '52 weeks, 365 days). Free text is supported.') } }],\n\n\n\n  [\n  {\n    name: 'comparison_type',\n    config: {\n      type: 'SelectControl',\n      label: t('Calculation type'),\n      default: 'values',\n      choices: [\n      [ComparisonType.Values, t('Actual values')],\n      [ComparisonType.Difference, t('Difference')],\n      [ComparisonType.Percentage, t('Percentage change')],\n      [ComparisonType.Ratio, t('Ratio')]],\n\n      description: t('How to display time shifts: as individual lines; as the ' +\n      'difference between the main time series and each time shift; ' +\n      'as the percentage change; or as the ratio between series and time shifts.') } }],\n\n\n\n  [___EmotionJSX(ControlSubSectionHeader, null, t('Resample'))],\n  [\n  {\n    name: 'resample_rule',\n    config: {\n      type: 'SelectControl',\n      freeForm: true,\n      label: t('Rule'),\n      default: null,\n      choices: [\n      ['1T', t('1 minutely frequency')],\n      ['1H', t('1 hourly frequency')],\n      ['1D', t('1 calendar day frequency')],\n      ['7D', t('7 calendar day frequency')],\n      ['1MS', t('1 month start frequency')],\n      ['1M', t('1 month end frequency')],\n      ['1AS', t('1 year start frequency')],\n      ['1A', t('1 year end frequency')]],\n\n      description: t('Pandas resample rule') } }],\n\n\n\n  [\n  {\n    name: 'resample_method',\n    config: {\n      type: 'SelectControl',\n      label: t('Fill method'),\n      default: null,\n      choices: [\n      ['asfreq', t('Null imputation')],\n      ['zerofill', t('Zero imputation')],\n      ['linear', t('Linear interpolation')],\n      ['ffill', t('Forward values')],\n      ['bfill', t('Backward values')],\n      ['median', t('Median values')],\n      ['mean', t('Mean values')],\n      ['sum', t('Sum values')]],\n\n      description: t('Pandas resample method') } }]] };","map":{"version":3,"mappings":"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","names":["React","t","RollingType","ComparisonType","ControlSubSectionHeader","formatSelectOptions","advancedAnalyticsControls","label","tabOverride","description","controlSetRows","name","config","type","default","choices","concat","Object","values","isInt","visibility","controls","rollingTypeControlName","endsWith","Boolean","value","Cumsum","multi","freeForm","Values","Difference","Percentage","Ratio"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/packages/superset-ui-chart-controls/src/sections/advancedAnalytics.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { t, RollingType, ComparisonType } from '@superset-ui/core';\n\nimport { ControlSubSectionHeader } from '../components/ControlSubSectionHeader';\nimport { ControlPanelSectionConfig } from '../types';\nimport { formatSelectOptions } from '../utils';\n\nexport const advancedAnalyticsControls: ControlPanelSectionConfig = {\n  label: t('Advanced analytics'),\n  tabOverride: 'data',\n  description: t(\n    'This section contains options ' +\n      'that allow for advanced analytical post processing ' +\n      'of query results',\n  ),\n  controlSetRows: [\n    [<ControlSubSectionHeader>{t('Rolling window')}</ControlSubSectionHeader>],\n    [\n      {\n        name: 'rolling_type',\n        config: {\n          type: 'SelectControl',\n          label: t('Rolling function'),\n          default: null,\n          choices: [[null, t('None')]].concat(\n            formatSelectOptions(Object.values(RollingType)),\n          ),\n          description: t(\n            'Defines a rolling window function to apply, works along ' +\n              'with the [Periods] text box',\n          ),\n        },\n      },\n    ],\n    [\n      {\n        name: 'rolling_periods',\n        config: {\n          type: 'TextControl',\n          label: t('Periods'),\n          isInt: true,\n          description: t(\n            'Defines the size of the rolling window function, ' +\n              'relative to the time granularity selected',\n          ),\n          visibility: ({ controls }, { name }) => {\n            // `rolling_type_b` refer to rolling_type in mixed timeseries Query B\n            const rollingTypeControlName = name.endsWith('_b')\n              ? 'rolling_type_b'\n              : 'rolling_type';\n            return (\n              Boolean(controls[rollingTypeControlName]?.value) &&\n              controls[rollingTypeControlName]?.value !== RollingType.Cumsum\n            );\n          },\n        },\n      },\n    ],\n    [\n      {\n        name: 'min_periods',\n        config: {\n          type: 'TextControl',\n          label: t('Min periods'),\n          isInt: true,\n          description: t(\n            'The minimum number of rolling periods required to show ' +\n              'a value. For instance if you do a cumulative sum on 7 days ' +\n              'you may want your \"Min Period\" to be 7, so that all data points ' +\n              'shown are the total of 7 periods. This will hide the \"ramp up\" ' +\n              'taking place over the first 7 periods',\n          ),\n          visibility: ({ controls }, { name }) => {\n            // `rolling_type_b` refer to rolling_type in mixed timeseries Query B\n            const rollingTypeControlName = name.endsWith('_b')\n              ? 'rolling_type_b'\n              : 'rolling_type';\n            return (\n              Boolean(controls[rollingTypeControlName]?.value) &&\n              controls[rollingTypeControlName]?.value !== RollingType.Cumsum\n            );\n          },\n        },\n      },\n    ],\n    [<ControlSubSectionHeader>{t('Time comparison')}</ControlSubSectionHeader>],\n    [\n      {\n        name: 'time_compare',\n        config: {\n          type: 'SelectControl',\n          multi: true,\n          freeForm: true,\n          label: t('Time shift'),\n          choices: [\n            ['1 day ago', t('1 day ago')],\n            ['1 week ago', t('1 week ago')],\n            ['28 days ago', t('28 days ago')],\n            ['30 days ago', t('30 days ago')],\n            ['52 weeks ago', t('52 weeks ago')],\n            ['1 year ago', t('1 year ago')],\n            ['104 weeks ago', t('104 weeks ago')],\n            ['2 years ago', t('2 years ago')],\n            ['156 weeks ago', t('156 weeks ago')],\n            ['3 years ago', t('3 years ago')],\n          ],\n          description: t(\n            'Overlay one or more timeseries from a ' +\n              'relative time period. Expects relative time deltas ' +\n              'in natural language (example:  24 hours, 7 days, ' +\n              '52 weeks, 365 days). Free text is supported.',\n          ),\n        },\n      },\n    ],\n    [\n      {\n        name: 'comparison_type',\n        config: {\n          type: 'SelectControl',\n          label: t('Calculation type'),\n          default: 'values',\n          choices: [\n            [ComparisonType.Values, t('Actual values')],\n            [ComparisonType.Difference, t('Difference')],\n            [ComparisonType.Percentage, t('Percentage change')],\n            [ComparisonType.Ratio, t('Ratio')],\n          ],\n          description: t(\n            'How to display time shifts: as individual lines; as the ' +\n              'difference between the main time series and each time shift; ' +\n              'as the percentage change; or as the ratio between series and time shifts.',\n          ),\n        },\n      },\n    ],\n    [<ControlSubSectionHeader>{t('Resample')}</ControlSubSectionHeader>],\n    [\n      {\n        name: 'resample_rule',\n        config: {\n          type: 'SelectControl',\n          freeForm: true,\n          label: t('Rule'),\n          default: null,\n          choices: [\n            ['1T', t('1 minutely frequency')],\n            ['1H', t('1 hourly frequency')],\n            ['1D', t('1 calendar day frequency')],\n            ['7D', t('7 calendar day frequency')],\n            ['1MS', t('1 month start frequency')],\n            ['1M', t('1 month end frequency')],\n            ['1AS', t('1 year start frequency')],\n            ['1A', t('1 year end frequency')],\n          ],\n          description: t('Pandas resample rule'),\n        },\n      },\n    ],\n    [\n      {\n        name: 'resample_method',\n        config: {\n          type: 'SelectControl',\n          label: t('Fill method'),\n          default: null,\n          choices: [\n            ['asfreq', t('Null imputation')],\n            ['zerofill', t('Zero imputation')],\n            ['linear', t('Linear interpolation')],\n            ['ffill', t('Forward values')],\n            ['bfill', t('Backward values')],\n            ['median', t('Median values')],\n            ['mean', t('Mean values')],\n            ['sum', t('Sum values')],\n          ],\n          description: t('Pandas resample method'),\n        },\n      },\n    ],\n  ],\n};\n"]},"metadata":{},"sourceType":"module"}