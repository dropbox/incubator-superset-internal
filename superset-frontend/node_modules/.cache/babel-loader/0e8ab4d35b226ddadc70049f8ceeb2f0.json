{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport memoize from 'lodash/memoize';\nimport { isControlPanelSectionConfig } from '@superset-ui/chart-controls';\nimport { getChartControlPanelRegistry } from '@superset-ui/core';\nimport { controls } from '../explore/controls';\n\nconst memoizedControls = memoize((vizType, controlPanel) => {\n  const controlsMap = {};\n  ((controlPanel == null ? void 0 : controlPanel.controlPanelSections) || []).\n  filter(isControlPanelSectionConfig).\n  forEach((section) => {\n    section.controlSetRows.forEach((row) => {\n      row.forEach((control) => {\n        if (!control) return;\n        if (typeof control === 'string') {\n          // For now, we have to look in controls.jsx to get the config for some controls.\n          // Once everything is migrated out, delete this if statement.\n          controlsMap[control] = controls[control];\n        } else if (control.name && control.config) {\n          // condition needed because there are elements, e.g. <hr /> in some control configs (I'm looking at you, FilterBox!)\n          controlsMap[control.name] = control.config;\n        }\n      });\n    });\n  });\n  return controlsMap;\n});\n\nconst getControlsForVizType = (vizType) => {\n  const controlPanel = getChartControlPanelRegistry().get(vizType);\n  return memoizedControls(vizType, controlPanel);\n};\n\nexport default getControlsForVizType;","map":{"version":3,"names":["memoize","isControlPanelSectionConfig","getChartControlPanelRegistry","controls","memoizedControls","vizType","controlPanel","controlsMap","controlPanelSections","filter","forEach","section","controlSetRows","row","control","name","config","getControlsForVizType","get"],"sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/utils/getControlsForVizType.js"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport memoize from 'lodash/memoize';\nimport { isControlPanelSectionConfig } from '@superset-ui/chart-controls';\nimport { getChartControlPanelRegistry } from '@superset-ui/core';\nimport { controls } from '../explore/controls';\n\nconst memoizedControls = memoize((vizType, controlPanel) => {\n  const controlsMap = {};\n  (controlPanel?.controlPanelSections || [])\n    .filter(isControlPanelSectionConfig)\n    .forEach(section => {\n      section.controlSetRows.forEach(row => {\n        row.forEach(control => {\n          if (!control) return;\n          if (typeof control === 'string') {\n            // For now, we have to look in controls.jsx to get the config for some controls.\n            // Once everything is migrated out, delete this if statement.\n            controlsMap[control] = controls[control];\n          } else if (control.name && control.config) {\n            // condition needed because there are elements, e.g. <hr /> in some control configs (I'm looking at you, FilterBox!)\n            controlsMap[control.name] = control.config;\n          }\n        });\n      });\n    });\n  return controlsMap;\n});\n\nconst getControlsForVizType = vizType => {\n  const controlPanel = getChartControlPanelRegistry().get(vizType);\n  return memoizedControls(vizType, controlPanel);\n};\n\nexport default getControlsForVizType;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,OAAP,MAAoB,gBAApB;AACA,SAASC,2BAAT,QAA4C,6BAA5C;AACA,SAASC,4BAAT,QAA6C,mBAA7C;AACA,SAASC,QAAT,QAAyB,qBAAzB;;AAEA,MAAMC,gBAAgB,GAAGJ,OAAO,CAAC,CAACK,OAAD,EAAUC,YAAV,KAA2B;EAC1D,MAAMC,WAAW,GAAG,EAApB;EACA,CAAC,CAAAD,YAAY,QAAZ,YAAAA,YAAY,CAAEE,oBAAd,KAAsC,EAAvC;EACGC,MADH,CACUR,2BADV;EAEGS,OAFH,CAEW,CAAAC,OAAO,KAAI;IAClBA,OAAO,CAACC,cAAR,CAAuBF,OAAvB,CAA+B,CAAAG,GAAG,KAAI;MACpCA,GAAG,CAACH,OAAJ,CAAY,CAAAI,OAAO,KAAI;QACrB,IAAI,CAACA,OAAL,EAAc;QACd,IAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;UAC/B;UACA;UACAP,WAAW,CAACO,OAAD,CAAX,GAAuBX,QAAQ,CAACW,OAAD,CAA/B;QACD,CAJD,MAIO,IAAIA,OAAO,CAACC,IAAR,IAAgBD,OAAO,CAACE,MAA5B,EAAoC;UACzC;UACAT,WAAW,CAACO,OAAO,CAACC,IAAT,CAAX,GAA4BD,OAAO,CAACE,MAApC;QACD;MACF,CAVD;IAWD,CAZD;EAaD,CAhBH;EAiBA,OAAOT,WAAP;AACD,CApB+B,CAAhC;;AAsBA,MAAMU,qBAAqB,GAAG,CAAAZ,OAAO,KAAI;EACvC,MAAMC,YAAY,GAAGJ,4BAA4B,GAAGgB,GAA/B,CAAmCb,OAAnC,CAArB;EACA,OAAOD,gBAAgB,CAACC,OAAD,EAAUC,YAAV,CAAvB;AACD,CAHD;;AAKA,eAAeW,qBAAf"},"metadata":{},"sourceType":"module"}