{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};export const getRelevantDataMask = (dataMask, prop) => Object.values(dataMask).\nfilter((item) => item[prop]).\nreduce((prev, next) => ({ ...prev, [next.id]: prop ? next[prop] : next }), {});\nexport const getAllActiveFilters = (_ref) => {let { chartConfiguration, nativeFilters, dataMask, allSliceIds } = _ref;\n  const activeFilters = {};\n  // Combine native filters with cross filters, because they have similar logic\n  Object.values(dataMask).forEach((_ref2) => {var _ref3, _ref4, _nativeFilters$filter, _nativeFilters$filter2, _chartConfiguration$f, _chartConfiguration$f2;let { id: filterId, extraFormData } = _ref2;\n    const scope = (_ref3 = (_ref4 = (_nativeFilters$filter = nativeFilters == null ? void 0 : (_nativeFilters$filter2 = nativeFilters[filterId]) == null ? void 0 : _nativeFilters$filter2.chartsInScope) != null ? _nativeFilters$filter :\n    chartConfiguration == null ? void 0 : (_chartConfiguration$f = chartConfiguration[filterId]) == null ? void 0 : (_chartConfiguration$f2 = _chartConfiguration$f.crossFilters) == null ? void 0 : _chartConfiguration$f2.chartsInScope) != null ? _ref4 :\n    allSliceIds) != null ? _ref3 :\n    [];\n    // Iterate over all roots to find all affected charts\n    activeFilters[filterId] = {\n      scope,\n      values: extraFormData };\n\n  });\n  return activeFilters;\n};;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(getRelevantDataMask, \"getRelevantDataMask\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/util/activeAllDashboardFilters.ts\");reactHotLoader.register(getAllActiveFilters, \"getAllActiveFilters\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/util/activeAllDashboardFilters.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"uSAyBA,OAAO,MAAMA,mBAAmB,GAAG,CACjCC,QADiC,EAEjCC,IAFiC,KAIjCC,MAAM,CAACC,MAAP,CAAcH,QAAd;AACGI,MADH,CACU,KAAI,KAAIC,IAAI,CAACJ,IAAD,CADtB;AAEGK,MAFH,CAGI,CAACC,IAAD,EAAOC,IAAP,MAAiB,EAAE,GAAGD,IAAL,EAAW,CAACC,IAAI,CAACC,EAAN,GAAWR,IAAI,GAAGO,IAAI,CAACP,IAAD,CAAP,GAAgBO,IAA1C,EAAjB,CAHJ,EAII,EAJJ,CAJK;AAWP,OAAO,MAAME,mBAAmB,GAAG,UAUf,KAVgB,EAClCC,kBADkC,EAElCC,aAFkC,EAGlCZ,QAHkC,EAIlCa,WAJkC,EAUhB;EAClB,MAAMC,aAAa,GAAG,EAAtB;EAEA;EACAZ,MAAM,CAACC,MAAP,CAAcH,QAAd,EAAwBe,OAAxB,CAAgC,WAAoC,oHAAnC,EAAEN,EAAE,EAAEO,QAAN,EAAgBC,aAAhB,EAAmC;IAClE,MAAMC,KAAK,8CACTN,aADS,8CACTA,aAAa,CAAGI,QAAH,CADJ,qBACT,uBAA2BG,aADlB;IAETR,kBAFS,6CAETA,kBAAkB,CAAGK,QAAH,CAFT,+CAET,sBAAgCI,YAFvB,qBAET,uBAA8CD,aAFrC;IAGTN,WAHS;IAIT,EAJF;IAKA;IACAC,aAAa,CAACE,QAAD,CAAb,GAA0B;MACxBE,KADwB;MAExBf,MAAM,EAAEc,aAFgB,EAA1B;;EAID,CAXD;EAYA,OAAOH,aAAP;AACD,CA3BM,C,iLAXMf,mB,qKAWAW,mB","names":["getRelevantDataMask","dataMask","prop","Object","values","filter","item","reduce","prev","next","id","getAllActiveFilters","chartConfiguration","nativeFilters","allSliceIds","activeFilters","forEach","filterId","extraFormData","scope","chartsInScope","crossFilters"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/util/activeAllDashboardFilters.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  DataMaskStateWithId,\n  PartialFilters,\n  JsonObject,\n} from '@superset-ui/core';\nimport { ActiveFilters, ChartConfiguration } from '../types';\n\nexport const getRelevantDataMask = (\n  dataMask: DataMaskStateWithId,\n  prop: string,\n): JsonObject | DataMaskStateWithId =>\n  Object.values(dataMask)\n    .filter(item => item[prop])\n    .reduce(\n      (prev, next) => ({ ...prev, [next.id]: prop ? next[prop] : next }),\n      {},\n    );\n\nexport const getAllActiveFilters = ({\n  chartConfiguration,\n  nativeFilters,\n  dataMask,\n  allSliceIds,\n}: {\n  chartConfiguration: ChartConfiguration;\n  dataMask: DataMaskStateWithId;\n  nativeFilters: PartialFilters;\n  allSliceIds: number[];\n}): ActiveFilters => {\n  const activeFilters = {};\n\n  // Combine native filters with cross filters, because they have similar logic\n  Object.values(dataMask).forEach(({ id: filterId, extraFormData }) => {\n    const scope =\n      nativeFilters?.[filterId]?.chartsInScope ??\n      chartConfiguration?.[filterId]?.crossFilters?.chartsInScope ??\n      allSliceIds ??\n      [];\n    // Iterate over all roots to find all affected charts\n    activeFilters[filterId] = {\n      scope,\n      values: extraFormData,\n    };\n  });\n  return activeFilters;\n};\n"]},"metadata":{},"sourceType":"module"}