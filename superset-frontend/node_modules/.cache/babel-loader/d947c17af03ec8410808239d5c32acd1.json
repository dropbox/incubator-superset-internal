{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { css, t, useTheme } from '@superset-ui/core';\nimport { usePluginContext } from 'src/components/DynamicPlugins';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport { getChartKey } from 'src/explore/exploreUtils';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst FEATURED_CHARTS = [\n{\n  name: 'echarts_timeseries_line',\n  icon: ___EmotionJSX(Icons.LineChartTile, null) },\n\n{\n  name: 'echarts_timeseries_bar',\n  icon: ___EmotionJSX(Icons.BarChartTile, null) },\n\n{ name: 'echarts_area', icon: ___EmotionJSX(Icons.AreaChartTile, null) },\n{ name: 'table', icon: ___EmotionJSX(Icons.TableChartTile, null) },\n{\n  name: 'big_number_total',\n  icon: ___EmotionJSX(Icons.BigNumberChartTile, null) },\n\n{ name: 'pie', icon: ___EmotionJSX(Icons.PieChartTile, null) }];\n\nconst antdIconProps = {\n  iconSize: 'l',\n  css: (theme) => css`\n    padding: ${theme.gridUnit}px;\n    & > * {\n      line-height: 0;\n    }\n  ` };\n\nconst VizTile = (_ref) => {var _mountedPluginMetadat;let { isActive, isRendered, vizMeta, onTileClick } = _ref;\n  const { mountedPluginMetadata } = usePluginContext();\n  const chartNameRef = useRef(null);\n  const theme = useTheme();\n  const TILE_TRANSITION_TIME = theme.transitionTiming * 2;\n  const [tooltipVisible, setTooltipVisible] = useState(false);\n  const [isTransitioning, setIsTransitioning] = useState(false);\n  const [showTooltip, setShowTooltip] = useState(false);\n  const chartName = vizMeta.name ?\n  ((_mountedPluginMetadat = mountedPluginMetadata[vizMeta.name]) == null ? void 0 : _mountedPluginMetadat.name) || `${vizMeta.name}` :\n  t('Select Viz Type');\n  const handleTileClick = useCallback(() => {\n    onTileClick(vizMeta.name);\n    setIsTransitioning(true);\n    setTooltipVisible(false);\n    setTimeout(() => {\n      setIsTransitioning(false);\n    }, TILE_TRANSITION_TIME * 1000);\n  }, [onTileClick, TILE_TRANSITION_TIME, vizMeta.name]);\n  // Antd tooltip seems to be bugged - when elements move, the tooltip sometimes\n  // stays visible even when user doesn't hover over the element.\n  // Here we manually prevent it from displaying after user triggers transition\n  useEffect(() => {\n    setShowTooltip(Boolean(!isTransitioning && (\n    !isActive ||\n    chartNameRef.current &&\n    chartNameRef.current.scrollWidth >\n    chartNameRef.current.clientWidth)));\n  }, [isActive, isTransitioning]);\n  const containerProps = useMemo(() => !isActive ?\n  { role: 'button', tabIndex: 0, onClick: handleTileClick } :\n  {}, [handleTileClick, isActive]);\n  let tooltipTitle = null;\n  if (showTooltip) {\n    tooltipTitle = isRendered ?\n    t('Currently rendered: %s', chartName) :\n    chartName;\n  }\n  return ___EmotionJSX(Tooltip, { title: tooltipTitle, onVisibleChange: (visible) => setTooltipVisible(visible), visible: tooltipVisible && !isTransitioning, placement: \"top\", mouseEnterDelay: 0.4 },\n  ___EmotionJSX(\"div\", _extends({}, containerProps, { css: css`\n          display: flex;\n          align-items: center;\n          text-transform: uppercase;\n\n          color: ${theme.colors.grayscale.base};\n          font-weight: ${theme.typography.weights.bold};\n          border-radius: 6px;\n          white-space: nowrap;\n          overflow: hidden;\n          max-width: fit-content;\n\n          ${!isActive &&\n    css`\n            flex-shrink: 0;\n            width: ${theme.gridUnit * 6}px;\n            background-color: transparent;\n            transition: none;\n            &:hover svg path {\n              fill: ${theme.colors.primary.base};\n              transition: fill ${theme.transitionTiming}s ease-out;\n            }\n          `}\n\n          ${isActive &&\n    css`\n            width: 100%;\n            background-color: ${theme.colors.grayscale.light4};\n            transition: width ${TILE_TRANSITION_TIME}s ease-out,\n              background-color ${TILE_TRANSITION_TIME}s ease-out;\n            cursor: default;\n            svg path {\n              fill: ${theme.colors.primary.base};\n            }\n          `}\n        ` }),\n  vizMeta.icon, ' ',\n  ___EmotionJSX(\"span\", { css: css`\n            overflow: hidden;\n            text-overflow: ellipsis;\n            min-width: 0;\n            padding-right: ${theme.gridUnit}px;\n          `, ref: chartNameRef },\n  chartName)));\n\n\n\n};\nexport const FastVizSwitcher = /*#__PURE__*/React.memo((_ref2) => {let { currentSelection, onChange } = _ref2;\n  const currentViz = useSelector((state) => {var _state$charts, _state$charts$getChar, _state$charts$getChar2;return (_state$charts = state.charts) == null ? void 0 : (_state$charts$getChar = _state$charts[getChartKey(state.explore)]) == null ? void 0 : (_state$charts$getChar2 = _state$charts$getChar.latestQueryFormData) == null ? void 0 : _state$charts$getChar2.\n    viz_type;});\n  const vizTiles = useMemo(() => {\n    const vizTiles = [...FEATURED_CHARTS];\n    if (currentSelection &&\n    FEATURED_CHARTS.every((featuredVizMeta) => featuredVizMeta.name !== currentSelection) &&\n    currentSelection !== currentViz) {\n      vizTiles.unshift({\n        name: currentSelection,\n        icon: ___EmotionJSX(Icons.MonitorOutlined, _extends({}, antdIconProps, { \"aria-label\": \"monitor\" })) });\n\n    }\n    if (currentViz &&\n    FEATURED_CHARTS.every((featuredVizMeta) => featuredVizMeta.name !== currentViz)) {\n      vizTiles.unshift({\n        name: currentViz,\n        icon: ___EmotionJSX(Icons.CheckSquareOutlined, _extends({}, antdIconProps, { \"aria-label\": \"check-square\" })) });\n\n    }\n    return vizTiles;\n  }, [currentSelection, currentViz]);\n  return ___EmotionJSX(\"div\", { css: (theme) => css`\n          display: flex;\n          justify-content: space-between;\n          column-gap: ${theme.gridUnit}px;\n        ` },\n  vizTiles.map((vizMeta) => ___EmotionJSX(VizTile, { vizMeta: vizMeta, isActive: currentSelection === vizMeta.name, isRendered: currentViz === vizMeta.name, onTileClick: onChange, key: vizMeta.name })));\n\n});","map":{"version":3,"mappings":"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","names":["React","useCallback","useEffect","useMemo","useRef","useState","useSelector","css","t","useTheme","usePluginContext","Tooltip","Icons","getChartKey","FEATURED_CHARTS","name","icon","antdIconProps","iconSize","theme","gridUnit","VizTile","isActive","isRendered","vizMeta","onTileClick","mountedPluginMetadata","chartNameRef","TILE_TRANSITION_TIME","transitionTiming","tooltipVisible","setTooltipVisible","isTransitioning","setIsTransitioning","showTooltip","setShowTooltip","chartName","handleTileClick","setTimeout","Boolean","current","scrollWidth","clientWidth","containerProps","role","tabIndex","onClick","tooltipTitle","visible","colors","grayscale","base","typography","weights","bold","primary","light4","FastVizSwitcher","memo","currentSelection","onChange","currentViz","state","charts","explore","latestQueryFormData","viz_type","vizTiles","every","featuredVizMeta","unshift","map"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/controls/VizTypeControl/FastVizSwitcher.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, {\n  ReactElement,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { useSelector } from 'react-redux';\nimport { css, SupersetTheme, t, useTheme } from '@superset-ui/core';\nimport { usePluginContext } from 'src/components/DynamicPlugins';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport { getChartKey } from 'src/explore/exploreUtils';\nimport { ExplorePageState } from 'src/explore/types';\n\nexport interface VizMeta {\n  icon: ReactElement;\n  name: string;\n}\n\nexport interface FastVizSwitcherProps {\n  onChange: (vizName: string) => void;\n  currentSelection: string | null;\n}\ninterface VizTileProps {\n  vizMeta: VizMeta;\n  isActive: boolean;\n  isRendered: boolean;\n  onTileClick: (vizType: string) => void;\n}\n\nconst FEATURED_CHARTS: VizMeta[] = [\n  {\n    name: 'echarts_timeseries_line',\n    icon: <Icons.LineChartTile />,\n  },\n  {\n    name: 'echarts_timeseries_bar',\n    icon: <Icons.BarChartTile />,\n  },\n  { name: 'echarts_area', icon: <Icons.AreaChartTile /> },\n  { name: 'table', icon: <Icons.TableChartTile /> },\n  {\n    name: 'big_number_total',\n    icon: <Icons.BigNumberChartTile />,\n  },\n  { name: 'pie', icon: <Icons.PieChartTile /> },\n];\n\nconst antdIconProps = {\n  iconSize: 'l' as const,\n  css: (theme: SupersetTheme) => css`\n    padding: ${theme.gridUnit}px;\n    & > * {\n      line-height: 0;\n    }\n  `,\n};\n\nconst VizTile = ({\n  isActive,\n  isRendered,\n  vizMeta,\n  onTileClick,\n}: VizTileProps) => {\n  const { mountedPluginMetadata } = usePluginContext();\n  const chartNameRef = useRef<HTMLSpanElement>(null);\n  const theme = useTheme();\n  const TILE_TRANSITION_TIME = theme.transitionTiming * 2;\n  const [tooltipVisible, setTooltipVisible] = useState(false);\n  const [isTransitioning, setIsTransitioning] = useState(false);\n  const [showTooltip, setShowTooltip] = useState(false);\n  const chartName = vizMeta.name\n    ? mountedPluginMetadata[vizMeta.name]?.name || `${vizMeta.name}`\n    : t('Select Viz Type');\n\n  const handleTileClick = useCallback(() => {\n    onTileClick(vizMeta.name);\n    setIsTransitioning(true);\n    setTooltipVisible(false);\n    setTimeout(() => {\n      setIsTransitioning(false);\n    }, TILE_TRANSITION_TIME * 1000);\n  }, [onTileClick, TILE_TRANSITION_TIME, vizMeta.name]);\n\n  // Antd tooltip seems to be bugged - when elements move, the tooltip sometimes\n  // stays visible even when user doesn't hover over the element.\n  // Here we manually prevent it from displaying after user triggers transition\n  useEffect(() => {\n    setShowTooltip(\n      Boolean(\n        !isTransitioning &&\n          (!isActive ||\n            (chartNameRef.current &&\n              chartNameRef.current.scrollWidth >\n                chartNameRef.current.clientWidth)),\n      ),\n    );\n  }, [isActive, isTransitioning]);\n\n  const containerProps = useMemo(\n    () =>\n      !isActive\n        ? { role: 'button', tabIndex: 0, onClick: handleTileClick }\n        : {},\n    [handleTileClick, isActive],\n  );\n\n  let tooltipTitle: string | null = null;\n  if (showTooltip) {\n    tooltipTitle = isRendered\n      ? t('Currently rendered: %s', chartName)\n      : chartName;\n  }\n  return (\n    <Tooltip\n      title={tooltipTitle}\n      onVisibleChange={visible => setTooltipVisible(visible)}\n      visible={tooltipVisible && !isTransitioning}\n      placement=\"top\"\n      mouseEnterDelay={0.4}\n    >\n      <div\n        {...containerProps}\n        css={css`\n          display: flex;\n          align-items: center;\n          text-transform: uppercase;\n\n          color: ${theme.colors.grayscale.base};\n          font-weight: ${theme.typography.weights.bold};\n          border-radius: 6px;\n          white-space: nowrap;\n          overflow: hidden;\n          max-width: fit-content;\n\n          ${!isActive &&\n          css`\n            flex-shrink: 0;\n            width: ${theme.gridUnit * 6}px;\n            background-color: transparent;\n            transition: none;\n            &:hover svg path {\n              fill: ${theme.colors.primary.base};\n              transition: fill ${theme.transitionTiming}s ease-out;\n            }\n          `}\n\n          ${isActive &&\n          css`\n            width: 100%;\n            background-color: ${theme.colors.grayscale.light4};\n            transition: width ${TILE_TRANSITION_TIME}s ease-out,\n              background-color ${TILE_TRANSITION_TIME}s ease-out;\n            cursor: default;\n            svg path {\n              fill: ${theme.colors.primary.base};\n            }\n          `}\n        `}\n      >\n        {vizMeta.icon}{' '}\n        <span\n          css={css`\n            overflow: hidden;\n            text-overflow: ellipsis;\n            min-width: 0;\n            padding-right: ${theme.gridUnit}px;\n          `}\n          ref={chartNameRef}\n        >\n          {chartName}\n        </span>\n      </div>\n    </Tooltip>\n  );\n};\n\nexport const FastVizSwitcher = React.memo(\n  ({ currentSelection, onChange }: FastVizSwitcherProps) => {\n    const currentViz = useSelector<ExplorePageState, string | undefined>(\n      state =>\n        state.charts?.[getChartKey(state.explore)]?.latestQueryFormData\n          ?.viz_type,\n    );\n    const vizTiles = useMemo(() => {\n      const vizTiles = [...FEATURED_CHARTS];\n      if (\n        currentSelection &&\n        FEATURED_CHARTS.every(\n          featuredVizMeta => featuredVizMeta.name !== currentSelection,\n        ) &&\n        currentSelection !== currentViz\n      ) {\n        vizTiles.unshift({\n          name: currentSelection,\n          icon: (\n            <Icons.MonitorOutlined {...antdIconProps} aria-label=\"monitor\" />\n          ),\n        });\n      }\n      if (\n        currentViz &&\n        FEATURED_CHARTS.every(\n          featuredVizMeta => featuredVizMeta.name !== currentViz,\n        )\n      ) {\n        vizTiles.unshift({\n          name: currentViz,\n          icon: (\n            <Icons.CheckSquareOutlined\n              {...antdIconProps}\n              aria-label=\"check-square\"\n            />\n          ),\n        });\n      }\n      return vizTiles;\n    }, [currentSelection, currentViz]);\n\n    return (\n      <div\n        css={(theme: SupersetTheme) => css`\n          display: flex;\n          justify-content: space-between;\n          column-gap: ${theme.gridUnit}px;\n        `}\n        data-test=\"fast-viz-switcher\"\n      >\n        {vizTiles.map(vizMeta => (\n          <VizTile\n            vizMeta={vizMeta}\n            isActive={currentSelection === vizMeta.name}\n            isRendered={currentViz === vizMeta.name}\n            onTileClick={onChange}\n            key={vizMeta.name}\n          />\n        ))}\n      </div>\n    );\n  },\n);\n"]},"metadata":{},"sourceType":"module"}