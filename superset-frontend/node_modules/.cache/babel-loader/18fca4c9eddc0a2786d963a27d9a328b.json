{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState, useEffect, useCallback, useMemo } from 'react';\nimport { SupersetClient, logging, t } from '@superset-ui/core';\nimport rison from 'rison';\nimport { addDangerToast } from 'src/components/MessageToasts/actions';\n/**\n * Retrieves all pages of dataset results\n */\nconst useDatasetsList = (db, schema) => {\n  const [datasets, setDatasets] = useState([]);\n  const encodedSchema = schema ? encodeURIComponent(schema) : undefined;\n  const getDatasetsList = useCallback(async (filters) => {\n    let results = [];\n    let page = 0;\n    let count;\n    // If count is undefined or less than results, we need to\n    // asynchronously retrieve a page of dataset results\n    while (count === undefined || results.length < count) {\n      const queryParams = rison.encode_uri({ filters, page });\n      try {\n        // eslint-disable-next-line no-await-in-loop\n        const response = await SupersetClient.get({\n          endpoint: `/api/v1/dataset/?q=${queryParams}` });\n\n        // Reassign local count to response's count\n        ({ count } = response.json);\n        const { json: { result } } = response;\n        results = [...results, ...result];\n        page += 1;\n      }\n      catch (error) {\n        addDangerToast(t('There was an error fetching dataset'));\n        logging.error(t('There was an error fetching dataset'), error);\n      }\n    }\n    setDatasets(results);\n  }, []);\n  useEffect(() => {\n    const filters = [\n    { col: 'database', opr: 'rel_o_m', value: db == null ? void 0 : db.id },\n    { col: 'schema', opr: 'eq', value: encodedSchema },\n    { col: 'sql', opr: 'dataset_is_null_or_empty', value: true }];\n\n    if (schema) {\n      getDatasetsList(filters);\n    }\n  }, [db == null ? void 0 : db.id, schema, encodedSchema, getDatasetsList]);\n  const datasetNames = useMemo(() => datasets == null ? void 0 : datasets.map((dataset) => dataset.table_name), [datasets]);\n  return { datasets, datasetNames };\n};\nexport default useDatasetsList;","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,EAA2CC,OAA3C,QAA0D,OAA1D;AACA,SAASC,cAAT,EAAyBC,OAAzB,EAAkCC,CAAlC,QAA2C,mBAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,sCAA/B;AAIA;;;AAGA,MAAMC,eAAe,GAAG,CACtBC,EADsB,EAMtBC,MANsB,KAOpB;EACF,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAkB,EAAlB,CAAxC;EACA,MAAMc,aAAa,GAAGH,MAAM,GAAGI,kBAAkB,CAACJ,MAAD,CAArB,GAAgCK,SAA5D;EAEA,MAAMC,eAAe,GAAGf,WAAW,CAAC,OAAOgB,OAAP,KAA4B;IAC9D,IAAIC,OAAO,GAAoB,EAA/B;IACA,IAAIC,IAAI,GAAG,CAAX;IACA,IAAIC,KAAJ;IAEA;IACA;IACA,OAAOA,KAAK,KAAKL,SAAV,IAAuBG,OAAO,CAACG,MAAR,GAAiBD,KAA/C,EAAsD;MACpD,MAAME,WAAW,GAAGhB,KAAK,CAACiB,UAAN,CAAiB,EAAEN,OAAF,EAAWE,IAAX,EAAjB,CAApB;MACA,IAAI;QACF;QACA,MAAMK,QAAQ,GAAG,MAAMrB,cAAc,CAACsB,GAAf,CAAmB;UACxCC,QAAQ,EAAE,sBAAsBJ,WAAW,EADH,EAAnB,CAAvB;;QAIA;QACA,CAAC,EAAEF,KAAF,KAAYI,QAAQ,CAACG,IAAtB;QAEA,MAAM,EACJA,IAAI,EAAE,EAAEC,MAAF,EADF,KAEFJ,QAFJ;QAIAN,OAAO,GAAG,CAAC,GAAGA,OAAJ,EAAa,GAAGU,MAAhB,CAAV;QAEAT,IAAI,IAAI,CAAR;MACD;MAAC,OAAOU,KAAP,EAAc;QACdtB,cAAc,CAACF,CAAC,CAAC,qCAAD,CAAF,CAAd;QACAD,OAAO,CAACyB,KAAR,CAAcxB,CAAC,CAAC,qCAAD,CAAf,EAAwDwB,KAAxD;MACD;IACF;IAEDjB,WAAW,CAACM,OAAD,CAAX;EACD,CAhCkC,EAgChC,EAhCgC,CAAnC;EAkCAlB,SAAS,CAAC,MAAK;IACb,MAAMiB,OAAO,GAAG;IACd,EAAEa,GAAG,EAAE,UAAP,EAAmBC,GAAG,EAAE,SAAxB,EAAmCC,KAAK,EAAEvB,EAAF,oBAAEA,EAAE,CAAEwB,EAA9C,EADc;IAEd,EAAEH,GAAG,EAAE,QAAP,EAAiBC,GAAG,EAAE,IAAtB,EAA4BC,KAAK,EAAEnB,aAAnC,EAFc;IAGd,EAAEiB,GAAG,EAAE,KAAP,EAAcC,GAAG,EAAE,0BAAnB,EAA+CC,KAAK,EAAE,IAAtD,EAHc,CAAhB;;IAMA,IAAItB,MAAJ,EAAY;MACVM,eAAe,CAACC,OAAD,CAAf;IACD;EACF,CAVQ,EAUN,CAACR,EAAD,oBAACA,EAAE,CAAEwB,EAAL,EAASvB,MAAT,EAAiBG,aAAjB,EAAgCG,eAAhC,CAVM,CAAT;EAYA,MAAMkB,YAAY,GAAGhC,OAAO,CAC1B,MAAMS,QAAN,oBAAMA,QAAQ,CAAEwB,GAAV,CAAc,QAAO,KAAIC,OAAO,CAACC,UAAjC,CADoB,EAE1B,CAAC1B,QAAD,CAF0B,CAA5B;EAKA,OAAO,EAAEA,QAAF,EAAYuB,YAAZ,EAAP;AACD,CA/DD;AAiEA,eAAe1B,eAAf","names":["useState","useEffect","useCallback","useMemo","SupersetClient","logging","t","rison","addDangerToast","useDatasetsList","db","schema","datasets","setDatasets","encodedSchema","encodeURIComponent","undefined","getDatasetsList","filters","results","page","count","length","queryParams","encode_uri","response","get","endpoint","json","result","error","col","opr","value","id","datasetNames","map","dataset","table_name"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/features/datasets/hooks/useDatasetLists.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState, useEffect, useCallback, useMemo } from 'react';\nimport { SupersetClient, logging, t } from '@superset-ui/core';\nimport rison from 'rison';\nimport { addDangerToast } from 'src/components/MessageToasts/actions';\nimport { DatasetObject } from 'src/features/datasets/AddDataset/types';\nimport { DatabaseObject } from 'src/components/DatabaseSelector';\n\n/**\n * Retrieves all pages of dataset results\n */\nconst useDatasetsList = (\n  db:\n    | (DatabaseObject & {\n        owners: [number];\n      })\n    | undefined,\n  schema: string | null | undefined,\n) => {\n  const [datasets, setDatasets] = useState<DatasetObject[]>([]);\n  const encodedSchema = schema ? encodeURIComponent(schema) : undefined;\n\n  const getDatasetsList = useCallback(async (filters: object[]) => {\n    let results: DatasetObject[] = [];\n    let page = 0;\n    let count;\n\n    // If count is undefined or less than results, we need to\n    // asynchronously retrieve a page of dataset results\n    while (count === undefined || results.length < count) {\n      const queryParams = rison.encode_uri({ filters, page });\n      try {\n        // eslint-disable-next-line no-await-in-loop\n        const response = await SupersetClient.get({\n          endpoint: `/api/v1/dataset/?q=${queryParams}`,\n        });\n\n        // Reassign local count to response's count\n        ({ count } = response.json);\n\n        const {\n          json: { result },\n        } = response;\n\n        results = [...results, ...result];\n\n        page += 1;\n      } catch (error) {\n        addDangerToast(t('There was an error fetching dataset'));\n        logging.error(t('There was an error fetching dataset'), error);\n      }\n    }\n\n    setDatasets(results);\n  }, []);\n\n  useEffect(() => {\n    const filters = [\n      { col: 'database', opr: 'rel_o_m', value: db?.id },\n      { col: 'schema', opr: 'eq', value: encodedSchema },\n      { col: 'sql', opr: 'dataset_is_null_or_empty', value: true },\n    ];\n\n    if (schema) {\n      getDatasetsList(filters);\n    }\n  }, [db?.id, schema, encodedSchema, getDatasetsList]);\n\n  const datasetNames = useMemo(\n    () => datasets?.map(dataset => dataset.table_name),\n    [datasets],\n  );\n\n  return { datasets, datasetNames };\n};\n\nexport default useDatasetsList;\n"]},"metadata":{},"sourceType":"module"}