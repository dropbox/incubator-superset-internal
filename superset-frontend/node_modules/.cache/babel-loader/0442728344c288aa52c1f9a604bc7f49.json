{"ast":null,"code":"import { css as _css } from \"@emotion/react\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";function _EMOTION_STRINGIFIED_CSS_ERROR__() {return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport rison from 'rison';\nimport React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { Radio } from 'src/components/Radio';\nimport Card from 'src/components/Card';\nimport Alert from 'src/components/Alert';\nimport Badge from 'src/components/Badge';\nimport shortid from 'shortid';\nimport {\nFeatureFlag,\nstyled,\nSupersetClient,\nt,\nwithTheme } from\n'@superset-ui/core';\nimport { Select, AsyncSelect, Row, Col } from 'src/components';\nimport { FormLabel } from 'src/components/Form';\nimport Button from 'src/components/Button';\nimport Tabs from 'src/components/Tabs';\nimport CertifiedBadge from 'src/components/CertifiedBadge';\nimport WarningIconWithTooltip from 'src/components/WarningIconWithTooltip';\nimport DatabaseSelector from 'src/components/DatabaseSelector';\nimport Label from 'src/components/Label';\nimport Loading from 'src/components/Loading';\nimport TableSelector from 'src/components/TableSelector';\nimport EditableTitle from 'src/components/EditableTitle';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport CheckboxControl from 'src/explore/components/controls/CheckboxControl';\nimport TextControl from 'src/explore/components/controls/TextControl';\nimport TextAreaControl from 'src/explore/components/controls/TextAreaControl';\nimport SpatialControl from 'src/explore/components/controls/SpatialControl';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { isFeatureEnabled } from 'src/featureFlags';\nimport Icons from 'src/components/Icons';\nimport CollectionTable from './CollectionTable';\nimport Fieldset from './Fieldset';\nimport Field from './Field';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst DatasourceContainer = styled.div`\n  .change-warning {\n    margin: 16px 10px 0;\n    color: ${(_ref) => {let { theme } = _ref;return theme.colors.warning.base;}};\n  }\n\n  .change-warning .bold {\n    font-weight: ${(_ref2) => {let { theme } = _ref2;return theme.typography.weights.bold;}};\n  }\n\n  .form-group.has-feedback > .help-block {\n    margin-top: 8px;\n  }\n\n  .form-group.form-group-md {\n    margin-bottom: 8px;\n  }\n`;\n\nconst FlexRowContainer = styled.div`\n  align-items: center;\n  display: flex;\n\n  svg {\n    margin-right: ${(_ref3) => {let { theme } = _ref3;return theme.gridUnit;}}px;\n  }\n`;\n\nconst StyledTableTabs = styled(Tabs)`\n  overflow: visible;\n  .ant-tabs-content-holder {\n    overflow: visible;\n  }\n`;\n\nconst StyledBadge = styled(Badge)`\n  .ant-badge-count {\n    line-height: ${(_ref4) => {let { theme } = _ref4;return theme.gridUnit * 4;}}px;\n    height: ${(_ref5) => {let { theme } = _ref5;return theme.gridUnit * 4;}}px;\n    margin-left: ${(_ref6) => {let { theme } = _ref6;return theme.gridUnit;}}px;\n  }\n`;\n\nconst EditLockContainer = styled.div`\n  font-size: ${(_ref7) => {let { theme } = _ref7;return theme.typography.sizes.s;}}px;\n  display: flex;\n  align-items: center;\n  a {\n    padding: 0 10px;\n  }\n`;\n\nconst ColumnButtonWrapper = styled.div`\n  text-align: right;\n  ${(_ref8) => {let { theme } = _ref8;return `margin-bottom: ${theme.gridUnit * 2}px`;}}\n`;\n\nconst StyledLabelWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  span {\n    margin-right: ${(_ref9) => {let { theme } = _ref9;return theme.gridUnit;}}px;\n  }\n`;\n\nconst StyledColumnsTabWrapper = styled.div`\n  .table > tbody > tr > td {\n    vertical-align: middle;\n  }\n\n  .ant-tag {\n    margin-top: ${(_ref10) => {let { theme } = _ref10;return theme.gridUnit;}}px;\n  }\n`;\n\nconst StyledButtonWrapper = styled.span`\n  ${(_ref11) => {let { theme } = _ref11;return `\n    margin-top: ${theme.gridUnit * 3}px;\n    margin-left: ${theme.gridUnit * 3}px;\n  `;}}\n`;\n\nconst checkboxGenerator = (d, onChange) =>\n___EmotionJSX(CheckboxControl, { value: d, onChange: onChange });\n\nconst DATA_TYPES = [\n{ value: 'STRING', label: t('STRING') },\n{ value: 'NUMERIC', label: t('NUMERIC') },\n{ value: 'DATETIME', label: t('DATETIME') },\n{ value: 'BOOLEAN', label: t('BOOLEAN') }];\n\n\nconst DATASOURCE_TYPES_ARR = [\n{ key: 'physical', label: t('Physical (table or view)') },\n{ key: 'virtual', label: t('Virtual (SQL)') }];\n\nconst DATASOURCE_TYPES = {};\nDATASOURCE_TYPES_ARR.forEach((o) => {\n  DATASOURCE_TYPES[o.key] = o;\n});var _ref13 = process.env.NODE_ENV === \"production\" ? { name: \"s5xdrg\", styles: \"display:flex;align-items:center\" } : { name: \"l0hchv-CollectionTabTitle\", styles: \"display:flex;align-items:center;label:CollectionTabTitle;\", map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", toString: _EMOTION_STRINGIFIED_CSS_ERROR__ };\n\nfunction CollectionTabTitle(_ref12) {let { title, collection } = _ref12;\n  return (\n    ___EmotionJSX(\"div\", {\n      css: _ref13,\n      \"data-test\": `collection-tab-${title}` },\n\n    title, ' ',\n    ___EmotionJSX(StyledBadge, { count: collection ? collection.length : 0, showZero: true })));\n\n\n}\n\nCollectionTabTitle.propTypes = {\n  title: PropTypes.string,\n  collection: PropTypes.array };\n\n\nfunction ColumnCollectionTable(_ref14)\n\n\n\n\n\n\n\n\n\n{let { columns, datasource, onColumnsChange, onDatasourceChange, editableColumnName, showExpression, allowAddItem, allowEditDataType, itemGenerator } = _ref14;\n  return (\n    ___EmotionJSX(CollectionTable, {\n      collection: columns,\n      tableColumns:\n      isFeatureEnabled(FeatureFlag.ENABLE_ADVANCED_DATA_TYPES) ?\n      [\n      'column_name',\n      'advanced_data_type',\n      'type',\n      'is_dttm',\n      'main_dttm_col',\n      'filterable',\n      'groupby'] :\n\n      [\n      'column_name',\n      'type',\n      'is_dttm',\n      'main_dttm_col',\n      'filterable',\n      'groupby'],\n\n\n      sortColumns:\n      isFeatureEnabled(FeatureFlag.ENABLE_ADVANCED_DATA_TYPES) ?\n      [\n      'column_name',\n      'advanced_data_type',\n      'type',\n      'is_dttm',\n      'main_dttm_col',\n      'filterable',\n      'groupby'] :\n\n      [\n      'column_name',\n      'type',\n      'is_dttm',\n      'main_dttm_col',\n      'filterable',\n      'groupby'],\n\n\n      allowDeletes: true,\n      allowAddItem: allowAddItem,\n      itemGenerator: itemGenerator,\n      stickyHeader: true,\n      expandFieldset:\n      ___EmotionJSX(FormContainer, null,\n      ___EmotionJSX(Fieldset, { compact: true },\n      showExpression &&\n      ___EmotionJSX(Field, {\n        fieldKey: \"expression\",\n        label: t('SQL expression'),\n        control:\n        ___EmotionJSX(TextAreaControl, {\n          language: \"markdown\",\n          offerEditInModal: false,\n          resize: \"vertical\" }) }),\n\n\n\n\n      ___EmotionJSX(Field, {\n        fieldKey: \"verbose_name\",\n        label: t('Label'),\n        control:\n        ___EmotionJSX(TextControl, {\n          controlId: \"verbose_name\",\n          placeholder: t('Label') }) }),\n\n\n\n      ___EmotionJSX(Field, {\n        fieldKey: \"description\",\n        label: t('Description'),\n        control:\n        ___EmotionJSX(TextControl, {\n          controlId: \"description\",\n          placeholder: t('Description') }) }),\n\n\n\n      allowEditDataType &&\n      ___EmotionJSX(Field, {\n        fieldKey: \"type\",\n        label: t('Data type'),\n        control:\n        ___EmotionJSX(Select, {\n          ariaLabel: t('Data type'),\n          options: DATA_TYPES,\n          name: \"type\",\n          allowNewOptions: true,\n          allowClear: true }) }),\n\n\n\n\n      isFeatureEnabled(FeatureFlag.ENABLE_ADVANCED_DATA_TYPES) ?\n      ___EmotionJSX(Field, {\n        fieldKey: \"advanced_data_type\",\n        label: t('Advanced data type'),\n        control:\n        ___EmotionJSX(TextControl, {\n          controlId: \"advanced_data_type\",\n          placeholder: t('Advanced Data type') }) }) :\n\n\n\n\n      ___EmotionJSX(React.Fragment, null),\n\n      ___EmotionJSX(Field, {\n        fieldKey: \"python_date_format\",\n        label: t('Datetime format'),\n        description:\n        /* Note the fragmented translations may not work. */\n        ___EmotionJSX(\"div\", null,\n        t('The pattern of timestamp format. For strings use '),\n        ___EmotionJSX(\"a\", { href: \"https://docs.python.org/2/library/datetime.html#strftime-strptime-behavior\" },\n        t('Python datetime string pattern')),\n\n        t(' expression which needs to adhere to the '),\n        ___EmotionJSX(\"a\", { href: \"https://en.wikipedia.org/wiki/ISO_8601\" },\n        t('ISO 8601')),\n\n        t(` standard to ensure that the lexicographical ordering\n                      coincides with the chronological ordering. If the\n                      timestamp format does not adhere to the ISO 8601 standard\n                      you will need to define an expression and type for\n                      transforming the string into a date or timestamp. Note\n                      currently time zones are not supported. If time is stored\n                      in epoch format, put \\`epoch_s\\` or \\`epoch_ms\\`. If no pattern\n                      is specified we fall back to using the optional defaults on a per\n                      database/column name level via the extra parameter.`)),\n\n\n        control:\n        ___EmotionJSX(TextControl, {\n          controlId: \"python_date_format\",\n          placeholder: \"%Y/%m/%d\" }) }),\n\n\n\n      ___EmotionJSX(Field, {\n        fieldKey: \"certified_by\",\n        label: t('Certified By'),\n        description: t('Person or group that has certified this metric'),\n        control:\n        ___EmotionJSX(TextControl, {\n          controlId: \"certified\",\n          placeholder: t('Certified by') }) }),\n\n\n\n      ___EmotionJSX(Field, {\n        fieldKey: \"certification_details\",\n        label: t('Certification details'),\n        description: t('Details of the certification'),\n        control:\n        ___EmotionJSX(TextControl, {\n          controlId: \"certificationDetails\",\n          placeholder: t('Certification details') }) }))),\n\n\n\n\n\n\n      columnLabels:\n      isFeatureEnabled(FeatureFlag.ENABLE_ADVANCED_DATA_TYPES) ?\n      {\n        column_name: t('Column'),\n        advanced_data_type: t('Advanced data type'),\n        type: t('Data type'),\n        groupby: t('Is dimension'),\n        is_dttm: t('Is temporal'),\n        main_dttm_col: t('Default datetime'),\n        filterable: t('Is filterable') } :\n\n      {\n        column_name: t('Column'),\n        type: t('Data type'),\n        groupby: t('Is dimension'),\n        is_dttm: t('Is temporal'),\n        main_dttm_col: t('Default datetime'),\n        filterable: t('Is filterable') },\n\n\n      onChange: onColumnsChange,\n      itemRenderers:\n      isFeatureEnabled(FeatureFlag.ENABLE_ADVANCED_DATA_TYPES) ?\n      {\n        column_name: (v, onItemChange, _, record) =>\n        editableColumnName ?\n        ___EmotionJSX(StyledLabelWrapper, null,\n        record.is_certified &&\n        ___EmotionJSX(CertifiedBadge, {\n          certifiedBy: record.certified_by,\n          details: record.certification_details }),\n\n\n        ___EmotionJSX(EditableTitle, {\n          canEdit: true,\n          title: v,\n          onSaveTitle: onItemChange })) :\n\n\n\n        ___EmotionJSX(StyledLabelWrapper, null,\n        record.is_certified &&\n        ___EmotionJSX(CertifiedBadge, {\n          certifiedBy: record.certified_by,\n          details: record.certification_details }),\n\n\n        v),\n\n\n        main_dttm_col: (value, _onItemChange, _label, record) => {\n          const checked = datasource.main_dttm_col === record.column_name;\n          const disabled = !columns.find(\n          (column) => column.column_name === record.column_name).\n          is_dttm;\n          return (\n            ___EmotionJSX(Radio, {\n              \"data-test\": `radio-default-dttm-${record.column_name}`,\n              checked: checked,\n              disabled: disabled,\n              onChange: () =>\n              onDatasourceChange({\n                ...datasource,\n                main_dttm_col: record.column_name }) }));\n\n\n\n\n        },\n        type: (d) => d ? ___EmotionJSX(Label, null, d) : null,\n        advanced_data_type: (d) =>\n        ___EmotionJSX(Label, { onChange: onColumnsChange }, d),\n\n        is_dttm: checkboxGenerator,\n        filterable: checkboxGenerator,\n        groupby: checkboxGenerator } :\n\n      {\n        column_name: (v, onItemChange, _, record) =>\n        editableColumnName ?\n        ___EmotionJSX(StyledLabelWrapper, null,\n        record.is_certified &&\n        ___EmotionJSX(CertifiedBadge, {\n          certifiedBy: record.certified_by,\n          details: record.certification_details }),\n\n\n        ___EmotionJSX(TextControl, { value: v, onChange: onItemChange })) :\n\n\n        ___EmotionJSX(StyledLabelWrapper, null,\n        record.is_certified &&\n        ___EmotionJSX(CertifiedBadge, {\n          certifiedBy: record.certified_by,\n          details: record.certification_details }),\n\n\n        v),\n\n\n        main_dttm_col: (value, _onItemChange, _label, record) => {\n          const checked = datasource.main_dttm_col === record.column_name;\n          const disabled = !columns.find(\n          (column) => column.column_name === record.column_name).\n          is_dttm;\n          return (\n            ___EmotionJSX(Radio, {\n              \"data-test\": `radio-default-dttm-${record.column_name}`,\n              checked: checked,\n              disabled: disabled,\n              onChange: () =>\n              onDatasourceChange({\n                ...datasource,\n                main_dttm_col: record.column_name }) }));\n\n\n\n\n        },\n        type: (d) => d ? ___EmotionJSX(Label, null, d) : null,\n        is_dttm: checkboxGenerator,\n        filterable: checkboxGenerator,\n        groupby: checkboxGenerator } }));\n\n\n\n\n}\nColumnCollectionTable.propTypes = {\n  columns: PropTypes.array.isRequired,\n  datasource: PropTypes.object.isRequired,\n  onColumnsChange: PropTypes.func.isRequired,\n  onDatasourceChange: PropTypes.func.isRequired,\n  editableColumnName: PropTypes.bool,\n  showExpression: PropTypes.bool,\n  allowAddItem: PropTypes.bool,\n  allowEditDataType: PropTypes.bool,\n  itemGenerator: PropTypes.func };\n\nColumnCollectionTable.defaultProps = {\n  editableColumnName: false,\n  showExpression: false,\n  allowAddItem: false,\n  allowEditDataType: false,\n  itemGenerator: () => ({\n    column_name: t('<new column>'),\n    filterable: true,\n    groupby: true }) };\n\n\n\nfunction StackedField(_ref15) {let { label, formElement } = _ref15;\n  return (\n    ___EmotionJSX(\"div\", null,\n    ___EmotionJSX(\"div\", null,\n    ___EmotionJSX(\"strong\", null, label)),\n\n    ___EmotionJSX(\"div\", null, formElement)));\n\n\n}\n\nStackedField.propTypes = {\n  label: PropTypes.string,\n  formElement: PropTypes.node };\n\n\nfunction FormContainer(_ref16) {let { children } = _ref16;\n  return ___EmotionJSX(Card, { padded: true }, children);\n}\n\nFormContainer.propTypes = {\n  children: PropTypes.node };\n\n\nconst propTypes = {\n  datasource: PropTypes.object.isRequired,\n  onChange: PropTypes.func,\n  addSuccessToast: PropTypes.func.isRequired,\n  addDangerToast: PropTypes.func.isRequired,\n  setIsEditing: PropTypes.func };\n\n\nconst defaultProps = {\n  onChange: () => {},\n  setIsEditing: () => {} };\n\n\nfunction OwnersSelector(_ref17) {let { datasource, onChange } = _ref17;\n  const loadOptions = useCallback(function (search, page, pageSize) {if (search === void 0) {search = '';}\n    const query = rison.encode({ filter: search, page, page_size: pageSize });\n    return SupersetClient.get({\n      endpoint: `/api/v1/dataset/related/owners?q=${query}` }).\n    then((response) => ({\n      data: response.json.result.\n      filter((item) => item.extra.active).\n      map((item) => ({\n        value: item.value,\n        label: item.text })),\n\n      totalCount: response.json.count }));\n\n  }, []);\n\n  return (\n    ___EmotionJSX(AsyncSelect, {\n      ariaLabel: t('Select owners'),\n      mode: \"multiple\",\n      name: \"owners\",\n      value: datasource.owners,\n      options: loadOptions,\n      onChange: onChange,\n      header: ___EmotionJSX(FormLabel, null, t('Owners')),\n      allowClear: true }));\n\n\n}__signature__(OwnersSelector, \"useCallback{loadOptions}\");var _ref23 = process.env.NODE_ENV === \"production\" ? { name: \"hkh81z\", styles: \"margin-top:8px\" } : { name: \"17jm38f-DatasourceEditor\", styles: \"margin-top:8px;label:DatasourceEditor;\", map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", toString: _EMOTION_STRINGIFIED_CSS_ERROR__ };var _ref24 = process.env.NODE_ENV === \"production\" ? { name: \"hkh81z\", styles: \"margin-top:8px\" } : { name: \"17jm38f-DatasourceEditor\", styles: \"margin-top:8px;label:DatasourceEditor;\", map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", toString: _EMOTION_STRINGIFIED_CSS_ERROR__ };\n\nclass DatasourceEditor extends React.PureComponent {\n  constructor(props) {var _props$datasource$met;\n    super(props);\n    this.state = {\n      datasource: {\n        ...props.datasource,\n        owners: props.datasource.owners.map((owner) => ({\n          value: owner.value || owner.id,\n          label: owner.label || `${owner.first_name} ${owner.last_name}` })),\n\n        metrics: (_props$datasource$met = props.datasource.metrics) == null ? void 0 : _props$datasource$met.map((metric) => {\n          const {\n            certified_by: certifiedByMetric,\n            certification_details: certificationDetails } =\n          metric;\n          const {\n            certification: { details, certified_by: certifiedBy } = {},\n            warning_markdown: warningMarkdown } =\n          JSON.parse(metric.extra || '{}') || {};\n          return {\n            ...metric,\n            certification_details: certificationDetails || details,\n            warning_markdown: warningMarkdown || '',\n            certified_by: certifiedBy || certifiedByMetric };\n\n        }) },\n\n      errors: [],\n      isSqla:\n      props.datasource.datasource_type === 'table' ||\n      props.datasource.type === 'table',\n      isEditMode: false,\n      databaseColumns: props.datasource.columns.filter((col) => !col.expression),\n      calculatedColumns: props.datasource.columns.filter(\n      (col) => !!col.expression),\n\n      metadataLoading: false,\n      activeTabKey: 0,\n      datasourceType: props.datasource.sql ?\n      DATASOURCE_TYPES.virtual.key :\n      DATASOURCE_TYPES.physical.key };\n\n\n    this.onChange = this.onChange.bind(this);\n    this.onChangeEditMode = this.onChangeEditMode.bind(this);\n    this.onDatasourcePropChange = this.onDatasourcePropChange.bind(this);\n    this.onDatasourceChange = this.onDatasourceChange.bind(this);\n    this.tableChangeAndSyncMetadata =\n    this.tableChangeAndSyncMetadata.bind(this);\n    this.syncMetadata = this.syncMetadata.bind(this);\n    this.setColumns = this.setColumns.bind(this);\n    this.validateAndChange = this.validateAndChange.bind(this);\n    this.handleTabSelect = this.handleTabSelect.bind(this);\n    this.allowEditSource = !isFeatureEnabled(\n    FeatureFlag.DISABLE_DATASET_SOURCE_EDIT);\n\n  }\n\n  onChange() {\n    // Emptying SQL if \"Physical\" radio button is selected\n    // Currently the logic to know whether the source is\n    // physical or virtual is based on whether SQL is empty or not.\n    const { datasourceType, datasource } = this.state;\n    const sql =\n    datasourceType === DATASOURCE_TYPES.physical.key ? '' : datasource.sql;\n    const newDatasource = {\n      ...this.state.datasource,\n      sql,\n      columns: [...this.state.databaseColumns, ...this.state.calculatedColumns] };\n\n    this.props.onChange(newDatasource, this.state.errors);\n  }\n\n  onChangeEditMode() {\n    this.props.setIsEditing(!this.state.isEditMode);\n    this.setState((prevState) => ({ isEditMode: !prevState.isEditMode }));\n  }\n\n  onDatasourceChange(datasource, callback) {if (callback === void 0) {callback = this.validateAndChange;}\n    this.setState({ datasource }, callback);\n  }\n\n  onDatasourcePropChange(attr, value) {\n    if (value === undefined) return; // if value is undefined do not update state\n    const datasource = { ...this.state.datasource, [attr]: value };\n    this.setState(\n    (prevState) => ({\n      datasource: { ...prevState.datasource, [attr]: value } }),\n\n    attr === 'table_name' ?\n    this.onDatasourceChange(datasource, this.tableChangeAndSyncMetadata) :\n    this.onDatasourceChange(datasource, this.validateAndChange));\n\n  }\n\n  onDatasourceTypeChange(datasourceType) {\n    this.setState({ datasourceType });\n  }\n\n  setColumns(obj) {\n    // update calculatedColumns or databaseColumns\n    this.setState(obj, this.validateAndChange);\n  }\n\n  validateAndChange() {\n    this.validate(this.onChange);\n  }\n\n  tableChangeAndSyncMetadata() {\n    this.validate(() => {\n      this.syncMetadata();\n      this.onChange();\n    });\n  }\n\n  updateColumns(cols) {\n    const { databaseColumns } = this.state;\n    const databaseColumnNames = cols.map((col) => col.name);\n    const currentCols = databaseColumns.reduce(\n    (agg, col) => ({\n      ...agg,\n      [col.column_name]: col }),\n\n    {});\n\n    const finalColumns = [];\n    const results = {\n      added: [],\n      modified: [],\n      removed: databaseColumns.\n      map((col) => col.column_name).\n      filter((col) => !_includesInstanceProperty(databaseColumnNames).call(databaseColumnNames, col)) };\n\n    cols.forEach((col) => {\n      const currentCol = currentCols[col.name];\n      if (!currentCol) {\n        // new column\n        finalColumns.push({\n          id: shortid.generate(),\n          column_name: col.name,\n          type: col.type,\n          groupby: true,\n          filterable: true,\n          is_dttm: col.is_dttm });\n\n        results.added.push(col.name);\n      } else if (\n      currentCol.type !== col.type ||\n      !currentCol.is_dttm && col.is_dttm)\n      {\n        // modified column\n        finalColumns.push({\n          ...currentCol,\n          type: col.type,\n          is_dttm: currentCol.is_dttm || col.is_dttm });\n\n        results.modified.push(col.name);\n      } else {\n        // unchanged\n        finalColumns.push(currentCol);\n      }\n    });\n    if (\n    results.added.length ||\n    results.modified.length ||\n    results.removed.length)\n    {\n      this.setColumns({ databaseColumns: finalColumns });\n    }\n    return results;\n  }\n\n  syncMetadata() {\n    const { datasource } = this.state;\n    const params = {\n      datasource_type: datasource.type || datasource.datasource_type,\n      database_name:\n      datasource.database.database_name || datasource.database.name,\n      schema_name: datasource.schema,\n      table_name: datasource.table_name ?\n      encodeURIComponent(datasource.table_name) :\n      datasource.table_name };\n\n    Object.entries(params).forEach((_ref18) => {let [key, value] = _ref18;\n      // rison can't encode the undefined value\n      if (value === undefined) {\n        params[key] = null;\n      }\n    });\n    const endpoint = `/datasource/external_metadata_by_name/?q=${rison.encode(\n    params)\n    }`;\n    this.setState({ metadataLoading: true });\n\n    SupersetClient.get({ endpoint }).\n    then((_ref19) => {let { json } = _ref19;\n      const results = this.updateColumns(json);\n      if (results.modified.length) {\n        this.props.addSuccessToast(\n        t('Modified columns: %s', results.modified.join(', ')));\n\n      }\n      if (results.removed.length) {\n        this.props.addSuccessToast(\n        t('Removed columns: %s', results.removed.join(', ')));\n\n      }\n      if (results.added.length) {\n        this.props.addSuccessToast(\n        t('New columns added: %s', results.added.join(', ')));\n\n      }\n      this.props.addSuccessToast(t('Metadata has been synced'));\n      this.setState({ metadataLoading: false });\n    }).\n    catch((response) =>\n    getClientErrorObject(response).then((_ref20) => {let { error, statusText } = _ref20;\n      this.props.addDangerToast(\n      error || statusText || t('An error has occurred'));\n\n      this.setState({ metadataLoading: false });\n    }));\n\n  }\n\n  findDuplicates(arr, accessor) {\n    const seen = {};\n    const dups = [];\n    arr.forEach((obj) => {\n      const item = accessor(obj);\n      if (item in seen) {\n        dups.push(item);\n      } else {\n        seen[item] = null;\n      }\n    });\n    return dups;\n  }\n\n  validate(callback) {\n    let errors = [];\n    let dups;\n    const { datasource } = this.state;\n\n    // Looking for duplicate column_name\n    dups = this.findDuplicates(datasource.columns, (obj) => obj.column_name);\n    errors = errors.concat(\n    dups.map((name) => t('Column name [%s] is duplicated', name)));\n\n\n    // Looking for duplicate metric_name\n    dups = this.findDuplicates(datasource.metrics, (obj) => obj.metric_name);\n    errors = errors.concat(\n    dups.map((name) => t('Metric name [%s] is duplicated', name)));\n\n\n    // Making sure calculatedColumns have an expression defined\n    const noFilterCalcCols = this.state.calculatedColumns.filter(\n    (col) => !col.expression && !col.json);\n\n    errors = errors.concat(\n    noFilterCalcCols.map((col) =>\n    t('Calculated column [%s] requires an expression', col.column_name)));\n\n\n\n    this.setState({ errors }, callback);\n  }\n\n  handleTabSelect(activeTabKey) {\n    this.setState({ activeTabKey });\n  }\n\n  sortMetrics(metrics) {\n    return metrics.sort((_ref21, _ref22) => {let { id: a } = _ref21;let { id: b } = _ref22;return b - a;});\n  }\n\n  renderSettingsFieldset() {\n    const { datasource } = this.state;\n    return (\n      ___EmotionJSX(Fieldset, {\n        title: t('Basic'),\n        item: datasource,\n        onChange: this.onDatasourceChange },\n\n      ___EmotionJSX(Field, {\n        fieldKey: \"description\",\n        label: t('Description'),\n        control:\n        ___EmotionJSX(TextAreaControl, {\n          language: \"markdown\",\n          offerEditInModal: false,\n          resize: \"vertical\" }) }),\n\n\n\n      ___EmotionJSX(Field, {\n        fieldKey: \"default_endpoint\",\n        label: t('Default URL'),\n        description: t(\n        'Default URL to redirect to when accessing from the dataset list page'),\n\n        control: ___EmotionJSX(TextControl, { controlId: \"default_endpoint\" }) }),\n\n      ___EmotionJSX(Field, {\n        inline: true,\n        fieldKey: \"filter_select_enabled\",\n        label: t('Autocomplete filters'),\n        description: t('Whether to populate autocomplete filters options'),\n        control: ___EmotionJSX(CheckboxControl, null) }),\n\n      this.state.isSqla &&\n      ___EmotionJSX(Field, {\n        fieldKey: \"fetch_values_predicate\",\n        label: t('Autocomplete query predicate'),\n        description: t(\n        'When using \"Autocomplete filters\", this can be used to improve performance ' +\n        'of the query fetching the values. Use this option to apply a ' +\n        'predicate (WHERE clause) to the query selecting the distinct ' +\n        'values from the table. Typically the intent would be to limit the scan ' +\n        'by applying a relative time filter on a partitioned or indexed time-related field.'),\n\n        control:\n        ___EmotionJSX(TextAreaControl, {\n          language: \"sql\",\n          controlId: \"fetch_values_predicate\",\n          minLines: 5,\n          resize: \"vertical\" }) }),\n\n\n\n\n      this.state.isSqla &&\n      ___EmotionJSX(Field, {\n        fieldKey: \"extra\",\n        label: t('Extra'),\n        description: t(\n        'Extra data to specify table metadata. Currently supports ' +\n        'metadata of the format: `{ \"certification\": { \"certified_by\": ' +\n        '\"Data Platform Team\", \"details\": \"This table is the source of truth.\" ' +\n        '}, \"warning_markdown\": \"This is a warning.\" }`.'),\n\n        control:\n        ___EmotionJSX(TextAreaControl, {\n          controlId: \"extra\",\n          language: \"json\",\n          offerEditInModal: false,\n          resize: \"vertical\" }) }),\n\n\n\n\n      ___EmotionJSX(OwnersSelector, {\n        datasource: datasource,\n        onChange: (newOwners) => {\n          this.onDatasourceChange({ ...datasource, owners: newOwners });\n        } })));\n\n\n\n  }\n\n  renderAdvancedFieldset() {\n    const { datasource } = this.state;\n    return (\n      ___EmotionJSX(Fieldset, {\n        title: t('Advanced'),\n        item: datasource,\n        onChange: this.onDatasourceChange },\n\n      ___EmotionJSX(Field, {\n        fieldKey: \"cache_timeout\",\n        label: t('Cache timeout'),\n        description: t(\n        'The duration of time in seconds before the cache is invalidated. Set to -1 to bypass the cache.'),\n\n        control: ___EmotionJSX(TextControl, { controlId: \"cache_timeout\" }) }),\n\n      ___EmotionJSX(Field, {\n        fieldKey: \"offset\",\n        label: t('Hours offset'),\n        control: ___EmotionJSX(TextControl, { controlId: \"offset\" }),\n        description: t(\n        'The number of hours, negative or positive, to shift the time column. This can be used to move UTC time to local time.') }),\n\n\n      this.state.isSqla &&\n      ___EmotionJSX(Field, {\n        fieldKey: \"template_params\",\n        label: t('Template parameters'),\n        description: t(\n        'A set of parameters that become available in the query using Jinja templating syntax'),\n\n        control: ___EmotionJSX(TextControl, { controlId: \"template_params\" }) })));\n\n\n\n\n  }\n\n  renderSpatialTab() {\n    const { datasource } = this.state;\n    const { spatials, all_cols: allCols } = datasource;\n    return (\n      ___EmotionJSX(Tabs.TabPane, {\n        tab: ___EmotionJSX(CollectionTabTitle, { collection: spatials, title: t('Spatial') }),\n        key: 4 },\n\n      ___EmotionJSX(CollectionTable, {\n        tableColumns: ['name', 'config'],\n        onChange: this.onDatasourcePropChange.bind(this, 'spatials'),\n        itemGenerator: () => ({\n          name: t('<new spatial>'),\n          type: t('<no type>'),\n          config: null }),\n\n        collection: spatials,\n        allowDeletes: true,\n        itemRenderers: {\n          name: (d, onChange) =>\n          ___EmotionJSX(EditableTitle, { canEdit: true, title: d, onSaveTitle: onChange }),\n\n          config: (v, onChange) =>\n          ___EmotionJSX(SpatialControl, { value: v, onChange: onChange, choices: allCols }) } })));\n\n\n\n\n\n  }\n\n  renderSourceFieldset(theme) {var _datasource$database, _datasource$database2, _datasource$database3;\n    const { datasource } = this.state;\n    return (\n      ___EmotionJSX(\"div\", null,\n      this.allowEditSource &&\n      ___EmotionJSX(EditLockContainer, null,\n      ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, onClick: this.onChangeEditMode },\n      this.state.isEditMode ?\n      ___EmotionJSX(Icons.LockUnlocked, { iconColor: theme.colors.grayscale.base }) :\n\n      ___EmotionJSX(Icons.LockLocked, { iconColor: theme.colors.grayscale.base })),\n\n\n      !this.state.isEditMode &&\n      ___EmotionJSX(\"div\", null, t('Click the lock to make changes.')),\n\n      this.state.isEditMode &&\n      ___EmotionJSX(\"div\", null, t('Click the lock to prevent further changes.'))),\n\n\n\n      ___EmotionJSX(\"div\", { className: \"m-l-10 m-t-20 m-b-10\" },\n      DATASOURCE_TYPES_ARR.map((type) =>\n      ___EmotionJSX(Radio, {\n        key: type.key,\n        value: type.key,\n        inline: true,\n        onChange: this.onDatasourceTypeChange.bind(this, type.key),\n        checked: this.state.datasourceType === type.key,\n        disabled: !this.state.isEditMode },\n\n      type.label))),\n\n\n\n      ___EmotionJSX(\"hr\", null),\n      ___EmotionJSX(Fieldset, { item: datasource, onChange: this.onDatasourceChange, compact: true },\n      this.state.datasourceType === DATASOURCE_TYPES.virtual.key &&\n      ___EmotionJSX(\"div\", null,\n      this.state.isSqla &&\n      ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(Col, { xs: 24, md: 12 },\n      ___EmotionJSX(Field, {\n        fieldKey: \"databaseSelector\",\n        label: t('virtual'),\n        control:\n        ___EmotionJSX(\"div\", { css: _ref23 },\n        ___EmotionJSX(DatabaseSelector, {\n          db: datasource == null ? void 0 : datasource.database,\n          schema: datasource.schema,\n          onSchemaChange: (schema) =>\n          this.state.isEditMode &&\n          this.onDatasourcePropChange('schema', schema),\n\n          onDbChange: (database) =>\n          this.state.isEditMode &&\n          this.onDatasourcePropChange('database', database),\n\n          formMode: false,\n          handleError: this.props.addDangerToast,\n          readOnly: !this.state.isEditMode })) }),\n\n\n\n\n      ___EmotionJSX(\"div\", { css: /*#__PURE__*/_css({ width: 'calc(100% - 34px)', marginTop: -16 }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:DatasourceEditor;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\") },\n      ___EmotionJSX(Field, {\n        fieldKey: \"table_name\",\n        label: t('Dataset name'),\n        control:\n        ___EmotionJSX(TextControl, {\n          controlId: \"table_name\",\n          onChange: (table) => {\n            this.onDatasourcePropChange('table_name', table);\n          },\n          placeholder: t('Dataset name'),\n          disabled: !this.state.isEditMode }) }))),\n\n\n\n\n\n      ___EmotionJSX(Field, {\n        fieldKey: \"sql\",\n        label: t('SQL'),\n        description: t(\n        'When specifying SQL, the datasource acts as a view. ' +\n        'Superset will use this statement as a subquery while grouping and filtering ' +\n        'on the generated parent queries.'),\n\n        control:\n        ___EmotionJSX(TextAreaControl, {\n          language: \"sql\",\n          offerEditInModal: false,\n          minLines: 20,\n          maxLines: 20,\n          readOnly: !this.state.isEditMode,\n          resize: \"both\" }) }))),\n\n\n\n\n\n\n\n      this.state.datasourceType === DATASOURCE_TYPES.physical.key &&\n      ___EmotionJSX(Col, { xs: 24, md: 12 },\n      this.state.isSqla &&\n      ___EmotionJSX(Field, {\n        fieldKey: \"tableSelector\",\n        label: t('Physical'),\n        control:\n        ___EmotionJSX(\"div\", { css: _ref24 },\n        ___EmotionJSX(TableSelector, {\n          clearable: false,\n          database: {\n            ...datasource.database,\n            database_name:\n            ((_datasource$database = datasource.database) == null ? void 0 : _datasource$database.database_name) || ((_datasource$database2 =\n            datasource.database) == null ? void 0 : _datasource$database2.name) },\n\n          dbId: (_datasource$database3 = datasource.database) == null ? void 0 : _datasource$database3.id,\n          handleError: this.props.addDangerToast,\n          schema: datasource.schema,\n          sqlLabMode: false,\n          tableValue: datasource.table_name,\n          onSchemaChange:\n          this.state.isEditMode ?\n          (schema) =>\n          this.onDatasourcePropChange('schema', schema) :\n          undefined,\n\n          onDbChange:\n          this.state.isEditMode ?\n          (database) =>\n          this.onDatasourcePropChange(\n          'database',\n          database) :\n\n          undefined,\n\n          onTableSelectChange:\n          this.state.isEditMode ?\n          (table) =>\n          this.onDatasourcePropChange('table_name', table) :\n          undefined,\n\n          readOnly: !this.state.isEditMode })),\n\n\n\n        description: t(\n        'The pointer to a physical table (or view). Keep in mind that the chart is ' +\n        'associated to this Superset logical table, and this logical table points ' +\n        'the physical table referenced here.') })))));\n\n\n\n\n\n\n\n\n  }\n\n  renderErrors() {\n    if (this.state.errors.length > 0) {\n      return (\n        ___EmotionJSX(Alert, {\n          css: (theme) => ({ marginBottom: theme.gridUnit * 4 }),\n          type: \"error\",\n          message:\n          ___EmotionJSX(React.Fragment, null,\n          this.state.errors.map((err) =>\n          ___EmotionJSX(\"div\", { key: err }, err))) }));\n\n\n\n\n\n    }\n    return null;\n  }\n\n  renderMetricCollection() {\n    const { datasource } = this.state;\n    const { metrics } = datasource;\n    const sortedMetrics = metrics != null && metrics.length ? this.sortMetrics(metrics) : [];\n    return (\n      ___EmotionJSX(CollectionTable, {\n        tableColumns: ['metric_name', 'verbose_name', 'expression'],\n        sortColumns: ['metric_name', 'verbose_name', 'expression'],\n        columnLabels: {\n          metric_name: t('Metric'),\n          verbose_name: t('Label'),\n          expression: t('SQL expression') },\n\n        expandFieldset:\n        ___EmotionJSX(FormContainer, null,\n        ___EmotionJSX(Fieldset, { compact: true },\n        ___EmotionJSX(Field, {\n          fieldKey: \"description\",\n          label: t('Description'),\n          control:\n          ___EmotionJSX(TextControl, {\n            controlId: \"description\",\n            placeholder: t('Description') }) }),\n\n\n\n        ___EmotionJSX(Field, {\n          fieldKey: \"d3format\",\n          label: t('D3 format'),\n          control:\n          ___EmotionJSX(TextControl, { controlId: \"d3format\", placeholder: \"%y/%m/%d\" }) }),\n\n\n        ___EmotionJSX(Field, {\n          label: t('Certified by'),\n          fieldKey: \"certified_by\",\n          description: t(\n          'Person or group that has certified this metric'),\n\n          control:\n          ___EmotionJSX(TextControl, {\n            controlId: \"certified_by\",\n            placeholder: t('Certified by') }) }),\n\n\n\n        ___EmotionJSX(Field, {\n          label: t('Certification details'),\n          fieldKey: \"certification_details\",\n          description: t('Details of the certification'),\n          control:\n          ___EmotionJSX(TextControl, {\n            controlId: \"certification_details\",\n            placeholder: t('Certification details') }) }),\n\n\n\n        ___EmotionJSX(Field, {\n          label: t('Warning'),\n          fieldKey: \"warning_markdown\",\n          description: t('Optional warning about use of this metric'),\n          control:\n          ___EmotionJSX(TextAreaControl, {\n            controlId: \"warning_markdown\",\n            language: \"markdown\",\n            offerEditInModal: false,\n            resize: \"vertical\" }) }))),\n\n\n\n\n\n\n        collection: sortedMetrics,\n        allowAddItem: true,\n        onChange: this.onDatasourcePropChange.bind(this, 'metrics'),\n        itemGenerator: () => ({\n          metric_name: t('<new metric>'),\n          verbose_name: '',\n          expression: '' }),\n\n        itemCellProps: {\n          expression: () => ({\n            width: '240px' }) },\n\n\n        itemRenderers: {\n          metric_name: (v, onChange, _, record) =>\n          ___EmotionJSX(FlexRowContainer, null,\n          record.is_certified &&\n          ___EmotionJSX(CertifiedBadge, {\n            certifiedBy: record.certified_by,\n            details: record.certification_details }),\n\n\n          record.warning_markdown &&\n          ___EmotionJSX(WarningIconWithTooltip, {\n            warningMarkdown: record.warning_markdown }),\n\n\n          ___EmotionJSX(EditableTitle, { canEdit: true, title: v, onSaveTitle: onChange })),\n\n\n          verbose_name: (v, onChange) =>\n          ___EmotionJSX(TextControl, { canEdit: true, value: v, onChange: onChange }),\n\n          expression: (v, onChange) =>\n          ___EmotionJSX(TextAreaControl, {\n            canEdit: true,\n            initialValue: v,\n            onChange: onChange,\n            extraClasses: ['datasource-sql-expression'],\n            language: \"sql\",\n            offerEditInModal: false,\n            minLines: 5,\n            textAreaStyles: { minWidth: '200px', maxWidth: '450px' },\n            resize: \"both\" }),\n\n\n          description: (v, onChange, label) =>\n          ___EmotionJSX(StackedField, {\n            label: label,\n            formElement: ___EmotionJSX(TextControl, { value: v, onChange: onChange }) }),\n\n\n          d3format: (v, onChange, label) =>\n          ___EmotionJSX(StackedField, {\n            label: label,\n            formElement: ___EmotionJSX(TextControl, { value: v, onChange: onChange }) }) },\n\n\n\n        allowDeletes: true,\n        stickyHeader: true }));\n\n\n  }\n\n  render() {\n    const { datasource, activeTabKey } = this.state;\n    const { metrics } = datasource;\n    const sortedMetrics = metrics != null && metrics.length ? this.sortMetrics(metrics) : [];\n    const { theme } = this.props;\n\n    return (\n      ___EmotionJSX(DatasourceContainer, null,\n      this.renderErrors(),\n      ___EmotionJSX(Alert, {\n        css: (theme) => ({ marginBottom: theme.gridUnit * 4 }),\n        type: \"warning\",\n        message:\n        ___EmotionJSX(React.Fragment, null,\n        ' ',\n        ___EmotionJSX(\"strong\", null, t('Be careful.'), \" \"),\n        t(\n        'Changing these settings will affect all charts using this dataset, including charts owned by other people.')) }),\n\n\n\n\n      ___EmotionJSX(StyledTableTabs, {\n        fullWidth: false,\n        id: \"table-tabs\",\n        \"data-test\": \"edit-dataset-tabs\",\n        onChange: this.handleTabSelect,\n        defaultActiveKey: activeTabKey },\n\n      ___EmotionJSX(Tabs.TabPane, { key: 0, tab: t('Source') },\n      this.renderSourceFieldset(theme)),\n\n      ___EmotionJSX(Tabs.TabPane, {\n        tab:\n        ___EmotionJSX(CollectionTabTitle, {\n          collection: sortedMetrics,\n          title: t('Metrics') }),\n\n\n        key: 1 },\n\n      this.renderMetricCollection()),\n\n      ___EmotionJSX(Tabs.TabPane, {\n        tab:\n        ___EmotionJSX(CollectionTabTitle, {\n          collection: this.state.databaseColumns,\n          title: t('Columns') }),\n\n\n        key: 2 },\n\n      ___EmotionJSX(StyledColumnsTabWrapper, null,\n      ___EmotionJSX(ColumnButtonWrapper, null,\n      ___EmotionJSX(StyledButtonWrapper, null,\n      ___EmotionJSX(Button, {\n        buttonSize: \"small\",\n        buttonStyle: \"tertiary\",\n        onClick: this.syncMetadata,\n        className: \"sync-from-source\",\n        disabled: this.state.isEditMode },\n\n      ___EmotionJSX(\"i\", { className: \"fa fa-database\" }), ' ',\n      t('Sync columns from source')))),\n\n\n\n      ___EmotionJSX(ColumnCollectionTable, {\n        className: \"columns-table\",\n        columns: this.state.databaseColumns,\n        datasource: datasource,\n        onColumnsChange: (databaseColumns) =>\n        this.setColumns({ databaseColumns }),\n\n        onDatasourceChange: this.onDatasourceChange }),\n\n      this.state.metadataLoading && ___EmotionJSX(Loading, null))),\n\n\n      ___EmotionJSX(Tabs.TabPane, {\n        tab:\n        ___EmotionJSX(CollectionTabTitle, {\n          collection: this.state.calculatedColumns,\n          title: t('Calculated columns') }),\n\n\n        key: 3 },\n\n      ___EmotionJSX(StyledColumnsTabWrapper, null,\n      ___EmotionJSX(ColumnCollectionTable, {\n        columns: this.state.calculatedColumns,\n        onColumnsChange: (calculatedColumns) =>\n        this.setColumns({ calculatedColumns }),\n\n        onDatasourceChange: this.onDatasourceChange,\n        datasource: datasource,\n        editableColumnName: true,\n        showExpression: true,\n        allowAddItem: true,\n        allowEditDataType: true,\n        itemGenerator: () => ({\n          column_name: t('<new column>'),\n          filterable: true,\n          groupby: true,\n          expression: t('<enter SQL expression here>'),\n          __expanded: true }) }))),\n\n\n\n\n      ___EmotionJSX(Tabs.TabPane, { key: 4, tab: t('Settings') },\n      ___EmotionJSX(Row, { gutter: 16 },\n      ___EmotionJSX(Col, { xs: 24, md: 12 },\n      ___EmotionJSX(FormContainer, null, this.renderSettingsFieldset())),\n\n      ___EmotionJSX(Col, { xs: 24, md: 12 },\n      ___EmotionJSX(FormContainer, null, this.renderAdvancedFieldset())))))));\n\n\n\n\n\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\nDatasourceEditor.defaultProps = defaultProps;\nDatasourceEditor.propTypes = propTypes;\n\nconst DataSourceComponent = withTheme(DatasourceEditor);const _default =\n\nwithToasts(DataSourceComponent);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(DatasourceContainer, \"DatasourceContainer\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(FlexRowContainer, \"FlexRowContainer\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(StyledTableTabs, \"StyledTableTabs\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(StyledBadge, \"StyledBadge\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(EditLockContainer, \"EditLockContainer\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(ColumnButtonWrapper, \"ColumnButtonWrapper\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(StyledLabelWrapper, \"StyledLabelWrapper\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(StyledColumnsTabWrapper, \"StyledColumnsTabWrapper\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(StyledButtonWrapper, \"StyledButtonWrapper\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(checkboxGenerator, \"checkboxGenerator\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(DATA_TYPES, \"DATA_TYPES\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(DATASOURCE_TYPES_ARR, \"DATASOURCE_TYPES_ARR\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(DATASOURCE_TYPES, \"DATASOURCE_TYPES\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(CollectionTabTitle, \"CollectionTabTitle\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(ColumnCollectionTable, \"ColumnCollectionTable\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(StackedField, \"StackedField\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(FormContainer, \"FormContainer\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(propTypes, \"propTypes\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(OwnersSelector, \"OwnersSelector\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(DatasourceEditor, \"DatasourceEditor\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(DataSourceComponent, \"DataSourceComponent\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(_default, \"default\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["rison","React","useCallback","PropTypes","Radio","Card","Alert","Badge","shortid","FeatureFlag","styled","SupersetClient","t","withTheme","Select","AsyncSelect","Row","Col","FormLabel","Button","Tabs","CertifiedBadge","WarningIconWithTooltip","DatabaseSelector","Label","Loading","TableSelector","EditableTitle","getClientErrorObject","CheckboxControl","TextControl","TextAreaControl","SpatialControl","withToasts","isFeatureEnabled","Icons","CollectionTable","Fieldset","Field","DatasourceContainer","div","theme","colors","warning","base","typography","weights","bold","FlexRowContainer","gridUnit","StyledTableTabs","StyledBadge","EditLockContainer","sizes","s","ColumnButtonWrapper","StyledLabelWrapper","StyledColumnsTabWrapper","StyledButtonWrapper","span","checkboxGenerator","d","onChange","DATA_TYPES","value","label","DATASOURCE_TYPES_ARR","key","DATASOURCE_TYPES","forEach","o","CollectionTabTitle","title","collection","length","propTypes","string","array","ColumnCollectionTable","columns","datasource","onColumnsChange","onDatasourceChange","editableColumnName","showExpression","allowAddItem","allowEditDataType","itemGenerator","ENABLE_ADVANCED_DATA_TYPES","column_name","advanced_data_type","type","groupby","is_dttm","main_dttm_col","filterable","v","onItemChange","_","record","is_certified","certified_by","certification_details","_onItemChange","_label","checked","disabled","find","column","isRequired","object","func","bool","defaultProps","StackedField","formElement","node","FormContainer","children","addSuccessToast","addDangerToast","setIsEditing","OwnersSelector","loadOptions","search","page","pageSize","query","encode","filter","page_size","get","endpoint","then","response","data","json","result","item","extra","active","map","text","totalCount","count","owners","DatasourceEditor","PureComponent","constructor","props","state","owner","id","first_name","last_name","metrics","metric","certifiedByMetric","certificationDetails","certification","details","certifiedBy","warning_markdown","warningMarkdown","JSON","parse","errors","isSqla","datasource_type","isEditMode","databaseColumns","col","expression","calculatedColumns","metadataLoading","activeTabKey","datasourceType","sql","virtual","physical","bind","onChangeEditMode","onDatasourcePropChange","tableChangeAndSyncMetadata","syncMetadata","setColumns","validateAndChange","handleTabSelect","allowEditSource","DISABLE_DATASET_SOURCE_EDIT","newDatasource","setState","prevState","callback","attr","undefined","onDatasourceTypeChange","obj","validate","updateColumns","cols","databaseColumnNames","name","currentCols","reduce","agg","finalColumns","results","added","modified","removed","currentCol","push","generate","params","database_name","database","schema_name","schema","table_name","encodeURIComponent","Object","entries","join","catch","error","statusText","findDuplicates","arr","accessor","seen","dups","concat","metric_name","noFilterCalcCols","sortMetrics","sort","a","b","renderSettingsFieldset","newOwners","renderAdvancedFieldset","renderSpatialTab","spatials","all_cols","allCols","config","renderSourceFieldset","grayscale","width","marginTop","table","renderErrors","marginBottom","err","renderMetricCollection","sortedMetrics","verbose_name","minWidth","maxWidth","description","d3format","render","__expanded","DataSourceComponent"],"sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport rison from 'rison';\nimport React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { Radio } from 'src/components/Radio';\nimport Card from 'src/components/Card';\nimport Alert from 'src/components/Alert';\nimport Badge from 'src/components/Badge';\nimport shortid from 'shortid';\nimport {\n  FeatureFlag,\n  styled,\n  SupersetClient,\n  t,\n  withTheme,\n} from '@superset-ui/core';\nimport { Select, AsyncSelect, Row, Col } from 'src/components';\nimport { FormLabel } from 'src/components/Form';\nimport Button from 'src/components/Button';\nimport Tabs from 'src/components/Tabs';\nimport CertifiedBadge from 'src/components/CertifiedBadge';\nimport WarningIconWithTooltip from 'src/components/WarningIconWithTooltip';\nimport DatabaseSelector from 'src/components/DatabaseSelector';\nimport Label from 'src/components/Label';\nimport Loading from 'src/components/Loading';\nimport TableSelector from 'src/components/TableSelector';\nimport EditableTitle from 'src/components/EditableTitle';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport CheckboxControl from 'src/explore/components/controls/CheckboxControl';\nimport TextControl from 'src/explore/components/controls/TextControl';\nimport TextAreaControl from 'src/explore/components/controls/TextAreaControl';\nimport SpatialControl from 'src/explore/components/controls/SpatialControl';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { isFeatureEnabled } from 'src/featureFlags';\nimport Icons from 'src/components/Icons';\nimport CollectionTable from './CollectionTable';\nimport Fieldset from './Fieldset';\nimport Field from './Field';\n\nconst DatasourceContainer = styled.div`\n  .change-warning {\n    margin: 16px 10px 0;\n    color: ${({ theme }) => theme.colors.warning.base};\n  }\n\n  .change-warning .bold {\n    font-weight: ${({ theme }) => theme.typography.weights.bold};\n  }\n\n  .form-group.has-feedback > .help-block {\n    margin-top: 8px;\n  }\n\n  .form-group.form-group-md {\n    margin-bottom: 8px;\n  }\n`;\n\nconst FlexRowContainer = styled.div`\n  align-items: center;\n  display: flex;\n\n  svg {\n    margin-right: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n\nconst StyledTableTabs = styled(Tabs)`\n  overflow: visible;\n  .ant-tabs-content-holder {\n    overflow: visible;\n  }\n`;\n\nconst StyledBadge = styled(Badge)`\n  .ant-badge-count {\n    line-height: ${({ theme }) => theme.gridUnit * 4}px;\n    height: ${({ theme }) => theme.gridUnit * 4}px;\n    margin-left: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n\nconst EditLockContainer = styled.div`\n  font-size: ${({ theme }) => theme.typography.sizes.s}px;\n  display: flex;\n  align-items: center;\n  a {\n    padding: 0 10px;\n  }\n`;\n\nconst ColumnButtonWrapper = styled.div`\n  text-align: right;\n  ${({ theme }) => `margin-bottom: ${theme.gridUnit * 2}px`}\n`;\n\nconst StyledLabelWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  span {\n    margin-right: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n\nconst StyledColumnsTabWrapper = styled.div`\n  .table > tbody > tr > td {\n    vertical-align: middle;\n  }\n\n  .ant-tag {\n    margin-top: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n\nconst StyledButtonWrapper = styled.span`\n  ${({ theme }) => `\n    margin-top: ${theme.gridUnit * 3}px;\n    margin-left: ${theme.gridUnit * 3}px;\n  `}\n`;\n\nconst checkboxGenerator = (d, onChange) => (\n  <CheckboxControl value={d} onChange={onChange} />\n);\nconst DATA_TYPES = [\n  { value: 'STRING', label: t('STRING') },\n  { value: 'NUMERIC', label: t('NUMERIC') },\n  { value: 'DATETIME', label: t('DATETIME') },\n  { value: 'BOOLEAN', label: t('BOOLEAN') },\n];\n\nconst DATASOURCE_TYPES_ARR = [\n  { key: 'physical', label: t('Physical (table or view)') },\n  { key: 'virtual', label: t('Virtual (SQL)') },\n];\nconst DATASOURCE_TYPES = {};\nDATASOURCE_TYPES_ARR.forEach(o => {\n  DATASOURCE_TYPES[o.key] = o;\n});\n\nfunction CollectionTabTitle({ title, collection }) {\n  return (\n    <div\n      css={{ display: 'flex', alignItems: 'center' }}\n      data-test={`collection-tab-${title}`}\n    >\n      {title}{' '}\n      <StyledBadge count={collection ? collection.length : 0} showZero />\n    </div>\n  );\n}\n\nCollectionTabTitle.propTypes = {\n  title: PropTypes.string,\n  collection: PropTypes.array,\n};\n\nfunction ColumnCollectionTable({\n  columns,\n  datasource,\n  onColumnsChange,\n  onDatasourceChange,\n  editableColumnName,\n  showExpression,\n  allowAddItem,\n  allowEditDataType,\n  itemGenerator,\n}) {\n  return (\n    <CollectionTable\n      collection={columns}\n      tableColumns={\n        isFeatureEnabled(FeatureFlag.ENABLE_ADVANCED_DATA_TYPES)\n          ? [\n              'column_name',\n              'advanced_data_type',\n              'type',\n              'is_dttm',\n              'main_dttm_col',\n              'filterable',\n              'groupby',\n            ]\n          : [\n              'column_name',\n              'type',\n              'is_dttm',\n              'main_dttm_col',\n              'filterable',\n              'groupby',\n            ]\n      }\n      sortColumns={\n        isFeatureEnabled(FeatureFlag.ENABLE_ADVANCED_DATA_TYPES)\n          ? [\n              'column_name',\n              'advanced_data_type',\n              'type',\n              'is_dttm',\n              'main_dttm_col',\n              'filterable',\n              'groupby',\n            ]\n          : [\n              'column_name',\n              'type',\n              'is_dttm',\n              'main_dttm_col',\n              'filterable',\n              'groupby',\n            ]\n      }\n      allowDeletes\n      allowAddItem={allowAddItem}\n      itemGenerator={itemGenerator}\n      stickyHeader\n      expandFieldset={\n        <FormContainer>\n          <Fieldset compact>\n            {showExpression && (\n              <Field\n                fieldKey=\"expression\"\n                label={t('SQL expression')}\n                control={\n                  <TextAreaControl\n                    language=\"markdown\"\n                    offerEditInModal={false}\n                    resize=\"vertical\"\n                  />\n                }\n              />\n            )}\n            <Field\n              fieldKey=\"verbose_name\"\n              label={t('Label')}\n              control={\n                <TextControl\n                  controlId=\"verbose_name\"\n                  placeholder={t('Label')}\n                />\n              }\n            />\n            <Field\n              fieldKey=\"description\"\n              label={t('Description')}\n              control={\n                <TextControl\n                  controlId=\"description\"\n                  placeholder={t('Description')}\n                />\n              }\n            />\n            {allowEditDataType && (\n              <Field\n                fieldKey=\"type\"\n                label={t('Data type')}\n                control={\n                  <Select\n                    ariaLabel={t('Data type')}\n                    options={DATA_TYPES}\n                    name=\"type\"\n                    allowNewOptions\n                    allowClear\n                  />\n                }\n              />\n            )}\n            {isFeatureEnabled(FeatureFlag.ENABLE_ADVANCED_DATA_TYPES) ? (\n              <Field\n                fieldKey=\"advanced_data_type\"\n                label={t('Advanced data type')}\n                control={\n                  <TextControl\n                    controlId=\"advanced_data_type\"\n                    placeholder={t('Advanced Data type')}\n                  />\n                }\n              />\n            ) : (\n              <></>\n            )}\n            <Field\n              fieldKey=\"python_date_format\"\n              label={t('Datetime format')}\n              description={\n                /* Note the fragmented translations may not work. */\n                <div>\n                  {t('The pattern of timestamp format. For strings use ')}\n                  <a href=\"https://docs.python.org/2/library/datetime.html#strftime-strptime-behavior\">\n                    {t('Python datetime string pattern')}\n                  </a>\n                  {t(' expression which needs to adhere to the ')}\n                  <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">\n                    {t('ISO 8601')}\n                  </a>\n                  {t(` standard to ensure that the lexicographical ordering\n                      coincides with the chronological ordering. If the\n                      timestamp format does not adhere to the ISO 8601 standard\n                      you will need to define an expression and type for\n                      transforming the string into a date or timestamp. Note\n                      currently time zones are not supported. If time is stored\n                      in epoch format, put \\`epoch_s\\` or \\`epoch_ms\\`. If no pattern\n                      is specified we fall back to using the optional defaults on a per\n                      database/column name level via the extra parameter.`)}\n                </div>\n              }\n              control={\n                <TextControl\n                  controlId=\"python_date_format\"\n                  placeholder=\"%Y/%m/%d\"\n                />\n              }\n            />\n            <Field\n              fieldKey=\"certified_by\"\n              label={t('Certified By')}\n              description={t('Person or group that has certified this metric')}\n              control={\n                <TextControl\n                  controlId=\"certified\"\n                  placeholder={t('Certified by')}\n                />\n              }\n            />\n            <Field\n              fieldKey=\"certification_details\"\n              label={t('Certification details')}\n              description={t('Details of the certification')}\n              control={\n                <TextControl\n                  controlId=\"certificationDetails\"\n                  placeholder={t('Certification details')}\n                />\n              }\n            />\n          </Fieldset>\n        </FormContainer>\n      }\n      columnLabels={\n        isFeatureEnabled(FeatureFlag.ENABLE_ADVANCED_DATA_TYPES)\n          ? {\n              column_name: t('Column'),\n              advanced_data_type: t('Advanced data type'),\n              type: t('Data type'),\n              groupby: t('Is dimension'),\n              is_dttm: t('Is temporal'),\n              main_dttm_col: t('Default datetime'),\n              filterable: t('Is filterable'),\n            }\n          : {\n              column_name: t('Column'),\n              type: t('Data type'),\n              groupby: t('Is dimension'),\n              is_dttm: t('Is temporal'),\n              main_dttm_col: t('Default datetime'),\n              filterable: t('Is filterable'),\n            }\n      }\n      onChange={onColumnsChange}\n      itemRenderers={\n        isFeatureEnabled(FeatureFlag.ENABLE_ADVANCED_DATA_TYPES)\n          ? {\n              column_name: (v, onItemChange, _, record) =>\n                editableColumnName ? (\n                  <StyledLabelWrapper>\n                    {record.is_certified && (\n                      <CertifiedBadge\n                        certifiedBy={record.certified_by}\n                        details={record.certification_details}\n                      />\n                    )}\n                    <EditableTitle\n                      canEdit\n                      title={v}\n                      onSaveTitle={onItemChange}\n                    />\n                  </StyledLabelWrapper>\n                ) : (\n                  <StyledLabelWrapper>\n                    {record.is_certified && (\n                      <CertifiedBadge\n                        certifiedBy={record.certified_by}\n                        details={record.certification_details}\n                      />\n                    )}\n                    {v}\n                  </StyledLabelWrapper>\n                ),\n              main_dttm_col: (value, _onItemChange, _label, record) => {\n                const checked = datasource.main_dttm_col === record.column_name;\n                const disabled = !columns.find(\n                  column => column.column_name === record.column_name,\n                ).is_dttm;\n                return (\n                  <Radio\n                    data-test={`radio-default-dttm-${record.column_name}`}\n                    checked={checked}\n                    disabled={disabled}\n                    onChange={() =>\n                      onDatasourceChange({\n                        ...datasource,\n                        main_dttm_col: record.column_name,\n                      })\n                    }\n                  />\n                );\n              },\n              type: d => (d ? <Label>{d}</Label> : null),\n              advanced_data_type: d => (\n                <Label onChange={onColumnsChange}>{d}</Label>\n              ),\n              is_dttm: checkboxGenerator,\n              filterable: checkboxGenerator,\n              groupby: checkboxGenerator,\n            }\n          : {\n              column_name: (v, onItemChange, _, record) =>\n                editableColumnName ? (\n                  <StyledLabelWrapper>\n                    {record.is_certified && (\n                      <CertifiedBadge\n                        certifiedBy={record.certified_by}\n                        details={record.certification_details}\n                      />\n                    )}\n                    <TextControl value={v} onChange={onItemChange} />\n                  </StyledLabelWrapper>\n                ) : (\n                  <StyledLabelWrapper>\n                    {record.is_certified && (\n                      <CertifiedBadge\n                        certifiedBy={record.certified_by}\n                        details={record.certification_details}\n                      />\n                    )}\n                    {v}\n                  </StyledLabelWrapper>\n                ),\n              main_dttm_col: (value, _onItemChange, _label, record) => {\n                const checked = datasource.main_dttm_col === record.column_name;\n                const disabled = !columns.find(\n                  column => column.column_name === record.column_name,\n                ).is_dttm;\n                return (\n                  <Radio\n                    data-test={`radio-default-dttm-${record.column_name}`}\n                    checked={checked}\n                    disabled={disabled}\n                    onChange={() =>\n                      onDatasourceChange({\n                        ...datasource,\n                        main_dttm_col: record.column_name,\n                      })\n                    }\n                  />\n                );\n              },\n              type: d => (d ? <Label>{d}</Label> : null),\n              is_dttm: checkboxGenerator,\n              filterable: checkboxGenerator,\n              groupby: checkboxGenerator,\n            }\n      }\n    />\n  );\n}\nColumnCollectionTable.propTypes = {\n  columns: PropTypes.array.isRequired,\n  datasource: PropTypes.object.isRequired,\n  onColumnsChange: PropTypes.func.isRequired,\n  onDatasourceChange: PropTypes.func.isRequired,\n  editableColumnName: PropTypes.bool,\n  showExpression: PropTypes.bool,\n  allowAddItem: PropTypes.bool,\n  allowEditDataType: PropTypes.bool,\n  itemGenerator: PropTypes.func,\n};\nColumnCollectionTable.defaultProps = {\n  editableColumnName: false,\n  showExpression: false,\n  allowAddItem: false,\n  allowEditDataType: false,\n  itemGenerator: () => ({\n    column_name: t('<new column>'),\n    filterable: true,\n    groupby: true,\n  }),\n};\n\nfunction StackedField({ label, formElement }) {\n  return (\n    <div>\n      <div>\n        <strong>{label}</strong>\n      </div>\n      <div>{formElement}</div>\n    </div>\n  );\n}\n\nStackedField.propTypes = {\n  label: PropTypes.string,\n  formElement: PropTypes.node,\n};\n\nfunction FormContainer({ children }) {\n  return <Card padded>{children}</Card>;\n}\n\nFormContainer.propTypes = {\n  children: PropTypes.node,\n};\n\nconst propTypes = {\n  datasource: PropTypes.object.isRequired,\n  onChange: PropTypes.func,\n  addSuccessToast: PropTypes.func.isRequired,\n  addDangerToast: PropTypes.func.isRequired,\n  setIsEditing: PropTypes.func,\n};\n\nconst defaultProps = {\n  onChange: () => {},\n  setIsEditing: () => {},\n};\n\nfunction OwnersSelector({ datasource, onChange }) {\n  const loadOptions = useCallback((search = '', page, pageSize) => {\n    const query = rison.encode({ filter: search, page, page_size: pageSize });\n    return SupersetClient.get({\n      endpoint: `/api/v1/dataset/related/owners?q=${query}`,\n    }).then(response => ({\n      data: response.json.result\n        .filter(item => item.extra.active)\n        .map(item => ({\n          value: item.value,\n          label: item.text,\n        })),\n      totalCount: response.json.count,\n    }));\n  }, []);\n\n  return (\n    <AsyncSelect\n      ariaLabel={t('Select owners')}\n      mode=\"multiple\"\n      name=\"owners\"\n      value={datasource.owners}\n      options={loadOptions}\n      onChange={onChange}\n      header={<FormLabel>{t('Owners')}</FormLabel>}\n      allowClear\n    />\n  );\n}\n\nclass DatasourceEditor extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      datasource: {\n        ...props.datasource,\n        owners: props.datasource.owners.map(owner => ({\n          value: owner.value || owner.id,\n          label: owner.label || `${owner.first_name} ${owner.last_name}`,\n        })),\n        metrics: props.datasource.metrics?.map(metric => {\n          const {\n            certified_by: certifiedByMetric,\n            certification_details: certificationDetails,\n          } = metric;\n          const {\n            certification: { details, certified_by: certifiedBy } = {},\n            warning_markdown: warningMarkdown,\n          } = JSON.parse(metric.extra || '{}') || {};\n          return {\n            ...metric,\n            certification_details: certificationDetails || details,\n            warning_markdown: warningMarkdown || '',\n            certified_by: certifiedBy || certifiedByMetric,\n          };\n        }),\n      },\n      errors: [],\n      isSqla:\n        props.datasource.datasource_type === 'table' ||\n        props.datasource.type === 'table',\n      isEditMode: false,\n      databaseColumns: props.datasource.columns.filter(col => !col.expression),\n      calculatedColumns: props.datasource.columns.filter(\n        col => !!col.expression,\n      ),\n      metadataLoading: false,\n      activeTabKey: 0,\n      datasourceType: props.datasource.sql\n        ? DATASOURCE_TYPES.virtual.key\n        : DATASOURCE_TYPES.physical.key,\n    };\n\n    this.onChange = this.onChange.bind(this);\n    this.onChangeEditMode = this.onChangeEditMode.bind(this);\n    this.onDatasourcePropChange = this.onDatasourcePropChange.bind(this);\n    this.onDatasourceChange = this.onDatasourceChange.bind(this);\n    this.tableChangeAndSyncMetadata =\n      this.tableChangeAndSyncMetadata.bind(this);\n    this.syncMetadata = this.syncMetadata.bind(this);\n    this.setColumns = this.setColumns.bind(this);\n    this.validateAndChange = this.validateAndChange.bind(this);\n    this.handleTabSelect = this.handleTabSelect.bind(this);\n    this.allowEditSource = !isFeatureEnabled(\n      FeatureFlag.DISABLE_DATASET_SOURCE_EDIT,\n    );\n  }\n\n  onChange() {\n    // Emptying SQL if \"Physical\" radio button is selected\n    // Currently the logic to know whether the source is\n    // physical or virtual is based on whether SQL is empty or not.\n    const { datasourceType, datasource } = this.state;\n    const sql =\n      datasourceType === DATASOURCE_TYPES.physical.key ? '' : datasource.sql;\n    const newDatasource = {\n      ...this.state.datasource,\n      sql,\n      columns: [...this.state.databaseColumns, ...this.state.calculatedColumns],\n    };\n    this.props.onChange(newDatasource, this.state.errors);\n  }\n\n  onChangeEditMode() {\n    this.props.setIsEditing(!this.state.isEditMode);\n    this.setState(prevState => ({ isEditMode: !prevState.isEditMode }));\n  }\n\n  onDatasourceChange(datasource, callback = this.validateAndChange) {\n    this.setState({ datasource }, callback);\n  }\n\n  onDatasourcePropChange(attr, value) {\n    if (value === undefined) return; // if value is undefined do not update state\n    const datasource = { ...this.state.datasource, [attr]: value };\n    this.setState(\n      prevState => ({\n        datasource: { ...prevState.datasource, [attr]: value },\n      }),\n      attr === 'table_name'\n        ? this.onDatasourceChange(datasource, this.tableChangeAndSyncMetadata)\n        : this.onDatasourceChange(datasource, this.validateAndChange),\n    );\n  }\n\n  onDatasourceTypeChange(datasourceType) {\n    this.setState({ datasourceType });\n  }\n\n  setColumns(obj) {\n    // update calculatedColumns or databaseColumns\n    this.setState(obj, this.validateAndChange);\n  }\n\n  validateAndChange() {\n    this.validate(this.onChange);\n  }\n\n  tableChangeAndSyncMetadata() {\n    this.validate(() => {\n      this.syncMetadata();\n      this.onChange();\n    });\n  }\n\n  updateColumns(cols) {\n    const { databaseColumns } = this.state;\n    const databaseColumnNames = cols.map(col => col.name);\n    const currentCols = databaseColumns.reduce(\n      (agg, col) => ({\n        ...agg,\n        [col.column_name]: col,\n      }),\n      {},\n    );\n    const finalColumns = [];\n    const results = {\n      added: [],\n      modified: [],\n      removed: databaseColumns\n        .map(col => col.column_name)\n        .filter(col => !databaseColumnNames.includes(col)),\n    };\n    cols.forEach(col => {\n      const currentCol = currentCols[col.name];\n      if (!currentCol) {\n        // new column\n        finalColumns.push({\n          id: shortid.generate(),\n          column_name: col.name,\n          type: col.type,\n          groupby: true,\n          filterable: true,\n          is_dttm: col.is_dttm,\n        });\n        results.added.push(col.name);\n      } else if (\n        currentCol.type !== col.type ||\n        (!currentCol.is_dttm && col.is_dttm)\n      ) {\n        // modified column\n        finalColumns.push({\n          ...currentCol,\n          type: col.type,\n          is_dttm: currentCol.is_dttm || col.is_dttm,\n        });\n        results.modified.push(col.name);\n      } else {\n        // unchanged\n        finalColumns.push(currentCol);\n      }\n    });\n    if (\n      results.added.length ||\n      results.modified.length ||\n      results.removed.length\n    ) {\n      this.setColumns({ databaseColumns: finalColumns });\n    }\n    return results;\n  }\n\n  syncMetadata() {\n    const { datasource } = this.state;\n    const params = {\n      datasource_type: datasource.type || datasource.datasource_type,\n      database_name:\n        datasource.database.database_name || datasource.database.name,\n      schema_name: datasource.schema,\n      table_name: datasource.table_name\n        ? encodeURIComponent(datasource.table_name)\n        : datasource.table_name,\n    };\n    Object.entries(params).forEach(([key, value]) => {\n      // rison can't encode the undefined value\n      if (value === undefined) {\n        params[key] = null;\n      }\n    });\n    const endpoint = `/datasource/external_metadata_by_name/?q=${rison.encode(\n      params,\n    )}`;\n    this.setState({ metadataLoading: true });\n\n    SupersetClient.get({ endpoint })\n      .then(({ json }) => {\n        const results = this.updateColumns(json);\n        if (results.modified.length) {\n          this.props.addSuccessToast(\n            t('Modified columns: %s', results.modified.join(', ')),\n          );\n        }\n        if (results.removed.length) {\n          this.props.addSuccessToast(\n            t('Removed columns: %s', results.removed.join(', ')),\n          );\n        }\n        if (results.added.length) {\n          this.props.addSuccessToast(\n            t('New columns added: %s', results.added.join(', ')),\n          );\n        }\n        this.props.addSuccessToast(t('Metadata has been synced'));\n        this.setState({ metadataLoading: false });\n      })\n      .catch(response =>\n        getClientErrorObject(response).then(({ error, statusText }) => {\n          this.props.addDangerToast(\n            error || statusText || t('An error has occurred'),\n          );\n          this.setState({ metadataLoading: false });\n        }),\n      );\n  }\n\n  findDuplicates(arr, accessor) {\n    const seen = {};\n    const dups = [];\n    arr.forEach(obj => {\n      const item = accessor(obj);\n      if (item in seen) {\n        dups.push(item);\n      } else {\n        seen[item] = null;\n      }\n    });\n    return dups;\n  }\n\n  validate(callback) {\n    let errors = [];\n    let dups;\n    const { datasource } = this.state;\n\n    // Looking for duplicate column_name\n    dups = this.findDuplicates(datasource.columns, obj => obj.column_name);\n    errors = errors.concat(\n      dups.map(name => t('Column name [%s] is duplicated', name)),\n    );\n\n    // Looking for duplicate metric_name\n    dups = this.findDuplicates(datasource.metrics, obj => obj.metric_name);\n    errors = errors.concat(\n      dups.map(name => t('Metric name [%s] is duplicated', name)),\n    );\n\n    // Making sure calculatedColumns have an expression defined\n    const noFilterCalcCols = this.state.calculatedColumns.filter(\n      col => !col.expression && !col.json,\n    );\n    errors = errors.concat(\n      noFilterCalcCols.map(col =>\n        t('Calculated column [%s] requires an expression', col.column_name),\n      ),\n    );\n\n    this.setState({ errors }, callback);\n  }\n\n  handleTabSelect(activeTabKey) {\n    this.setState({ activeTabKey });\n  }\n\n  sortMetrics(metrics) {\n    return metrics.sort(({ id: a }, { id: b }) => b - a);\n  }\n\n  renderSettingsFieldset() {\n    const { datasource } = this.state;\n    return (\n      <Fieldset\n        title={t('Basic')}\n        item={datasource}\n        onChange={this.onDatasourceChange}\n      >\n        <Field\n          fieldKey=\"description\"\n          label={t('Description')}\n          control={\n            <TextAreaControl\n              language=\"markdown\"\n              offerEditInModal={false}\n              resize=\"vertical\"\n            />\n          }\n        />\n        <Field\n          fieldKey=\"default_endpoint\"\n          label={t('Default URL')}\n          description={t(\n            'Default URL to redirect to when accessing from the dataset list page',\n          )}\n          control={<TextControl controlId=\"default_endpoint\" />}\n        />\n        <Field\n          inline\n          fieldKey=\"filter_select_enabled\"\n          label={t('Autocomplete filters')}\n          description={t('Whether to populate autocomplete filters options')}\n          control={<CheckboxControl />}\n        />\n        {this.state.isSqla && (\n          <Field\n            fieldKey=\"fetch_values_predicate\"\n            label={t('Autocomplete query predicate')}\n            description={t(\n              'When using \"Autocomplete filters\", this can be used to improve performance ' +\n                'of the query fetching the values. Use this option to apply a ' +\n                'predicate (WHERE clause) to the query selecting the distinct ' +\n                'values from the table. Typically the intent would be to limit the scan ' +\n                'by applying a relative time filter on a partitioned or indexed time-related field.',\n            )}\n            control={\n              <TextAreaControl\n                language=\"sql\"\n                controlId=\"fetch_values_predicate\"\n                minLines={5}\n                resize=\"vertical\"\n              />\n            }\n          />\n        )}\n        {this.state.isSqla && (\n          <Field\n            fieldKey=\"extra\"\n            label={t('Extra')}\n            description={t(\n              'Extra data to specify table metadata. Currently supports ' +\n                'metadata of the format: `{ \"certification\": { \"certified_by\": ' +\n                '\"Data Platform Team\", \"details\": \"This table is the source of truth.\" ' +\n                '}, \"warning_markdown\": \"This is a warning.\" }`.',\n            )}\n            control={\n              <TextAreaControl\n                controlId=\"extra\"\n                language=\"json\"\n                offerEditInModal={false}\n                resize=\"vertical\"\n              />\n            }\n          />\n        )}\n        <OwnersSelector\n          datasource={datasource}\n          onChange={newOwners => {\n            this.onDatasourceChange({ ...datasource, owners: newOwners });\n          }}\n        />\n      </Fieldset>\n    );\n  }\n\n  renderAdvancedFieldset() {\n    const { datasource } = this.state;\n    return (\n      <Fieldset\n        title={t('Advanced')}\n        item={datasource}\n        onChange={this.onDatasourceChange}\n      >\n        <Field\n          fieldKey=\"cache_timeout\"\n          label={t('Cache timeout')}\n          description={t(\n            'The duration of time in seconds before the cache is invalidated. Set to -1 to bypass the cache.',\n          )}\n          control={<TextControl controlId=\"cache_timeout\" />}\n        />\n        <Field\n          fieldKey=\"offset\"\n          label={t('Hours offset')}\n          control={<TextControl controlId=\"offset\" />}\n          description={t(\n            'The number of hours, negative or positive, to shift the time column. This can be used to move UTC time to local time.',\n          )}\n        />\n        {this.state.isSqla && (\n          <Field\n            fieldKey=\"template_params\"\n            label={t('Template parameters')}\n            description={t(\n              'A set of parameters that become available in the query using Jinja templating syntax',\n            )}\n            control={<TextControl controlId=\"template_params\" />}\n          />\n        )}\n      </Fieldset>\n    );\n  }\n\n  renderSpatialTab() {\n    const { datasource } = this.state;\n    const { spatials, all_cols: allCols } = datasource;\n    return (\n      <Tabs.TabPane\n        tab={<CollectionTabTitle collection={spatials} title={t('Spatial')} />}\n        key={4}\n      >\n        <CollectionTable\n          tableColumns={['name', 'config']}\n          onChange={this.onDatasourcePropChange.bind(this, 'spatials')}\n          itemGenerator={() => ({\n            name: t('<new spatial>'),\n            type: t('<no type>'),\n            config: null,\n          })}\n          collection={spatials}\n          allowDeletes\n          itemRenderers={{\n            name: (d, onChange) => (\n              <EditableTitle canEdit title={d} onSaveTitle={onChange} />\n            ),\n            config: (v, onChange) => (\n              <SpatialControl value={v} onChange={onChange} choices={allCols} />\n            ),\n          }}\n        />\n      </Tabs.TabPane>\n    );\n  }\n\n  renderSourceFieldset(theme) {\n    const { datasource } = this.state;\n    return (\n      <div>\n        {this.allowEditSource && (\n          <EditLockContainer>\n            <span role=\"button\" tabIndex={0} onClick={this.onChangeEditMode}>\n              {this.state.isEditMode ? (\n                <Icons.LockUnlocked iconColor={theme.colors.grayscale.base} />\n              ) : (\n                <Icons.LockLocked iconColor={theme.colors.grayscale.base} />\n              )}\n            </span>\n            {!this.state.isEditMode && (\n              <div>{t('Click the lock to make changes.')}</div>\n            )}\n            {this.state.isEditMode && (\n              <div>{t('Click the lock to prevent further changes.')}</div>\n            )}\n          </EditLockContainer>\n        )}\n        <div className=\"m-l-10 m-t-20 m-b-10\">\n          {DATASOURCE_TYPES_ARR.map(type => (\n            <Radio\n              key={type.key}\n              value={type.key}\n              inline\n              onChange={this.onDatasourceTypeChange.bind(this, type.key)}\n              checked={this.state.datasourceType === type.key}\n              disabled={!this.state.isEditMode}\n            >\n              {type.label}\n            </Radio>\n          ))}\n        </div>\n        <hr />\n        <Fieldset item={datasource} onChange={this.onDatasourceChange} compact>\n          {this.state.datasourceType === DATASOURCE_TYPES.virtual.key && (\n            <div>\n              {this.state.isSqla && (\n                <>\n                  <Col xs={24} md={12}>\n                    <Field\n                      fieldKey=\"databaseSelector\"\n                      label={t('virtual')}\n                      control={\n                        <div css={{ marginTop: 8 }}>\n                          <DatabaseSelector\n                            db={datasource?.database}\n                            schema={datasource.schema}\n                            onSchemaChange={schema =>\n                              this.state.isEditMode &&\n                              this.onDatasourcePropChange('schema', schema)\n                            }\n                            onDbChange={database =>\n                              this.state.isEditMode &&\n                              this.onDatasourcePropChange('database', database)\n                            }\n                            formMode={false}\n                            handleError={this.props.addDangerToast}\n                            readOnly={!this.state.isEditMode}\n                          />\n                        </div>\n                      }\n                    />\n                    <div css={{ width: 'calc(100% - 34px)', marginTop: -16 }}>\n                      <Field\n                        fieldKey=\"table_name\"\n                        label={t('Dataset name')}\n                        control={\n                          <TextControl\n                            controlId=\"table_name\"\n                            onChange={table => {\n                              this.onDatasourcePropChange('table_name', table);\n                            }}\n                            placeholder={t('Dataset name')}\n                            disabled={!this.state.isEditMode}\n                          />\n                        }\n                      />\n                    </div>\n                  </Col>\n                  <Field\n                    fieldKey=\"sql\"\n                    label={t('SQL')}\n                    description={t(\n                      'When specifying SQL, the datasource acts as a view. ' +\n                        'Superset will use this statement as a subquery while grouping and filtering ' +\n                        'on the generated parent queries.',\n                    )}\n                    control={\n                      <TextAreaControl\n                        language=\"sql\"\n                        offerEditInModal={false}\n                        minLines={20}\n                        maxLines={20}\n                        readOnly={!this.state.isEditMode}\n                        resize=\"both\"\n                      />\n                    }\n                  />\n                </>\n              )}\n            </div>\n          )}\n          {this.state.datasourceType === DATASOURCE_TYPES.physical.key && (\n            <Col xs={24} md={12}>\n              {this.state.isSqla && (\n                <Field\n                  fieldKey=\"tableSelector\"\n                  label={t('Physical')}\n                  control={\n                    <div css={{ marginTop: 8 }}>\n                      <TableSelector\n                        clearable={false}\n                        database={{\n                          ...datasource.database,\n                          database_name:\n                            datasource.database?.database_name ||\n                            datasource.database?.name,\n                        }}\n                        dbId={datasource.database?.id}\n                        handleError={this.props.addDangerToast}\n                        schema={datasource.schema}\n                        sqlLabMode={false}\n                        tableValue={datasource.table_name}\n                        onSchemaChange={\n                          this.state.isEditMode\n                            ? schema =>\n                                this.onDatasourcePropChange('schema', schema)\n                            : undefined\n                        }\n                        onDbChange={\n                          this.state.isEditMode\n                            ? database =>\n                                this.onDatasourcePropChange(\n                                  'database',\n                                  database,\n                                )\n                            : undefined\n                        }\n                        onTableSelectChange={\n                          this.state.isEditMode\n                            ? table =>\n                                this.onDatasourcePropChange('table_name', table)\n                            : undefined\n                        }\n                        readOnly={!this.state.isEditMode}\n                      />\n                    </div>\n                  }\n                  description={t(\n                    'The pointer to a physical table (or view). Keep in mind that the chart is ' +\n                      'associated to this Superset logical table, and this logical table points ' +\n                      'the physical table referenced here.',\n                  )}\n                />\n              )}\n            </Col>\n          )}\n        </Fieldset>\n      </div>\n    );\n  }\n\n  renderErrors() {\n    if (this.state.errors.length > 0) {\n      return (\n        <Alert\n          css={theme => ({ marginBottom: theme.gridUnit * 4 })}\n          type=\"error\"\n          message={\n            <>\n              {this.state.errors.map(err => (\n                <div key={err}>{err}</div>\n              ))}\n            </>\n          }\n        />\n      );\n    }\n    return null;\n  }\n\n  renderMetricCollection() {\n    const { datasource } = this.state;\n    const { metrics } = datasource;\n    const sortedMetrics = metrics?.length ? this.sortMetrics(metrics) : [];\n    return (\n      <CollectionTable\n        tableColumns={['metric_name', 'verbose_name', 'expression']}\n        sortColumns={['metric_name', 'verbose_name', 'expression']}\n        columnLabels={{\n          metric_name: t('Metric'),\n          verbose_name: t('Label'),\n          expression: t('SQL expression'),\n        }}\n        expandFieldset={\n          <FormContainer>\n            <Fieldset compact>\n              <Field\n                fieldKey=\"description\"\n                label={t('Description')}\n                control={\n                  <TextControl\n                    controlId=\"description\"\n                    placeholder={t('Description')}\n                  />\n                }\n              />\n              <Field\n                fieldKey=\"d3format\"\n                label={t('D3 format')}\n                control={\n                  <TextControl controlId=\"d3format\" placeholder=\"%y/%m/%d\" />\n                }\n              />\n              <Field\n                label={t('Certified by')}\n                fieldKey=\"certified_by\"\n                description={t(\n                  'Person or group that has certified this metric',\n                )}\n                control={\n                  <TextControl\n                    controlId=\"certified_by\"\n                    placeholder={t('Certified by')}\n                  />\n                }\n              />\n              <Field\n                label={t('Certification details')}\n                fieldKey=\"certification_details\"\n                description={t('Details of the certification')}\n                control={\n                  <TextControl\n                    controlId=\"certification_details\"\n                    placeholder={t('Certification details')}\n                  />\n                }\n              />\n              <Field\n                label={t('Warning')}\n                fieldKey=\"warning_markdown\"\n                description={t('Optional warning about use of this metric')}\n                control={\n                  <TextAreaControl\n                    controlId=\"warning_markdown\"\n                    language=\"markdown\"\n                    offerEditInModal={false}\n                    resize=\"vertical\"\n                  />\n                }\n              />\n            </Fieldset>\n          </FormContainer>\n        }\n        collection={sortedMetrics}\n        allowAddItem\n        onChange={this.onDatasourcePropChange.bind(this, 'metrics')}\n        itemGenerator={() => ({\n          metric_name: t('<new metric>'),\n          verbose_name: '',\n          expression: '',\n        })}\n        itemCellProps={{\n          expression: () => ({\n            width: '240px',\n          }),\n        }}\n        itemRenderers={{\n          metric_name: (v, onChange, _, record) => (\n            <FlexRowContainer>\n              {record.is_certified && (\n                <CertifiedBadge\n                  certifiedBy={record.certified_by}\n                  details={record.certification_details}\n                />\n              )}\n              {record.warning_markdown && (\n                <WarningIconWithTooltip\n                  warningMarkdown={record.warning_markdown}\n                />\n              )}\n              <EditableTitle canEdit title={v} onSaveTitle={onChange} />\n            </FlexRowContainer>\n          ),\n          verbose_name: (v, onChange) => (\n            <TextControl canEdit value={v} onChange={onChange} />\n          ),\n          expression: (v, onChange) => (\n            <TextAreaControl\n              canEdit\n              initialValue={v}\n              onChange={onChange}\n              extraClasses={['datasource-sql-expression']}\n              language=\"sql\"\n              offerEditInModal={false}\n              minLines={5}\n              textAreaStyles={{ minWidth: '200px', maxWidth: '450px' }}\n              resize=\"both\"\n            />\n          ),\n          description: (v, onChange, label) => (\n            <StackedField\n              label={label}\n              formElement={<TextControl value={v} onChange={onChange} />}\n            />\n          ),\n          d3format: (v, onChange, label) => (\n            <StackedField\n              label={label}\n              formElement={<TextControl value={v} onChange={onChange} />}\n            />\n          ),\n        }}\n        allowDeletes\n        stickyHeader\n      />\n    );\n  }\n\n  render() {\n    const { datasource, activeTabKey } = this.state;\n    const { metrics } = datasource;\n    const sortedMetrics = metrics?.length ? this.sortMetrics(metrics) : [];\n    const { theme } = this.props;\n\n    return (\n      <DatasourceContainer>\n        {this.renderErrors()}\n        <Alert\n          css={theme => ({ marginBottom: theme.gridUnit * 4 })}\n          type=\"warning\"\n          message={\n            <>\n              {' '}\n              <strong>{t('Be careful.')} </strong>\n              {t(\n                'Changing these settings will affect all charts using this dataset, including charts owned by other people.',\n              )}\n            </>\n          }\n        />\n        <StyledTableTabs\n          fullWidth={false}\n          id=\"table-tabs\"\n          data-test=\"edit-dataset-tabs\"\n          onChange={this.handleTabSelect}\n          defaultActiveKey={activeTabKey}\n        >\n          <Tabs.TabPane key={0} tab={t('Source')}>\n            {this.renderSourceFieldset(theme)}\n          </Tabs.TabPane>\n          <Tabs.TabPane\n            tab={\n              <CollectionTabTitle\n                collection={sortedMetrics}\n                title={t('Metrics')}\n              />\n            }\n            key={1}\n          >\n            {this.renderMetricCollection()}\n          </Tabs.TabPane>\n          <Tabs.TabPane\n            tab={\n              <CollectionTabTitle\n                collection={this.state.databaseColumns}\n                title={t('Columns')}\n              />\n            }\n            key={2}\n          >\n            <StyledColumnsTabWrapper>\n              <ColumnButtonWrapper>\n                <StyledButtonWrapper>\n                  <Button\n                    buttonSize=\"small\"\n                    buttonStyle=\"tertiary\"\n                    onClick={this.syncMetadata}\n                    className=\"sync-from-source\"\n                    disabled={this.state.isEditMode}\n                  >\n                    <i className=\"fa fa-database\" />{' '}\n                    {t('Sync columns from source')}\n                  </Button>\n                </StyledButtonWrapper>\n              </ColumnButtonWrapper>\n              <ColumnCollectionTable\n                className=\"columns-table\"\n                columns={this.state.databaseColumns}\n                datasource={datasource}\n                onColumnsChange={databaseColumns =>\n                  this.setColumns({ databaseColumns })\n                }\n                onDatasourceChange={this.onDatasourceChange}\n              />\n              {this.state.metadataLoading && <Loading />}\n            </StyledColumnsTabWrapper>\n          </Tabs.TabPane>\n          <Tabs.TabPane\n            tab={\n              <CollectionTabTitle\n                collection={this.state.calculatedColumns}\n                title={t('Calculated columns')}\n              />\n            }\n            key={3}\n          >\n            <StyledColumnsTabWrapper>\n              <ColumnCollectionTable\n                columns={this.state.calculatedColumns}\n                onColumnsChange={calculatedColumns =>\n                  this.setColumns({ calculatedColumns })\n                }\n                onDatasourceChange={this.onDatasourceChange}\n                datasource={datasource}\n                editableColumnName\n                showExpression\n                allowAddItem\n                allowEditDataType\n                itemGenerator={() => ({\n                  column_name: t('<new column>'),\n                  filterable: true,\n                  groupby: true,\n                  expression: t('<enter SQL expression here>'),\n                  __expanded: true,\n                })}\n              />\n            </StyledColumnsTabWrapper>\n          </Tabs.TabPane>\n          <Tabs.TabPane key={4} tab={t('Settings')}>\n            <Row gutter={16}>\n              <Col xs={24} md={12}>\n                <FormContainer>{this.renderSettingsFieldset()}</FormContainer>\n              </Col>\n              <Col xs={24} md={12}>\n                <FormContainer>{this.renderAdvancedFieldset()}</FormContainer>\n              </Col>\n            </Row>\n          </Tabs.TabPane>\n        </StyledTableTabs>\n      </DatasourceContainer>\n    );\n  }\n}\n\nDatasourceEditor.defaultProps = defaultProps;\nDatasourceEditor.propTypes = propTypes;\n\nconst DataSourceComponent = withTheme(DatasourceEditor);\n\nexport default withToasts(DataSourceComponent);\n"],"mappings":"4sBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,KAAT,QAAsB,sBAAtB;AACA,OAAOC,IAAP,MAAiB,qBAAjB;AACA,OAAOC,KAAP,MAAkB,sBAAlB;AACA,OAAOC,KAAP,MAAkB,sBAAlB;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA;AACEC,WADF;AAEEC,MAFF;AAGEC,cAHF;AAIEC,CAJF;AAKEC,SALF;AAMO,mBANP;AAOA,SAASC,MAAT,EAAiBC,WAAjB,EAA8BC,GAA9B,EAAmCC,GAAnC,QAA8C,gBAA9C;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,OAAOC,IAAP,MAAiB,qBAAjB;AACA,OAAOC,cAAP,MAA2B,+BAA3B;AACA,OAAOC,sBAAP,MAAmC,uCAAnC;AACA,OAAOC,gBAAP,MAA6B,iCAA7B;AACA,OAAOC,KAAP,MAAkB,sBAAlB;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAOC,aAAP,MAA0B,8BAA1B;AACA,OAAOC,aAAP,MAA0B,8BAA1B;AACA,SAASC,oBAAT,QAAqC,gCAArC;AACA,OAAOC,eAAP,MAA4B,iDAA5B;AACA,OAAOC,WAAP,MAAwB,6CAAxB;AACA,OAAOC,eAAP,MAA4B,iDAA5B;AACA,OAAOC,cAAP,MAA2B,gDAA3B;AACA,OAAOC,UAAP,MAAuB,yCAAvB;AACA,SAASC,gBAAT,QAAiC,kBAAjC;AACA,OAAOC,KAAP,MAAkB,sBAAlB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,KAAP,MAAkB,SAAlB,C;;AAEA,MAAMC,mBAAmB,GAAG7B,MAAM,CAAC8B,GAAI;AACvC;AACA;AACA,aAAa,eAAC,EAAEC,KAAF,EAAD,eAAeA,KAAK,CAACC,MAAN,CAAaC,OAAb,CAAqBC,IAApC,EAAyC;AACtD;AACA;AACA;AACA,mBAAmB,gBAAC,EAAEH,KAAF,EAAD,gBAAeA,KAAK,CAACI,UAAN,CAAiBC,OAAjB,CAAyBC,IAAxC,EAA6C;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAjBA;;AAmBA,MAAMC,gBAAgB,GAAGtC,MAAM,CAAC8B,GAAI;AACpC;AACA;AACA;AACA;AACA,oBAAoB,gBAAC,EAAEC,KAAF,EAAD,gBAAeA,KAAK,CAACQ,QAArB,EAA8B;AAClD;AACA,CAPA;;AASA,MAAMC,eAAe,GAAGxC,MAAM,CAACU,IAAD,CAAO;AACrC;AACA;AACA;AACA;AACA,CALA;;AAOA,MAAM+B,WAAW,GAAGzC,MAAM,CAACH,KAAD,CAAQ;AAClC;AACA,mBAAmB,gBAAC,EAAEkC,KAAF,EAAD,gBAAeA,KAAK,CAACQ,QAAN,GAAiB,CAAhC,EAAkC;AACrD,cAAc,gBAAC,EAAER,KAAF,EAAD,gBAAeA,KAAK,CAACQ,QAAN,GAAiB,CAAhC,EAAkC;AAChD,mBAAmB,gBAAC,EAAER,KAAF,EAAD,gBAAeA,KAAK,CAACQ,QAArB,EAA8B;AACjD;AACA,CANA;;AAQA,MAAMG,iBAAiB,GAAG1C,MAAM,CAAC8B,GAAI;AACrC,eAAe,gBAAC,EAAEC,KAAF,EAAD,gBAAeA,KAAK,CAACI,UAAN,CAAiBQ,KAAjB,CAAuBC,CAAtC,EAAwC;AACvD;AACA;AACA;AACA;AACA;AACA,CAPA;;AASA,MAAMC,mBAAmB,GAAG7C,MAAM,CAAC8B,GAAI;AACvC;AACA,IAAI,gBAAC,EAAEC,KAAF,EAAD,gBAAgB,kBAAiBA,KAAK,CAACQ,QAAN,GAAiB,CAAE,IAApD,EAAwD;AAC5D,CAHA;;AAKA,MAAMO,kBAAkB,GAAG9C,MAAM,CAAC8B,GAAI;AACtC;AACA;AACA;AACA,oBAAoB,gBAAC,EAAEC,KAAF,EAAD,gBAAeA,KAAK,CAACQ,QAArB,EAA8B;AAClD;AACA,CANA;;AAQA,MAAMQ,uBAAuB,GAAG/C,MAAM,CAAC8B,GAAI;AAC3C;AACA;AACA;AACA;AACA;AACA,kBAAkB,iBAAC,EAAEC,KAAF,EAAD,iBAAeA,KAAK,CAACQ,QAArB,EAA8B;AAChD;AACA,CARA;;AAUA,MAAMS,mBAAmB,GAAGhD,MAAM,CAACiD,IAAK;AACxC,IAAI,iBAAC,EAAElB,KAAF,EAAD,iBAAgB;AACpB,kBAAkBA,KAAK,CAACQ,QAAN,GAAiB,CAAE;AACrC,mBAAmBR,KAAK,CAACQ,QAAN,GAAiB,CAAE;AACtC,GAHI,EAGA;AACJ,CALA;;AAOA,MAAMW,iBAAiB,GAAG,CAACC,CAAD,EAAIC,QAAJ;AACxB,cAAC,eAAD,IAAiB,KAAK,EAAED,CAAxB,EAA2B,QAAQ,EAAEC,QAArC,GADF;;AAGA,MAAMC,UAAU,GAAG;AACjB,EAAEC,KAAK,EAAE,QAAT,EAAmBC,KAAK,EAAErD,CAAC,CAAC,QAAD,CAA3B,EADiB;AAEjB,EAAEoD,KAAK,EAAE,SAAT,EAAoBC,KAAK,EAAErD,CAAC,CAAC,SAAD,CAA5B,EAFiB;AAGjB,EAAEoD,KAAK,EAAE,UAAT,EAAqBC,KAAK,EAAErD,CAAC,CAAC,UAAD,CAA7B,EAHiB;AAIjB,EAAEoD,KAAK,EAAE,SAAT,EAAoBC,KAAK,EAAErD,CAAC,CAAC,SAAD,CAA5B,EAJiB,CAAnB;;;AAOA,MAAMsD,oBAAoB,GAAG;AAC3B,EAAEC,GAAG,EAAE,UAAP,EAAmBF,KAAK,EAAErD,CAAC,CAAC,0BAAD,CAA3B,EAD2B;AAE3B,EAAEuD,GAAG,EAAE,SAAP,EAAkBF,KAAK,EAAErD,CAAC,CAAC,eAAD,CAA1B,EAF2B,CAA7B;;AAIA,MAAMwD,gBAAgB,GAAG,EAAzB;AACAF,oBAAoB,CAACG,OAArB,CAA6B,CAAAC,CAAC,KAAI;EAChCF,gBAAgB,CAACE,CAAC,CAACH,GAAH,CAAhB,GAA0BG,CAA1B;AACD,CAFD,E;;AAIA,SAASC,kBAAT,SAAmD,KAAvB,EAAEC,KAAF,EAASC,UAAT,EAAuB;EACjD;IACE;MACE,GAAG,QADL;MAEE,aAAY,kBAAiBD,KAAM,EAFrC;;IAIGA,KAJH,EAIU,GAJV;IAKE,cAAC,WAAD,IAAa,KAAK,EAAEC,UAAU,GAAGA,UAAU,CAACC,MAAd,GAAuB,CAArD,EAAwD,QAAQ,MAAhE,GALF,CADF;;;AASD;;AAEDH,kBAAkB,CAACI,SAAnB,GAA+B;EAC7BH,KAAK,EAAErE,SAAS,CAACyE,MADY;EAE7BH,UAAU,EAAEtE,SAAS,CAAC0E,KAFO,EAA/B;;;AAKA,SAASC,qBAAT;;;;;;;;;;AAUG,KAV4B,EAC7BC,OAD6B,EAE7BC,UAF6B,EAG7BC,eAH6B,EAI7BC,kBAJ6B,EAK7BC,kBAL6B,EAM7BC,cAN6B,EAO7BC,YAP6B,EAQ7BC,iBAR6B,EAS7BC,aAT6B,EAU5B;EACD;IACE,cAAC,eAAD;MACE,UAAU,EAAER,OADd;MAEE,YAAY;MACV7C,gBAAgB,CAACzB,WAAW,CAAC+E,0BAAb,CAAhB;MACI;MACE,aADF;MAEE,oBAFF;MAGE,MAHF;MAIE,SAJF;MAKE,eALF;MAME,YANF;MAOE,SAPF,CADJ;;MAUI;MACE,aADF;MAEE,MAFF;MAGE,SAHF;MAIE,eAJF;MAKE,YALF;MAME,SANF,CAbR;;;MAsBE,WAAW;MACTtD,gBAAgB,CAACzB,WAAW,CAAC+E,0BAAb,CAAhB;MACI;MACE,aADF;MAEE,oBAFF;MAGE,MAHF;MAIE,SAJF;MAKE,eALF;MAME,YANF;MAOE,SAPF,CADJ;;MAUI;MACE,aADF;MAEE,MAFF;MAGE,SAHF;MAIE,eAJF;MAKE,YALF;MAME,SANF,CAjCR;;;MA0CE,YAAY,MA1Cd;MA2CE,YAAY,EAAEH,YA3ChB;MA4CE,aAAa,EAAEE,aA5CjB;MA6CE,YAAY,MA7Cd;MA8CE,cAAc;MACZ,cAAC,aAAD;MACE,cAAC,QAAD,IAAU,OAAO,MAAjB;MACGH,cAAc;MACb,cAAC,KAAD;QACE,QAAQ,EAAC,YADX;QAEE,KAAK,EAAExE,CAAC,CAAC,gBAAD,CAFV;QAGE,OAAO;QACL,cAAC,eAAD;UACE,QAAQ,EAAC,UADX;UAEE,gBAAgB,EAAE,KAFpB;UAGE,MAAM,EAAC,UAHT,GAJJ,GAFJ;;;;;MAcE,cAAC,KAAD;QACE,QAAQ,EAAC,cADX;QAEE,KAAK,EAAEA,CAAC,CAAC,OAAD,CAFV;QAGE,OAAO;QACL,cAAC,WAAD;UACE,SAAS,EAAC,cADZ;UAEE,WAAW,EAAEA,CAAC,CAAC,OAAD,CAFhB,GAJJ,GAdF;;;;MAwBE,cAAC,KAAD;QACE,QAAQ,EAAC,aADX;QAEE,KAAK,EAAEA,CAAC,CAAC,aAAD,CAFV;QAGE,OAAO;QACL,cAAC,WAAD;UACE,SAAS,EAAC,aADZ;UAEE,WAAW,EAAEA,CAAC,CAAC,aAAD,CAFhB,GAJJ,GAxBF;;;;MAkCG0E,iBAAiB;MAChB,cAAC,KAAD;QACE,QAAQ,EAAC,MADX;QAEE,KAAK,EAAE1E,CAAC,CAAC,WAAD,CAFV;QAGE,OAAO;QACL,cAAC,MAAD;UACE,SAAS,EAAEA,CAAC,CAAC,WAAD,CADd;UAEE,OAAO,EAAEmD,UAFX;UAGE,IAAI,EAAC,MAHP;UAIE,eAAe,MAJjB;UAKE,UAAU,MALZ,GAJJ,GAnCJ;;;;;MAiDG7B,gBAAgB,CAACzB,WAAW,CAAC+E,0BAAb,CAAhB;MACC,cAAC,KAAD;QACE,QAAQ,EAAC,oBADX;QAEE,KAAK,EAAE5E,CAAC,CAAC,oBAAD,CAFV;QAGE,OAAO;QACL,cAAC,WAAD;UACE,SAAS,EAAC,oBADZ;UAEE,WAAW,EAAEA,CAAC,CAAC,oBAAD,CAFhB,GAJJ,GADD;;;;;MAYC,mCA7DJ;;MA+DE,cAAC,KAAD;QACE,QAAQ,EAAC,oBADX;QAEE,KAAK,EAAEA,CAAC,CAAC,iBAAD,CAFV;QAGE,WAAW;QACT;QACA;QACGA,CAAC,CAAC,mDAAD,CADJ;QAEE,qBAAG,IAAI,EAAC,4EAAR;QACGA,CAAC,CAAC,gCAAD,CADJ,CAFF;;QAKGA,CAAC,CAAC,2CAAD,CALJ;QAME,qBAAG,IAAI,EAAC,wCAAR;QACGA,CAAC,CAAC,UAAD,CADJ,CANF;;QASGA,CAAC,CAAE;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EARoB,CATJ,CALJ;;;QAyBE,OAAO;QACL,cAAC,WAAD;UACE,SAAS,EAAC,oBADZ;UAEE,WAAW,EAAC,UAFd,GA1BJ,GA/DF;;;;MA+FE,cAAC,KAAD;QACE,QAAQ,EAAC,cADX;QAEE,KAAK,EAAEA,CAAC,CAAC,cAAD,CAFV;QAGE,WAAW,EAAEA,CAAC,CAAC,gDAAD,CAHhB;QAIE,OAAO;QACL,cAAC,WAAD;UACE,SAAS,EAAC,WADZ;UAEE,WAAW,EAAEA,CAAC,CAAC,cAAD,CAFhB,GALJ,GA/FF;;;;MA0GE,cAAC,KAAD;QACE,QAAQ,EAAC,uBADX;QAEE,KAAK,EAAEA,CAAC,CAAC,uBAAD,CAFV;QAGE,WAAW,EAAEA,CAAC,CAAC,8BAAD,CAHhB;QAIE,OAAO;QACL,cAAC,WAAD;UACE,SAAS,EAAC,sBADZ;UAEE,WAAW,EAAEA,CAAC,CAAC,uBAAD,CAFhB,GALJ,GA1GF,CADF,CA/CJ;;;;;;;MAwKE,YAAY;MACVsB,gBAAgB,CAACzB,WAAW,CAAC+E,0BAAb,CAAhB;MACI;QACEC,WAAW,EAAE7E,CAAC,CAAC,QAAD,CADhB;QAEE8E,kBAAkB,EAAE9E,CAAC,CAAC,oBAAD,CAFvB;QAGE+E,IAAI,EAAE/E,CAAC,CAAC,WAAD,CAHT;QAIEgF,OAAO,EAAEhF,CAAC,CAAC,cAAD,CAJZ;QAKEiF,OAAO,EAAEjF,CAAC,CAAC,aAAD,CALZ;QAMEkF,aAAa,EAAElF,CAAC,CAAC,kBAAD,CANlB;QAOEmF,UAAU,EAAEnF,CAAC,CAAC,eAAD,CAPf,EADJ;;MAUI;QACE6E,WAAW,EAAE7E,CAAC,CAAC,QAAD,CADhB;QAEE+E,IAAI,EAAE/E,CAAC,CAAC,WAAD,CAFT;QAGEgF,OAAO,EAAEhF,CAAC,CAAC,cAAD,CAHZ;QAIEiF,OAAO,EAAEjF,CAAC,CAAC,aAAD,CAJZ;QAKEkF,aAAa,EAAElF,CAAC,CAAC,kBAAD,CALlB;QAMEmF,UAAU,EAAEnF,CAAC,CAAC,eAAD,CANf,EAnLR;;;MA4LE,QAAQ,EAAEqE,eA5LZ;MA6LE,aAAa;MACX/C,gBAAgB,CAACzB,WAAW,CAAC+E,0BAAb,CAAhB;MACI;QACEC,WAAW,EAAE,CAACO,CAAD,EAAIC,YAAJ,EAAkBC,CAAlB,EAAqBC,MAArB;QACXhB,kBAAkB;QAChB,cAAC,kBAAD;QACGgB,MAAM,CAACC,YAAP;QACC,cAAC,cAAD;UACE,WAAW,EAAED,MAAM,CAACE,YADtB;UAEE,OAAO,EAAEF,MAAM,CAACG,qBAFlB,GAFJ;;;QAOE,cAAC,aAAD;UACE,OAAO,MADT;UAEE,KAAK,EAAEN,CAFT;UAGE,WAAW,EAAEC,YAHf,GAPF,CADgB;;;;QAehB,cAAC,kBAAD;QACGE,MAAM,CAACC,YAAP;QACC,cAAC,cAAD;UACE,WAAW,EAAED,MAAM,CAACE,YADtB;UAEE,OAAO,EAAEF,MAAM,CAACG,qBAFlB,GAFJ;;;QAOGN,CAPH,CAjBN;;;QA2BEF,aAAa,EAAE,CAAC9B,KAAD,EAAQuC,aAAR,EAAuBC,MAAvB,EAA+BL,MAA/B,KAA0C;UACvD,MAAMM,OAAO,GAAGzB,UAAU,CAACc,aAAX,KAA6BK,MAAM,CAACV,WAApD;UACA,MAAMiB,QAAQ,GAAG,CAAC3B,OAAO,CAAC4B,IAAR;UAChB,CAAAC,MAAM,KAAIA,MAAM,CAACnB,WAAP,KAAuBU,MAAM,CAACV,WADxB;UAEhBI,OAFF;UAGA;YACE,cAAC,KAAD;cACE,aAAY,sBAAqBM,MAAM,CAACV,WAAY,EADtD;cAEE,OAAO,EAAEgB,OAFX;cAGE,QAAQ,EAAEC,QAHZ;cAIE,QAAQ,EAAE;cACRxB,kBAAkB,CAAC;gBACjB,GAAGF,UADc;gBAEjBc,aAAa,EAAEK,MAAM,CAACV,WAFL,EAAD,CALtB,GADF;;;;;QAaD,CA7CH;QA8CEE,IAAI,EAAE,CAAA9B,CAAC,KAAKA,CAAC,GAAG,cAAC,KAAD,QAAQA,CAAR,CAAH,GAAwB,IA9CvC;QA+CE6B,kBAAkB,EAAE,CAAA7B,CAAC;QACnB,cAAC,KAAD,IAAO,QAAQ,EAAEoB,eAAjB,IAAmCpB,CAAnC,CAhDJ;;QAkDEgC,OAAO,EAAEjC,iBAlDX;QAmDEmC,UAAU,EAAEnC,iBAnDd;QAoDEgC,OAAO,EAAEhC,iBApDX,EADJ;;MAuDI;QACE6B,WAAW,EAAE,CAACO,CAAD,EAAIC,YAAJ,EAAkBC,CAAlB,EAAqBC,MAArB;QACXhB,kBAAkB;QAChB,cAAC,kBAAD;QACGgB,MAAM,CAACC,YAAP;QACC,cAAC,cAAD;UACE,WAAW,EAAED,MAAM,CAACE,YADtB;UAEE,OAAO,EAAEF,MAAM,CAACG,qBAFlB,GAFJ;;;QAOE,cAAC,WAAD,IAAa,KAAK,EAAEN,CAApB,EAAuB,QAAQ,EAAEC,YAAjC,GAPF,CADgB;;;QAWhB,cAAC,kBAAD;QACGE,MAAM,CAACC,YAAP;QACC,cAAC,cAAD;UACE,WAAW,EAAED,MAAM,CAACE,YADtB;UAEE,OAAO,EAAEF,MAAM,CAACG,qBAFlB,GAFJ;;;QAOGN,CAPH,CAbN;;;QAuBEF,aAAa,EAAE,CAAC9B,KAAD,EAAQuC,aAAR,EAAuBC,MAAvB,EAA+BL,MAA/B,KAA0C;UACvD,MAAMM,OAAO,GAAGzB,UAAU,CAACc,aAAX,KAA6BK,MAAM,CAACV,WAApD;UACA,MAAMiB,QAAQ,GAAG,CAAC3B,OAAO,CAAC4B,IAAR;UAChB,CAAAC,MAAM,KAAIA,MAAM,CAACnB,WAAP,KAAuBU,MAAM,CAACV,WADxB;UAEhBI,OAFF;UAGA;YACE,cAAC,KAAD;cACE,aAAY,sBAAqBM,MAAM,CAACV,WAAY,EADtD;cAEE,OAAO,EAAEgB,OAFX;cAGE,QAAQ,EAAEC,QAHZ;cAIE,QAAQ,EAAE;cACRxB,kBAAkB,CAAC;gBACjB,GAAGF,UADc;gBAEjBc,aAAa,EAAEK,MAAM,CAACV,WAFL,EAAD,CALtB,GADF;;;;;QAaD,CAzCH;QA0CEE,IAAI,EAAE,CAAA9B,CAAC,KAAKA,CAAC,GAAG,cAAC,KAAD,QAAQA,CAAR,CAAH,GAAwB,IA1CvC;QA2CEgC,OAAO,EAAEjC,iBA3CX;QA4CEmC,UAAU,EAAEnC,iBA5Cd;QA6CEgC,OAAO,EAAEhC,iBA7CX,EArPR,GADF;;;;;AAwSD;AACDkB,qBAAqB,CAACH,SAAtB,GAAkC;EAChCI,OAAO,EAAE5E,SAAS,CAAC0E,KAAV,CAAgBgC,UADO;EAEhC7B,UAAU,EAAE7E,SAAS,CAAC2G,MAAV,CAAiBD,UAFG;EAGhC5B,eAAe,EAAE9E,SAAS,CAAC4G,IAAV,CAAeF,UAHA;EAIhC3B,kBAAkB,EAAE/E,SAAS,CAAC4G,IAAV,CAAeF,UAJH;EAKhC1B,kBAAkB,EAAEhF,SAAS,CAAC6G,IALE;EAMhC5B,cAAc,EAAEjF,SAAS,CAAC6G,IANM;EAOhC3B,YAAY,EAAElF,SAAS,CAAC6G,IAPQ;EAQhC1B,iBAAiB,EAAEnF,SAAS,CAAC6G,IARG;EAShCzB,aAAa,EAAEpF,SAAS,CAAC4G,IATO,EAAlC;;AAWAjC,qBAAqB,CAACmC,YAAtB,GAAqC;EACnC9B,kBAAkB,EAAE,KADe;EAEnCC,cAAc,EAAE,KAFmB;EAGnCC,YAAY,EAAE,KAHqB;EAInCC,iBAAiB,EAAE,KAJgB;EAKnCC,aAAa,EAAE,OAAO;IACpBE,WAAW,EAAE7E,CAAC,CAAC,cAAD,CADM;IAEpBmF,UAAU,EAAE,IAFQ;IAGpBH,OAAO,EAAE,IAHW,EAAP,CALoB,EAArC;;;;AAYA,SAASsB,YAAT,SAA8C,KAAxB,EAAEjD,KAAF,EAASkD,WAAT,EAAwB;EAC5C;IACE;IACE;IACE,8BAASlD,KAAT,CADF,CADF;;IAIE,2BAAMkD,WAAN,CAJF,CADF;;;AAQD;;AAEDD,YAAY,CAACvC,SAAb,GAAyB;EACvBV,KAAK,EAAE9D,SAAS,CAACyE,MADM;EAEvBuC,WAAW,EAAEhH,SAAS,CAACiH,IAFA,EAAzB;;;AAKA,SAASC,aAAT,SAAqC,KAAd,EAAEC,QAAF,EAAc;EACnC,OAAO,cAAC,IAAD,IAAM,MAAM,MAAZ,IAAcA,QAAd,CAAP;AACD;;AAEDD,aAAa,CAAC1C,SAAd,GAA0B;EACxB2C,QAAQ,EAAEnH,SAAS,CAACiH,IADI,EAA1B;;;AAIA,MAAMzC,SAAS,GAAG;EAChBK,UAAU,EAAE7E,SAAS,CAAC2G,MAAV,CAAiBD,UADb;EAEhB/C,QAAQ,EAAE3D,SAAS,CAAC4G,IAFJ;EAGhBQ,eAAe,EAAEpH,SAAS,CAAC4G,IAAV,CAAeF,UAHhB;EAIhBW,cAAc,EAAErH,SAAS,CAAC4G,IAAV,CAAeF,UAJf;EAKhBY,YAAY,EAAEtH,SAAS,CAAC4G,IALR,EAAlB;;;AAQA,MAAME,YAAY,GAAG;EACnBnD,QAAQ,EAAE,MAAM,CAAE,CADC;EAEnB2D,YAAY,EAAE,MAAM,CAAE,CAFH,EAArB;;;AAKA,SAASC,cAAT,SAAkD,KAA1B,EAAE1C,UAAF,EAAclB,QAAd,EAA0B;EAChD,MAAM6D,WAAW,GAAGzH,WAAW,CAAC,UAAC0H,MAAD,EAAcC,IAAd,EAAoBC,QAApB,EAAiC,KAAhCF,MAAgC,cAAhCA,MAAgC,GAAvB,EAAuB;IAC/D,MAAMG,KAAK,GAAG/H,KAAK,CAACgI,MAAN,CAAa,EAAEC,MAAM,EAAEL,MAAV,EAAkBC,IAAlB,EAAwBK,SAAS,EAAEJ,QAAnC,EAAb,CAAd;IACA,OAAOnH,cAAc,CAACwH,GAAf,CAAmB;MACxBC,QAAQ,EAAG,oCAAmCL,KAAM,EAD5B,EAAnB;IAEJM,IAFI,CAEC,CAAAC,QAAQ,MAAK;MACnBC,IAAI,EAAED,QAAQ,CAACE,IAAT,CAAcC,MAAd;MACHR,MADG,CACI,CAAAS,IAAI,KAAIA,IAAI,CAACC,KAAL,CAAWC,MADvB;MAEHC,GAFG,CAEC,CAAAH,IAAI,MAAK;QACZ1E,KAAK,EAAE0E,IAAI,CAAC1E,KADA;QAEZC,KAAK,EAAEyE,IAAI,CAACI,IAFA,EAAL,CAFL,CADa;;MAOnBC,UAAU,EAAET,QAAQ,CAACE,IAAT,CAAcQ,KAPP,EAAL,CAFT,CAAP;;EAWD,CAb8B,EAa5B,EAb4B,CAA/B;;EAeA;IACE,cAAC,WAAD;MACE,SAAS,EAAEpI,CAAC,CAAC,eAAD,CADd;MAEE,IAAI,EAAC,UAFP;MAGE,IAAI,EAAC,QAHP;MAIE,KAAK,EAAEoE,UAAU,CAACiE,MAJpB;MAKE,OAAO,EAAEtB,WALX;MAME,QAAQ,EAAE7D,QANZ;MAOE,MAAM,EAAE,cAAC,SAAD,QAAYlD,CAAC,CAAC,QAAD,CAAb,CAPV;MAQE,UAAU,MARZ,GADF;;;AAYD,C,cA5BQ8G,c;;AA8BT,MAAMwB,gBAAN,SAA+BjJ,KAAK,CAACkJ,aAArC,CAAmD;EACjDC,WAAW,CAACC,KAAD,EAAQ;IACjB,MAAMA,KAAN;IACA,KAAKC,KAAL,GAAa;MACXtE,UAAU,EAAE;QACV,GAAGqE,KAAK,CAACrE,UADC;QAEViE,MAAM,EAAEI,KAAK,CAACrE,UAAN,CAAiBiE,MAAjB,CAAwBJ,GAAxB,CAA4B,CAAAU,KAAK,MAAK;UAC5CvF,KAAK,EAAEuF,KAAK,CAACvF,KAAN,IAAeuF,KAAK,CAACC,EADgB;UAE5CvF,KAAK,EAAEsF,KAAK,CAACtF,KAAN,IAAgB,GAAEsF,KAAK,CAACE,UAAW,IAAGF,KAAK,CAACG,SAAU,EAFjB,EAAL,CAAjC,CAFE;;QAMVC,OAAO,2BAAEN,KAAK,CAACrE,UAAN,CAAiB2E,OAAnB,qBAAE,sBAA0Bd,GAA1B,CAA8B,CAAAe,MAAM,KAAI;UAC/C,MAAM;YACJvD,YAAY,EAAEwD,iBADV;YAEJvD,qBAAqB,EAAEwD,oBAFnB;UAGFF,MAHJ;UAIA,MAAM;YACJG,aAAa,EAAE,EAAEC,OAAF,EAAW3D,YAAY,EAAE4D,WAAzB,KAAyC,EADpD;YAEJC,gBAAgB,EAAEC,eAFd;UAGFC,IAAI,CAACC,KAAL,CAAWT,MAAM,CAACjB,KAAP,IAAgB,IAA3B,KAAoC,EAHxC;UAIA,OAAO;YACL,GAAGiB,MADE;YAELtD,qBAAqB,EAAEwD,oBAAoB,IAAIE,OAF1C;YAGLE,gBAAgB,EAAEC,eAAe,IAAI,EAHhC;YAIL9D,YAAY,EAAE4D,WAAW,IAAIJ,iBAJxB,EAAP;;QAMD,CAfQ,CANC,EADD;;MAwBXS,MAAM,EAAE,EAxBG;MAyBXC,MAAM;MACJlB,KAAK,CAACrE,UAAN,CAAiBwF,eAAjB,KAAqC,OAArC;MACAnB,KAAK,CAACrE,UAAN,CAAiBW,IAAjB,KAA0B,OA3BjB;MA4BX8E,UAAU,EAAE,KA5BD;MA6BXC,eAAe,EAAErB,KAAK,CAACrE,UAAN,CAAiBD,OAAjB,CAAyBkD,MAAzB,CAAgC,CAAA0C,GAAG,KAAI,CAACA,GAAG,CAACC,UAA5C,CA7BN;MA8BXC,iBAAiB,EAAExB,KAAK,CAACrE,UAAN,CAAiBD,OAAjB,CAAyBkD,MAAzB;MACjB,CAAA0C,GAAG,KAAI,CAAC,CAACA,GAAG,CAACC,UADI,CA9BR;;MAiCXE,eAAe,EAAE,KAjCN;MAkCXC,YAAY,EAAE,CAlCH;MAmCXC,cAAc,EAAE3B,KAAK,CAACrE,UAAN,CAAiBiG,GAAjB;MACZ7G,gBAAgB,CAAC8G,OAAjB,CAAyB/G,GADb;MAEZC,gBAAgB,CAAC+G,QAAjB,CAA0BhH,GArCnB,EAAb;;;IAwCA,KAAKL,QAAL,GAAgB,KAAKA,QAAL,CAAcsH,IAAd,CAAmB,IAAnB,CAAhB;IACA,KAAKC,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBD,IAAtB,CAA2B,IAA3B,CAAxB;IACA,KAAKE,sBAAL,GAA8B,KAAKA,sBAAL,CAA4BF,IAA5B,CAAiC,IAAjC,CAA9B;IACA,KAAKlG,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBkG,IAAxB,CAA6B,IAA7B,CAA1B;IACA,KAAKG,0BAAL;IACE,KAAKA,0BAAL,CAAgCH,IAAhC,CAAqC,IAArC,CADF;IAEA,KAAKI,YAAL,GAAoB,KAAKA,YAAL,CAAkBJ,IAAlB,CAAuB,IAAvB,CAApB;IACA,KAAKK,UAAL,GAAkB,KAAKA,UAAL,CAAgBL,IAAhB,CAAqB,IAArB,CAAlB;IACA,KAAKM,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBN,IAAvB,CAA4B,IAA5B,CAAzB;IACA,KAAKO,eAAL,GAAuB,KAAKA,eAAL,CAAqBP,IAArB,CAA0B,IAA1B,CAAvB;IACA,KAAKQ,eAAL,GAAuB,CAAC1J,gBAAgB;IACtCzB,WAAW,CAACoL,2BAD0B,CAAxC;;EAGD;;EAED/H,QAAQ,GAAG;IACT;IACA;IACA;IACA,MAAM,EAAEkH,cAAF,EAAkBhG,UAAlB,KAAiC,KAAKsE,KAA5C;IACA,MAAM2B,GAAG;IACPD,cAAc,KAAK5G,gBAAgB,CAAC+G,QAAjB,CAA0BhH,GAA7C,GAAmD,EAAnD,GAAwDa,UAAU,CAACiG,GADrE;IAEA,MAAMa,aAAa,GAAG;MACpB,GAAG,KAAKxC,KAAL,CAAWtE,UADM;MAEpBiG,GAFoB;MAGpBlG,OAAO,EAAE,CAAC,GAAG,KAAKuE,KAAL,CAAWoB,eAAf,EAAgC,GAAG,KAAKpB,KAAL,CAAWuB,iBAA9C,CAHW,EAAtB;;IAKA,KAAKxB,KAAL,CAAWvF,QAAX,CAAoBgI,aAApB,EAAmC,KAAKxC,KAAL,CAAWgB,MAA9C;EACD;;EAEDe,gBAAgB,GAAG;IACjB,KAAKhC,KAAL,CAAW5B,YAAX,CAAwB,CAAC,KAAK6B,KAAL,CAAWmB,UAApC;IACA,KAAKsB,QAAL,CAAc,CAAAC,SAAS,MAAK,EAAEvB,UAAU,EAAE,CAACuB,SAAS,CAACvB,UAAzB,EAAL,CAAvB;EACD;;EAEDvF,kBAAkB,CAACF,UAAD,EAAaiH,QAAb,EAAgD,KAAnCA,QAAmC,cAAnCA,QAAmC,GAAxB,KAAKP,iBAAmB;IAChE,KAAKK,QAAL,CAAc,EAAE/G,UAAF,EAAd,EAA8BiH,QAA9B;EACD;;EAEDX,sBAAsB,CAACY,IAAD,EAAOlI,KAAP,EAAc;IAClC,IAAIA,KAAK,KAAKmI,SAAd,EAAyB,OADS,CACD;IACjC,MAAMnH,UAAU,GAAG,EAAE,GAAG,KAAKsE,KAAL,CAAWtE,UAAhB,EAA4B,CAACkH,IAAD,GAAQlI,KAApC,EAAnB;IACA,KAAK+H,QAAL;IACE,CAAAC,SAAS,MAAK;MACZhH,UAAU,EAAE,EAAE,GAAGgH,SAAS,CAAChH,UAAf,EAA2B,CAACkH,IAAD,GAAQlI,KAAnC,EADA,EAAL,CADX;;IAIEkI,IAAI,KAAK,YAAT;IACI,KAAKhH,kBAAL,CAAwBF,UAAxB,EAAoC,KAAKuG,0BAAzC,CADJ;IAEI,KAAKrG,kBAAL,CAAwBF,UAAxB,EAAoC,KAAK0G,iBAAzC,CANN;;EAQD;;EAEDU,sBAAsB,CAACpB,cAAD,EAAiB;IACrC,KAAKe,QAAL,CAAc,EAAEf,cAAF,EAAd;EACD;;EAEDS,UAAU,CAACY,GAAD,EAAM;IACd;IACA,KAAKN,QAAL,CAAcM,GAAd,EAAmB,KAAKX,iBAAxB;EACD;;EAEDA,iBAAiB,GAAG;IAClB,KAAKY,QAAL,CAAc,KAAKxI,QAAnB;EACD;;EAEDyH,0BAA0B,GAAG;IAC3B,KAAKe,QAAL,CAAc,MAAM;MAClB,KAAKd,YAAL;MACA,KAAK1H,QAAL;IACD,CAHD;EAID;;EAEDyI,aAAa,CAACC,IAAD,EAAO;IAClB,MAAM,EAAE9B,eAAF,KAAsB,KAAKpB,KAAjC;IACA,MAAMmD,mBAAmB,GAAGD,IAAI,CAAC3D,GAAL,CAAS,CAAA8B,GAAG,KAAIA,GAAG,CAAC+B,IAApB,CAA5B;IACA,MAAMC,WAAW,GAAGjC,eAAe,CAACkC,MAAhB;IAClB,CAACC,GAAD,EAAMlC,GAAN,MAAe;MACb,GAAGkC,GADU;MAEb,CAAClC,GAAG,CAAClF,WAAL,GAAmBkF,GAFN,EAAf,CADkB;;IAKlB,EALkB,CAApB;;IAOA,MAAMmC,YAAY,GAAG,EAArB;IACA,MAAMC,OAAO,GAAG;MACdC,KAAK,EAAE,EADO;MAEdC,QAAQ,EAAE,EAFI;MAGdC,OAAO,EAAExC,eAAe;MACrB7B,GADM,CACF,CAAA8B,GAAG,KAAIA,GAAG,CAAClF,WADT;MAENwC,MAFM,CAEC,CAAA0C,GAAG,KAAI,CAAC,0BAAA8B,mBAAmB,MAAnB,CAAAA,mBAAmB,EAAU9B,GAAV,CAF5B,CAHK,EAAhB;;IAOA6B,IAAI,CAACnI,OAAL,CAAa,CAAAsG,GAAG,KAAI;MAClB,MAAMwC,UAAU,GAAGR,WAAW,CAAChC,GAAG,CAAC+B,IAAL,CAA9B;MACA,IAAI,CAACS,UAAL,EAAiB;QACf;QACAL,YAAY,CAACM,IAAb,CAAkB;UAChB5D,EAAE,EAAEhJ,OAAO,CAAC6M,QAAR,EADY;UAEhB5H,WAAW,EAAEkF,GAAG,CAAC+B,IAFD;UAGhB/G,IAAI,EAAEgF,GAAG,CAAChF,IAHM;UAIhBC,OAAO,EAAE,IAJO;UAKhBG,UAAU,EAAE,IALI;UAMhBF,OAAO,EAAE8E,GAAG,CAAC9E,OANG,EAAlB;;QAQAkH,OAAO,CAACC,KAAR,CAAcI,IAAd,CAAmBzC,GAAG,CAAC+B,IAAvB;MACD,CAXD,MAWO;MACLS,UAAU,CAACxH,IAAX,KAAoBgF,GAAG,CAAChF,IAAxB;MACC,CAACwH,UAAU,CAACtH,OAAZ,IAAuB8E,GAAG,CAAC9E,OAFvB;MAGL;QACA;QACAiH,YAAY,CAACM,IAAb,CAAkB;UAChB,GAAGD,UADa;UAEhBxH,IAAI,EAAEgF,GAAG,CAAChF,IAFM;UAGhBE,OAAO,EAAEsH,UAAU,CAACtH,OAAX,IAAsB8E,GAAG,CAAC9E,OAHnB,EAAlB;;QAKAkH,OAAO,CAACE,QAAR,CAAiBG,IAAjB,CAAsBzC,GAAG,CAAC+B,IAA1B;MACD,CAXM,MAWA;QACL;QACAI,YAAY,CAACM,IAAb,CAAkBD,UAAlB;MACD;IACF,CA5BD;IA6BA;IACEJ,OAAO,CAACC,KAAR,CAActI,MAAd;IACAqI,OAAO,CAACE,QAAR,CAAiBvI,MADjB;IAEAqI,OAAO,CAACG,OAAR,CAAgBxI,MAHlB;IAIE;MACA,KAAK+G,UAAL,CAAgB,EAAEf,eAAe,EAAEoC,YAAnB,EAAhB;IACD;IACD,OAAOC,OAAP;EACD;;EAEDvB,YAAY,GAAG;IACb,MAAM,EAAExG,UAAF,KAAiB,KAAKsE,KAA5B;IACA,MAAMgE,MAAM,GAAG;MACb9C,eAAe,EAAExF,UAAU,CAACW,IAAX,IAAmBX,UAAU,CAACwF,eADlC;MAEb+C,aAAa;MACXvI,UAAU,CAACwI,QAAX,CAAoBD,aAApB,IAAqCvI,UAAU,CAACwI,QAAX,CAAoBd,IAH9C;MAIbe,WAAW,EAAEzI,UAAU,CAAC0I,MAJX;MAKbC,UAAU,EAAE3I,UAAU,CAAC2I,UAAX;MACRC,kBAAkB,CAAC5I,UAAU,CAAC2I,UAAZ,CADV;MAER3I,UAAU,CAAC2I,UAPF,EAAf;;IASAE,MAAM,CAACC,OAAP,CAAeR,MAAf,EAAuBjJ,OAAvB,CAA+B,YAAkB,KAAjB,CAACF,GAAD,EAAMH,KAAN,CAAiB;MAC/C;MACA,IAAIA,KAAK,KAAKmI,SAAd,EAAyB;QACvBmB,MAAM,CAACnJ,GAAD,CAAN,GAAc,IAAd;MACD;IACF,CALD;IAMA,MAAMiE,QAAQ,GAAI,4CAA2CpI,KAAK,CAACgI,MAAN;IAC3DsF,MAD2D;IAE3D,EAFF;IAGA,KAAKvB,QAAL,CAAc,EAAEjB,eAAe,EAAE,IAAnB,EAAd;;IAEAnK,cAAc,CAACwH,GAAf,CAAmB,EAAEC,QAAF,EAAnB;IACGC,IADH,CACQ,YAAc,KAAb,EAAEG,IAAF,EAAa;MAClB,MAAMuE,OAAO,GAAG,KAAKR,aAAL,CAAmB/D,IAAnB,CAAhB;MACA,IAAIuE,OAAO,CAACE,QAAR,CAAiBvI,MAArB,EAA6B;QAC3B,KAAK2E,KAAL,CAAW9B,eAAX;QACE3G,CAAC,CAAC,sBAAD,EAAyBmM,OAAO,CAACE,QAAR,CAAiBc,IAAjB,CAAsB,IAAtB,CAAzB,CADH;;MAGD;MACD,IAAIhB,OAAO,CAACG,OAAR,CAAgBxI,MAApB,EAA4B;QAC1B,KAAK2E,KAAL,CAAW9B,eAAX;QACE3G,CAAC,CAAC,qBAAD,EAAwBmM,OAAO,CAACG,OAAR,CAAgBa,IAAhB,CAAqB,IAArB,CAAxB,CADH;;MAGD;MACD,IAAIhB,OAAO,CAACC,KAAR,CAActI,MAAlB,EAA0B;QACxB,KAAK2E,KAAL,CAAW9B,eAAX;QACE3G,CAAC,CAAC,uBAAD,EAA0BmM,OAAO,CAACC,KAAR,CAAce,IAAd,CAAmB,IAAnB,CAA1B,CADH;;MAGD;MACD,KAAK1E,KAAL,CAAW9B,eAAX,CAA2B3G,CAAC,CAAC,0BAAD,CAA5B;MACA,KAAKmL,QAAL,CAAc,EAAEjB,eAAe,EAAE,KAAnB,EAAd;IACD,CApBH;IAqBGkD,KArBH,CAqBS,CAAA1F,QAAQ;IACb1G,oBAAoB,CAAC0G,QAAD,CAApB,CAA+BD,IAA/B,CAAoC,YAA2B,KAA1B,EAAE4F,KAAF,EAASC,UAAT,EAA0B;MAC7D,KAAK7E,KAAL,CAAW7B,cAAX;MACEyG,KAAK,IAAIC,UAAT,IAAuBtN,CAAC,CAAC,uBAAD,CAD1B;;MAGA,KAAKmL,QAAL,CAAc,EAAEjB,eAAe,EAAE,KAAnB,EAAd;IACD,CALD,CAtBJ;;EA6BD;;EAEDqD,cAAc,CAACC,GAAD,EAAMC,QAAN,EAAgB;IAC5B,MAAMC,IAAI,GAAG,EAAb;IACA,MAAMC,IAAI,GAAG,EAAb;IACAH,GAAG,CAAC/J,OAAJ,CAAY,CAAAgI,GAAG,KAAI;MACjB,MAAM3D,IAAI,GAAG2F,QAAQ,CAAChC,GAAD,CAArB;MACA,IAAI3D,IAAI,IAAI4F,IAAZ,EAAkB;QAChBC,IAAI,CAACnB,IAAL,CAAU1E,IAAV;MACD,CAFD,MAEO;QACL4F,IAAI,CAAC5F,IAAD,CAAJ,GAAa,IAAb;MACD;IACF,CAPD;IAQA,OAAO6F,IAAP;EACD;;EAEDjC,QAAQ,CAACL,QAAD,EAAW;IACjB,IAAI3B,MAAM,GAAG,EAAb;IACA,IAAIiE,IAAJ;IACA,MAAM,EAAEvJ,UAAF,KAAiB,KAAKsE,KAA5B;;IAEA;IACAiF,IAAI,GAAG,KAAKJ,cAAL,CAAoBnJ,UAAU,CAACD,OAA/B,EAAwC,CAAAsH,GAAG,KAAIA,GAAG,CAAC5G,WAAnD,CAAP;IACA6E,MAAM,GAAGA,MAAM,CAACkE,MAAP;IACPD,IAAI,CAAC1F,GAAL,CAAS,CAAA6D,IAAI,KAAI9L,CAAC,CAAC,gCAAD,EAAmC8L,IAAnC,CAAlB,CADO,CAAT;;;IAIA;IACA6B,IAAI,GAAG,KAAKJ,cAAL,CAAoBnJ,UAAU,CAAC2E,OAA/B,EAAwC,CAAA0C,GAAG,KAAIA,GAAG,CAACoC,WAAnD,CAAP;IACAnE,MAAM,GAAGA,MAAM,CAACkE,MAAP;IACPD,IAAI,CAAC1F,GAAL,CAAS,CAAA6D,IAAI,KAAI9L,CAAC,CAAC,gCAAD,EAAmC8L,IAAnC,CAAlB,CADO,CAAT;;;IAIA;IACA,MAAMgC,gBAAgB,GAAG,KAAKpF,KAAL,CAAWuB,iBAAX,CAA6B5C,MAA7B;IACvB,CAAA0C,GAAG,KAAI,CAACA,GAAG,CAACC,UAAL,IAAmB,CAACD,GAAG,CAACnC,IADR,CAAzB;;IAGA8B,MAAM,GAAGA,MAAM,CAACkE,MAAP;IACPE,gBAAgB,CAAC7F,GAAjB,CAAqB,CAAA8B,GAAG;IACtB/J,CAAC,CAAC,+CAAD,EAAkD+J,GAAG,CAAClF,WAAtD,CADH,CADO,CAAT;;;;IAMA,KAAKsG,QAAL,CAAc,EAAEzB,MAAF,EAAd,EAA0B2B,QAA1B;EACD;;EAEDN,eAAe,CAACZ,YAAD,EAAe;IAC5B,KAAKgB,QAAL,CAAc,EAAEhB,YAAF,EAAd;EACD;;EAED4D,WAAW,CAAChF,OAAD,EAAU;IACnB,OAAOA,OAAO,CAACiF,IAAR,CAAa,yBAAC,EAAEpF,EAAE,EAAEqF,CAAN,EAAD,cAAY,EAAErF,EAAE,EAAEsF,CAAN,EAAZ,iBAA0BA,CAAC,GAAGD,CAA9B,EAAb,CAAP;EACD;;EAEDE,sBAAsB,GAAG;IACvB,MAAM,EAAE/J,UAAF,KAAiB,KAAKsE,KAA5B;IACA;MACE,cAAC,QAAD;QACE,KAAK,EAAE1I,CAAC,CAAC,OAAD,CADV;QAEE,IAAI,EAAEoE,UAFR;QAGE,QAAQ,EAAE,KAAKE,kBAHjB;;MAKE,cAAC,KAAD;QACE,QAAQ,EAAC,aADX;QAEE,KAAK,EAAEtE,CAAC,CAAC,aAAD,CAFV;QAGE,OAAO;QACL,cAAC,eAAD;UACE,QAAQ,EAAC,UADX;UAEE,gBAAgB,EAAE,KAFpB;UAGE,MAAM,EAAC,UAHT,GAJJ,GALF;;;;MAgBE,cAAC,KAAD;QACE,QAAQ,EAAC,kBADX;QAEE,KAAK,EAAEA,CAAC,CAAC,aAAD,CAFV;QAGE,WAAW,EAAEA,CAAC;QACZ,sEADY,CAHhB;;QAME,OAAO,EAAE,cAAC,WAAD,IAAa,SAAS,EAAC,kBAAvB,GANX,GAhBF;;MAwBE,cAAC,KAAD;QACE,MAAM,MADR;QAEE,QAAQ,EAAC,uBAFX;QAGE,KAAK,EAAEA,CAAC,CAAC,sBAAD,CAHV;QAIE,WAAW,EAAEA,CAAC,CAAC,kDAAD,CAJhB;QAKE,OAAO,EAAE,cAAC,eAAD,OALX,GAxBF;;MA+BG,KAAK0I,KAAL,CAAWiB,MAAX;MACC,cAAC,KAAD;QACE,QAAQ,EAAC,wBADX;QAEE,KAAK,EAAE3J,CAAC,CAAC,8BAAD,CAFV;QAGE,WAAW,EAAEA,CAAC;QACZ;QACE,+DADF;QAEE,+DAFF;QAGE,yEAHF;QAIE,oFALU,CAHhB;;QAUE,OAAO;QACL,cAAC,eAAD;UACE,QAAQ,EAAC,KADX;UAEE,SAAS,EAAC,wBAFZ;UAGE,QAAQ,EAAE,CAHZ;UAIE,MAAM,EAAC,UAJT,GAXJ,GAhCJ;;;;;MAoDG,KAAK0I,KAAL,CAAWiB,MAAX;MACC,cAAC,KAAD;QACE,QAAQ,EAAC,OADX;QAEE,KAAK,EAAE3J,CAAC,CAAC,OAAD,CAFV;QAGE,WAAW,EAAEA,CAAC;QACZ;QACE,gEADF;QAEE,wEAFF;QAGE,iDAJU,CAHhB;;QASE,OAAO;QACL,cAAC,eAAD;UACE,SAAS,EAAC,OADZ;UAEE,QAAQ,EAAC,MAFX;UAGE,gBAAgB,EAAE,KAHpB;UAIE,MAAM,EAAC,UAJT,GAVJ,GArDJ;;;;;MAwEE,cAAC,cAAD;QACE,UAAU,EAAEoE,UADd;QAEE,QAAQ,EAAE,CAAAgK,SAAS,KAAI;UACrB,KAAK9J,kBAAL,CAAwB,EAAE,GAAGF,UAAL,EAAiBiE,MAAM,EAAE+F,SAAzB,EAAxB;QACD,CAJH,GAxEF,CADF;;;;EAiFD;;EAEDC,sBAAsB,GAAG;IACvB,MAAM,EAAEjK,UAAF,KAAiB,KAAKsE,KAA5B;IACA;MACE,cAAC,QAAD;QACE,KAAK,EAAE1I,CAAC,CAAC,UAAD,CADV;QAEE,IAAI,EAAEoE,UAFR;QAGE,QAAQ,EAAE,KAAKE,kBAHjB;;MAKE,cAAC,KAAD;QACE,QAAQ,EAAC,eADX;QAEE,KAAK,EAAEtE,CAAC,CAAC,eAAD,CAFV;QAGE,WAAW,EAAEA,CAAC;QACZ,iGADY,CAHhB;;QAME,OAAO,EAAE,cAAC,WAAD,IAAa,SAAS,EAAC,eAAvB,GANX,GALF;;MAaE,cAAC,KAAD;QACE,QAAQ,EAAC,QADX;QAEE,KAAK,EAAEA,CAAC,CAAC,cAAD,CAFV;QAGE,OAAO,EAAE,cAAC,WAAD,IAAa,SAAS,EAAC,QAAvB,GAHX;QAIE,WAAW,EAAEA,CAAC;QACZ,uHADY,CAJhB,GAbF;;;MAqBG,KAAK0I,KAAL,CAAWiB,MAAX;MACC,cAAC,KAAD;QACE,QAAQ,EAAC,iBADX;QAEE,KAAK,EAAE3J,CAAC,CAAC,qBAAD,CAFV;QAGE,WAAW,EAAEA,CAAC;QACZ,sFADY,CAHhB;;QAME,OAAO,EAAE,cAAC,WAAD,IAAa,SAAS,EAAC,iBAAvB,GANX,GAtBJ,CADF;;;;;EAkCD;;EAEDsO,gBAAgB,GAAG;IACjB,MAAM,EAAElK,UAAF,KAAiB,KAAKsE,KAA5B;IACA,MAAM,EAAE6F,QAAF,EAAYC,QAAQ,EAAEC,OAAtB,KAAkCrK,UAAxC;IACA;MACE,cAAC,IAAD,CAAM,OAAN;QACE,GAAG,EAAE,cAAC,kBAAD,IAAoB,UAAU,EAAEmK,QAAhC,EAA0C,KAAK,EAAEvO,CAAC,CAAC,SAAD,CAAlD,GADP;QAEE,GAAG,EAAE,CAFP;;MAIE,cAAC,eAAD;QACE,YAAY,EAAE,CAAC,MAAD,EAAS,QAAT,CADhB;QAEE,QAAQ,EAAE,KAAK0K,sBAAL,CAA4BF,IAA5B,CAAiC,IAAjC,EAAuC,UAAvC,CAFZ;QAGE,aAAa,EAAE,OAAO;UACpBsB,IAAI,EAAE9L,CAAC,CAAC,eAAD,CADa;UAEpB+E,IAAI,EAAE/E,CAAC,CAAC,WAAD,CAFa;UAGpB0O,MAAM,EAAE,IAHY,EAAP,CAHjB;;QAQE,UAAU,EAAEH,QARd;QASE,YAAY,MATd;QAUE,aAAa,EAAE;UACbzC,IAAI,EAAE,CAAC7I,CAAD,EAAIC,QAAJ;UACJ,cAAC,aAAD,IAAe,OAAO,MAAtB,EAAuB,KAAK,EAAED,CAA9B,EAAiC,WAAW,EAAEC,QAA9C,GAFW;;UAIbwL,MAAM,EAAE,CAACtJ,CAAD,EAAIlC,QAAJ;UACN,cAAC,cAAD,IAAgB,KAAK,EAAEkC,CAAvB,EAA0B,QAAQ,EAAElC,QAApC,EAA8C,OAAO,EAAEuL,OAAvD,GALW,EAVjB,GAJF,CADF;;;;;;EA0BD;;EAEDE,oBAAoB,CAAC9M,KAAD,EAAQ;IAC1B,MAAM,EAAEuC,UAAF,KAAiB,KAAKsE,KAA5B;IACA;MACE;MACG,KAAKsC,eAAL;MACC,cAAC,iBAAD;MACE,wBAAM,IAAI,EAAC,QAAX,EAAoB,QAAQ,EAAE,CAA9B,EAAiC,OAAO,EAAE,KAAKP,gBAA/C;MACG,KAAK/B,KAAL,CAAWmB,UAAX;MACC,cAAC,KAAD,CAAO,YAAP,IAAoB,SAAS,EAAEhI,KAAK,CAACC,MAAN,CAAa8M,SAAb,CAAuB5M,IAAtD,GADD;;MAGC,cAAC,KAAD,CAAO,UAAP,IAAkB,SAAS,EAAEH,KAAK,CAACC,MAAN,CAAa8M,SAAb,CAAuB5M,IAApD,GAJJ,CADF;;;MAQG,CAAC,KAAK0G,KAAL,CAAWmB,UAAZ;MACC,2BAAM7J,CAAC,CAAC,iCAAD,CAAP,CATJ;;MAWG,KAAK0I,KAAL,CAAWmB,UAAX;MACC,2BAAM7J,CAAC,CAAC,4CAAD,CAAP,CAZJ,CAFJ;;;;MAkBE,uBAAK,SAAS,EAAC,sBAAf;MACGsD,oBAAoB,CAAC2E,GAArB,CAAyB,CAAAlD,IAAI;MAC5B,cAAC,KAAD;QACE,GAAG,EAAEA,IAAI,CAACxB,GADZ;QAEE,KAAK,EAAEwB,IAAI,CAACxB,GAFd;QAGE,MAAM,MAHR;QAIE,QAAQ,EAAE,KAAKiI,sBAAL,CAA4BhB,IAA5B,CAAiC,IAAjC,EAAuCzF,IAAI,CAACxB,GAA5C,CAJZ;QAKE,OAAO,EAAE,KAAKmF,KAAL,CAAW0B,cAAX,KAA8BrF,IAAI,CAACxB,GAL9C;QAME,QAAQ,EAAE,CAAC,KAAKmF,KAAL,CAAWmB,UANxB;;MAQG9E,IAAI,CAAC1B,KARR,CADD,CADH,CAlBF;;;;MAgCE,yBAhCF;MAiCE,cAAC,QAAD,IAAU,IAAI,EAAEe,UAAhB,EAA4B,QAAQ,EAAE,KAAKE,kBAA3C,EAA+D,OAAO,MAAtE;MACG,KAAKoE,KAAL,CAAW0B,cAAX,KAA8B5G,gBAAgB,CAAC8G,OAAjB,CAAyB/G,GAAvD;MACC;MACG,KAAKmF,KAAL,CAAWiB,MAAX;MACC;MACE,cAAC,GAAD,IAAK,EAAE,EAAE,EAAT,EAAa,EAAE,EAAE,EAAjB;MACE,cAAC,KAAD;QACE,QAAQ,EAAC,kBADX;QAEE,KAAK,EAAE3J,CAAC,CAAC,SAAD,CAFV;QAGE,OAAO;QACL,uBAAK,GAAG,QAAR;QACE,cAAC,gBAAD;UACE,EAAE,EAAEoE,UAAF,oBAAEA,UAAU,CAAEwI,QADlB;UAEE,MAAM,EAAExI,UAAU,CAAC0I,MAFrB;UAGE,cAAc,EAAE,CAAAA,MAAM;UACpB,KAAKpE,KAAL,CAAWmB,UAAX;UACA,KAAKa,sBAAL,CAA4B,QAA5B,EAAsCoC,MAAtC,CALJ;;UAOE,UAAU,EAAE,CAAAF,QAAQ;UAClB,KAAKlE,KAAL,CAAWmB,UAAX;UACA,KAAKa,sBAAL,CAA4B,UAA5B,EAAwCkC,QAAxC,CATJ;;UAWE,QAAQ,EAAE,KAXZ;UAYE,WAAW,EAAE,KAAKnE,KAAL,CAAW7B,cAZ1B;UAaE,QAAQ,EAAE,CAAC,KAAK8B,KAAL,CAAWmB,UAbxB,GADF,CAJJ,GADF;;;;;MAwBE,uBAAK,GAAG,oBAAE,EAAEgF,KAAK,EAAE,mBAAT,EAA8BC,SAAS,EAAE,CAAC,EAA1C,EAAF,88gEAAR;MACE,cAAC,KAAD;QACE,QAAQ,EAAC,YADX;QAEE,KAAK,EAAE9O,CAAC,CAAC,cAAD,CAFV;QAGE,OAAO;QACL,cAAC,WAAD;UACE,SAAS,EAAC,YADZ;UAEE,QAAQ,EAAE,CAAA+O,KAAK,KAAI;YACjB,KAAKrE,sBAAL,CAA4B,YAA5B,EAA0CqE,KAA1C;UACD,CAJH;UAKE,WAAW,EAAE/O,CAAC,CAAC,cAAD,CALhB;UAME,QAAQ,EAAE,CAAC,KAAK0I,KAAL,CAAWmB,UANxB,GAJJ,GADF,CAxBF,CADF;;;;;;MA0CE,cAAC,KAAD;QACE,QAAQ,EAAC,KADX;QAEE,KAAK,EAAE7J,CAAC,CAAC,KAAD,CAFV;QAGE,WAAW,EAAEA,CAAC;QACZ;QACE,8EADF;QAEE,kCAHU,CAHhB;;QAQE,OAAO;QACL,cAAC,eAAD;UACE,QAAQ,EAAC,KADX;UAEE,gBAAgB,EAAE,KAFpB;UAGE,QAAQ,EAAE,EAHZ;UAIE,QAAQ,EAAE,EAJZ;UAKE,QAAQ,EAAE,CAAC,KAAK0I,KAAL,CAAWmB,UALxB;UAME,MAAM,EAAC,MANT,GATJ,GA1CF,CAFJ,CAFJ;;;;;;;;MAqEG,KAAKnB,KAAL,CAAW0B,cAAX,KAA8B5G,gBAAgB,CAAC+G,QAAjB,CAA0BhH,GAAxD;MACC,cAAC,GAAD,IAAK,EAAE,EAAE,EAAT,EAAa,EAAE,EAAE,EAAjB;MACG,KAAKmF,KAAL,CAAWiB,MAAX;MACC,cAAC,KAAD;QACE,QAAQ,EAAC,eADX;QAEE,KAAK,EAAE3J,CAAC,CAAC,UAAD,CAFV;QAGE,OAAO;QACL,uBAAK,GAAG,QAAR;QACE,cAAC,aAAD;UACE,SAAS,EAAE,KADb;UAEE,QAAQ,EAAE;YACR,GAAGoE,UAAU,CAACwI,QADN;YAERD,aAAa;YACX,yBAAAvI,UAAU,CAACwI,QAAX,0CAAqBD,aAArB;YACAvI,UAAU,CAACwI,QADX,qBACA,sBAAqBd,IADrB,CAHM,EAFZ;;UAQE,IAAI,2BAAE1H,UAAU,CAACwI,QAAb,qBAAE,sBAAqBhE,EAR7B;UASE,WAAW,EAAE,KAAKH,KAAL,CAAW7B,cAT1B;UAUE,MAAM,EAAExC,UAAU,CAAC0I,MAVrB;UAWE,UAAU,EAAE,KAXd;UAYE,UAAU,EAAE1I,UAAU,CAAC2I,UAZzB;UAaE,cAAc;UACZ,KAAKrE,KAAL,CAAWmB,UAAX;UACI,CAAAiD,MAAM;UACJ,KAAKpC,sBAAL,CAA4B,QAA5B,EAAsCoC,MAAtC,CAFN;UAGIvB,SAjBR;;UAmBE,UAAU;UACR,KAAK7C,KAAL,CAAWmB,UAAX;UACI,CAAA+C,QAAQ;UACN,KAAKlC,sBAAL;UACE,UADF;UAEEkC,QAFF,CAFN;;UAMIrB,SA1BR;;UA4BE,mBAAmB;UACjB,KAAK7C,KAAL,CAAWmB,UAAX;UACI,CAAAkF,KAAK;UACH,KAAKrE,sBAAL,CAA4B,YAA5B,EAA0CqE,KAA1C,CAFN;UAGIxD,SAhCR;;UAkCE,QAAQ,EAAE,CAAC,KAAK7C,KAAL,CAAWmB,UAlCxB,GADF,CAJJ;;;;QA2CE,WAAW,EAAE7J,CAAC;QACZ;QACE,2EADF;QAEE,qCAHU,CA3ChB,GAFJ,CAtEJ,CAjCF,CADF;;;;;;;;;EAiKD;;EAEDgP,YAAY,GAAG;IACb,IAAI,KAAKtG,KAAL,CAAWgB,MAAX,CAAkB5F,MAAlB,GAA2B,CAA/B,EAAkC;MAChC;QACE,cAAC,KAAD;UACE,GAAG,EAAE,CAAAjC,KAAK,MAAK,EAAEoN,YAAY,EAAEpN,KAAK,CAACQ,QAAN,GAAiB,CAAjC,EAAL,CADZ;UAEE,IAAI,EAAC,OAFP;UAGE,OAAO;UACL;UACG,KAAKqG,KAAL,CAAWgB,MAAX,CAAkBzB,GAAlB,CAAsB,CAAAiH,GAAG;UACxB,uBAAK,GAAG,EAAEA,GAAV,IAAgBA,GAAhB,CADD,CADH,CAJJ,GADF;;;;;;IAaD;IACD,OAAO,IAAP;EACD;;EAEDC,sBAAsB,GAAG;IACvB,MAAM,EAAE/K,UAAF,KAAiB,KAAKsE,KAA5B;IACA,MAAM,EAAEK,OAAF,KAAc3E,UAApB;IACA,MAAMgL,aAAa,GAAGrG,OAAO,QAAP,IAAAA,OAAO,CAAEjF,MAAT,GAAkB,KAAKiK,WAAL,CAAiBhF,OAAjB,CAAlB,GAA8C,EAApE;IACA;MACE,cAAC,eAAD;QACE,YAAY,EAAE,CAAC,aAAD,EAAgB,cAAhB,EAAgC,YAAhC,CADhB;QAEE,WAAW,EAAE,CAAC,aAAD,EAAgB,cAAhB,EAAgC,YAAhC,CAFf;QAGE,YAAY,EAAE;UACZ8E,WAAW,EAAE7N,CAAC,CAAC,QAAD,CADF;UAEZqP,YAAY,EAAErP,CAAC,CAAC,OAAD,CAFH;UAGZgK,UAAU,EAAEhK,CAAC,CAAC,gBAAD,CAHD,EAHhB;;QAQE,cAAc;QACZ,cAAC,aAAD;QACE,cAAC,QAAD,IAAU,OAAO,MAAjB;QACE,cAAC,KAAD;UACE,QAAQ,EAAC,aADX;UAEE,KAAK,EAAEA,CAAC,CAAC,aAAD,CAFV;UAGE,OAAO;UACL,cAAC,WAAD;YACE,SAAS,EAAC,aADZ;YAEE,WAAW,EAAEA,CAAC,CAAC,aAAD,CAFhB,GAJJ,GADF;;;;QAWE,cAAC,KAAD;UACE,QAAQ,EAAC,UADX;UAEE,KAAK,EAAEA,CAAC,CAAC,WAAD,CAFV;UAGE,OAAO;UACL,cAAC,WAAD,IAAa,SAAS,EAAC,UAAvB,EAAkC,WAAW,EAAC,UAA9C,GAJJ,GAXF;;;QAkBE,cAAC,KAAD;UACE,KAAK,EAAEA,CAAC,CAAC,cAAD,CADV;UAEE,QAAQ,EAAC,cAFX;UAGE,WAAW,EAAEA,CAAC;UACZ,gDADY,CAHhB;;UAME,OAAO;UACL,cAAC,WAAD;YACE,SAAS,EAAC,cADZ;YAEE,WAAW,EAAEA,CAAC,CAAC,cAAD,CAFhB,GAPJ,GAlBF;;;;QA+BE,cAAC,KAAD;UACE,KAAK,EAAEA,CAAC,CAAC,uBAAD,CADV;UAEE,QAAQ,EAAC,uBAFX;UAGE,WAAW,EAAEA,CAAC,CAAC,8BAAD,CAHhB;UAIE,OAAO;UACL,cAAC,WAAD;YACE,SAAS,EAAC,uBADZ;YAEE,WAAW,EAAEA,CAAC,CAAC,uBAAD,CAFhB,GALJ,GA/BF;;;;QA0CE,cAAC,KAAD;UACE,KAAK,EAAEA,CAAC,CAAC,SAAD,CADV;UAEE,QAAQ,EAAC,kBAFX;UAGE,WAAW,EAAEA,CAAC,CAAC,2CAAD,CAHhB;UAIE,OAAO;UACL,cAAC,eAAD;YACE,SAAS,EAAC,kBADZ;YAEE,QAAQ,EAAC,UAFX;YAGE,gBAAgB,EAAE,KAHpB;YAIE,MAAM,EAAC,UAJT,GALJ,GA1CF,CADF,CATJ;;;;;;;QAoEE,UAAU,EAAEoP,aApEd;QAqEE,YAAY,MArEd;QAsEE,QAAQ,EAAE,KAAK1E,sBAAL,CAA4BF,IAA5B,CAAiC,IAAjC,EAAuC,SAAvC,CAtEZ;QAuEE,aAAa,EAAE,OAAO;UACpBqD,WAAW,EAAE7N,CAAC,CAAC,cAAD,CADM;UAEpBqP,YAAY,EAAE,EAFM;UAGpBrF,UAAU,EAAE,EAHQ,EAAP,CAvEjB;;QA4EE,aAAa,EAAE;UACbA,UAAU,EAAE,OAAO;YACjB6E,KAAK,EAAE,OADU,EAAP,CADC,EA5EjB;;;QAiFE,aAAa,EAAE;UACbhB,WAAW,EAAE,CAACzI,CAAD,EAAIlC,QAAJ,EAAcoC,CAAd,EAAiBC,MAAjB;UACX,cAAC,gBAAD;UACGA,MAAM,CAACC,YAAP;UACC,cAAC,cAAD;YACE,WAAW,EAAED,MAAM,CAACE,YADtB;YAEE,OAAO,EAAEF,MAAM,CAACG,qBAFlB,GAFJ;;;UAOGH,MAAM,CAAC+D,gBAAP;UACC,cAAC,sBAAD;YACE,eAAe,EAAE/D,MAAM,CAAC+D,gBAD1B,GARJ;;;UAYE,cAAC,aAAD,IAAe,OAAO,MAAtB,EAAuB,KAAK,EAAElE,CAA9B,EAAiC,WAAW,EAAElC,QAA9C,GAZF,CAFW;;;UAiBbmM,YAAY,EAAE,CAACjK,CAAD,EAAIlC,QAAJ;UACZ,cAAC,WAAD,IAAa,OAAO,MAApB,EAAqB,KAAK,EAAEkC,CAA5B,EAA+B,QAAQ,EAAElC,QAAzC,GAlBW;;UAoBb8G,UAAU,EAAE,CAAC5E,CAAD,EAAIlC,QAAJ;UACV,cAAC,eAAD;YACE,OAAO,MADT;YAEE,YAAY,EAAEkC,CAFhB;YAGE,QAAQ,EAAElC,QAHZ;YAIE,YAAY,EAAE,CAAC,2BAAD,CAJhB;YAKE,QAAQ,EAAC,KALX;YAME,gBAAgB,EAAE,KANpB;YAOE,QAAQ,EAAE,CAPZ;YAQE,cAAc,EAAE,EAAEoM,QAAQ,EAAE,OAAZ,EAAqBC,QAAQ,EAAE,OAA/B,EARlB;YASE,MAAM,EAAC,MATT,GArBW;;;UAiCbC,WAAW,EAAE,CAACpK,CAAD,EAAIlC,QAAJ,EAAcG,KAAd;UACX,cAAC,YAAD;YACE,KAAK,EAAEA,KADT;YAEE,WAAW,EAAE,cAAC,WAAD,IAAa,KAAK,EAAE+B,CAApB,EAAuB,QAAQ,EAAElC,QAAjC,GAFf,GAlCW;;;UAuCbuM,QAAQ,EAAE,CAACrK,CAAD,EAAIlC,QAAJ,EAAcG,KAAd;UACR,cAAC,YAAD;YACE,KAAK,EAAEA,KADT;YAEE,WAAW,EAAE,cAAC,WAAD,IAAa,KAAK,EAAE+B,CAApB,EAAuB,QAAQ,EAAElC,QAAjC,GAFf,GAxCW,EAjFjB;;;;QA+HE,YAAY,MA/Hd;QAgIE,YAAY,MAhId,GADF;;;EAoID;;EAEDwM,MAAM,GAAG;IACP,MAAM,EAAEtL,UAAF,EAAc+F,YAAd,KAA+B,KAAKzB,KAA1C;IACA,MAAM,EAAEK,OAAF,KAAc3E,UAApB;IACA,MAAMgL,aAAa,GAAGrG,OAAO,QAAP,IAAAA,OAAO,CAAEjF,MAAT,GAAkB,KAAKiK,WAAL,CAAiBhF,OAAjB,CAAlB,GAA8C,EAApE;IACA,MAAM,EAAElH,KAAF,KAAY,KAAK4G,KAAvB;;IAEA;MACE,cAAC,mBAAD;MACG,KAAKuG,YAAL,EADH;MAEE,cAAC,KAAD;QACE,GAAG,EAAE,CAAAnN,KAAK,MAAK,EAAEoN,YAAY,EAAEpN,KAAK,CAACQ,QAAN,GAAiB,CAAjC,EAAL,CADZ;QAEE,IAAI,EAAC,SAFP;QAGE,OAAO;QACL;QACG,GADH;QAEE,8BAASrC,CAAC,CAAC,aAAD,CAAV,MAFF;QAGGA,CAAC;QACA,4GADA,CAHJ,CAJJ,GAFF;;;;;MAeE,cAAC,eAAD;QACE,SAAS,EAAE,KADb;QAEE,EAAE,EAAC,YAFL;QAGE,aAAU,mBAHZ;QAIE,QAAQ,EAAE,KAAK+K,eAJjB;QAKE,gBAAgB,EAAEZ,YALpB;;MAOE,cAAC,IAAD,CAAM,OAAN,IAAc,GAAG,EAAE,CAAnB,EAAsB,GAAG,EAAEnK,CAAC,CAAC,QAAD,CAA5B;MACG,KAAK2O,oBAAL,CAA0B9M,KAA1B,CADH,CAPF;;MAUE,cAAC,IAAD,CAAM,OAAN;QACE,GAAG;QACD,cAAC,kBAAD;UACE,UAAU,EAAEuN,aADd;UAEE,KAAK,EAAEpP,CAAC,CAAC,SAAD,CAFV,GAFJ;;;QAOE,GAAG,EAAE,CAPP;;MASG,KAAKmP,sBAAL,EATH,CAVF;;MAqBE,cAAC,IAAD,CAAM,OAAN;QACE,GAAG;QACD,cAAC,kBAAD;UACE,UAAU,EAAE,KAAKzG,KAAL,CAAWoB,eADzB;UAEE,KAAK,EAAE9J,CAAC,CAAC,SAAD,CAFV,GAFJ;;;QAOE,GAAG,EAAE,CAPP;;MASE,cAAC,uBAAD;MACE,cAAC,mBAAD;MACE,cAAC,mBAAD;MACE,cAAC,MAAD;QACE,UAAU,EAAC,OADb;QAEE,WAAW,EAAC,UAFd;QAGE,OAAO,EAAE,KAAK4K,YAHhB;QAIE,SAAS,EAAC,kBAJZ;QAKE,QAAQ,EAAE,KAAKlC,KAAL,CAAWmB,UALvB;;MAOE,qBAAG,SAAS,EAAC,gBAAb,GAPF,EAOmC,GAPnC;MAQG7J,CAAC,CAAC,0BAAD,CARJ,CADF,CADF,CADF;;;;MAeE,cAAC,qBAAD;QACE,SAAS,EAAC,eADZ;QAEE,OAAO,EAAE,KAAK0I,KAAL,CAAWoB,eAFtB;QAGE,UAAU,EAAE1F,UAHd;QAIE,eAAe,EAAE,CAAA0F,eAAe;QAC9B,KAAKe,UAAL,CAAgB,EAAEf,eAAF,EAAhB,CALJ;;QAOE,kBAAkB,EAAE,KAAKxF,kBAP3B,GAfF;;MAwBG,KAAKoE,KAAL,CAAWwB,eAAX,IAA8B,cAAC,OAAD,OAxBjC,CATF,CArBF;;;MAyDE,cAAC,IAAD,CAAM,OAAN;QACE,GAAG;QACD,cAAC,kBAAD;UACE,UAAU,EAAE,KAAKxB,KAAL,CAAWuB,iBADzB;UAEE,KAAK,EAAEjK,CAAC,CAAC,oBAAD,CAFV,GAFJ;;;QAOE,GAAG,EAAE,CAPP;;MASE,cAAC,uBAAD;MACE,cAAC,qBAAD;QACE,OAAO,EAAE,KAAK0I,KAAL,CAAWuB,iBADtB;QAEE,eAAe,EAAE,CAAAA,iBAAiB;QAChC,KAAKY,UAAL,CAAgB,EAAEZ,iBAAF,EAAhB,CAHJ;;QAKE,kBAAkB,EAAE,KAAK3F,kBAL3B;QAME,UAAU,EAAEF,UANd;QAOE,kBAAkB,MAPpB;QAQE,cAAc,MARhB;QASE,YAAY,MATd;QAUE,iBAAiB,MAVnB;QAWE,aAAa,EAAE,OAAO;UACpBS,WAAW,EAAE7E,CAAC,CAAC,cAAD,CADM;UAEpBmF,UAAU,EAAE,IAFQ;UAGpBH,OAAO,EAAE,IAHW;UAIpBgF,UAAU,EAAEhK,CAAC,CAAC,6BAAD,CAJO;UAKpB2P,UAAU,EAAE,IALQ,EAAP,CAXjB,GADF,CATF,CAzDF;;;;;MAwFE,cAAC,IAAD,CAAM,OAAN,IAAc,GAAG,EAAE,CAAnB,EAAsB,GAAG,EAAE3P,CAAC,CAAC,UAAD,CAA5B;MACE,cAAC,GAAD,IAAK,MAAM,EAAE,EAAb;MACE,cAAC,GAAD,IAAK,EAAE,EAAE,EAAT,EAAa,EAAE,EAAE,EAAjB;MACE,cAAC,aAAD,QAAgB,KAAKmO,sBAAL,EAAhB,CADF,CADF;;MAIE,cAAC,GAAD,IAAK,EAAE,EAAE,EAAT,EAAa,EAAE,EAAE,EAAjB;MACE,cAAC,aAAD,QAAgB,KAAKE,sBAAL,EAAhB,CADF,CAJF,CADF,CAxFF,CAfF,CADF;;;;;;;EAqHD,CA52BgD;EAAA;IAAA;AA+2BnD/F,gBAAgB,CAACjC,YAAjB,GAAgCA,YAAhC;AACAiC,gBAAgB,CAACvE,SAAjB,GAA6BA,SAA7B;;AAEA,MAAM6L,mBAAmB,GAAG3P,SAAS,CAACqI,gBAAD,CAArC,C;;AAEejH,UAAU,CAACuO,mBAAD,C,CAAzB,wB,iLAx3CMjO,mB,oKAmBAS,gB,iKASAE,e,gKAOAC,W,4JAQAC,iB,kKASAG,mB,oKAKAC,kB,mKAQAC,uB,wKAUAC,mB,oKAOAE,iB,kKAGAG,U,2JAOAG,oB,qKAIAE,gB,iKAKGG,kB,mKAiBAO,qB,sKA2UAoC,Y,6JAgBAG,a,8JAQH1C,S,0JAQAsC,Y,6JAKGS,c,+JA8BHwB,gB,iKAk3BAsH,mB"},"metadata":{},"sourceType":"module"}