{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { isFreeFormAdhocFilter, isSimpleAdhocFilter } from '@superset-ui/core';\nimport { OPERATOR_ENUM_TO_OPERATOR_TYPE, Operators } from 'src/explore/constants';\nimport { getSimpleSQLExpression } from 'src/explore/exploreUtils';\nexport const OPERATORS_TO_SQL = {\n  '==': '=',\n  '!=': '<>',\n  '>': '>',\n  '<': '<',\n  '>=': '>=',\n  '<=': '<=',\n  IN: 'IN',\n  'NOT IN': 'NOT IN',\n  LIKE: 'LIKE',\n  ILIKE: 'ILIKE',\n  REGEX: 'REGEX',\n  'IS NOT NULL': 'IS NOT NULL',\n  'IS NULL': 'IS NULL',\n  'IS TRUE': 'IS TRUE',\n  'IS FALSE': 'IS FALSE',\n  'LATEST PARTITION': (_ref) => {let { datasource } = _ref;return `= '{{ presto.latest_partition('${datasource.schema}.${datasource.datasource_name}') }}'`;} };\n\nexport const translateToSql = function (adhocFilter, _temp) {let { useSimple } = _temp === void 0 ? { useSimple: false } : _temp;\n  if (isSimpleAdhocFilter(adhocFilter) || useSimple) {\n    const { subject, operator } = adhocFilter;\n    const comparator = 'comparator' in adhocFilter ? adhocFilter.comparator : undefined;\n    const op = operator &&\n    // 'LATEST PARTITION' supported callback only\n    operator ===\n    OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.LATEST_PARTITION].operation ?\n    OPERATORS_TO_SQL[operator](adhocFilter) :\n    OPERATORS_TO_SQL[operator];\n    return getSimpleSQLExpression(subject, op, comparator);\n  }\n  if (isFreeFormAdhocFilter(adhocFilter)) {\n    return adhocFilter.sqlExpression;\n  }\n  return '';\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,SAEEA,qBAFF,EAGEC,mBAHF,QAKO,mBALP;AAMA,SACEC,8BADF,EAEEC,SAFF,QAGO,uBAHP;AAIA,SAASC,sBAAT,QAAuC,0BAAvC;AAEA,OAAO,MAAMC,gBAAgB,GAAG;EAC9B,MAAM,GADwB;EAE9B,MAAM,IAFwB;EAG9B,KAAK,GAHyB;EAI9B,KAAK,GAJyB;EAK9B,MAAM,IALwB;EAM9B,MAAM,IANwB;EAO9BC,EAAE,EAAE,IAP0B;EAQ9B,UAAU,QARoB;EAS9BC,IAAI,EAAE,MATwB;EAU9BC,KAAK,EAAE,OAVuB;EAW9BC,KAAK,EAAE,OAXuB;EAY9B,eAAe,aAZe;EAa9B,WAAW,SAbmB;EAc9B,WAAW,SAdmB;EAe9B,YAAY,UAfkB;EAgB9B,oBAAoB,eAAC,EACnBC,UADmB,EAAD,eAKlB,kCAAkCA,UAAU,CAACC,MAAM,IAAID,UAAU,CAACE,eAAe,QAL/D,EAhBU,EAAzB;;AAwBP,OAAO,MAAMC,cAAc,GAAG,UAC5BC,WAD4B,SAG1B,KADF,EAAEC,SAAF,EACE,sBADsC,EAAEA,SAAS,EAAE,KAAb,EACtC;EACF,IAAId,mBAAmB,CAACa,WAAD,CAAnB,IAAoCC,SAAxC,EAAmD;IACjD,MAAM,EAAEC,OAAF,EAAWC,QAAX,KAAwBH,WAA9B;IACA,MAAMI,UAAU,GACd,gBAAgBJ,WAAhB,GAA8BA,WAAW,CAACI,UAA1C,GAAuDC,SADzD;IAEA,MAAMC,EAAE,GACNH,QAAQ;IACR;IACAA,QAAQ;IACNf,8BAA8B,CAACC,SAAS,CAACkB,gBAAX,CAA9B,CAA2DC,SAH7D;IAIIjB,gBAAgB,CAACY,QAAD,CAAhB,CAA2BH,WAA3B,CAJJ;IAKIT,gBAAgB,CAACY,QAAD,CANtB;IAOA,OAAOb,sBAAsB,CAACY,OAAD,EAAUI,EAAV,EAAcF,UAAd,CAA7B;EACD;EACD,IAAIlB,qBAAqB,CAACc,WAAD,CAAzB,EAAwC;IACtC,OAAOA,WAAW,CAACS,aAAnB;EACD;EACD,OAAO,EAAP;AACD,CArBM","names":["isFreeFormAdhocFilter","isSimpleAdhocFilter","OPERATOR_ENUM_TO_OPERATOR_TYPE","Operators","getSimpleSQLExpression","OPERATORS_TO_SQL","IN","LIKE","ILIKE","REGEX","datasource","schema","datasource_name","translateToSql","adhocFilter","useSimple","subject","operator","comparator","undefined","op","LATEST_PARTITION","operation","sqlExpression"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/explore/components/controls/FilterControl/utils/translateToSQL.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  AdhocFilter,\n  isFreeFormAdhocFilter,\n  isSimpleAdhocFilter,\n  SimpleAdhocFilter,\n} from '@superset-ui/core';\nimport {\n  OPERATOR_ENUM_TO_OPERATOR_TYPE,\n  Operators,\n} from 'src/explore/constants';\nimport { getSimpleSQLExpression } from 'src/explore/exploreUtils';\n\nexport const OPERATORS_TO_SQL = {\n  '==': '=',\n  '!=': '<>',\n  '>': '>',\n  '<': '<',\n  '>=': '>=',\n  '<=': '<=',\n  IN: 'IN',\n  'NOT IN': 'NOT IN',\n  LIKE: 'LIKE',\n  ILIKE: 'ILIKE',\n  REGEX: 'REGEX',\n  'IS NOT NULL': 'IS NOT NULL',\n  'IS NULL': 'IS NULL',\n  'IS TRUE': 'IS TRUE',\n  'IS FALSE': 'IS FALSE',\n  'LATEST PARTITION': ({\n    datasource,\n  }: {\n    datasource: { schema: string; datasource_name: string };\n  }) =>\n    `= '{{ presto.latest_partition('${datasource.schema}.${datasource.datasource_name}') }}'`,\n};\n\nexport const translateToSql = (\n  adhocFilter: AdhocFilter,\n  { useSimple }: { useSimple: boolean } = { useSimple: false },\n) => {\n  if (isSimpleAdhocFilter(adhocFilter) || useSimple) {\n    const { subject, operator } = adhocFilter as SimpleAdhocFilter;\n    const comparator =\n      'comparator' in adhocFilter ? adhocFilter.comparator : undefined;\n    const op =\n      operator &&\n      // 'LATEST PARTITION' supported callback only\n      operator ===\n        OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.LATEST_PARTITION].operation\n        ? OPERATORS_TO_SQL[operator](adhocFilter)\n        : OPERATORS_TO_SQL[operator];\n    return getSimpleSQLExpression(subject, op, comparator);\n  }\n  if (isFreeFormAdhocFilter(adhocFilter)) {\n    return adhocFilter.sqlExpression;\n  }\n  return '';\n};\n"]},"metadata":{},"sourceType":"module"}