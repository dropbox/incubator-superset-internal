{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useMemo, useRef } from 'react';\nimport { t, css, useTheme } from '@superset-ui/core';\nimport { InfoTooltipWithTrigger } from '@superset-ui/chart-controls';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { FormLabel } from 'src/components/Form';\nimport Icons from 'src/components/Icons';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst iconStyles = css`\n  &.anticon {\n    font-size: unset;\n    .anticon {\n      line-height: unset;\n      vertical-align: unset;\n    }\n  }\n`;\nconst ControlHeader = (_ref) => {let { name, label, description, validationErrors = [], renderTrigger = false, rightNode, leftNode, onClick, hovered = false, tooltipOnClick = () => {}, warning, danger } = _ref;\n  const { gridUnit, colors } = useTheme();\n  const hasHadNoErrors = useRef(false);\n  const labelColor = useMemo(() => {\n    if (!validationErrors.length) {\n      hasHadNoErrors.current = true;\n    }\n    if (hasHadNoErrors.current) {\n      if (validationErrors.length) {\n        return colors.error.base;\n      }\n      return 'unset';\n    }\n    return colors.alert.base;\n  }, [colors.error.base, colors.alert.base, validationErrors.length]);\n  if (!label) {\n    return null;\n  }\n  const renderOptionalIcons = () => {\n    if (!hovered) {\n      return null;\n    }\n    return ___EmotionJSX(\"span\", { css: () => css`\n          position: absolute;\n          top: 50%;\n          right: 0;\n          padding-left: ${gridUnit}px;\n          transform: translate(100%, -50%);\n          white-space: nowrap;\n        ` },\n    description && ___EmotionJSX(\"span\", null,\n    ___EmotionJSX(Tooltip, { id: \"description-tooltip\", title: description, placement: \"top\" },\n    ___EmotionJSX(Icons.InfoCircleOutlined, { css: iconStyles, onClick: tooltipOnClick })),\n    ' '),\n\n    renderTrigger && ___EmotionJSX(\"span\", null,\n    ___EmotionJSX(InfoTooltipWithTrigger, { label: t('bolt'), tooltip: t('Changing this control takes effect instantly'), placement: \"top\", icon: \"bolt\" }), ' '));\n\n\n  };\n  return ___EmotionJSX(\"div\", { className: \"ControlHeader\" },\n  ___EmotionJSX(\"div\", { className: \"pull-left\" },\n  ___EmotionJSX(FormLabel, { css: (theme) => css`\n            margin-bottom: ${theme.gridUnit * 0.5}px;\n            position: relative;\n          ` },\n  leftNode && ___EmotionJSX(\"span\", null, leftNode),\n  ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, onClick: onClick, style: { cursor: onClick ? 'pointer' : '' } },\n  label),\n  ' ',\n  warning && ___EmotionJSX(\"span\", null,\n  ___EmotionJSX(Tooltip, { id: \"error-tooltip\", placement: \"top\", title: warning },\n  ___EmotionJSX(Icons.AlertSolid, { iconColor: colors.alert.base, iconSize: \"s\" })),\n  ' '),\n\n  danger && ___EmotionJSX(\"span\", null,\n  ___EmotionJSX(Tooltip, { id: \"error-tooltip\", placement: \"top\", title: danger },\n  ___EmotionJSX(Icons.ErrorSolid, { iconColor: colors.error.base, iconSize: \"s\" })),\n  ' '),\n\n  (validationErrors == null ? void 0 : validationErrors.length) > 0 && ___EmotionJSX(\"span\", null,\n  ___EmotionJSX(Tooltip, { id: \"error-tooltip\", placement: \"top\", title: validationErrors == null ? void 0 : validationErrors.join(' ') },\n  ___EmotionJSX(Icons.ExclamationCircleOutlined, { css: css`\n                    ${iconStyles}\n                    color: ${labelColor};\n                  ` })),\n  ' '),\n\n  renderOptionalIcons())),\n\n\n  rightNode && ___EmotionJSX(\"div\", { className: \"pull-right\" }, rightNode),\n  ___EmotionJSX(\"div\", { className: \"clearfix\" }));\n\n};\nexport default ControlHeader;","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,KAAP,IAA+BC,OAA/B,EAAwCC,MAAxC,QAAsD,OAAtD;AACA,SAASC,CAAT,EAAYC,GAAZ,EAAiBC,QAAjB,QAAgD,mBAAhD;AACA,SAASC,sBAAT,QAAuC,6BAAvC;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,OAAOC,KAAP,MAAkB,sBAAlB,C;AAmBA,MAAMC,UAAU,GAAGN,GAAG;;;;;;;;CAAtB;AAUA,MAAMO,aAAa,GAA2B,UAazC,KAb0C,EAC7CC,IAD6C,EAE7CC,KAF6C,EAG7CC,WAH6C,EAI7CC,gBAAgB,GAAG,EAJ0B,EAK7CC,aAAa,GAAG,KAL6B,EAM7CC,SAN6C,EAO7CC,QAP6C,EAQ7CC,OAR6C,EAS7CC,OAAO,GAAG,KATmC,EAU7CC,cAAc,GAAG,MAAK,CAAG,CAVoB,EAW7CC,OAX6C,EAY7CC,MAZ6C,EAa1C;EACH,MAAM,EAAEC,QAAF,EAAYC,MAAZ,KAAuBpB,QAAQ,EAArC;EACA,MAAMqB,cAAc,GAAGxB,MAAM,CAAC,KAAD,CAA7B;EACA,MAAMyB,UAAU,GAAG1B,OAAO,CAAC,MAAK;IAC9B,IAAI,CAACc,gBAAgB,CAACa,MAAtB,EAA8B;MAC5BF,cAAc,CAACG,OAAf,GAAyB,IAAzB;IACD;IAED,IAAIH,cAAc,CAACG,OAAnB,EAA4B;MAC1B,IAAId,gBAAgB,CAACa,MAArB,EAA6B;QAC3B,OAAOH,MAAM,CAACK,KAAP,CAAaC,IAApB;MACD;MAED,OAAO,OAAP;IACD;IAED,OAAON,MAAM,CAACO,KAAP,CAAaD,IAApB;EACD,CAdyB,EAcvB,CAACN,MAAM,CAACK,KAAP,CAAaC,IAAd,EAAoBN,MAAM,CAACO,KAAP,CAAaD,IAAjC,EAAuChB,gBAAgB,CAACa,MAAxD,CAduB,CAA1B;EAgBA,IAAI,CAACf,KAAL,EAAY;IACV,OAAO,IAAP;EACD;EAED,MAAMoB,mBAAmB,GAAG,MAAK;IAC/B,IAAI,CAACb,OAAL,EAAc;MACZ,OAAO,IAAP;IACD;IAED,OACE,wBACE,GAAG,EAAE,MAAMhB,GAAG;;;;0BAIIoB,QAAQ;;;SAL5B;IAUGV,WAAW,IACV;IACE,cAAC,OAAD,IACE,EAAE,EAAC,qBADL,EAEE,KAAK,EAAEA,WAFT,EAGE,SAAS,EAAC,KAHZ;IAKE,cAAC,KAAD,CAAO,kBAAP,IACE,GAAG,EAAEJ,UADP,EAEE,OAAO,EAAEW,cAFX,GALF,CADF;IAUa,GAVb,CAXJ;;IAwBGL,aAAa,IACZ;IACE,cAAC,sBAAD,IACE,KAAK,EAAEb,CAAC,CAAC,MAAD,CADV,EAEE,OAAO,EAAEA,CAAC,CAAC,8CAAD,CAFZ,EAGE,SAAS,EAAC,KAHZ,EAIE,IAAI,EAAC,MAJP,GADF,EAMK,GANL,CAzBJ,CADF;;;EAqCD,CA1CD;EA4CA,OACE,uBAAK,SAAS,EAAC,eAAf;EACE,uBAAK,SAAS,EAAC,WAAf;EACE,cAAC,SAAD,IACE,GAAG,EAAE,CAAC+B,KAAD,KAA0B9B,GAAG;6BACf8B,KAAK,CAACV,QAAN,GAAiB,GAAG;;WAFzC;EAMGN,QAAQ,IAAI,4BAAOA,QAAP,CANf;EAOE,wBACE,IAAI,EAAC,QADP,EAEE,QAAQ,EAAE,CAFZ,EAGE,OAAO,EAAEC,OAHX,EAIE,KAAK,EAAE,EAAEgB,MAAM,EAAEhB,OAAO,GAAG,SAAH,GAAe,EAAhC,EAJT;EAMGN,KANH,CAPF;EAcU,GAdV;EAeGS,OAAO,IACN;EACE,cAAC,OAAD,IAAS,EAAE,EAAC,eAAZ,EAA4B,SAAS,EAAC,KAAtC,EAA4C,KAAK,EAAEA,OAAnD;EACE,cAAC,KAAD,CAAO,UAAP,IAAkB,SAAS,EAAEG,MAAM,CAACO,KAAP,CAAaD,IAA1C,EAAgD,QAAQ,EAAC,GAAzD,GADF,CADF;EAGa,GAHb,CAhBJ;;EAsBGR,MAAM,IACL;EACE,cAAC,OAAD,IAAS,EAAE,EAAC,eAAZ,EAA4B,SAAS,EAAC,KAAtC,EAA4C,KAAK,EAAEA,MAAnD;EACE,cAAC,KAAD,CAAO,UAAP,IAAkB,SAAS,EAAEE,MAAM,CAACK,KAAP,CAAaC,IAA1C,EAAgD,QAAQ,EAAC,GAAzD,GADF,CADF;EAGa,GAHb,CAvBJ;;EA6BG,iBAAgB,QAAhB,4BAAgB,CAAEH,MAAlB,IAA2B,CAA3B,IACC;EACE,cAAC,OAAD,IACE,EAAE,EAAC,eADL,EAEE,SAAS,EAAC,KAFZ,EAGE,KAAK,EAAEb,gBAAF,oBAAEA,gBAAgB,CAAEqB,IAAlB,CAAuB,GAAvB,CAHT;EAKE,cAAC,KAAD,CAAO,yBAAP,IACE,GAAG,EAAEhC,GAAG;sBACJM,UAAU;6BACHiB,UAAU;mBAHvB,GALF,CADF;EAYa,GAZb,CA9BJ;;EA6CGM,mBAAmB,EA7CtB,CADF,CADF;;;EAkDGhB,SAAS,IAAI,uBAAK,SAAS,EAAC,YAAf,IAA6BA,SAA7B,CAlDhB;EAmDE,uBAAK,SAAS,EAAC,UAAf,GAnDF,CADF;;AAuDD,CAvID;AAyIA,eAAeN,aAAf","names":["React","useMemo","useRef","t","css","useTheme","InfoTooltipWithTrigger","Tooltip","FormLabel","Icons","iconStyles","ControlHeader","name","label","description","validationErrors","renderTrigger","rightNode","leftNode","onClick","hovered","tooltipOnClick","warning","danger","gridUnit","colors","hasHadNoErrors","labelColor","length","current","error","base","alert","renderOptionalIcons","theme","cursor","join"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/ControlHeader.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { FC, ReactNode, useMemo, useRef } from 'react';\nimport { t, css, useTheme, SupersetTheme } from '@superset-ui/core';\nimport { InfoTooltipWithTrigger } from '@superset-ui/chart-controls';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { FormLabel } from 'src/components/Form';\nimport Icons from 'src/components/Icons';\n\ntype ValidationError = string;\n\nexport type ControlHeaderProps = {\n  name?: string;\n  label?: ReactNode;\n  description?: ReactNode;\n  validationErrors?: ValidationError[];\n  renderTrigger?: boolean;\n  rightNode?: ReactNode;\n  leftNode?: ReactNode;\n  onClick?: () => void;\n  hovered?: boolean;\n  tooltipOnClick?: () => void;\n  warning?: string;\n  danger?: string;\n};\n\nconst iconStyles = css`\n  &.anticon {\n    font-size: unset;\n    .anticon {\n      line-height: unset;\n      vertical-align: unset;\n    }\n  }\n`;\n\nconst ControlHeader: FC<ControlHeaderProps> = ({\n  name,\n  label,\n  description,\n  validationErrors = [],\n  renderTrigger = false,\n  rightNode,\n  leftNode,\n  onClick,\n  hovered = false,\n  tooltipOnClick = () => {},\n  warning,\n  danger,\n}) => {\n  const { gridUnit, colors } = useTheme();\n  const hasHadNoErrors = useRef(false);\n  const labelColor = useMemo(() => {\n    if (!validationErrors.length) {\n      hasHadNoErrors.current = true;\n    }\n\n    if (hasHadNoErrors.current) {\n      if (validationErrors.length) {\n        return colors.error.base;\n      }\n\n      return 'unset';\n    }\n\n    return colors.alert.base;\n  }, [colors.error.base, colors.alert.base, validationErrors.length]);\n\n  if (!label) {\n    return null;\n  }\n\n  const renderOptionalIcons = () => {\n    if (!hovered) {\n      return null;\n    }\n\n    return (\n      <span\n        css={() => css`\n          position: absolute;\n          top: 50%;\n          right: 0;\n          padding-left: ${gridUnit}px;\n          transform: translate(100%, -50%);\n          white-space: nowrap;\n        `}\n      >\n        {description && (\n          <span>\n            <Tooltip\n              id=\"description-tooltip\"\n              title={description}\n              placement=\"top\"\n            >\n              <Icons.InfoCircleOutlined\n                css={iconStyles}\n                onClick={tooltipOnClick}\n              />\n            </Tooltip>{' '}\n          </span>\n        )}\n        {renderTrigger && (\n          <span>\n            <InfoTooltipWithTrigger\n              label={t('bolt')}\n              tooltip={t('Changing this control takes effect instantly')}\n              placement=\"top\"\n              icon=\"bolt\"\n            />{' '}\n          </span>\n        )}\n      </span>\n    );\n  };\n\n  return (\n    <div className=\"ControlHeader\" data-test={`${name}-header`}>\n      <div className=\"pull-left\">\n        <FormLabel\n          css={(theme: SupersetTheme) => css`\n            margin-bottom: ${theme.gridUnit * 0.5}px;\n            position: relative;\n          `}\n        >\n          {leftNode && <span>{leftNode}</span>}\n          <span\n            role=\"button\"\n            tabIndex={0}\n            onClick={onClick}\n            style={{ cursor: onClick ? 'pointer' : '' }}\n          >\n            {label}\n          </span>{' '}\n          {warning && (\n            <span>\n              <Tooltip id=\"error-tooltip\" placement=\"top\" title={warning}>\n                <Icons.AlertSolid iconColor={colors.alert.base} iconSize=\"s\" />\n              </Tooltip>{' '}\n            </span>\n          )}\n          {danger && (\n            <span>\n              <Tooltip id=\"error-tooltip\" placement=\"top\" title={danger}>\n                <Icons.ErrorSolid iconColor={colors.error.base} iconSize=\"s\" />\n              </Tooltip>{' '}\n            </span>\n          )}\n          {validationErrors?.length > 0 && (\n            <span data-test=\"error-tooltip\">\n              <Tooltip\n                id=\"error-tooltip\"\n                placement=\"top\"\n                title={validationErrors?.join(' ')}\n              >\n                <Icons.ExclamationCircleOutlined\n                  css={css`\n                    ${iconStyles}\n                    color: ${labelColor};\n                  `}\n                />\n              </Tooltip>{' '}\n            </span>\n          )}\n          {renderOptionalIcons()}\n        </FormLabel>\n      </div>\n      {rightNode && <div className=\"pull-right\">{rightNode}</div>}\n      <div className=\"clearfix\" />\n    </div>\n  );\n};\n\nexport default ControlHeader;\n"]},"metadata":{},"sourceType":"module"}