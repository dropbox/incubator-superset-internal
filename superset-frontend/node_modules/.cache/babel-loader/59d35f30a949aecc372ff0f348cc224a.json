{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useMemo } from 'react';\nimport { isFilterDivider } from '@superset-ui/core';\nimport FilterControl from './FilterControls/FilterControl';\nimport { useFilters } from './state';\nimport FilterDivider from './FilterControls/FilterDivider';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport const useFilterControlFactory = (dataMaskSelected, onFilterSelectionChange) => {\n  const filters = useFilters();\n  const filterValues = useMemo(() => Object.values(filters), [filters]);\n  const filtersWithValues = useMemo(() => filterValues.map((filter) => ({\n    ...filter,\n    dataMask: dataMaskSelected[filter.id] })),\n  [filterValues, dataMaskSelected]);\n  const filterControlFactory = useCallback((index, filterBarOrientation, overflow) => {\n    const filter = filtersWithValues[index];\n    if (isFilterDivider(filter)) {\n      return ___EmotionJSX(FilterDivider, { title: filter.title, description: filter.description, orientation: filterBarOrientation, overflow: overflow });\n    }\n    return ___EmotionJSX(FilterControl, { dataMaskSelected: dataMaskSelected, filter: filter, onFilterSelectionChange: onFilterSelectionChange, inView: false, orientation: filterBarOrientation, overflow: overflow });\n  }, [filtersWithValues, dataMaskSelected, onFilterSelectionChange]);\n  return { filterControlFactory, filtersWithValues };\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAmBA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,OAA7B,QAA4C,OAA5C;AACA,SAKEC,eALF,QAMO,mBANP;AAQA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,SAASC,UAAT,QAA2B,SAA3B;AACA,OAAOC,aAAP,MAA0B,gCAA1B,C;AAEA,OAAO,MAAMC,uBAAuB,GAAG,CACrCC,gBADqC,EAErCC,uBAFqC,KAGnC;EACF,MAAMC,OAAO,GAAGL,UAAU,EAA1B;EACA,MAAMM,YAAY,GAAGT,OAAO,CAAC,MAAMU,MAAM,CAACC,MAAP,CAAcH,OAAd,CAAP,EAA+B,CAACA,OAAD,CAA/B,CAA5B;EACA,MAAMI,iBAAiB,GAAyBZ,OAAO,CACrD,MACES,YAAY,CAACI,GAAb,CAAiB,OAAM,MAAK;IAC1B,GAAGC,MADuB;IAE1BC,QAAQ,EAAET,gBAAgB,CAACQ,MAAM,CAACE,EAAR,CAFA,EAAL,CAAvB,CAFmD;EAMrD,CAACP,YAAD,EAAeH,gBAAf,CANqD,CAAvD;EASA,MAAMW,oBAAoB,GAAGlB,WAAW,CACtC,CACEmB,KADF,EAEEC,oBAFF,EAGEC,QAHF,KAII;IACF,MAAMN,MAAM,GAAGF,iBAAiB,CAACM,KAAD,CAAhC;IACA,IAAIjB,eAAe,CAACa,MAAD,CAAnB,EAA6B;MAC3B,OACE,cAAC,aAAD,IACE,KAAK,EAAEA,MAAM,CAACO,KADhB,EAEE,WAAW,EAAEP,MAAM,CAACQ,WAFtB,EAGE,WAAW,EAAEH,oBAHf,EAIE,QAAQ,EAAEC,QAJZ,GADF;IAQD;IACD,OACE,cAAC,aAAD,IACE,gBAAgB,EAAEd,gBADpB,EAEE,MAAM,EAAEQ,MAFV,EAGE,uBAAuB,EAAEP,uBAH3B,EAIE,MAAM,EAAE,KAJV,EAKE,WAAW,EAAEY,oBALf,EAME,QAAQ,EAAEC,QANZ,GADF;EAUD,CA3BqC,EA4BtC,CAACR,iBAAD,EAAoBN,gBAApB,EAAsCC,uBAAtC,CA5BsC,CAAxC;EA+BA,OAAO,EAAEU,oBAAF,EAAwBL,iBAAxB,EAAP;AACD,CA/CM","names":["React","useCallback","useMemo","isFilterDivider","FilterControl","useFilters","FilterDivider","useFilterControlFactory","dataMaskSelected","onFilterSelectionChange","filters","filterValues","Object","values","filtersWithValues","map","filter","dataMask","id","filterControlFactory","index","filterBarOrientation","overflow","title","description"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/dashboard/components/nativeFilters/FilterBar/useFilterControlFactory.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useCallback, useMemo } from 'react';\nimport {\n  DataMask,\n  DataMaskStateWithId,\n  Divider,\n  Filter,\n  isFilterDivider,\n} from '@superset-ui/core';\nimport { FilterBarOrientation } from 'src/dashboard/types';\nimport FilterControl from './FilterControls/FilterControl';\nimport { useFilters } from './state';\nimport FilterDivider from './FilterControls/FilterDivider';\n\nexport const useFilterControlFactory = (\n  dataMaskSelected: DataMaskStateWithId,\n  onFilterSelectionChange: (filter: Filter, dataMask: DataMask) => void,\n) => {\n  const filters = useFilters();\n  const filterValues = useMemo(() => Object.values(filters), [filters]);\n  const filtersWithValues: (Filter | Divider)[] = useMemo(\n    () =>\n      filterValues.map(filter => ({\n        ...filter,\n        dataMask: dataMaskSelected[filter.id],\n      })),\n    [filterValues, dataMaskSelected],\n  );\n\n  const filterControlFactory = useCallback(\n    (\n      index: number,\n      filterBarOrientation: FilterBarOrientation,\n      overflow: boolean,\n    ) => {\n      const filter = filtersWithValues[index];\n      if (isFilterDivider(filter)) {\n        return (\n          <FilterDivider\n            title={filter.title}\n            description={filter.description}\n            orientation={filterBarOrientation}\n            overflow={overflow}\n          />\n        );\n      }\n      return (\n        <FilterControl\n          dataMaskSelected={dataMaskSelected}\n          filter={filter}\n          onFilterSelectionChange={onFilterSelectionChange}\n          inView={false}\n          orientation={filterBarOrientation}\n          overflow={overflow}\n        />\n      );\n    },\n    [filtersWithValues, dataMaskSelected, onFilterSelectionChange],\n  );\n\n  return { filterControlFactory, filtersWithValues };\n};\n"]},"metadata":{},"sourceType":"module"}