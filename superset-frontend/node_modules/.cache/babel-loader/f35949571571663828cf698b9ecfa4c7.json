{"ast":null,"code":"/* eslint-disable no-nested-ternary */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { css, GenericDataType, styled, t } from '@superset-ui/core';\nimport { ClockCircleOutlined, QuestionOutlined } from '@ant-design/icons';\n// TODO: move all icons to superset-ui/core\nimport FunctionSvg from './type-icons/field_derived.svg';\nimport BooleanSvg from './type-icons/field_boolean.svg';\nimport StringSvg from './type-icons/field_abc.svg';\nimport NumSvg from './type-icons/field_num.svg';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst TypeIconWrapper = styled.div`\n  ${(_ref) => {let { theme } = _ref;return css`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: ${theme.gridUnit * 6}px;\n    height: ${theme.gridUnit * 6}px;\n    margin-right: ${theme.gridUnit}px;\n\n    && svg {\n      margin-right: 0;\n      margin-left: 0;\n    }\n  `;}};\n`;\nexport function ColumnTypeLabel(_ref2) {let { type } = _ref2;\n  let typeIcon = ___EmotionJSX(QuestionOutlined, { \"aria-label\": t('unknown type icon') });\n  if (type === '' || type === 'expression') {\n    typeIcon = ___EmotionJSX(FunctionSvg, { \"aria-label\": t('function type icon') });\n  } else\n  if (type === GenericDataType.STRING) {\n    typeIcon = ___EmotionJSX(StringSvg, { \"aria-label\": t('string type icon') });\n  } else\n  if (type === GenericDataType.NUMERIC) {\n    typeIcon = ___EmotionJSX(NumSvg, { \"aria-label\": t('numeric type icon') });\n  } else\n  if (type === GenericDataType.BOOLEAN) {\n    typeIcon = ___EmotionJSX(BooleanSvg, { \"aria-label\": t('boolean type icon') });\n  } else\n  if (type === GenericDataType.TEMPORAL) {\n    typeIcon = ___EmotionJSX(ClockCircleOutlined, { \"aria-label\": t('temporal type icon') });\n  }\n  return ___EmotionJSX(TypeIconWrapper, null, typeIcon);\n}\nexport default ColumnTypeLabel;","map":{"version":3,"mappings":"AAAA;AACA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,KAAP,MAAiC,OAAjC;AACA,SAASC,GAAT,EAAcC,eAAd,EAA+BC,MAA/B,EAAuCC,CAAvC,QAAgD,mBAAhD;AACA,SAASC,mBAAT,EAA8BC,gBAA9B,QAAsD,mBAAtD;AACA;AACA,OAAOC,WAAP,MAAwB,gCAAxB;AACA,OAAOC,UAAP,MAAuB,gCAAvB;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,MAAP,MAAmB,4BAAnB,C;AAQA,MAAMC,eAAe,GAAGR,MAAM,CAACS,GAAG;IAC9B,eAAC,EAAEC,KAAF,EAAD,eAAeZ,GAAG;;;;aAITY,KAAK,CAACC,QAAN,GAAiB,CAAC;cACjBD,KAAK,CAACC,QAAN,GAAiB,CAAC;oBACZD,KAAK,CAACC,QAAQ;;;;;;GAN9B,EAYD;CAbH;AAgBA,OAAM,SAAUC,eAAV,QAAwD,KAA9B,EAAEC,IAAF,EAA8B;EAC5D,IAAIC,QAAQ,GACV,cAAC,gBAAD,IAAkB,cAAYb,CAAC,CAAC,mBAAD,CAA/B,GADF;EAIA,IAAIY,IAAI,KAAK,EAAT,IAAeA,IAAI,KAAK,YAA5B,EAA0C;IACxCC,QAAQ,GAAG,cAAC,WAAD,IAAa,cAAYb,CAAC,CAAC,oBAAD,CAA1B,GAAX;EACD,CAFD;EAEO,IAAIY,IAAI,KAAKd,eAAe,CAACgB,MAA7B,EAAqC;IAC1CD,QAAQ,GAAG,cAAC,SAAD,IAAW,cAAYb,CAAC,CAAC,kBAAD,CAAxB,GAAX;EACD,CAFM;EAEA,IAAIY,IAAI,KAAKd,eAAe,CAACiB,OAA7B,EAAsC;IAC3CF,QAAQ,GAAG,cAAC,MAAD,IAAQ,cAAYb,CAAC,CAAC,mBAAD,CAArB,GAAX;EACD,CAFM;EAEA,IAAIY,IAAI,KAAKd,eAAe,CAACkB,OAA7B,EAAsC;IAC3CH,QAAQ,GAAG,cAAC,UAAD,IAAY,cAAYb,CAAC,CAAC,mBAAD,CAAzB,GAAX;EACD,CAFM;EAEA,IAAIY,IAAI,KAAKd,eAAe,CAACmB,QAA7B,EAAuC;IAC5CJ,QAAQ,GAAG,cAAC,mBAAD,IAAqB,cAAYb,CAAC,CAAC,oBAAD,CAAlC,GAAX;EACD;EAED,OAAO,cAAC,eAAD,QAAkBa,QAAlB,CAAP;AACD;AAED,eAAeF,eAAf","names":["React","css","GenericDataType","styled","t","ClockCircleOutlined","QuestionOutlined","FunctionSvg","BooleanSvg","StringSvg","NumSvg","TypeIconWrapper","div","theme","gridUnit","ColumnTypeLabel","type","typeIcon","STRING","NUMERIC","BOOLEAN","TEMPORAL"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-chart-controls/src/components/ColumnTypeLabel/ColumnTypeLabel.tsx"],"sourcesContent":["/* eslint-disable no-nested-ternary */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { ReactNode } from 'react';\nimport { css, GenericDataType, styled, t } from '@superset-ui/core';\nimport { ClockCircleOutlined, QuestionOutlined } from '@ant-design/icons';\n// TODO: move all icons to superset-ui/core\nimport FunctionSvg from './type-icons/field_derived.svg';\nimport BooleanSvg from './type-icons/field_boolean.svg';\nimport StringSvg from './type-icons/field_abc.svg';\nimport NumSvg from './type-icons/field_num.svg';\n\nexport type ColumnLabelExtendedType = 'expression' | '';\n\nexport type ColumnTypeLabelProps = {\n  type?: ColumnLabelExtendedType | GenericDataType;\n};\n\nconst TypeIconWrapper = styled.div`\n  ${({ theme }) => css`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: ${theme.gridUnit * 6}px;\n    height: ${theme.gridUnit * 6}px;\n    margin-right: ${theme.gridUnit}px;\n\n    && svg {\n      margin-right: 0;\n      margin-left: 0;\n    }\n  `};\n`;\n\nexport function ColumnTypeLabel({ type }: ColumnTypeLabelProps) {\n  let typeIcon: ReactNode = (\n    <QuestionOutlined aria-label={t('unknown type icon')} />\n  );\n\n  if (type === '' || type === 'expression') {\n    typeIcon = <FunctionSvg aria-label={t('function type icon')} />;\n  } else if (type === GenericDataType.STRING) {\n    typeIcon = <StringSvg aria-label={t('string type icon')} />;\n  } else if (type === GenericDataType.NUMERIC) {\n    typeIcon = <NumSvg aria-label={t('numeric type icon')} />;\n  } else if (type === GenericDataType.BOOLEAN) {\n    typeIcon = <BooleanSvg aria-label={t('boolean type icon')} />;\n  } else if (type === GenericDataType.TEMPORAL) {\n    typeIcon = <ClockCircleOutlined aria-label={t('temporal type icon')} />;\n  }\n\n  return <TypeIconWrapper>{typeIcon}</TypeIconWrapper>;\n}\n\nexport default ColumnTypeLabel;\n"]},"metadata":{},"sourceType":"module"}