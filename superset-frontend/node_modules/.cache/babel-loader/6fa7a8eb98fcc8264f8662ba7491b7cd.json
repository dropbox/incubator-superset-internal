{"ast":null,"code":"import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { ensureIsArray, hasGenericChartAxes, isAdhocColumn, isPhysicalColumn, smartDateFormatter, t, validateNonEmpty } from '@superset-ui/core';\nimport { D3_TIME_FORMAT_OPTIONS, sections, sharedControls, getStandardizedControls } from '@superset-ui/chart-controls';\nimport { MetricsLayoutEnum } from '../types';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst config = {\n  controlPanelSections: [\n  { ...sections.genericTime, expanded: false },\n  {\n    label: t('Query'),\n    expanded: true,\n    controlSetRows: [\n    [\n    {\n      name: 'groupbyColumns',\n      config: {\n        ...sharedControls.groupby,\n        label: t('Columns'),\n        description: t('Columns to group by on the columns') } }],\n\n\n\n    [\n    {\n      name: 'groupbyRows',\n      config: {\n        ...sharedControls.groupby,\n        label: t('Rows'),\n        description: t('Columns to group by on the rows') } }],\n\n\n\n    [\n    hasGenericChartAxes ?\n    {\n      name: 'time_grain_sqla',\n      config: {\n        ...sharedControls.time_grain_sqla,\n        visibility: (_ref) => {var _controls$groupbyColu;let { controls } = _ref;\n          const dttmLookup = Object.fromEntries(ensureIsArray(controls == null ? void 0 : (_controls$groupbyColu = controls.groupbyColumns) == null ? void 0 : _controls$groupbyColu.options).map((option) => [option.column_name, option.is_dttm]));\n          return [\n          ...ensureIsArray(controls == null ? void 0 : controls.groupbyColumns.value),\n          ...ensureIsArray(controls == null ? void 0 : controls.groupbyRows.value)].\n\n          map((selection) => {\n            if (isAdhocColumn(selection)) {\n              return true;\n            }\n            if (isPhysicalColumn(selection)) {\n              return !!dttmLookup[selection];\n            }\n            return false;\n          }).\n          some(Boolean);\n        } } } :\n\n\n    null,\n    hasGenericChartAxes ? 'temporal_columns_lookup' : null],\n\n    [\n    {\n      name: 'metrics',\n      config: {\n        ...sharedControls.metrics,\n        validators: [validateNonEmpty],\n        rerender: ['conditional_formatting'] } }],\n\n\n\n    [\n    {\n      name: 'metricsLayout',\n      config: {\n        type: 'RadioButtonControl',\n        renderTrigger: true,\n        label: t('Apply metrics on'),\n        default: MetricsLayoutEnum.COLUMNS,\n        options: [\n        [MetricsLayoutEnum.COLUMNS, t('Columns')],\n        [MetricsLayoutEnum.ROWS, t('Rows')]],\n\n        description: t('Use metrics as a top level group for columns or for rows') } }],\n\n\n\n    ['adhoc_filters'],\n    ['series_limit'],\n    [\n    {\n      name: 'row_limit',\n      config: {\n        ...sharedControls.row_limit,\n        label: t('Cell limit'),\n        description: t('Limits the number of cells that get retrieved.') } }],\n\n\n\n    // TODO(kgabryje): add series_columns control after control panel is redesigned to avoid clutter\n    [\n    {\n      name: 'series_limit_metric',\n      config: {\n        ...sharedControls.series_limit_metric,\n        description: t('Metric used to define how the top series are sorted if a series or cell limit is present. ' +\n        'If undefined reverts to the first metric (where appropriate).') } }],\n\n\n\n    [\n    {\n      name: 'order_desc',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Sort Descending'),\n        default: true,\n        description: t('Whether to sort descending or ascending') } }]] },\n\n\n\n\n\n  {\n    label: t('Options'),\n    expanded: true,\n    tabOverride: 'data',\n    controlSetRows: [\n    [\n    {\n      name: 'aggregateFunction',\n      config: {\n        type: 'SelectControl',\n        label: t('Aggregation function'),\n        clearable: false,\n        choices: [\n        ['Count', t('Count')],\n        ['Count Unique Values', t('Count Unique Values')],\n        ['List Unique Values', t('List Unique Values')],\n        ['Sum', t('Sum')],\n        ['Average', t('Average')],\n        ['Median', t('Median')],\n        ['Sample Variance', t('Sample Variance')],\n        ['Sample Standard Deviation', t('Sample Standard Deviation')],\n        ['Minimum', t('Minimum')],\n        ['Maximum', t('Maximum')],\n        ['First', t('First')],\n        ['Last', t('Last')],\n        ['Sum as Fraction of Total', t('Sum as Fraction of Total')],\n        ['Sum as Fraction of Rows', t('Sum as Fraction of Rows')],\n        ['Sum as Fraction of Columns', t('Sum as Fraction of Columns')],\n        ['Count as Fraction of Total', t('Count as Fraction of Total')],\n        ['Count as Fraction of Rows', t('Count as Fraction of Rows')],\n        [\n        'Count as Fraction of Columns',\n        t('Count as Fraction of Columns')]],\n\n\n        default: 'Sum',\n        description: t('Aggregate function to apply when pivoting and computing the total rows and columns'),\n        renderTrigger: true } }],\n\n\n\n    [\n    {\n      name: 'rowTotals',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Show rows total'),\n        default: false,\n        renderTrigger: true,\n        description: t('Display row level total') } }],\n\n\n\n    [\n    {\n      name: 'colTotals',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Show columns total'),\n        default: false,\n        renderTrigger: true,\n        description: t('Display column level total') } }],\n\n\n\n    [\n    {\n      name: 'transposePivot',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Transpose pivot'),\n        default: false,\n        description: t('Swap rows and columns'),\n        renderTrigger: true } }],\n\n\n\n    [\n    {\n      name: 'combineMetric',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Combine metrics'),\n        default: false,\n        description: t('Display metrics side by side within each column, as ' +\n        'opposed to each column being displayed side by side for each metric.'),\n        renderTrigger: true } }]] },\n\n\n\n\n\n  {\n    label: t('Options'),\n    expanded: true,\n    controlSetRows: [\n    [\n    {\n      name: 'valueFormat',\n      config: {\n        ...sharedControls.y_axis_format,\n        label: t('Value format') } }],\n\n\n\n    [\n    {\n      name: 'date_format',\n      config: {\n        type: 'SelectControl',\n        freeForm: true,\n        label: t('Date format'),\n        default: smartDateFormatter.id,\n        renderTrigger: true,\n        choices: D3_TIME_FORMAT_OPTIONS,\n        description: t('D3 time format for datetime columns') } }],\n\n\n\n    [\n    {\n      name: 'rowOrder',\n      config: {\n        type: 'SelectControl',\n        label: t('Sort rows by'),\n        default: 'key_a_to_z',\n        choices: [\n        // [value, label]\n        ['key_a_to_z', t('key a-z')],\n        ['key_z_to_a', t('key z-a')],\n        ['value_a_to_z', t('value ascending')],\n        ['value_z_to_a', t('value descending')]],\n\n        renderTrigger: true,\n        description: ___EmotionJSX(React.Fragment, null,\n        ___EmotionJSX(\"div\", null, t('Change order of rows.')),\n        ___EmotionJSX(\"div\", null, t('Available sorting modes:')),\n        ___EmotionJSX(\"ul\", null,\n        ___EmotionJSX(\"li\", null, t('By key: use row names as sorting key')),\n        ___EmotionJSX(\"li\", null, t('By value: use metric values as sorting key')))) } }],\n\n\n\n\n\n    [\n    {\n      name: 'colOrder',\n      config: {\n        type: 'SelectControl',\n        label: t('Sort columns by'),\n        default: 'key_a_to_z',\n        choices: [\n        // [value, label]\n        ['key_a_to_z', t('key a-z')],\n        ['key_z_to_a', t('key z-a')],\n        ['value_a_to_z', t('value ascending')],\n        ['value_z_to_a', t('value descending')]],\n\n        renderTrigger: true,\n        description: ___EmotionJSX(React.Fragment, null,\n        ___EmotionJSX(\"div\", null, t('Change order of columns.')),\n        ___EmotionJSX(\"div\", null, t('Available sorting modes:')),\n        ___EmotionJSX(\"ul\", null,\n        ___EmotionJSX(\"li\", null, t('By key: use column names as sorting key')),\n        ___EmotionJSX(\"li\", null, t('By value: use metric values as sorting key')))) } }],\n\n\n\n\n\n    [\n    {\n      name: 'rowSubtotalPosition',\n      config: {\n        type: 'SelectControl',\n        label: t('Rows subtotal position'),\n        default: false,\n        choices: [\n        // [value, label]\n        [true, t('Top')],\n        [false, t('Bottom')]],\n\n        renderTrigger: true,\n        description: t('Position of row level subtotal') } }],\n\n\n\n    [\n    {\n      name: 'colSubtotalPosition',\n      config: {\n        type: 'SelectControl',\n        label: t('Columns subtotal position'),\n        default: false,\n        choices: [\n        // [value, label]\n        [true, t('Left')],\n        [false, t('Right')]],\n\n        renderTrigger: true,\n        description: t('Position of column level subtotal') } }],\n\n\n\n    [\n    {\n      name: 'conditional_formatting',\n      config: {\n        type: 'ConditionalFormattingControl',\n        renderTrigger: true,\n        label: t('Conditional formatting'),\n        description: t('Apply conditional color formatting to metrics'),\n        mapStateToProps(explore, _, chart) {var _explore$controls$met, _explore$controls, _explore$controls$met2, _explore$datasource, _explore$datasource2, _explore$datasource$c, _explore$datasource3;\n          const values = (_explore$controls$met = explore == null ? void 0 : (_explore$controls = explore.controls) == null ? void 0 : (_explore$controls$met2 = _explore$controls.metrics) == null ? void 0 : _explore$controls$met2.value) != null ? _explore$controls$met :\n          [];\n          const verboseMap = explore != null && (_explore$datasource = explore.datasource) != null && _explore$datasource.hasOwnProperty('verbose_map') ?\n          explore == null ? void 0 : (_explore$datasource2 = explore.datasource) == null ? void 0 : _explore$datasource2.verbose_map : (_explore$datasource$c =\n          explore == null ? void 0 : (_explore$datasource3 = explore.datasource) == null ? void 0 : _explore$datasource3.columns) != null ? _explore$datasource$c : {};\n          const chartStatus = chart == null ? void 0 : chart.chartStatus;\n          const metricColumn = values.map((value) => {\n            if (typeof value === 'string') {var _verboseMap$value;\n              return { value, label: (_verboseMap$value = verboseMap[value]) != null ? _verboseMap$value : value };\n            }\n            return { value: value.label, label: value.label };\n          });\n          return {\n            removeIrrelevantConditions: chartStatus === 'success',\n            columnOptions: metricColumn,\n            verboseMap };\n\n        } } }]] }],\n\n\n\n\n\n\n  formDataOverrides: (formData) => {\n    const groupbyColumns = getStandardizedControls().controls.columns.filter((col) => {var _context;return !_includesInstanceProperty(_context = ensureIsArray(formData.groupbyRows)).call(_context, col);});\n    getStandardizedControls().controls.columns =\n    getStandardizedControls().controls.columns.filter((col) => !_includesInstanceProperty(groupbyColumns).call(groupbyColumns, col));\n    return {\n      ...formData,\n      metrics: getStandardizedControls().popAllMetrics(),\n      groupbyColumns };\n\n  } };\n\nexport default config;","map":{"version":3,"mappings":"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","names":["React","ensureIsArray","hasGenericChartAxes","isAdhocColumn","isPhysicalColumn","smartDateFormatter","t","validateNonEmpty","D3_TIME_FORMAT_OPTIONS","sections","sharedControls","getStandardizedControls","MetricsLayoutEnum","config","controlPanelSections","genericTime","expanded","label","controlSetRows","name","groupby","description","time_grain_sqla","visibility","controls","dttmLookup","Object","fromEntries","groupbyColumns","options","map","option","column_name","is_dttm","value","groupbyRows","selection","some","Boolean","metrics","validators","rerender","type","renderTrigger","default","COLUMNS","ROWS","row_limit","series_limit_metric","tabOverride","clearable","choices","y_axis_format","freeForm","id","mapStateToProps","explore","_","chart","values","verboseMap","datasource","hasOwnProperty","verbose_map","columns","chartStatus","metricColumn","removeIrrelevantConditions","columnOptions","formDataOverrides","filter","formData","col","popAllMetrics"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/plugin/controlPanel.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport {\n  ensureIsArray,\n  hasGenericChartAxes,\n  isAdhocColumn,\n  isPhysicalColumn,\n  QueryFormMetric,\n  smartDateFormatter,\n  t,\n  validateNonEmpty,\n} from '@superset-ui/core';\nimport {\n  ControlPanelConfig,\n  D3_TIME_FORMAT_OPTIONS,\n  sections,\n  sharedControls,\n  Dataset,\n  getStandardizedControls,\n} from '@superset-ui/chart-controls';\nimport { MetricsLayoutEnum } from '../types';\n\nconst config: ControlPanelConfig = {\n  controlPanelSections: [\n    { ...sections.genericTime, expanded: false },\n    {\n      label: t('Query'),\n      expanded: true,\n      controlSetRows: [\n        [\n          {\n            name: 'groupbyColumns',\n            config: {\n              ...sharedControls.groupby,\n              label: t('Columns'),\n              description: t('Columns to group by on the columns'),\n            },\n          },\n        ],\n        [\n          {\n            name: 'groupbyRows',\n            config: {\n              ...sharedControls.groupby,\n              label: t('Rows'),\n              description: t('Columns to group by on the rows'),\n            },\n          },\n        ],\n        [\n          hasGenericChartAxes\n            ? {\n                name: 'time_grain_sqla',\n                config: {\n                  ...sharedControls.time_grain_sqla,\n                  visibility: ({ controls }) => {\n                    const dttmLookup = Object.fromEntries(\n                      ensureIsArray(controls?.groupbyColumns?.options).map(\n                        option => [option.column_name, option.is_dttm],\n                      ),\n                    );\n\n                    return [\n                      ...ensureIsArray(controls?.groupbyColumns.value),\n                      ...ensureIsArray(controls?.groupbyRows.value),\n                    ]\n                      .map(selection => {\n                        if (isAdhocColumn(selection)) {\n                          return true;\n                        }\n                        if (isPhysicalColumn(selection)) {\n                          return !!dttmLookup[selection];\n                        }\n                        return false;\n                      })\n                      .some(Boolean);\n                  },\n                },\n              }\n            : null,\n          hasGenericChartAxes ? 'temporal_columns_lookup' : null,\n        ],\n        [\n          {\n            name: 'metrics',\n            config: {\n              ...sharedControls.metrics,\n              validators: [validateNonEmpty],\n              rerender: ['conditional_formatting'],\n            },\n          },\n        ],\n        [\n          {\n            name: 'metricsLayout',\n            config: {\n              type: 'RadioButtonControl',\n              renderTrigger: true,\n              label: t('Apply metrics on'),\n              default: MetricsLayoutEnum.COLUMNS,\n              options: [\n                [MetricsLayoutEnum.COLUMNS, t('Columns')],\n                [MetricsLayoutEnum.ROWS, t('Rows')],\n              ],\n              description: t(\n                'Use metrics as a top level group for columns or for rows',\n              ),\n            },\n          },\n        ],\n        ['adhoc_filters'],\n        ['series_limit'],\n        [\n          {\n            name: 'row_limit',\n            config: {\n              ...sharedControls.row_limit,\n              label: t('Cell limit'),\n              description: t('Limits the number of cells that get retrieved.'),\n            },\n          },\n        ],\n        // TODO(kgabryje): add series_columns control after control panel is redesigned to avoid clutter\n        [\n          {\n            name: 'series_limit_metric',\n            config: {\n              ...sharedControls.series_limit_metric,\n              description: t(\n                'Metric used to define how the top series are sorted if a series or cell limit is present. ' +\n                  'If undefined reverts to the first metric (where appropriate).',\n              ),\n            },\n          },\n        ],\n        [\n          {\n            name: 'order_desc',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Sort Descending'),\n              default: true,\n              description: t('Whether to sort descending or ascending'),\n            },\n          },\n        ],\n      ],\n    },\n    {\n      label: t('Options'),\n      expanded: true,\n      tabOverride: 'data',\n      controlSetRows: [\n        [\n          {\n            name: 'aggregateFunction',\n            config: {\n              type: 'SelectControl',\n              label: t('Aggregation function'),\n              clearable: false,\n              choices: [\n                ['Count', t('Count')],\n                ['Count Unique Values', t('Count Unique Values')],\n                ['List Unique Values', t('List Unique Values')],\n                ['Sum', t('Sum')],\n                ['Average', t('Average')],\n                ['Median', t('Median')],\n                ['Sample Variance', t('Sample Variance')],\n                ['Sample Standard Deviation', t('Sample Standard Deviation')],\n                ['Minimum', t('Minimum')],\n                ['Maximum', t('Maximum')],\n                ['First', t('First')],\n                ['Last', t('Last')],\n                ['Sum as Fraction of Total', t('Sum as Fraction of Total')],\n                ['Sum as Fraction of Rows', t('Sum as Fraction of Rows')],\n                ['Sum as Fraction of Columns', t('Sum as Fraction of Columns')],\n                ['Count as Fraction of Total', t('Count as Fraction of Total')],\n                ['Count as Fraction of Rows', t('Count as Fraction of Rows')],\n                [\n                  'Count as Fraction of Columns',\n                  t('Count as Fraction of Columns'),\n                ],\n              ],\n              default: 'Sum',\n              description: t(\n                'Aggregate function to apply when pivoting and computing the total rows and columns',\n              ),\n              renderTrigger: true,\n            },\n          },\n        ],\n        [\n          {\n            name: 'rowTotals',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Show rows total'),\n              default: false,\n              renderTrigger: true,\n              description: t('Display row level total'),\n            },\n          },\n        ],\n        [\n          {\n            name: 'colTotals',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Show columns total'),\n              default: false,\n              renderTrigger: true,\n              description: t('Display column level total'),\n            },\n          },\n        ],\n        [\n          {\n            name: 'transposePivot',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Transpose pivot'),\n              default: false,\n              description: t('Swap rows and columns'),\n              renderTrigger: true,\n            },\n          },\n        ],\n        [\n          {\n            name: 'combineMetric',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Combine metrics'),\n              default: false,\n              description: t(\n                'Display metrics side by side within each column, as ' +\n                  'opposed to each column being displayed side by side for each metric.',\n              ),\n              renderTrigger: true,\n            },\n          },\n        ],\n      ],\n    },\n    {\n      label: t('Options'),\n      expanded: true,\n      controlSetRows: [\n        [\n          {\n            name: 'valueFormat',\n            config: {\n              ...sharedControls.y_axis_format,\n              label: t('Value format'),\n            },\n          },\n        ],\n        [\n          {\n            name: 'date_format',\n            config: {\n              type: 'SelectControl',\n              freeForm: true,\n              label: t('Date format'),\n              default: smartDateFormatter.id,\n              renderTrigger: true,\n              choices: D3_TIME_FORMAT_OPTIONS,\n              description: t('D3 time format for datetime columns'),\n            },\n          },\n        ],\n        [\n          {\n            name: 'rowOrder',\n            config: {\n              type: 'SelectControl',\n              label: t('Sort rows by'),\n              default: 'key_a_to_z',\n              choices: [\n                // [value, label]\n                ['key_a_to_z', t('key a-z')],\n                ['key_z_to_a', t('key z-a')],\n                ['value_a_to_z', t('value ascending')],\n                ['value_z_to_a', t('value descending')],\n              ],\n              renderTrigger: true,\n              description: (\n                <>\n                  <div>{t('Change order of rows.')}</div>\n                  <div>{t('Available sorting modes:')}</div>\n                  <ul>\n                    <li>{t('By key: use row names as sorting key')}</li>\n                    <li>{t('By value: use metric values as sorting key')}</li>\n                  </ul>\n                </>\n              ),\n            },\n          },\n        ],\n        [\n          {\n            name: 'colOrder',\n            config: {\n              type: 'SelectControl',\n              label: t('Sort columns by'),\n              default: 'key_a_to_z',\n              choices: [\n                // [value, label]\n                ['key_a_to_z', t('key a-z')],\n                ['key_z_to_a', t('key z-a')],\n                ['value_a_to_z', t('value ascending')],\n                ['value_z_to_a', t('value descending')],\n              ],\n              renderTrigger: true,\n              description: (\n                <>\n                  <div>{t('Change order of columns.')}</div>\n                  <div>{t('Available sorting modes:')}</div>\n                  <ul>\n                    <li>{t('By key: use column names as sorting key')}</li>\n                    <li>{t('By value: use metric values as sorting key')}</li>\n                  </ul>\n                </>\n              ),\n            },\n          },\n        ],\n        [\n          {\n            name: 'rowSubtotalPosition',\n            config: {\n              type: 'SelectControl',\n              label: t('Rows subtotal position'),\n              default: false,\n              choices: [\n                // [value, label]\n                [true, t('Top')],\n                [false, t('Bottom')],\n              ],\n              renderTrigger: true,\n              description: t('Position of row level subtotal'),\n            },\n          },\n        ],\n        [\n          {\n            name: 'colSubtotalPosition',\n            config: {\n              type: 'SelectControl',\n              label: t('Columns subtotal position'),\n              default: false,\n              choices: [\n                // [value, label]\n                [true, t('Left')],\n                [false, t('Right')],\n              ],\n              renderTrigger: true,\n              description: t('Position of column level subtotal'),\n            },\n          },\n        ],\n        [\n          {\n            name: 'conditional_formatting',\n            config: {\n              type: 'ConditionalFormattingControl',\n              renderTrigger: true,\n              label: t('Conditional formatting'),\n              description: t('Apply conditional color formatting to metrics'),\n              mapStateToProps(explore, _, chart) {\n                const values =\n                  (explore?.controls?.metrics?.value as QueryFormMetric[]) ??\n                  [];\n                const verboseMap = explore?.datasource?.hasOwnProperty(\n                  'verbose_map',\n                )\n                  ? (explore?.datasource as Dataset)?.verbose_map\n                  : explore?.datasource?.columns ?? {};\n                const chartStatus = chart?.chartStatus;\n                const metricColumn = values.map(value => {\n                  if (typeof value === 'string') {\n                    return { value, label: verboseMap[value] ?? value };\n                  }\n                  return { value: value.label, label: value.label };\n                });\n                return {\n                  removeIrrelevantConditions: chartStatus === 'success',\n                  columnOptions: metricColumn,\n                  verboseMap,\n                };\n              },\n            },\n          },\n        ],\n      ],\n    },\n  ],\n  formDataOverrides: formData => {\n    const groupbyColumns = getStandardizedControls().controls.columns.filter(\n      col => !ensureIsArray(formData.groupbyRows).includes(col),\n    );\n    getStandardizedControls().controls.columns =\n      getStandardizedControls().controls.columns.filter(\n        col => !groupbyColumns.includes(col),\n      );\n    return {\n      ...formData,\n      metrics: getStandardizedControls().popAllMetrics(),\n      groupbyColumns,\n    };\n  },\n};\n\nexport default config;\n"]},"metadata":{},"sourceType":"module"}