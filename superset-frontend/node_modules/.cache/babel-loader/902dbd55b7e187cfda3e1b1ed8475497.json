{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\";import _merge from \"lodash/merge\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\n\nimport { components as defaultComponents, createFilter } from 'react-select';\nimport { SortableContainer, SortableElement } from 'react-sortable-hoc';\nimport arrayMove from 'array-move';\nimport { useTheme } from '@superset-ui/core';\nimport { findValue } from './utils';\nimport { WindowedSelect, WindowedCreatableSelect, WindowedAsyncCreatableSelect } from './WindowedSelect';\nimport { DEFAULT_CLASS_NAME, DEFAULT_CLASS_NAME_PREFIX, DEFAULT_STYLES, DEFAULT_COMPONENTS, VALUE_LABELED_STYLES, defaultTheme } from './styles';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nfunction styled(SelectComponent) {\n  const SortableSelectComponent = SortableContainer(SelectComponent, {\n    withRef: true });\n\n  // default components for the given OptionType\n  const supersetDefaultComponents = DEFAULT_COMPONENTS;\n  const getSortableMultiValue = (MultiValue) => SortableElement((props) => {\n    const onMouseDown = (e) => {\n      e.preventDefault();\n      e.stopPropagation();\n    };\n    const innerProps = { onMouseDown };\n    return ___EmotionJSX(MultiValue, _extends({}, props, { innerProps: innerProps }));\n  });\n  /**\n   * Superset styled `Select` component. Apply Superset themed stylesheets and\n   * consolidate props API for backward compatibility with react-select v1.\n   */\n  function StyledSelect(selectProps) {\n    let stateManager; // reference to react-select StateManager\n    const {\n      // additional props for Superset Select\n      selectRef, labelKey = 'label', valueKey = 'value', themeConfig, stylesConfig = {}, optionRenderer, valueRenderer,\n      // whether value is rendered as `option-label` in input,\n      // useful for AdhocMetric and AdhocFilter\n      valueRenderedAsLabel: valueRenderedAsLabel_, onPaste, multi = false, // same as `isMulti`, used for backward compatibility\n      clearable, // same as `isClearable`\n      sortable = true, // whether to enable drag & drop sorting\n      forceOverflow, // whether the dropdown should be forcefully overflowing\n      // react-select props\n      className = DEFAULT_CLASS_NAME, classNamePrefix = DEFAULT_CLASS_NAME_PREFIX, options, value: value_, components: components_, isMulti: isMulti_, isClearable: isClearable_, minMenuHeight = 100, // apply different defaults\n      maxMenuHeight = 220, filterOption, ignoreAccents = false, // default is `true`, but it is slow\n      asText = (value) => String(value != null ? value : ''), getOptionValue = (option) => typeof option === 'string' ? option : option[valueKey], getOptionLabel = (option) => typeof option === 'string' ?\n      option :\n      asText(option[labelKey]) || asText(option[valueKey]), formatOptionLabel = (option, _ref) => {let { context } = _ref;\n        if (context === 'value') {\n          return valueRenderer ? valueRenderer(option) : getOptionLabel(option);\n        }\n        return optionRenderer ? optionRenderer(option) : getOptionLabel(option);\n      }, ...restProps } = selectProps;\n    // `value` may be rendered values (strings), we want option objects\n    const value = findValue(value_, options || [], valueKey);\n    // Add backward compatibility to v1 API\n    const isMulti = isMulti_ === undefined ? multi : isMulti_;\n    const isClearable = isClearable_ === undefined ? clearable : isClearable_;\n    // Sort is only applied when there are multiple selected values\n    const shouldAllowSort = isMulti && sortable && Array.isArray(value) && value.length > 1;\n    const MaybeSortableSelect = shouldAllowSort ?\n    SortableSelectComponent :\n    SelectComponent;\n    const components = { ...supersetDefaultComponents, ...components_ };\n    // Make multi-select sortable as per https://react-select.netlify.app/advanced\n    if (shouldAllowSort) {\n      components.MultiValue = getSortableMultiValue(components.MultiValue || defaultComponents.MultiValue);\n      const sortableContainerProps = {\n        getHelperDimensions: (_ref2) => {let { node } = _ref2;return node.getBoundingClientRect();},\n        axis: 'xy',\n        onSortEnd: (_ref3) => {let { oldIndex, newIndex } = _ref3;\n          const newValue = arrayMove(value, oldIndex, newIndex);\n          if (restProps.onChange) {\n            restProps.onChange(newValue, { action: 'set-value' });\n          }\n        },\n        distance: 4 };\n\n      Object.assign(restProps, sortableContainerProps);\n    }\n    // When values are rendered as labels, adjust valueContainer padding\n    const valueRenderedAsLabel = valueRenderedAsLabel_ === undefined ? isMulti : valueRenderedAsLabel_;\n    if (valueRenderedAsLabel && !stylesConfig.valueContainer) {\n      Object.assign(stylesConfig, VALUE_LABELED_STYLES);\n    }\n    // Handle onPaste event\n    if (onPaste) {\n      const Input = components.Input ||\n      defaultComponents.Input;\n      components.Input = (props) => ___EmotionJSX(Input, _extends({}, props, { onPaste: onPaste }));\n    }\n    // for CreaTable\n    if (SelectComponent === WindowedCreatableSelect) {\n      restProps.getNewOptionData = (inputValue, label) => ({\n        label: label || inputValue,\n        [valueKey]: inputValue,\n        isNew: true });\n\n    }\n    // handle forcing dropdown overflow\n    // use only when setting overflow:visible isn't possible on the container element\n    if (forceOverflow) {\n      Object.assign(restProps, {\n        closeMenuOnScroll: (e) => {var _stateManager, _stateManager$state, _target$classList;\n          // ensure menu is open\n          const menuIsOpen = (_stateManager = stateManager) == null ? void 0 : (_stateManager$state = _stateManager.state) == null ? void 0 : _stateManager$state.\n          menuIsOpen;\n          const target = e.target;\n          return menuIsOpen &&\n          target &&\n          !((_target$classList = target.classList) != null && _target$classList.contains('Select__menu-list'));\n        },\n        menuPosition: 'fixed' });\n\n    }\n    // Make sure always return StateManager for the refs.\n    // To get the real `Select` component, keep tap into `obj.select`:\n    //   - for normal <Select /> component: StateManager -> Select,\n    //   - for <Creatable />: StateManager -> Creatable -> Select\n    const setRef = (instance) => {\n      stateManager =\n      shouldAllowSort && instance && 'refs' in instance ?\n      instance.refs.wrappedInstance // obtain StateManger from SortableContainer\n      : instance;\n      if (typeof selectRef === 'function') {\n        selectRef(stateManager);\n      } else\n      if (selectRef && 'current' in selectRef) {\n        selectRef.current = stateManager;\n      }\n    };\n    const theme = useTheme();\n    return ___EmotionJSX(MaybeSortableSelect, _extends({ ref: setRef, className: className, classNamePrefix: classNamePrefix, isMulti: isMulti, isClearable: isClearable, options: options, value: value, minMenuHeight: minMenuHeight, maxMenuHeight: maxMenuHeight, filterOption:\n      // filterOption may be NULL\n      filterOption !== undefined ?\n      filterOption :\n      createFilter({ ignoreAccents }), styles: { ...DEFAULT_STYLES, ...stylesConfig }\n      // merge default theme from `react-select`, default theme for Superset,\n      // and the theme from props.\n      , theme: (reactSelectTheme) => _merge(reactSelectTheme, defaultTheme(theme), themeConfig), formatOptionLabel: formatOptionLabel, getOptionLabel: getOptionLabel, getOptionValue: getOptionValue, components: components }, restProps));\n  }\n  // React.memo makes sure the component does no rerender given the same props\n  return /*#__PURE__*/React.memo(StyledSelect);\n}\nexport const Select = styled(WindowedSelect);\nexport const CreatableSelect = styled(WindowedCreatableSelect);\nexport const AsyncCreatableSelect = styled(WindowedAsyncCreatableSelect);\nexport default Select;","map":{"version":3,"mappings":"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","names":["React","components","defaultComponents","createFilter","SortableContainer","SortableElement","arrayMove","useTheme","findValue","WindowedSelect","WindowedCreatableSelect","WindowedAsyncCreatableSelect","DEFAULT_CLASS_NAME","DEFAULT_CLASS_NAME_PREFIX","DEFAULT_STYLES","DEFAULT_COMPONENTS","VALUE_LABELED_STYLES","defaultTheme","styled","SelectComponent","SortableSelectComponent","withRef","supersetDefaultComponents","getSortableMultiValue","MultiValue","props","onMouseDown","e","preventDefault","stopPropagation","innerProps","StyledSelect","selectProps","stateManager","selectRef","labelKey","valueKey","themeConfig","stylesConfig","optionRenderer","valueRenderer","valueRenderedAsLabel","valueRenderedAsLabel_","onPaste","multi","clearable","sortable","forceOverflow","className","classNamePrefix","options","value","value_","components_","isMulti","isMulti_","isClearable","isClearable_","minMenuHeight","maxMenuHeight","filterOption","ignoreAccents","asText","String","getOptionValue","option","getOptionLabel","formatOptionLabel","context","restProps","undefined","shouldAllowSort","Array","isArray","length","MaybeSortableSelect","sortableContainerProps","getHelperDimensions","node","getBoundingClientRect","axis","onSortEnd","oldIndex","newIndex","newValue","onChange","action","distance","Object","assign","valueContainer","Input","getNewOptionData","inputValue","label","isNew","closeMenuOnScroll","menuIsOpen","state","target","classList","contains","menuPosition","setRef","instance","refs","wrappedInstance","current","theme","reactSelectTheme","memo","Select","CreatableSelect","AsyncCreatableSelect"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/DeprecatedSelect/DeprecatedSelect.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { SyntheticEvent, MutableRefObject, ComponentType } from 'react';\nimport { merge } from 'lodash';\nimport BasicSelect, {\n  OptionTypeBase,\n  MultiValueProps,\n  FormatOptionLabelMeta,\n  ValueType,\n  SelectComponentsConfig,\n  components as defaultComponents,\n  createFilter,\n  Props as SelectProps,\n} from 'react-select';\nimport Async from 'react-select/async';\nimport Creatable from 'react-select/creatable';\nimport AsyncCreatable from 'react-select/async-creatable';\n\nimport type { SelectComponents } from 'react-select/src/components';\nimport {\n  SortableContainer,\n  SortableElement,\n  SortableContainerProps,\n} from 'react-sortable-hoc';\nimport arrayMove from 'array-move';\nimport { useTheme } from '@superset-ui/core';\nimport { findValue } from './utils';\nimport {\n  WindowedSelectComponentType,\n  WindowedSelectProps,\n  WindowedSelect,\n  WindowedCreatableSelect,\n  WindowedAsyncCreatableSelect,\n} from './WindowedSelect';\nimport {\n  DEFAULT_CLASS_NAME,\n  DEFAULT_CLASS_NAME_PREFIX,\n  DEFAULT_STYLES,\n  DEFAULT_COMPONENTS,\n  VALUE_LABELED_STYLES,\n  PartialThemeConfig,\n  PartialStylesConfig,\n  SelectComponentsType,\n  InputProps,\n  defaultTheme,\n} from './styles';\n\ntype AnyReactSelect<OptionType extends OptionTypeBase> =\n  | BasicSelect<OptionType>\n  | Async<OptionType>\n  | Creatable<OptionType>\n  | AsyncCreatable<OptionType>;\n\nexport type SupersetStyledSelectProps<\n  OptionType extends OptionTypeBase,\n  T extends WindowedSelectProps<OptionType> = WindowedSelectProps<OptionType>,\n> = T & {\n  // additional props for easier usage or backward compatibility\n  labelKey?: string;\n  valueKey?: string;\n  assistiveText?: string;\n  multi?: boolean;\n  clearable?: boolean;\n  sortable?: boolean;\n  ignoreAccents?: boolean;\n  creatable?: boolean;\n  selectRef?:\n    | React.RefCallback<AnyReactSelect<OptionType>>\n    | MutableRefObject<AnyReactSelect<OptionType>>;\n  getInputValue?: (selectBalue: ValueType<OptionType>) => string | undefined;\n  optionRenderer?: (option: OptionType) => React.ReactNode;\n  valueRenderer?: (option: OptionType) => React.ReactNode;\n  valueRenderedAsLabel?: boolean;\n  // callback for paste event\n  onPaste?: (e: SyntheticEvent) => void;\n  forceOverflow?: boolean;\n  // for simpler theme overrides\n  themeConfig?: PartialThemeConfig;\n  stylesConfig?: PartialStylesConfig;\n};\n\nfunction styled<\n  OptionType extends OptionTypeBase,\n  SelectComponentType extends\n    | WindowedSelectComponentType<OptionType>\n    | ComponentType<\n        SelectProps<OptionType>\n      > = WindowedSelectComponentType<OptionType>,\n>(SelectComponent: SelectComponentType) {\n  type SelectProps = SupersetStyledSelectProps<OptionType>;\n  type Components = SelectComponents<OptionType>;\n\n  const SortableSelectComponent = SortableContainer(SelectComponent, {\n    withRef: true,\n  });\n\n  // default components for the given OptionType\n  const supersetDefaultComponents: SelectComponentsConfig<OptionType> =\n    DEFAULT_COMPONENTS;\n\n  const getSortableMultiValue = (MultiValue: Components['MultiValue']) =>\n    SortableElement((props: MultiValueProps<OptionType>) => {\n      const onMouseDown = (e: SyntheticEvent) => {\n        e.preventDefault();\n        e.stopPropagation();\n      };\n      const innerProps = { onMouseDown };\n      return <MultiValue {...props} innerProps={innerProps} />;\n    });\n\n  /**\n   * Superset styled `Select` component. Apply Superset themed stylesheets and\n   * consolidate props API for backward compatibility with react-select v1.\n   */\n  function StyledSelect(selectProps: SelectProps) {\n    let stateManager: AnyReactSelect<OptionType>; // reference to react-select StateManager\n    const {\n      // additional props for Superset Select\n      selectRef,\n      labelKey = 'label',\n      valueKey = 'value',\n      themeConfig,\n      stylesConfig = {},\n      optionRenderer,\n      valueRenderer,\n      // whether value is rendered as `option-label` in input,\n      // useful for AdhocMetric and AdhocFilter\n      valueRenderedAsLabel: valueRenderedAsLabel_,\n      onPaste,\n      multi = false, // same as `isMulti`, used for backward compatibility\n      clearable, // same as `isClearable`\n      sortable = true, // whether to enable drag & drop sorting\n      forceOverflow, // whether the dropdown should be forcefully overflowing\n\n      // react-select props\n      className = DEFAULT_CLASS_NAME,\n      classNamePrefix = DEFAULT_CLASS_NAME_PREFIX,\n      options,\n      value: value_,\n      components: components_,\n      isMulti: isMulti_,\n      isClearable: isClearable_,\n      minMenuHeight = 100, // apply different defaults\n      maxMenuHeight = 220,\n      filterOption,\n      ignoreAccents = false, // default is `true`, but it is slow\n\n      asText = (value: any) => String(value ?? ''),\n\n      getOptionValue = option =>\n        typeof option === 'string' ? option : option[valueKey],\n\n      getOptionLabel = option =>\n        typeof option === 'string'\n          ? option\n          : asText(option[labelKey]) || asText(option[valueKey]),\n\n      formatOptionLabel = (\n        option: OptionType,\n        { context }: FormatOptionLabelMeta<OptionType>,\n      ) => {\n        if (context === 'value') {\n          return valueRenderer ? valueRenderer(option) : getOptionLabel(option);\n        }\n        return optionRenderer ? optionRenderer(option) : getOptionLabel(option);\n      },\n\n      ...restProps\n    } = selectProps;\n\n    // `value` may be rendered values (strings), we want option objects\n    const value: OptionType[] = findValue(value_, options || [], valueKey);\n\n    // Add backward compatibility to v1 API\n    const isMulti = isMulti_ === undefined ? multi : isMulti_;\n    const isClearable = isClearable_ === undefined ? clearable : isClearable_;\n\n    // Sort is only applied when there are multiple selected values\n    const shouldAllowSort =\n      isMulti && sortable && Array.isArray(value) && value.length > 1;\n\n    const MaybeSortableSelect = shouldAllowSort\n      ? SortableSelectComponent\n      : SelectComponent;\n    const components = { ...supersetDefaultComponents, ...components_ };\n\n    // Make multi-select sortable as per https://react-select.netlify.app/advanced\n    if (shouldAllowSort) {\n      components.MultiValue = getSortableMultiValue(\n        components.MultiValue || defaultComponents.MultiValue,\n      );\n\n      const sortableContainerProps: Partial<SortableContainerProps> = {\n        getHelperDimensions: ({ node }) => node.getBoundingClientRect(),\n        axis: 'xy',\n        onSortEnd: ({ oldIndex, newIndex }) => {\n          const newValue = arrayMove(value, oldIndex, newIndex);\n          if (restProps.onChange) {\n            restProps.onChange(newValue, { action: 'set-value' });\n          }\n        },\n        distance: 4,\n      };\n      Object.assign(restProps, sortableContainerProps);\n    }\n\n    // When values are rendered as labels, adjust valueContainer padding\n    const valueRenderedAsLabel =\n      valueRenderedAsLabel_ === undefined ? isMulti : valueRenderedAsLabel_;\n    if (valueRenderedAsLabel && !stylesConfig.valueContainer) {\n      Object.assign(stylesConfig, VALUE_LABELED_STYLES);\n    }\n\n    // Handle onPaste event\n    if (onPaste) {\n      const Input =\n        (components.Input as SelectComponentsType['Input']) ||\n        (defaultComponents.Input as SelectComponentsType['Input']);\n      components.Input = (props: InputProps) => (\n        <Input {...props} onPaste={onPaste} />\n      );\n    }\n    // for CreaTable\n    if (SelectComponent === WindowedCreatableSelect) {\n      restProps.getNewOptionData = (inputValue: string, label: string) => ({\n        label: label || inputValue,\n        [valueKey]: inputValue,\n        isNew: true,\n      });\n    }\n\n    // handle forcing dropdown overflow\n    // use only when setting overflow:visible isn't possible on the container element\n    if (forceOverflow) {\n      Object.assign(restProps, {\n        closeMenuOnScroll: (e: Event) => {\n          // ensure menu is open\n          const menuIsOpen = (stateManager as BasicSelect<OptionType>)?.state\n            ?.menuIsOpen;\n          const target = e.target as HTMLElement;\n          return (\n            menuIsOpen &&\n            target &&\n            !target.classList?.contains('Select__menu-list')\n          );\n        },\n        menuPosition: 'fixed',\n      });\n    }\n\n    // Make sure always return StateManager for the refs.\n    // To get the real `Select` component, keep tap into `obj.select`:\n    //   - for normal <Select /> component: StateManager -> Select,\n    //   - for <Creatable />: StateManager -> Creatable -> Select\n    const setRef = (instance: any) => {\n      stateManager =\n        shouldAllowSort && instance && 'refs' in instance\n          ? instance.refs.wrappedInstance // obtain StateManger from SortableContainer\n          : instance;\n      if (typeof selectRef === 'function') {\n        selectRef(stateManager);\n      } else if (selectRef && 'current' in selectRef) {\n        selectRef.current = stateManager;\n      }\n    };\n\n    const theme = useTheme();\n\n    return (\n      <MaybeSortableSelect\n        ref={setRef}\n        className={className}\n        classNamePrefix={classNamePrefix}\n        isMulti={isMulti}\n        isClearable={isClearable}\n        options={options}\n        value={value}\n        minMenuHeight={minMenuHeight}\n        maxMenuHeight={maxMenuHeight}\n        filterOption={\n          // filterOption may be NULL\n          filterOption !== undefined\n            ? filterOption\n            : createFilter({ ignoreAccents })\n        }\n        styles={{ ...DEFAULT_STYLES, ...stylesConfig } as SelectProps['styles']}\n        // merge default theme from `react-select`, default theme for Superset,\n        // and the theme from props.\n        theme={reactSelectTheme =>\n          merge(reactSelectTheme, defaultTheme(theme), themeConfig)\n        }\n        formatOptionLabel={formatOptionLabel}\n        getOptionLabel={getOptionLabel}\n        getOptionValue={getOptionValue}\n        components={components}\n        {...restProps}\n      />\n    );\n  }\n\n  // React.memo makes sure the component does no rerender given the same props\n  return React.memo(StyledSelect);\n}\n\nexport const Select = styled(WindowedSelect);\nexport const CreatableSelect = styled(WindowedCreatableSelect);\nexport const AsyncCreatableSelect = styled(WindowedAsyncCreatableSelect);\nexport default Select;\n"]},"metadata":{},"sourceType":"module"}