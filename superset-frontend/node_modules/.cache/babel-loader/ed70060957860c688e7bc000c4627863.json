{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { DTTM_ALIAS, AxisType, getTimeFormatter, getColumnLabel, getNumberFormatter } from '@superset-ui/core';\nimport Echart from '../components/Echart';\nimport { currentSeries, formatSeriesName } from '../utils/series';\nimport { ExtraControls } from '../components/ExtraControls';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst TIMER_DURATION = 300;\n// @ts-ignore\nexport default function EchartsTimeseries(_ref) {let { formData, height, width, echartOptions, groupby, labelMap, selectedValues, setDataMask, setControlValue, legendData = [], onContextMenu, xValueFormatter, xAxis, refs, emitCrossFilters, coltypeMapping } = _ref;\n  const { stack } = formData;\n  const echartRef = useRef(null);\n  // eslint-disable-next-line no-param-reassign\n  refs.echartRef = echartRef;\n  const lastTimeRef = useRef(Date.now());\n  const lastSelectedLegend = useRef('');\n  const clickTimer = useRef();\n  const extraControlRef = useRef(null);\n  const [extraControlHeight, setExtraControlHeight] = useState(0);\n  useEffect(() => {var _extraControlRef$curr;\n    const updatedHeight = ((_extraControlRef$curr = extraControlRef.current) == null ? void 0 : _extraControlRef$curr.offsetHeight) || 0;\n    setExtraControlHeight(updatedHeight);\n  }, [formData.showExtraControls]);\n  const handleDoubleClickChange = useCallback((name) => {var _echartRef$current;\n    const echartInstance = (_echartRef$current = echartRef.current) == null ? void 0 : _echartRef$current.getEchartInstance();\n    if (!name) {\n      currentSeries.legend = '';\n      echartInstance == null ? void 0 : echartInstance.dispatchAction({\n        type: 'legendAllSelect' });\n\n    } else\n    {\n      legendData.forEach((datum) => {\n        if (datum === name) {\n          currentSeries.legend = datum;\n          echartInstance == null ? void 0 : echartInstance.dispatchAction({\n            type: 'legendSelect',\n            name: datum });\n\n        } else\n        {\n          echartInstance == null ? void 0 : echartInstance.dispatchAction({\n            type: 'legendUnSelect',\n            name: datum });\n\n        }\n      });\n    }\n  }, [legendData]);\n  const getModelInfo = (target, globalModel) => {\n    let el = target;\n    let model = null;\n    while (el) {\n      // eslint-disable-next-line no-underscore-dangle\n      const modelInfo = el.__ecComponentInfo;\n      if (modelInfo != null) {\n        model = globalModel.getComponent(modelInfo.mainType, modelInfo.index);\n        break;\n      }\n      el = el.parent;\n    }\n    return model;\n  };\n  const getCrossFilterDataMask = useCallback((value) => {\n    const selected = Object.values(selectedValues);\n    let values;\n    if (_includesInstanceProperty(selected).call(selected, value)) {\n      values = selected.filter((v) => v !== value);\n    } else\n    {\n      values = [value];\n    }\n    const groupbyValues = values.map((value) => labelMap[value]);\n    return {\n      dataMask: {\n        extraFormData: {\n          filters: values.length === 0 ?\n          [] :\n          groupby.map((col, idx) => {\n            const val = groupbyValues.map((v) => v[idx]);\n            if (val === null || val === undefined)\n            return {\n              col,\n              op: 'IS NULL' };\n\n            return {\n              col,\n              op: 'IN',\n              val: val };\n\n          }) },\n\n        filterState: {\n          label: groupbyValues.length ? groupbyValues : undefined,\n          value: groupbyValues.length ? groupbyValues : null,\n          selectedValues: values.length ? values : null } },\n\n\n      isCurrentValueSelected: _includesInstanceProperty(selected).call(selected, value) };\n\n  }, [groupby, labelMap, selectedValues]);\n  const handleChange = useCallback((value) => {\n    if (!emitCrossFilters) {\n      return;\n    }\n    setDataMask(getCrossFilterDataMask(value).dataMask);\n  }, [emitCrossFilters, setDataMask, getCrossFilterDataMask]);\n  const eventHandlers = {\n    click: (props) => {\n      if (clickTimer.current) {\n        clearTimeout(clickTimer.current);\n      }\n      // Ensure that double-click events do not trigger single click event. So we put it in the timer.\n      clickTimer.current = setTimeout(() => {\n        const { seriesName: name } = props;\n        handleChange(name);\n      }, TIMER_DURATION);\n    },\n    mouseout: () => {\n      currentSeries.name = '';\n    },\n    mouseover: (params) => {\n      currentSeries.name = params.seriesName;\n    },\n    legendselectchanged: (payload) => {\n      const currentTime = Date.now();\n      // TIMER_DURATION is the interval between two legendselectchanged event\n      if (currentTime - lastTimeRef.current < TIMER_DURATION &&\n      lastSelectedLegend.current === payload.name) {\n        // execute dbclick\n        handleDoubleClickChange(payload.name);\n      } else\n      {\n        lastTimeRef.current = currentTime;\n        // remember last selected legend\n        lastSelectedLegend.current = payload.name;\n      }\n      // if all legend is unselected, we keep all selected\n      if (Object.values(payload.selected).every((i) => !i)) {\n        handleDoubleClickChange();\n      }\n    },\n    contextmenu: async (eventParams) => {\n      if (onContextMenu) {var _labelMap$seriesName;\n        eventParams.event.stop();\n        const { data, seriesName } = eventParams;\n        const drillToDetailFilters = [];\n        const drillByFilters = [];\n        const pointerEvent = eventParams.event.event;\n        const values = [\n        ...(eventParams.name ? [eventParams.name] : []),\n        ...((_labelMap$seriesName = labelMap[seriesName]) != null ? _labelMap$seriesName : [])];\n\n        if (data && xAxis.type === AxisType.time) {\n          drillToDetailFilters.push({\n            col:\n            // if the xAxis is '__timestamp', granularity_sqla will be the column of filter\n            xAxis.label === DTTM_ALIAS ?\n            formData.granularitySqla :\n            xAxis.label,\n            grain: formData.timeGrainSqla,\n            op: '==',\n            val: data[0],\n            formattedVal: xValueFormatter(data[0]) });\n\n        }\n        [\n        ...(xAxis.type === AxisType.category && data ? [xAxis.label] : []),\n        ...formData.groupby].\n        forEach((dimension, i) => drillToDetailFilters.push({\n          col: dimension,\n          op: '==',\n          val: values[i],\n          formattedVal: String(values[i]) }));\n\n        formData.groupby.forEach((dimension, i) => {\n          const val = labelMap[seriesName][i];\n          drillByFilters.push({\n            col: dimension,\n            op: '==',\n            val,\n            formattedVal: formatSeriesName(values[i], {\n              timeFormatter: getTimeFormatter(formData.dateFormat),\n              numberFormatter: getNumberFormatter(formData.numberFormat),\n              coltype: coltypeMapping == null ? void 0 : coltypeMapping[getColumnLabel(dimension)] }) });\n\n\n        });\n        onContextMenu(pointerEvent.clientX, pointerEvent.clientY, {\n          drillToDetail: drillToDetailFilters,\n          crossFilter: getCrossFilterDataMask(seriesName),\n          drillBy: { filters: drillByFilters, groupbyFieldName: 'groupby' } });\n\n      }\n    } };\n\n  const zrEventHandlers = {\n    dblclick: (params) => {var _echartRef$current2;\n      // clear single click timer\n      if (clickTimer.current) {\n        clearTimeout(clickTimer.current);\n      }\n      const pointInPixel = [params.offsetX, params.offsetY];\n      const echartInstance = (_echartRef$current2 = echartRef.current) == null ? void 0 : _echartRef$current2.getEchartInstance();\n      if (echartInstance != null && echartInstance.containPixel('grid', pointInPixel)) {var _params$target;\n        // do not trigger if click unstacked chart's blank area\n        if (!stack && ((_params$target = params.target) == null ? void 0 : _params$target.type) === 'ec-polygon')\n        return;\n        // @ts-ignore\n        const globalModel = echartInstance.getModel();\n        const model = getModelInfo(params.target, globalModel);\n        const seriesCount = globalModel.getSeriesCount();\n        const currentSeriesIndices = globalModel.getCurrentSeriesIndices();\n        if (model) {\n          const { name } = model;\n          if (seriesCount !== currentSeriesIndices.length) {\n            handleDoubleClickChange();\n          } else\n          {\n            handleDoubleClickChange(name);\n          }\n        }\n      }\n    } };\n\n  return ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(\"div\", { ref: extraControlRef },\n  ___EmotionJSX(ExtraControls, { formData: formData, setControlValue: setControlValue })),\n\n  ___EmotionJSX(Echart, { refs: refs, height: height - extraControlHeight, width: width, echartOptions: echartOptions, eventHandlers: eventHandlers, zrEventHandlers: zrEventHandlers, selectedValues: selectedValues }));\n\n}__signature__(EchartsTimeseries, \"useRef{echartRef}\\nuseRef{lastTimeRef}\\nuseRef{lastSelectedLegend}\\nuseRef{clickTimer}\\nuseRef{extraControlRef}\\nuseState{[extraControlHeight, setExtraControlHeight](0)}\\nuseEffect{}\\nuseCallback{handleDoubleClickChange}\\nuseCallback{getCrossFilterDataMask}\\nuseCallback{handleChange}\");;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(TIMER_DURATION, \"TIMER_DURATION\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-echarts/src/Timeseries/EchartsTimeseries.tsx\");reactHotLoader.register(EchartsTimeseries, \"EchartsTimeseries\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-echarts/src/Timeseries/EchartsTimeseries.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"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","names":["React","useCallback","useEffect","useRef","useState","DTTM_ALIAS","AxisType","getTimeFormatter","getColumnLabel","getNumberFormatter","Echart","currentSeries","formatSeriesName","ExtraControls","TIMER_DURATION","EchartsTimeseries","formData","height","width","echartOptions","groupby","labelMap","selectedValues","setDataMask","setControlValue","legendData","onContextMenu","xValueFormatter","xAxis","refs","emitCrossFilters","coltypeMapping","stack","echartRef","lastTimeRef","Date","now","lastSelectedLegend","clickTimer","extraControlRef","extraControlHeight","setExtraControlHeight","updatedHeight","current","offsetHeight","showExtraControls","handleDoubleClickChange","name","echartInstance","getEchartInstance","legend","dispatchAction","type","forEach","datum","getModelInfo","target","globalModel","el","model","modelInfo","__ecComponentInfo","getComponent","mainType","index","parent","getCrossFilterDataMask","value","selected","Object","values","filter","v","groupbyValues","map","dataMask","extraFormData","filters","length","col","idx","val","undefined","op","filterState","label","isCurrentValueSelected","handleChange","eventHandlers","click","clearTimeout","setTimeout","seriesName","props","mouseout","mouseover","params","legendselectchanged","currentTime","payload","every","i","contextmenu","eventParams","event","stop","data","drillToDetailFilters","drillByFilters","pointerEvent","time","push","granularitySqla","grain","timeGrainSqla","formattedVal","category","dimension","String","timeFormatter","dateFormat","numberFormatter","numberFormat","coltype","clientX","clientY","drillToDetail","crossFilter","drillBy","groupbyFieldName","zrEventHandlers","dblclick","pointInPixel","offsetX","offsetY","containPixel","getModel","seriesCount","getSeriesCount","currentSeriesIndices","getCurrentSeriesIndices"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-echarts/src/Timeseries/EchartsTimeseries.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport {\n  DTTM_ALIAS,\n  BinaryQueryObjectFilterClause,\n  AxisType,\n  getTimeFormatter,\n  getColumnLabel,\n  getNumberFormatter,\n} from '@superset-ui/core';\nimport { ViewRootGroup } from 'echarts/types/src/util/types';\nimport GlobalModel from 'echarts/types/src/model/Global';\nimport ComponentModel from 'echarts/types/src/model/Component';\nimport { EchartsHandler, EventHandlers } from '../types';\nimport Echart from '../components/Echart';\nimport { TimeseriesChartTransformedProps } from './types';\nimport { currentSeries, formatSeriesName } from '../utils/series';\nimport { ExtraControls } from '../components/ExtraControls';\n\nconst TIMER_DURATION = 300;\n\n// @ts-ignore\nexport default function EchartsTimeseries({\n  formData,\n  height,\n  width,\n  echartOptions,\n  groupby,\n  labelMap,\n  selectedValues,\n  setDataMask,\n  setControlValue,\n  legendData = [],\n  onContextMenu,\n  xValueFormatter,\n  xAxis,\n  refs,\n  emitCrossFilters,\n  coltypeMapping,\n}: TimeseriesChartTransformedProps) {\n  const { stack } = formData;\n  const echartRef = useRef<EchartsHandler | null>(null);\n  // eslint-disable-next-line no-param-reassign\n  refs.echartRef = echartRef;\n  const lastTimeRef = useRef(Date.now());\n  const lastSelectedLegend = useRef('');\n  const clickTimer = useRef<ReturnType<typeof setTimeout>>();\n  const extraControlRef = useRef<HTMLDivElement>(null);\n  const [extraControlHeight, setExtraControlHeight] = useState(0);\n  useEffect(() => {\n    const updatedHeight = extraControlRef.current?.offsetHeight || 0;\n    setExtraControlHeight(updatedHeight);\n  }, [formData.showExtraControls]);\n\n  const handleDoubleClickChange = useCallback(\n    (name?: string) => {\n      const echartInstance = echartRef.current?.getEchartInstance();\n      if (!name) {\n        currentSeries.legend = '';\n        echartInstance?.dispatchAction({\n          type: 'legendAllSelect',\n        });\n      } else {\n        legendData.forEach(datum => {\n          if (datum === name) {\n            currentSeries.legend = datum;\n            echartInstance?.dispatchAction({\n              type: 'legendSelect',\n              name: datum,\n            });\n          } else {\n            echartInstance?.dispatchAction({\n              type: 'legendUnSelect',\n              name: datum,\n            });\n          }\n        });\n      }\n    },\n    [legendData],\n  );\n\n  const getModelInfo = (target: ViewRootGroup, globalModel: GlobalModel) => {\n    let el = target;\n    let model: ComponentModel | null = null;\n    while (el) {\n      // eslint-disable-next-line no-underscore-dangle\n      const modelInfo = el.__ecComponentInfo;\n      if (modelInfo != null) {\n        model = globalModel.getComponent(modelInfo.mainType, modelInfo.index);\n        break;\n      }\n      el = el.parent;\n    }\n    return model;\n  };\n\n  const getCrossFilterDataMask = useCallback(\n    (value: string) => {\n      const selected: string[] = Object.values(selectedValues);\n      let values: string[];\n      if (selected.includes(value)) {\n        values = selected.filter(v => v !== value);\n      } else {\n        values = [value];\n      }\n      const groupbyValues = values.map(value => labelMap[value]);\n      return {\n        dataMask: {\n          extraFormData: {\n            filters:\n              values.length === 0\n                ? []\n                : groupby.map((col, idx) => {\n                    const val = groupbyValues.map(v => v[idx]);\n                    if (val === null || val === undefined)\n                      return {\n                        col,\n                        op: 'IS NULL' as const,\n                      };\n                    return {\n                      col,\n                      op: 'IN' as const,\n                      val: val as (string | number | boolean)[],\n                    };\n                  }),\n          },\n          filterState: {\n            label: groupbyValues.length ? groupbyValues : undefined,\n            value: groupbyValues.length ? groupbyValues : null,\n            selectedValues: values.length ? values : null,\n          },\n        },\n        isCurrentValueSelected: selected.includes(value),\n      };\n    },\n    [groupby, labelMap, selectedValues],\n  );\n\n  const handleChange = useCallback(\n    (value: string) => {\n      if (!emitCrossFilters) {\n        return;\n      }\n      setDataMask(getCrossFilterDataMask(value).dataMask);\n    },\n    [emitCrossFilters, setDataMask, getCrossFilterDataMask],\n  );\n\n  const eventHandlers: EventHandlers = {\n    click: props => {\n      if (clickTimer.current) {\n        clearTimeout(clickTimer.current);\n      }\n      // Ensure that double-click events do not trigger single click event. So we put it in the timer.\n      clickTimer.current = setTimeout(() => {\n        const { seriesName: name } = props;\n        handleChange(name);\n      }, TIMER_DURATION);\n    },\n    mouseout: () => {\n      currentSeries.name = '';\n    },\n    mouseover: params => {\n      currentSeries.name = params.seriesName;\n    },\n    legendselectchanged: payload => {\n      const currentTime = Date.now();\n      // TIMER_DURATION is the interval between two legendselectchanged event\n      if (\n        currentTime - lastTimeRef.current < TIMER_DURATION &&\n        lastSelectedLegend.current === payload.name\n      ) {\n        // execute dbclick\n        handleDoubleClickChange(payload.name);\n      } else {\n        lastTimeRef.current = currentTime;\n        // remember last selected legend\n        lastSelectedLegend.current = payload.name;\n      }\n      // if all legend is unselected, we keep all selected\n      if (Object.values(payload.selected).every(i => !i)) {\n        handleDoubleClickChange();\n      }\n    },\n    contextmenu: async eventParams => {\n      if (onContextMenu) {\n        eventParams.event.stop();\n        const { data, seriesName } = eventParams;\n        const drillToDetailFilters: BinaryQueryObjectFilterClause[] = [];\n        const drillByFilters: BinaryQueryObjectFilterClause[] = [];\n        const pointerEvent = eventParams.event.event;\n        const values = [\n          ...(eventParams.name ? [eventParams.name] : []),\n          ...(labelMap[seriesName] ?? []),\n        ];\n        if (data && xAxis.type === AxisType.time) {\n          drillToDetailFilters.push({\n            col:\n              // if the xAxis is '__timestamp', granularity_sqla will be the column of filter\n              xAxis.label === DTTM_ALIAS\n                ? formData.granularitySqla\n                : xAxis.label,\n            grain: formData.timeGrainSqla,\n            op: '==',\n            val: data[0],\n            formattedVal: xValueFormatter(data[0]),\n          });\n        }\n        [\n          ...(xAxis.type === AxisType.category && data ? [xAxis.label] : []),\n          ...formData.groupby,\n        ].forEach((dimension, i) =>\n          drillToDetailFilters.push({\n            col: dimension,\n            op: '==',\n            val: values[i],\n            formattedVal: String(values[i]),\n          }),\n        );\n        formData.groupby.forEach((dimension, i) => {\n          const val = labelMap[seriesName][i];\n          drillByFilters.push({\n            col: dimension,\n            op: '==',\n            val,\n            formattedVal: formatSeriesName(values[i], {\n              timeFormatter: getTimeFormatter(formData.dateFormat),\n              numberFormatter: getNumberFormatter(formData.numberFormat),\n              coltype: coltypeMapping?.[getColumnLabel(dimension)],\n            }),\n          });\n        });\n\n        onContextMenu(pointerEvent.clientX, pointerEvent.clientY, {\n          drillToDetail: drillToDetailFilters,\n          crossFilter: getCrossFilterDataMask(seriesName),\n          drillBy: { filters: drillByFilters, groupbyFieldName: 'groupby' },\n        });\n      }\n    },\n  };\n\n  const zrEventHandlers: EventHandlers = {\n    dblclick: params => {\n      // clear single click timer\n      if (clickTimer.current) {\n        clearTimeout(clickTimer.current);\n      }\n      const pointInPixel = [params.offsetX, params.offsetY];\n      const echartInstance = echartRef.current?.getEchartInstance();\n      if (echartInstance?.containPixel('grid', pointInPixel)) {\n        // do not trigger if click unstacked chart's blank area\n        if (!stack && params.target?.type === 'ec-polygon') return;\n        // @ts-ignore\n        const globalModel = echartInstance.getModel();\n        const model = getModelInfo(params.target, globalModel);\n        const seriesCount = globalModel.getSeriesCount();\n        const currentSeriesIndices = globalModel.getCurrentSeriesIndices();\n        if (model) {\n          const { name } = model;\n          if (seriesCount !== currentSeriesIndices.length) {\n            handleDoubleClickChange();\n          } else {\n            handleDoubleClickChange(name);\n          }\n        }\n      }\n    },\n  };\n\n  return (\n    <>\n      <div ref={extraControlRef}>\n        <ExtraControls formData={formData} setControlValue={setControlValue} />\n      </div>\n      <Echart\n        refs={refs}\n        height={height - extraControlHeight}\n        width={width}\n        echartOptions={echartOptions}\n        eventHandlers={eventHandlers}\n        zrEventHandlers={zrEventHandlers}\n        selectedValues={selectedValues}\n      />\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}