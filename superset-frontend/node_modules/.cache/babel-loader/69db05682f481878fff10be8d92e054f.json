{"ast":null,"code":"import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useMemo } from 'react';\nimport { MinusSquareOutlined, PlusSquareOutlined } from '@ant-design/icons';\nimport { CurrencyFormatter, FeatureFlag, getColumnLabel, getNumberFormatter, getSelectedText, isAdhocColumn, isFeatureEnabled, isPhysicalColumn, styled, t, useTheme } from '@superset-ui/core';\nimport { aggregatorTemplates, PivotTable, sortAs } from './react-pivottable';\nimport { MetricsLayoutEnum } from './types';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst Styles = styled.div`\n  ${(_ref) => {let { height, width, margin } = _ref;return `\n      margin: ${margin}px;\n      height: ${height - margin * 2}px;\n      width: ${typeof width === 'string' ? parseInt(width, 10) : width - margin * 2}px;\n `;}}\n`;\nconst PivotTableWrapper = styled.div`\n  height: 100%;\n  max-width: inherit;\n  overflow: auto;\n`;\nconst METRIC_KEY = t('Metric');\nconst vals = ['value'];\nconst StyledPlusSquareOutlined = styled(PlusSquareOutlined)`\n  stroke: ${(_ref2) => {let { theme } = _ref2;return theme.colors.grayscale.light2;}};\n  stroke-width: 16px;\n`;\nconst StyledMinusSquareOutlined = styled(MinusSquareOutlined)`\n  stroke: ${(_ref3) => {let { theme } = _ref3;return theme.colors.grayscale.light2;}};\n  stroke-width: 16px;\n`;\nconst aggregatorsFactory = (formatter) => ({\n  Count: aggregatorTemplates.count(formatter),\n  'Count Unique Values': aggregatorTemplates.countUnique(formatter),\n  'List Unique Values': aggregatorTemplates.listUnique(', ', formatter),\n  Sum: aggregatorTemplates.sum(formatter),\n  Average: aggregatorTemplates.average(formatter),\n  Median: aggregatorTemplates.median(formatter),\n  'Sample Variance': aggregatorTemplates.var(1, formatter),\n  'Sample Standard Deviation': aggregatorTemplates.stdev(1, formatter),\n  Minimum: aggregatorTemplates.min(formatter),\n  Maximum: aggregatorTemplates.max(formatter),\n  First: aggregatorTemplates.first(formatter),\n  Last: aggregatorTemplates.last(formatter),\n  'Sum as Fraction of Total': aggregatorTemplates.fractionOf(aggregatorTemplates.sum(), 'total', formatter),\n  'Sum as Fraction of Rows': aggregatorTemplates.fractionOf(aggregatorTemplates.sum(), 'row', formatter),\n  'Sum as Fraction of Columns': aggregatorTemplates.fractionOf(aggregatorTemplates.sum(), 'col', formatter),\n  'Count as Fraction of Total': aggregatorTemplates.fractionOf(aggregatorTemplates.count(), 'total', formatter),\n  'Count as Fraction of Rows': aggregatorTemplates.fractionOf(aggregatorTemplates.count(), 'row', formatter),\n  'Count as Fraction of Columns': aggregatorTemplates.fractionOf(aggregatorTemplates.count(), 'col', formatter) });\n\n/* If you change this logic, please update the corresponding Python\n * function (https://github.com/apache/superset/blob/master/superset/charts/post_processing.py),\n * or reach out to @betodealmeida.\n */\nexport default function PivotTableChart(props) {\n  const { data, height, width, groupbyRows: groupbyRowsRaw, groupbyColumns: groupbyColumnsRaw, metrics, colOrder, rowOrder, aggregateFunction, transposePivot, combineMetric, rowSubtotalPosition, colSubtotalPosition, colTotals, colSubTotals, rowTotals, rowSubTotals, valueFormat, emitCrossFilters, setDataMask, selectedFilters, verboseMap, columnFormats, currencyFormats, metricsLayout, metricColorFormatters, dateFormatters, onContextMenu, timeGrainSqla } = props;\n  const theme = useTheme();\n  const defaultFormatter = useMemo(() => getNumberFormatter(valueFormat), [valueFormat]);\n  const customFormatsArray = useMemo(() => Array.from(new Set([\n  ...Object.keys(columnFormats || {}),\n  ...Object.keys(currencyFormats || {})])).\n  map((metricName) => [\n  metricName,\n  columnFormats[metricName] || valueFormat,\n  currencyFormats[metricName]]),\n  [columnFormats, currencyFormats, valueFormat]);\n  const hasCustomMetricFormatters = customFormatsArray.length > 0;\n  const metricFormatters = useMemo(() => hasCustomMetricFormatters ?\n  {\n    [METRIC_KEY]: Object.fromEntries(customFormatsArray.map((_ref4) => {let [metric, d3Format, currency] = _ref4;return [\n      metric,\n      currency ?\n      new CurrencyFormatter({\n        currency,\n        d3Format }) :\n\n      getNumberFormatter(d3Format)];})) } :\n\n\n  undefined, [customFormatsArray, hasCustomMetricFormatters]);\n  const metricNames = useMemo(() => metrics.map((metric) => typeof metric === 'string' ? metric : metric.label), [metrics]);\n  const unpivotedData = useMemo(() => data.reduce((acc, record) => [\n  ...acc,\n  ...metricNames.\n  map((name) => ({\n    ...record,\n    [METRIC_KEY]: name,\n    value: record[name] })).\n\n  filter((record) => record.value !== null)],\n  []), [data, metricNames]);\n  const groupbyRows = useMemo(() => groupbyRowsRaw.map(getColumnLabel), [groupbyRowsRaw]);\n  const groupbyColumns = useMemo(() => groupbyColumnsRaw.map(getColumnLabel), [groupbyColumnsRaw]);\n  const sorters = useMemo(() => ({\n    [METRIC_KEY]: sortAs(metricNames) }),\n  [metricNames]);\n  const [rows, cols] = useMemo(() => {\n    let [rows_, cols_] = transposePivot ?\n    [groupbyColumns, groupbyRows] :\n    [groupbyRows, groupbyColumns];\n    if (metricsLayout === MetricsLayoutEnum.ROWS) {\n      rows_ = combineMetric ? [...rows_, METRIC_KEY] : [METRIC_KEY, ...rows_];\n    } else\n    {\n      cols_ = combineMetric ? [...cols_, METRIC_KEY] : [METRIC_KEY, ...cols_];\n    }\n    return [rows_, cols_];\n  }, [\n  combineMetric,\n  groupbyColumns,\n  groupbyRows,\n  metricsLayout,\n  transposePivot]);\n\n  const handleChange = useCallback((filters) => {\n    const filterKeys = Object.keys(filters);\n    const groupby = [...groupbyRowsRaw, ...groupbyColumnsRaw];\n    setDataMask({\n      extraFormData: {\n        filters: filterKeys.length === 0 ?\n        undefined :\n        filterKeys.map((key) => {var _groupby$find;\n          const val = filters == null ? void 0 : filters[key];\n          const col = (_groupby$find = groupby.find((item) => {\n            if (isPhysicalColumn(item)) {\n              return item === key;\n            }\n            if (isAdhocColumn(item)) {\n              return item.label === key;\n            }\n            return false;\n          })) != null ? _groupby$find : '';\n          if (val === null || val === undefined)\n          return {\n            col,\n            op: 'IS NULL' };\n\n          return {\n            col,\n            op: 'IN',\n            val: val };\n\n        }) },\n\n      filterState: {\n        value: filters && Object.keys(filters).length ?\n        Object.values(filters) :\n        null,\n        selectedFilters: filters && Object.keys(filters).length ? filters : null } });\n\n\n  }, [groupbyColumnsRaw, groupbyRowsRaw, setDataMask]);\n  const getCrossFilterDataMask = useCallback((value) => {\n    const isActiveFilterValue = (key, val) => {var _selectedFilters$key;return !!selectedFilters && ((_selectedFilters$key = selectedFilters[key]) == null ? void 0 : _includesInstanceProperty(_selectedFilters$key).call(_selectedFilters$key, val));};\n    if (!value) {\n      return undefined;\n    }\n    const [key, val] = Object.entries(value)[0];\n    let values = { ...selectedFilters };\n    if (isActiveFilterValue(key, val)) {\n      values = {};\n    } else\n    {\n      values = { [key]: [val] };\n    }\n    const filterKeys = Object.keys(values);\n    const groupby = [...groupbyRowsRaw, ...groupbyColumnsRaw];\n    return {\n      dataMask: {\n        extraFormData: {\n          filters: filterKeys.length === 0 ?\n          undefined :\n          filterKeys.map((key) => {var _values, _groupby$find2;\n            const val = (_values = values) == null ? void 0 : _values[key];\n            const col = (_groupby$find2 = groupby.find((item) => {\n              if (isPhysicalColumn(item)) {\n                return item === key;\n              }\n              if (isAdhocColumn(item)) {\n                return item.label === key;\n              }\n              return false;\n            })) != null ? _groupby$find2 : '';\n            if (val === null || val === undefined)\n            return {\n              col,\n              op: 'IS NULL' };\n\n            return {\n              col,\n              op: 'IN',\n              val: val };\n\n          }) },\n\n        filterState: {\n          value: values && Object.keys(values).length ?\n          Object.values(values) :\n          null,\n          selectedFilters: values && Object.keys(values).length ? values : null } },\n\n\n      isCurrentValueSelected: isActiveFilterValue(key, val) };\n\n  }, [groupbyColumnsRaw, groupbyRowsRaw, selectedFilters]);\n  const toggleFilter = useCallback((e, value, filters, pivotData, isSubtotal, isGrandTotal) => {\n    if (isSubtotal || isGrandTotal || !emitCrossFilters) {\n      return;\n    }\n    // allow selecting text in a cell\n    if (getSelectedText()) {\n      return;\n    }\n    const isActiveFilterValue = (key, val) => {var _selectedFilters$key2;return !!selectedFilters && ((_selectedFilters$key2 = selectedFilters[key]) == null ? void 0 : _includesInstanceProperty(_selectedFilters$key2).call(_selectedFilters$key2, val));};\n    const filtersCopy = { ...filters };\n    delete filtersCopy[METRIC_KEY];\n    const filtersEntries = Object.entries(filtersCopy);\n    if (filtersEntries.length === 0) {\n      return;\n    }\n    const [key, val] = filtersEntries[filtersEntries.length - 1];\n    let updatedFilters = { ...(selectedFilters || {}) };\n    // multi select\n    // if (selectedFilters && isActiveFilterValue(key, val)) {\n    //   updatedFilters[key] = selectedFilters[key].filter((x: DataRecordValue) => x !== val);\n    // } else {\n    //   updatedFilters[key] = [...(selectedFilters?.[key] || []), val];\n    // }\n    // single select\n    if (selectedFilters && isActiveFilterValue(key, val)) {\n      updatedFilters = {};\n    } else\n    {\n      updatedFilters = {\n        [key]: [val] };\n\n    }\n    if (Array.isArray(updatedFilters[key]) &&\n    updatedFilters[key].length === 0) {\n      delete updatedFilters[key];\n    }\n    handleChange(updatedFilters);\n  }, [emitCrossFilters, selectedFilters, handleChange]);\n  const tableOptions = useMemo(() => ({\n    clickRowHeaderCallback: toggleFilter,\n    clickColumnHeaderCallback: toggleFilter,\n    colTotals,\n    colSubTotals,\n    rowTotals,\n    rowSubTotals,\n    highlightHeaderCellsOnHover: emitCrossFilters ||\n    isFeatureEnabled(FeatureFlag.DRILL_BY) ||\n    isFeatureEnabled(FeatureFlag.DRILL_TO_DETAIL),\n    highlightedHeaderCells: selectedFilters,\n    omittedHighlightHeaderGroups: [METRIC_KEY],\n    cellColorFormatters: { [METRIC_KEY]: metricColorFormatters },\n    dateFormatters }),\n  [\n  colTotals,\n  colSubTotals,\n  dateFormatters,\n  emitCrossFilters,\n  metricColorFormatters,\n  rowTotals,\n  rowSubTotals,\n  selectedFilters,\n  toggleFilter]);\n\n  const subtotalOptions = useMemo(() => ({\n    colSubtotalDisplay: { displayOnTop: colSubtotalPosition },\n    rowSubtotalDisplay: { displayOnTop: rowSubtotalPosition },\n    arrowCollapsed: ___EmotionJSX(StyledPlusSquareOutlined, null),\n    arrowExpanded: ___EmotionJSX(StyledMinusSquareOutlined, null) }),\n  [colSubtotalPosition, rowSubtotalPosition]);\n  const handleContextMenu = useCallback((e, colKey, rowKey, dataPoint) => {\n    if (onContextMenu) {\n      e.preventDefault();\n      e.stopPropagation();\n      const drillToDetailFilters = [];\n      if (colKey && colKey.length > 1) {\n        colKey.forEach((val, i) => {\n          const col = cols[i];\n          const formatter = dateFormatters[col];\n          const formattedVal = (formatter == null ? void 0 : formatter(val)) || String(val);\n          if (i > 0) {\n            drillToDetailFilters.push({\n              col,\n              op: '==',\n              val,\n              formattedVal,\n              grain: formatter ? timeGrainSqla : undefined });\n\n          }\n        });\n      }\n      if (rowKey) {\n        rowKey.forEach((val, i) => {\n          const col = rows[i];\n          const formatter = dateFormatters[col];\n          const formattedVal = (formatter == null ? void 0 : formatter(val)) || String(val);\n          drillToDetailFilters.push({\n            col,\n            op: '==',\n            val,\n            formattedVal,\n            grain: formatter ? timeGrainSqla : undefined });\n\n        });\n      }\n      onContextMenu(e.clientX, e.clientY, {\n        drillToDetail: drillToDetailFilters,\n        crossFilter: getCrossFilterDataMask(dataPoint),\n        drillBy: dataPoint && {\n          filters: [\n          {\n            col: Object.keys(dataPoint)[0],\n            op: '==',\n            val: Object.values(dataPoint)[0] }],\n\n\n          groupbyFieldName: rowKey ? 'groupbyRows' : 'groupbyColumns' } });\n\n\n    }\n  }, [\n  cols,\n  dateFormatters,\n  getCrossFilterDataMask,\n  onContextMenu,\n  rows,\n  timeGrainSqla]);\n\n  return ___EmotionJSX(Styles, { height: height, width: width, margin: theme.gridUnit * 4 },\n  ___EmotionJSX(PivotTableWrapper, null,\n  ___EmotionJSX(PivotTable, { data: unpivotedData, rows: rows, cols: cols, aggregatorsFactory: aggregatorsFactory, defaultFormatter: defaultFormatter, customFormatters: metricFormatters, aggregatorName: aggregateFunction, vals: vals, colOrder: colOrder, rowOrder: rowOrder, sorters: sorters, tableOptions: tableOptions, subtotalOptions: subtotalOptions, namesMapping: verboseMap, onContextMenu: handleContextMenu })));\n\n\n}","map":{"version":3,"mappings":"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","names":["React","useCallback","useMemo","MinusSquareOutlined","PlusSquareOutlined","CurrencyFormatter","FeatureFlag","getColumnLabel","getNumberFormatter","getSelectedText","isAdhocColumn","isFeatureEnabled","isPhysicalColumn","styled","t","useTheme","aggregatorTemplates","PivotTable","sortAs","MetricsLayoutEnum","Styles","div","height","width","margin","parseInt","PivotTableWrapper","METRIC_KEY","vals","StyledPlusSquareOutlined","theme","colors","grayscale","light2","StyledMinusSquareOutlined","aggregatorsFactory","formatter","Count","count","countUnique","listUnique","Sum","sum","Average","average","Median","median","var","stdev","Minimum","min","Maximum","max","First","first","Last","last","fractionOf","PivotTableChart","props","data","groupbyRows","groupbyRowsRaw","groupbyColumns","groupbyColumnsRaw","metrics","colOrder","rowOrder","aggregateFunction","transposePivot","combineMetric","rowSubtotalPosition","colSubtotalPosition","colTotals","colSubTotals","rowTotals","rowSubTotals","valueFormat","emitCrossFilters","setDataMask","selectedFilters","verboseMap","columnFormats","currencyFormats","metricsLayout","metricColorFormatters","dateFormatters","onContextMenu","timeGrainSqla","defaultFormatter","customFormatsArray","Array","from","Set","Object","keys","map","metricName","hasCustomMetricFormatters","length","metricFormatters","fromEntries","metric","d3Format","currency","undefined","metricNames","label","unpivotedData","reduce","acc","record","name","value","filter","sorters","rows","cols","rows_","cols_","ROWS","handleChange","filters","filterKeys","groupby","extraFormData","val","key","col","find","item","op","filterState","values","getCrossFilterDataMask","isActiveFilterValue","entries","dataMask","isCurrentValueSelected","toggleFilter","e","pivotData","isSubtotal","isGrandTotal","filtersCopy","filtersEntries","updatedFilters","isArray","tableOptions","clickRowHeaderCallback","clickColumnHeaderCallback","highlightHeaderCellsOnHover","DRILL_BY","DRILL_TO_DETAIL","highlightedHeaderCells","omittedHighlightHeaderGroups","cellColorFormatters","subtotalOptions","colSubtotalDisplay","displayOnTop","rowSubtotalDisplay","arrowCollapsed","arrowExpanded","handleContextMenu","colKey","rowKey","dataPoint","preventDefault","stopPropagation","drillToDetailFilters","forEach","i","formattedVal","String","push","grain","clientX","clientY","drillToDetail","crossFilter","drillBy","groupbyFieldName","gridUnit"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/plugins/plugin-chart-pivot-table/src/PivotTableChart.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useMemo } from 'react';\nimport { MinusSquareOutlined, PlusSquareOutlined } from '@ant-design/icons';\nimport {\n  AdhocMetric,\n  BinaryQueryObjectFilterClause,\n  CurrencyFormatter,\n  DataRecordValue,\n  FeatureFlag,\n  getColumnLabel,\n  getNumberFormatter,\n  getSelectedText,\n  isAdhocColumn,\n  isFeatureEnabled,\n  isPhysicalColumn,\n  NumberFormatter,\n  styled,\n  t,\n  useTheme,\n} from '@superset-ui/core';\nimport { aggregatorTemplates, PivotTable, sortAs } from './react-pivottable';\nimport {\n  FilterType,\n  MetricsLayoutEnum,\n  PivotTableProps,\n  PivotTableStylesProps,\n  SelectedFiltersType,\n} from './types';\n\nconst Styles = styled.div<PivotTableStylesProps>`\n  ${({ height, width, margin }) => `\n      margin: ${margin}px;\n      height: ${height - margin * 2}px;\n      width: ${\n        typeof width === 'string' ? parseInt(width, 10) : width - margin * 2\n      }px;\n `}\n`;\n\nconst PivotTableWrapper = styled.div`\n  height: 100%;\n  max-width: inherit;\n  overflow: auto;\n`;\n\nconst METRIC_KEY = t('Metric');\nconst vals = ['value'];\n\nconst StyledPlusSquareOutlined = styled(PlusSquareOutlined)`\n  stroke: ${({ theme }) => theme.colors.grayscale.light2};\n  stroke-width: 16px;\n`;\n\nconst StyledMinusSquareOutlined = styled(MinusSquareOutlined)`\n  stroke: ${({ theme }) => theme.colors.grayscale.light2};\n  stroke-width: 16px;\n`;\n\nconst aggregatorsFactory = (formatter: NumberFormatter) => ({\n  Count: aggregatorTemplates.count(formatter),\n  'Count Unique Values': aggregatorTemplates.countUnique(formatter),\n  'List Unique Values': aggregatorTemplates.listUnique(', ', formatter),\n  Sum: aggregatorTemplates.sum(formatter),\n  Average: aggregatorTemplates.average(formatter),\n  Median: aggregatorTemplates.median(formatter),\n  'Sample Variance': aggregatorTemplates.var(1, formatter),\n  'Sample Standard Deviation': aggregatorTemplates.stdev(1, formatter),\n  Minimum: aggregatorTemplates.min(formatter),\n  Maximum: aggregatorTemplates.max(formatter),\n  First: aggregatorTemplates.first(formatter),\n  Last: aggregatorTemplates.last(formatter),\n  'Sum as Fraction of Total': aggregatorTemplates.fractionOf(\n    aggregatorTemplates.sum(),\n    'total',\n    formatter,\n  ),\n  'Sum as Fraction of Rows': aggregatorTemplates.fractionOf(\n    aggregatorTemplates.sum(),\n    'row',\n    formatter,\n  ),\n  'Sum as Fraction of Columns': aggregatorTemplates.fractionOf(\n    aggregatorTemplates.sum(),\n    'col',\n    formatter,\n  ),\n  'Count as Fraction of Total': aggregatorTemplates.fractionOf(\n    aggregatorTemplates.count(),\n    'total',\n    formatter,\n  ),\n  'Count as Fraction of Rows': aggregatorTemplates.fractionOf(\n    aggregatorTemplates.count(),\n    'row',\n    formatter,\n  ),\n  'Count as Fraction of Columns': aggregatorTemplates.fractionOf(\n    aggregatorTemplates.count(),\n    'col',\n    formatter,\n  ),\n});\n\n/* If you change this logic, please update the corresponding Python\n * function (https://github.com/apache/superset/blob/master/superset/charts/post_processing.py),\n * or reach out to @betodealmeida.\n */\nexport default function PivotTableChart(props: PivotTableProps) {\n  const {\n    data,\n    height,\n    width,\n    groupbyRows: groupbyRowsRaw,\n    groupbyColumns: groupbyColumnsRaw,\n    metrics,\n    colOrder,\n    rowOrder,\n    aggregateFunction,\n    transposePivot,\n    combineMetric,\n    rowSubtotalPosition,\n    colSubtotalPosition,\n    colTotals,\n    colSubTotals,\n    rowTotals,\n    rowSubTotals,\n    valueFormat,\n    emitCrossFilters,\n    setDataMask,\n    selectedFilters,\n    verboseMap,\n    columnFormats,\n    currencyFormats,\n    metricsLayout,\n    metricColorFormatters,\n    dateFormatters,\n    onContextMenu,\n    timeGrainSqla,\n  } = props;\n\n  const theme = useTheme();\n  const defaultFormatter = useMemo(\n    () => getNumberFormatter(valueFormat),\n    [valueFormat],\n  );\n  const customFormatsArray = useMemo(\n    () =>\n      Array.from(\n        new Set([\n          ...Object.keys(columnFormats || {}),\n          ...Object.keys(currencyFormats || {}),\n        ]),\n      ).map(metricName => [\n        metricName,\n        columnFormats[metricName] || valueFormat,\n        currencyFormats[metricName],\n      ]),\n    [columnFormats, currencyFormats, valueFormat],\n  );\n  const hasCustomMetricFormatters = customFormatsArray.length > 0;\n  const metricFormatters = useMemo(\n    () =>\n      hasCustomMetricFormatters\n        ? {\n            [METRIC_KEY]: Object.fromEntries(\n              customFormatsArray.map(([metric, d3Format, currency]) => [\n                metric,\n                currency\n                  ? new CurrencyFormatter({\n                      currency,\n                      d3Format,\n                    })\n                  : getNumberFormatter(d3Format),\n              ]),\n            ),\n          }\n        : undefined,\n    [customFormatsArray, hasCustomMetricFormatters],\n  );\n\n  const metricNames = useMemo(\n    () =>\n      metrics.map((metric: string | AdhocMetric) =>\n        typeof metric === 'string' ? metric : (metric.label as string),\n      ),\n    [metrics],\n  );\n\n  const unpivotedData = useMemo(\n    () =>\n      data.reduce(\n        (acc: Record<string, any>[], record: Record<string, any>) => [\n          ...acc,\n          ...metricNames\n            .map((name: string) => ({\n              ...record,\n              [METRIC_KEY]: name,\n              value: record[name],\n            }))\n            .filter(record => record.value !== null),\n        ],\n        [],\n      ),\n    [data, metricNames],\n  );\n  const groupbyRows = useMemo(\n    () => groupbyRowsRaw.map(getColumnLabel),\n    [groupbyRowsRaw],\n  );\n  const groupbyColumns = useMemo(\n    () => groupbyColumnsRaw.map(getColumnLabel),\n    [groupbyColumnsRaw],\n  );\n\n  const sorters = useMemo(\n    () => ({\n      [METRIC_KEY]: sortAs(metricNames),\n    }),\n    [metricNames],\n  );\n\n  const [rows, cols] = useMemo(() => {\n    let [rows_, cols_] = transposePivot\n      ? [groupbyColumns, groupbyRows]\n      : [groupbyRows, groupbyColumns];\n\n    if (metricsLayout === MetricsLayoutEnum.ROWS) {\n      rows_ = combineMetric ? [...rows_, METRIC_KEY] : [METRIC_KEY, ...rows_];\n    } else {\n      cols_ = combineMetric ? [...cols_, METRIC_KEY] : [METRIC_KEY, ...cols_];\n    }\n    return [rows_, cols_];\n  }, [\n    combineMetric,\n    groupbyColumns,\n    groupbyRows,\n    metricsLayout,\n    transposePivot,\n  ]);\n\n  const handleChange = useCallback(\n    (filters: SelectedFiltersType) => {\n      const filterKeys = Object.keys(filters);\n      const groupby = [...groupbyRowsRaw, ...groupbyColumnsRaw];\n      setDataMask({\n        extraFormData: {\n          filters:\n            filterKeys.length === 0\n              ? undefined\n              : filterKeys.map(key => {\n                  const val = filters?.[key];\n                  const col =\n                    groupby.find(item => {\n                      if (isPhysicalColumn(item)) {\n                        return item === key;\n                      }\n                      if (isAdhocColumn(item)) {\n                        return item.label === key;\n                      }\n                      return false;\n                    }) ?? '';\n                  if (val === null || val === undefined)\n                    return {\n                      col,\n                      op: 'IS NULL',\n                    };\n                  return {\n                    col,\n                    op: 'IN',\n                    val: val as (string | number | boolean)[],\n                  };\n                }),\n        },\n        filterState: {\n          value:\n            filters && Object.keys(filters).length\n              ? Object.values(filters)\n              : null,\n          selectedFilters:\n            filters && Object.keys(filters).length ? filters : null,\n        },\n      });\n    },\n    [groupbyColumnsRaw, groupbyRowsRaw, setDataMask],\n  );\n\n  const getCrossFilterDataMask = useCallback(\n    (value: { [key: string]: string }) => {\n      const isActiveFilterValue = (key: string, val: DataRecordValue) =>\n        !!selectedFilters && selectedFilters[key]?.includes(val);\n\n      if (!value) {\n        return undefined;\n      }\n\n      const [key, val] = Object.entries(value)[0];\n      let values = { ...selectedFilters };\n      if (isActiveFilterValue(key, val)) {\n        values = {};\n      } else {\n        values = { [key]: [val] };\n      }\n\n      const filterKeys = Object.keys(values);\n      const groupby = [...groupbyRowsRaw, ...groupbyColumnsRaw];\n      return {\n        dataMask: {\n          extraFormData: {\n            filters:\n              filterKeys.length === 0\n                ? undefined\n                : filterKeys.map(key => {\n                    const val = values?.[key];\n                    const col =\n                      groupby.find(item => {\n                        if (isPhysicalColumn(item)) {\n                          return item === key;\n                        }\n                        if (isAdhocColumn(item)) {\n                          return item.label === key;\n                        }\n                        return false;\n                      }) ?? '';\n                    if (val === null || val === undefined)\n                      return {\n                        col,\n                        op: 'IS NULL' as const,\n                      };\n                    return {\n                      col,\n                      op: 'IN' as const,\n                      val: val as (string | number | boolean)[],\n                    };\n                  }),\n          },\n          filterState: {\n            value:\n              values && Object.keys(values).length\n                ? Object.values(values)\n                : null,\n            selectedFilters:\n              values && Object.keys(values).length ? values : null,\n          },\n        },\n        isCurrentValueSelected: isActiveFilterValue(key, val),\n      };\n    },\n    [groupbyColumnsRaw, groupbyRowsRaw, selectedFilters],\n  );\n\n  const toggleFilter = useCallback(\n    (\n      e: MouseEvent,\n      value: string,\n      filters: FilterType,\n      pivotData: Record<string, any>,\n      isSubtotal: boolean,\n      isGrandTotal: boolean,\n    ) => {\n      if (isSubtotal || isGrandTotal || !emitCrossFilters) {\n        return;\n      }\n\n      // allow selecting text in a cell\n      if (getSelectedText()) {\n        return;\n      }\n\n      const isActiveFilterValue = (key: string, val: DataRecordValue) =>\n        !!selectedFilters && selectedFilters[key]?.includes(val);\n\n      const filtersCopy = { ...filters };\n      delete filtersCopy[METRIC_KEY];\n\n      const filtersEntries = Object.entries(filtersCopy);\n      if (filtersEntries.length === 0) {\n        return;\n      }\n\n      const [key, val] = filtersEntries[filtersEntries.length - 1];\n\n      let updatedFilters = { ...(selectedFilters || {}) };\n      // multi select\n      // if (selectedFilters && isActiveFilterValue(key, val)) {\n      //   updatedFilters[key] = selectedFilters[key].filter((x: DataRecordValue) => x !== val);\n      // } else {\n      //   updatedFilters[key] = [...(selectedFilters?.[key] || []), val];\n      // }\n      // single select\n      if (selectedFilters && isActiveFilterValue(key, val)) {\n        updatedFilters = {};\n      } else {\n        updatedFilters = {\n          [key]: [val],\n        };\n      }\n      if (\n        Array.isArray(updatedFilters[key]) &&\n        updatedFilters[key].length === 0\n      ) {\n        delete updatedFilters[key];\n      }\n      handleChange(updatedFilters);\n    },\n    [emitCrossFilters, selectedFilters, handleChange],\n  );\n\n  const tableOptions = useMemo(\n    () => ({\n      clickRowHeaderCallback: toggleFilter,\n      clickColumnHeaderCallback: toggleFilter,\n      colTotals,\n      colSubTotals,\n      rowTotals,\n      rowSubTotals,\n      highlightHeaderCellsOnHover:\n        emitCrossFilters ||\n        isFeatureEnabled(FeatureFlag.DRILL_BY) ||\n        isFeatureEnabled(FeatureFlag.DRILL_TO_DETAIL),\n      highlightedHeaderCells: selectedFilters,\n      omittedHighlightHeaderGroups: [METRIC_KEY],\n      cellColorFormatters: { [METRIC_KEY]: metricColorFormatters },\n      dateFormatters,\n    }),\n    [\n      colTotals,\n      colSubTotals,\n      dateFormatters,\n      emitCrossFilters,\n      metricColorFormatters,\n      rowTotals,\n      rowSubTotals,\n      selectedFilters,\n      toggleFilter,\n    ],\n  );\n\n  const subtotalOptions = useMemo(\n    () => ({\n      colSubtotalDisplay: { displayOnTop: colSubtotalPosition },\n      rowSubtotalDisplay: { displayOnTop: rowSubtotalPosition },\n      arrowCollapsed: <StyledPlusSquareOutlined />,\n      arrowExpanded: <StyledMinusSquareOutlined />,\n    }),\n    [colSubtotalPosition, rowSubtotalPosition],\n  );\n\n  const handleContextMenu = useCallback(\n    (\n      e: MouseEvent,\n      colKey: (string | number | boolean)[] | undefined,\n      rowKey: (string | number | boolean)[] | undefined,\n      dataPoint: { [key: string]: string },\n    ) => {\n      if (onContextMenu) {\n        e.preventDefault();\n        e.stopPropagation();\n        const drillToDetailFilters: BinaryQueryObjectFilterClause[] = [];\n        if (colKey && colKey.length > 1) {\n          colKey.forEach((val, i) => {\n            const col = cols[i];\n            const formatter = dateFormatters[col];\n            const formattedVal = formatter?.(val as number) || String(val);\n            if (i > 0) {\n              drillToDetailFilters.push({\n                col,\n                op: '==',\n                val,\n                formattedVal,\n                grain: formatter ? timeGrainSqla : undefined,\n              });\n            }\n          });\n        }\n        if (rowKey) {\n          rowKey.forEach((val, i) => {\n            const col = rows[i];\n            const formatter = dateFormatters[col];\n            const formattedVal = formatter?.(val as number) || String(val);\n            drillToDetailFilters.push({\n              col,\n              op: '==',\n              val,\n              formattedVal,\n              grain: formatter ? timeGrainSqla : undefined,\n            });\n          });\n        }\n        onContextMenu(e.clientX, e.clientY, {\n          drillToDetail: drillToDetailFilters,\n          crossFilter: getCrossFilterDataMask(dataPoint),\n          drillBy: dataPoint && {\n            filters: [\n              {\n                col: Object.keys(dataPoint)[0],\n                op: '==',\n                val: Object.values(dataPoint)[0],\n              },\n            ],\n            groupbyFieldName: rowKey ? 'groupbyRows' : 'groupbyColumns',\n          },\n        });\n      }\n    },\n    [\n      cols,\n      dateFormatters,\n      getCrossFilterDataMask,\n      onContextMenu,\n      rows,\n      timeGrainSqla,\n    ],\n  );\n\n  return (\n    <Styles height={height} width={width} margin={theme.gridUnit * 4}>\n      <PivotTableWrapper>\n        <PivotTable\n          data={unpivotedData}\n          rows={rows}\n          cols={cols}\n          aggregatorsFactory={aggregatorsFactory}\n          defaultFormatter={defaultFormatter}\n          customFormatters={metricFormatters}\n          aggregatorName={aggregateFunction}\n          vals={vals}\n          colOrder={colOrder}\n          rowOrder={rowOrder}\n          sorters={sorters}\n          tableOptions={tableOptions}\n          subtotalOptions={subtotalOptions}\n          namesMapping={verboseMap}\n          onContextMenu={handleContextMenu}\n        />\n      </PivotTableWrapper>\n    </Styles>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}