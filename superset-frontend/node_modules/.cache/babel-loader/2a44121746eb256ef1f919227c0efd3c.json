{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useMemo, useState, memo } from 'react';\nimport { Tree } from 'src/components';\nimport { DASHBOARD_ROOT_ID } from 'src/dashboard/util/constants';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport { useFilterScopeTree } from './state';\nimport { findFilterScope, getTreeCheckedItems } from './utils';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst buildTreeLeafTitle = (label, hasTooltip, tooltipTitle) => {\n  let title = ___EmotionJSX(\"span\", null, label);\n  if (hasTooltip) {\n    title = ___EmotionJSX(React.Fragment, null,\n    title, \"\\xA0\",\n    ___EmotionJSX(Tooltip, { title: tooltipTitle },\n    ___EmotionJSX(Icons.Info, { iconSize: \"m\" })));\n\n\n  }\n  return title;\n};\nconst ScopingTree = (_ref) => {let { formScope, initialScope, forceUpdate, updateFormValues, chartId, initiallyExcludedCharts = [], title } = _ref;\n  const [expandedKeys, setExpandedKeys] = useState([\n  DASHBOARD_ROOT_ID]);\n\n  const { treeData, layout } = useFilterScopeTree(chartId, initiallyExcludedCharts, buildTreeLeafTitle, title);\n  const [autoExpandParent, setAutoExpandParent] = useState(true);\n  const handleExpand = (expandedKeys) => {\n    setExpandedKeys(expandedKeys);\n    setAutoExpandParent(false);\n  };\n  const handleCheck = (checkedKeys) => {\n    forceUpdate();\n    const scope = findFilterScope(checkedKeys, layout);\n    if (chartId !== undefined) {\n      scope.excluded = [...new Set([...scope.excluded, chartId])];\n    }\n    updateFormValues({\n      scope });\n\n  };\n  const checkedKeys = useMemo(() => getTreeCheckedItems({ ...(formScope || initialScope) }, layout), [formScope, initialScope, layout]);\n  return ___EmotionJSX(Tree, { checkable: true, selectable: false, onExpand: handleExpand, expandedKeys: expandedKeys, autoExpandParent: autoExpandParent, onCheck: handleCheck, checkedKeys: checkedKeys, treeData: treeData });\n};\nexport default /*#__PURE__*/memo(ScopingTree);","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAmBA,OAAOA,KAAP,IAAoBC,OAApB,EAA6BC,QAA7B,EAAuCC,IAAvC,QAAmD,OAAnD;AAEA,SAASC,IAAT,QAAqB,gBAArB;AACA,SAASC,iBAAT,QAAkC,8BAAlC;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,OAAOC,KAAP,MAAkB,sBAAlB;AACA,SAASC,kBAAT,QAAmC,SAAnC;AACA,SAASC,eAAT,EAA0BC,mBAA1B,QAAqD,SAArD,C;AAYA,MAAMC,kBAAkB,GAAG,CACzBC,KADyB,EAEzBC,UAFyB,EAGzBC,YAHyB,KAIvB;EACF,IAAIC,KAAK,GAAG,4BAAOH,KAAP,CAAZ;EACA,IAAIC,UAAJ,EAAgB;IACdE,KAAK,GACH;IACGA,KADH;IAEE,cAAC,OAAD,IAAS,KAAK,EAAED,YAAhB;IACE,cAAC,KAAD,CAAO,IAAP,IAAY,QAAQ,EAAC,GAArB,GADF,CAFF,CADF;;;EAQD;EACD,OAAOC,KAAP;AACD,CAjBD;AAmBA,MAAMC,WAAW,GAAyB,UAQrC,KARsC,EACzCC,SADyC,EAEzCC,YAFyC,EAGzCC,WAHyC,EAIzCC,gBAJyC,EAKzCC,OALyC,EAMzCC,uBAAuB,GAAG,EANe,EAOzCP,KAPyC,EAQtC;EACH,MAAM,CAACQ,YAAD,EAAeC,eAAf,IAAkCtB,QAAQ,CAAW;EACzDG,iBADyD,CAAX,CAAhD;;EAIA,MAAM,EAAEoB,QAAF,EAAYC,MAAZ,KAAuBlB,kBAAkB,CAC7Ca,OAD6C,EAE7CC,uBAF6C,EAG7CX,kBAH6C,EAI7CI,KAJ6C,CAA/C;EAMA,MAAM,CAACY,gBAAD,EAAmBC,mBAAnB,IAA0C1B,QAAQ,CAAU,IAAV,CAAxD;EAEA,MAAM2B,YAAY,GAAG,CAACN,YAAD,KAA2B;IAC9CC,eAAe,CAACD,YAAD,CAAf;IACAK,mBAAmB,CAAC,KAAD,CAAnB;EACD,CAHD;EAKA,MAAME,WAAW,GAAG,CAACC,WAAD,KAA0B;IAC5CZ,WAAW;IACX,MAAMa,KAAK,GAAGvB,eAAe,CAACsB,WAAD,EAAcL,MAAd,CAA7B;IACA,IAAIL,OAAO,KAAKY,SAAhB,EAA2B;MACzBD,KAAK,CAACE,QAAN,GAAiB,CAAC,GAAG,IAAIC,GAAJ,CAAQ,CAAC,GAAGH,KAAK,CAACE,QAAV,EAAoBb,OAApB,CAAR,CAAJ,CAAjB;IACD;IACDD,gBAAgB,CAAC;MACfY,KADe,EAAD,CAAhB;;EAGD,CATD;EAWA,MAAMD,WAAW,GAAG9B,OAAO,CACzB,MAAMS,mBAAmB,CAAC,EAAE,IAAIO,SAAS,IAAIC,YAAjB,CAAF,EAAD,EAAqCQ,MAArC,CADA,EAEzB,CAACT,SAAD,EAAYC,YAAZ,EAA0BQ,MAA1B,CAFyB,CAA3B;EAKA,OACE,cAAC,IAAD,IACE,SAAS,MADX,EAEE,UAAU,EAAE,KAFd,EAGE,QAAQ,EAAEG,YAHZ,EAIE,YAAY,EAAEN,YAJhB,EAKE,gBAAgB,EAAEI,gBALpB,EAME,OAAO,EAAEG,WANX,EAOE,WAAW,EAAEC,WAPf,EAQE,QAAQ,EAAEN,QARZ,GADF;AAYD,CAtDD;AAwDA,4BAAetB,IAAI,CAACa,WAAD,CAAnB","names":["React","useMemo","useState","memo","Tree","DASHBOARD_ROOT_ID","Tooltip","Icons","useFilterScopeTree","findFilterScope","getTreeCheckedItems","buildTreeLeafTitle","label","hasTooltip","tooltipTitle","title","ScopingTree","formScope","initialScope","forceUpdate","updateFormValues","chartId","initiallyExcludedCharts","expandedKeys","setExpandedKeys","treeData","layout","autoExpandParent","setAutoExpandParent","handleExpand","handleCheck","checkedKeys","scope","undefined","excluded","Set"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/FilterScope/ScopingTree.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { FC, useMemo, useState, memo } from 'react';\nimport { NativeFilterScope } from '@superset-ui/core';\nimport { Tree } from 'src/components';\nimport { DASHBOARD_ROOT_ID } from 'src/dashboard/util/constants';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport { useFilterScopeTree } from './state';\nimport { findFilterScope, getTreeCheckedItems } from './utils';\n\ntype ScopingTreeProps = {\n  forceUpdate: Function;\n  updateFormValues: (values: any) => void;\n  formScope?: NativeFilterScope;\n  initialScope: NativeFilterScope;\n  chartId?: number;\n  initiallyExcludedCharts?: number[];\n  title?: string;\n};\n\nconst buildTreeLeafTitle = (\n  label: string,\n  hasTooltip: boolean,\n  tooltipTitle?: string,\n) => {\n  let title = <span>{label}</span>;\n  if (hasTooltip) {\n    title = (\n      <>\n        {title}&nbsp;\n        <Tooltip title={tooltipTitle}>\n          <Icons.Info iconSize=\"m\" />\n        </Tooltip>\n      </>\n    );\n  }\n  return title;\n};\n\nconst ScopingTree: FC<ScopingTreeProps> = ({\n  formScope,\n  initialScope,\n  forceUpdate,\n  updateFormValues,\n  chartId,\n  initiallyExcludedCharts = [],\n  title,\n}) => {\n  const [expandedKeys, setExpandedKeys] = useState<string[]>([\n    DASHBOARD_ROOT_ID,\n  ]);\n\n  const { treeData, layout } = useFilterScopeTree(\n    chartId,\n    initiallyExcludedCharts,\n    buildTreeLeafTitle,\n    title,\n  );\n  const [autoExpandParent, setAutoExpandParent] = useState<boolean>(true);\n\n  const handleExpand = (expandedKeys: string[]) => {\n    setExpandedKeys(expandedKeys);\n    setAutoExpandParent(false);\n  };\n\n  const handleCheck = (checkedKeys: string[]) => {\n    forceUpdate();\n    const scope = findFilterScope(checkedKeys, layout);\n    if (chartId !== undefined) {\n      scope.excluded = [...new Set([...scope.excluded, chartId])];\n    }\n    updateFormValues({\n      scope,\n    });\n  };\n\n  const checkedKeys = useMemo(\n    () => getTreeCheckedItems({ ...(formScope || initialScope) }, layout),\n    [formScope, initialScope, layout],\n  );\n\n  return (\n    <Tree\n      checkable\n      selectable={false}\n      onExpand={handleExpand}\n      expandedKeys={expandedKeys}\n      autoExpandParent={autoExpandParent}\n      onCheck={handleCheck}\n      checkedKeys={checkedKeys}\n      treeData={treeData}\n    />\n  );\n};\n\nexport default memo(ScopingTree);\n"]},"metadata":{},"sourceType":"module"}