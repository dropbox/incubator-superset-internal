{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { FeatureFlag, styled, SupersetClient, t } from '@superset-ui/core';\nimport React, { useState, useMemo, useCallback } from 'react';\nimport rison from 'rison';\nimport moment from 'moment';\nimport { createFetchRelated, createFetchDistinct, createErrorHandler } from 'src/views/CRUD/utils';\nimport Popover from 'src/components/Popover';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { useListViewResource } from 'src/views/CRUD/hooks';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport handleResourceExport from 'src/utils/export';\nimport SubMenu from 'src/features/home/SubMenu';\nimport ListView, { FilterOperator } from 'src/components/ListView';\nimport Loading from 'src/components/Loading';\nimport DeleteModal from 'src/components/DeleteModal';\nimport ActionsBar from 'src/components/ListView/ActionsBar';\nimport { TagsList } from 'src/components/Tags';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { commonMenuData } from 'src/features/home/commonMenuData';\nimport copyTextToClipboard from 'src/utils/copy';\nimport { isFeatureEnabled } from 'src/featureFlags';\nimport ImportModelsModal from 'src/components/ImportModal/index';\nimport Icons from 'src/components/Icons';\nimport SavedQueryPreviewModal from 'src/features/queries/SavedQueryPreviewModal';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst PAGE_SIZE = 25;\nconst PASSWORDS_NEEDED_MESSAGE = t('The passwords for the databases below are needed in order to ' +\n'import them together with the saved queries. Please note that the ' +\n'\"Secure Extra\" and \"Certificate\" sections of ' +\n'the database configuration are not present in export files, and ' +\n'should be added manually after the import if they are needed.');\nconst CONFIRM_OVERWRITE_MESSAGE = t('You are importing one or more saved queries that already exist. ' +\n'Overwriting might cause you to lose some of your work. Are you ' +\n'sure you want to overwrite?');\nconst StyledTableLabel = styled.div`\n  .count {\n    margin-left: 5px;\n    color: ${(_ref) => {let { theme } = _ref;return theme.colors.primary.base;}};\n    text-decoration: underline;\n    cursor: pointer;\n  }\n`;\nconst StyledPopoverItem = styled.div`\n  color: ${(_ref2) => {let { theme } = _ref2;return theme.colors.grayscale.dark2;}};\n`;\nfunction SavedQueryList(_ref3) {let { addDangerToast, addSuccessToast } = _ref3;\n  const { state: { loading, resourceCount: queryCount, resourceCollection: queries, bulkSelectEnabled }, hasPerm, fetchData, toggleBulkSelect, refreshData } = useListViewResource('saved_query', t('Saved queries'), addDangerToast);\n  const [queryCurrentlyDeleting, setQueryCurrentlyDeleting] = useState(null);\n  const [savedQueryCurrentlyPreviewing, setSavedQueryCurrentlyPreviewing] = useState(null);\n  const [importingSavedQuery, showImportModal] = useState(false);\n  const [passwordFields, setPasswordFields] = useState([]);\n  const [preparingExport, setPreparingExport] = useState(false);\n  const [sshTunnelPasswordFields, setSSHTunnelPasswordFields] = useState([]);\n  const [sshTunnelPrivateKeyFields, setSSHTunnelPrivateKeyFields] = useState([]);\n  const [sshTunnelPrivateKeyPasswordFields, setSSHTunnelPrivateKeyPasswordFields] = useState([]);\n  const openSavedQueryImportModal = () => {\n    showImportModal(true);\n  };\n  const closeSavedQueryImportModal = () => {\n    showImportModal(false);\n  };\n  const handleSavedQueryImport = () => {\n    showImportModal(false);\n    refreshData();\n    addSuccessToast(t('Query imported'));\n  };\n  const canCreate = hasPerm('can_write');\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canExport = hasPerm('can_export') && isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT);\n  const openNewQuery = () => {\n    window.open(`${window.location.origin}/superset/sqllab?new=true`);\n  };\n  const handleSavedQueryPreview = useCallback((id) => {\n    SupersetClient.get({\n      endpoint: `/api/v1/saved_query/${id}` }).\n    then((_ref4) => {let { json = {} } = _ref4;\n      setSavedQueryCurrentlyPreviewing({ ...json.result });\n    }, createErrorHandler((errMsg) => addDangerToast(t('There was an issue previewing the selected query %s', errMsg))));\n  }, [addDangerToast]);\n  const menuData = {\n    activeChild: 'Saved queries',\n    ...commonMenuData };\n\n  const subMenuButtons = [];\n  if (canDelete) {\n    subMenuButtons.push({\n      name: t('Bulk select'),\n      onClick: toggleBulkSelect,\n      buttonStyle: 'secondary' });\n\n  }\n  subMenuButtons.push({\n    name: ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(\"i\", { className: \"fa fa-plus\" }), \" \", t('Query')),\n\n    onClick: openNewQuery,\n    buttonStyle: 'primary' });\n\n  if (canCreate && isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT)) {\n    subMenuButtons.push({\n      name: ___EmotionJSX(Tooltip, { id: \"import-tooltip\", title: t('Import queries'), placement: \"bottomRight\" },\n      ___EmotionJSX(Icons.Import, null)),\n\n      buttonStyle: 'link',\n      onClick: openSavedQueryImportModal,\n      'data-test': 'import-button' });\n\n  }\n  menuData.buttons = subMenuButtons;\n  // Action methods\n  const openInSqlLab = (id) => {\n    window.open(`${window.location.origin}/superset/sqllab?savedQueryId=${id}`);\n  };\n  const copyQueryLink = useCallback((id) => {\n    copyTextToClipboard(() => Promise.resolve(`${window.location.origin}/superset/sqllab?savedQueryId=${id}`)).\n    then(() => {\n      addSuccessToast(t('Link Copied!'));\n    }).\n    catch(() => {\n      addDangerToast(t('Sorry, your browser does not support copying.'));\n    });\n  }, [addDangerToast, addSuccessToast]);\n  const handleQueryDelete = (_ref5) => {let { id, label } = _ref5;\n    SupersetClient.delete({\n      endpoint: `/api/v1/saved_query/${id}` }).\n    then(() => {\n      refreshData();\n      setQueryCurrentlyDeleting(null);\n      addSuccessToast(t('Deleted: %s', label));\n    }, createErrorHandler((errMsg) => addDangerToast(t('There was an issue deleting %s: %s', label, errMsg))));\n  };\n  const handleBulkSavedQueryExport = (savedQueriesToExport) => {\n    const ids = savedQueriesToExport.map((_ref6) => {let { id } = _ref6;return id;});\n    handleResourceExport('saved_query', ids, () => {\n      setPreparingExport(false);\n    });\n    setPreparingExport(true);\n  };\n  const handleBulkQueryDelete = (queriesToDelete) => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/saved_query/?q=${rison.encode(queriesToDelete.map((_ref7) => {let { id } = _ref7;return id;}))}` }).\n    then((_ref8) => {let { json = {} } = _ref8;\n      refreshData();\n      addSuccessToast(json.message);\n    }, createErrorHandler((errMsg) => addDangerToast(t('There was an issue deleting the selected queries: %s', errMsg))));\n  };\n  const initialSort = [{ id: 'changed_on_delta_humanized', desc: true }];\n  const columns = useMemo(() => [\n  {\n    accessor: 'label',\n    Header: t('Name') },\n\n  {\n    accessor: 'database.database_name',\n    Header: t('Database'),\n    size: 'xl' },\n\n  {\n    accessor: 'database',\n    hidden: true,\n    disableSortBy: true },\n\n  {\n    accessor: 'schema',\n    Header: t('Schema'),\n    size: 'xl' },\n\n  {\n    Cell: (_ref9) => {let { row: { original: { sql_tables: tables = [] } } } = _ref9;\n      const names = tables.map((table) => table.table);\n      const main = (names == null ? void 0 : names.shift()) || '';\n      if (names.length) {\n        return ___EmotionJSX(StyledTableLabel, null,\n        ___EmotionJSX(\"span\", null, main),\n        ___EmotionJSX(Popover, { placement: \"right\", title: t('TABLES'), trigger: \"click\", content: ___EmotionJSX(React.Fragment, null,\n          names.map((name) => ___EmotionJSX(StyledPopoverItem, { key: name }, name))) },\n\n        ___EmotionJSX(\"span\", { className: \"count\" }, \"(+\", names.length, \")\")));\n\n\n      }\n      return main;\n    },\n    accessor: 'sql_tables',\n    Header: t('Tables'),\n    size: 'xl',\n    disableSortBy: true },\n\n  {\n    Cell: (_ref10) => {let { row: { original: { created_on: createdOn } } } = _ref10;\n      const date = new Date(createdOn);\n      const utc = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n      return moment(utc).fromNow();\n    },\n    Header: t('Created on'),\n    accessor: 'created_on',\n    size: 'xl' },\n\n  {\n    Cell: (_ref11) => {let { row: { original: { changed_on_delta_humanized: changedOn } } } = _ref11;return changedOn;},\n    Header: t('Modified'),\n    accessor: 'changed_on_delta_humanized',\n    size: 'xl' },\n\n  {\n    Cell: (_ref12) => {let { row: { original: { tags = [] } } } = _ref12;return (\n        // Only show custom type tags\n        ___EmotionJSX(TagsList, { tags: tags.filter((tag) => tag.type === 1) }));},\n    Header: t('Tags'),\n    accessor: 'tags',\n    disableSortBy: true,\n    hidden: !isFeatureEnabled(FeatureFlag.TAGGING_SYSTEM) },\n\n  {\n    Cell: (_ref13) => {let { row: { original } } = _ref13;\n      const handlePreview = () => {\n        handleSavedQueryPreview(original.id);\n      };\n      const handleEdit = () => openInSqlLab(original.id);\n      const handleCopy = () => copyQueryLink(original.id);\n      const handleExport = () => handleBulkSavedQueryExport([original]);\n      const handleDelete = () => setQueryCurrentlyDeleting(original);\n      const actions = [\n      {\n        label: 'preview-action',\n        tooltip: t('Query preview'),\n        placement: 'bottom',\n        icon: 'Binoculars',\n        onClick: handlePreview },\n\n      canEdit && {\n        label: 'edit-action',\n        tooltip: t('Edit query'),\n        placement: 'bottom',\n        icon: 'Edit',\n        onClick: handleEdit },\n\n      {\n        label: 'copy-action',\n        tooltip: t('Copy query URL'),\n        placement: 'bottom',\n        icon: 'Copy',\n        onClick: handleCopy },\n\n      canExport && {\n        label: 'export-action',\n        tooltip: t('Export query'),\n        placement: 'bottom',\n        icon: 'Share',\n        onClick: handleExport },\n\n      canDelete && {\n        label: 'delete-action',\n        tooltip: t('Delete query'),\n        placement: 'bottom',\n        icon: 'Trash',\n        onClick: handleDelete }].\n\n      filter((item) => !!item);\n      return ___EmotionJSX(ActionsBar, { actions: actions });\n    },\n    Header: t('Actions'),\n    id: 'actions',\n    disableSortBy: true }],\n\n  [canDelete, canEdit, canExport, copyQueryLink, handleSavedQueryPreview]);\n  const filters = useMemo(() => [\n  {\n    Header: t('Database'),\n    key: 'database',\n    id: 'database',\n    input: 'select',\n    operator: FilterOperator.relationOneMany,\n    unfilteredLabel: t('All'),\n    fetchSelects: createFetchRelated('saved_query', 'database', createErrorHandler((errMsg) => addDangerToast(t('An error occurred while fetching dataset datasource values: %s', errMsg)))),\n    paginate: true },\n\n  {\n    Header: t('Schema'),\n    id: 'schema',\n    key: 'schema',\n    input: 'select',\n    operator: FilterOperator.equals,\n    unfilteredLabel: 'All',\n    fetchSelects: createFetchDistinct('saved_query', 'schema', createErrorHandler((errMsg) => addDangerToast(t('An error occurred while fetching schema values: %s', errMsg)))),\n    paginate: true },\n\n  {\n    Header: t('Tags'),\n    id: 'tags',\n    key: 'tags',\n    input: 'search',\n    operator: FilterOperator.savedQueryTags },\n\n  {\n    Header: t('Search'),\n    id: 'label',\n    key: 'search',\n    input: 'search',\n    operator: FilterOperator.allText }],\n\n  [addDangerToast]);\n  return ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(SubMenu, menuData),\n  queryCurrentlyDeleting && ___EmotionJSX(DeleteModal, { description: t('This action will permanently delete the saved query.'), onConfirm: () => {\n      if (queryCurrentlyDeleting) {\n        handleQueryDelete(queryCurrentlyDeleting);\n      }\n    }, onHide: () => setQueryCurrentlyDeleting(null), open: true, title: t('Delete Query?') }),\n  savedQueryCurrentlyPreviewing && ___EmotionJSX(SavedQueryPreviewModal, { fetchData: handleSavedQueryPreview, onHide: () => setSavedQueryCurrentlyPreviewing(null), savedQuery: savedQueryCurrentlyPreviewing, queries: queries, openInSqlLab: openInSqlLab, show: true }),\n  ___EmotionJSX(ConfirmStatusChange, { title: t('Please confirm'), description: t('Are you sure you want to delete the selected queries?'), onConfirm: handleBulkQueryDelete },\n  (confirmDelete) => {\n    const bulkActions = [];\n    if (canDelete) {\n      bulkActions.push({\n        key: 'delete',\n        name: t('Delete'),\n        onSelect: confirmDelete,\n        type: 'danger' });\n\n    }\n    if (canExport) {\n      bulkActions.push({\n        key: 'export',\n        name: t('Export'),\n        type: 'primary',\n        onSelect: handleBulkSavedQueryExport });\n\n    }\n    return ___EmotionJSX(ListView, { className: \"saved_query-list-view\", columns: columns, count: queryCount, data: queries, fetchData: fetchData, filters: filters, initialSort: initialSort, loading: loading, pageSize: PAGE_SIZE, bulkActions: bulkActions, bulkSelectEnabled: bulkSelectEnabled, disableBulkSelect: toggleBulkSelect, highlightRowId: savedQueryCurrentlyPreviewing == null ? void 0 : savedQueryCurrentlyPreviewing.id });\n  }),\n\n\n  ___EmotionJSX(ImportModelsModal, { resourceName: \"saved_query\", resourceLabel: t('queries'), passwordsNeededMessage: PASSWORDS_NEEDED_MESSAGE, confirmOverwriteMessage: CONFIRM_OVERWRITE_MESSAGE, addDangerToast: addDangerToast, addSuccessToast: addSuccessToast, onModelImport: handleSavedQueryImport, show: importingSavedQuery, onHide: closeSavedQueryImportModal, passwordFields: passwordFields, setPasswordFields: setPasswordFields, sshTunnelPasswordFields: sshTunnelPasswordFields, setSSHTunnelPasswordFields: setSSHTunnelPasswordFields, sshTunnelPrivateKeyFields: sshTunnelPrivateKeyFields, setSSHTunnelPrivateKeyFields: setSSHTunnelPrivateKeyFields, sshTunnelPrivateKeyPasswordFields: sshTunnelPrivateKeyPasswordFields, setSSHTunnelPrivateKeyPasswordFields: setSSHTunnelPrivateKeyPasswordFields }),\n  preparingExport && ___EmotionJSX(Loading, null));\n\n}\nexport default withToasts(SavedQueryList);","map":{"version":3,"mappings":"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","names":["FeatureFlag","styled","SupersetClient","t","React","useState","useMemo","useCallback","rison","moment","createFetchRelated","createFetchDistinct","createErrorHandler","Popover","withToasts","useListViewResource","ConfirmStatusChange","handleResourceExport","SubMenu","ListView","FilterOperator","Loading","DeleteModal","ActionsBar","TagsList","Tooltip","commonMenuData","copyTextToClipboard","isFeatureEnabled","ImportModelsModal","Icons","SavedQueryPreviewModal","PAGE_SIZE","PASSWORDS_NEEDED_MESSAGE","CONFIRM_OVERWRITE_MESSAGE","StyledTableLabel","div","theme","colors","primary","base","StyledPopoverItem","grayscale","dark2","SavedQueryList","addDangerToast","addSuccessToast","state","loading","resourceCount","queryCount","resourceCollection","queries","bulkSelectEnabled","hasPerm","fetchData","toggleBulkSelect","refreshData","queryCurrentlyDeleting","setQueryCurrentlyDeleting","savedQueryCurrentlyPreviewing","setSavedQueryCurrentlyPreviewing","importingSavedQuery","showImportModal","passwordFields","setPasswordFields","preparingExport","setPreparingExport","sshTunnelPasswordFields","setSSHTunnelPasswordFields","sshTunnelPrivateKeyFields","setSSHTunnelPrivateKeyFields","sshTunnelPrivateKeyPasswordFields","setSSHTunnelPrivateKeyPasswordFields","openSavedQueryImportModal","closeSavedQueryImportModal","handleSavedQueryImport","canCreate","canEdit","canDelete","canExport","VERSIONED_EXPORT","openNewQuery","window","open","location","origin","handleSavedQueryPreview","id","get","endpoint","then","json","result","errMsg","menuData","activeChild","subMenuButtons","push","name","onClick","buttonStyle","buttons","openInSqlLab","copyQueryLink","Promise","resolve","catch","handleQueryDelete","label","delete","handleBulkSavedQueryExport","savedQueriesToExport","ids","map","handleBulkQueryDelete","queriesToDelete","encode","message","initialSort","desc","columns","accessor","Header","size","hidden","disableSortBy","Cell","row","original","sql_tables","tables","names","table","main","shift","length","created_on","createdOn","date","Date","utc","UTC","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","fromNow","changed_on_delta_humanized","changedOn","tags","filter","tag","type","TAGGING_SYSTEM","handlePreview","handleEdit","handleCopy","handleExport","handleDelete","actions","tooltip","placement","icon","item","filters","key","input","operator","relationOneMany","unfilteredLabel","fetchSelects","paginate","equals","savedQueryTags","allText","bulkActions","onSelect","confirmDelete"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/pages/SavedQueryList/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { FeatureFlag, styled, SupersetClient, t } from '@superset-ui/core';\nimport React, { useState, useMemo, useCallback } from 'react';\nimport rison from 'rison';\nimport moment from 'moment';\nimport {\n  createFetchRelated,\n  createFetchDistinct,\n  createErrorHandler,\n} from 'src/views/CRUD/utils';\nimport Popover from 'src/components/Popover';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { useListViewResource } from 'src/views/CRUD/hooks';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport handleResourceExport from 'src/utils/export';\nimport SubMenu, { SubMenuProps, ButtonProps } from 'src/features/home/SubMenu';\nimport ListView, {\n  ListViewProps,\n  Filters,\n  FilterOperator,\n} from 'src/components/ListView';\nimport Loading from 'src/components/Loading';\nimport DeleteModal from 'src/components/DeleteModal';\nimport ActionsBar, { ActionProps } from 'src/components/ListView/ActionsBar';\nimport { TagsList } from 'src/components/Tags';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { commonMenuData } from 'src/features/home/commonMenuData';\nimport { SavedQueryObject } from 'src/views/CRUD/types';\nimport copyTextToClipboard from 'src/utils/copy';\nimport Tag from 'src/types/TagType';\nimport { isFeatureEnabled } from 'src/featureFlags';\nimport ImportModelsModal from 'src/components/ImportModal/index';\nimport Icons from 'src/components/Icons';\nimport { BootstrapUser } from 'src/types/bootstrapTypes';\nimport SavedQueryPreviewModal from 'src/features/queries/SavedQueryPreviewModal';\n\nconst PAGE_SIZE = 25;\nconst PASSWORDS_NEEDED_MESSAGE = t(\n  'The passwords for the databases below are needed in order to ' +\n    'import them together with the saved queries. Please note that the ' +\n    '\"Secure Extra\" and \"Certificate\" sections of ' +\n    'the database configuration are not present in export files, and ' +\n    'should be added manually after the import if they are needed.',\n);\nconst CONFIRM_OVERWRITE_MESSAGE = t(\n  'You are importing one or more saved queries that already exist. ' +\n    'Overwriting might cause you to lose some of your work. Are you ' +\n    'sure you want to overwrite?',\n);\n\ninterface SavedQueryListProps {\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n  user: BootstrapUser;\n}\n\nconst StyledTableLabel = styled.div`\n  .count {\n    margin-left: 5px;\n    color: ${({ theme }) => theme.colors.primary.base};\n    text-decoration: underline;\n    cursor: pointer;\n  }\n`;\n\nconst StyledPopoverItem = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.dark2};\n`;\n\nfunction SavedQueryList({\n  addDangerToast,\n  addSuccessToast,\n}: SavedQueryListProps) {\n  const {\n    state: {\n      loading,\n      resourceCount: queryCount,\n      resourceCollection: queries,\n      bulkSelectEnabled,\n    },\n    hasPerm,\n    fetchData,\n    toggleBulkSelect,\n    refreshData,\n  } = useListViewResource<SavedQueryObject>(\n    'saved_query',\n    t('Saved queries'),\n    addDangerToast,\n  );\n  const [queryCurrentlyDeleting, setQueryCurrentlyDeleting] =\n    useState<SavedQueryObject | null>(null);\n  const [savedQueryCurrentlyPreviewing, setSavedQueryCurrentlyPreviewing] =\n    useState<SavedQueryObject | null>(null);\n  const [importingSavedQuery, showImportModal] = useState<boolean>(false);\n  const [passwordFields, setPasswordFields] = useState<string[]>([]);\n  const [preparingExport, setPreparingExport] = useState<boolean>(false);\n  const [sshTunnelPasswordFields, setSSHTunnelPasswordFields] = useState<\n    string[]\n  >([]);\n  const [sshTunnelPrivateKeyFields, setSSHTunnelPrivateKeyFields] = useState<\n    string[]\n  >([]);\n  const [\n    sshTunnelPrivateKeyPasswordFields,\n    setSSHTunnelPrivateKeyPasswordFields,\n  ] = useState<string[]>([]);\n\n  const openSavedQueryImportModal = () => {\n    showImportModal(true);\n  };\n\n  const closeSavedQueryImportModal = () => {\n    showImportModal(false);\n  };\n\n  const handleSavedQueryImport = () => {\n    showImportModal(false);\n    refreshData();\n    addSuccessToast(t('Query imported'));\n  };\n\n  const canCreate = hasPerm('can_write');\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canExport =\n    hasPerm('can_export') && isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT);\n\n  const openNewQuery = () => {\n    window.open(`${window.location.origin}/superset/sqllab?new=true`);\n  };\n\n  const handleSavedQueryPreview = useCallback(\n    (id: number) => {\n      SupersetClient.get({\n        endpoint: `/api/v1/saved_query/${id}`,\n      }).then(\n        ({ json = {} }) => {\n          setSavedQueryCurrentlyPreviewing({ ...json.result });\n        },\n        createErrorHandler(errMsg =>\n          addDangerToast(\n            t('There was an issue previewing the selected query %s', errMsg),\n          ),\n        ),\n      );\n    },\n    [addDangerToast],\n  );\n\n  const menuData: SubMenuProps = {\n    activeChild: 'Saved queries',\n    ...commonMenuData,\n  };\n\n  const subMenuButtons: Array<ButtonProps> = [];\n\n  if (canDelete) {\n    subMenuButtons.push({\n      name: t('Bulk select'),\n      onClick: toggleBulkSelect,\n      buttonStyle: 'secondary',\n    });\n  }\n\n  subMenuButtons.push({\n    name: (\n      <>\n        <i className=\"fa fa-plus\" /> {t('Query')}\n      </>\n    ),\n    onClick: openNewQuery,\n    buttonStyle: 'primary',\n  });\n\n  if (canCreate && isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT)) {\n    subMenuButtons.push({\n      name: (\n        <Tooltip\n          id=\"import-tooltip\"\n          title={t('Import queries')}\n          placement=\"bottomRight\"\n          data-test=\"import-tooltip-test\"\n        >\n          <Icons.Import data-test=\"import-icon\" />\n        </Tooltip>\n      ),\n      buttonStyle: 'link',\n      onClick: openSavedQueryImportModal,\n      'data-test': 'import-button',\n    });\n  }\n\n  menuData.buttons = subMenuButtons;\n\n  // Action methods\n  const openInSqlLab = (id: number) => {\n    window.open(`${window.location.origin}/superset/sqllab?savedQueryId=${id}`);\n  };\n\n  const copyQueryLink = useCallback(\n    (id: number) => {\n      copyTextToClipboard(() =>\n        Promise.resolve(\n          `${window.location.origin}/superset/sqllab?savedQueryId=${id}`,\n        ),\n      )\n        .then(() => {\n          addSuccessToast(t('Link Copied!'));\n        })\n        .catch(() => {\n          addDangerToast(t('Sorry, your browser does not support copying.'));\n        });\n    },\n    [addDangerToast, addSuccessToast],\n  );\n\n  const handleQueryDelete = ({ id, label }: SavedQueryObject) => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/saved_query/${id}`,\n    }).then(\n      () => {\n        refreshData();\n        setQueryCurrentlyDeleting(null);\n        addSuccessToast(t('Deleted: %s', label));\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(t('There was an issue deleting %s: %s', label, errMsg)),\n      ),\n    );\n  };\n\n  const handleBulkSavedQueryExport = (\n    savedQueriesToExport: SavedQueryObject[],\n  ) => {\n    const ids = savedQueriesToExport.map(({ id }) => id);\n    handleResourceExport('saved_query', ids, () => {\n      setPreparingExport(false);\n    });\n    setPreparingExport(true);\n  };\n\n  const handleBulkQueryDelete = (queriesToDelete: SavedQueryObject[]) => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/saved_query/?q=${rison.encode(\n        queriesToDelete.map(({ id }) => id),\n      )}`,\n    }).then(\n      ({ json = {} }) => {\n        refreshData();\n        addSuccessToast(json.message);\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(\n          t('There was an issue deleting the selected queries: %s', errMsg),\n        ),\n      ),\n    );\n  };\n\n  const initialSort = [{ id: 'changed_on_delta_humanized', desc: true }];\n  const columns = useMemo(\n    () => [\n      {\n        accessor: 'label',\n        Header: t('Name'),\n      },\n      {\n        accessor: 'database.database_name',\n        Header: t('Database'),\n        size: 'xl',\n      },\n      {\n        accessor: 'database',\n        hidden: true,\n        disableSortBy: true,\n      },\n      {\n        accessor: 'schema',\n        Header: t('Schema'),\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { sql_tables: tables = [] },\n          },\n        }: any) => {\n          const names = tables.map((table: any) => table.table);\n          const main = names?.shift() || '';\n\n          if (names.length) {\n            return (\n              <StyledTableLabel>\n                <span>{main}</span>\n                <Popover\n                  placement=\"right\"\n                  title={t('TABLES')}\n                  trigger=\"click\"\n                  content={\n                    <>\n                      {names.map((name: string) => (\n                        <StyledPopoverItem key={name}>{name}</StyledPopoverItem>\n                      ))}\n                    </>\n                  }\n                >\n                  <span className=\"count\">(+{names.length})</span>\n                </Popover>\n              </StyledTableLabel>\n            );\n          }\n\n          return main;\n        },\n        accessor: 'sql_tables',\n        Header: t('Tables'),\n        size: 'xl',\n        disableSortBy: true,\n      },\n      {\n        Cell: ({\n          row: {\n            original: { created_on: createdOn },\n          },\n        }: any) => {\n          const date = new Date(createdOn);\n          const utc = new Date(\n            Date.UTC(\n              date.getFullYear(),\n              date.getMonth(),\n              date.getDate(),\n              date.getHours(),\n              date.getMinutes(),\n              date.getSeconds(),\n              date.getMilliseconds(),\n            ),\n          );\n\n          return moment(utc).fromNow();\n        },\n        Header: t('Created on'),\n        accessor: 'created_on',\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { changed_on_delta_humanized: changedOn },\n          },\n        }: any) => changedOn,\n        Header: t('Modified'),\n        accessor: 'changed_on_delta_humanized',\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { tags = [] },\n          },\n        }: any) => (\n          // Only show custom type tags\n          <TagsList tags={tags.filter((tag: Tag) => tag.type === 1)} />\n        ),\n        Header: t('Tags'),\n        accessor: 'tags',\n        disableSortBy: true,\n        hidden: !isFeatureEnabled(FeatureFlag.TAGGING_SYSTEM),\n      },\n      {\n        Cell: ({ row: { original } }: any) => {\n          const handlePreview = () => {\n            handleSavedQueryPreview(original.id);\n          };\n          const handleEdit = () => openInSqlLab(original.id);\n          const handleCopy = () => copyQueryLink(original.id);\n          const handleExport = () => handleBulkSavedQueryExport([original]);\n          const handleDelete = () => setQueryCurrentlyDeleting(original);\n\n          const actions = [\n            {\n              label: 'preview-action',\n              tooltip: t('Query preview'),\n              placement: 'bottom',\n              icon: 'Binoculars',\n              onClick: handlePreview,\n            },\n            canEdit && {\n              label: 'edit-action',\n              tooltip: t('Edit query'),\n              placement: 'bottom',\n              icon: 'Edit',\n              onClick: handleEdit,\n            },\n            {\n              label: 'copy-action',\n              tooltip: t('Copy query URL'),\n              placement: 'bottom',\n              icon: 'Copy',\n              onClick: handleCopy,\n            },\n            canExport && {\n              label: 'export-action',\n              tooltip: t('Export query'),\n              placement: 'bottom',\n              icon: 'Share',\n              onClick: handleExport,\n            },\n            canDelete && {\n              label: 'delete-action',\n              tooltip: t('Delete query'),\n              placement: 'bottom',\n              icon: 'Trash',\n              onClick: handleDelete,\n            },\n          ].filter(item => !!item);\n\n          return <ActionsBar actions={actions as ActionProps[]} />;\n        },\n        Header: t('Actions'),\n        id: 'actions',\n        disableSortBy: true,\n      },\n    ],\n    [canDelete, canEdit, canExport, copyQueryLink, handleSavedQueryPreview],\n  );\n\n  const filters: Filters = useMemo(\n    () => [\n      {\n        Header: t('Database'),\n        key: 'database',\n        id: 'database',\n        input: 'select',\n        operator: FilterOperator.relationOneMany,\n        unfilteredLabel: t('All'),\n        fetchSelects: createFetchRelated(\n          'saved_query',\n          'database',\n          createErrorHandler(errMsg =>\n            addDangerToast(\n              t(\n                'An error occurred while fetching dataset datasource values: %s',\n                errMsg,\n              ),\n            ),\n          ),\n        ),\n        paginate: true,\n      },\n      {\n        Header: t('Schema'),\n        id: 'schema',\n        key: 'schema',\n        input: 'select',\n        operator: FilterOperator.equals,\n        unfilteredLabel: 'All',\n        fetchSelects: createFetchDistinct(\n          'saved_query',\n          'schema',\n          createErrorHandler(errMsg =>\n            addDangerToast(\n              t('An error occurred while fetching schema values: %s', errMsg),\n            ),\n          ),\n        ),\n        paginate: true,\n      },\n      {\n        Header: t('Tags'),\n        id: 'tags',\n        key: 'tags',\n        input: 'search',\n        operator: FilterOperator.savedQueryTags,\n      },\n      {\n        Header: t('Search'),\n        id: 'label',\n        key: 'search',\n        input: 'search',\n        operator: FilterOperator.allText,\n      },\n    ],\n    [addDangerToast],\n  );\n\n  return (\n    <>\n      <SubMenu {...menuData} />\n      {queryCurrentlyDeleting && (\n        <DeleteModal\n          description={t(\n            'This action will permanently delete the saved query.',\n          )}\n          onConfirm={() => {\n            if (queryCurrentlyDeleting) {\n              handleQueryDelete(queryCurrentlyDeleting);\n            }\n          }}\n          onHide={() => setQueryCurrentlyDeleting(null)}\n          open\n          title={t('Delete Query?')}\n        />\n      )}\n      {savedQueryCurrentlyPreviewing && (\n        <SavedQueryPreviewModal\n          fetchData={handleSavedQueryPreview}\n          onHide={() => setSavedQueryCurrentlyPreviewing(null)}\n          savedQuery={savedQueryCurrentlyPreviewing}\n          queries={queries}\n          openInSqlLab={openInSqlLab}\n          show\n        />\n      )}\n      <ConfirmStatusChange\n        title={t('Please confirm')}\n        description={t('Are you sure you want to delete the selected queries?')}\n        onConfirm={handleBulkQueryDelete}\n      >\n        {confirmDelete => {\n          const bulkActions: ListViewProps['bulkActions'] = [];\n          if (canDelete) {\n            bulkActions.push({\n              key: 'delete',\n              name: t('Delete'),\n              onSelect: confirmDelete,\n              type: 'danger',\n            });\n          }\n          if (canExport) {\n            bulkActions.push({\n              key: 'export',\n              name: t('Export'),\n              type: 'primary',\n              onSelect: handleBulkSavedQueryExport,\n            });\n          }\n          return (\n            <ListView<SavedQueryObject>\n              className=\"saved_query-list-view\"\n              columns={columns}\n              count={queryCount}\n              data={queries}\n              fetchData={fetchData}\n              filters={filters}\n              initialSort={initialSort}\n              loading={loading}\n              pageSize={PAGE_SIZE}\n              bulkActions={bulkActions}\n              bulkSelectEnabled={bulkSelectEnabled}\n              disableBulkSelect={toggleBulkSelect}\n              highlightRowId={savedQueryCurrentlyPreviewing?.id}\n            />\n          );\n        }}\n      </ConfirmStatusChange>\n\n      <ImportModelsModal\n        resourceName=\"saved_query\"\n        resourceLabel={t('queries')}\n        passwordsNeededMessage={PASSWORDS_NEEDED_MESSAGE}\n        confirmOverwriteMessage={CONFIRM_OVERWRITE_MESSAGE}\n        addDangerToast={addDangerToast}\n        addSuccessToast={addSuccessToast}\n        onModelImport={handleSavedQueryImport}\n        show={importingSavedQuery}\n        onHide={closeSavedQueryImportModal}\n        passwordFields={passwordFields}\n        setPasswordFields={setPasswordFields}\n        sshTunnelPasswordFields={sshTunnelPasswordFields}\n        setSSHTunnelPasswordFields={setSSHTunnelPasswordFields}\n        sshTunnelPrivateKeyFields={sshTunnelPrivateKeyFields}\n        setSSHTunnelPrivateKeyFields={setSSHTunnelPrivateKeyFields}\n        sshTunnelPrivateKeyPasswordFields={sshTunnelPrivateKeyPasswordFields}\n        setSSHTunnelPrivateKeyPasswordFields={\n          setSSHTunnelPrivateKeyPasswordFields\n        }\n      />\n      {preparingExport && <Loading />}\n    </>\n  );\n}\n\nexport default withToasts(SavedQueryList);\n"]},"metadata":{},"sourceType":"module"}