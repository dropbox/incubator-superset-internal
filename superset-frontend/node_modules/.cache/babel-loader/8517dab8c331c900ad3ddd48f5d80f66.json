{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport columnType from './columnType';\nimport AdhocMetricOption from './AdhocMetricOption';\nimport AdhocMetric from './AdhocMetric';\nimport savedMetricType from './savedMetricType';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  option: PropTypes.oneOfType([PropTypes.object, PropTypes.string]).isRequired,\n  index: PropTypes.number.isRequired,\n  onMetricEdit: PropTypes.func,\n  onRemoveMetric: PropTypes.func,\n  onMoveLabel: PropTypes.func,\n  onDropLabel: PropTypes.func,\n  columns: PropTypes.arrayOf(columnType),\n  savedMetrics: PropTypes.arrayOf(savedMetricType),\n  savedMetricsOptions: PropTypes.arrayOf(savedMetricType),\n  multi: PropTypes.bool,\n  datasource: PropTypes.object,\n  datasourceWarningMessage: PropTypes.string };\n\n\nexport default function MetricDefinitionValue(_ref)\n\n\n\n\n\n\n\n\n\n\n\n\n\n{let { option, onMetricEdit, onRemoveMetric, columns, savedMetrics, savedMetricsOptions, datasource, onMoveLabel, onDropLabel, index, type, multi, datasourceWarningMessage } = _ref;\n  const getSavedMetricByName = (metricName) =>\n  savedMetrics.find((metric) => metric.metric_name === metricName);\n\n  let savedMetric;\n  if (typeof option === 'string') {\n    savedMetric = getSavedMetricByName(option);\n  } else if (option.metric_name) {\n    savedMetric = option;\n  }\n\n  if (option instanceof AdhocMetric || savedMetric) {var _savedMetric;\n    const adhocMetric =\n    option instanceof AdhocMetric ? option : new AdhocMetric({});\n\n    const metricOptionProps = {\n      onMetricEdit,\n      onRemoveMetric,\n      columns,\n      savedMetricsOptions,\n      datasource,\n      adhocMetric,\n      onMoveLabel,\n      onDropLabel,\n      index,\n      savedMetric: (_savedMetric = savedMetric) != null ? _savedMetric : {},\n      type,\n      multi,\n      datasourceWarningMessage };\n\n\n    return ___EmotionJSX(AdhocMetricOption, metricOptionProps);\n  }\n  return null;\n}\nMetricDefinitionValue.propTypes = propTypes;","map":{"version":3,"names":["React","PropTypes","columnType","AdhocMetricOption","AdhocMetric","savedMetricType","propTypes","option","oneOfType","object","string","isRequired","index","number","onMetricEdit","func","onRemoveMetric","onMoveLabel","onDropLabel","columns","arrayOf","savedMetrics","savedMetricsOptions","multi","bool","datasource","datasourceWarningMessage","MetricDefinitionValue","type","getSavedMetricByName","metricName","find","metric","metric_name","savedMetric","adhocMetric","metricOptionProps"],"sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/explore/components/controls/MetricControl/MetricDefinitionValue.jsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport columnType from './columnType';\nimport AdhocMetricOption from './AdhocMetricOption';\nimport AdhocMetric from './AdhocMetric';\nimport savedMetricType from './savedMetricType';\n\nconst propTypes = {\n  option: PropTypes.oneOfType([PropTypes.object, PropTypes.string]).isRequired,\n  index: PropTypes.number.isRequired,\n  onMetricEdit: PropTypes.func,\n  onRemoveMetric: PropTypes.func,\n  onMoveLabel: PropTypes.func,\n  onDropLabel: PropTypes.func,\n  columns: PropTypes.arrayOf(columnType),\n  savedMetrics: PropTypes.arrayOf(savedMetricType),\n  savedMetricsOptions: PropTypes.arrayOf(savedMetricType),\n  multi: PropTypes.bool,\n  datasource: PropTypes.object,\n  datasourceWarningMessage: PropTypes.string,\n};\n\nexport default function MetricDefinitionValue({\n  option,\n  onMetricEdit,\n  onRemoveMetric,\n  columns,\n  savedMetrics,\n  savedMetricsOptions,\n  datasource,\n  onMoveLabel,\n  onDropLabel,\n  index,\n  type,\n  multi,\n  datasourceWarningMessage,\n}) {\n  const getSavedMetricByName = metricName =>\n    savedMetrics.find(metric => metric.metric_name === metricName);\n\n  let savedMetric;\n  if (typeof option === 'string') {\n    savedMetric = getSavedMetricByName(option);\n  } else if (option.metric_name) {\n    savedMetric = option;\n  }\n\n  if (option instanceof AdhocMetric || savedMetric) {\n    const adhocMetric =\n      option instanceof AdhocMetric ? option : new AdhocMetric({});\n\n    const metricOptionProps = {\n      onMetricEdit,\n      onRemoveMetric,\n      columns,\n      savedMetricsOptions,\n      datasource,\n      adhocMetric,\n      onMoveLabel,\n      onDropLabel,\n      index,\n      savedMetric: savedMetric ?? {},\n      type,\n      multi,\n      datasourceWarningMessage,\n    };\n\n    return <AdhocMetricOption {...metricOptionProps} />;\n  }\n  return null;\n}\nMetricDefinitionValue.propTypes = propTypes;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,eAAP,MAA4B,mBAA5B,C;;AAEA,MAAMC,SAAS,GAAG;EAChBC,MAAM,EAAEN,SAAS,CAACO,SAAV,CAAoB,CAACP,SAAS,CAACQ,MAAX,EAAmBR,SAAS,CAACS,MAA7B,CAApB,EAA0DC,UADlD;EAEhBC,KAAK,EAAEX,SAAS,CAACY,MAAV,CAAiBF,UAFR;EAGhBG,YAAY,EAAEb,SAAS,CAACc,IAHR;EAIhBC,cAAc,EAAEf,SAAS,CAACc,IAJV;EAKhBE,WAAW,EAAEhB,SAAS,CAACc,IALP;EAMhBG,WAAW,EAAEjB,SAAS,CAACc,IANP;EAOhBI,OAAO,EAAElB,SAAS,CAACmB,OAAV,CAAkBlB,UAAlB,CAPO;EAQhBmB,YAAY,EAAEpB,SAAS,CAACmB,OAAV,CAAkBf,eAAlB,CARE;EAShBiB,mBAAmB,EAAErB,SAAS,CAACmB,OAAV,CAAkBf,eAAlB,CATL;EAUhBkB,KAAK,EAAEtB,SAAS,CAACuB,IAVD;EAWhBC,UAAU,EAAExB,SAAS,CAACQ,MAXN;EAYhBiB,wBAAwB,EAAEzB,SAAS,CAACS,MAZpB,EAAlB;;;AAeA,eAAe,SAASiB,qBAAT;;;;;;;;;;;;;;AAcZ,KAd2C,EAC5CpB,MAD4C,EAE5CO,YAF4C,EAG5CE,cAH4C,EAI5CG,OAJ4C,EAK5CE,YAL4C,EAM5CC,mBAN4C,EAO5CG,UAP4C,EAQ5CR,WAR4C,EAS5CC,WAT4C,EAU5CN,KAV4C,EAW5CgB,IAX4C,EAY5CL,KAZ4C,EAa5CG,wBAb4C,EAc3C;EACD,MAAMG,oBAAoB,GAAG,CAAAC,UAAU;EACrCT,YAAY,CAACU,IAAb,CAAkB,CAAAC,MAAM,KAAIA,MAAM,CAACC,WAAP,KAAuBH,UAAnD,CADF;;EAGA,IAAII,WAAJ;EACA,IAAI,OAAO3B,MAAP,KAAkB,QAAtB,EAAgC;IAC9B2B,WAAW,GAAGL,oBAAoB,CAACtB,MAAD,CAAlC;EACD,CAFD,MAEO,IAAIA,MAAM,CAAC0B,WAAX,EAAwB;IAC7BC,WAAW,GAAG3B,MAAd;EACD;;EAED,IAAIA,MAAM,YAAYH,WAAlB,IAAiC8B,WAArC,EAAkD;IAChD,MAAMC,WAAW;IACf5B,MAAM,YAAYH,WAAlB,GAAgCG,MAAhC,GAAyC,IAAIH,WAAJ,CAAgB,EAAhB,CAD3C;;IAGA,MAAMgC,iBAAiB,GAAG;MACxBtB,YADwB;MAExBE,cAFwB;MAGxBG,OAHwB;MAIxBG,mBAJwB;MAKxBG,UALwB;MAMxBU,WANwB;MAOxBlB,WAPwB;MAQxBC,WARwB;MASxBN,KATwB;MAUxBsB,WAAW,kBAAEA,WAAF,2BAAiB,EAVJ;MAWxBN,IAXwB;MAYxBL,KAZwB;MAaxBG,wBAbwB,EAA1B;;;IAgBA,OAAO,cAAC,iBAAD,EAAuBU,iBAAvB,CAAP;EACD;EACD,OAAO,IAAP;AACD;AACDT,qBAAqB,CAACrB,SAAtB,GAAkCA,SAAlC"},"metadata":{},"sourceType":"module"}