{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { isEqualArray } from '@superset-ui/core';\nexport default function isEqualColumns(propsA, propsB) {var _a$queriesData, _a$queriesData$, _b$queriesData, _b$queriesData$, _a$queriesData2, _a$queriesData2$, _b$queriesData2, _b$queriesData2$;\n  const a = propsA[0];\n  const b = propsB[0];\n  return a.datasource.columnFormats === b.datasource.columnFormats &&\n  a.datasource.currencyFormats === b.datasource.currencyFormats &&\n  a.datasource.verboseMap === b.datasource.verboseMap &&\n  a.formData.tableTimestampFormat === b.formData.tableTimestampFormat &&\n  a.formData.timeGrainSqla === b.formData.timeGrainSqla &&\n  JSON.stringify(a.formData.columnConfig || null) ===\n  JSON.stringify(b.formData.columnConfig || null) &&\n  isEqualArray(a.formData.metrics, b.formData.metrics) &&\n  isEqualArray((_a$queriesData = a.queriesData) == null ? void 0 : (_a$queriesData$ = _a$queriesData[0]) == null ? void 0 : _a$queriesData$.colnames, (_b$queriesData = b.queriesData) == null ? void 0 : (_b$queriesData$ = _b$queriesData[0]) == null ? void 0 : _b$queriesData$.colnames) &&\n  isEqualArray((_a$queriesData2 = a.queriesData) == null ? void 0 : (_a$queriesData2$ = _a$queriesData2[0]) == null ? void 0 : _a$queriesData2$.coltypes, (_b$queriesData2 = b.queriesData) == null ? void 0 : (_b$queriesData2$ = _b$queriesData2[0]) == null ? void 0 : _b$queriesData2$.coltypes) &&\n  JSON.stringify(a.formData.extraFilters || null) ===\n  JSON.stringify(b.formData.extraFilters || null) &&\n  JSON.stringify(a.formData.extraFormData || null) ===\n  JSON.stringify(b.formData.extraFormData || null);\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,SAASA,YAAT,QAA6B,mBAA7B;AAGA,eAAc,SAAUC,cAAV,CACZC,MADY,EAEZC,MAFY,EAEa;EAEzB,MAAMC,CAAC,GAAGF,MAAM,CAAC,CAAD,CAAhB;EACA,MAAMG,CAAC,GAAGF,MAAM,CAAC,CAAD,CAAhB;EACA,OACEC,CAAC,CAACE,UAAF,CAAaC,aAAb,KAA+BF,CAAC,CAACC,UAAF,CAAaC,aAA5C;EACAH,CAAC,CAACE,UAAF,CAAaE,eAAb,KAAiCH,CAAC,CAACC,UAAF,CAAaE,eAD9C;EAEAJ,CAAC,CAACE,UAAF,CAAaG,UAAb,KAA4BJ,CAAC,CAACC,UAAF,CAAaG,UAFzC;EAGAL,CAAC,CAACM,QAAF,CAAWC,oBAAX,KAAoCN,CAAC,CAACK,QAAF,CAAWC,oBAH/C;EAIAP,CAAC,CAACM,QAAF,CAAWE,aAAX,KAA6BP,CAAC,CAACK,QAAF,CAAWE,aAJxC;EAKAC,IAAI,CAACC,SAAL,CAAeV,CAAC,CAACM,QAAF,CAAWK,YAAX,IAA2B,IAA1C;EACEF,IAAI,CAACC,SAAL,CAAeT,CAAC,CAACK,QAAF,CAAWK,YAAX,IAA2B,IAA1C,CANF;EAOAf,YAAY,CAACI,CAAC,CAACM,QAAF,CAAWM,OAAZ,EAAqBX,CAAC,CAACK,QAAF,CAAWM,OAAhC,CAPZ;EAQAhB,YAAY,mBAACI,CAAC,CAACa,WAAH,wCAAC,eAAgB,CAAhB,CAAD,qBAAC,gBAAoBC,QAArB,oBAA+Bb,CAAC,CAACY,WAAjC,wCAA+B,eAAgB,CAAhB,CAA/B,qBAA+B,gBAAoBC,QAAnD,CARZ;EASAlB,YAAY,oBAACI,CAAC,CAACa,WAAH,yCAAC,gBAAgB,CAAhB,CAAD,qBAAC,iBAAoBE,QAArB,qBAA+Bd,CAAC,CAACY,WAAjC,yCAA+B,gBAAgB,CAAhB,CAA/B,qBAA+B,iBAAoBE,QAAnD,CATZ;EAUAN,IAAI,CAACC,SAAL,CAAeV,CAAC,CAACM,QAAF,CAAWU,YAAX,IAA2B,IAA1C;EACEP,IAAI,CAACC,SAAL,CAAeT,CAAC,CAACK,QAAF,CAAWU,YAAX,IAA2B,IAA1C,CAXF;EAYAP,IAAI,CAACC,SAAL,CAAeV,CAAC,CAACM,QAAF,CAAWW,aAAX,IAA4B,IAA3C;EACER,IAAI,CAACC,SAAL,CAAeT,CAAC,CAACK,QAAF,CAAWW,aAAX,IAA4B,IAA3C,CAdJ;AAgBD","names":["isEqualArray","isEqualColumns","propsA","propsB","a","b","datasource","columnFormats","currencyFormats","verboseMap","formData","tableTimestampFormat","timeGrainSqla","JSON","stringify","columnConfig","metrics","queriesData","colnames","coltypes","extraFilters","extraFormData"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/plugins/plugin-chart-table/src/utils/isEqualColumns.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { isEqualArray } from '@superset-ui/core';\nimport { TableChartProps } from '../types';\n\nexport default function isEqualColumns(\n  propsA: TableChartProps[],\n  propsB: TableChartProps[],\n) {\n  const a = propsA[0];\n  const b = propsB[0];\n  return (\n    a.datasource.columnFormats === b.datasource.columnFormats &&\n    a.datasource.currencyFormats === b.datasource.currencyFormats &&\n    a.datasource.verboseMap === b.datasource.verboseMap &&\n    a.formData.tableTimestampFormat === b.formData.tableTimestampFormat &&\n    a.formData.timeGrainSqla === b.formData.timeGrainSqla &&\n    JSON.stringify(a.formData.columnConfig || null) ===\n      JSON.stringify(b.formData.columnConfig || null) &&\n    isEqualArray(a.formData.metrics, b.formData.metrics) &&\n    isEqualArray(a.queriesData?.[0]?.colnames, b.queriesData?.[0]?.colnames) &&\n    isEqualArray(a.queriesData?.[0]?.coltypes, b.queriesData?.[0]?.coltypes) &&\n    JSON.stringify(a.formData.extraFilters || null) ===\n      JSON.stringify(b.formData.extraFilters || null) &&\n    JSON.stringify(a.formData.extraFormData || null) ===\n      JSON.stringify(b.formData.extraFormData || null)\n  );\n}\n"]},"metadata":{},"sourceType":"module"}