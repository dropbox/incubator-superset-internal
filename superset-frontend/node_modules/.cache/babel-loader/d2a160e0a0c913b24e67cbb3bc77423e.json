{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t, validateNonEmpty } from '@superset-ui/core';\nimport { sections, sharedControls } from '@superset-ui/chart-controls';\nimport { DEFAULT_FORM_DATA } from './types';\nconst { enableEmptyFilter, inverseSelection, multiSelect, defaultToFirstItem, searchAllOptions, sortAscending } = DEFAULT_FORM_DATA;\nconst config = {\n  controlPanelSections: [\n  // @ts-ignore\n  sections.legacyRegularTime,\n  {\n    label: t('Query'),\n    expanded: true,\n    controlSetRows: [\n    [\n    {\n      name: 'groupby',\n      config: {\n        ...sharedControls.groupby,\n        label: t('Column'),\n        required: true } }]] },\n\n\n\n\n\n  {\n    label: t('UI Configuration'),\n    expanded: true,\n    controlSetRows: [\n    [\n    {\n      name: 'sortAscending',\n      config: {\n        type: 'CheckboxControl',\n        renderTrigger: true,\n        label: t('Sort ascending'),\n        default: sortAscending,\n        description: t('Check for sorting ascending') } }],\n\n\n\n    [\n    {\n      name: 'multiSelect',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Can select multiple values'),\n        default: multiSelect,\n        resetConfig: true,\n        affectsDataMask: true,\n        renderTrigger: true } }],\n\n\n\n    [\n    {\n      name: 'enableEmptyFilter',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Filter value is required'),\n        default: enableEmptyFilter,\n        renderTrigger: true,\n        description: t('User must select a value before applying the filter') } }],\n\n\n\n    [\n    {\n      name: 'defaultToFirstItem',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Select first filter value by default'),\n        default: defaultToFirstItem,\n        resetConfig: true,\n        affectsDataMask: true,\n        renderTrigger: true,\n        requiredFirst: true,\n        description: t('When using this option, default value can’t be set') } }],\n\n\n\n    [\n    {\n      name: 'inverseSelection',\n      config: {\n        type: 'CheckboxControl',\n        renderTrigger: true,\n        affectsDataMask: true,\n        label: t('Inverse selection'),\n        default: inverseSelection,\n        description: t('Exclude selected values') } }],\n\n\n\n    [\n    {\n      name: 'searchAllOptions',\n      config: {\n        type: 'CheckboxControl',\n        renderTrigger: true,\n        affectsDataMask: true,\n        label: t('Dynamically search all filter values'),\n        default: searchAllOptions,\n        description: t('By default, each filter loads at most 1000 choices at the initial page load. ' +\n        'Check this box if you have more than 1000 filter values and want to enable dynamically ' +\n        'searching that loads filter values as users type (may add stress to your database).') } }]] }],\n\n\n\n\n\n\n  controlOverrides: {\n    groupby: {\n      multi: false,\n      validators: [validateNonEmpty] } } };\n\n\n\nexport default config;","map":{"version":3,"mappings":"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","names":["t","validateNonEmpty","sections","sharedControls","DEFAULT_FORM_DATA","enableEmptyFilter","inverseSelection","multiSelect","defaultToFirstItem","searchAllOptions","sortAscending","config","controlPanelSections","legacyRegularTime","label","expanded","controlSetRows","name","groupby","required","type","renderTrigger","default","description","resetConfig","affectsDataMask","requiredFirst","controlOverrides","multi","validators"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/filters/components/Select/controlPanel.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t, validateNonEmpty } from '@superset-ui/core';\nimport {\n  ControlPanelConfig,\n  sections,\n  sharedControls,\n} from '@superset-ui/chart-controls';\nimport { DEFAULT_FORM_DATA } from './types';\n\nconst {\n  enableEmptyFilter,\n  inverseSelection,\n  multiSelect,\n  defaultToFirstItem,\n  searchAllOptions,\n  sortAscending,\n} = DEFAULT_FORM_DATA;\n\nconst config: ControlPanelConfig = {\n  controlPanelSections: [\n    // @ts-ignore\n    sections.legacyRegularTime,\n    {\n      label: t('Query'),\n      expanded: true,\n      controlSetRows: [\n        [\n          {\n            name: 'groupby',\n            config: {\n              ...sharedControls.groupby,\n              label: t('Column'),\n              required: true,\n            },\n          },\n        ],\n      ],\n    },\n    {\n      label: t('UI Configuration'),\n      expanded: true,\n      controlSetRows: [\n        [\n          {\n            name: 'sortAscending',\n            config: {\n              type: 'CheckboxControl',\n              renderTrigger: true,\n              label: t('Sort ascending'),\n              default: sortAscending,\n              description: t('Check for sorting ascending'),\n            },\n          },\n        ],\n        [\n          {\n            name: 'multiSelect',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Can select multiple values'),\n              default: multiSelect,\n              resetConfig: true,\n              affectsDataMask: true,\n              renderTrigger: true,\n            },\n          },\n        ],\n        [\n          {\n            name: 'enableEmptyFilter',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Filter value is required'),\n              default: enableEmptyFilter,\n              renderTrigger: true,\n              description: t(\n                'User must select a value before applying the filter',\n              ),\n            },\n          },\n        ],\n        [\n          {\n            name: 'defaultToFirstItem',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Select first filter value by default'),\n              default: defaultToFirstItem,\n              resetConfig: true,\n              affectsDataMask: true,\n              renderTrigger: true,\n              requiredFirst: true,\n              description: t(\n                'When using this option, default value can’t be set',\n              ),\n            },\n          },\n        ],\n        [\n          {\n            name: 'inverseSelection',\n            config: {\n              type: 'CheckboxControl',\n              renderTrigger: true,\n              affectsDataMask: true,\n              label: t('Inverse selection'),\n              default: inverseSelection,\n              description: t('Exclude selected values'),\n            },\n          },\n        ],\n        [\n          {\n            name: 'searchAllOptions',\n            config: {\n              type: 'CheckboxControl',\n              renderTrigger: true,\n              affectsDataMask: true,\n              label: t('Dynamically search all filter values'),\n              default: searchAllOptions,\n              description: t(\n                'By default, each filter loads at most 1000 choices at the initial page load. ' +\n                  'Check this box if you have more than 1000 filter values and want to enable dynamically ' +\n                  'searching that loads filter values as users type (may add stress to your database).',\n              ),\n            },\n          },\n        ],\n      ],\n    },\n  ],\n  controlOverrides: {\n    groupby: {\n      multi: false,\n      validators: [validateNonEmpty],\n    },\n  },\n};\n\nexport default config;\n"]},"metadata":{},"sourceType":"module"}