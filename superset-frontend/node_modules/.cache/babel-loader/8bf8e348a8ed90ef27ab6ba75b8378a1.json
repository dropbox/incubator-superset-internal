{"ast":null,"code":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport Loadable from 'react-loadable';\nconst defaultProps = {\n  onRenderFailure() {},\n  onRenderSuccess() {} };\n\nexport default function createLoadableRenderer(options) {\n  const LoadableRenderer = Loadable.Map(options);\n  // Extends the behavior of LoadableComponent to provide post-render listeners\n  class CustomLoadableRenderer extends LoadableRenderer {\n\n    componentDidMount() {\n      this.afterRender();\n    }\n    componentDidUpdate() {\n      this.afterRender();\n    }\n    afterRender() {\n      const { loaded, loading, error } = this.state;\n      const { onRenderFailure, onRenderSuccess } = this.props;\n      if (!loading) {\n        if (error) {\n          onRenderFailure(error);\n        } else\n        if (loaded && Object.keys(loaded).length > 0) {\n          onRenderSuccess();\n        }\n      }\n    }}CustomLoadableRenderer.defaultProps = void 0;\n\n  CustomLoadableRenderer.defaultProps = defaultProps;\n  CustomLoadableRenderer.preload = LoadableRenderer.preload;\n  return CustomLoadableRenderer;\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAmBA,OAAOA,QAAP,MAAqB,gBAArB;AAOA,MAAMC,YAAY,GAAG;EACnBC,eAAe,IAAK,CADD;EAEnBC,eAAe,IAAK,CAFD,EAArB;;AASA,eAAc,SAAUC,sBAAV,CACZC,OADY,EACoC;EAEhD,MAAMC,gBAAgB,GAAGN,QAAQ,CAACO,GAAT,CAAaF,OAAb,CAAzB;EAEA;EACA,MAAMG,sBAAN,SAAqCF,gBAArC,CAAqD;;IAGnDG,iBAAiB;MACf,KAAKC,WAAL;IACD;IAEDC,kBAAkB;MAChB,KAAKD,WAAL;IACD;IAEDA,WAAW;MACT,MAAM,EAAEE,MAAF,EAAUC,OAAV,EAAmBC,KAAnB,KAA6B,KAAKC,KAAxC;MACA,MAAM,EAAEb,eAAF,EAAmBC,eAAnB,KAAuC,KAAKa,KAAlD;MACA,IAAI,CAACH,OAAL,EAAc;QACZ,IAAIC,KAAJ,EAAW;UACRZ,eAA4B,CAACY,KAAD,CAA5B;QACF,CAFD;QAEO,IAAIF,MAAM,IAAIK,MAAM,CAACC,IAAP,CAAYN,MAAZ,EAAoBO,MAApB,GAA6B,CAA3C,EAA8C;UAClDhB,eAA4B;QAC9B;MACF;IACF,CArBkD,CAA/CK,sBAL0C,CAMvCP,YANuC;;EA6BhDO,sBAAsB,CAACP,YAAvB,GAAsCA,YAAtC;EACAO,sBAAsB,CAACY,OAAvB,GAAiCd,gBAAgB,CAACc,OAAlD;EAEA,OAAOZ,sBAAP;AACD","names":["Loadable","defaultProps","onRenderFailure","onRenderSuccess","createLoadableRenderer","options","LoadableRenderer","Map","CustomLoadableRenderer","componentDidMount","afterRender","componentDidUpdate","loaded","loading","error","state","props","Object","keys","length","preload"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/packages/superset-ui-core/src/chart/components/createLoadableRenderer.ts"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport Loadable from 'react-loadable';\n\nexport type LoadableRendererProps = {\n  onRenderFailure?: Function;\n  onRenderSuccess?: Function;\n};\n\nconst defaultProps = {\n  onRenderFailure() {},\n  onRenderSuccess() {},\n};\n\nexport interface LoadableRenderer<Props>\n  extends React.ComponentClass<Props & LoadableRendererProps>,\n    Loadable.LoadableComponent {}\n\nexport default function createLoadableRenderer<Props, Exports>(\n  options: Loadable.OptionsWithMap<Props, Exports>,\n): LoadableRenderer<Props> {\n  const LoadableRenderer = Loadable.Map(options) as LoadableRenderer<Props>;\n\n  // Extends the behavior of LoadableComponent to provide post-render listeners\n  class CustomLoadableRenderer extends LoadableRenderer {\n    static defaultProps: object;\n\n    componentDidMount() {\n      this.afterRender();\n    }\n\n    componentDidUpdate() {\n      this.afterRender();\n    }\n\n    afterRender() {\n      const { loaded, loading, error } = this.state;\n      const { onRenderFailure, onRenderSuccess } = this.props;\n      if (!loading) {\n        if (error) {\n          (onRenderFailure as Function)(error);\n        } else if (loaded && Object.keys(loaded).length > 0) {\n          (onRenderSuccess as Function)();\n        }\n      }\n    }\n  }\n\n  CustomLoadableRenderer.defaultProps = defaultProps;\n  CustomLoadableRenderer.preload = LoadableRenderer.preload;\n\n  return CustomLoadableRenderer;\n}\n"]},"metadata":{},"sourceType":"module"}