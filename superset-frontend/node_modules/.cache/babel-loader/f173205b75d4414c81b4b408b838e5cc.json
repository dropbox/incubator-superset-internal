{"ast":null,"code":"import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport rison from 'rison';\nimport { useState, useEffect, useCallback } from 'react';\nimport { makeApi, SupersetClient, t } from '@superset-ui/core';\nimport { createErrorHandler, getAlreadyExists, getPasswordsNeeded, hasTerminalValidation, getSSHPasswordsNeeded, getSSHPrivateKeysNeeded, getSSHPrivateKeyPasswordsNeeded } from 'src/views/CRUD/utils';\nimport copyTextToClipboard from 'src/utils/copy';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport SupersetText from 'src/utils/textUtils';\nconst parsedErrorMessage = (errorMessage) => {\n  if (typeof errorMessage === 'string') {\n    return errorMessage;\n  }\n  return Object.entries(errorMessage).\n  map((_ref) => {let [key, value] = _ref;\n    if (Array.isArray(value)) {\n      return `(${key}) ${value.join(', ')}`;\n    }\n    return `(${key}) ${value}`;\n  }).\n  join('\\n');\n};\nexport function useListViewResource(resource, resourceLabel, // resourceLabel for translations\nhandleErrorMsg, infoEnable, defaultCollectionValue, baseFilters, // must be memoized\ninitialLoadingState) {if (infoEnable === void 0) {infoEnable = true;}if (defaultCollectionValue === void 0) {defaultCollectionValue = [];}if (initialLoadingState === void 0) {initialLoadingState = true;}\n  const [state, setState] = useState({\n    count: 0,\n    collection: defaultCollectionValue,\n    loading: initialLoadingState,\n    lastFetchDataConfig: null,\n    permissions: [],\n    bulkSelectEnabled: false });\n\n  function updateState(update) {\n    setState((currentState) => ({ ...currentState, ...update }));\n  }\n  function toggleBulkSelect() {\n    updateState({ bulkSelectEnabled: !state.bulkSelectEnabled });\n  }\n  useEffect(() => {\n    if (!infoEnable)\n    return;\n    SupersetClient.get({\n      endpoint: `/api/v1/${resource}/_info?q=${rison.encode({\n        keys: ['permissions'] })\n      }` }).\n    then((_ref2) => {let { json: infoJson = {} } = _ref2;\n      updateState({\n        permissions: infoJson.permissions });\n\n    }, createErrorHandler((errMsg) => handleErrorMsg(t('An error occurred while fetching %s info: %s', resourceLabel, errMsg))));\n  }, []);\n  function hasPerm(perm) {\n    if (!state.permissions.length) {\n      return false;\n    }\n    return Boolean(state.permissions.find((p) => p === perm));\n  }\n  const fetchData = useCallback((_ref3) => {let { pageIndex, pageSize, sortBy, filters: filterValues } = _ref3;\n    // set loading state, cache the last config for refreshing data.\n    updateState({\n      lastFetchDataConfig: {\n        filters: filterValues,\n        pageIndex,\n        pageSize,\n        sortBy },\n\n      loading: true });\n\n    const filterExps = (baseFilters || []).\n    concat(filterValues).\n    map((_ref4) => {let { id, operator: opr, value } = _ref4;return {\n        col: id,\n        opr,\n        value: value && typeof value === 'object' && 'value' in value ?\n        value.value :\n        value };});\n\n    const queryParams = rison.encode_uri({\n      order_column: sortBy[0].id,\n      order_direction: sortBy[0].desc ? 'desc' : 'asc',\n      page: pageIndex,\n      page_size: pageSize,\n      ...(filterExps.length ? { filters: filterExps } : {}) });\n\n    return SupersetClient.get({\n      endpoint: `/api/v1/${resource}/?q=${queryParams}` }).\n\n    then((_ref5) => {let { json = {} } = _ref5;\n      updateState({\n        collection: json.result,\n        count: json.count,\n        lastFetched: new Date().toISOString() });\n\n    }, createErrorHandler((errMsg) => handleErrorMsg(t('An error occurred while fetching %ss: %s', resourceLabel, errMsg)))).\n    finally(() => {\n      updateState({ loading: false });\n    });\n  }, [baseFilters]);\n  return {\n    state: {\n      loading: state.loading,\n      resourceCount: state.count,\n      resourceCollection: state.collection,\n      bulkSelectEnabled: state.bulkSelectEnabled,\n      lastFetched: state.lastFetched },\n\n    setResourceCollection: (update) => updateState({\n      collection: update }),\n\n    hasPerm,\n    fetchData,\n    toggleBulkSelect,\n    refreshData: (provideConfig) => {\n      if (state.lastFetchDataConfig) {\n        return fetchData(state.lastFetchDataConfig);\n      }\n      if (provideConfig) {\n        return fetchData(provideConfig);\n      }\n      return null;\n    } };\n\n}\nexport function useSingleViewResource(resourceName, resourceLabel, // resourceLabel for translations\nhandleErrorMsg, path_suffix) {if (path_suffix === void 0) {path_suffix = '';}\n  const [state, setState] = useState({\n    loading: false,\n    resource: null,\n    error: null });\n\n  function updateState(update) {\n    setState((currentState) => ({ ...currentState, ...update }));\n  }\n  const fetchResource = useCallback((resourceID) => {\n    // Set loading state\n    updateState({\n      loading: true });\n\n    const baseEndpoint = `/api/v1/${resourceName}/${resourceID}`;\n    const endpoint = path_suffix !== '' ? `${baseEndpoint}/${path_suffix}` : baseEndpoint;\n    return SupersetClient.get({\n      endpoint }).\n\n    then((_ref6) => {let { json = {} } = _ref6;\n      updateState({\n        resource: json.result,\n        error: null });\n\n      return json.result;\n    }, createErrorHandler((errMsg) => {\n      handleErrorMsg(t('An error occurred while fetching %ss: %s', resourceLabel, parsedErrorMessage(errMsg)));\n      updateState({\n        error: errMsg });\n\n    })).\n    finally(() => {\n      updateState({ loading: false });\n    });\n  }, [handleErrorMsg, resourceName, resourceLabel]);\n  const createResource = useCallback(function (resource, hideToast) {if (hideToast === void 0) {hideToast = false;}\n    // Set loading state\n    updateState({\n      loading: true });\n\n    return SupersetClient.post({\n      endpoint: `/api/v1/${resourceName}/`,\n      body: JSON.stringify(resource),\n      headers: { 'Content-Type': 'application/json' } }).\n\n    then((_ref7) => {let { json = {} } = _ref7;\n      updateState({\n        resource: { id: json.id, ...json.result },\n        error: null });\n\n      return json.id;\n    }, createErrorHandler((errMsg) => {\n      // we did not want toasts for db-connection-ui but did not want to disable it everywhere\n      if (!hideToast) {\n        handleErrorMsg(t('An error occurred while creating %ss: %s', resourceLabel, parsedErrorMessage(errMsg)));\n      }\n      updateState({\n        error: errMsg });\n\n    })).\n    finally(() => {\n      updateState({ loading: false });\n    });\n  }, [handleErrorMsg, resourceName, resourceLabel]);\n  const updateResource = useCallback(function (resourceID, resource, hideToast, setLoading) {if (hideToast === void 0) {hideToast = false;}if (setLoading === void 0) {setLoading = true;}\n    // Set loading state\n    if (setLoading) {\n      updateState({\n        loading: true });\n\n    }\n    return SupersetClient.put({\n      endpoint: `/api/v1/${resourceName}/${resourceID}`,\n      body: JSON.stringify(resource),\n      headers: { 'Content-Type': 'application/json' } }).\n\n    then((_ref8) => {let { json = {} } = _ref8;\n      updateState({\n        resource: { ...json.result, id: json.id },\n        error: null });\n\n      return json.result;\n    }, createErrorHandler((errMsg) => {\n      if (!hideToast) {\n        handleErrorMsg(t('An error occurred while fetching %ss: %s', resourceLabel, JSON.stringify(errMsg)));\n      }\n      updateState({\n        error: errMsg });\n\n      return errMsg;\n    })).\n    finally(() => {\n      if (setLoading) {\n        updateState({ loading: false });\n      }\n    });\n  }, [handleErrorMsg, resourceName, resourceLabel]);\n  const clearError = () => updateState({\n    error: null });\n\n  return {\n    state,\n    setResource: (update) => updateState({\n      resource: update }),\n\n    fetchResource,\n    createResource,\n    updateResource,\n    clearError };\n\n}\nexport function useImportResource(resourceName, resourceLabel, // resourceLabel for translations\nhandleErrorMsg) {\n  const [state, setState] = useState({\n    loading: false,\n    passwordsNeeded: [],\n    alreadyExists: [],\n    sshPasswordNeeded: [],\n    sshPrivateKeyNeeded: [],\n    sshPrivateKeyPasswordNeeded: [],\n    failed: false });\n\n  function updateState(update) {\n    setState((currentState) => ({ ...currentState, ...update }));\n  }\n  const importResource = useCallback(function (bundle, databasePasswords, sshTunnelPasswords, sshTunnelPrivateKey, sshTunnelPrivateKeyPasswords, overwrite) {if (databasePasswords === void 0) {databasePasswords = {};}if (sshTunnelPasswords === void 0) {sshTunnelPasswords = {};}if (sshTunnelPrivateKey === void 0) {sshTunnelPrivateKey = {};}if (sshTunnelPrivateKeyPasswords === void 0) {sshTunnelPrivateKeyPasswords = {};}if (overwrite === void 0) {overwrite = false;}\n    // Set loading state\n    updateState({\n      loading: true,\n      failed: false });\n\n    const formData = new FormData();\n    formData.append('formData', bundle);\n    const RE_EXPORT_TEXT = t('Please re-export your file and try importing again');\n    /* The import bundle never contains database passwords; if required\n     * they should be provided by the user during import.\n     */\n    if (databasePasswords) {\n      formData.append('passwords', JSON.stringify(databasePasswords));\n    }\n    /* If the imported model already exists the user needs to confirm\n     * that they want to overwrite it.\n     */\n    if (overwrite) {\n      formData.append('overwrite', 'true');\n    }\n    /* The import bundle may contain ssh tunnel passwords; if required\n     * they should be provided by the user during import.\n     */\n    if (sshTunnelPasswords) {\n      formData.append('ssh_tunnel_passwords', JSON.stringify(sshTunnelPasswords));\n    }\n    /* The import bundle may contain ssh tunnel private_key; if required\n     * they should be provided by the user during import.\n     */\n    if (sshTunnelPrivateKey) {\n      formData.append('ssh_tunnel_private_keys', JSON.stringify(sshTunnelPrivateKey));\n    }\n    /* The import bundle may contain ssh tunnel private_key_password; if required\n     * they should be provided by the user during import.\n     */\n    if (sshTunnelPrivateKeyPasswords) {\n      formData.append('ssh_tunnel_private_key_passwords', JSON.stringify(sshTunnelPrivateKeyPasswords));\n    }\n    return SupersetClient.post({\n      endpoint: `/api/v1/${resourceName}/import/`,\n      body: formData,\n      headers: { Accept: 'application/json' } }).\n\n    then(() => {\n      updateState({\n        passwordsNeeded: [],\n        alreadyExists: [],\n        sshPasswordNeeded: [],\n        sshPrivateKeyNeeded: [],\n        sshPrivateKeyPasswordNeeded: [],\n        failed: false });\n\n      return true;\n    }).\n    catch((response) => getClientErrorObject(response).then((error) => {\n      updateState({\n        failed: true });\n\n      if (!error.errors) {\n        handleErrorMsg(t('An error occurred while importing %s: %s', resourceLabel, error.message || error.error));\n        return false;\n      }\n      if (hasTerminalValidation(error.errors)) {\n        handleErrorMsg(t('An error occurred while importing %s: %s', resourceLabel, [\n        ...error.errors.map((payload) => payload.message),\n        RE_EXPORT_TEXT].\n        join('.\\n')));\n      } else\n      {\n        updateState({\n          passwordsNeeded: getPasswordsNeeded(error.errors),\n          sshPasswordNeeded: getSSHPasswordsNeeded(error.errors),\n          sshPrivateKeyNeeded: getSSHPrivateKeysNeeded(error.errors),\n          sshPrivateKeyPasswordNeeded: getSSHPrivateKeyPasswordsNeeded(error.errors),\n          alreadyExists: getAlreadyExists(error.errors) });\n\n      }\n      return false;\n    })).\n    finally(() => {\n      updateState({ loading: false });\n    });\n  }, []);\n  return { state, importResource };\n}\nconst favoriteApis = {\n  chart: makeApi({\n    requestType: 'rison',\n    method: 'GET',\n    endpoint: '/api/v1/chart/favorite_status/' }),\n\n  dashboard: makeApi({\n    requestType: 'rison',\n    method: 'GET',\n    endpoint: '/api/v1/dashboard/favorite_status/' }) };\n\n\nexport function useFavoriteStatus(type, ids, handleErrorMsg) {\n  const [favoriteStatus, setFavoriteStatus] = useState({});\n  const updateFavoriteStatus = (update) => setFavoriteStatus((currentState) => ({ ...currentState, ...update }));\n  useEffect(() => {\n    if (!ids.length) {\n      return;\n    }\n    favoriteApis[type](ids).then((_ref9) => {let { result } = _ref9;\n      const update = result.reduce((acc, element) => {\n        acc[element.id] = element.value;\n        return acc;\n      }, {});\n      updateFavoriteStatus(update);\n    }, createErrorHandler((errMsg) => handleErrorMsg(t('There was an error fetching the favorite status: %s', errMsg))));\n  }, [ids, type, handleErrorMsg]);\n  const saveFaveStar = useCallback((id, isStarred) => {\n    const endpoint = `/api/v1/${type}/${id}/favorites/`;\n    const apiCall = isStarred ?\n    SupersetClient.delete({\n      endpoint }) :\n\n    SupersetClient.post({ endpoint });\n    apiCall.then(() => {\n      updateFavoriteStatus({\n        [id]: !isStarred });\n\n    }, createErrorHandler((errMsg) => handleErrorMsg(t('There was an error saving the favorite status: %s', errMsg))));\n  }, [type]);\n  return [saveFaveStar, favoriteStatus];\n}\nexport const useChartEditModal = (setCharts, charts) => {\n  const [sliceCurrentlyEditing, setSliceCurrentlyEditing] = useState(null);\n  function openChartEditModal(chart) {\n    setSliceCurrentlyEditing({\n      slice_id: chart.id,\n      slice_name: chart.slice_name,\n      description: chart.description,\n      cache_timeout: chart.cache_timeout,\n      certified_by: chart.certified_by,\n      certification_details: chart.certification_details,\n      is_managed_externally: chart.is_managed_externally });\n\n  }\n  function closeChartEditModal() {\n    setSliceCurrentlyEditing(null);\n  }\n  function handleChartUpdated(edits) {\n    // update the chart in our state with the edited info\n    const newCharts = charts.map((chart) => chart.id === edits.id ? { ...chart, ...edits } : chart);\n    setCharts(newCharts);\n  }\n  return {\n    sliceCurrentlyEditing,\n    handleChartUpdated,\n    openChartEditModal,\n    closeChartEditModal };\n\n};\nexport const copyQueryLink = (id, addDangerToast, addSuccessToast) => {\n  copyTextToClipboard(() => Promise.resolve(`${window.location.origin}/superset/sqllab?savedQueryId=${id}`)).\n  then(() => {\n    addSuccessToast(t('Link Copied!'));\n  }).\n  catch(() => {\n    addDangerToast(t('Sorry, your browser does not support copying.'));\n  });\n};\nexport const getDatabaseImages = () => SupersetText.DB_IMAGES;\nexport const getConnectionAlert = () => SupersetText.DB_CONNECTION_ALERTS;\nexport const getDatabaseDocumentationLinks = () => SupersetText.DB_CONNECTION_DOC_LINKS;\nexport const testDatabaseConnection = (connection, handleErrorMsg, addSuccessToast) => {\n  SupersetClient.post({\n    endpoint: 'api/v1/database/test_connection/',\n    body: JSON.stringify(connection),\n    headers: { 'Content-Type': 'application/json' } }).\n  then(() => {\n    addSuccessToast(t('Connection looks good!'));\n  }, createErrorHandler((errMsg) => {\n    handleErrorMsg(t('ERROR: %s', parsedErrorMessage(errMsg)));\n  }));\n};\nexport function useAvailableDatabases() {\n  const [availableDbs, setAvailableDbs] = useState(null);\n  const getAvailable = useCallback(() => {\n    SupersetClient.get({\n      endpoint: `/api/v1/database/available/` }).\n    then((_ref10) => {let { json } = _ref10;\n      setAvailableDbs(json);\n    });\n  }, [setAvailableDbs]);\n  return [availableDbs, getAvailable];\n}\nconst transformDB = (db) => {\n  if (db && Array.isArray(db == null ? void 0 : db.catalog)) {\n    return {\n      ...db,\n      catalog: Object.assign({}, ...db.catalog.map((x) => ({\n        [x.name]: x.value }))) };\n\n\n  }\n  return db;\n};\nexport function useDatabaseValidation() {\n  const [validationErrors, setValidationErrors] = useState(null);\n  const getValidation = useCallback(function (database, onCreate) {if (onCreate === void 0) {onCreate = false;}return SupersetClient.post({\n      endpoint: '/api/v1/database/validate_parameters/',\n      body: JSON.stringify(transformDB(database)),\n      headers: { 'Content-Type': 'application/json' } }).\n\n    then(() => {\n      setValidationErrors(null);\n    })\n    // eslint-disable-next-line consistent-return\n    .catch((e) => {\n      if (typeof e.json === 'function') {\n        return e.json().then((_ref11) => {let { errors = [] } = _ref11;\n          const parsedErrors = errors.\n          filter((error) => {var _context;\n            const skipValidationError = !_includesInstanceProperty(_context = [\n            'CONNECTION_MISSING_PARAMETERS_ERROR',\n            'CONNECTION_ACCESS_DENIED_ERROR']).call(_context,\n            error.error_type);\n            return skipValidationError || onCreate;\n          }).\n          reduce((obj, _ref12) => {var _extra$issue_codes;let { error_type, extra, message } = _ref12;\n            if (extra.catalog) {\n              if (extra.catalog.name) {\n                return {\n                  ...obj,\n                  error_type,\n                  [extra.catalog.idx]: {\n                    name: message } };\n\n\n              }\n              if (extra.catalog.url) {\n                return {\n                  ...obj,\n                  error_type,\n                  [extra.catalog.idx]: {\n                    url: message } };\n\n\n              }\n              return {\n                ...obj,\n                error_type,\n                [extra.catalog.idx]: {\n                  name: message,\n                  url: message } };\n\n\n            }\n            // if extra.invalid doesn't exist then the\n            // error can't be mapped to a parameter\n            // so leave it alone\n            if (extra.invalid) {\n              return {\n                ...obj,\n                [extra.invalid[0]]: message,\n                error_type };\n\n            }\n            if (extra.missing) {\n              return {\n                ...obj,\n                error_type,\n                ...Object.assign({}, ...extra.missing.map((field) => ({\n                  [field]: 'This is a required field' }))) };\n\n\n            }\n            if ((_extra$issue_codes = extra.issue_codes) != null && _extra$issue_codes.length) {var _extra$issue_codes$;\n              return {\n                ...obj,\n                error_type,\n                description: message || ((_extra$issue_codes$ = extra.issue_codes[0]) == null ? void 0 : _extra$issue_codes$.message) };\n\n            }\n            return obj;\n          }, {});\n          setValidationErrors(parsedErrors);\n          return parsedErrors;\n        });\n      }\n      // eslint-disable-next-line no-console\n      console.error(e);\n    });}, [setValidationErrors]);\n  return [validationErrors, getValidation, setValidationErrors];\n}\nexport const reportSelector = (state, resourceType, resourceId) => {\n  if (resourceId) {var _state$reports$resour;\n    return (_state$reports$resour = state.reports[resourceType]) == null ? void 0 : _state$reports$resour[resourceId];\n  }\n  return null;\n};","map":{"version":3,"mappings":"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","names":["rison","useState","useEffect","useCallback","makeApi","SupersetClient","t","createErrorHandler","getAlreadyExists","getPasswordsNeeded","hasTerminalValidation","getSSHPasswordsNeeded","getSSHPrivateKeysNeeded","getSSHPrivateKeyPasswordsNeeded","copyTextToClipboard","getClientErrorObject","SupersetText","parsedErrorMessage","errorMessage","Object","entries","map","key","value","Array","isArray","join","useListViewResource","resource","resourceLabel","handleErrorMsg","infoEnable","defaultCollectionValue","baseFilters","initialLoadingState","state","setState","count","collection","loading","lastFetchDataConfig","permissions","bulkSelectEnabled","updateState","update","currentState","toggleBulkSelect","get","endpoint","encode","keys","then","json","infoJson","errMsg","hasPerm","perm","length","Boolean","find","p","fetchData","pageIndex","pageSize","sortBy","filters","filterValues","filterExps","concat","id","operator","opr","col","queryParams","encode_uri","order_column","order_direction","desc","page","page_size","result","lastFetched","Date","toISOString","finally","resourceCount","resourceCollection","setResourceCollection","refreshData","provideConfig","useSingleViewResource","resourceName","path_suffix","error","fetchResource","resourceID","baseEndpoint","createResource","hideToast","post","body","JSON","stringify","headers","updateResource","setLoading","put","clearError","setResource","useImportResource","passwordsNeeded","alreadyExists","sshPasswordNeeded","sshPrivateKeyNeeded","sshPrivateKeyPasswordNeeded","failed","importResource","bundle","databasePasswords","sshTunnelPasswords","sshTunnelPrivateKey","sshTunnelPrivateKeyPasswords","overwrite","formData","FormData","append","RE_EXPORT_TEXT","Accept","catch","response","errors","message","payload","favoriteApis","chart","requestType","method","dashboard","useFavoriteStatus","type","ids","favoriteStatus","setFavoriteStatus","updateFavoriteStatus","reduce","acc","element","saveFaveStar","isStarred","apiCall","delete","useChartEditModal","setCharts","charts","sliceCurrentlyEditing","setSliceCurrentlyEditing","openChartEditModal","slice_id","slice_name","description","cache_timeout","certified_by","certification_details","is_managed_externally","closeChartEditModal","handleChartUpdated","edits","newCharts","copyQueryLink","addDangerToast","addSuccessToast","Promise","resolve","window","location","origin","getDatabaseImages","DB_IMAGES","getConnectionAlert","DB_CONNECTION_ALERTS","getDatabaseDocumentationLinks","DB_CONNECTION_DOC_LINKS","testDatabaseConnection","connection","useAvailableDatabases","availableDbs","setAvailableDbs","getAvailable","transformDB","db","catalog","assign","x","name","useDatabaseValidation","validationErrors","setValidationErrors","getValidation","database","onCreate","e","parsedErrors","filter","skipValidationError","error_type","obj","extra","idx","url","invalid","missing","field","issue_codes","console","reportSelector","resourceType","resourceId","reports"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/views/CRUD/hooks.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport rison from 'rison';\nimport { useState, useEffect, useCallback } from 'react';\nimport { makeApi, SupersetClient, t, JsonObject } from '@superset-ui/core';\n\nimport {\n  createErrorHandler,\n  getAlreadyExists,\n  getPasswordsNeeded,\n  hasTerminalValidation,\n  getSSHPasswordsNeeded,\n  getSSHPrivateKeysNeeded,\n  getSSHPrivateKeyPasswordsNeeded,\n} from 'src/views/CRUD/utils';\nimport { FetchDataConfig } from 'src/components/ListView';\nimport { FilterValue } from 'src/components/ListView/types';\nimport Chart, { Slice } from 'src/types/Chart';\nimport copyTextToClipboard from 'src/utils/copy';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport SupersetText from 'src/utils/textUtils';\nimport { FavoriteStatus, ImportResourceName, DatabaseObject } from './types';\n\ninterface ListViewResourceState<D extends object = any> {\n  loading: boolean;\n  collection: D[];\n  count: number;\n  permissions: string[];\n  lastFetchDataConfig: FetchDataConfig | null;\n  bulkSelectEnabled: boolean;\n  lastFetched?: string;\n}\n\nconst parsedErrorMessage = (\n  errorMessage: Record<string, string[] | string> | string,\n) => {\n  if (typeof errorMessage === 'string') {\n    return errorMessage;\n  }\n  return Object.entries(errorMessage)\n    .map(([key, value]) => {\n      if (Array.isArray(value)) {\n        return `(${key}) ${value.join(', ')}`;\n      }\n      return `(${key}) ${value}`;\n    })\n    .join('\\n');\n};\n\nexport function useListViewResource<D extends object = any>(\n  resource: string,\n  resourceLabel: string, // resourceLabel for translations\n  handleErrorMsg: (errorMsg: string) => void,\n  infoEnable = true,\n  defaultCollectionValue: D[] = [],\n  baseFilters?: FilterValue[], // must be memoized\n  initialLoadingState = true,\n) {\n  const [state, setState] = useState<ListViewResourceState<D>>({\n    count: 0,\n    collection: defaultCollectionValue,\n    loading: initialLoadingState,\n    lastFetchDataConfig: null,\n    permissions: [],\n    bulkSelectEnabled: false,\n  });\n\n  function updateState(update: Partial<ListViewResourceState<D>>) {\n    setState(currentState => ({ ...currentState, ...update }));\n  }\n\n  function toggleBulkSelect() {\n    updateState({ bulkSelectEnabled: !state.bulkSelectEnabled });\n  }\n\n  useEffect(() => {\n    if (!infoEnable) return;\n    SupersetClient.get({\n      endpoint: `/api/v1/${resource}/_info?q=${rison.encode({\n        keys: ['permissions'],\n      })}`,\n    }).then(\n      ({ json: infoJson = {} }) => {\n        updateState({\n          permissions: infoJson.permissions,\n        });\n      },\n      createErrorHandler(errMsg =>\n        handleErrorMsg(\n          t(\n            'An error occurred while fetching %s info: %s',\n            resourceLabel,\n            errMsg,\n          ),\n        ),\n      ),\n    );\n  }, []);\n\n  function hasPerm(perm: string) {\n    if (!state.permissions.length) {\n      return false;\n    }\n\n    return Boolean(state.permissions.find(p => p === perm));\n  }\n\n  const fetchData = useCallback(\n    ({\n      pageIndex,\n      pageSize,\n      sortBy,\n      filters: filterValues,\n    }: FetchDataConfig) => {\n      // set loading state, cache the last config for refreshing data.\n      updateState({\n        lastFetchDataConfig: {\n          filters: filterValues,\n          pageIndex,\n          pageSize,\n          sortBy,\n        },\n        loading: true,\n      });\n\n      const filterExps = (baseFilters || [])\n        .concat(filterValues)\n        .map(({ id, operator: opr, value }) => ({\n          col: id,\n          opr,\n          value:\n            value && typeof value === 'object' && 'value' in value\n              ? value.value\n              : value,\n        }));\n\n      const queryParams = rison.encode_uri({\n        order_column: sortBy[0].id,\n        order_direction: sortBy[0].desc ? 'desc' : 'asc',\n        page: pageIndex,\n        page_size: pageSize,\n        ...(filterExps.length ? { filters: filterExps } : {}),\n      });\n\n      return SupersetClient.get({\n        endpoint: `/api/v1/${resource}/?q=${queryParams}`,\n      })\n        .then(\n          ({ json = {} }) => {\n            updateState({\n              collection: json.result,\n              count: json.count,\n              lastFetched: new Date().toISOString(),\n            });\n          },\n          createErrorHandler(errMsg =>\n            handleErrorMsg(\n              t(\n                'An error occurred while fetching %ss: %s',\n                resourceLabel,\n                errMsg,\n              ),\n            ),\n          ),\n        )\n        .finally(() => {\n          updateState({ loading: false });\n        });\n    },\n    [baseFilters],\n  );\n\n  return {\n    state: {\n      loading: state.loading,\n      resourceCount: state.count,\n      resourceCollection: state.collection,\n      bulkSelectEnabled: state.bulkSelectEnabled,\n      lastFetched: state.lastFetched,\n    },\n    setResourceCollection: (update: D[]) =>\n      updateState({\n        collection: update,\n      }),\n    hasPerm,\n    fetchData,\n    toggleBulkSelect,\n    refreshData: (provideConfig?: FetchDataConfig) => {\n      if (state.lastFetchDataConfig) {\n        return fetchData(state.lastFetchDataConfig);\n      }\n      if (provideConfig) {\n        return fetchData(provideConfig);\n      }\n      return null;\n    },\n  };\n}\n\n// In the same vein as above, a hook for viewing a single instance of a resource (given id)\ninterface SingleViewResourceState<D extends object = any> {\n  loading: boolean;\n  resource: D | null;\n  error: any | null;\n}\n\nexport function useSingleViewResource<D extends object = any>(\n  resourceName: string,\n  resourceLabel: string, // resourceLabel for translations\n  handleErrorMsg: (errorMsg: string) => void,\n  path_suffix = '',\n) {\n  const [state, setState] = useState<SingleViewResourceState<D>>({\n    loading: false,\n    resource: null,\n    error: null,\n  });\n\n  function updateState(update: Partial<SingleViewResourceState<D>>) {\n    setState(currentState => ({ ...currentState, ...update }));\n  }\n\n  const fetchResource = useCallback(\n    (resourceID: number) => {\n      // Set loading state\n      updateState({\n        loading: true,\n      });\n\n      const baseEndpoint = `/api/v1/${resourceName}/${resourceID}`;\n      const endpoint =\n        path_suffix !== '' ? `${baseEndpoint}/${path_suffix}` : baseEndpoint;\n      return SupersetClient.get({\n        endpoint,\n      })\n        .then(\n          ({ json = {} }) => {\n            updateState({\n              resource: json.result,\n              error: null,\n            });\n            return json.result;\n          },\n          createErrorHandler((errMsg: Record<string, string[] | string>) => {\n            handleErrorMsg(\n              t(\n                'An error occurred while fetching %ss: %s',\n                resourceLabel,\n                parsedErrorMessage(errMsg),\n              ),\n            );\n\n            updateState({\n              error: errMsg,\n            });\n          }),\n        )\n        .finally(() => {\n          updateState({ loading: false });\n        });\n    },\n    [handleErrorMsg, resourceName, resourceLabel],\n  );\n\n  const createResource = useCallback(\n    (resource: D, hideToast = false) => {\n      // Set loading state\n      updateState({\n        loading: true,\n      });\n\n      return SupersetClient.post({\n        endpoint: `/api/v1/${resourceName}/`,\n        body: JSON.stringify(resource),\n        headers: { 'Content-Type': 'application/json' },\n      })\n        .then(\n          ({ json = {} }) => {\n            updateState({\n              resource: { id: json.id, ...json.result },\n              error: null,\n            });\n            return json.id;\n          },\n          createErrorHandler((errMsg: Record<string, string[] | string>) => {\n            // we did not want toasts for db-connection-ui but did not want to disable it everywhere\n            if (!hideToast) {\n              handleErrorMsg(\n                t(\n                  'An error occurred while creating %ss: %s',\n                  resourceLabel,\n                  parsedErrorMessage(errMsg),\n                ),\n              );\n            }\n\n            updateState({\n              error: errMsg,\n            });\n          }),\n        )\n        .finally(() => {\n          updateState({ loading: false });\n        });\n    },\n    [handleErrorMsg, resourceName, resourceLabel],\n  );\n\n  const updateResource = useCallback(\n    (resourceID: number, resource: D, hideToast = false, setLoading = true) => {\n      // Set loading state\n      if (setLoading) {\n        updateState({\n          loading: true,\n        });\n      }\n\n      return SupersetClient.put({\n        endpoint: `/api/v1/${resourceName}/${resourceID}`,\n        body: JSON.stringify(resource),\n        headers: { 'Content-Type': 'application/json' },\n      })\n        .then(\n          ({ json = {} }) => {\n            updateState({\n              resource: { ...json.result, id: json.id },\n              error: null,\n            });\n            return json.result;\n          },\n          createErrorHandler(errMsg => {\n            if (!hideToast) {\n              handleErrorMsg(\n                t(\n                  'An error occurred while fetching %ss: %s',\n                  resourceLabel,\n                  JSON.stringify(errMsg),\n                ),\n              );\n            }\n\n            updateState({\n              error: errMsg,\n            });\n\n            return errMsg;\n          }),\n        )\n        .finally(() => {\n          if (setLoading) {\n            updateState({ loading: false });\n          }\n        });\n    },\n    [handleErrorMsg, resourceName, resourceLabel],\n  );\n\n  const clearError = () =>\n    updateState({\n      error: null,\n    });\n\n  return {\n    state,\n    setResource: (update: D) =>\n      updateState({\n        resource: update,\n      }),\n    fetchResource,\n    createResource,\n    updateResource,\n    clearError,\n  };\n}\n\ninterface ImportResourceState {\n  loading: boolean;\n  passwordsNeeded: string[];\n  alreadyExists: string[];\n  sshPasswordNeeded: string[];\n  sshPrivateKeyNeeded: string[];\n  sshPrivateKeyPasswordNeeded: string[];\n  failed: boolean;\n}\n\nexport function useImportResource(\n  resourceName: ImportResourceName,\n  resourceLabel: string, // resourceLabel for translations\n  handleErrorMsg: (errorMsg: string) => void,\n) {\n  const [state, setState] = useState<ImportResourceState>({\n    loading: false,\n    passwordsNeeded: [],\n    alreadyExists: [],\n    sshPasswordNeeded: [],\n    sshPrivateKeyNeeded: [],\n    sshPrivateKeyPasswordNeeded: [],\n    failed: false,\n  });\n\n  function updateState(update: Partial<ImportResourceState>) {\n    setState(currentState => ({ ...currentState, ...update }));\n  }\n\n  const importResource = useCallback(\n    (\n      bundle: File,\n      databasePasswords: Record<string, string> = {},\n      sshTunnelPasswords: Record<string, string> = {},\n      sshTunnelPrivateKey: Record<string, string> = {},\n      sshTunnelPrivateKeyPasswords: Record<string, string> = {},\n      overwrite = false,\n    ) => {\n      // Set loading state\n      updateState({\n        loading: true,\n        failed: false,\n      });\n\n      const formData = new FormData();\n      formData.append('formData', bundle);\n\n      const RE_EXPORT_TEXT = t(\n        'Please re-export your file and try importing again',\n      );\n\n      /* The import bundle never contains database passwords; if required\n       * they should be provided by the user during import.\n       */\n      if (databasePasswords) {\n        formData.append('passwords', JSON.stringify(databasePasswords));\n      }\n      /* If the imported model already exists the user needs to confirm\n       * that they want to overwrite it.\n       */\n      if (overwrite) {\n        formData.append('overwrite', 'true');\n      }\n      /* The import bundle may contain ssh tunnel passwords; if required\n       * they should be provided by the user during import.\n       */\n      if (sshTunnelPasswords) {\n        formData.append(\n          'ssh_tunnel_passwords',\n          JSON.stringify(sshTunnelPasswords),\n        );\n      }\n      /* The import bundle may contain ssh tunnel private_key; if required\n       * they should be provided by the user during import.\n       */\n      if (sshTunnelPrivateKey) {\n        formData.append(\n          'ssh_tunnel_private_keys',\n          JSON.stringify(sshTunnelPrivateKey),\n        );\n      }\n      /* The import bundle may contain ssh tunnel private_key_password; if required\n       * they should be provided by the user during import.\n       */\n      if (sshTunnelPrivateKeyPasswords) {\n        formData.append(\n          'ssh_tunnel_private_key_passwords',\n          JSON.stringify(sshTunnelPrivateKeyPasswords),\n        );\n      }\n\n      return SupersetClient.post({\n        endpoint: `/api/v1/${resourceName}/import/`,\n        body: formData,\n        headers: { Accept: 'application/json' },\n      })\n        .then(() => {\n          updateState({\n            passwordsNeeded: [],\n            alreadyExists: [],\n            sshPasswordNeeded: [],\n            sshPrivateKeyNeeded: [],\n            sshPrivateKeyPasswordNeeded: [],\n            failed: false,\n          });\n          return true;\n        })\n        .catch(response =>\n          getClientErrorObject(response).then(error => {\n            updateState({\n              failed: true,\n            });\n            if (!error.errors) {\n              handleErrorMsg(\n                t(\n                  'An error occurred while importing %s: %s',\n                  resourceLabel,\n                  error.message || error.error,\n                ),\n              );\n              return false;\n            }\n            if (hasTerminalValidation(error.errors)) {\n              handleErrorMsg(\n                t(\n                  'An error occurred while importing %s: %s',\n                  resourceLabel,\n                  [\n                    ...error.errors.map(payload => payload.message),\n                    RE_EXPORT_TEXT,\n                  ].join('.\\n'),\n                ),\n              );\n            } else {\n              updateState({\n                passwordsNeeded: getPasswordsNeeded(error.errors),\n                sshPasswordNeeded: getSSHPasswordsNeeded(error.errors),\n                sshPrivateKeyNeeded: getSSHPrivateKeysNeeded(error.errors),\n                sshPrivateKeyPasswordNeeded: getSSHPrivateKeyPasswordsNeeded(\n                  error.errors,\n                ),\n                alreadyExists: getAlreadyExists(error.errors),\n              });\n            }\n            return false;\n          }),\n        )\n        .finally(() => {\n          updateState({ loading: false });\n        });\n    },\n    [],\n  );\n\n  return { state, importResource };\n}\n\ntype FavoriteStatusResponse = {\n  result: Array<{\n    id: string;\n    value: boolean;\n  }>;\n};\n\nconst favoriteApis = {\n  chart: makeApi<Array<string | number>, FavoriteStatusResponse>({\n    requestType: 'rison',\n    method: 'GET',\n    endpoint: '/api/v1/chart/favorite_status/',\n  }),\n  dashboard: makeApi<Array<string | number>, FavoriteStatusResponse>({\n    requestType: 'rison',\n    method: 'GET',\n    endpoint: '/api/v1/dashboard/favorite_status/',\n  }),\n};\n\nexport function useFavoriteStatus(\n  type: 'chart' | 'dashboard',\n  ids: Array<string | number>,\n  handleErrorMsg: (message: string) => void,\n) {\n  const [favoriteStatus, setFavoriteStatus] = useState<FavoriteStatus>({});\n\n  const updateFavoriteStatus = (update: FavoriteStatus) =>\n    setFavoriteStatus(currentState => ({ ...currentState, ...update }));\n\n  useEffect(() => {\n    if (!ids.length) {\n      return;\n    }\n    favoriteApis[type](ids).then(\n      ({ result }) => {\n        const update = result.reduce((acc, element) => {\n          acc[element.id] = element.value;\n          return acc;\n        }, {});\n        updateFavoriteStatus(update);\n      },\n      createErrorHandler(errMsg =>\n        handleErrorMsg(\n          t('There was an error fetching the favorite status: %s', errMsg),\n        ),\n      ),\n    );\n  }, [ids, type, handleErrorMsg]);\n\n  const saveFaveStar = useCallback(\n    (id: number, isStarred: boolean) => {\n      const endpoint = `/api/v1/${type}/${id}/favorites/`;\n      const apiCall = isStarred\n        ? SupersetClient.delete({\n            endpoint,\n          })\n        : SupersetClient.post({ endpoint });\n\n      apiCall.then(\n        () => {\n          updateFavoriteStatus({\n            [id]: !isStarred,\n          });\n        },\n        createErrorHandler(errMsg =>\n          handleErrorMsg(\n            t('There was an error saving the favorite status: %s', errMsg),\n          ),\n        ),\n      );\n    },\n    [type],\n  );\n\n  return [saveFaveStar, favoriteStatus] as const;\n}\n\nexport const useChartEditModal = (\n  setCharts: (charts: Array<Chart>) => void,\n  charts: Array<Chart>,\n) => {\n  const [sliceCurrentlyEditing, setSliceCurrentlyEditing] =\n    useState<Slice | null>(null);\n\n  function openChartEditModal(chart: Chart) {\n    setSliceCurrentlyEditing({\n      slice_id: chart.id,\n      slice_name: chart.slice_name,\n      description: chart.description,\n      cache_timeout: chart.cache_timeout,\n      certified_by: chart.certified_by,\n      certification_details: chart.certification_details,\n      is_managed_externally: chart.is_managed_externally,\n    });\n  }\n\n  function closeChartEditModal() {\n    setSliceCurrentlyEditing(null);\n  }\n\n  function handleChartUpdated(edits: Chart) {\n    // update the chart in our state with the edited info\n    const newCharts = charts.map((chart: Chart) =>\n      chart.id === edits.id ? { ...chart, ...edits } : chart,\n    );\n    setCharts(newCharts);\n  }\n\n  return {\n    sliceCurrentlyEditing,\n    handleChartUpdated,\n    openChartEditModal,\n    closeChartEditModal,\n  };\n};\n\nexport const copyQueryLink = (\n  id: number,\n  addDangerToast: (arg0: string) => void,\n  addSuccessToast: (arg0: string) => void,\n) => {\n  copyTextToClipboard(() =>\n    Promise.resolve(\n      `${window.location.origin}/superset/sqllab?savedQueryId=${id}`,\n    ),\n  )\n    .then(() => {\n      addSuccessToast(t('Link Copied!'));\n    })\n    .catch(() => {\n      addDangerToast(t('Sorry, your browser does not support copying.'));\n    });\n};\n\nexport const getDatabaseImages = () => SupersetText.DB_IMAGES;\n\nexport const getConnectionAlert = () => SupersetText.DB_CONNECTION_ALERTS;\nexport const getDatabaseDocumentationLinks = () =>\n  SupersetText.DB_CONNECTION_DOC_LINKS;\n\nexport const testDatabaseConnection = (\n  connection: DatabaseObject,\n  handleErrorMsg: (errorMsg: string) => void,\n  addSuccessToast: (arg0: string) => void,\n) => {\n  SupersetClient.post({\n    endpoint: 'api/v1/database/test_connection/',\n    body: JSON.stringify(connection),\n    headers: { 'Content-Type': 'application/json' },\n  }).then(\n    () => {\n      addSuccessToast(t('Connection looks good!'));\n    },\n    createErrorHandler((errMsg: Record<string, string[] | string> | string) => {\n      handleErrorMsg(t('ERROR: %s', parsedErrorMessage(errMsg)));\n    }),\n  );\n};\n\nexport function useAvailableDatabases() {\n  const [availableDbs, setAvailableDbs] = useState<JsonObject | null>(null);\n\n  const getAvailable = useCallback(() => {\n    SupersetClient.get({\n      endpoint: `/api/v1/database/available/`,\n    }).then(({ json }) => {\n      setAvailableDbs(json);\n    });\n  }, [setAvailableDbs]);\n\n  return [availableDbs, getAvailable] as const;\n}\n\nconst transformDB = (db: Partial<DatabaseObject> | null) => {\n  if (db && Array.isArray(db?.catalog)) {\n    return {\n      ...db,\n      catalog: Object.assign(\n        {},\n        ...db.catalog.map((x: { name: string; value: string }) => ({\n          [x.name]: x.value,\n        })),\n      ),\n    };\n  }\n  return db;\n};\n\nexport function useDatabaseValidation() {\n  const [validationErrors, setValidationErrors] = useState<JsonObject | null>(\n    null,\n  );\n  const getValidation = useCallback(\n    (database: Partial<DatabaseObject> | null, onCreate = false) =>\n      SupersetClient.post({\n        endpoint: '/api/v1/database/validate_parameters/',\n        body: JSON.stringify(transformDB(database)),\n        headers: { 'Content-Type': 'application/json' },\n      })\n        .then(() => {\n          setValidationErrors(null);\n        })\n        // eslint-disable-next-line consistent-return\n        .catch(e => {\n          if (typeof e.json === 'function') {\n            return e.json().then(({ errors = [] }: JsonObject) => {\n              const parsedErrors = errors\n                .filter((error: { error_type: string }) => {\n                  const skipValidationError = ![\n                    'CONNECTION_MISSING_PARAMETERS_ERROR',\n                    'CONNECTION_ACCESS_DENIED_ERROR',\n                  ].includes(error.error_type);\n                  return skipValidationError || onCreate;\n                })\n                .reduce(\n                  (\n                    obj: {},\n                    {\n                      error_type,\n                      extra,\n                      message,\n                    }: {\n                      error_type: string;\n                      extra: {\n                        invalid?: string[];\n                        missing?: string[];\n                        name: string;\n                        catalog: {\n                          name: string;\n                          url: string;\n                          idx: number;\n                        };\n                        issue_codes?: {\n                          code?: number;\n                          message?: string;\n                        }[];\n                      };\n                      message: string;\n                    },\n                  ) => {\n                    if (extra.catalog) {\n                      if (extra.catalog.name) {\n                        return {\n                          ...obj,\n                          error_type,\n                          [extra.catalog.idx]: {\n                            name: message,\n                          },\n                        };\n                      }\n                      if (extra.catalog.url) {\n                        return {\n                          ...obj,\n                          error_type,\n                          [extra.catalog.idx]: {\n                            url: message,\n                          },\n                        };\n                      }\n\n                      return {\n                        ...obj,\n                        error_type,\n                        [extra.catalog.idx]: {\n                          name: message,\n                          url: message,\n                        },\n                      };\n                    }\n                    // if extra.invalid doesn't exist then the\n                    // error can't be mapped to a parameter\n                    // so leave it alone\n                    if (extra.invalid) {\n                      return {\n                        ...obj,\n                        [extra.invalid[0]]: message,\n                        error_type,\n                      };\n                    }\n                    if (extra.missing) {\n                      return {\n                        ...obj,\n                        error_type,\n                        ...Object.assign(\n                          {},\n                          ...extra.missing.map(field => ({\n                            [field]: 'This is a required field',\n                          })),\n                        ),\n                      };\n                    }\n                    if (extra.issue_codes?.length) {\n                      return {\n                        ...obj,\n                        error_type,\n                        description: message || extra.issue_codes[0]?.message,\n                      };\n                    }\n\n                    return obj;\n                  },\n                  {},\n                );\n              setValidationErrors(parsedErrors);\n              return parsedErrors;\n            });\n          }\n          // eslint-disable-next-line no-console\n          console.error(e);\n        }),\n    [setValidationErrors],\n  );\n\n  return [validationErrors, getValidation, setValidationErrors] as const;\n}\n\nexport const reportSelector = (\n  state: Record<string, any>,\n  resourceType: string,\n  resourceId?: number,\n) => {\n  if (resourceId) {\n    return state.reports[resourceType]?.[resourceId];\n  }\n  return null;\n};\n"]},"metadata":{},"sourceType":"module"}