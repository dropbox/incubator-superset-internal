{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * A Stringify function that will not crash when it runs into circular JSON references,\n * unlike JSON.stringify. Any circular references are simply omitted, as if there had\n * been no data present\n * @param object any JSON object to be stringified\n */\nexport function safeStringify(object) {\n  const cache = new Set();\n  return JSON.stringify(object, (key, value) => {\n    if (typeof value === 'object' && value !== null) {\n      if (cache.has(value)) {\n        // We've seen this object before\n        try {\n          // Quick deep copy to duplicate if this is a repeat rather than a circle.\n          return JSON.parse(JSON.stringify(value));\n        }\n        catch (err) {\n          // Discard key if value cannot be duplicated.\n          return; // eslint-disable-line consistent-return\n        }\n      }\n      // Store the value in our cache.\n      cache.add(value);\n    }\n    return value;\n  });\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAmBA;;;;;;AAMA,OAAM,SAAUA,aAAV,CAAwBC,MAAxB,EAAmC;EACvC,MAAMC,KAAK,GAAG,IAAIC,GAAJ,EAAd;EACA,OAAOC,IAAI,CAACC,SAAL,CAAeJ,MAAf,EAAuB,CAACK,GAAD,EAAMC,KAAN,KAAe;IAC3C,IAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,KAAK,IAA3C,EAAiD;MAC/C,IAAIL,KAAK,CAACM,GAAN,CAAUD,KAAV,CAAJ,EAAsB;QACpB;QACA,IAAI;UACF;UACA,OAAOH,IAAI,CAACK,KAAL,CAAWL,IAAI,CAACC,SAAL,CAAeE,KAAf,CAAX,CAAP;QACD;QAAC,OAAOG,GAAP,EAAY;UACZ;UACA,OAFY,CAEJ;QACT;MACF;MACD;MACAR,KAAK,CAACS,GAAN,CAAUJ,KAAV;IACD;IACD,OAAOA,KAAP;EACD,CAhBM,CAAP;AAiBD","names":["safeStringify","object","cache","Set","JSON","stringify","key","value","has","parse","err","add"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/utils/safeStringify.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/**\n * A Stringify function that will not crash when it runs into circular JSON references,\n * unlike JSON.stringify. Any circular references are simply omitted, as if there had\n * been no data present\n * @param object any JSON object to be stringified\n */\nexport function safeStringify(object: any): string {\n  const cache = new Set();\n  return JSON.stringify(object, (key, value) => {\n    if (typeof value === 'object' && value !== null) {\n      if (cache.has(value)) {\n        // We've seen this object before\n        try {\n          // Quick deep copy to duplicate if this is a repeat rather than a circle.\n          return JSON.parse(JSON.stringify(value));\n        } catch (err) {\n          // Discard key if value cannot be duplicated.\n          return; // eslint-disable-line consistent-return\n        }\n      }\n      // Store the value in our cache.\n      cache.add(value);\n    }\n    return value;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}