{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect } from 'react';\nimport { ensureIsArray, styled, t, getChartMetadataRegistry } from '@superset-ui/core';\nimport Loading from 'src/components/Loading';\nimport { EmptyStateMedium } from 'src/components/EmptyState';\nimport { getChartDataRequest } from 'src/components/Chart/chartAction';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport { SingleQueryResultPane } from './SingleQueryResultPane';\nimport { TableControls } from './DataTableControls';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst Error = styled.pre`\n  margin-top: ${(_ref) => {let { theme } = _ref;return `${theme.gridUnit * 4}px`;}};\n`;\nconst cache = new WeakMap();\nexport const useResultsPane = (_ref2) => {var _metadata$queryObject;let { isRequest, queryFormData, queryForce, ownState, errorMessage, actions, isVisible, dataSize = 50 } = _ref2;\n  const metadata = getChartMetadataRegistry().get((queryFormData == null ? void 0 : queryFormData.viz_type) || (queryFormData == null ? void 0 : queryFormData.vizType));\n  const [resultResp, setResultResp] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [responseError, setResponseError] = useState('');\n  const queryCount = (_metadata$queryObject = metadata == null ? void 0 : metadata.queryObjectCount) != null ? _metadata$queryObject : 1;\n  useEffect(() => {\n    // it's an invalid formData when gets a errorMessage\n    if (errorMessage)\n    return;\n    if (isRequest && cache.has(queryFormData)) {\n      setResultResp(ensureIsArray(cache.get(queryFormData)));\n      setResponseError('');\n      if (queryForce && actions) {\n        actions.setForceQuery(false);\n      }\n      setIsLoading(false);\n    }\n    if (isRequest && !cache.has(queryFormData)) {\n      setIsLoading(true);\n      getChartDataRequest({\n        formData: queryFormData,\n        force: queryForce,\n        resultFormat: 'json',\n        resultType: 'results',\n        ownState }).\n\n      then((_ref3) => {let { json } = _ref3;\n        setResultResp(ensureIsArray(json.result));\n        setResponseError('');\n        cache.set(queryFormData, json.result);\n        if (queryForce && actions) {\n          actions.setForceQuery(false);\n        }\n      }).\n      catch((response) => {\n        getClientErrorObject(response).then((_ref4) => {let { error, message } = _ref4;\n          setResponseError(error || message || t('Sorry, an error occurred'));\n        });\n      }).\n      finally(() => {\n        setIsLoading(false);\n      });\n    }\n  }, [queryFormData, isRequest]);\n  useEffect(() => {\n    if (errorMessage) {\n      setIsLoading(false);\n    }\n  }, [errorMessage]);\n  if (isLoading) {\n    return Array(queryCount).fill(___EmotionJSX(Loading, null));\n  }\n  if (errorMessage) {\n    const title = t('Run a query to display results');\n    return Array(queryCount).fill(___EmotionJSX(EmptyStateMedium, { image: \"document.svg\", title: title }));\n  }\n  if (responseError) {\n    const err = ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(TableControls, { data: [], columnNames: [], columnTypes: [], datasourceId: queryFormData.datasource, onInputChange: () => {}, isLoading: false }),\n    ___EmotionJSX(Error, null, responseError));\n\n    return Array(queryCount).fill(err);\n  }\n  if (resultResp.length === 0) {\n    const title = t('No results were returned for this query');\n    return Array(queryCount).fill(___EmotionJSX(EmptyStateMedium, { image: \"document.svg\", title: title }));\n  }\n  return resultResp.\n  slice(0, queryCount).\n  map((result, idx) => ___EmotionJSX(SingleQueryResultPane, { data: result.data, colnames: result.colnames, coltypes: result.coltypes, dataSize: dataSize, datasourceId: queryFormData.datasource, key: idx, isVisible: isVisible }));\n};","map":{"version":3,"mappings":"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","names":["React","useState","useEffect","ensureIsArray","styled","t","getChartMetadataRegistry","Loading","EmptyStateMedium","getChartDataRequest","getClientErrorObject","SingleQueryResultPane","TableControls","Error","pre","theme","gridUnit","cache","WeakMap","useResultsPane","isRequest","queryFormData","queryForce","ownState","errorMessage","actions","isVisible","dataSize","metadata","get","viz_type","vizType","resultResp","setResultResp","isLoading","setIsLoading","responseError","setResponseError","queryCount","queryObjectCount","has","setForceQuery","formData","force","resultFormat","resultType","then","json","result","set","catch","response","error","message","finally","Array","fill","title","err","datasource","length","slice","map","idx","data","colnames","coltypes"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/DataTablesPane/components/useResultsPane.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect } from 'react';\nimport {\n  ensureIsArray,\n  styled,\n  t,\n  getChartMetadataRegistry,\n} from '@superset-ui/core';\nimport Loading from 'src/components/Loading';\nimport { EmptyStateMedium } from 'src/components/EmptyState';\nimport { getChartDataRequest } from 'src/components/Chart/chartAction';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport { ResultsPaneProps, QueryResultInterface } from '../types';\nimport { SingleQueryResultPane } from './SingleQueryResultPane';\nimport { TableControls } from './DataTableControls';\n\nconst Error = styled.pre`\n  margin-top: ${({ theme }) => `${theme.gridUnit * 4}px`};\n`;\n\nconst cache = new WeakMap();\n\nexport const useResultsPane = ({\n  isRequest,\n  queryFormData,\n  queryForce,\n  ownState,\n  errorMessage,\n  actions,\n  isVisible,\n  dataSize = 50,\n}: ResultsPaneProps): React.ReactElement[] => {\n  const metadata = getChartMetadataRegistry().get(\n    queryFormData?.viz_type || queryFormData?.vizType,\n  );\n\n  const [resultResp, setResultResp] = useState<QueryResultInterface[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [responseError, setResponseError] = useState<string>('');\n  const queryCount = metadata?.queryObjectCount ?? 1;\n\n  useEffect(() => {\n    // it's an invalid formData when gets a errorMessage\n    if (errorMessage) return;\n    if (isRequest && cache.has(queryFormData)) {\n      setResultResp(ensureIsArray(cache.get(queryFormData)));\n      setResponseError('');\n      if (queryForce && actions) {\n        actions.setForceQuery(false);\n      }\n      setIsLoading(false);\n    }\n    if (isRequest && !cache.has(queryFormData)) {\n      setIsLoading(true);\n      getChartDataRequest({\n        formData: queryFormData,\n        force: queryForce,\n        resultFormat: 'json',\n        resultType: 'results',\n        ownState,\n      })\n        .then(({ json }) => {\n          setResultResp(ensureIsArray(json.result));\n          setResponseError('');\n          cache.set(queryFormData, json.result);\n          if (queryForce && actions) {\n            actions.setForceQuery(false);\n          }\n        })\n        .catch(response => {\n          getClientErrorObject(response).then(({ error, message }) => {\n            setResponseError(error || message || t('Sorry, an error occurred'));\n          });\n        })\n        .finally(() => {\n          setIsLoading(false);\n        });\n    }\n  }, [queryFormData, isRequest]);\n\n  useEffect(() => {\n    if (errorMessage) {\n      setIsLoading(false);\n    }\n  }, [errorMessage]);\n\n  if (isLoading) {\n    return Array(queryCount).fill(<Loading />);\n  }\n\n  if (errorMessage) {\n    const title = t('Run a query to display results');\n    return Array(queryCount).fill(\n      <EmptyStateMedium image=\"document.svg\" title={title} />,\n    );\n  }\n\n  if (responseError) {\n    const err = (\n      <>\n        <TableControls\n          data={[]}\n          columnNames={[]}\n          columnTypes={[]}\n          datasourceId={queryFormData.datasource}\n          onInputChange={() => {}}\n          isLoading={false}\n        />\n        <Error>{responseError}</Error>\n      </>\n    );\n    return Array(queryCount).fill(err);\n  }\n\n  if (resultResp.length === 0) {\n    const title = t('No results were returned for this query');\n    return Array(queryCount).fill(\n      <EmptyStateMedium image=\"document.svg\" title={title} />,\n    );\n  }\n\n  return resultResp\n    .slice(0, queryCount)\n    .map((result, idx) => (\n      <SingleQueryResultPane\n        data={result.data}\n        colnames={result.colnames}\n        coltypes={result.coltypes}\n        dataSize={dataSize}\n        datasourceId={queryFormData.datasource}\n        key={idx}\n        isVisible={isVisible}\n      />\n    ));\n};\n"]},"metadata":{},"sourceType":"module"}