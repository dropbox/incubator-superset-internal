{"ast":null,"code":"export const retainFormDataSuffix = (formData, controlSuffix) => {\n  /*\n   * retain controls by suffix and return a new formData\n   * eg:\n   * > const fd = { metrics: ['foo', 'bar'], metrics_b: ['zee'], limit: 100, ... }\n   * > removeFormDataSuffix(fd, '_b')\n   * { metrics: ['zee'], limit: 100, ... }\n   * */\n  const newFormData = {};\n  Object.entries(formData).\n  sort((_ref, _ref2) => {let [a] = _ref;let [b] = _ref2;\n    // items contained suffix before others\n    const weight_a = a.endsWith(controlSuffix) ? 1 : 0;\n    const weight_b = b.endsWith(controlSuffix) ? 1 : 0;\n    return weight_b - weight_a;\n  }).\n  forEach((_ref3) => {let [key, value] = _ref3;\n    if (key.endsWith(controlSuffix)) {\n      newFormData[key.slice(0, -controlSuffix.length)] = value;\n    }\n    if (!key.endsWith(controlSuffix) && !(key in newFormData)) {\n      // ignore duplication\n      newFormData[key] = value;\n    }\n  });\n  return newFormData;\n};\nexport const removeFormDataSuffix = (formData, controlSuffix) => {\n  /*\n   * remove unused controls by suffix and return a new formData\n   * eg:\n   * > const fd = { metrics: ['foo', 'bar'], metrics_b: ['zee'], limit: 100, ... }\n   * > removeUnusedFormData(fd, '_b')\n   * { metrics: ['foo', 'bar'], limit: 100, ... }\n   * */\n  const newFormData = {};\n  Object.entries(formData).forEach((_ref4) => {let [key, value] = _ref4;\n    if (!key.endsWith(controlSuffix)) {\n      newFormData[key] = value;\n    }\n  });\n  return newFormData;\n};","map":{"version":3,"mappings":"AAoBA,OAAO,MAAMA,oBAAoB,GAAG,CAClCC,QADkC,EAElCC,aAFkC,KAGjB;EACjB;;;;;;;EAOA,MAAMC,WAAW,GAAG,EAApB;EAEAC,MAAM,CAACC,OAAP,CAAeJ,QAAf;EACGK,IADH,CACQ,iBAAa,KAAZ,CAACC,CAAD,CAAY,YAAP,CAACC,CAAD,CAAO;IACjB;IACA,MAAMC,QAAQ,GAAGF,CAAC,CAACG,QAAF,CAAWR,aAAX,IAA4B,CAA5B,GAAgC,CAAjD;IACA,MAAMS,QAAQ,GAAGH,CAAC,CAACE,QAAF,CAAWR,aAAX,IAA4B,CAA5B,GAAgC,CAAjD;IACA,OAAOS,QAAQ,GAAGF,QAAlB;EACD,CANH;EAOGG,OAPH,CAOW,WAAiB,KAAhB,CAACC,GAAD,EAAMC,KAAN,CAAgB;IACxB,IAAID,GAAG,CAACH,QAAJ,CAAaR,aAAb,CAAJ,EAAiC;MAC/BC,WAAW,CAACU,GAAG,CAACE,KAAJ,CAAU,CAAV,EAAa,CAACb,aAAa,CAACc,MAA5B,CAAD,CAAX,GAAmDF,KAAnD;IACD;IAED,IAAI,CAACD,GAAG,CAACH,QAAJ,CAAaR,aAAb,CAAD,IAAgC,EAAEW,GAAG,IAAIV,WAAT,CAApC,EAA2D;MACzD;MACAA,WAAW,CAACU,GAAD,CAAX,GAAmBC,KAAnB;IACD;EACF,CAhBH;EAkBA,OAAOX,WAAP;AACD,CAhCM;AAkCP,OAAO,MAAMc,oBAAoB,GAAG,CAClChB,QADkC,EAElCC,aAFkC,KAGjB;EACjB;;;;;;;EAOA,MAAMC,WAAW,GAAG,EAApB;EACAC,MAAM,CAACC,OAAP,CAAeJ,QAAf,EAAyBW,OAAzB,CAAiC,WAAiB,KAAhB,CAACC,GAAD,EAAMC,KAAN,CAAgB;IAChD,IAAI,CAACD,GAAG,CAACH,QAAJ,CAAaR,aAAb,CAAL,EAAkC;MAChCC,WAAW,CAACU,GAAD,CAAX,GAAmBC,KAAnB;IACD;EACF,CAJD;EAMA,OAAOX,WAAP;AACD,CAnBM","names":["retainFormDataSuffix","formData","controlSuffix","newFormData","Object","entries","sort","a","b","weight_a","endsWith","weight_b","forEach","key","value","slice","length","removeFormDataSuffix"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-echarts/src/utils/formDataSuffix.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { QueryFormData } from '@superset-ui/core';\n\nexport const retainFormDataSuffix = (\n  formData: QueryFormData,\n  controlSuffix: string,\n): QueryFormData => {\n  /*\n   * retain controls by suffix and return a new formData\n   * eg:\n   * > const fd = { metrics: ['foo', 'bar'], metrics_b: ['zee'], limit: 100, ... }\n   * > removeFormDataSuffix(fd, '_b')\n   * { metrics: ['zee'], limit: 100, ... }\n   * */\n  const newFormData = {};\n\n  Object.entries(formData)\n    .sort(([a], [b]) => {\n      // items contained suffix before others\n      const weight_a = a.endsWith(controlSuffix) ? 1 : 0;\n      const weight_b = b.endsWith(controlSuffix) ? 1 : 0;\n      return weight_b - weight_a;\n    })\n    .forEach(([key, value]) => {\n      if (key.endsWith(controlSuffix)) {\n        newFormData[key.slice(0, -controlSuffix.length)] = value;\n      }\n\n      if (!key.endsWith(controlSuffix) && !(key in newFormData)) {\n        // ignore duplication\n        newFormData[key] = value;\n      }\n    });\n\n  return newFormData as QueryFormData;\n};\n\nexport const removeFormDataSuffix = (\n  formData: QueryFormData,\n  controlSuffix: string,\n): QueryFormData => {\n  /*\n   * remove unused controls by suffix and return a new formData\n   * eg:\n   * > const fd = { metrics: ['foo', 'bar'], metrics_b: ['zee'], limit: 100, ... }\n   * > removeUnusedFormData(fd, '_b')\n   * { metrics: ['foo', 'bar'], limit: 100, ... }\n   * */\n  const newFormData = {};\n  Object.entries(formData).forEach(([key, value]) => {\n    if (!key.endsWith(controlSuffix)) {\n      newFormData[key] = value;\n    }\n  });\n\n  return newFormData as QueryFormData;\n};\n"]},"metadata":{},"sourceType":"module"}