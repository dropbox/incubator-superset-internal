{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport omit from 'lodash/omit';\nimport { isAdhocColumn, isPhysicalColumn } from './types';\nimport { isXAxisSet } from './getXAxis';\nexport function normalizeTimeColumn(formData, queryObject) {\n  // The formData should be \"raw form_data\" -- the snake_case version of formData rather than camelCase.\n  if (!isXAxisSet(formData)) {\n    return queryObject;\n  }\n  const { columns: _columns, extras: _extras } = queryObject;\n  const mutatedColumns = [...(_columns || [])];\n  const axisIdx = _columns == null ? void 0 : _columns.findIndex((col) => isPhysicalColumn(col) &&\n  isPhysicalColumn(formData.x_axis) &&\n  col === formData.x_axis ||\n  isAdhocColumn(col) &&\n  isAdhocColumn(formData.x_axis) &&\n  col.sqlExpression === formData.x_axis.sqlExpression);\n  if (axisIdx !== undefined &&\n  axisIdx > -1 &&\n  formData.x_axis &&\n  Array.isArray(_columns)) {\n    if (isAdhocColumn(_columns[axisIdx])) {\n      mutatedColumns[axisIdx] = {\n        timeGrain: _extras == null ? void 0 : _extras.time_grain_sqla,\n        columnType: 'BASE_AXIS',\n        ..._columns[axisIdx] };\n\n    } else\n    {\n      mutatedColumns[axisIdx] = {\n        timeGrain: _extras == null ? void 0 : _extras.time_grain_sqla,\n        columnType: 'BASE_AXIS',\n        sqlExpression: formData.x_axis,\n        label: formData.x_axis,\n        expressionType: 'SQL' };\n\n    }\n    const newQueryObject = omit(queryObject, [\n    'extras.time_grain_sqla',\n    'is_timeseries']);\n\n    newQueryObject.columns = mutatedColumns;\n    return newQueryObject;\n  }\n  // fallback, return original queryObject\n  return queryObject;\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,IAAP,MAAiB,aAAjB;AAEA,SAEEC,aAFF,EAGEC,gBAHF,QAOO,SAPP;AAQA,SAASC,UAAT,QAA2B,YAA3B;AAEA,OAAM,SAAUC,mBAAV,CACJC,QADI,EAEJC,WAFI,EAEoB;EAExB;EACA,IAAI,CAACH,UAAU,CAACE,QAAD,CAAf,EAA2B;IACzB,OAAOC,WAAP;EACD;EAED,MAAM,EAAEC,OAAO,EAAEC,QAAX,EAAqBC,MAAM,EAAEC,OAA7B,KAAyCJ,WAA/C;EACA,MAAMK,cAAc,GAAsB,CAAC,IAAIH,QAAQ,IAAI,EAAhB,CAAD,CAA1C;EACA,MAAMI,OAAO,GAAGJ,QAAH,oBAAGA,QAAQ,CAAEK,SAAV,CACd,IAAG,KACAX,gBAAgB,CAACY,GAAD,CAAhB;EACCZ,gBAAgB,CAACG,QAAQ,CAACU,MAAV,CADjB;EAECD,GAAG,KAAKT,QAAQ,CAACU,MAFnB;EAGCd,aAAa,CAACa,GAAD,CAAb;EACCb,aAAa,CAACI,QAAQ,CAACU,MAAV,CADd;EAECD,GAAG,CAACE,aAAJ,KAAsBX,QAAQ,CAACU,MAAT,CAAgBC,aAP5B,CAAhB;EASA,IACEJ,OAAO,KAAKK,SAAZ;EACAL,OAAO,GAAG,CAAC,CADX;EAEAP,QAAQ,CAACU,MAFT;EAGAG,KAAK,CAACC,OAAN,CAAcX,QAAd,CAJF,EAKE;IACA,IAAIP,aAAa,CAACO,QAAQ,CAACI,OAAD,CAAT,CAAjB,EAAsC;MACpCD,cAAc,CAACC,OAAD,CAAd,GAA0B;QACxBQ,SAAS,EAAEV,OAAF,oBAAEA,OAAO,CAAEW,eADI;QAExBC,UAAU,EAAE,WAFY;QAGxB,GAAId,QAAQ,CAACI,OAAD,CAHY,EAA1B;;IAKD,CAND;IAMO;MACLD,cAAc,CAACC,OAAD,CAAd,GAA0B;QACxBQ,SAAS,EAAEV,OAAF,oBAAEA,OAAO,CAAEW,eADI;QAExBC,UAAU,EAAE,WAFY;QAGxBN,aAAa,EAAEX,QAAQ,CAACU,MAHA;QAIxBQ,KAAK,EAAElB,QAAQ,CAACU,MAJQ;QAKxBS,cAAc,EAAE,KALQ,EAA1B;;IAOD;IAED,MAAMC,cAAc,GAAGzB,IAAI,CAACM,WAAD,EAAc;IACvC,wBADuC;IAEvC,eAFuC,CAAd,CAA3B;;IAIAmB,cAAc,CAAClB,OAAf,GAAyBI,cAAzB;IAEA,OAAOc,cAAP;EACD;EAED;EACA,OAAOnB,WAAP;AACD","names":["omit","isAdhocColumn","isPhysicalColumn","isXAxisSet","normalizeTimeColumn","formData","queryObject","columns","_columns","extras","_extras","mutatedColumns","axisIdx","findIndex","col","x_axis","sqlExpression","undefined","Array","isArray","timeGrain","time_grain_sqla","columnType","label","expressionType","newQueryObject"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/query/normalizeTimeColumn.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport omit from 'lodash/omit';\n\nimport {\n  AdhocColumn,\n  isAdhocColumn,\n  isPhysicalColumn,\n  QueryFormColumn,\n  QueryFormData,\n  QueryObject,\n} from './types';\nimport { isXAxisSet } from './getXAxis';\n\nexport function normalizeTimeColumn(\n  formData: QueryFormData,\n  queryObject: QueryObject,\n): QueryObject {\n  // The formData should be \"raw form_data\" -- the snake_case version of formData rather than camelCase.\n  if (!isXAxisSet(formData)) {\n    return queryObject;\n  }\n\n  const { columns: _columns, extras: _extras } = queryObject;\n  const mutatedColumns: QueryFormColumn[] = [...(_columns || [])];\n  const axisIdx = _columns?.findIndex(\n    col =>\n      (isPhysicalColumn(col) &&\n        isPhysicalColumn(formData.x_axis) &&\n        col === formData.x_axis) ||\n      (isAdhocColumn(col) &&\n        isAdhocColumn(formData.x_axis) &&\n        col.sqlExpression === formData.x_axis.sqlExpression),\n  );\n  if (\n    axisIdx !== undefined &&\n    axisIdx > -1 &&\n    formData.x_axis &&\n    Array.isArray(_columns)\n  ) {\n    if (isAdhocColumn(_columns[axisIdx])) {\n      mutatedColumns[axisIdx] = {\n        timeGrain: _extras?.time_grain_sqla,\n        columnType: 'BASE_AXIS',\n        ...(_columns[axisIdx] as AdhocColumn),\n      };\n    } else {\n      mutatedColumns[axisIdx] = {\n        timeGrain: _extras?.time_grain_sqla,\n        columnType: 'BASE_AXIS',\n        sqlExpression: formData.x_axis,\n        label: formData.x_axis,\n        expressionType: 'SQL',\n      };\n    }\n\n    const newQueryObject = omit(queryObject, [\n      'extras.time_grain_sqla',\n      'is_timeseries',\n    ]);\n    newQueryObject.columns = mutatedColumns;\n\n    return newQueryObject;\n  }\n\n  // fallback, return original queryObject\n  return queryObject;\n}\n"]},"metadata":{},"sourceType":"module"}