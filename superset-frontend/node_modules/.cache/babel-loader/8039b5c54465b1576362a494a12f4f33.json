{"ast":null,"code":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport default function reactify(renderFn, callbacks) {\n  class ReactifiedComponent extends React.Component {\n\n    constructor(props) {\n      super(props);this.container = void 0;\n      this.setContainerRef = this.setContainerRef.bind(this);\n    }\n    componentDidMount() {\n      this.execute();\n    }\n    componentDidUpdate() {\n      this.execute();\n    }\n    componentWillUnmount() {\n      this.container = undefined;\n      if (callbacks != null && callbacks.componentWillUnmount) {\n        callbacks.componentWillUnmount.bind(this)();\n      }\n    }\n    setContainerRef(ref) {\n      this.container = ref;\n    }\n    execute() {\n      if (this.container) {\n        renderFn(this.container, this.props);\n      }\n    }\n    render() {\n      const { id, className } = this.props;\n      return ___EmotionJSX(\"div\", { ref: this.setContainerRef, id: id, className: className });\n    }}\n\n  const ReactifiedClass = ReactifiedComponent;\n  if (renderFn.displayName) {\n    ReactifiedClass.displayName = renderFn.displayName;\n  }\n  // eslint-disable-next-line react/forbid-foreign-prop-types\n  if (renderFn.propTypes) {\n    ReactifiedClass.propTypes = {\n      ...ReactifiedClass.propTypes,\n      ...renderFn.propTypes };\n\n  }\n  if (renderFn.defaultProps) {\n    ReactifiedClass.defaultProps = renderFn.defaultProps;\n  }\n  return ReactifiedComponent;\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAmBA,OAAOA,KAAP,MAAkB,OAAlB,C;AA+BA,eAAc,SAAUC,QAAV,CACZC,QADY,EAEZC,SAFY,EAEkB;EAE9B,MAAMC,mBAAN,SAAkCJ,KAAK,CAACK,SAAxC,CAAwE;;IAGtEC,YAAYC,KAAZ,EAAwC;MACtC,MAAMA,KAAN,EADsC,KAFxCC,SAEwC;MAEtC,KAAKC,eAAL,GAAuB,KAAKA,eAAL,CAAqBC,IAArB,CAA0B,IAA1B,CAAvB;IACD;IAEDC,iBAAiB;MACf,KAAKC,OAAL;IACD;IAEDC,kBAAkB;MAChB,KAAKD,OAAL;IACD;IAEDE,oBAAoB;MAClB,KAAKN,SAAL,GAAiBO,SAAjB;MACA,IAAIZ,SAAJ,YAAIA,SAAS,CAAEW,oBAAf,EAAqC;QACnCX,SAAS,CAACW,oBAAV,CAA+BJ,IAA/B,CAAoC,IAApC;MACD;IACF;IAEDD,eAAe,CAACO,GAAD,EAAoB;MACjC,KAAKR,SAAL,GAAiBQ,GAAjB;IACD;IAEDJ,OAAO;MACL,IAAI,KAAKJ,SAAT,EAAoB;QAClBN,QAAQ,CAAC,KAAKM,SAAN,EAAiB,KAAKD,KAAtB,CAAR;MACD;IACF;IAEDU,MAAM;MACJ,MAAM,EAAEC,EAAF,EAAMC,SAAN,KAAoB,KAAKZ,KAA/B;MAEA,OAAO,uBAAK,GAAG,EAAE,KAAKE,eAAf,EAAgC,EAAE,EAAES,EAApC,EAAwC,SAAS,EAAEC,SAAnD,GAAP;IACD,CArCqE;;EAwCxE,MAAMC,eAAe,GACnBhB,mBADF;EAGA,IAAIF,QAAQ,CAACmB,WAAb,EAA0B;IACxBD,eAAe,CAACC,WAAhB,GAA8BnB,QAAQ,CAACmB,WAAvC;EACD;EACD;EACA,IAAInB,QAAQ,CAACoB,SAAb,EAAwB;IACtBF,eAAe,CAACE,SAAhB,GAA4B;MAC1B,GAAGF,eAAe,CAACE,SADO;MAE1B,GAAGpB,QAAQ,CAACoB,SAFc,EAA5B;;EAID;EACD,IAAIpB,QAAQ,CAACqB,YAAb,EAA2B;IACzBH,eAAe,CAACG,YAAhB,GAA+BrB,QAAQ,CAACqB,YAAxC;EACD;EAED,OAAOnB,mBAAP;AACD","names":["React","reactify","renderFn","callbacks","ReactifiedComponent","Component","constructor","props","container","setContainerRef","bind","componentDidMount","execute","componentDidUpdate","componentWillUnmount","undefined","ref","render","id","className","ReactifiedClass","displayName","propTypes","defaultProps"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/chart/components/reactify.tsx"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\n\n// TODO: Note that id and className can collide between Props and ReactifyProps\n// leading to (likely) unexpected behaviors. We should either require Props to not\n// contain an id/className, or not combine them (via intersection), instead preferring\n// wrapping (composition). As an example:\n// interface MyProps {\n//   id: number;\n// }\n// function myRender(container: HTMLDivElement, props: Readonly<MyProps>): void {\n//   props.id // unusable: id is string & number\n// }\n// new (reactify(myRender))({ id: 5 }); // error: id has to be string & number\n\nexport type ReactifyProps = {\n  id?: string;\n  className?: string;\n};\n\n// TODO: add more React lifecycle callbacks as needed\nexport type LifeCycleCallbacks = {\n  componentWillUnmount?: () => void;\n};\n\nexport interface RenderFuncType<Props> {\n  (container: HTMLDivElement, props: Readonly<Props & ReactifyProps>): void;\n  displayName?: string;\n  defaultProps?: Partial<Props & ReactifyProps>;\n  propTypes?: React.WeakValidationMap<Props & ReactifyProps>;\n}\n\nexport default function reactify<Props extends object>(\n  renderFn: RenderFuncType<Props>,\n  callbacks?: LifeCycleCallbacks,\n): React.ComponentClass<Props & ReactifyProps> {\n  class ReactifiedComponent extends React.Component<Props & ReactifyProps> {\n    container?: HTMLDivElement;\n\n    constructor(props: Props & ReactifyProps) {\n      super(props);\n      this.setContainerRef = this.setContainerRef.bind(this);\n    }\n\n    componentDidMount() {\n      this.execute();\n    }\n\n    componentDidUpdate() {\n      this.execute();\n    }\n\n    componentWillUnmount() {\n      this.container = undefined;\n      if (callbacks?.componentWillUnmount) {\n        callbacks.componentWillUnmount.bind(this)();\n      }\n    }\n\n    setContainerRef(ref: HTMLDivElement) {\n      this.container = ref;\n    }\n\n    execute() {\n      if (this.container) {\n        renderFn(this.container, this.props);\n      }\n    }\n\n    render() {\n      const { id, className } = this.props;\n\n      return <div ref={this.setContainerRef} id={id} className={className} />;\n    }\n  }\n\n  const ReactifiedClass: React.ComponentClass<Props & ReactifyProps> =\n    ReactifiedComponent;\n\n  if (renderFn.displayName) {\n    ReactifiedClass.displayName = renderFn.displayName;\n  }\n  // eslint-disable-next-line react/forbid-foreign-prop-types\n  if (renderFn.propTypes) {\n    ReactifiedClass.propTypes = {\n      ...ReactifiedClass.propTypes,\n      ...renderFn.propTypes,\n    };\n  }\n  if (renderFn.defaultProps) {\n    ReactifiedClass.defaultProps = renderFn.defaultProps;\n  }\n\n  return ReactifiedComponent;\n}\n"]},"metadata":{},"sourceType":"module"}