{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { isAdhocColumn } from '@superset-ui/core';\nimport { CLAUSES, EXPRESSION_TYPES } from '../explore/components/controls/FilterControl/types';\nimport { OPERATOR_ENUM_TO_OPERATOR_TYPE } from '../explore/constants';\nimport { translateToSql } from '../explore/components/controls/FilterControl/utils/translateToSQL';\nexport const simpleFilterToAdhoc = function (filterClause, clause) {if (clause === void 0) {clause = CLAUSES.WHERE;}\n  let result;\n  if (isAdhocColumn(filterClause.col)) {\n    result = {\n      expressionType: 'SQL',\n      clause,\n      sqlExpression: translateToSql({\n        expressionType: EXPRESSION_TYPES.SIMPLE,\n        subject: `(${filterClause.col.sqlExpression})`,\n        operator: filterClause.op,\n        comparator: 'val' in filterClause ? filterClause.val : undefined }) };\n\n\n  } else\n  {var _Object$entries$find;\n    result = {\n      expressionType: 'SIMPLE',\n      clause,\n      operator: filterClause.op,\n      operatorId: (_Object$entries$find = Object.entries(OPERATOR_ENUM_TO_OPERATOR_TYPE).find((operatorEntry) => operatorEntry[1].operation === filterClause.op)) == null ? void 0 : _Object$entries$find[0],\n      subject: filterClause.col,\n      comparator: 'val' in filterClause ? filterClause.val : undefined };\n\n  }\n  if (filterClause.isExtra) {\n    Object.assign(result, {\n      isExtra: true,\n      filterOptionName: `filter_${Math.random().\n      toString(36).\n      substring(2, 15)}_${Math.random().toString(36).substring(2, 15)}` });\n\n  }\n  return result;\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,SAEEA,aAFF,QAKO,mBALP;AAMA,SACEC,OADF,EAEEC,gBAFF,QAGO,oDAHP;AAIA,SAASC,8BAAT,QAA+C,sBAA/C;AACA,SAASC,cAAT,QAA+B,mEAA/B;AAEA,OAAO,MAAMC,mBAAmB,GAAG,UACjCC,YADiC,EAEjCC,MAFiC,EAG/B,KADFA,MACE,cADFA,MACE,GADgBN,OAAO,CAACO,KACxB;EACF,IAAIC,MAAJ;EACA,IAAIT,aAAa,CAACM,YAAY,CAACI,GAAd,CAAjB,EAAqC;IACnCD,MAAM,GAAG;MACPE,cAAc,EAAE,KADT;MAEPJ,MAFO;MAGPK,aAAa,EAAER,cAAc,CAAC;QAC5BO,cAAc,EAAET,gBAAgB,CAACW,MADL;QAE5BC,OAAO,EAAE,IAAIR,YAAY,CAACI,GAAb,CAAiBE,aAAa,GAFf;QAG5BG,QAAQ,EAAET,YAAY,CAACU,EAHK;QAI5BC,UAAU,EAAE,SAASX,YAAT,GAAwBA,YAAY,CAACY,GAArC,GAA2CC,SAJ3B,EAAD,CAHtB,EAAT;;;EAUD,CAXD;EAWO;IACLV,MAAM,GAAG;MACPE,cAAc,EAAE,QADT;MAEPJ,MAFO;MAGPQ,QAAQ,EAAET,YAAY,CAACU,EAHhB;MAIPI,UAAU,0BAAEC,MAAM,CAACC,OAAP,CAAenB,8BAAf,EAA+CoB,IAA/C,CACV,cAAa,KAAIC,aAAa,CAAC,CAAD,CAAb,CAAiBC,SAAjB,KAA+BnB,YAAY,CAACU,EADnD,CAAF,qBAAE,qBAER,CAFQ,CAJL;MAOPF,OAAO,EAAER,YAAY,CAACI,GAPf;MAQPO,UAAU,EAAE,SAASX,YAAT,GAAwBA,YAAY,CAACY,GAArC,GAA2CC,SARhD,EAAT;;EAUD;EACD,IAAIb,YAAY,CAACoB,OAAjB,EAA0B;IACxBL,MAAM,CAACM,MAAP,CAAclB,MAAd,EAAsB;MACpBiB,OAAO,EAAE,IADW;MAEpBE,gBAAgB,EAAE,UAAUC,IAAI,CAACC,MAAL;MACzBC,QADyB,CAChB,EADgB;MAEzBC,SAFyB,CAEf,CAFe,EAEZ,EAFY,CAET,IAAIH,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,SAA3B,CAAqC,CAArC,EAAwC,EAAxC,CAA2C,EAJ9C,EAAtB;;EAMD;EACD,OAAOvB,MAAP;AACD,CArCM","names":["isAdhocColumn","CLAUSES","EXPRESSION_TYPES","OPERATOR_ENUM_TO_OPERATOR_TYPE","translateToSql","simpleFilterToAdhoc","filterClause","clause","WHERE","result","col","expressionType","sqlExpression","SIMPLE","subject","operator","op","comparator","val","undefined","operatorId","Object","entries","find","operatorEntry","operation","isExtra","assign","filterOptionName","Math","random","toString","substring"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/utils/simpleFilterToAdhoc.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  AdhocFilter,\n  isAdhocColumn,\n  QueryObjectFilterClause,\n  SimpleAdhocFilter,\n} from '@superset-ui/core';\nimport {\n  CLAUSES,\n  EXPRESSION_TYPES,\n} from '../explore/components/controls/FilterControl/types';\nimport { OPERATOR_ENUM_TO_OPERATOR_TYPE } from '../explore/constants';\nimport { translateToSql } from '../explore/components/controls/FilterControl/utils/translateToSQL';\n\nexport const simpleFilterToAdhoc = (\n  filterClause: QueryObjectFilterClause,\n  clause: CLAUSES = CLAUSES.WHERE,\n) => {\n  let result: AdhocFilter;\n  if (isAdhocColumn(filterClause.col)) {\n    result = {\n      expressionType: 'SQL',\n      clause,\n      sqlExpression: translateToSql({\n        expressionType: EXPRESSION_TYPES.SIMPLE,\n        subject: `(${filterClause.col.sqlExpression})`,\n        operator: filterClause.op,\n        comparator: 'val' in filterClause ? filterClause.val : undefined,\n      } as SimpleAdhocFilter),\n    };\n  } else {\n    result = {\n      expressionType: 'SIMPLE',\n      clause,\n      operator: filterClause.op,\n      operatorId: Object.entries(OPERATOR_ENUM_TO_OPERATOR_TYPE).find(\n        operatorEntry => operatorEntry[1].operation === filterClause.op,\n      )?.[0],\n      subject: filterClause.col,\n      comparator: 'val' in filterClause ? filterClause.val : undefined,\n    } as SimpleAdhocFilter;\n  }\n  if (filterClause.isExtra) {\n    Object.assign(result, {\n      isExtra: true,\n      filterOptionName: `filter_${Math.random()\n        .toString(36)\n        .substring(2, 15)}_${Math.random().toString(36).substring(2, 15)}`,\n    });\n  }\n  return result;\n};\n"]},"metadata":{},"sourceType":"module"}