{"ast":null,"code":"import _isEqual from \"lodash/isEqual\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\n\nimport { DeckGLContainerStyledWrapper } from './DeckGLContainer';\nimport CategoricalDeckGLContainer from './CategoricalDeckGLContainer';\nimport fitViewport from './utils/fitViewport';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport function createDeckGLComponent(getLayer, getPoints) {\n  // Higher order component\n  class Component extends React.PureComponent {\n\n    constructor(props) {\n      super(props);this.containerRef = /*#__PURE__*/React.createRef();this.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n      setTooltip = (tooltip) => {\n        const { current } = this.containerRef;\n        if (current) {\n          current == null ? void 0 : current.setTooltip(tooltip);\n        }\n      };const { width, height, formData } = props;let { viewport } = props;if (formData.autozoom) {viewport = fitViewport(viewport, { width, height, points: getPoints(props.payload.data.features) });}this.state = { viewport, layer: this.computeLayer(props) };this.onViewportChange = this.onViewportChange.bind(this);}UNSAFE_componentWillReceiveProps(nextProps) {// Only recompute the layer if anything BUT the viewport has changed\n      const nextFdNoVP = { ...nextProps.formData, viewport: null };const currFdNoVP = { ...this.props.formData, viewport: null };if (!_isEqual(nextFdNoVP, currFdNoVP) || nextProps.payload !== this.props.payload) {this.setState({ layer: this.computeLayer(nextProps) });}}onViewportChange(viewport) {this.setState({ viewport });}computeLayer(props) {const { formData, payload, onAddFilter } = props;return getLayer(formData, payload, onAddFilter, this.setTooltip);}render() {\n      const { formData, payload, setControlValue, height, width } = this.props;\n      const { layer, viewport } = this.state;\n      return ___EmotionJSX(DeckGLContainerStyledWrapper, { ref: this.containerRef, mapboxApiAccessToken: payload.data.mapboxApiKey, viewport: viewport, layers: [layer], mapStyle: formData.mapbox_style, setControlValue: setControlValue, width: width, height: height, onViewportChange: this.onViewportChange });\n    }}\n\n  return Component;\n}\nexport function createCategoricalDeckGLComponent(getLayer, getPoints) {\n  return function Component(props) {\n    const { datasource, formData, height, payload, setControlValue, viewport, width } = props;\n    return ___EmotionJSX(CategoricalDeckGLContainer, { datasource: datasource, formData: formData, mapboxApiKey: payload.data.mapboxApiKey, setControlValue: setControlValue, viewport: viewport, getLayer: getLayer, payload: payload, getPoints: getPoints, width: width, height: height });\n  };\n}","map":{"version":3,"mappings":"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","names":["React","DeckGLContainerStyledWrapper","CategoricalDeckGLContainer","fitViewport","createDeckGLComponent","getLayer","getPoints","Component","PureComponent","constructor","props","containerRef","createRef","setTooltip","tooltip","current","width","height","formData","viewport","autozoom","points","payload","data","features","state","layer","computeLayer","onViewportChange","bind","UNSAFE_componentWillReceiveProps","nextProps","nextFdNoVP","currFdNoVP","setState","onAddFilter","render","setControlValue","mapboxApiKey","mapbox_style","createCategoricalDeckGLComponent","datasource"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/plugins/legacy-preset-chart-deckgl/src/factory.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { isEqual } from 'lodash';\nimport { Datasource, QueryFormData, JsonObject } from '@superset-ui/core';\n\nimport {\n  DeckGLContainerStyledWrapper,\n  DeckGLContainer,\n} from './DeckGLContainer';\nimport CategoricalDeckGLContainer from './CategoricalDeckGLContainer';\nimport fitViewport, { Viewport } from './utils/fitViewport';\nimport { Point } from './types';\n\ntype deckGLComponentProps = {\n  datasource: Datasource;\n  formData: QueryFormData;\n  height: number;\n  onAddFilter: () => void;\n  payload: JsonObject;\n  setControlValue: () => void;\n  viewport: Viewport;\n  width: number;\n};\nexport interface getLayerType<T> {\n  (\n    formData: QueryFormData,\n    payload: JsonObject,\n    onAddFilter: () => void,\n    setTooltip: (tooltip: string) => void,\n  ): T;\n}\ninterface getPointsType<T> {\n  (point: number[]): T;\n}\ntype deckGLComponentState = {\n  viewport: Viewport;\n  layer: unknown;\n};\n\nexport function createDeckGLComponent(\n  getLayer: getLayerType<unknown>,\n  getPoints: getPointsType<Point[]>,\n): React.ComponentClass<deckGLComponentProps> {\n  // Higher order component\n  class Component extends React.PureComponent<\n    deckGLComponentProps,\n    deckGLComponentState\n  > {\n    containerRef: React.RefObject<DeckGLContainer> = React.createRef();\n\n    constructor(props: deckGLComponentProps) {\n      super(props);\n\n      const { width, height, formData } = props;\n      let { viewport } = props;\n      if (formData.autozoom) {\n        viewport = fitViewport(viewport, {\n          width,\n          height,\n          points: getPoints(props.payload.data.features),\n        }) as Viewport;\n      }\n\n      this.state = {\n        viewport,\n        layer: this.computeLayer(props),\n      };\n      this.onViewportChange = this.onViewportChange.bind(this);\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps: deckGLComponentProps) {\n      // Only recompute the layer if anything BUT the viewport has changed\n      const nextFdNoVP = { ...nextProps.formData, viewport: null };\n      const currFdNoVP = { ...this.props.formData, viewport: null };\n      if (\n        !isEqual(nextFdNoVP, currFdNoVP) ||\n        nextProps.payload !== this.props.payload\n      ) {\n        this.setState({ layer: this.computeLayer(nextProps) });\n      }\n    }\n\n    onViewportChange(viewport: Viewport) {\n      this.setState({ viewport });\n    }\n\n    computeLayer(props: deckGLComponentProps) {\n      const { formData, payload, onAddFilter } = props;\n\n      return getLayer(formData, payload, onAddFilter, this.setTooltip);\n    }\n\n    setTooltip = (tooltip: string) => {\n      const { current } = this.containerRef;\n      if (current) {\n        current?.setTooltip(tooltip);\n      }\n    };\n\n    render() {\n      const { formData, payload, setControlValue, height, width } = this.props;\n      const { layer, viewport } = this.state;\n\n      return (\n        <DeckGLContainerStyledWrapper\n          ref={this.containerRef}\n          mapboxApiAccessToken={payload.data.mapboxApiKey}\n          viewport={viewport}\n          layers={[layer]}\n          mapStyle={formData.mapbox_style}\n          setControlValue={setControlValue}\n          width={width}\n          height={height}\n          onViewportChange={this.onViewportChange}\n        />\n      );\n    }\n  }\n  return Component;\n}\n\nexport function createCategoricalDeckGLComponent(\n  getLayer: getLayerType<unknown>,\n  getPoints: getPointsType<Point[]>,\n) {\n  return function Component(props: deckGLComponentProps) {\n    const {\n      datasource,\n      formData,\n      height,\n      payload,\n      setControlValue,\n      viewport,\n      width,\n    } = props;\n\n    return (\n      <CategoricalDeckGLContainer\n        datasource={datasource}\n        formData={formData}\n        mapboxApiKey={payload.data.mapboxApiKey}\n        setControlValue={setControlValue}\n        viewport={viewport}\n        getLayer={getLayer}\n        payload={payload}\n        getPoints={getPoints}\n        width={width}\n        height={height}\n      />\n    );\n  };\n}\n"]},"metadata":{},"sourceType":"module"}