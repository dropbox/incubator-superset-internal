{"ast":null,"code":"import _flatMapDeep from \"lodash/flatMapDeep\";import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport React from 'react';\nimport { ensureIsArray, GenericDataType } from '@superset-ui/core';\nimport { FILTER_SUPPORTED_TYPES } from './constants';\nconst FILTERS_FIELD_NAME = 'filters';\nexport const useForceUpdate = function (isActive) {if (isActive === void 0) {isActive = true;}\n  const [, updateState] = React.useState({});\n  return React.useCallback(() => {\n    if (isActive) {\n      updateState({});\n    }\n  }, [isActive]);\n};\nexport const setNativeFilterFieldValues = (form, filterId, values) => {\n  const formFilters = form.getFieldValue(FILTERS_FIELD_NAME) || {};\n  form.setFields([\n  {\n    name: FILTERS_FIELD_NAME,\n    value: {\n      ...formFilters,\n      [filterId]: {\n        ...formFilters[filterId],\n        ...values } } }]);\n\n\n\n\n};\nexport const getControlItems = function (controlConfig) {var _flatMapDeep$reduce, _flatMapDeep2;if (controlConfig === void 0) {controlConfig = {};}return (_flatMapDeep$reduce = (_flatMapDeep2 = _flatMapDeep(controlConfig.controlPanelSections)) == null ? void 0 : _flatMapDeep2.reduce((acc, _ref) => {let { controlSetRows = [] } = _ref;return [\n    ...acc,\n    ..._flatMapDeep(controlSetRows)];},\n  [])) != null ? _flatMapDeep$reduce : [];};\nexport const datasetToSelectOption = (item) => ({\n  value: item.id,\n  label: item.table_name });\n\n// TODO: add column_types field to Dataset\n// We return true if column_types is undefined or empty as a precaution against backend failing to return column_types\nexport const hasTemporalColumns = (dataset) => {\n  const columnTypes = ensureIsArray(dataset == null ? void 0 : dataset.column_types);\n  return columnTypes.length === 0 || _includesInstanceProperty(columnTypes).call(columnTypes, GenericDataType.TEMPORAL);\n};\nexport const doesColumnMatchFilterType = (filterType, column) => {var _FILTER_SUPPORTED_TYP;return !column.type_generic ||\n  !(filterType in FILTER_SUPPORTED_TYPES) || ((_FILTER_SUPPORTED_TYP =\n  FILTER_SUPPORTED_TYPES[filterType]) == null ? void 0 : _includesInstanceProperty(_FILTER_SUPPORTED_TYP).call(_FILTER_SUPPORTED_TYP, column.type_generic));};\nexport const mostUsedDataset = (datasets, charts) => {var _datasets$mostUsedDat;\n  const map = new Map();\n  let mostUsedDataset = '';\n  let maxCount = 0;\n  Object.values(charts).forEach((chart) => {\n    const { form_data: formData } = chart;\n    if (formData) {\n      const { datasource } = formData;\n      const count = (map.get(datasource) || 0) + 1;\n      map.set(datasource, count);\n      if (count > maxCount) {\n        maxCount = count;\n        mostUsedDataset = datasource;\n      }\n    }\n  });\n  return (_datasets$mostUsedDat = datasets[mostUsedDataset]) == null ? void 0 : _datasets$mostUsedDat.id;\n};","map":{"version":3,"mappings":"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","names":["React","ensureIsArray","GenericDataType","FILTER_SUPPORTED_TYPES","FILTERS_FIELD_NAME","useForceUpdate","isActive","updateState","useState","useCallback","setNativeFilterFieldValues","form","filterId","values","formFilters","getFieldValue","setFields","name","value","getControlItems","controlConfig","controlPanelSections","reduce","acc","controlSetRows","datasetToSelectOption","item","id","label","table_name","hasTemporalColumns","dataset","columnTypes","column_types","length","TEMPORAL","doesColumnMatchFilterType","filterType","column","type_generic","mostUsedDataset","datasets","charts","map","Map","maxCount","Object","forEach","form_data","formData","chart","datasource","count","get","set"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/utils.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { flatMapDeep } from 'lodash';\nimport { FormInstance } from 'src/components';\nimport React from 'react';\nimport { CustomControlItem, Dataset } from '@superset-ui/chart-controls';\nimport { Column, ensureIsArray, GenericDataType } from '@superset-ui/core';\nimport { DatasourcesState, ChartsState } from 'src/dashboard/types';\nimport { FILTER_SUPPORTED_TYPES } from './constants';\n\nconst FILTERS_FIELD_NAME = 'filters';\n\nexport const useForceUpdate = (isActive = true) => {\n  const [, updateState] = React.useState({});\n  return React.useCallback(() => {\n    if (isActive) {\n      updateState({});\n    }\n  }, [isActive]);\n};\n\nexport const setNativeFilterFieldValues = (\n  form: FormInstance,\n  filterId: string,\n  values: object,\n) => {\n  const formFilters = form.getFieldValue(FILTERS_FIELD_NAME) || {};\n  form.setFields([\n    {\n      name: FILTERS_FIELD_NAME,\n      value: {\n        ...formFilters,\n        [filterId]: {\n          ...formFilters[filterId],\n          ...values,\n        },\n      },\n    },\n  ]);\n};\n\nexport const getControlItems = (\n  controlConfig: { [key: string]: any } = {},\n): CustomControlItem[] =>\n  (flatMapDeep(controlConfig.controlPanelSections)?.reduce(\n    (acc: any, { controlSetRows = [] }: any) => [\n      ...acc,\n      ...flatMapDeep(controlSetRows),\n    ],\n    [],\n  ) as CustomControlItem[]) ?? [];\n\ntype DatasetSelectValue = {\n  value: number;\n  label: string;\n};\n\nexport const datasetToSelectOption = (\n  item: Dataset & { table_name: string },\n): DatasetSelectValue => ({\n  value: item.id,\n  label: item.table_name,\n});\n\n// TODO: add column_types field to Dataset\n// We return true if column_types is undefined or empty as a precaution against backend failing to return column_types\nexport const hasTemporalColumns = (\n  dataset: Dataset & { column_types: GenericDataType[] },\n) => {\n  const columnTypes = ensureIsArray(dataset?.column_types);\n  return (\n    columnTypes.length === 0 || columnTypes.includes(GenericDataType.TEMPORAL)\n  );\n};\n\nexport const doesColumnMatchFilterType = (filterType: string, column: Column) =>\n  !column.type_generic ||\n  !(filterType in FILTER_SUPPORTED_TYPES) ||\n  FILTER_SUPPORTED_TYPES[filterType]?.includes(column.type_generic);\n\nexport const mostUsedDataset = (\n  datasets: DatasourcesState,\n  charts: ChartsState,\n) => {\n  const map = new Map<string, number>();\n  let mostUsedDataset = '';\n  let maxCount = 0;\n\n  Object.values(charts).forEach(chart => {\n    const { form_data: formData } = chart;\n    if (formData) {\n      const { datasource } = formData;\n      const count = (map.get(datasource) || 0) + 1;\n      map.set(datasource, count);\n\n      if (count > maxCount) {\n        maxCount = count;\n        mostUsedDataset = datasource;\n      }\n    }\n  });\n\n  return datasets[mostUsedDataset]?.id;\n};\n"]},"metadata":{},"sourceType":"module"}