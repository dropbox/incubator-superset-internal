{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { css, t, useTheme } from '@superset-ui/core';\nimport Alert from 'src/components/Alert';\nimport MetadataBar from 'src/components/MetadataBar';\nimport { MetadataType } from 'src/components/MetadataBar/ContentType';\nimport { ResourceStatus } from 'src/hooks/apiResources/apiResources';\nimport { cachedSupersetGet } from 'src/utils/cachedSupersetGet';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport const useDatasetMetadataBar = (_ref) => {let { dataset: datasetProps, datasetId } = _ref;\n  const theme = useTheme();\n  const [result, setResult] = useState();\n  const [status, setStatus] = useState(datasetProps ? ResourceStatus.COMPLETE : ResourceStatus.LOADING);\n  useEffect(() => {\n    if (!datasetProps && datasetId) {\n      cachedSupersetGet({\n        endpoint: `/api/v1/dataset/${datasetId}` }).\n\n      then((_ref2) => {let { json: { result } } = _ref2;\n        setResult(result);\n        setStatus(ResourceStatus.COMPLETE);\n      }).\n      catch(() => {\n        setStatus(ResourceStatus.ERROR);\n      });\n    }\n  }, [datasetId, datasetProps]);\n  const metadataBar = useMemo(() => {\n    const items = [];\n    const dataset = datasetProps || result;\n    if (dataset) {var _created_by$first_nam, _created_by$last_name;\n      const { changed_on_humanized, created_on_humanized, description, table_name, changed_by, created_by, owners } = dataset;\n      const notAvailable = t('Not available');\n      const createdBy = `${(_created_by$first_nam = created_by == null ? void 0 : created_by.first_name) != null ? _created_by$first_nam : ''} ${(_created_by$last_name = created_by == null ? void 0 : created_by.last_name) != null ? _created_by$last_name : ''}`.trim() || notAvailable;\n      const modifiedBy = changed_by ?\n      `${changed_by.first_name} ${changed_by.last_name}` :\n      notAvailable;\n      const formattedOwners = (owners == null ? void 0 : owners.length) > 0 ?\n      owners.map((owner) => `${owner.first_name} ${owner.last_name}`) :\n      [notAvailable];\n      items.push({\n        type: MetadataType.TABLE,\n        title: table_name });\n\n      items.push({\n        type: MetadataType.LAST_MODIFIED,\n        value: changed_on_humanized,\n        modifiedBy });\n\n      items.push({\n        type: MetadataType.OWNER,\n        createdBy,\n        owners: formattedOwners,\n        createdOn: created_on_humanized });\n\n      if (description) {\n        items.push({\n          type: MetadataType.DESCRIPTION,\n          value: description });\n\n      }\n    }\n    return ___EmotionJSX(\"div\", { css: css`\n          display: flex;\n          margin-bottom: ${theme.gridUnit * 4}px;\n        ` },\n    status === ResourceStatus.COMPLETE && ___EmotionJSX(MetadataBar, { items: items, tooltipPlacement: \"bottom\" }),\n    status === ResourceStatus.ERROR && ___EmotionJSX(Alert, { type: \"error\", message: t('There was an error loading the dataset metadata') }));\n\n  }, [datasetProps, result, status, theme.gridUnit]);\n  return {\n    metadataBar,\n    status };\n\n};","map":{"version":3,"mappings":"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","names":["React","useEffect","useMemo","useState","css","t","useTheme","Alert","MetadataBar","MetadataType","ResourceStatus","cachedSupersetGet","useDatasetMetadataBar","dataset","datasetProps","datasetId","theme","result","setResult","status","setStatus","COMPLETE","LOADING","endpoint","then","json","catch","ERROR","metadataBar","items","changed_on_humanized","created_on_humanized","description","table_name","changed_by","created_by","owners","notAvailable","createdBy","first_name","last_name","trim","modifiedBy","formattedOwners","length","map","owner","push","type","TABLE","title","LAST_MODIFIED","value","OWNER","createdOn","DESCRIPTION","gridUnit"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/features/datasets/metadataBar/useDatasetMetadataBar.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { css, t, useTheme } from '@superset-ui/core';\nimport Alert from 'src/components/Alert';\nimport { Dataset } from 'src/components/Chart/types';\nimport MetadataBar from 'src/components/MetadataBar';\nimport {\n  ContentType,\n  MetadataType,\n} from 'src/components/MetadataBar/ContentType';\nimport { ResourceStatus } from 'src/hooks/apiResources/apiResources';\nimport { cachedSupersetGet } from 'src/utils/cachedSupersetGet';\n\nexport type UseDatasetMetadataBarProps =\n  | { datasetId?: undefined; dataset: Dataset }\n  | { datasetId: number | string; dataset?: undefined };\nexport const useDatasetMetadataBar = ({\n  dataset: datasetProps,\n  datasetId,\n}: UseDatasetMetadataBarProps) => {\n  const theme = useTheme();\n  const [result, setResult] = useState<Dataset>();\n  const [status, setStatus] = useState<ResourceStatus>(\n    datasetProps ? ResourceStatus.COMPLETE : ResourceStatus.LOADING,\n  );\n\n  useEffect(() => {\n    if (!datasetProps && datasetId) {\n      cachedSupersetGet({\n        endpoint: `/api/v1/dataset/${datasetId}`,\n      })\n        .then(({ json: { result } }) => {\n          setResult(result);\n          setStatus(ResourceStatus.COMPLETE);\n        })\n        .catch(() => {\n          setStatus(ResourceStatus.ERROR);\n        });\n    }\n  }, [datasetId, datasetProps]);\n\n  const metadataBar = useMemo(() => {\n    const items: ContentType[] = [];\n    const dataset = datasetProps || result;\n    if (dataset) {\n      const {\n        changed_on_humanized,\n        created_on_humanized,\n        description,\n        table_name,\n        changed_by,\n        created_by,\n        owners,\n      } = dataset;\n      const notAvailable = t('Not available');\n      const createdBy =\n        `${created_by?.first_name ?? ''} ${\n          created_by?.last_name ?? ''\n        }`.trim() || notAvailable;\n      const modifiedBy = changed_by\n        ? `${changed_by.first_name} ${changed_by.last_name}`\n        : notAvailable;\n      const formattedOwners =\n        owners?.length > 0\n          ? owners.map(owner => `${owner.first_name} ${owner.last_name}`)\n          : [notAvailable];\n      items.push({\n        type: MetadataType.TABLE,\n        title: table_name,\n      });\n      items.push({\n        type: MetadataType.LAST_MODIFIED,\n        value: changed_on_humanized,\n        modifiedBy,\n      });\n      items.push({\n        type: MetadataType.OWNER,\n        createdBy,\n        owners: formattedOwners,\n        createdOn: created_on_humanized,\n      });\n      if (description) {\n        items.push({\n          type: MetadataType.DESCRIPTION,\n          value: description,\n        });\n      }\n    }\n    return (\n      <div\n        css={css`\n          display: flex;\n          margin-bottom: ${theme.gridUnit * 4}px;\n        `}\n      >\n        {status === ResourceStatus.COMPLETE && (\n          <MetadataBar items={items} tooltipPlacement=\"bottom\" />\n        )}\n        {status === ResourceStatus.ERROR && (\n          <Alert\n            type=\"error\"\n            message={t('There was an error loading the dataset metadata')}\n          />\n        )}\n      </div>\n    );\n  }, [datasetProps, result, status, theme.gridUnit]);\n\n  return {\n    metadataBar,\n    status,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}