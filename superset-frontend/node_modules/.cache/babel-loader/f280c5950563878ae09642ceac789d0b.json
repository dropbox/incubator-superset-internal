{"ast":null,"code":"import _isEmpty from \"lodash/isEmpty\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport { ensureIsArray, getMetricLabel, getXAxisLabel, hasGenericChartAxes, isDefined } from '@superset-ui/core';\nimport { extractExtraMetrics } from './utils';\nexport const sortOperator = (formData, queryObject) => {\n  // the sortOperator only used in the barchart v2\n  const sortableLabels = [\n  getXAxisLabel(formData),\n  ...ensureIsArray(formData.metrics).map(getMetricLabel),\n  ...extractExtraMetrics(formData).map(getMetricLabel)].\n  filter(Boolean);\n  if (hasGenericChartAxes &&\n  isDefined(formData == null ? void 0 : formData.x_axis_sort) &&\n  isDefined(formData == null ? void 0 : formData.x_axis_sort_asc) &&\n  _includesInstanceProperty(sortableLabels).call(sortableLabels, formData.x_axis_sort) &&\n  // the sort operator doesn't support sort-by multiple series.\n  _isEmpty(formData.groupby)) {\n    if (formData.x_axis_sort === getXAxisLabel(formData)) {\n      return {\n        operation: 'sort',\n        options: {\n          is_sort_index: true,\n          ascending: formData.x_axis_sort_asc } };\n\n\n    }\n    return {\n      operation: 'sort',\n      options: {\n        by: formData.x_axis_sort,\n        ascending: formData.x_axis_sort_asc } };\n\n\n  }\n  return undefined;\n};;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(sortOperator, \"sortOperator\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-chart-controls/src/operators/sortOperator.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAmBA,SACEA,aADF,EAEEC,cAFF,EAGEC,aAHF,EAIEC,mBAJF,EAKEC,SALF,QAOO,mBAPP;AASA,SAASC,mBAAT,QAAoC,SAApC;AAEA,OAAO,MAAMC,YAAY,GAA8C,CACrEC,QADqE,EAErEC,WAFqE,KAGnE;EACF;EACA,MAAMC,cAAc,GAAG;EACrBP,aAAa,CAACK,QAAD,CADQ;EAErB,GAAGP,aAAa,CAACO,QAAQ,CAACG,OAAV,CAAb,CAAgCC,GAAhC,CAAoCV,cAApC,CAFkB;EAGrB,GAAGI,mBAAmB,CAACE,QAAD,CAAnB,CAA8BI,GAA9B,CAAkCV,cAAlC,CAHkB;EAIrBW,MAJqB,CAIdC,OAJc,CAAvB;EAMA,IACEV,mBAAmB;EACnBC,SAAS,CAACG,QAAD,oBAACA,QAAQ,CAAEO,WAAX,CADT;EAEAV,SAAS,CAACG,QAAD,oBAACA,QAAQ,CAAEQ,eAAX,CAFT;EAGA,wCAAc,MAAd,eAAc,EAAUR,QAAQ,CAACO,WAAnB,CAHd;EAIA;EACA,SAAQP,QAAQ,CAACS,OAAjB,CANF,EAOE;IACA,IAAIT,QAAQ,CAACO,WAAT,KAAyBZ,aAAa,CAACK,QAAD,CAA1C,EAAsD;MACpD,OAAO;QACLU,SAAS,EAAE,MADN;QAELC,OAAO,EAAE;UACPC,aAAa,EAAE,IADR;UAEPC,SAAS,EAAEb,QAAQ,CAACQ,eAFb,EAFJ,EAAP;;;IAOD;IAED,OAAO;MACLE,SAAS,EAAE,MADN;MAELC,OAAO,EAAE;QACPG,EAAE,EAAEd,QAAQ,CAACO,WADN;QAEPM,SAAS,EAAEb,QAAQ,CAACQ,eAFb,EAFJ,EAAP;;;EAOD;EACD,OAAOO,SAAP;AACD,CAtCM,C,iLAAMhB,Y","names":["ensureIsArray","getMetricLabel","getXAxisLabel","hasGenericChartAxes","isDefined","extractExtraMetrics","sortOperator","formData","queryObject","sortableLabels","metrics","map","filter","Boolean","x_axis_sort","x_axis_sort_asc","groupby","operation","options","is_sort_index","ascending","by","undefined"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-chart-controls/src/operators/sortOperator.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitationsxw\n * under the License.\n */\nimport { isEmpty } from 'lodash';\nimport {\n  ensureIsArray,\n  getMetricLabel,\n  getXAxisLabel,\n  hasGenericChartAxes,\n  isDefined,\n  PostProcessingSort,\n} from '@superset-ui/core';\nimport { PostProcessingFactory } from './types';\nimport { extractExtraMetrics } from './utils';\n\nexport const sortOperator: PostProcessingFactory<PostProcessingSort> = (\n  formData,\n  queryObject,\n) => {\n  // the sortOperator only used in the barchart v2\n  const sortableLabels = [\n    getXAxisLabel(formData),\n    ...ensureIsArray(formData.metrics).map(getMetricLabel),\n    ...extractExtraMetrics(formData).map(getMetricLabel),\n  ].filter(Boolean);\n\n  if (\n    hasGenericChartAxes &&\n    isDefined(formData?.x_axis_sort) &&\n    isDefined(formData?.x_axis_sort_asc) &&\n    sortableLabels.includes(formData.x_axis_sort) &&\n    // the sort operator doesn't support sort-by multiple series.\n    isEmpty(formData.groupby)\n  ) {\n    if (formData.x_axis_sort === getXAxisLabel(formData)) {\n      return {\n        operation: 'sort',\n        options: {\n          is_sort_index: true,\n          ascending: formData.x_axis_sort_asc,\n        },\n      };\n    }\n\n    return {\n      operation: 'sort',\n      options: {\n        by: formData.x_axis_sort,\n        ascending: formData.x_axis_sort_asc,\n      },\n    };\n  }\n  return undefined;\n};\n"]},"metadata":{},"sourceType":"module"}