{"ast":null,"code":"import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\"; /*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { CategoricalColorNamespace } from '.';\nimport { makeSingleton } from '../utils';\nexport var SharedLabelColorSource;\n(function (SharedLabelColorSource) {\n  SharedLabelColorSource[SharedLabelColorSource[\"dashboard\"] = 0] = \"dashboard\";\n  SharedLabelColorSource[SharedLabelColorSource[\"explore\"] = 1] = \"explore\";\n})(SharedLabelColorSource || (SharedLabelColorSource = {}));\nexport class SharedLabelColor {\n\n\n\n  constructor() {this.sliceLabelMap = void 0;this.colorMap = void 0;this.source = void 0;\n    // { sliceId1: [label1, label2, ...], sliceId2: [label1, label2, ...] }\n    this.sliceLabelMap = new Map();\n    this.colorMap = new Map();\n    this.source = SharedLabelColorSource.dashboard;\n  }\n  updateColorMap(colorNamespace, colorScheme) {\n    const categoricalNamespace = CategoricalColorNamespace.getNamespace(colorNamespace);\n    const newColorMap = new Map();\n    this.colorMap.clear();\n    this.sliceLabelMap.forEach((labels) => {\n      const colorScale = categoricalNamespace.getScale(colorScheme);\n      labels.forEach((label) => {\n        const newColor = colorScale(label);\n        newColorMap.set(label, newColor);\n      });\n    });\n    this.colorMap = newColorMap;\n  }\n  getColorMap() {\n    return this.colorMap;\n  }\n  addSlice(label, color, sliceId) {\n    if (this.source !== SharedLabelColorSource.dashboard ||\n    sliceId === undefined)\n    return;\n    const labels = this.sliceLabelMap.get(sliceId) || [];\n    if (!_includesInstanceProperty(labels).call(labels, label)) {\n      labels.push(label);\n      this.sliceLabelMap.set(sliceId, labels);\n    }\n    this.colorMap.set(label, color);\n  }\n  removeSlice(sliceId) {\n    if (this.source !== SharedLabelColorSource.dashboard)\n    return;\n    this.sliceLabelMap.delete(sliceId);\n    const newColorMap = new Map();\n    this.sliceLabelMap.forEach((labels) => {\n      labels.forEach((label) => {\n        newColorMap.set(label, this.colorMap.get(label));\n      });\n    });\n    this.colorMap = newColorMap;\n  }\n  reset() {\n    const copyColorMap = new Map(this.colorMap);\n    copyColorMap.forEach((_, label) => {\n      this.colorMap.set(label, '');\n    });\n  }\n  clear() {\n    this.sliceLabelMap.clear();\n    this.colorMap.clear();\n  }}\n\nconst getInstance = makeSingleton(SharedLabelColor);\nexport default getInstance;","map":{"version":3,"mappings":"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","names":["CategoricalColorNamespace","makeSingleton","SharedLabelColorSource","SharedLabelColor","constructor","sliceLabelMap","colorMap","source","Map","dashboard","updateColorMap","colorNamespace","colorScheme","categoricalNamespace","getNamespace","newColorMap","clear","forEach","colorScale","getScale","labels","newColor","label","set","getColorMap","addSlice","color","sliceId","undefined","get","push","removeSlice","delete","reset","copyColorMap","_","getInstance"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/color/SharedLabelColorSingleton.ts"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { CategoricalColorNamespace } from '.';\nimport { makeSingleton } from '../utils';\n\nexport enum SharedLabelColorSource {\n  dashboard,\n  explore,\n}\nexport class SharedLabelColor {\n  sliceLabelMap: Map<number, string[]>;\n\n  colorMap: Map<string, string>;\n\n  source: SharedLabelColorSource;\n\n  constructor() {\n    // { sliceId1: [label1, label2, ...], sliceId2: [label1, label2, ...] }\n    this.sliceLabelMap = new Map();\n    this.colorMap = new Map();\n    this.source = SharedLabelColorSource.dashboard;\n  }\n\n  updateColorMap(colorNamespace?: string, colorScheme?: string) {\n    const categoricalNamespace =\n      CategoricalColorNamespace.getNamespace(colorNamespace);\n    const newColorMap = new Map();\n    this.colorMap.clear();\n    this.sliceLabelMap.forEach(labels => {\n      const colorScale = categoricalNamespace.getScale(colorScheme);\n      labels.forEach(label => {\n        const newColor = colorScale(label);\n        newColorMap.set(label, newColor);\n      });\n    });\n    this.colorMap = newColorMap;\n  }\n\n  getColorMap() {\n    return this.colorMap;\n  }\n\n  addSlice(label: string, color: string, sliceId?: number) {\n    if (\n      this.source !== SharedLabelColorSource.dashboard ||\n      sliceId === undefined\n    )\n      return;\n    const labels = this.sliceLabelMap.get(sliceId) || [];\n    if (!labels.includes(label)) {\n      labels.push(label);\n      this.sliceLabelMap.set(sliceId, labels);\n    }\n    this.colorMap.set(label, color);\n  }\n\n  removeSlice(sliceId: number) {\n    if (this.source !== SharedLabelColorSource.dashboard) return;\n    this.sliceLabelMap.delete(sliceId);\n    const newColorMap = new Map();\n    this.sliceLabelMap.forEach(labels => {\n      labels.forEach(label => {\n        newColorMap.set(label, this.colorMap.get(label));\n      });\n    });\n    this.colorMap = newColorMap;\n  }\n\n  reset() {\n    const copyColorMap = new Map(this.colorMap);\n    copyColorMap.forEach((_, label) => {\n      this.colorMap.set(label, '');\n    });\n  }\n\n  clear() {\n    this.sliceLabelMap.clear();\n    this.colorMap.clear();\n  }\n}\n\nconst getInstance = makeSingleton(SharedLabelColor);\n\nexport default getInstance;\n"]},"metadata":{},"sourceType":"module"}