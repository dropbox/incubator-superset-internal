{"ast":null,"code":"import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useCallback, useMemo, useRef, useState } from 'react';\nimport { css, t, isFeatureEnabled, FeatureFlag, isNativeFilterWithDataMask } from '@superset-ui/core';\nimport { createHtmlPortalNode, InPortal, OutPortal } from 'react-reverse-portal';\nimport { useSelector } from 'react-redux';\nimport { useDashboardHasTabs, useSelectFiltersInScope } from 'src/dashboard/components/nativeFilters/state';\nimport { FilterBarOrientation } from 'src/dashboard/types';\nimport DropdownContainer from 'src/components/DropdownContainer';\nimport Icons from 'src/components/Icons';\nimport { FiltersOutOfScopeCollapsible } from '../FiltersOutOfScopeCollapsible';\nimport { useFilterControlFactory } from '../useFilterControlFactory';\nimport { FiltersDropdownContent } from '../FiltersDropdownContent';\nimport crossFiltersSelector from '../CrossFilters/selectors';\nimport CrossFilter from '../CrossFilters/CrossFilter';\nimport { useFilterOutlined } from '../useFilterOutlined';\nimport { useChartsVerboseMaps } from '../utils';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst FilterControls = (_ref) => {let { dataMaskSelected, onFilterSelectionChange } = _ref;\n  const filterBarOrientation = useSelector((_ref2) => {let { dashboardInfo } = _ref2;return isFeatureEnabled(FeatureFlag.HORIZONTAL_FILTER_BAR) ?\n    dashboardInfo.filterBarOrientation :\n    FilterBarOrientation.VERTICAL;});\n  const { outlinedFilterId, lastUpdated } = useFilterOutlined();\n  const [overflowedIds, setOverflowedIds] = useState([]);\n  const popoverRef = useRef(null);\n  const dataMask = useSelector((state) => state.dataMask);\n  const chartConfiguration = useSelector((state) => {var _state$dashboardInfo$;return (_state$dashboardInfo$ = state.dashboardInfo.metadata) == null ? void 0 : _state$dashboardInfo$.chart_configuration;});\n  const dashboardLayout = useSelector((state) => state.dashboardLayout.present);\n  const verboseMaps = useChartsVerboseMaps();\n  const isCrossFiltersEnabled = isFeatureEnabled(FeatureFlag.DASHBOARD_CROSS_FILTERS);\n  const selectedCrossFilters = useMemo(() => isCrossFiltersEnabled ?\n  crossFiltersSelector({\n    dataMask,\n    chartConfiguration,\n    dashboardLayout,\n    verboseMaps }) :\n\n  [], [chartConfiguration, dashboardLayout, dataMask, isCrossFiltersEnabled]);\n  const { filterControlFactory, filtersWithValues } = useFilterControlFactory(dataMaskSelected, onFilterSelectionChange);\n  const portalNodes = useMemo(() => {\n    const nodes = new Array(filtersWithValues.length);\n    for (let i = 0; i < filtersWithValues.length; i += 1) {\n      nodes[i] = createHtmlPortalNode();\n    }\n    return nodes;\n  }, [filtersWithValues.length]);\n  const filterIds = new Set(filtersWithValues.map((item) => item.id));\n  const [filtersInScope, filtersOutOfScope] = useSelectFiltersInScope(filtersWithValues);\n  const hasRequiredFirst = useMemo(() => filtersWithValues.some((filter) => filter.requiredFirst), [filtersWithValues]);\n  const dashboardHasTabs = useDashboardHasTabs();\n  const showCollapsePanel = dashboardHasTabs && filtersWithValues.length > 0;\n  const renderer = useCallback((_ref3, index) => {let { id } = _ref3;\n    const filterIndex = filtersWithValues.findIndex((f) => f.id === id);\n    const key = index != null ? index : id;\n    return (\n      // Empty text node is to ensure there's always an element preceding\n      // the OutPortal, otherwise react-reverse-portal crashes\n      ___EmotionJSX(React.Fragment, { key: key },\n      '' /* eslint-disable-line react/jsx-curly-brace-presence */,\n      ___EmotionJSX(OutPortal, { node: portalNodes[filterIndex], inView: true })));\n\n  }, [filtersWithValues, portalNodes]);\n  const renderVerticalContent = () => ___EmotionJSX(React.Fragment, null,\n  filtersInScope.map(renderer),\n  showCollapsePanel && ___EmotionJSX(FiltersOutOfScopeCollapsible, { filtersOutOfScope: filtersOutOfScope, forceRender: hasRequiredFirst, hasTopMargin: filtersInScope.length > 0, renderer: renderer }));\n\n  const overflowedFiltersInScope = useMemo(() => filtersInScope.filter((_ref4) => {let { id } = _ref4;return overflowedIds == null ? void 0 : _includesInstanceProperty(overflowedIds).call(overflowedIds, id);}), [filtersInScope, overflowedIds]);\n  const overflowedCrossFilters = useMemo(() => selectedCrossFilters.filter((_ref5) => {let { emitterId, name } = _ref5;return overflowedIds == null ? void 0 : _includesInstanceProperty(overflowedIds).call(overflowedIds, `${name}${emitterId}`);}), [overflowedIds, selectedCrossFilters]);\n  const activeOverflowedFiltersInScope = useMemo(() => {\n    const activeOverflowedFilters = overflowedFiltersInScope.filter((filter) => isNativeFilterWithDataMask(filter));\n    return [...activeOverflowedFilters, ...overflowedCrossFilters];\n  }, [overflowedCrossFilters, overflowedFiltersInScope]);\n  const rendererCrossFilter = useCallback((crossFilter, orientation, last) => ___EmotionJSX(CrossFilter, { filter: crossFilter, orientation: orientation, last: filtersInScope.length > 0 &&\n    `${last.name}${last.emitterId}` ===\n    `${crossFilter.name}${crossFilter.emitterId}` }), [filtersInScope.length]);\n  const items = useMemo(() => {\n    const crossFilters = selectedCrossFilters.map((c) => ({\n      // a combination of filter name and chart id to account\n      // for multiple cross filters from the same chart in the future\n      id: `${c.name}${c.emitterId}`,\n      element: rendererCrossFilter(c, FilterBarOrientation.HORIZONTAL, selectedCrossFilters.at(-1)) }));\n\n    const nativeFiltersInScope = filtersInScope.map((filter, index) => ({\n      id: filter.id,\n      element: ___EmotionJSX(\"div\", { className: \"filter-item-wrapper\", css: css`\n            flex-shrink: 0;\n          ` },\n      renderer(filter, index)) }));\n\n\n    return [...crossFilters, ...nativeFiltersInScope];\n  }, [filtersInScope, renderer, rendererCrossFilter, selectedCrossFilters]);\n  const renderHorizontalContent = () => ___EmotionJSX(\"div\", { css: (theme) => css`\n        padding: 0 ${theme.gridUnit * 4}px;\n        min-width: 0;\n        flex: 1;\n      ` },\n  ___EmotionJSX(DropdownContainer, { items: items, dropdownTriggerIcon: ___EmotionJSX(Icons.FilterSmall, { css: css`\n              && {\n                margin-right: -4px;\n                display: flex;\n              }\n            ` }), dropdownTriggerText: t('More filters'), dropdownTriggerCount: activeOverflowedFiltersInScope.length, dropdownTriggerTooltip: activeOverflowedFiltersInScope.length === 0 ?\n    t('No applied filters') :\n    t('Applied filters: %s', activeOverflowedFiltersInScope.\n    map((filter) => filter.name).\n    join(', ')), dropdownContent: overflowedFiltersInScope.length ||\n    overflowedCrossFilters.length ||\n    filtersOutOfScope.length && showCollapsePanel ?\n    () => ___EmotionJSX(FiltersDropdownContent, { overflowedCrossFilters: overflowedCrossFilters, filtersInScope: overflowedFiltersInScope, filtersOutOfScope: filtersOutOfScope, renderer: renderer, rendererCrossFilter: rendererCrossFilter, showCollapsePanel: showCollapsePanel, forceRenderOutOfScope: hasRequiredFirst }) :\n    undefined, ref: popoverRef, onOverflowingStateChange: (_ref6) => {let { overflowed: nextOverflowedIds } = _ref6;\n      if (nextOverflowedIds.length !== overflowedIds.length ||\n      overflowedIds.reduce((a, b, i) => a || b !== nextOverflowedIds[i], false)) {\n        setOverflowedIds(nextOverflowedIds);\n      }\n    } }));\n\n  const overflowedByIndex = useMemo(() => {\n    const filtersOutOfScopeIds = new Set(filtersOutOfScope.map((_ref7) => {let { id } = _ref7;return id;}));\n    const overflowedFiltersInScopeIds = new Set(overflowedFiltersInScope.map((_ref8) => {let { id } = _ref8;return id;}));\n    return filtersWithValues.map((filter) => filtersOutOfScopeIds.has(filter.id) ||\n    overflowedFiltersInScopeIds.has(filter.id));\n  }, [filtersOutOfScope, filtersWithValues, overflowedFiltersInScope]);\n  useEffect(() => {\n    if (outlinedFilterId && _includesInstanceProperty(overflowedIds).call(overflowedIds, outlinedFilterId)) {var _popoverRef$current;\n      popoverRef == null ? void 0 : (_popoverRef$current = popoverRef.current) == null ? void 0 : _popoverRef$current.open();\n    }\n  }, [outlinedFilterId, lastUpdated, popoverRef, overflowedIds]);\n  return ___EmotionJSX(React.Fragment, null,\n  portalNodes.\n  filter((node, index) => filterIds.has(filtersWithValues[index].id)).\n  map((node, index) => ___EmotionJSX(InPortal, { node: node, key: filtersWithValues[index].id },\n  filterControlFactory(index, filterBarOrientation, overflowedByIndex[index]))),\n\n  filterBarOrientation === FilterBarOrientation.VERTICAL &&\n  renderVerticalContent(),\n  filterBarOrientation === FilterBarOrientation.HORIZONTAL &&\n  renderHorizontalContent());\n\n};\nexport default /*#__PURE__*/React.memo(FilterControls);","map":{"version":3,"mappings":"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","names":["React","useEffect","useCallback","useMemo","useRef","useState","css","t","isFeatureEnabled","FeatureFlag","isNativeFilterWithDataMask","createHtmlPortalNode","InPortal","OutPortal","useSelector","useDashboardHasTabs","useSelectFiltersInScope","FilterBarOrientation","DropdownContainer","Icons","FiltersOutOfScopeCollapsible","useFilterControlFactory","FiltersDropdownContent","crossFiltersSelector","CrossFilter","useFilterOutlined","useChartsVerboseMaps","FilterControls","dataMaskSelected","onFilterSelectionChange","filterBarOrientation","dashboardInfo","HORIZONTAL_FILTER_BAR","VERTICAL","outlinedFilterId","lastUpdated","overflowedIds","setOverflowedIds","popoverRef","dataMask","state","chartConfiguration","metadata","chart_configuration","dashboardLayout","present","verboseMaps","isCrossFiltersEnabled","DASHBOARD_CROSS_FILTERS","selectedCrossFilters","filterControlFactory","filtersWithValues","portalNodes","nodes","Array","length","i","filterIds","Set","map","item","id","filtersInScope","filtersOutOfScope","hasRequiredFirst","some","filter","requiredFirst","dashboardHasTabs","showCollapsePanel","renderer","index","filterIndex","findIndex","f","key","renderVerticalContent","overflowedFiltersInScope","overflowedCrossFilters","emitterId","name","activeOverflowedFiltersInScope","activeOverflowedFilters","rendererCrossFilter","crossFilter","orientation","last","items","crossFilters","c","element","HORIZONTAL","at","nativeFiltersInScope","renderHorizontalContent","theme","gridUnit","join","undefined","overflowed","nextOverflowedIds","reduce","a","b","overflowedByIndex","filtersOutOfScopeIds","overflowedFiltersInScopeIds","has","current","open","node","memo"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/components/nativeFilters/FilterBar/FilterControls/FilterControls.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, {\n  FC,\n  useEffect,\n  useCallback,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport {\n  DataMask,\n  DataMaskStateWithId,\n  Filter,\n  Divider,\n  css,\n  SupersetTheme,\n  t,\n  isFeatureEnabled,\n  FeatureFlag,\n  isNativeFilterWithDataMask,\n  JsonObject,\n} from '@superset-ui/core';\nimport {\n  createHtmlPortalNode,\n  InPortal,\n  OutPortal,\n} from 'react-reverse-portal';\nimport { useSelector } from 'react-redux';\nimport {\n  useDashboardHasTabs,\n  useSelectFiltersInScope,\n} from 'src/dashboard/components/nativeFilters/state';\nimport {\n  DashboardLayout,\n  FilterBarOrientation,\n  RootState,\n} from 'src/dashboard/types';\nimport DropdownContainer, {\n  Ref as DropdownContainerRef,\n} from 'src/components/DropdownContainer';\nimport Icons from 'src/components/Icons';\nimport { FiltersOutOfScopeCollapsible } from '../FiltersOutOfScopeCollapsible';\nimport { useFilterControlFactory } from '../useFilterControlFactory';\nimport { FiltersDropdownContent } from '../FiltersDropdownContent';\nimport crossFiltersSelector from '../CrossFilters/selectors';\nimport CrossFilter from '../CrossFilters/CrossFilter';\nimport { useFilterOutlined } from '../useFilterOutlined';\nimport { useChartsVerboseMaps } from '../utils';\n\ntype FilterControlsProps = {\n  dataMaskSelected: DataMaskStateWithId;\n  onFilterSelectionChange: (filter: Filter, dataMask: DataMask) => void;\n};\n\nconst FilterControls: FC<FilterControlsProps> = ({\n  dataMaskSelected,\n  onFilterSelectionChange,\n}) => {\n  const filterBarOrientation = useSelector<RootState, FilterBarOrientation>(\n    ({ dashboardInfo }) =>\n      isFeatureEnabled(FeatureFlag.HORIZONTAL_FILTER_BAR)\n        ? dashboardInfo.filterBarOrientation\n        : FilterBarOrientation.VERTICAL,\n  );\n\n  const { outlinedFilterId, lastUpdated } = useFilterOutlined();\n\n  const [overflowedIds, setOverflowedIds] = useState<string[]>([]);\n  const popoverRef = useRef<DropdownContainerRef>(null);\n\n  const dataMask = useSelector<RootState, DataMaskStateWithId>(\n    state => state.dataMask,\n  );\n  const chartConfiguration = useSelector<RootState, JsonObject>(\n    state => state.dashboardInfo.metadata?.chart_configuration,\n  );\n  const dashboardLayout = useSelector<RootState, DashboardLayout>(\n    state => state.dashboardLayout.present,\n  );\n  const verboseMaps = useChartsVerboseMaps();\n\n  const isCrossFiltersEnabled = isFeatureEnabled(\n    FeatureFlag.DASHBOARD_CROSS_FILTERS,\n  );\n  const selectedCrossFilters = useMemo(\n    () =>\n      isCrossFiltersEnabled\n        ? crossFiltersSelector({\n            dataMask,\n            chartConfiguration,\n            dashboardLayout,\n            verboseMaps,\n          })\n        : [],\n    [chartConfiguration, dashboardLayout, dataMask, isCrossFiltersEnabled],\n  );\n  const { filterControlFactory, filtersWithValues } = useFilterControlFactory(\n    dataMaskSelected,\n    onFilterSelectionChange,\n  );\n  const portalNodes = useMemo(() => {\n    const nodes = new Array(filtersWithValues.length);\n    for (let i = 0; i < filtersWithValues.length; i += 1) {\n      nodes[i] = createHtmlPortalNode();\n    }\n    return nodes;\n  }, [filtersWithValues.length]);\n\n  const filterIds = new Set(filtersWithValues.map(item => item.id));\n\n  const [filtersInScope, filtersOutOfScope] =\n    useSelectFiltersInScope(filtersWithValues);\n\n  const hasRequiredFirst = useMemo(\n    () => filtersWithValues.some(filter => filter.requiredFirst),\n    [filtersWithValues],\n  );\n\n  const dashboardHasTabs = useDashboardHasTabs();\n  const showCollapsePanel = dashboardHasTabs && filtersWithValues.length > 0;\n\n  const renderer = useCallback(\n    ({ id }: Filter | Divider, index: number | undefined) => {\n      const filterIndex = filtersWithValues.findIndex(f => f.id === id);\n      const key = index ?? id;\n      return (\n        // Empty text node is to ensure there's always an element preceding\n        // the OutPortal, otherwise react-reverse-portal crashes\n        <React.Fragment key={key}>\n          {'' /* eslint-disable-line react/jsx-curly-brace-presence */}\n          <OutPortal node={portalNodes[filterIndex]} inView />\n        </React.Fragment>\n      );\n    },\n    [filtersWithValues, portalNodes],\n  );\n\n  const renderVerticalContent = () => (\n    <>\n      {filtersInScope.map(renderer)}\n      {showCollapsePanel && (\n        <FiltersOutOfScopeCollapsible\n          filtersOutOfScope={filtersOutOfScope}\n          forceRender={hasRequiredFirst}\n          hasTopMargin={filtersInScope.length > 0}\n          renderer={renderer}\n        />\n      )}\n    </>\n  );\n\n  const overflowedFiltersInScope = useMemo(\n    () => filtersInScope.filter(({ id }) => overflowedIds?.includes(id)),\n    [filtersInScope, overflowedIds],\n  );\n\n  const overflowedCrossFilters = useMemo(\n    () =>\n      selectedCrossFilters.filter(({ emitterId, name }) =>\n        overflowedIds?.includes(`${name}${emitterId}`),\n      ),\n    [overflowedIds, selectedCrossFilters],\n  );\n\n  const activeOverflowedFiltersInScope = useMemo(() => {\n    const activeOverflowedFilters = overflowedFiltersInScope.filter(filter =>\n      isNativeFilterWithDataMask(filter),\n    );\n    return [...activeOverflowedFilters, ...overflowedCrossFilters];\n  }, [overflowedCrossFilters, overflowedFiltersInScope]);\n\n  const rendererCrossFilter = useCallback(\n    (crossFilter, orientation, last) => (\n      <CrossFilter\n        filter={crossFilter}\n        orientation={orientation}\n        last={\n          filtersInScope.length > 0 &&\n          `${last.name}${last.emitterId}` ===\n            `${crossFilter.name}${crossFilter.emitterId}`\n        }\n      />\n    ),\n    [filtersInScope.length],\n  );\n\n  const items = useMemo(() => {\n    const crossFilters = selectedCrossFilters.map(c => ({\n      // a combination of filter name and chart id to account\n      // for multiple cross filters from the same chart in the future\n      id: `${c.name}${c.emitterId}`,\n      element: rendererCrossFilter(\n        c,\n        FilterBarOrientation.HORIZONTAL,\n        selectedCrossFilters.at(-1),\n      ),\n    }));\n    const nativeFiltersInScope = filtersInScope.map((filter, index) => ({\n      id: filter.id,\n      element: (\n        <div\n          className=\"filter-item-wrapper\"\n          css={css`\n            flex-shrink: 0;\n          `}\n        >\n          {renderer(filter, index)}\n        </div>\n      ),\n    }));\n    return [...crossFilters, ...nativeFiltersInScope];\n  }, [filtersInScope, renderer, rendererCrossFilter, selectedCrossFilters]);\n\n  const renderHorizontalContent = () => (\n    <div\n      css={(theme: SupersetTheme) => css`\n        padding: 0 ${theme.gridUnit * 4}px;\n        min-width: 0;\n        flex: 1;\n      `}\n    >\n      <DropdownContainer\n        items={items}\n        dropdownTriggerIcon={\n          <Icons.FilterSmall\n            css={css`\n              && {\n                margin-right: -4px;\n                display: flex;\n              }\n            `}\n          />\n        }\n        dropdownTriggerText={t('More filters')}\n        dropdownTriggerCount={activeOverflowedFiltersInScope.length}\n        dropdownTriggerTooltip={\n          activeOverflowedFiltersInScope.length === 0\n            ? t('No applied filters')\n            : t(\n                'Applied filters: %s',\n                activeOverflowedFiltersInScope\n                  .map(filter => filter.name)\n                  .join(', '),\n              )\n        }\n        dropdownContent={\n          overflowedFiltersInScope.length ||\n          overflowedCrossFilters.length ||\n          (filtersOutOfScope.length && showCollapsePanel)\n            ? () => (\n                <FiltersDropdownContent\n                  overflowedCrossFilters={overflowedCrossFilters}\n                  filtersInScope={overflowedFiltersInScope}\n                  filtersOutOfScope={filtersOutOfScope}\n                  renderer={renderer}\n                  rendererCrossFilter={rendererCrossFilter}\n                  showCollapsePanel={showCollapsePanel}\n                  forceRenderOutOfScope={hasRequiredFirst}\n                />\n              )\n            : undefined\n        }\n        ref={popoverRef}\n        onOverflowingStateChange={({ overflowed: nextOverflowedIds }) => {\n          if (\n            nextOverflowedIds.length !== overflowedIds.length ||\n            overflowedIds.reduce(\n              (a, b, i) => a || b !== nextOverflowedIds[i],\n              false,\n            )\n          ) {\n            setOverflowedIds(nextOverflowedIds);\n          }\n        }}\n      />\n    </div>\n  );\n\n  const overflowedByIndex = useMemo(() => {\n    const filtersOutOfScopeIds = new Set(filtersOutOfScope.map(({ id }) => id));\n    const overflowedFiltersInScopeIds = new Set(\n      overflowedFiltersInScope.map(({ id }) => id),\n    );\n\n    return filtersWithValues.map(\n      filter =>\n        filtersOutOfScopeIds.has(filter.id) ||\n        overflowedFiltersInScopeIds.has(filter.id),\n    );\n  }, [filtersOutOfScope, filtersWithValues, overflowedFiltersInScope]);\n\n  useEffect(() => {\n    if (outlinedFilterId && overflowedIds.includes(outlinedFilterId)) {\n      popoverRef?.current?.open();\n    }\n  }, [outlinedFilterId, lastUpdated, popoverRef, overflowedIds]);\n\n  return (\n    <>\n      {portalNodes\n        .filter((node, index) => filterIds.has(filtersWithValues[index].id))\n        .map((node, index) => (\n          <InPortal node={node} key={filtersWithValues[index].id}>\n            {filterControlFactory(\n              index,\n              filterBarOrientation,\n              overflowedByIndex[index],\n            )}\n          </InPortal>\n        ))}\n      {filterBarOrientation === FilterBarOrientation.VERTICAL &&\n        renderVerticalContent()}\n      {filterBarOrientation === FilterBarOrientation.HORIZONTAL &&\n        renderHorizontalContent()}\n    </>\n  );\n};\n\nexport default React.memo(FilterControls);\n"]},"metadata":{},"sourceType":"module"}