{"ast":null,"code":"import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport shortid from 'shortid';\nimport rison from 'rison';\nimport { FeatureFlag, SupersetClient, t } from '@superset-ui/core';\nimport invert from 'lodash/invert';\nimport mapKeys from 'lodash/mapKeys';\nimport { isFeatureEnabled } from 'src/featureFlags';\n\nimport { now } from 'src/utils/dates';\nimport {\naddDangerToast as addDangerToastAction,\naddInfoToast as addInfoToastAction,\naddSuccessToast as addSuccessToastAction,\naddWarningToast as addWarningToastAction } from\n'src/components/MessageToasts/actions';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport COMMON_ERR_MESSAGES from 'src/utils/errorMessages';\nimport { LOG_ACTIONS_SQLLAB_FETCH_FAILED_QUERY } from 'src/logger/LogUtils';\nimport { logEvent } from 'src/logger/actions';\nimport { newQueryTabName } from '../utils/newQueryTabName';\n\nexport const RESET_STATE = 'RESET_STATE';\nexport const ADD_QUERY_EDITOR = 'ADD_QUERY_EDITOR';\nexport const UPDATE_QUERY_EDITOR = 'UPDATE_QUERY_EDITOR';\nexport const QUERY_EDITOR_SAVED = 'QUERY_EDITOR_SAVED';\nexport const CLONE_QUERY_TO_NEW_TAB = 'CLONE_QUERY_TO_NEW_TAB';\nexport const REMOVE_QUERY_EDITOR = 'REMOVE_QUERY_EDITOR';\nexport const MERGE_TABLE = 'MERGE_TABLE';\nexport const REMOVE_TABLES = 'REMOVE_TABLES';\nexport const END_QUERY = 'END_QUERY';\nexport const REMOVE_QUERY = 'REMOVE_QUERY';\nexport const EXPAND_TABLE = 'EXPAND_TABLE';\nexport const COLLAPSE_TABLE = 'COLLAPSE_TABLE';\nexport const QUERY_EDITOR_SETDB = 'QUERY_EDITOR_SETDB';\nexport const QUERY_EDITOR_SET_SCHEMA = 'QUERY_EDITOR_SET_SCHEMA';\nexport const QUERY_EDITOR_SET_TITLE = 'QUERY_EDITOR_SET_TITLE';\nexport const QUERY_EDITOR_SET_AUTORUN = 'QUERY_EDITOR_SET_AUTORUN';\nexport const QUERY_EDITOR_SET_SQL = 'QUERY_EDITOR_SET_SQL';\nexport const QUERY_EDITOR_SET_QUERY_LIMIT = 'QUERY_EDITOR_SET_QUERY_LIMIT';\nexport const QUERY_EDITOR_SET_TEMPLATE_PARAMS =\n'QUERY_EDITOR_SET_TEMPLATE_PARAMS';\nexport const QUERY_EDITOR_SET_SELECTED_TEXT = 'QUERY_EDITOR_SET_SELECTED_TEXT';\nexport const QUERY_EDITOR_SET_FUNCTION_NAMES =\n'QUERY_EDITOR_SET_FUNCTION_NAMES';\nexport const QUERY_EDITOR_PERSIST_HEIGHT = 'QUERY_EDITOR_PERSIST_HEIGHT';\nexport const QUERY_EDITOR_TOGGLE_LEFT_BAR = 'QUERY_EDITOR_TOGGLE_LEFT_BAR';\nexport const MIGRATE_QUERY_EDITOR = 'MIGRATE_QUERY_EDITOR';\nexport const MIGRATE_TAB_HISTORY = 'MIGRATE_TAB_HISTORY';\nexport const MIGRATE_TABLE = 'MIGRATE_TABLE';\nexport const MIGRATE_QUERY = 'MIGRATE_QUERY';\n\nexport const SET_DATABASES = 'SET_DATABASES';\nexport const SET_ACTIVE_QUERY_EDITOR = 'SET_ACTIVE_QUERY_EDITOR';\nexport const LOAD_QUERY_EDITOR = 'LOAD_QUERY_EDITOR';\nexport const SET_TABLES = 'SET_TABLES';\nexport const SET_ACTIVE_SOUTHPANE_TAB = 'SET_ACTIVE_SOUTHPANE_TAB';\nexport const REFRESH_QUERIES = 'REFRESH_QUERIES';\nexport const SET_USER_OFFLINE = 'SET_USER_OFFLINE';\nexport const RUN_QUERY = 'RUN_QUERY';\nexport const START_QUERY = 'START_QUERY';\nexport const STOP_QUERY = 'STOP_QUERY';\nexport const REQUEST_QUERY_RESULTS = 'REQUEST_QUERY_RESULTS';\nexport const QUERY_SUCCESS = 'QUERY_SUCCESS';\nexport const QUERY_FAILED = 'QUERY_FAILED';\nexport const CLEAR_INACTIVE_QUERIES = 'CLEAR_INACTIVE_QUERIES';\nexport const CLEAR_QUERY_RESULTS = 'CLEAR_QUERY_RESULTS';\nexport const REMOVE_DATA_PREVIEW = 'REMOVE_DATA_PREVIEW';\nexport const CHANGE_DATA_PREVIEW_ID = 'CHANGE_DATA_PREVIEW_ID';\n\nexport const START_QUERY_VALIDATION = 'START_QUERY_VALIDATION';\nexport const QUERY_VALIDATION_RETURNED = 'QUERY_VALIDATION_RETURNED';\nexport const QUERY_VALIDATION_FAILED = 'QUERY_VALIDATION_FAILED';\nexport const COST_ESTIMATE_STARTED = 'COST_ESTIMATE_STARTED';\nexport const COST_ESTIMATE_RETURNED = 'COST_ESTIMATE_RETURNED';\nexport const COST_ESTIMATE_FAILED = 'COST_ESTIMATE_FAILED';\n\nexport const CREATE_DATASOURCE_STARTED = 'CREATE_DATASOURCE_STARTED';\nexport const CREATE_DATASOURCE_SUCCESS = 'CREATE_DATASOURCE_SUCCESS';\nexport const CREATE_DATASOURCE_FAILED = 'CREATE_DATASOURCE_FAILED';\n\nexport const addInfoToast = addInfoToastAction;\nexport const addSuccessToast = addSuccessToastAction;\nexport const addDangerToast = addDangerToastAction;\nexport const addWarningToast = addWarningToastAction;\n\nexport const CtasEnum = {\n  TABLE: 'TABLE',\n  VIEW: 'VIEW' };\n\nconst ERR_MSG_CANT_LOAD_QUERY = t(\"The query couldn't be loaded\");\n\n// a map of SavedQuery field names to the different names used client-side,\n// because for now making the names consistent is too complicated\n// so it might as well only happen in one place\nconst queryClientMapping = {\n  id: 'remoteId',\n  db_id: 'dbId',\n  label: 'name',\n  template_parameters: 'templateParams' };\n\nconst queryServerMapping = invert(queryClientMapping);\n\n// uses a mapping like those above to convert object key names to another style\nconst fieldConverter = (mapping) => (obj) =>\nmapKeys(obj, (value, key) => key in mapping ? mapping[key] : key);\n\nexport const convertQueryToServer = fieldConverter(queryServerMapping);\nexport const convertQueryToClient = fieldConverter(queryClientMapping);\n\nexport function getUpToDateQuery(rootState, queryEditor, key) {\n  const {\n    sqlLab: { unsavedQueryEditor } } =\n  rootState;\n  const id = key != null ? key : queryEditor.id;\n  return {\n    ...queryEditor,\n    ...(id === unsavedQueryEditor.id && unsavedQueryEditor) };\n\n}\n\nexport function resetState() {\n  return { type: RESET_STATE };\n}\n\nexport function startQueryValidation(query) {\n  Object.assign(query, {\n    id: query.id ? query.id : shortid.generate() });\n\n  return { type: START_QUERY_VALIDATION, query };\n}\n\nexport function queryValidationReturned(query, results) {\n  return { type: QUERY_VALIDATION_RETURNED, query, results };\n}\n\nexport function queryValidationFailed(query, message, error) {\n  return { type: QUERY_VALIDATION_FAILED, query, message, error };\n}\n\nexport function updateQueryEditor(alterations) {\n  return { type: UPDATE_QUERY_EDITOR, alterations };\n}\n\nexport function scheduleQuery(query) {\n  return (dispatch) =>\n  SupersetClient.post({\n    endpoint: '/savedqueryviewapi/api/create',\n    postPayload: query,\n    stringify: false }).\n\n  then(() =>\n  dispatch(\n  addSuccessToast(\n  t(\n  'Your query has been scheduled. To see details of your query, navigate to Saved queries')))).\n\n\n\n\n  catch(() =>\n  dispatch(addDangerToast(t('Your query could not be scheduled'))));\n\n}\n\nexport function estimateQueryCost(queryEditor) {\n  return (dispatch, getState) => {\n    const { dbId, schema, sql, selectedText, templateParams } =\n    getUpToDateQuery(getState(), queryEditor);\n    const requestSql = selectedText || sql;\n\n    const postPayload = {\n      database_id: dbId,\n      schema,\n      sql: requestSql,\n      template_params: JSON.parse(templateParams || '{}') };\n\n\n    return Promise.all([\n    dispatch({ type: COST_ESTIMATE_STARTED, query: queryEditor }),\n    SupersetClient.post({\n      endpoint: '/api/v1/sqllab/estimate/',\n      body: JSON.stringify(postPayload),\n      headers: { 'Content-Type': 'application/json' } }).\n\n    then((_ref) => {let { json } = _ref;return (\n        dispatch({ type: COST_ESTIMATE_RETURNED, query: queryEditor, json }));}).\n\n    catch((response) =>\n    getClientErrorObject(response).then((error) => {\n      const message =\n      error.error ||\n      error.statusText ||\n      t('Failed at retrieving results');\n      return dispatch({\n        type: COST_ESTIMATE_FAILED,\n        query: queryEditor,\n        error: message });\n\n    }))]);\n\n\n  };\n}\n\nexport function clearInactiveQueries() {\n  return { type: CLEAR_INACTIVE_QUERIES };\n}\n\nexport function startQuery(query) {\n  Object.assign(query, {\n    id: query.id ? query.id : shortid.generate(),\n    progress: 0,\n    startDttm: now(),\n    state: query.runAsync ? 'pending' : 'running',\n    cached: false });\n\n  return { type: START_QUERY, query };\n}\n\nexport function querySuccess(query, results) {\n  return function (dispatch) {var _results$query;\n    const sqlEditorId = results == null ? void 0 : (_results$query = results.query) == null ? void 0 : _results$query.sqlEditorId;\n    const sync =\n    sqlEditorId &&\n    !query.isDataPreview &&\n    isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.put({\n      endpoint: encodeURI(`/tabstateview/${sqlEditorId}`),\n      postPayload: { latest_query_id: query.id } }) :\n\n    Promise.resolve();\n\n    return sync.\n    then(() => dispatch({ type: QUERY_SUCCESS, query, results })).\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while storing the latest query id in the backend. ' +\n    'Please contact your administrator if this problem persists.'))));\n\n\n\n\n  };\n}\n\nexport function queryFailed(query, msg, link, errors) {\n  return function (dispatch) {\n    const sync =\n    !query.isDataPreview &&\n    isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.put({\n      endpoint: encodeURI(`/tabstateview/${query.sqlEditorId}`),\n      postPayload: { latest_query_id: query.id } }) :\n\n    Promise.resolve();\n\n    const eventData = {\n      has_err: true,\n      start_offset: query.startDttm,\n      ts: new Date().getTime() };\n\n    errors == null ? void 0 : errors.forEach((_ref2) => {var _extra$issue_codes;let { error_type: errorType, extra } = _ref2;\n      const messages = (extra == null ? void 0 : (_extra$issue_codes = extra.issue_codes) == null ? void 0 : _extra$issue_codes.map((_ref3) => {let { message } = _ref3;return message;})) || [\n      errorType];\n\n      messages.forEach((message) => {\n        dispatch(\n        logEvent(LOG_ACTIONS_SQLLAB_FETCH_FAILED_QUERY, {\n          ...eventData,\n          error_type: errorType,\n          error_details: message }));\n\n\n      });\n    });\n\n    return (\n      sync.\n      catch(() =>\n      dispatch(\n      addDangerToast(\n      t(\n      'An error occurred while storing the latest query id in the backend. ' +\n      'Please contact your administrator if this problem persists.'))))\n\n\n\n\n      // We should always show the error message, even if we couldn't sync the\n      // state to the backend\n      .then(() => dispatch({ type: QUERY_FAILED, query, msg, link, errors })));\n\n  };\n}\n\nexport function stopQuery(query) {\n  return { type: STOP_QUERY, query };\n}\n\nexport function clearQueryResults(query) {\n  return { type: CLEAR_QUERY_RESULTS, query };\n}\n\nexport function removeDataPreview(table) {\n  return { type: REMOVE_DATA_PREVIEW, table };\n}\n\nexport function requestQueryResults(query) {\n  return { type: REQUEST_QUERY_RESULTS, query };\n}\n\nexport function fetchQueryResults(query, displayLimit) {\n  return function (dispatch) {\n    dispatch(requestQueryResults(query));\n\n    const queryParams = rison.encode({\n      key: query.resultsKey,\n      rows: displayLimit || null });\n\n\n    return SupersetClient.get({\n      endpoint: `/api/v1/sqllab/results/?q=${queryParams}`,\n      parseMethod: 'json-bigint' }).\n\n    then((_ref4) => {let { json } = _ref4;return dispatch(querySuccess(query, json));}).\n    catch((response) =>\n    getClientErrorObject(response).then((error) => {\n      const message =\n      error.error ||\n      error.statusText ||\n      t('Failed at retrieving results');\n\n      return dispatch(\n      queryFailed(query, message, error.link, error.errors));\n\n    }));\n\n  };\n}\n\nexport function runQuery(query) {\n  return function (dispatch) {\n    dispatch(startQuery(query));\n    const postPayload = {\n      client_id: query.id,\n      database_id: query.dbId,\n      json: true,\n      runAsync: query.runAsync,\n      schema: query.schema,\n      sql: query.sql,\n      sql_editor_id: query.sqlEditorId,\n      tab: query.tab,\n      tmp_table_name: query.tempTable,\n      select_as_cta: query.ctas,\n      ctas_method: query.ctas_method,\n      templateParams: query.templateParams,\n      queryLimit: query.queryLimit,\n      expand_data: true };\n\n\n    const search = window.location.search || '';\n    return SupersetClient.post({\n      endpoint: `/api/v1/sqllab/execute/${search}`,\n      body: JSON.stringify(postPayload),\n      headers: { 'Content-Type': 'application/json' },\n      parseMethod: 'json-bigint' }).\n\n    then((_ref5) => {let { json } = _ref5;\n      if (!query.runAsync) {\n        dispatch(querySuccess(query, json));\n      }\n    }).\n    catch((response) =>\n    getClientErrorObject(response).then((error) => {\n      let message =\n      error.error ||\n      error.message ||\n      error.statusText ||\n      t('Unknown error');\n      if (_includesInstanceProperty(message).call(message, 'CSRF token')) {\n        message = t(COMMON_ERR_MESSAGES.SESSION_TIMED_OUT);\n      }\n      dispatch(queryFailed(query, message, error.link, error.errors));\n    }));\n\n  };\n}\n\nexport function runQueryFromSqlEditor(\ndatabase,\nqueryEditor,\ndefaultQueryLimit,\ntempTable,\nctas,\nctasMethod)\n{\n  return function (dispatch, getState) {\n    const qe = getUpToDateQuery(getState(), queryEditor, queryEditor.id);\n    const query = {\n      dbId: qe.dbId,\n      sql: qe.selectedText || qe.sql,\n      sqlEditorId: qe.id,\n      tab: qe.name,\n      schema: qe.schema,\n      tempTable,\n      templateParams: qe.templateParams,\n      queryLimit: qe.queryLimit || defaultQueryLimit,\n      runAsync: database ? database.allow_run_async : false,\n      ctas,\n      ctas_method: ctasMethod,\n      updateTabState: !qe.selectedText };\n\n    dispatch(runQuery(query));\n  };\n}\n\nexport function reRunQuery(query) {\n  // run Query with a new id\n  return function (dispatch) {\n    dispatch(runQuery({ ...query, id: shortid.generate() }));\n  };\n}\n\nexport function validateQuery(queryEditor, sql) {\n  return function (dispatch, getState) {\n    const {\n      sqlLab: { unsavedQueryEditor } } =\n    getState();\n    const qe = {\n      ...queryEditor,\n      ...(queryEditor.id === unsavedQueryEditor.id && unsavedQueryEditor) };\n\n\n    const query = {\n      dbId: qe.dbId,\n      sql,\n      sqlEditorId: qe.id,\n      schema: qe.schema,\n      templateParams: qe.templateParams };\n\n    dispatch(startQueryValidation(query));\n\n    const postPayload = {\n      schema: query.schema,\n      sql: query.sql,\n      template_params: query.templateParams };\n\n\n    return SupersetClient.post({\n      endpoint: `/api/v1/database/${query.dbId}/validate_sql/`,\n      body: JSON.stringify(postPayload),\n      headers: { 'Content-Type': 'application/json' } }).\n\n    then((_ref6) => {let { json } = _ref6;return dispatch(queryValidationReturned(query, json.result));}).\n    catch((response) =>\n    getClientErrorObject(response.result).then((error) => {\n      let message = error.error || error.statusText || t('Unknown error');\n      if (_includesInstanceProperty(message).call(message, 'CSRF token')) {\n        message = t(COMMON_ERR_MESSAGES.SESSION_TIMED_OUT);\n      }\n      dispatch(queryValidationFailed(query, message, error));\n    }));\n\n  };\n}\n\nexport function postStopQuery(query) {\n  return function (dispatch) {\n    return SupersetClient.post({\n      endpoint: '/api/v1/query/stop',\n      body: JSON.stringify({ client_id: query.id }),\n      headers: { 'Content-Type': 'application/json' } }).\n\n    then(() => dispatch(stopQuery(query))).\n    then(() => dispatch(addSuccessToast(t('Query was stopped.')))).\n    catch(() =>\n    dispatch(addDangerToast(t('Failed at stopping query. %s', query.id))));\n\n  };\n}\n\nexport function setDatabases(databases) {\n  return { type: SET_DATABASES, databases };\n}\n\nfunction migrateTable(table, queryEditorId, dispatch) {\n  return SupersetClient.post({\n    endpoint: encodeURI('/tableschemaview/'),\n    postPayload: { table: { ...table, queryEditorId } } }).\n\n  then((_ref7) => {let { json } = _ref7;\n    const newTable = {\n      ...table,\n      id: json.id,\n      queryEditorId };\n\n    return dispatch({ type: MIGRATE_TABLE, oldTable: table, newTable });\n  }).\n  catch(() =>\n  dispatch(\n  addWarningToast(\n  t(\n  'Unable to migrate table schema state to backend. Superset will retry ' +\n  'later. Please contact your administrator if this problem persists.'))));\n\n\n\n\n}\n\nfunction migrateQuery(queryId, queryEditorId, dispatch) {\n  return SupersetClient.post({\n    endpoint: encodeURI(`/tabstateview/${queryEditorId}/migrate_query`),\n    postPayload: { queryId } }).\n\n  then(() => dispatch({ type: MIGRATE_QUERY, queryId, queryEditorId })).\n  catch(() =>\n  dispatch(\n  addWarningToast(\n  t(\n  'Unable to migrate query state to backend. Superset will retry later. ' +\n  'Please contact your administrator if this problem persists.'))));\n\n\n\n\n}\n\nexport function migrateQueryEditorFromLocalStorage(\nqueryEditor,\ntables,\nqueries)\n{\n  return function (dispatch) {\n    return SupersetClient.post({\n      endpoint: '/tabstateview/',\n      postPayload: { queryEditor } }).\n\n    then((_ref8) => {let { json } = _ref8;\n      const newQueryEditor = {\n        ...queryEditor,\n        id: json.id.toString() };\n\n      dispatch({\n        type: MIGRATE_QUERY_EDITOR,\n        oldQueryEditor: queryEditor,\n        newQueryEditor });\n\n      dispatch({\n        type: MIGRATE_TAB_HISTORY,\n        oldId: queryEditor.id,\n        newId: newQueryEditor.id });\n\n      return Promise.all([\n      ...tables.map((table) =>\n      migrateTable(table, newQueryEditor.id, dispatch)),\n\n      ...queries.map((query) =>\n      migrateQuery(query.id, newQueryEditor.id, dispatch))]);\n\n\n    }).\n    catch(() =>\n    dispatch(\n    addWarningToast(\n    t(\n    'Unable to migrate query editor state to backend. Superset will retry ' +\n    'later. Please contact your administrator if this problem persists.'))));\n\n\n\n\n  };\n}\n\nexport function addQueryEditor(queryEditor) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.post({\n      endpoint: '/tabstateview/',\n      postPayload: { queryEditor } }) :\n\n    Promise.resolve({ json: { id: shortid.generate() } });\n\n    return sync.\n    then((_ref9) => {let { json } = _ref9;\n      const newQueryEditor = {\n        ...queryEditor,\n        id: json.id.toString() };\n\n      return dispatch({\n        type: ADD_QUERY_EDITOR,\n        queryEditor: newQueryEditor });\n\n    }).\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'Unable to add a new tab to the backend. Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function addNewQueryEditor() {\n  return function (dispatch, getState) {\n    const {\n      sqlLab: {\n        queryEditors,\n        tabHistory,\n        unsavedQueryEditor,\n        defaultDbId,\n        databases },\n\n      common } =\n    getState();\n    const activeQueryEditor = queryEditors.find(\n    (qe) => qe.id === tabHistory[tabHistory.length - 1]);\n\n    const dbIds = Object.values(databases).map((database) => database.id);\n    const firstDbId = dbIds.length > 0 ? Math.min(...dbIds) : undefined;\n    const { dbId, schema, queryLimit, autorun } = {\n      ...queryEditors[0],\n      ...activeQueryEditor,\n      ...(unsavedQueryEditor.id === (activeQueryEditor == null ? void 0 : activeQueryEditor.id) &&\n      unsavedQueryEditor) };\n\n    const warning = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    '' :\n    t(\n    '-- Note: Unless you save your query, these tabs will NOT persist if you clear your cookies or change browsers.\\n\\n');\n\n\n    const name = newQueryTabName(queryEditors || []);\n\n    return dispatch(\n    addQueryEditor({\n      dbId: dbId || defaultDbId || firstDbId,\n      schema: schema != null ? schema : null,\n      autorun: autorun != null ? autorun : false,\n      sql: `${warning}SELECT ...`,\n      queryLimit: queryLimit || common.conf.DEFAULT_SQLLAB_LIMIT,\n      name }));\n\n\n  };\n}\n\nexport function cloneQueryToNewTab(query, autorun) {\n  return function (dispatch, getState) {\n    const state = getState();\n    const { queryEditors, tabHistory } = state.sqlLab;\n    const sourceQueryEditor = queryEditors.find(\n    (qe) => qe.id === tabHistory[tabHistory.length - 1]);\n\n    const queryEditor = {\n      name: t('Copy of %s', sourceQueryEditor.name),\n      dbId: query.dbId ? query.dbId : null,\n      schema: query.schema ? query.schema : null,\n      autorun,\n      sql: query.sql,\n      queryLimit: sourceQueryEditor.queryLimit,\n      maxRow: sourceQueryEditor.maxRow,\n      templateParams: sourceQueryEditor.templateParams };\n\n    return dispatch(addQueryEditor(queryEditor));\n  };\n}\n\nexport function setActiveQueryEditor(queryEditor) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.post({\n      endpoint: encodeURI(`/tabstateview/${queryEditor.id}/activate`) }) :\n\n    Promise.resolve();\n\n    return sync.\n    then(() => dispatch({ type: SET_ACTIVE_QUERY_EDITOR, queryEditor })).\n    catch((response) => {\n      if (response.status !== 404) {\n        return dispatch(\n        addDangerToast(\n        t(\n        'An error occurred while setting the active tab. Please contact ' +\n        'your administrator.')));\n\n\n\n      }\n      return dispatch({ type: REMOVE_QUERY_EDITOR, queryEditor });\n    });\n  };\n}\n\nexport function loadQueryEditor(queryEditor) {\n  return { type: LOAD_QUERY_EDITOR, queryEditor };\n}\n\nexport function setTables(tableSchemas) {\n  const tables = tableSchemas.\n  filter((tableSchema) => tableSchema.description !== null).\n  map((tableSchema) => {\n    const {\n      columns,\n      selectStar,\n      primaryKey,\n      foreignKeys,\n      indexes,\n      dataPreviewQueryId } =\n    tableSchema.description;\n    return {\n      dbId: tableSchema.database_id,\n      queryEditorId: tableSchema.tab_state_id.toString(),\n      schema: tableSchema.schema,\n      name: tableSchema.table,\n      expanded: tableSchema.expanded,\n      id: tableSchema.id,\n      dataPreviewQueryId,\n      columns,\n      selectStar,\n      primaryKey,\n      foreignKeys,\n      indexes,\n      isMetadataLoading: false,\n      isExtraMetadataLoading: false };\n\n  });\n  return { type: SET_TABLES, tables };\n}\n\nexport function switchQueryEditor(queryEditor, displayLimit) {\n  return function (dispatch) {\n    if (\n    isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) &&\n    queryEditor &&\n    !queryEditor.loaded)\n    {\n      SupersetClient.get({\n        endpoint: encodeURI(`/tabstateview/${queryEditor.id}`) }).\n\n      then((_ref10) => {var _json$latest_query, _json$saved_query;let { json } = _ref10;\n        const loadedQueryEditor = {\n          id: json.id.toString(),\n          loaded: true,\n          name: json.label,\n          sql: json.sql,\n          selectedText: null,\n          latestQueryId: (_json$latest_query = json.latest_query) == null ? void 0 : _json$latest_query.id,\n          autorun: json.autorun,\n          dbId: json.database_id,\n          templateParams: json.template_params,\n          schema: json.schema,\n          queryLimit: json.query_limit,\n          remoteId: (_json$saved_query = json.saved_query) == null ? void 0 : _json$saved_query.id,\n          validationResult: {\n            id: null,\n            errors: [],\n            completed: false },\n\n          hideLeftBar: json.hide_left_bar };\n\n        dispatch(loadQueryEditor(loadedQueryEditor));\n        dispatch(setTables(json.table_schemas || []));\n        dispatch(setActiveQueryEditor(loadedQueryEditor));\n        if (json.latest_query && json.latest_query.resultsKey) {\n          dispatch(fetchQueryResults(json.latest_query, displayLimit));\n        }\n      }).\n      catch((response) => {\n        if (response.status !== 404) {\n          return dispatch(\n          addDangerToast(t('An error occurred while fetching tab state')));\n\n        }\n        return dispatch({ type: REMOVE_QUERY_EDITOR, queryEditor });\n      });\n    } else {\n      dispatch(setActiveQueryEditor(queryEditor));\n    }\n  };\n}\n\nexport function setActiveSouthPaneTab(tabId) {\n  return { type: SET_ACTIVE_SOUTHPANE_TAB, tabId };\n}\n\nexport function toggleLeftBar(queryEditor) {\n  const hideLeftBar = !queryEditor.hideLeftBar;\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.put({\n      endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n      postPayload: { hide_left_bar: hideLeftBar } }) :\n\n    Promise.resolve();\n\n    return sync.\n    then(() =>\n    dispatch({\n      type: QUERY_EDITOR_TOGGLE_LEFT_BAR,\n      queryEditor,\n      hideLeftBar })).\n\n\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while hiding the left bar. Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function removeQueryEditor(queryEditor) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.delete({\n      endpoint: encodeURI(`/tabstateview/${queryEditor.id}`) }) :\n\n    Promise.resolve();\n\n    return sync.\n    then(() => dispatch({ type: REMOVE_QUERY_EDITOR, queryEditor })).\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while removing tab. Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function removeAllOtherQueryEditors(queryEditor) {\n  return function (dispatch, getState) {var _sqlLab$queryEditors;\n    const { sqlLab } = getState();\n    (_sqlLab$queryEditors = sqlLab.queryEditors) == null ? void 0 : _sqlLab$queryEditors.forEach((otherQueryEditor) => {\n      if (otherQueryEditor.id !== queryEditor.id) {\n        dispatch(removeQueryEditor(otherQueryEditor));\n      }\n    });\n  };\n}\n\nexport function removeQuery(query) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.delete({\n      endpoint: encodeURI(\n      `/tabstateview/${query.sqlEditorId}/query/${query.id}`) }) :\n\n\n    Promise.resolve();\n\n    return sync.\n    then(() => dispatch({ type: REMOVE_QUERY, query })).\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while removing query. Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function queryEditorSetDb(queryEditor, dbId) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.put({\n      endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n      postPayload: { database_id: dbId } }) :\n\n    Promise.resolve();\n\n    return sync.\n    then(() => dispatch({ type: QUERY_EDITOR_SETDB, queryEditor, dbId })).\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while setting the tab database ID. Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function queryEditorSetSchema(queryEditor, schema) {\n  return function (dispatch) {\n    const sync =\n    isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) &&\n    typeof queryEditor === 'object' ?\n    SupersetClient.put({\n      endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n      postPayload: { schema } }) :\n\n    Promise.resolve();\n\n    return sync.\n    then(() =>\n    dispatch({\n      type: QUERY_EDITOR_SET_SCHEMA,\n      queryEditor: queryEditor || {},\n      schema })).\n\n\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while setting the tab schema. Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function queryEditorSetAutorun(queryEditor, autorun) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.put({\n      endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n      postPayload: { autorun } }) :\n\n    Promise.resolve();\n\n    return sync.\n    then(() =>\n    dispatch({ type: QUERY_EDITOR_SET_AUTORUN, queryEditor, autorun })).\n\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while setting the tab autorun. Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function queryEditorSetTitle(queryEditor, name, id) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.put({\n      endpoint: encodeURI(`/tabstateview/${id}`),\n      postPayload: { label: name } }) :\n\n    Promise.resolve();\n\n    return sync.\n    then(() =>\n    dispatch({\n      type: QUERY_EDITOR_SET_TITLE,\n      queryEditor: { ...queryEditor, id },\n      name })).\n\n\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while setting the tab name. Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function saveQuery(query, clientId) {\n  const { id, ...payload } = convertQueryToServer(query);\n\n  return (dispatch) =>\n  SupersetClient.post({\n    endpoint: '/api/v1/saved_query/',\n    jsonPayload: convertQueryToServer(payload) }).\n\n  then((result) => {\n    const savedQuery = convertQueryToClient({\n      id: result.json.id,\n      ...result.json.result });\n\n    dispatch({\n      type: QUERY_EDITOR_SAVED,\n      query,\n      clientId,\n      result: savedQuery });\n\n    dispatch(queryEditorSetTitle(query, query.name, clientId));\n    return savedQuery;\n  }).\n  catch(() =>\n  dispatch(addDangerToast(t('Your query could not be saved'))));\n\n}\n\nexport const addSavedQueryToTabState =\n(queryEditor, savedQuery) => (dispatch) => {\n  const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n  SupersetClient.put({\n    endpoint: `/tabstateview/${queryEditor.id}`,\n    postPayload: { saved_query_id: savedQuery.remoteId } }) :\n\n  Promise.resolve();\n\n  return sync.\n  catch(() => {\n    dispatch(addDangerToast(t('Your query was not properly saved')));\n  }).\n  then(() => {\n    dispatch(addSuccessToast(t('Your query was saved')));\n  });\n};\n\nexport function updateSavedQuery(query, clientId) {\n  const { id, ...payload } = convertQueryToServer(query);\n\n  return (dispatch) =>\n  SupersetClient.put({\n    endpoint: `/api/v1/saved_query/${query.remoteId}`,\n    jsonPayload: convertQueryToServer(payload) }).\n\n  then(() => {\n    dispatch(addSuccessToast(t('Your query was updated')));\n    dispatch(queryEditorSetTitle(query, query.name, clientId));\n  }).\n  catch((e) => {\n    const message = t('Your query could not be updated');\n    // eslint-disable-next-line no-console\n    console.error(message, e);\n    dispatch(addDangerToast(message));\n  }).\n  then(() => dispatch(updateQueryEditor(query)));\n}\n\nexport function queryEditorSetSql(queryEditor, sql) {\n  return { type: QUERY_EDITOR_SET_SQL, queryEditor, sql };\n}\n\nexport function queryEditorSetAndSaveSql(targetQueryEditor, sql) {\n  return function (dispatch, getState) {\n    const queryEditor = getUpToDateQuery(getState(), targetQueryEditor);\n    // saved query and set tab state use this action\n    dispatch(queryEditorSetSql(queryEditor, sql));\n    if (isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)) {\n      return SupersetClient.put({\n        endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n        postPayload: { sql, latest_query_id: queryEditor.latestQueryId } }).\n      catch(() =>\n      dispatch(\n      addDangerToast(\n      t(\n      'An error occurred while storing your query in the backend. To ' +\n      'avoid losing your changes, please save your query using the ' +\n      '\"Save Query\" button.'))));\n\n\n\n\n    }\n    return Promise.resolve();\n  };\n}\n\nexport function queryEditorSetQueryLimit(queryEditor, queryLimit) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.put({\n      endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n      postPayload: { query_limit: queryLimit } }) :\n\n    Promise.resolve();\n\n    return sync.\n    then(() =>\n    dispatch({\n      type: QUERY_EDITOR_SET_QUERY_LIMIT,\n      queryEditor,\n      queryLimit })).\n\n\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while setting the tab name. Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function queryEditorSetTemplateParams(queryEditor, templateParams) {\n  return function (dispatch) {\n    dispatch({\n      type: QUERY_EDITOR_SET_TEMPLATE_PARAMS,\n      queryEditor,\n      templateParams });\n\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.put({\n      endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n      postPayload: { template_params: templateParams } }) :\n\n    Promise.resolve();\n\n    return sync.catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while setting the tab template parameters. ' +\n    'Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function queryEditorSetSelectedText(queryEditor, sql) {\n  return { type: QUERY_EDITOR_SET_SELECTED_TEXT, queryEditor, sql };\n}\n\nexport function mergeTable(table, query, prepend) {\n  return { type: MERGE_TABLE, table, query, prepend };\n}\n\nfunction getTableMetadata(table, query, dispatch) {\n  return SupersetClient.get({\n    endpoint: encodeURI(\n    `/api/v1/database/${query.dbId}/table/${encodeURIComponent(\n    table.name)\n    }/${encodeURIComponent(table.schema)}/`) }).\n\n\n  then((_ref11) => {let { json } = _ref11;\n    const newTable = {\n      ...table,\n      ...json,\n      expanded: true,\n      isMetadataLoading: false };\n\n    dispatch(mergeTable(newTable)); // Merge table to tables in state\n    return newTable;\n  }).\n  catch(() =>\n  Promise.all([\n  dispatch(\n  mergeTable({\n    ...table,\n    isMetadataLoading: false })),\n\n\n  dispatch(\n  addDangerToast(t('An error occurred while fetching table metadata')))]));\n\n\n\n}\n\nfunction getTableExtendedMetadata(table, query, dispatch) {\n  return SupersetClient.get({\n    endpoint: encodeURI(\n    `/api/v1/database/${query.dbId}/table_extra/` +\n    `${encodeURIComponent(table.name)}/${encodeURIComponent(\n    table.schema)\n    }/`) }).\n\n\n  then((_ref12) => {let { json } = _ref12;\n    dispatch(\n    mergeTable({ ...table, ...json, isExtraMetadataLoading: false }));\n\n    return json;\n  }).\n  catch(() =>\n  Promise.all([\n  dispatch(mergeTable({ ...table, isExtraMetadataLoading: false })),\n  dispatch(\n  addDangerToast(t('An error occurred while fetching table metadata')))]));\n\n\n\n}\n\nexport function addTable(queryEditor, database, tableName, schemaName) {\n  return function (dispatch, getState) {\n    const query = getUpToDateQuery(getState(), queryEditor, queryEditor.id);\n    const table = {\n      dbId: query.dbId,\n      queryEditorId: query.id,\n      schema: schemaName,\n      name: tableName };\n\n    dispatch(\n    mergeTable(\n    {\n      ...table,\n      isMetadataLoading: true,\n      isExtraMetadataLoading: true,\n      expanded: true },\n\n    null,\n    true));\n\n\n\n    return Promise.all([\n    getTableMetadata(table, query, dispatch),\n    getTableExtendedMetadata(table, query, dispatch)]).\n    then((_ref13) => {let [newTable, json] = _ref13;\n      const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n      SupersetClient.post({\n        endpoint: encodeURI('/tableschemaview/'),\n        postPayload: { table: { ...newTable, ...json } } }) :\n\n      Promise.resolve({ json: { id: shortid.generate() } });\n\n      if (!database.disable_data_preview && database.id === query.dbId) {\n        const dataPreviewQuery = {\n          id: shortid.generate(),\n          dbId: query.dbId,\n          sql: newTable.selectStar,\n          tableName: table.name,\n          sqlEditorId: null,\n          tab: '',\n          runAsync: database.allow_run_async,\n          ctas: false,\n          isDataPreview: true };\n\n        Promise.all([\n        dispatch(\n        mergeTable(\n        {\n          ...newTable,\n          dataPreviewQueryId: dataPreviewQuery.id },\n\n        dataPreviewQuery)),\n\n\n        dispatch(runQuery(dataPreviewQuery))]);\n\n      }\n\n      return sync.\n      then((_ref14) => {let { json: resultJson } = _ref14;return (\n          dispatch(mergeTable({ ...table, id: resultJson.id })));}).\n\n      catch(() =>\n      dispatch(\n      addDangerToast(\n      t(\n      'An error occurred while fetching table metadata. ' +\n      'Please contact your administrator.'))));\n\n\n\n\n    });\n  };\n}\n\nexport function changeDataPreviewId(oldQueryId, newQuery) {\n  return { type: CHANGE_DATA_PREVIEW_ID, oldQueryId, newQuery };\n}\n\nexport function reFetchQueryResults(query) {\n  return function (dispatch) {\n    const newQuery = {\n      id: shortid.generate(),\n      dbId: query.dbId,\n      sql: query.sql,\n      tableName: query.tableName,\n      sqlEditorId: null,\n      tab: '',\n      runAsync: false,\n      ctas: false,\n      queryLimit: query.queryLimit,\n      isDataPreview: query.isDataPreview };\n\n    dispatch(runQuery(newQuery));\n    dispatch(changeDataPreviewId(query.id, newQuery));\n  };\n}\n\nexport function expandTable(table) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.post({\n      endpoint: encodeURI(`/tableschemaview/${table.id}/expanded`),\n      postPayload: { expanded: true } }) :\n\n    Promise.resolve();\n\n    return sync.\n    then(() => dispatch({ type: EXPAND_TABLE, table })).\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while expanding the table schema. ' +\n    'Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function collapseTable(table) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.post({\n      endpoint: encodeURI(`/tableschemaview/${table.id}/expanded`),\n      postPayload: { expanded: false } }) :\n\n    Promise.resolve();\n\n    return sync.\n    then(() => dispatch({ type: COLLAPSE_TABLE, table })).\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while collapsing the table schema. ' +\n    'Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function removeTables(tables) {\n  return function (dispatch) {var _tables$filter;\n    const tablesToRemove = (_tables$filter = tables == null ? void 0 : tables.filter(Boolean)) != null ? _tables$filter : [];\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    Promise.all(\n    tablesToRemove.map((table) =>\n    SupersetClient.delete({\n      endpoint: encodeURI(`/tableschemaview/${table.id}`) }))) :\n\n\n\n    Promise.resolve();\n\n    return sync.\n    then(() => dispatch({ type: REMOVE_TABLES, tables: tablesToRemove })).\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while removing the table schema. ' +\n    'Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function refreshQueries(alteredQueries) {\n  return { type: REFRESH_QUERIES, alteredQueries };\n}\n\nexport function setUserOffline(offline) {\n  return { type: SET_USER_OFFLINE, offline };\n}\n\nexport function persistEditorHeight(queryEditor, northPercent, southPercent) {\n  return {\n    type: QUERY_EDITOR_PERSIST_HEIGHT,\n    queryEditor,\n    northPercent,\n    southPercent };\n\n}\n\nexport function popStoredQuery(urlId) {\n  return function (dispatch) {\n    return SupersetClient.get({ endpoint: `/kv/${urlId}` }).\n    then((_ref15) => {let { json } = _ref15;return (\n        dispatch(\n        addQueryEditor({\n          name: json.name ? json.name : t('Shared query'),\n          dbId: json.dbId ? parseInt(json.dbId, 10) : null,\n          schema: json.schema ? json.schema : null,\n          autorun: json.autorun ? json.autorun : false,\n          sql: json.sql ? json.sql : 'SELECT ...',\n          templateParams: json.templateParams })));}).\n\n\n\n    catch(() => dispatch(addDangerToast(ERR_MSG_CANT_LOAD_QUERY)));\n  };\n}\nexport function popSavedQuery(saveQueryId) {\n  return function (dispatch) {\n    return SupersetClient.get({\n      endpoint: `/api/v1/saved_query/${saveQueryId}` }).\n\n    then((_ref16) => {var _json$result, _json$result$database;let { json } = _ref16;\n      const queryEditorProps = {\n        ...convertQueryToClient(json.result),\n        dbId: (_json$result = json.result) == null ? void 0 : (_json$result$database = _json$result.database) == null ? void 0 : _json$result$database.id,\n        loaded: true,\n        autorun: false };\n\n      return dispatch(addQueryEditor(queryEditorProps));\n    }).\n    catch(() => dispatch(addDangerToast(ERR_MSG_CANT_LOAD_QUERY)));\n  };\n}\nexport function popQuery(queryId) {\n  return function (dispatch) {\n    return SupersetClient.get({\n      endpoint: `/api/v1/query/${queryId}` }).\n\n    then((_ref17) => {let { json } = _ref17;\n      const queryData = json.result;\n      const queryEditorProps = {\n        dbId: queryData.database.id,\n        schema: queryData.schema,\n        sql: queryData.sql,\n        name: t('Copy of %s', queryData.tab_name),\n        autorun: false };\n\n      return dispatch(addQueryEditor(queryEditorProps));\n    }).\n    catch(() => dispatch(addDangerToast(ERR_MSG_CANT_LOAD_QUERY)));\n  };\n}\nexport function popDatasourceQuery(datasourceKey, sql) {\n  return function (dispatch) {\n    const QUERY_TEXT = t('Query');\n    const datasetId = datasourceKey.split('__')[0];\n    return SupersetClient.get({\n      endpoint: `/api/v1/dataset/${datasetId}?q=(keys:!(none))` }).\n\n    then((_ref18) => {let { json } = _ref18;return (\n        dispatch(\n        addQueryEditor({\n          name: `${QUERY_TEXT} ${json.result.name}`,\n          dbId: json.result.database.id,\n          schema: json.result.schema,\n          autorun: sql !== undefined,\n          sql: sql || json.result.select_star })));}).\n\n\n\n    catch(() =>\n    dispatch(addDangerToast(t(\"The datasource couldn't be loaded\"))));\n\n  };\n}\nexport function createDatasourceStarted() {\n  return { type: CREATE_DATASOURCE_STARTED };\n}\nexport function createDatasourceSuccess(data) {\n  const datasource = `${data.table_id}__table`;\n  return { type: CREATE_DATASOURCE_SUCCESS, datasource };\n}\nexport function createDatasourceFailed(err) {\n  return { type: CREATE_DATASOURCE_FAILED, err };\n}\n\nexport function createDatasource(vizOptions) {\n  return (dispatch) => {\n    dispatch(createDatasourceStarted());\n    return SupersetClient.post({\n      endpoint: '/superset/sqllab_viz/',\n      postPayload: { data: vizOptions } }).\n\n    then((_ref19) => {let { json } = _ref19;\n      dispatch(createDatasourceSuccess(json));\n\n      return Promise.resolve(json);\n    }).\n    catch((error) => {\n      getClientErrorObject(error).then((e) => {\n        dispatch(addDangerToast(e.error));\n      });\n      dispatch(\n      createDatasourceFailed(\n      t('An error occurred while creating the data source')));\n\n\n\n      return Promise.reject();\n    });\n  };\n}\n\nexport function createCtasDatasource(vizOptions) {\n  return (dispatch) => {\n    dispatch(createDatasourceStarted());\n    return SupersetClient.post({\n      endpoint: '/api/v1/dataset/get_or_create/',\n      jsonPayload: vizOptions }).\n\n    then((_ref20) => {let { json } = _ref20;\n      dispatch(createDatasourceSuccess(json.result));\n\n      return json.result;\n    }).\n    catch(() => {\n      const errorMsg = t('An error occurred while creating the data source');\n      dispatch(createDatasourceFailed(errorMsg));\n      return Promise.reject(new Error(errorMsg));\n    });\n  };\n}\n\nexport function queryEditorSetFunctionNames(queryEditor, dbId) {\n  return function (dispatch) {\n    return SupersetClient.get({\n      endpoint: encodeURI(`/api/v1/database/${dbId}/function_names/`) }).\n\n    then((_ref21) => {let { json } = _ref21;return (\n        dispatch({\n          type: QUERY_EDITOR_SET_FUNCTION_NAMES,\n          queryEditor,\n          functionNames: json.function_names }));}).\n\n\n    catch((err) => {\n      if (err.status === 404) {\n        // for databases that have been deleted, just reset the function names\n        dispatch({\n          type: QUERY_EDITOR_SET_FUNCTION_NAMES,\n          queryEditor,\n          functionNames: [] });\n\n      } else {\n        dispatch(\n        addDangerToast(\n        t('An error occurred while fetching function names.')));\n\n\n      }\n    });\n  };\n}","map":{"version":3,"names":["shortid","rison","FeatureFlag","SupersetClient","t","invert","mapKeys","isFeatureEnabled","now","addDangerToast","addDangerToastAction","addInfoToast","addInfoToastAction","addSuccessToast","addSuccessToastAction","addWarningToast","addWarningToastAction","getClientErrorObject","COMMON_ERR_MESSAGES","LOG_ACTIONS_SQLLAB_FETCH_FAILED_QUERY","logEvent","newQueryTabName","RESET_STATE","ADD_QUERY_EDITOR","UPDATE_QUERY_EDITOR","QUERY_EDITOR_SAVED","CLONE_QUERY_TO_NEW_TAB","REMOVE_QUERY_EDITOR","MERGE_TABLE","REMOVE_TABLES","END_QUERY","REMOVE_QUERY","EXPAND_TABLE","COLLAPSE_TABLE","QUERY_EDITOR_SETDB","QUERY_EDITOR_SET_SCHEMA","QUERY_EDITOR_SET_TITLE","QUERY_EDITOR_SET_AUTORUN","QUERY_EDITOR_SET_SQL","QUERY_EDITOR_SET_QUERY_LIMIT","QUERY_EDITOR_SET_TEMPLATE_PARAMS","QUERY_EDITOR_SET_SELECTED_TEXT","QUERY_EDITOR_SET_FUNCTION_NAMES","QUERY_EDITOR_PERSIST_HEIGHT","QUERY_EDITOR_TOGGLE_LEFT_BAR","MIGRATE_QUERY_EDITOR","MIGRATE_TAB_HISTORY","MIGRATE_TABLE","MIGRATE_QUERY","SET_DATABASES","SET_ACTIVE_QUERY_EDITOR","LOAD_QUERY_EDITOR","SET_TABLES","SET_ACTIVE_SOUTHPANE_TAB","REFRESH_QUERIES","SET_USER_OFFLINE","RUN_QUERY","START_QUERY","STOP_QUERY","REQUEST_QUERY_RESULTS","QUERY_SUCCESS","QUERY_FAILED","CLEAR_INACTIVE_QUERIES","CLEAR_QUERY_RESULTS","REMOVE_DATA_PREVIEW","CHANGE_DATA_PREVIEW_ID","START_QUERY_VALIDATION","QUERY_VALIDATION_RETURNED","QUERY_VALIDATION_FAILED","COST_ESTIMATE_STARTED","COST_ESTIMATE_RETURNED","COST_ESTIMATE_FAILED","CREATE_DATASOURCE_STARTED","CREATE_DATASOURCE_SUCCESS","CREATE_DATASOURCE_FAILED","CtasEnum","TABLE","VIEW","ERR_MSG_CANT_LOAD_QUERY","queryClientMapping","id","db_id","label","template_parameters","queryServerMapping","fieldConverter","mapping","obj","value","key","convertQueryToServer","convertQueryToClient","getUpToDateQuery","rootState","queryEditor","sqlLab","unsavedQueryEditor","resetState","type","startQueryValidation","query","Object","assign","generate","queryValidationReturned","results","queryValidationFailed","message","error","updateQueryEditor","alterations","scheduleQuery","dispatch","post","endpoint","postPayload","stringify","then","catch","estimateQueryCost","getState","dbId","schema","sql","selectedText","templateParams","requestSql","database_id","template_params","JSON","parse","Promise","all","body","headers","json","response","statusText","clearInactiveQueries","startQuery","progress","startDttm","state","runAsync","cached","querySuccess","sqlEditorId","sync","isDataPreview","SQLLAB_BACKEND_PERSISTENCE","put","encodeURI","latest_query_id","resolve","queryFailed","msg","link","errors","eventData","has_err","start_offset","ts","Date","getTime","forEach","error_type","errorType","extra","messages","issue_codes","map","error_details","stopQuery","clearQueryResults","removeDataPreview","table","requestQueryResults","fetchQueryResults","displayLimit","queryParams","encode","resultsKey","rows","get","parseMethod","runQuery","client_id","sql_editor_id","tab","tmp_table_name","tempTable","select_as_cta","ctas","ctas_method","queryLimit","expand_data","search","window","location","SESSION_TIMED_OUT","runQueryFromSqlEditor","database","defaultQueryLimit","ctasMethod","qe","name","allow_run_async","updateTabState","reRunQuery","validateQuery","result","postStopQuery","setDatabases","databases","migrateTable","queryEditorId","newTable","oldTable","migrateQuery","queryId","migrateQueryEditorFromLocalStorage","tables","queries","newQueryEditor","toString","oldQueryEditor","oldId","newId","addQueryEditor","addNewQueryEditor","queryEditors","tabHistory","defaultDbId","common","activeQueryEditor","find","length","dbIds","values","firstDbId","Math","min","undefined","autorun","warning","conf","DEFAULT_SQLLAB_LIMIT","cloneQueryToNewTab","sourceQueryEditor","maxRow","setActiveQueryEditor","status","loadQueryEditor","setTables","tableSchemas","filter","tableSchema","description","columns","selectStar","primaryKey","foreignKeys","indexes","dataPreviewQueryId","tab_state_id","expanded","isMetadataLoading","isExtraMetadataLoading","switchQueryEditor","loaded","loadedQueryEditor","latestQueryId","latest_query","query_limit","remoteId","saved_query","validationResult","completed","hideLeftBar","hide_left_bar","table_schemas","setActiveSouthPaneTab","tabId","toggleLeftBar","removeQueryEditor","delete","removeAllOtherQueryEditors","otherQueryEditor","removeQuery","queryEditorSetDb","queryEditorSetSchema","queryEditorSetAutorun","queryEditorSetTitle","saveQuery","clientId","payload","jsonPayload","savedQuery","addSavedQueryToTabState","saved_query_id","updateSavedQuery","e","console","queryEditorSetSql","queryEditorSetAndSaveSql","targetQueryEditor","queryEditorSetQueryLimit","queryEditorSetTemplateParams","queryEditorSetSelectedText","mergeTable","prepend","getTableMetadata","encodeURIComponent","getTableExtendedMetadata","addTable","tableName","schemaName","disable_data_preview","dataPreviewQuery","resultJson","changeDataPreviewId","oldQueryId","newQuery","reFetchQueryResults","expandTable","collapseTable","removeTables","tablesToRemove","Boolean","refreshQueries","alteredQueries","setUserOffline","offline","persistEditorHeight","northPercent","southPercent","popStoredQuery","urlId","parseInt","popSavedQuery","saveQueryId","queryEditorProps","popQuery","queryData","tab_name","popDatasourceQuery","datasourceKey","QUERY_TEXT","datasetId","split","select_star","createDatasourceStarted","createDatasourceSuccess","data","datasource","table_id","createDatasourceFailed","err","createDatasource","vizOptions","reject","createCtasDatasource","errorMsg","Error","queryEditorSetFunctionNames","functionNames","function_names"],"sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/SqlLab/actions/sqlLab.js"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport shortid from 'shortid';\nimport rison from 'rison';\nimport { FeatureFlag, SupersetClient, t } from '@superset-ui/core';\nimport invert from 'lodash/invert';\nimport mapKeys from 'lodash/mapKeys';\nimport { isFeatureEnabled } from 'src/featureFlags';\n\nimport { now } from 'src/utils/dates';\nimport {\n  addDangerToast as addDangerToastAction,\n  addInfoToast as addInfoToastAction,\n  addSuccessToast as addSuccessToastAction,\n  addWarningToast as addWarningToastAction,\n} from 'src/components/MessageToasts/actions';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport COMMON_ERR_MESSAGES from 'src/utils/errorMessages';\nimport { LOG_ACTIONS_SQLLAB_FETCH_FAILED_QUERY } from 'src/logger/LogUtils';\nimport { logEvent } from 'src/logger/actions';\nimport { newQueryTabName } from '../utils/newQueryTabName';\n\nexport const RESET_STATE = 'RESET_STATE';\nexport const ADD_QUERY_EDITOR = 'ADD_QUERY_EDITOR';\nexport const UPDATE_QUERY_EDITOR = 'UPDATE_QUERY_EDITOR';\nexport const QUERY_EDITOR_SAVED = 'QUERY_EDITOR_SAVED';\nexport const CLONE_QUERY_TO_NEW_TAB = 'CLONE_QUERY_TO_NEW_TAB';\nexport const REMOVE_QUERY_EDITOR = 'REMOVE_QUERY_EDITOR';\nexport const MERGE_TABLE = 'MERGE_TABLE';\nexport const REMOVE_TABLES = 'REMOVE_TABLES';\nexport const END_QUERY = 'END_QUERY';\nexport const REMOVE_QUERY = 'REMOVE_QUERY';\nexport const EXPAND_TABLE = 'EXPAND_TABLE';\nexport const COLLAPSE_TABLE = 'COLLAPSE_TABLE';\nexport const QUERY_EDITOR_SETDB = 'QUERY_EDITOR_SETDB';\nexport const QUERY_EDITOR_SET_SCHEMA = 'QUERY_EDITOR_SET_SCHEMA';\nexport const QUERY_EDITOR_SET_TITLE = 'QUERY_EDITOR_SET_TITLE';\nexport const QUERY_EDITOR_SET_AUTORUN = 'QUERY_EDITOR_SET_AUTORUN';\nexport const QUERY_EDITOR_SET_SQL = 'QUERY_EDITOR_SET_SQL';\nexport const QUERY_EDITOR_SET_QUERY_LIMIT = 'QUERY_EDITOR_SET_QUERY_LIMIT';\nexport const QUERY_EDITOR_SET_TEMPLATE_PARAMS =\n  'QUERY_EDITOR_SET_TEMPLATE_PARAMS';\nexport const QUERY_EDITOR_SET_SELECTED_TEXT = 'QUERY_EDITOR_SET_SELECTED_TEXT';\nexport const QUERY_EDITOR_SET_FUNCTION_NAMES =\n  'QUERY_EDITOR_SET_FUNCTION_NAMES';\nexport const QUERY_EDITOR_PERSIST_HEIGHT = 'QUERY_EDITOR_PERSIST_HEIGHT';\nexport const QUERY_EDITOR_TOGGLE_LEFT_BAR = 'QUERY_EDITOR_TOGGLE_LEFT_BAR';\nexport const MIGRATE_QUERY_EDITOR = 'MIGRATE_QUERY_EDITOR';\nexport const MIGRATE_TAB_HISTORY = 'MIGRATE_TAB_HISTORY';\nexport const MIGRATE_TABLE = 'MIGRATE_TABLE';\nexport const MIGRATE_QUERY = 'MIGRATE_QUERY';\n\nexport const SET_DATABASES = 'SET_DATABASES';\nexport const SET_ACTIVE_QUERY_EDITOR = 'SET_ACTIVE_QUERY_EDITOR';\nexport const LOAD_QUERY_EDITOR = 'LOAD_QUERY_EDITOR';\nexport const SET_TABLES = 'SET_TABLES';\nexport const SET_ACTIVE_SOUTHPANE_TAB = 'SET_ACTIVE_SOUTHPANE_TAB';\nexport const REFRESH_QUERIES = 'REFRESH_QUERIES';\nexport const SET_USER_OFFLINE = 'SET_USER_OFFLINE';\nexport const RUN_QUERY = 'RUN_QUERY';\nexport const START_QUERY = 'START_QUERY';\nexport const STOP_QUERY = 'STOP_QUERY';\nexport const REQUEST_QUERY_RESULTS = 'REQUEST_QUERY_RESULTS';\nexport const QUERY_SUCCESS = 'QUERY_SUCCESS';\nexport const QUERY_FAILED = 'QUERY_FAILED';\nexport const CLEAR_INACTIVE_QUERIES = 'CLEAR_INACTIVE_QUERIES';\nexport const CLEAR_QUERY_RESULTS = 'CLEAR_QUERY_RESULTS';\nexport const REMOVE_DATA_PREVIEW = 'REMOVE_DATA_PREVIEW';\nexport const CHANGE_DATA_PREVIEW_ID = 'CHANGE_DATA_PREVIEW_ID';\n\nexport const START_QUERY_VALIDATION = 'START_QUERY_VALIDATION';\nexport const QUERY_VALIDATION_RETURNED = 'QUERY_VALIDATION_RETURNED';\nexport const QUERY_VALIDATION_FAILED = 'QUERY_VALIDATION_FAILED';\nexport const COST_ESTIMATE_STARTED = 'COST_ESTIMATE_STARTED';\nexport const COST_ESTIMATE_RETURNED = 'COST_ESTIMATE_RETURNED';\nexport const COST_ESTIMATE_FAILED = 'COST_ESTIMATE_FAILED';\n\nexport const CREATE_DATASOURCE_STARTED = 'CREATE_DATASOURCE_STARTED';\nexport const CREATE_DATASOURCE_SUCCESS = 'CREATE_DATASOURCE_SUCCESS';\nexport const CREATE_DATASOURCE_FAILED = 'CREATE_DATASOURCE_FAILED';\n\nexport const addInfoToast = addInfoToastAction;\nexport const addSuccessToast = addSuccessToastAction;\nexport const addDangerToast = addDangerToastAction;\nexport const addWarningToast = addWarningToastAction;\n\nexport const CtasEnum = {\n  TABLE: 'TABLE',\n  VIEW: 'VIEW',\n};\nconst ERR_MSG_CANT_LOAD_QUERY = t(\"The query couldn't be loaded\");\n\n// a map of SavedQuery field names to the different names used client-side,\n// because for now making the names consistent is too complicated\n// so it might as well only happen in one place\nconst queryClientMapping = {\n  id: 'remoteId',\n  db_id: 'dbId',\n  label: 'name',\n  template_parameters: 'templateParams',\n};\nconst queryServerMapping = invert(queryClientMapping);\n\n// uses a mapping like those above to convert object key names to another style\nconst fieldConverter = mapping => obj =>\n  mapKeys(obj, (value, key) => (key in mapping ? mapping[key] : key));\n\nexport const convertQueryToServer = fieldConverter(queryServerMapping);\nexport const convertQueryToClient = fieldConverter(queryClientMapping);\n\nexport function getUpToDateQuery(rootState, queryEditor, key) {\n  const {\n    sqlLab: { unsavedQueryEditor },\n  } = rootState;\n  const id = key ?? queryEditor.id;\n  return {\n    ...queryEditor,\n    ...(id === unsavedQueryEditor.id && unsavedQueryEditor),\n  };\n}\n\nexport function resetState() {\n  return { type: RESET_STATE };\n}\n\nexport function startQueryValidation(query) {\n  Object.assign(query, {\n    id: query.id ? query.id : shortid.generate(),\n  });\n  return { type: START_QUERY_VALIDATION, query };\n}\n\nexport function queryValidationReturned(query, results) {\n  return { type: QUERY_VALIDATION_RETURNED, query, results };\n}\n\nexport function queryValidationFailed(query, message, error) {\n  return { type: QUERY_VALIDATION_FAILED, query, message, error };\n}\n\nexport function updateQueryEditor(alterations) {\n  return { type: UPDATE_QUERY_EDITOR, alterations };\n}\n\nexport function scheduleQuery(query) {\n  return dispatch =>\n    SupersetClient.post({\n      endpoint: '/savedqueryviewapi/api/create',\n      postPayload: query,\n      stringify: false,\n    })\n      .then(() =>\n        dispatch(\n          addSuccessToast(\n            t(\n              'Your query has been scheduled. To see details of your query, navigate to Saved queries',\n            ),\n          ),\n        ),\n      )\n      .catch(() =>\n        dispatch(addDangerToast(t('Your query could not be scheduled'))),\n      );\n}\n\nexport function estimateQueryCost(queryEditor) {\n  return (dispatch, getState) => {\n    const { dbId, schema, sql, selectedText, templateParams } =\n      getUpToDateQuery(getState(), queryEditor);\n    const requestSql = selectedText || sql;\n\n    const postPayload = {\n      database_id: dbId,\n      schema,\n      sql: requestSql,\n      template_params: JSON.parse(templateParams || '{}'),\n    };\n\n    return Promise.all([\n      dispatch({ type: COST_ESTIMATE_STARTED, query: queryEditor }),\n      SupersetClient.post({\n        endpoint: '/api/v1/sqllab/estimate/',\n        body: JSON.stringify(postPayload),\n        headers: { 'Content-Type': 'application/json' },\n      })\n        .then(({ json }) =>\n          dispatch({ type: COST_ESTIMATE_RETURNED, query: queryEditor, json }),\n        )\n        .catch(response =>\n          getClientErrorObject(response).then(error => {\n            const message =\n              error.error ||\n              error.statusText ||\n              t('Failed at retrieving results');\n            return dispatch({\n              type: COST_ESTIMATE_FAILED,\n              query: queryEditor,\n              error: message,\n            });\n          }),\n        ),\n    ]);\n  };\n}\n\nexport function clearInactiveQueries() {\n  return { type: CLEAR_INACTIVE_QUERIES };\n}\n\nexport function startQuery(query) {\n  Object.assign(query, {\n    id: query.id ? query.id : shortid.generate(),\n    progress: 0,\n    startDttm: now(),\n    state: query.runAsync ? 'pending' : 'running',\n    cached: false,\n  });\n  return { type: START_QUERY, query };\n}\n\nexport function querySuccess(query, results) {\n  return function (dispatch) {\n    const sqlEditorId = results?.query?.sqlEditorId;\n    const sync =\n      sqlEditorId &&\n      !query.isDataPreview &&\n      isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n        ? SupersetClient.put({\n            endpoint: encodeURI(`/tabstateview/${sqlEditorId}`),\n            postPayload: { latest_query_id: query.id },\n          })\n        : Promise.resolve();\n\n    return sync\n      .then(() => dispatch({ type: QUERY_SUCCESS, query, results }))\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while storing the latest query id in the backend. ' +\n                'Please contact your administrator if this problem persists.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function queryFailed(query, msg, link, errors) {\n  return function (dispatch) {\n    const sync =\n      !query.isDataPreview &&\n      isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n        ? SupersetClient.put({\n            endpoint: encodeURI(`/tabstateview/${query.sqlEditorId}`),\n            postPayload: { latest_query_id: query.id },\n          })\n        : Promise.resolve();\n\n    const eventData = {\n      has_err: true,\n      start_offset: query.startDttm,\n      ts: new Date().getTime(),\n    };\n    errors?.forEach(({ error_type: errorType, extra }) => {\n      const messages = extra?.issue_codes?.map(({ message }) => message) || [\n        errorType,\n      ];\n      messages.forEach(message => {\n        dispatch(\n          logEvent(LOG_ACTIONS_SQLLAB_FETCH_FAILED_QUERY, {\n            ...eventData,\n            error_type: errorType,\n            error_details: message,\n          }),\n        );\n      });\n    });\n\n    return (\n      sync\n        .catch(() =>\n          dispatch(\n            addDangerToast(\n              t(\n                'An error occurred while storing the latest query id in the backend. ' +\n                  'Please contact your administrator if this problem persists.',\n              ),\n            ),\n          ),\n        )\n        // We should always show the error message, even if we couldn't sync the\n        // state to the backend\n        .then(() => dispatch({ type: QUERY_FAILED, query, msg, link, errors }))\n    );\n  };\n}\n\nexport function stopQuery(query) {\n  return { type: STOP_QUERY, query };\n}\n\nexport function clearQueryResults(query) {\n  return { type: CLEAR_QUERY_RESULTS, query };\n}\n\nexport function removeDataPreview(table) {\n  return { type: REMOVE_DATA_PREVIEW, table };\n}\n\nexport function requestQueryResults(query) {\n  return { type: REQUEST_QUERY_RESULTS, query };\n}\n\nexport function fetchQueryResults(query, displayLimit) {\n  return function (dispatch) {\n    dispatch(requestQueryResults(query));\n\n    const queryParams = rison.encode({\n      key: query.resultsKey,\n      rows: displayLimit || null,\n    });\n\n    return SupersetClient.get({\n      endpoint: `/api/v1/sqllab/results/?q=${queryParams}`,\n      parseMethod: 'json-bigint',\n    })\n      .then(({ json }) => dispatch(querySuccess(query, json)))\n      .catch(response =>\n        getClientErrorObject(response).then(error => {\n          const message =\n            error.error ||\n            error.statusText ||\n            t('Failed at retrieving results');\n\n          return dispatch(\n            queryFailed(query, message, error.link, error.errors),\n          );\n        }),\n      );\n  };\n}\n\nexport function runQuery(query) {\n  return function (dispatch) {\n    dispatch(startQuery(query));\n    const postPayload = {\n      client_id: query.id,\n      database_id: query.dbId,\n      json: true,\n      runAsync: query.runAsync,\n      schema: query.schema,\n      sql: query.sql,\n      sql_editor_id: query.sqlEditorId,\n      tab: query.tab,\n      tmp_table_name: query.tempTable,\n      select_as_cta: query.ctas,\n      ctas_method: query.ctas_method,\n      templateParams: query.templateParams,\n      queryLimit: query.queryLimit,\n      expand_data: true,\n    };\n\n    const search = window.location.search || '';\n    return SupersetClient.post({\n      endpoint: `/api/v1/sqllab/execute/${search}`,\n      body: JSON.stringify(postPayload),\n      headers: { 'Content-Type': 'application/json' },\n      parseMethod: 'json-bigint',\n    })\n      .then(({ json }) => {\n        if (!query.runAsync) {\n          dispatch(querySuccess(query, json));\n        }\n      })\n      .catch(response =>\n        getClientErrorObject(response).then(error => {\n          let message =\n            error.error ||\n            error.message ||\n            error.statusText ||\n            t('Unknown error');\n          if (message.includes('CSRF token')) {\n            message = t(COMMON_ERR_MESSAGES.SESSION_TIMED_OUT);\n          }\n          dispatch(queryFailed(query, message, error.link, error.errors));\n        }),\n      );\n  };\n}\n\nexport function runQueryFromSqlEditor(\n  database,\n  queryEditor,\n  defaultQueryLimit,\n  tempTable,\n  ctas,\n  ctasMethod,\n) {\n  return function (dispatch, getState) {\n    const qe = getUpToDateQuery(getState(), queryEditor, queryEditor.id);\n    const query = {\n      dbId: qe.dbId,\n      sql: qe.selectedText || qe.sql,\n      sqlEditorId: qe.id,\n      tab: qe.name,\n      schema: qe.schema,\n      tempTable,\n      templateParams: qe.templateParams,\n      queryLimit: qe.queryLimit || defaultQueryLimit,\n      runAsync: database ? database.allow_run_async : false,\n      ctas,\n      ctas_method: ctasMethod,\n      updateTabState: !qe.selectedText,\n    };\n    dispatch(runQuery(query));\n  };\n}\n\nexport function reRunQuery(query) {\n  // run Query with a new id\n  return function (dispatch) {\n    dispatch(runQuery({ ...query, id: shortid.generate() }));\n  };\n}\n\nexport function validateQuery(queryEditor, sql) {\n  return function (dispatch, getState) {\n    const {\n      sqlLab: { unsavedQueryEditor },\n    } = getState();\n    const qe = {\n      ...queryEditor,\n      ...(queryEditor.id === unsavedQueryEditor.id && unsavedQueryEditor),\n    };\n\n    const query = {\n      dbId: qe.dbId,\n      sql,\n      sqlEditorId: qe.id,\n      schema: qe.schema,\n      templateParams: qe.templateParams,\n    };\n    dispatch(startQueryValidation(query));\n\n    const postPayload = {\n      schema: query.schema,\n      sql: query.sql,\n      template_params: query.templateParams,\n    };\n\n    return SupersetClient.post({\n      endpoint: `/api/v1/database/${query.dbId}/validate_sql/`,\n      body: JSON.stringify(postPayload),\n      headers: { 'Content-Type': 'application/json' },\n    })\n      .then(({ json }) => dispatch(queryValidationReturned(query, json.result)))\n      .catch(response =>\n        getClientErrorObject(response.result).then(error => {\n          let message = error.error || error.statusText || t('Unknown error');\n          if (message.includes('CSRF token')) {\n            message = t(COMMON_ERR_MESSAGES.SESSION_TIMED_OUT);\n          }\n          dispatch(queryValidationFailed(query, message, error));\n        }),\n      );\n  };\n}\n\nexport function postStopQuery(query) {\n  return function (dispatch) {\n    return SupersetClient.post({\n      endpoint: '/api/v1/query/stop',\n      body: JSON.stringify({ client_id: query.id }),\n      headers: { 'Content-Type': 'application/json' },\n    })\n      .then(() => dispatch(stopQuery(query)))\n      .then(() => dispatch(addSuccessToast(t('Query was stopped.'))))\n      .catch(() =>\n        dispatch(addDangerToast(t('Failed at stopping query. %s', query.id))),\n      );\n  };\n}\n\nexport function setDatabases(databases) {\n  return { type: SET_DATABASES, databases };\n}\n\nfunction migrateTable(table, queryEditorId, dispatch) {\n  return SupersetClient.post({\n    endpoint: encodeURI('/tableschemaview/'),\n    postPayload: { table: { ...table, queryEditorId } },\n  })\n    .then(({ json }) => {\n      const newTable = {\n        ...table,\n        id: json.id,\n        queryEditorId,\n      };\n      return dispatch({ type: MIGRATE_TABLE, oldTable: table, newTable });\n    })\n    .catch(() =>\n      dispatch(\n        addWarningToast(\n          t(\n            'Unable to migrate table schema state to backend. Superset will retry ' +\n              'later. Please contact your administrator if this problem persists.',\n          ),\n        ),\n      ),\n    );\n}\n\nfunction migrateQuery(queryId, queryEditorId, dispatch) {\n  return SupersetClient.post({\n    endpoint: encodeURI(`/tabstateview/${queryEditorId}/migrate_query`),\n    postPayload: { queryId },\n  })\n    .then(() => dispatch({ type: MIGRATE_QUERY, queryId, queryEditorId }))\n    .catch(() =>\n      dispatch(\n        addWarningToast(\n          t(\n            'Unable to migrate query state to backend. Superset will retry later. ' +\n              'Please contact your administrator if this problem persists.',\n          ),\n        ),\n      ),\n    );\n}\n\nexport function migrateQueryEditorFromLocalStorage(\n  queryEditor,\n  tables,\n  queries,\n) {\n  return function (dispatch) {\n    return SupersetClient.post({\n      endpoint: '/tabstateview/',\n      postPayload: { queryEditor },\n    })\n      .then(({ json }) => {\n        const newQueryEditor = {\n          ...queryEditor,\n          id: json.id.toString(),\n        };\n        dispatch({\n          type: MIGRATE_QUERY_EDITOR,\n          oldQueryEditor: queryEditor,\n          newQueryEditor,\n        });\n        dispatch({\n          type: MIGRATE_TAB_HISTORY,\n          oldId: queryEditor.id,\n          newId: newQueryEditor.id,\n        });\n        return Promise.all([\n          ...tables.map(table =>\n            migrateTable(table, newQueryEditor.id, dispatch),\n          ),\n          ...queries.map(query =>\n            migrateQuery(query.id, newQueryEditor.id, dispatch),\n          ),\n        ]);\n      })\n      .catch(() =>\n        dispatch(\n          addWarningToast(\n            t(\n              'Unable to migrate query editor state to backend. Superset will retry ' +\n                'later. Please contact your administrator if this problem persists.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function addQueryEditor(queryEditor) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.post({\n          endpoint: '/tabstateview/',\n          postPayload: { queryEditor },\n        })\n      : Promise.resolve({ json: { id: shortid.generate() } });\n\n    return sync\n      .then(({ json }) => {\n        const newQueryEditor = {\n          ...queryEditor,\n          id: json.id.toString(),\n        };\n        return dispatch({\n          type: ADD_QUERY_EDITOR,\n          queryEditor: newQueryEditor,\n        });\n      })\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'Unable to add a new tab to the backend. Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function addNewQueryEditor() {\n  return function (dispatch, getState) {\n    const {\n      sqlLab: {\n        queryEditors,\n        tabHistory,\n        unsavedQueryEditor,\n        defaultDbId,\n        databases,\n      },\n      common,\n    } = getState();\n    const activeQueryEditor = queryEditors.find(\n      qe => qe.id === tabHistory[tabHistory.length - 1],\n    );\n    const dbIds = Object.values(databases).map(database => database.id);\n    const firstDbId = dbIds.length > 0 ? Math.min(...dbIds) : undefined;\n    const { dbId, schema, queryLimit, autorun } = {\n      ...queryEditors[0],\n      ...activeQueryEditor,\n      ...(unsavedQueryEditor.id === activeQueryEditor?.id &&\n        unsavedQueryEditor),\n    };\n    const warning = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? ''\n      : t(\n          '-- Note: Unless you save your query, these tabs will NOT persist if you clear your cookies or change browsers.\\n\\n',\n        );\n\n    const name = newQueryTabName(queryEditors || []);\n\n    return dispatch(\n      addQueryEditor({\n        dbId: dbId || defaultDbId || firstDbId,\n        schema: schema ?? null,\n        autorun: autorun ?? false,\n        sql: `${warning}SELECT ...`,\n        queryLimit: queryLimit || common.conf.DEFAULT_SQLLAB_LIMIT,\n        name,\n      }),\n    );\n  };\n}\n\nexport function cloneQueryToNewTab(query, autorun) {\n  return function (dispatch, getState) {\n    const state = getState();\n    const { queryEditors, tabHistory } = state.sqlLab;\n    const sourceQueryEditor = queryEditors.find(\n      qe => qe.id === tabHistory[tabHistory.length - 1],\n    );\n    const queryEditor = {\n      name: t('Copy of %s', sourceQueryEditor.name),\n      dbId: query.dbId ? query.dbId : null,\n      schema: query.schema ? query.schema : null,\n      autorun,\n      sql: query.sql,\n      queryLimit: sourceQueryEditor.queryLimit,\n      maxRow: sourceQueryEditor.maxRow,\n      templateParams: sourceQueryEditor.templateParams,\n    };\n    return dispatch(addQueryEditor(queryEditor));\n  };\n}\n\nexport function setActiveQueryEditor(queryEditor) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.post({\n          endpoint: encodeURI(`/tabstateview/${queryEditor.id}/activate`),\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() => dispatch({ type: SET_ACTIVE_QUERY_EDITOR, queryEditor }))\n      .catch(response => {\n        if (response.status !== 404) {\n          return dispatch(\n            addDangerToast(\n              t(\n                'An error occurred while setting the active tab. Please contact ' +\n                  'your administrator.',\n              ),\n            ),\n          );\n        }\n        return dispatch({ type: REMOVE_QUERY_EDITOR, queryEditor });\n      });\n  };\n}\n\nexport function loadQueryEditor(queryEditor) {\n  return { type: LOAD_QUERY_EDITOR, queryEditor };\n}\n\nexport function setTables(tableSchemas) {\n  const tables = tableSchemas\n    .filter(tableSchema => tableSchema.description !== null)\n    .map(tableSchema => {\n      const {\n        columns,\n        selectStar,\n        primaryKey,\n        foreignKeys,\n        indexes,\n        dataPreviewQueryId,\n      } = tableSchema.description;\n      return {\n        dbId: tableSchema.database_id,\n        queryEditorId: tableSchema.tab_state_id.toString(),\n        schema: tableSchema.schema,\n        name: tableSchema.table,\n        expanded: tableSchema.expanded,\n        id: tableSchema.id,\n        dataPreviewQueryId,\n        columns,\n        selectStar,\n        primaryKey,\n        foreignKeys,\n        indexes,\n        isMetadataLoading: false,\n        isExtraMetadataLoading: false,\n      };\n    });\n  return { type: SET_TABLES, tables };\n}\n\nexport function switchQueryEditor(queryEditor, displayLimit) {\n  return function (dispatch) {\n    if (\n      isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) &&\n      queryEditor &&\n      !queryEditor.loaded\n    ) {\n      SupersetClient.get({\n        endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n      })\n        .then(({ json }) => {\n          const loadedQueryEditor = {\n            id: json.id.toString(),\n            loaded: true,\n            name: json.label,\n            sql: json.sql,\n            selectedText: null,\n            latestQueryId: json.latest_query?.id,\n            autorun: json.autorun,\n            dbId: json.database_id,\n            templateParams: json.template_params,\n            schema: json.schema,\n            queryLimit: json.query_limit,\n            remoteId: json.saved_query?.id,\n            validationResult: {\n              id: null,\n              errors: [],\n              completed: false,\n            },\n            hideLeftBar: json.hide_left_bar,\n          };\n          dispatch(loadQueryEditor(loadedQueryEditor));\n          dispatch(setTables(json.table_schemas || []));\n          dispatch(setActiveQueryEditor(loadedQueryEditor));\n          if (json.latest_query && json.latest_query.resultsKey) {\n            dispatch(fetchQueryResults(json.latest_query, displayLimit));\n          }\n        })\n        .catch(response => {\n          if (response.status !== 404) {\n            return dispatch(\n              addDangerToast(t('An error occurred while fetching tab state')),\n            );\n          }\n          return dispatch({ type: REMOVE_QUERY_EDITOR, queryEditor });\n        });\n    } else {\n      dispatch(setActiveQueryEditor(queryEditor));\n    }\n  };\n}\n\nexport function setActiveSouthPaneTab(tabId) {\n  return { type: SET_ACTIVE_SOUTHPANE_TAB, tabId };\n}\n\nexport function toggleLeftBar(queryEditor) {\n  const hideLeftBar = !queryEditor.hideLeftBar;\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.put({\n          endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n          postPayload: { hide_left_bar: hideLeftBar },\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() =>\n        dispatch({\n          type: QUERY_EDITOR_TOGGLE_LEFT_BAR,\n          queryEditor,\n          hideLeftBar,\n        }),\n      )\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while hiding the left bar. Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function removeQueryEditor(queryEditor) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.delete({\n          endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() => dispatch({ type: REMOVE_QUERY_EDITOR, queryEditor }))\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while removing tab. Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function removeAllOtherQueryEditors(queryEditor) {\n  return function (dispatch, getState) {\n    const { sqlLab } = getState();\n    sqlLab.queryEditors?.forEach(otherQueryEditor => {\n      if (otherQueryEditor.id !== queryEditor.id) {\n        dispatch(removeQueryEditor(otherQueryEditor));\n      }\n    });\n  };\n}\n\nexport function removeQuery(query) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.delete({\n          endpoint: encodeURI(\n            `/tabstateview/${query.sqlEditorId}/query/${query.id}`,\n          ),\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() => dispatch({ type: REMOVE_QUERY, query }))\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while removing query. Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function queryEditorSetDb(queryEditor, dbId) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.put({\n          endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n          postPayload: { database_id: dbId },\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() => dispatch({ type: QUERY_EDITOR_SETDB, queryEditor, dbId }))\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while setting the tab database ID. Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function queryEditorSetSchema(queryEditor, schema) {\n  return function (dispatch) {\n    const sync =\n      isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) &&\n      typeof queryEditor === 'object'\n        ? SupersetClient.put({\n            endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n            postPayload: { schema },\n          })\n        : Promise.resolve();\n\n    return sync\n      .then(() =>\n        dispatch({\n          type: QUERY_EDITOR_SET_SCHEMA,\n          queryEditor: queryEditor || {},\n          schema,\n        }),\n      )\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while setting the tab schema. Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function queryEditorSetAutorun(queryEditor, autorun) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.put({\n          endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n          postPayload: { autorun },\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() =>\n        dispatch({ type: QUERY_EDITOR_SET_AUTORUN, queryEditor, autorun }),\n      )\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while setting the tab autorun. Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function queryEditorSetTitle(queryEditor, name, id) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.put({\n          endpoint: encodeURI(`/tabstateview/${id}`),\n          postPayload: { label: name },\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() =>\n        dispatch({\n          type: QUERY_EDITOR_SET_TITLE,\n          queryEditor: { ...queryEditor, id },\n          name,\n        }),\n      )\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while setting the tab name. Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function saveQuery(query, clientId) {\n  const { id, ...payload } = convertQueryToServer(query);\n\n  return dispatch =>\n    SupersetClient.post({\n      endpoint: '/api/v1/saved_query/',\n      jsonPayload: convertQueryToServer(payload),\n    })\n      .then(result => {\n        const savedQuery = convertQueryToClient({\n          id: result.json.id,\n          ...result.json.result,\n        });\n        dispatch({\n          type: QUERY_EDITOR_SAVED,\n          query,\n          clientId,\n          result: savedQuery,\n        });\n        dispatch(queryEditorSetTitle(query, query.name, clientId));\n        return savedQuery;\n      })\n      .catch(() =>\n        dispatch(addDangerToast(t('Your query could not be saved'))),\n      );\n}\n\nexport const addSavedQueryToTabState =\n  (queryEditor, savedQuery) => dispatch => {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.put({\n          endpoint: `/tabstateview/${queryEditor.id}`,\n          postPayload: { saved_query_id: savedQuery.remoteId },\n        })\n      : Promise.resolve();\n\n    return sync\n      .catch(() => {\n        dispatch(addDangerToast(t('Your query was not properly saved')));\n      })\n      .then(() => {\n        dispatch(addSuccessToast(t('Your query was saved')));\n      });\n  };\n\nexport function updateSavedQuery(query, clientId) {\n  const { id, ...payload } = convertQueryToServer(query);\n\n  return dispatch =>\n    SupersetClient.put({\n      endpoint: `/api/v1/saved_query/${query.remoteId}`,\n      jsonPayload: convertQueryToServer(payload),\n    })\n      .then(() => {\n        dispatch(addSuccessToast(t('Your query was updated')));\n        dispatch(queryEditorSetTitle(query, query.name, clientId));\n      })\n      .catch(e => {\n        const message = t('Your query could not be updated');\n        // eslint-disable-next-line no-console\n        console.error(message, e);\n        dispatch(addDangerToast(message));\n      })\n      .then(() => dispatch(updateQueryEditor(query)));\n}\n\nexport function queryEditorSetSql(queryEditor, sql) {\n  return { type: QUERY_EDITOR_SET_SQL, queryEditor, sql };\n}\n\nexport function queryEditorSetAndSaveSql(targetQueryEditor, sql) {\n  return function (dispatch, getState) {\n    const queryEditor = getUpToDateQuery(getState(), targetQueryEditor);\n    // saved query and set tab state use this action\n    dispatch(queryEditorSetSql(queryEditor, sql));\n    if (isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)) {\n      return SupersetClient.put({\n        endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n        postPayload: { sql, latest_query_id: queryEditor.latestQueryId },\n      }).catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while storing your query in the backend. To ' +\n                'avoid losing your changes, please save your query using the ' +\n                '\"Save Query\" button.',\n            ),\n          ),\n        ),\n      );\n    }\n    return Promise.resolve();\n  };\n}\n\nexport function queryEditorSetQueryLimit(queryEditor, queryLimit) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.put({\n          endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n          postPayload: { query_limit: queryLimit },\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() =>\n        dispatch({\n          type: QUERY_EDITOR_SET_QUERY_LIMIT,\n          queryEditor,\n          queryLimit,\n        }),\n      )\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while setting the tab name. Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function queryEditorSetTemplateParams(queryEditor, templateParams) {\n  return function (dispatch) {\n    dispatch({\n      type: QUERY_EDITOR_SET_TEMPLATE_PARAMS,\n      queryEditor,\n      templateParams,\n    });\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.put({\n          endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n          postPayload: { template_params: templateParams },\n        })\n      : Promise.resolve();\n\n    return sync.catch(() =>\n      dispatch(\n        addDangerToast(\n          t(\n            'An error occurred while setting the tab template parameters. ' +\n              'Please contact your administrator.',\n          ),\n        ),\n      ),\n    );\n  };\n}\n\nexport function queryEditorSetSelectedText(queryEditor, sql) {\n  return { type: QUERY_EDITOR_SET_SELECTED_TEXT, queryEditor, sql };\n}\n\nexport function mergeTable(table, query, prepend) {\n  return { type: MERGE_TABLE, table, query, prepend };\n}\n\nfunction getTableMetadata(table, query, dispatch) {\n  return SupersetClient.get({\n    endpoint: encodeURI(\n      `/api/v1/database/${query.dbId}/table/${encodeURIComponent(\n        table.name,\n      )}/${encodeURIComponent(table.schema)}/`,\n    ),\n  })\n    .then(({ json }) => {\n      const newTable = {\n        ...table,\n        ...json,\n        expanded: true,\n        isMetadataLoading: false,\n      };\n      dispatch(mergeTable(newTable)); // Merge table to tables in state\n      return newTable;\n    })\n    .catch(() =>\n      Promise.all([\n        dispatch(\n          mergeTable({\n            ...table,\n            isMetadataLoading: false,\n          }),\n        ),\n        dispatch(\n          addDangerToast(t('An error occurred while fetching table metadata')),\n        ),\n      ]),\n    );\n}\n\nfunction getTableExtendedMetadata(table, query, dispatch) {\n  return SupersetClient.get({\n    endpoint: encodeURI(\n      `/api/v1/database/${query.dbId}/table_extra/` +\n        `${encodeURIComponent(table.name)}/${encodeURIComponent(\n          table.schema,\n        )}/`,\n    ),\n  })\n    .then(({ json }) => {\n      dispatch(\n        mergeTable({ ...table, ...json, isExtraMetadataLoading: false }),\n      );\n      return json;\n    })\n    .catch(() =>\n      Promise.all([\n        dispatch(mergeTable({ ...table, isExtraMetadataLoading: false })),\n        dispatch(\n          addDangerToast(t('An error occurred while fetching table metadata')),\n        ),\n      ]),\n    );\n}\n\nexport function addTable(queryEditor, database, tableName, schemaName) {\n  return function (dispatch, getState) {\n    const query = getUpToDateQuery(getState(), queryEditor, queryEditor.id);\n    const table = {\n      dbId: query.dbId,\n      queryEditorId: query.id,\n      schema: schemaName,\n      name: tableName,\n    };\n    dispatch(\n      mergeTable(\n        {\n          ...table,\n          isMetadataLoading: true,\n          isExtraMetadataLoading: true,\n          expanded: true,\n        },\n        null,\n        true,\n      ),\n    );\n\n    return Promise.all([\n      getTableMetadata(table, query, dispatch),\n      getTableExtendedMetadata(table, query, dispatch),\n    ]).then(([newTable, json]) => {\n      const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n        ? SupersetClient.post({\n            endpoint: encodeURI('/tableschemaview/'),\n            postPayload: { table: { ...newTable, ...json } },\n          })\n        : Promise.resolve({ json: { id: shortid.generate() } });\n\n      if (!database.disable_data_preview && database.id === query.dbId) {\n        const dataPreviewQuery = {\n          id: shortid.generate(),\n          dbId: query.dbId,\n          sql: newTable.selectStar,\n          tableName: table.name,\n          sqlEditorId: null,\n          tab: '',\n          runAsync: database.allow_run_async,\n          ctas: false,\n          isDataPreview: true,\n        };\n        Promise.all([\n          dispatch(\n            mergeTable(\n              {\n                ...newTable,\n                dataPreviewQueryId: dataPreviewQuery.id,\n              },\n              dataPreviewQuery,\n            ),\n          ),\n          dispatch(runQuery(dataPreviewQuery)),\n        ]);\n      }\n\n      return sync\n        .then(({ json: resultJson }) =>\n          dispatch(mergeTable({ ...table, id: resultJson.id })),\n        )\n        .catch(() =>\n          dispatch(\n            addDangerToast(\n              t(\n                'An error occurred while fetching table metadata. ' +\n                  'Please contact your administrator.',\n              ),\n            ),\n          ),\n        );\n    });\n  };\n}\n\nexport function changeDataPreviewId(oldQueryId, newQuery) {\n  return { type: CHANGE_DATA_PREVIEW_ID, oldQueryId, newQuery };\n}\n\nexport function reFetchQueryResults(query) {\n  return function (dispatch) {\n    const newQuery = {\n      id: shortid.generate(),\n      dbId: query.dbId,\n      sql: query.sql,\n      tableName: query.tableName,\n      sqlEditorId: null,\n      tab: '',\n      runAsync: false,\n      ctas: false,\n      queryLimit: query.queryLimit,\n      isDataPreview: query.isDataPreview,\n    };\n    dispatch(runQuery(newQuery));\n    dispatch(changeDataPreviewId(query.id, newQuery));\n  };\n}\n\nexport function expandTable(table) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.post({\n          endpoint: encodeURI(`/tableschemaview/${table.id}/expanded`),\n          postPayload: { expanded: true },\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() => dispatch({ type: EXPAND_TABLE, table }))\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while expanding the table schema. ' +\n                'Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function collapseTable(table) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.post({\n          endpoint: encodeURI(`/tableschemaview/${table.id}/expanded`),\n          postPayload: { expanded: false },\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() => dispatch({ type: COLLAPSE_TABLE, table }))\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while collapsing the table schema. ' +\n                'Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function removeTables(tables) {\n  return function (dispatch) {\n    const tablesToRemove = tables?.filter(Boolean) ?? [];\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? Promise.all(\n          tablesToRemove.map(table =>\n            SupersetClient.delete({\n              endpoint: encodeURI(`/tableschemaview/${table.id}`),\n            }),\n          ),\n        )\n      : Promise.resolve();\n\n    return sync\n      .then(() => dispatch({ type: REMOVE_TABLES, tables: tablesToRemove }))\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while removing the table schema. ' +\n                'Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function refreshQueries(alteredQueries) {\n  return { type: REFRESH_QUERIES, alteredQueries };\n}\n\nexport function setUserOffline(offline) {\n  return { type: SET_USER_OFFLINE, offline };\n}\n\nexport function persistEditorHeight(queryEditor, northPercent, southPercent) {\n  return {\n    type: QUERY_EDITOR_PERSIST_HEIGHT,\n    queryEditor,\n    northPercent,\n    southPercent,\n  };\n}\n\nexport function popStoredQuery(urlId) {\n  return function (dispatch) {\n    return SupersetClient.get({ endpoint: `/kv/${urlId}` })\n      .then(({ json }) =>\n        dispatch(\n          addQueryEditor({\n            name: json.name ? json.name : t('Shared query'),\n            dbId: json.dbId ? parseInt(json.dbId, 10) : null,\n            schema: json.schema ? json.schema : null,\n            autorun: json.autorun ? json.autorun : false,\n            sql: json.sql ? json.sql : 'SELECT ...',\n            templateParams: json.templateParams,\n          }),\n        ),\n      )\n      .catch(() => dispatch(addDangerToast(ERR_MSG_CANT_LOAD_QUERY)));\n  };\n}\nexport function popSavedQuery(saveQueryId) {\n  return function (dispatch) {\n    return SupersetClient.get({\n      endpoint: `/api/v1/saved_query/${saveQueryId}`,\n    })\n      .then(({ json }) => {\n        const queryEditorProps = {\n          ...convertQueryToClient(json.result),\n          dbId: json.result?.database?.id,\n          loaded: true,\n          autorun: false,\n        };\n        return dispatch(addQueryEditor(queryEditorProps));\n      })\n      .catch(() => dispatch(addDangerToast(ERR_MSG_CANT_LOAD_QUERY)));\n  };\n}\nexport function popQuery(queryId) {\n  return function (dispatch) {\n    return SupersetClient.get({\n      endpoint: `/api/v1/query/${queryId}`,\n    })\n      .then(({ json }) => {\n        const queryData = json.result;\n        const queryEditorProps = {\n          dbId: queryData.database.id,\n          schema: queryData.schema,\n          sql: queryData.sql,\n          name: t('Copy of %s', queryData.tab_name),\n          autorun: false,\n        };\n        return dispatch(addQueryEditor(queryEditorProps));\n      })\n      .catch(() => dispatch(addDangerToast(ERR_MSG_CANT_LOAD_QUERY)));\n  };\n}\nexport function popDatasourceQuery(datasourceKey, sql) {\n  return function (dispatch) {\n    const QUERY_TEXT = t('Query');\n    const datasetId = datasourceKey.split('__')[0];\n    return SupersetClient.get({\n      endpoint: `/api/v1/dataset/${datasetId}?q=(keys:!(none))`,\n    })\n      .then(({ json }) =>\n        dispatch(\n          addQueryEditor({\n            name: `${QUERY_TEXT} ${json.result.name}`,\n            dbId: json.result.database.id,\n            schema: json.result.schema,\n            autorun: sql !== undefined,\n            sql: sql || json.result.select_star,\n          }),\n        ),\n      )\n      .catch(() =>\n        dispatch(addDangerToast(t(\"The datasource couldn't be loaded\"))),\n      );\n  };\n}\nexport function createDatasourceStarted() {\n  return { type: CREATE_DATASOURCE_STARTED };\n}\nexport function createDatasourceSuccess(data) {\n  const datasource = `${data.table_id}__table`;\n  return { type: CREATE_DATASOURCE_SUCCESS, datasource };\n}\nexport function createDatasourceFailed(err) {\n  return { type: CREATE_DATASOURCE_FAILED, err };\n}\n\nexport function createDatasource(vizOptions) {\n  return dispatch => {\n    dispatch(createDatasourceStarted());\n    return SupersetClient.post({\n      endpoint: '/superset/sqllab_viz/',\n      postPayload: { data: vizOptions },\n    })\n      .then(({ json }) => {\n        dispatch(createDatasourceSuccess(json));\n\n        return Promise.resolve(json);\n      })\n      .catch(error => {\n        getClientErrorObject(error).then(e => {\n          dispatch(addDangerToast(e.error));\n        });\n        dispatch(\n          createDatasourceFailed(\n            t('An error occurred while creating the data source'),\n          ),\n        );\n\n        return Promise.reject();\n      });\n  };\n}\n\nexport function createCtasDatasource(vizOptions) {\n  return dispatch => {\n    dispatch(createDatasourceStarted());\n    return SupersetClient.post({\n      endpoint: '/api/v1/dataset/get_or_create/',\n      jsonPayload: vizOptions,\n    })\n      .then(({ json }) => {\n        dispatch(createDatasourceSuccess(json.result));\n\n        return json.result;\n      })\n      .catch(() => {\n        const errorMsg = t('An error occurred while creating the data source');\n        dispatch(createDatasourceFailed(errorMsg));\n        return Promise.reject(new Error(errorMsg));\n      });\n  };\n}\n\nexport function queryEditorSetFunctionNames(queryEditor, dbId) {\n  return function (dispatch) {\n    return SupersetClient.get({\n      endpoint: encodeURI(`/api/v1/database/${dbId}/function_names/`),\n    })\n      .then(({ json }) =>\n        dispatch({\n          type: QUERY_EDITOR_SET_FUNCTION_NAMES,\n          queryEditor,\n          functionNames: json.function_names,\n        }),\n      )\n      .catch(err => {\n        if (err.status === 404) {\n          // for databases that have been deleted, just reset the function names\n          dispatch({\n            type: QUERY_EDITOR_SET_FUNCTION_NAMES,\n            queryEditor,\n            functionNames: [],\n          });\n        } else {\n          dispatch(\n            addDangerToast(\n              t('An error occurred while fetching function names.'),\n            ),\n          );\n        }\n      });\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}