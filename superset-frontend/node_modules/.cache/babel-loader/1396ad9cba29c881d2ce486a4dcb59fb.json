{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { CategoricalColorNamespace, getColumnLabel, getMetricLabel, getNumberFormatter, getTimeFormatter, NumberFormats, t } from '@superset-ui/core';\nimport { DEFAULT_FORM_DATA as DEFAULT_PIE_FORM_DATA, EchartsPieLabelType } from './types';\nimport { DEFAULT_LEGEND_FORM_DATA, OpacityEnum } from '../constants';\nimport { extractGroupbyLabel, getChartPadding, getColtypesMapping, getLegendProps, sanitizeHtml } from '../utils/series';\nimport { defaultGrid } from '../defaults';\nimport { convertInteger } from '../utils/convertInteger';\nimport { getDefaultTooltip } from '../utils/tooltip';\nconst percentFormatter = getNumberFormatter(NumberFormats.PERCENT_2_POINT);\nexport function formatPieLabel(_ref) {let { params, labelType, numberFormatter, sanitizeName = false } = _ref;\n  const { name: rawName = '', value, percent } = params;\n  const name = sanitizeName ? sanitizeHtml(rawName) : rawName;\n  const formattedValue = numberFormatter(value);\n  const formattedPercent = percentFormatter(percent / 100);\n  switch (labelType) {\n    case EchartsPieLabelType.Key:\n      return name;\n    case EchartsPieLabelType.Value:\n      return formattedValue;\n    case EchartsPieLabelType.Percent:\n      return formattedPercent;\n    case EchartsPieLabelType.KeyValue:\n      return `${name}: ${formattedValue}`;\n    case EchartsPieLabelType.KeyValuePercent:\n      return `${name}: ${formattedValue} (${formattedPercent})`;\n    case EchartsPieLabelType.KeyPercent:\n      return `${name}: ${formattedPercent}`;\n    default:\n      return name;}\n\n}\nfunction getTotalValuePadding(_ref2) {let { chartPadding, donut, width, height } = _ref2;\n  const padding = {\n    top: donut ? 'middle' : '0',\n    left: 'center' };\n\n  const LEGEND_HEIGHT = 15;\n  const LEGEND_WIDTH = 215;\n  if (chartPadding.top) {\n    padding.top = donut ?\n    `${50 + (chartPadding.top - LEGEND_HEIGHT) / height / 2 * 100}%` :\n    `${(chartPadding.top + LEGEND_HEIGHT) / height * 100}%`;\n  }\n  if (chartPadding.bottom) {\n    padding.top = donut ?\n    `${50 - (chartPadding.bottom + LEGEND_HEIGHT) / height / 2 * 100}%` :\n    '0';\n  }\n  if (chartPadding.left) {\n    padding.left = `${50 + (chartPadding.left - LEGEND_WIDTH) / width / 2 * 100}%`;\n  }\n  if (chartPadding.right) {\n    padding.left = `${50 - (chartPadding.right + LEGEND_WIDTH) / width / 2 * 100}%`;\n  }\n  return padding;\n}\nexport default function transformProps(chartProps) {\n  const { formData, height, hooks, filterState, queriesData, width, theme, inContextMenu, emitCrossFilters } = chartProps;\n  const { data = [] } = queriesData[0];\n  const coltypeMapping = getColtypesMapping(queriesData[0]);\n  const { colorScheme, donut, groupby, innerRadius, labelsOutside, labelLine, labelType, legendMargin, legendOrientation, legendType, metric = '', numberFormat, dateFormat, outerRadius, showLabels, showLegend, showLabelsThreshold, sliceId, showTotal } = {\n    ...DEFAULT_LEGEND_FORM_DATA,\n    ...DEFAULT_PIE_FORM_DATA,\n    ...formData };\n\n  const refs = {};\n  const metricLabel = getMetricLabel(metric);\n  const groupbyLabels = groupby.map(getColumnLabel);\n  const minShowLabelAngle = (showLabelsThreshold || 0) * 3.6;\n  const keys = data.map((datum) => extractGroupbyLabel({\n    datum,\n    groupby: groupbyLabels,\n    coltypeMapping,\n    timeFormatter: getTimeFormatter(dateFormat) }));\n\n  const labelMap = data.reduce((acc, datum) => {\n    const label = extractGroupbyLabel({\n      datum,\n      groupby: groupbyLabels,\n      coltypeMapping,\n      timeFormatter: getTimeFormatter(dateFormat) });\n\n    return {\n      ...acc,\n      [label]: groupbyLabels.map((col) => datum[col]) };\n\n  }, {});\n  const { setDataMask = () => {}, onContextMenu } = hooks;\n  const colorFn = CategoricalColorNamespace.getScale(colorScheme);\n  const numberFormatter = getNumberFormatter(numberFormat);\n  let totalValue = 0;\n  const transformedData = data.map((datum) => {var _context;\n    const name = extractGroupbyLabel({\n      datum,\n      groupby: groupbyLabels,\n      coltypeMapping,\n      timeFormatter: getTimeFormatter(dateFormat) });\n\n    const isFiltered = filterState.selectedValues && !_includesInstanceProperty(_context = filterState.selectedValues).call(_context, name);\n    const value = datum[metricLabel];\n    if (typeof value === 'number' || typeof value === 'string') {\n      totalValue += convertInteger(value);\n    }\n    return {\n      value,\n      name,\n      itemStyle: {\n        color: colorFn(name, sliceId),\n        opacity: isFiltered ?\n        OpacityEnum.SemiTransparent :\n        OpacityEnum.NonTransparent } };\n\n\n  });\n  const selectedValues = (filterState.selectedValues || []).reduce((acc, selectedValue) => {\n    const index = transformedData.findIndex((_ref3) => {let { name } = _ref3;return name === selectedValue;});\n    return {\n      ...acc,\n      [index]: selectedValue };\n\n  }, {});\n  const formatter = (params) => formatPieLabel({\n    params,\n    numberFormatter,\n    labelType });\n\n  const defaultLabel = {\n    formatter,\n    show: showLabels,\n    color: theme.colors.grayscale.dark2 };\n\n  const chartPadding = getChartPadding(showLegend, legendOrientation, legendMargin);\n  const series = [\n  {\n    type: 'pie',\n    ...chartPadding,\n    animation: false,\n    radius: [`${donut ? innerRadius : 0}%`, `${outerRadius}%`],\n    center: ['50%', '50%'],\n    avoidLabelOverlap: true,\n    labelLine: labelsOutside && labelLine ? { show: true } : { show: false },\n    minShowLabelAngle,\n    label: labelsOutside ?\n    {\n      ...defaultLabel,\n      position: 'outer',\n      alignTo: 'none',\n      bleedMargin: 5 } :\n\n    {\n      ...defaultLabel,\n      position: 'inner' },\n\n    emphasis: {\n      label: {\n        show: true,\n        fontWeight: 'bold',\n        backgroundColor: theme.colors.grayscale.light5 } },\n\n\n    data: transformedData }];\n\n\n  const echartOptions = {\n    grid: {\n      ...defaultGrid },\n\n    tooltip: {\n      ...getDefaultTooltip(refs),\n      show: !inContextMenu,\n      trigger: 'item',\n      formatter: (params) => formatPieLabel({\n        params,\n        numberFormatter,\n        labelType: EchartsPieLabelType.KeyValuePercent,\n        sanitizeName: true }) },\n\n\n    legend: {\n      ...getLegendProps(legendType, legendOrientation, showLegend, theme),\n      data: keys },\n\n    graphic: showTotal ?\n    {\n      type: 'text',\n      ...getTotalValuePadding({ chartPadding, donut, width, height }),\n      style: {\n        text: t('Total: %s', numberFormatter(totalValue)),\n        fontSize: 16,\n        fontWeight: 'bold' },\n\n      z: 10 } :\n\n    null,\n    series };\n\n  return {\n    formData,\n    width,\n    height,\n    echartOptions,\n    setDataMask,\n    labelMap,\n    groupby,\n    selectedValues,\n    onContextMenu,\n    refs,\n    emitCrossFilters,\n    coltypeMapping };\n\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(percentFormatter, \"percentFormatter\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-echarts/src/Pie/transformProps.ts\");reactHotLoader.register(formatPieLabel, \"formatPieLabel\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-echarts/src/Pie/transformProps.ts\");reactHotLoader.register(getTotalValuePadding, \"getTotalValuePadding\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-echarts/src/Pie/transformProps.ts\");reactHotLoader.register(transformProps, \"transformProps\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-echarts/src/Pie/transformProps.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"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","names":["CategoricalColorNamespace","getColumnLabel","getMetricLabel","getNumberFormatter","getTimeFormatter","NumberFormats","t","DEFAULT_FORM_DATA","DEFAULT_PIE_FORM_DATA","EchartsPieLabelType","DEFAULT_LEGEND_FORM_DATA","OpacityEnum","extractGroupbyLabel","getChartPadding","getColtypesMapping","getLegendProps","sanitizeHtml","defaultGrid","convertInteger","getDefaultTooltip","percentFormatter","PERCENT_2_POINT","formatPieLabel","params","labelType","numberFormatter","sanitizeName","name","rawName","value","percent","formattedValue","formattedPercent","Key","Value","Percent","KeyValue","KeyValuePercent","KeyPercent","getTotalValuePadding","chartPadding","donut","width","height","padding","top","left","LEGEND_HEIGHT","LEGEND_WIDTH","bottom","right","transformProps","chartProps","formData","hooks","filterState","queriesData","theme","inContextMenu","emitCrossFilters","data","coltypeMapping","colorScheme","groupby","innerRadius","labelsOutside","labelLine","legendMargin","legendOrientation","legendType","metric","numberFormat","dateFormat","outerRadius","showLabels","showLegend","showLabelsThreshold","sliceId","showTotal","refs","metricLabel","groupbyLabels","map","minShowLabelAngle","keys","datum","timeFormatter","labelMap","reduce","acc","label","col","setDataMask","onContextMenu","colorFn","getScale","totalValue","transformedData","isFiltered","selectedValues","itemStyle","color","opacity","SemiTransparent","NonTransparent","selectedValue","index","findIndex","formatter","defaultLabel","show","colors","grayscale","dark2","series","type","animation","radius","center","avoidLabelOverlap","position","alignTo","bleedMargin","emphasis","fontWeight","backgroundColor","light5","echartOptions","grid","tooltip","trigger","legend","graphic","style","text","fontSize","z"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-echarts/src/Pie/transformProps.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  CategoricalColorNamespace,\n  getColumnLabel,\n  getMetricLabel,\n  getNumberFormatter,\n  getTimeFormatter,\n  NumberFormats,\n  NumberFormatter,\n  t,\n} from '@superset-ui/core';\nimport { CallbackDataParams } from 'echarts/types/src/util/types';\nimport { EChartsCoreOption, PieSeriesOption } from 'echarts';\nimport {\n  DEFAULT_FORM_DATA as DEFAULT_PIE_FORM_DATA,\n  EchartsPieChartProps,\n  EchartsPieFormData,\n  EchartsPieLabelType,\n  PieChartTransformedProps,\n} from './types';\nimport { DEFAULT_LEGEND_FORM_DATA, OpacityEnum } from '../constants';\nimport {\n  extractGroupbyLabel,\n  getChartPadding,\n  getColtypesMapping,\n  getLegendProps,\n  sanitizeHtml,\n} from '../utils/series';\nimport { defaultGrid } from '../defaults';\nimport { convertInteger } from '../utils/convertInteger';\nimport { getDefaultTooltip } from '../utils/tooltip';\nimport { Refs } from '../types';\n\nconst percentFormatter = getNumberFormatter(NumberFormats.PERCENT_2_POINT);\n\nexport function formatPieLabel({\n  params,\n  labelType,\n  numberFormatter,\n  sanitizeName = false,\n}: {\n  params: Pick<CallbackDataParams, 'name' | 'value' | 'percent'>;\n  labelType: EchartsPieLabelType;\n  numberFormatter: NumberFormatter;\n  sanitizeName?: boolean;\n}): string {\n  const { name: rawName = '', value, percent } = params;\n  const name = sanitizeName ? sanitizeHtml(rawName) : rawName;\n  const formattedValue = numberFormatter(value as number);\n  const formattedPercent = percentFormatter((percent as number) / 100);\n\n  switch (labelType) {\n    case EchartsPieLabelType.Key:\n      return name;\n    case EchartsPieLabelType.Value:\n      return formattedValue;\n    case EchartsPieLabelType.Percent:\n      return formattedPercent;\n    case EchartsPieLabelType.KeyValue:\n      return `${name}: ${formattedValue}`;\n    case EchartsPieLabelType.KeyValuePercent:\n      return `${name}: ${formattedValue} (${formattedPercent})`;\n    case EchartsPieLabelType.KeyPercent:\n      return `${name}: ${formattedPercent}`;\n    default:\n      return name;\n  }\n}\n\nfunction getTotalValuePadding({\n  chartPadding,\n  donut,\n  width,\n  height,\n}: {\n  chartPadding: {\n    bottom: number;\n    left: number;\n    right: number;\n    top: number;\n  };\n  donut: boolean;\n  width: number;\n  height: number;\n}) {\n  const padding: {\n    left?: string;\n    top?: string;\n  } = {\n    top: donut ? 'middle' : '0',\n    left: 'center',\n  };\n  const LEGEND_HEIGHT = 15;\n  const LEGEND_WIDTH = 215;\n  if (chartPadding.top) {\n    padding.top = donut\n      ? `${50 + ((chartPadding.top - LEGEND_HEIGHT) / height / 2) * 100}%`\n      : `${((chartPadding.top + LEGEND_HEIGHT) / height) * 100}%`;\n  }\n  if (chartPadding.bottom) {\n    padding.top = donut\n      ? `${50 - ((chartPadding.bottom + LEGEND_HEIGHT) / height / 2) * 100}%`\n      : '0';\n  }\n  if (chartPadding.left) {\n    padding.left = `${\n      50 + ((chartPadding.left - LEGEND_WIDTH) / width / 2) * 100\n    }%`;\n  }\n  if (chartPadding.right) {\n    padding.left = `${\n      50 - ((chartPadding.right + LEGEND_WIDTH) / width / 2) * 100\n    }%`;\n  }\n  return padding;\n}\n\nexport default function transformProps(\n  chartProps: EchartsPieChartProps,\n): PieChartTransformedProps {\n  const {\n    formData,\n    height,\n    hooks,\n    filterState,\n    queriesData,\n    width,\n    theme,\n    inContextMenu,\n    emitCrossFilters,\n  } = chartProps;\n  const { data = [] } = queriesData[0];\n  const coltypeMapping = getColtypesMapping(queriesData[0]);\n\n  const {\n    colorScheme,\n    donut,\n    groupby,\n    innerRadius,\n    labelsOutside,\n    labelLine,\n    labelType,\n    legendMargin,\n    legendOrientation,\n    legendType,\n    metric = '',\n    numberFormat,\n    dateFormat,\n    outerRadius,\n    showLabels,\n    showLegend,\n    showLabelsThreshold,\n    sliceId,\n    showTotal,\n  }: EchartsPieFormData = {\n    ...DEFAULT_LEGEND_FORM_DATA,\n    ...DEFAULT_PIE_FORM_DATA,\n    ...formData,\n  };\n  const refs: Refs = {};\n  const metricLabel = getMetricLabel(metric);\n  const groupbyLabels = groupby.map(getColumnLabel);\n  const minShowLabelAngle = (showLabelsThreshold || 0) * 3.6;\n\n  const keys = data.map(datum =>\n    extractGroupbyLabel({\n      datum,\n      groupby: groupbyLabels,\n      coltypeMapping,\n      timeFormatter: getTimeFormatter(dateFormat),\n    }),\n  );\n  const labelMap = data.reduce((acc: Record<string, string[]>, datum) => {\n    const label = extractGroupbyLabel({\n      datum,\n      groupby: groupbyLabels,\n      coltypeMapping,\n      timeFormatter: getTimeFormatter(dateFormat),\n    });\n    return {\n      ...acc,\n      [label]: groupbyLabels.map(col => datum[col] as string),\n    };\n  }, {});\n\n  const { setDataMask = () => {}, onContextMenu } = hooks;\n\n  const colorFn = CategoricalColorNamespace.getScale(colorScheme as string);\n  const numberFormatter = getNumberFormatter(numberFormat);\n  let totalValue = 0;\n\n  const transformedData: PieSeriesOption[] = data.map(datum => {\n    const name = extractGroupbyLabel({\n      datum,\n      groupby: groupbyLabels,\n      coltypeMapping,\n      timeFormatter: getTimeFormatter(dateFormat),\n    });\n\n    const isFiltered =\n      filterState.selectedValues && !filterState.selectedValues.includes(name);\n    const value = datum[metricLabel];\n\n    if (typeof value === 'number' || typeof value === 'string') {\n      totalValue += convertInteger(value);\n    }\n\n    return {\n      value,\n      name,\n      itemStyle: {\n        color: colorFn(name, sliceId),\n        opacity: isFiltered\n          ? OpacityEnum.SemiTransparent\n          : OpacityEnum.NonTransparent,\n      },\n    };\n  });\n\n  const selectedValues = (filterState.selectedValues || []).reduce(\n    (acc: Record<string, number>, selectedValue: string) => {\n      const index = transformedData.findIndex(\n        ({ name }) => name === selectedValue,\n      );\n      return {\n        ...acc,\n        [index]: selectedValue,\n      };\n    },\n    {},\n  );\n\n  const formatter = (params: CallbackDataParams) =>\n    formatPieLabel({\n      params,\n      numberFormatter,\n      labelType,\n    });\n\n  const defaultLabel = {\n    formatter,\n    show: showLabels,\n    color: theme.colors.grayscale.dark2,\n  };\n\n  const chartPadding = getChartPadding(\n    showLegend,\n    legendOrientation,\n    legendMargin,\n  );\n\n  const series: PieSeriesOption[] = [\n    {\n      type: 'pie',\n      ...chartPadding,\n      animation: false,\n      radius: [`${donut ? innerRadius : 0}%`, `${outerRadius}%`],\n      center: ['50%', '50%'],\n      avoidLabelOverlap: true,\n      labelLine: labelsOutside && labelLine ? { show: true } : { show: false },\n      minShowLabelAngle,\n      label: labelsOutside\n        ? {\n            ...defaultLabel,\n            position: 'outer',\n            alignTo: 'none',\n            bleedMargin: 5,\n          }\n        : {\n            ...defaultLabel,\n            position: 'inner',\n          },\n      emphasis: {\n        label: {\n          show: true,\n          fontWeight: 'bold',\n          backgroundColor: theme.colors.grayscale.light5,\n        },\n      },\n      data: transformedData,\n    },\n  ];\n\n  const echartOptions: EChartsCoreOption = {\n    grid: {\n      ...defaultGrid,\n    },\n    tooltip: {\n      ...getDefaultTooltip(refs),\n      show: !inContextMenu,\n      trigger: 'item',\n      formatter: (params: any) =>\n        formatPieLabel({\n          params,\n          numberFormatter,\n          labelType: EchartsPieLabelType.KeyValuePercent,\n          sanitizeName: true,\n        }),\n    },\n    legend: {\n      ...getLegendProps(legendType, legendOrientation, showLegend, theme),\n      data: keys,\n    },\n    graphic: showTotal\n      ? {\n          type: 'text',\n          ...getTotalValuePadding({ chartPadding, donut, width, height }),\n          style: {\n            text: t('Total: %s', numberFormatter(totalValue)),\n            fontSize: 16,\n            fontWeight: 'bold',\n          },\n          z: 10,\n        }\n      : null,\n    series,\n  };\n\n  return {\n    formData,\n    width,\n    height,\n    echartOptions,\n    setDataMask,\n    labelMap,\n    groupby,\n    selectedValues,\n    onContextMenu,\n    refs,\n    emitCrossFilters,\n    coltypeMapping,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}