{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { styled } from '@superset-ui/core';\nimport { sharedControlComponents } from '@superset-ui/chart-controls';\nimport { AreaChartStackControlOptions } from '../constants';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst { RadioButtonControl } = sharedControlComponents;\nconst ExtraControlsWrapper = styled.div`\n  text-align: center;\n`;\nexport function useExtraControl(_ref) {let { formData, setControlValue } = _ref;\n  const { stack, area } = formData;\n  const [extraValue, setExtraValue] = useState(stack != null ? stack : undefined);\n  useEffect(() => {\n    setExtraValue(stack);\n  }, [stack]);\n  const extraControlsOptions = useMemo(() => {\n    if (area) {\n      return AreaChartStackControlOptions;\n    }\n    return [];\n  }, [area]);\n  const extraControlsHandler = useCallback((value) => {\n    if (area) {\n      if (setControlValue) {\n        setControlValue('stack', value);\n        setExtraValue(value);\n      }\n    }\n  }, [area, setControlValue]);\n  return {\n    extraControlsOptions,\n    extraControlsHandler,\n    extraValue };\n\n}\nexport function ExtraControls(_ref2) {let { formData, setControlValue } = _ref2;\n  const { extraControlsOptions, extraControlsHandler, extraValue } = useExtraControl({\n    formData,\n    setControlValue });\n\n  if (!formData.showExtraControls) {\n    return null;\n  }\n  return ___EmotionJSX(ExtraControlsWrapper, null,\n  ___EmotionJSX(RadioButtonControl, { options: extraControlsOptions, onChange: extraControlsHandler, value: extraValue }));\n\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,OAArC,EAA8CC,WAA9C,QAAiE,OAAjE;AACA,SAAqCC,MAArC,QAAmD,mBAAnD;AACA,SAEEC,uBAFF,QAGO,6BAHP;AAIA,SAASC,4BAAT,QAA6C,cAA7C,C;AAEA,MAAM,EAAEC,kBAAF,KAAyBF,uBAA/B;AAEA,MAAMG,oBAAoB,GAAGJ,MAAM,CAACK,GAAG;;CAAvC;AAIA,OAAM,SAAUC,eAAV,OAWL,KANC,EACAC,QADA,EAEAC,eAFA,EAMD;EACC,MAAM,EAAEC,KAAF,EAASC,IAAT,KAAkBH,QAAxB;EACA,MAAM,CAACI,UAAD,EAAaC,aAAb,IAA8BhB,QAAQ,CAC1Ca,KAD0C,WAC1CA,KAD0C,GACjCI,SADiC,CAA5C;EAIAhB,SAAS,CAAC,MAAK;IACbe,aAAa,CAACH,KAAD,CAAb;EACD,CAFQ,EAEN,CAACA,KAAD,CAFM,CAAT;EAIA,MAAMK,oBAAoB,GAAGhB,OAAO,CAAC,MAAK;IACxC,IAAIY,IAAJ,EAAU;MACR,OAAOR,4BAAP;IACD;IACD,OAAO,EAAP;EACD,CALmC,EAKjC,CAACQ,IAAD,CALiC,CAApC;EAOA,MAAMK,oBAAoB,GAAGhB,WAAW,CACtC,CAACiB,KAAD,KAAgC;IAC9B,IAAIN,IAAJ,EAAU;MACR,IAAIF,eAAJ,EAAqB;QACnBA,eAAe,CAAC,OAAD,EAAUQ,KAAV,CAAf;QACAJ,aAAa,CAACI,KAAD,CAAb;MACD;IACF;EACF,CARqC,EAStC,CAACN,IAAD,EAAOF,eAAP,CATsC,CAAxC;EAYA,OAAO;IACLM,oBADK;IAELC,oBAFK;IAGLJ,UAHK,EAAP;;AAKD;AAED,OAAM,SAAUM,aAAV,QAYL,KANC,EACAV,QADA,EAEAC,eAFA,EAMD;EACC,MAAM,EAAEM,oBAAF,EAAwBC,oBAAxB,EAA8CJ,UAA9C,KACJL,eAAe,CAAI;IACjBC,QADiB;IAEjBC,eAFiB,EAAJ,CADjB;;EAMA,IAAI,CAACD,QAAQ,CAACW,iBAAd,EAAiC;IAC/B,OAAO,IAAP;EACD;EAED,OACE,cAAC,oBAAD;EACE,cAAC,kBAAD,IACE,OAAO,EAAEJ,oBADX,EAEE,QAAQ,EAAEC,oBAFZ,EAGE,KAAK,EAAEJ,UAHT,GADF,CADF;;AASD","names":["React","useState","useEffect","useMemo","useCallback","styled","sharedControlComponents","AreaChartStackControlOptions","RadioButtonControl","ExtraControlsWrapper","div","useExtraControl","formData","setControlValue","stack","area","extraValue","setExtraValue","undefined","extraControlsOptions","extraControlsHandler","value","ExtraControls","showExtraControls"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/plugins/plugin-chart-echarts/src/components/ExtraControls.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { HandlerFunction, JsonValue, styled } from '@superset-ui/core';\nimport {\n  RadioButtonOption,\n  sharedControlComponents,\n} from '@superset-ui/chart-controls';\nimport { AreaChartStackControlOptions } from '../constants';\n\nconst { RadioButtonControl } = sharedControlComponents;\n\nconst ExtraControlsWrapper = styled.div`\n  text-align: center;\n`;\n\nexport function useExtraControl<\n  F extends {\n    stack: any;\n    area: boolean;\n  },\n>({\n  formData,\n  setControlValue,\n}: {\n  formData: F;\n  setControlValue?: HandlerFunction;\n}) {\n  const { stack, area } = formData;\n  const [extraValue, setExtraValue] = useState<JsonValue | undefined>(\n    stack ?? undefined,\n  );\n\n  useEffect(() => {\n    setExtraValue(stack);\n  }, [stack]);\n\n  const extraControlsOptions = useMemo(() => {\n    if (area) {\n      return AreaChartStackControlOptions;\n    }\n    return [];\n  }, [area]);\n\n  const extraControlsHandler = useCallback(\n    (value: RadioButtonOption[0]) => {\n      if (area) {\n        if (setControlValue) {\n          setControlValue('stack', value);\n          setExtraValue(value);\n        }\n      }\n    },\n    [area, setControlValue],\n  );\n\n  return {\n    extraControlsOptions,\n    extraControlsHandler,\n    extraValue,\n  };\n}\n\nexport function ExtraControls<\n  F extends {\n    stack: any;\n    area: boolean;\n    showExtraControls: boolean;\n  },\n>({\n  formData,\n  setControlValue,\n}: {\n  formData: F;\n  setControlValue?: HandlerFunction;\n}) {\n  const { extraControlsOptions, extraControlsHandler, extraValue } =\n    useExtraControl<F>({\n      formData,\n      setControlValue,\n    });\n\n  if (!formData.showExtraControls) {\n    return null;\n  }\n\n  return (\n    <ExtraControlsWrapper>\n      <RadioButtonControl\n        options={extraControlsOptions}\n        onChange={extraControlsHandler}\n        value={extraValue}\n      />\n    </ExtraControlsWrapper>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}