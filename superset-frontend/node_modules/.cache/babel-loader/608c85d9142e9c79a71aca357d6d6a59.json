{"ast":null,"code":"import _isString from \"lodash/isString\";import _isEmpty from \"lodash/isEmpty\";import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useState } from 'react';\nimport { Radio } from 'src/components/Radio';\nimport { AsyncSelect } from 'src/components';\nimport { Input } from 'src/components/Input';\nimport StyledModal from 'src/components/Modal';\nimport Button from 'src/components/Button';\nimport { styled, t, SupersetClient } from '@superset-ui/core';\nimport { useSelector, useDispatch } from 'react-redux';\nimport moment from 'moment';\nimport rison from 'rison';\nimport { createDatasource } from 'src/SqlLab/actions/sqlLab';\nimport { addDangerToast } from 'src/components/MessageToasts/actions';\nimport { DatasetRadioState, EXPLORE_CHART_DEFAULT, getInitialState } from 'src/SqlLab/types';\nimport { mountExploreUrl } from 'src/explore/exploreUtils';\nimport { postFormData } from 'src/explore/exploreUtils/formData';\nimport { URL_PARAMS } from 'src/constants';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst Styles = styled.div`\n  .sdm-body {\n    margin: 0 8px;\n  }\n  .sdm-input {\n    margin-left: 45px;\n    width: 401px;\n  }\n  .sdm-autocomplete {\n    width: 401px;\n    align-self: center;\n  }\n  .sdm-radio {\n    display: block;\n    height: 30px;\n    margin: 10px 0px;\n    line-height: 30px;\n  }\n  .sdm-overwrite-msg {\n    margin: 7px;\n  }\n  .sdm-overwrite-container {\n    flex: 1 1 auto;\n    display: flex;\n  }\n`;\nconst updateDataset = async (dbId, datasetId, sql, columns, owners, overrideColumns) => {\n  const endpoint = `api/v1/dataset/${datasetId}?override_columns=${overrideColumns}`;\n  const headers = { 'Content-Type': 'application/json' };\n  const body = JSON.stringify({\n    sql,\n    columns,\n    owners,\n    database_id: dbId });\n\n  const data = await SupersetClient.put({\n    endpoint,\n    headers,\n    body });\n\n  return data.json.result;\n};\nconst UNTITLED = t('Untitled Dataset');\nexport const SaveDatasetModal = (_ref) => {let { visible, onHide, buttonTextOnSave, buttonTextOnOverwrite, modalDescription, datasource, openWindow = true, formData = {} } = _ref;\n  const defaultVizType = useSelector((state) => {var _state$common, _state$common$conf;return ((_state$common = state.common) == null ? void 0 : (_state$common$conf = _state$common.conf) == null ? void 0 : _state$common$conf.DEFAULT_VIZ_TYPE) || 'table';});\n  const getDefaultDatasetName = () => `${(datasource == null ? void 0 : datasource.name) || UNTITLED} ${moment().format('MM/DD/YYYY HH:mm:ss')}`;\n  const [datasetName, setDatasetName] = useState(getDefaultDatasetName());\n  const [newOrOverwrite, setNewOrOverwrite] = useState(DatasetRadioState.SAVE_NEW);\n  const [shouldOverwriteDataset, setShouldOverwriteDataset] = useState(false);\n  const [datasetToOverwrite, setDatasetToOverwrite] = useState({});\n  const [selectedDatasetToOverwrite, setSelectedDatasetToOverwrite] = useState(undefined);\n  const [loading, setLoading] = useState(false);\n  const user = useSelector((user) => getInitialState(user));\n  const dispatch = useDispatch();\n  const createWindow = (url) => {\n    if (openWindow) {\n      window.open(url, '_blank', 'noreferrer');\n    } else\n    {\n      window.location.href = url;\n    }\n  };\n  const formDataWithDefaults = {\n    ...EXPLORE_CHART_DEFAULT,\n    ...(formData || {}) };\n\n  const handleOverwriteDataset = async () => {var _datasource$columns, _datasetToOverwrite$o, _datasource$columns2;\n    // if user wants to overwrite a dataset we need to prompt them\n    if (!shouldOverwriteDataset) {\n      setShouldOverwriteDataset(true);\n      return;\n    }\n    setLoading(true);\n    const [, key] = await Promise.all([\n    updateDataset(datasource == null ? void 0 : datasource.dbId, datasetToOverwrite == null ? void 0 : datasetToOverwrite.datasetid, datasource == null ? void 0 : datasource.sql, datasource == null ? void 0 : (_datasource$columns = datasource.columns) == null ? void 0 : _datasource$columns.map((d) => ({\n      column_name: d.column_name,\n      type: d.type,\n      is_dttm: d.is_dttm })),\n    datasetToOverwrite == null ? void 0 : (_datasetToOverwrite$o = datasetToOverwrite.owners) == null ? void 0 : _datasetToOverwrite$o.map((o) => o.id), true),\n    postFormData(datasetToOverwrite.datasetid, 'table', {\n      ...formDataWithDefaults,\n      datasource: `${datasetToOverwrite.datasetid}__table`,\n      ...(defaultVizType === 'table' && {\n        all_columns: datasource == null ? void 0 : (_datasource$columns2 = datasource.columns) == null ? void 0 : _datasource$columns2.map((column) => column.column_name) }) })]);\n\n\n\n    setLoading(false);\n    const url = mountExploreUrl(null, {\n      [URL_PARAMS.formDataKey.name]: key });\n\n    createWindow(url);\n    setShouldOverwriteDataset(false);\n    setDatasetName(getDefaultDatasetName());\n    onHide();\n  };\n  const loadDatasetOverwriteOptions = useCallback(async function (input) {if (input === void 0) {input = '';}\n    const { userId } = user;\n    const queryParams = rison.encode({\n      filters: [\n      {\n        col: 'table_name',\n        opr: 'ct',\n        value: input },\n\n      {\n        col: 'owners',\n        opr: 'rel_m_m',\n        value: userId }],\n\n\n      order_column: 'changed_on_delta_humanized',\n      order_direction: 'desc' });\n\n    return SupersetClient.get({\n      endpoint: `/api/v1/dataset?q=${queryParams}` }).\n    then((response) => ({\n      data: response.json.result.map((r) => ({\n        value: r.table_name,\n        label: r.table_name,\n        datasetid: r.id,\n        owners: r.owners })),\n\n      totalCount: response.json.count }));\n\n  }, [user]);\n  const handleSaveInDataset = () => {var _datasource$columns3, _datasource$database;\n    setLoading(true);\n    const selectedColumns = (_datasource$columns3 = datasource == null ? void 0 : datasource.columns) != null ? _datasource$columns3 : [];\n    // The filters param is only used to test jinja templates.\n    // Remove the special filters entry from the templateParams\n    // before saving the dataset.\n    let templateParams;\n    if (_isString(datasource == null ? void 0 : datasource.templateParams)) {\n      const p = JSON.parse(datasource.templateParams);\n      /* eslint-disable-next-line no-underscore-dangle */\n      if (p._filters) {\n        /* eslint-disable-next-line no-underscore-dangle */\n        delete p._filters;\n        // eslint-disable-next-line no-param-reassign\n        templateParams = JSON.stringify(p);\n      }\n    }\n    dispatch(createDatasource({\n      sql: datasource.sql,\n      dbId: datasource.dbId || (datasource == null ? void 0 : (_datasource$database = datasource.database) == null ? void 0 : _datasource$database.id),\n      schema: datasource == null ? void 0 : datasource.schema,\n      templateParams,\n      datasourceName: datasetName })).\n\n    then((data) => postFormData(data.id, 'table', {\n      ...formDataWithDefaults,\n      datasource: `${data.id}__table`,\n      ...(defaultVizType === 'table' && {\n        all_columns: selectedColumns.map((column) => column.column_name) }) })).\n\n\n    then((key) => {\n      setLoading(false);\n      const url = mountExploreUrl(null, {\n        [URL_PARAMS.formDataKey.name]: key });\n\n      createWindow(url);\n      setDatasetName(getDefaultDatasetName());\n      onHide();\n    }).\n    catch(() => {\n      setLoading(false);\n      addDangerToast(t('An error occurred saving dataset'));\n    });\n  };\n  const handleOverwriteDatasetOption = (value, option) => {\n    setDatasetToOverwrite(option);\n    setSelectedDatasetToOverwrite(value);\n  };\n  const handleDatasetNameChange = (e) => {\n    // @ts-expect-error\n    setDatasetName(e.target.value);\n  };\n  const handleOverwriteCancel = () => {\n    setShouldOverwriteDataset(false);\n    setDatasetToOverwrite({});\n  };\n  const disableSaveAndExploreBtn = newOrOverwrite === DatasetRadioState.SAVE_NEW &&\n  datasetName.length === 0 ||\n  newOrOverwrite === DatasetRadioState.OVERWRITE_DATASET &&\n  _isEmpty(selectedDatasetToOverwrite);\n  const filterAutocompleteOption = (inputValue, option) => {var _context;return _includesInstanceProperty(_context = option.value.toLowerCase()).call(_context, inputValue.toLowerCase());};\n  return ___EmotionJSX(StyledModal, { show: visible, title: t('Save or Overwrite Dataset'), onHide: onHide, footer: ___EmotionJSX(React.Fragment, null,\n    newOrOverwrite === DatasetRadioState.SAVE_NEW && ___EmotionJSX(Button, { disabled: disableSaveAndExploreBtn, buttonStyle: \"primary\", onClick: handleSaveInDataset, loading: loading },\n    buttonTextOnSave),\n\n    newOrOverwrite === DatasetRadioState.OVERWRITE_DATASET && ___EmotionJSX(React.Fragment, null,\n    shouldOverwriteDataset && ___EmotionJSX(Button, { onClick: handleOverwriteCancel }, t('Back')),\n    ___EmotionJSX(Button, { className: \"md\", buttonStyle: \"primary\", onClick: handleOverwriteDataset, disabled: disableSaveAndExploreBtn, loading: loading },\n    buttonTextOnOverwrite))) },\n\n\n\n  ___EmotionJSX(Styles, null,\n  !shouldOverwriteDataset && ___EmotionJSX(\"div\", { className: \"sdm-body\" },\n  modalDescription && ___EmotionJSX(\"div\", { className: \"sdm-prompt\" }, modalDescription),\n  ___EmotionJSX(Radio.Group, { onChange: (e) => {\n      setNewOrOverwrite(Number(e.target.value));\n    }, value: newOrOverwrite },\n  ___EmotionJSX(Radio, { className: \"sdm-radio\", value: 1 },\n  t('Save as new'),\n  ___EmotionJSX(Input, { className: \"sdm-input\", value: datasetName, onChange: handleDatasetNameChange, disabled: newOrOverwrite !== 1 })),\n\n  ___EmotionJSX(\"div\", { className: \"sdm-overwrite-container\" },\n  ___EmotionJSX(Radio, { className: \"sdm-radio\", value: 2 },\n  t('Overwrite existing')),\n\n  ___EmotionJSX(\"div\", { className: \"sdm-autocomplete\" },\n  ___EmotionJSX(AsyncSelect, { allowClear: true, showSearch: true, placeholder: t('Select or type dataset name'), ariaLabel: t('Existing dataset'), onChange: handleOverwriteDatasetOption, options: (input) => loadDatasetOverwriteOptions(input), value: selectedDatasetToOverwrite, filterOption: filterAutocompleteOption, disabled: newOrOverwrite !== 2, getPopupContainer: () => document.body }))))),\n\n\n\n\n  shouldOverwriteDataset && ___EmotionJSX(\"div\", { className: \"sdm-overwrite-msg\" },\n  t('Are you sure you want to overwrite this dataset?'))));\n\n\n\n};","map":{"version":3,"mappings":"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","names":["React","useCallback","useState","Radio","AsyncSelect","Input","StyledModal","Button","styled","t","SupersetClient","useSelector","useDispatch","moment","rison","createDatasource","addDangerToast","DatasetRadioState","EXPLORE_CHART_DEFAULT","getInitialState","mountExploreUrl","postFormData","URL_PARAMS","Styles","div","updateDataset","dbId","datasetId","sql","columns","owners","overrideColumns","endpoint","headers","body","JSON","stringify","database_id","data","put","json","result","UNTITLED","SaveDatasetModal","visible","onHide","buttonTextOnSave","buttonTextOnOverwrite","modalDescription","datasource","openWindow","formData","defaultVizType","common","conf","DEFAULT_VIZ_TYPE","getDefaultDatasetName","name","format","datasetName","setDatasetName","newOrOverwrite","setNewOrOverwrite","SAVE_NEW","shouldOverwriteDataset","setShouldOverwriteDataset","datasetToOverwrite","setDatasetToOverwrite","selectedDatasetToOverwrite","setSelectedDatasetToOverwrite","undefined","loading","setLoading","user","dispatch","createWindow","url","window","open","location","href","formDataWithDefaults","handleOverwriteDataset","key","Promise","all","datasetid","map","d","column_name","type","is_dttm","o","id","all_columns","column","formDataKey","loadDatasetOverwriteOptions","input","userId","queryParams","encode","filters","col","opr","value","order_column","order_direction","get","then","response","r","table_name","label","totalCount","count","handleSaveInDataset","selectedColumns","templateParams","p","parse","_filters","database","schema","datasourceName","catch","handleOverwriteDatasetOption","option","handleDatasetNameChange","e","target","handleOverwriteCancel","disableSaveAndExploreBtn","length","OVERWRITE_DATASET","filterAutocompleteOption","inputValue","toLowerCase","Number","document"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/SqlLab/components/SaveDatasetModal/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useCallback, useState } from 'react';\nimport { Radio } from 'src/components/Radio';\nimport { RadioChangeEvent, AsyncSelect } from 'src/components';\nimport { Input } from 'src/components/Input';\nimport StyledModal from 'src/components/Modal';\nimport Button from 'src/components/Button';\nimport {\n  styled,\n  t,\n  SupersetClient,\n  JsonResponse,\n  JsonObject,\n  QueryResponse,\n  QueryFormData,\n} from '@superset-ui/core';\nimport { useSelector, useDispatch } from 'react-redux';\nimport moment from 'moment';\nimport rison from 'rison';\nimport { createDatasource } from 'src/SqlLab/actions/sqlLab';\nimport { addDangerToast } from 'src/components/MessageToasts/actions';\nimport { UserWithPermissionsAndRoles as User } from 'src/types/bootstrapTypes';\nimport {\n  DatasetRadioState,\n  EXPLORE_CHART_DEFAULT,\n  DatasetOwner,\n  SqlLabExploreRootState,\n  getInitialState,\n  SqlLabRootState,\n} from 'src/SqlLab/types';\nimport { mountExploreUrl } from 'src/explore/exploreUtils';\nimport { postFormData } from 'src/explore/exploreUtils/formData';\nimport { URL_PARAMS } from 'src/constants';\nimport { SelectValue } from 'antd/lib/select';\nimport { isEmpty, isString } from 'lodash';\n\ninterface QueryDatabase {\n  id?: number;\n}\n\nexport type ExploreQuery = QueryResponse & {\n  database?: QueryDatabase | null | undefined;\n};\n\nexport interface ISimpleColumn {\n  column_name?: string | null;\n  name?: string | null;\n  type?: string | null;\n  is_dttm?: boolean | null;\n}\n\nexport type Database = {\n  backend: string;\n  id: number;\n  parameter: object;\n};\n\nexport interface ISaveableDatasource {\n  columns: ISimpleColumn[];\n  name: string;\n  dbId: number;\n  sql: string;\n  templateParams?: string | object | null;\n  schema?: string | null;\n  database?: Database;\n}\n\ninterface SaveDatasetModalProps {\n  visible: boolean;\n  onHide: () => void;\n  buttonTextOnSave: string;\n  buttonTextOnOverwrite: string;\n  modalDescription?: string;\n  datasource: ISaveableDatasource;\n  openWindow?: boolean;\n  formData?: Omit<QueryFormData, 'datasource'>;\n}\n\nconst Styles = styled.div`\n  .sdm-body {\n    margin: 0 8px;\n  }\n  .sdm-input {\n    margin-left: 45px;\n    width: 401px;\n  }\n  .sdm-autocomplete {\n    width: 401px;\n    align-self: center;\n  }\n  .sdm-radio {\n    display: block;\n    height: 30px;\n    margin: 10px 0px;\n    line-height: 30px;\n  }\n  .sdm-overwrite-msg {\n    margin: 7px;\n  }\n  .sdm-overwrite-container {\n    flex: 1 1 auto;\n    display: flex;\n  }\n`;\n\nconst updateDataset = async (\n  dbId: number,\n  datasetId: number,\n  sql: string,\n  columns: Array<Record<string, any>>,\n  owners: [number],\n  overrideColumns: boolean,\n) => {\n  const endpoint = `api/v1/dataset/${datasetId}?override_columns=${overrideColumns}`;\n  const headers = { 'Content-Type': 'application/json' };\n  const body = JSON.stringify({\n    sql,\n    columns,\n    owners,\n    database_id: dbId,\n  });\n\n  const data: JsonResponse = await SupersetClient.put({\n    endpoint,\n    headers,\n    body,\n  });\n  return data.json.result;\n};\n\nconst UNTITLED = t('Untitled Dataset');\n\nexport const SaveDatasetModal = ({\n  visible,\n  onHide,\n  buttonTextOnSave,\n  buttonTextOnOverwrite,\n  modalDescription,\n  datasource,\n  openWindow = true,\n  formData = {},\n}: SaveDatasetModalProps) => {\n  const defaultVizType = useSelector<SqlLabRootState, string>(\n    state => state.common?.conf?.DEFAULT_VIZ_TYPE || 'table',\n  );\n\n  const getDefaultDatasetName = () =>\n    `${datasource?.name || UNTITLED} ${moment().format('MM/DD/YYYY HH:mm:ss')}`;\n  const [datasetName, setDatasetName] = useState(getDefaultDatasetName());\n  const [newOrOverwrite, setNewOrOverwrite] = useState(\n    DatasetRadioState.SAVE_NEW,\n  );\n  const [shouldOverwriteDataset, setShouldOverwriteDataset] = useState(false);\n  const [datasetToOverwrite, setDatasetToOverwrite] = useState<\n    Record<string, any>\n  >({});\n  const [selectedDatasetToOverwrite, setSelectedDatasetToOverwrite] = useState<\n    SelectValue | undefined\n  >(undefined);\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const user = useSelector<SqlLabExploreRootState, User>(user =>\n    getInitialState(user),\n  );\n  const dispatch = useDispatch<(dispatch: any) => Promise<JsonObject>>();\n\n  const createWindow = (url: string) => {\n    if (openWindow) {\n      window.open(url, '_blank', 'noreferrer');\n    } else {\n      window.location.href = url;\n    }\n  };\n  const formDataWithDefaults = {\n    ...EXPLORE_CHART_DEFAULT,\n    ...(formData || {}),\n  };\n  const handleOverwriteDataset = async () => {\n    // if user wants to overwrite a dataset we need to prompt them\n    if (!shouldOverwriteDataset) {\n      setShouldOverwriteDataset(true);\n      return;\n    }\n    setLoading(true);\n\n    const [, key] = await Promise.all([\n      updateDataset(\n        datasource?.dbId,\n        datasetToOverwrite?.datasetid,\n        datasource?.sql,\n        datasource?.columns?.map(\n          (d: { column_name: string; type: string; is_dttm: boolean }) => ({\n            column_name: d.column_name,\n            type: d.type,\n            is_dttm: d.is_dttm,\n          }),\n        ),\n        datasetToOverwrite?.owners?.map((o: DatasetOwner) => o.id),\n        true,\n      ),\n      postFormData(datasetToOverwrite.datasetid, 'table', {\n        ...formDataWithDefaults,\n        datasource: `${datasetToOverwrite.datasetid}__table`,\n        ...(defaultVizType === 'table' && {\n          all_columns: datasource?.columns?.map(column => column.column_name),\n        }),\n      }),\n    ]);\n    setLoading(false);\n\n    const url = mountExploreUrl(null, {\n      [URL_PARAMS.formDataKey.name]: key,\n    });\n    createWindow(url);\n\n    setShouldOverwriteDataset(false);\n    setDatasetName(getDefaultDatasetName());\n    onHide();\n  };\n\n  const loadDatasetOverwriteOptions = useCallback(\n    async (input = '') => {\n      const { userId } = user;\n      const queryParams = rison.encode({\n        filters: [\n          {\n            col: 'table_name',\n            opr: 'ct',\n            value: input,\n          },\n          {\n            col: 'owners',\n            opr: 'rel_m_m',\n            value: userId,\n          },\n        ],\n        order_column: 'changed_on_delta_humanized',\n        order_direction: 'desc',\n      });\n\n      return SupersetClient.get({\n        endpoint: `/api/v1/dataset?q=${queryParams}`,\n      }).then(response => ({\n        data: response.json.result.map(\n          (r: { table_name: string; id: number; owners: [DatasetOwner] }) => ({\n            value: r.table_name,\n            label: r.table_name,\n            datasetid: r.id,\n            owners: r.owners,\n          }),\n        ),\n        totalCount: response.json.count,\n      }));\n    },\n    [user],\n  );\n\n  const handleSaveInDataset = () => {\n    setLoading(true);\n    const selectedColumns = datasource?.columns ?? [];\n\n    // The filters param is only used to test jinja templates.\n    // Remove the special filters entry from the templateParams\n    // before saving the dataset.\n    let templateParams;\n    if (isString(datasource?.templateParams)) {\n      const p = JSON.parse(datasource.templateParams);\n      /* eslint-disable-next-line no-underscore-dangle */\n      if (p._filters) {\n        /* eslint-disable-next-line no-underscore-dangle */\n        delete p._filters;\n        // eslint-disable-next-line no-param-reassign\n        templateParams = JSON.stringify(p);\n      }\n    }\n\n    dispatch(\n      createDatasource({\n        sql: datasource.sql,\n        dbId: datasource.dbId || datasource?.database?.id,\n        schema: datasource?.schema,\n        templateParams,\n        datasourceName: datasetName,\n      }),\n    )\n      .then((data: { id: number }) =>\n        postFormData(data.id, 'table', {\n          ...formDataWithDefaults,\n          datasource: `${data.id}__table`,\n          ...(defaultVizType === 'table' && {\n            all_columns: selectedColumns.map(column => column.column_name),\n          }),\n        }),\n      )\n      .then((key: string) => {\n        setLoading(false);\n        const url = mountExploreUrl(null, {\n          [URL_PARAMS.formDataKey.name]: key,\n        });\n        createWindow(url);\n        setDatasetName(getDefaultDatasetName());\n        onHide();\n      })\n      .catch(() => {\n        setLoading(false);\n        addDangerToast(t('An error occurred saving dataset'));\n      });\n  };\n\n  const handleOverwriteDatasetOption = (value: SelectValue, option: any) => {\n    setDatasetToOverwrite(option);\n    setSelectedDatasetToOverwrite(value);\n  };\n\n  const handleDatasetNameChange = (e: React.FormEvent<HTMLInputElement>) => {\n    // @ts-expect-error\n    setDatasetName(e.target.value);\n  };\n\n  const handleOverwriteCancel = () => {\n    setShouldOverwriteDataset(false);\n    setDatasetToOverwrite({});\n  };\n\n  const disableSaveAndExploreBtn =\n    (newOrOverwrite === DatasetRadioState.SAVE_NEW &&\n      datasetName.length === 0) ||\n    (newOrOverwrite === DatasetRadioState.OVERWRITE_DATASET &&\n      isEmpty(selectedDatasetToOverwrite));\n\n  const filterAutocompleteOption = (\n    inputValue: string,\n    option: { value: string; datasetid: number },\n  ) => option.value.toLowerCase().includes(inputValue.toLowerCase());\n\n  return (\n    <StyledModal\n      show={visible}\n      title={t('Save or Overwrite Dataset')}\n      onHide={onHide}\n      footer={\n        <>\n          {newOrOverwrite === DatasetRadioState.SAVE_NEW && (\n            <Button\n              disabled={disableSaveAndExploreBtn}\n              buttonStyle=\"primary\"\n              onClick={handleSaveInDataset}\n              loading={loading}\n            >\n              {buttonTextOnSave}\n            </Button>\n          )}\n          {newOrOverwrite === DatasetRadioState.OVERWRITE_DATASET && (\n            <>\n              {shouldOverwriteDataset && (\n                <Button onClick={handleOverwriteCancel}>{t('Back')}</Button>\n              )}\n              <Button\n                className=\"md\"\n                buttonStyle=\"primary\"\n                onClick={handleOverwriteDataset}\n                disabled={disableSaveAndExploreBtn}\n                loading={loading}\n              >\n                {buttonTextOnOverwrite}\n              </Button>\n            </>\n          )}\n        </>\n      }\n    >\n      <Styles>\n        {!shouldOverwriteDataset && (\n          <div className=\"sdm-body\">\n            {modalDescription && (\n              <div className=\"sdm-prompt\">{modalDescription}</div>\n            )}\n            <Radio.Group\n              onChange={(e: RadioChangeEvent) => {\n                setNewOrOverwrite(Number(e.target.value));\n              }}\n              value={newOrOverwrite}\n            >\n              <Radio className=\"sdm-radio\" value={1}>\n                {t('Save as new')}\n                <Input\n                  className=\"sdm-input\"\n                  value={datasetName}\n                  onChange={handleDatasetNameChange}\n                  disabled={newOrOverwrite !== 1}\n                />\n              </Radio>\n              <div className=\"sdm-overwrite-container\">\n                <Radio className=\"sdm-radio\" value={2}>\n                  {t('Overwrite existing')}\n                </Radio>\n                <div className=\"sdm-autocomplete\">\n                  <AsyncSelect\n                    allowClear\n                    showSearch\n                    placeholder={t('Select or type dataset name')}\n                    ariaLabel={t('Existing dataset')}\n                    onChange={handleOverwriteDatasetOption}\n                    options={input => loadDatasetOverwriteOptions(input)}\n                    value={selectedDatasetToOverwrite}\n                    filterOption={filterAutocompleteOption}\n                    disabled={newOrOverwrite !== 2}\n                    getPopupContainer={() => document.body}\n                  />\n                </div>\n              </div>\n            </Radio.Group>\n          </div>\n        )}\n        {shouldOverwriteDataset && (\n          <div className=\"sdm-overwrite-msg\">\n            {t('Are you sure you want to overwrite this dataset?')}\n          </div>\n        )}\n      </Styles>\n    </StyledModal>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}