{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useState } from 'react';\nimport moment from 'moment';\nimport { t, styled } from '@superset-ui/core';\nimport Icons from 'src/components/Icons';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst REFRESH_INTERVAL = 60000; // every minute\nmoment.updateLocale('en', {\n  calendar: {\n    lastDay: '[Yesterday at] LTS',\n    sameDay: '[Today at] LTS',\n    nextDay: '[Tomorrow at] LTS',\n    lastWeek: '[last] dddd [at] LTS',\n    nextWeek: 'dddd [at] LTS',\n    sameElse: 'L' } });\n\n\nconst TextStyles = styled.span`\n  color: ${(_ref) => {let { theme } = _ref;return theme.colors.grayscale.base;}};\n`;\nconst Refresh = styled(Icons.Refresh)`\n  color: ${(_ref2) => {let { theme } = _ref2;return theme.colors.primary.base;}};\n  width: auto;\n  height: ${(_ref3) => {let { theme } = _ref3;return theme.gridUnit * 5;}}px;\n  position: relative;\n  top: ${(_ref4) => {let { theme } = _ref4;return theme.gridUnit;}}px;\n  left: ${(_ref5) => {let { theme } = _ref5;return theme.gridUnit;}}px;\n  cursor: pointer;\n`;\nexport const LastUpdated = (_ref6) => {let { updatedAt, update } = _ref6;\n  const [timeSince, setTimeSince] = useState(moment(updatedAt));\n  useEffect(() => {\n    setTimeSince(() => moment(updatedAt));\n    // update UI every minute in case day changes\n    const interval = setInterval(() => {\n      setTimeSince(() => moment(updatedAt));\n    }, REFRESH_INTERVAL);\n    return () => clearInterval(interval);\n  }, [updatedAt]);\n  return ___EmotionJSX(TextStyles, null,\n  t('Last Updated %s', timeSince.isValid() ? timeSince.calendar() : '--'),\n  update && ___EmotionJSX(Refresh, { onClick: update }));\n\n};\nexport default LastUpdated;","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA8D,OAA9D;AACA,OAAOC,MAAP,MAA4C,QAA5C;AACA,SAASC,CAAT,EAAYC,MAAZ,QAA0B,mBAA1B;AACA,OAAOC,KAAP,MAAkB,sBAAlB,C;AAEA,MAAMC,gBAAgB,GAAG,KAAzB,C,CAAgC;AAMhCJ,MAAM,CAACK,YAAP,CAAoB,IAApB,EAA0B;EACxBC,QAAQ,EAAE;IACRC,OAAO,EAAE,oBADD;IAERC,OAAO,EAAE,gBAFD;IAGRC,OAAO,EAAE,mBAHD;IAIRC,QAAQ,EAAE,sBAJF;IAKRC,QAAQ,EAAE,eALF;IAMRC,QAAQ,EAAE,GANF,EADc,EAA1B;;;AAWA,MAAMC,UAAU,GAAGX,MAAM,CAACY,IAAI;WACnB,eAAC,EAAEC,KAAF,EAAD,eAAeA,KAAK,CAACC,MAAN,CAAaC,SAAb,CAAuBC,IAAtC,EAA0C;CADrD;AAIA,MAAMC,OAAO,GAAGjB,MAAM,CAACC,KAAK,CAACgB,OAAP,CAAe;WAC1B,gBAAC,EAAEJ,KAAF,EAAD,gBAAeA,KAAK,CAACC,MAAN,CAAaI,OAAb,CAAqBF,IAApC,EAAwC;;YAEvC,gBAAC,EAAEH,KAAF,EAAD,gBAAeA,KAAK,CAACM,QAAN,GAAiB,CAAhC,EAAiC;;SAEpC,gBAAC,EAAEN,KAAF,EAAD,gBAAeA,KAAK,CAACM,QAArB,EAA6B;UAC5B,gBAAC,EAAEN,KAAF,EAAD,gBAAeA,KAAK,CAACM,QAArB,EAA6B;;CANvC;AAUA,OAAO,MAAMC,WAAW,GAAwC,WAG3D,KAH4D,EAC/DC,SAD+D,EAE/DC,MAF+D,EAG5D;EACH,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4B3B,QAAQ,CAASC,MAAM,CAACuB,SAAD,CAAf,CAA1C;EAEAzB,SAAS,CAAC,MAAK;IACb4B,YAAY,CAAC,MAAM1B,MAAM,CAACuB,SAAD,CAAb,CAAZ;IAEA;IACA,MAAMI,QAAQ,GAAGC,WAAW,CAAC,MAAK;MAChCF,YAAY,CAAC,MAAM1B,MAAM,CAACuB,SAAD,CAAb,CAAZ;IACD,CAF2B,EAEzBnB,gBAFyB,CAA5B;IAIA,OAAO,MAAMyB,aAAa,CAACF,QAAD,CAA1B;EACD,CATQ,EASN,CAACJ,SAAD,CATM,CAAT;EAWA,OACE,cAAC,UAAD;EACGtB,CAAC,CAAC,iBAAD,EAAoBwB,SAAS,CAACK,OAAV,KAAsBL,SAAS,CAACnB,QAAV,EAAtB,GAA6C,IAAjE,CADJ;EAEGkB,MAAM,IAAI,cAAC,OAAD,IAAS,OAAO,EAAEA,MAAlB,GAFb,CADF;;AAMD,CAvBM;AAyBP,eAAeF,WAAf","names":["React","useEffect","useState","moment","t","styled","Icons","REFRESH_INTERVAL","updateLocale","calendar","lastDay","sameDay","nextDay","lastWeek","nextWeek","sameElse","TextStyles","span","theme","colors","grayscale","base","Refresh","primary","gridUnit","LastUpdated","updatedAt","update","timeSince","setTimeSince","interval","setInterval","clearInterval","isValid"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/LastUpdated/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useState, FunctionComponent } from 'react';\nimport moment, { Moment, MomentInput } from 'moment';\nimport { t, styled } from '@superset-ui/core';\nimport Icons from 'src/components/Icons';\n\nconst REFRESH_INTERVAL = 60000; // every minute\n\ninterface LastUpdatedProps {\n  updatedAt: MomentInput;\n  update?: React.MouseEventHandler<HTMLSpanElement>;\n}\nmoment.updateLocale('en', {\n  calendar: {\n    lastDay: '[Yesterday at] LTS',\n    sameDay: '[Today at] LTS',\n    nextDay: '[Tomorrow at] LTS',\n    lastWeek: '[last] dddd [at] LTS',\n    nextWeek: 'dddd [at] LTS',\n    sameElse: 'L',\n  },\n});\n\nconst TextStyles = styled.span`\n  color: ${({ theme }) => theme.colors.grayscale.base};\n`;\n\nconst Refresh = styled(Icons.Refresh)`\n  color: ${({ theme }) => theme.colors.primary.base};\n  width: auto;\n  height: ${({ theme }) => theme.gridUnit * 5}px;\n  position: relative;\n  top: ${({ theme }) => theme.gridUnit}px;\n  left: ${({ theme }) => theme.gridUnit}px;\n  cursor: pointer;\n`;\n\nexport const LastUpdated: FunctionComponent<LastUpdatedProps> = ({\n  updatedAt,\n  update,\n}) => {\n  const [timeSince, setTimeSince] = useState<Moment>(moment(updatedAt));\n\n  useEffect(() => {\n    setTimeSince(() => moment(updatedAt));\n\n    // update UI every minute in case day changes\n    const interval = setInterval(() => {\n      setTimeSince(() => moment(updatedAt));\n    }, REFRESH_INTERVAL);\n\n    return () => clearInterval(interval);\n  }, [updatedAt]);\n\n  return (\n    <TextStyles>\n      {t('Last Updated %s', timeSince.isValid() ? timeSince.calendar() : '--')}\n      {update && <Refresh onClick={update} />}\n    </TextStyles>\n  );\n};\n\nexport default LastUpdated;\n"]},"metadata":{},"sourceType":"module"}