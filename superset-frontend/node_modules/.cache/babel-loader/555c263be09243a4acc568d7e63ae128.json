{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useState, useRef } from 'react';\nimport { SupersetClient, logging, t } from '@superset-ui/core';\nimport { addDangerToast } from 'src/components/MessageToasts/actions';\nimport DatasetPanel from './DatasetPanel';\nimport { isIDatabaseTable } from './types';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst DatasetPanelWrapper = (_ref) => {let { tableName, dbId, schema, setHasColumns, datasets } = _ref;\n  const [columnList, setColumnList] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const tableNameRef = useRef(tableName);\n  const getTableMetadata = async (props) => {\n    const { dbId, tableName, schema } = props;\n    setLoading(true);\n    setHasColumns == null ? void 0 : setHasColumns(false);\n    const path = `/api/v1/database/${dbId}/table/${tableName}/${schema}/`;\n    try {\n      const response = await SupersetClient.get({\n        endpoint: path });\n\n      if (isIDatabaseTable(response == null ? void 0 : response.json)) {\n        const table = response.json;\n        /**\n         *  The user is able to click other table columns while the http call for last selected table column is made\n         *  This check ensures we process the response that matches the last selected table name and ignore the others\n         */\n        if (table.name === tableNameRef.current) {\n          setColumnList(table.columns);\n          setHasColumns == null ? void 0 : setHasColumns(table.columns.length > 0);\n          setHasError(false);\n        }\n      } else\n      {\n        setColumnList([]);\n        setHasColumns == null ? void 0 : setHasColumns(false);\n        setHasError(true);\n        addDangerToast(t('The API response from %s does not match the IDatabaseTable interface.', path));\n        logging.error(t('The API response from %s does not match the IDatabaseTable interface.', path));\n      }\n    }\n    catch (error) {\n      setColumnList([]);\n      setHasColumns == null ? void 0 : setHasColumns(false);\n      setHasError(true);\n    } finally\n    {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    tableNameRef.current = tableName;\n    if (tableName && schema && dbId) {\n      getTableMetadata({ tableName, dbId, schema });\n    }\n    // getTableMetadata is a const and should not be in dependency array\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [tableName, dbId, schema]);\n  return ___EmotionJSX(DatasetPanel, { columnList: columnList, hasError: hasError, loading: loading, tableName: tableName, datasets: datasets });\n};\nexport default DatasetPanelWrapper;","map":{"version":3,"mappings":"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","names":["React","useEffect","useState","useRef","SupersetClient","logging","t","addDangerToast","DatasetPanel","isIDatabaseTable","DatasetPanelWrapper","tableName","dbId","schema","setHasColumns","datasets","columnList","setColumnList","loading","setLoading","hasError","setHasError","tableNameRef","getTableMetadata","props","path","response","get","endpoint","json","table","name","current","columns","length","error"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/features/datasets/AddDataset/DatasetPanel/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useState, useRef } from 'react';\nimport { SupersetClient, logging, t } from '@superset-ui/core';\nimport { DatasetObject } from 'src/features/datasets/AddDataset/types';\nimport { addDangerToast } from 'src/components/MessageToasts/actions';\nimport DatasetPanel from './DatasetPanel';\nimport { ITableColumn, IDatabaseTable, isIDatabaseTable } from './types';\n\n/**\n * Interface for the getTableMetadata API call\n */\ninterface IColumnProps {\n  /**\n   * Unique id of the database\n   */\n  dbId: number;\n  /**\n   * Name of the table\n   */\n  tableName: string;\n  /**\n   * Name of the schema\n   */\n  schema: string;\n}\n\nexport interface IDatasetPanelWrapperProps {\n  /**\n   * Name of the database table\n   */\n  tableName?: string | null;\n  /**\n   * Database ID\n   */\n  dbId?: number;\n  /**\n   * The selected schema for the database\n   */\n  schema?: string | null;\n  setHasColumns?: Function;\n  datasets?: DatasetObject[] | undefined;\n}\n\nconst DatasetPanelWrapper = ({\n  tableName,\n  dbId,\n  schema,\n  setHasColumns,\n  datasets,\n}: IDatasetPanelWrapperProps) => {\n  const [columnList, setColumnList] = useState<ITableColumn[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const tableNameRef = useRef(tableName);\n\n  const getTableMetadata = async (props: IColumnProps) => {\n    const { dbId, tableName, schema } = props;\n    setLoading(true);\n    setHasColumns?.(false);\n    const path = `/api/v1/database/${dbId}/table/${tableName}/${schema}/`;\n    try {\n      const response = await SupersetClient.get({\n        endpoint: path,\n      });\n\n      if (isIDatabaseTable(response?.json)) {\n        const table: IDatabaseTable = response.json as IDatabaseTable;\n        /**\n         *  The user is able to click other table columns while the http call for last selected table column is made\n         *  This check ensures we process the response that matches the last selected table name and ignore the others\n         */\n        if (table.name === tableNameRef.current) {\n          setColumnList(table.columns);\n          setHasColumns?.(table.columns.length > 0);\n          setHasError(false);\n        }\n      } else {\n        setColumnList([]);\n        setHasColumns?.(false);\n        setHasError(true);\n        addDangerToast(\n          t(\n            'The API response from %s does not match the IDatabaseTable interface.',\n            path,\n          ),\n        );\n        logging.error(\n          t(\n            'The API response from %s does not match the IDatabaseTable interface.',\n            path,\n          ),\n        );\n      }\n    } catch (error) {\n      setColumnList([]);\n      setHasColumns?.(false);\n      setHasError(true);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    tableNameRef.current = tableName;\n    if (tableName && schema && dbId) {\n      getTableMetadata({ tableName, dbId, schema });\n    }\n    // getTableMetadata is a const and should not be in dependency array\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [tableName, dbId, schema]);\n\n  return (\n    <DatasetPanel\n      columnList={columnList}\n      hasError={hasError}\n      loading={loading}\n      tableName={tableName}\n      datasets={datasets}\n    />\n  );\n};\n\nexport default DatasetPanelWrapper;\n"]},"metadata":{},"sourceType":"module"}