{"ast":null,"code":"import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";function findParentId(structure) {\n  let parentId = null;\n  if (structure) {\n    const { childId, layout = {} } = structure;\n    // default assignment to layout only works if value is undefined, not null\n    if (layout) {\n      const ids = Object.keys(layout);\n      for (let i = 0; i <= ids.length - 1; i += 1) {var _component$children;\n        const id = ids[i];\n        const component = layout[id] || {};\n        if (id !== childId && component != null && (_component$children = component.children) != null && _includesInstanceProperty(_component$children) != null && _includesInstanceProperty(_component$children).call(_component$children, childId)) {\n          parentId = id;\n          break;\n        }\n      }\n    }\n  }\n  return parentId;\n}\nconst cache = {};\nexport default function findParentIdWithCache(structure) {\n  let parentId = null;\n  if (structure) {\n    const { childId, layout = {} } = structure;\n    if (cache[childId]) {var _lastParent$children;\n      const lastParent = (layout == null ? void 0 : layout[cache[childId]]) || {};\n      if (lastParent != null && lastParent.children && lastParent != null && (_lastParent$children = lastParent.children) != null && _includesInstanceProperty(_lastParent$children) != null && _includesInstanceProperty(_lastParent$children).call(_lastParent$children, childId)) {\n        return lastParent.id;\n      }\n    }\n    parentId = findParentId({ childId, layout });\n    cache[childId] = parentId;\n  }\n  return parentId;\n}","map":{"version":3,"mappings":"gGA8BA,SAASA,YAAT,CAAsBC,SAAtB,EAA2C;EACzC,IAAIC,QAAQ,GAAG,IAAf;EACA,IAAID,SAAJ,EAAe;IACb,MAAM,EAAEE,OAAF,EAAWC,MAAM,GAAG,EAApB,KAA2BH,SAAjC;IACA;IACA,IAAIG,MAAJ,EAAY;MACV,MAAMC,GAAG,GAAGC,MAAM,CAACC,IAAP,CAAYH,MAAZ,CAAZ;MACA,KAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIH,GAAG,CAACI,MAAJ,GAAa,CAAlC,EAAqCD,CAAC,IAAI,CAA1C,EAA6C;QAC3C,MAAME,EAAE,GAAGL,GAAG,CAACG,CAAD,CAAd;QACA,MAAMG,SAAS,GAAGP,MAAM,CAACM,EAAD,CAAN,IAAc,EAAhC;QACA,IAAIA,EAAE,KAAKP,OAAP,IAAkBQ,SAAlB,mCAAkBA,SAAS,CAAEC,QAA7B,uEAAkB,yEAAgCT,OAAhC,CAAtB,EAAgE;UAC9DD,QAAQ,GAAGQ,EAAX;UACA;QACD;MACF;IACF;EACF;EACD,OAAOR,QAAP;AACD;AAED,MAAMW,KAAK,GAAG,EAAd;AACA,eAAc,SAAUC,qBAAV,CACZb,SADY,EACS;EAErB,IAAIC,QAAQ,GAAG,IAAf;EACA,IAAID,SAAJ,EAAe;IACb,MAAM,EAAEE,OAAF,EAAWC,MAAM,GAAG,EAApB,KAA2BH,SAAjC;IACA,IAAIY,KAAK,CAACV,OAAD,CAAT,EAAoB;MAClB,MAAMY,UAAU,GAAG,OAAM,QAAN,kBAAM,CAAGF,KAAK,CAACV,OAAD,CAAR,CAAN,KAA4B,EAA/C;MACA,IAAIY,UAAU,QAAV,cAAU,CAAEH,QAAZ,IAAwBG,UAAxB,oCAAwBA,UAAU,CAAEH,QAApC,wEAAwB,2EAAiCT,OAAjC,CAA5B,EAAuE;QACrE,OAAOY,UAAU,CAACL,EAAlB;MACD;IACF;IACDR,QAAQ,GAAGF,YAAY,CAAC,EAAEG,OAAF,EAAWC,MAAX,EAAD,CAAvB;IACAS,KAAK,CAACV,OAAD,CAAL,GAAiBD,QAAjB;EACD;EACD,OAAOA,QAAP;AACD","names":["findParentId","structure","parentId","childId","layout","ids","Object","keys","i","length","id","component","children","cache","findParentIdWithCache","lastParent"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/dashboard/util/findParentId.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\ninterface ILayoutItem {\n  [key: string]: {\n    id: string;\n    children: string[];\n  };\n}\n\ninterface IStructure {\n  childId: string;\n  layout: ILayoutItem;\n}\n\nfunction findParentId(structure: IStructure): string | null {\n  let parentId = null;\n  if (structure) {\n    const { childId, layout = {} } = structure;\n    // default assignment to layout only works if value is undefined, not null\n    if (layout) {\n      const ids = Object.keys(layout);\n      for (let i = 0; i <= ids.length - 1; i += 1) {\n        const id = ids[i];\n        const component = layout[id] || {};\n        if (id !== childId && component?.children?.includes?.(childId)) {\n          parentId = id;\n          break;\n        }\n      }\n    }\n  }\n  return parentId;\n}\n\nconst cache = {};\nexport default function findParentIdWithCache(\n  structure: IStructure,\n): string | null {\n  let parentId = null;\n  if (structure) {\n    const { childId, layout = {} } = structure;\n    if (cache[childId]) {\n      const lastParent = layout?.[cache[childId]] || {};\n      if (lastParent?.children && lastParent?.children?.includes?.(childId)) {\n        return lastParent.id;\n      }\n    }\n    parentId = findParentId({ childId, layout });\n    cache[childId] = parentId;\n  }\n  return parentId;\n}\n"]},"metadata":{},"sourceType":"module"}