{"ast":null,"code":"import _omitBy from \"lodash/omitBy\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useContext, useEffect, useReducer } from 'react';\nimport { defineSharedModules, FeatureFlag, getChartMetadataRegistry, logging, makeApi } from '@superset-ui/core';\nimport { isFeatureEnabled } from 'src/featureFlags';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst metadataRegistry = getChartMetadataRegistry();\nconst dummyPluginContext = {\n  loading: true,\n  dynamicPlugins: {},\n  keys: [],\n  mountedPluginMetadata: {},\n  fetchAll: () => {} };\n\n/**\n * It is highly recommended to use the usePluginContext hook instead.\n * @see usePluginContext\n */\nexport const PluginContext = /*#__PURE__*/React.createContext(dummyPluginContext);\n/**\n * The plugin context provides info about what dynamic plugins are available.\n * It also provides loading info for the plugins' javascript bundles.\n *\n * Note: This does not include any information about static plugins.\n * Those are compiled into the Superset bundle at build time.\n * Dynamic plugins are added by the end user and can be any webhosted javascript.\n */\nexport const usePluginContext = () => useContext(PluginContext);\nfunction getRegistryData() {\n  return {\n    keys: metadataRegistry.keys(),\n    mountedPluginMetadata: _omitBy(metadataRegistry.getMap(), (value) => value === undefined) // cast required to get rid of undefined values\n  };\n}\nfunction pluginContextReducer(state, action) {\n  switch (action.type) {\n    case 'begin':{\n        const plugins = { ...state.dynamicPlugins };\n        action.keys.forEach((key) => {\n          plugins[key] = { key, error: null, mounting: true };\n        });\n        return {\n          ...state,\n          loading: action.keys.length > 0,\n          dynamicPlugins: plugins };\n\n      }\n    case 'complete':{\n        return {\n          ...state,\n          loading: Object.values(state.dynamicPlugins).some((plugin) => plugin.mounting && plugin.key !== action.key),\n          dynamicPlugins: {\n            ...state.dynamicPlugins,\n            [action.key]: {\n              key: action.key,\n              mounting: false,\n              error: action.error } } };\n\n\n\n      }\n    case 'changed keys':{\n        return {\n          ...state,\n          ...getRegistryData() };\n\n      }\n    default:\n      return state;}\n\n}\nconst pluginApi = makeApi({\n  method: 'GET',\n  endpoint: '/dynamic-plugins/api/read' });\n\nconst sharedModules = {\n  react: () => import('react'),\n  lodash: () => import('lodash'),\n  'react-dom': () => import('react-dom'),\n  '@superset-ui/chart-controls': () => import('@superset-ui/chart-controls'),\n  '@superset-ui/core': () => import('@superset-ui/core') };\n\nexport const DynamicPluginProvider = (_ref) => {let { children } = _ref;\n  const [pluginState, dispatch] = useReducer(pluginContextReducer, dummyPluginContext, (state) => ({\n    ...state,\n    ...getRegistryData(),\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    fetchAll,\n    loading: isFeatureEnabled(FeatureFlag.DYNAMIC_PLUGINS)\n    // TODO: Write fetchByKeys\n  }));\n  // For now, we fetch all the plugins at the same time.\n  // In the future it would be nice to fetch on an as-needed basis.\n  // That will most likely depend on having a json manifest for each plugin.\n  async function fetchAll() {\n    try {\n      await defineSharedModules(sharedModules);\n      const { result: plugins } = await pluginApi({});\n      dispatch({ type: 'begin', keys: plugins.map((plugin) => plugin.key) });\n      await Promise.all(plugins.map(async (plugin) => {\n        let error = null;\n        try {\n          await import( /* webpackIgnore: true */plugin.bundle_url);\n        }\n        catch (err) {\n          logging.error(`Failed to load plugin ${plugin.key} with the following error:`, err.stack);\n          error = err;\n        }\n        dispatch({\n          type: 'complete',\n          key: plugin.key,\n          error });\n\n      }));\n    }\n    catch (error) {\n      logging.error('Failed to load dynamic plugins', error.stack || error);\n    }\n  }\n  useEffect(() => {\n    if (isFeatureEnabled(FeatureFlag.DYNAMIC_PLUGINS)) {\n      fetchAll();\n    }\n    const registryListener = () => {\n      dispatch({ type: 'changed keys' });\n    };\n    metadataRegistry.addListener(registryListener);\n    return () => {\n      metadataRegistry.removeListener(registryListener);\n    };\n  }, []);\n  return ___EmotionJSX(PluginContext.Provider, { value: pluginState },\n  children);\n\n};","map":{"version":3,"mappings":"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","names":["React","useContext","useEffect","useReducer","defineSharedModules","FeatureFlag","getChartMetadataRegistry","logging","makeApi","isFeatureEnabled","metadataRegistry","dummyPluginContext","loading","dynamicPlugins","keys","mountedPluginMetadata","fetchAll","PluginContext","createContext","usePluginContext","getRegistryData","getMap","value","undefined","pluginContextReducer","state","action","type","plugins","forEach","key","error","mounting","length","Object","values","some","plugin","pluginApi","method","endpoint","sharedModules","react","lodash","DynamicPluginProvider","children","pluginState","dispatch","DYNAMIC_PLUGINS","result","map","Promise","all","bundle_url","err","stack","registryListener","addListener","removeListener"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/DynamicPlugins/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useContext, useEffect, useReducer } from 'react';\nimport {\n  ChartMetadata,\n  defineSharedModules,\n  FeatureFlag,\n  getChartMetadataRegistry,\n  logging,\n  makeApi,\n} from '@superset-ui/core';\nimport { isFeatureEnabled } from 'src/featureFlags';\nimport { omitBy } from 'lodash';\n\nconst metadataRegistry = getChartMetadataRegistry();\n\nexport type PluginContextType = {\n  loading: boolean;\n  /** These are actually only the dynamic plugins */\n  dynamicPlugins: {\n    [key: string]: {\n      key: string;\n      mounting: boolean;\n      error: null | Error;\n    };\n  };\n  keys: string[];\n  /** Mounted means the plugin's js bundle has been imported */\n  mountedPluginMetadata: Record<string, ChartMetadata>;\n  fetchAll: () => void;\n};\n\nconst dummyPluginContext: PluginContextType = {\n  loading: true,\n  dynamicPlugins: {},\n  keys: [],\n  mountedPluginMetadata: {},\n  fetchAll: () => {},\n};\n\n/**\n * It is highly recommended to use the usePluginContext hook instead.\n * @see usePluginContext\n */\nexport const PluginContext = React.createContext(dummyPluginContext);\n\n/**\n * The plugin context provides info about what dynamic plugins are available.\n * It also provides loading info for the plugins' javascript bundles.\n *\n * Note: This does not include any information about static plugins.\n * Those are compiled into the Superset bundle at build time.\n * Dynamic plugins are added by the end user and can be any webhosted javascript.\n */\nexport const usePluginContext = () => useContext(PluginContext);\n\n// the plugin returned from the API\ntype Plugin = {\n  name: string;\n  key: string;\n  bundle_url: string;\n  id: number;\n};\n\n// when a plugin completes loading\ntype CompleteAction = {\n  type: 'complete';\n  key: string;\n  error: null | Error;\n};\n\n// when plugins start loading\ntype BeginAction = {\n  type: 'begin';\n  keys: string[];\n};\n\ntype ChangedKeysAction = {\n  type: 'changed keys';\n};\n\ntype PluginAction = BeginAction | CompleteAction | ChangedKeysAction;\n\nfunction getRegistryData() {\n  return {\n    keys: metadataRegistry.keys(),\n    mountedPluginMetadata: omitBy(\n      metadataRegistry.getMap(),\n      value => value === undefined,\n    ) as Record<string, ChartMetadata>, // cast required to get rid of undefined values\n  };\n}\n\nfunction pluginContextReducer(\n  state: PluginContextType,\n  action: PluginAction,\n): PluginContextType {\n  switch (action.type) {\n    case 'begin': {\n      const plugins = { ...state.dynamicPlugins };\n      action.keys.forEach(key => {\n        plugins[key] = { key, error: null, mounting: true };\n      });\n      return {\n        ...state,\n        loading: action.keys.length > 0,\n        dynamicPlugins: plugins,\n      };\n    }\n    case 'complete': {\n      return {\n        ...state,\n        loading: Object.values(state.dynamicPlugins).some(\n          plugin => plugin.mounting && plugin.key !== action.key,\n        ),\n        dynamicPlugins: {\n          ...state.dynamicPlugins,\n          [action.key]: {\n            key: action.key,\n            mounting: false,\n            error: action.error,\n          },\n        },\n      };\n    }\n    case 'changed keys': {\n      return {\n        ...state,\n        ...getRegistryData(),\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nconst pluginApi = makeApi<{}, { result: Plugin[] }>({\n  method: 'GET',\n  endpoint: '/dynamic-plugins/api/read',\n});\n\nconst sharedModules = {\n  react: () => import('react'),\n  lodash: () => import('lodash'),\n  'react-dom': () => import('react-dom'),\n  '@superset-ui/chart-controls': () => import('@superset-ui/chart-controls'),\n  '@superset-ui/core': () => import('@superset-ui/core'),\n};\n\nexport const DynamicPluginProvider: React.FC = ({ children }) => {\n  const [pluginState, dispatch] = useReducer(\n    pluginContextReducer,\n    dummyPluginContext,\n    state => ({\n      ...state,\n      ...getRegistryData(),\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      fetchAll,\n      loading: isFeatureEnabled(FeatureFlag.DYNAMIC_PLUGINS),\n      // TODO: Write fetchByKeys\n    }),\n  );\n\n  // For now, we fetch all the plugins at the same time.\n  // In the future it would be nice to fetch on an as-needed basis.\n  // That will most likely depend on having a json manifest for each plugin.\n  async function fetchAll() {\n    try {\n      await defineSharedModules(sharedModules);\n      const { result: plugins } = await pluginApi({});\n      dispatch({ type: 'begin', keys: plugins.map(plugin => plugin.key) });\n      await Promise.all(\n        plugins.map(async plugin => {\n          let error: Error | null = null;\n          try {\n            await import(/* webpackIgnore: true */ plugin.bundle_url);\n          } catch (err) {\n            logging.error(\n              `Failed to load plugin ${plugin.key} with the following error:`,\n              err.stack,\n            );\n            error = err;\n          }\n          dispatch({\n            type: 'complete',\n            key: plugin.key,\n            error,\n          });\n        }),\n      );\n    } catch (error) {\n      logging.error('Failed to load dynamic plugins', error.stack || error);\n    }\n  }\n\n  useEffect(() => {\n    if (isFeatureEnabled(FeatureFlag.DYNAMIC_PLUGINS)) {\n      fetchAll();\n    }\n    const registryListener = () => {\n      dispatch({ type: 'changed keys' });\n    };\n    metadataRegistry.addListener(registryListener);\n    return () => {\n      metadataRegistry.removeListener(registryListener);\n    };\n  }, []);\n\n  return (\n    <PluginContext.Provider value={pluginState}>\n      {children}\n    </PluginContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}