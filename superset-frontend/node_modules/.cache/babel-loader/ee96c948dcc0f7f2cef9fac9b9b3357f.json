{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { t, isAdhocColumn } from '@superset-ui/core';\nimport { isColumnMeta } from '@superset-ui/chart-controls';\nimport { ExplorePopoverContent } from 'src/explore/components/ExploreContentPopover';\nimport { SaveDatasetModal } from 'src/SqlLab/components/SaveDatasetModal';\nimport ColumnSelectPopover from './ColumnSelectPopover';\nimport { DndColumnSelectPopoverTitle } from './DndColumnSelectPopoverTitle';\nimport ControlPopover from '../ControlPopover/ControlPopover';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst defaultPopoverLabel = t('My column');\nconst editableTitleTab = 'sqlExpression';\nconst ColumnSelectPopoverTrigger = (_ref) => {let { columns, editedColumn, onColumnEdit, isControlledComponent, children, isTemporal, ...props } = _ref;\n  // @ts-ignore\n  const datasource = useSelector((state) => state.explore.datasource);\n  const [popoverLabel, setPopoverLabel] = useState(defaultPopoverLabel);\n  const [popoverVisible, setPopoverVisible] = useState(false);\n  const [isTitleEditDisabled, setIsTitleEditDisabled] = useState(true);\n  const [hasCustomLabel, setHasCustomLabel] = useState(false);\n  const [showDatasetModal, setDatasetModal] = useState(false);\n  let initialPopoverLabel = defaultPopoverLabel;\n  if (editedColumn && isColumnMeta(editedColumn)) {\n    initialPopoverLabel = editedColumn.verbose_name || editedColumn.column_name;\n  } else\n  if (editedColumn && isAdhocColumn(editedColumn)) {\n    initialPopoverLabel = editedColumn.label || defaultPopoverLabel;\n  }\n  useEffect(() => {\n    setPopoverLabel(initialPopoverLabel);\n  }, [initialPopoverLabel, popoverVisible]);\n  const togglePopover = useCallback((visible) => {\n    setPopoverVisible(visible);\n  }, []);\n  const closePopover = useCallback(() => {\n    setPopoverVisible(false);\n  }, []);\n  const { visible, handleTogglePopover, handleClosePopover } = isControlledComponent ?\n  {\n    visible: props.visible,\n    handleTogglePopover: props.togglePopover,\n    handleClosePopover: props.closePopover } :\n\n  {\n    visible: popoverVisible,\n    handleTogglePopover: togglePopover,\n    handleClosePopover: closePopover };\n\n  const getCurrentTab = useCallback((tab) => {\n    setIsTitleEditDisabled(tab !== editableTitleTab);\n  }, []);\n  const overlayContent = useMemo(() => ___EmotionJSX(ExplorePopoverContent, null,\n  ___EmotionJSX(ColumnSelectPopover, { editedColumn: editedColumn, columns: columns, setDatasetModal: setDatasetModal, onClose: handleClosePopover, onChange: onColumnEdit, label: popoverLabel, setLabel: setPopoverLabel, getCurrentTab: getCurrentTab, isTemporal: isTemporal })),\n  [\n  columns,\n  editedColumn,\n  getCurrentTab,\n  handleClosePopover,\n  isTemporal,\n  onColumnEdit,\n  popoverLabel]);\n\n  const onLabelChange = useCallback((e) => {\n    setPopoverLabel(e.target.value);\n    setHasCustomLabel(true);\n  }, []);\n  const popoverTitle = useMemo(() => ___EmotionJSX(DndColumnSelectPopoverTitle, { title: popoverLabel, onChange: onLabelChange, isEditDisabled: isTitleEditDisabled, hasCustomLabel: hasCustomLabel }), [hasCustomLabel, isTitleEditDisabled, onLabelChange, popoverLabel]);\n  return ___EmotionJSX(React.Fragment, null,\n  showDatasetModal && ___EmotionJSX(SaveDatasetModal, { visible: showDatasetModal, onHide: () => setDatasetModal(false), buttonTextOnSave: t('Save'), buttonTextOnOverwrite: t('Overwrite'), modalDescription: t('Save this query as a virtual dataset to continue exploring'), datasource: datasource }),\n  ___EmotionJSX(ControlPopover, { trigger: \"click\", content: overlayContent, defaultVisible: visible, visible: visible, onVisibleChange: handleTogglePopover, title: popoverTitle, destroyTooltipOnHide: true },\n  children));\n\n\n};\nexport default ColumnSelectPopoverTrigger;","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,OAAxC,EAAiDC,QAAjD,QAAiE,OAAjE;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAAsBC,CAAtB,EAAyBC,aAAzB,QAA8C,mBAA9C;AACA,SAAqBC,YAArB,QAAyC,6BAAzC;AACA,SAASC,qBAAT,QAAsC,8CAAtC;AACA,SAASC,gBAAT,QAAiC,wCAAjC;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,SAASC,2BAAT,QAA4C,+BAA5C;AACA,OAAOC,cAAP,MAA2B,kCAA3B,C;AAcA,MAAMC,mBAAmB,GAAGR,CAAC,CAAC,WAAD,CAA7B;AACA,MAAMS,gBAAgB,GAAG,eAAzB;AAEA,MAAMC,0BAA0B,GAAG,UAQG,KARF,EAClCC,OADkC,EAElCC,YAFkC,EAGlCC,YAHkC,EAIlCC,qBAJkC,EAKlCC,QALkC,EAMlCC,UANkC,EAOlC,GAAGC,KAP+B,EAQE;EACpC;EACA,MAAMC,UAAU,GAAGnB,WAAW,CAAC,MAAK,KAAIoB,KAAK,CAACC,OAAN,CAAcF,UAAxB,CAA9B;EACA,MAAM,CAACG,YAAD,EAAeC,eAAf,IAAkCxB,QAAQ,CAACU,mBAAD,CAAhD;EACA,MAAM,CAACe,cAAD,EAAiBC,iBAAjB,IAAsC1B,QAAQ,CAAC,KAAD,CAApD;EACA,MAAM,CAAC2B,mBAAD,EAAsBC,sBAAtB,IAAgD5B,QAAQ,CAAC,IAAD,CAA9D;EACA,MAAM,CAAC6B,cAAD,EAAiBC,iBAAjB,IAAsC9B,QAAQ,CAAC,KAAD,CAApD;EACA,MAAM,CAAC+B,gBAAD,EAAmBC,eAAnB,IAAsChC,QAAQ,CAAC,KAAD,CAApD;EAEA,IAAIiC,mBAAmB,GAAGvB,mBAA1B;EACA,IAAII,YAAY,IAAIV,YAAY,CAACU,YAAD,CAAhC,EAAgD;IAC9CmB,mBAAmB,GAAGnB,YAAY,CAACoB,YAAb,IAA6BpB,YAAY,CAACqB,WAAhE;EACD,CAFD;EAEO,IAAIrB,YAAY,IAAIX,aAAa,CAACW,YAAD,CAAjC,EAAiD;IACtDmB,mBAAmB,GAAGnB,YAAY,CAACsB,KAAb,IAAsB1B,mBAA5C;EACD;EAEDZ,SAAS,CAAC,MAAK;IACb0B,eAAe,CAACS,mBAAD,CAAf;EACD,CAFQ,EAEN,CAACA,mBAAD,EAAsBR,cAAtB,CAFM,CAAT;EAIA,MAAMY,aAAa,GAAGxC,WAAW,CAAC,CAACyC,OAAD,KAAqB;IACrDZ,iBAAiB,CAACY,OAAD,CAAjB;EACD,CAFgC,EAE9B,EAF8B,CAAjC;EAIA,MAAMC,YAAY,GAAG1C,WAAW,CAAC,MAAK;IACpC6B,iBAAiB,CAAC,KAAD,CAAjB;EACD,CAF+B,EAE7B,EAF6B,CAAhC;EAIA,MAAM,EAAEY,OAAF,EAAWE,mBAAX,EAAgCC,kBAAhC,KACJzB,qBAAqB;EACjB;IACEsB,OAAO,EAAEnB,KAAK,CAACmB,OADjB;IAEEE,mBAAmB,EAAErB,KAAK,CAACkB,aAF7B;IAGEI,kBAAkB,EAAEtB,KAAK,CAACoB,YAH5B,EADiB;;EAMjB;IACED,OAAO,EAAEb,cADX;IAEEe,mBAAmB,EAAEH,aAFvB;IAGEI,kBAAkB,EAAEF,YAHtB,EAPN;;EAaA,MAAMG,aAAa,GAAG7C,WAAW,CAAC,CAAC8C,GAAD,KAAgB;IAChDf,sBAAsB,CAACe,GAAG,KAAKhC,gBAAT,CAAtB;EACD,CAFgC,EAE9B,EAF8B,CAAjC;EAIA,MAAMiC,cAAc,GAAG7C,OAAO,CAC5B,MACE,cAAC,qBAAD;EACE,cAAC,mBAAD,IACE,YAAY,EAAEe,YADhB,EAEE,OAAO,EAAED,OAFX,EAGE,eAAe,EAAEmB,eAHnB,EAIE,OAAO,EAAES,kBAJX,EAKE,QAAQ,EAAE1B,YALZ,EAME,KAAK,EAAEQ,YANT,EAOE,QAAQ,EAAEC,eAPZ,EAQE,aAAa,EAAEkB,aARjB,EASE,UAAU,EAAExB,UATd,GADF,CAF0B;EAgB5B;EACEL,OADF;EAEEC,YAFF;EAGE4B,aAHF;EAIED,kBAJF;EAKEvB,UALF;EAMEH,YANF;EAOEQ,YAPF,CAhB4B,CAA9B;;EA2BA,MAAMsB,aAAa,GAAGhD,WAAW,CAAC,CAACiD,CAAD,KAAW;IAC3CtB,eAAe,CAACsB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAf;IACAlB,iBAAiB,CAAC,IAAD,CAAjB;EACD,CAHgC,EAG9B,EAH8B,CAAjC;EAKA,MAAMmB,YAAY,GAAGlD,OAAO,CAC1B,MACE,cAAC,2BAAD,IACE,KAAK,EAAEwB,YADT,EAEE,QAAQ,EAAEsB,aAFZ,EAGE,cAAc,EAAElB,mBAHlB,EAIE,cAAc,EAAEE,cAJlB,GAFwB,EAS1B,CAACA,cAAD,EAAiBF,mBAAjB,EAAsCkB,aAAtC,EAAqDtB,YAArD,CAT0B,CAA5B;EAYA,OACE;EACGQ,gBAAgB,IACf,cAAC,gBAAD,IACE,OAAO,EAAEA,gBADX,EAEE,MAAM,EAAE,MAAMC,eAAe,CAAC,KAAD,CAF/B,EAGE,gBAAgB,EAAE9B,CAAC,CAAC,MAAD,CAHrB,EAIE,qBAAqB,EAAEA,CAAC,CAAC,WAAD,CAJ1B,EAKE,gBAAgB,EAAEA,CAAC,CACjB,4DADiB,CALrB,EAQE,UAAU,EAAEkB,UARd,GAFJ;EAaE,cAAC,cAAD,IACE,OAAO,EAAC,OADV,EAEE,OAAO,EAAEwB,cAFX,EAGE,cAAc,EAAEN,OAHlB,EAIE,OAAO,EAAEA,OAJX,EAKE,eAAe,EAAEE,mBALnB,EAME,KAAK,EAAES,YANT,EAOE,oBAAoB,MAPtB;EASGhC,QATH,CAbF,CADF;;;AA2BD,CA5HD;AA8HA,eAAeL,0BAAf","names":["React","useCallback","useEffect","useMemo","useState","useSelector","t","isAdhocColumn","isColumnMeta","ExplorePopoverContent","SaveDatasetModal","ColumnSelectPopover","DndColumnSelectPopoverTitle","ControlPopover","defaultPopoverLabel","editableTitleTab","ColumnSelectPopoverTrigger","columns","editedColumn","onColumnEdit","isControlledComponent","children","isTemporal","props","datasource","state","explore","popoverLabel","setPopoverLabel","popoverVisible","setPopoverVisible","isTitleEditDisabled","setIsTitleEditDisabled","hasCustomLabel","setHasCustomLabel","showDatasetModal","setDatasetModal","initialPopoverLabel","verbose_name","column_name","label","togglePopover","visible","closePopover","handleTogglePopover","handleClosePopover","getCurrentTab","tab","overlayContent","onLabelChange","e","target","value","popoverTitle"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/explore/components/controls/DndColumnSelectControl/ColumnSelectPopoverTrigger.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { AdhocColumn, t, isAdhocColumn } from '@superset-ui/core';\nimport { ColumnMeta, isColumnMeta } from '@superset-ui/chart-controls';\nimport { ExplorePopoverContent } from 'src/explore/components/ExploreContentPopover';\nimport { SaveDatasetModal } from 'src/SqlLab/components/SaveDatasetModal';\nimport ColumnSelectPopover from './ColumnSelectPopover';\nimport { DndColumnSelectPopoverTitle } from './DndColumnSelectPopoverTitle';\nimport ControlPopover from '../ControlPopover/ControlPopover';\n\ninterface ColumnSelectPopoverTriggerProps {\n  columns: ColumnMeta[];\n  editedColumn?: ColumnMeta | AdhocColumn;\n  onColumnEdit: (editedColumn: ColumnMeta | AdhocColumn) => void;\n  isControlledComponent?: boolean;\n  visible?: boolean;\n  togglePopover?: (visible: boolean) => void;\n  closePopover?: () => void;\n  children: React.ReactNode;\n  isTemporal?: boolean;\n}\n\nconst defaultPopoverLabel = t('My column');\nconst editableTitleTab = 'sqlExpression';\n\nconst ColumnSelectPopoverTrigger = ({\n  columns,\n  editedColumn,\n  onColumnEdit,\n  isControlledComponent,\n  children,\n  isTemporal,\n  ...props\n}: ColumnSelectPopoverTriggerProps) => {\n  // @ts-ignore\n  const datasource = useSelector(state => state.explore.datasource);\n  const [popoverLabel, setPopoverLabel] = useState(defaultPopoverLabel);\n  const [popoverVisible, setPopoverVisible] = useState(false);\n  const [isTitleEditDisabled, setIsTitleEditDisabled] = useState(true);\n  const [hasCustomLabel, setHasCustomLabel] = useState(false);\n  const [showDatasetModal, setDatasetModal] = useState(false);\n\n  let initialPopoverLabel = defaultPopoverLabel;\n  if (editedColumn && isColumnMeta(editedColumn)) {\n    initialPopoverLabel = editedColumn.verbose_name || editedColumn.column_name;\n  } else if (editedColumn && isAdhocColumn(editedColumn)) {\n    initialPopoverLabel = editedColumn.label || defaultPopoverLabel;\n  }\n\n  useEffect(() => {\n    setPopoverLabel(initialPopoverLabel);\n  }, [initialPopoverLabel, popoverVisible]);\n\n  const togglePopover = useCallback((visible: boolean) => {\n    setPopoverVisible(visible);\n  }, []);\n\n  const closePopover = useCallback(() => {\n    setPopoverVisible(false);\n  }, []);\n\n  const { visible, handleTogglePopover, handleClosePopover } =\n    isControlledComponent\n      ? {\n          visible: props.visible,\n          handleTogglePopover: props.togglePopover!,\n          handleClosePopover: props.closePopover!,\n        }\n      : {\n          visible: popoverVisible,\n          handleTogglePopover: togglePopover,\n          handleClosePopover: closePopover,\n        };\n\n  const getCurrentTab = useCallback((tab: string) => {\n    setIsTitleEditDisabled(tab !== editableTitleTab);\n  }, []);\n\n  const overlayContent = useMemo(\n    () => (\n      <ExplorePopoverContent>\n        <ColumnSelectPopover\n          editedColumn={editedColumn}\n          columns={columns}\n          setDatasetModal={setDatasetModal}\n          onClose={handleClosePopover}\n          onChange={onColumnEdit}\n          label={popoverLabel}\n          setLabel={setPopoverLabel}\n          getCurrentTab={getCurrentTab}\n          isTemporal={isTemporal}\n        />\n      </ExplorePopoverContent>\n    ),\n    [\n      columns,\n      editedColumn,\n      getCurrentTab,\n      handleClosePopover,\n      isTemporal,\n      onColumnEdit,\n      popoverLabel,\n    ],\n  );\n\n  const onLabelChange = useCallback((e: any) => {\n    setPopoverLabel(e.target.value);\n    setHasCustomLabel(true);\n  }, []);\n\n  const popoverTitle = useMemo(\n    () => (\n      <DndColumnSelectPopoverTitle\n        title={popoverLabel}\n        onChange={onLabelChange}\n        isEditDisabled={isTitleEditDisabled}\n        hasCustomLabel={hasCustomLabel}\n      />\n    ),\n    [hasCustomLabel, isTitleEditDisabled, onLabelChange, popoverLabel],\n  );\n\n  return (\n    <>\n      {showDatasetModal && (\n        <SaveDatasetModal\n          visible={showDatasetModal}\n          onHide={() => setDatasetModal(false)}\n          buttonTextOnSave={t('Save')}\n          buttonTextOnOverwrite={t('Overwrite')}\n          modalDescription={t(\n            'Save this query as a virtual dataset to continue exploring',\n          )}\n          datasource={datasource}\n        />\n      )}\n      <ControlPopover\n        trigger=\"click\"\n        content={overlayContent}\n        defaultVisible={visible}\n        visible={visible}\n        onVisibleChange={handleTogglePopover}\n        title={popoverTitle}\n        destroyTooltipOnHide\n      >\n        {children}\n      </ControlPopover>\n    </>\n  );\n};\n\nexport default ColumnSelectPopoverTrigger;\n"]},"metadata":{},"sourceType":"module"}