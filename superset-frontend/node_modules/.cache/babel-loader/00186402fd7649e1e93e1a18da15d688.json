{"ast":null,"code":"import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { CategoricalColorNamespace, getMetricLabel, getNumberFormatter, NumberFormats, getColumnLabel, getValueFormatter } from '@superset-ui/core';\nimport { DEFAULT_FORM_DATA as DEFAULT_FUNNEL_FORM_DATA, EchartsFunnelLabelTypeType } from './types';\nimport { extractGroupbyLabel, getChartPadding, getColtypesMapping, getLegendProps, sanitizeHtml } from '../utils/series';\nimport { defaultGrid } from '../defaults';\nimport { OpacityEnum, DEFAULT_LEGEND_FORM_DATA } from '../constants';\nimport { getDefaultTooltip } from '../utils/tooltip';\nconst percentFormatter = getNumberFormatter(NumberFormats.PERCENT_2_POINT);\nexport function formatFunnelLabel(_ref) {let { params, labelType, numberFormatter, sanitizeName = false } = _ref;\n  const { name: rawName = '', value, percent } = params;\n  const name = sanitizeName ? sanitizeHtml(rawName) : rawName;\n  const formattedValue = numberFormatter(value);\n  const formattedPercent = percentFormatter(percent / 100);\n  switch (labelType) {\n    case EchartsFunnelLabelTypeType.Key:\n      return name;\n    case EchartsFunnelLabelTypeType.Value:\n      return formattedValue;\n    case EchartsFunnelLabelTypeType.Percent:\n      return formattedPercent;\n    case EchartsFunnelLabelTypeType.KeyValue:\n      return `${name}: ${formattedValue}`;\n    case EchartsFunnelLabelTypeType.KeyValuePercent:\n      return `${name}: ${formattedValue} (${formattedPercent})`;\n    case EchartsFunnelLabelTypeType.KeyPercent:\n      return `${name}: ${formattedPercent}`;\n    default:\n      return name;}\n\n}\nexport default function transformProps(chartProps) {\n  const { formData, height, hooks, filterState, queriesData, width, theme, inContextMenu, emitCrossFilters, datasource } = chartProps;\n  const data = queriesData[0].data || [];\n  const coltypeMapping = getColtypesMapping(queriesData[0]);\n  const { colorScheme, groupby, orient, sort, gap, labelLine, labelType, legendMargin, legendOrientation, legendType, metric = '', numberFormat, showLabels, showLegend, sliceId } = {\n    ...DEFAULT_LEGEND_FORM_DATA,\n    ...DEFAULT_FUNNEL_FORM_DATA,\n    ...formData };\n\n  const { currencyFormats = {}, columnFormats = {} } = datasource;\n  const refs = {};\n  const metricLabel = getMetricLabel(metric);\n  const groupbyLabels = groupby.map(getColumnLabel);\n  const keys = data.map((datum) => extractGroupbyLabel({ datum, groupby: groupbyLabels, coltypeMapping: {} }));\n  const labelMap = data.reduce((acc, datum) => {\n    const label = extractGroupbyLabel({\n      datum,\n      groupby: groupbyLabels,\n      coltypeMapping: {} });\n\n    return {\n      ...acc,\n      [label]: groupbyLabels.map((col) => datum[col]) };\n\n  }, {});\n  const { setDataMask = () => {}, onContextMenu } = hooks;\n  const colorFn = CategoricalColorNamespace.getScale(colorScheme);\n  const numberFormatter = getValueFormatter(metric, currencyFormats, columnFormats, numberFormat);\n  const transformedData = data.map((datum) => {var _context;\n    const name = extractGroupbyLabel({\n      datum,\n      groupby: groupbyLabels,\n      coltypeMapping: {} });\n\n    const isFiltered = filterState.selectedValues && !_includesInstanceProperty(_context = filterState.selectedValues).call(_context, name);\n    return {\n      value: datum[metricLabel],\n      name,\n      itemStyle: {\n        color: colorFn(name, sliceId),\n        opacity: isFiltered ?\n        OpacityEnum.SemiTransparent :\n        OpacityEnum.NonTransparent } };\n\n\n  });\n  const selectedValues = (filterState.selectedValues || []).reduce((acc, selectedValue) => {\n    const index = transformedData.findIndex((_ref2) => {let { name } = _ref2;return name === selectedValue;});\n    return {\n      ...acc,\n      [index]: selectedValue };\n\n  }, {});\n  const formatter = (params) => formatFunnelLabel({ params, numberFormatter, labelType });\n  const defaultLabel = {\n    formatter,\n    show: showLabels,\n    color: theme.colors.grayscale.dark2 };\n\n  const series = [\n  {\n    type: 'funnel',\n    ...getChartPadding(showLegend, legendOrientation, legendMargin),\n    animation: true,\n    minSize: '0%',\n    maxSize: '100%',\n    sort,\n    orient,\n    gap,\n    funnelAlign: 'center',\n    labelLine: { show: !!labelLine },\n    label: {\n      ...defaultLabel,\n      position: labelLine ? 'outer' : 'inner',\n      textBorderColor: 'transparent' },\n\n    emphasis: {\n      label: {\n        show: true,\n        fontWeight: 'bold' } },\n\n\n    // @ts-ignore\n    data: transformedData }];\n\n\n  const echartOptions = {\n    grid: {\n      ...defaultGrid },\n\n    tooltip: {\n      ...getDefaultTooltip(refs),\n      show: !inContextMenu,\n      trigger: 'item',\n      formatter: (params) => formatFunnelLabel({\n        params,\n        numberFormatter,\n        labelType: EchartsFunnelLabelTypeType.KeyValuePercent }) },\n\n\n    legend: {\n      ...getLegendProps(legendType, legendOrientation, showLegend, theme),\n      data: keys },\n\n    series };\n\n  return {\n    formData,\n    width,\n    height,\n    echartOptions,\n    setDataMask,\n    emitCrossFilters,\n    labelMap,\n    groupby,\n    selectedValues,\n    onContextMenu,\n    refs,\n    coltypeMapping };\n\n}","map":{"version":3,"mappings":"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","names":["CategoricalColorNamespace","getMetricLabel","getNumberFormatter","NumberFormats","getColumnLabel","getValueFormatter","DEFAULT_FORM_DATA","DEFAULT_FUNNEL_FORM_DATA","EchartsFunnelLabelTypeType","extractGroupbyLabel","getChartPadding","getColtypesMapping","getLegendProps","sanitizeHtml","defaultGrid","OpacityEnum","DEFAULT_LEGEND_FORM_DATA","getDefaultTooltip","percentFormatter","PERCENT_2_POINT","formatFunnelLabel","params","labelType","numberFormatter","sanitizeName","name","rawName","value","percent","formattedValue","formattedPercent","Key","Value","Percent","KeyValue","KeyValuePercent","KeyPercent","transformProps","chartProps","formData","height","hooks","filterState","queriesData","width","theme","inContextMenu","emitCrossFilters","datasource","data","coltypeMapping","colorScheme","groupby","orient","sort","gap","labelLine","legendMargin","legendOrientation","legendType","metric","numberFormat","showLabels","showLegend","sliceId","currencyFormats","columnFormats","refs","metricLabel","groupbyLabels","map","keys","datum","labelMap","reduce","acc","label","col","setDataMask","onContextMenu","colorFn","getScale","transformedData","isFiltered","selectedValues","itemStyle","color","opacity","SemiTransparent","NonTransparent","selectedValue","index","findIndex","formatter","defaultLabel","show","colors","grayscale","dark2","series","type","animation","minSize","maxSize","funnelAlign","position","textBorderColor","emphasis","fontWeight","echartOptions","grid","tooltip","trigger","legend"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/plugins/plugin-chart-echarts/src/Funnel/transformProps.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  CategoricalColorNamespace,\n  DataRecord,\n  getMetricLabel,\n  getNumberFormatter,\n  NumberFormats,\n  ValueFormatter,\n  getColumnLabel,\n  getValueFormatter,\n} from '@superset-ui/core';\nimport { CallbackDataParams } from 'echarts/types/src/util/types';\nimport { EChartsCoreOption, FunnelSeriesOption } from 'echarts';\nimport {\n  DEFAULT_FORM_DATA as DEFAULT_FUNNEL_FORM_DATA,\n  EchartsFunnelChartProps,\n  EchartsFunnelFormData,\n  EchartsFunnelLabelTypeType,\n  FunnelChartTransformedProps,\n} from './types';\nimport {\n  extractGroupbyLabel,\n  getChartPadding,\n  getColtypesMapping,\n  getLegendProps,\n  sanitizeHtml,\n} from '../utils/series';\nimport { defaultGrid } from '../defaults';\nimport { OpacityEnum, DEFAULT_LEGEND_FORM_DATA } from '../constants';\nimport { getDefaultTooltip } from '../utils/tooltip';\nimport { Refs } from '../types';\n\nconst percentFormatter = getNumberFormatter(NumberFormats.PERCENT_2_POINT);\n\nexport function formatFunnelLabel({\n  params,\n  labelType,\n  numberFormatter,\n  sanitizeName = false,\n}: {\n  params: Pick<CallbackDataParams, 'name' | 'value' | 'percent'>;\n  labelType: EchartsFunnelLabelTypeType;\n  numberFormatter: ValueFormatter;\n  sanitizeName?: boolean;\n}): string {\n  const { name: rawName = '', value, percent } = params;\n  const name = sanitizeName ? sanitizeHtml(rawName) : rawName;\n  const formattedValue = numberFormatter(value as number);\n  const formattedPercent = percentFormatter((percent as number) / 100);\n  switch (labelType) {\n    case EchartsFunnelLabelTypeType.Key:\n      return name;\n    case EchartsFunnelLabelTypeType.Value:\n      return formattedValue;\n    case EchartsFunnelLabelTypeType.Percent:\n      return formattedPercent;\n    case EchartsFunnelLabelTypeType.KeyValue:\n      return `${name}: ${formattedValue}`;\n    case EchartsFunnelLabelTypeType.KeyValuePercent:\n      return `${name}: ${formattedValue} (${formattedPercent})`;\n    case EchartsFunnelLabelTypeType.KeyPercent:\n      return `${name}: ${formattedPercent}`;\n    default:\n      return name;\n  }\n}\n\nexport default function transformProps(\n  chartProps: EchartsFunnelChartProps,\n): FunnelChartTransformedProps {\n  const {\n    formData,\n    height,\n    hooks,\n    filterState,\n    queriesData,\n    width,\n    theme,\n    inContextMenu,\n    emitCrossFilters,\n    datasource,\n  } = chartProps;\n  const data: DataRecord[] = queriesData[0].data || [];\n  const coltypeMapping = getColtypesMapping(queriesData[0]);\n  const {\n    colorScheme,\n    groupby,\n    orient,\n    sort,\n    gap,\n    labelLine,\n    labelType,\n    legendMargin,\n    legendOrientation,\n    legendType,\n    metric = '',\n    numberFormat,\n    showLabels,\n    showLegend,\n    sliceId,\n  }: EchartsFunnelFormData = {\n    ...DEFAULT_LEGEND_FORM_DATA,\n    ...DEFAULT_FUNNEL_FORM_DATA,\n    ...formData,\n  };\n  const { currencyFormats = {}, columnFormats = {} } = datasource;\n  const refs: Refs = {};\n  const metricLabel = getMetricLabel(metric);\n  const groupbyLabels = groupby.map(getColumnLabel);\n  const keys = data.map(datum =>\n    extractGroupbyLabel({ datum, groupby: groupbyLabels, coltypeMapping: {} }),\n  );\n  const labelMap = data.reduce((acc: Record<string, string[]>, datum) => {\n    const label = extractGroupbyLabel({\n      datum,\n      groupby: groupbyLabels,\n      coltypeMapping: {},\n    });\n    return {\n      ...acc,\n      [label]: groupbyLabels.map(col => datum[col] as string),\n    };\n  }, {});\n\n  const { setDataMask = () => {}, onContextMenu } = hooks;\n\n  const colorFn = CategoricalColorNamespace.getScale(colorScheme as string);\n  const numberFormatter = getValueFormatter(\n    metric,\n    currencyFormats,\n    columnFormats,\n    numberFormat,\n  );\n\n  const transformedData: FunnelSeriesOption[] = data.map(datum => {\n    const name = extractGroupbyLabel({\n      datum,\n      groupby: groupbyLabels,\n      coltypeMapping: {},\n    });\n    const isFiltered =\n      filterState.selectedValues && !filterState.selectedValues.includes(name);\n    return {\n      value: datum[metricLabel],\n      name,\n      itemStyle: {\n        color: colorFn(name, sliceId),\n        opacity: isFiltered\n          ? OpacityEnum.SemiTransparent\n          : OpacityEnum.NonTransparent,\n      },\n    };\n  });\n\n  const selectedValues = (filterState.selectedValues || []).reduce(\n    (acc: Record<string, number>, selectedValue: string) => {\n      const index = transformedData.findIndex(\n        ({ name }) => name === selectedValue,\n      );\n      return {\n        ...acc,\n        [index]: selectedValue,\n      };\n    },\n    {},\n  );\n\n  const formatter = (params: CallbackDataParams) =>\n    formatFunnelLabel({ params, numberFormatter, labelType });\n\n  const defaultLabel = {\n    formatter,\n    show: showLabels,\n    color: theme.colors.grayscale.dark2,\n  };\n\n  const series: FunnelSeriesOption[] = [\n    {\n      type: 'funnel',\n      ...getChartPadding(showLegend, legendOrientation, legendMargin),\n      animation: true,\n      minSize: '0%',\n      maxSize: '100%',\n      sort,\n      orient,\n      gap,\n      funnelAlign: 'center',\n      labelLine: { show: !!labelLine },\n      label: {\n        ...defaultLabel,\n        position: labelLine ? 'outer' : 'inner',\n        textBorderColor: 'transparent',\n      },\n      emphasis: {\n        label: {\n          show: true,\n          fontWeight: 'bold',\n        },\n      },\n      // @ts-ignore\n      data: transformedData,\n    },\n  ];\n\n  const echartOptions: EChartsCoreOption = {\n    grid: {\n      ...defaultGrid,\n    },\n    tooltip: {\n      ...getDefaultTooltip(refs),\n      show: !inContextMenu,\n      trigger: 'item',\n      formatter: (params: any) =>\n        formatFunnelLabel({\n          params,\n          numberFormatter,\n          labelType: EchartsFunnelLabelTypeType.KeyValuePercent,\n        }),\n    },\n    legend: {\n      ...getLegendProps(legendType, legendOrientation, showLegend, theme),\n      data: keys,\n    },\n    series,\n  };\n\n  return {\n    formData,\n    width,\n    height,\n    echartOptions,\n    setDataMask,\n    emitCrossFilters,\n    labelMap,\n    groupby,\n    selectedValues,\n    onContextMenu,\n    refs,\n    coltypeMapping,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}