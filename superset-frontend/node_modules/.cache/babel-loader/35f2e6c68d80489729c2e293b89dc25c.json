{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\nimport { getStandardizedControls, sections, sharedControls } from '@superset-ui/chart-controls';\nimport { lineInterpolation, showBrush, showLegend, showControls, xAxisLabel, yAxisLabel, bottomMargin, xTicksLayout, xAxisFormat, yLogScale, yAxisBounds, xAxisShowMinmax, yAxisShowMinmax, richTooltip, showBarValue, barStacked, reduceXTicks, leftMargin, timeSeriesSection } from '../NVD3Controls';\nconst config = {\n  controlOverrides: {\n    limit: {\n      rerender: ['timeseries_limit_metric', 'order_desc'] },\n\n    timeseries_limit_metric: {\n      label: t('Series Limit Sort By'),\n      description: t('Metric used to order the limit if a series limit is present. ' +\n      'If undefined reverts to the first metric (where appropriate).'),\n      visibility: (_ref) => {let { controls } = _ref;return Boolean(controls == null ? void 0 : controls.limit.value);},\n      mapStateToProps: (state, controlState) => {var _state$controls, _state$controls$limit;\n        const timeserieslimitProps = (sharedControls.timeseries_limit_metric.mapStateToProps == null ? void 0 : sharedControls.timeseries_limit_metric.mapStateToProps(state, controlState)) || {};\n        timeserieslimitProps.value = (_state$controls = state.controls) != null && (_state$controls$limit = _state$controls.limit) != null && _state$controls$limit.value ?\n        controlState == null ? void 0 : controlState.value :\n        [];\n        return timeserieslimitProps;\n      } },\n\n    order_desc: {\n      label: t('Series Limit Sort Descending'),\n      default: false,\n      description: t('Whether to sort descending or ascending if a series limit is present'),\n      visibility: (_ref2) => {let { controls } = _ref2;return Boolean(controls == null ? void 0 : controls.limit.value);} } },\n\n\n  controlPanelSections: [\n  sections.legacyTimeseriesTime,\n  timeSeriesSection[0],\n  {\n    label: t('Chart Options'),\n    expanded: true,\n    controlSetRows: [\n    ['color_scheme'],\n    [showBrush],\n    [showLegend],\n    [showBarValue],\n    [richTooltip],\n    [barStacked],\n    [lineInterpolation],\n    [showControls],\n    [bottomMargin]] },\n\n\n  {\n    label: t('X Axis'),\n    expanded: true,\n    controlSetRows: [\n    [xAxisLabel],\n    [bottomMargin],\n    [xTicksLayout],\n    [xAxisFormat],\n    [xAxisShowMinmax],\n    [reduceXTicks]] },\n\n\n  {\n    label: t('Y Axis'),\n    expanded: true,\n    controlSetRows: [\n    [yAxisLabel],\n    [leftMargin],\n    [yAxisShowMinmax],\n    [yLogScale],\n    ['y_axis_format'],\n    [yAxisBounds]] },\n\n\n  timeSeriesSection[1],\n  sections.annotations],\n\n  formDataOverrides: (formData) => ({\n    ...formData,\n    metrics: getStandardizedControls().popAllMetrics(),\n    groupby: getStandardizedControls().popAllColumns() }) };\n\n\nexport default config;","map":{"version":3,"mappings":"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","names":["t","getStandardizedControls","sections","sharedControls","lineInterpolation","showBrush","showLegend","showControls","xAxisLabel","yAxisLabel","bottomMargin","xTicksLayout","xAxisFormat","yLogScale","yAxisBounds","xAxisShowMinmax","yAxisShowMinmax","richTooltip","showBarValue","barStacked","reduceXTicks","leftMargin","timeSeriesSection","config","controlOverrides","limit","rerender","timeseries_limit_metric","label","description","visibility","controls","Boolean","value","mapStateToProps","state","controlState","timeserieslimitProps","order_desc","default","controlPanelSections","legacyTimeseriesTime","expanded","controlSetRows","annotations","formDataOverrides","formData","metrics","popAllMetrics","groupby","popAllColumns"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/plugins/legacy-preset-chart-nvd3/src/Bar/controlPanel.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\nimport {\n  ControlPanelConfig,\n  getStandardizedControls,\n  sections,\n  sharedControls,\n} from '@superset-ui/chart-controls';\nimport {\n  lineInterpolation,\n  showBrush,\n  showLegend,\n  showControls,\n  xAxisLabel,\n  yAxisLabel,\n  bottomMargin,\n  xTicksLayout,\n  xAxisFormat,\n  yLogScale,\n  yAxisBounds,\n  xAxisShowMinmax,\n  yAxisShowMinmax,\n  richTooltip,\n  showBarValue,\n  barStacked,\n  reduceXTicks,\n  leftMargin,\n  timeSeriesSection,\n} from '../NVD3Controls';\n\nconst config: ControlPanelConfig = {\n  controlOverrides: {\n    limit: {\n      rerender: ['timeseries_limit_metric', 'order_desc'],\n    },\n    timeseries_limit_metric: {\n      label: t('Series Limit Sort By'),\n      description: t(\n        'Metric used to order the limit if a series limit is present. ' +\n          'If undefined reverts to the first metric (where appropriate).',\n      ),\n      visibility: ({ controls }) => Boolean(controls?.limit.value),\n      mapStateToProps: (state, controlState) => {\n        const timeserieslimitProps =\n          sharedControls.timeseries_limit_metric.mapStateToProps?.(\n            state,\n            controlState,\n          ) || {};\n        timeserieslimitProps.value = state.controls?.limit?.value\n          ? controlState?.value\n          : [];\n        return timeserieslimitProps;\n      },\n    },\n    order_desc: {\n      label: t('Series Limit Sort Descending'),\n      default: false,\n      description: t(\n        'Whether to sort descending or ascending if a series limit is present',\n      ),\n      visibility: ({ controls }) => Boolean(controls?.limit.value),\n    },\n  },\n  controlPanelSections: [\n    sections.legacyTimeseriesTime,\n    timeSeriesSection[0],\n    {\n      label: t('Chart Options'),\n      expanded: true,\n      controlSetRows: [\n        ['color_scheme'],\n        [showBrush],\n        [showLegend],\n        [showBarValue],\n        [richTooltip],\n        [barStacked],\n        [lineInterpolation],\n        [showControls],\n        [bottomMargin],\n      ],\n    },\n    {\n      label: t('X Axis'),\n      expanded: true,\n      controlSetRows: [\n        [xAxisLabel],\n        [bottomMargin],\n        [xTicksLayout],\n        [xAxisFormat],\n        [xAxisShowMinmax],\n        [reduceXTicks],\n      ],\n    },\n    {\n      label: t('Y Axis'),\n      expanded: true,\n      controlSetRows: [\n        [yAxisLabel],\n        [leftMargin],\n        [yAxisShowMinmax],\n        [yLogScale],\n        ['y_axis_format'],\n        [yAxisBounds],\n      ],\n    },\n    timeSeriesSection[1],\n    sections.annotations,\n  ],\n  formDataOverrides: formData => ({\n    ...formData,\n    metrics: getStandardizedControls().popAllMetrics(),\n    groupby: getStandardizedControls().popAllColumns(),\n  }),\n};\n\nexport default config;\n"]},"metadata":{},"sourceType":"module"}