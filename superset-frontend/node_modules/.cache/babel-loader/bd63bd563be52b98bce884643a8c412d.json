{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { GenericDataType } from '@superset-ui/core';\nimport ControlForm, { ControlFormRow, ControlFormItem } from '../../../components/ControlForm';\nimport { SHARED_COLUMN_CONFIG_PROPS } from './constants';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport default function ColumnConfigPopover(_ref) {let { column, configFormLayout, onChange } = _ref;\n  return ___EmotionJSX(ControlForm, { onChange: onChange, value: column.config },\n  configFormLayout[column.type === undefined ? GenericDataType.STRING : column.type].map((row, i) => ___EmotionJSX(ControlFormRow, { key: i },\n  row.map((meta) => {\n    const key = typeof meta === 'string' ? meta : meta.name;\n    const override = typeof meta === 'string' ?\n    {} :\n    'override' in meta ?\n    meta.override :\n    meta.config;\n    const props = {\n      ...(key in SHARED_COLUMN_CONFIG_PROPS ?\n      SHARED_COLUMN_CONFIG_PROPS[key] :\n      undefined),\n      ...override };\n\n    return ___EmotionJSX(ControlFormItem, _extends({ key: key, name: key }, props));\n  }))));\n\n\n}","map":{"version":3,"mappings":"+DAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,OAAOC,WAAP,IACEC,cADF,EAEEC,eAFF,QAIO,iCAJP;AAKA,SACEC,0BADF,QAGO,aAHP,C;AAgBA,eAAc,SAAUC,mBAAV,OAIa,KAJiB,EAC1CC,MAD0C,EAE1CC,gBAF0C,EAG1CC,QAH0C,EAIjB;EACzB,OACE,cAAC,WAAD,IAAa,QAAQ,EAAEA,QAAvB,EAAiC,KAAK,EAAEF,MAAM,CAACG,MAA/C;EACGF,gBAAgB,CACfD,MAAM,CAACI,IAAP,KAAgBC,SAAhB,GAA4BX,eAAe,CAACY,MAA5C,GAAqDN,MAAM,CAACI,IAD7C,CAAhB,CAECG,GAFD,CAEK,CAACC,GAAD,EAAMC,CAAN,KACJ,cAAC,cAAD,IAAgB,GAAG,EAAEA,CAArB;EACGD,GAAG,CAACD,GAAJ,CAAQ,KAAI,KAAG;IACd,MAAMG,GAAG,GAAG,OAAOC,IAAP,KAAgB,QAAhB,GAA2BA,IAA3B,GAAkCA,IAAI,CAACC,IAAnD;IACA,MAAMC,QAAQ,GACZ,OAAOF,IAAP,KAAgB,QAAhB;IACI,EADJ;IAEI,cAAcA,IAAd;IACAA,IAAI,CAACE,QADL;IAEAF,IAAI,CAACR,MALX;IAMA,MAAMW,KAAK,GAAG;MACZ,IAAIJ,GAAG,IAAIZ,0BAAP;MACAA,0BAA0B,CAACY,GAAD,CAD1B;MAEAL,SAFJ,CADY;MAIZ,GAAGQ,QAJS,EAAd;;IAMA,OAAO,cAAC,eAAD,aAAiB,GAAG,EAAEH,GAAtB,EAA2B,IAAI,EAAEA,GAAjC,IAA0CI,KAA1C,EAAP;EACD,CAfA,CADH,CAHD,CADH,CADF;;;AA0BD","names":["React","GenericDataType","ControlForm","ControlFormRow","ControlFormItem","SHARED_COLUMN_CONFIG_PROPS","ColumnConfigPopover","column","configFormLayout","onChange","config","type","undefined","STRING","map","row","i","key","meta","name","override","props"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/packages/superset-ui-chart-controls/src/shared-controls/components/ColumnConfigControl/ColumnConfigPopover.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { GenericDataType } from '@superset-ui/core';\nimport ControlForm, {\n  ControlFormRow,\n  ControlFormItem,\n  ControlFormItemSpec,\n} from '../../../components/ControlForm';\nimport {\n  SHARED_COLUMN_CONFIG_PROPS,\n  SharedColumnConfigProp,\n} from './constants';\nimport {\n  ColumnConfig,\n  ColumnConfigFormLayout,\n  ColumnConfigInfo,\n} from './types';\n\nexport type ColumnConfigPopoverProps = {\n  column: ColumnConfigInfo;\n  configFormLayout: ColumnConfigFormLayout;\n  onChange: (value: ColumnConfig) => void;\n};\n\nexport default function ColumnConfigPopover({\n  column,\n  configFormLayout,\n  onChange,\n}: ColumnConfigPopoverProps) {\n  return (\n    <ControlForm onChange={onChange} value={column.config}>\n      {configFormLayout[\n        column.type === undefined ? GenericDataType.STRING : column.type\n      ].map((row, i) => (\n        <ControlFormRow key={i}>\n          {row.map(meta => {\n            const key = typeof meta === 'string' ? meta : meta.name;\n            const override =\n              typeof meta === 'string'\n                ? {}\n                : 'override' in meta\n                ? meta.override\n                : meta.config;\n            const props = {\n              ...(key in SHARED_COLUMN_CONFIG_PROPS\n                ? SHARED_COLUMN_CONFIG_PROPS[key as SharedColumnConfigProp]\n                : undefined),\n              ...override,\n            } as ControlFormItemSpec;\n            return <ControlFormItem key={key} name={key} {...props} />;\n          })}\n        </ControlFormRow>\n      ))}\n    </ControlForm>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}