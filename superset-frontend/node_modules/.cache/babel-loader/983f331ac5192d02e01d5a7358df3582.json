{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with work for additional information\n * regarding copyright ownership.  The ASF licenses file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { hasGenericChartAxes, logging, SupersetClient, t } from '@superset-ui/core';\nimport { isColumnMeta, isTemporalColumn, withDndFallback } from '@superset-ui/chart-controls';\nimport Modal from 'src/components/Modal';\nimport { OPERATOR_ENUM_TO_OPERATOR_TYPE, Operators } from 'src/explore/constants';\nimport AdhocFilterPopoverTrigger from 'src/explore/components/controls/FilterControl/AdhocFilterPopoverTrigger';\nimport DndSelectLabel from 'src/explore/components/controls/DndColumnSelectControl/DndSelectLabel';\nimport AdhocFilter from 'src/explore/components/controls/FilterControl/AdhocFilter';\nimport AdhocMetric from 'src/explore/components/controls/MetricControl/AdhocMetric';\nimport { isSavedMetric } from 'src/explore/components/DatasourcePanel/types';\nimport { DndItemType } from 'src/explore/components/DndItemType';\nimport AdhocFilterControl from '../FilterControl/AdhocFilterControl';\nimport DndAdhocFilterOption from './DndAdhocFilterOption';\nimport { useDefaultTimeFilter } from '../DateFilterControl/utils';\nimport { CLAUSES, EXPRESSION_TYPES } from '../FilterControl/types';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst { warning } = Modal;\nconst EMPTY_OBJECT = {};\nconst DND_ACCEPTED_TYPES = [\nDndItemType.Column,\nDndItemType.Metric,\nDndItemType.MetricOption,\nDndItemType.AdhocMetricOption];\n\nconst isDictionaryForAdhocFilter = (value) => !(value instanceof AdhocFilter) && (value == null ? void 0 : value.expressionType);\nconst DndFilterSelect = (props) => {var _props$value;\n  const { datasource, onChange = () => {}, name: controlName, canDelete } = props;\n  const propsValues = Array.from((_props$value = props.value) != null ? _props$value : []);\n  const [values, setValues] = useState(propsValues.map((filter) => isDictionaryForAdhocFilter(filter) ? new AdhocFilter(filter) : filter));\n  const [partitionColumn, setPartitionColumn] = useState(undefined);\n  const [newFilterPopoverVisible, setNewFilterPopoverVisible] = useState(false);\n  const [droppedItem, setDroppedItem] = useState({});\n  const optionsForSelect = (columns, formData) => {\n    const options = [\n    ...columns,\n    ...[...((formData == null ? void 0 : formData.metrics) || []), formData == null ? void 0 : formData.metric].map((metric) => metric && (\n    typeof metric === 'string' ?\n    { saved_metric_name: metric } :\n    new AdhocMetric(metric)))].\n    filter((option) => option);\n    return options.\n    reduce((results, option) => {\n      if ('saved_metric_name' in option && option.saved_metric_name) {\n        results.push({\n          ...option,\n          filterOptionName: option.saved_metric_name });\n\n      } else\n      if ('column_name' in option && option.column_name) {\n        results.push({\n          ...option,\n          filterOptionName: `_col_${option.column_name}` });\n\n      } else\n      if (option instanceof AdhocMetric) {\n        results.push({\n          ...option,\n          filterOptionName: `_adhocmetric_${option.label}` });\n\n      }\n      return results;\n    }, []).\n    sort((a, b) => {var _localeCompare, _ref;return (_localeCompare = (_ref = a.saved_metric_name || a.column_name || a.label) == null ? void 0 : _ref.localeCompare(b.saved_metric_name || b.column_name || b.label || '')) != null ? _localeCompare : 0;});\n  };\n  const [options, setOptions] = useState(optionsForSelect(props.columns, props.formData));\n  useEffect(() => {\n    if (datasource && datasource.type === 'table') {var _datasource$database;\n      const dbId = (_datasource$database = datasource.database) == null ? void 0 : _datasource$database.id;\n      const { datasource_name: name, schema, is_sqllab_view: isSqllabView } = datasource;\n      if (!isSqllabView && dbId && name && schema) {\n        SupersetClient.get({\n          endpoint: `/api/v1/database/${dbId}/table_extra/${name}/${schema}/` }).\n\n        then((_ref2) => {let { json } = _ref2;\n          if (json != null && json.partitions) {\n            const { partitions } = json;\n            // for now only show latest_partition option\n            // when table datasource has only 1 partition key.\n            if (partitions != null && partitions.cols &&\n            Object.keys(partitions.cols).length === 1) {\n              setPartitionColumn(partitions.cols[0]);\n            }\n          }\n        }).\n        catch((error) => {\n          logging.error('fetch extra_table_metadata:', error.statusText);\n        });\n      }\n    }\n  }, [datasource]);\n  useEffect(() => {\n    setOptions(optionsForSelect(props.columns, props.formData));\n  }, [props.columns, props.formData]);\n  useEffect(() => {\n    setValues((props.value || []).map((filter) => isDictionaryForAdhocFilter(filter) ? new AdhocFilter(filter) : filter));\n  }, [props.value]);\n  const removeValue = useCallback((index) => {\n    const valuesCopy = [...values];\n    valuesCopy.splice(index, 1);\n    setValues(valuesCopy);\n    onChange(valuesCopy);\n  }, [onChange, values]);\n  const onClickClose = useCallback((index) => {\n    const result = canDelete == null ? void 0 : canDelete(values[index], values);\n    if (typeof result === 'string') {\n      warning({ title: t('Warning'), content: result });\n      return;\n    }\n    removeValue(index);\n  }, [canDelete, removeValue, values]);\n  const onShiftOptions = useCallback((dragIndex, hoverIndex) => {\n    const newValues = [...values];\n    [newValues[hoverIndex], newValues[dragIndex]] = [\n    newValues[dragIndex],\n    newValues[hoverIndex]];\n\n    setValues(newValues);\n  }, [values]);\n  const getMetricExpression = useCallback((savedMetricName) => {var _props$savedMetrics$f;return (_props$savedMetrics$f = props.savedMetrics.find((savedMetric) => savedMetric.metric_name === savedMetricName)) == null ? void 0 : _props$savedMetrics$f.expression;}, [props.savedMetrics]);\n  const mapOption = useCallback((option) => {\n    // already a AdhocFilter, skip\n    if (option instanceof AdhocFilter) {\n      return option;\n    }\n    const filterOptions = option;\n    // via datasource saved metric\n    if (filterOptions.saved_metric_name) {\n      return new AdhocFilter({\n        expressionType: EXPRESSION_TYPES.SQL,\n        subject: getMetricExpression(filterOptions.saved_metric_name),\n        operator: OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.GREATER_THAN].operation,\n        operatorId: Operators.GREATER_THAN,\n        comparator: 0,\n        clause: CLAUSES.HAVING });\n\n    }\n    // has a custom label, meaning it's custom column\n    if (filterOptions.label) {\n      return new AdhocFilter({\n        expressionType: EXPRESSION_TYPES.SQL,\n        subject: new AdhocMetric(option).translateToSql(),\n        operator: OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.GREATER_THAN].operation,\n        operatorId: Operators.GREATER_THAN,\n        comparator: 0,\n        clause: CLAUSES.HAVING });\n\n    }\n    // add a new filter item\n    if (filterOptions.column_name) {\n      return new AdhocFilter({\n        expressionType: EXPRESSION_TYPES.SIMPLE,\n        subject: filterOptions.column_name,\n        operator: OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.EQUALS].operation,\n        operatorId: Operators.EQUALS,\n        comparator: '',\n        clause: CLAUSES.WHERE,\n        isNew: true });\n\n    }\n    return null;\n  }, [datasource.type, getMetricExpression]);\n  const onFilterEdit = useCallback((changedFilter) => {\n    onChange(values.map((value) => {\n      if (value.filterOptionName === changedFilter.filterOptionName) {\n        return changedFilter;\n      }\n      return value;\n    }));\n  }, [onChange, values]);\n  const onNewFilter = useCallback((newFilter) => {\n    const mappedOption = mapOption(newFilter);\n    if (mappedOption) {\n      const newValues = [...values, mappedOption];\n      setValues(newValues);\n      onChange(newValues);\n    }\n  }, [mapOption, onChange, values]);\n  const togglePopover = useCallback((visible) => {\n    setNewFilterPopoverVisible(visible);\n  }, []);\n  const closePopover = useCallback(() => {\n    togglePopover(false);\n  }, [togglePopover]);\n  const valuesRenderer = useCallback(() => values.map((adhocFilter, index) => ___EmotionJSX(DndAdhocFilterOption, { index: index, adhocFilter: adhocFilter, options: options, datasource: datasource, onFilterEdit: onFilterEdit, partitionColumn: partitionColumn, onClickClose: onClickClose, onShiftOptions: onShiftOptions })), [\n  onClickClose,\n  onFilterEdit,\n  onShiftOptions,\n  options,\n  partitionColumn,\n  datasource,\n  values]);\n\n  const handleClickGhostButton = useCallback(() => {\n    setDroppedItem({});\n    togglePopover(true);\n  }, [togglePopover]);\n  const defaultTimeFilter = useDefaultTimeFilter();\n  const adhocFilter = useMemo(() => {\n    if (isSavedMetric(droppedItem)) {\n      return new AdhocFilter({\n        expressionType: EXPRESSION_TYPES.SQL,\n        clause: CLAUSES.HAVING,\n        sqlExpression: droppedItem == null ? void 0 : droppedItem.expression });\n\n    }\n    if (droppedItem instanceof AdhocMetric) {\n      return new AdhocFilter({\n        expressionType: EXPRESSION_TYPES.SQL,\n        clause: CLAUSES.HAVING,\n        sqlExpression: droppedItem == null ? void 0 : droppedItem.translateToSql() });\n\n    }\n    const config = {\n      subject: droppedItem == null ? void 0 : droppedItem.column_name };\n\n    if (config.subject) {\n      config.operator = OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.IN].operation;\n      config.operatorId = Operators.IN;\n    }\n    if (hasGenericChartAxes &&\n    isColumnMeta(droppedItem) &&\n    isTemporalColumn(droppedItem == null ? void 0 : droppedItem.column_name, props.datasource)) {\n      config.operator = Operators.TEMPORAL_RANGE;\n      config.operatorId = Operators.TEMPORAL_RANGE;\n      config.comparator = defaultTimeFilter;\n    }\n    return new AdhocFilter(config);\n  }, [droppedItem]);\n  const canDrop = useCallback(() => true, []);\n  const handleDrop = useCallback((item) => {\n    setDroppedItem(item.value);\n    togglePopover(true);\n  }, [controlName, togglePopover]);\n  return ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(DndSelectLabel, _extends({ onDrop: handleDrop, canDrop: canDrop, valuesRenderer: valuesRenderer, accept: DND_ACCEPTED_TYPES, ghostButtonText: t('Drop columns/metrics here or click'), onClickGhostButton: handleClickGhostButton }, props)),\n  ___EmotionJSX(AdhocFilterPopoverTrigger, { adhocFilter: adhocFilter, options: options, datasource: datasource, onFilterEdit: onNewFilter, partitionColumn: partitionColumn, isControlledComponent: true, visible: newFilterPopoverVisible, togglePopover: togglePopover, closePopover: closePopover, requireSave: !!droppedItem }));\n\n};__signature__(DndFilterSelect, \"useState{[values, setValues](propsValues.map((filter) => isDictionaryForAdhocFilter(filter) ? new AdhocFilter(filter) : filter))}\\nuseState{[partitionColumn, setPartitionColumn](undefined)}\\nuseState{[newFilterPopoverVisible, setNewFilterPopoverVisible](false)}\\nuseState{[droppedItem, setDroppedItem]({})}\\nuseState{[options, setOptions](optionsForSelect(props.columns, props.formData))}\\nuseEffect{}\\nuseEffect{}\\nuseEffect{}\\nuseCallback{removeValue}\\nuseCallback{onClickClose}\\nuseCallback{onShiftOptions}\\nuseCallback{getMetricExpression}\\nuseCallback{mapOption}\\nuseCallback{onFilterEdit}\\nuseCallback{onNewFilter}\\nuseCallback{togglePopover}\\nuseCallback{closePopover}\\nuseCallback{valuesRenderer}\\nuseCallback{handleClickGhostButton}\\nuseDefaultTimeFilter{defaultTimeFilter}\\nuseMemo{adhocFilter}\\nuseCallback{canDrop}\\nuseCallback{handleDrop}\", () => [useDefaultTimeFilter]);\nconst DndFilterSelectWithFallback = withDndFallback(DndFilterSelect, AdhocFilterControl);\nexport { DndFilterSelectWithFallback as DndFilterSelect };;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(warning, \"warning\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndFilterSelect.tsx\");reactHotLoader.register(EMPTY_OBJECT, \"EMPTY_OBJECT\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndFilterSelect.tsx\");reactHotLoader.register(DND_ACCEPTED_TYPES, \"DND_ACCEPTED_TYPES\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndFilterSelect.tsx\");reactHotLoader.register(isDictionaryForAdhocFilter, \"isDictionaryForAdhocFilter\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndFilterSelect.tsx\");reactHotLoader.register(DndFilterSelect, \"DndFilterSelect\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndFilterSelect.tsx\");reactHotLoader.register(DndFilterSelectWithFallback, \"DndFilterSelectWithFallback\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndFilterSelect.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"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","names":["React","useCallback","useEffect","useMemo","useState","hasGenericChartAxes","logging","SupersetClient","t","isColumnMeta","isTemporalColumn","withDndFallback","Modal","OPERATOR_ENUM_TO_OPERATOR_TYPE","Operators","AdhocFilterPopoverTrigger","DndSelectLabel","AdhocFilter","AdhocMetric","isSavedMetric","DndItemType","AdhocFilterControl","DndAdhocFilterOption","useDefaultTimeFilter","CLAUSES","EXPRESSION_TYPES","warning","EMPTY_OBJECT","DND_ACCEPTED_TYPES","Column","Metric","MetricOption","AdhocMetricOption","isDictionaryForAdhocFilter","value","expressionType","DndFilterSelect","props","datasource","onChange","name","controlName","canDelete","propsValues","Array","from","values","setValues","map","filter","partitionColumn","setPartitionColumn","undefined","newFilterPopoverVisible","setNewFilterPopoverVisible","droppedItem","setDroppedItem","optionsForSelect","columns","formData","options","metrics","metric","saved_metric_name","option","reduce","results","push","filterOptionName","column_name","label","sort","a","b","localeCompare","setOptions","type","dbId","database","id","datasource_name","schema","is_sqllab_view","isSqllabView","get","endpoint","then","json","partitions","cols","Object","keys","length","catch","error","statusText","removeValue","index","valuesCopy","splice","onClickClose","result","title","content","onShiftOptions","dragIndex","hoverIndex","newValues","getMetricExpression","savedMetricName","savedMetrics","find","savedMetric","metric_name","expression","mapOption","filterOptions","SQL","subject","operator","GREATER_THAN","operation","operatorId","comparator","clause","HAVING","translateToSql","SIMPLE","EQUALS","WHERE","isNew","onFilterEdit","changedFilter","onNewFilter","newFilter","mappedOption","togglePopover","visible","closePopover","valuesRenderer","adhocFilter","handleClickGhostButton","defaultTimeFilter","sqlExpression","config","IN","TEMPORAL_RANGE","canDrop","handleDrop","item","DndFilterSelectWithFallback"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndFilterSelect.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with work for additional information\n * regarding copyright ownership.  The ASF licenses file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport {\n  hasGenericChartAxes,\n  logging,\n  Metric,\n  QueryFormData,\n  QueryFormMetric,\n  SupersetClient,\n  t,\n} from '@superset-ui/core';\nimport {\n  ColumnMeta,\n  isColumnMeta,\n  isTemporalColumn,\n  withDndFallback,\n} from '@superset-ui/chart-controls';\nimport Modal from 'src/components/Modal';\nimport {\n  OPERATOR_ENUM_TO_OPERATOR_TYPE,\n  Operators,\n} from 'src/explore/constants';\nimport { Datasource, OptionSortType } from 'src/explore/types';\nimport { OptionValueType } from 'src/explore/components/controls/DndColumnSelectControl/types';\nimport AdhocFilterPopoverTrigger from 'src/explore/components/controls/FilterControl/AdhocFilterPopoverTrigger';\nimport DndSelectLabel from 'src/explore/components/controls/DndColumnSelectControl/DndSelectLabel';\nimport AdhocFilter from 'src/explore/components/controls/FilterControl/AdhocFilter';\nimport AdhocMetric from 'src/explore/components/controls/MetricControl/AdhocMetric';\nimport {\n  DatasourcePanelDndItem,\n  DndItemValue,\n  isSavedMetric,\n} from 'src/explore/components/DatasourcePanel/types';\nimport { DndItemType } from 'src/explore/components/DndItemType';\nimport { ControlComponentProps } from 'src/explore/components/Control';\nimport AdhocFilterControl from '../FilterControl/AdhocFilterControl';\nimport DndAdhocFilterOption from './DndAdhocFilterOption';\nimport { useDefaultTimeFilter } from '../DateFilterControl/utils';\nimport { CLAUSES, EXPRESSION_TYPES } from '../FilterControl/types';\n\nconst { warning } = Modal;\n\nconst EMPTY_OBJECT = {};\nconst DND_ACCEPTED_TYPES = [\n  DndItemType.Column,\n  DndItemType.Metric,\n  DndItemType.MetricOption,\n  DndItemType.AdhocMetricOption,\n];\n\nconst isDictionaryForAdhocFilter = (value: OptionValueType) =>\n  !(value instanceof AdhocFilter) && value?.expressionType;\n\nexport interface DndFilterSelectProps\n  extends ControlComponentProps<OptionValueType[]> {\n  columns: ColumnMeta[];\n  savedMetrics: Metric[];\n  selectedMetrics: QueryFormMetric[];\n  datasource: Datasource;\n  canDelete?: (\n    valueToBeDeleted: OptionValueType,\n    values: OptionValueType[],\n  ) => true | string;\n}\n\nconst DndFilterSelect = (props: DndFilterSelectProps) => {\n  const {\n    datasource,\n    onChange = () => {},\n    name: controlName,\n    canDelete,\n  } = props;\n\n  const propsValues = Array.from(props.value ?? []);\n  const [values, setValues] = useState(\n    propsValues.map((filter: OptionValueType) =>\n      isDictionaryForAdhocFilter(filter) ? new AdhocFilter(filter) : filter,\n    ),\n  );\n  const [partitionColumn, setPartitionColumn] = useState(undefined);\n  const [newFilterPopoverVisible, setNewFilterPopoverVisible] = useState(false);\n  const [droppedItem, setDroppedItem] = useState<\n    DndItemValue | typeof EMPTY_OBJECT\n  >({});\n\n  const optionsForSelect = (\n    columns: ColumnMeta[],\n    formData: QueryFormData | null | undefined,\n  ) => {\n    const options: OptionSortType[] = [\n      ...columns,\n      ...[...(formData?.metrics || []), formData?.metric].map(\n        metric =>\n          metric &&\n          (typeof metric === 'string'\n            ? { saved_metric_name: metric }\n            : new AdhocMetric(metric)),\n      ),\n    ].filter(option => option);\n\n    return options\n      .reduce(\n        (\n          results: (OptionSortType & { filterOptionName: string })[],\n          option,\n        ) => {\n          if ('saved_metric_name' in option && option.saved_metric_name) {\n            results.push({\n              ...option,\n              filterOptionName: option.saved_metric_name,\n            });\n          } else if ('column_name' in option && option.column_name) {\n            results.push({\n              ...option,\n              filterOptionName: `_col_${option.column_name}`,\n            });\n          } else if (option instanceof AdhocMetric) {\n            results.push({\n              ...option,\n              filterOptionName: `_adhocmetric_${option.label}`,\n            });\n          }\n          return results;\n        },\n        [],\n      )\n      .sort(\n        (a: OptionSortType, b: OptionSortType) =>\n          (a.saved_metric_name || a.column_name || a.label)?.localeCompare(\n            b.saved_metric_name || b.column_name || b.label || '',\n          ) ?? 0,\n      );\n  };\n  const [options, setOptions] = useState(\n    optionsForSelect(props.columns, props.formData),\n  );\n\n  useEffect(() => {\n    if (datasource && datasource.type === 'table') {\n      const dbId = datasource.database?.id;\n      const {\n        datasource_name: name,\n        schema,\n        is_sqllab_view: isSqllabView,\n      } = datasource;\n\n      if (!isSqllabView && dbId && name && schema) {\n        SupersetClient.get({\n          endpoint: `/api/v1/database/${dbId}/table_extra/${name}/${schema}/`,\n        })\n          .then(({ json }: { json: Record<string, any> }) => {\n            if (json?.partitions) {\n              const { partitions } = json;\n              // for now only show latest_partition option\n              // when table datasource has only 1 partition key.\n              if (\n                partitions?.cols &&\n                Object.keys(partitions.cols).length === 1\n              ) {\n                setPartitionColumn(partitions.cols[0]);\n              }\n            }\n          })\n          .catch((error: Record<string, any>) => {\n            logging.error('fetch extra_table_metadata:', error.statusText);\n          });\n      }\n    }\n  }, [datasource]);\n\n  useEffect(() => {\n    setOptions(optionsForSelect(props.columns, props.formData));\n  }, [props.columns, props.formData]);\n\n  useEffect(() => {\n    setValues(\n      (props.value || []).map((filter: OptionValueType) =>\n        isDictionaryForAdhocFilter(filter) ? new AdhocFilter(filter) : filter,\n      ),\n    );\n  }, [props.value]);\n\n  const removeValue = useCallback(\n    (index: number) => {\n      const valuesCopy = [...values];\n      valuesCopy.splice(index, 1);\n      setValues(valuesCopy);\n      onChange(valuesCopy);\n    },\n    [onChange, values],\n  );\n\n  const onClickClose = useCallback(\n    (index: number) => {\n      const result = canDelete?.(values[index], values);\n      if (typeof result === 'string') {\n        warning({ title: t('Warning'), content: result });\n        return;\n      }\n      removeValue(index);\n    },\n    [canDelete, removeValue, values],\n  );\n\n  const onShiftOptions = useCallback(\n    (dragIndex: number, hoverIndex: number) => {\n      const newValues = [...values];\n      [newValues[hoverIndex], newValues[dragIndex]] = [\n        newValues[dragIndex],\n        newValues[hoverIndex],\n      ];\n      setValues(newValues);\n    },\n    [values],\n  );\n\n  const getMetricExpression = useCallback(\n    (savedMetricName: string) =>\n      props.savedMetrics.find(\n        (savedMetric: Metric) => savedMetric.metric_name === savedMetricName,\n      )?.expression,\n    [props.savedMetrics],\n  );\n\n  const mapOption = useCallback(\n    (option: OptionValueType) => {\n      // already a AdhocFilter, skip\n      if (option instanceof AdhocFilter) {\n        return option;\n      }\n      const filterOptions = option as Record<string, any>;\n      // via datasource saved metric\n      if (filterOptions.saved_metric_name) {\n        return new AdhocFilter({\n          expressionType: EXPRESSION_TYPES.SQL,\n          subject: getMetricExpression(filterOptions.saved_metric_name),\n          operator:\n            OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.GREATER_THAN].operation,\n          operatorId: Operators.GREATER_THAN,\n          comparator: 0,\n          clause: CLAUSES.HAVING,\n        });\n      }\n      // has a custom label, meaning it's custom column\n      if (filterOptions.label) {\n        return new AdhocFilter({\n          expressionType: EXPRESSION_TYPES.SQL,\n          subject: new AdhocMetric(option).translateToSql(),\n          operator:\n            OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.GREATER_THAN].operation,\n          operatorId: Operators.GREATER_THAN,\n          comparator: 0,\n          clause: CLAUSES.HAVING,\n        });\n      }\n      // add a new filter item\n      if (filterOptions.column_name) {\n        return new AdhocFilter({\n          expressionType: EXPRESSION_TYPES.SIMPLE,\n          subject: filterOptions.column_name,\n          operator: OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.EQUALS].operation,\n          operatorId: Operators.EQUALS,\n          comparator: '',\n          clause: CLAUSES.WHERE,\n          isNew: true,\n        });\n      }\n      return null;\n    },\n    [datasource.type, getMetricExpression],\n  );\n\n  const onFilterEdit = useCallback(\n    (changedFilter: AdhocFilter) => {\n      onChange(\n        values.map((value: AdhocFilter) => {\n          if (value.filterOptionName === changedFilter.filterOptionName) {\n            return changedFilter;\n          }\n          return value;\n        }),\n      );\n    },\n    [onChange, values],\n  );\n\n  const onNewFilter = useCallback(\n    (newFilter: AdhocFilter) => {\n      const mappedOption = mapOption(newFilter);\n      if (mappedOption) {\n        const newValues = [...values, mappedOption];\n        setValues(newValues);\n        onChange(newValues);\n      }\n    },\n    [mapOption, onChange, values],\n  );\n\n  const togglePopover = useCallback((visible: boolean) => {\n    setNewFilterPopoverVisible(visible);\n  }, []);\n\n  const closePopover = useCallback(() => {\n    togglePopover(false);\n  }, [togglePopover]);\n\n  const valuesRenderer = useCallback(\n    () =>\n      values.map((adhocFilter: AdhocFilter, index: number) => (\n        <DndAdhocFilterOption\n          index={index}\n          adhocFilter={adhocFilter}\n          options={options}\n          datasource={datasource}\n          onFilterEdit={onFilterEdit}\n          partitionColumn={partitionColumn}\n          onClickClose={onClickClose}\n          onShiftOptions={onShiftOptions}\n        />\n      )),\n    [\n      onClickClose,\n      onFilterEdit,\n      onShiftOptions,\n      options,\n      partitionColumn,\n      datasource,\n      values,\n    ],\n  );\n\n  const handleClickGhostButton = useCallback(() => {\n    setDroppedItem({});\n    togglePopover(true);\n  }, [togglePopover]);\n\n  const defaultTimeFilter = useDefaultTimeFilter();\n  const adhocFilter = useMemo(() => {\n    if (isSavedMetric(droppedItem)) {\n      return new AdhocFilter({\n        expressionType: EXPRESSION_TYPES.SQL,\n        clause: CLAUSES.HAVING,\n        sqlExpression: droppedItem?.expression,\n      });\n    }\n    if (droppedItem instanceof AdhocMetric) {\n      return new AdhocFilter({\n        expressionType: EXPRESSION_TYPES.SQL,\n        clause: CLAUSES.HAVING,\n        sqlExpression: (droppedItem as AdhocMetric)?.translateToSql(),\n      });\n    }\n    const config: Partial<AdhocFilter> = {\n      subject: (droppedItem as ColumnMeta)?.column_name,\n    };\n    if (config.subject) {\n      config.operator = OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.IN].operation;\n      config.operatorId = Operators.IN;\n    }\n    if (\n      hasGenericChartAxes &&\n      isColumnMeta(droppedItem) &&\n      isTemporalColumn(droppedItem?.column_name, props.datasource)\n    ) {\n      config.operator = Operators.TEMPORAL_RANGE;\n      config.operatorId = Operators.TEMPORAL_RANGE;\n      config.comparator = defaultTimeFilter;\n    }\n    return new AdhocFilter(config);\n  }, [droppedItem]);\n\n  const canDrop = useCallback(() => true, []);\n  const handleDrop = useCallback(\n    (item: DatasourcePanelDndItem) => {\n      setDroppedItem(item.value);\n      togglePopover(true);\n    },\n    [controlName, togglePopover],\n  );\n\n  return (\n    <>\n      <DndSelectLabel\n        onDrop={handleDrop}\n        canDrop={canDrop}\n        valuesRenderer={valuesRenderer}\n        accept={DND_ACCEPTED_TYPES}\n        ghostButtonText={t('Drop columns/metrics here or click')}\n        onClickGhostButton={handleClickGhostButton}\n        {...props}\n      />\n      <AdhocFilterPopoverTrigger\n        adhocFilter={adhocFilter}\n        options={options}\n        datasource={datasource}\n        onFilterEdit={onNewFilter}\n        partitionColumn={partitionColumn}\n        isControlledComponent\n        visible={newFilterPopoverVisible}\n        togglePopover={togglePopover}\n        closePopover={closePopover}\n        requireSave={!!droppedItem}\n      />\n    </>\n  );\n};\n\nconst DndFilterSelectWithFallback = withDndFallback(\n  DndFilterSelect,\n  AdhocFilterControl,\n);\n\nexport { DndFilterSelectWithFallback as DndFilterSelect };\n"]},"metadata":{},"sourceType":"module"}