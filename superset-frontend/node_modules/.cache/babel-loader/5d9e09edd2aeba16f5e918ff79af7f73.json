{"ast":null,"code":"import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { FeatureFlag, getExtensionsRegistry, styled, SupersetClient, t } from '@superset-ui/core';\nimport React, { useState, useMemo, useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport rison from 'rison';\nimport { createFetchRelated, createFetchDistinct, createErrorHandler } from 'src/views/CRUD/utils';\nimport { useListViewResource } from 'src/views/CRUD/hooks';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport { DatasourceModal } from 'src/components/Datasource';\nimport DeleteModal from 'src/components/DeleteModal';\nimport handleResourceExport from 'src/utils/export';\nimport ListView, { FilterOperator } from 'src/components/ListView';\nimport Loading from 'src/components/Loading';\nimport SubMenu from 'src/features/home/SubMenu';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport FacePile from 'src/components/FacePile';\nimport CertifiedBadge from 'src/components/CertifiedBadge';\nimport InfoTooltip from 'src/components/InfoTooltip';\nimport ImportModelsModal from 'src/components/ImportModal/index';\nimport { isFeatureEnabled } from 'src/featureFlags';\nimport WarningIconWithTooltip from 'src/components/WarningIconWithTooltip';\nimport { isUserAdmin } from 'src/dashboard/util/permissionUtils';\nimport { GenericLink } from 'src/components/GenericLink/GenericLink';\nimport { PAGE_SIZE, SORT_BY, PASSWORDS_NEEDED_MESSAGE, CONFIRM_OVERWRITE_MESSAGE } from 'src/features/datasets/constants';\nimport DuplicateDatasetModal from 'src/features/datasets/DuplicateDatasetModal';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst extensionsRegistry = getExtensionsRegistry();\nconst DatasetDeleteRelatedExtension = extensionsRegistry.get('dataset.delete.related');\nconst FlexRowContainer = styled.div`\n  align-items: center;\n  display: flex;\n\n  svg {\n    margin-right: ${(_ref) => {let { theme } = _ref;return theme.gridUnit;}}px;\n  }\n`;\nconst Actions = styled.div`\n  color: ${(_ref2) => {let { theme } = _ref2;return theme.colors.grayscale.base;}};\n\n  .disabled {\n    svg,\n    i {\n      &:hover {\n        path {\n          fill: ${(_ref3) => {let { theme } = _ref3;return theme.colors.grayscale.light1;}};\n        }\n      }\n    }\n    color: ${(_ref4) => {let { theme } = _ref4;return theme.colors.grayscale.light1;}};\n    .ant-menu-item:hover {\n      color: ${(_ref5) => {let { theme } = _ref5;return theme.colors.grayscale.light1;}};\n      cursor: default;\n    }\n    &::after {\n      color: ${(_ref6) => {let { theme } = _ref6;return theme.colors.grayscale.light1;}};\n    }\n  }\n`;\nconst DatasetList = (_ref7) => {let { addDangerToast, addSuccessToast, user } = _ref7;\n  const history = useHistory();\n  const { state: { loading, resourceCount: datasetCount, resourceCollection: datasets, bulkSelectEnabled }, hasPerm, fetchData, toggleBulkSelect, refreshData } = useListViewResource('dataset', t('dataset'), addDangerToast);\n  const [datasetCurrentlyDeleting, setDatasetCurrentlyDeleting] = useState(null);\n  const [datasetCurrentlyEditing, setDatasetCurrentlyEditing] = useState(null);\n  const [datasetCurrentlyDuplicating, setDatasetCurrentlyDuplicating] = useState(null);\n  const [importingDataset, showImportModal] = useState(false);\n  const [passwordFields, setPasswordFields] = useState([]);\n  const [preparingExport, setPreparingExport] = useState(false);\n  const [sshTunnelPasswordFields, setSSHTunnelPasswordFields] = useState([]);\n  const [sshTunnelPrivateKeyFields, setSSHTunnelPrivateKeyFields] = useState([]);\n  const [sshTunnelPrivateKeyPasswordFields, setSSHTunnelPrivateKeyPasswordFields] = useState([]);\n  const openDatasetImportModal = () => {\n    showImportModal(true);\n  };\n  const closeDatasetImportModal = () => {\n    showImportModal(false);\n  };\n  const handleDatasetImport = () => {\n    showImportModal(false);\n    refreshData();\n    addSuccessToast(t('Dataset imported'));\n  };\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canCreate = hasPerm('can_write');\n  const canDuplicate = hasPerm('can_duplicate');\n  const canExport = hasPerm('can_export') && isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT);\n  const initialSort = SORT_BY;\n  const openDatasetEditModal = useCallback((_ref8) => {let { id } = _ref8;\n    SupersetClient.get({\n      endpoint: `/api/v1/dataset/${id}` }).\n\n    then((_ref9) => {let { json = {} } = _ref9;\n      const addCertificationFields = json.result.columns.map((column) => {\n        const { certification: { details = '', certified_by = '' } = {} } = JSON.parse(column.extra || '{}') || {};\n        return {\n          ...column,\n          certification_details: details || '',\n          certified_by: certified_by || '',\n          is_certified: details || certified_by };\n\n      });\n      // eslint-disable-next-line no-param-reassign\n      json.result.columns = [...addCertificationFields];\n      setDatasetCurrentlyEditing(json.result);\n    }).\n    catch(() => {\n      addDangerToast(t('An error occurred while fetching dataset related data'));\n    });\n  }, [addDangerToast]);\n  const openDatasetDeleteModal = (dataset) => SupersetClient.get({\n    endpoint: `/api/v1/dataset/${dataset.id}/related_objects` }).\n\n  then((_ref10) => {let { json = {} } = _ref10;\n    setDatasetCurrentlyDeleting({\n      ...dataset,\n      chart_count: json.charts.count,\n      dashboard_count: json.dashboards.count });\n\n  }).\n  catch(createErrorHandler((errMsg) => t('An error occurred while fetching dataset related data: %s', errMsg)));\n  const openDatasetDuplicateModal = (dataset) => {\n    setDatasetCurrentlyDuplicating(dataset);\n  };\n  const handleBulkDatasetExport = (datasetsToExport) => {\n    const ids = datasetsToExport.map((_ref11) => {let { id } = _ref11;return id;});\n    handleResourceExport('dataset', ids, () => {\n      setPreparingExport(false);\n    });\n    setPreparingExport(true);\n  };\n  const columns = useMemo(() => [\n  {\n    Cell: (_ref12) => {let { row: { original: { kind } } } = _ref12;\n      if (kind === 'physical') {\n        return ___EmotionJSX(Tooltip, { id: \"physical-dataset-tooltip\", title: t('Physical dataset') },\n        ___EmotionJSX(Icons.DatasetPhysical, null));\n\n      }\n      return ___EmotionJSX(Tooltip, { id: \"virtual-dataset-tooltip\", title: t('Virtual dataset') },\n      ___EmotionJSX(Icons.DatasetVirtual, null));\n\n    },\n    accessor: 'kind_icon',\n    disableSortBy: true,\n    size: 'xs',\n    id: 'id' },\n\n  {\n    Cell: (_ref13) => {let { row: { original: { extra, table_name: datasetTitle, description, explore_url: exploreURL } } } = _ref13;\n      const titleLink =\n      // exploreUrl can be a link to Explore or an external link\n      // in the first case use SPA routing, else use HTML anchor\n      ___EmotionJSX(GenericLink, { to: exploreURL }, datasetTitle);\n      try {\n        const parsedExtra = JSON.parse(extra);\n        return ___EmotionJSX(FlexRowContainer, null,\n        (parsedExtra == null ? void 0 : parsedExtra.certification) && ___EmotionJSX(CertifiedBadge, { certifiedBy: parsedExtra.certification.certified_by, details: parsedExtra.certification.details, size: \"l\" }),\n        (parsedExtra == null ? void 0 : parsedExtra.warning_markdown) && ___EmotionJSX(WarningIconWithTooltip, { warningMarkdown: parsedExtra.warning_markdown, size: \"l\" }),\n        titleLink,\n        description && ___EmotionJSX(InfoTooltip, { tooltip: description, viewBox: \"0 -1 24 24\" }));\n\n      }\n      catch {\n        return titleLink;\n      }\n    },\n    Header: t('Name'),\n    accessor: 'table_name' },\n\n  {\n    Cell: (_ref14) => {let { row: { original: { kind } } } = _ref14;return kind === 'physical' ? t('Physical') : t('Virtual');},\n    Header: t('Type'),\n    accessor: 'kind',\n    disableSortBy: true,\n    size: 'md' },\n\n  {\n    Header: t('Database'),\n    accessor: 'database.database_name',\n    size: 'lg' },\n\n  {\n    Header: t('Schema'),\n    accessor: 'schema',\n    size: 'lg' },\n\n  {\n    Cell: (_ref15) => {let { row: { original: { changed_on_delta_humanized: changedOn } } } = _ref15;return ___EmotionJSX(\"span\", { className: \"no-wrap\" }, changedOn);},\n    Header: t('Modified'),\n    accessor: 'changed_on_delta_humanized',\n    size: 'xl' },\n\n  {\n    Cell: (_ref16) => {let { row: { original: { changed_by_name: changedByName } } } = _ref16;return changedByName;},\n    Header: t('Modified by'),\n    accessor: 'changed_by.first_name',\n    size: 'xl' },\n\n  {\n    accessor: 'database',\n    disableSortBy: true,\n    hidden: true },\n\n  {\n    Cell: (_ref17) => {let { row: { original: { owners = [] } } } = _ref17;return ___EmotionJSX(FacePile, { users: owners });},\n    Header: t('Owners'),\n    id: 'owners',\n    disableSortBy: true,\n    size: 'lg' },\n\n  {\n    accessor: 'sql',\n    hidden: true,\n    disableSortBy: true },\n\n  {\n    Cell: (_ref18) => {var _context;let { row: { original } } = _ref18;\n      // Verify owner or isAdmin\n      const allowEdit = _includesInstanceProperty(_context = original.owners.map((o) => o.id)).call(_context, user.userId) ||\n      isUserAdmin(user);\n      const handleEdit = () => openDatasetEditModal(original);\n      const handleDelete = () => openDatasetDeleteModal(original);\n      const handleExport = () => handleBulkDatasetExport([original]);\n      const handleDuplicate = () => openDatasetDuplicateModal(original);\n      if (!canEdit && !canDelete && !canExport && !canDuplicate) {\n        return null;\n      }\n      return ___EmotionJSX(Actions, { className: \"actions\" },\n      canDelete && ___EmotionJSX(Tooltip, { id: \"delete-action-tooltip\", title: t('Delete'), placement: \"bottom\" },\n      ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: handleDelete },\n      ___EmotionJSX(Icons.Trash, null))),\n\n\n      canExport && ___EmotionJSX(Tooltip, { id: \"export-action-tooltip\", title: t('Export'), placement: \"bottom\" },\n      ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: handleExport },\n      ___EmotionJSX(Icons.Share, null))),\n\n\n      canEdit && ___EmotionJSX(Tooltip, { id: \"edit-action-tooltip\", title: allowEdit ?\n        t('Edit') :\n        t('You must be a dataset owner in order to edit. Please reach out to a dataset owner to request modifications or edit access.'), placement: \"bottomRight\" },\n      ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: allowEdit ? 'action-button' : 'disabled', onClick: allowEdit ? handleEdit : undefined },\n      ___EmotionJSX(Icons.EditAlt, null))),\n\n\n      canDuplicate && original.kind === 'virtual' && ___EmotionJSX(Tooltip, { id: \"duplicate-action-tooltop\", title: t('Duplicate'), placement: \"bottom\" },\n      ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: handleDuplicate },\n      ___EmotionJSX(Icons.Copy, null))));\n\n\n\n    },\n    Header: t('Actions'),\n    id: 'actions',\n    hidden: !canEdit && !canDelete && !canDuplicate,\n    disableSortBy: true }],\n\n  [canEdit, canDelete, canExport, openDatasetEditModal, canDuplicate, user]);\n  const filterTypes = useMemo(() => [\n  {\n    Header: t('Owner'),\n    key: 'owner',\n    id: 'owners',\n    input: 'select',\n    operator: FilterOperator.relationManyMany,\n    unfilteredLabel: 'All',\n    fetchSelects: createFetchRelated('dataset', 'owners', createErrorHandler((errMsg) => t('An error occurred while fetching dataset owner values: %s', errMsg)), user),\n    paginate: true },\n\n  {\n    Header: t('Database'),\n    key: 'database',\n    id: 'database',\n    input: 'select',\n    operator: FilterOperator.relationOneMany,\n    unfilteredLabel: 'All',\n    fetchSelects: createFetchRelated('dataset', 'database', createErrorHandler((errMsg) => t('An error occurred while fetching datasets: %s', errMsg))),\n    paginate: true },\n\n  {\n    Header: t('Schema'),\n    key: 'schema',\n    id: 'schema',\n    input: 'select',\n    operator: FilterOperator.equals,\n    unfilteredLabel: 'All',\n    fetchSelects: createFetchDistinct('dataset', 'schema', createErrorHandler((errMsg) => t('An error occurred while fetching schema values: %s', errMsg))),\n    paginate: true },\n\n  {\n    Header: t('Type'),\n    key: 'sql',\n    id: 'sql',\n    input: 'select',\n    operator: FilterOperator.datasetIsNullOrEmpty,\n    unfilteredLabel: 'All',\n    selects: [\n    { label: t('Virtual'), value: false },\n    { label: t('Physical'), value: true }] },\n\n\n  {\n    Header: t('Certified'),\n    key: 'certified',\n    id: 'id',\n    urlDisplay: 'certified',\n    input: 'select',\n    operator: FilterOperator.datasetIsCertified,\n    unfilteredLabel: t('Any'),\n    selects: [\n    { label: t('Yes'), value: true },\n    { label: t('No'), value: false }] },\n\n\n  {\n    Header: t('Search'),\n    key: 'search',\n    id: 'table_name',\n    input: 'search',\n    operator: FilterOperator.contains }],\n\n  [user]);\n  const menuData = {\n    activeChild: 'Datasets',\n    name: t('Datasets') };\n\n  const buttonArr = [];\n  if (canDelete || canExport) {\n    buttonArr.push({\n      name: t('Bulk select'),\n      onClick: toggleBulkSelect,\n      buttonStyle: 'secondary' });\n\n  }\n  if (canCreate) {\n    buttonArr.push({\n      name: ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(\"i\", { className: \"fa fa-plus\" }), \" \", t('Dataset'), ' '),\n\n      onClick: () => {\n        history.push('/dataset/add/');\n      },\n      buttonStyle: 'primary' });\n\n    if (isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT)) {\n      buttonArr.push({\n        name: ___EmotionJSX(Tooltip, { id: \"import-tooltip\", title: t('Import datasets'), placement: \"bottomRight\" },\n        ___EmotionJSX(Icons.Import, null)),\n\n        buttonStyle: 'link',\n        onClick: openDatasetImportModal });\n\n    }\n  }\n  menuData.buttons = buttonArr;\n  const closeDatasetDeleteModal = () => {\n    setDatasetCurrentlyDeleting(null);\n  };\n  const closeDatasetEditModal = () => {\n    setDatasetCurrentlyEditing(null);\n  };\n  const closeDatasetDuplicateModal = () => {\n    setDatasetCurrentlyDuplicating(null);\n  };\n  const handleDatasetDelete = (_ref19) => {let { id, table_name: tableName } = _ref19;\n    SupersetClient.delete({\n      endpoint: `/api/v1/dataset/${id}` }).\n    then(() => {\n      refreshData();\n      setDatasetCurrentlyDeleting(null);\n      addSuccessToast(t('Deleted: %s', tableName));\n    }, createErrorHandler((errMsg) => addDangerToast(t('There was an issue deleting %s: %s', tableName, errMsg))));\n  };\n  const handleBulkDatasetDelete = (datasetsToDelete) => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/dataset/?q=${rison.encode(datasetsToDelete.map((_ref20) => {let { id } = _ref20;return id;}))}` }).\n    then((_ref21) => {let { json = {} } = _ref21;\n      refreshData();\n      addSuccessToast(json.message);\n    }, createErrorHandler((errMsg) => addDangerToast(t('There was an issue deleting the selected datasets: %s', errMsg))));\n  };\n  const handleDatasetDuplicate = (newDatasetName) => {\n    if (datasetCurrentlyDuplicating === null) {\n      addDangerToast(t('There was an issue duplicating the dataset.'));\n    }\n    SupersetClient.post({\n      endpoint: `/api/v1/dataset/duplicate`,\n      jsonPayload: {\n        base_model_id: datasetCurrentlyDuplicating == null ? void 0 : datasetCurrentlyDuplicating.id,\n        table_name: newDatasetName } }).\n\n    then(() => {\n      setDatasetCurrentlyDuplicating(null);\n      refreshData();\n    }, createErrorHandler((errMsg) => addDangerToast(t('There was an issue duplicating the selected datasets: %s', errMsg))));\n  };\n  return ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(SubMenu, menuData),\n  datasetCurrentlyDeleting && ___EmotionJSX(DeleteModal, { description: ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(\"p\", null,\n    t('The dataset %s is linked to %s charts that appear on %s dashboards. Are you sure you want to continue? Deleting the dataset will break those objects.', datasetCurrentlyDeleting.table_name, datasetCurrentlyDeleting.chart_count, datasetCurrentlyDeleting.dashboard_count)),\n\n    DatasetDeleteRelatedExtension && ___EmotionJSX(DatasetDeleteRelatedExtension, { dataset: datasetCurrentlyDeleting })),\n    onConfirm: () => {\n      if (datasetCurrentlyDeleting) {\n        handleDatasetDelete(datasetCurrentlyDeleting);\n      }\n    }, onHide: closeDatasetDeleteModal, open: true, title: t('Delete Dataset?') }),\n  datasetCurrentlyEditing && ___EmotionJSX(DatasourceModal, { datasource: datasetCurrentlyEditing, onDatasourceSave: refreshData, onHide: closeDatasetEditModal, show: true }),\n  ___EmotionJSX(DuplicateDatasetModal, { dataset: datasetCurrentlyDuplicating, onHide: closeDatasetDuplicateModal, onDuplicate: handleDatasetDuplicate }),\n  ___EmotionJSX(ConfirmStatusChange, { title: t('Please confirm'), description: t('Are you sure you want to delete the selected datasets?'), onConfirm: handleBulkDatasetDelete },\n  (confirmDelete) => {\n    const bulkActions = [];\n    if (canDelete) {\n      bulkActions.push({\n        key: 'delete',\n        name: t('Delete'),\n        onSelect: confirmDelete,\n        type: 'danger' });\n\n    }\n    if (canExport) {\n      bulkActions.push({\n        key: 'export',\n        name: t('Export'),\n        type: 'primary',\n        onSelect: handleBulkDatasetExport });\n\n    }\n    return ___EmotionJSX(ListView, { className: \"dataset-list-view\", columns: columns, data: datasets, count: datasetCount, pageSize: PAGE_SIZE, fetchData: fetchData, filters: filterTypes, loading: loading, initialSort: initialSort, bulkActions: bulkActions, bulkSelectEnabled: bulkSelectEnabled, disableBulkSelect: toggleBulkSelect, renderBulkSelectCopy: (selected) => {\n        const { virtualCount, physicalCount } = selected.reduce((acc, e) => {\n          if (e.original.kind === 'physical')\n          acc.physicalCount += 1;else\n          if (e.original.kind === 'virtual') {\n            acc.virtualCount += 1;\n          }\n          return acc;\n        }, { virtualCount: 0, physicalCount: 0 });\n        if (!selected.length) {\n          return t('0 Selected');\n        }\n        if (virtualCount && !physicalCount) {\n          return t('%s Selected (Virtual)', selected.length, virtualCount);\n        }\n        if (physicalCount && !virtualCount) {\n          return t('%s Selected (Physical)', selected.length, physicalCount);\n        }\n        return t('%s Selected (%s Physical, %s Virtual)', selected.length, physicalCount, virtualCount);\n      } });\n  }),\n\n\n  ___EmotionJSX(ImportModelsModal, { resourceName: \"dataset\", resourceLabel: t('dataset'), passwordsNeededMessage: PASSWORDS_NEEDED_MESSAGE, confirmOverwriteMessage: CONFIRM_OVERWRITE_MESSAGE, addDangerToast: addDangerToast, addSuccessToast: addSuccessToast, onModelImport: handleDatasetImport, show: importingDataset, onHide: closeDatasetImportModal, passwordFields: passwordFields, setPasswordFields: setPasswordFields, sshTunnelPasswordFields: sshTunnelPasswordFields, setSSHTunnelPasswordFields: setSSHTunnelPasswordFields, sshTunnelPrivateKeyFields: sshTunnelPrivateKeyFields, setSSHTunnelPrivateKeyFields: setSSHTunnelPrivateKeyFields, sshTunnelPrivateKeyPasswordFields: sshTunnelPrivateKeyPasswordFields, setSSHTunnelPrivateKeyPasswordFields: setSSHTunnelPrivateKeyPasswordFields }),\n  preparingExport && ___EmotionJSX(Loading, null));\n\n};\nexport default withToasts(DatasetList);","map":{"version":3,"mappings":"iGAAA;;;;;;;;;;;;;;;;;;AAkBA,SACEA,WADF,EAEEC,qBAFF,EAGEC,MAHF,EAIEC,cAJF,EAKEC,CALF,QAMO,mBANP;AAOA,OAAOC,KAAP,IAEEC,QAFF,EAGEC,OAHF,EAIEC,WAJF,QAKO,OALP;AAMA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,kBADF,EAEEC,mBAFF,EAGEC,kBAHF,QAIO,sBAJP;AAMA,SAASC,mBAAT,QAAoC,sBAApC;AACA,OAAOC,mBAAP,MAAgC,oCAAhC;AACA,SAASC,eAAT,QAAgC,2BAAhC;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,oBAAP,MAAiC,kBAAjC;AACA,OAAOC,QAAP,IAGEC,cAHF,QAIO,yBAJP;AAKA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAOC,OAAP,MAAmD,2BAAnD;AAEA,OAAOC,UAAP,MAAuB,yCAAvB;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,OAAOC,KAAP,MAAkB,sBAAlB;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,OAAOC,cAAP,MAA2B,+BAA3B;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,iBAAP,MAA8B,kCAA9B;AACA,SAASC,gBAAT,QAAiC,kBAAjC;AACA,OAAOC,sBAAP,MAAmC,uCAAnC;AACA,SAASC,WAAT,QAA4B,oCAA5B;AACA,SAASC,WAAT,QAA4B,wCAA5B;AAEA,SACEC,SADF,EAEEC,OAFF,EAGEC,wBAHF,EAIEC,yBAJF,QAKO,iCALP;AAMA,OAAOC,qBAAP,MAAkC,6CAAlC,C;AAEA,MAAMC,kBAAkB,GAAGtC,qBAAqB,EAAhD;AACA,MAAMuC,6BAA6B,GAAGD,kBAAkB,CAACE,GAAnB,CACpC,wBADoC,CAAtC;AAIA,MAAMC,gBAAgB,GAAGxC,MAAM,CAACyC,GAAG;;;;;oBAKf,eAAC,EAAEC,KAAF,EAAD,eAAeA,KAAK,CAACC,QAArB,EAA6B;;CALjD;AASA,MAAMC,OAAO,GAAG5C,MAAM,CAACyC,GAAG;WACf,gBAAC,EAAEC,KAAF,EAAD,gBAAeA,KAAK,CAACG,MAAN,CAAaC,SAAb,CAAuBC,IAAtC,EAA0C;;;;;;;kBAOnC,gBAAC,EAAEL,KAAF,EAAD,gBAAeA,KAAK,CAACG,MAAN,CAAaC,SAAb,CAAuBE,MAAtC,EAA4C;;;;aAIjD,gBAAC,EAAEN,KAAF,EAAD,gBAAeA,KAAK,CAACG,MAAN,CAAaC,SAAb,CAAuBE,MAAtC,EAA4C;;eAE1C,gBAAC,EAAEN,KAAF,EAAD,gBAAeA,KAAK,CAACG,MAAN,CAAaC,SAAb,CAAuBE,MAAtC,EAA4C;;;;eAI5C,gBAAC,EAAEN,KAAF,EAAD,gBAAeA,KAAK,CAACG,MAAN,CAAaC,SAAb,CAAuBE,MAAtC,EAA4C;;;CAlB3D;AAuDA,MAAMC,WAAW,GAAwC,WAIpD,KAJqD,EACxDC,cADwD,EAExDC,eAFwD,EAGxDC,IAHwD,EAIrD;EACH,MAAMC,OAAO,GAAG9C,UAAU,EAA1B;EACA,MAAM,EACJ+C,KAAK,EAAE,EACLC,OADK,EAELC,aAAa,EAAEC,YAFV,EAGLC,kBAAkB,EAAEC,QAHf,EAILC,iBAJK,EADH,EAOJC,OAPI,EAQJC,SARI,EASJC,gBATI,EAUJC,WAVI,KAWFpD,mBAAmB,CAAU,SAAV,EAAqBV,CAAC,CAAC,SAAD,CAAtB,EAAmCgD,cAAnC,CAXvB;EAaA,MAAM,CAACe,wBAAD,EAA2BC,2BAA3B,IAA0D9D,QAAQ,CAEtE,IAFsE,CAAxE;EAIA,MAAM,CAAC+D,uBAAD,EAA0BC,0BAA1B,IACJhE,QAAQ,CAAiB,IAAjB,CADV;EAGA,MAAM,CAACiE,2BAAD,EAA8BC,8BAA9B,IACJlE,QAAQ,CAAwB,IAAxB,CADV;EAGA,MAAM,CAACmE,gBAAD,EAAmBC,eAAnB,IAAsCpE,QAAQ,CAAU,KAAV,CAApD;EACA,MAAM,CAACqE,cAAD,EAAiBC,iBAAjB,IAAsCtE,QAAQ,CAAW,EAAX,CAApD;EACA,MAAM,CAACuE,eAAD,EAAkBC,kBAAlB,IAAwCxE,QAAQ,CAAU,KAAV,CAAtD;EACA,MAAM,CAACyE,uBAAD,EAA0BC,0BAA1B,IAAwD1E,QAAQ,CAEpE,EAFoE,CAAtE;EAGA,MAAM,CAAC2E,yBAAD,EAA4BC,4BAA5B,IAA4D5E,QAAQ,CAExE,EAFwE,CAA1E;EAGA,MAAM,CACJ6E,iCADI,EAEJC,oCAFI,IAGF9E,QAAQ,CAAW,EAAX,CAHZ;EAKA,MAAM+E,sBAAsB,GAAG,MAAK;IAClCX,eAAe,CAAC,IAAD,CAAf;EACD,CAFD;EAIA,MAAMY,uBAAuB,GAAG,MAAK;IACnCZ,eAAe,CAAC,KAAD,CAAf;EACD,CAFD;EAIA,MAAMa,mBAAmB,GAAG,MAAK;IAC/Bb,eAAe,CAAC,KAAD,CAAf;IACAR,WAAW;IACXb,eAAe,CAACjD,CAAC,CAAC,kBAAD,CAAF,CAAf;EACD,CAJD;EAMA,MAAMoF,OAAO,GAAGzB,OAAO,CAAC,WAAD,CAAvB;EACA,MAAM0B,SAAS,GAAG1B,OAAO,CAAC,WAAD,CAAzB;EACA,MAAM2B,SAAS,GAAG3B,OAAO,CAAC,WAAD,CAAzB;EACA,MAAM4B,YAAY,GAAG5B,OAAO,CAAC,eAAD,CAA5B;EACA,MAAM6B,SAAS,GACb7B,OAAO,CAAC,YAAD,CAAP,IAAyBjC,gBAAgB,CAAC9B,WAAW,CAAC6F,gBAAb,CAD3C;EAGA,MAAMC,WAAW,GAAG3D,OAApB;EAEA,MAAM4D,oBAAoB,GAAGvF,WAAW,CACtC,WAAoB,KAAnB,EAAEwF,EAAF,EAAmB;IAClB7F,cAAc,CAACsC,GAAf,CAAmB;MACjBwD,QAAQ,EAAE,mBAAmBD,EAAE,EADd,EAAnB;;IAGGE,IAHH,CAGQ,WAAkB,KAAjB,EAAEC,IAAI,GAAG,EAAT,EAAiB;MACtB,MAAMC,sBAAsB,GAAGD,IAAI,CAACE,MAAL,CAAYC,OAAZ,CAAoBC,GAApB,CAC7B,CAACC,MAAD,KAAyB;QACvB,MAAM,EACJC,aAAa,EAAE,EAAEC,OAAO,GAAG,EAAZ,EAAgBC,YAAY,GAAG,EAA/B,KAAsC,EADjD,KAEFC,IAAI,CAACC,KAAL,CAAWL,MAAM,CAACM,KAAP,IAAgB,IAA3B,KAAoC,EAFxC;QAGA,OAAO;UACL,GAAGN,MADE;UAELO,qBAAqB,EAAEL,OAAO,IAAI,EAF7B;UAGLC,YAAY,EAAEA,YAAY,IAAI,EAHzB;UAILK,YAAY,EAAEN,OAAO,IAAIC,YAJpB,EAAP;;MAMD,CAX4B,CAA/B;MAaA;MACAR,IAAI,CAACE,MAAL,CAAYC,OAAZ,GAAsB,CAAC,GAAGF,sBAAJ,CAAtB;MACA9B,0BAA0B,CAAC6B,IAAI,CAACE,MAAN,CAA1B;IACD,CApBH;IAqBGY,KArBH,CAqBS,MAAK;MACV7D,cAAc,CACZhD,CAAC,CAAC,uDAAD,CADW,CAAd;IAGD,CAzBH;EA0BD,CA5BqC,EA6BtC,CAACgD,cAAD,CA7BsC,CAAxC;EAgCA,MAAM8D,sBAAsB,GAAG,CAACC,OAAD,KAC7BhH,cAAc,CAACsC,GAAf,CAAmB;IACjBwD,QAAQ,EAAE,mBAAmBkB,OAAO,CAACnB,EAAE,kBADtB,EAAnB;;EAGGE,IAHH,CAGQ,YAAkB,KAAjB,EAAEC,IAAI,GAAG,EAAT,EAAiB;IACtB/B,2BAA2B,CAAC;MAC1B,GAAG+C,OADuB;MAE1BC,WAAW,EAAEjB,IAAI,CAACkB,MAAL,CAAYC,KAFC;MAG1BC,eAAe,EAAEpB,IAAI,CAACqB,UAAL,CAAgBF,KAHP,EAAD,CAA3B;;EAKD,CATH;EAUGL,KAVH,CAWIpG,kBAAkB,CAAC,OAAM,KACvBT,CAAC,CACC,2DADD,EAECqH,MAFD,CADe,CAXtB,CADF;EAoBA,MAAMC,yBAAyB,GAAG,CAACP,OAAD,KAA4B;IAC5D3C,8BAA8B,CAAC2C,OAAD,CAA9B;EACD,CAFD;EAIA,MAAMQ,uBAAuB,GAAG,CAACC,gBAAD,KAAgC;IAC9D,MAAMC,GAAG,GAAGD,gBAAgB,CAACrB,GAAjB,CAAqB,iBAAC,EAAEP,EAAF,EAAD,iBAAYA,EAAZ,EAArB,CAAZ;IACA9E,oBAAoB,CAAC,SAAD,EAAY2G,GAAZ,EAAiB,MAAK;MACxC/C,kBAAkB,CAAC,KAAD,CAAlB;IACD,CAFmB,CAApB;IAGAA,kBAAkB,CAAC,IAAD,CAAlB;EACD,CAND;EAQA,MAAMwB,OAAO,GAAG/F,OAAO,CACrB,MAAM;EACJ;IACEuH,IAAI,EAAE,YAII,KAJH,EACLC,GAAG,EAAE,EACHC,QAAQ,EAAE,EAAEC,IAAF,EADP,EADA,EAIG;MACR,IAAIA,IAAI,KAAK,UAAb,EAAyB;QACvB,OACE,cAAC,OAAD,IACE,EAAE,EAAC,0BADL,EAEE,KAAK,EAAE7H,CAAC,CAAC,kBAAD,CAFV;QAIE,cAAC,KAAD,CAAO,eAAP,OAJF,CADF;;MAQD;MAED,OACE,cAAC,OAAD,IAAS,EAAE,EAAC,yBAAZ,EAAsC,KAAK,EAAEA,CAAC,CAAC,iBAAD,CAA9C;MACE,cAAC,KAAD,CAAO,cAAP,OADF,CADF;;IAKD,CAtBH;IAuBE8H,QAAQ,EAAE,WAvBZ;IAwBEC,aAAa,EAAE,IAxBjB;IAyBEC,IAAI,EAAE,IAzBR;IA0BEpC,EAAE,EAAE,IA1BN,EADI;;EA6BJ;IACE8B,IAAI,EAAE,YASI,KATH,EACLC,GAAG,EAAE,EACHC,QAAQ,EAAE,EACRlB,KADQ,EAERuB,UAAU,EAAEC,YAFJ,EAGRC,WAHQ,EAIRC,WAAW,EAAEC,UAJL,EADP,EADA,EASG;MACR,MAAMC,SAAS;MACb;MACA;MACA,cAAC,WAAD,IAAa,EAAE,EAAED,UAAjB,IAA8BH,YAA9B,CAHF;MAKA,IAAI;QACF,MAAMK,WAAW,GAAG/B,IAAI,CAACC,KAAL,CAAWC,KAAX,CAApB;QACA,OACE,cAAC,gBAAD;QACG,YAAW,QAAX,uBAAW,CAAEL,aAAb,KACC,cAAC,cAAD,IACE,WAAW,EAAEkC,WAAW,CAAClC,aAAZ,CAA0BE,YADzC,EAEE,OAAO,EAAEgC,WAAW,CAAClC,aAAZ,CAA0BC,OAFrC,EAGE,IAAI,EAAC,GAHP,GAFJ;QAQG,YAAW,QAAX,uBAAW,CAAEkC,gBAAb,KACC,cAAC,sBAAD,IACE,eAAe,EAAED,WAAW,CAACC,gBAD/B,EAEE,IAAI,EAAC,GAFP,GATJ;QAcGF,SAdH;QAeGH,WAAW,IACV,cAAC,WAAD,IAAa,OAAO,EAAEA,WAAtB,EAAmC,OAAO,EAAC,YAA3C,GAhBJ,CADF;;MAqBD;MAAC,MAAM;QACN,OAAOG,SAAP;MACD;IACF,CA1CH;IA2CEG,MAAM,EAAEzI,CAAC,CAAC,MAAD,CA3CX;IA4CE8H,QAAQ,EAAE,YA5CZ,EA7BI;;EA2EJ;IACEJ,IAAI,EAAE,iBAAC,EACLC,GAAG,EAAE,EACHC,QAAQ,EAAE,EAAEC,IAAF,EADP,EADA,EAAD,iBAIMA,IAAI,KAAK,UAAT,GAAsB7H,CAAC,CAAC,UAAD,CAAvB,GAAsCA,CAAC,CAAC,SAAD,CAJ7C,EADR;IAMEyI,MAAM,EAAEzI,CAAC,CAAC,MAAD,CANX;IAOE8H,QAAQ,EAAE,MAPZ;IAQEC,aAAa,EAAE,IARjB;IASEC,IAAI,EAAE,IATR,EA3EI;;EAsFJ;IACES,MAAM,EAAEzI,CAAC,CAAC,UAAD,CADX;IAEE8H,QAAQ,EAAE,wBAFZ;IAGEE,IAAI,EAAE,IAHR,EAtFI;;EA2FJ;IACES,MAAM,EAAEzI,CAAC,CAAC,QAAD,CADX;IAEE8H,QAAQ,EAAE,QAFZ;IAGEE,IAAI,EAAE,IAHR,EA3FI;;EAgGJ;IACEN,IAAI,EAAE,iBAAC,EACLC,GAAG,EAAE,EACHC,QAAQ,EAAE,EAAEc,0BAA0B,EAAEC,SAA9B,EADP,EADA,EAAD,iBAIK,wBAAM,SAAS,EAAC,SAAhB,IAA2BA,SAA3B,CAJL,EADR;IAMEF,MAAM,EAAEzI,CAAC,CAAC,UAAD,CANX;IAOE8H,QAAQ,EAAE,4BAPZ;IAQEE,IAAI,EAAE,IARR,EAhGI;;EA0GJ;IACEN,IAAI,EAAE,iBAAC,EACLC,GAAG,EAAE,EACHC,QAAQ,EAAE,EAAEgB,eAAe,EAAEC,aAAnB,EADP,EADA,EAAD,iBAIKA,aAJL,EADR;IAMEJ,MAAM,EAAEzI,CAAC,CAAC,aAAD,CANX;IAOE8H,QAAQ,EAAE,uBAPZ;IAQEE,IAAI,EAAE,IARR,EA1GI;;EAoHJ;IACEF,QAAQ,EAAE,UADZ;IAEEC,aAAa,EAAE,IAFjB;IAGEe,MAAM,EAAE,IAHV,EApHI;;EAyHJ;IACEpB,IAAI,EAAE,iBAAC,EACLC,GAAG,EAAE,EACHC,QAAQ,EAAE,EAAEmB,MAAM,GAAG,EAAX,EADP,EADA,EAAD,iBAIK,cAAC,QAAD,IAAU,KAAK,EAAEA,MAAjB,GAJL,EADR;IAMEN,MAAM,EAAEzI,CAAC,CAAC,QAAD,CANX;IAOE4F,EAAE,EAAE,QAPN;IAQEmC,aAAa,EAAE,IARjB;IASEC,IAAI,EAAE,IATR,EAzHI;;EAoIJ;IACEF,QAAQ,EAAE,KADZ;IAEEgB,MAAM,EAAE,IAFV;IAGEf,aAAa,EAAE,IAHjB,EApII;;EAyIJ;IACEL,IAAI,EAAE,YAA+B,kBAA9B,EAAEC,GAAG,EAAE,EAAEC,QAAF,EAAP,EAA8B;MACnC;MACA,MAAMoB,SAAS,GACb,6CAAQ,CAACD,MAAT,CAAgB5C,GAAhB,CAAoB,CAAC8C,CAAD,KAAcA,CAAC,CAACrD,EAApC,kBAAiD1C,IAAI,CAACgG,MAAtD;MACAtH,WAAW,CAACsB,IAAD,CAFb;MAIA,MAAMiG,UAAU,GAAG,MAAMxD,oBAAoB,CAACiC,QAAD,CAA7C;MACA,MAAMwB,YAAY,GAAG,MAAMtC,sBAAsB,CAACc,QAAD,CAAjD;MACA,MAAMyB,YAAY,GAAG,MAAM9B,uBAAuB,CAAC,CAACK,QAAD,CAAD,CAAlD;MACA,MAAM0B,eAAe,GAAG,MAAMhC,yBAAyB,CAACM,QAAD,CAAvD;MACA,IAAI,CAACxC,OAAD,IAAY,CAACC,SAAb,IAA0B,CAACG,SAA3B,IAAwC,CAACD,YAA7C,EAA2D;QACzD,OAAO,IAAP;MACD;MACD,OACE,cAAC,OAAD,IAAS,SAAS,EAAC,SAAnB;MACGF,SAAS,IACR,cAAC,OAAD,IACE,EAAE,EAAC,uBADL,EAEE,KAAK,EAAErF,CAAC,CAAC,QAAD,CAFV,EAGE,SAAS,EAAC,QAHZ;MAKE,wBACE,IAAI,EAAC,QADP,EAEE,QAAQ,EAAE,CAFZ,EAGE,SAAS,EAAC,eAHZ,EAIE,OAAO,EAAEoJ,YAJX;MAME,cAAC,KAAD,CAAO,KAAP,OANF,CALF,CAFJ;;;MAiBG5D,SAAS,IACR,cAAC,OAAD,IACE,EAAE,EAAC,uBADL,EAEE,KAAK,EAAExF,CAAC,CAAC,QAAD,CAFV,EAGE,SAAS,EAAC,QAHZ;MAKE,wBACE,IAAI,EAAC,QADP,EAEE,QAAQ,EAAE,CAFZ,EAGE,SAAS,EAAC,eAHZ,EAIE,OAAO,EAAEqJ,YAJX;MAME,cAAC,KAAD,CAAO,KAAP,OANF,CALF,CAlBJ;;;MAiCGjE,OAAO,IACN,cAAC,OAAD,IACE,EAAE,EAAC,qBADL,EAEE,KAAK,EACH4D,SAAS;QACLhJ,CAAC,CAAC,MAAD,CADI;QAELA,CAAC,CACC,4HADD,CALT,EASE,SAAS,EAAC,aATZ;MAWE,wBACE,IAAI,EAAC,QADP,EAEE,QAAQ,EAAE,CAFZ,EAGE,SAAS,EAAEgJ,SAAS,GAAG,eAAH,GAAqB,UAH3C,EAIE,OAAO,EAAEA,SAAS,GAAGG,UAAH,GAAgBI,SAJpC;MAME,cAAC,KAAD,CAAO,OAAP,OANF,CAXF,CAlCJ;;;MAuDGhE,YAAY,IAAIqC,QAAQ,CAACC,IAAT,KAAkB,SAAlC,IACC,cAAC,OAAD,IACE,EAAE,EAAC,0BADL,EAEE,KAAK,EAAE7H,CAAC,CAAC,WAAD,CAFV,EAGE,SAAS,EAAC,QAHZ;MAKE,wBACE,IAAI,EAAC,QADP,EAEE,QAAQ,EAAE,CAFZ,EAGE,SAAS,EAAC,eAHZ,EAIE,OAAO,EAAEsJ,eAJX;MAME,cAAC,KAAD,CAAO,IAAP,OANF,CALF,CAxDJ,CADF;;;;IA0ED,CAxFH;IAyFEb,MAAM,EAAEzI,CAAC,CAAC,SAAD,CAzFX;IA0FE4F,EAAE,EAAE,SA1FN;IA2FEkD,MAAM,EAAE,CAAC1D,OAAD,IAAY,CAACC,SAAb,IAA0B,CAACE,YA3FrC;IA4FEwC,aAAa,EAAE,IA5FjB,EAzII,CADe;;EAyOrB,CAAC3C,OAAD,EAAUC,SAAV,EAAqBG,SAArB,EAAgCG,oBAAhC,EAAsDJ,YAAtD,EAAoErC,IAApE,CAzOqB,CAAvB;EA4OA,MAAMsG,WAAW,GAAYrJ,OAAO,CAClC,MAAM;EACJ;IACEsI,MAAM,EAAEzI,CAAC,CAAC,OAAD,CADX;IAEEyJ,GAAG,EAAE,OAFP;IAGE7D,EAAE,EAAE,QAHN;IAIE8D,KAAK,EAAE,QAJT;IAKEC,QAAQ,EAAE3I,cAAc,CAAC4I,gBAL3B;IAMEC,eAAe,EAAE,KANnB;IAOEC,YAAY,EAAEvJ,kBAAkB,CAC9B,SAD8B,EAE9B,QAF8B,EAG9BE,kBAAkB,CAAC,OAAM,KACvBT,CAAC,CACC,2DADD,EAECqH,MAFD,CADe,CAHY,EAS9BnE,IAT8B,CAPlC;IAkBE6G,QAAQ,EAAE,IAlBZ,EADI;;EAqBJ;IACEtB,MAAM,EAAEzI,CAAC,CAAC,UAAD,CADX;IAEEyJ,GAAG,EAAE,UAFP;IAGE7D,EAAE,EAAE,UAHN;IAIE8D,KAAK,EAAE,QAJT;IAKEC,QAAQ,EAAE3I,cAAc,CAACgJ,eAL3B;IAMEH,eAAe,EAAE,KANnB;IAOEC,YAAY,EAAEvJ,kBAAkB,CAC9B,SAD8B,EAE9B,UAF8B,EAG9BE,kBAAkB,CAAC,OAAM,KACvBT,CAAC,CAAC,+CAAD,EAAkDqH,MAAlD,CADe,CAHY,CAPlC;IAcE0C,QAAQ,EAAE,IAdZ,EArBI;;EAqCJ;IACEtB,MAAM,EAAEzI,CAAC,CAAC,QAAD,CADX;IAEEyJ,GAAG,EAAE,QAFP;IAGE7D,EAAE,EAAE,QAHN;IAIE8D,KAAK,EAAE,QAJT;IAKEC,QAAQ,EAAE3I,cAAc,CAACiJ,MAL3B;IAMEJ,eAAe,EAAE,KANnB;IAOEC,YAAY,EAAEtJ,mBAAmB,CAC/B,SAD+B,EAE/B,QAF+B,EAG/BC,kBAAkB,CAAC,OAAM,KACvBT,CAAC,CAAC,oDAAD,EAAuDqH,MAAvD,CADe,CAHa,CAPnC;IAcE0C,QAAQ,EAAE,IAdZ,EArCI;;EAqDJ;IACEtB,MAAM,EAAEzI,CAAC,CAAC,MAAD,CADX;IAEEyJ,GAAG,EAAE,KAFP;IAGE7D,EAAE,EAAE,KAHN;IAIE8D,KAAK,EAAE,QAJT;IAKEC,QAAQ,EAAE3I,cAAc,CAACkJ,oBAL3B;IAMEL,eAAe,EAAE,KANnB;IAOEM,OAAO,EAAE;IACP,EAAEC,KAAK,EAAEpK,CAAC,CAAC,SAAD,CAAV,EAAuBqK,KAAK,EAAE,KAA9B,EADO;IAEP,EAAED,KAAK,EAAEpK,CAAC,CAAC,UAAD,CAAV,EAAwBqK,KAAK,EAAE,IAA/B,EAFO,CAPX,EArDI;;;EAiEJ;IACE5B,MAAM,EAAEzI,CAAC,CAAC,WAAD,CADX;IAEEyJ,GAAG,EAAE,WAFP;IAGE7D,EAAE,EAAE,IAHN;IAIE0E,UAAU,EAAE,WAJd;IAKEZ,KAAK,EAAE,QALT;IAMEC,QAAQ,EAAE3I,cAAc,CAACuJ,kBAN3B;IAOEV,eAAe,EAAE7J,CAAC,CAAC,KAAD,CAPpB;IAQEmK,OAAO,EAAE;IACP,EAAEC,KAAK,EAAEpK,CAAC,CAAC,KAAD,CAAV,EAAmBqK,KAAK,EAAE,IAA1B,EADO;IAEP,EAAED,KAAK,EAAEpK,CAAC,CAAC,IAAD,CAAV,EAAkBqK,KAAK,EAAE,KAAzB,EAFO,CARX,EAjEI;;;EA8EJ;IACE5B,MAAM,EAAEzI,CAAC,CAAC,QAAD,CADX;IAEEyJ,GAAG,EAAE,QAFP;IAGE7D,EAAE,EAAE,YAHN;IAIE8D,KAAK,EAAE,QAJT;IAKEC,QAAQ,EAAE3I,cAAc,CAACwJ,QAL3B,EA9EI,CAD4B;;EAuFlC,CAACtH,IAAD,CAvFkC,CAApC;EA0FA,MAAMuH,QAAQ,GAAiB;IAC7BC,WAAW,EAAE,UADgB;IAE7BC,IAAI,EAAE3K,CAAC,CAAC,UAAD,CAFsB,EAA/B;;EAKA,MAAM4K,SAAS,GAAuB,EAAtC;EAEA,IAAIvF,SAAS,IAAIG,SAAjB,EAA4B;IAC1BoF,SAAS,CAACC,IAAV,CAAe;MACbF,IAAI,EAAE3K,CAAC,CAAC,aAAD,CADM;MAEb8K,OAAO,EAAEjH,gBAFI;MAGbkH,WAAW,EAAE,WAHA,EAAf;;EAKD;EAED,IAAIzF,SAAJ,EAAe;IACbsF,SAAS,CAACC,IAAV,CAAe;MACbF,IAAI,EACF;MACE,qBAAG,SAAS,EAAC,YAAb,GADF,OACgC3K,CAAC,CAAC,SAAD,CADjC,EAC8C,GAD9C,CAFW;;MAMb8K,OAAO,EAAE,MAAK;QACZ3H,OAAO,CAAC0H,IAAR,CAAa,eAAb;MACD,CARY;MASbE,WAAW,EAAE,SATA,EAAf;;IAYA,IAAIrJ,gBAAgB,CAAC9B,WAAW,CAAC6F,gBAAb,CAApB,EAAoD;MAClDmF,SAAS,CAACC,IAAV,CAAe;QACbF,IAAI,EACF,cAAC,OAAD,IACE,EAAE,EAAC,gBADL,EAEE,KAAK,EAAE3K,CAAC,CAAC,iBAAD,CAFV,EAGE,SAAS,EAAC,aAHZ;QAKE,cAAC,KAAD,CAAO,MAAP,OALF,CAFW;;QAUb+K,WAAW,EAAE,MAVA;QAWbD,OAAO,EAAE7F,sBAXI,EAAf;;IAaD;EACF;EAEDwF,QAAQ,CAACO,OAAT,GAAmBJ,SAAnB;EAEA,MAAMK,uBAAuB,GAAG,MAAK;IACnCjH,2BAA2B,CAAC,IAAD,CAA3B;EACD,CAFD;EAIA,MAAMkH,qBAAqB,GAAG,MAAK;IACjChH,0BAA0B,CAAC,IAAD,CAA1B;EACD,CAFD;EAIA,MAAMiH,0BAA0B,GAAG,MAAK;IACtC/G,8BAA8B,CAAC,IAAD,CAA9B;EACD,CAFD;EAIA,MAAMgH,mBAAmB,GAAG,YAA2C,KAA1C,EAAExF,EAAF,EAAMqC,UAAU,EAAEoD,SAAlB,EAA0C;IACrEtL,cAAc,CAACuL,MAAf,CAAsB;MACpBzF,QAAQ,EAAE,mBAAmBD,EAAE,EADX,EAAtB;IAEGE,IAFH,CAGE,MAAK;MACHhC,WAAW;MACXE,2BAA2B,CAAC,IAAD,CAA3B;MACAf,eAAe,CAACjD,CAAC,CAAC,aAAD,EAAgBqL,SAAhB,CAAF,CAAf;IACD,CAPH,EAQE5K,kBAAkB,CAAC,OAAM,KACvBuC,cAAc,CACZhD,CAAC,CAAC,oCAAD,EAAuCqL,SAAvC,EAAkDhE,MAAlD,CADW,CADE,CARpB;EAcD,CAfD;EAiBA,MAAMkE,uBAAuB,GAAG,CAACC,gBAAD,KAAgC;IAC9DzL,cAAc,CAACuL,MAAf,CAAsB;MACpBzF,QAAQ,EAAE,sBAAsBvF,KAAK,CAACmL,MAAN,CAC9BD,gBAAgB,CAACrF,GAAjB,CAAqB,iBAAC,EAAEP,EAAF,EAAD,iBAAYA,EAAZ,EAArB,CAD8B,CAE/B,EAHmB,EAAtB;IAIGE,IAJH,CAKE,YAAkB,KAAjB,EAAEC,IAAI,GAAG,EAAT,EAAiB;MAChBjC,WAAW;MACXb,eAAe,CAAC8C,IAAI,CAAC2F,OAAN,CAAf;IACD,CARH,EASEjL,kBAAkB,CAAC,OAAM,KACvBuC,cAAc,CACZhD,CAAC,CAAC,uDAAD,EAA0DqH,MAA1D,CADW,CADE,CATpB;EAeD,CAhBD;EAkBA,MAAMsE,sBAAsB,GAAG,CAACC,cAAD,KAA2B;IACxD,IAAIzH,2BAA2B,KAAK,IAApC,EAA0C;MACxCnB,cAAc,CAAChD,CAAC,CAAC,6CAAD,CAAF,CAAd;IACD;IAEDD,cAAc,CAAC8L,IAAf,CAAoB;MAClBhG,QAAQ,EAAE,2BADQ;MAElBiG,WAAW,EAAE;QACXC,aAAa,EAAE5H,2BAAF,oBAAEA,2BAA2B,CAAEyB,EADjC;QAEXqC,UAAU,EAAE2D,cAFD,EAFK,EAApB;;IAMG9F,IANH,CAOE,MAAK;MACH1B,8BAA8B,CAAC,IAAD,CAA9B;MACAN,WAAW;IACZ,CAVH,EAWErD,kBAAkB,CAAC,OAAM,KACvBuC,cAAc,CACZhD,CAAC,CAAC,0DAAD,EAA6DqH,MAA7D,CADW,CADE,CAXpB;EAiBD,CAtBD;EAwBA,OACE;EACE,cAAC,OAAD,EAAaoD,QAAb,CADF;EAEG1G,wBAAwB,IACvB,cAAC,WAAD,IACE,WAAW,EACT;IACE;IACG/D,CAAC,CACA,uJADA,EAEA+D,wBAAwB,CAACkE,UAFzB,EAGAlE,wBAAwB,CAACiD,WAHzB,EAIAjD,wBAAwB,CAACoD,eAJzB,CADJ,CADF;;IASG/E,6BAA6B,IAC5B,cAAC,6BAAD,IACE,OAAO,EAAE2B,wBADX,GAVJ,CAFJ;IAkBE,SAAS,EAAE,MAAK;MACd,IAAIA,wBAAJ,EAA8B;QAC5BqH,mBAAmB,CAACrH,wBAAD,CAAnB;MACD;IACF,CAtBH,EAuBE,MAAM,EAAEkH,uBAvBV,EAwBE,IAAI,MAxBN,EAyBE,KAAK,EAAEjL,CAAC,CAAC,iBAAD,CAzBV,GAHJ;EA+BGiE,uBAAuB,IACtB,cAAC,eAAD,IACE,UAAU,EAAEA,uBADd,EAEE,gBAAgB,EAAEH,WAFpB,EAGE,MAAM,EAAEoH,qBAHV,EAIE,IAAI,MAJN,GAhCJ;EAuCE,cAAC,qBAAD,IACE,OAAO,EAAE/G,2BADX,EAEE,MAAM,EAAEgH,0BAFV,EAGE,WAAW,EAAEQ,sBAHf,GAvCF;EA4CE,cAAC,mBAAD,IACE,KAAK,EAAE3L,CAAC,CAAC,gBAAD,CADV,EAEE,WAAW,EAAEA,CAAC,CACZ,wDADY,CAFhB,EAKE,SAAS,EAAEuL,uBALb;EAOG,cAAa,KAAG;IACf,MAAMS,WAAW,GAAiC,EAAlD;IACA,IAAI3G,SAAJ,EAAe;MACb2G,WAAW,CAACnB,IAAZ,CAAiB;QACfpB,GAAG,EAAE,QADU;QAEfkB,IAAI,EAAE3K,CAAC,CAAC,QAAD,CAFQ;QAGfiM,QAAQ,EAAEC,aAHK;QAIfC,IAAI,EAAE,QAJS,EAAjB;;IAMD;IACD,IAAI3G,SAAJ,EAAe;MACbwG,WAAW,CAACnB,IAAZ,CAAiB;QACfpB,GAAG,EAAE,QADU;QAEfkB,IAAI,EAAE3K,CAAC,CAAC,QAAD,CAFQ;QAGfmM,IAAI,EAAE,SAHS;QAIfF,QAAQ,EAAE1E,uBAJK,EAAjB;;IAMD;IACD,OACE,cAAC,QAAD,IACE,SAAS,EAAC,mBADZ,EAEE,OAAO,EAAErB,OAFX,EAGE,IAAI,EAAEzC,QAHR,EAIE,KAAK,EAAEF,YAJT,EAKE,QAAQ,EAAEzB,SALZ,EAME,SAAS,EAAE8B,SANb,EAOE,OAAO,EAAE4F,WAPX,EAQE,OAAO,EAAEnG,OARX,EASE,WAAW,EAAEqC,WATf,EAUE,WAAW,EAAEsG,WAVf,EAWE,iBAAiB,EAAEtI,iBAXrB,EAYE,iBAAiB,EAAEG,gBAZrB,EAaE,oBAAoB,EAAE,SAAQ,KAAG;QAC/B,MAAM,EAAEuI,YAAF,EAAgBC,aAAhB,KAAkCC,QAAQ,CAACC,MAAT,CACtC,CAACC,GAAD,EAAMC,CAAN,KAAW;UACT,IAAIA,CAAC,CAAC7E,QAAF,CAAWC,IAAX,KAAoB,UAAxB;UAAoC2E,GAAG,CAACH,aAAJ,IAAqB,CAArB,CAApC;UACK,IAAII,CAAC,CAAC7E,QAAF,CAAWC,IAAX,KAAoB,SAAxB,EAAmC;YACtC2E,GAAG,CAACJ,YAAJ,IAAoB,CAApB;UACD;UACD,OAAOI,GAAP;QACD,CAPqC,EAQtC,EAAEJ,YAAY,EAAE,CAAhB,EAAmBC,aAAa,EAAE,CAAlC,EARsC,CAAxC;QAWA,IAAI,CAACC,QAAQ,CAACI,MAAd,EAAsB;UACpB,OAAO1M,CAAC,CAAC,YAAD,CAAR;QACD;QACD,IAAIoM,YAAY,IAAI,CAACC,aAArB,EAAoC;UAClC,OAAOrM,CAAC,CACN,uBADM,EAENsM,QAAQ,CAACI,MAFH,EAGNN,YAHM,CAAR;QAKD;QACD,IAAIC,aAAa,IAAI,CAACD,YAAtB,EAAoC;UAClC,OAAOpM,CAAC,CACN,wBADM,EAENsM,QAAQ,CAACI,MAFH,EAGNL,aAHM,CAAR;QAKD;QAED,OAAOrM,CAAC,CACN,uCADM,EAENsM,QAAQ,CAACI,MAFH,EAGNL,aAHM,EAIND,YAJM,CAAR;MAMD,CAjDH,GADF;EAqDD,CA9EH,CA5CF;;;EA6HE,cAAC,iBAAD,IACE,YAAY,EAAC,SADf,EAEE,aAAa,EAAEpM,CAAC,CAAC,SAAD,CAFlB,EAGE,sBAAsB,EAAEgC,wBAH1B,EAIE,uBAAuB,EAAEC,yBAJ3B,EAKE,cAAc,EAAEe,cALlB,EAME,eAAe,EAAEC,eANnB,EAOE,aAAa,EAAEkC,mBAPjB,EAQE,IAAI,EAAEd,gBARR,EASE,MAAM,EAAEa,uBATV,EAUE,cAAc,EAAEX,cAVlB,EAWE,iBAAiB,EAAEC,iBAXrB,EAYE,uBAAuB,EAAEG,uBAZ3B,EAaE,0BAA0B,EAAEC,0BAb9B,EAcE,yBAAyB,EAAEC,yBAd7B,EAeE,4BAA4B,EAAEC,4BAfhC,EAgBE,iCAAiC,EAAEC,iCAhBrC,EAiBE,oCAAoC,EAClCC,oCAlBJ,GA7HF;EAkJGP,eAAe,IAAI,cAAC,OAAD,OAlJtB,CADF;;AAsJD,CAptBD;AAstBA,eAAetD,UAAU,CAAC4B,WAAD,CAAzB","names":["FeatureFlag","getExtensionsRegistry","styled","SupersetClient","t","React","useState","useMemo","useCallback","useHistory","rison","createFetchRelated","createFetchDistinct","createErrorHandler","useListViewResource","ConfirmStatusChange","DatasourceModal","DeleteModal","handleResourceExport","ListView","FilterOperator","Loading","SubMenu","withToasts","Tooltip","Icons","FacePile","CertifiedBadge","InfoTooltip","ImportModelsModal","isFeatureEnabled","WarningIconWithTooltip","isUserAdmin","GenericLink","PAGE_SIZE","SORT_BY","PASSWORDS_NEEDED_MESSAGE","CONFIRM_OVERWRITE_MESSAGE","DuplicateDatasetModal","extensionsRegistry","DatasetDeleteRelatedExtension","get","FlexRowContainer","div","theme","gridUnit","Actions","colors","grayscale","base","light1","DatasetList","addDangerToast","addSuccessToast","user","history","state","loading","resourceCount","datasetCount","resourceCollection","datasets","bulkSelectEnabled","hasPerm","fetchData","toggleBulkSelect","refreshData","datasetCurrentlyDeleting","setDatasetCurrentlyDeleting","datasetCurrentlyEditing","setDatasetCurrentlyEditing","datasetCurrentlyDuplicating","setDatasetCurrentlyDuplicating","importingDataset","showImportModal","passwordFields","setPasswordFields","preparingExport","setPreparingExport","sshTunnelPasswordFields","setSSHTunnelPasswordFields","sshTunnelPrivateKeyFields","setSSHTunnelPrivateKeyFields","sshTunnelPrivateKeyPasswordFields","setSSHTunnelPrivateKeyPasswordFields","openDatasetImportModal","closeDatasetImportModal","handleDatasetImport","canEdit","canDelete","canCreate","canDuplicate","canExport","VERSIONED_EXPORT","initialSort","openDatasetEditModal","id","endpoint","then","json","addCertificationFields","result","columns","map","column","certification","details","certified_by","JSON","parse","extra","certification_details","is_certified","catch","openDatasetDeleteModal","dataset","chart_count","charts","count","dashboard_count","dashboards","errMsg","openDatasetDuplicateModal","handleBulkDatasetExport","datasetsToExport","ids","Cell","row","original","kind","accessor","disableSortBy","size","table_name","datasetTitle","description","explore_url","exploreURL","titleLink","parsedExtra","warning_markdown","Header","changed_on_delta_humanized","changedOn","changed_by_name","changedByName","hidden","owners","allowEdit","o","userId","handleEdit","handleDelete","handleExport","handleDuplicate","undefined","filterTypes","key","input","operator","relationManyMany","unfilteredLabel","fetchSelects","paginate","relationOneMany","equals","datasetIsNullOrEmpty","selects","label","value","urlDisplay","datasetIsCertified","contains","menuData","activeChild","name","buttonArr","push","onClick","buttonStyle","buttons","closeDatasetDeleteModal","closeDatasetEditModal","closeDatasetDuplicateModal","handleDatasetDelete","tableName","delete","handleBulkDatasetDelete","datasetsToDelete","encode","message","handleDatasetDuplicate","newDatasetName","post","jsonPayload","base_model_id","bulkActions","onSelect","confirmDelete","type","virtualCount","physicalCount","selected","reduce","acc","e","length"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/pages/DatasetList/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  FeatureFlag,\n  getExtensionsRegistry,\n  styled,\n  SupersetClient,\n  t,\n} from '@superset-ui/core';\nimport React, {\n  FunctionComponent,\n  useState,\n  useMemo,\n  useCallback,\n} from 'react';\nimport { useHistory } from 'react-router-dom';\nimport rison from 'rison';\nimport {\n  createFetchRelated,\n  createFetchDistinct,\n  createErrorHandler,\n} from 'src/views/CRUD/utils';\nimport { ColumnObject } from 'src/features/datasets/types';\nimport { useListViewResource } from 'src/views/CRUD/hooks';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport { DatasourceModal } from 'src/components/Datasource';\nimport DeleteModal from 'src/components/DeleteModal';\nimport handleResourceExport from 'src/utils/export';\nimport ListView, {\n  ListViewProps,\n  Filters,\n  FilterOperator,\n} from 'src/components/ListView';\nimport Loading from 'src/components/Loading';\nimport SubMenu, { SubMenuProps, ButtonProps } from 'src/features/home/SubMenu';\nimport Owner from 'src/types/Owner';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport FacePile from 'src/components/FacePile';\nimport CertifiedBadge from 'src/components/CertifiedBadge';\nimport InfoTooltip from 'src/components/InfoTooltip';\nimport ImportModelsModal from 'src/components/ImportModal/index';\nimport { isFeatureEnabled } from 'src/featureFlags';\nimport WarningIconWithTooltip from 'src/components/WarningIconWithTooltip';\nimport { isUserAdmin } from 'src/dashboard/util/permissionUtils';\nimport { GenericLink } from 'src/components/GenericLink/GenericLink';\n\nimport {\n  PAGE_SIZE,\n  SORT_BY,\n  PASSWORDS_NEEDED_MESSAGE,\n  CONFIRM_OVERWRITE_MESSAGE,\n} from 'src/features/datasets/constants';\nimport DuplicateDatasetModal from 'src/features/datasets/DuplicateDatasetModal';\n\nconst extensionsRegistry = getExtensionsRegistry();\nconst DatasetDeleteRelatedExtension = extensionsRegistry.get(\n  'dataset.delete.related',\n);\n\nconst FlexRowContainer = styled.div`\n  align-items: center;\n  display: flex;\n\n  svg {\n    margin-right: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n\nconst Actions = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.base};\n\n  .disabled {\n    svg,\n    i {\n      &:hover {\n        path {\n          fill: ${({ theme }) => theme.colors.grayscale.light1};\n        }\n      }\n    }\n    color: ${({ theme }) => theme.colors.grayscale.light1};\n    .ant-menu-item:hover {\n      color: ${({ theme }) => theme.colors.grayscale.light1};\n      cursor: default;\n    }\n    &::after {\n      color: ${({ theme }) => theme.colors.grayscale.light1};\n    }\n  }\n`;\n\ntype Dataset = {\n  changed_by_name: string;\n  changed_by_url: string;\n  changed_by: string;\n  changed_on_delta_humanized: string;\n  database: {\n    id: string;\n    database_name: string;\n  };\n  kind: string;\n  explore_url: string;\n  id: number;\n  owners: Array<Owner>;\n  schema: string;\n  table_name: string;\n};\n\ninterface VirtualDataset extends Dataset {\n  extra: Record<string, any>;\n  sql: string;\n}\n\ninterface DatasetListProps {\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n  user: {\n    userId: string | number;\n    firstName: string;\n    lastName: string;\n  };\n}\n\nconst DatasetList: FunctionComponent<DatasetListProps> = ({\n  addDangerToast,\n  addSuccessToast,\n  user,\n}) => {\n  const history = useHistory();\n  const {\n    state: {\n      loading,\n      resourceCount: datasetCount,\n      resourceCollection: datasets,\n      bulkSelectEnabled,\n    },\n    hasPerm,\n    fetchData,\n    toggleBulkSelect,\n    refreshData,\n  } = useListViewResource<Dataset>('dataset', t('dataset'), addDangerToast);\n\n  const [datasetCurrentlyDeleting, setDatasetCurrentlyDeleting] = useState<\n    (Dataset & { chart_count: number; dashboard_count: number }) | null\n  >(null);\n\n  const [datasetCurrentlyEditing, setDatasetCurrentlyEditing] =\n    useState<Dataset | null>(null);\n\n  const [datasetCurrentlyDuplicating, setDatasetCurrentlyDuplicating] =\n    useState<VirtualDataset | null>(null);\n\n  const [importingDataset, showImportModal] = useState<boolean>(false);\n  const [passwordFields, setPasswordFields] = useState<string[]>([]);\n  const [preparingExport, setPreparingExport] = useState<boolean>(false);\n  const [sshTunnelPasswordFields, setSSHTunnelPasswordFields] = useState<\n    string[]\n  >([]);\n  const [sshTunnelPrivateKeyFields, setSSHTunnelPrivateKeyFields] = useState<\n    string[]\n  >([]);\n  const [\n    sshTunnelPrivateKeyPasswordFields,\n    setSSHTunnelPrivateKeyPasswordFields,\n  ] = useState<string[]>([]);\n\n  const openDatasetImportModal = () => {\n    showImportModal(true);\n  };\n\n  const closeDatasetImportModal = () => {\n    showImportModal(false);\n  };\n\n  const handleDatasetImport = () => {\n    showImportModal(false);\n    refreshData();\n    addSuccessToast(t('Dataset imported'));\n  };\n\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canCreate = hasPerm('can_write');\n  const canDuplicate = hasPerm('can_duplicate');\n  const canExport =\n    hasPerm('can_export') && isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT);\n\n  const initialSort = SORT_BY;\n\n  const openDatasetEditModal = useCallback(\n    ({ id }: Dataset) => {\n      SupersetClient.get({\n        endpoint: `/api/v1/dataset/${id}`,\n      })\n        .then(({ json = {} }) => {\n          const addCertificationFields = json.result.columns.map(\n            (column: ColumnObject) => {\n              const {\n                certification: { details = '', certified_by = '' } = {},\n              } = JSON.parse(column.extra || '{}') || {};\n              return {\n                ...column,\n                certification_details: details || '',\n                certified_by: certified_by || '',\n                is_certified: details || certified_by,\n              };\n            },\n          );\n          // eslint-disable-next-line no-param-reassign\n          json.result.columns = [...addCertificationFields];\n          setDatasetCurrentlyEditing(json.result);\n        })\n        .catch(() => {\n          addDangerToast(\n            t('An error occurred while fetching dataset related data'),\n          );\n        });\n    },\n    [addDangerToast],\n  );\n\n  const openDatasetDeleteModal = (dataset: Dataset) =>\n    SupersetClient.get({\n      endpoint: `/api/v1/dataset/${dataset.id}/related_objects`,\n    })\n      .then(({ json = {} }) => {\n        setDatasetCurrentlyDeleting({\n          ...dataset,\n          chart_count: json.charts.count,\n          dashboard_count: json.dashboards.count,\n        });\n      })\n      .catch(\n        createErrorHandler(errMsg =>\n          t(\n            'An error occurred while fetching dataset related data: %s',\n            errMsg,\n          ),\n        ),\n      );\n\n  const openDatasetDuplicateModal = (dataset: VirtualDataset) => {\n    setDatasetCurrentlyDuplicating(dataset);\n  };\n\n  const handleBulkDatasetExport = (datasetsToExport: Dataset[]) => {\n    const ids = datasetsToExport.map(({ id }) => id);\n    handleResourceExport('dataset', ids, () => {\n      setPreparingExport(false);\n    });\n    setPreparingExport(true);\n  };\n\n  const columns = useMemo(\n    () => [\n      {\n        Cell: ({\n          row: {\n            original: { kind },\n          },\n        }: any) => {\n          if (kind === 'physical') {\n            return (\n              <Tooltip\n                id=\"physical-dataset-tooltip\"\n                title={t('Physical dataset')}\n              >\n                <Icons.DatasetPhysical />\n              </Tooltip>\n            );\n          }\n\n          return (\n            <Tooltip id=\"virtual-dataset-tooltip\" title={t('Virtual dataset')}>\n              <Icons.DatasetVirtual />\n            </Tooltip>\n          );\n        },\n        accessor: 'kind_icon',\n        disableSortBy: true,\n        size: 'xs',\n        id: 'id',\n      },\n      {\n        Cell: ({\n          row: {\n            original: {\n              extra,\n              table_name: datasetTitle,\n              description,\n              explore_url: exploreURL,\n            },\n          },\n        }: any) => {\n          const titleLink = (\n            // exploreUrl can be a link to Explore or an external link\n            // in the first case use SPA routing, else use HTML anchor\n            <GenericLink to={exploreURL}>{datasetTitle}</GenericLink>\n          );\n          try {\n            const parsedExtra = JSON.parse(extra);\n            return (\n              <FlexRowContainer>\n                {parsedExtra?.certification && (\n                  <CertifiedBadge\n                    certifiedBy={parsedExtra.certification.certified_by}\n                    details={parsedExtra.certification.details}\n                    size=\"l\"\n                  />\n                )}\n                {parsedExtra?.warning_markdown && (\n                  <WarningIconWithTooltip\n                    warningMarkdown={parsedExtra.warning_markdown}\n                    size=\"l\"\n                  />\n                )}\n                {titleLink}\n                {description && (\n                  <InfoTooltip tooltip={description} viewBox=\"0 -1 24 24\" />\n                )}\n              </FlexRowContainer>\n            );\n          } catch {\n            return titleLink;\n          }\n        },\n        Header: t('Name'),\n        accessor: 'table_name',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { kind },\n          },\n        }: any) => (kind === 'physical' ? t('Physical') : t('Virtual')),\n        Header: t('Type'),\n        accessor: 'kind',\n        disableSortBy: true,\n        size: 'md',\n      },\n      {\n        Header: t('Database'),\n        accessor: 'database.database_name',\n        size: 'lg',\n      },\n      {\n        Header: t('Schema'),\n        accessor: 'schema',\n        size: 'lg',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { changed_on_delta_humanized: changedOn },\n          },\n        }: any) => <span className=\"no-wrap\">{changedOn}</span>,\n        Header: t('Modified'),\n        accessor: 'changed_on_delta_humanized',\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { changed_by_name: changedByName },\n          },\n        }: any) => changedByName,\n        Header: t('Modified by'),\n        accessor: 'changed_by.first_name',\n        size: 'xl',\n      },\n      {\n        accessor: 'database',\n        disableSortBy: true,\n        hidden: true,\n      },\n      {\n        Cell: ({\n          row: {\n            original: { owners = [] },\n          },\n        }: any) => <FacePile users={owners} />,\n        Header: t('Owners'),\n        id: 'owners',\n        disableSortBy: true,\n        size: 'lg',\n      },\n      {\n        accessor: 'sql',\n        hidden: true,\n        disableSortBy: true,\n      },\n      {\n        Cell: ({ row: { original } }: any) => {\n          // Verify owner or isAdmin\n          const allowEdit =\n            original.owners.map((o: Owner) => o.id).includes(user.userId) ||\n            isUserAdmin(user);\n\n          const handleEdit = () => openDatasetEditModal(original);\n          const handleDelete = () => openDatasetDeleteModal(original);\n          const handleExport = () => handleBulkDatasetExport([original]);\n          const handleDuplicate = () => openDatasetDuplicateModal(original);\n          if (!canEdit && !canDelete && !canExport && !canDuplicate) {\n            return null;\n          }\n          return (\n            <Actions className=\"actions\">\n              {canDelete && (\n                <Tooltip\n                  id=\"delete-action-tooltip\"\n                  title={t('Delete')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={handleDelete}\n                  >\n                    <Icons.Trash />\n                  </span>\n                </Tooltip>\n              )}\n              {canExport && (\n                <Tooltip\n                  id=\"export-action-tooltip\"\n                  title={t('Export')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={handleExport}\n                  >\n                    <Icons.Share />\n                  </span>\n                </Tooltip>\n              )}\n              {canEdit && (\n                <Tooltip\n                  id=\"edit-action-tooltip\"\n                  title={\n                    allowEdit\n                      ? t('Edit')\n                      : t(\n                          'You must be a dataset owner in order to edit. Please reach out to a dataset owner to request modifications or edit access.',\n                        )\n                  }\n                  placement=\"bottomRight\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className={allowEdit ? 'action-button' : 'disabled'}\n                    onClick={allowEdit ? handleEdit : undefined}\n                  >\n                    <Icons.EditAlt />\n                  </span>\n                </Tooltip>\n              )}\n              {canDuplicate && original.kind === 'virtual' && (\n                <Tooltip\n                  id=\"duplicate-action-tooltop\"\n                  title={t('Duplicate')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={handleDuplicate}\n                  >\n                    <Icons.Copy />\n                  </span>\n                </Tooltip>\n              )}\n            </Actions>\n          );\n        },\n        Header: t('Actions'),\n        id: 'actions',\n        hidden: !canEdit && !canDelete && !canDuplicate,\n        disableSortBy: true,\n      },\n    ],\n    [canEdit, canDelete, canExport, openDatasetEditModal, canDuplicate, user],\n  );\n\n  const filterTypes: Filters = useMemo(\n    () => [\n      {\n        Header: t('Owner'),\n        key: 'owner',\n        id: 'owners',\n        input: 'select',\n        operator: FilterOperator.relationManyMany,\n        unfilteredLabel: 'All',\n        fetchSelects: createFetchRelated(\n          'dataset',\n          'owners',\n          createErrorHandler(errMsg =>\n            t(\n              'An error occurred while fetching dataset owner values: %s',\n              errMsg,\n            ),\n          ),\n          user,\n        ),\n        paginate: true,\n      },\n      {\n        Header: t('Database'),\n        key: 'database',\n        id: 'database',\n        input: 'select',\n        operator: FilterOperator.relationOneMany,\n        unfilteredLabel: 'All',\n        fetchSelects: createFetchRelated(\n          'dataset',\n          'database',\n          createErrorHandler(errMsg =>\n            t('An error occurred while fetching datasets: %s', errMsg),\n          ),\n        ),\n        paginate: true,\n      },\n      {\n        Header: t('Schema'),\n        key: 'schema',\n        id: 'schema',\n        input: 'select',\n        operator: FilterOperator.equals,\n        unfilteredLabel: 'All',\n        fetchSelects: createFetchDistinct(\n          'dataset',\n          'schema',\n          createErrorHandler(errMsg =>\n            t('An error occurred while fetching schema values: %s', errMsg),\n          ),\n        ),\n        paginate: true,\n      },\n      {\n        Header: t('Type'),\n        key: 'sql',\n        id: 'sql',\n        input: 'select',\n        operator: FilterOperator.datasetIsNullOrEmpty,\n        unfilteredLabel: 'All',\n        selects: [\n          { label: t('Virtual'), value: false },\n          { label: t('Physical'), value: true },\n        ],\n      },\n      {\n        Header: t('Certified'),\n        key: 'certified',\n        id: 'id',\n        urlDisplay: 'certified',\n        input: 'select',\n        operator: FilterOperator.datasetIsCertified,\n        unfilteredLabel: t('Any'),\n        selects: [\n          { label: t('Yes'), value: true },\n          { label: t('No'), value: false },\n        ],\n      },\n      {\n        Header: t('Search'),\n        key: 'search',\n        id: 'table_name',\n        input: 'search',\n        operator: FilterOperator.contains,\n      },\n    ],\n    [user],\n  );\n\n  const menuData: SubMenuProps = {\n    activeChild: 'Datasets',\n    name: t('Datasets'),\n  };\n\n  const buttonArr: Array<ButtonProps> = [];\n\n  if (canDelete || canExport) {\n    buttonArr.push({\n      name: t('Bulk select'),\n      onClick: toggleBulkSelect,\n      buttonStyle: 'secondary',\n    });\n  }\n\n  if (canCreate) {\n    buttonArr.push({\n      name: (\n        <>\n          <i className=\"fa fa-plus\" /> {t('Dataset')}{' '}\n        </>\n      ),\n      onClick: () => {\n        history.push('/dataset/add/');\n      },\n      buttonStyle: 'primary',\n    });\n\n    if (isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT)) {\n      buttonArr.push({\n        name: (\n          <Tooltip\n            id=\"import-tooltip\"\n            title={t('Import datasets')}\n            placement=\"bottomRight\"\n          >\n            <Icons.Import data-test=\"import-button\" />\n          </Tooltip>\n        ),\n        buttonStyle: 'link',\n        onClick: openDatasetImportModal,\n      });\n    }\n  }\n\n  menuData.buttons = buttonArr;\n\n  const closeDatasetDeleteModal = () => {\n    setDatasetCurrentlyDeleting(null);\n  };\n\n  const closeDatasetEditModal = () => {\n    setDatasetCurrentlyEditing(null);\n  };\n\n  const closeDatasetDuplicateModal = () => {\n    setDatasetCurrentlyDuplicating(null);\n  };\n\n  const handleDatasetDelete = ({ id, table_name: tableName }: Dataset) => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/dataset/${id}`,\n    }).then(\n      () => {\n        refreshData();\n        setDatasetCurrentlyDeleting(null);\n        addSuccessToast(t('Deleted: %s', tableName));\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(\n          t('There was an issue deleting %s: %s', tableName, errMsg),\n        ),\n      ),\n    );\n  };\n\n  const handleBulkDatasetDelete = (datasetsToDelete: Dataset[]) => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/dataset/?q=${rison.encode(\n        datasetsToDelete.map(({ id }) => id),\n      )}`,\n    }).then(\n      ({ json = {} }) => {\n        refreshData();\n        addSuccessToast(json.message);\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(\n          t('There was an issue deleting the selected datasets: %s', errMsg),\n        ),\n      ),\n    );\n  };\n\n  const handleDatasetDuplicate = (newDatasetName: string) => {\n    if (datasetCurrentlyDuplicating === null) {\n      addDangerToast(t('There was an issue duplicating the dataset.'));\n    }\n\n    SupersetClient.post({\n      endpoint: `/api/v1/dataset/duplicate`,\n      jsonPayload: {\n        base_model_id: datasetCurrentlyDuplicating?.id,\n        table_name: newDatasetName,\n      },\n    }).then(\n      () => {\n        setDatasetCurrentlyDuplicating(null);\n        refreshData();\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(\n          t('There was an issue duplicating the selected datasets: %s', errMsg),\n        ),\n      ),\n    );\n  };\n\n  return (\n    <>\n      <SubMenu {...menuData} />\n      {datasetCurrentlyDeleting && (\n        <DeleteModal\n          description={\n            <>\n              <p>\n                {t(\n                  'The dataset %s is linked to %s charts that appear on %s dashboards. Are you sure you want to continue? Deleting the dataset will break those objects.',\n                  datasetCurrentlyDeleting.table_name,\n                  datasetCurrentlyDeleting.chart_count,\n                  datasetCurrentlyDeleting.dashboard_count,\n                )}\n              </p>\n              {DatasetDeleteRelatedExtension && (\n                <DatasetDeleteRelatedExtension\n                  dataset={datasetCurrentlyDeleting}\n                />\n              )}\n            </>\n          }\n          onConfirm={() => {\n            if (datasetCurrentlyDeleting) {\n              handleDatasetDelete(datasetCurrentlyDeleting);\n            }\n          }}\n          onHide={closeDatasetDeleteModal}\n          open\n          title={t('Delete Dataset?')}\n        />\n      )}\n      {datasetCurrentlyEditing && (\n        <DatasourceModal\n          datasource={datasetCurrentlyEditing}\n          onDatasourceSave={refreshData}\n          onHide={closeDatasetEditModal}\n          show\n        />\n      )}\n      <DuplicateDatasetModal\n        dataset={datasetCurrentlyDuplicating}\n        onHide={closeDatasetDuplicateModal}\n        onDuplicate={handleDatasetDuplicate}\n      />\n      <ConfirmStatusChange\n        title={t('Please confirm')}\n        description={t(\n          'Are you sure you want to delete the selected datasets?',\n        )}\n        onConfirm={handleBulkDatasetDelete}\n      >\n        {confirmDelete => {\n          const bulkActions: ListViewProps['bulkActions'] = [];\n          if (canDelete) {\n            bulkActions.push({\n              key: 'delete',\n              name: t('Delete'),\n              onSelect: confirmDelete,\n              type: 'danger',\n            });\n          }\n          if (canExport) {\n            bulkActions.push({\n              key: 'export',\n              name: t('Export'),\n              type: 'primary',\n              onSelect: handleBulkDatasetExport,\n            });\n          }\n          return (\n            <ListView<Dataset>\n              className=\"dataset-list-view\"\n              columns={columns}\n              data={datasets}\n              count={datasetCount}\n              pageSize={PAGE_SIZE}\n              fetchData={fetchData}\n              filters={filterTypes}\n              loading={loading}\n              initialSort={initialSort}\n              bulkActions={bulkActions}\n              bulkSelectEnabled={bulkSelectEnabled}\n              disableBulkSelect={toggleBulkSelect}\n              renderBulkSelectCopy={selected => {\n                const { virtualCount, physicalCount } = selected.reduce(\n                  (acc, e) => {\n                    if (e.original.kind === 'physical') acc.physicalCount += 1;\n                    else if (e.original.kind === 'virtual') {\n                      acc.virtualCount += 1;\n                    }\n                    return acc;\n                  },\n                  { virtualCount: 0, physicalCount: 0 },\n                );\n\n                if (!selected.length) {\n                  return t('0 Selected');\n                }\n                if (virtualCount && !physicalCount) {\n                  return t(\n                    '%s Selected (Virtual)',\n                    selected.length,\n                    virtualCount,\n                  );\n                }\n                if (physicalCount && !virtualCount) {\n                  return t(\n                    '%s Selected (Physical)',\n                    selected.length,\n                    physicalCount,\n                  );\n                }\n\n                return t(\n                  '%s Selected (%s Physical, %s Virtual)',\n                  selected.length,\n                  physicalCount,\n                  virtualCount,\n                );\n              }}\n            />\n          );\n        }}\n      </ConfirmStatusChange>\n\n      <ImportModelsModal\n        resourceName=\"dataset\"\n        resourceLabel={t('dataset')}\n        passwordsNeededMessage={PASSWORDS_NEEDED_MESSAGE}\n        confirmOverwriteMessage={CONFIRM_OVERWRITE_MESSAGE}\n        addDangerToast={addDangerToast}\n        addSuccessToast={addSuccessToast}\n        onModelImport={handleDatasetImport}\n        show={importingDataset}\n        onHide={closeDatasetImportModal}\n        passwordFields={passwordFields}\n        setPasswordFields={setPasswordFields}\n        sshTunnelPasswordFields={sshTunnelPasswordFields}\n        setSSHTunnelPasswordFields={setSSHTunnelPasswordFields}\n        sshTunnelPrivateKeyFields={sshTunnelPrivateKeyFields}\n        setSSHTunnelPrivateKeyFields={setSSHTunnelPrivateKeyFields}\n        sshTunnelPrivateKeyPasswordFields={sshTunnelPrivateKeyPasswordFields}\n        setSSHTunnelPrivateKeyPasswordFields={\n          setSSHTunnelPrivateKeyPasswordFields\n        }\n      />\n      {preparingExport && <Loading />}\n    </>\n  );\n};\n\nexport default withToasts(DatasetList);\n"]},"metadata":{},"sourceType":"module"}