{"ast":null,"code":"import _uniqBy from \"lodash/uniqBy\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ensureIsArray, FeatureFlag, getChartMetadataRegistry, styled, SupersetClient, t } from '@superset-ui/core';\nimport React, { useState, useMemo, useCallback } from 'react';\nimport rison from 'rison';\n\nimport moment from 'moment';\nimport { isFeatureEnabled } from 'src/featureFlags';\nimport { createErrorHandler, createFetchRelated, handleChartDelete } from 'src/views/CRUD/utils';\nimport { useChartEditModal, useFavoriteStatus, useListViewResource } from 'src/views/CRUD/hooks';\nimport handleResourceExport from 'src/utils/export';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport { TagsList } from 'src/components/Tags';\nimport SubMenu from 'src/features/home/SubMenu';\nimport FaveStar from 'src/components/FaveStar';\nimport { Link, useHistory } from 'react-router-dom';\nimport ListView, { FilterOperator } from 'src/components/ListView';\nimport CrossLinks from 'src/components/ListView/CrossLinks';\nimport Loading from 'src/components/Loading';\nimport { dangerouslyGetItemDoNotUse } from 'src/utils/localStorageHelpers';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport PropertiesModal from 'src/explore/components/PropertiesModal';\nimport ImportModelsModal from 'src/components/ImportModal/index';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport { nativeFilterGate } from 'src/dashboard/components/nativeFilters/utils';\nimport setupPlugins from 'src/setup/setupPlugins';\nimport InfoTooltip from 'src/components/InfoTooltip';\nimport CertifiedBadge from 'src/components/CertifiedBadge';\nimport { GenericLink } from 'src/components/GenericLink/GenericLink';\nimport getBootstrapData from 'src/utils/getBootstrapData';\nimport { loadTags } from 'src/components/Tags/utils';\nimport ChartCard from 'src/features/charts/ChartCard';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst FlexRowContainer = styled.div`\n  align-items: center;\n  display: flex;\n\n  a {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    line-height: 1.2;\n  }\n\n  svg {\n    margin-right: ${(_ref) => {let { theme } = _ref;return theme.gridUnit;}}px;\n  }\n`;\nconst PAGE_SIZE = 25;\nconst PASSWORDS_NEEDED_MESSAGE = t('The passwords for the databases below are needed in order to ' +\n'import them together with the charts. Please note that the ' +\n'\"Secure Extra\" and \"Certificate\" sections of ' +\n'the database configuration are not present in export files, and ' +\n'should be added manually after the import if they are needed.');\nconst CONFIRM_OVERWRITE_MESSAGE = t('You are importing one or more charts that already exist. ' +\n'Overwriting might cause you to lose some of your work. Are you ' +\n'sure you want to overwrite?');\nsetupPlugins();\nconst registry = getChartMetadataRegistry();\nconst createFetchDatasets = async function (filterValue, page, pageSize) {var _json$result;if (filterValue === void 0) {filterValue = '';}\n  // add filters if filterValue\n  const filters = filterValue ?\n  { filters: [{ col: 'table_name', opr: 'sw', value: filterValue }] } :\n  {};\n  const queryParams = rison.encode({\n    columns: ['datasource_name', 'datasource_id'],\n    keys: ['none'],\n    order_column: 'table_name',\n    order_direction: 'asc',\n    page,\n    page_size: pageSize,\n    ...filters });\n\n  const { json = {} } = await SupersetClient.get({\n    endpoint: `/api/v1/dataset/?q=${queryParams}` });\n\n  const datasets = json == null ? void 0 : (_json$result = json.result) == null ? void 0 : _json$result.map((_ref2) => {let { table_name: tableName, id } = _ref2;return {\n      label: tableName,\n      value: id };});\n\n  return {\n    data: _uniqBy(datasets, 'value'),\n    totalCount: json == null ? void 0 : json.count };\n\n};\nconst StyledActions = styled.div`\n  color: ${(_ref3) => {let { theme } = _ref3;return theme.colors.grayscale.base;}};\n`;\nconst bootstrapData = getBootstrapData();\nfunction ChartList(props) {\n  const { addDangerToast, addSuccessToast, user: { userId } } = props;\n  const history = useHistory();\n  const { state: { loading, resourceCount: chartCount, resourceCollection: charts, bulkSelectEnabled }, setResourceCollection: setCharts, hasPerm, fetchData, toggleBulkSelect, refreshData } = useListViewResource('chart', t('chart'), addDangerToast);\n  const chartIds = useMemo(() => charts.map((c) => c.id), [charts]);\n  const [saveFavoriteStatus, favoriteStatus] = useFavoriteStatus('chart', chartIds, addDangerToast);\n  const { sliceCurrentlyEditing, handleChartUpdated, openChartEditModal, closeChartEditModal } = useChartEditModal(setCharts, charts);\n  const [importingChart, showImportModal] = useState(false);\n  const [passwordFields, setPasswordFields] = useState([]);\n  const [preparingExport, setPreparingExport] = useState(false);\n  const [sshTunnelPasswordFields, setSSHTunnelPasswordFields] = useState([]);\n  const [sshTunnelPrivateKeyFields, setSSHTunnelPrivateKeyFields] = useState([]);\n  const [sshTunnelPrivateKeyPasswordFields, setSSHTunnelPrivateKeyPasswordFields] = useState([]);\n  // TODO: Fix usage of localStorage keying on the user id\n  const userSettings = dangerouslyGetItemDoNotUse(userId == null ? void 0 : userId.toString(), null);\n  const openChartImportModal = () => {\n    showImportModal(true);\n  };\n  const closeChartImportModal = () => {\n    showImportModal(false);\n  };\n  const handleChartImport = () => {\n    showImportModal(false);\n    refreshData();\n    addSuccessToast(t('Chart imported'));\n  };\n  const canCreate = hasPerm('can_write');\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canExport = hasPerm('can_export') && isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT);\n  const initialSort = [{ id: 'changed_on_delta_humanized', desc: true }];\n  const enableBroadUserAccess = bootstrapData.common.conf.ENABLE_BROAD_ACTIVITY_ACCESS;\n  const handleBulkChartExport = (chartsToExport) => {\n    const ids = chartsToExport.map((_ref4) => {let { id } = _ref4;return id;});\n    handleResourceExport('chart', ids, () => {\n      setPreparingExport(false);\n    });\n    setPreparingExport(true);\n  };\n  const changedByName = (lastSavedBy) => lastSavedBy != null && lastSavedBy.first_name ?\n  `${lastSavedBy == null ? void 0 : lastSavedBy.first_name} ${lastSavedBy == null ? void 0 : lastSavedBy.last_name}` :\n  null;\n  function handleBulkChartDelete(chartsToDelete) {\n    SupersetClient.delete({\n      endpoint: `/api/v1/chart/?q=${rison.encode(chartsToDelete.map((_ref5) => {let { id } = _ref5;return id;}))}` }).\n    then((_ref6) => {let { json = {} } = _ref6;\n      refreshData();\n      addSuccessToast(json.message);\n    }, createErrorHandler((errMsg) => addDangerToast(t('There was an issue deleting the selected charts: %s', errMsg))));\n  }\n  const fetchDashboards = async function (filterValue, page, pageSize) {var _response$json, _response$json$result, _response$json2;if (filterValue === void 0) {filterValue = '';}\n    // add filters if filterValue\n    const filters = filterValue ?\n    {\n      filters: [\n      {\n        col: 'dashboards',\n        opr: FilterOperator.relationManyMany,\n        value: filterValue }] } :\n\n\n\n    {};\n    const queryParams = rison.encode({\n      columns: ['dashboard_title', 'id'],\n      keys: ['none'],\n      order_column: 'dashboard_title',\n      order_direction: 'asc',\n      page,\n      page_size: pageSize,\n      ...filters });\n\n    const response = await SupersetClient.get({\n      endpoint: !filterValue ?\n      `/api/v1/dashboard/?q=${queryParams}` :\n      `/api/v1/chart/?q=${queryParams}` }).\n    catch(() => addDangerToast(t('An error occurred while fetching dashboards')));\n    const dashboards = response == null ? void 0 : (_response$json = response.json) == null ? void 0 : (_response$json$result = _response$json.result) == null ? void 0 : _response$json$result.map((_ref7) => {let { dashboard_title: dashboardTitle, id } = _ref7;return {\n        label: dashboardTitle,\n        value: id };});\n\n    return {\n      data: _uniqBy(dashboards, 'value'),\n      totalCount: response == null ? void 0 : (_response$json2 = response.json) == null ? void 0 : _response$json2.count };\n\n  };\n  const columns = useMemo(() => [\n  {\n    Cell: (_ref8) => {let { row: { original: { id } } } = _ref8;return userId && ___EmotionJSX(FaveStar, { itemId: id, saveFaveStar: saveFavoriteStatus, isStarred: favoriteStatus[id] });},\n    Header: '',\n    id: 'id',\n    disableSortBy: true,\n    size: 'xs',\n    hidden: !userId },\n\n  {\n    Cell: (_ref9) => {let { row: { original: { url, slice_name: sliceName, certified_by: certifiedBy, certification_details: certificationDetails, description } } } = _ref9;return ___EmotionJSX(FlexRowContainer, null,\n      ___EmotionJSX(Link, { to: url },\n      certifiedBy && ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(CertifiedBadge, { certifiedBy: certifiedBy, details: certificationDetails }), ' '),\n\n      sliceName),\n\n      description && ___EmotionJSX(InfoTooltip, { tooltip: description, viewBox: \"0 -1 24 24\" }));},\n\n    Header: t('Chart'),\n    accessor: 'slice_name' },\n\n  {\n    Cell: (_ref10) => {var _registry$get;let { row: { original: { viz_type: vizType } } } = _ref10;return ((_registry$get = registry.get(vizType)) == null ? void 0 : _registry$get.name) || vizType;},\n    Header: t('Visualization type'),\n    accessor: 'viz_type',\n    size: 'xxl' },\n\n  {\n    Cell: (_ref11) => {let { row: { original: { datasource_name_text: dsNameTxt, datasource_url: dsUrl } } } = _ref11;return ___EmotionJSX(GenericLink, { to: dsUrl }, dsNameTxt);},\n    Header: t('Dataset'),\n    accessor: 'datasource_id',\n    disableSortBy: true,\n    size: 'xl' },\n\n  {\n    Cell: (_ref12) => {let { row: { original: { dashboards } } } = _ref12;return ___EmotionJSX(CrossLinks, { crossLinks: ensureIsArray(dashboards).map((d) => ({\n          title: d.dashboard_title,\n          id: d.id })) });},\n\n    Header: t('Dashboards added to'),\n    accessor: 'dashboards',\n    disableSortBy: true,\n    size: 'xxl',\n    hidden: true },\n\n  {\n    Cell: (_ref13) => {let { row: { original: { last_saved_by: lastSavedBy, changed_by_url: changedByUrl } } } = _ref13;return enableBroadUserAccess ? ___EmotionJSX(\"a\", { href: changedByUrl }, changedByName(lastSavedBy)) : ___EmotionJSX(React.Fragment, null, changedByName(lastSavedBy));},\n    Header: t('Modified by'),\n    accessor: 'last_saved_by.first_name',\n    size: 'xl' },\n\n  {\n    Cell: (_ref14) => {let { row: { original: { last_saved_at: lastSavedAt } } } = _ref14;return ___EmotionJSX(\"span\", { className: \"no-wrap\" },\n      lastSavedAt ? moment.utc(lastSavedAt).fromNow() : null);},\n\n    Header: t('Last modified'),\n    accessor: 'last_saved_at',\n    size: 'xl' },\n\n  {\n    accessor: 'owners',\n    hidden: true,\n    disableSortBy: true },\n\n  {\n    Cell: (_ref15) => {let { row: { original: { created_by: createdBy } } } = _ref15;return createdBy ? `${createdBy.first_name} ${createdBy.last_name}` : '';},\n    Header: t('Created by'),\n    accessor: 'created_by',\n    disableSortBy: true,\n    size: 'xl' },\n\n  {\n    Cell: (_ref16) => {let { row: { original: { tags = [] } } } = _ref16;return (\n        // Only show custom type tags\n        ___EmotionJSX(TagsList, { tags: tags.filter((tag) => tag.type ?\n          tag.type === 1 || tag.type === 'TagTypes.custom' :\n          true), maxTags: 3 }));},\n    Header: t('Tags'),\n    accessor: 'tags',\n    disableSortBy: true,\n    hidden: !isFeatureEnabled(FeatureFlag.TAGGING_SYSTEM) },\n\n  {\n    Cell: (_ref17) => {let { row: { original } } = _ref17;\n      const handleDelete = () => handleChartDelete(original, addSuccessToast, addDangerToast, refreshData);\n      const openEditModal = () => openChartEditModal(original);\n      const handleExport = () => handleBulkChartExport([original]);\n      if (!canEdit && !canDelete && !canExport) {\n        return null;\n      }\n      return ___EmotionJSX(StyledActions, { className: \"actions\" },\n      canDelete && ___EmotionJSX(ConfirmStatusChange, { title: t('Please confirm'), description: ___EmotionJSX(React.Fragment, null,\n        t('Are you sure you want to delete'), ' ',\n        ___EmotionJSX(\"b\", null, original.slice_name), \"?\"),\n        onConfirm: handleDelete },\n      (confirmDelete) => ___EmotionJSX(Tooltip, { id: \"delete-action-tooltip\", title: t('Delete'), placement: \"bottom\" },\n      ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: confirmDelete },\n      ___EmotionJSX(Icons.Trash, null)))),\n\n\n\n      canExport && ___EmotionJSX(Tooltip, { id: \"export-action-tooltip\", title: t('Export'), placement: \"bottom\" },\n      ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: handleExport },\n      ___EmotionJSX(Icons.Share, null))),\n\n\n      canEdit && ___EmotionJSX(Tooltip, { id: \"edit-action-tooltip\", title: t('Edit'), placement: \"bottom\" },\n      ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: openEditModal },\n      ___EmotionJSX(Icons.EditAlt, null))));\n\n\n\n    },\n    Header: t('Actions'),\n    id: 'actions',\n    disableSortBy: true,\n    hidden: !canEdit && !canDelete }],\n\n  [\n  userId,\n  canEdit,\n  canDelete,\n  canExport,\n  saveFavoriteStatus,\n  favoriteStatus,\n  refreshData,\n  addSuccessToast,\n  addDangerToast]);\n\n  const favoritesFilter = useMemo(() => ({\n    Header: t('Favorite'),\n    key: 'favorite',\n    id: 'id',\n    urlDisplay: 'favorite',\n    input: 'select',\n    operator: FilterOperator.chartIsFav,\n    unfilteredLabel: t('Any'),\n    selects: [\n    { label: t('Yes'), value: true },\n    { label: t('No'), value: false }] }),\n\n  []);\n  const filters = useMemo(() => {\n    const filters_list = [\n    {\n      Header: t('Owner'),\n      key: 'owner',\n      id: 'owners',\n      input: 'select',\n      operator: FilterOperator.relationManyMany,\n      unfilteredLabel: t('All'),\n      fetchSelects: createFetchRelated('chart', 'owners', createErrorHandler((errMsg) => addDangerToast(t('An error occurred while fetching chart owners values: %s', errMsg))), props.user),\n      paginate: true },\n\n    {\n      Header: t('Created by'),\n      key: 'created_by',\n      id: 'created_by',\n      input: 'select',\n      operator: FilterOperator.relationOneMany,\n      unfilteredLabel: t('All'),\n      fetchSelects: createFetchRelated('chart', 'created_by', createErrorHandler((errMsg) => addDangerToast(t('An error occurred while fetching chart created by values: %s', errMsg))), props.user),\n      paginate: true },\n\n    {\n      Header: t('Chart type'),\n      key: 'viz_type',\n      id: 'viz_type',\n      input: 'select',\n      operator: FilterOperator.equals,\n      unfilteredLabel: t('All'),\n      selects: registry.\n      keys().\n      filter((k) => {var _registry$get2;return nativeFilterGate(((_registry$get2 = registry.get(k)) == null ? void 0 : _registry$get2.behaviors) || []);}).\n      map((k) => {var _registry$get3;return { label: ((_registry$get3 = registry.get(k)) == null ? void 0 : _registry$get3.name) || k, value: k };}).\n      sort((a, b) => {\n        if (!a.label || !b.label) {\n          return 0;\n        }\n        if (a.label > b.label) {\n          return 1;\n        }\n        if (a.label < b.label) {\n          return -1;\n        }\n        return 0;\n      }) },\n\n    {\n      Header: t('Dataset'),\n      key: 'dataset',\n      id: 'datasource_id',\n      input: 'select',\n      operator: FilterOperator.equals,\n      unfilteredLabel: t('All'),\n      fetchSelects: createFetchDatasets,\n      paginate: true },\n\n    {\n      Header: t('Dashboards'),\n      key: 'dashboards',\n      id: 'dashboards',\n      input: 'select',\n      operator: FilterOperator.relationManyMany,\n      unfilteredLabel: t('All'),\n      fetchSelects: fetchDashboards,\n      paginate: true },\n\n    ...(userId ? [favoritesFilter] : []),\n    {\n      Header: t('Certified'),\n      key: 'certified',\n      id: 'id',\n      urlDisplay: 'certified',\n      input: 'select',\n      operator: FilterOperator.chartIsCertified,\n      unfilteredLabel: t('Any'),\n      selects: [\n      { label: t('Yes'), value: true },\n      { label: t('No'), value: false }] }];\n\n\n\n    if (isFeatureEnabled(FeatureFlag.TAGGING_SYSTEM)) {\n      filters_list.push({\n        Header: t('Tags'),\n        key: 'tags',\n        id: 'tags',\n        input: 'select',\n        operator: FilterOperator.chartTags,\n        unfilteredLabel: t('All'),\n        fetchSelects: loadTags });\n\n    }\n    filters_list.push({\n      Header: t('Search'),\n      key: 'search',\n      id: 'slice_name',\n      input: 'search',\n      operator: FilterOperator.chartAllText });\n\n    return filters_list;\n  }, [addDangerToast, favoritesFilter, props.user]);\n  const sortTypes = [\n  {\n    desc: false,\n    id: 'slice_name',\n    label: t('Alphabetical'),\n    value: 'alphabetical' },\n\n  {\n    desc: true,\n    id: 'changed_on_delta_humanized',\n    label: t('Recently modified'),\n    value: 'recently_modified' },\n\n  {\n    desc: false,\n    id: 'changed_on_delta_humanized',\n    label: t('Least recently modified'),\n    value: 'least_recently_modified' }];\n\n\n  const renderCard = useCallback((chart) => ___EmotionJSX(ChartCard, { chart: chart, showThumbnails: userSettings ?\n    userSettings.thumbnails :\n    isFeatureEnabled(FeatureFlag.THUMBNAILS), hasPerm: hasPerm, openChartEditModal: openChartEditModal, bulkSelectEnabled: bulkSelectEnabled, addDangerToast: addDangerToast, addSuccessToast: addSuccessToast, refreshData: refreshData, userId: userId, loading: loading, favoriteStatus: favoriteStatus[chart.id], saveFavoriteStatus: saveFavoriteStatus, handleBulkChartExport: handleBulkChartExport }), [\n  addDangerToast,\n  addSuccessToast,\n  bulkSelectEnabled,\n  favoriteStatus,\n  hasPerm,\n  loading]);\n\n  const subMenuButtons = [];\n  if (canDelete || canExport) {\n    subMenuButtons.push({\n      name: t('Bulk select'),\n      buttonStyle: 'secondary',\n      'data-test': 'bulk-select',\n      onClick: toggleBulkSelect });\n\n  }\n  if (canCreate) {\n    subMenuButtons.push({\n      name: ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(\"i\", { className: \"fa fa-plus\" }), \" \", t('Chart')),\n\n      buttonStyle: 'primary',\n      onClick: () => {\n        history.push('/chart/add');\n      } });\n\n    if (isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT)) {\n      subMenuButtons.push({\n        name: ___EmotionJSX(Tooltip, { id: \"import-tooltip\", title: t('Import charts'), placement: \"bottomRight\" },\n        ___EmotionJSX(Icons.Import, null)),\n\n        buttonStyle: 'link',\n        onClick: openChartImportModal });\n\n    }\n  }\n  return ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(SubMenu, { name: t('Charts'), buttons: subMenuButtons }),\n  sliceCurrentlyEditing && ___EmotionJSX(PropertiesModal, { onHide: closeChartEditModal, onSave: handleChartUpdated, show: true, slice: sliceCurrentlyEditing }),\n  ___EmotionJSX(ConfirmStatusChange, { title: t('Please confirm'), description: t('Are you sure you want to delete the selected charts?'), onConfirm: handleBulkChartDelete },\n  (confirmDelete) => {\n    const bulkActions = [];\n    if (canDelete) {\n      bulkActions.push({\n        key: 'delete',\n        name: t('Delete'),\n        type: 'danger',\n        onSelect: confirmDelete });\n\n    }\n    if (canExport) {\n      bulkActions.push({\n        key: 'export',\n        name: t('Export'),\n        type: 'primary',\n        onSelect: handleBulkChartExport });\n\n    }\n    return ___EmotionJSX(ListView, { bulkActions: bulkActions, bulkSelectEnabled: bulkSelectEnabled, cardSortSelectOptions: sortTypes, className: \"chart-list-view\", columns: columns, count: chartCount, data: charts, disableBulkSelect: toggleBulkSelect, fetchData: fetchData, filters: filters, initialSort: initialSort, loading: loading, pageSize: PAGE_SIZE, renderCard: renderCard, showThumbnails: userSettings ?\n      userSettings.thumbnails :\n      isFeatureEnabled(FeatureFlag.THUMBNAILS), defaultViewMode: isFeatureEnabled(FeatureFlag.LISTVIEWS_DEFAULT_CARD_VIEW) ?\n      'card' :\n      'table' });\n  }),\n\n\n  ___EmotionJSX(ImportModelsModal, { resourceName: \"chart\", resourceLabel: t('chart'), passwordsNeededMessage: PASSWORDS_NEEDED_MESSAGE, confirmOverwriteMessage: CONFIRM_OVERWRITE_MESSAGE, addDangerToast: addDangerToast, addSuccessToast: addSuccessToast, onModelImport: handleChartImport, show: importingChart, onHide: closeChartImportModal, passwordFields: passwordFields, setPasswordFields: setPasswordFields, sshTunnelPasswordFields: sshTunnelPasswordFields, setSSHTunnelPasswordFields: setSSHTunnelPasswordFields, sshTunnelPrivateKeyFields: sshTunnelPrivateKeyFields, setSSHTunnelPrivateKeyFields: setSSHTunnelPrivateKeyFields, sshTunnelPrivateKeyPasswordFields: sshTunnelPrivateKeyPasswordFields, setSSHTunnelPrivateKeyPasswordFields: setSSHTunnelPrivateKeyPasswordFields }),\n  preparingExport && ___EmotionJSX(Loading, null));\n\n}\nexport default withToasts(ChartList);","map":{"version":3,"mappings":"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","names":["ensureIsArray","FeatureFlag","getChartMetadataRegistry","styled","SupersetClient","t","React","useState","useMemo","useCallback","rison","moment","isFeatureEnabled","createErrorHandler","createFetchRelated","handleChartDelete","useChartEditModal","useFavoriteStatus","useListViewResource","handleResourceExport","ConfirmStatusChange","TagsList","SubMenu","FaveStar","Link","useHistory","ListView","FilterOperator","CrossLinks","Loading","dangerouslyGetItemDoNotUse","withToasts","PropertiesModal","ImportModelsModal","Tooltip","Icons","nativeFilterGate","setupPlugins","InfoTooltip","CertifiedBadge","GenericLink","getBootstrapData","loadTags","ChartCard","FlexRowContainer","div","theme","gridUnit","PAGE_SIZE","PASSWORDS_NEEDED_MESSAGE","CONFIRM_OVERWRITE_MESSAGE","registry","createFetchDatasets","filterValue","page","pageSize","filters","col","opr","value","queryParams","encode","columns","keys","order_column","order_direction","page_size","json","get","endpoint","datasets","result","map","table_name","tableName","id","label","data","totalCount","count","StyledActions","colors","grayscale","base","bootstrapData","ChartList","props","addDangerToast","addSuccessToast","user","userId","history","state","loading","resourceCount","chartCount","resourceCollection","charts","bulkSelectEnabled","setResourceCollection","setCharts","hasPerm","fetchData","toggleBulkSelect","refreshData","chartIds","c","saveFavoriteStatus","favoriteStatus","sliceCurrentlyEditing","handleChartUpdated","openChartEditModal","closeChartEditModal","importingChart","showImportModal","passwordFields","setPasswordFields","preparingExport","setPreparingExport","sshTunnelPasswordFields","setSSHTunnelPasswordFields","sshTunnelPrivateKeyFields","setSSHTunnelPrivateKeyFields","sshTunnelPrivateKeyPasswordFields","setSSHTunnelPrivateKeyPasswordFields","userSettings","toString","openChartImportModal","closeChartImportModal","handleChartImport","canCreate","canEdit","canDelete","canExport","VERSIONED_EXPORT","initialSort","desc","enableBroadUserAccess","common","conf","ENABLE_BROAD_ACTIVITY_ACCESS","handleBulkChartExport","chartsToExport","ids","changedByName","lastSavedBy","first_name","last_name","handleBulkChartDelete","chartsToDelete","delete","then","message","errMsg","fetchDashboards","relationManyMany","response","catch","dashboards","dashboard_title","dashboardTitle","Cell","row","original","Header","disableSortBy","size","hidden","url","slice_name","sliceName","certified_by","certifiedBy","certification_details","certificationDetails","description","accessor","viz_type","vizType","name","datasource_name_text","dsNameTxt","datasource_url","dsUrl","d","title","last_saved_by","changed_by_url","changedByUrl","last_saved_at","lastSavedAt","utc","fromNow","created_by","createdBy","tags","filter","tag","type","TAGGING_SYSTEM","handleDelete","openEditModal","handleExport","confirmDelete","favoritesFilter","key","urlDisplay","input","operator","chartIsFav","unfilteredLabel","selects","filters_list","fetchSelects","paginate","relationOneMany","equals","k","behaviors","sort","a","b","chartIsCertified","push","chartTags","chartAllText","sortTypes","renderCard","chart","thumbnails","THUMBNAILS","subMenuButtons","buttonStyle","onClick","bulkActions","onSelect","LISTVIEWS_DEFAULT_CARD_VIEW"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/pages/ChartList/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  ensureIsArray,\n  FeatureFlag,\n  getChartMetadataRegistry,\n  JsonResponse,\n  styled,\n  SupersetClient,\n  t,\n} from '@superset-ui/core';\nimport React, { useState, useMemo, useCallback } from 'react';\nimport rison from 'rison';\nimport { uniqBy } from 'lodash';\nimport moment from 'moment';\nimport { isFeatureEnabled } from 'src/featureFlags';\nimport {\n  createErrorHandler,\n  createFetchRelated,\n  handleChartDelete,\n} from 'src/views/CRUD/utils';\nimport {\n  useChartEditModal,\n  useFavoriteStatus,\n  useListViewResource,\n} from 'src/views/CRUD/hooks';\nimport handleResourceExport from 'src/utils/export';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport { TagsList } from 'src/components/Tags';\nimport SubMenu, { SubMenuProps } from 'src/features/home/SubMenu';\nimport FaveStar from 'src/components/FaveStar';\nimport { Link, useHistory } from 'react-router-dom';\nimport ListView, {\n  Filter,\n  FilterOperator,\n  Filters,\n  ListViewProps,\n  SelectOption,\n} from 'src/components/ListView';\nimport CrossLinks from 'src/components/ListView/CrossLinks';\nimport Loading from 'src/components/Loading';\nimport { dangerouslyGetItemDoNotUse } from 'src/utils/localStorageHelpers';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport PropertiesModal from 'src/explore/components/PropertiesModal';\nimport ImportModelsModal from 'src/components/ImportModal/index';\nimport Chart, { ChartLinkedDashboard } from 'src/types/Chart';\nimport Tag from 'src/types/TagType';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport { nativeFilterGate } from 'src/dashboard/components/nativeFilters/utils';\nimport setupPlugins from 'src/setup/setupPlugins';\nimport InfoTooltip from 'src/components/InfoTooltip';\nimport CertifiedBadge from 'src/components/CertifiedBadge';\nimport { GenericLink } from 'src/components/GenericLink/GenericLink';\nimport getBootstrapData from 'src/utils/getBootstrapData';\nimport Owner from 'src/types/Owner';\nimport { loadTags } from 'src/components/Tags/utils';\nimport ChartCard from 'src/features/charts/ChartCard';\n\nconst FlexRowContainer = styled.div`\n  align-items: center;\n  display: flex;\n\n  a {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    line-height: 1.2;\n  }\n\n  svg {\n    margin-right: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n\nconst PAGE_SIZE = 25;\nconst PASSWORDS_NEEDED_MESSAGE = t(\n  'The passwords for the databases below are needed in order to ' +\n    'import them together with the charts. Please note that the ' +\n    '\"Secure Extra\" and \"Certificate\" sections of ' +\n    'the database configuration are not present in export files, and ' +\n    'should be added manually after the import if they are needed.',\n);\nconst CONFIRM_OVERWRITE_MESSAGE = t(\n  'You are importing one or more charts that already exist. ' +\n    'Overwriting might cause you to lose some of your work. Are you ' +\n    'sure you want to overwrite?',\n);\n\nsetupPlugins();\nconst registry = getChartMetadataRegistry();\n\nconst createFetchDatasets = async (\n  filterValue = '',\n  page: number,\n  pageSize: number,\n) => {\n  // add filters if filterValue\n  const filters = filterValue\n    ? { filters: [{ col: 'table_name', opr: 'sw', value: filterValue }] }\n    : {};\n  const queryParams = rison.encode({\n    columns: ['datasource_name', 'datasource_id'],\n    keys: ['none'],\n    order_column: 'table_name',\n    order_direction: 'asc',\n    page,\n    page_size: pageSize,\n    ...filters,\n  });\n\n  const { json = {} } = await SupersetClient.get({\n    endpoint: `/api/v1/dataset/?q=${queryParams}`,\n  });\n\n  const datasets = json?.result?.map(\n    ({ table_name: tableName, id }: { table_name: string; id: number }) => ({\n      label: tableName,\n      value: id,\n    }),\n  );\n\n  return {\n    data: uniqBy<SelectOption>(datasets, 'value'),\n    totalCount: json?.count,\n  };\n};\n\ninterface ChartListProps {\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n  user: {\n    userId: string | number;\n    firstName: string;\n    lastName: string;\n  };\n}\n\nconst StyledActions = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.base};\n`;\n\nconst bootstrapData = getBootstrapData();\n\nfunction ChartList(props: ChartListProps) {\n  const {\n    addDangerToast,\n    addSuccessToast,\n    user: { userId },\n  } = props;\n\n  const history = useHistory();\n\n  const {\n    state: {\n      loading,\n      resourceCount: chartCount,\n      resourceCollection: charts,\n      bulkSelectEnabled,\n    },\n    setResourceCollection: setCharts,\n    hasPerm,\n    fetchData,\n    toggleBulkSelect,\n    refreshData,\n  } = useListViewResource<Chart>('chart', t('chart'), addDangerToast);\n\n  const chartIds = useMemo(() => charts.map(c => c.id), [charts]);\n\n  const [saveFavoriteStatus, favoriteStatus] = useFavoriteStatus(\n    'chart',\n    chartIds,\n    addDangerToast,\n  );\n  const {\n    sliceCurrentlyEditing,\n    handleChartUpdated,\n    openChartEditModal,\n    closeChartEditModal,\n  } = useChartEditModal(setCharts, charts);\n\n  const [importingChart, showImportModal] = useState<boolean>(false);\n  const [passwordFields, setPasswordFields] = useState<string[]>([]);\n  const [preparingExport, setPreparingExport] = useState<boolean>(false);\n  const [sshTunnelPasswordFields, setSSHTunnelPasswordFields] = useState<\n    string[]\n  >([]);\n  const [sshTunnelPrivateKeyFields, setSSHTunnelPrivateKeyFields] = useState<\n    string[]\n  >([]);\n  const [\n    sshTunnelPrivateKeyPasswordFields,\n    setSSHTunnelPrivateKeyPasswordFields,\n  ] = useState<string[]>([]);\n\n  // TODO: Fix usage of localStorage keying on the user id\n  const userSettings = dangerouslyGetItemDoNotUse(userId?.toString(), null) as {\n    thumbnails: boolean;\n  };\n\n  const openChartImportModal = () => {\n    showImportModal(true);\n  };\n\n  const closeChartImportModal = () => {\n    showImportModal(false);\n  };\n\n  const handleChartImport = () => {\n    showImportModal(false);\n    refreshData();\n    addSuccessToast(t('Chart imported'));\n  };\n\n  const canCreate = hasPerm('can_write');\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canExport =\n    hasPerm('can_export') && isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT);\n  const initialSort = [{ id: 'changed_on_delta_humanized', desc: true }];\n  const enableBroadUserAccess =\n    bootstrapData.common.conf.ENABLE_BROAD_ACTIVITY_ACCESS;\n  const handleBulkChartExport = (chartsToExport: Chart[]) => {\n    const ids = chartsToExport.map(({ id }) => id);\n    handleResourceExport('chart', ids, () => {\n      setPreparingExport(false);\n    });\n    setPreparingExport(true);\n  };\n  const changedByName = (lastSavedBy: Owner) =>\n    lastSavedBy?.first_name\n      ? `${lastSavedBy?.first_name} ${lastSavedBy?.last_name}`\n      : null;\n\n  function handleBulkChartDelete(chartsToDelete: Chart[]) {\n    SupersetClient.delete({\n      endpoint: `/api/v1/chart/?q=${rison.encode(\n        chartsToDelete.map(({ id }) => id),\n      )}`,\n    }).then(\n      ({ json = {} }) => {\n        refreshData();\n        addSuccessToast(json.message);\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(\n          t('There was an issue deleting the selected charts: %s', errMsg),\n        ),\n      ),\n    );\n  }\n  const fetchDashboards = async (\n    filterValue = '',\n    page: number,\n    pageSize: number,\n  ) => {\n    // add filters if filterValue\n    const filters = filterValue\n      ? {\n          filters: [\n            {\n              col: 'dashboards',\n              opr: FilterOperator.relationManyMany,\n              value: filterValue,\n            },\n          ],\n        }\n      : {};\n    const queryParams = rison.encode({\n      columns: ['dashboard_title', 'id'],\n      keys: ['none'],\n      order_column: 'dashboard_title',\n      order_direction: 'asc',\n      page,\n      page_size: pageSize,\n      ...filters,\n    });\n    const response: void | JsonResponse = await SupersetClient.get({\n      endpoint: !filterValue\n        ? `/api/v1/dashboard/?q=${queryParams}`\n        : `/api/v1/chart/?q=${queryParams}`,\n    }).catch(() =>\n      addDangerToast(t('An error occurred while fetching dashboards')),\n    );\n    const dashboards = response?.json?.result?.map(\n      ({\n        dashboard_title: dashboardTitle,\n        id,\n      }: {\n        dashboard_title: string;\n        id: number;\n      }) => ({\n        label: dashboardTitle,\n        value: id,\n      }),\n    );\n    return {\n      data: uniqBy<SelectOption>(dashboards, 'value'),\n      totalCount: response?.json?.count,\n    };\n  };\n\n  const columns = useMemo(\n    () => [\n      {\n        Cell: ({\n          row: {\n            original: { id },\n          },\n        }: any) =>\n          userId && (\n            <FaveStar\n              itemId={id}\n              saveFaveStar={saveFavoriteStatus}\n              isStarred={favoriteStatus[id]}\n            />\n          ),\n        Header: '',\n        id: 'id',\n        disableSortBy: true,\n        size: 'xs',\n        hidden: !userId,\n      },\n      {\n        Cell: ({\n          row: {\n            original: {\n              url,\n              slice_name: sliceName,\n              certified_by: certifiedBy,\n              certification_details: certificationDetails,\n              description,\n            },\n          },\n        }: any) => (\n          <FlexRowContainer>\n            <Link to={url} data-test={`${sliceName}-list-chart-title`}>\n              {certifiedBy && (\n                <>\n                  <CertifiedBadge\n                    certifiedBy={certifiedBy}\n                    details={certificationDetails}\n                  />{' '}\n                </>\n              )}\n              {sliceName}\n            </Link>\n            {description && (\n              <InfoTooltip tooltip={description} viewBox=\"0 -1 24 24\" />\n            )}\n          </FlexRowContainer>\n        ),\n        Header: t('Chart'),\n        accessor: 'slice_name',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { viz_type: vizType },\n          },\n        }: any) => registry.get(vizType)?.name || vizType,\n        Header: t('Visualization type'),\n        accessor: 'viz_type',\n        size: 'xxl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: {\n              datasource_name_text: dsNameTxt,\n              datasource_url: dsUrl,\n            },\n          },\n        }: any) => <GenericLink to={dsUrl}>{dsNameTxt}</GenericLink>,\n        Header: t('Dataset'),\n        accessor: 'datasource_id',\n        disableSortBy: true,\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { dashboards },\n          },\n        }: any) => (\n          <CrossLinks\n            crossLinks={ensureIsArray(dashboards).map(\n              (d: ChartLinkedDashboard) => ({\n                title: d.dashboard_title,\n                id: d.id,\n              }),\n            )}\n          />\n        ),\n        Header: t('Dashboards added to'),\n        accessor: 'dashboards',\n        disableSortBy: true,\n        size: 'xxl',\n        hidden: true,\n      },\n      {\n        Cell: ({\n          row: {\n            original: {\n              last_saved_by: lastSavedBy,\n              changed_by_url: changedByUrl,\n            },\n          },\n        }: any) =>\n          enableBroadUserAccess ? (\n            <a href={changedByUrl}>{changedByName(lastSavedBy)}</a>\n          ) : (\n            <>{changedByName(lastSavedBy)}</>\n          ),\n        Header: t('Modified by'),\n        accessor: 'last_saved_by.first_name',\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { last_saved_at: lastSavedAt },\n          },\n        }: any) => (\n          <span className=\"no-wrap\">\n            {lastSavedAt ? moment.utc(lastSavedAt).fromNow() : null}\n          </span>\n        ),\n        Header: t('Last modified'),\n        accessor: 'last_saved_at',\n        size: 'xl',\n      },\n      {\n        accessor: 'owners',\n        hidden: true,\n        disableSortBy: true,\n      },\n      {\n        Cell: ({\n          row: {\n            original: { created_by: createdBy },\n          },\n        }: any) =>\n          createdBy ? `${createdBy.first_name} ${createdBy.last_name}` : '',\n        Header: t('Created by'),\n        accessor: 'created_by',\n        disableSortBy: true,\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { tags = [] },\n          },\n        }: any) => (\n          // Only show custom type tags\n          <TagsList\n            tags={tags.filter((tag: Tag) =>\n              tag.type\n                ? tag.type === 1 || tag.type === 'TagTypes.custom'\n                : true,\n            )}\n            maxTags={3}\n          />\n        ),\n        Header: t('Tags'),\n        accessor: 'tags',\n        disableSortBy: true,\n        hidden: !isFeatureEnabled(FeatureFlag.TAGGING_SYSTEM),\n      },\n      {\n        Cell: ({ row: { original } }: any) => {\n          const handleDelete = () =>\n            handleChartDelete(\n              original,\n              addSuccessToast,\n              addDangerToast,\n              refreshData,\n            );\n          const openEditModal = () => openChartEditModal(original);\n          const handleExport = () => handleBulkChartExport([original]);\n          if (!canEdit && !canDelete && !canExport) {\n            return null;\n          }\n\n          return (\n            <StyledActions className=\"actions\">\n              {canDelete && (\n                <ConfirmStatusChange\n                  title={t('Please confirm')}\n                  description={\n                    <>\n                      {t('Are you sure you want to delete')}{' '}\n                      <b>{original.slice_name}</b>?\n                    </>\n                  }\n                  onConfirm={handleDelete}\n                >\n                  {confirmDelete => (\n                    <Tooltip\n                      id=\"delete-action-tooltip\"\n                      title={t('Delete')}\n                      placement=\"bottom\"\n                    >\n                      <span\n                        data-test=\"trash\"\n                        role=\"button\"\n                        tabIndex={0}\n                        className=\"action-button\"\n                        onClick={confirmDelete}\n                      >\n                        <Icons.Trash />\n                      </span>\n                    </Tooltip>\n                  )}\n                </ConfirmStatusChange>\n              )}\n              {canExport && (\n                <Tooltip\n                  id=\"export-action-tooltip\"\n                  title={t('Export')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={handleExport}\n                  >\n                    <Icons.Share />\n                  </span>\n                </Tooltip>\n              )}\n              {canEdit && (\n                <Tooltip\n                  id=\"edit-action-tooltip\"\n                  title={t('Edit')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={openEditModal}\n                  >\n                    <Icons.EditAlt data-test=\"edit-alt\" />\n                  </span>\n                </Tooltip>\n              )}\n            </StyledActions>\n          );\n        },\n        Header: t('Actions'),\n        id: 'actions',\n        disableSortBy: true,\n        hidden: !canEdit && !canDelete,\n      },\n    ],\n    [\n      userId,\n      canEdit,\n      canDelete,\n      canExport,\n      saveFavoriteStatus,\n      favoriteStatus,\n      refreshData,\n      addSuccessToast,\n      addDangerToast,\n    ],\n  );\n\n  const favoritesFilter: Filter = useMemo(\n    () => ({\n      Header: t('Favorite'),\n      key: 'favorite',\n      id: 'id',\n      urlDisplay: 'favorite',\n      input: 'select',\n      operator: FilterOperator.chartIsFav,\n      unfilteredLabel: t('Any'),\n      selects: [\n        { label: t('Yes'), value: true },\n        { label: t('No'), value: false },\n      ],\n    }),\n    [],\n  );\n\n  const filters: Filters = useMemo(() => {\n    const filters_list = [\n      {\n        Header: t('Owner'),\n        key: 'owner',\n        id: 'owners',\n        input: 'select',\n        operator: FilterOperator.relationManyMany,\n        unfilteredLabel: t('All'),\n        fetchSelects: createFetchRelated(\n          'chart',\n          'owners',\n          createErrorHandler(errMsg =>\n            addDangerToast(\n              t(\n                'An error occurred while fetching chart owners values: %s',\n                errMsg,\n              ),\n            ),\n          ),\n          props.user,\n        ),\n        paginate: true,\n      },\n      {\n        Header: t('Created by'),\n        key: 'created_by',\n        id: 'created_by',\n        input: 'select',\n        operator: FilterOperator.relationOneMany,\n        unfilteredLabel: t('All'),\n        fetchSelects: createFetchRelated(\n          'chart',\n          'created_by',\n          createErrorHandler(errMsg =>\n            addDangerToast(\n              t(\n                'An error occurred while fetching chart created by values: %s',\n                errMsg,\n              ),\n            ),\n          ),\n          props.user,\n        ),\n        paginate: true,\n      },\n      {\n        Header: t('Chart type'),\n        key: 'viz_type',\n        id: 'viz_type',\n        input: 'select',\n        operator: FilterOperator.equals,\n        unfilteredLabel: t('All'),\n        selects: registry\n          .keys()\n          .filter(k => nativeFilterGate(registry.get(k)?.behaviors || []))\n          .map(k => ({ label: registry.get(k)?.name || k, value: k }))\n          .sort((a, b) => {\n            if (!a.label || !b.label) {\n              return 0;\n            }\n\n            if (a.label > b.label) {\n              return 1;\n            }\n            if (a.label < b.label) {\n              return -1;\n            }\n\n            return 0;\n          }),\n      },\n      {\n        Header: t('Dataset'),\n        key: 'dataset',\n        id: 'datasource_id',\n        input: 'select',\n        operator: FilterOperator.equals,\n        unfilteredLabel: t('All'),\n        fetchSelects: createFetchDatasets,\n        paginate: true,\n      },\n      {\n        Header: t('Dashboards'),\n        key: 'dashboards',\n        id: 'dashboards',\n        input: 'select',\n        operator: FilterOperator.relationManyMany,\n        unfilteredLabel: t('All'),\n        fetchSelects: fetchDashboards,\n        paginate: true,\n      },\n      ...(userId ? [favoritesFilter] : []),\n      {\n        Header: t('Certified'),\n        key: 'certified',\n        id: 'id',\n        urlDisplay: 'certified',\n        input: 'select',\n        operator: FilterOperator.chartIsCertified,\n        unfilteredLabel: t('Any'),\n        selects: [\n          { label: t('Yes'), value: true },\n          { label: t('No'), value: false },\n        ],\n      },\n    ] as Filters;\n    if (isFeatureEnabled(FeatureFlag.TAGGING_SYSTEM)) {\n      filters_list.push({\n        Header: t('Tags'),\n        key: 'tags',\n        id: 'tags',\n        input: 'select',\n        operator: FilterOperator.chartTags,\n        unfilteredLabel: t('All'),\n        fetchSelects: loadTags,\n      });\n    }\n    filters_list.push({\n      Header: t('Search'),\n      key: 'search',\n      id: 'slice_name',\n      input: 'search',\n      operator: FilterOperator.chartAllText,\n    });\n    return filters_list;\n  }, [addDangerToast, favoritesFilter, props.user]);\n\n  const sortTypes = [\n    {\n      desc: false,\n      id: 'slice_name',\n      label: t('Alphabetical'),\n      value: 'alphabetical',\n    },\n    {\n      desc: true,\n      id: 'changed_on_delta_humanized',\n      label: t('Recently modified'),\n      value: 'recently_modified',\n    },\n    {\n      desc: false,\n      id: 'changed_on_delta_humanized',\n      label: t('Least recently modified'),\n      value: 'least_recently_modified',\n    },\n  ];\n\n  const renderCard = useCallback(\n    (chart: Chart) => (\n      <ChartCard\n        chart={chart}\n        showThumbnails={\n          userSettings\n            ? userSettings.thumbnails\n            : isFeatureEnabled(FeatureFlag.THUMBNAILS)\n        }\n        hasPerm={hasPerm}\n        openChartEditModal={openChartEditModal}\n        bulkSelectEnabled={bulkSelectEnabled}\n        addDangerToast={addDangerToast}\n        addSuccessToast={addSuccessToast}\n        refreshData={refreshData}\n        userId={userId}\n        loading={loading}\n        favoriteStatus={favoriteStatus[chart.id]}\n        saveFavoriteStatus={saveFavoriteStatus}\n        handleBulkChartExport={handleBulkChartExport}\n      />\n    ),\n    [\n      addDangerToast,\n      addSuccessToast,\n      bulkSelectEnabled,\n      favoriteStatus,\n      hasPerm,\n      loading,\n    ],\n  );\n\n  const subMenuButtons: SubMenuProps['buttons'] = [];\n  if (canDelete || canExport) {\n    subMenuButtons.push({\n      name: t('Bulk select'),\n      buttonStyle: 'secondary',\n      'data-test': 'bulk-select',\n      onClick: toggleBulkSelect,\n    });\n  }\n  if (canCreate) {\n    subMenuButtons.push({\n      name: (\n        <>\n          <i className=\"fa fa-plus\" /> {t('Chart')}\n        </>\n      ),\n      buttonStyle: 'primary',\n      onClick: () => {\n        history.push('/chart/add');\n      },\n    });\n\n    if (isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT)) {\n      subMenuButtons.push({\n        name: (\n          <Tooltip\n            id=\"import-tooltip\"\n            title={t('Import charts')}\n            placement=\"bottomRight\"\n          >\n            <Icons.Import data-test=\"import-button\" />\n          </Tooltip>\n        ),\n        buttonStyle: 'link',\n        onClick: openChartImportModal,\n      });\n    }\n  }\n\n  return (\n    <>\n      <SubMenu name={t('Charts')} buttons={subMenuButtons} />\n      {sliceCurrentlyEditing && (\n        <PropertiesModal\n          onHide={closeChartEditModal}\n          onSave={handleChartUpdated}\n          show\n          slice={sliceCurrentlyEditing}\n        />\n      )}\n      <ConfirmStatusChange\n        title={t('Please confirm')}\n        description={t('Are you sure you want to delete the selected charts?')}\n        onConfirm={handleBulkChartDelete}\n      >\n        {confirmDelete => {\n          const bulkActions: ListViewProps['bulkActions'] = [];\n          if (canDelete) {\n            bulkActions.push({\n              key: 'delete',\n              name: t('Delete'),\n              type: 'danger',\n              onSelect: confirmDelete,\n            });\n          }\n          if (canExport) {\n            bulkActions.push({\n              key: 'export',\n              name: t('Export'),\n              type: 'primary',\n              onSelect: handleBulkChartExport,\n            });\n          }\n          return (\n            <ListView<Chart>\n              bulkActions={bulkActions}\n              bulkSelectEnabled={bulkSelectEnabled}\n              cardSortSelectOptions={sortTypes}\n              className=\"chart-list-view\"\n              columns={columns}\n              count={chartCount}\n              data={charts}\n              disableBulkSelect={toggleBulkSelect}\n              fetchData={fetchData}\n              filters={filters}\n              initialSort={initialSort}\n              loading={loading}\n              pageSize={PAGE_SIZE}\n              renderCard={renderCard}\n              showThumbnails={\n                userSettings\n                  ? userSettings.thumbnails\n                  : isFeatureEnabled(FeatureFlag.THUMBNAILS)\n              }\n              defaultViewMode={\n                isFeatureEnabled(FeatureFlag.LISTVIEWS_DEFAULT_CARD_VIEW)\n                  ? 'card'\n                  : 'table'\n              }\n            />\n          );\n        }}\n      </ConfirmStatusChange>\n\n      <ImportModelsModal\n        resourceName=\"chart\"\n        resourceLabel={t('chart')}\n        passwordsNeededMessage={PASSWORDS_NEEDED_MESSAGE}\n        confirmOverwriteMessage={CONFIRM_OVERWRITE_MESSAGE}\n        addDangerToast={addDangerToast}\n        addSuccessToast={addSuccessToast}\n        onModelImport={handleChartImport}\n        show={importingChart}\n        onHide={closeChartImportModal}\n        passwordFields={passwordFields}\n        setPasswordFields={setPasswordFields}\n        sshTunnelPasswordFields={sshTunnelPasswordFields}\n        setSSHTunnelPasswordFields={setSSHTunnelPasswordFields}\n        sshTunnelPrivateKeyFields={sshTunnelPrivateKeyFields}\n        setSSHTunnelPrivateKeyFields={setSSHTunnelPrivateKeyFields}\n        sshTunnelPrivateKeyPasswordFields={sshTunnelPrivateKeyPasswordFields}\n        setSSHTunnelPrivateKeyPasswordFields={\n          setSSHTunnelPrivateKeyPasswordFields\n        }\n      />\n      {preparingExport && <Loading />}\n    </>\n  );\n}\n\nexport default withToasts(ChartList);\n"]},"metadata":{},"sourceType":"module"}