{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { forwardRef } from 'react';\nimport { css } from '@superset-ui/core';\nimport RowCountLabel from 'src/explore/components/RowCountLabel';\nimport CachedLabel from 'src/components/CachedLabel';\nimport Timer from 'src/components/Timer';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nvar CHART_STATUS_MAP;\n(function (CHART_STATUS_MAP) {\n  CHART_STATUS_MAP[\"failed\"] = \"danger\";\n  CHART_STATUS_MAP[\"loading\"] = \"warning\";\n  CHART_STATUS_MAP[\"success\"] = \"success\";\n})(CHART_STATUS_MAP || (CHART_STATUS_MAP = {}));\nexport const ChartPills = /*#__PURE__*/forwardRef((_ref, ref) => {let { queriesResponse, chartStatus, chartUpdateStartTime, chartUpdateEndTime, refreshCachedQuery, rowLimit } = _ref;\n  const isLoading = chartStatus === 'loading';\n  const firstQueryResponse = queriesResponse == null ? void 0 : queriesResponse[0];\n  return ___EmotionJSX(\"div\", { ref: ref },\n  ___EmotionJSX(\"div\", { css: (theme) => css`\n            display: flex;\n            justify-content: flex-end;\n            padding-bottom: ${theme.gridUnit * 4}px;\n            & .ant-tag:last-of-type {\n              margin: 0;\n            }\n          ` },\n  !isLoading && firstQueryResponse && ___EmotionJSX(RowCountLabel, { rowcount: Number(firstQueryResponse.rowcount) || 0, limit: Number(rowLimit) || 0 }),\n  !isLoading && (firstQueryResponse == null ? void 0 : firstQueryResponse.is_cached) && ___EmotionJSX(CachedLabel, { onClick: refreshCachedQuery, cachedTimestamp: firstQueryResponse.cached_dttm }),\n  ___EmotionJSX(Timer, { startTime: chartUpdateStartTime, endTime: chartUpdateEndTime, isRunning: isLoading, status: CHART_STATUS_MAP[chartStatus] })));\n\n\n});","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,KAAP,IAAgBC,UAAhB,QAA6C,OAA7C;AACA,SAASC,GAAT,QAA8C,mBAA9C;AACA,OAAOC,aAAP,MAA0B,sCAA1B;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,KAAP,MAAkB,sBAAlB,C;AAEA,IAAKC,gBAAL;AAAA,WAAKA,gBAAL,EAAqB;EACnBA;EACAA;EACAA;AACD,CAJD,EAAKA,gBAAgB,KAAhBA,gBAAgB,MAArB;AAeA,OAAO,MAAMC,UAAU,gBAAGN,UAAU,CAClC,OASEO,GATF,KAUI,KATF,EACEC,eADF,EAEEC,WAFF,EAGEC,oBAHF,EAIEC,kBAJF,EAKEC,kBALF,EAMEC,QANF,EASE;EACF,MAAMC,SAAS,GAAGL,WAAW,KAAK,SAAlC;EACA,MAAMM,kBAAkB,GAAGP,eAAH,oBAAGA,eAAe,CAAG,CAAH,CAA1C;EACA,OACE,uBAAK,GAAG,EAAED,GAAV;EACE,uBACE,GAAG,EAAE,CAACS,KAAD,KAA0Bf,GAAG;;;8BAGde,KAAK,CAACC,QAAN,GAAiB,CAAC;;;;WAJxC;EAUG,CAACH,SAAD,IAAcC,kBAAd,IACC,cAAC,aAAD,IACE,QAAQ,EAAEG,MAAM,CAACH,kBAAkB,CAACI,QAApB,CAAN,IAAuC,CADnD,EAEE,KAAK,EAAED,MAAM,CAACL,QAAD,CAAN,IAAoB,CAF7B,GAXJ;EAgBG,CAACC,SAAD,KAAcC,kBAAd,oBAAcA,kBAAkB,CAAEK,SAAlC,KACC,cAAC,WAAD,IACE,OAAO,EAAER,kBADX,EAEE,eAAe,EAAEG,kBAAkB,CAACM,WAFtC,GAjBJ;EAsBE,cAAC,KAAD,IACE,SAAS,EAAEX,oBADb,EAEE,OAAO,EAAEC,kBAFX,EAGE,SAAS,EAAEG,SAHb,EAIE,MAAM,EAAET,gBAAgB,CAACI,WAAD,CAJ1B,GAtBF,CADF,CADF;;;AAiCD,CA/CiC,CAA7B","names":["React","forwardRef","css","RowCountLabel","CachedLabel","Timer","CHART_STATUS_MAP","ChartPills","ref","queriesResponse","chartStatus","chartUpdateStartTime","chartUpdateEndTime","refreshCachedQuery","rowLimit","isLoading","firstQueryResponse","theme","gridUnit","Number","rowcount","is_cached","cached_dttm"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/explore/components/ChartPills.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { forwardRef, RefObject } from 'react';\nimport { css, QueryData, SupersetTheme } from '@superset-ui/core';\nimport RowCountLabel from 'src/explore/components/RowCountLabel';\nimport CachedLabel from 'src/components/CachedLabel';\nimport Timer from 'src/components/Timer';\n\nenum CHART_STATUS_MAP {\n  failed = 'danger',\n  loading = 'warning',\n  success = 'success',\n}\n\nexport type ChartPillsProps = {\n  queriesResponse: QueryData[];\n  chartStatus: keyof typeof CHART_STATUS_MAP;\n  chartUpdateStartTime: number;\n  chartUpdateEndTime: number;\n  refreshCachedQuery: () => void;\n  rowLimit: string | number;\n};\n\nexport const ChartPills = forwardRef(\n  (\n    {\n      queriesResponse,\n      chartStatus,\n      chartUpdateStartTime,\n      chartUpdateEndTime,\n      refreshCachedQuery,\n      rowLimit,\n    }: ChartPillsProps,\n    ref: RefObject<HTMLDivElement>,\n  ) => {\n    const isLoading = chartStatus === 'loading';\n    const firstQueryResponse = queriesResponse?.[0];\n    return (\n      <div ref={ref}>\n        <div\n          css={(theme: SupersetTheme) => css`\n            display: flex;\n            justify-content: flex-end;\n            padding-bottom: ${theme.gridUnit * 4}px;\n            & .ant-tag:last-of-type {\n              margin: 0;\n            }\n          `}\n        >\n          {!isLoading && firstQueryResponse && (\n            <RowCountLabel\n              rowcount={Number(firstQueryResponse.rowcount) || 0}\n              limit={Number(rowLimit) || 0}\n            />\n          )}\n          {!isLoading && firstQueryResponse?.is_cached && (\n            <CachedLabel\n              onClick={refreshCachedQuery}\n              cachedTimestamp={firstQueryResponse.cached_dttm}\n            />\n          )}\n          <Timer\n            startTime={chartUpdateStartTime}\n            endTime={chartUpdateEndTime}\n            isRunning={isLoading}\n            status={CHART_STATUS_MAP[chartStatus]}\n          />\n        </div>\n      </div>\n    );\n  },\n);\n"]},"metadata":{},"sourceType":"module"}