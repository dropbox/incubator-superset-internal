{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport memoizeOne from 'memoize-one';\nimport { getChartControlPanelRegistry } from '@superset-ui/core';\nimport { expandControlConfig, isControlPanelSectionConfig } from '@superset-ui/chart-controls';\n/**\n * Find control item from control panel config.\n */\nexport function findControlItem(controlPanelSections, controlKey) {var _controlPanelSections;\n  return (_controlPanelSections = controlPanelSections.\n  filter(isControlPanelSectionConfig).\n  map((section) => section.controlSetRows).\n  flat(2).\n  find((control) => controlKey === control ||\n  control !== null &&\n  typeof control === 'object' &&\n  'name' in control &&\n  control.name === controlKey)) != null ? _controlPanelSections : null;\n}\nconst getMemoizedControlConfig = memoizeOne((controlKey, controlPanelConfig) => {\n  const { controlOverrides = {}, controlPanelSections = [] } = controlPanelConfig;\n  const control = expandControlConfig(findControlItem(controlPanelSections, controlKey), controlOverrides);\n  return control && 'config' in control ? control.config : control;\n});\nexport const getControlConfig = function getControlConfig(controlKey, vizType) {\n  const controlPanelConfig = getChartControlPanelRegistry().get(vizType) || {};\n  return getMemoizedControlConfig(controlKey,\n  // TODO: the ChartControlPanelRegistry is incorrectly typed and needs to\n  // be fixed\n  controlPanelConfig);\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,UAAP,MAAuB,aAAvB;AACA,SAASC,4BAAT,QAA6C,mBAA7C;AACA,SAGEC,mBAHF,EAIEC,2BAJF,QAKO,6BALP;AAOA;;;AAGA,OAAM,SAAUC,eAAV,CACJC,oBADI,EAEJC,UAFI,EAEc;EAElB,gCACED,oBAAoB;EACjBE,MADH,CACUJ,2BADV;EAEGK,GAFH,CAEO,QAAO,KAAIC,OAAO,CAACC,cAF1B;EAGGC,IAHH,CAGQ,CAHR;EAIGC,IAJH,CAKI,QAAO,KACLN,UAAU,KAAKO,OAAf;EACCA,OAAO,KAAK,IAAZ;EACC,OAAOA,OAAP,KAAmB,QADpB;EAEC,UAAUA,OAFX;EAGCA,OAAO,CAACC,IAAR,KAAiBR,UAVzB,CADF,oCAYS,IAZT;AAcD;AAED,MAAMS,wBAAwB,GAAGf,UAAU,CACzC,CAACM,UAAD,EAAaU,kBAAb,KAAuD;EACrD,MAAM,EAAEC,gBAAgB,GAAG,EAArB,EAAyBZ,oBAAoB,GAAG,EAAhD,KACJW,kBADF;EAEA,MAAMH,OAAO,GAAGX,mBAAmB,CACjCE,eAAe,CAACC,oBAAD,EAAuBC,UAAvB,CADkB,EAEjCW,gBAFiC,CAAnC;EAIA,OAAOJ,OAAO,IAAI,YAAYA,OAAvB,GAAiCA,OAAO,CAACK,MAAzC,GAAkDL,OAAzD;AACD,CATwC,CAA3C;AAYA,OAAO,MAAMM,gBAAgB,GAAG,SAASA,gBAAT,CAC9Bb,UAD8B,EAE9Bc,OAF8B,EAEf;EAEf,MAAMJ,kBAAkB,GAAGf,4BAA4B,GAAGoB,GAA/B,CAAmCD,OAAnC,KAA+C,EAA1E;EACA,OAAOL,wBAAwB,CAC7BT,UAD6B;EAE7B;EACA;EACAU,kBAJ6B,CAA/B;AAMD,CAXM","names":["memoizeOne","getChartControlPanelRegistry","expandControlConfig","isControlPanelSectionConfig","findControlItem","controlPanelSections","controlKey","filter","map","section","controlSetRows","flat","find","control","name","getMemoizedControlConfig","controlPanelConfig","controlOverrides","config","getControlConfig","vizType","get"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/explore/controlUtils/getControlConfig.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport memoizeOne from 'memoize-one';\nimport { getChartControlPanelRegistry } from '@superset-ui/core';\nimport {\n  ControlPanelConfig,\n  ControlPanelSectionConfig,\n  expandControlConfig,\n  isControlPanelSectionConfig,\n} from '@superset-ui/chart-controls';\n\n/**\n * Find control item from control panel config.\n */\nexport function findControlItem(\n  controlPanelSections: (ControlPanelSectionConfig | null)[],\n  controlKey: string,\n) {\n  return (\n    controlPanelSections\n      .filter(isControlPanelSectionConfig)\n      .map(section => section.controlSetRows)\n      .flat(2)\n      .find(\n        control =>\n          controlKey === control ||\n          (control !== null &&\n            typeof control === 'object' &&\n            'name' in control &&\n            control.name === controlKey),\n      ) ?? null\n  );\n}\n\nconst getMemoizedControlConfig = memoizeOne(\n  (controlKey, controlPanelConfig: ControlPanelConfig) => {\n    const { controlOverrides = {}, controlPanelSections = [] } =\n      controlPanelConfig;\n    const control = expandControlConfig(\n      findControlItem(controlPanelSections, controlKey),\n      controlOverrides,\n    );\n    return control && 'config' in control ? control.config : control;\n  },\n);\n\nexport const getControlConfig = function getControlConfig(\n  controlKey: string,\n  vizType: string,\n) {\n  const controlPanelConfig = getChartControlPanelRegistry().get(vizType) || {};\n  return getMemoizedControlConfig(\n    controlKey,\n    // TODO: the ChartControlPanelRegistry is incorrectly typed and needs to\n    // be fixed\n    controlPanelConfig as ControlPanelConfig,\n  );\n};\n"]},"metadata":{},"sourceType":"module"}