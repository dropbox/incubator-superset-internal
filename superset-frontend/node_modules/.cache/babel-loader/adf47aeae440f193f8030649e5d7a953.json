{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { FeatureFlag } from '@superset-ui/core';\nimport { isFeatureEnabled } from '../featureFlags';\nimport { getInitialDataMask } from './reducer';\nexport const CLEAR_DATA_MASK_STATE = 'CLEAR_DATA_MASK_STATE';\nexport const UPDATE_DATA_MASK = 'UPDATE_DATA_MASK';\nexport const INIT_DATAMASK = 'INIT_DATAMASK';\nexport const SET_DATA_MASK_FOR_FILTER_CONFIG_COMPLETE = 'SET_DATA_MASK_FOR_FILTER_CONFIG_COMPLETE';\nexport const SET_DATA_MASK_FOR_FILTER_CONFIG_FAIL = 'SET_DATA_MASK_FOR_FILTER_CONFIG_FAIL';\nexport function setDataMaskForFilterConfigComplete(filterConfig, filters) {\n  return {\n    type: SET_DATA_MASK_FOR_FILTER_CONFIG_COMPLETE,\n    filterConfig,\n    filters };\n\n}\nexport function updateDataMask(filterId, dataMask) {\n  // Only apply data mask if one of the relevant features is enabled\n  const isFeatureFlagActive = isFeatureEnabled(FeatureFlag.DASHBOARD_NATIVE_FILTERS) ||\n  isFeatureEnabled(FeatureFlag.DASHBOARD_CROSS_FILTERS);\n  return {\n    type: UPDATE_DATA_MASK,\n    filterId,\n    dataMask: isFeatureFlagActive ? dataMask : {} };\n\n}\nexport function clearDataMask(filterId) {\n  return updateDataMask(filterId, getInitialDataMask(filterId));\n}\nexport function clearDataMaskState() {\n  return {\n    type: CLEAR_DATA_MASK_STATE };\n\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,SAEEA,WAFF,QAKO,mBALP;AAMA,SAASC,gBAAT,QAAiC,iBAAjC;AACA,SAASC,kBAAT,QAAmC,WAAnC;AAEA,OAAO,MAAMC,qBAAqB,GAAG,uBAA9B;AAKP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AAOP,OAAO,MAAMC,aAAa,GAAG,eAAtB;AAMP,OAAO,MAAMC,wCAAwC,GACnD,0CADK;AASP,OAAO,MAAMC,oCAAoC,GAC/C,sCADK;AAOP,OAAM,SAAUC,kCAAV,CACJC,YADI,EAEJC,OAFI,EAEa;EAEjB,OAAO;IACLC,IAAI,EAAEL,wCADD;IAELG,YAFK;IAGLC,OAHK,EAAP;;AAKD;AACD,OAAM,SAAUE,cAAV,CACJC,QADI,EAEJC,QAFI,EAEc;EAElB;EACA,MAAMC,mBAAmB,GACvBd,gBAAgB,CAACD,WAAW,CAACgB,wBAAb,CAAhB;EACAf,gBAAgB,CAACD,WAAW,CAACiB,uBAAb,CAFlB;EAGA,OAAO;IACLN,IAAI,EAAEP,gBADD;IAELS,QAFK;IAGLC,QAAQ,EAAEC,mBAAmB,GAAGD,QAAH,GAAc,EAHtC,EAAP;;AAKD;AAED,OAAM,SAAUI,aAAV,CAAwBL,QAAxB,EAAiD;EACrD,OAAOD,cAAc,CAACC,QAAD,EAAWX,kBAAkB,CAACW,QAAD,CAA7B,CAArB;AACD;AAED,OAAM,SAAUM,kBAAV,GAA4B;EAChC,OAAO;IACLR,IAAI,EAAER,qBADD,EAAP;;AAGD","names":["FeatureFlag","isFeatureEnabled","getInitialDataMask","CLEAR_DATA_MASK_STATE","UPDATE_DATA_MASK","INIT_DATAMASK","SET_DATA_MASK_FOR_FILTER_CONFIG_COMPLETE","SET_DATA_MASK_FOR_FILTER_CONFIG_FAIL","setDataMaskForFilterConfigComplete","filterConfig","filters","type","updateDataMask","filterId","dataMask","isFeatureFlagActive","DASHBOARD_NATIVE_FILTERS","DASHBOARD_CROSS_FILTERS","clearDataMask","clearDataMaskState"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dataMask/actions.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  DataMask,\n  FeatureFlag,\n  FilterConfiguration,\n  Filters,\n} from '@superset-ui/core';\nimport { isFeatureEnabled } from '../featureFlags';\nimport { getInitialDataMask } from './reducer';\n\nexport const CLEAR_DATA_MASK_STATE = 'CLEAR_DATA_MASK_STATE';\nexport interface ClearDataMaskState {\n  type: typeof CLEAR_DATA_MASK_STATE;\n}\n\nexport const UPDATE_DATA_MASK = 'UPDATE_DATA_MASK';\nexport interface UpdateDataMask {\n  type: typeof UPDATE_DATA_MASK;\n  filterId: string | number;\n  dataMask: DataMask;\n}\n\nexport const INIT_DATAMASK = 'INIT_DATAMASK';\nexport interface INITDATAMASK {\n  type: typeof INIT_DATAMASK;\n  dataMask: DataMask;\n}\n\nexport const SET_DATA_MASK_FOR_FILTER_CONFIG_COMPLETE =\n  'SET_DATA_MASK_FOR_FILTER_CONFIG_COMPLETE';\n\nexport interface SetDataMaskForFilterConfigComplete {\n  type: typeof SET_DATA_MASK_FOR_FILTER_CONFIG_COMPLETE;\n  filterConfig: FilterConfiguration;\n  filters?: Filters;\n}\n\nexport const SET_DATA_MASK_FOR_FILTER_CONFIG_FAIL =\n  'SET_DATA_MASK_FOR_FILTER_CONFIG_FAIL';\n\nexport interface SetDataMaskForFilterConfigFail {\n  type: typeof SET_DATA_MASK_FOR_FILTER_CONFIG_FAIL;\n  filterConfig: FilterConfiguration;\n}\nexport function setDataMaskForFilterConfigComplete(\n  filterConfig: FilterConfiguration,\n  filters?: Filters,\n): SetDataMaskForFilterConfigComplete {\n  return {\n    type: SET_DATA_MASK_FOR_FILTER_CONFIG_COMPLETE,\n    filterConfig,\n    filters,\n  };\n}\nexport function updateDataMask(\n  filterId: string | number,\n  dataMask: DataMask,\n): UpdateDataMask {\n  // Only apply data mask if one of the relevant features is enabled\n  const isFeatureFlagActive =\n    isFeatureEnabled(FeatureFlag.DASHBOARD_NATIVE_FILTERS) ||\n    isFeatureEnabled(FeatureFlag.DASHBOARD_CROSS_FILTERS);\n  return {\n    type: UPDATE_DATA_MASK,\n    filterId,\n    dataMask: isFeatureFlagActive ? dataMask : {},\n  };\n}\n\nexport function clearDataMask(filterId: string | number) {\n  return updateDataMask(filterId, getInitialDataMask(filterId));\n}\n\nexport function clearDataMaskState(): ClearDataMaskState {\n  return {\n    type: CLEAR_DATA_MASK_STATE,\n  };\n}\n\nexport type AnyDataMaskAction =\n  | ClearDataMaskState\n  | UpdateDataMask\n  | SetDataMaskForFilterConfigFail\n  | SetDataMaskForFilterConfigComplete;\n"]},"metadata":{},"sourceType":"module"}