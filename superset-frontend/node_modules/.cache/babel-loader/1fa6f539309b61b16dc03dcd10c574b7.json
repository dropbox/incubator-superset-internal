{"ast":null,"code":"import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { t } from '@superset-ui/core';\nimport PropTypes from 'prop-types';\nimport { PivotData, flatKey } from './utilities';\nimport { Styles } from './Styles';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst parseLabel = (value) => {\n  if (typeof value === 'number' || typeof value === 'string') {\n    return value;\n  }\n  return String(value);\n};\n\nfunction displayHeaderCell(\nneedToggle,\nArrowIcon,\nonArrowClick,\nvalue,\nnamesMapping)\n{\n  const name = namesMapping[value] || value;\n  return needToggle ?\n  ___EmotionJSX(\"span\", { className: \"toggle-wrapper\" },\n  ___EmotionJSX(\"span\", {\n    role: \"button\",\n    tabIndex: \"0\",\n    className: \"toggle\",\n    onClick: onArrowClick },\n\n  ArrowIcon),\n\n  ___EmotionJSX(\"span\", { className: \"toggle-val\" }, parseLabel(name))) :\n\n\n  parseLabel(name);\n\n}\n\nexport class TableRenderer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // We need state to record which entries are collapsed and which aren't.\n    // This is an object with flat-keys indicating if the corresponding rows\n    // should be collapsed.\n    this.state = { collapsedRows: {}, collapsedCols: {} };\n\n    this.clickHeaderHandler = this.clickHeaderHandler.bind(this);\n    this.clickHandler = this.clickHandler.bind(this);\n  }\n\n  getBasePivotSettings() {\n    // One-time extraction of pivot settings that we'll use throughout the render.\n\n    const { props } = this;\n    const colAttrs = props.cols;\n    const rowAttrs = props.rows;\n\n    const tableOptions = {\n      rowTotals: true,\n      colTotals: true,\n      ...props.tableOptions };\n\n    const rowTotals = tableOptions.rowTotals || colAttrs.length === 0;\n    const colTotals = tableOptions.colTotals || rowAttrs.length === 0;\n\n    const namesMapping = props.namesMapping || {};\n    const subtotalOptions = {\n      arrowCollapsed: '\\u25B2',\n      arrowExpanded: '\\u25BC',\n      ...props.subtotalOptions };\n\n\n    const colSubtotalDisplay = {\n      displayOnTop: false,\n      enabled: rowTotals,\n      hideOnExpand: false,\n      ...subtotalOptions.colSubtotalDisplay };\n\n\n    const rowSubtotalDisplay = {\n      displayOnTop: false,\n      enabled: colTotals,\n      hideOnExpand: false,\n      ...subtotalOptions.rowSubtotalDisplay };\n\n\n    const pivotData = new PivotData(props, {\n      rowEnabled: rowSubtotalDisplay.enabled,\n      colEnabled: colSubtotalDisplay.enabled,\n      rowPartialOnTop: rowSubtotalDisplay.displayOnTop,\n      colPartialOnTop: colSubtotalDisplay.displayOnTop });\n\n    const rowKeys = pivotData.getRowKeys();\n    const colKeys = pivotData.getColKeys();\n\n    // Also pre-calculate all the callbacks for cells, etc... This is nice to have to\n    // avoid re-calculations of the call-backs on cell expansions, etc...\n    const cellCallbacks = {};\n    const rowTotalCallbacks = {};\n    const colTotalCallbacks = {};\n    let grandTotalCallback = null;\n    if (tableOptions.clickCallback) {\n      rowKeys.forEach((rowKey) => {\n        const flatRowKey = flatKey(rowKey);\n        if (!(flatRowKey in cellCallbacks)) {\n          cellCallbacks[flatRowKey] = {};\n        }\n        colKeys.forEach((colKey) => {\n          cellCallbacks[flatRowKey][flatKey(colKey)] = this.clickHandler(\n          pivotData,\n          rowKey,\n          colKey);\n\n        });\n      });\n\n      // Add in totals as well.\n      if (rowTotals) {\n        rowKeys.forEach((rowKey) => {\n          rowTotalCallbacks[flatKey(rowKey)] = this.clickHandler(\n          pivotData,\n          rowKey,\n          []);\n\n        });\n      }\n      if (colTotals) {\n        colKeys.forEach((colKey) => {\n          colTotalCallbacks[flatKey(colKey)] = this.clickHandler(\n          pivotData,\n          [],\n          colKey);\n\n        });\n      }\n      if (rowTotals && colTotals) {\n        grandTotalCallback = this.clickHandler(pivotData, [], []);\n      }\n    }\n\n    return {\n      pivotData,\n      colAttrs,\n      rowAttrs,\n      colKeys,\n      rowKeys,\n      rowTotals,\n      colTotals,\n      arrowCollapsed: subtotalOptions.arrowCollapsed,\n      arrowExpanded: subtotalOptions.arrowExpanded,\n      colSubtotalDisplay,\n      rowSubtotalDisplay,\n      cellCallbacks,\n      rowTotalCallbacks,\n      colTotalCallbacks,\n      grandTotalCallback,\n      namesMapping };\n\n  }\n\n  clickHandler(pivotData, rowValues, colValues) {\n    const colAttrs = this.props.cols;\n    const rowAttrs = this.props.rows;\n    const value = pivotData.getAggregator(rowValues, colValues).value();\n    const filters = {};\n    const colLimit = Math.min(colAttrs.length, colValues.length);\n    for (let i = 0; i < colLimit; i += 1) {\n      const attr = colAttrs[i];\n      if (colValues[i] !== null) {\n        filters[attr] = colValues[i];\n      }\n    }\n    const rowLimit = Math.min(rowAttrs.length, rowValues.length);\n    for (let i = 0; i < rowLimit; i += 1) {\n      const attr = rowAttrs[i];\n      if (rowValues[i] !== null) {\n        filters[attr] = rowValues[i];\n      }\n    }\n    return (e) =>\n    this.props.tableOptions.clickCallback(e, value, filters, pivotData);\n  }\n\n  clickHeaderHandler(\n  pivotData,\n  values,\n  attrs,\n  attrIdx,\n  callback,\n  isSubtotal,\n  isGrandTotal)\n  {if (isSubtotal === void 0) {isSubtotal = false;}if (isGrandTotal === void 0) {isGrandTotal = false;}\n    const filters = {};\n    for (let i = 0; i <= attrIdx; i += 1) {\n      const attr = attrs[i];\n      filters[attr] = values[i];\n    }\n    return (e) =>\n    callback(\n    e,\n    values[attrIdx],\n    filters,\n    pivotData,\n    isSubtotal,\n    isGrandTotal);\n\n  }\n\n  collapseAttr(rowOrCol, attrIdx, allKeys) {\n    return (e) => {\n      // Collapse an entire attribute.\n      e.stopPropagation();\n      const keyLen = attrIdx + 1;\n      const collapsed = allKeys.filter((k) => k.length === keyLen).map(flatKey);\n\n      const updates = {};\n      collapsed.forEach((k) => {\n        updates[k] = true;\n      });\n\n      if (rowOrCol) {\n        this.setState((state) => ({\n          collapsedRows: { ...state.collapsedRows, ...updates } }));\n\n      } else {\n        this.setState((state) => ({\n          collapsedCols: { ...state.collapsedCols, ...updates } }));\n\n      }\n    };\n  }\n\n  expandAttr(rowOrCol, attrIdx, allKeys) {\n    return (e) => {\n      // Expand an entire attribute. This implicitly implies expanding all of the\n      // parents as well. It's a bit inefficient but ah well...\n      e.stopPropagation();\n      const updates = {};\n      allKeys.forEach((k) => {\n        for (let i = 0; i <= attrIdx; i += 1) {\n          updates[flatKey(k.slice(0, i + 1))] = false;\n        }\n      });\n\n      if (rowOrCol) {\n        this.setState((state) => ({\n          collapsedRows: { ...state.collapsedRows, ...updates } }));\n\n      } else {\n        this.setState((state) => ({\n          collapsedCols: { ...state.collapsedCols, ...updates } }));\n\n      }\n    };\n  }\n\n  toggleRowKey(flatRowKey) {\n    return (e) => {\n      e.stopPropagation();\n      this.setState((state) => ({\n        collapsedRows: {\n          ...state.collapsedRows,\n          [flatRowKey]: !state.collapsedRows[flatRowKey] } }));\n\n\n    };\n  }\n\n  toggleColKey(flatColKey) {\n    return (e) => {\n      e.stopPropagation();\n      this.setState((state) => ({\n        collapsedCols: {\n          ...state.collapsedCols,\n          [flatColKey]: !state.collapsedCols[flatColKey] } }));\n\n\n    };\n  }\n\n  calcAttrSpans(attrArr, numAttrs) {\n    // Given an array of attribute values (i.e. each element is another array with\n    // the value at every level), compute the spans for every attribute value at\n    // every level. The return value is a nested array of the same shape. It has\n    // -1's for repeated values and the span number otherwise.\n\n    const spans = [];\n    // Index of the last new value\n    const li = Array(numAttrs).map(() => 0);\n    let lv = Array(numAttrs).map(() => null);\n    for (let i = 0; i < attrArr.length; i += 1) {\n      // Keep increasing span values as long as the last keys are the same. For\n      // the rest, record spans of 1. Update the indices too.\n      const cv = attrArr[i];\n      const ent = [];\n      let depth = 0;\n      const limit = Math.min(lv.length, cv.length);\n      while (depth < limit && lv[depth] === cv[depth]) {\n        ent.push(-1);\n        spans[li[depth]][depth] += 1;\n        depth += 1;\n      }\n      while (depth < cv.length) {\n        li[depth] = i;\n        ent.push(1);\n        depth += 1;\n      }\n      spans.push(ent);\n      lv = cv;\n    }\n    return spans;\n  }\n\n  renderColHeaderRow(attrName, attrIdx, pivotSettings) {\n    // Render a single row in the column header at the top of the pivot table.\n\n    const {\n      rowAttrs,\n      colAttrs,\n      colKeys,\n      visibleColKeys,\n      colAttrSpans,\n      rowTotals,\n      arrowExpanded,\n      arrowCollapsed,\n      colSubtotalDisplay,\n      maxColVisible,\n      pivotData,\n      namesMapping } =\n    pivotSettings;\n    const {\n      highlightHeaderCellsOnHover,\n      omittedHighlightHeaderGroups = [],\n      highlightedHeaderCells,\n      dateFormatters } =\n    this.props.tableOptions;\n\n    const spaceCell =\n    attrIdx === 0 && rowAttrs.length !== 0 ?\n    ___EmotionJSX(\"th\", {\n      key: \"padding\",\n      colSpan: rowAttrs.length,\n      rowSpan: colAttrs.length,\n      \"aria-hidden\": \"true\" }) :\n\n    null;\n\n    const needToggle =\n    colSubtotalDisplay.enabled && attrIdx !== colAttrs.length - 1;\n    let arrowClickHandle = null;\n    let subArrow = null;\n    if (needToggle) {\n      arrowClickHandle =\n      attrIdx + 1 < maxColVisible ?\n      this.collapseAttr(false, attrIdx, colKeys) :\n      this.expandAttr(false, attrIdx, colKeys);\n      subArrow = attrIdx + 1 < maxColVisible ? arrowExpanded : arrowCollapsed;\n    }\n    const attrNameCell =\n    ___EmotionJSX(\"th\", { key: \"label\", className: \"pvtAxisLabel\" },\n    displayHeaderCell(\n    needToggle,\n    subArrow,\n    arrowClickHandle,\n    attrName,\n    namesMapping));\n\n\n\n\n    const attrValueCells = [];\n    const rowIncrSpan = rowAttrs.length !== 0 ? 1 : 0;\n    // Iterate through columns. Jump over duplicate values.\n    let i = 0;\n    while (i < visibleColKeys.length) {\n      let handleContextMenu;\n      const colKey = visibleColKeys[i];\n      const colSpan = attrIdx < colKey.length ? colAttrSpans[i][attrIdx] : 1;\n      let colLabelClass = 'pvtColLabel';\n      if (attrIdx < colKey.length) {var _context;\n        if (!_includesInstanceProperty(omittedHighlightHeaderGroups).call(omittedHighlightHeaderGroups, colAttrs[attrIdx])) {\n          if (highlightHeaderCellsOnHover) {\n            colLabelClass += ' hoverable';\n          }\n          handleContextMenu = (e) =>\n          this.props.onContextMenu(e, colKey, undefined, {\n            [attrName]: colKey[attrIdx] });\n\n        }\n        if (\n        highlightedHeaderCells &&\n        Array.isArray(highlightedHeaderCells[colAttrs[attrIdx]]) &&\n        _includesInstanceProperty(_context = highlightedHeaderCells[colAttrs[attrIdx]]).call(_context, colKey[attrIdx]))\n        {\n          colLabelClass += ' active';\n        }\n\n        const rowSpan = 1 + (attrIdx === colAttrs.length - 1 ? rowIncrSpan : 0);\n        const flatColKey = flatKey(colKey.slice(0, attrIdx + 1));\n        const onArrowClick = needToggle ? this.toggleColKey(flatColKey) : null;\n\n        const headerCellFormattedValue =\n        dateFormatters &&\n        dateFormatters[attrName] &&\n        typeof dateFormatters[attrName] === 'function' ?\n        dateFormatters[attrName](colKey[attrIdx]) :\n        colKey[attrIdx];\n        attrValueCells.push(\n        ___EmotionJSX(\"th\", {\n          className: colLabelClass,\n          key: `colKey-${flatColKey}`,\n          colSpan: colSpan,\n          rowSpan: rowSpan,\n          onClick: this.clickHeaderHandler(\n          pivotData,\n          colKey,\n          this.props.cols,\n          attrIdx,\n          this.props.tableOptions.clickColumnHeaderCallback),\n\n          onContextMenu: handleContextMenu },\n\n        displayHeaderCell(\n        needToggle,\n        this.state.collapsedCols[flatColKey] ?\n        arrowCollapsed :\n        arrowExpanded,\n        onArrowClick,\n        headerCellFormattedValue,\n        namesMapping)));\n\n\n\n      } else if (attrIdx === colKey.length) {\n        const rowSpan = colAttrs.length - colKey.length + rowIncrSpan;\n        attrValueCells.push(\n        ___EmotionJSX(\"th\", {\n          className: `${colLabelClass} pvtSubtotalLabel`,\n          key: `colKeyBuffer-${flatKey(colKey)}`,\n          colSpan: colSpan,\n          rowSpan: rowSpan,\n          onClick: this.clickHeaderHandler(\n          pivotData,\n          colKey,\n          this.props.cols,\n          attrIdx,\n          this.props.tableOptions.clickColumnHeaderCallback,\n          true) },\n\n\n        t('Subtotal')));\n\n\n      }\n      // The next colSpan columns will have the same value anyway...\n      i += colSpan;\n    }\n\n    const totalCell =\n    attrIdx === 0 && rowTotals ?\n    ___EmotionJSX(\"th\", {\n      key: \"total\",\n      className: \"pvtTotalLabel\",\n      rowSpan: colAttrs.length + Math.min(rowAttrs.length, 1),\n      onClick: this.clickHeaderHandler(\n      pivotData,\n      [],\n      this.props.cols,\n      attrIdx,\n      this.props.tableOptions.clickColumnHeaderCallback,\n      false,\n      true) },\n\n\n    t('Total (%(aggregatorName)s)', {\n      aggregatorName: t(this.props.aggregatorName) })) :\n\n\n    null;\n\n    const cells = [spaceCell, attrNameCell, ...attrValueCells, totalCell];\n    return ___EmotionJSX(\"tr\", { key: `colAttr-${attrIdx}` }, cells);\n  }\n\n  renderRowHeaderRow(pivotSettings) {\n    // Render just the attribute names of the rows (the actual attribute values\n    // will show up in the individual rows).\n\n    const {\n      rowAttrs,\n      colAttrs,\n      rowKeys,\n      arrowCollapsed,\n      arrowExpanded,\n      rowSubtotalDisplay,\n      maxRowVisible,\n      pivotData,\n      namesMapping } =\n    pivotSettings;\n    return (\n      ___EmotionJSX(\"tr\", { key: \"rowHdr\" },\n      rowAttrs.map((r, i) => {\n        const needLabelToggle =\n        rowSubtotalDisplay.enabled && i !== rowAttrs.length - 1;\n        let arrowClickHandle = null;\n        let subArrow = null;\n        if (needLabelToggle) {\n          arrowClickHandle =\n          i + 1 < maxRowVisible ?\n          this.collapseAttr(true, i, rowKeys) :\n          this.expandAttr(true, i, rowKeys);\n          subArrow = i + 1 < maxRowVisible ? arrowExpanded : arrowCollapsed;\n        }\n        return (\n          ___EmotionJSX(\"th\", { className: \"pvtAxisLabel\", key: `rowAttr-${i}` },\n          displayHeaderCell(\n          needLabelToggle,\n          subArrow,\n          arrowClickHandle,\n          r,\n          namesMapping)));\n\n\n\n      }),\n      ___EmotionJSX(\"th\", {\n        className: \"pvtTotalLabel\",\n        key: \"padding\",\n        onClick: this.clickHeaderHandler(\n        pivotData,\n        [],\n        this.props.rows,\n        0,\n        this.props.tableOptions.clickRowHeaderCallback,\n        false,\n        true) },\n\n\n      colAttrs.length === 0 ?\n      t('Total (%(aggregatorName)s)', {\n        aggregatorName: t(this.props.aggregatorName) }) :\n\n      null)));\n\n\n\n  }\n\n  renderTableRow(rowKey, rowIdx, pivotSettings) {\n    // Render a single row in the pivot table.\n\n    const {\n      rowAttrs,\n      colAttrs,\n      rowAttrSpans,\n      visibleColKeys,\n      pivotData,\n      rowTotals,\n      rowSubtotalDisplay,\n      arrowExpanded,\n      arrowCollapsed,\n      cellCallbacks,\n      rowTotalCallbacks,\n      namesMapping } =\n    pivotSettings;\n\n    const {\n      highlightHeaderCellsOnHover,\n      omittedHighlightHeaderGroups = [],\n      highlightedHeaderCells,\n      cellColorFormatters,\n      dateFormatters } =\n    this.props.tableOptions;\n    const flatRowKey = flatKey(rowKey);\n\n    const colIncrSpan = colAttrs.length !== 0 ? 1 : 0;\n    const attrValueCells = rowKey.map((r, i) => {var _context2;\n      let handleContextMenu;\n      let valueCellClassName = 'pvtRowLabel';\n      if (!_includesInstanceProperty(omittedHighlightHeaderGroups).call(omittedHighlightHeaderGroups, rowAttrs[i])) {\n        if (highlightHeaderCellsOnHover) {\n          valueCellClassName += ' hoverable';\n        }\n        handleContextMenu = (e) =>\n        this.props.onContextMenu(e, undefined, rowKey, {\n          [rowAttrs[i]]: r });\n\n      }\n      if (\n      highlightedHeaderCells &&\n      Array.isArray(highlightedHeaderCells[rowAttrs[i]]) &&\n      _includesInstanceProperty(_context2 = highlightedHeaderCells[rowAttrs[i]]).call(_context2, r))\n      {\n        valueCellClassName += ' active';\n      }\n      const rowSpan = rowAttrSpans[rowIdx][i];\n      if (rowSpan > 0) {\n        const flatRowKey = flatKey(rowKey.slice(0, i + 1));\n        const colSpan = 1 + (i === rowAttrs.length - 1 ? colIncrSpan : 0);\n        const needRowToggle =\n        rowSubtotalDisplay.enabled && i !== rowAttrs.length - 1;\n        const onArrowClick = needRowToggle ?\n        this.toggleRowKey(flatRowKey) :\n        null;\n\n        const headerCellFormattedValue =\n        dateFormatters && dateFormatters[rowAttrs[i]] ?\n        dateFormatters[rowAttrs[i]](r) :\n        r;\n        return (\n          ___EmotionJSX(\"th\", {\n            key: `rowKeyLabel-${i}`,\n            className: valueCellClassName,\n            rowSpan: rowSpan,\n            colSpan: colSpan,\n            onClick: this.clickHeaderHandler(\n            pivotData,\n            rowKey,\n            this.props.rows,\n            i,\n            this.props.tableOptions.clickRowHeaderCallback),\n\n            onContextMenu: handleContextMenu },\n\n          displayHeaderCell(\n          needRowToggle,\n          this.state.collapsedRows[flatRowKey] ?\n          arrowCollapsed :\n          arrowExpanded,\n          onArrowClick,\n          headerCellFormattedValue,\n          namesMapping)));\n\n\n\n      }\n      return null;\n    });\n\n    const attrValuePaddingCell =\n    rowKey.length < rowAttrs.length ?\n    ___EmotionJSX(\"th\", {\n      className: \"pvtRowLabel pvtSubtotalLabel\",\n      key: \"rowKeyBuffer\",\n      colSpan: rowAttrs.length - rowKey.length + colIncrSpan,\n      rowSpan: 1,\n      onClick: this.clickHeaderHandler(\n      pivotData,\n      rowKey,\n      this.props.rows,\n      rowKey.length,\n      this.props.tableOptions.clickRowHeaderCallback,\n      true) },\n\n\n    t('Subtotal')) :\n\n    null;\n\n    const rowClickHandlers = cellCallbacks[flatRowKey] || {};\n    const valueCells = visibleColKeys.map((colKey) => {\n      const flatColKey = flatKey(colKey);\n      const agg = pivotData.getAggregator(rowKey, colKey);\n      const aggValue = agg.value();\n\n      const keys = [...rowKey, ...colKey];\n      let backgroundColor;\n      if (cellColorFormatters) {\n        Object.values(cellColorFormatters).forEach((cellColorFormatter) => {\n          if (Array.isArray(cellColorFormatter)) {\n            keys.forEach((key) => {\n              if (backgroundColor) {\n                return;\n              }\n              cellColorFormatter.\n              filter((formatter) => formatter.column === key).\n              forEach((formatter) => {\n                const formatterResult = formatter.getColorFromValue(aggValue);\n                if (formatterResult) {\n                  backgroundColor = formatterResult;\n                }\n              });\n            });\n          }\n        });\n      }\n\n      const style = agg.isSubtotal ?\n      { fontWeight: 'bold' } :\n      { backgroundColor };\n\n      return (\n        ___EmotionJSX(\"td\", {\n          role: \"gridcell\",\n          className: \"pvtVal\",\n          key: `pvtVal-${flatColKey}`,\n          onClick: rowClickHandlers[flatColKey],\n          onContextMenu: (e) => this.props.onContextMenu(e, colKey, rowKey),\n          style: style },\n\n        agg.format(aggValue)));\n\n\n    });\n\n    let totalCell = null;\n    if (rowTotals) {\n      const agg = pivotData.getAggregator(rowKey, []);\n      const aggValue = agg.value();\n      totalCell =\n      ___EmotionJSX(\"td\", {\n        role: \"gridcell\",\n        key: \"total\",\n        className: \"pvtTotal\",\n        onClick: rowTotalCallbacks[flatRowKey],\n        onContextMenu: (e) => this.props.onContextMenu(e, undefined, rowKey) },\n\n      agg.format(aggValue));\n\n\n    }\n\n    const rowCells = [\n    ...attrValueCells,\n    attrValuePaddingCell,\n    ...valueCells,\n    totalCell];\n\n\n    return ___EmotionJSX(\"tr\", { key: `keyRow-${flatRowKey}` }, rowCells);\n  }\n\n  renderTotalsRow(pivotSettings) {\n    // Render the final totals rows that has the totals for all the columns.\n\n    const {\n      rowAttrs,\n      colAttrs,\n      visibleColKeys,\n      rowTotals,\n      pivotData,\n      colTotalCallbacks,\n      grandTotalCallback } =\n    pivotSettings;\n\n    const totalLabelCell =\n    ___EmotionJSX(\"th\", {\n      key: \"label\",\n      className: \"pvtTotalLabel pvtRowTotalLabel\",\n      colSpan: rowAttrs.length + Math.min(colAttrs.length, 1),\n      onClick: this.clickHeaderHandler(\n      pivotData,\n      [],\n      this.props.rows,\n      0,\n      this.props.tableOptions.clickRowHeaderCallback,\n      false,\n      true) },\n\n\n    t('Total (%(aggregatorName)s)', {\n      aggregatorName: t(this.props.aggregatorName) }));\n\n\n\n\n    const totalValueCells = visibleColKeys.map((colKey) => {\n      const flatColKey = flatKey(colKey);\n      const agg = pivotData.getAggregator([], colKey);\n      const aggValue = agg.value();\n\n      return (\n        ___EmotionJSX(\"td\", {\n          role: \"gridcell\",\n          className: \"pvtTotal pvtRowTotal\",\n          key: `total-${flatColKey}`,\n          onClick: colTotalCallbacks[flatColKey],\n          onContextMenu: (e) => this.props.onContextMenu(e, colKey, undefined),\n          style: { padding: '5px' } },\n\n        agg.format(aggValue)));\n\n\n    });\n\n    let grandTotalCell = null;\n    if (rowTotals) {\n      const agg = pivotData.getAggregator([], []);\n      const aggValue = agg.value();\n      grandTotalCell =\n      ___EmotionJSX(\"td\", {\n        role: \"gridcell\",\n        key: \"total\",\n        className: \"pvtGrandTotal pvtRowTotal\",\n        onClick: grandTotalCallback,\n        onContextMenu: (e) => this.props.onContextMenu(e, undefined, undefined) },\n\n      agg.format(aggValue));\n\n\n    }\n\n    const totalCells = [totalLabelCell, ...totalValueCells, grandTotalCell];\n\n    return (\n      ___EmotionJSX(\"tr\", { key: \"total\", className: \"pvtRowTotals\" },\n      totalCells));\n\n\n  }\n\n  visibleKeys(keys, collapsed, numAttrs, subtotalDisplay) {\n    return keys.filter(\n    (key) =>\n    // Is the key hidden by one of its parents?\n    !key.some((k, j) => collapsed[flatKey(key.slice(0, j))]) && (\n    // Leaf key.\n    key.length === numAttrs ||\n    // Children hidden. Must show total.\n    flatKey(key) in collapsed ||\n    // Don't hide totals.\n    !subtotalDisplay.hideOnExpand));\n\n  }\n\n  isDashboardEditMode() {\n    return document.contains(document.querySelector('.dashboard--editing'));\n  }\n\n  render() {\n    if (this.cachedProps !== this.props) {\n      this.cachedProps = this.props;\n      this.cachedBasePivotSettings = this.getBasePivotSettings();\n    }\n    const {\n      colAttrs,\n      rowAttrs,\n      rowKeys,\n      colKeys,\n      colTotals,\n      rowSubtotalDisplay,\n      colSubtotalDisplay } =\n    this.cachedBasePivotSettings;\n\n    // Need to account for exclusions to compute the effective row\n    // and column keys.\n    const visibleRowKeys = this.visibleKeys(\n    rowKeys,\n    this.state.collapsedRows,\n    rowAttrs.length,\n    rowSubtotalDisplay);\n\n    const visibleColKeys = this.visibleKeys(\n    colKeys,\n    this.state.collapsedCols,\n    colAttrs.length,\n    colSubtotalDisplay);\n\n\n    const pivotSettings = {\n      visibleRowKeys,\n      maxRowVisible: Math.max(...visibleRowKeys.map((k) => k.length)),\n      visibleColKeys,\n      maxColVisible: Math.max(...visibleColKeys.map((k) => k.length)),\n      rowAttrSpans: this.calcAttrSpans(visibleRowKeys, rowAttrs.length),\n      colAttrSpans: this.calcAttrSpans(visibleColKeys, colAttrs.length),\n      ...this.cachedBasePivotSettings };\n\n\n    return (\n      ___EmotionJSX(Styles, { isDashboardEditMode: this.isDashboardEditMode() },\n      ___EmotionJSX(\"table\", { className: \"pvtTable\", role: \"grid\" },\n      ___EmotionJSX(\"thead\", null,\n      colAttrs.map((c, j) =>\n      this.renderColHeaderRow(c, j, pivotSettings)),\n\n      rowAttrs.length !== 0 && this.renderRowHeaderRow(pivotSettings)),\n\n      ___EmotionJSX(\"tbody\", null,\n      visibleRowKeys.map((r, i) =>\n      this.renderTableRow(r, i, pivotSettings)),\n\n      colTotals && this.renderTotalsRow(pivotSettings)))));\n\n\n\n\n  }}\n\n\nTableRenderer.propTypes = {\n  ...PivotData.propTypes,\n  tableOptions: PropTypes.object,\n  onContextMenu: PropTypes.func };\n\nTableRenderer.defaultProps = { ...PivotData.defaultProps, tableOptions: {} };","map":{"version":3,"names":["React","t","PropTypes","PivotData","flatKey","Styles","parseLabel","value","String","displayHeaderCell","needToggle","ArrowIcon","onArrowClick","namesMapping","name","TableRenderer","Component","constructor","props","state","collapsedRows","collapsedCols","clickHeaderHandler","bind","clickHandler","getBasePivotSettings","colAttrs","cols","rowAttrs","rows","tableOptions","rowTotals","colTotals","length","subtotalOptions","arrowCollapsed","arrowExpanded","colSubtotalDisplay","displayOnTop","enabled","hideOnExpand","rowSubtotalDisplay","pivotData","rowEnabled","colEnabled","rowPartialOnTop","colPartialOnTop","rowKeys","getRowKeys","colKeys","getColKeys","cellCallbacks","rowTotalCallbacks","colTotalCallbacks","grandTotalCallback","clickCallback","forEach","rowKey","flatRowKey","colKey","rowValues","colValues","getAggregator","filters","colLimit","Math","min","i","attr","rowLimit","e","values","attrs","attrIdx","callback","isSubtotal","isGrandTotal","collapseAttr","rowOrCol","allKeys","stopPropagation","keyLen","collapsed","filter","k","map","updates","setState","expandAttr","slice","toggleRowKey","toggleColKey","flatColKey","calcAttrSpans","attrArr","numAttrs","spans","li","Array","lv","cv","ent","depth","limit","push","renderColHeaderRow","attrName","pivotSettings","visibleColKeys","colAttrSpans","maxColVisible","highlightHeaderCellsOnHover","omittedHighlightHeaderGroups","highlightedHeaderCells","dateFormatters","spaceCell","arrowClickHandle","subArrow","attrNameCell","attrValueCells","rowIncrSpan","handleContextMenu","colSpan","colLabelClass","onContextMenu","undefined","isArray","rowSpan","headerCellFormattedValue","clickColumnHeaderCallback","totalCell","aggregatorName","cells","renderRowHeaderRow","maxRowVisible","r","needLabelToggle","clickRowHeaderCallback","renderTableRow","rowIdx","rowAttrSpans","cellColorFormatters","colIncrSpan","valueCellClassName","needRowToggle","attrValuePaddingCell","rowClickHandlers","valueCells","agg","aggValue","keys","backgroundColor","Object","cellColorFormatter","key","formatter","column","formatterResult","getColorFromValue","style","fontWeight","format","rowCells","renderTotalsRow","totalLabelCell","totalValueCells","padding","grandTotalCell","totalCells","visibleKeys","subtotalDisplay","some","j","isDashboardEditMode","document","contains","querySelector","render","cachedProps","cachedBasePivotSettings","visibleRowKeys","max","c","propTypes","object","func","defaultProps"],"sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/TableRenderers.jsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { t } from '@superset-ui/core';\nimport PropTypes from 'prop-types';\nimport { PivotData, flatKey } from './utilities';\nimport { Styles } from './Styles';\n\nconst parseLabel = value => {\n  if (typeof value === 'number' || typeof value === 'string') {\n    return value;\n  }\n  return String(value);\n};\n\nfunction displayHeaderCell(\n  needToggle,\n  ArrowIcon,\n  onArrowClick,\n  value,\n  namesMapping,\n) {\n  const name = namesMapping[value] || value;\n  return needToggle ? (\n    <span className=\"toggle-wrapper\">\n      <span\n        role=\"button\"\n        tabIndex=\"0\"\n        className=\"toggle\"\n        onClick={onArrowClick}\n      >\n        {ArrowIcon}\n      </span>\n      <span className=\"toggle-val\">{parseLabel(name)}</span>\n    </span>\n  ) : (\n    parseLabel(name)\n  );\n}\n\nexport class TableRenderer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // We need state to record which entries are collapsed and which aren't.\n    // This is an object with flat-keys indicating if the corresponding rows\n    // should be collapsed.\n    this.state = { collapsedRows: {}, collapsedCols: {} };\n\n    this.clickHeaderHandler = this.clickHeaderHandler.bind(this);\n    this.clickHandler = this.clickHandler.bind(this);\n  }\n\n  getBasePivotSettings() {\n    // One-time extraction of pivot settings that we'll use throughout the render.\n\n    const { props } = this;\n    const colAttrs = props.cols;\n    const rowAttrs = props.rows;\n\n    const tableOptions = {\n      rowTotals: true,\n      colTotals: true,\n      ...props.tableOptions,\n    };\n    const rowTotals = tableOptions.rowTotals || colAttrs.length === 0;\n    const colTotals = tableOptions.colTotals || rowAttrs.length === 0;\n\n    const namesMapping = props.namesMapping || {};\n    const subtotalOptions = {\n      arrowCollapsed: '\\u25B2',\n      arrowExpanded: '\\u25BC',\n      ...props.subtotalOptions,\n    };\n\n    const colSubtotalDisplay = {\n      displayOnTop: false,\n      enabled: rowTotals,\n      hideOnExpand: false,\n      ...subtotalOptions.colSubtotalDisplay,\n    };\n\n    const rowSubtotalDisplay = {\n      displayOnTop: false,\n      enabled: colTotals,\n      hideOnExpand: false,\n      ...subtotalOptions.rowSubtotalDisplay,\n    };\n\n    const pivotData = new PivotData(props, {\n      rowEnabled: rowSubtotalDisplay.enabled,\n      colEnabled: colSubtotalDisplay.enabled,\n      rowPartialOnTop: rowSubtotalDisplay.displayOnTop,\n      colPartialOnTop: colSubtotalDisplay.displayOnTop,\n    });\n    const rowKeys = pivotData.getRowKeys();\n    const colKeys = pivotData.getColKeys();\n\n    // Also pre-calculate all the callbacks for cells, etc... This is nice to have to\n    // avoid re-calculations of the call-backs on cell expansions, etc...\n    const cellCallbacks = {};\n    const rowTotalCallbacks = {};\n    const colTotalCallbacks = {};\n    let grandTotalCallback = null;\n    if (tableOptions.clickCallback) {\n      rowKeys.forEach(rowKey => {\n        const flatRowKey = flatKey(rowKey);\n        if (!(flatRowKey in cellCallbacks)) {\n          cellCallbacks[flatRowKey] = {};\n        }\n        colKeys.forEach(colKey => {\n          cellCallbacks[flatRowKey][flatKey(colKey)] = this.clickHandler(\n            pivotData,\n            rowKey,\n            colKey,\n          );\n        });\n      });\n\n      // Add in totals as well.\n      if (rowTotals) {\n        rowKeys.forEach(rowKey => {\n          rowTotalCallbacks[flatKey(rowKey)] = this.clickHandler(\n            pivotData,\n            rowKey,\n            [],\n          );\n        });\n      }\n      if (colTotals) {\n        colKeys.forEach(colKey => {\n          colTotalCallbacks[flatKey(colKey)] = this.clickHandler(\n            pivotData,\n            [],\n            colKey,\n          );\n        });\n      }\n      if (rowTotals && colTotals) {\n        grandTotalCallback = this.clickHandler(pivotData, [], []);\n      }\n    }\n\n    return {\n      pivotData,\n      colAttrs,\n      rowAttrs,\n      colKeys,\n      rowKeys,\n      rowTotals,\n      colTotals,\n      arrowCollapsed: subtotalOptions.arrowCollapsed,\n      arrowExpanded: subtotalOptions.arrowExpanded,\n      colSubtotalDisplay,\n      rowSubtotalDisplay,\n      cellCallbacks,\n      rowTotalCallbacks,\n      colTotalCallbacks,\n      grandTotalCallback,\n      namesMapping,\n    };\n  }\n\n  clickHandler(pivotData, rowValues, colValues) {\n    const colAttrs = this.props.cols;\n    const rowAttrs = this.props.rows;\n    const value = pivotData.getAggregator(rowValues, colValues).value();\n    const filters = {};\n    const colLimit = Math.min(colAttrs.length, colValues.length);\n    for (let i = 0; i < colLimit; i += 1) {\n      const attr = colAttrs[i];\n      if (colValues[i] !== null) {\n        filters[attr] = colValues[i];\n      }\n    }\n    const rowLimit = Math.min(rowAttrs.length, rowValues.length);\n    for (let i = 0; i < rowLimit; i += 1) {\n      const attr = rowAttrs[i];\n      if (rowValues[i] !== null) {\n        filters[attr] = rowValues[i];\n      }\n    }\n    return e =>\n      this.props.tableOptions.clickCallback(e, value, filters, pivotData);\n  }\n\n  clickHeaderHandler(\n    pivotData,\n    values,\n    attrs,\n    attrIdx,\n    callback,\n    isSubtotal = false,\n    isGrandTotal = false,\n  ) {\n    const filters = {};\n    for (let i = 0; i <= attrIdx; i += 1) {\n      const attr = attrs[i];\n      filters[attr] = values[i];\n    }\n    return e =>\n      callback(\n        e,\n        values[attrIdx],\n        filters,\n        pivotData,\n        isSubtotal,\n        isGrandTotal,\n      );\n  }\n\n  collapseAttr(rowOrCol, attrIdx, allKeys) {\n    return e => {\n      // Collapse an entire attribute.\n      e.stopPropagation();\n      const keyLen = attrIdx + 1;\n      const collapsed = allKeys.filter(k => k.length === keyLen).map(flatKey);\n\n      const updates = {};\n      collapsed.forEach(k => {\n        updates[k] = true;\n      });\n\n      if (rowOrCol) {\n        this.setState(state => ({\n          collapsedRows: { ...state.collapsedRows, ...updates },\n        }));\n      } else {\n        this.setState(state => ({\n          collapsedCols: { ...state.collapsedCols, ...updates },\n        }));\n      }\n    };\n  }\n\n  expandAttr(rowOrCol, attrIdx, allKeys) {\n    return e => {\n      // Expand an entire attribute. This implicitly implies expanding all of the\n      // parents as well. It's a bit inefficient but ah well...\n      e.stopPropagation();\n      const updates = {};\n      allKeys.forEach(k => {\n        for (let i = 0; i <= attrIdx; i += 1) {\n          updates[flatKey(k.slice(0, i + 1))] = false;\n        }\n      });\n\n      if (rowOrCol) {\n        this.setState(state => ({\n          collapsedRows: { ...state.collapsedRows, ...updates },\n        }));\n      } else {\n        this.setState(state => ({\n          collapsedCols: { ...state.collapsedCols, ...updates },\n        }));\n      }\n    };\n  }\n\n  toggleRowKey(flatRowKey) {\n    return e => {\n      e.stopPropagation();\n      this.setState(state => ({\n        collapsedRows: {\n          ...state.collapsedRows,\n          [flatRowKey]: !state.collapsedRows[flatRowKey],\n        },\n      }));\n    };\n  }\n\n  toggleColKey(flatColKey) {\n    return e => {\n      e.stopPropagation();\n      this.setState(state => ({\n        collapsedCols: {\n          ...state.collapsedCols,\n          [flatColKey]: !state.collapsedCols[flatColKey],\n        },\n      }));\n    };\n  }\n\n  calcAttrSpans(attrArr, numAttrs) {\n    // Given an array of attribute values (i.e. each element is another array with\n    // the value at every level), compute the spans for every attribute value at\n    // every level. The return value is a nested array of the same shape. It has\n    // -1's for repeated values and the span number otherwise.\n\n    const spans = [];\n    // Index of the last new value\n    const li = Array(numAttrs).map(() => 0);\n    let lv = Array(numAttrs).map(() => null);\n    for (let i = 0; i < attrArr.length; i += 1) {\n      // Keep increasing span values as long as the last keys are the same. For\n      // the rest, record spans of 1. Update the indices too.\n      const cv = attrArr[i];\n      const ent = [];\n      let depth = 0;\n      const limit = Math.min(lv.length, cv.length);\n      while (depth < limit && lv[depth] === cv[depth]) {\n        ent.push(-1);\n        spans[li[depth]][depth] += 1;\n        depth += 1;\n      }\n      while (depth < cv.length) {\n        li[depth] = i;\n        ent.push(1);\n        depth += 1;\n      }\n      spans.push(ent);\n      lv = cv;\n    }\n    return spans;\n  }\n\n  renderColHeaderRow(attrName, attrIdx, pivotSettings) {\n    // Render a single row in the column header at the top of the pivot table.\n\n    const {\n      rowAttrs,\n      colAttrs,\n      colKeys,\n      visibleColKeys,\n      colAttrSpans,\n      rowTotals,\n      arrowExpanded,\n      arrowCollapsed,\n      colSubtotalDisplay,\n      maxColVisible,\n      pivotData,\n      namesMapping,\n    } = pivotSettings;\n    const {\n      highlightHeaderCellsOnHover,\n      omittedHighlightHeaderGroups = [],\n      highlightedHeaderCells,\n      dateFormatters,\n    } = this.props.tableOptions;\n\n    const spaceCell =\n      attrIdx === 0 && rowAttrs.length !== 0 ? (\n        <th\n          key=\"padding\"\n          colSpan={rowAttrs.length}\n          rowSpan={colAttrs.length}\n          aria-hidden=\"true\"\n        />\n      ) : null;\n\n    const needToggle =\n      colSubtotalDisplay.enabled && attrIdx !== colAttrs.length - 1;\n    let arrowClickHandle = null;\n    let subArrow = null;\n    if (needToggle) {\n      arrowClickHandle =\n        attrIdx + 1 < maxColVisible\n          ? this.collapseAttr(false, attrIdx, colKeys)\n          : this.expandAttr(false, attrIdx, colKeys);\n      subArrow = attrIdx + 1 < maxColVisible ? arrowExpanded : arrowCollapsed;\n    }\n    const attrNameCell = (\n      <th key=\"label\" className=\"pvtAxisLabel\">\n        {displayHeaderCell(\n          needToggle,\n          subArrow,\n          arrowClickHandle,\n          attrName,\n          namesMapping,\n        )}\n      </th>\n    );\n\n    const attrValueCells = [];\n    const rowIncrSpan = rowAttrs.length !== 0 ? 1 : 0;\n    // Iterate through columns. Jump over duplicate values.\n    let i = 0;\n    while (i < visibleColKeys.length) {\n      let handleContextMenu;\n      const colKey = visibleColKeys[i];\n      const colSpan = attrIdx < colKey.length ? colAttrSpans[i][attrIdx] : 1;\n      let colLabelClass = 'pvtColLabel';\n      if (attrIdx < colKey.length) {\n        if (!omittedHighlightHeaderGroups.includes(colAttrs[attrIdx])) {\n          if (highlightHeaderCellsOnHover) {\n            colLabelClass += ' hoverable';\n          }\n          handleContextMenu = e =>\n            this.props.onContextMenu(e, colKey, undefined, {\n              [attrName]: colKey[attrIdx],\n            });\n        }\n        if (\n          highlightedHeaderCells &&\n          Array.isArray(highlightedHeaderCells[colAttrs[attrIdx]]) &&\n          highlightedHeaderCells[colAttrs[attrIdx]].includes(colKey[attrIdx])\n        ) {\n          colLabelClass += ' active';\n        }\n\n        const rowSpan = 1 + (attrIdx === colAttrs.length - 1 ? rowIncrSpan : 0);\n        const flatColKey = flatKey(colKey.slice(0, attrIdx + 1));\n        const onArrowClick = needToggle ? this.toggleColKey(flatColKey) : null;\n\n        const headerCellFormattedValue =\n          dateFormatters &&\n          dateFormatters[attrName] &&\n          typeof dateFormatters[attrName] === 'function'\n            ? dateFormatters[attrName](colKey[attrIdx])\n            : colKey[attrIdx];\n        attrValueCells.push(\n          <th\n            className={colLabelClass}\n            key={`colKey-${flatColKey}`}\n            colSpan={colSpan}\n            rowSpan={rowSpan}\n            onClick={this.clickHeaderHandler(\n              pivotData,\n              colKey,\n              this.props.cols,\n              attrIdx,\n              this.props.tableOptions.clickColumnHeaderCallback,\n            )}\n            onContextMenu={handleContextMenu}\n          >\n            {displayHeaderCell(\n              needToggle,\n              this.state.collapsedCols[flatColKey]\n                ? arrowCollapsed\n                : arrowExpanded,\n              onArrowClick,\n              headerCellFormattedValue,\n              namesMapping,\n            )}\n          </th>,\n        );\n      } else if (attrIdx === colKey.length) {\n        const rowSpan = colAttrs.length - colKey.length + rowIncrSpan;\n        attrValueCells.push(\n          <th\n            className={`${colLabelClass} pvtSubtotalLabel`}\n            key={`colKeyBuffer-${flatKey(colKey)}`}\n            colSpan={colSpan}\n            rowSpan={rowSpan}\n            onClick={this.clickHeaderHandler(\n              pivotData,\n              colKey,\n              this.props.cols,\n              attrIdx,\n              this.props.tableOptions.clickColumnHeaderCallback,\n              true,\n            )}\n          >\n            {t('Subtotal')}\n          </th>,\n        );\n      }\n      // The next colSpan columns will have the same value anyway...\n      i += colSpan;\n    }\n\n    const totalCell =\n      attrIdx === 0 && rowTotals ? (\n        <th\n          key=\"total\"\n          className=\"pvtTotalLabel\"\n          rowSpan={colAttrs.length + Math.min(rowAttrs.length, 1)}\n          onClick={this.clickHeaderHandler(\n            pivotData,\n            [],\n            this.props.cols,\n            attrIdx,\n            this.props.tableOptions.clickColumnHeaderCallback,\n            false,\n            true,\n          )}\n        >\n          {t('Total (%(aggregatorName)s)', {\n            aggregatorName: t(this.props.aggregatorName),\n          })}\n        </th>\n      ) : null;\n\n    const cells = [spaceCell, attrNameCell, ...attrValueCells, totalCell];\n    return <tr key={`colAttr-${attrIdx}`}>{cells}</tr>;\n  }\n\n  renderRowHeaderRow(pivotSettings) {\n    // Render just the attribute names of the rows (the actual attribute values\n    // will show up in the individual rows).\n\n    const {\n      rowAttrs,\n      colAttrs,\n      rowKeys,\n      arrowCollapsed,\n      arrowExpanded,\n      rowSubtotalDisplay,\n      maxRowVisible,\n      pivotData,\n      namesMapping,\n    } = pivotSettings;\n    return (\n      <tr key=\"rowHdr\">\n        {rowAttrs.map((r, i) => {\n          const needLabelToggle =\n            rowSubtotalDisplay.enabled && i !== rowAttrs.length - 1;\n          let arrowClickHandle = null;\n          let subArrow = null;\n          if (needLabelToggle) {\n            arrowClickHandle =\n              i + 1 < maxRowVisible\n                ? this.collapseAttr(true, i, rowKeys)\n                : this.expandAttr(true, i, rowKeys);\n            subArrow = i + 1 < maxRowVisible ? arrowExpanded : arrowCollapsed;\n          }\n          return (\n            <th className=\"pvtAxisLabel\" key={`rowAttr-${i}`}>\n              {displayHeaderCell(\n                needLabelToggle,\n                subArrow,\n                arrowClickHandle,\n                r,\n                namesMapping,\n              )}\n            </th>\n          );\n        })}\n        <th\n          className=\"pvtTotalLabel\"\n          key=\"padding\"\n          onClick={this.clickHeaderHandler(\n            pivotData,\n            [],\n            this.props.rows,\n            0,\n            this.props.tableOptions.clickRowHeaderCallback,\n            false,\n            true,\n          )}\n        >\n          {colAttrs.length === 0\n            ? t('Total (%(aggregatorName)s)', {\n                aggregatorName: t(this.props.aggregatorName),\n              })\n            : null}\n        </th>\n      </tr>\n    );\n  }\n\n  renderTableRow(rowKey, rowIdx, pivotSettings) {\n    // Render a single row in the pivot table.\n\n    const {\n      rowAttrs,\n      colAttrs,\n      rowAttrSpans,\n      visibleColKeys,\n      pivotData,\n      rowTotals,\n      rowSubtotalDisplay,\n      arrowExpanded,\n      arrowCollapsed,\n      cellCallbacks,\n      rowTotalCallbacks,\n      namesMapping,\n    } = pivotSettings;\n\n    const {\n      highlightHeaderCellsOnHover,\n      omittedHighlightHeaderGroups = [],\n      highlightedHeaderCells,\n      cellColorFormatters,\n      dateFormatters,\n    } = this.props.tableOptions;\n    const flatRowKey = flatKey(rowKey);\n\n    const colIncrSpan = colAttrs.length !== 0 ? 1 : 0;\n    const attrValueCells = rowKey.map((r, i) => {\n      let handleContextMenu;\n      let valueCellClassName = 'pvtRowLabel';\n      if (!omittedHighlightHeaderGroups.includes(rowAttrs[i])) {\n        if (highlightHeaderCellsOnHover) {\n          valueCellClassName += ' hoverable';\n        }\n        handleContextMenu = e =>\n          this.props.onContextMenu(e, undefined, rowKey, {\n            [rowAttrs[i]]: r,\n          });\n      }\n      if (\n        highlightedHeaderCells &&\n        Array.isArray(highlightedHeaderCells[rowAttrs[i]]) &&\n        highlightedHeaderCells[rowAttrs[i]].includes(r)\n      ) {\n        valueCellClassName += ' active';\n      }\n      const rowSpan = rowAttrSpans[rowIdx][i];\n      if (rowSpan > 0) {\n        const flatRowKey = flatKey(rowKey.slice(0, i + 1));\n        const colSpan = 1 + (i === rowAttrs.length - 1 ? colIncrSpan : 0);\n        const needRowToggle =\n          rowSubtotalDisplay.enabled && i !== rowAttrs.length - 1;\n        const onArrowClick = needRowToggle\n          ? this.toggleRowKey(flatRowKey)\n          : null;\n\n        const headerCellFormattedValue =\n          dateFormatters && dateFormatters[rowAttrs[i]]\n            ? dateFormatters[rowAttrs[i]](r)\n            : r;\n        return (\n          <th\n            key={`rowKeyLabel-${i}`}\n            className={valueCellClassName}\n            rowSpan={rowSpan}\n            colSpan={colSpan}\n            onClick={this.clickHeaderHandler(\n              pivotData,\n              rowKey,\n              this.props.rows,\n              i,\n              this.props.tableOptions.clickRowHeaderCallback,\n            )}\n            onContextMenu={handleContextMenu}\n          >\n            {displayHeaderCell(\n              needRowToggle,\n              this.state.collapsedRows[flatRowKey]\n                ? arrowCollapsed\n                : arrowExpanded,\n              onArrowClick,\n              headerCellFormattedValue,\n              namesMapping,\n            )}\n          </th>\n        );\n      }\n      return null;\n    });\n\n    const attrValuePaddingCell =\n      rowKey.length < rowAttrs.length ? (\n        <th\n          className=\"pvtRowLabel pvtSubtotalLabel\"\n          key=\"rowKeyBuffer\"\n          colSpan={rowAttrs.length - rowKey.length + colIncrSpan}\n          rowSpan={1}\n          onClick={this.clickHeaderHandler(\n            pivotData,\n            rowKey,\n            this.props.rows,\n            rowKey.length,\n            this.props.tableOptions.clickRowHeaderCallback,\n            true,\n          )}\n        >\n          {t('Subtotal')}\n        </th>\n      ) : null;\n\n    const rowClickHandlers = cellCallbacks[flatRowKey] || {};\n    const valueCells = visibleColKeys.map(colKey => {\n      const flatColKey = flatKey(colKey);\n      const agg = pivotData.getAggregator(rowKey, colKey);\n      const aggValue = agg.value();\n\n      const keys = [...rowKey, ...colKey];\n      let backgroundColor;\n      if (cellColorFormatters) {\n        Object.values(cellColorFormatters).forEach(cellColorFormatter => {\n          if (Array.isArray(cellColorFormatter)) {\n            keys.forEach(key => {\n              if (backgroundColor) {\n                return;\n              }\n              cellColorFormatter\n                .filter(formatter => formatter.column === key)\n                .forEach(formatter => {\n                  const formatterResult = formatter.getColorFromValue(aggValue);\n                  if (formatterResult) {\n                    backgroundColor = formatterResult;\n                  }\n                });\n            });\n          }\n        });\n      }\n\n      const style = agg.isSubtotal\n        ? { fontWeight: 'bold' }\n        : { backgroundColor };\n\n      return (\n        <td\n          role=\"gridcell\"\n          className=\"pvtVal\"\n          key={`pvtVal-${flatColKey}`}\n          onClick={rowClickHandlers[flatColKey]}\n          onContextMenu={e => this.props.onContextMenu(e, colKey, rowKey)}\n          style={style}\n        >\n          {agg.format(aggValue)}\n        </td>\n      );\n    });\n\n    let totalCell = null;\n    if (rowTotals) {\n      const agg = pivotData.getAggregator(rowKey, []);\n      const aggValue = agg.value();\n      totalCell = (\n        <td\n          role=\"gridcell\"\n          key=\"total\"\n          className=\"pvtTotal\"\n          onClick={rowTotalCallbacks[flatRowKey]}\n          onContextMenu={e => this.props.onContextMenu(e, undefined, rowKey)}\n        >\n          {agg.format(aggValue)}\n        </td>\n      );\n    }\n\n    const rowCells = [\n      ...attrValueCells,\n      attrValuePaddingCell,\n      ...valueCells,\n      totalCell,\n    ];\n\n    return <tr key={`keyRow-${flatRowKey}`}>{rowCells}</tr>;\n  }\n\n  renderTotalsRow(pivotSettings) {\n    // Render the final totals rows that has the totals for all the columns.\n\n    const {\n      rowAttrs,\n      colAttrs,\n      visibleColKeys,\n      rowTotals,\n      pivotData,\n      colTotalCallbacks,\n      grandTotalCallback,\n    } = pivotSettings;\n\n    const totalLabelCell = (\n      <th\n        key=\"label\"\n        className=\"pvtTotalLabel pvtRowTotalLabel\"\n        colSpan={rowAttrs.length + Math.min(colAttrs.length, 1)}\n        onClick={this.clickHeaderHandler(\n          pivotData,\n          [],\n          this.props.rows,\n          0,\n          this.props.tableOptions.clickRowHeaderCallback,\n          false,\n          true,\n        )}\n      >\n        {t('Total (%(aggregatorName)s)', {\n          aggregatorName: t(this.props.aggregatorName),\n        })}\n      </th>\n    );\n\n    const totalValueCells = visibleColKeys.map(colKey => {\n      const flatColKey = flatKey(colKey);\n      const agg = pivotData.getAggregator([], colKey);\n      const aggValue = agg.value();\n\n      return (\n        <td\n          role=\"gridcell\"\n          className=\"pvtTotal pvtRowTotal\"\n          key={`total-${flatColKey}`}\n          onClick={colTotalCallbacks[flatColKey]}\n          onContextMenu={e => this.props.onContextMenu(e, colKey, undefined)}\n          style={{ padding: '5px' }}\n        >\n          {agg.format(aggValue)}\n        </td>\n      );\n    });\n\n    let grandTotalCell = null;\n    if (rowTotals) {\n      const agg = pivotData.getAggregator([], []);\n      const aggValue = agg.value();\n      grandTotalCell = (\n        <td\n          role=\"gridcell\"\n          key=\"total\"\n          className=\"pvtGrandTotal pvtRowTotal\"\n          onClick={grandTotalCallback}\n          onContextMenu={e => this.props.onContextMenu(e, undefined, undefined)}\n        >\n          {agg.format(aggValue)}\n        </td>\n      );\n    }\n\n    const totalCells = [totalLabelCell, ...totalValueCells, grandTotalCell];\n\n    return (\n      <tr key=\"total\" className=\"pvtRowTotals\">\n        {totalCells}\n      </tr>\n    );\n  }\n\n  visibleKeys(keys, collapsed, numAttrs, subtotalDisplay) {\n    return keys.filter(\n      key =>\n        // Is the key hidden by one of its parents?\n        !key.some((k, j) => collapsed[flatKey(key.slice(0, j))]) &&\n        // Leaf key.\n        (key.length === numAttrs ||\n          // Children hidden. Must show total.\n          flatKey(key) in collapsed ||\n          // Don't hide totals.\n          !subtotalDisplay.hideOnExpand),\n    );\n  }\n\n  isDashboardEditMode() {\n    return document.contains(document.querySelector('.dashboard--editing'));\n  }\n\n  render() {\n    if (this.cachedProps !== this.props) {\n      this.cachedProps = this.props;\n      this.cachedBasePivotSettings = this.getBasePivotSettings();\n    }\n    const {\n      colAttrs,\n      rowAttrs,\n      rowKeys,\n      colKeys,\n      colTotals,\n      rowSubtotalDisplay,\n      colSubtotalDisplay,\n    } = this.cachedBasePivotSettings;\n\n    // Need to account for exclusions to compute the effective row\n    // and column keys.\n    const visibleRowKeys = this.visibleKeys(\n      rowKeys,\n      this.state.collapsedRows,\n      rowAttrs.length,\n      rowSubtotalDisplay,\n    );\n    const visibleColKeys = this.visibleKeys(\n      colKeys,\n      this.state.collapsedCols,\n      colAttrs.length,\n      colSubtotalDisplay,\n    );\n\n    const pivotSettings = {\n      visibleRowKeys,\n      maxRowVisible: Math.max(...visibleRowKeys.map(k => k.length)),\n      visibleColKeys,\n      maxColVisible: Math.max(...visibleColKeys.map(k => k.length)),\n      rowAttrSpans: this.calcAttrSpans(visibleRowKeys, rowAttrs.length),\n      colAttrSpans: this.calcAttrSpans(visibleColKeys, colAttrs.length),\n      ...this.cachedBasePivotSettings,\n    };\n\n    return (\n      <Styles isDashboardEditMode={this.isDashboardEditMode()}>\n        <table className=\"pvtTable\" role=\"grid\">\n          <thead>\n            {colAttrs.map((c, j) =>\n              this.renderColHeaderRow(c, j, pivotSettings),\n            )}\n            {rowAttrs.length !== 0 && this.renderRowHeaderRow(pivotSettings)}\n          </thead>\n          <tbody>\n            {visibleRowKeys.map((r, i) =>\n              this.renderTableRow(r, i, pivotSettings),\n            )}\n            {colTotals && this.renderTotalsRow(pivotSettings)}\n          </tbody>\n        </table>\n      </Styles>\n    );\n  }\n}\n\nTableRenderer.propTypes = {\n  ...PivotData.propTypes,\n  tableOptions: PropTypes.object,\n  onContextMenu: PropTypes.func,\n};\nTableRenderer.defaultProps = { ...PivotData.defaultProps, tableOptions: {} };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}