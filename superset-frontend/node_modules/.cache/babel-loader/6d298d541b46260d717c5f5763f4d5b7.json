{"ast":null,"code":"import { ensureIsArray, QueryMode, t } from '@superset-ui/core';\nexport function getQueryMode(controls) {var _controls$query_mode, _controls$all_columns;\n  const mode = controls == null ? void 0 : (_controls$query_mode = controls.query_mode) == null ? void 0 : _controls$query_mode.value;\n  if (mode === QueryMode.aggregate || mode === QueryMode.raw) {\n    return mode;\n  }\n  const rawColumns = controls == null ? void 0 : (_controls$all_columns = controls.all_columns) == null ? void 0 : _controls$all_columns.value;\n  const hasRawColumns = rawColumns && rawColumns.length > 0;\n  return hasRawColumns ? QueryMode.raw : QueryMode.aggregate;\n}\n/**\n * Visibility check\n */\nexport function isQueryMode(mode) {\n  return (_ref) => {let { controls } = _ref;return getQueryMode(controls) === mode;};\n}\nexport const isAggMode = isQueryMode(QueryMode.aggregate);\nexport const isRawMode = isQueryMode(QueryMode.raw);\nexport const validateAggControlValues = (controls, values) => {\n  const areControlsEmpty = values.every((val) => ensureIsArray(val).length === 0);\n  return areControlsEmpty && isAggMode({ controls }) ?\n  [t('Group By, Metrics or Percentage Metrics must have a value')] :\n  [];\n};","map":{"version":3,"mappings":"AAsBA,SACEA,aADF,EAGEC,SAHF,EAIEC,CAJF,QAKO,mBALP;AAOA,OAAM,SAAUC,YAAV,CAAuBC,QAAvB,EAAoD;EACxD,MAAMC,IAAI,GAAGD,QAAH,4CAAGA,QAAQ,CAAEE,UAAb,qBAAG,qBAAsBC,KAAnC;EACA,IAAIF,IAAI,KAAKJ,SAAS,CAACO,SAAnB,IAAgCH,IAAI,KAAKJ,SAAS,CAACQ,GAAvD,EAA4D;IAC1D,OAAOJ,IAAP;EACD;EACD,MAAMK,UAAU,GAAGN,QAAH,6CAAGA,QAAQ,CAAEO,WAAb,qBAAG,sBAAuBJ,KAA1C;EAGA,MAAMK,aAAa,GAAGF,UAAU,IAAIA,UAAU,CAACG,MAAX,GAAoB,CAAxD;EACA,OAAOD,aAAa,GAAGX,SAAS,CAACQ,GAAb,GAAmBR,SAAS,CAACO,SAAjD;AACD;AAED;;;AAGA,OAAM,SAAUM,WAAV,CAAsBT,IAAtB,EAAqC;EACzC,OAAO,eAAC,EAAED,QAAF,EAAD,eACLD,YAAY,CAACC,QAAD,CAAZ,KAA2BC,IADtB,EAAP;AAED;AAED,OAAO,MAAMU,SAAS,GAAGD,WAAW,CAACb,SAAS,CAACO,SAAX,CAA7B;AACP,OAAO,MAAMQ,SAAS,GAAGF,WAAW,CAACb,SAAS,CAACQ,GAAX,CAA7B;AAEP,OAAO,MAAMQ,wBAAwB,GAAG,CACtCb,QADsC,EAEtCc,MAFsC,KAGpC;EACF,MAAMC,gBAAgB,GAAGD,MAAM,CAACE,KAAP,CAAa,IAAG,KAAIpB,aAAa,CAACqB,GAAD,CAAb,CAAmBR,MAAnB,KAA8B,CAAlD,CAAzB;EACA,OAAOM,gBAAgB,IAAIJ,SAAS,CAAC,EAAEX,QAAF,EAAD,CAA7B;EACH,CAACF,CAAC,CAAC,2DAAD,CAAF,CADG;EAEH,EAFJ;AAGD,CARM","names":["ensureIsArray","QueryMode","t","getQueryMode","controls","mode","query_mode","value","aggregate","raw","rawColumns","all_columns","hasRawColumns","length","isQueryMode","isAggMode","isRawMode","validateAggControlValues","values","areControlsEmpty","every","val"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/plugins/plugin-chart-handlebars/src/plugin/controls/shared.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  ControlPanelsContainerProps,\n  ControlStateMapping,\n} from '@superset-ui/chart-controls';\nimport {\n  ensureIsArray,\n  QueryFormColumn,\n  QueryMode,\n  t,\n} from '@superset-ui/core';\n\nexport function getQueryMode(controls: ControlStateMapping): QueryMode {\n  const mode = controls?.query_mode?.value;\n  if (mode === QueryMode.aggregate || mode === QueryMode.raw) {\n    return mode as QueryMode;\n  }\n  const rawColumns = controls?.all_columns?.value as\n    | QueryFormColumn[]\n    | undefined;\n  const hasRawColumns = rawColumns && rawColumns.length > 0;\n  return hasRawColumns ? QueryMode.raw : QueryMode.aggregate;\n}\n\n/**\n * Visibility check\n */\nexport function isQueryMode(mode: QueryMode) {\n  return ({ controls }: Pick<ControlPanelsContainerProps, 'controls'>) =>\n    getQueryMode(controls) === mode;\n}\n\nexport const isAggMode = isQueryMode(QueryMode.aggregate);\nexport const isRawMode = isQueryMode(QueryMode.raw);\n\nexport const validateAggControlValues = (\n  controls: ControlStateMapping,\n  values: any[],\n) => {\n  const areControlsEmpty = values.every(val => ensureIsArray(val).length === 0);\n  return areControlsEmpty && isAggMode({ controls })\n    ? [t('Group By, Metrics or Percentage Metrics must have a value')]\n    : [];\n};\n"]},"metadata":{},"sourceType":"module"}