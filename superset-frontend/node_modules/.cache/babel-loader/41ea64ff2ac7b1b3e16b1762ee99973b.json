{"ast":null,"code":"import { utcFormat, timeFormat } from 'd3-time-format';\nimport { utcUtils, localTimeUtils } from '../utils/d3Time';\nimport createTimeFormatter from '../createTimeFormatter';\nexport default function createMultiTimeFormatter(_ref)\n\n\n\n\n\n{let { id, label, description, formats = {}, useLocalTime = false } = _ref;\n  const {\n    millisecond = '.%L',\n    second = ':%S',\n    minute = '%I:%M',\n    hour = '%I %p',\n    day = '%a %d',\n    week = '%b %d',\n    month = '%B',\n    year = '%Y' } =\n  formats;\n  const format = useLocalTime ? timeFormat : utcFormat;\n  const formatMillisecond = format(millisecond);\n  const formatSecond = format(second);\n  const formatMinute = format(minute);\n  const formatHour = format(hour);\n  const formatDay = format(day);\n  const formatFirstDayOfWeek = format(week);\n  const formatMonth = format(month);\n  const formatYear = format(year);\n  const {\n    hasMillisecond,\n    hasSecond,\n    hasMinute,\n    hasHour,\n    isNotFirstDayOfMonth,\n    isNotFirstDayOfWeek,\n    isNotFirstMonth } =\n  useLocalTime ? localTimeUtils : utcUtils;\n\n  function multiFormatFunc(date) {\n    if (hasMillisecond(date)) {\n      return formatMillisecond;\n    }\n\n    if (hasSecond(date)) {\n      return formatSecond;\n    }\n\n    if (hasMinute(date)) {\n      return formatMinute;\n    }\n\n    if (hasHour(date)) {\n      return formatHour;\n    }\n\n    if (isNotFirstDayOfMonth(date)) {\n      return isNotFirstDayOfWeek(date) ? formatDay : formatFirstDayOfWeek;\n    }\n\n    if (isNotFirstMonth(date)) {\n      return formatMonth;\n    }\n\n    return formatYear;\n  }\n\n  return createTimeFormatter((date) => multiFormatFunc(date)(date), {\n    id,\n    label,\n    description,\n    useLocalTime });\n\n}","map":{"version":3,"names":["utcFormat","timeFormat","utcUtils","localTimeUtils","createTimeFormatter","createMultiTimeFormatter","id","label","description","formats","useLocalTime","millisecond","second","minute","hour","day","week","month","year","format","formatMillisecond","formatSecond","formatMinute","formatHour","formatDay","formatFirstDayOfWeek","formatMonth","formatYear","hasMillisecond","hasSecond","hasMinute","hasHour","isNotFirstDayOfMonth","isNotFirstDayOfWeek","isNotFirstMonth","multiFormatFunc","date"],"sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/node_modules/@encodable/format/esm/time/factories/createMultiTimeFormatter.js"],"sourcesContent":["import { utcFormat, timeFormat } from 'd3-time-format';\nimport { utcUtils, localTimeUtils } from '../utils/d3Time';\nimport createTimeFormatter from '../createTimeFormatter';\nexport default function createMultiTimeFormatter({\n  id,\n  label,\n  description,\n  formats = {},\n  useLocalTime = false\n}) {\n  const {\n    millisecond = '.%L',\n    second = ':%S',\n    minute = '%I:%M',\n    hour = '%I %p',\n    day = '%a %d',\n    week = '%b %d',\n    month = '%B',\n    year = '%Y'\n  } = formats;\n  const format = useLocalTime ? timeFormat : utcFormat;\n  const formatMillisecond = format(millisecond);\n  const formatSecond = format(second);\n  const formatMinute = format(minute);\n  const formatHour = format(hour);\n  const formatDay = format(day);\n  const formatFirstDayOfWeek = format(week);\n  const formatMonth = format(month);\n  const formatYear = format(year);\n  const {\n    hasMillisecond,\n    hasSecond,\n    hasMinute,\n    hasHour,\n    isNotFirstDayOfMonth,\n    isNotFirstDayOfWeek,\n    isNotFirstMonth\n  } = useLocalTime ? localTimeUtils : utcUtils;\n\n  function multiFormatFunc(date) {\n    if (hasMillisecond(date)) {\n      return formatMillisecond;\n    }\n\n    if (hasSecond(date)) {\n      return formatSecond;\n    }\n\n    if (hasMinute(date)) {\n      return formatMinute;\n    }\n\n    if (hasHour(date)) {\n      return formatHour;\n    }\n\n    if (isNotFirstDayOfMonth(date)) {\n      return isNotFirstDayOfWeek(date) ? formatDay : formatFirstDayOfWeek;\n    }\n\n    if (isNotFirstMonth(date)) {\n      return formatMonth;\n    }\n\n    return formatYear;\n  }\n\n  return createTimeFormatter(date => multiFormatFunc(date)(date), {\n    id,\n    label,\n    description,\n    useLocalTime\n  });\n}"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,UAApB,QAAsC,gBAAtC;AACA,SAASC,QAAT,EAAmBC,cAAnB,QAAyC,iBAAzC;AACA,OAAOC,mBAAP,MAAgC,wBAAhC;AACA,eAAe,SAASC,wBAAT;;;;;;AAMZ,KAN8C,EAC/CC,EAD+C,EAE/CC,KAF+C,EAG/CC,WAH+C,EAI/CC,OAAO,GAAG,EAJqC,EAK/CC,YAAY,GAAG,KALgC,EAM9C;EACD,MAAM;IACJC,WAAW,GAAG,KADV;IAEJC,MAAM,GAAG,KAFL;IAGJC,MAAM,GAAG,OAHL;IAIJC,IAAI,GAAG,OAJH;IAKJC,GAAG,GAAG,OALF;IAMJC,IAAI,GAAG,OANH;IAOJC,KAAK,GAAG,IAPJ;IAQJC,IAAI,GAAG,IARH;EASFT,OATJ;EAUA,MAAMU,MAAM,GAAGT,YAAY,GAAGT,UAAH,GAAgBD,SAA3C;EACA,MAAMoB,iBAAiB,GAAGD,MAAM,CAACR,WAAD,CAAhC;EACA,MAAMU,YAAY,GAAGF,MAAM,CAACP,MAAD,CAA3B;EACA,MAAMU,YAAY,GAAGH,MAAM,CAACN,MAAD,CAA3B;EACA,MAAMU,UAAU,GAAGJ,MAAM,CAACL,IAAD,CAAzB;EACA,MAAMU,SAAS,GAAGL,MAAM,CAACJ,GAAD,CAAxB;EACA,MAAMU,oBAAoB,GAAGN,MAAM,CAACH,IAAD,CAAnC;EACA,MAAMU,WAAW,GAAGP,MAAM,CAACF,KAAD,CAA1B;EACA,MAAMU,UAAU,GAAGR,MAAM,CAACD,IAAD,CAAzB;EACA,MAAM;IACJU,cADI;IAEJC,SAFI;IAGJC,SAHI;IAIJC,OAJI;IAKJC,oBALI;IAMJC,mBANI;IAOJC,eAPI;EAQFxB,YAAY,GAAGP,cAAH,GAAoBD,QARpC;;EAUA,SAASiC,eAAT,CAAyBC,IAAzB,EAA+B;IAC7B,IAAIR,cAAc,CAACQ,IAAD,CAAlB,EAA0B;MACxB,OAAOhB,iBAAP;IACD;;IAED,IAAIS,SAAS,CAACO,IAAD,CAAb,EAAqB;MACnB,OAAOf,YAAP;IACD;;IAED,IAAIS,SAAS,CAACM,IAAD,CAAb,EAAqB;MACnB,OAAOd,YAAP;IACD;;IAED,IAAIS,OAAO,CAACK,IAAD,CAAX,EAAmB;MACjB,OAAOb,UAAP;IACD;;IAED,IAAIS,oBAAoB,CAACI,IAAD,CAAxB,EAAgC;MAC9B,OAAOH,mBAAmB,CAACG,IAAD,CAAnB,GAA4BZ,SAA5B,GAAwCC,oBAA/C;IACD;;IAED,IAAIS,eAAe,CAACE,IAAD,CAAnB,EAA2B;MACzB,OAAOV,WAAP;IACD;;IAED,OAAOC,UAAP;EACD;;EAED,OAAOvB,mBAAmB,CAAC,CAAAgC,IAAI,KAAID,eAAe,CAACC,IAAD,CAAf,CAAsBA,IAAtB,CAAT,EAAsC;IAC9D9B,EAD8D;IAE9DC,KAF8D;IAG9DC,WAH8D;IAI9DE,YAJ8D,EAAtC,CAA1B;;AAMD"},"metadata":{},"sourceType":"module"}