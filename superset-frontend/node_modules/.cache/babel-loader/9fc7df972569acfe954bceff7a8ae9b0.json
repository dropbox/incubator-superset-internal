{"ast":null,"code":"import _zip from \"lodash/zip\";import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useMemo } from 'react';\n\nimport { css, GenericDataType, styled } from '@superset-ui/core';\nimport { CopyToClipboardButton, FilterInput, RowCount } from 'src/explore/components/DataTableControl';\nimport { applyFormattingToTabularData } from 'src/utils/common';\nimport { getTimeColumns } from 'src/explore/components/DataTableControl/utils';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport const TableControlsWrapper = styled.div`\n  ${(_ref) => {let { theme } = _ref;return `\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    margin-bottom: ${theme.gridUnit * 2}px;\n\n    span {\n      flex-shrink: 0;\n    }\n  `;}}\n`;\nexport const TableControls = (_ref2) => {let { data, datasourceId, onInputChange, columnNames, columnTypes, isLoading } = _ref2;\n  const originalTimeColumns = getTimeColumns(datasourceId);\n  const formattedTimeColumns = _zip(columnNames, columnTypes).\n  filter((_ref3) => {let [name, type] = _ref3;return type === GenericDataType.TEMPORAL &&\n    name &&\n    !_includesInstanceProperty(originalTimeColumns).call(originalTimeColumns, name);}).\n  map((_ref4) => {let [colname] = _ref4;return colname;});\n  const formattedData = useMemo(() => applyFormattingToTabularData(data, formattedTimeColumns), [data, formattedTimeColumns]);\n  return ___EmotionJSX(TableControlsWrapper, null,\n  ___EmotionJSX(FilterInput, { onChangeHandler: onInputChange }),\n  ___EmotionJSX(\"div\", { css: css`\n          display: flex;\n          align-items: center;\n        ` },\n  ___EmotionJSX(RowCount, { data: data, loading: isLoading }),\n  ___EmotionJSX(CopyToClipboardButton, { data: formattedData, columns: columnNames })));\n\n\n};","map":{"version":3,"mappings":"+HAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;;AAEA,SAASC,GAAT,EAAcC,eAAd,EAA+BC,MAA/B,QAA6C,mBAA7C;AACA,SACEC,qBADF,EAEEC,WAFF,EAGEC,QAHF,QAIO,yCAJP;AAKA,SAASC,4BAAT,QAA6C,kBAA7C;AACA,SAASC,cAAT,QAA+B,+CAA/B,C;AAGA,OAAO,MAAMC,oBAAoB,GAAGN,MAAM,CAACO,GAAG;IAC1C,eAAC,EAAEC,KAAF,EAAD,eAAe;;;;qBAIEA,KAAK,CAACC,QAAN,GAAiB,CAAC;;;;;GAJnC,EASD;CAVI;AAaP,OAAO,MAAMC,aAAa,GAAG,WAOJ,KAPK,EAC5BC,IAD4B,EAE5BC,YAF4B,EAG5BC,aAH4B,EAI5BC,WAJ4B,EAK5BC,WAL4B,EAM5BC,SAN4B,EAOL;EACvB,MAAMC,mBAAmB,GAAGZ,cAAc,CAACO,YAAD,CAA1C;EACA,MAAMM,oBAAoB,GAAG,KAC3BJ,WAD2B,EAE3BC,WAF2B;EAI1BI,MAJ0B,CAKzB,gBAAC,CAACC,IAAD,EAAOC,IAAP,CAAD,gBACEA,IAAI,KAAKtB,eAAe,CAACuB,QAAzB;IACAF,IADA;IAEA,CAAC,6CAAmB,MAAnB,oBAAmB,EAAUA,IAAV,CAHtB,EALyB;EAU1BG,GAV0B,CAUtB,gBAAC,CAACC,OAAD,CAAD,gBAAeA,OAAf,EAVsB,CAA7B;EAWA,MAAMC,aAAa,GAAG5B,OAAO,CAC3B,MAAMO,4BAA4B,CAACO,IAAD,EAAOO,oBAAP,CADP,EAE3B,CAACP,IAAD,EAAOO,oBAAP,CAF2B,CAA7B;EAIA,OACE,cAAC,oBAAD;EACE,cAAC,WAAD,IAAa,eAAe,EAAEL,aAA9B,GADF;EAEE,uBACE,GAAG,EAAEf,GAAG;;;SADV;EAME,cAAC,QAAD,IAAU,IAAI,EAAEa,IAAhB,EAAsB,OAAO,EAAEK,SAA/B,GANF;EAOE,cAAC,qBAAD,IAAuB,IAAI,EAAES,aAA7B,EAA4C,OAAO,EAAEX,WAArD,GAPF,CAFF,CADF;;;AAcD,CAtCM","names":["React","useMemo","css","GenericDataType","styled","CopyToClipboardButton","FilterInput","RowCount","applyFormattingToTabularData","getTimeColumns","TableControlsWrapper","div","theme","gridUnit","TableControls","data","datasourceId","onInputChange","columnNames","columnTypes","isLoading","originalTimeColumns","formattedTimeColumns","filter","name","type","TEMPORAL","map","colname","formattedData"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/explore/components/DataTablesPane/components/DataTableControls.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useMemo } from 'react';\nimport { zip } from 'lodash';\nimport { css, GenericDataType, styled } from '@superset-ui/core';\nimport {\n  CopyToClipboardButton,\n  FilterInput,\n  RowCount,\n} from 'src/explore/components/DataTableControl';\nimport { applyFormattingToTabularData } from 'src/utils/common';\nimport { getTimeColumns } from 'src/explore/components/DataTableControl/utils';\nimport { TableControlsProps } from '../types';\n\nexport const TableControlsWrapper = styled.div`\n  ${({ theme }) => `\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    margin-bottom: ${theme.gridUnit * 2}px;\n\n    span {\n      flex-shrink: 0;\n    }\n  `}\n`;\n\nexport const TableControls = ({\n  data,\n  datasourceId,\n  onInputChange,\n  columnNames,\n  columnTypes,\n  isLoading,\n}: TableControlsProps) => {\n  const originalTimeColumns = getTimeColumns(datasourceId);\n  const formattedTimeColumns = zip<string, GenericDataType>(\n    columnNames,\n    columnTypes,\n  )\n    .filter(\n      ([name, type]) =>\n        type === GenericDataType.TEMPORAL &&\n        name &&\n        !originalTimeColumns.includes(name),\n    )\n    .map(([colname]) => colname);\n  const formattedData = useMemo(\n    () => applyFormattingToTabularData(data, formattedTimeColumns),\n    [data, formattedTimeColumns],\n  );\n  return (\n    <TableControlsWrapper>\n      <FilterInput onChangeHandler={onInputChange} />\n      <div\n        css={css`\n          display: flex;\n          align-items: center;\n        `}\n      >\n        <RowCount data={data} loading={isLoading} />\n        <CopyToClipboardButton data={formattedData} columns={columnNames} />\n      </div>\n    </TableControlsWrapper>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}