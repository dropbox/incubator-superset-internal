{"ast":null,"code":"import _keyBy from \"lodash/fp/keyBy\";import _flow from \"lodash/fp/flow\";import _mapValues from \"lodash/fp/mapValues\";import _isEmpty from \"lodash/isEmpty\";import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport {\ngetChartIdAndColumnFromFilterKey,\ngetDashboardFilterKey } from\n'./getDashboardFilterKey';\nimport { CHART_TYPE } from './componentTypes';\nimport { DASHBOARD_FILTER_SCOPE_GLOBAL } from '../reducers/dashboardFilters';\n\nlet allFilterBoxChartIds = [];\nlet activeFilters = {};\nlet appliedFilterValuesByChart = {};\nlet allComponents = {};\n\n// output: { [id_column]: { values, scope } }\nexport function getActiveFilters() {\n  return activeFilters;\n}\n\n// currently filter_box is a chart,\n// when selecting filter scopes, they have to be out pulled out in a few places.\n// after we make filter_box a dashboard build-in component, will not need this check anymore.\nexport function isFilterBox(chartId) {\n  return _includesInstanceProperty(allFilterBoxChartIds).call(allFilterBoxChartIds, chartId);\n}\n\n// this function is to find all filter values applied to a chart,\n// it goes through all active filters and their scopes.\n// return: { [column]: array of selected values }\nexport function getAppliedFilterValues(chartId, filters) {\n  // use cached data if possible\n  if (!(chartId in appliedFilterValuesByChart)) {\n    const applicableFilters = Object.entries(filters || activeFilters).filter(\n    (_ref) => {let [, { scope: chartIds }] = _ref;return _includesInstanceProperty(chartIds).call(chartIds, chartId);});\n\n    appliedFilterValuesByChart[chartId] = _flow(\n    _keyBy(\n    (_ref2) => {let [filterKey] = _ref2;return getChartIdAndColumnFromFilterKey(filterKey).column;}),\n\n    _mapValues((_ref3) => {let [, { values }] = _ref3;return values;}))(\n    applicableFilters);\n  }\n  return appliedFilterValuesByChart[chartId];\n}\n\n// Legacy - getChartIdsInFilterBoxScope is used only by\n// components and functions related to filter box\n// Please use src/dashboard/util/getChartIdsInFilterScope instead\nexport function getChartIdsInFilterBoxScope(_ref4) {let { filterScope } = _ref4;\n  function traverse(chartIds, component, immuneChartIds) {if (chartIds === void 0) {chartIds = [];}if (component === void 0) {component = {};}if (immuneChartIds === void 0) {immuneChartIds = [];}\n    if (!component) {\n      return;\n    }\n\n    if (\n    component.type === CHART_TYPE &&\n    component.meta &&\n    component.meta.chartId &&\n    !_includesInstanceProperty(immuneChartIds).call(immuneChartIds, component.meta.chartId))\n    {\n      chartIds.push(component.meta.chartId);\n    } else if (component.children) {\n      component.children.forEach((child) =>\n      traverse(chartIds, allComponents[child], immuneChartIds));\n\n    }\n  }\n\n  const chartIds = [];\n  const { scope: scopeComponentIds, immune: immuneChartIds } =\n  filterScope || DASHBOARD_FILTER_SCOPE_GLOBAL;\n  scopeComponentIds.forEach((componentId) =>\n  traverse(chartIds, allComponents[componentId], immuneChartIds));\n\n\n  return chartIds;\n}\n\n// non-empty filter fields in dashboardFilters,\n// activeFilters map contains selected values and filter scope.\n// values: array of selected values\n// scope: array of chartIds that applicable to the filter field.\nexport function buildActiveFilters(_ref5) {let { dashboardFilters = {}, components = {} } = _ref5;\n  allFilterBoxChartIds = Object.values(dashboardFilters).map(\n  (filter) => filter.chartId);\n\n\n  // clear cache\n  if (!_isEmpty(components)) {\n    allComponents = components;\n  }\n  appliedFilterValuesByChart = {};\n  activeFilters = Object.values(dashboardFilters).reduce((result, filter) => {\n    const { chartId, columns, scopes } = filter;\n    const nonEmptyFilters = {};\n\n    Object.keys(columns).forEach((column) => {\n      if (\n      Array.isArray(columns[column]) ?\n      columns[column].length :\n      columns[column] !== undefined)\n      {\n        // remove filter itself\n        const scope = getChartIdsInFilterBoxScope({\n          filterScope: scopes[column] }).\n        filter((id) => chartId !== id);\n\n        nonEmptyFilters[getDashboardFilterKey({ chartId, column })] = {\n          values: columns[column],\n          scope };\n\n      }\n    });\n\n    return {\n      ...result,\n      ...nonEmptyFilters };\n\n  }, {});\n}","map":{"version":3,"names":["getChartIdAndColumnFromFilterKey","getDashboardFilterKey","CHART_TYPE","DASHBOARD_FILTER_SCOPE_GLOBAL","allFilterBoxChartIds","activeFilters","appliedFilterValuesByChart","allComponents","getActiveFilters","isFilterBox","chartId","getAppliedFilterValues","filters","applicableFilters","Object","entries","filter","scope","chartIds","filterKey","column","values","getChartIdsInFilterBoxScope","filterScope","traverse","component","immuneChartIds","type","meta","push","children","forEach","child","scopeComponentIds","immune","componentId","buildActiveFilters","dashboardFilters","components","map","reduce","result","columns","scopes","nonEmptyFilters","keys","Array","isArray","length","undefined","id"],"sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/util/activeDashboardFilters.js"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { isEmpty } from 'lodash';\nimport { mapValues, flow, keyBy } from 'lodash/fp';\nimport {\n  getChartIdAndColumnFromFilterKey,\n  getDashboardFilterKey,\n} from './getDashboardFilterKey';\nimport { CHART_TYPE } from './componentTypes';\nimport { DASHBOARD_FILTER_SCOPE_GLOBAL } from '../reducers/dashboardFilters';\n\nlet allFilterBoxChartIds = [];\nlet activeFilters = {};\nlet appliedFilterValuesByChart = {};\nlet allComponents = {};\n\n// output: { [id_column]: { values, scope } }\nexport function getActiveFilters() {\n  return activeFilters;\n}\n\n// currently filter_box is a chart,\n// when selecting filter scopes, they have to be out pulled out in a few places.\n// after we make filter_box a dashboard build-in component, will not need this check anymore.\nexport function isFilterBox(chartId) {\n  return allFilterBoxChartIds.includes(chartId);\n}\n\n// this function is to find all filter values applied to a chart,\n// it goes through all active filters and their scopes.\n// return: { [column]: array of selected values }\nexport function getAppliedFilterValues(chartId, filters) {\n  // use cached data if possible\n  if (!(chartId in appliedFilterValuesByChart)) {\n    const applicableFilters = Object.entries(filters || activeFilters).filter(\n      ([, { scope: chartIds }]) => chartIds.includes(chartId),\n    );\n    appliedFilterValuesByChart[chartId] = flow(\n      keyBy(\n        ([filterKey]) => getChartIdAndColumnFromFilterKey(filterKey).column,\n      ),\n      mapValues(([, { values }]) => values),\n    )(applicableFilters);\n  }\n  return appliedFilterValuesByChart[chartId];\n}\n\n// Legacy - getChartIdsInFilterBoxScope is used only by\n// components and functions related to filter box\n// Please use src/dashboard/util/getChartIdsInFilterScope instead\nexport function getChartIdsInFilterBoxScope({ filterScope }) {\n  function traverse(chartIds = [], component = {}, immuneChartIds = []) {\n    if (!component) {\n      return;\n    }\n\n    if (\n      component.type === CHART_TYPE &&\n      component.meta &&\n      component.meta.chartId &&\n      !immuneChartIds.includes(component.meta.chartId)\n    ) {\n      chartIds.push(component.meta.chartId);\n    } else if (component.children) {\n      component.children.forEach(child =>\n        traverse(chartIds, allComponents[child], immuneChartIds),\n      );\n    }\n  }\n\n  const chartIds = [];\n  const { scope: scopeComponentIds, immune: immuneChartIds } =\n    filterScope || DASHBOARD_FILTER_SCOPE_GLOBAL;\n  scopeComponentIds.forEach(componentId =>\n    traverse(chartIds, allComponents[componentId], immuneChartIds),\n  );\n\n  return chartIds;\n}\n\n// non-empty filter fields in dashboardFilters,\n// activeFilters map contains selected values and filter scope.\n// values: array of selected values\n// scope: array of chartIds that applicable to the filter field.\nexport function buildActiveFilters({ dashboardFilters = {}, components = {} }) {\n  allFilterBoxChartIds = Object.values(dashboardFilters).map(\n    filter => filter.chartId,\n  );\n\n  // clear cache\n  if (!isEmpty(components)) {\n    allComponents = components;\n  }\n  appliedFilterValuesByChart = {};\n  activeFilters = Object.values(dashboardFilters).reduce((result, filter) => {\n    const { chartId, columns, scopes } = filter;\n    const nonEmptyFilters = {};\n\n    Object.keys(columns).forEach(column => {\n      if (\n        Array.isArray(columns[column])\n          ? columns[column].length\n          : columns[column] !== undefined\n      ) {\n        // remove filter itself\n        const scope = getChartIdsInFilterBoxScope({\n          filterScope: scopes[column],\n        }).filter(id => chartId !== id);\n\n        nonEmptyFilters[getDashboardFilterKey({ chartId, column })] = {\n          values: columns[column],\n          scope,\n        };\n      }\n    });\n\n    return {\n      ...result,\n      ...nonEmptyFilters,\n    };\n  }, {});\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}