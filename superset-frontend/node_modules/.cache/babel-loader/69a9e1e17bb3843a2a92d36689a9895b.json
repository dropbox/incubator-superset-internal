{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\";import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useMemo, useEffect } from 'react';\nimport { styled, t } from '@superset-ui/core';\nimport { Select } from 'src/components';\nimport { FormLabel } from 'src/components/Form';\nimport Icons from 'src/components/Icons';\nimport DatabaseSelector from 'src/components/DatabaseSelector';\nimport RefreshLabel from 'src/components/RefreshLabel';\nimport CertifiedBadge from 'src/components/CertifiedBadge';\nimport WarningIconWithTooltip from 'src/components/WarningIconWithTooltip';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\nimport { useTables } from 'src/hooks/apiResources';\nimport { getClientErrorMessage, getClientErrorObject } from 'src/utils/getClientErrorObject';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst REFRESH_WIDTH = 30;\nconst TableSelectorWrapper = styled.div`\n  ${(_ref) => {let { theme } = _ref;return `\n    .refresh {\n      display: flex;\n      align-items: center;\n      width: ${REFRESH_WIDTH}px;\n      margin-left: ${theme.gridUnit}px;\n      margin-top: ${theme.gridUnit * 5}px;\n    }\n\n    .section {\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n    }\n\n    .divider {\n      border-bottom: 1px solid ${theme.colors.secondary.light5};\n      margin: 15px 0;\n    }\n\n    .table-length {\n      color: ${theme.colors.grayscale.light1};\n    }\n\n    .select {\n      flex: 1;\n      max-width: calc(100% - ${theme.gridUnit + REFRESH_WIDTH}px)\n    }\n  `;}}\n`;\nconst TableLabel = styled.span`\n  align-items: center;\n  display: flex;\n  white-space: nowrap;\n\n  svg,\n  small {\n    margin-right: ${(_ref2) => {let { theme } = _ref2;return theme.gridUnit;}}px;\n  }\n`;\nexport const TableOption = (_ref3) => {let { table } = _ref3;\n  const { value, type, extra } = table;\n  return ___EmotionJSX(TableLabel, { title: value },\n  type === 'view' ? ___EmotionJSX(Icons.Eye, { iconSize: \"m\" }) : ___EmotionJSX(Icons.Table, { iconSize: \"m\" }),\n  (extra == null ? void 0 : extra.certification) && ___EmotionJSX(CertifiedBadge, { certifiedBy: extra.certification.certified_by, details: extra.certification.details, size: \"l\" }),\n  (extra == null ? void 0 : extra.warning_markdown) && ___EmotionJSX(WarningIconWithTooltip, { warningMarkdown: extra.warning_markdown, size: \"l\" }),\n  value);\n\n};\nfunction renderSelectRow(select, refreshBtn) {\n  return ___EmotionJSX(\"div\", { className: \"section\" },\n  ___EmotionJSX(\"span\", { className: \"select\" }, select),\n  ___EmotionJSX(\"span\", { className: \"refresh\" }, refreshBtn));\n\n}\nconst TableSelector = (_ref4) => {let { database, emptyState, formMode = false, getDbList, handleError, isDatabaseSelectEnabled = true, onDbChange, onSchemaChange, readOnly = false, onEmptyResults, schema, sqlLabMode = true, tableSelectMode = 'single', tableValue = undefined, onTableSelectChange } = _ref4;\n  const { addSuccessToast } = useToasts();\n  const [currentSchema, setCurrentSchema] = useState(schema);\n  const [tableSelectValue, setTableSelectValue] = useState(undefined);\n  const { data, isFetching: loadingTables, refetch } = useTables({\n    dbId: database == null ? void 0 : database.id,\n    schema: currentSchema,\n    onSuccess: (data, isFetched) => {\n      if (isFetched) {\n        addSuccessToast(t('List updated'));\n      }\n    },\n    onError: (err) => {\n      getClientErrorObject(err).then((clientError) => {\n        handleError(getClientErrorMessage(t('There was an error loading the tables'), clientError));\n      });\n    } });\n\n  const tableOptions = useMemo(() => data ?\n  data.options.map((table) => ({\n    value: table.value,\n    label: ___EmotionJSX(TableOption, { table: table }),\n    text: table.value })) :\n\n  [], [data]);\n  useEffect(() => {\n    // reset selections\n    if (database === undefined) {\n      setCurrentSchema(undefined);\n      setTableSelectValue(undefined);\n    }\n  }, [database, tableSelectMode]);\n  useEffect(() => {\n    if (tableSelectMode === 'single') {\n      setTableSelectValue(tableOptions.find((option) => option.value === tableValue));\n    } else\n    {\n      setTableSelectValue((tableOptions == null ? void 0 : tableOptions.filter((option) => option && (tableValue == null ? void 0 : _includesInstanceProperty(tableValue).call(tableValue, option.value)))) || []);\n    }\n  }, [tableOptions, tableValue, tableSelectMode]);\n  const internalTableChange = (selectedOptions) => {\n    if (currentSchema) {\n      onTableSelectChange == null ? void 0 : onTableSelectChange(Array.isArray(selectedOptions) ?\n      selectedOptions.map((option) => option == null ? void 0 : option.value) :\n      selectedOptions == null ? void 0 : selectedOptions.value, currentSchema);\n    } else\n    {\n      setTableSelectValue(selectedOptions);\n    }\n  };\n  const internalDbChange = (db) => {\n    if (onDbChange) {\n      onDbChange(db);\n    }\n  };\n  const internalSchemaChange = (schema) => {\n    setCurrentSchema(schema);\n    if (onSchemaChange) {\n      onSchemaChange(schema);\n    }\n    const value = tableSelectMode === 'single' ? undefined : [];\n    internalTableChange(value);\n  };\n  const handleFilterOption = useMemo(() => (search, option) => {var _context;\n    const searchValue = search.trim().toLowerCase();\n    const { value } = option;\n    return _includesInstanceProperty(_context = value.toLowerCase()).call(_context, searchValue);\n  }, []);\n  function renderTableSelect() {\n    const disabled = currentSchema && !formMode && readOnly || !currentSchema;\n    const header = sqlLabMode ? ___EmotionJSX(FormLabel, null, t('See table schema')) : ___EmotionJSX(FormLabel, null, t('Table'));\n    const select = ___EmotionJSX(Select, { ariaLabel: t('Select table or type to search tables'), disabled: disabled, filterOption: handleFilterOption, header: header, labelInValue: true, loading: loadingTables, name: \"select-table\", onChange: (options) => internalTableChange(options), options: tableOptions, placeholder: t('Select table or type to search tables'), showSearch: true, mode: tableSelectMode, value: tableSelectValue, allowClear: tableSelectMode === 'multiple', allowSelectAll: false });\n    const refreshLabel = !readOnly && ___EmotionJSX(RefreshLabel, { onClick: () => refetch(), tooltipContent: t('Force refresh table list') });\n    return renderSelectRow(select, refreshLabel);\n  }\n  return ___EmotionJSX(TableSelectorWrapper, null,\n  ___EmotionJSX(DatabaseSelector, { db: database, emptyState: emptyState, formMode: formMode, getDbList: getDbList, handleError: handleError, onDbChange: readOnly ? undefined : internalDbChange, onEmptyResults: onEmptyResults, onSchemaChange: readOnly ? undefined : internalSchemaChange, schema: currentSchema, sqlLabMode: sqlLabMode, isDatabaseSelectEnabled: isDatabaseSelectEnabled && !readOnly, readOnly: readOnly }),\n  sqlLabMode && !formMode && ___EmotionJSX(\"div\", { className: \"divider\" }),\n  renderTableSelect());\n\n};\nexport const TableSelectorMultiple = (props) => ___EmotionJSX(TableSelector, _extends({ tableSelectMode: \"multiple\" }, props));\nexport default TableSelector;","map":{"version":3,"mappings":"+JAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,KAAP,IAEEC,QAFF,EAIEC,OAJF,EAKEC,SALF,QAMO,OANP;AASA,SAASC,MAAT,EAAiBC,CAAjB,QAA0B,mBAA1B;AACA,SAASC,MAAT,QAAuB,gBAAvB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,OAAOC,KAAP,MAAkB,sBAAlB;AACA,OAAOC,gBAAP,MAEO,iCAFP;AAGA,OAAOC,YAAP,MAAyB,6BAAzB;AACA,OAAOC,cAAP,MAA2B,+BAA3B;AACA,OAAOC,sBAAP,MAAmC,uCAAnC;AACA,SAASC,SAAT,QAA0B,yCAA1B;AACA,SAASC,SAAT,QAAiC,wBAAjC;AACA,SACEC,qBADF,EAEEC,oBAFF,QAGO,gCAHP,C;AAKA,MAAMC,aAAa,GAAG,EAAtB;AAEA,MAAMC,oBAAoB,GAAGd,MAAM,CAACe,GAAG;IACnC,eAAC,EAAEC,KAAF,EAAD,eAAe;;;;eAIJH,aAAa;qBACPG,KAAK,CAACC,QAAQ;oBACfD,KAAK,CAACC,QAAN,GAAiB,CAAC;;;;;;;;;;iCAULD,KAAK,CAACE,MAAN,CAAaC,SAAb,CAAuBC,MAAM;;;;;eAK/CJ,KAAK,CAACE,MAAN,CAAaG,SAAb,CAAuBC,MAAM;;;;;+BAKbN,KAAK,CAACC,QAAN,GAAiBJ,aAAa;;GA1BzD,EA4BD;CA7BH;AAgCA,MAAMU,UAAU,GAAGvB,MAAM,CAACwB,IAAI;;;;;;;oBAOV,gBAAC,EAAER,KAAF,EAAD,gBAAeA,KAAK,CAACC,QAArB,EAA6B;;CAPjD;AAoCA,OAAO,MAAMQ,WAAW,GAAG,WAAgC,KAA/B,EAAEC,KAAF,EAA+B;EACzD,MAAM,EAAEC,KAAF,EAASC,IAAT,EAAeC,KAAf,KAAyBH,KAA/B;EACA,OACE,cAAC,UAAD,IAAY,KAAK,EAAEC,KAAnB;EACGC,IAAI,KAAK,MAAT,GACC,cAAC,KAAD,CAAO,GAAP,IAAW,QAAQ,EAAC,GAApB,GADD,GAGC,cAAC,KAAD,CAAO,KAAP,IAAa,QAAQ,EAAC,GAAtB,GAJJ;EAMG,MAAK,QAAL,iBAAK,CAAEE,aAAP,KACC,cAAC,cAAD,IACE,WAAW,EAAED,KAAK,CAACC,aAAN,CAAoBC,YADnC,EAEE,OAAO,EAAEF,KAAK,CAACC,aAAN,CAAoBE,OAF/B,EAGE,IAAI,EAAC,GAHP,GAPJ;EAaG,MAAK,QAAL,iBAAK,CAAEC,gBAAP,KACC,cAAC,sBAAD,IACE,eAAe,EAAEJ,KAAK,CAACI,gBADzB,EAEE,IAAI,EAAC,GAFP,GAdJ;EAmBGN,KAnBH,CADF;;AAuBD,CAzBM;AA2BP,SAASO,eAAT,CAAyBC,MAAzB,EAA4CC,UAA5C,EAAiE;EAC/D,OACE,uBAAK,SAAS,EAAC,SAAf;EACE,wBAAM,SAAS,EAAC,QAAhB,IAA0BD,MAA1B,CADF;EAEE,wBAAM,SAAS,EAAC,SAAhB,IAA2BC,UAA3B,CAFF,CADF;;AAMD;AAED,MAAMC,aAAa,GAA0C,WAgBxD,KAhByD,EAC5DC,QAD4D,EAE5DC,UAF4D,EAG5DC,QAAQ,GAAG,KAHiD,EAI5DC,SAJ4D,EAK5DC,WAL4D,EAM5DC,uBAAuB,GAAG,IANkC,EAO5DC,UAP4D,EAQ5DC,cAR4D,EAS5DC,QAAQ,GAAG,KATiD,EAU5DC,cAV4D,EAW5DC,MAX4D,EAY5DC,UAAU,GAAG,IAZ+C,EAa5DC,eAAe,GAAG,QAb0C,EAc5DC,UAAU,GAAGC,SAd+C,EAe5DC,mBAf4D,EAgBzD;EACH,MAAM,EAAEC,eAAF,KAAsB7C,SAAS,EAArC;EACA,MAAM,CAAC8C,aAAD,EAAgBC,gBAAhB,IAAoC3D,QAAQ,CAChDmD,MADgD,CAAlD;EAGA,MAAM,CAACS,gBAAD,EAAmBC,mBAAnB,IAA0C7D,QAAQ,CAEtDuD,SAFsD,CAAxD;EAGA,MAAM,EACJO,IADI,EAEJC,UAAU,EAAEC,aAFR,EAGJC,OAHI,KAIFpD,SAAS,CAAC;IACZqD,IAAI,EAAEzB,QAAF,oBAAEA,QAAQ,CAAE0B,EADJ;IAEZhB,MAAM,EAAEO,aAFI;IAGZU,SAAS,EAAE,CAACN,IAAD,EAAOO,SAAP,KAAoB;MAC7B,IAAIA,SAAJ,EAAe;QACbZ,eAAe,CAACrD,CAAC,CAAC,cAAD,CAAF,CAAf;MACD;IACF,CAPW;IAQZkE,OAAO,EAAE,IAAG,KAAG;MACbvD,oBAAoB,CAACwD,GAAD,CAApB,CAA0BC,IAA1B,CAA+B,YAAW,KAAG;QAC3C3B,WAAW,CACT/B,qBAAqB,CACnBV,CAAC,CAAC,uCAAD,CADkB,EAEnBqE,WAFmB,CADZ,CAAX;MAMD,CAPD;IAQD,CAjBW,EAAD,CAJb;;EAwBA,MAAMC,YAAY,GAAGzE,OAAO,CAC1B,MACE6D,IAAI;EACAA,IAAI,CAACa,OAAL,CAAaC,GAAb,CAAiB,MAAK,MAAK;IACzB9C,KAAK,EAAED,KAAK,CAACC,KADY;IAEzB+C,KAAK,EAAE,cAAC,WAAD,IAAa,KAAK,EAAEhD,KAApB,GAFkB;IAGzBiD,IAAI,EAAEjD,KAAK,CAACC,KAHa,EAAL,CAAtB,CADA;;EAMA,EARoB,EAS1B,CAACgC,IAAD,CAT0B,CAA5B;EAYA5D,SAAS,CAAC,MAAK;IACb;IACA,IAAIuC,QAAQ,KAAKc,SAAjB,EAA4B;MAC1BI,gBAAgB,CAACJ,SAAD,CAAhB;MACAM,mBAAmB,CAACN,SAAD,CAAnB;IACD;EACF,CANQ,EAMN,CAACd,QAAD,EAAWY,eAAX,CANM,CAAT;EAQAnD,SAAS,CAAC,MAAK;IACb,IAAImD,eAAe,KAAK,QAAxB,EAAkC;MAChCQ,mBAAmB,CACjBa,YAAY,CAACK,IAAb,CAAkB,OAAM,KAAIC,MAAM,CAAClD,KAAP,KAAiBwB,UAA7C,CADiB,CAAnB;IAGD,CAJD;IAIO;MACLO,mBAAmB,CACjB,aAAY,QAAZ,wBAAY,CAAEoB,MAAd,CACE,OAAM,KAAID,MAAM,KAAI1B,UAAJ,oBAAI,oCAAU,MAAV,WAAU,EAAW0B,MAAM,CAAClD,KAAlB,CAAd,CADlB,MAEK,EAHY,CAAnB;IAKD;EACF,CAZQ,EAYN,CAAC4C,YAAD,EAAepB,UAAf,EAA2BD,eAA3B,CAZM,CAAT;EAcA,MAAM6B,mBAAmB,GAAG,CAC1BC,eAD0B,KAExB;IACF,IAAIzB,aAAJ,EAAmB;MACjBF,mBAAmB,QAAnB,+BAAmB,CACjB4B,KAAK,CAACC,OAAN,CAAcF,eAAd;MACIA,eAAe,CAACP,GAAhB,CAAoB,OAAM,KAAII,MAAJ,oBAAIA,MAAM,CAAElD,KAAtC,CADJ;MAEIqD,eAFJ,oBAEIA,eAAe,CAAErD,KAHJ,EAIjB4B,aAJiB,CAAnB;IAMD,CAPD;IAOO;MACLG,mBAAmB,CAACsB,eAAD,CAAnB;IACD;EACF,CAbD;EAeA,MAAMG,gBAAgB,GAAG,CAACC,EAAD,KAAuB;IAC9C,IAAIxC,UAAJ,EAAgB;MACdA,UAAU,CAACwC,EAAD,CAAV;IACD;EACF,CAJD;EAMA,MAAMC,oBAAoB,GAAG,CAACrC,MAAD,KAAoB;IAC/CQ,gBAAgB,CAACR,MAAD,CAAhB;IACA,IAAIH,cAAJ,EAAoB;MAClBA,cAAc,CAACG,MAAD,CAAd;IACD;IAED,MAAMrB,KAAK,GAAGuB,eAAe,KAAK,QAApB,GAA+BE,SAA/B,GAA2C,EAAzD;IACA2B,mBAAmB,CAACpD,KAAD,CAAnB;EACD,CARD;EAUA,MAAM2D,kBAAkB,GAAGxF,OAAO,CAChC,MAAM,CAACyF,MAAD,EAAiBV,MAAjB,KAAwC;IAC5C,MAAMW,WAAW,GAAGD,MAAM,CAACE,IAAP,GAAcC,WAAd,EAApB;IACA,MAAM,EAAE/D,KAAF,KAAYkD,MAAlB;IACA,OAAO,0CAAK,CAACa,WAAN,mBAA6BF,WAA7B,CAAP;EACD,CAL+B,EAMhC,EANgC,CAAlC;EASA,SAASG,iBAAT,GAA0B;IACxB,MAAMC,QAAQ,GAAIrC,aAAa,IAAI,CAACf,QAAlB,IAA8BM,QAA/B,IAA4C,CAACS,aAA9D;IAEA,MAAMsC,MAAM,GAAG5C,UAAU,GACvB,cAAC,SAAD,QAAYhD,CAAC,CAAC,kBAAD,CAAb,CADuB,GAGvB,cAAC,SAAD,QAAYA,CAAC,CAAC,OAAD,CAAb,CAHF;IAMA,MAAMkC,MAAM,GACV,cAAC,MAAD,IACE,SAAS,EAAElC,CAAC,CAAC,uCAAD,CADd,EAEE,QAAQ,EAAE2F,QAFZ,EAGE,YAAY,EAAEN,kBAHhB,EAIE,MAAM,EAAEO,MAJV,EAKE,YAAY,MALd,EAME,OAAO,EAAEhC,aANX,EAOE,IAAI,EAAC,cAPP,EAQE,QAAQ,EAAE,CAACW,OAAD,KACRO,mBAAmB,CAACP,OAAD,CATvB,EAWE,OAAO,EAAED,YAXX,EAYE,WAAW,EAAEtE,CAAC,CAAC,uCAAD,CAZhB,EAaE,UAAU,MAbZ,EAcE,IAAI,EAAEiD,eAdR,EAeE,KAAK,EAAEO,gBAfT,EAgBE,UAAU,EAAEP,eAAe,KAAK,UAhBlC,EAiBE,cAAc,EAAE,KAjBlB,GADF;IAsBA,MAAM4C,YAAY,GAAG,CAAChD,QAAD,IACnB,cAAC,YAAD,IACE,OAAO,EAAE,MAAMgB,OAAO,EADxB,EAEE,cAAc,EAAE7D,CAAC,CAAC,0BAAD,CAFnB,GADF;IAOA,OAAOiC,eAAe,CAACC,MAAD,EAAS2D,YAAT,CAAtB;EACD;EAED,OACE,cAAC,oBAAD;EACE,cAAC,gBAAD,IACE,EAAE,EAAExD,QADN,EAEE,UAAU,EAAEC,UAFd,EAGE,QAAQ,EAAEC,QAHZ,EAIE,SAAS,EAAEC,SAJb,EAKE,WAAW,EAAEC,WALf,EAME,UAAU,EAAEI,QAAQ,GAAGM,SAAH,GAAe+B,gBANrC,EAOE,cAAc,EAAEpC,cAPlB,EAQE,cAAc,EAAED,QAAQ,GAAGM,SAAH,GAAeiC,oBARzC,EASE,MAAM,EAAE9B,aATV,EAUE,UAAU,EAAEN,UAVd,EAWE,uBAAuB,EAAEN,uBAAuB,IAAI,CAACG,QAXvD,EAYE,QAAQ,EAAEA,QAZZ,GADF;EAeGG,UAAU,IAAI,CAACT,QAAf,IAA2B,uBAAK,SAAS,EAAC,SAAf,GAf9B;EAgBGmD,iBAAiB,EAhBpB,CADF;;AAoBD,CAvLD;AAyLA,OAAO,MAAMI,qBAAqB,GAChC,MAAK,KAAI,cAAC,aAAD,aAAe,eAAe,EAAC,UAA/B,IAA8CC,KAA9C,EADJ;AAGP,eAAe3D,aAAf","names":["React","useState","useMemo","useEffect","styled","t","Select","FormLabel","Icons","DatabaseSelector","RefreshLabel","CertifiedBadge","WarningIconWithTooltip","useToasts","useTables","getClientErrorMessage","getClientErrorObject","REFRESH_WIDTH","TableSelectorWrapper","div","theme","gridUnit","colors","secondary","light5","grayscale","light1","TableLabel","span","TableOption","table","value","type","extra","certification","certified_by","details","warning_markdown","renderSelectRow","select","refreshBtn","TableSelector","database","emptyState","formMode","getDbList","handleError","isDatabaseSelectEnabled","onDbChange","onSchemaChange","readOnly","onEmptyResults","schema","sqlLabMode","tableSelectMode","tableValue","undefined","onTableSelectChange","addSuccessToast","currentSchema","setCurrentSchema","tableSelectValue","setTableSelectValue","data","isFetching","loadingTables","refetch","dbId","id","onSuccess","isFetched","onError","err","then","clientError","tableOptions","options","map","label","text","find","option","filter","internalTableChange","selectedOptions","Array","isArray","internalDbChange","db","internalSchemaChange","handleFilterOption","search","searchValue","trim","toLowerCase","renderTableSelect","disabled","header","refreshLabel","TableSelectorMultiple","props"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/TableSelector/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, {\n  FunctionComponent,\n  useState,\n  ReactNode,\n  useMemo,\n  useEffect,\n} from 'react';\nimport { SelectValue } from 'antd/lib/select';\n\nimport { styled, t } from '@superset-ui/core';\nimport { Select } from 'src/components';\nimport { FormLabel } from 'src/components/Form';\nimport Icons from 'src/components/Icons';\nimport DatabaseSelector, {\n  DatabaseObject,\n} from 'src/components/DatabaseSelector';\nimport RefreshLabel from 'src/components/RefreshLabel';\nimport CertifiedBadge from 'src/components/CertifiedBadge';\nimport WarningIconWithTooltip from 'src/components/WarningIconWithTooltip';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\nimport { useTables, Table } from 'src/hooks/apiResources';\nimport {\n  getClientErrorMessage,\n  getClientErrorObject,\n} from 'src/utils/getClientErrorObject';\n\nconst REFRESH_WIDTH = 30;\n\nconst TableSelectorWrapper = styled.div`\n  ${({ theme }) => `\n    .refresh {\n      display: flex;\n      align-items: center;\n      width: ${REFRESH_WIDTH}px;\n      margin-left: ${theme.gridUnit}px;\n      margin-top: ${theme.gridUnit * 5}px;\n    }\n\n    .section {\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n    }\n\n    .divider {\n      border-bottom: 1px solid ${theme.colors.secondary.light5};\n      margin: 15px 0;\n    }\n\n    .table-length {\n      color: ${theme.colors.grayscale.light1};\n    }\n\n    .select {\n      flex: 1;\n      max-width: calc(100% - ${theme.gridUnit + REFRESH_WIDTH}px)\n    }\n  `}\n`;\n\nconst TableLabel = styled.span`\n  align-items: center;\n  display: flex;\n  white-space: nowrap;\n\n  svg,\n  small {\n    margin-right: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n\ninterface TableSelectorProps {\n  clearable?: boolean;\n  database?: DatabaseObject | null;\n  emptyState?: ReactNode;\n  formMode?: boolean;\n  getDbList?: (arg0: any) => void;\n  handleError: (msg: string) => void;\n  isDatabaseSelectEnabled?: boolean;\n  onDbChange?: (db: DatabaseObject) => void;\n  onSchemaChange?: (schema?: string) => void;\n  readOnly?: boolean;\n  schema?: string;\n  onEmptyResults?: (searchText?: string) => void;\n  sqlLabMode?: boolean;\n  tableValue?: string | string[];\n  onTableSelectChange?: (value?: string | string[], schema?: string) => void;\n  tableSelectMode?: 'single' | 'multiple';\n}\n\nexport interface TableOption {\n  label: JSX.Element;\n  text: string;\n  value: string;\n}\n\nexport const TableOption = ({ table }: { table: Table }) => {\n  const { value, type, extra } = table;\n  return (\n    <TableLabel title={value}>\n      {type === 'view' ? (\n        <Icons.Eye iconSize=\"m\" />\n      ) : (\n        <Icons.Table iconSize=\"m\" />\n      )}\n      {extra?.certification && (\n        <CertifiedBadge\n          certifiedBy={extra.certification.certified_by}\n          details={extra.certification.details}\n          size=\"l\"\n        />\n      )}\n      {extra?.warning_markdown && (\n        <WarningIconWithTooltip\n          warningMarkdown={extra.warning_markdown}\n          size=\"l\"\n        />\n      )}\n      {value}\n    </TableLabel>\n  );\n};\n\nfunction renderSelectRow(select: ReactNode, refreshBtn: ReactNode) {\n  return (\n    <div className=\"section\">\n      <span className=\"select\">{select}</span>\n      <span className=\"refresh\">{refreshBtn}</span>\n    </div>\n  );\n}\n\nconst TableSelector: FunctionComponent<TableSelectorProps> = ({\n  database,\n  emptyState,\n  formMode = false,\n  getDbList,\n  handleError,\n  isDatabaseSelectEnabled = true,\n  onDbChange,\n  onSchemaChange,\n  readOnly = false,\n  onEmptyResults,\n  schema,\n  sqlLabMode = true,\n  tableSelectMode = 'single',\n  tableValue = undefined,\n  onTableSelectChange,\n}) => {\n  const { addSuccessToast } = useToasts();\n  const [currentSchema, setCurrentSchema] = useState<string | undefined>(\n    schema,\n  );\n  const [tableSelectValue, setTableSelectValue] = useState<\n    SelectValue | undefined\n  >(undefined);\n  const {\n    data,\n    isFetching: loadingTables,\n    refetch,\n  } = useTables({\n    dbId: database?.id,\n    schema: currentSchema,\n    onSuccess: (data, isFetched) => {\n      if (isFetched) {\n        addSuccessToast(t('List updated'));\n      }\n    },\n    onError: err => {\n      getClientErrorObject(err).then(clientError => {\n        handleError(\n          getClientErrorMessage(\n            t('There was an error loading the tables'),\n            clientError,\n          ),\n        );\n      });\n    },\n  });\n\n  const tableOptions = useMemo<TableOption[]>(\n    () =>\n      data\n        ? data.options.map(table => ({\n            value: table.value,\n            label: <TableOption table={table} />,\n            text: table.value,\n          }))\n        : [],\n    [data],\n  );\n\n  useEffect(() => {\n    // reset selections\n    if (database === undefined) {\n      setCurrentSchema(undefined);\n      setTableSelectValue(undefined);\n    }\n  }, [database, tableSelectMode]);\n\n  useEffect(() => {\n    if (tableSelectMode === 'single') {\n      setTableSelectValue(\n        tableOptions.find(option => option.value === tableValue),\n      );\n    } else {\n      setTableSelectValue(\n        tableOptions?.filter(\n          option => option && tableValue?.includes(option.value),\n        ) || [],\n      );\n    }\n  }, [tableOptions, tableValue, tableSelectMode]);\n\n  const internalTableChange = (\n    selectedOptions: TableOption | TableOption[] | undefined,\n  ) => {\n    if (currentSchema) {\n      onTableSelectChange?.(\n        Array.isArray(selectedOptions)\n          ? selectedOptions.map(option => option?.value)\n          : selectedOptions?.value,\n        currentSchema,\n      );\n    } else {\n      setTableSelectValue(selectedOptions);\n    }\n  };\n\n  const internalDbChange = (db: DatabaseObject) => {\n    if (onDbChange) {\n      onDbChange(db);\n    }\n  };\n\n  const internalSchemaChange = (schema?: string) => {\n    setCurrentSchema(schema);\n    if (onSchemaChange) {\n      onSchemaChange(schema);\n    }\n\n    const value = tableSelectMode === 'single' ? undefined : [];\n    internalTableChange(value);\n  };\n\n  const handleFilterOption = useMemo(\n    () => (search: string, option: TableOption) => {\n      const searchValue = search.trim().toLowerCase();\n      const { value } = option;\n      return value.toLowerCase().includes(searchValue);\n    },\n    [],\n  );\n\n  function renderTableSelect() {\n    const disabled = (currentSchema && !formMode && readOnly) || !currentSchema;\n\n    const header = sqlLabMode ? (\n      <FormLabel>{t('See table schema')}</FormLabel>\n    ) : (\n      <FormLabel>{t('Table')}</FormLabel>\n    );\n\n    const select = (\n      <Select\n        ariaLabel={t('Select table or type to search tables')}\n        disabled={disabled}\n        filterOption={handleFilterOption}\n        header={header}\n        labelInValue\n        loading={loadingTables}\n        name=\"select-table\"\n        onChange={(options: TableOption | TableOption[]) =>\n          internalTableChange(options)\n        }\n        options={tableOptions}\n        placeholder={t('Select table or type to search tables')}\n        showSearch\n        mode={tableSelectMode}\n        value={tableSelectValue}\n        allowClear={tableSelectMode === 'multiple'}\n        allowSelectAll={false}\n      />\n    );\n\n    const refreshLabel = !readOnly && (\n      <RefreshLabel\n        onClick={() => refetch()}\n        tooltipContent={t('Force refresh table list')}\n      />\n    );\n\n    return renderSelectRow(select, refreshLabel);\n  }\n\n  return (\n    <TableSelectorWrapper>\n      <DatabaseSelector\n        db={database}\n        emptyState={emptyState}\n        formMode={formMode}\n        getDbList={getDbList}\n        handleError={handleError}\n        onDbChange={readOnly ? undefined : internalDbChange}\n        onEmptyResults={onEmptyResults}\n        onSchemaChange={readOnly ? undefined : internalSchemaChange}\n        schema={currentSchema}\n        sqlLabMode={sqlLabMode}\n        isDatabaseSelectEnabled={isDatabaseSelectEnabled && !readOnly}\n        readOnly={readOnly}\n      />\n      {sqlLabMode && !formMode && <div className=\"divider\" />}\n      {renderTableSelect()}\n    </TableSelectorWrapper>\n  );\n};\n\nexport const TableSelectorMultiple: FunctionComponent<TableSelectorProps> =\n  props => <TableSelector tableSelectMode=\"multiple\" {...props} />;\n\nexport default TableSelector;\n"]},"metadata":{},"sourceType":"module"}