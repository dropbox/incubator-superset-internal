{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { configureStore } from '@reduxjs/toolkit';\nimport thunk from 'redux-thunk';\nimport { api } from 'src/hooks/apiResources/queryApi';\nimport messageToastReducer from 'src/components/MessageToasts/reducers';\nimport charts from 'src/components/Chart/chartReducer';\nimport dataMask from 'src/dataMask/reducer';\nimport reports from 'src/reports/reducers/reports';\nimport dashboardInfo from 'src/dashboard/reducers/dashboardInfo';\nimport dashboardState from 'src/dashboard/reducers/dashboardState';\nimport dashboardFilters from 'src/dashboard/reducers/dashboardFilters';\nimport nativeFilters from 'src/dashboard/reducers/nativeFilters';\nimport dashboardDatasources from 'src/dashboard/reducers/datasources';\nimport sliceEntities from 'src/dashboard/reducers/sliceEntities';\nimport dashboardLayout from 'src/dashboard/reducers/undoableDashboardLayout';\nimport logger from 'src/middleware/loggerMiddleware';\nimport saveModal from 'src/explore/reducers/saveModalReducer';\nimport explore from 'src/explore/reducers/exploreReducer';\nimport exploreDatasources from 'src/explore/reducers/datasourcesReducer';\nimport { DatasourcesAction } from 'src/dashboard/actions/datasources';\nimport shortid from 'shortid';\nimport getBootstrapData from 'src/utils/getBootstrapData';\n// Some reducers don't do anything, and redux is just used to reference the initial \"state\".\n// This may change later, as the client application takes on more responsibilities.\nconst noopReducer = (initialState) => function (state) {if (state === void 0) {state = initialState;}return state;};\nconst bootstrapData = getBootstrapData();\nexport const USER_LOADED = 'USER_LOADED';\nconst userReducer = function (user, action) {if (user === void 0) {user = bootstrapData.user || {};}\n  if (action.type === USER_LOADED) {\n    return action.user;\n  }\n  return user;\n};\nconst getMiddleware = (getDefaultMiddleware) => process.env.REDUX_DEFAULT_MIDDLEWARE ?\ngetDefaultMiddleware({\n  immutableCheck: {\n    warnAfter: 200 },\n\n  serializableCheck: {\n    // Ignores AbortController instances\n    ignoredActionPaths: [/queryController/g],\n    ignoredPaths: [/queryController/g],\n    warnAfter: 200 } }).\n\nconcat(logger, api.middleware) :\n[thunk, logger, api.middleware];\n// TODO: This reducer is a combination of the Dashboard and Explore reducers.\n// The correct way of handling this is to unify the actions and reducers from both\n// modules in shared files. This involves a big refactor to unify the parameter types\n// and move files around. We should tackle this in a specific PR.\nconst CombinedDatasourceReducers = (datasources, action) => {\n  if (action.type === DatasourcesAction.SET_DATASOURCES) {\n    return dashboardDatasources(datasources, action);\n  }\n  return exploreDatasources(datasources, action);\n};\nconst reducers = {\n  messageToasts: messageToastReducer,\n  common: noopReducer(bootstrapData.common),\n  user: userReducer,\n  impressionId: noopReducer(shortid.generate()),\n  charts,\n  datasources: CombinedDatasourceReducers,\n  dashboardInfo,\n  dashboardFilters,\n  dataMask,\n  nativeFilters,\n  dashboardState,\n  dashboardLayout,\n  sliceEntities,\n  reports,\n  saveModal,\n  explore };\n\n/* In some cases the jinja template injects two seperate React apps into basic.html\n * One for the top navigation Menu and one for the application below the Menu\n * The first app to connect to the Redux debugger wins which is the menu blocking\n * the application from being able to connect to the redux debugger.\n * setupStore with disableDebugger true enables the menu.tsx component to avoid connecting\n * to redux debugger so the application can connect to redux debugger\n */\nexport function setupStore(_temp) {let { disableDebugger = false, initialState = {}, rootReducers = reducers, ...overrides } = _temp === void 0 ? {} : _temp;\n  return configureStore({\n    preloadedState: initialState,\n    reducer: {\n      [api.reducerPath]: api.reducer,\n      ...rootReducers },\n\n    middleware: getMiddleware,\n    devTools: process.env.WEBPACK_MODE === 'development' && !disableDebugger,\n    ...overrides });\n\n}\nexport const store = setupStore();","map":{"version":3,"mappings":"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","names":["configureStore","thunk","api","messageToastReducer","charts","dataMask","reports","dashboardInfo","dashboardState","dashboardFilters","nativeFilters","dashboardDatasources","sliceEntities","dashboardLayout","logger","saveModal","explore","exploreDatasources","DatasourcesAction","shortid","getBootstrapData","noopReducer","initialState","state","bootstrapData","USER_LOADED","userReducer","user","action","type","getMiddleware","process","env","REDUX_DEFAULT_MIDDLEWARE","getDefaultMiddleware","immutableCheck","warnAfter","serializableCheck","ignoredActionPaths","ignoredPaths","concat","middleware","CombinedDatasourceReducers","datasources","SET_DATASOURCES","reducers","messageToasts","common","impressionId","generate","setupStore","disableDebugger","rootReducers","overrides","preloadedState","reducer","reducerPath","devTools","WEBPACK_MODE","store"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/views/store.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { configureStore, ConfigureStoreOptions, Store } from '@reduxjs/toolkit';\nimport thunk from 'redux-thunk';\nimport { api } from 'src/hooks/apiResources/queryApi';\nimport messageToastReducer from 'src/components/MessageToasts/reducers';\nimport charts from 'src/components/Chart/chartReducer';\nimport dataMask from 'src/dataMask/reducer';\nimport reports from 'src/reports/reducers/reports';\nimport dashboardInfo from 'src/dashboard/reducers/dashboardInfo';\nimport dashboardState from 'src/dashboard/reducers/dashboardState';\nimport dashboardFilters from 'src/dashboard/reducers/dashboardFilters';\nimport nativeFilters from 'src/dashboard/reducers/nativeFilters';\nimport dashboardDatasources from 'src/dashboard/reducers/datasources';\nimport sliceEntities from 'src/dashboard/reducers/sliceEntities';\nimport dashboardLayout from 'src/dashboard/reducers/undoableDashboardLayout';\nimport logger from 'src/middleware/loggerMiddleware';\nimport saveModal from 'src/explore/reducers/saveModalReducer';\nimport explore from 'src/explore/reducers/exploreReducer';\nimport exploreDatasources from 'src/explore/reducers/datasourcesReducer';\nimport { DatasourcesState } from 'src/dashboard/types';\nimport {\n  DatasourcesActionPayload,\n  DatasourcesAction,\n} from 'src/dashboard/actions/datasources';\nimport shortid from 'shortid';\nimport {\n  BootstrapUser,\n  UndefinedUser,\n  UserWithPermissionsAndRoles,\n} from 'src/types/bootstrapTypes';\nimport { AnyDatasourcesAction } from 'src/explore/actions/datasourcesActions';\nimport { HydrateExplore } from 'src/explore/actions/hydrateExplore';\nimport getBootstrapData from 'src/utils/getBootstrapData';\nimport { Dataset } from '@superset-ui/chart-controls';\n\n// Some reducers don't do anything, and redux is just used to reference the initial \"state\".\n// This may change later, as the client application takes on more responsibilities.\nconst noopReducer =\n  <STATE = unknown>(initialState: STATE) =>\n  (state: STATE = initialState) =>\n    state;\n\nconst bootstrapData = getBootstrapData();\n\nexport const USER_LOADED = 'USER_LOADED';\n\nexport type UserLoadedAction = {\n  type: typeof USER_LOADED;\n  user: UserWithPermissionsAndRoles;\n};\n\nconst userReducer = (\n  user = bootstrapData.user || {},\n  action: UserLoadedAction,\n): BootstrapUser | UndefinedUser => {\n  if (action.type === USER_LOADED) {\n    return action.user;\n  }\n  return user;\n};\n\nconst getMiddleware: ConfigureStoreOptions['middleware'] =\n  getDefaultMiddleware =>\n    process.env.REDUX_DEFAULT_MIDDLEWARE\n      ? getDefaultMiddleware({\n          immutableCheck: {\n            warnAfter: 200,\n          },\n          serializableCheck: {\n            // Ignores AbortController instances\n            ignoredActionPaths: [/queryController/g],\n            ignoredPaths: [/queryController/g],\n            warnAfter: 200,\n          },\n        }).concat(logger, api.middleware)\n      : [thunk, logger, api.middleware];\n\n// TODO: This reducer is a combination of the Dashboard and Explore reducers.\n// The correct way of handling this is to unify the actions and reducers from both\n// modules in shared files. This involves a big refactor to unify the parameter types\n// and move files around. We should tackle this in a specific PR.\nconst CombinedDatasourceReducers = (\n  datasources: DatasourcesState | undefined | { [key: string]: Dataset },\n  action: DatasourcesActionPayload | AnyDatasourcesAction | HydrateExplore,\n) => {\n  if (action.type === DatasourcesAction.SET_DATASOURCES) {\n    return dashboardDatasources(\n      datasources as DatasourcesState | undefined,\n      action as DatasourcesActionPayload,\n    );\n  }\n  return exploreDatasources(\n    datasources as { [key: string]: Dataset },\n    action as AnyDatasourcesAction | HydrateExplore,\n  );\n};\n\nconst reducers = {\n  messageToasts: messageToastReducer,\n  common: noopReducer(bootstrapData.common),\n  user: userReducer,\n  impressionId: noopReducer(shortid.generate()),\n  charts,\n  datasources: CombinedDatasourceReducers,\n  dashboardInfo,\n  dashboardFilters,\n  dataMask,\n  nativeFilters,\n  dashboardState,\n  dashboardLayout,\n  sliceEntities,\n  reports,\n  saveModal,\n  explore,\n};\n\n/* In some cases the jinja template injects two seperate React apps into basic.html\n * One for the top navigation Menu and one for the application below the Menu\n * The first app to connect to the Redux debugger wins which is the menu blocking\n * the application from being able to connect to the redux debugger.\n * setupStore with disableDebugger true enables the menu.tsx component to avoid connecting\n * to redux debugger so the application can connect to redux debugger\n */\nexport function setupStore({\n  disableDebugger = false,\n  initialState = {},\n  rootReducers = reducers,\n  ...overrides\n}: {\n  disableDebugger?: boolean;\n  initialState?: ConfigureStoreOptions['preloadedState'];\n  rootReducers?: ConfigureStoreOptions['reducer'];\n} & Partial<ConfigureStoreOptions> = {}): Store {\n  return configureStore({\n    preloadedState: initialState,\n    reducer: {\n      [api.reducerPath]: api.reducer,\n      ...rootReducers,\n    },\n    middleware: getMiddleware,\n    devTools: process.env.WEBPACK_MODE === 'development' && !disableDebugger,\n    ...overrides,\n  });\n}\n\nexport const store: Store = setupStore();\nexport type RootState = ReturnType<typeof store.getState>;\n"]},"metadata":{},"sourceType":"module"}