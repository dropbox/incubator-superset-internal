{"ast":null,"code":"import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useSelector } from 'react-redux';\nimport { useMemo } from 'react';\nimport { isFilterDivider } from '@superset-ui/core';\nimport { TAB_TYPE } from '../../util/componentTypes';\nconst defaultFilterConfiguration = [];\nexport function useFilterConfiguration() {\n  return useSelector((state) => {var _state$dashboardInfo, _state$dashboardInfo$;return ((_state$dashboardInfo = state.dashboardInfo) == null ? void 0 : (_state$dashboardInfo$ = _state$dashboardInfo.metadata) == null ? void 0 : _state$dashboardInfo$.native_filter_configuration) ||\n    defaultFilterConfiguration;});\n}\n/**\n * returns the dashboard's filter configuration,\n * converted into a map of id -> filter\n */\nexport function useFilterConfigMap() {\n  const filterConfig = useFilterConfiguration();\n  return useMemo(() => filterConfig.reduce((acc, filter) => {\n    acc[filter.id] = filter;\n    return acc;\n  }, {}), [filterConfig]);\n}\nexport function useDashboardLayout() {\n  return useSelector((state) => {var _state$dashboardLayou;return (_state$dashboardLayou = state.dashboardLayout) == null ? void 0 : _state$dashboardLayou.present;});\n}\nexport function useDashboardHasTabs() {\n  const dashboardLayout = useDashboardLayout();\n  return useMemo(() => Object.values(dashboardLayout).some((element) => element.type === TAB_TYPE), [dashboardLayout]);\n}\nfunction useActiveDashboardTabs() {\n  return useSelector((state) => {var _state$dashboardState;return (_state$dashboardState = state.dashboardState) == null ? void 0 : _state$dashboardState.activeTabs;});\n}\nfunction useSelectChartTabParents() {\n  const dashboardLayout = useDashboardLayout();\n  return (chartId) => {\n    const chartLayoutItem = Object.values(dashboardLayout).find((layoutItem) => {var _layoutItem$meta;return ((_layoutItem$meta = layoutItem.meta) == null ? void 0 : _layoutItem$meta.chartId) === chartId;});\n    return chartLayoutItem == null ? void 0 : chartLayoutItem.parents.filter((parent) => dashboardLayout[parent].type === TAB_TYPE);\n  };\n}\nfunction useIsFilterInScope() {\n  const activeTabs = useActiveDashboardTabs();\n  const selectChartTabParents = useSelectChartTabParents();\n  // Filter is in scope if any of it's charts is visible.\n  // Chart is visible if it's placed in an active tab tree or if it's not attached to any tab.\n  // Chart is in an active tab tree if all of it's ancestors of type TAB are active\n  // Dividers are always in scope\n  return (filter) => {var _filter$chartsInScope;return isFilterDivider(filter) ||\n    'chartsInScope' in filter && ((_filter$chartsInScope =\n    filter.chartsInScope) == null ? void 0 : _filter$chartsInScope.some((chartId) => {\n      const tabParents = selectChartTabParents(chartId);\n      return (tabParents == null ? void 0 : tabParents.length) === 0 || (\n      tabParents == null ? void 0 : tabParents.every((tab) => _includesInstanceProperty(activeTabs).call(activeTabs, tab)));\n    }));};\n}\nexport function useSelectFiltersInScope(filters) {\n  const dashboardHasTabs = useDashboardHasTabs();\n  const isFilterInScope = useIsFilterInScope();\n  return useMemo(() => {\n    let filtersInScope = [];\n    const filtersOutOfScope = [];\n    // we check native filters scopes only on dashboards with tabs\n    if (!dashboardHasTabs) {\n      filtersInScope = filters;\n    } else\n    {\n      filters.forEach((filter) => {\n        const filterInScope = isFilterInScope(filter);\n        if (filterInScope) {\n          filtersInScope.push(filter);\n        } else\n        {\n          filtersOutOfScope.push(filter);\n        }\n      });\n    }\n    return [filtersInScope, filtersOutOfScope];\n  }, [filters, dashboardHasTabs, isFilterInScope]);\n}","map":{"version":3,"mappings":"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","names":["useSelector","useMemo","isFilterDivider","TAB_TYPE","defaultFilterConfiguration","useFilterConfiguration","dashboardInfo","metadata","native_filter_configuration","useFilterConfigMap","filterConfig","reduce","acc","filter","id","useDashboardLayout","state","dashboardLayout","present","useDashboardHasTabs","Object","values","some","element","type","useActiveDashboardTabs","dashboardState","activeTabs","useSelectChartTabParents","chartId","chartLayoutItem","find","meta","parents","parent","useIsFilterInScope","selectChartTabParents","chartsInScope","tabParents","length","every","tab","useSelectFiltersInScope","filters","dashboardHasTabs","isFilterInScope","filtersInScope","filtersOutOfScope","forEach","filterInScope","push"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/components/nativeFilters/state.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useSelector } from 'react-redux';\nimport { useMemo } from 'react';\nimport {\n  Filter,\n  FilterConfiguration,\n  Divider,\n  isFilterDivider,\n} from '@superset-ui/core';\nimport { ActiveTabs, DashboardLayout, RootState } from '../../types';\nimport { TAB_TYPE } from '../../util/componentTypes';\n\nconst defaultFilterConfiguration: Filter[] = [];\n\nexport function useFilterConfiguration() {\n  return useSelector<any, FilterConfiguration>(\n    state =>\n      state.dashboardInfo?.metadata?.native_filter_configuration ||\n      defaultFilterConfiguration,\n  );\n}\n\n/**\n * returns the dashboard's filter configuration,\n * converted into a map of id -> filter\n */\nexport function useFilterConfigMap() {\n  const filterConfig = useFilterConfiguration();\n  return useMemo(\n    () =>\n      filterConfig.reduce(\n        (acc: Record<string, Filter | Divider>, filter: Filter) => {\n          acc[filter.id] = filter;\n          return acc;\n        },\n        {} as Record<string, Filter | Divider>,\n      ),\n    [filterConfig],\n  );\n}\n\nexport function useDashboardLayout() {\n  return useSelector<any, DashboardLayout>(\n    state => state.dashboardLayout?.present,\n  );\n}\n\nexport function useDashboardHasTabs() {\n  const dashboardLayout = useDashboardLayout();\n  return useMemo(\n    () =>\n      Object.values(dashboardLayout).some(element => element.type === TAB_TYPE),\n    [dashboardLayout],\n  );\n}\n\nfunction useActiveDashboardTabs() {\n  return useSelector<RootState, ActiveTabs>(\n    state => state.dashboardState?.activeTabs,\n  );\n}\n\nfunction useSelectChartTabParents() {\n  const dashboardLayout = useDashboardLayout();\n  return (chartId: number) => {\n    const chartLayoutItem = Object.values(dashboardLayout).find(\n      layoutItem => layoutItem.meta?.chartId === chartId,\n    );\n    return chartLayoutItem?.parents.filter(\n      (parent: string) => dashboardLayout[parent].type === TAB_TYPE,\n    );\n  };\n}\n\nfunction useIsFilterInScope() {\n  const activeTabs = useActiveDashboardTabs();\n  const selectChartTabParents = useSelectChartTabParents();\n\n  // Filter is in scope if any of it's charts is visible.\n  // Chart is visible if it's placed in an active tab tree or if it's not attached to any tab.\n  // Chart is in an active tab tree if all of it's ancestors of type TAB are active\n  // Dividers are always in scope\n  return (filter: Filter | Divider) =>\n    isFilterDivider(filter) ||\n    ('chartsInScope' in filter &&\n      filter.chartsInScope?.some((chartId: number) => {\n        const tabParents = selectChartTabParents(chartId);\n        return (\n          tabParents?.length === 0 ||\n          tabParents?.every(tab => activeTabs.includes(tab))\n        );\n      }));\n}\n\nexport function useSelectFiltersInScope(filters: (Filter | Divider)[]) {\n  const dashboardHasTabs = useDashboardHasTabs();\n  const isFilterInScope = useIsFilterInScope();\n\n  return useMemo(() => {\n    let filtersInScope: (Filter | Divider)[] = [];\n    const filtersOutOfScope: (Filter | Divider)[] = [];\n\n    // we check native filters scopes only on dashboards with tabs\n    if (!dashboardHasTabs) {\n      filtersInScope = filters;\n    } else {\n      filters.forEach(filter => {\n        const filterInScope = isFilterInScope(filter);\n\n        if (filterInScope) {\n          filtersInScope.push(filter);\n        } else {\n          filtersOutOfScope.push(filter);\n        }\n      });\n    }\n    return [filtersInScope, filtersOutOfScope];\n  }, [filters, dashboardHasTabs, isFilterInScope]);\n}\n"]},"metadata":{},"sourceType":"module"}