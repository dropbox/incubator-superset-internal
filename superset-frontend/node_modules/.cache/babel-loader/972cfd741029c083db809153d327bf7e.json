{"ast":null,"code":"/**\n * Find Option value that matches a possibly string value.\n *\n * Translate possible string values to `OptionType` objects, fallback to value\n * itself if cannot be found in the options list.\n *\n * Always returns an array.\n */\nexport function findValue(value, options, valueKey) {if (options === void 0) {options = [];}if (valueKey === void 0) {valueKey = 'value';}\n  if (value === null || value === undefined || value === '') {\n    return [];\n  }\n  const isGroup = Array.isArray((options[0] || {}).options);\n  const flatOptions = isGroup ?\n  options.flatMap((x) => x.options || []) :\n  options;\n  const find = (val) => {\n    const realVal = (value || {}).hasOwnProperty(valueKey) ?\n    val[valueKey] :\n    val;\n    return flatOptions.find((x) => x === realVal || x[valueKey] === realVal) || val;\n  };\n  // If value is a single string, must return an Array so `cleanValue` won't be\n  // empty: https://github.com/JedWatson/react-select/blob/32ad5c040bdd96cd1ca71010c2558842d684629c/packages/react-select/src/utils.js#L64\n  return (Array.isArray(value) ? value : [value]).map(find);\n}","map":{"version":3,"mappings":"AAyBA;;;;;;;;AAQA,OAAM,SAAUA,SAAV,CACJC,KADI,EAEJC,OAFI,EAGJC,QAHI,EAGc,KADlBD,OACkB,cADlBA,OACkB,GADkD,EAClD,MAAlBC,QAAkB,cAAlBA,QAAkB,GAAP,OAAO;EAElB,IAAIF,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKG,SAA5B,IAAyCH,KAAK,KAAK,EAAvD,EAA2D;IACzD,OAAO,EAAP;EACD;EACD,MAAMI,OAAO,GAAGC,KAAK,CAACC,OAAN,CAAc,CAACL,OAAO,CAAC,CAAD,CAAP,IAAc,EAAf,EAAmBA,OAAjC,CAAhB;EACA,MAAMM,WAAW,GAAGH,OAAO;EACtBH,OAA0C,CAACO,OAA3C,CAAmD,EAAC,KAAIC,CAAC,CAACR,OAAF,IAAa,EAArE,CADsB;EAEtBA,OAFL;EAIA,MAAMS,IAAI,GAAG,CAACC,GAAD,KAAoB;IAC/B,MAAMC,OAAO,GAAG,CAACZ,KAAK,IAAI,EAAV,EAAca,cAAd,CAA6BX,QAA7B;IACZS,GAAG,CAACT,QAAD,CADS;IAEZS,GAFJ;IAGA,OACEJ,WAAW,CAACG,IAAZ,CAAiB,EAAC,KAAID,CAAC,KAAKG,OAAN,IAAiBH,CAAC,CAACP,QAAD,CAAD,KAAgBU,OAAvD,KAAmED,GADrE;EAGD,CAPD;EASA;EACA;EACA,OAAO,CAACN,KAAK,CAACC,OAAN,CAAcN,KAAd,IAAuBA,KAAvB,GAA+B,CAACA,KAAD,CAAhC,EAAyCc,GAAzC,CAA6CJ,IAA7C,CAAP;AACD","names":["findValue","value","options","valueKey","undefined","isGroup","Array","isArray","flatOptions","flatMap","x","find","val","realVal","hasOwnProperty","map"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/components/DeprecatedSelect/utils.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  OptionTypeBase,\n  ValueType,\n  OptionsType,\n  GroupedOptionsType,\n} from 'react-select';\n\n/**\n * Find Option value that matches a possibly string value.\n *\n * Translate possible string values to `OptionType` objects, fallback to value\n * itself if cannot be found in the options list.\n *\n * Always returns an array.\n */\nexport function findValue<OptionType extends OptionTypeBase>(\n  value: ValueType<OptionType> | string,\n  options: GroupedOptionsType<OptionType> | OptionsType<OptionType> = [],\n  valueKey = 'value',\n): OptionType[] {\n  if (value === null || value === undefined || value === '') {\n    return [];\n  }\n  const isGroup = Array.isArray((options[0] || {}).options);\n  const flatOptions = isGroup\n    ? (options as GroupedOptionsType<OptionType>).flatMap(x => x.options || [])\n    : (options as OptionsType<OptionType>);\n\n  const find = (val: OptionType) => {\n    const realVal = (value || {}).hasOwnProperty(valueKey)\n      ? val[valueKey]\n      : val;\n    return (\n      flatOptions.find(x => x === realVal || x[valueKey] === realVal) || val\n    );\n  };\n\n  // If value is a single string, must return an Array so `cleanValue` won't be\n  // empty: https://github.com/JedWatson/react-select/blob/32ad5c040bdd96cd1ca71010c2558842d684629c/packages/react-select/src/utils.js#L64\n  return (Array.isArray(value) ? value : [value]).map(find);\n}\n"]},"metadata":{},"sourceType":"module"}