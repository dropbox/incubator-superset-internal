{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { buildQueryContext, GenericDataType, getColumnLabel, isPhysicalColumn } from '@superset-ui/core';\nimport { DEFAULT_FORM_DATA } from './types';\nconst buildQuery = (formData, options) => {\n  const { search, coltypeMap } = (options == null ? void 0 : options.ownState) || {};\n  const { sortAscending, sortMetric } = { ...DEFAULT_FORM_DATA, ...formData };\n  return buildQueryContext(formData, (baseQueryObject) => {\n    const { columns = [], filters = [] } = baseQueryObject;\n    const extraFilters = [];\n    if (search) {\n      columns.filter(isPhysicalColumn).forEach((column) => {\n        const label = getColumnLabel(column);\n        if (coltypeMap[label] === GenericDataType.STRING ||\n        coltypeMap[label] === GenericDataType.NUMERIC &&\n        !Number.isNaN(Number(search))) {\n          extraFilters.push({\n            col: column,\n            op: 'ILIKE',\n            val: `%${search}%` });\n\n        }\n      });\n    }\n    const sortColumns = sortMetric ? [sortMetric] : columns;\n    const query = [\n    {\n      ...baseQueryObject,\n      columns,\n      metrics: sortMetric ? [sortMetric] : [],\n      filters: filters.concat(extraFilters),\n      orderby: sortMetric || sortAscending !== undefined ?\n      sortColumns.map((column) => [column, !!sortAscending]) :\n      [] }];\n\n\n    return query;\n  });\n};\nexport default buildQuery;","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,SACEA,iBADF,EAEEC,eAFF,EAGEC,cAHF,EAIEC,gBAJF,QAQO,mBARP;AASA,SAASC,iBAAT,QAAmE,SAAnE;AAEA,MAAMC,UAAU,GAAgD,CAC9DC,QAD8D,EAE9DC,OAF8D,KAG5D;EACF,MAAM,EAAEC,MAAF,EAAUC,UAAV,KAAyB,QAAO,QAAP,mBAAO,CAAEC,QAAT,KAAqB,EAApD;EACA,MAAM,EAAEC,aAAF,EAAiBC,UAAjB,KAAgC,EAAE,GAAGR,iBAAL,EAAwB,GAAGE,QAA3B,EAAtC;EACA,OAAON,iBAAiB,CAACM,QAAD,EAAW,gBAAe,KAAG;IACnD,MAAM,EAAEO,OAAO,GAAG,EAAZ,EAAgBC,OAAO,GAAG,EAA1B,KAAiCC,eAAvC;IACA,MAAMC,YAAY,GAA8B,EAAhD;IACA,IAAIR,MAAJ,EAAY;MACVK,OAAO,CAACI,MAAR,CAAed,gBAAf,EAAiCe,OAAjC,CAAyC,OAAM,KAAG;QAChD,MAAMC,KAAK,GAAGjB,cAAc,CAACkB,MAAD,CAA5B;QACA,IACEX,UAAU,CAACU,KAAD,CAAV,KAAsBlB,eAAe,CAACoB,MAAtC;QACCZ,UAAU,CAACU,KAAD,CAAV,KAAsBlB,eAAe,CAACqB,OAAtC;QACC,CAACC,MAAM,CAACC,KAAP,CAAaD,MAAM,CAACf,MAAD,CAAnB,CAHL,EAIE;UACAQ,YAAY,CAACS,IAAb,CAAkB;YAChBC,GAAG,EAAEN,MADW;YAEhBO,EAAE,EAAE,OAFY;YAGhBC,GAAG,EAAE,IAAIpB,MAAM,GAHC,EAAlB;;QAKD;MACF,CAbD;IAcD;IAED,MAAMqB,WAAW,GAAGjB,UAAU,GAAG,CAACA,UAAD,CAAH,GAAkBC,OAAhD;IACA,MAAMiB,KAAK,GAAkB;IAC3B;MACE,GAAGf,eADL;MAEEF,OAFF;MAGEkB,OAAO,EAAEnB,UAAU,GAAG,CAACA,UAAD,CAAH,GAAkB,EAHvC;MAIEE,OAAO,EAAEA,OAAO,CAACkB,MAAR,CAAehB,YAAf,CAJX;MAKEiB,OAAO,EACLrB,UAAU,IAAID,aAAa,KAAKuB,SAAhC;MACIL,WAAW,CAACM,GAAZ,CAAgB,OAAM,KAAI,CAACf,MAAD,EAAS,CAAC,CAACT,aAAX,CAA1B,CADJ;MAEI,EARR,EAD2B,CAA7B;;;IAYA,OAAOmB,KAAP;EACD,CAlCuB,CAAxB;AAmCD,CAzCD;AA2CA,eAAezB,UAAf","names":["buildQueryContext","GenericDataType","getColumnLabel","isPhysicalColumn","DEFAULT_FORM_DATA","buildQuery","formData","options","search","coltypeMap","ownState","sortAscending","sortMetric","columns","filters","baseQueryObject","extraFilters","filter","forEach","label","column","STRING","NUMERIC","Number","isNaN","push","col","op","val","sortColumns","query","metrics","concat","orderby","undefined","map"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/filters/components/Select/buildQuery.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  buildQueryContext,\n  GenericDataType,\n  getColumnLabel,\n  isPhysicalColumn,\n  QueryObject,\n  QueryObjectFilterClause,\n  BuildQuery,\n} from '@superset-ui/core';\nimport { DEFAULT_FORM_DATA, PluginFilterSelectQueryFormData } from './types';\n\nconst buildQuery: BuildQuery<PluginFilterSelectQueryFormData> = (\n  formData: PluginFilterSelectQueryFormData,\n  options,\n) => {\n  const { search, coltypeMap } = options?.ownState || {};\n  const { sortAscending, sortMetric } = { ...DEFAULT_FORM_DATA, ...formData };\n  return buildQueryContext(formData, baseQueryObject => {\n    const { columns = [], filters = [] } = baseQueryObject;\n    const extraFilters: QueryObjectFilterClause[] = [];\n    if (search) {\n      columns.filter(isPhysicalColumn).forEach(column => {\n        const label = getColumnLabel(column);\n        if (\n          coltypeMap[label] === GenericDataType.STRING ||\n          (coltypeMap[label] === GenericDataType.NUMERIC &&\n            !Number.isNaN(Number(search)))\n        ) {\n          extraFilters.push({\n            col: column,\n            op: 'ILIKE',\n            val: `%${search}%`,\n          });\n        }\n      });\n    }\n\n    const sortColumns = sortMetric ? [sortMetric] : columns;\n    const query: QueryObject[] = [\n      {\n        ...baseQueryObject,\n        columns,\n        metrics: sortMetric ? [sortMetric] : [],\n        filters: filters.concat(extraFilters),\n        orderby:\n          sortMetric || sortAscending !== undefined\n            ? sortColumns.map(column => [column, !!sortAscending])\n            : [],\n      },\n    ];\n    return query;\n  });\n};\n\nexport default buildQuery;\n"]},"metadata":{},"sourceType":"module"}