{"ast":null,"code":"import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ensureIsArray, t, validateNonEmpty } from '@superset-ui/core';\nimport { getStandardizedControls, sections } from '@superset-ui/chart-controls';\nconst config = {\n  controlPanelSections: [\n  sections.legacyRegularTime,\n  {\n    label: t('Query'),\n    expanded: true,\n    controlSetRows: [\n    ['groupby'],\n    ['columns'],\n    ['metric'],\n    ['adhoc_filters'],\n    ['row_limit'],\n    [\n    {\n      name: 'sort_by_metric',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Sort by metric'),\n        description: t('Whether to sort results by the selected metric in descending order.') } }]] },\n\n\n\n\n\n  {\n    label: t('Chart Options'),\n    expanded: true,\n    controlSetRows: [['y_axis_format', null], ['color_scheme']] }],\n\n\n  controlOverrides: {\n    y_axis_format: {\n      label: t('Number format'),\n      description: t('Choose a number format') },\n\n    groupby: {\n      label: t('Source'),\n      multi: false,\n      validators: [validateNonEmpty],\n      description: t('Choose a source') },\n\n    columns: {\n      label: t('Target'),\n      multi: false,\n      validators: [validateNonEmpty],\n      description: t('Choose a target') } },\n\n\n  formDataOverrides: (formData) => {\n    const groupby = getStandardizedControls().\n    popAllColumns().\n    filter((col) => {var _context;return !_includesInstanceProperty(_context = ensureIsArray(formData.columns)).call(_context, col);});\n    return {\n      ...formData,\n      groupby,\n      metric: getStandardizedControls().shiftMetric() };\n\n  } };\n\nexport default config;","map":{"version":3,"mappings":"iGAAA;;;;;;;;;;;;;;;;;;AAkBA,SAASA,aAAT,EAAwBC,CAAxB,EAA2BC,gBAA3B,QAAmD,mBAAnD;AACA,SAEEC,uBAFF,EAGEC,QAHF,QAIO,6BAJP;AAMA,MAAMC,MAAM,GAAuB;EACjCC,oBAAoB,EAAE;EACpBF,QAAQ,CAACG,iBADW;EAEpB;IACEC,KAAK,EAAEP,CAAC,CAAC,OAAD,CADV;IAEEQ,QAAQ,EAAE,IAFZ;IAGEC,cAAc,EAAE;IACd,CAAC,SAAD,CADc;IAEd,CAAC,SAAD,CAFc;IAGd,CAAC,QAAD,CAHc;IAId,CAAC,eAAD,CAJc;IAKd,CAAC,WAAD,CALc;IAMd;IACE;MACEC,IAAI,EAAE,gBADR;MAEEN,MAAM,EAAE;QACNO,IAAI,EAAE,iBADA;QAENJ,KAAK,EAAEP,CAAC,CAAC,gBAAD,CAFF;QAGNY,WAAW,EAAEZ,CAAC,CACZ,qEADY,CAHR,EAFV,EADF,CANc,CAHlB,EAFoB;;;;;;EAyBpB;IACEO,KAAK,EAAEP,CAAC,CAAC,eAAD,CADV;IAEEQ,QAAQ,EAAE,IAFZ;IAGEC,cAAc,EAAE,CAAC,CAAC,eAAD,EAAkB,IAAlB,CAAD,EAA0B,CAAC,cAAD,CAA1B,CAHlB,EAzBoB,CADW;;;EAgCjCI,gBAAgB,EAAE;IAChBC,aAAa,EAAE;MACbP,KAAK,EAAEP,CAAC,CAAC,eAAD,CADK;MAEbY,WAAW,EAAEZ,CAAC,CAAC,wBAAD,CAFD,EADC;;IAKhBe,OAAO,EAAE;MACPR,KAAK,EAAEP,CAAC,CAAC,QAAD,CADD;MAEPgB,KAAK,EAAE,KAFA;MAGPC,UAAU,EAAE,CAAChB,gBAAD,CAHL;MAIPW,WAAW,EAAEZ,CAAC,CAAC,iBAAD,CAJP,EALO;;IAWhBkB,OAAO,EAAE;MACPX,KAAK,EAAEP,CAAC,CAAC,QAAD,CADD;MAEPgB,KAAK,EAAE,KAFA;MAGPC,UAAU,EAAE,CAAChB,gBAAD,CAHL;MAIPW,WAAW,EAAEZ,CAAC,CAAC,iBAAD,CAJP,EAXO,EAhCe;;;EAkDjCmB,iBAAiB,EAAE,SAAQ,KAAG;IAC5B,MAAMJ,OAAO,GAAGb,uBAAuB;IACpCkB,aADa;IAEbC,MAFa,CAEN,IAAG,0BAAI,CAAC,kDAAa,CAACC,QAAQ,CAACJ,OAAV,CAAb,iBAAyCK,GAAzC,CAAL,EAFG,CAAhB;IAGA,OAAO;MACL,GAAGD,QADE;MAELP,OAFK;MAGLS,MAAM,EAAEtB,uBAAuB,GAAGuB,WAA1B,EAHH,EAAP;;EAKD,CA3DgC,EAAnC;;AA8DA,eAAerB,MAAf","names":["ensureIsArray","t","validateNonEmpty","getStandardizedControls","sections","config","controlPanelSections","legacyRegularTime","label","expanded","controlSetRows","name","type","description","controlOverrides","y_axis_format","groupby","multi","validators","columns","formDataOverrides","popAllColumns","filter","formData","col","metric","shiftMetric"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/plugins/legacy-plugin-chart-chord/src/controlPanel.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ensureIsArray, t, validateNonEmpty } from '@superset-ui/core';\nimport {\n  ControlPanelConfig,\n  getStandardizedControls,\n  sections,\n} from '@superset-ui/chart-controls';\n\nconst config: ControlPanelConfig = {\n  controlPanelSections: [\n    sections.legacyRegularTime,\n    {\n      label: t('Query'),\n      expanded: true,\n      controlSetRows: [\n        ['groupby'],\n        ['columns'],\n        ['metric'],\n        ['adhoc_filters'],\n        ['row_limit'],\n        [\n          {\n            name: 'sort_by_metric',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Sort by metric'),\n              description: t(\n                'Whether to sort results by the selected metric in descending order.',\n              ),\n            },\n          },\n        ],\n      ],\n    },\n    {\n      label: t('Chart Options'),\n      expanded: true,\n      controlSetRows: [['y_axis_format', null], ['color_scheme']],\n    },\n  ],\n  controlOverrides: {\n    y_axis_format: {\n      label: t('Number format'),\n      description: t('Choose a number format'),\n    },\n    groupby: {\n      label: t('Source'),\n      multi: false,\n      validators: [validateNonEmpty],\n      description: t('Choose a source'),\n    },\n    columns: {\n      label: t('Target'),\n      multi: false,\n      validators: [validateNonEmpty],\n      description: t('Choose a target'),\n    },\n  },\n  formDataOverrides: formData => {\n    const groupby = getStandardizedControls()\n      .popAllColumns()\n      .filter(col => !ensureIsArray(formData.columns).includes(col));\n    return {\n      ...formData,\n      groupby,\n      metric: getStandardizedControls().shiftMetric(),\n    };\n  },\n};\n\nexport default config;\n"]},"metadata":{},"sourceType":"module"}