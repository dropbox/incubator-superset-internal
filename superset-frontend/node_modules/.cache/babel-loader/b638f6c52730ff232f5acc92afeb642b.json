{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport Dashboard from 'src/dashboard/components/Dashboard';\nimport { addSliceToDashboard, removeSliceFromDashboard } from 'src/dashboard/actions/dashboardState';\nimport { setDatasources } from 'src/dashboard/actions/datasources';\nimport { triggerQuery } from 'src/components/Chart/chartAction';\nimport { logEvent } from 'src/logger/actions';\nimport { getActiveFilters } from 'src/dashboard/util/activeDashboardFilters';\nimport { getAllActiveFilters, getRelevantDataMask } from 'src/dashboard/util/activeAllDashboardFilters';\nimport { clearDataMaskState } from '../../dataMask/actions';\nfunction mapStateToProps(state) {var _dashboardInfo$common, _dashboardInfo$common2, _dashboardInfo$common3, _dashboardInfo$metada, _dashboardInfo$metada2;\n  const { datasources, sliceEntities, charts, dataMask, dashboardInfo, dashboardState, dashboardLayout, impressionId, nativeFilters } = state;\n  return {\n    initMessages: (_dashboardInfo$common = dashboardInfo.common) == null ? void 0 : _dashboardInfo$common.flash_messages,\n    timeout: (_dashboardInfo$common2 = dashboardInfo.common) == null ? void 0 : (_dashboardInfo$common3 = _dashboardInfo$common2.conf) == null ? void 0 : _dashboardInfo$common3.SUPERSET_WEBSERVER_TIMEOUT,\n    userId: dashboardInfo.userId,\n    dashboardInfo,\n    dashboardState,\n    charts,\n    datasources,\n    // filters prop: a map structure for all the active filter_box's values and scope in this dashboard,\n    // for each filter field. map key is [chartId_column]\n    // When dashboard is first loaded into browser,\n    // its value is from preselect_filters that dashboard owner saved in dashboard's meta data\n    // When user start interacting with dashboard, it will be user picked values from all filter_box\n    activeFilters: {\n      ...getActiveFilters(),\n      ...getAllActiveFilters({\n        // eslint-disable-next-line camelcase\n        chartConfiguration: (_dashboardInfo$metada = dashboardInfo.metadata) == null ? void 0 : _dashboardInfo$metada.chart_configuration,\n        nativeFilters: nativeFilters.filters,\n        dataMask,\n        allSliceIds: dashboardState.sliceIds }) },\n\n\n    chartConfiguration: (_dashboardInfo$metada2 = dashboardInfo.metadata) == null ? void 0 : _dashboardInfo$metada2.chart_configuration,\n    ownDataCharts: getRelevantDataMask(dataMask, 'ownState'),\n    slices: sliceEntities.slices,\n    layout: dashboardLayout.present,\n    impressionId };\n\n}\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators({\n      setDatasources,\n      clearDataMaskState,\n      addSliceToDashboard,\n      removeSliceFromDashboard,\n      triggerQuery,\n      logEvent },\n    dispatch) };\n\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,SAASA,kBAAT,QAA6C,OAA7C;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,SAAP,MAAsB,oCAAtB;AACA,SACEC,mBADF,EAEEC,wBAFF,QAGO,sCAHP;AAIA,SAASC,cAAT,QAA+B,mCAA/B;AAEA,SAASC,YAAT,QAA6B,kCAA7B;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,gBAAT,QAAiC,2CAAjC;AACA,SACEC,mBADF,EAEEC,mBAFF,QAGO,8CAHP;AAIA,SAASC,kBAAT,QAAmC,wBAAnC;AAEA,SAASC,eAAT,CAAyBC,KAAzB,EAAyC;EACvC,MAAM,EACJC,WADI,EAEJC,aAFI,EAGJC,MAHI,EAIJC,QAJI,EAKJC,aALI,EAMJC,cANI,EAOJC,eAPI,EAQJC,YARI,EASJC,aATI,KAUFT,KAVJ;EAYA,OAAO;IACLU,YAAY,2BAAEL,aAAa,CAACM,MAAhB,qBAAE,sBAAsBC,cAD/B;IAELC,OAAO,4BAAER,aAAa,CAACM,MAAhB,+CAAE,uBAAsBG,IAAxB,qBAAE,uBAA4BC,0BAFhC;IAGLC,MAAM,EAAEX,aAAa,CAACW,MAHjB;IAILX,aAJK;IAKLC,cALK;IAMLH,MANK;IAOLF,WAPK;IAQL;IACA;IACA;IACA;IACA;IACAgB,aAAa,EAAE;MACb,GAAGtB,gBAAgB,EADN;MAEb,GAAGC,mBAAmB,CAAC;QACrB;QACAsB,kBAAkB,2BAAEb,aAAa,CAACc,QAAhB,qBAAE,sBAAwBC,mBAFvB;QAGrBX,aAAa,EAAEA,aAAa,CAACY,OAHR;QAIrBjB,QAJqB;QAKrBkB,WAAW,EAAEhB,cAAc,CAACiB,QALP,EAAD,CAFT,EAbV;;;IAuBLL,kBAAkB,4BAAEb,aAAa,CAACc,QAAhB,qBAAE,uBAAwBC,mBAvBvC;IAwBLI,aAAa,EAAE3B,mBAAmB,CAACO,QAAD,EAAW,UAAX,CAxB7B;IAyBLqB,MAAM,EAAEvB,aAAa,CAACuB,MAzBjB;IA0BLC,MAAM,EAAEnB,eAAe,CAACoB,OA1BnB;IA2BLnB,YA3BK,EAAP;;AA6BD;AAED,SAASoB,kBAAT,CAA4BC,QAA5B,EAA8C;EAC5C,OAAO;IACLC,OAAO,EAAE3C,kBAAkB,CACzB;MACEK,cADF;MAEEM,kBAFF;MAGER,mBAHF;MAIEC,wBAJF;MAKEE,YALF;MAMEC,QANF,EADyB;IASzBmC,QATyB,CADtB,EAAP;;AAaD;AAED,eAAezC,OAAO,CAACW,eAAD,EAAkB6B,kBAAlB,CAAP,CAA6CvC,SAA7C,CAAf","names":["bindActionCreators","connect","Dashboard","addSliceToDashboard","removeSliceFromDashboard","setDatasources","triggerQuery","logEvent","getActiveFilters","getAllActiveFilters","getRelevantDataMask","clearDataMaskState","mapStateToProps","state","datasources","sliceEntities","charts","dataMask","dashboardInfo","dashboardState","dashboardLayout","impressionId","nativeFilters","initMessages","common","flash_messages","timeout","conf","SUPERSET_WEBSERVER_TIMEOUT","userId","activeFilters","chartConfiguration","metadata","chart_configuration","filters","allSliceIds","sliceIds","ownDataCharts","slices","layout","present","mapDispatchToProps","dispatch","actions"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/dashboard/containers/Dashboard.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport { RootState } from 'src/dashboard/types';\nimport Dashboard from 'src/dashboard/components/Dashboard';\nimport {\n  addSliceToDashboard,\n  removeSliceFromDashboard,\n} from 'src/dashboard/actions/dashboardState';\nimport { setDatasources } from 'src/dashboard/actions/datasources';\n\nimport { triggerQuery } from 'src/components/Chart/chartAction';\nimport { logEvent } from 'src/logger/actions';\nimport { getActiveFilters } from 'src/dashboard/util/activeDashboardFilters';\nimport {\n  getAllActiveFilters,\n  getRelevantDataMask,\n} from 'src/dashboard/util/activeAllDashboardFilters';\nimport { clearDataMaskState } from '../../dataMask/actions';\n\nfunction mapStateToProps(state: RootState) {\n  const {\n    datasources,\n    sliceEntities,\n    charts,\n    dataMask,\n    dashboardInfo,\n    dashboardState,\n    dashboardLayout,\n    impressionId,\n    nativeFilters,\n  } = state;\n\n  return {\n    initMessages: dashboardInfo.common?.flash_messages,\n    timeout: dashboardInfo.common?.conf?.SUPERSET_WEBSERVER_TIMEOUT,\n    userId: dashboardInfo.userId,\n    dashboardInfo,\n    dashboardState,\n    charts,\n    datasources,\n    // filters prop: a map structure for all the active filter_box's values and scope in this dashboard,\n    // for each filter field. map key is [chartId_column]\n    // When dashboard is first loaded into browser,\n    // its value is from preselect_filters that dashboard owner saved in dashboard's meta data\n    // When user start interacting with dashboard, it will be user picked values from all filter_box\n    activeFilters: {\n      ...getActiveFilters(),\n      ...getAllActiveFilters({\n        // eslint-disable-next-line camelcase\n        chartConfiguration: dashboardInfo.metadata?.chart_configuration,\n        nativeFilters: nativeFilters.filters,\n        dataMask,\n        allSliceIds: dashboardState.sliceIds,\n      }),\n    },\n    chartConfiguration: dashboardInfo.metadata?.chart_configuration,\n    ownDataCharts: getRelevantDataMask(dataMask, 'ownState'),\n    slices: sliceEntities.slices,\n    layout: dashboardLayout.present,\n    impressionId,\n  };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n  return {\n    actions: bindActionCreators(\n      {\n        setDatasources,\n        clearDataMaskState,\n        addSliceToDashboard,\n        removeSliceFromDashboard,\n        triggerQuery,\n        logEvent,\n      },\n      dispatch,\n    ),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);\n"]},"metadata":{},"sourceType":"module"}