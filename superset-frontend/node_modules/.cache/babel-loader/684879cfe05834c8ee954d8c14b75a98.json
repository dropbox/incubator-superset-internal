{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport rison from 'rison';\nimport moment from 'moment';\nimport { t } from '@superset-ui/core';\nimport TableLoader from '../../components/TableLoader';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport default class Favorites extends React.PureComponent {\n  renderSliceTable() {\n    const mutator = (payload) => payload.result.map((slice) => ({\n      slice: ___EmotionJSX(\"a\", { href: slice.slice_url }, slice.slice_name),\n      creator: ___EmotionJSX(\"a\", { href: slice.created_by_url }, slice.created_by_name),\n      favorited: moment.utc(slice.changed_on_dttm).fromNow(),\n      _favorited: slice.changed_on_dttm }));\n\n    const query = rison.encode({\n      filters: [\n      {\n        col: 'id',\n        opr: 'chart_is_favorite',\n        value: true }],\n\n\n      order_column: 'slice_name',\n      order_direction: 'asc',\n      page: 0,\n      page_size: 25 });\n\n    return ___EmotionJSX(TableLoader, { dataEndpoint: `/api/v1/chart/?q=${query}`, className: \"table-condensed\", columns: ['slice', 'creator', 'favorited'], mutator: mutator, noDataText: t('No favorite charts yet, go click on stars!'), sortable: true });\n  }\n  renderDashboardTable() {\n    const search = [{ col: 'id', opr: 'dashboard_is_favorite', value: true }];\n    const query = rison.encode({\n      keys: ['none'],\n      columns: ['created_on_delta_humanized', 'dashboard_title', 'url'],\n      filters: search,\n      order_column: 'changed_on',\n      order_direction: 'desc',\n      page: 0,\n      page_size: 100 });\n\n    const mutator = (data) => data.result.map((dash) => ({\n      dashboard: ___EmotionJSX(\"a\", { href: dash.url }, dash.dashboard_title),\n      created: dash.created_on_delta_humanized,\n      _created: dash.created_on_delta_humanized }));\n\n    return ___EmotionJSX(TableLoader, { className: \"table-condensed\", mutator: mutator, dataEndpoint: `/api/v1/dashboard/?q=${query}`, noDataText: t('No favorite dashboards yet, go click on stars!'), columns: ['dashboard', 'creator', 'created'], sortable: true });\n  }\n  render() {\n    return ___EmotionJSX(\"div\", null,\n    ___EmotionJSX(\"h3\", null, t('Dashboards')),\n    this.renderDashboardTable(),\n    ___EmotionJSX(\"hr\", null),\n    ___EmotionJSX(\"h3\", null, t('Charts')),\n    this.renderSliceTable());\n\n  }}","map":{"version":3,"mappings":"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","names":["React","rison","moment","t","TableLoader","Favorites","PureComponent","renderSliceTable","mutator","payload","result","map","slice","slice_url","slice_name","creator","created_by_url","created_by_name","favorited","utc","changed_on_dttm","fromNow","_favorited","query","encode","filters","col","opr","value","order_column","order_direction","page","page_size","renderDashboardTable","search","keys","columns","data","dashboard","dash","url","dashboard_title","created","created_on_delta_humanized","_created","render"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/profile/components/Favorites.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport rison from 'rison';\nimport moment from 'moment';\nimport { t } from '@superset-ui/core';\nimport { DashboardResponse, BootstrapUser } from 'src/types/bootstrapTypes';\nimport TableLoader from '../../components/TableLoader';\nimport { Chart } from '../types';\n\ninterface FavoritesProps {\n  user: BootstrapUser;\n}\n\nexport default class Favorites extends React.PureComponent<FavoritesProps> {\n  renderSliceTable() {\n    const mutator = (payload: { result: Chart[] }) =>\n      payload.result.map(slice => ({\n        slice: <a href={slice.slice_url}>{slice.slice_name}</a>,\n        creator: <a href={slice.created_by_url}>{slice.created_by_name}</a>,\n        favorited: moment.utc(slice.changed_on_dttm).fromNow(),\n        _favorited: slice.changed_on_dttm,\n      }));\n\n    const query = rison.encode({\n      filters: [\n        {\n          col: 'id',\n          opr: 'chart_is_favorite',\n          value: true,\n        },\n      ],\n      order_column: 'slice_name',\n      order_direction: 'asc',\n      page: 0,\n      page_size: 25,\n    });\n\n    return (\n      <TableLoader\n        dataEndpoint={`/api/v1/chart/?q=${query}`}\n        className=\"table-condensed\"\n        columns={['slice', 'creator', 'favorited']}\n        mutator={mutator}\n        noDataText={t('No favorite charts yet, go click on stars!')}\n        sortable\n      />\n    );\n  }\n\n  renderDashboardTable() {\n    const search = [{ col: 'id', opr: 'dashboard_is_favorite', value: true }];\n    const query = rison.encode({\n      keys: ['none'],\n      columns: ['created_on_delta_humanized', 'dashboard_title', 'url'],\n      filters: search,\n      order_column: 'changed_on',\n      order_direction: 'desc',\n      page: 0,\n      page_size: 100,\n    });\n    const mutator = (data: DashboardResponse) =>\n      data.result.map(dash => ({\n        dashboard: <a href={dash.url}>{dash.dashboard_title}</a>,\n        created: dash.created_on_delta_humanized,\n        _created: dash.created_on_delta_humanized,\n      }));\n    return (\n      <TableLoader\n        className=\"table-condensed\"\n        mutator={mutator}\n        dataEndpoint={`/api/v1/dashboard/?q=${query}`}\n        noDataText={t('No favorite dashboards yet, go click on stars!')}\n        columns={['dashboard', 'creator', 'created']}\n        sortable\n      />\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>{t('Dashboards')}</h3>\n        {this.renderDashboardTable()}\n        <hr />\n        <h3>{t('Charts')}</h3>\n        {this.renderSliceTable()}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}