{"ast":null,"code":"import _isString from \"lodash/isString\";import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\"; /* eslint-disable camelcase */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {\nDatasourceType,\nSupersetClient,\nstyled,\nt,\nwithTheme } from\n'@superset-ui/core';\nimport { getTemporalColumns } from '@superset-ui/chart-controls';\nimport { getUrlParam } from 'src/utils/urlUtils';\nimport { AntdDropdown } from 'src/components';\nimport { Menu } from 'src/components/Menu';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport {\nChangeDatasourceModal,\nDatasourceModal } from\n'src/components/Datasource';\nimport Button from 'src/components/Button';\nimport ErrorAlert from 'src/components/ErrorMessage/ErrorAlert';\nimport WarningIconWithTooltip from 'src/components/WarningIconWithTooltip';\nimport { URL_PARAMS } from 'src/constants';\nimport { getDatasourceAsSaveableDataset } from 'src/utils/datasourceUtils';\nimport {\ncanUserAccessSqlLab,\nisUserAdmin } from\n'src/dashboard/util/permissionUtils';\nimport ModalTrigger from 'src/components/ModalTrigger';\nimport ViewQueryModalFooter from 'src/explore/components/controls/ViewQueryModalFooter';\nimport ViewQuery from 'src/explore/components/controls/ViewQuery';\nimport { SaveDatasetModal } from 'src/SqlLab/components/SaveDatasetModal';\nimport { safeStringify } from 'src/utils/safeStringify';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\n\nconst propTypes = {\n  actions: PropTypes.object.isRequired,\n  onChange: PropTypes.func,\n  value: PropTypes.string,\n  datasource: PropTypes.object.isRequired,\n  form_data: PropTypes.object.isRequired,\n  isEditable: PropTypes.bool,\n  onDatasourceSave: PropTypes.func };\n\n\nconst defaultProps = {\n  onChange: () => {},\n  onDatasourceSave: null,\n  value: null,\n  isEditable: true };\n\n\nconst Styles = styled.div`\n  .data-container {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    border-bottom: 1px solid ${(_ref) => {let { theme } = _ref;return theme.colors.grayscale.light2;}};\n    padding: ${(_ref2) => {let { theme } = _ref2;return 4 * theme.gridUnit;}}px;\n    padding-right: ${(_ref3) => {let { theme } = _ref3;return 2 * theme.gridUnit;}}px;\n  }\n  .error-alert {\n    margin: ${(_ref4) => {let { theme } = _ref4;return 2 * theme.gridUnit;}}px;\n  }\n  .ant-dropdown-trigger {\n    margin-left: ${(_ref5) => {let { theme } = _ref5;return 2 * theme.gridUnit;}}px;\n    box-shadow: none;\n    &:active {\n      box-shadow: none;\n    }\n  }\n  .btn-group .open .dropdown-toggle {\n    box-shadow: none;\n    &.button-default {\n      background: none;\n    }\n  }\n  i.angle {\n    color: ${(_ref6) => {let { theme } = _ref6;return theme.colors.primary.base;}};\n  }\n  svg.datasource-modal-trigger {\n    color: ${(_ref7) => {let { theme } = _ref7;return theme.colors.primary.base;}};\n    cursor: pointer;\n  }\n  .title-select {\n    flex: 1 1 100%;\n    display: inline-block;\n    background-color: ${(_ref8) => {let { theme } = _ref8;return theme.colors.grayscale.light3;}};\n    padding: ${(_ref9) => {let { theme } = _ref9;return theme.gridUnit * 2;}}px;\n    border-radius: ${(_ref10) => {let { theme } = _ref10;return theme.borderRadius;}}px;\n    text-align: center;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    overflow: hidden;\n  }\n  .datasource-svg {\n    margin-right: ${(_ref11) => {let { theme } = _ref11;return 2 * theme.gridUnit;}}px;\n    flex: none;\n  }\n  span[aria-label='dataset-physical'] {\n    color: ${(_ref12) => {let { theme } = _ref12;return theme.colors.grayscale.base;}};\n  }\n  span[aria-label='more-vert'] {\n    color: ${(_ref13) => {let { theme } = _ref13;return theme.colors.primary.base;}};\n  }\n`;\n\nconst CHANGE_DATASET = 'change_dataset';\nconst VIEW_IN_SQL_LAB = 'view_in_sql_lab';\nconst EDIT_DATASET = 'edit_dataset';\nconst QUERY_PREVIEW = 'query_preview';\nconst SAVE_AS_DATASET = 'save_as_dataset';\n\n// If the string is longer than this value's number characters we add\n// a tooltip for user can see the full name by hovering over the visually truncated string in UI\nconst VISIBLE_TITLE_LENGTH = 25;\n\n// Assign icon for each DatasourceType.  If no icon assingment is found in the lookup, no icon will render\nexport const datasourceIconLookup = {\n  [DatasourceType.Query]:\n  ___EmotionJSX(Icons.ConsoleSqlOutlined, { className: \"datasource-svg\" }),\n\n  [DatasourceType.Table]: ___EmotionJSX(Icons.DatasetPhysical, { className: \"datasource-svg\" }) };\n\n\n// Render title for datasource with tooltip only if text is longer than VISIBLE_TITLE_LENGTH\nexport const renderDatasourceTitle = (displayString, tooltip) =>\n(displayString == null ? void 0 : displayString.length) > VISIBLE_TITLE_LENGTH ?\n// Add a tooltip only for long names that will be visually truncated\n___EmotionJSX(Tooltip, { title: tooltip },\n___EmotionJSX(\"span\", { className: \"title-select\" }, displayString)) :\n\n\n___EmotionJSX(\"span\", { title: tooltip, className: \"title-select\" },\ndisplayString);\n\n\n\n// Different data source types use different attributes for the display title\nexport const getDatasourceTitle = (datasource) => {\n  if ((datasource == null ? void 0 : datasource.type) === 'query') return datasource == null ? void 0 : datasource.sql;\n  return (datasource == null ? void 0 : datasource.name) || '';\n};\n\nclass DatasourceControl extends React.PureComponent {\n  constructor(props) {\n    super(props);this.\n\n\n\n\n\n\n\n    onDatasourceSave = (datasource) => {var _this$props$form_data, _columns$find, _columns$find2;\n      this.props.actions.changeDatasource(datasource);\n      const { temporalColumns, defaultTemporalColumn } =\n      getTemporalColumns(datasource);\n      const { columns } = datasource;\n      // the current granularity_sqla might not be a temporal column anymore\n      const timeCol = (_this$props$form_data = this.props.form_data) == null ? void 0 : _this$props$form_data.granularity_sqla;\n      const isGranularitySqalTemporal = (_columns$find = columns.find(\n      (_ref14) => {let { column_name } = _ref14;return column_name === timeCol;})) == null ? void 0 : _columns$find.\n      is_dttm;\n      // the current main_dttm_col might not be a temporal column anymore\n      const isDefaultTemporal = (_columns$find2 = columns.find(\n      (_ref15) => {let { column_name } = _ref15;return column_name === defaultTemporalColumn;})) == null ? void 0 : _columns$find2.\n      is_dttm;\n\n      // if the current granularity_sqla is empty or it is not a temporal column anymore\n      // let's update the control value\n      if (datasource.type === 'table' && !isGranularitySqalTemporal) {\n        const temporalColumn = isDefaultTemporal ?\n        defaultTemporalColumn :\n        temporalColumns == null ? void 0 : temporalColumns[0];\n        this.props.actions.setControlValue(\n        'granularity_sqla',\n        temporalColumn || null);\n\n      }\n\n      if (this.props.onDatasourceSave) {\n        this.props.onDatasourceSave(datasource);\n      }\n    };this.\n\n    toggleShowDatasource = () => {\n      this.setState((_ref16) => {let { showDatasource } = _ref16;return {\n          showDatasource: !showDatasource };});\n\n    };this.\n\n    toggleChangeDatasourceModal = () => {\n      this.setState((_ref17) => {let { showChangeDatasourceModal } = _ref17;return {\n          showChangeDatasourceModal: !showChangeDatasourceModal };});\n\n    };this.\n\n    toggleEditDatasourceModal = () => {\n      this.setState((_ref18) => {let { showEditDatasourceModal } = _ref18;return {\n          showEditDatasourceModal: !showEditDatasourceModal };});\n\n    };this.\n\n    toggleSaveDatasetModal = () => {\n      this.setState((_ref19) => {let { showSaveDatasetModal } = _ref19;return {\n          showSaveDatasetModal: !showSaveDatasetModal };});\n\n    };this.\n\n    handleMenuItemClick = (_ref20) => {let { key } = _ref20;\n      switch (key) {\n        case CHANGE_DATASET:\n          this.toggleChangeDatasourceModal();\n          break;\n\n        case EDIT_DATASET:\n          this.toggleEditDatasourceModal();\n          break;\n\n        case VIEW_IN_SQL_LAB:\n          {\n            const { datasource } = this.props;\n            const payload = {\n              datasourceKey: `${datasource.id}__${datasource.type}`,\n              sql: datasource.sql };\n\n            SupersetClient.postForm('/superset/sqllab/', {\n              form_data: safeStringify(payload) });\n\n          }\n          break;\n\n        case SAVE_AS_DATASET:\n          this.toggleSaveDatasetModal();\n          break;\n\n        default:\n          break;}\n\n    };this.state = { showEditDatasourceModal: false, showChangeDatasourceModal: false, showSaveDatasetModal: false };}\n\n  render() {var _datasource$owners, _context, _extra;\n    const {\n      showChangeDatasourceModal,\n      showEditDatasourceModal,\n      showSaveDatasetModal } =\n    this.state;\n    const { datasource, onChange, theme } = this.props;\n    const isMissingDatasource = !(datasource != null && datasource.id);\n    let isMissingParams = false;\n    if (isMissingDatasource) {\n      const datasourceId = getUrlParam(URL_PARAMS.datasourceId);\n      const sliceId = getUrlParam(URL_PARAMS.sliceId);\n\n      if (!datasourceId && !sliceId) {\n        isMissingParams = true;\n      }\n    }\n\n    const { user } = this.props;\n    const allowEdit =\n    ((_datasource$owners = datasource.owners) == null ? void 0 : _includesInstanceProperty(_context = _datasource$owners.map((o) => o.id || o.value)).call(_context, user.userId)) ||\n    isUserAdmin(user);\n\n    const canAccessSqlLab = canUserAccessSqlLab(user);\n\n    const editText = t('Edit dataset');\n\n    const defaultDatasourceMenu =\n    ___EmotionJSX(Menu, { onClick: this.handleMenuItemClick },\n    this.props.isEditable && !isMissingDatasource &&\n    ___EmotionJSX(Menu.Item, {\n      key: EDIT_DATASET,\n\n      disabled: !allowEdit },\n\n    !allowEdit ?\n    ___EmotionJSX(Tooltip, {\n      title: t(\n      'You must be a dataset owner in order to edit. Please reach out to a dataset owner to request modifications or edit access.') },\n\n\n    editText) :\n\n\n    editText),\n\n\n\n    ___EmotionJSX(Menu.Item, { key: CHANGE_DATASET }, t('Swap dataset')),\n    !isMissingDatasource && canAccessSqlLab &&\n    ___EmotionJSX(Menu.Item, { key: VIEW_IN_SQL_LAB }, t('View in SQL Lab')));\n\n\n\n\n    const queryDatasourceMenu =\n    ___EmotionJSX(Menu, { onClick: this.handleMenuItemClick },\n    ___EmotionJSX(Menu.Item, { key: QUERY_PREVIEW },\n    ___EmotionJSX(ModalTrigger, {\n      triggerNode:\n      ___EmotionJSX(\"span\", null, t('Query preview')),\n\n      modalTitle: t('Query preview'),\n      modalBody:\n      ___EmotionJSX(ViewQuery, {\n        sql: (datasource == null ? void 0 : datasource.sql) || (datasource == null ? void 0 : datasource.select_star) || '' }),\n\n\n      modalFooter:\n      ___EmotionJSX(ViewQueryModalFooter, {\n        changeDatasource: this.toggleSaveDatasetModal,\n        datasource: datasource }),\n\n\n      draggable: false,\n      resizable: false,\n      responsive: true })),\n\n\n    canAccessSqlLab &&\n    ___EmotionJSX(Menu.Item, { key: VIEW_IN_SQL_LAB }, t('View in SQL Lab')),\n\n    ___EmotionJSX(Menu.Item, { key: SAVE_AS_DATASET }, t('Save as dataset')));\n\n\n\n    const { health_check_message: healthCheckMessage } = datasource;\n\n    let extra;\n    if (datasource != null && datasource.extra) {\n      if (_isString(datasource.extra)) {\n        try {\n          extra = JSON.parse(datasource.extra);\n        } catch {} // eslint-disable-line no-empty\n      } else {\n        extra = datasource.extra; // eslint-disable-line prefer-destructuring\n      }\n    }\n\n    const titleText = isMissingDatasource ?\n    t('Missing dataset') :\n    getDatasourceTitle(datasource);\n\n    const tooltip = titleText;\n\n    return (\n      ___EmotionJSX(Styles, { className: \"DatasourceControl\" },\n      ___EmotionJSX(\"div\", { className: \"data-container\" },\n      datasourceIconLookup[datasource == null ? void 0 : datasource.type],\n      renderDatasourceTitle(titleText, tooltip),\n      healthCheckMessage &&\n      ___EmotionJSX(Tooltip, { title: healthCheckMessage },\n      ___EmotionJSX(Icons.AlertSolid, { iconColor: theme.colors.warning.base })),\n\n\n      ((_extra = extra) == null ? void 0 : _extra.warning_markdown) &&\n      ___EmotionJSX(WarningIconWithTooltip, { warningMarkdown: extra.warning_markdown }),\n\n      ___EmotionJSX(AntdDropdown, {\n        overlay:\n        datasource.type === DatasourceType.Query ?\n        queryDatasourceMenu :\n        defaultDatasourceMenu,\n\n        trigger: ['click'] },\n\n\n      ___EmotionJSX(Icons.MoreVert, {\n        className: \"datasource-modal-trigger\" }))),\n\n\n\n\n\n      isMissingDatasource && isMissingParams &&\n      ___EmotionJSX(\"div\", { className: \"error-alert\" },\n      ___EmotionJSX(ErrorAlert, {\n        level: \"warning\",\n        title: t('Missing URL parameters'),\n        source: \"explore\",\n        subtitle:\n        ___EmotionJSX(React.Fragment, null,\n        ___EmotionJSX(\"p\", null,\n        t(\n        'The URL is missing the dataset_id or slice_id parameters.'))) })),\n\n\n\n\n\n\n\n      isMissingDatasource && !isMissingParams &&\n      ___EmotionJSX(\"div\", { className: \"error-alert\" },\n      ___EmotionJSX(ErrorAlert, {\n        level: \"warning\",\n        title: t('Missing dataset'),\n        source: \"explore\",\n        subtitle:\n        ___EmotionJSX(React.Fragment, null,\n        ___EmotionJSX(\"p\", null,\n        t(\n        'The dataset linked to this chart may have been deleted.')),\n\n\n        ___EmotionJSX(\"p\", null,\n        ___EmotionJSX(Button, {\n          buttonStyle: \"primary\",\n          onClick: () =>\n          this.handleMenuItemClick({ key: CHANGE_DATASET }) },\n\n\n        t('Swap dataset')))) })),\n\n\n\n\n\n\n\n      showEditDatasourceModal &&\n      ___EmotionJSX(DatasourceModal, {\n        datasource: datasource,\n        show: showEditDatasourceModal,\n        onDatasourceSave: this.onDatasourceSave,\n        onHide: this.toggleEditDatasourceModal }),\n\n\n      showChangeDatasourceModal &&\n      ___EmotionJSX(ChangeDatasourceModal, {\n        onDatasourceSave: this.onDatasourceSave,\n        onHide: this.toggleChangeDatasourceModal,\n        show: showChangeDatasourceModal,\n        onChange: onChange }),\n\n\n      showSaveDatasetModal &&\n      ___EmotionJSX(SaveDatasetModal, {\n        visible: showSaveDatasetModal,\n        onHide: this.toggleSaveDatasetModal,\n        buttonTextOnSave: t('Save'),\n        buttonTextOnOverwrite: t('Overwrite'),\n        modalDescription: t(\n        'Save this query as a virtual dataset to continue exploring'),\n\n        datasource: getDatasourceAsSaveableDataset(datasource),\n        openWindow: false,\n        formData: this.props.form_data })));\n\n\n\n\n  }}\n\n\nDatasourceControl.propTypes = propTypes;\nDatasourceControl.defaultProps = defaultProps;\n\nexport default withTheme(DatasourceControl);","map":{"version":3,"names":["React","PropTypes","DatasourceType","SupersetClient","styled","t","withTheme","getTemporalColumns","getUrlParam","AntdDropdown","Menu","Tooltip","Icons","ChangeDatasourceModal","DatasourceModal","Button","ErrorAlert","WarningIconWithTooltip","URL_PARAMS","getDatasourceAsSaveableDataset","canUserAccessSqlLab","isUserAdmin","ModalTrigger","ViewQueryModalFooter","ViewQuery","SaveDatasetModal","safeStringify","propTypes","actions","object","isRequired","onChange","func","value","string","datasource","form_data","isEditable","bool","onDatasourceSave","defaultProps","Styles","div","theme","colors","grayscale","light2","gridUnit","primary","base","light3","borderRadius","CHANGE_DATASET","VIEW_IN_SQL_LAB","EDIT_DATASET","QUERY_PREVIEW","SAVE_AS_DATASET","VISIBLE_TITLE_LENGTH","datasourceIconLookup","Query","Table","renderDatasourceTitle","displayString","tooltip","length","getDatasourceTitle","type","sql","name","DatasourceControl","PureComponent","constructor","props","changeDatasource","temporalColumns","defaultTemporalColumn","columns","timeCol","granularity_sqla","isGranularitySqalTemporal","find","column_name","is_dttm","isDefaultTemporal","temporalColumn","setControlValue","toggleShowDatasource","setState","showDatasource","toggleChangeDatasourceModal","showChangeDatasourceModal","toggleEditDatasourceModal","showEditDatasourceModal","toggleSaveDatasetModal","showSaveDatasetModal","handleMenuItemClick","key","payload","datasourceKey","id","postForm","state","render","isMissingDatasource","isMissingParams","datasourceId","sliceId","user","allowEdit","owners","map","o","userId","canAccessSqlLab","editText","defaultDatasourceMenu","queryDatasourceMenu","select_star","health_check_message","healthCheckMessage","extra","JSON","parse","titleText","warning","warning_markdown"],"sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/controls/DatasourceControl/index.jsx"],"sourcesContent":["/* eslint-disable camelcase */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  DatasourceType,\n  SupersetClient,\n  styled,\n  t,\n  withTheme,\n} from '@superset-ui/core';\nimport { getTemporalColumns } from '@superset-ui/chart-controls';\nimport { getUrlParam } from 'src/utils/urlUtils';\nimport { AntdDropdown } from 'src/components';\nimport { Menu } from 'src/components/Menu';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport {\n  ChangeDatasourceModal,\n  DatasourceModal,\n} from 'src/components/Datasource';\nimport Button from 'src/components/Button';\nimport ErrorAlert from 'src/components/ErrorMessage/ErrorAlert';\nimport WarningIconWithTooltip from 'src/components/WarningIconWithTooltip';\nimport { URL_PARAMS } from 'src/constants';\nimport { getDatasourceAsSaveableDataset } from 'src/utils/datasourceUtils';\nimport {\n  canUserAccessSqlLab,\n  isUserAdmin,\n} from 'src/dashboard/util/permissionUtils';\nimport ModalTrigger from 'src/components/ModalTrigger';\nimport ViewQueryModalFooter from 'src/explore/components/controls/ViewQueryModalFooter';\nimport ViewQuery from 'src/explore/components/controls/ViewQuery';\nimport { SaveDatasetModal } from 'src/SqlLab/components/SaveDatasetModal';\nimport { safeStringify } from 'src/utils/safeStringify';\nimport { isString } from 'lodash';\n\nconst propTypes = {\n  actions: PropTypes.object.isRequired,\n  onChange: PropTypes.func,\n  value: PropTypes.string,\n  datasource: PropTypes.object.isRequired,\n  form_data: PropTypes.object.isRequired,\n  isEditable: PropTypes.bool,\n  onDatasourceSave: PropTypes.func,\n};\n\nconst defaultProps = {\n  onChange: () => {},\n  onDatasourceSave: null,\n  value: null,\n  isEditable: true,\n};\n\nconst Styles = styled.div`\n  .data-container {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    border-bottom: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n    padding: ${({ theme }) => 4 * theme.gridUnit}px;\n    padding-right: ${({ theme }) => 2 * theme.gridUnit}px;\n  }\n  .error-alert {\n    margin: ${({ theme }) => 2 * theme.gridUnit}px;\n  }\n  .ant-dropdown-trigger {\n    margin-left: ${({ theme }) => 2 * theme.gridUnit}px;\n    box-shadow: none;\n    &:active {\n      box-shadow: none;\n    }\n  }\n  .btn-group .open .dropdown-toggle {\n    box-shadow: none;\n    &.button-default {\n      background: none;\n    }\n  }\n  i.angle {\n    color: ${({ theme }) => theme.colors.primary.base};\n  }\n  svg.datasource-modal-trigger {\n    color: ${({ theme }) => theme.colors.primary.base};\n    cursor: pointer;\n  }\n  .title-select {\n    flex: 1 1 100%;\n    display: inline-block;\n    background-color: ${({ theme }) => theme.colors.grayscale.light3};\n    padding: ${({ theme }) => theme.gridUnit * 2}px;\n    border-radius: ${({ theme }) => theme.borderRadius}px;\n    text-align: center;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    overflow: hidden;\n  }\n  .datasource-svg {\n    margin-right: ${({ theme }) => 2 * theme.gridUnit}px;\n    flex: none;\n  }\n  span[aria-label='dataset-physical'] {\n    color: ${({ theme }) => theme.colors.grayscale.base};\n  }\n  span[aria-label='more-vert'] {\n    color: ${({ theme }) => theme.colors.primary.base};\n  }\n`;\n\nconst CHANGE_DATASET = 'change_dataset';\nconst VIEW_IN_SQL_LAB = 'view_in_sql_lab';\nconst EDIT_DATASET = 'edit_dataset';\nconst QUERY_PREVIEW = 'query_preview';\nconst SAVE_AS_DATASET = 'save_as_dataset';\n\n// If the string is longer than this value's number characters we add\n// a tooltip for user can see the full name by hovering over the visually truncated string in UI\nconst VISIBLE_TITLE_LENGTH = 25;\n\n// Assign icon for each DatasourceType.  If no icon assingment is found in the lookup, no icon will render\nexport const datasourceIconLookup = {\n  [DatasourceType.Query]: (\n    <Icons.ConsoleSqlOutlined className=\"datasource-svg\" />\n  ),\n  [DatasourceType.Table]: <Icons.DatasetPhysical className=\"datasource-svg\" />,\n};\n\n// Render title for datasource with tooltip only if text is longer than VISIBLE_TITLE_LENGTH\nexport const renderDatasourceTitle = (displayString, tooltip) =>\n  displayString?.length > VISIBLE_TITLE_LENGTH ? (\n    // Add a tooltip only for long names that will be visually truncated\n    <Tooltip title={tooltip}>\n      <span className=\"title-select\">{displayString}</span>\n    </Tooltip>\n  ) : (\n    <span title={tooltip} className=\"title-select\">\n      {displayString}\n    </span>\n  );\n\n// Different data source types use different attributes for the display title\nexport const getDatasourceTitle = datasource => {\n  if (datasource?.type === 'query') return datasource?.sql;\n  return datasource?.name || '';\n};\n\nclass DatasourceControl extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showEditDatasourceModal: false,\n      showChangeDatasourceModal: false,\n      showSaveDatasetModal: false,\n    };\n  }\n\n  onDatasourceSave = datasource => {\n    this.props.actions.changeDatasource(datasource);\n    const { temporalColumns, defaultTemporalColumn } =\n      getTemporalColumns(datasource);\n    const { columns } = datasource;\n    // the current granularity_sqla might not be a temporal column anymore\n    const timeCol = this.props.form_data?.granularity_sqla;\n    const isGranularitySqalTemporal = columns.find(\n      ({ column_name }) => column_name === timeCol,\n    )?.is_dttm;\n    // the current main_dttm_col might not be a temporal column anymore\n    const isDefaultTemporal = columns.find(\n      ({ column_name }) => column_name === defaultTemporalColumn,\n    )?.is_dttm;\n\n    // if the current granularity_sqla is empty or it is not a temporal column anymore\n    // let's update the control value\n    if (datasource.type === 'table' && !isGranularitySqalTemporal) {\n      const temporalColumn = isDefaultTemporal\n        ? defaultTemporalColumn\n        : temporalColumns?.[0];\n      this.props.actions.setControlValue(\n        'granularity_sqla',\n        temporalColumn || null,\n      );\n    }\n\n    if (this.props.onDatasourceSave) {\n      this.props.onDatasourceSave(datasource);\n    }\n  };\n\n  toggleShowDatasource = () => {\n    this.setState(({ showDatasource }) => ({\n      showDatasource: !showDatasource,\n    }));\n  };\n\n  toggleChangeDatasourceModal = () => {\n    this.setState(({ showChangeDatasourceModal }) => ({\n      showChangeDatasourceModal: !showChangeDatasourceModal,\n    }));\n  };\n\n  toggleEditDatasourceModal = () => {\n    this.setState(({ showEditDatasourceModal }) => ({\n      showEditDatasourceModal: !showEditDatasourceModal,\n    }));\n  };\n\n  toggleSaveDatasetModal = () => {\n    this.setState(({ showSaveDatasetModal }) => ({\n      showSaveDatasetModal: !showSaveDatasetModal,\n    }));\n  };\n\n  handleMenuItemClick = ({ key }) => {\n    switch (key) {\n      case CHANGE_DATASET:\n        this.toggleChangeDatasourceModal();\n        break;\n\n      case EDIT_DATASET:\n        this.toggleEditDatasourceModal();\n        break;\n\n      case VIEW_IN_SQL_LAB:\n        {\n          const { datasource } = this.props;\n          const payload = {\n            datasourceKey: `${datasource.id}__${datasource.type}`,\n            sql: datasource.sql,\n          };\n          SupersetClient.postForm('/superset/sqllab/', {\n            form_data: safeStringify(payload),\n          });\n        }\n        break;\n\n      case SAVE_AS_DATASET:\n        this.toggleSaveDatasetModal();\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  render() {\n    const {\n      showChangeDatasourceModal,\n      showEditDatasourceModal,\n      showSaveDatasetModal,\n    } = this.state;\n    const { datasource, onChange, theme } = this.props;\n    const isMissingDatasource = !datasource?.id;\n    let isMissingParams = false;\n    if (isMissingDatasource) {\n      const datasourceId = getUrlParam(URL_PARAMS.datasourceId);\n      const sliceId = getUrlParam(URL_PARAMS.sliceId);\n\n      if (!datasourceId && !sliceId) {\n        isMissingParams = true;\n      }\n    }\n\n    const { user } = this.props;\n    const allowEdit =\n      datasource.owners?.map(o => o.id || o.value).includes(user.userId) ||\n      isUserAdmin(user);\n\n    const canAccessSqlLab = canUserAccessSqlLab(user);\n\n    const editText = t('Edit dataset');\n\n    const defaultDatasourceMenu = (\n      <Menu onClick={this.handleMenuItemClick}>\n        {this.props.isEditable && !isMissingDatasource && (\n          <Menu.Item\n            key={EDIT_DATASET}\n            data-test=\"edit-dataset\"\n            disabled={!allowEdit}\n          >\n            {!allowEdit ? (\n              <Tooltip\n                title={t(\n                  'You must be a dataset owner in order to edit. Please reach out to a dataset owner to request modifications or edit access.',\n                )}\n              >\n                {editText}\n              </Tooltip>\n            ) : (\n              editText\n            )}\n          </Menu.Item>\n        )}\n        <Menu.Item key={CHANGE_DATASET}>{t('Swap dataset')}</Menu.Item>\n        {!isMissingDatasource && canAccessSqlLab && (\n          <Menu.Item key={VIEW_IN_SQL_LAB}>{t('View in SQL Lab')}</Menu.Item>\n        )}\n      </Menu>\n    );\n\n    const queryDatasourceMenu = (\n      <Menu onClick={this.handleMenuItemClick}>\n        <Menu.Item key={QUERY_PREVIEW}>\n          <ModalTrigger\n            triggerNode={\n              <span data-test=\"view-query-menu-item\">{t('Query preview')}</span>\n            }\n            modalTitle={t('Query preview')}\n            modalBody={\n              <ViewQuery\n                sql={datasource?.sql || datasource?.select_star || ''}\n              />\n            }\n            modalFooter={\n              <ViewQueryModalFooter\n                changeDatasource={this.toggleSaveDatasetModal}\n                datasource={datasource}\n              />\n            }\n            draggable={false}\n            resizable={false}\n            responsive\n          />\n        </Menu.Item>\n        {canAccessSqlLab && (\n          <Menu.Item key={VIEW_IN_SQL_LAB}>{t('View in SQL Lab')}</Menu.Item>\n        )}\n        <Menu.Item key={SAVE_AS_DATASET}>{t('Save as dataset')}</Menu.Item>\n      </Menu>\n    );\n\n    const { health_check_message: healthCheckMessage } = datasource;\n\n    let extra;\n    if (datasource?.extra) {\n      if (isString(datasource.extra)) {\n        try {\n          extra = JSON.parse(datasource.extra);\n        } catch {} // eslint-disable-line no-empty\n      } else {\n        extra = datasource.extra; // eslint-disable-line prefer-destructuring\n      }\n    }\n\n    const titleText = isMissingDatasource\n      ? t('Missing dataset')\n      : getDatasourceTitle(datasource);\n\n    const tooltip = titleText;\n\n    return (\n      <Styles data-test=\"datasource-control\" className=\"DatasourceControl\">\n        <div className=\"data-container\">\n          {datasourceIconLookup[datasource?.type]}\n          {renderDatasourceTitle(titleText, tooltip)}\n          {healthCheckMessage && (\n            <Tooltip title={healthCheckMessage}>\n              <Icons.AlertSolid iconColor={theme.colors.warning.base} />\n            </Tooltip>\n          )}\n          {extra?.warning_markdown && (\n            <WarningIconWithTooltip warningMarkdown={extra.warning_markdown} />\n          )}\n          <AntdDropdown\n            overlay={\n              datasource.type === DatasourceType.Query\n                ? queryDatasourceMenu\n                : defaultDatasourceMenu\n            }\n            trigger={['click']}\n            data-test=\"datasource-menu\"\n          >\n            <Icons.MoreVert\n              className=\"datasource-modal-trigger\"\n              data-test=\"datasource-menu-trigger\"\n            />\n          </AntdDropdown>\n        </div>\n        {/* missing dataset */}\n        {isMissingDatasource && isMissingParams && (\n          <div className=\"error-alert\">\n            <ErrorAlert\n              level=\"warning\"\n              title={t('Missing URL parameters')}\n              source=\"explore\"\n              subtitle={\n                <>\n                  <p>\n                    {t(\n                      'The URL is missing the dataset_id or slice_id parameters.',\n                    )}\n                  </p>\n                </>\n              }\n            />\n          </div>\n        )}\n        {isMissingDatasource && !isMissingParams && (\n          <div className=\"error-alert\">\n            <ErrorAlert\n              level=\"warning\"\n              title={t('Missing dataset')}\n              source=\"explore\"\n              subtitle={\n                <>\n                  <p>\n                    {t(\n                      'The dataset linked to this chart may have been deleted.',\n                    )}\n                  </p>\n                  <p>\n                    <Button\n                      buttonStyle=\"primary\"\n                      onClick={() =>\n                        this.handleMenuItemClick({ key: CHANGE_DATASET })\n                      }\n                    >\n                      {t('Swap dataset')}\n                    </Button>\n                  </p>\n                </>\n              }\n            />\n          </div>\n        )}\n        {showEditDatasourceModal && (\n          <DatasourceModal\n            datasource={datasource}\n            show={showEditDatasourceModal}\n            onDatasourceSave={this.onDatasourceSave}\n            onHide={this.toggleEditDatasourceModal}\n          />\n        )}\n        {showChangeDatasourceModal && (\n          <ChangeDatasourceModal\n            onDatasourceSave={this.onDatasourceSave}\n            onHide={this.toggleChangeDatasourceModal}\n            show={showChangeDatasourceModal}\n            onChange={onChange}\n          />\n        )}\n        {showSaveDatasetModal && (\n          <SaveDatasetModal\n            visible={showSaveDatasetModal}\n            onHide={this.toggleSaveDatasetModal}\n            buttonTextOnSave={t('Save')}\n            buttonTextOnOverwrite={t('Overwrite')}\n            modalDescription={t(\n              'Save this query as a virtual dataset to continue exploring',\n            )}\n            datasource={getDatasourceAsSaveableDataset(datasource)}\n            openWindow={false}\n            formData={this.props.form_data}\n          />\n        )}\n      </Styles>\n    );\n  }\n}\n\nDatasourceControl.propTypes = propTypes;\nDatasourceControl.defaultProps = defaultProps;\n\nexport default withTheme(DatasourceControl);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}