{"ast":null,"code":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable camelcase */\nimport { isQueryFormMetric } from './types';\nimport processFilters from './processFilters';\nimport extractExtras from './extractExtras';\nimport extractQueryFields from './extractQueryFields';\nimport { overrideExtraFormData } from './processExtraFormData';\nimport { isDefined } from '../utils';\n/**\n * Build the common segments of all query objects (e.g. the granularity field derived from\n * SQLAlchemy). The segments specific to each viz type is constructed in the\n * buildQuery method for each viz type (see `wordcloud/buildQuery.ts` for an example).\n * Note the type of the formData argument passed in here is the type of the formData for a\n * specific viz, which is a subtype of the generic formData shared among all viz types.\n */\nexport default function buildQueryObject(formData, queryFields) {var _ref, _normalizeSeriesLimit;\n  const { annotation_layers = [], extra_form_data, time_range, since, until, row_limit, row_offset, order_desc, limit, timeseries_limit_metric, granularity, url_params = {}, custom_params = {}, series_columns, series_limit, series_limit_metric, ...residualFormData } = formData;\n  const { adhoc_filters: appendAdhocFilters = [], filters: appendFilters = [], custom_form_data = {}, ...overrides } = extra_form_data || {};\n  const numericRowLimit = Number(row_limit);\n  const numericRowOffset = Number(row_offset);\n  const { metrics, columns, orderby } = extractQueryFields(residualFormData, queryFields);\n  // collect all filters for conversion to simple filters/freeform clauses\n  const extras = extractExtras(formData);\n  const { filters: extraFilters } = extras;\n  const filterFormData = {\n    filters: [...extraFilters, ...appendFilters],\n    adhoc_filters: [...(formData.adhoc_filters || []), ...appendAdhocFilters] };\n\n  const extrasAndfilters = processFilters({\n    ...formData,\n    ...extras,\n    ...filterFormData });\n\n  const normalizeSeriesLimitMetric = (metric) => {\n    if (isQueryFormMetric(metric)) {\n      return metric;\n    }\n    return undefined;\n  };\n  let queryObject = {\n    // fallback `null` to `undefined` so they won't be sent to the backend\n    // (JSON.stringify will ignore `undefined`.)\n    time_range: time_range || undefined,\n    since: since || undefined,\n    until: until || undefined,\n    granularity: granularity || undefined,\n    ...extras,\n    ...extrasAndfilters,\n    columns,\n    metrics,\n    orderby,\n    annotation_layers,\n    row_limit: row_limit == null || Number.isNaN(numericRowLimit) ?\n    undefined :\n    numericRowLimit,\n    row_offset: row_offset == null || Number.isNaN(numericRowOffset) ?\n    undefined :\n    numericRowOffset,\n    series_columns,\n    series_limit: series_limit != null ? series_limit : isDefined(limit) ? Number(limit) : 0,\n    series_limit_metric: (_ref = (_normalizeSeriesLimit = normalizeSeriesLimitMetric(series_limit_metric)) != null ? _normalizeSeriesLimit :\n    timeseries_limit_metric) != null ? _ref :\n    undefined,\n    order_desc: typeof order_desc === 'undefined' ? true : order_desc,\n    url_params: url_params || undefined,\n    custom_params };\n\n  // override extra form data used by native and cross filters\n  queryObject = overrideExtraFormData(queryObject, overrides);\n  return { ...queryObject, custom_form_data };\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAmBA;AACA,SAIEA,iBAJF,QAKO,SALP;AAWA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,SAASC,qBAAT,QAAsC,wBAAtC;AACA,SAASC,SAAT,QAA0B,UAA1B;AAEA;;;;;;;AAOA,eAAc,SAAUC,gBAAV,CACZC,QADY,EAEZC,WAFY,EAEmB;EAE/B,MAAM,EACJC,iBAAiB,GAAG,EADhB,EAEJC,eAFI,EAGJC,UAHI,EAIJC,KAJI,EAKJC,KALI,EAMJC,SANI,EAOJC,UAPI,EAQJC,UARI,EASJC,KATI,EAUJC,uBAVI,EAWJC,WAXI,EAYJC,UAAU,GAAG,EAZT,EAaJC,aAAa,GAAG,EAbZ,EAcJC,cAdI,EAeJC,YAfI,EAgBJC,mBAhBI,EAiBJ,GAAGC,gBAjBC,KAkBFlB,QAlBJ;EAmBA,MAAM,EACJmB,aAAa,EAAEC,kBAAkB,GAAG,EADhC,EAEJC,OAAO,EAAEC,aAAa,GAAG,EAFrB,EAGJC,gBAAgB,GAAG,EAHf,EAIJ,GAAGC,SAJC,KAKFrB,eAAe,IAAI,EALvB;EAOA,MAAMsB,eAAe,GAAGC,MAAM,CAACnB,SAAD,CAA9B;EACA,MAAMoB,gBAAgB,GAAGD,MAAM,CAAClB,UAAD,CAA/B;EACA,MAAM,EAAEoB,OAAF,EAAWC,OAAX,EAAoBC,OAApB,KAAgClC,kBAAkB,CACtDsB,gBADsD,EAEtDjB,WAFsD,CAAxD;EAKA;EACA,MAAM8B,MAAM,GAAGpC,aAAa,CAACK,QAAD,CAA5B;EACA,MAAM,EAAEqB,OAAO,EAAEW,YAAX,KAA4BD,MAAlC;EACA,MAAME,cAAc,GAGhB;IACFZ,OAAO,EAAE,CAAC,GAAGW,YAAJ,EAAkB,GAAGV,aAArB,CADP;IAEFH,aAAa,EAAE,CAAC,IAAInB,QAAQ,CAACmB,aAAT,IAA0B,EAA9B,CAAD,EAAoC,GAAGC,kBAAvC,CAFb,EAHJ;;EAOA,MAAMc,gBAAgB,GAAGxC,cAAc,CAAC;IACtC,GAAGM,QADmC;IAEtC,GAAG+B,MAFmC;IAGtC,GAAGE,cAHmC,EAAD,CAAvC;;EAKA,MAAME,0BAA0B,GAAG,CAACC,MAAD,KAAwC;IACzE,IAAI3C,iBAAiB,CAAC2C,MAAD,CAArB,EAA+B;MAC7B,OAAOA,MAAP;IACD;IACD,OAAOC,SAAP;EACD,CALD;EAOA,IAAIC,WAAW,GAAgB;IAC7B;IACA;IACAlC,UAAU,EAAEA,UAAU,IAAIiC,SAHG;IAI7BhC,KAAK,EAAEA,KAAK,IAAIgC,SAJa;IAK7B/B,KAAK,EAAEA,KAAK,IAAI+B,SALa;IAM7BzB,WAAW,EAAEA,WAAW,IAAIyB,SANC;IAO7B,GAAGN,MAP0B;IAQ7B,GAAGG,gBAR0B;IAS7BL,OAT6B;IAU7BD,OAV6B;IAW7BE,OAX6B;IAY7B5B,iBAZ6B;IAa7BK,SAAS,EACPA,SAAS,IAAI,IAAb,IAAqBmB,MAAM,CAACa,KAAP,CAAad,eAAb,CAArB;IACIY,SADJ;IAEIZ,eAhBuB;IAiB7BjB,UAAU,EACRA,UAAU,IAAI,IAAd,IAAsBkB,MAAM,CAACa,KAAP,CAAaZ,gBAAb,CAAtB;IACIU,SADJ;IAEIV,gBApBuB;IAqB7BZ,cArB6B;IAsB7BC,YAAY,EAAEA,YAAF,WAAEA,YAAF,GAAmBlB,SAAS,CAACY,KAAD,CAAT,GAAmBgB,MAAM,CAAChB,KAAD,CAAzB,GAAmC,CAtBrC;IAuB7BO,mBAAmB,mCACjBkB,0BAA0B,CAAClB,mBAAD,CADT;IAEjBN,uBAFiB;IAGjB0B,SA1B2B;IA2B7B5B,UAAU,EAAE,OAAOA,UAAP,KAAsB,WAAtB,GAAoC,IAApC,GAA2CA,UA3B1B;IA4B7BI,UAAU,EAAEA,UAAU,IAAIwB,SA5BG;IA6B7BvB,aA7B6B,EAA/B;;EAgCA;EACAwB,WAAW,GAAGzC,qBAAqB,CAACyC,WAAD,EAAcd,SAAd,CAAnC;EAEA,OAAO,EAAE,GAAGc,WAAL,EAAkBf,gBAAlB,EAAP;AACD","names":["isQueryFormMetric","processFilters","extractExtras","extractQueryFields","overrideExtraFormData","isDefined","buildQueryObject","formData","queryFields","annotation_layers","extra_form_data","time_range","since","until","row_limit","row_offset","order_desc","limit","timeseries_limit_metric","granularity","url_params","custom_params","series_columns","series_limit","series_limit_metric","residualFormData","adhoc_filters","appendAdhocFilters","filters","appendFilters","custom_form_data","overrides","numericRowLimit","Number","numericRowOffset","metrics","columns","orderby","extras","extraFilters","filterFormData","extrasAndfilters","normalizeSeriesLimitMetric","metric","undefined","queryObject","isNaN"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/packages/superset-ui-core/src/query/buildQueryObject.ts"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/* eslint-disable camelcase */\nimport {\n  AdhocFilter,\n  QueryObject,\n  QueryObjectFilterClause,\n  isQueryFormMetric,\n} from './types';\nimport {\n  QueryFieldAliases,\n  QueryFormMetric,\n  QueryFormData,\n} from './types/QueryFormData';\nimport processFilters from './processFilters';\nimport extractExtras from './extractExtras';\nimport extractQueryFields from './extractQueryFields';\nimport { overrideExtraFormData } from './processExtraFormData';\nimport { isDefined } from '../utils';\n\n/**\n * Build the common segments of all query objects (e.g. the granularity field derived from\n * SQLAlchemy). The segments specific to each viz type is constructed in the\n * buildQuery method for each viz type (see `wordcloud/buildQuery.ts` for an example).\n * Note the type of the formData argument passed in here is the type of the formData for a\n * specific viz, which is a subtype of the generic formData shared among all viz types.\n */\nexport default function buildQueryObject<T extends QueryFormData>(\n  formData: T,\n  queryFields?: QueryFieldAliases,\n): QueryObject {\n  const {\n    annotation_layers = [],\n    extra_form_data,\n    time_range,\n    since,\n    until,\n    row_limit,\n    row_offset,\n    order_desc,\n    limit,\n    timeseries_limit_metric,\n    granularity,\n    url_params = {},\n    custom_params = {},\n    series_columns,\n    series_limit,\n    series_limit_metric,\n    ...residualFormData\n  } = formData;\n  const {\n    adhoc_filters: appendAdhocFilters = [],\n    filters: appendFilters = [],\n    custom_form_data = {},\n    ...overrides\n  } = extra_form_data || {};\n\n  const numericRowLimit = Number(row_limit);\n  const numericRowOffset = Number(row_offset);\n  const { metrics, columns, orderby } = extractQueryFields(\n    residualFormData,\n    queryFields,\n  );\n\n  // collect all filters for conversion to simple filters/freeform clauses\n  const extras = extractExtras(formData);\n  const { filters: extraFilters } = extras;\n  const filterFormData: {\n    filters: QueryObjectFilterClause[];\n    adhoc_filters: AdhocFilter[];\n  } = {\n    filters: [...extraFilters, ...appendFilters],\n    adhoc_filters: [...(formData.adhoc_filters || []), ...appendAdhocFilters],\n  };\n  const extrasAndfilters = processFilters({\n    ...formData,\n    ...extras,\n    ...filterFormData,\n  });\n  const normalizeSeriesLimitMetric = (metric: QueryFormMetric | undefined) => {\n    if (isQueryFormMetric(metric)) {\n      return metric;\n    }\n    return undefined;\n  };\n\n  let queryObject: QueryObject = {\n    // fallback `null` to `undefined` so they won't be sent to the backend\n    // (JSON.stringify will ignore `undefined`.)\n    time_range: time_range || undefined,\n    since: since || undefined,\n    until: until || undefined,\n    granularity: granularity || undefined,\n    ...extras,\n    ...extrasAndfilters,\n    columns,\n    metrics,\n    orderby,\n    annotation_layers,\n    row_limit:\n      row_limit == null || Number.isNaN(numericRowLimit)\n        ? undefined\n        : numericRowLimit,\n    row_offset:\n      row_offset == null || Number.isNaN(numericRowOffset)\n        ? undefined\n        : numericRowOffset,\n    series_columns,\n    series_limit: series_limit ?? (isDefined(limit) ? Number(limit) : 0),\n    series_limit_metric:\n      normalizeSeriesLimitMetric(series_limit_metric) ??\n      timeseries_limit_metric ??\n      undefined,\n    order_desc: typeof order_desc === 'undefined' ? true : order_desc,\n    url_params: url_params || undefined,\n    custom_params,\n  };\n\n  // override extra form data used by native and cross filters\n  queryObject = overrideExtraFormData(queryObject, overrides);\n\n  return { ...queryObject, custom_form_data };\n}\n"]},"metadata":{},"sourceType":"module"}