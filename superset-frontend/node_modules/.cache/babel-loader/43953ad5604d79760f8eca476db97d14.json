{"ast":null,"code":"import _debounce from \"lodash/debounce\";function _EMOTION_STRINGIFIED_CSS_ERROR__() {return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";} /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect } from 'react';\nimport { t, styled } from '@superset-ui/core';\nimport { InfoTooltipWithTrigger } from '@superset-ui/chart-controls';\n\nimport Badge from 'src/components/Badge';\nimport ModalTrigger from 'src/components/ModalTrigger';\nimport { ConfigEditor } from 'src/components/AsyncAceEditor';\nimport { FAST_DEBOUNCE } from 'src/constants';\nimport { Tooltip } from 'src/components/Tooltip';\nimport useQueryEditor from 'src/SqlLab/hooks/useQueryEditor';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst StyledConfigEditor = styled(ConfigEditor)`\n  &.ace_editor {\n    border: 1px solid ${(_ref) => {let { theme } = _ref;return theme.colors.grayscale.light2;}};\n  }\n`;var _ref3 = process.env.NODE_ENV === \"production\" ? { name: \"6n1ert\", styles: \"width:inherit\" } : { name: \"1uw7xs-TemplateParamsEditor\", styles: \"width:inherit;label:TemplateParamsEditor;\", map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9ib2dkYW5reXJ5bGl1ay9jb2RlL29wZW5zb3VyY2Uvc3VwZXJzZXQvc3VwZXJzZXQtZnJvbnRlbmQvc3JjL1NxbExhYi9jb21wb25lbnRzL1RlbXBsYXRlUGFyYW1zRWRpdG9yL2luZGV4LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFpRTZCIiwiZmlsZSI6Ii9Vc2Vycy9ib2dkYW5reXJ5bGl1ay9jb2RlL29wZW5zb3VyY2Uvc3VwZXJzZXQvc3VwZXJzZXQtZnJvbnRlbmQvc3JjL1NxbExhYi9jb21wb25lbnRzL1RlbXBsYXRlUGFyYW1zRWRpdG9yL2luZGV4LnRzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdCwgc3R5bGVkIH0gZnJvbSAnQHN1cGVyc2V0LXVpL2NvcmUnO1xuaW1wb3J0IHsgSW5mb1Rvb2x0aXBXaXRoVHJpZ2dlciB9IGZyb20gJ0BzdXBlcnNldC11aS9jaGFydC1jb250cm9scyc7XG5pbXBvcnQgeyBkZWJvdW5jZSB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgQmFkZ2UgZnJvbSAnc3JjL2NvbXBvbmVudHMvQmFkZ2UnO1xuaW1wb3J0IE1vZGFsVHJpZ2dlciBmcm9tICdzcmMvY29tcG9uZW50cy9Nb2RhbFRyaWdnZXInO1xuaW1wb3J0IHsgQ29uZmlnRWRpdG9yIH0gZnJvbSAnc3JjL2NvbXBvbmVudHMvQXN5bmNBY2VFZGl0b3InO1xuaW1wb3J0IHsgRkFTVF9ERUJPVU5DRSB9IGZyb20gJ3NyYy9jb25zdGFudHMnO1xuaW1wb3J0IHsgVG9vbHRpcCB9IGZyb20gJ3NyYy9jb21wb25lbnRzL1Rvb2x0aXAnO1xuaW1wb3J0IHVzZVF1ZXJ5RWRpdG9yIGZyb20gJ3NyYy9TcWxMYWIvaG9va3MvdXNlUXVlcnlFZGl0b3InO1xuY29uc3QgU3R5bGVkQ29uZmlnRWRpdG9yID0gc3R5bGVkKENvbmZpZ0VkaXRvcikgYFxuICAmLmFjZV9lZGl0b3Ige1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICR7KHsgdGhlbWUgfSkgPT4gdGhlbWUuY29sb3JzLmdyYXlzY2FsZS5saWdodDJ9O1xuICB9XG5gO1xuY29uc3QgVGVtcGxhdGVQYXJhbXNFZGl0b3IgPSAoeyBxdWVyeUVkaXRvcklkLCBsYW5ndWFnZSwgb25DaGFuZ2UgPSAoKSA9PiB7IH0sIH0pID0+IHtcbiAgICBjb25zdCBbcGFyc2VkSlNPTiwgc2V0UGFyc2VkSlNPTl0gPSB1c2VTdGF0ZSh7fSk7XG4gICAgY29uc3QgW2lzVmFsaWQsIHNldElzVmFsaWRdID0gdXNlU3RhdGUodHJ1ZSk7XG4gICAgY29uc3QgeyB0ZW1wbGF0ZVBhcmFtcyB9ID0gdXNlUXVlcnlFZGl0b3IocXVlcnlFZGl0b3JJZCwgWyd0ZW1wbGF0ZVBhcmFtcyddKTtcbiAgICBjb25zdCBjb2RlID0gdGVtcGxhdGVQYXJhbXMgPz8gJ3t9JztcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc2V0UGFyc2VkSlNPTihKU09OLnBhcnNlKGNvZGUpKTtcbiAgICAgICAgICAgIHNldElzVmFsaWQodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2gge1xuICAgICAgICAgICAgc2V0UGFyc2VkSlNPTih7fSk7XG4gICAgICAgICAgICBzZXRJc1ZhbGlkKGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH0sIFtjb2RlXSk7XG4gICAgY29uc3QgbW9kYWxCb2R5ID0gKDxkaXY+XG4gICAgICA8cD5cbiAgICAgICAge3QoJ0Fzc2lnbiBhIHNldCBvZiBwYXJhbWV0ZXJzIGFzJyl9XG4gICAgICAgIDxjb2RlPkpTT048L2NvZGU+XG4gICAgICAgIHt0KCdiZWxvdyAoZXhhbXBsZTonKX1cbiAgICAgICAgPGNvZGU+eyd7XCJteV90YWJsZVwiOiBcImZvb1wifSd9PC9jb2RlPlxuICAgICAgICB7dCgnKSwgYW5kIHRoZXkgYmVjb21lIGF2YWlsYWJsZSBpbiB5b3VyIFNRTCAoZXhhbXBsZTonKX1cbiAgICAgICAgPGNvZGU+U0VMRUNUICogRlJPTSB7J3t7IG15X3RhYmxlIH19J30gPC9jb2RlPikge3QoJ2J5IHVzaW5nJyl9Jm5ic3A7XG4gICAgICAgIDxhIGhyZWY9XCJodHRwczovL3N1cGVyc2V0LmFwYWNoZS5vcmcvc3FsbGFiLmh0bWwjdGVtcGxhdGluZy13aXRoLWppbmphXCIgdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiPlxuICAgICAgICAgIHt0KCdKaW5qYSB0ZW1wbGF0aW5nJyl9XG4gICAgICAgIDwvYT57JyAnfVxuICAgICAgICB7dCgnc3ludGF4LicpfVxuICAgICAgPC9wPlxuICAgICAgPFN0eWxlZENvbmZpZ0VkaXRvciBtb2RlPXtsYW5ndWFnZX0gbWluTGluZXM9ezI1fSBtYXhMaW5lcz17NTB9IG9uQ2hhbmdlPXtkZWJvdW5jZShvbkNoYW5nZSwgRkFTVF9ERUJPVU5DRSl9IHdpZHRoPVwiMTAwJVwiIGVkaXRvclByb3BzPXt7ICRibG9ja1Njcm9sbGluZzogdHJ1ZSB9fSBlbmFibGVMaXZlQXV0b2NvbXBsZXRpb24gdmFsdWU9e2NvZGV9Lz5cbiAgICA8L2Rpdj4pO1xuICAgIGNvbnN0IHBhcmFtQ291bnQgPSBwYXJzZWRKU09OID8gT2JqZWN0LmtleXMocGFyc2VkSlNPTikubGVuZ3RoIDogMDtcbiAgICByZXR1cm4gKDxNb2RhbFRyaWdnZXIgbW9kYWxUaXRsZT17dCgnVGVtcGxhdGUgcGFyYW1ldGVycycpfSB0cmlnZ2VyTm9kZT17PFRvb2x0aXAgaWQ9XCJwYXJhbWV0ZXJzLXRvb2x0aXBcIiBwbGFjZW1lbnQ9XCJ0b3BcIiB0aXRsZT17dCgnRWRpdCB0ZW1wbGF0ZSBwYXJhbWV0ZXJzJyl9IHRyaWdnZXI9e1snaG92ZXInXX0+XG4gICAgICAgICAgPGRpdiByb2xlPVwiYnV0dG9uXCIgY3NzPXt7IHdpZHRoOiAnaW5oZXJpdCcgfX0+XG4gICAgICAgICAgICB7dCgnUGFyYW1ldGVycyAnKX1cbiAgICAgICAgICAgIDxCYWRnZSBjb3VudD17cGFyYW1Db3VudH0vPlxuICAgICAgICAgICAgeyFpc1ZhbGlkICYmICg8SW5mb1Rvb2x0aXBXaXRoVHJpZ2dlciBpY29uPVwiZXhjbGFtYXRpb24tdHJpYW5nbGVcIiBic1N0eWxlPVwiZGFuZ2VyXCIgdG9vbHRpcD17dCgnSW52YWxpZCBKU09OJyl9IGxhYmVsPVwiaW52YWxpZC1qc29uXCIvPil9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvVG9vbHRpcD59IG1vZGFsQm9keT17bW9kYWxCb2R5fS8+KTtcbn07XG5leHBvcnQgZGVmYXVsdCBUZW1wbGF0ZVBhcmFtc0VkaXRvcjtcbiJdfQ== */\", toString: _EMOTION_STRINGIFIED_CSS_ERROR__ };\nconst TemplateParamsEditor = (_ref2) => {let { queryEditorId, language, onChange = () => {} } = _ref2;\n  const [parsedJSON, setParsedJSON] = useState({});\n  const [isValid, setIsValid] = useState(true);\n  const { templateParams } = useQueryEditor(queryEditorId, ['templateParams']);\n  const code = templateParams != null ? templateParams : '{}';\n  useEffect(() => {\n    try {\n      setParsedJSON(JSON.parse(code));\n      setIsValid(true);\n    }\n    catch {\n      setParsedJSON({});\n      setIsValid(false);\n    }\n  }, [code]);\n  const modalBody = ___EmotionJSX(\"div\", null,\n  ___EmotionJSX(\"p\", null,\n  t('Assign a set of parameters as'),\n  ___EmotionJSX(\"code\", null, \"JSON\"),\n  t('below (example:'),\n  ___EmotionJSX(\"code\", null, '{\"my_table\": \"foo\"}'),\n  t('), and they become available in your SQL (example:'),\n  ___EmotionJSX(\"code\", null, \"SELECT * FROM \", '{{ my_table }}', \" \"), \") \", t('by using'), \"\\xA0\",\n  ___EmotionJSX(\"a\", { href: \"https://superset.apache.org/sqllab.html#templating-with-jinja\", target: \"_blank\", rel: \"noopener noreferrer\" },\n  t('Jinja templating')),\n  ' ',\n  t('syntax.')),\n\n  ___EmotionJSX(StyledConfigEditor, { mode: language, minLines: 25, maxLines: 50, onChange: _debounce(onChange, FAST_DEBOUNCE), width: \"100%\", editorProps: { $blockScrolling: true }, enableLiveAutocompletion: true, value: code }));\n\n  const paramCount = parsedJSON ? Object.keys(parsedJSON).length : 0;\n  return ___EmotionJSX(ModalTrigger, { modalTitle: t('Template parameters'), triggerNode: ___EmotionJSX(Tooltip, { id: \"parameters-tooltip\", placement: \"top\", title: t('Edit template parameters'), trigger: ['hover'] },\n    ___EmotionJSX(\"div\", { role: \"button\", css: _ref3 },\n    t('Parameters '),\n    ___EmotionJSX(Badge, { count: paramCount }),\n    !isValid && ___EmotionJSX(InfoTooltipWithTrigger, { icon: \"exclamation-triangle\", bsStyle: \"danger\", tooltip: t('Invalid JSON'), label: \"invalid-json\" }))),\n\n    modalBody: modalBody });\n};\nexport default TemplateParamsEditor;","map":{"version":3,"mappings":"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","names":["React","useState","useEffect","t","styled","InfoTooltipWithTrigger","Badge","ModalTrigger","ConfigEditor","FAST_DEBOUNCE","Tooltip","useQueryEditor","StyledConfigEditor","theme","colors","grayscale","light2","TemplateParamsEditor","queryEditorId","language","onChange","parsedJSON","setParsedJSON","isValid","setIsValid","templateParams","code","JSON","parse","modalBody","$blockScrolling","paramCount","Object","keys","length"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/SqlLab/components/TemplateParamsEditor/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect } from 'react';\nimport { t, styled } from '@superset-ui/core';\nimport { InfoTooltipWithTrigger } from '@superset-ui/chart-controls';\nimport { debounce } from 'lodash';\n\nimport Badge from 'src/components/Badge';\nimport ModalTrigger from 'src/components/ModalTrigger';\nimport { ConfigEditor } from 'src/components/AsyncAceEditor';\nimport { FAST_DEBOUNCE } from 'src/constants';\nimport { Tooltip } from 'src/components/Tooltip';\nimport useQueryEditor from 'src/SqlLab/hooks/useQueryEditor';\n\nconst StyledConfigEditor = styled(ConfigEditor)`\n  &.ace_editor {\n    border: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n  }\n`;\n\nexport type TemplateParamsEditorProps = {\n  queryEditorId: string;\n  language: 'yaml' | 'json';\n  onChange: () => void;\n};\n\nconst TemplateParamsEditor = ({\n  queryEditorId,\n  language,\n  onChange = () => {},\n}: TemplateParamsEditorProps) => {\n  const [parsedJSON, setParsedJSON] = useState({});\n  const [isValid, setIsValid] = useState(true);\n\n  const { templateParams } = useQueryEditor(queryEditorId, ['templateParams']);\n  const code = templateParams ?? '{}';\n\n  useEffect(() => {\n    try {\n      setParsedJSON(JSON.parse(code));\n      setIsValid(true);\n    } catch {\n      setParsedJSON({} as any);\n      setIsValid(false);\n    }\n  }, [code]);\n\n  const modalBody = (\n    <div>\n      <p>\n        {t('Assign a set of parameters as')}\n        <code>JSON</code>\n        {t('below (example:')}\n        <code>{'{\"my_table\": \"foo\"}'}</code>\n        {t('), and they become available in your SQL (example:')}\n        <code>SELECT * FROM {'{{ my_table }}'} </code>) {t('by using')}&nbsp;\n        <a\n          href=\"https://superset.apache.org/sqllab.html#templating-with-jinja\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          {t('Jinja templating')}\n        </a>{' '}\n        {t('syntax.')}\n      </p>\n      <StyledConfigEditor\n        mode={language}\n        minLines={25}\n        maxLines={50}\n        onChange={debounce(onChange, FAST_DEBOUNCE)}\n        width=\"100%\"\n        editorProps={{ $blockScrolling: true }}\n        enableLiveAutocompletion\n        value={code}\n      />\n    </div>\n  );\n\n  const paramCount = parsedJSON ? Object.keys(parsedJSON).length : 0;\n\n  return (\n    <ModalTrigger\n      modalTitle={t('Template parameters')}\n      triggerNode={\n        <Tooltip\n          id=\"parameters-tooltip\"\n          placement=\"top\"\n          title={t('Edit template parameters')}\n          trigger={['hover']}\n        >\n          <div role=\"button\" css={{ width: 'inherit' }}>\n            {t('Parameters ')}\n            <Badge count={paramCount} />\n            {!isValid && (\n              <InfoTooltipWithTrigger\n                icon=\"exclamation-triangle\"\n                bsStyle=\"danger\"\n                tooltip={t('Invalid JSON')}\n                label=\"invalid-json\"\n              />\n            )}\n          </div>\n        </Tooltip>\n      }\n      modalBody={modalBody}\n    />\n  );\n};\n\nexport default TemplateParamsEditor;\n"]},"metadata":{},"sourceType":"module"}