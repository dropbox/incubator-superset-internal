{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ensureIsArray, hasGenericChartAxes, NO_TIME_RANGE, t, validateNonEmpty } from '@superset-ui/core';\nimport { getTemporalColumns } from '../utils';\nconst getAxisLabel = (formData) => (formData == null ? void 0 : formData.orientation) === 'horizontal' ?\n{ label: t('Y-axis'), description: t('Dimension to use on y-axis.') } :\n{ label: t('X-axis'), description: t('Dimension to use on x-axis.') };\nexport const xAxisMixin = {\n  label: (state) => getAxisLabel(state == null ? void 0 : state.form_data).label,\n  multi: false,\n  description: (state) => getAxisLabel(state == null ? void 0 : state.form_data).description,\n  validators: [validateNonEmpty],\n  initialValue: (control, state) => {var _state$form_data, _state$form_data2;\n    if (hasGenericChartAxes &&\n    state != null && (_state$form_data = state.form_data) != null && _state$form_data.granularity_sqla &&\n    !((_state$form_data2 = state.form_data) != null && _state$form_data2.x_axis) &&\n    !(control != null && control.value)) {\n      return state.form_data.granularity_sqla;\n    }\n    return undefined;\n  },\n  default: undefined };\n\nexport const temporalColumnMixin = {\n  mapStateToProps: (_ref) => {let { datasource } = _ref;\n    const payload = getTemporalColumns(datasource);\n    return {\n      options: payload.temporalColumns,\n      default: payload.defaultTemporalColumn,\n      isTemporal: true };\n\n  } };\n\nexport const datePickerInAdhocFilterMixin = {\n  initialValue: (control, state) => {var _state$controls, _state$controls$time_, _state$form_data3, _state$form_data4;\n    // skip initialValue if\n    // 1) GENERIC_CHART_AXES is disabled\n    // 2) the time_range control is present (this is the case for legacy charts)\n    // 3) there was a time filter in adhoc filters\n    if (!hasGenericChartAxes ||\n    state != null && (_state$controls = state.controls) != null && (_state$controls$time_ = _state$controls.time_range) != null && _state$controls$time_.value ||\n    ensureIsArray(control.value).findIndex((flt) => (flt == null ? void 0 : flt.operator) === 'TEMPORAL_RANGE') > -1) {\n      return undefined;\n    }\n    // should migrate original granularity_sqla and time_range into adhoc filter\n    // 1) granularity_sqla and time_range are existed\n    if (state != null && (_state$form_data3 = state.form_data) != null && _state$form_data3.granularity_sqla && state != null && (_state$form_data4 = state.form_data) != null && _state$form_data4.time_range) {\n      return [\n      ...ensureIsArray(control.value),\n      {\n        clause: 'WHERE',\n        subject: state.form_data.granularity_sqla,\n        operator: 'TEMPORAL_RANGE',\n        comparator: state.form_data.time_range,\n        expressionType: 'SIMPLE' }];\n\n\n    }\n    // should apply the default time filter into adhoc filter\n    // 1) temporal column is existed in current datasource\n    const temporalColumn = (state == null ? void 0 : state.datasource) &&\n    getTemporalColumns(state.datasource).defaultTemporalColumn;\n    if (hasGenericChartAxes && temporalColumn) {var _state$common, _state$common$conf;\n      return [\n      ...ensureIsArray(control.value),\n      {\n        clause: 'WHERE',\n        subject: temporalColumn,\n        operator: 'TEMPORAL_RANGE',\n        comparator: (state == null ? void 0 : (_state$common = state.common) == null ? void 0 : (_state$common$conf = _state$common.conf) == null ? void 0 : _state$common$conf.DEFAULT_TIME_FILTER) || NO_TIME_RANGE,\n        expressionType: 'SIMPLE' }];\n\n\n    }\n    return undefined;\n  } };","map":{"version":3,"mappings":"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","names":["ensureIsArray","hasGenericChartAxes","NO_TIME_RANGE","t","validateNonEmpty","getTemporalColumns","getAxisLabel","formData","orientation","label","description","xAxisMixin","state","form_data","multi","validators","initialValue","control","granularity_sqla","x_axis","value","undefined","default","temporalColumnMixin","mapStateToProps","datasource","payload","options","temporalColumns","defaultTemporalColumn","isTemporal","datePickerInAdhocFilterMixin","controls","time_range","findIndex","flt","operator","clause","subject","comparator","expressionType","temporalColumn","common","conf","DEFAULT_TIME_FILTER"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/packages/superset-ui-chart-controls/src/shared-controls/mixins.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  ensureIsArray,\n  hasGenericChartAxes,\n  NO_TIME_RANGE,\n  QueryFormData,\n  t,\n  validateNonEmpty,\n} from '@superset-ui/core';\nimport { BaseControlConfig, ControlPanelState, ControlState } from '../types';\nimport { getTemporalColumns } from '../utils';\n\nconst getAxisLabel = (\n  formData: QueryFormData,\n): Record<'label' | 'description', string> =>\n  formData?.orientation === 'horizontal'\n    ? { label: t('Y-axis'), description: t('Dimension to use on y-axis.') }\n    : { label: t('X-axis'), description: t('Dimension to use on x-axis.') };\n\nexport const xAxisMixin = {\n  label: (state: ControlPanelState) => getAxisLabel(state?.form_data).label,\n  multi: false,\n  description: (state: ControlPanelState) =>\n    getAxisLabel(state?.form_data).description,\n  validators: [validateNonEmpty],\n  initialValue: (control: ControlState, state: ControlPanelState | null) => {\n    if (\n      hasGenericChartAxes &&\n      state?.form_data?.granularity_sqla &&\n      !state.form_data?.x_axis &&\n      !control?.value\n    ) {\n      return state.form_data.granularity_sqla;\n    }\n    return undefined;\n  },\n  default: undefined,\n};\n\nexport const temporalColumnMixin: Pick<BaseControlConfig, 'mapStateToProps'> = {\n  mapStateToProps: ({ datasource }) => {\n    const payload = getTemporalColumns(datasource);\n\n    return {\n      options: payload.temporalColumns,\n      default: payload.defaultTemporalColumn,\n      isTemporal: true,\n    };\n  },\n};\n\nexport const datePickerInAdhocFilterMixin: Pick<\n  BaseControlConfig,\n  'initialValue'\n> = {\n  initialValue: (control: ControlState, state: ControlPanelState | null) => {\n    // skip initialValue if\n    // 1) GENERIC_CHART_AXES is disabled\n    // 2) the time_range control is present (this is the case for legacy charts)\n    // 3) there was a time filter in adhoc filters\n    if (\n      !hasGenericChartAxes ||\n      state?.controls?.time_range?.value ||\n      ensureIsArray(control.value).findIndex(\n        (flt: any) => flt?.operator === 'TEMPORAL_RANGE',\n      ) > -1\n    ) {\n      return undefined;\n    }\n\n    // should migrate original granularity_sqla and time_range into adhoc filter\n    // 1) granularity_sqla and time_range are existed\n    if (state?.form_data?.granularity_sqla && state?.form_data?.time_range) {\n      return [\n        ...ensureIsArray(control.value),\n        {\n          clause: 'WHERE',\n          subject: state.form_data.granularity_sqla,\n          operator: 'TEMPORAL_RANGE',\n          comparator: state.form_data.time_range,\n          expressionType: 'SIMPLE',\n        },\n      ];\n    }\n\n    // should apply the default time filter into adhoc filter\n    // 1) temporal column is existed in current datasource\n    const temporalColumn =\n      state?.datasource &&\n      getTemporalColumns(state.datasource).defaultTemporalColumn;\n    if (hasGenericChartAxes && temporalColumn) {\n      return [\n        ...ensureIsArray(control.value),\n        {\n          clause: 'WHERE',\n          subject: temporalColumn,\n          operator: 'TEMPORAL_RANGE',\n          comparator: state?.common?.conf?.DEFAULT_TIME_FILTER || NO_TIME_RANGE,\n          expressionType: 'SIMPLE',\n        },\n      ];\n    }\n\n    return undefined;\n  },\n};\n"]},"metadata":{},"sourceType":"module"}