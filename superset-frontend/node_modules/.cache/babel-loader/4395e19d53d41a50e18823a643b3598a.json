{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport cx from 'classnames';\nimport { addAlpha, css, styled } from '@superset-ui/core';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst WithPopoverMenuStyles = styled.div`\n  ${(_ref) => {let { theme } = _ref;return css`\n    position: relative;\n    outline: none;\n\n    &.with-popover-menu--focused:after {\n      content: '';\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      border: 2px solid ${theme.colors.primary.base};\n      pointer-events: none;\n    }\n\n    .dashboard-component-tabs li &.with-popover-menu--focused:after {\n      top: ${theme.gridUnit * -3}px;\n      left: ${theme.gridUnit * -2}px;\n      width: calc(100% + ${theme.gridUnit * 4}px);\n      height: calc(100% + ${theme.gridUnit * 7}px);\n    }\n  `;}}\n`;\nconst PopoverMenuStyles = styled.div`\n  ${(_ref2) => {let { theme } = _ref2;return css`\n    position: absolute;\n    flex-wrap: nowrap;\n    left: 1px;\n    top: -42px;\n    height: ${theme.gridUnit * 10}px;\n    padding: 0 ${theme.gridUnit * 4}px;\n    background: ${theme.colors.grayscale.light5};\n    box-shadow: 0 1px 2px 1px\n      ${addAlpha(theme.colors.grayscale.dark2, parseFloat(theme.opacity.mediumLight) / 100)};\n    font-size: ${theme.typography.sizes.m}px;\n    cursor: default;\n    z-index: 3000;\n\n    &,\n    .menu-item {\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n    }\n\n    /* vertical spacer after each menu item */\n    .menu-item:not(:last-child):after {\n      content: '';\n      width: 1px;\n      height: 100%;\n      background: ${theme.colors.grayscale.light2};\n      margin: 0 ${theme.gridUnit * 4}px;\n    }\n  `;}}\n`;\nexport default class WithPopoverMenu extends React.PureComponent {\n\n\n\n\n\n\n\n\n\n\n\n\n  constructor(props) {\n    super(props);this.container = void 0;\n    this.state = {\n      isFocused: props.isFocused };\n\n    this.setRef = this.setRef.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (nextProps.editMode && nextProps.isFocused && !this.state.isFocused) {\n      document.addEventListener('click', this.handleClick);\n      document.addEventListener('drag', this.handleClick);\n      this.setState({ isFocused: true });\n    } else\n    if (this.state.isFocused && !nextProps.editMode) {\n      document.removeEventListener('click', this.handleClick);\n      document.removeEventListener('drag', this.handleClick);\n      this.setState({ isFocused: false });\n    }\n  }\n  componentWillUnmount() {\n    document.removeEventListener('click', this.handleClick);\n    document.removeEventListener('drag', this.handleClick);\n  }\n  setRef(ref) {\n    this.container = ref;\n  }\n  handleClick(event) {\n    if (!this.props.editMode) {\n      return;\n    }\n    const { onChangeFocus, shouldFocus: shouldFocusFunc, disableClick } = this.props;\n    const shouldFocus = shouldFocusFunc(event, this.container);\n    if (!disableClick && shouldFocus && !this.state.isFocused) {\n      // if not focused, set focus and add a window event listener to capture outside clicks\n      // this enables us to not set a click listener for ever item on a dashboard\n      document.addEventListener('click', this.handleClick);\n      document.addEventListener('drag', this.handleClick);\n      this.setState(() => ({ isFocused: true }));\n      if (onChangeFocus) {\n        onChangeFocus(true);\n      }\n    } else\n    if (!shouldFocus && this.state.isFocused) {\n      document.removeEventListener('click', this.handleClick);\n      document.removeEventListener('drag', this.handleClick);\n      this.setState(() => ({ isFocused: false }));\n      if (onChangeFocus) {\n        onChangeFocus(false);\n      }\n    }\n  }\n  render() {var _menuItems$length;\n    const { children, menuItems, editMode, style } = this.props;\n    const { isFocused } = this.state;\n    return ___EmotionJSX(WithPopoverMenuStyles, { ref: this.setRef, onClick: this.handleClick, role: \"none\", className: cx('with-popover-menu', editMode && isFocused && 'with-popover-menu--focused'), style: style },\n    children,\n    editMode && isFocused && ((_menuItems$length = menuItems == null ? void 0 : menuItems.length) != null ? _menuItems$length : 0) > 0 && ___EmotionJSX(PopoverMenuStyles, null,\n    menuItems.map((node, i) => ___EmotionJSX(\"div\", { className: \"menu-item\", key: `menu-item-${i}` },\n    node))));\n\n\n\n  }}WithPopoverMenu.defaultProps = { children: null, disableClick: false, onChangeFocus: null, menuItems: [], isFocused: false, shouldFocus: (event, container) => {var _event$target$parentN;return (container == null ? void 0 : container.contains(event.target)) || event.target.id === 'menu-item' || ((_event$target$parentN = event.target.parentNode) == null ? void 0 : _event$target$parentN.id) === 'menu-item';}, style: null };","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,SAASC,QAAT,EAAmBC,GAAnB,EAAwBC,MAAxB,QAAsC,mBAAtC,C;AAwBA,MAAMC,qBAAqB,GAAGD,MAAM,CAACE,GAAG;IACpC,eAAC,EAAEC,KAAF,EAAD,eAAeJ,GAAG;;;;;;;;;;;0BAWII,KAAK,CAACC,MAAN,CAAaC,OAAb,CAAqBC,IAAI;;;;;aAKtCH,KAAK,CAACI,QAAN,GAAiB,CAAC,CAAC;cAClBJ,KAAK,CAACI,QAAN,GAAiB,CAAC,CAAC;2BACNJ,KAAK,CAACI,QAAN,GAAiB,CAAC;4BACjBJ,KAAK,CAACI,QAAN,GAAiB,CAAC;;GAnB1C,EAqBD;CAtBH;AAyBA,MAAMC,iBAAiB,GAAGR,MAAM,CAACE,GAAG;IAChC,gBAAC,EAAEC,KAAF,EAAD,gBAAeJ,GAAG;;;;;cAKRI,KAAK,CAACI,QAAN,GAAiB,EAAE;iBAChBJ,KAAK,CAACI,QAAN,GAAiB,CAAC;kBACjBJ,KAAK,CAACC,MAAN,CAAaK,SAAb,CAAuBC,MAAM;;QAEvCZ,QAAQ,CACRK,KAAK,CAACC,MAAN,CAAaK,SAAb,CAAuBE,KADf,EAERC,UAAU,CAACT,KAAK,CAACU,OAAN,CAAcC,WAAf,CAAV,GAAwC,GAFhC,CAGT;iBACUX,KAAK,CAACY,UAAN,CAAiBC,KAAjB,CAAuBC,CAAC;;;;;;;;;;;;;;;;oBAgBrBd,KAAK,CAACC,MAAN,CAAaK,SAAb,CAAuBS,MAAM;kBAC/Bf,KAAK,CAACI,QAAN,GAAiB,CAAC;;GA9BhC,EAgCD;CAjCH;AAoCA,eAAc,MAAOY,eAAP,SAA+BvB,KAAK,CAACwB,aAArC,CAGb;;;;;;;;;;;;;EAgBCC,YAAYC,KAAZ,EAAuC;IACrC,MAAMA,KAAN,EADqC,KAfvCC,SAeuC;IAErC,KAAKC,KAAL,GAAa;MACXC,SAAS,EAAEH,KAAK,CAACG,SADN,EAAb;;IAGA,KAAKC,MAAL,GAAc,KAAKA,MAAL,CAAYC,IAAZ,CAAiB,IAAjB,CAAd;IACA,KAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBD,IAAjB,CAAsB,IAAtB,CAAnB;EACD;EAEDE,gCAAgC,CAACC,SAAD,EAAgC;IAC9D,IAAIA,SAAS,CAACC,QAAV,IAAsBD,SAAS,CAACL,SAAhC,IAA6C,CAAC,KAAKD,KAAL,CAAWC,SAA7D,EAAwE;MACtEO,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmC,KAAKL,WAAxC;MACAI,QAAQ,CAACC,gBAAT,CAA0B,MAA1B,EAAkC,KAAKL,WAAvC;MACA,KAAKM,QAAL,CAAc,EAAET,SAAS,EAAE,IAAb,EAAd;IACD,CAJD;IAIO,IAAI,KAAKD,KAAL,CAAWC,SAAX,IAAwB,CAACK,SAAS,CAACC,QAAvC,EAAiD;MACtDC,QAAQ,CAACG,mBAAT,CAA6B,OAA7B,EAAsC,KAAKP,WAA3C;MACAI,QAAQ,CAACG,mBAAT,CAA6B,MAA7B,EAAqC,KAAKP,WAA1C;MACA,KAAKM,QAAL,CAAc,EAAET,SAAS,EAAE,KAAb,EAAd;IACD;EACF;EAEDW,oBAAoB;IAClBJ,QAAQ,CAACG,mBAAT,CAA6B,OAA7B,EAAsC,KAAKP,WAA3C;IACAI,QAAQ,CAACG,mBAAT,CAA6B,MAA7B,EAAqC,KAAKP,WAA1C;EACD;EAEDF,MAAM,CAACW,GAAD,EAA0B;IAC9B,KAAKd,SAAL,GAAiBc,GAAjB;EACD;EAEDT,WAAW,CAACU,KAAD,EAAW;IACpB,IAAI,CAAC,KAAKhB,KAAL,CAAWS,QAAhB,EAA0B;MACxB;IACD;IACD,MAAM,EACJQ,aADI,EAEJC,WAAW,EAAEC,eAFT,EAGJC,YAHI,KAIF,KAAKpB,KAJT;IAMA,MAAMkB,WAAW,GAAGC,eAAe,CAACH,KAAD,EAAQ,KAAKf,SAAb,CAAnC;IAEA,IAAI,CAACmB,YAAD,IAAiBF,WAAjB,IAAgC,CAAC,KAAKhB,KAAL,CAAWC,SAAhD,EAA2D;MACzD;MACA;MACAO,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmC,KAAKL,WAAxC;MACAI,QAAQ,CAACC,gBAAT,CAA0B,MAA1B,EAAkC,KAAKL,WAAvC;MACA,KAAKM,QAAL,CAAc,OAAO,EAAET,SAAS,EAAE,IAAb,EAAP,CAAd;MACA,IAAIc,aAAJ,EAAmB;QACjBA,aAAa,CAAC,IAAD,CAAb;MACD;IACF,CATD;IASO,IAAI,CAACC,WAAD,IAAgB,KAAKhB,KAAL,CAAWC,SAA/B,EAA0C;MAC/CO,QAAQ,CAACG,mBAAT,CAA6B,OAA7B,EAAsC,KAAKP,WAA3C;MACAI,QAAQ,CAACG,mBAAT,CAA6B,MAA7B,EAAqC,KAAKP,WAA1C;MACA,KAAKM,QAAL,CAAc,OAAO,EAAET,SAAS,EAAE,KAAb,EAAP,CAAd;MACA,IAAIc,aAAJ,EAAmB;QACjBA,aAAa,CAAC,KAAD,CAAb;MACD;IACF;EACF;EAEDI,MAAM;IACJ,MAAM,EAAEC,QAAF,EAAYC,SAAZ,EAAuBd,QAAvB,EAAiCe,KAAjC,KAA2C,KAAKxB,KAAtD;IACA,MAAM,EAAEG,SAAF,KAAgB,KAAKD,KAA3B;IAEA,OACE,cAAC,qBAAD,IACE,GAAG,EAAE,KAAKE,MADZ,EAEE,OAAO,EAAE,KAAKE,WAFhB,EAGE,IAAI,EAAC,MAHP,EAIE,SAAS,EAAE/B,EAAE,CACX,mBADW,EAEXkC,QAAQ,IAAIN,SAAZ,IAAyB,4BAFd,CAJf,EAQE,KAAK,EAAEqB,KART;IAUGF,QAVH;IAWGb,QAAQ,IAAIN,SAAZ,IAAyB,sBAACoB,SAAD,oBAACA,SAAS,CAAEE,MAAZ,gCAAsB,CAAtB,IAA2B,CAApD,IACC,cAAC,iBAAD;IACGF,SAAS,CAACG,GAAV,CAAc,CAACC,IAAD,EAAwBC,CAAxB,KACb,uBAAK,SAAS,EAAC,WAAf,EAA2B,GAAG,EAAE,aAAaA,CAAC,EAA9C;IACGD,IADH,CADD,CADH,CAZJ,CADF;;;;EAuBD,CAxGF,CAHoB9B,e,CAMZgC,Y,GAAe,EACpBP,QAAQ,EAAE,IADU,EAEpBF,YAAY,EAAE,KAFM,EAGpBH,aAAa,EAAE,IAHK,EAIpBM,SAAS,EAAE,EAJS,EAKpBpB,SAAS,EAAE,KALS,EAMpBe,WAAW,EAAE,CAACF,KAAD,EAAaf,SAAb,uCACX,UAAS,QAAT,qBAAS,CAAE6B,QAAX,CAAoBd,KAAK,CAACe,MAA1B,MACAf,KAAK,CAACe,MAAN,CAAaC,EAAb,KAAoB,WADpB,IAEA,+BAAK,CAACD,MAAN,CAAaE,UAAb,2CAAyBD,EAAzB,MAAgC,WAHrB,EANO,EAUpBR,KAAK,EAAE,IAVa,E","names":["React","cx","addAlpha","css","styled","WithPopoverMenuStyles","div","theme","colors","primary","base","gridUnit","PopoverMenuStyles","grayscale","light5","dark2","parseFloat","opacity","mediumLight","typography","sizes","m","light2","WithPopoverMenu","PureComponent","constructor","props","container","state","isFocused","setRef","bind","handleClick","UNSAFE_componentWillReceiveProps","nextProps","editMode","document","addEventListener","setState","removeEventListener","componentWillUnmount","ref","event","onChangeFocus","shouldFocus","shouldFocusFunc","disableClick","render","children","menuItems","style","length","map","node","i","defaultProps","contains","target","id","parentNode"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/dashboard/components/menu/WithPopoverMenu.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport cx from 'classnames';\nimport { addAlpha, css, styled } from '@superset-ui/core';\n\ntype ShouldFocusContainer = HTMLDivElement & {\n  contains: (event_target: EventTarget & HTMLElement) => Boolean;\n};\n\ninterface WithPopoverMenuProps {\n  children: React.ReactNode;\n  disableClick: Boolean;\n  menuItems: React.ReactNode[];\n  onChangeFocus: (focus: Boolean) => void;\n  isFocused: Boolean;\n  // Event argument is left as \"any\" because of the clash. In defaultProps it seems\n  // like it should be React.FocusEvent<>, however from handleClick() we can also\n  // derive that type is EventListenerOrEventListenerObject.\n  shouldFocus: (event: any, container: ShouldFocusContainer) => Boolean;\n  editMode: Boolean;\n  style: React.CSSProperties;\n}\n\ninterface WithPopoverMenuState {\n  isFocused: Boolean;\n}\n\nconst WithPopoverMenuStyles = styled.div`\n  ${({ theme }) => css`\n    position: relative;\n    outline: none;\n\n    &.with-popover-menu--focused:after {\n      content: '';\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      border: 2px solid ${theme.colors.primary.base};\n      pointer-events: none;\n    }\n\n    .dashboard-component-tabs li &.with-popover-menu--focused:after {\n      top: ${theme.gridUnit * -3}px;\n      left: ${theme.gridUnit * -2}px;\n      width: calc(100% + ${theme.gridUnit * 4}px);\n      height: calc(100% + ${theme.gridUnit * 7}px);\n    }\n  `}\n`;\n\nconst PopoverMenuStyles = styled.div`\n  ${({ theme }) => css`\n    position: absolute;\n    flex-wrap: nowrap;\n    left: 1px;\n    top: -42px;\n    height: ${theme.gridUnit * 10}px;\n    padding: 0 ${theme.gridUnit * 4}px;\n    background: ${theme.colors.grayscale.light5};\n    box-shadow: 0 1px 2px 1px\n      ${addAlpha(\n        theme.colors.grayscale.dark2,\n        parseFloat(theme.opacity.mediumLight) / 100,\n      )};\n    font-size: ${theme.typography.sizes.m}px;\n    cursor: default;\n    z-index: 3000;\n\n    &,\n    .menu-item {\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n    }\n\n    /* vertical spacer after each menu item */\n    .menu-item:not(:last-child):after {\n      content: '';\n      width: 1px;\n      height: 100%;\n      background: ${theme.colors.grayscale.light2};\n      margin: 0 ${theme.gridUnit * 4}px;\n    }\n  `}\n`;\n\nexport default class WithPopoverMenu extends React.PureComponent<\n  WithPopoverMenuProps,\n  WithPopoverMenuState\n> {\n  container: ShouldFocusContainer;\n\n  static defaultProps = {\n    children: null,\n    disableClick: false,\n    onChangeFocus: null,\n    menuItems: [],\n    isFocused: false,\n    shouldFocus: (event: any, container: ShouldFocusContainer) =>\n      container?.contains(event.target) ||\n      event.target.id === 'menu-item' ||\n      event.target.parentNode?.id === 'menu-item',\n    style: null,\n  };\n\n  constructor(props: WithPopoverMenuProps) {\n    super(props);\n    this.state = {\n      isFocused: props.isFocused!,\n    };\n    this.setRef = this.setRef.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: WithPopoverMenuProps) {\n    if (nextProps.editMode && nextProps.isFocused && !this.state.isFocused) {\n      document.addEventListener('click', this.handleClick);\n      document.addEventListener('drag', this.handleClick);\n      this.setState({ isFocused: true });\n    } else if (this.state.isFocused && !nextProps.editMode) {\n      document.removeEventListener('click', this.handleClick);\n      document.removeEventListener('drag', this.handleClick);\n      this.setState({ isFocused: false });\n    }\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('click', this.handleClick);\n    document.removeEventListener('drag', this.handleClick);\n  }\n\n  setRef(ref: ShouldFocusContainer) {\n    this.container = ref;\n  }\n\n  handleClick(event: any) {\n    if (!this.props.editMode) {\n      return;\n    }\n    const {\n      onChangeFocus,\n      shouldFocus: shouldFocusFunc,\n      disableClick,\n    } = this.props;\n\n    const shouldFocus = shouldFocusFunc(event, this.container);\n\n    if (!disableClick && shouldFocus && !this.state.isFocused) {\n      // if not focused, set focus and add a window event listener to capture outside clicks\n      // this enables us to not set a click listener for ever item on a dashboard\n      document.addEventListener('click', this.handleClick);\n      document.addEventListener('drag', this.handleClick);\n      this.setState(() => ({ isFocused: true }));\n      if (onChangeFocus) {\n        onChangeFocus(true);\n      }\n    } else if (!shouldFocus && this.state.isFocused) {\n      document.removeEventListener('click', this.handleClick);\n      document.removeEventListener('drag', this.handleClick);\n      this.setState(() => ({ isFocused: false }));\n      if (onChangeFocus) {\n        onChangeFocus(false);\n      }\n    }\n  }\n\n  render() {\n    const { children, menuItems, editMode, style } = this.props;\n    const { isFocused } = this.state;\n\n    return (\n      <WithPopoverMenuStyles\n        ref={this.setRef}\n        onClick={this.handleClick}\n        role=\"none\"\n        className={cx(\n          'with-popover-menu',\n          editMode && isFocused && 'with-popover-menu--focused',\n        )}\n        style={style}\n      >\n        {children}\n        {editMode && isFocused && (menuItems?.length ?? 0) > 0 && (\n          <PopoverMenuStyles>\n            {menuItems.map((node: React.ReactNode, i: Number) => (\n              <div className=\"menu-item\" key={`menu-item-${i}`}>\n                {node}\n              </div>\n            ))}\n          </PopoverMenuStyles>\n        )}\n      </WithPopoverMenuStyles>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}