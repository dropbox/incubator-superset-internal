{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useMemo } from 'react';\nimport { styled, t } from '@superset-ui/core';\nimport { Select } from 'src/components';\nimport { FormLabel } from 'src/components/Form';\nimport { SELECT_WIDTH } from './utils';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst SortContainer = styled.div`\n  display: inline-flex;\n  font-size: ${(_ref) => {let { theme } = _ref;return theme.typography.sizes.s;}}px;\n  align-items: center;\n  text-align: left;\n  width: ${SELECT_WIDTH}px;\n`;\nexport const CardSortSelect = (_ref2) => {let { initialSort, onChange, options, pageIndex, pageSize } = _ref2;\n  const defaultSort = initialSort && options.find((_ref3) => {let { id } = _ref3;return id === initialSort[0].id;}) ||\n  options[0];\n  const [value, setValue] = useState({\n    label: defaultSort.label,\n    value: defaultSort.value });\n\n  const formattedOptions = useMemo(() => options.map((option) => ({ label: option.label, value: option.value })), [options]);\n  const handleOnChange = (selected) => {\n    setValue(selected);\n    const originalOption = options.find((_ref4) => {let { value } = _ref4;return value === selected.value;});\n    if (originalOption) {\n      const sortBy = [\n      {\n        id: originalOption.id,\n        desc: originalOption.desc }];\n\n\n      onChange({ pageIndex, pageSize, sortBy, filters: [] });\n    }\n  };\n  return ___EmotionJSX(SortContainer, null,\n  ___EmotionJSX(Select, { ariaLabel: t('Sort'), header: ___EmotionJSX(FormLabel, null, t('Sort')), labelInValue: true, onChange: (value) => handleOnChange(value), options: formattedOptions, showSearch: true, value: value }));\n\n};__signature__(CardSortSelect, \"useState{[value, setValue]({\\n        label: defaultSort.label,\\n        value: defaultSort.value,\\n    })}\\nuseMemo{formattedOptions}\");;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(SortContainer, \"SortContainer\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/ListView/CardSortSelect.tsx\");reactHotLoader.register(CardSortSelect, \"CardSortSelect\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/ListView/CardSortSelect.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,OAA1B,QAAyC,OAAzC;AACA,SAASC,MAAT,EAAiBC,CAAjB,QAA0B,mBAA1B;AACA,SAASC,MAAT,QAAuB,gBAAvB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,YAAT,QAA6B,SAA7B,C;AAGA,MAAMC,aAAa,GAAGL,MAAM,CAACM,GAAG;;eAEjB,eAAC,EAAEC,KAAF,EAAD,eAAeA,KAAK,CAACC,UAAN,CAAiBC,KAAjB,CAAuBC,CAAtC,EAAuC;;;WAG3CN,YAAY;CALvB;AAgBA,OAAO,MAAMO,cAAc,GAAG,WAMA,KANC,EAC7BC,WAD6B,EAE7BC,QAF6B,EAG7BC,OAH6B,EAI7BC,SAJ6B,EAK7BC,QAL6B,EAMD;EAC5B,MAAMC,WAAW,GACdL,WAAW,IAAIE,OAAO,CAACI,IAAR,CAAa,gBAAC,EAAEC,EAAF,EAAD,gBAAYA,EAAE,KAAKP,WAAW,CAAC,CAAD,CAAX,CAAeO,EAAlC,EAAb,CAAhB;EACAL,OAAO,CAAC,CAAD,CAFT;EAIA,MAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBvB,QAAQ,CAAC;IACjCwB,KAAK,EAAEL,WAAW,CAACK,KADc;IAEjCF,KAAK,EAAEH,WAAW,CAACG,KAFc,EAAD,CAAlC;;EAKA,MAAMG,gBAAgB,GAAGxB,OAAO,CAC9B,MAAMe,OAAO,CAACU,GAAR,CAAY,OAAM,MAAK,EAAEF,KAAK,EAAEG,MAAM,CAACH,KAAhB,EAAuBF,KAAK,EAAEK,MAAM,CAACL,KAArC,EAAL,CAAlB,CADwB,EAE9B,CAACN,OAAD,CAF8B,CAAhC;EAKA,MAAMY,cAAc,GAAG,CAACC,QAAD,KAA+C;IACpEN,QAAQ,CAACM,QAAD,CAAR;IACA,MAAMC,cAAc,GAAGd,OAAO,CAACI,IAAR,CACrB,gBAAC,EAAEE,KAAF,EAAD,gBAAeA,KAAK,KAAKO,QAAQ,CAACP,KAAlC,EADqB,CAAvB;IAGA,IAAIQ,cAAJ,EAAoB;MAClB,MAAMC,MAAM,GAAG;MACb;QACEV,EAAE,EAAES,cAAc,CAACT,EADrB;QAEEW,IAAI,EAAEF,cAAc,CAACE,IAFvB,EADa,CAAf;;;MAMAjB,QAAQ,CAAC,EAAEE,SAAF,EAAaC,QAAb,EAAuBa,MAAvB,EAA+BE,OAAO,EAAE,EAAxC,EAAD,CAAR;IACD;EACF,CAdD;EAgBA,OACE,cAAC,aAAD;EACE,cAAC,MAAD,IACE,SAAS,EAAE9B,CAAC,CAAC,MAAD,CADd,EAEE,MAAM,EAAE,cAAC,SAAD,QAAYA,CAAC,CAAC,MAAD,CAAb,CAFV,EAGE,YAAY,MAHd,EAIE,QAAQ,EAAE,CAACmB,KAAD,KAAiCM,cAAc,CAACN,KAAD,CAJ3D,EAKE,OAAO,EAAEG,gBALX,EAME,UAAU,MANZ,EAOE,KAAK,EAAEH,KAPT,GADF,CADF;;AAaD,CAlDM,C,cAAMT,c,6TAhBPN,a,0JAgBOM,c","names":["React","useState","useMemo","styled","t","Select","FormLabel","SELECT_WIDTH","SortContainer","div","theme","typography","sizes","s","CardSortSelect","initialSort","onChange","options","pageIndex","pageSize","defaultSort","find","id","value","setValue","label","formattedOptions","map","option","handleOnChange","selected","originalOption","sortBy","desc","filters"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/ListView/CardSortSelect.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useMemo } from 'react';\nimport { styled, t } from '@superset-ui/core';\nimport { Select } from 'src/components';\nimport { FormLabel } from 'src/components/Form';\nimport { SELECT_WIDTH } from './utils';\nimport { CardSortSelectOption, FetchDataConfig, SortColumn } from './types';\n\nconst SortContainer = styled.div`\n  display: inline-flex;\n  font-size: ${({ theme }) => theme.typography.sizes.s}px;\n  align-items: center;\n  text-align: left;\n  width: ${SELECT_WIDTH}px;\n`;\n\ninterface CardViewSelectSortProps {\n  onChange: (conf: FetchDataConfig) => any;\n  options: Array<CardSortSelectOption>;\n  initialSort?: SortColumn[];\n  pageIndex: number;\n  pageSize: number;\n}\n\nexport const CardSortSelect = ({\n  initialSort,\n  onChange,\n  options,\n  pageIndex,\n  pageSize,\n}: CardViewSelectSortProps) => {\n  const defaultSort =\n    (initialSort && options.find(({ id }) => id === initialSort[0].id)) ||\n    options[0];\n\n  const [value, setValue] = useState({\n    label: defaultSort.label,\n    value: defaultSort.value,\n  });\n\n  const formattedOptions = useMemo(\n    () => options.map(option => ({ label: option.label, value: option.value })),\n    [options],\n  );\n\n  const handleOnChange = (selected: { label: string; value: string }) => {\n    setValue(selected);\n    const originalOption = options.find(\n      ({ value }) => value === selected.value,\n    );\n    if (originalOption) {\n      const sortBy = [\n        {\n          id: originalOption.id,\n          desc: originalOption.desc,\n        },\n      ];\n      onChange({ pageIndex, pageSize, sortBy, filters: [] });\n    }\n  };\n\n  return (\n    <SortContainer>\n      <Select\n        ariaLabel={t('Sort')}\n        header={<FormLabel>{t('Sort')}</FormLabel>}\n        labelInValue\n        onChange={(value: CardSortSelectOption) => handleOnChange(value)}\n        options={formattedOptions}\n        showSearch\n        value={value}\n      />\n    </SortContainer>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}