{"ast":null,"code":"import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { isFeatureEnabled, t, FeatureFlag } from '@superset-ui/core';\n\nimport { PluginContext } from 'src/components/DynamicPlugins';\nimport Loading from 'src/components/Loading';\nimport getBootstrapData from 'src/utils/getBootstrapData';\nimport getChartIdsFromLayout from '../util/getChartIdsFromLayout';\nimport getLayoutComponentFromChartId from '../util/getLayoutComponentFromChartId';\nimport DashboardBuilder from './DashboardBuilder/DashboardBuilder';\nimport {\nchartPropShape,\nslicePropShape,\ndashboardInfoPropShape,\ndashboardStatePropShape } from\n'../util/propShapes';\nimport {\nLOG_ACTIONS_HIDE_BROWSER_TAB,\nLOG_ACTIONS_MOUNT_DASHBOARD,\nLogger } from\n'../../logger/LogUtils';\nimport { areObjectsEqual } from '../../reduxUtils';\n\nimport getLocationHash from '../util/getLocationHash';\nimport isDashboardEmpty from '../util/isDashboardEmpty';\nimport { getAffectedOwnDataCharts } from '../util/charts/getOwnDataCharts';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  actions: PropTypes.shape({\n    addSliceToDashboard: PropTypes.func.isRequired,\n    removeSliceFromDashboard: PropTypes.func.isRequired,\n    triggerQuery: PropTypes.func.isRequired,\n    logEvent: PropTypes.func.isRequired,\n    clearDataMaskState: PropTypes.func.isRequired }).\n  isRequired,\n  dashboardInfo: dashboardInfoPropShape.isRequired,\n  dashboardState: dashboardStatePropShape.isRequired,\n  charts: PropTypes.objectOf(chartPropShape).isRequired,\n  slices: PropTypes.objectOf(slicePropShape).isRequired,\n  activeFilters: PropTypes.object.isRequired,\n  chartConfiguration: PropTypes.object,\n  datasources: PropTypes.object.isRequired,\n  ownDataCharts: PropTypes.object.isRequired,\n  layout: PropTypes.object.isRequired,\n  impressionId: PropTypes.string.isRequired,\n  initMessages: PropTypes.array,\n  timeout: PropTypes.number,\n  userId: PropTypes.string };\n\n\nconst defaultProps = {\n  initMessages: [],\n  timeout: 60,\n  userId: '' };\n\n\nclass Dashboard extends React.PureComponent {\n\n\n  static onBeforeUnload(hasChanged) {\n    if (hasChanged) {\n      window.addEventListener('beforeunload', Dashboard.unload);\n    } else {\n      window.removeEventListener('beforeunload', Dashboard.unload);\n    }\n  }\n\n  static unload() {\n    const message = t('You have unsaved changes.');\n    window.event.returnValue = message; // Gecko + IE\n    return message; // Gecko + Webkit, Safari, Chrome etc.\n  }\n\n  constructor(props) {var _props$activeFilters, _props$ownDataCharts;\n    super(props);\n    this.appliedFilters = (_props$activeFilters = props.activeFilters) != null ? _props$activeFilters : {};\n    this.appliedOwnDataCharts = (_props$ownDataCharts = props.ownDataCharts) != null ? _props$ownDataCharts : {};\n    this.onVisibilityChange = this.onVisibilityChange.bind(this);\n  }\n\n  componentDidMount() {\n    const bootstrapData = getBootstrapData();\n    const { dashboardState, layout } = this.props;\n    const eventData = {\n      is_soft_navigation: Logger.timeOriginOffset > 0,\n      is_edit_mode: dashboardState.editMode,\n      mount_duration: Logger.getTimestamp(),\n      is_empty: isDashboardEmpty(layout),\n      is_published: dashboardState.isPublished,\n      bootstrap_data_length: bootstrapData.length };\n\n    const directLinkComponentId = getLocationHash();\n    if (directLinkComponentId) {\n      eventData.target_id = directLinkComponentId;\n    }\n    this.props.actions.logEvent(LOG_ACTIONS_MOUNT_DASHBOARD, eventData);\n\n    // Handle browser tab visibility change\n    if (document.visibilityState === 'hidden') {\n      this.visibilityEventData = {\n        start_offset: Logger.getTimestamp(),\n        ts: new Date().getTime() };\n\n    }\n    window.addEventListener('visibilitychange', this.onVisibilityChange);\n    this.applyCharts();\n  }\n\n  componentDidUpdate() {\n    this.applyCharts();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    const currentChartIds = getChartIdsFromLayout(this.props.layout);\n    const nextChartIds = getChartIdsFromLayout(nextProps.layout);\n\n    if (this.props.dashboardInfo.id !== nextProps.dashboardInfo.id) {\n      // single-page-app navigation check\n      return;\n    }\n\n    if (currentChartIds.length < nextChartIds.length) {\n      const newChartIds = nextChartIds.filter(\n      (key) => currentChartIds.indexOf(key) === -1);\n\n      newChartIds.forEach((newChartId) =>\n      this.props.actions.addSliceToDashboard(\n      newChartId,\n      getLayoutComponentFromChartId(nextProps.layout, newChartId)));\n\n\n    } else if (currentChartIds.length > nextChartIds.length) {\n      // remove chart\n      const removedChartIds = currentChartIds.filter(\n      (key) => nextChartIds.indexOf(key) === -1);\n\n      removedChartIds.forEach((removedChartId) =>\n      this.props.actions.removeSliceFromDashboard(removedChartId));\n\n    }\n  }\n\n  applyCharts() {\n    const { hasUnsavedChanges, editMode } = this.props.dashboardState;\n\n    const { appliedFilters, appliedOwnDataCharts } = this;\n    const { activeFilters, ownDataCharts, chartConfiguration } = this.props;\n    if (\n    isFeatureEnabled(FeatureFlag.DASHBOARD_CROSS_FILTERS) &&\n    !chartConfiguration)\n    {\n      // For a first loading we need to wait for cross filters charts data loaded to get all active filters\n      // for correct comparing  of filters to avoid unnecessary requests\n      return;\n    }\n\n    if (\n    !editMode && (\n    !areObjectsEqual(appliedOwnDataCharts, ownDataCharts, {\n      ignoreUndefined: true }) ||\n\n    !areObjectsEqual(appliedFilters, activeFilters, {\n      ignoreUndefined: true })))\n\n    {\n      this.applyFilters();\n    }\n\n    if (hasUnsavedChanges) {\n      Dashboard.onBeforeUnload(true);\n    } else {\n      Dashboard.onBeforeUnload(false);\n    }\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('visibilitychange', this.onVisibilityChange);\n    this.props.actions.clearDataMaskState();\n  }\n\n  onVisibilityChange() {\n    if (document.visibilityState === 'hidden') {\n      // from visible to hidden\n      this.visibilityEventData = {\n        start_offset: Logger.getTimestamp(),\n        ts: new Date().getTime() };\n\n    } else if (document.visibilityState === 'visible') {\n      // from hidden to visible\n      const logStart = this.visibilityEventData.start_offset;\n      this.props.actions.logEvent(LOG_ACTIONS_HIDE_BROWSER_TAB, {\n        ...this.visibilityEventData,\n        duration: Logger.getTimestamp() - logStart });\n\n    }\n  }\n\n  // return charts in array\n  getAllCharts() {\n    return Object.values(this.props.charts);\n  }\n\n  applyFilters() {\n    const { appliedFilters } = this;\n    const { activeFilters, ownDataCharts } = this.props;\n\n    // refresh charts if a filter was removed, added, or changed\n    const currFilterKeys = Object.keys(activeFilters);\n    const appliedFilterKeys = Object.keys(appliedFilters);\n\n    const allKeys = new Set(currFilterKeys.concat(appliedFilterKeys));\n    const affectedChartIds = getAffectedOwnDataCharts(\n    ownDataCharts,\n    this.appliedOwnDataCharts);\n\n    [...allKeys].forEach((filterKey) => {\n      if (\n      !_includesInstanceProperty(currFilterKeys).call(currFilterKeys, filterKey) &&\n      _includesInstanceProperty(appliedFilterKeys).call(appliedFilterKeys, filterKey))\n      {\n        // filterKey is removed?\n        affectedChartIds.push(...appliedFilters[filterKey].scope);\n      } else if (!_includesInstanceProperty(appliedFilterKeys).call(appliedFilterKeys, filterKey)) {\n        // filterKey is newly added?\n        affectedChartIds.push(...activeFilters[filterKey].scope);\n      } else {\n        // if filterKey changes value,\n        // update charts in its scope\n        if (\n        !areObjectsEqual(\n        appliedFilters[filterKey].values,\n        activeFilters[filterKey].values,\n        {\n          ignoreUndefined: true }))\n\n\n        {\n          affectedChartIds.push(...activeFilters[filterKey].scope);\n        }\n\n        // if filterKey changes scope,\n        // update all charts in its scope\n        if (\n        !areObjectsEqual(\n        appliedFilters[filterKey].scope,\n        activeFilters[filterKey].scope))\n\n        {\n          const chartsInScope = (activeFilters[filterKey].scope || []).concat(\n          appliedFilters[filterKey].scope || []);\n\n          affectedChartIds.push(...chartsInScope);\n        }\n      }\n    });\n\n    // remove dup in affectedChartIds\n    this.refreshCharts([...new Set(affectedChartIds)]);\n    this.appliedFilters = activeFilters;\n    this.appliedOwnDataCharts = ownDataCharts;\n  }\n\n  refreshCharts(ids) {\n    ids.forEach((id) => {\n      this.props.actions.triggerQuery(true, id);\n    });\n  }\n\n  render() {\n    if (this.context.loading) {\n      return ___EmotionJSX(Loading, null);\n    }\n    return (\n      ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(DashboardBuilder, null)));\n\n\n  }}Dashboard.contextType = PluginContext;\n\n\nDashboard.propTypes = propTypes;\nDashboard.defaultProps = defaultProps;\n\nexport default Dashboard;","map":{"version":3,"names":["React","PropTypes","isFeatureEnabled","t","FeatureFlag","PluginContext","Loading","getBootstrapData","getChartIdsFromLayout","getLayoutComponentFromChartId","DashboardBuilder","chartPropShape","slicePropShape","dashboardInfoPropShape","dashboardStatePropShape","LOG_ACTIONS_HIDE_BROWSER_TAB","LOG_ACTIONS_MOUNT_DASHBOARD","Logger","areObjectsEqual","getLocationHash","isDashboardEmpty","getAffectedOwnDataCharts","propTypes","actions","shape","addSliceToDashboard","func","isRequired","removeSliceFromDashboard","triggerQuery","logEvent","clearDataMaskState","dashboardInfo","dashboardState","charts","objectOf","slices","activeFilters","object","chartConfiguration","datasources","ownDataCharts","layout","impressionId","string","initMessages","array","timeout","number","userId","defaultProps","Dashboard","PureComponent","onBeforeUnload","hasChanged","window","addEventListener","unload","removeEventListener","message","event","returnValue","constructor","props","appliedFilters","appliedOwnDataCharts","onVisibilityChange","bind","componentDidMount","bootstrapData","eventData","is_soft_navigation","timeOriginOffset","is_edit_mode","editMode","mount_duration","getTimestamp","is_empty","is_published","isPublished","bootstrap_data_length","length","directLinkComponentId","target_id","document","visibilityState","visibilityEventData","start_offset","ts","Date","getTime","applyCharts","componentDidUpdate","UNSAFE_componentWillReceiveProps","nextProps","currentChartIds","nextChartIds","id","newChartIds","filter","key","indexOf","forEach","newChartId","removedChartIds","removedChartId","hasUnsavedChanges","DASHBOARD_CROSS_FILTERS","ignoreUndefined","applyFilters","componentWillUnmount","logStart","duration","getAllCharts","Object","values","currFilterKeys","keys","appliedFilterKeys","allKeys","Set","concat","affectedChartIds","filterKey","push","scope","chartsInScope","refreshCharts","ids","render","context","loading","contextType"],"sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/components/Dashboard.jsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { isFeatureEnabled, t, FeatureFlag } from '@superset-ui/core';\n\nimport { PluginContext } from 'src/components/DynamicPlugins';\nimport Loading from 'src/components/Loading';\nimport getBootstrapData from 'src/utils/getBootstrapData';\nimport getChartIdsFromLayout from '../util/getChartIdsFromLayout';\nimport getLayoutComponentFromChartId from '../util/getLayoutComponentFromChartId';\nimport DashboardBuilder from './DashboardBuilder/DashboardBuilder';\nimport {\n  chartPropShape,\n  slicePropShape,\n  dashboardInfoPropShape,\n  dashboardStatePropShape,\n} from '../util/propShapes';\nimport {\n  LOG_ACTIONS_HIDE_BROWSER_TAB,\n  LOG_ACTIONS_MOUNT_DASHBOARD,\n  Logger,\n} from '../../logger/LogUtils';\nimport { areObjectsEqual } from '../../reduxUtils';\n\nimport getLocationHash from '../util/getLocationHash';\nimport isDashboardEmpty from '../util/isDashboardEmpty';\nimport { getAffectedOwnDataCharts } from '../util/charts/getOwnDataCharts';\n\nconst propTypes = {\n  actions: PropTypes.shape({\n    addSliceToDashboard: PropTypes.func.isRequired,\n    removeSliceFromDashboard: PropTypes.func.isRequired,\n    triggerQuery: PropTypes.func.isRequired,\n    logEvent: PropTypes.func.isRequired,\n    clearDataMaskState: PropTypes.func.isRequired,\n  }).isRequired,\n  dashboardInfo: dashboardInfoPropShape.isRequired,\n  dashboardState: dashboardStatePropShape.isRequired,\n  charts: PropTypes.objectOf(chartPropShape).isRequired,\n  slices: PropTypes.objectOf(slicePropShape).isRequired,\n  activeFilters: PropTypes.object.isRequired,\n  chartConfiguration: PropTypes.object,\n  datasources: PropTypes.object.isRequired,\n  ownDataCharts: PropTypes.object.isRequired,\n  layout: PropTypes.object.isRequired,\n  impressionId: PropTypes.string.isRequired,\n  initMessages: PropTypes.array,\n  timeout: PropTypes.number,\n  userId: PropTypes.string,\n};\n\nconst defaultProps = {\n  initMessages: [],\n  timeout: 60,\n  userId: '',\n};\n\nclass Dashboard extends React.PureComponent {\n  static contextType = PluginContext;\n\n  static onBeforeUnload(hasChanged) {\n    if (hasChanged) {\n      window.addEventListener('beforeunload', Dashboard.unload);\n    } else {\n      window.removeEventListener('beforeunload', Dashboard.unload);\n    }\n  }\n\n  static unload() {\n    const message = t('You have unsaved changes.');\n    window.event.returnValue = message; // Gecko + IE\n    return message; // Gecko + Webkit, Safari, Chrome etc.\n  }\n\n  constructor(props) {\n    super(props);\n    this.appliedFilters = props.activeFilters ?? {};\n    this.appliedOwnDataCharts = props.ownDataCharts ?? {};\n    this.onVisibilityChange = this.onVisibilityChange.bind(this);\n  }\n\n  componentDidMount() {\n    const bootstrapData = getBootstrapData();\n    const { dashboardState, layout } = this.props;\n    const eventData = {\n      is_soft_navigation: Logger.timeOriginOffset > 0,\n      is_edit_mode: dashboardState.editMode,\n      mount_duration: Logger.getTimestamp(),\n      is_empty: isDashboardEmpty(layout),\n      is_published: dashboardState.isPublished,\n      bootstrap_data_length: bootstrapData.length,\n    };\n    const directLinkComponentId = getLocationHash();\n    if (directLinkComponentId) {\n      eventData.target_id = directLinkComponentId;\n    }\n    this.props.actions.logEvent(LOG_ACTIONS_MOUNT_DASHBOARD, eventData);\n\n    // Handle browser tab visibility change\n    if (document.visibilityState === 'hidden') {\n      this.visibilityEventData = {\n        start_offset: Logger.getTimestamp(),\n        ts: new Date().getTime(),\n      };\n    }\n    window.addEventListener('visibilitychange', this.onVisibilityChange);\n    this.applyCharts();\n  }\n\n  componentDidUpdate() {\n    this.applyCharts();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    const currentChartIds = getChartIdsFromLayout(this.props.layout);\n    const nextChartIds = getChartIdsFromLayout(nextProps.layout);\n\n    if (this.props.dashboardInfo.id !== nextProps.dashboardInfo.id) {\n      // single-page-app navigation check\n      return;\n    }\n\n    if (currentChartIds.length < nextChartIds.length) {\n      const newChartIds = nextChartIds.filter(\n        key => currentChartIds.indexOf(key) === -1,\n      );\n      newChartIds.forEach(newChartId =>\n        this.props.actions.addSliceToDashboard(\n          newChartId,\n          getLayoutComponentFromChartId(nextProps.layout, newChartId),\n        ),\n      );\n    } else if (currentChartIds.length > nextChartIds.length) {\n      // remove chart\n      const removedChartIds = currentChartIds.filter(\n        key => nextChartIds.indexOf(key) === -1,\n      );\n      removedChartIds.forEach(removedChartId =>\n        this.props.actions.removeSliceFromDashboard(removedChartId),\n      );\n    }\n  }\n\n  applyCharts() {\n    const { hasUnsavedChanges, editMode } = this.props.dashboardState;\n\n    const { appliedFilters, appliedOwnDataCharts } = this;\n    const { activeFilters, ownDataCharts, chartConfiguration } = this.props;\n    if (\n      isFeatureEnabled(FeatureFlag.DASHBOARD_CROSS_FILTERS) &&\n      !chartConfiguration\n    ) {\n      // For a first loading we need to wait for cross filters charts data loaded to get all active filters\n      // for correct comparing  of filters to avoid unnecessary requests\n      return;\n    }\n\n    if (\n      !editMode &&\n      (!areObjectsEqual(appliedOwnDataCharts, ownDataCharts, {\n        ignoreUndefined: true,\n      }) ||\n        !areObjectsEqual(appliedFilters, activeFilters, {\n          ignoreUndefined: true,\n        }))\n    ) {\n      this.applyFilters();\n    }\n\n    if (hasUnsavedChanges) {\n      Dashboard.onBeforeUnload(true);\n    } else {\n      Dashboard.onBeforeUnload(false);\n    }\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('visibilitychange', this.onVisibilityChange);\n    this.props.actions.clearDataMaskState();\n  }\n\n  onVisibilityChange() {\n    if (document.visibilityState === 'hidden') {\n      // from visible to hidden\n      this.visibilityEventData = {\n        start_offset: Logger.getTimestamp(),\n        ts: new Date().getTime(),\n      };\n    } else if (document.visibilityState === 'visible') {\n      // from hidden to visible\n      const logStart = this.visibilityEventData.start_offset;\n      this.props.actions.logEvent(LOG_ACTIONS_HIDE_BROWSER_TAB, {\n        ...this.visibilityEventData,\n        duration: Logger.getTimestamp() - logStart,\n      });\n    }\n  }\n\n  // return charts in array\n  getAllCharts() {\n    return Object.values(this.props.charts);\n  }\n\n  applyFilters() {\n    const { appliedFilters } = this;\n    const { activeFilters, ownDataCharts } = this.props;\n\n    // refresh charts if a filter was removed, added, or changed\n    const currFilterKeys = Object.keys(activeFilters);\n    const appliedFilterKeys = Object.keys(appliedFilters);\n\n    const allKeys = new Set(currFilterKeys.concat(appliedFilterKeys));\n    const affectedChartIds = getAffectedOwnDataCharts(\n      ownDataCharts,\n      this.appliedOwnDataCharts,\n    );\n    [...allKeys].forEach(filterKey => {\n      if (\n        !currFilterKeys.includes(filterKey) &&\n        appliedFilterKeys.includes(filterKey)\n      ) {\n        // filterKey is removed?\n        affectedChartIds.push(...appliedFilters[filterKey].scope);\n      } else if (!appliedFilterKeys.includes(filterKey)) {\n        // filterKey is newly added?\n        affectedChartIds.push(...activeFilters[filterKey].scope);\n      } else {\n        // if filterKey changes value,\n        // update charts in its scope\n        if (\n          !areObjectsEqual(\n            appliedFilters[filterKey].values,\n            activeFilters[filterKey].values,\n            {\n              ignoreUndefined: true,\n            },\n          )\n        ) {\n          affectedChartIds.push(...activeFilters[filterKey].scope);\n        }\n\n        // if filterKey changes scope,\n        // update all charts in its scope\n        if (\n          !areObjectsEqual(\n            appliedFilters[filterKey].scope,\n            activeFilters[filterKey].scope,\n          )\n        ) {\n          const chartsInScope = (activeFilters[filterKey].scope || []).concat(\n            appliedFilters[filterKey].scope || [],\n          );\n          affectedChartIds.push(...chartsInScope);\n        }\n      }\n    });\n\n    // remove dup in affectedChartIds\n    this.refreshCharts([...new Set(affectedChartIds)]);\n    this.appliedFilters = activeFilters;\n    this.appliedOwnDataCharts = ownDataCharts;\n  }\n\n  refreshCharts(ids) {\n    ids.forEach(id => {\n      this.props.actions.triggerQuery(true, id);\n    });\n  }\n\n  render() {\n    if (this.context.loading) {\n      return <Loading />;\n    }\n    return (\n      <>\n        <DashboardBuilder />\n      </>\n    );\n  }\n}\n\nDashboard.propTypes = propTypes;\nDashboard.defaultProps = defaultProps;\n\nexport default Dashboard;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}