{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport rison from 'rison';\nimport { SupersetClient, NO_TIME_RANGE } from '@superset-ui/core';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport { useSelector } from 'react-redux';\nimport { COMMON_RANGE_VALUES_SET, CALENDAR_RANGE_VALUES_SET, customTimeRangeDecode } from '.';\nexport const SEPARATOR = ' : ';\nexport const buildTimeRangeString = (since, until) => `${since}${SEPARATOR}${until}`;\nconst formatDateEndpoint = (dttm, isStart) => dttm.replace('T00:00:00', '') || (isStart ? '-∞' : '∞');\nexport const formatTimeRange = function (timeRange, columnPlaceholder) {if (columnPlaceholder === void 0) {columnPlaceholder = 'col';}\n  const splitDateRange = timeRange.split(SEPARATOR);\n  if (splitDateRange.length === 1)\n  return timeRange;\n  return `${formatDateEndpoint(splitDateRange[0], true)} ≤ ${columnPlaceholder} < ${formatDateEndpoint(splitDateRange[1])}`;\n};\nexport const guessFrame = (timeRange) => {\n  if (COMMON_RANGE_VALUES_SET.has(timeRange)) {\n    return 'Common';\n  }\n  if (CALENDAR_RANGE_VALUES_SET.has(timeRange)) {\n    return 'Calendar';\n  }\n  if (timeRange === NO_TIME_RANGE) {\n    return 'No filter';\n  }\n  if (customTimeRangeDecode(timeRange).matchedFlag) {\n    return 'Custom';\n  }\n  return 'Advanced';\n};\nexport const fetchTimeRange = async function (timeRange, columnPlaceholder) {if (columnPlaceholder === void 0) {columnPlaceholder = 'col';}\n  const query = rison.encode_uri(timeRange);\n  const endpoint = `/api/v1/time_range/?q=${query}`;\n  try {var _response$json, _response$json$result, _response$json2, _response$json2$resul;\n    const response = await SupersetClient.get({ endpoint });\n    const timeRangeString = buildTimeRangeString((response == null ? void 0 : (_response$json = response.json) == null ? void 0 : (_response$json$result = _response$json.result) == null ? void 0 : _response$json$result.since) || '', (response == null ? void 0 : (_response$json2 = response.json) == null ? void 0 : (_response$json2$resul = _response$json2.result) == null ? void 0 : _response$json2$resul.until) || '');\n    return {\n      value: formatTimeRange(timeRangeString, columnPlaceholder) };\n\n  }\n  catch (response) {\n    const clientError = await getClientErrorObject(response);\n    return {\n      error: clientError.message || clientError.error || response.statusText };\n\n  }\n};\nexport function useDefaultTimeFilter() {var _useSelector;\n  return (_useSelector = useSelector((state) => {var _state$common, _state$common$conf;return state == null ? void 0 : (_state$common = state.common) == null ? void 0 : (_state$common$conf = _state$common.conf) == null ? void 0 : _state$common$conf.DEFAULT_TIME_FILTER;})) != null ? _useSelector : NO_TIME_RANGE;\n}","map":{"version":3,"mappings":"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","names":["rison","SupersetClient","NO_TIME_RANGE","getClientErrorObject","useSelector","COMMON_RANGE_VALUES_SET","CALENDAR_RANGE_VALUES_SET","customTimeRangeDecode","SEPARATOR","buildTimeRangeString","since","until","formatDateEndpoint","dttm","isStart","replace","formatTimeRange","timeRange","columnPlaceholder","splitDateRange","split","length","guessFrame","has","matchedFlag","fetchTimeRange","query","encode_uri","endpoint","response","get","timeRangeString","json","result","value","clientError","error","message","statusText","useDefaultTimeFilter","state","common","conf","DEFAULT_TIME_FILTER"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/controls/DateFilterControl/utils/dateFilterUtils.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport rison from 'rison';\nimport { SupersetClient, NO_TIME_RANGE, JsonObject } from '@superset-ui/core';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport { useSelector } from 'react-redux';\nimport {\n  COMMON_RANGE_VALUES_SET,\n  CALENDAR_RANGE_VALUES_SET,\n  customTimeRangeDecode,\n} from '.';\nimport { FrameType } from '../types';\n\nexport const SEPARATOR = ' : ';\n\nexport const buildTimeRangeString = (since: string, until: string): string =>\n  `${since}${SEPARATOR}${until}`;\n\nconst formatDateEndpoint = (dttm: string, isStart?: boolean): string =>\n  dttm.replace('T00:00:00', '') || (isStart ? '-∞' : '∞');\n\nexport const formatTimeRange = (\n  timeRange: string,\n  columnPlaceholder = 'col',\n) => {\n  const splitDateRange = timeRange.split(SEPARATOR);\n  if (splitDateRange.length === 1) return timeRange;\n  return `${formatDateEndpoint(\n    splitDateRange[0],\n    true,\n  )} ≤ ${columnPlaceholder} < ${formatDateEndpoint(splitDateRange[1])}`;\n};\n\nexport const guessFrame = (timeRange: string): FrameType => {\n  if (COMMON_RANGE_VALUES_SET.has(timeRange)) {\n    return 'Common';\n  }\n  if (CALENDAR_RANGE_VALUES_SET.has(timeRange)) {\n    return 'Calendar';\n  }\n  if (timeRange === NO_TIME_RANGE) {\n    return 'No filter';\n  }\n  if (customTimeRangeDecode(timeRange).matchedFlag) {\n    return 'Custom';\n  }\n  return 'Advanced';\n};\n\nexport const fetchTimeRange = async (\n  timeRange: string,\n  columnPlaceholder = 'col',\n) => {\n  const query = rison.encode_uri(timeRange);\n  const endpoint = `/api/v1/time_range/?q=${query}`;\n  try {\n    const response = await SupersetClient.get({ endpoint });\n    const timeRangeString = buildTimeRangeString(\n      response?.json?.result?.since || '',\n      response?.json?.result?.until || '',\n    );\n    return {\n      value: formatTimeRange(timeRangeString, columnPlaceholder),\n    };\n  } catch (response) {\n    const clientError = await getClientErrorObject(response);\n    return {\n      error: clientError.message || clientError.error || response.statusText,\n    };\n  }\n};\n\nexport function useDefaultTimeFilter() {\n  return (\n    useSelector(\n      (state: JsonObject) => state?.common?.conf?.DEFAULT_TIME_FILTER,\n    ) ?? NO_TIME_RANGE\n  );\n}\n"]},"metadata":{},"sourceType":"module"}