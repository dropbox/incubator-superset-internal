{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable react/no-array-index-key, react/jsx-no-bind */\nimport dist from 'distributions';\nimport React from 'react';\nimport { Table, Tr, Td, Thead, Th } from 'reactable';\nimport PropTypes from 'prop-types';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nexport const dataPropType = PropTypes.arrayOf(\nPropTypes.shape({\n  group: PropTypes.arrayOf(PropTypes.string),\n  values: PropTypes.arrayOf(\n  PropTypes.shape({\n    x: PropTypes.number,\n    y: PropTypes.number })) }));\n\n\n\n\n\nconst propTypes = {\n  alpha: PropTypes.number,\n  data: dataPropType.isRequired,\n  groups: PropTypes.arrayOf(PropTypes.string).isRequired,\n  liftValPrec: PropTypes.number,\n  metric: PropTypes.string.isRequired,\n  pValPrec: PropTypes.number };\n\n\nconst defaultProps = {\n  alpha: 0.05,\n  liftValPrec: 4,\n  pValPrec: 6 };\n\n\nclass TTestTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      control: 0,\n      liftValues: [],\n      pValues: [] };\n\n  }\n\n  componentDidMount() {\n    const { control } = this.state;\n    this.computeTTest(control); // initially populate table\n  }\n\n  getLiftStatus(row) {\n    const { control, liftValues } = this.state;\n    // Get a css class name for coloring\n    if (row === control) {\n      return 'control';\n    }\n    const liftVal = liftValues[row];\n    if (Number.isNaN(liftVal) || !Number.isFinite(liftVal)) {\n      return 'invalid'; // infinite or NaN values\n    }\n\n    return liftVal >= 0 ? 'true' : 'false'; // green on true, red on false\n  }\n\n  getPValueStatus(row) {\n    const { control, pValues } = this.state;\n    if (row === control) {\n      return 'control';\n    }\n    const pVal = pValues[row];\n    if (Number.isNaN(pVal) || !Number.isFinite(pVal)) {\n      return 'invalid';\n    }\n\n    return ''; // p-values won't normally be colored\n  }\n\n  getSignificance(row) {\n    const { control, pValues } = this.state;\n    const { alpha } = this.props;\n    // Color significant as green, else red\n    if (row === control) {\n      return 'control';\n    }\n\n    // p-values significant below set threshold\n    return pValues[row] <= alpha;\n  }\n\n  computeLift(values, control) {\n    const { liftValPrec } = this.props;\n    // Compute the lift value between two time series\n    let sumValues = 0;\n    let sumControl = 0;\n    values.forEach((value, i) => {\n      sumValues += value.y;\n      sumControl += control[i].y;\n    });\n\n    return ((sumValues - sumControl) / sumControl * 100).toFixed(liftValPrec);\n  }\n\n  computePValue(values, control) {\n    const { pValPrec } = this.props;\n    // Compute the p-value from Student's t-test\n    // between two time series\n    let diffSum = 0;\n    let diffSqSum = 0;\n    let finiteCount = 0;\n    values.forEach((value, i) => {\n      const diff = control[i].y - value.y;\n      /* eslint-disable-next-line */\n      if (isFinite(diff)) {\n        finiteCount += 1;\n        diffSum += diff;\n        diffSqSum += diff * diff;\n      }\n    });\n    const tvalue = -Math.abs(\n    diffSum *\n    Math.sqrt(\n    (finiteCount - 1) / (finiteCount * diffSqSum - diffSum * diffSum)));\n\n\n    try {\n      return (2 * new dist.Studentt(finiteCount - 1).cdf(tvalue)).toFixed(\n      pValPrec);\n      // two-sided test\n    } catch (error) {\n      return NaN;\n    }\n  }\n\n  computeTTest(control) {\n    // Compute lift and p-values for each row\n    // against the selected control\n    const { data } = this.props;\n    const pValues = [];\n    const liftValues = [];\n    if (!data) {\n      return;\n    }\n    for (let i = 0; i < data.length; i += 1) {\n      if (i === control) {\n        pValues.push('control');\n        liftValues.push('control');\n      } else {\n        pValues.push(this.computePValue(data[i].values, data[control].values));\n        liftValues.push(this.computeLift(data[i].values, data[control].values));\n      }\n    }\n    this.setState({ control, liftValues, pValues });\n  }\n\n  render() {\n    const { data, metric, groups } = this.props;\n    const { control, liftValues, pValues } = this.state;\n\n    if (!Array.isArray(groups) || groups.length === 0) {\n      throw Error('Group by param is required');\n    }\n\n    // Render column header for each group\n    const columns = groups.map((group, i) =>\n    ___EmotionJSX(Th, { key: i, column: group },\n    group));\n\n\n    const numGroups = groups.length;\n    // Columns for p-value, lift-value, and significance (true/false)\n    columns.push(\n    ___EmotionJSX(Th, { key: numGroups + 1, column: \"pValue\" }, \"p-value\"));\n\n\n\n    columns.push(\n    ___EmotionJSX(Th, { key: numGroups + 2, column: \"liftValue\" }, \"Lift %\"));\n\n\n\n    columns.push(\n    ___EmotionJSX(Th, { key: numGroups + 3, column: \"significant\" }, \"Significant\"));\n\n\n\n    const rows = data.map((entry, i) => {\n      const values = groups.map(\n      (\n      group,\n      j // group names\n      ) => ___EmotionJSX(Td, { key: j, column: group, data: entry.group[j] }));\n\n      values.push(\n      ___EmotionJSX(Td, {\n        key: numGroups + 1,\n        className: this.getPValueStatus(i),\n        column: \"pValue\",\n        data: pValues[i] }));\n\n\n      values.push(\n      ___EmotionJSX(Td, {\n        key: numGroups + 2,\n        className: this.getLiftStatus(i),\n        column: \"liftValue\",\n        data: liftValues[i] }));\n\n\n      values.push(\n      ___EmotionJSX(Td, {\n        key: numGroups + 3,\n        className: this.getSignificance(i).toString(),\n        column: \"significant\",\n        data: this.getSignificance(i) }));\n\n\n\n      return (\n        ___EmotionJSX(Tr, {\n          key: i,\n          className: i === control ? 'control' : '',\n          onClick: this.computeTTest.bind(this, i) },\n\n        values));\n\n\n    });\n    // When sorted ascending, 'control' will always be at top\n    const sortConfig = groups.concat([\n    {\n      column: 'pValue',\n      sortFunction: (a, b) => {\n        if (a === 'control') {\n          return -1;\n        }\n        if (b === 'control') {\n          return 1;\n        }\n\n        return a > b ? 1 : -1; // p-values ascending\n      } },\n\n    {\n      column: 'liftValue',\n      sortFunction: (a, b) => {\n        if (a === 'control') {\n          return -1;\n        }\n        if (b === 'control') {\n          return 1;\n        }\n\n        return parseFloat(a) > parseFloat(b) ? -1 : 1; // lift values descending\n      } },\n\n    {\n      column: 'significant',\n      sortFunction: (a, b) => {\n        if (a === 'control') {\n          return -1;\n        }\n        if (b === 'control') {\n          return 1;\n        }\n\n        return a > b ? -1 : 1; // significant values first\n      } }]);\n\n\n\n    return (\n      ___EmotionJSX(\"div\", null,\n      ___EmotionJSX(\"h3\", null, metric),\n      ___EmotionJSX(Table, { className: \"table\", id: `table_${metric}`, sortable: sortConfig },\n      ___EmotionJSX(Thead, null, columns),\n      rows)));\n\n\n\n  }}\n\n\nTTestTable.propTypes = propTypes;\nTTestTable.defaultProps = defaultProps;\n\nexport default TTestTable;","map":{"version":3,"names":["dist","React","Table","Tr","Td","Thead","Th","PropTypes","dataPropType","arrayOf","shape","group","string","values","x","number","y","propTypes","alpha","data","isRequired","groups","liftValPrec","metric","pValPrec","defaultProps","TTestTable","Component","constructor","props","state","control","liftValues","pValues","componentDidMount","computeTTest","getLiftStatus","row","liftVal","Number","isNaN","isFinite","getPValueStatus","pVal","getSignificance","computeLift","sumValues","sumControl","forEach","value","i","toFixed","computePValue","diffSum","diffSqSum","finiteCount","diff","tvalue","Math","abs","sqrt","Studentt","cdf","error","NaN","length","push","setState","render","Array","isArray","Error","columns","map","numGroups","rows","entry","j","toString","bind","sortConfig","concat","column","sortFunction","a","b","parseFloat"],"sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/plugins/legacy-plugin-chart-paired-t-test/src/TTestTable.jsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable react/no-array-index-key, react/jsx-no-bind */\nimport dist from 'distributions';\nimport React from 'react';\nimport { Table, Tr, Td, Thead, Th } from 'reactable';\nimport PropTypes from 'prop-types';\n\nexport const dataPropType = PropTypes.arrayOf(\n  PropTypes.shape({\n    group: PropTypes.arrayOf(PropTypes.string),\n    values: PropTypes.arrayOf(\n      PropTypes.shape({\n        x: PropTypes.number,\n        y: PropTypes.number,\n      }),\n    ),\n  }),\n);\n\nconst propTypes = {\n  alpha: PropTypes.number,\n  data: dataPropType.isRequired,\n  groups: PropTypes.arrayOf(PropTypes.string).isRequired,\n  liftValPrec: PropTypes.number,\n  metric: PropTypes.string.isRequired,\n  pValPrec: PropTypes.number,\n};\n\nconst defaultProps = {\n  alpha: 0.05,\n  liftValPrec: 4,\n  pValPrec: 6,\n};\n\nclass TTestTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      control: 0,\n      liftValues: [],\n      pValues: [],\n    };\n  }\n\n  componentDidMount() {\n    const { control } = this.state;\n    this.computeTTest(control); // initially populate table\n  }\n\n  getLiftStatus(row) {\n    const { control, liftValues } = this.state;\n    // Get a css class name for coloring\n    if (row === control) {\n      return 'control';\n    }\n    const liftVal = liftValues[row];\n    if (Number.isNaN(liftVal) || !Number.isFinite(liftVal)) {\n      return 'invalid'; // infinite or NaN values\n    }\n\n    return liftVal >= 0 ? 'true' : 'false'; // green on true, red on false\n  }\n\n  getPValueStatus(row) {\n    const { control, pValues } = this.state;\n    if (row === control) {\n      return 'control';\n    }\n    const pVal = pValues[row];\n    if (Number.isNaN(pVal) || !Number.isFinite(pVal)) {\n      return 'invalid';\n    }\n\n    return ''; // p-values won't normally be colored\n  }\n\n  getSignificance(row) {\n    const { control, pValues } = this.state;\n    const { alpha } = this.props;\n    // Color significant as green, else red\n    if (row === control) {\n      return 'control';\n    }\n\n    // p-values significant below set threshold\n    return pValues[row] <= alpha;\n  }\n\n  computeLift(values, control) {\n    const { liftValPrec } = this.props;\n    // Compute the lift value between two time series\n    let sumValues = 0;\n    let sumControl = 0;\n    values.forEach((value, i) => {\n      sumValues += value.y;\n      sumControl += control[i].y;\n    });\n\n    return (((sumValues - sumControl) / sumControl) * 100).toFixed(liftValPrec);\n  }\n\n  computePValue(values, control) {\n    const { pValPrec } = this.props;\n    // Compute the p-value from Student's t-test\n    // between two time series\n    let diffSum = 0;\n    let diffSqSum = 0;\n    let finiteCount = 0;\n    values.forEach((value, i) => {\n      const diff = control[i].y - value.y;\n      /* eslint-disable-next-line */\n      if (isFinite(diff)) {\n        finiteCount += 1;\n        diffSum += diff;\n        diffSqSum += diff * diff;\n      }\n    });\n    const tvalue = -Math.abs(\n      diffSum *\n        Math.sqrt(\n          (finiteCount - 1) / (finiteCount * diffSqSum - diffSum * diffSum),\n        ),\n    );\n    try {\n      return (2 * new dist.Studentt(finiteCount - 1).cdf(tvalue)).toFixed(\n        pValPrec,\n      ); // two-sided test\n    } catch (error) {\n      return NaN;\n    }\n  }\n\n  computeTTest(control) {\n    // Compute lift and p-values for each row\n    // against the selected control\n    const { data } = this.props;\n    const pValues = [];\n    const liftValues = [];\n    if (!data) {\n      return;\n    }\n    for (let i = 0; i < data.length; i += 1) {\n      if (i === control) {\n        pValues.push('control');\n        liftValues.push('control');\n      } else {\n        pValues.push(this.computePValue(data[i].values, data[control].values));\n        liftValues.push(this.computeLift(data[i].values, data[control].values));\n      }\n    }\n    this.setState({ control, liftValues, pValues });\n  }\n\n  render() {\n    const { data, metric, groups } = this.props;\n    const { control, liftValues, pValues } = this.state;\n\n    if (!Array.isArray(groups) || groups.length === 0) {\n      throw Error('Group by param is required');\n    }\n\n    // Render column header for each group\n    const columns = groups.map((group, i) => (\n      <Th key={i} column={group}>\n        {group}\n      </Th>\n    ));\n    const numGroups = groups.length;\n    // Columns for p-value, lift-value, and significance (true/false)\n    columns.push(\n      <Th key={numGroups + 1} column=\"pValue\">\n        p-value\n      </Th>,\n    );\n    columns.push(\n      <Th key={numGroups + 2} column=\"liftValue\">\n        Lift %\n      </Th>,\n    );\n    columns.push(\n      <Th key={numGroups + 3} column=\"significant\">\n        Significant\n      </Th>,\n    );\n    const rows = data.map((entry, i) => {\n      const values = groups.map(\n        (\n          group,\n          j, // group names\n        ) => <Td key={j} column={group} data={entry.group[j]} />,\n      );\n      values.push(\n        <Td\n          key={numGroups + 1}\n          className={this.getPValueStatus(i)}\n          column=\"pValue\"\n          data={pValues[i]}\n        />,\n      );\n      values.push(\n        <Td\n          key={numGroups + 2}\n          className={this.getLiftStatus(i)}\n          column=\"liftValue\"\n          data={liftValues[i]}\n        />,\n      );\n      values.push(\n        <Td\n          key={numGroups + 3}\n          className={this.getSignificance(i).toString()}\n          column=\"significant\"\n          data={this.getSignificance(i)}\n        />,\n      );\n\n      return (\n        <Tr\n          key={i}\n          className={i === control ? 'control' : ''}\n          onClick={this.computeTTest.bind(this, i)}\n        >\n          {values}\n        </Tr>\n      );\n    });\n    // When sorted ascending, 'control' will always be at top\n    const sortConfig = groups.concat([\n      {\n        column: 'pValue',\n        sortFunction: (a, b) => {\n          if (a === 'control') {\n            return -1;\n          }\n          if (b === 'control') {\n            return 1;\n          }\n\n          return a > b ? 1 : -1; // p-values ascending\n        },\n      },\n      {\n        column: 'liftValue',\n        sortFunction: (a, b) => {\n          if (a === 'control') {\n            return -1;\n          }\n          if (b === 'control') {\n            return 1;\n          }\n\n          return parseFloat(a) > parseFloat(b) ? -1 : 1; // lift values descending\n        },\n      },\n      {\n        column: 'significant',\n        sortFunction: (a, b) => {\n          if (a === 'control') {\n            return -1;\n          }\n          if (b === 'control') {\n            return 1;\n          }\n\n          return a > b ? -1 : 1; // significant values first\n        },\n      },\n    ]);\n\n    return (\n      <div>\n        <h3>{metric}</h3>\n        <Table className=\"table\" id={`table_${metric}`} sortable={sortConfig}>\n          <Thead>{columns}</Thead>\n          {rows}\n        </Table>\n      </div>\n    );\n  }\n}\n\nTTestTable.propTypes = propTypes;\nTTestTable.defaultProps = defaultProps;\n\nexport default TTestTable;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}