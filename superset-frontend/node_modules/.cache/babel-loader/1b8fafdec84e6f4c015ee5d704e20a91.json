{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { GenericDataType, t, validateNumber } from '@superset-ui/core';\nimport { ControlSubSectionHeader, D3_FORMAT_DOCS, D3_NUMBER_FORMAT_DESCRIPTION_VALUES_TEXT, D3_FORMAT_OPTIONS, D3_TIME_FORMAT_OPTIONS, sections, sharedControls, getStandardizedControls } from '@superset-ui/chart-controls';\nimport { DEFAULT_FORM_DATA } from './types';\nimport { LABEL_POSITION } from '../constants';\nimport { legendSection } from '../controls';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst { labelType, labelPosition, numberFormat, showLabels, isCircle } = DEFAULT_FORM_DATA;\nconst radarMetricMaxValue = {\n  name: 'radarMetricMaxValue',\n  config: {\n    controlType: 'InputNumber',\n    label: t('Max'),\n    description: t('The maximum value of metrics. It is an optional configuration'),\n    width: 120,\n    placeholder: t('auto'),\n    debounceDelay: 400,\n    validators: [validateNumber] } };\n\n\nconst config = {\n  controlPanelSections: [\n  sections.legacyRegularTime,\n  {\n    label: t('Query'),\n    expanded: true,\n    controlSetRows: [\n    ['groupby'],\n    ['metrics'],\n    ['timeseries_limit_metric'],\n    ['adhoc_filters'],\n    [\n    {\n      name: 'row_limit',\n      config: {\n        ...sharedControls.row_limit,\n        default: 10 } }]] },\n\n\n\n\n\n  {\n    label: t('Chart Options'),\n    expanded: true,\n    controlSetRows: [\n    ['color_scheme'],\n    ...legendSection,\n    [___EmotionJSX(ControlSubSectionHeader, null, t('Labels'))],\n    [\n    {\n      name: 'show_labels',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Show Labels'),\n        renderTrigger: true,\n        default: showLabels,\n        description: t('Whether to display the labels.') } }],\n\n\n\n    [\n    {\n      name: 'label_type',\n      config: {\n        type: 'SelectControl',\n        label: t('Label Type'),\n        default: labelType,\n        renderTrigger: true,\n        choices: [\n        ['value', t('Value')],\n        ['key_value', t('Category and Value')]],\n\n        description: t('What should be shown on the label?') } }],\n\n\n\n    [\n    {\n      name: 'label_position',\n      config: {\n        type: 'SelectControl',\n        freeForm: false,\n        label: t('Label position'),\n        renderTrigger: true,\n        choices: LABEL_POSITION,\n        default: labelPosition,\n        description: D3_FORMAT_DOCS } }],\n\n\n\n    [\n    {\n      name: 'number_format',\n      config: {\n        type: 'SelectControl',\n        freeForm: true,\n        label: t('Number format'),\n        renderTrigger: true,\n        default: numberFormat,\n        choices: D3_FORMAT_OPTIONS,\n        description: `${D3_FORMAT_DOCS} ${D3_NUMBER_FORMAT_DESCRIPTION_VALUES_TEXT}` } }],\n\n\n\n    [\n    {\n      name: 'date_format',\n      config: {\n        type: 'SelectControl',\n        freeForm: true,\n        label: t('Date format'),\n        renderTrigger: true,\n        choices: D3_TIME_FORMAT_OPTIONS,\n        default: 'smart_date',\n        description: D3_FORMAT_DOCS } }],\n\n\n\n    [___EmotionJSX(ControlSubSectionHeader, null, t('Radar'))],\n    [\n    {\n      name: 'column_config',\n      config: {\n        type: 'ColumnConfigControl',\n        label: t('Customize Metrics'),\n        description: t('Further customize how to display each metric'),\n        renderTrigger: true,\n        configFormLayout: {\n          [GenericDataType.NUMERIC]: [[radarMetricMaxValue]] },\n\n        shouldMapStateToProps() {\n          return true;\n        },\n        mapStateToProps(explore, _, chart) {var _explore$controls$met, _explore$controls, _explore$controls$met2, _chart$queriesRespons;\n          const values = (_explore$controls$met = explore == null ? void 0 : (_explore$controls = explore.controls) == null ? void 0 : (_explore$controls$met2 = _explore$controls.metrics) == null ? void 0 : _explore$controls$met2.value) != null ? _explore$controls$met :\n          [];\n          const metricColumn = values.map((value) => {\n            if (typeof value === 'string') {\n              return value;\n            }\n            return value.label;\n          });\n          return {\n            queryResponse: chart == null ? void 0 : (_chart$queriesRespons = chart.queriesResponse) == null ? void 0 : _chart$queriesRespons[0],\n            appliedColumnNames: metricColumn };\n\n        } } }],\n\n\n\n    [\n    {\n      name: 'is_circle',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Circle radar shape'),\n        renderTrigger: true,\n        default: isCircle,\n        description: t(\"Radar render type, whether to display 'circle' shape.\") } }]] }],\n\n\n\n\n\n\n  formDataOverrides: (formData) => ({\n    ...formData,\n    metrics: getStandardizedControls().popAllMetrics(),\n    groupby: getStandardizedControls().popAllColumns() }) };\n\n\nexport default config;","map":{"version":3,"mappings":"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","names":["React","GenericDataType","t","validateNumber","ControlSubSectionHeader","D3_FORMAT_DOCS","D3_NUMBER_FORMAT_DESCRIPTION_VALUES_TEXT","D3_FORMAT_OPTIONS","D3_TIME_FORMAT_OPTIONS","sections","sharedControls","getStandardizedControls","DEFAULT_FORM_DATA","LABEL_POSITION","legendSection","labelType","labelPosition","numberFormat","showLabels","isCircle","radarMetricMaxValue","name","config","controlType","label","description","width","placeholder","debounceDelay","validators","controlPanelSections","legacyRegularTime","expanded","controlSetRows","row_limit","default","type","renderTrigger","choices","freeForm","configFormLayout","NUMERIC","shouldMapStateToProps","mapStateToProps","explore","_","chart","values","controls","metrics","value","metricColumn","map","queryResponse","queriesResponse","appliedColumnNames","formDataOverrides","formData","popAllMetrics","groupby","popAllColumns"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/plugins/plugin-chart-echarts/src/Radar/controlPanel.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport {\n  ChartDataResponseResult,\n  GenericDataType,\n  QueryFormMetric,\n  t,\n  validateNumber,\n} from '@superset-ui/core';\nimport {\n  ControlPanelConfig,\n  ControlSubSectionHeader,\n  D3_FORMAT_DOCS,\n  D3_NUMBER_FORMAT_DESCRIPTION_VALUES_TEXT,\n  D3_FORMAT_OPTIONS,\n  D3_TIME_FORMAT_OPTIONS,\n  sections,\n  sharedControls,\n  ControlFormItemSpec,\n  getStandardizedControls,\n} from '@superset-ui/chart-controls';\nimport { DEFAULT_FORM_DATA } from './types';\nimport { LABEL_POSITION } from '../constants';\nimport { legendSection } from '../controls';\n\nconst { labelType, labelPosition, numberFormat, showLabels, isCircle } =\n  DEFAULT_FORM_DATA;\n\nconst radarMetricMaxValue: { name: string; config: ControlFormItemSpec } = {\n  name: 'radarMetricMaxValue',\n  config: {\n    controlType: 'InputNumber',\n    label: t('Max'),\n    description: t(\n      'The maximum value of metrics. It is an optional configuration',\n    ),\n    width: 120,\n    placeholder: t('auto'),\n    debounceDelay: 400,\n    validators: [validateNumber],\n  },\n};\n\nconst config: ControlPanelConfig = {\n  controlPanelSections: [\n    sections.legacyRegularTime,\n    {\n      label: t('Query'),\n      expanded: true,\n      controlSetRows: [\n        ['groupby'],\n        ['metrics'],\n        ['timeseries_limit_metric'],\n        ['adhoc_filters'],\n        [\n          {\n            name: 'row_limit',\n            config: {\n              ...sharedControls.row_limit,\n              default: 10,\n            },\n          },\n        ],\n      ],\n    },\n    {\n      label: t('Chart Options'),\n      expanded: true,\n      controlSetRows: [\n        ['color_scheme'],\n        ...legendSection,\n        [<ControlSubSectionHeader>{t('Labels')}</ControlSubSectionHeader>],\n        [\n          {\n            name: 'show_labels',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Show Labels'),\n              renderTrigger: true,\n              default: showLabels,\n              description: t('Whether to display the labels.'),\n            },\n          },\n        ],\n        [\n          {\n            name: 'label_type',\n            config: {\n              type: 'SelectControl',\n              label: t('Label Type'),\n              default: labelType,\n              renderTrigger: true,\n              choices: [\n                ['value', t('Value')],\n                ['key_value', t('Category and Value')],\n              ],\n              description: t('What should be shown on the label?'),\n            },\n          },\n        ],\n        [\n          {\n            name: 'label_position',\n            config: {\n              type: 'SelectControl',\n              freeForm: false,\n              label: t('Label position'),\n              renderTrigger: true,\n              choices: LABEL_POSITION,\n              default: labelPosition,\n              description: D3_FORMAT_DOCS,\n            },\n          },\n        ],\n        [\n          {\n            name: 'number_format',\n            config: {\n              type: 'SelectControl',\n              freeForm: true,\n              label: t('Number format'),\n              renderTrigger: true,\n              default: numberFormat,\n              choices: D3_FORMAT_OPTIONS,\n              description: `${D3_FORMAT_DOCS} ${D3_NUMBER_FORMAT_DESCRIPTION_VALUES_TEXT}`,\n            },\n          },\n        ],\n        [\n          {\n            name: 'date_format',\n            config: {\n              type: 'SelectControl',\n              freeForm: true,\n              label: t('Date format'),\n              renderTrigger: true,\n              choices: D3_TIME_FORMAT_OPTIONS,\n              default: 'smart_date',\n              description: D3_FORMAT_DOCS,\n            },\n          },\n        ],\n        [<ControlSubSectionHeader>{t('Radar')}</ControlSubSectionHeader>],\n        [\n          {\n            name: 'column_config',\n            config: {\n              type: 'ColumnConfigControl',\n              label: t('Customize Metrics'),\n              description: t('Further customize how to display each metric'),\n              renderTrigger: true,\n              configFormLayout: {\n                [GenericDataType.NUMERIC]: [[radarMetricMaxValue]],\n              },\n              shouldMapStateToProps() {\n                return true;\n              },\n              mapStateToProps(explore, _, chart) {\n                const values =\n                  (explore?.controls?.metrics?.value as QueryFormMetric[]) ??\n                  [];\n                const metricColumn = values.map(value => {\n                  if (typeof value === 'string') {\n                    return value;\n                  }\n                  return value.label;\n                });\n                return {\n                  queryResponse: chart?.queriesResponse?.[0] as\n                    | ChartDataResponseResult\n                    | undefined,\n                  appliedColumnNames: metricColumn,\n                };\n              },\n            },\n          },\n        ],\n        [\n          {\n            name: 'is_circle',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Circle radar shape'),\n              renderTrigger: true,\n              default: isCircle,\n              description: t(\n                \"Radar render type, whether to display 'circle' shape.\",\n              ),\n            },\n          },\n        ],\n      ],\n    },\n  ],\n  formDataOverrides: formData => ({\n    ...formData,\n    metrics: getStandardizedControls().popAllMetrics(),\n    groupby: getStandardizedControls().popAllColumns(),\n  }),\n};\n\nexport default config;\n"]},"metadata":{},"sourceType":"module"}