{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint camelcase: 0 */\nimport React from 'react';\nimport { isFeatureEnabled } from 'src/featureFlags';\nimport rison from 'rison';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { InfoTooltipWithTrigger } from '@superset-ui/chart-controls';\nimport { css, DatasourceType, FeatureFlag, isDefined, styled, SupersetClient, t } from '@superset-ui/core';\nimport { Input } from 'src/components/Input';\nimport { Form, FormItem } from 'src/components/Form';\nimport Alert from 'src/components/Alert';\nimport Modal from 'src/components/Modal';\nimport { Radio } from 'src/components/Radio';\nimport Button from 'src/components/Button';\nimport { AsyncSelect } from 'src/components';\nimport Loading from 'src/components/Loading';\nimport { setSaveChartModalVisibility } from 'src/explore/actions/saveModalActions';\n// Session storage key for recent dashboard\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";const SK_DASHBOARD_ID = 'save_chart_recent_dashboard';\nexport const StyledModal = styled(Modal)`\n  .ant-modal-body {\n    overflow: visible;\n  }\n  i {\n    position: absolute;\n    top: -${(_ref) => {let { theme } = _ref;return theme.gridUnit * 5.25;}}px;\n    left: ${(_ref2) => {let { theme } = _ref2;return theme.gridUnit * 26.75;}}px;\n  }\n`;\nclass SaveModal extends React.Component {\n  constructor(props) {var _props$datasource, _props$form_data;\n    super(props);this.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    handleDatasetNameChange = (e) => {\n      // @ts-expect-error\n      this.setState({ datasetName: e.target.value });\n    };this.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    loadDashboard = async (id) => {\n      const response = await SupersetClient.get({\n        endpoint: `/api/v1/dashboard/${id}` });\n\n      return response.json.result;\n    };this.\n    loadDashboards = async (search, page, pageSize) => {\n      const queryParams = rison.encode({\n        columns: ['id', 'dashboard_title'],\n        filters: [\n        {\n          col: 'dashboard_title',\n          opr: 'ct',\n          value: search },\n\n        {\n          col: 'owners',\n          opr: 'rel_m_m',\n          value: this.props.userId }],\n\n\n        page,\n        page_size: pageSize,\n        order_column: 'dashboard_title' });\n\n      const { json } = await SupersetClient.get({\n        endpoint: `/api/v1/dashboard/?q=${queryParams}` });\n\n      const { result, count } = json;\n      return {\n        data: result.map((dashboard) => ({\n          value: dashboard.id,\n          label: dashboard.dashboard_title })),\n\n        totalCount: count };\n\n    };this.\n    renderSaveChartModal = () => {var _this$props$datasourc;return ___EmotionJSX(Form, { \"data-test\": \"save-modal-body\", layout: \"vertical\" },\n      (this.state.alert || this.props.alert) && ___EmotionJSX(Alert, { type: \"warning\", message: this.state.alert || this.props.alert, onClose: this.removeAlert }),\n      ___EmotionJSX(FormItem, { \"data-test\": \"radio-group\" },\n      ___EmotionJSX(Radio, { id: \"overwrite-radio\", disabled: !this.canOverwriteSlice(), checked: this.state.action === 'overwrite', onChange: () => this.changeAction('overwrite'), \"data-test\": \"save-overwrite-radio\" },\n      t('Save (Overwrite)')),\n\n      ___EmotionJSX(Radio, { id: \"saveas-radio\", \"data-test\": \"saveas-radio\", checked: this.state.action === 'saveas', onChange: () => this.changeAction('saveas') },\n      t('Save as...'))),\n\n\n      ___EmotionJSX(\"hr\", null),\n      ___EmotionJSX(FormItem, { label: t('Chart name'), required: true },\n      ___EmotionJSX(Input, { name: \"new_slice_name\", type: \"text\", placeholder: \"Name\", value: this.state.newSliceName, onChange: this.onSliceNameChange, \"data-test\": \"new-chart-name\" })),\n\n      ((_this$props$datasourc = this.props.datasource) == null ? void 0 : _this$props$datasourc.type) === 'query' && ___EmotionJSX(FormItem, { label: t('Dataset Name'), required: true },\n      ___EmotionJSX(InfoTooltipWithTrigger, { tooltip: t('A reusable dataset will be saved with your chart.'), placement: \"right\" }),\n      ___EmotionJSX(Input, { name: \"dataset_name\", type: \"text\", placeholder: \"Dataset Name\", value: this.state.datasetName, onChange: this.handleDatasetNameChange, \"data-test\": \"new-dataset-name\" })),\n\n      !(isFeatureEnabled(FeatureFlag.DASHBOARD_NATIVE_FILTERS) &&\n      this.state.vizType === 'filter_box') && ___EmotionJSX(FormItem, { label: t('Add to dashboard'), \"data-test\": \"save-chart-modal-select-dashboard-form\" },\n      ___EmotionJSX(AsyncSelect, { allowClear: true, allowNewOptions: true, ariaLabel: t('Select a dashboard'), options: this.loadDashboards, onChange: this.onDashboardChange, value: this.state.dashboard, placeholder: ___EmotionJSX(\"div\", null,\n        ___EmotionJSX(\"b\", null, t('Select')),\n        t(' a dashboard OR '),\n        ___EmotionJSX(\"b\", null, t('create')),\n        t(' a new one')) })));};this.\n\n\n\n    renderFooter = () => {var _this$props$datasourc2, _this$props$datasourc3;return ___EmotionJSX(\"div\", { \"data-test\": \"save-modal-footer\" },\n      ___EmotionJSX(Button, { id: \"btn_cancel\", buttonSize: \"small\", onClick: this.onHide },\n      t('Cancel')),\n\n      ___EmotionJSX(Button, { id: \"btn_modal_save_goto_dash\", buttonSize: \"small\", disabled: !this.state.newSliceName ||\n        !this.state.dashboard ||\n        ((_this$props$datasourc2 = this.props.datasource) == null ? void 0 : _this$props$datasourc2.type) !== DatasourceType.Table &&\n        !this.state.datasetName ||\n        isFeatureEnabled(FeatureFlag.DASHBOARD_NATIVE_FILTERS) &&\n        this.state.vizType === 'filter_box', onClick: () => this.saveOrOverwrite(true) },\n      this.isNewDashboard() ?\n      t('Save & go to new dashboard') :\n      t('Save & go to dashboard')),\n\n      ___EmotionJSX(Button, { id: \"btn_modal_save\", buttonSize: \"small\", buttonStyle: \"primary\", onClick: () => this.saveOrOverwrite(false), disabled: this.state.isLoading ||\n        !this.state.newSliceName ||\n        ((_this$props$datasourc3 = this.props.datasource) == null ? void 0 : _this$props$datasourc3.type) !== DatasourceType.Table &&\n        !this.state.datasetName, \"data-test\": \"btn-modal-save\" },\n      !this.canOverwriteSlice() && this.props.slice ?\n      t('Save as new chart') :\n      this.isNewDashboard() ?\n      t('Save to new dashboard') :\n      t('Save')));};this.state = { newSliceName: props.sliceName, datasetName: (_props$datasource = props.datasource) == null ? void 0 : _props$datasource.name, alert: null, action: this.canOverwriteSlice() ? 'overwrite' : 'saveas', isLoading: false, vizType: (_props$form_data = props.form_data) == null ? void 0 : _props$form_data.viz_type, dashboard: undefined };this.onDashboardChange = this.onDashboardChange.bind(this);this.onSliceNameChange = this.onSliceNameChange.bind(this);this.changeAction = this.changeAction.bind(this);this.saveOrOverwrite = this.saveOrOverwrite.bind(this);this.isNewDashboard = this.isNewDashboard.bind(this);this.removeAlert = this.removeAlert.bind(this);this.onHide = this.onHide.bind(this);}isNewDashboard() {const { dashboard } = this.state;return typeof (dashboard == null ? void 0 : dashboard.value) === 'string';}canOverwriteSlice() {var _this$props$slice, _this$props$slice$own, _this$props$slice2;return ((_this$props$slice = this.props.slice) == null ? void 0 : (_this$props$slice$own = _this$props$slice.owners) == null ? void 0 : _includesInstanceProperty(_this$props$slice$own).call(_this$props$slice$own, this.props.userId)) && !((_this$props$slice2 = this.props.slice) != null && _this$props$slice2.is_managed_externally);}async componentDidMount() {let { dashboardId } = this.props;if (!dashboardId) {const lastDashboard = sessionStorage.getItem(SK_DASHBOARD_ID);dashboardId = lastDashboard && parseInt(lastDashboard, 10);}if (dashboardId) {try {const result = await this.loadDashboard(dashboardId);if (result) {this.setState({ dashboard: { label: result.dashboard_title, value: result.id } });}} catch (error) {this.props.actions.addDangerToast(t('An error occurred while loading dashboard information.'));}}}onSliceNameChange(event) {this.setState({ newSliceName: event.target.value });}onDashboardChange(dashboard) {this.setState({ dashboard });}changeAction(action) {this.setState({ action });}onHide() {this.props.dispatch(setSaveChartModalVisibility(false));}async saveOrOverwrite(gotodash) {this.setState({ alert: null, isLoading: true });this.props.actions.removeSaveModalAlert();try {var _this$props$datasourc4;if (((_this$props$datasourc4 = this.props.datasource) == null ? void 0 : _this$props$datasourc4.type) === DatasourceType.Query) {var _this$props$datasourc5;const { schema, sql, database } = this.props.datasource;const { templateParams } = this.props.datasource;const columns = ((_this$props$datasourc5 = this.props.datasource) == null ? void 0 : _this$props$datasourc5.columns) || [];await this.props.actions.saveDataset({ schema, sql, database, templateParams, datasourceName: this.state.datasetName, columns });} //  Get chart dashboards\n      let sliceDashboards = [];if (this.props.slice && this.state.action === 'overwrite') {sliceDashboards = await this.props.actions.getSliceDashboards(this.props.slice);}const formData = this.props.form_data || {};delete formData.url_params;let dashboard = null;if (this.state.dashboard) {var _dashboard;let validId = this.state.dashboard.value;if (this.isNewDashboard()) {const response = await this.props.actions.createDashboard(this.state.dashboard.label);validId = response.id;}try {dashboard = await this.loadDashboard(validId);} catch (error) {this.props.actions.saveSliceFailed();return;}if (isDefined(dashboard) && isDefined((_dashboard = dashboard) == null ? void 0 : _dashboard.id)) {sliceDashboards = _includesInstanceProperty(sliceDashboards).call(sliceDashboards, dashboard.id) ? sliceDashboards : [...sliceDashboards, dashboard.id];formData.dashboards = sliceDashboards;}} // Sets the form data\n      this.props.actions.setFormData({ ...formData }); //  Update or create slice\n      let value;if (this.state.action === 'overwrite') {value = await this.props.actions.updateSlice(this.props.slice, this.state.newSliceName, sliceDashboards, dashboard ? { title: dashboard.dashboard_title, new: this.isNewDashboard() } : null);} else {value = await this.props.actions.createSlice(this.state.newSliceName, sliceDashboards, dashboard ? { title: dashboard.dashboard_title, new: this.isNewDashboard() } : null);}if (dashboard) {sessionStorage.setItem(SK_DASHBOARD_ID, `${dashboard.id}`);} else {sessionStorage.removeItem(SK_DASHBOARD_ID);} // Go to new dashboard url\n      if (gotodash && dashboard) {this.props.history.push(dashboard.url);return;}const searchParams = new URLSearchParams(window.location.search);searchParams.set('save_action', this.state.action);if (this.state.action !== 'overwrite') {searchParams.delete('form_data_key');}if (this.state.action === 'saveas') {searchParams.set('slice_id', value.id.toString());}this.props.history.replace(`/explore/?${searchParams.toString()}`);this.setState({ isLoading: false });this.onHide();} finally {this.setState({ isLoading: false });}}removeAlert() {if (this.props.alert) {\n      this.props.actions.removeSaveModalAlert();\n    }\n    this.setState({ alert: null });\n  }\n  render() {\n    return ___EmotionJSX(StyledModal, { show: this.props.isVisible, onHide: this.onHide, title: t('Save chart'), footer: this.renderFooter() },\n    this.state.isLoading ? ___EmotionJSX(\"div\", { css: css`\n              display: flex;\n              justify-content: center;\n            ` },\n    ___EmotionJSX(Loading, { position: \"normal\" })) :\n    this.renderSaveChartModal());\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}function mapStateToProps(_ref3) {let { explore, saveModal, user } = _ref3;\n  return {\n    datasource: explore.datasource,\n    slice: explore.slice,\n    userId: user == null ? void 0 : user.userId,\n    dashboards: saveModal.dashboards,\n    alert: saveModal.saveModalAlert,\n    isVisible: saveModal.isVisible };\n\n}const _default =\nwithRouter(connect(mapStateToProps)(SaveModal));export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(SK_DASHBOARD_ID, \"SK_DASHBOARD_ID\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/SaveModal.tsx\");reactHotLoader.register(StyledModal, \"StyledModal\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/SaveModal.tsx\");reactHotLoader.register(SaveModal, \"SaveModal\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/SaveModal.tsx\");reactHotLoader.register(mapStateToProps, \"mapStateToProps\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/SaveModal.tsx\");reactHotLoader.register(_default, \"default\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/SaveModal.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"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","names":["React","isFeatureEnabled","rison","connect","withRouter","InfoTooltipWithTrigger","css","DatasourceType","FeatureFlag","isDefined","styled","SupersetClient","t","Input","Form","FormItem","Alert","Modal","Radio","Button","AsyncSelect","Loading","setSaveChartModalVisibility","SK_DASHBOARD_ID","StyledModal","theme","gridUnit","SaveModal","Component","constructor","props","handleDatasetNameChange","e","setState","datasetName","target","value","loadDashboard","id","response","get","endpoint","json","result","loadDashboards","search","page","pageSize","queryParams","encode","columns","filters","col","opr","userId","page_size","order_column","count","data","map","dashboard","label","dashboard_title","totalCount","renderSaveChartModal","state","alert","removeAlert","canOverwriteSlice","action","changeAction","newSliceName","onSliceNameChange","datasource","type","DASHBOARD_NATIVE_FILTERS","vizType","onDashboardChange","renderFooter","onHide","Table","saveOrOverwrite","isNewDashboard","isLoading","slice","sliceName","name","form_data","viz_type","undefined","bind","owners","is_managed_externally","componentDidMount","dashboardId","lastDashboard","sessionStorage","getItem","parseInt","error","actions","addDangerToast","event","dispatch","gotodash","removeSaveModalAlert","Query","schema","sql","database","templateParams","saveDataset","datasourceName","sliceDashboards","getSliceDashboards","formData","url_params","validId","createDashboard","saveSliceFailed","dashboards","setFormData","updateSlice","title","new","createSlice","setItem","removeItem","history","push","url","searchParams","URLSearchParams","window","location","set","delete","toString","replace","render","isVisible","mapStateToProps","explore","saveModal","user","saveModalAlert"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/SaveModal.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint camelcase: 0 */\nimport React from 'react';\nimport { Dispatch } from 'redux';\nimport { isFeatureEnabled } from 'src/featureFlags';\nimport rison from 'rison';\nimport { connect } from 'react-redux';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { InfoTooltipWithTrigger } from '@superset-ui/chart-controls';\nimport {\n  css,\n  DatasourceType,\n  FeatureFlag,\n  isDefined,\n  styled,\n  SupersetClient,\n  t,\n} from '@superset-ui/core';\nimport { Input } from 'src/components/Input';\nimport { Form, FormItem } from 'src/components/Form';\nimport Alert from 'src/components/Alert';\nimport Modal from 'src/components/Modal';\nimport { Radio } from 'src/components/Radio';\nimport Button from 'src/components/Button';\nimport { AsyncSelect } from 'src/components';\nimport Loading from 'src/components/Loading';\nimport { setSaveChartModalVisibility } from 'src/explore/actions/saveModalActions';\nimport { SaveActionType } from 'src/explore/types';\n\n// Session storage key for recent dashboard\nconst SK_DASHBOARD_ID = 'save_chart_recent_dashboard';\n\ninterface SaveModalProps extends RouteComponentProps {\n  addDangerToast: (msg: string) => void;\n  actions: Record<string, any>;\n  form_data?: Record<string, any>;\n  userId: number;\n  alert?: string;\n  sliceName?: string;\n  slice?: Record<string, any>;\n  datasource?: Record<string, any>;\n  dashboardId: '' | number | null;\n  isVisible: boolean;\n  dispatch: Dispatch;\n}\n\ntype SaveModalState = {\n  newSliceName?: string;\n  datasetName: string;\n  alert: string | null;\n  action: SaveActionType;\n  isLoading: boolean;\n  saveStatus?: string | null;\n  vizType?: string;\n  dashboard?: { label: string; value: string | number };\n};\n\nexport const StyledModal = styled(Modal)`\n  .ant-modal-body {\n    overflow: visible;\n  }\n  i {\n    position: absolute;\n    top: -${({ theme }) => theme.gridUnit * 5.25}px;\n    left: ${({ theme }) => theme.gridUnit * 26.75}px;\n  }\n`;\n\nclass SaveModal extends React.Component<SaveModalProps, SaveModalState> {\n  constructor(props: SaveModalProps) {\n    super(props);\n    this.state = {\n      newSliceName: props.sliceName,\n      datasetName: props.datasource?.name,\n      alert: null,\n      action: this.canOverwriteSlice() ? 'overwrite' : 'saveas',\n      isLoading: false,\n      vizType: props.form_data?.viz_type,\n      dashboard: undefined,\n    };\n    this.onDashboardChange = this.onDashboardChange.bind(this);\n    this.onSliceNameChange = this.onSliceNameChange.bind(this);\n    this.changeAction = this.changeAction.bind(this);\n    this.saveOrOverwrite = this.saveOrOverwrite.bind(this);\n    this.isNewDashboard = this.isNewDashboard.bind(this);\n    this.removeAlert = this.removeAlert.bind(this);\n    this.onHide = this.onHide.bind(this);\n  }\n\n  isNewDashboard(): boolean {\n    const { dashboard } = this.state;\n    return typeof dashboard?.value === 'string';\n  }\n\n  canOverwriteSlice(): boolean {\n    return (\n      this.props.slice?.owners?.includes(this.props.userId) &&\n      !this.props.slice?.is_managed_externally\n    );\n  }\n\n  async componentDidMount() {\n    let { dashboardId } = this.props;\n    if (!dashboardId) {\n      const lastDashboard = sessionStorage.getItem(SK_DASHBOARD_ID);\n      dashboardId = lastDashboard && parseInt(lastDashboard, 10);\n    }\n    if (dashboardId) {\n      try {\n        const result = await this.loadDashboard(dashboardId);\n        if (result) {\n          this.setState({\n            dashboard: { label: result.dashboard_title, value: result.id },\n          });\n        }\n      } catch (error) {\n        this.props.actions.addDangerToast(\n          t('An error occurred while loading dashboard information.'),\n        );\n      }\n    }\n  }\n\n  handleDatasetNameChange = (e: React.FormEvent<HTMLInputElement>) => {\n    // @ts-expect-error\n    this.setState({ datasetName: e.target.value });\n  };\n\n  onSliceNameChange(event: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({ newSliceName: event.target.value });\n  }\n\n  onDashboardChange(dashboard: { label: string; value: string | number }) {\n    this.setState({ dashboard });\n  }\n\n  changeAction(action: SaveActionType) {\n    this.setState({ action });\n  }\n\n  onHide() {\n    this.props.dispatch(setSaveChartModalVisibility(false));\n  }\n\n  async saveOrOverwrite(gotodash: boolean) {\n    this.setState({ alert: null, isLoading: true });\n    this.props.actions.removeSaveModalAlert();\n\n    //  Create or retrieve dashboard\n    type DashboardGetResponse = {\n      id: number;\n      url: string;\n      dashboard_title: string;\n    };\n\n    try {\n      if (this.props.datasource?.type === DatasourceType.Query) {\n        const { schema, sql, database } = this.props.datasource;\n        const { templateParams } = this.props.datasource;\n        const columns = this.props.datasource?.columns || [];\n\n        await this.props.actions.saveDataset({\n          schema,\n          sql,\n          database,\n          templateParams,\n          datasourceName: this.state.datasetName,\n          columns,\n        });\n      }\n\n      //  Get chart dashboards\n      let sliceDashboards: number[] = [];\n      if (this.props.slice && this.state.action === 'overwrite') {\n        sliceDashboards = await this.props.actions.getSliceDashboards(\n          this.props.slice,\n        );\n      }\n\n      const formData = this.props.form_data || {};\n      delete formData.url_params;\n\n      let dashboard: DashboardGetResponse | null = null;\n      if (this.state.dashboard) {\n        let validId = this.state.dashboard.value;\n        if (this.isNewDashboard()) {\n          const response = await this.props.actions.createDashboard(\n            this.state.dashboard.label,\n          );\n          validId = response.id;\n        }\n\n        try {\n          dashboard = await this.loadDashboard(validId as number);\n        } catch (error) {\n          this.props.actions.saveSliceFailed();\n          return;\n        }\n\n        if (isDefined(dashboard) && isDefined(dashboard?.id)) {\n          sliceDashboards = sliceDashboards.includes(dashboard.id)\n            ? sliceDashboards\n            : [...sliceDashboards, dashboard.id];\n          formData.dashboards = sliceDashboards;\n        }\n      }\n\n      // Sets the form data\n      this.props.actions.setFormData({ ...formData });\n\n      //  Update or create slice\n      let value: { id: number };\n      if (this.state.action === 'overwrite') {\n        value = await this.props.actions.updateSlice(\n          this.props.slice,\n          this.state.newSliceName,\n          sliceDashboards,\n          dashboard\n            ? {\n                title: dashboard.dashboard_title,\n                new: this.isNewDashboard(),\n              }\n            : null,\n        );\n      } else {\n        value = await this.props.actions.createSlice(\n          this.state.newSliceName,\n          sliceDashboards,\n          dashboard\n            ? {\n                title: dashboard.dashboard_title,\n                new: this.isNewDashboard(),\n              }\n            : null,\n        );\n      }\n\n      if (dashboard) {\n        sessionStorage.setItem(SK_DASHBOARD_ID, `${dashboard.id}`);\n      } else {\n        sessionStorage.removeItem(SK_DASHBOARD_ID);\n      }\n\n      // Go to new dashboard url\n      if (gotodash && dashboard) {\n        this.props.history.push(dashboard.url);\n        return;\n      }\n\n      const searchParams = new URLSearchParams(window.location.search);\n      searchParams.set('save_action', this.state.action);\n      if (this.state.action !== 'overwrite') {\n        searchParams.delete('form_data_key');\n      }\n      if (this.state.action === 'saveas') {\n        searchParams.set('slice_id', value.id.toString());\n      }\n      this.props.history.replace(`/explore/?${searchParams.toString()}`);\n\n      this.setState({ isLoading: false });\n      this.onHide();\n    } finally {\n      this.setState({ isLoading: false });\n    }\n  }\n\n  loadDashboard = async (id: number) => {\n    const response = await SupersetClient.get({\n      endpoint: `/api/v1/dashboard/${id}`,\n    });\n    return response.json.result;\n  };\n\n  loadDashboards = async (search: string, page: number, pageSize: number) => {\n    const queryParams = rison.encode({\n      columns: ['id', 'dashboard_title'],\n      filters: [\n        {\n          col: 'dashboard_title',\n          opr: 'ct',\n          value: search,\n        },\n        {\n          col: 'owners',\n          opr: 'rel_m_m',\n          value: this.props.userId,\n        },\n      ],\n      page,\n      page_size: pageSize,\n      order_column: 'dashboard_title',\n    });\n\n    const { json } = await SupersetClient.get({\n      endpoint: `/api/v1/dashboard/?q=${queryParams}`,\n    });\n    const { result, count } = json;\n    return {\n      data: result.map(\n        (dashboard: { id: number; dashboard_title: string }) => ({\n          value: dashboard.id,\n          label: dashboard.dashboard_title,\n        }),\n      ),\n      totalCount: count,\n    };\n  };\n\n  renderSaveChartModal = () => (\n    <Form data-test=\"save-modal-body\" layout=\"vertical\">\n      {(this.state.alert || this.props.alert) && (\n        <Alert\n          type=\"warning\"\n          message={this.state.alert || this.props.alert}\n          onClose={this.removeAlert}\n        />\n      )}\n      <FormItem data-test=\"radio-group\">\n        <Radio\n          id=\"overwrite-radio\"\n          disabled={!this.canOverwriteSlice()}\n          checked={this.state.action === 'overwrite'}\n          onChange={() => this.changeAction('overwrite')}\n          data-test=\"save-overwrite-radio\"\n        >\n          {t('Save (Overwrite)')}\n        </Radio>\n        <Radio\n          id=\"saveas-radio\"\n          data-test=\"saveas-radio\"\n          checked={this.state.action === 'saveas'}\n          onChange={() => this.changeAction('saveas')}\n        >\n          {t('Save as...')}\n        </Radio>\n      </FormItem>\n      <hr />\n      <FormItem label={t('Chart name')} required>\n        <Input\n          name=\"new_slice_name\"\n          type=\"text\"\n          placeholder=\"Name\"\n          value={this.state.newSliceName}\n          onChange={this.onSliceNameChange}\n          data-test=\"new-chart-name\"\n        />\n      </FormItem>\n      {this.props.datasource?.type === 'query' && (\n        <FormItem label={t('Dataset Name')} required>\n          <InfoTooltipWithTrigger\n            tooltip={t('A reusable dataset will be saved with your chart.')}\n            placement=\"right\"\n          />\n          <Input\n            name=\"dataset_name\"\n            type=\"text\"\n            placeholder=\"Dataset Name\"\n            value={this.state.datasetName}\n            onChange={this.handleDatasetNameChange}\n            data-test=\"new-dataset-name\"\n          />\n        </FormItem>\n      )}\n      {!(\n        isFeatureEnabled(FeatureFlag.DASHBOARD_NATIVE_FILTERS) &&\n        this.state.vizType === 'filter_box'\n      ) && (\n        <FormItem\n          label={t('Add to dashboard')}\n          data-test=\"save-chart-modal-select-dashboard-form\"\n        >\n          <AsyncSelect\n            allowClear\n            allowNewOptions\n            ariaLabel={t('Select a dashboard')}\n            options={this.loadDashboards}\n            onChange={this.onDashboardChange}\n            value={this.state.dashboard}\n            placeholder={\n              <div>\n                <b>{t('Select')}</b>\n                {t(' a dashboard OR ')}\n                <b>{t('create')}</b>\n                {t(' a new one')}\n              </div>\n            }\n          />\n        </FormItem>\n      )}\n    </Form>\n  );\n\n  renderFooter = () => (\n    <div data-test=\"save-modal-footer\">\n      <Button id=\"btn_cancel\" buttonSize=\"small\" onClick={this.onHide}>\n        {t('Cancel')}\n      </Button>\n      <Button\n        id=\"btn_modal_save_goto_dash\"\n        buttonSize=\"small\"\n        disabled={\n          !this.state.newSliceName ||\n          !this.state.dashboard ||\n          (this.props.datasource?.type !== DatasourceType.Table &&\n            !this.state.datasetName) ||\n          (isFeatureEnabled(FeatureFlag.DASHBOARD_NATIVE_FILTERS) &&\n            this.state.vizType === 'filter_box')\n        }\n        onClick={() => this.saveOrOverwrite(true)}\n      >\n        {this.isNewDashboard()\n          ? t('Save & go to new dashboard')\n          : t('Save & go to dashboard')}\n      </Button>\n      <Button\n        id=\"btn_modal_save\"\n        buttonSize=\"small\"\n        buttonStyle=\"primary\"\n        onClick={() => this.saveOrOverwrite(false)}\n        disabled={\n          this.state.isLoading ||\n          !this.state.newSliceName ||\n          (this.props.datasource?.type !== DatasourceType.Table &&\n            !this.state.datasetName)\n        }\n        data-test=\"btn-modal-save\"\n      >\n        {!this.canOverwriteSlice() && this.props.slice\n          ? t('Save as new chart')\n          : this.isNewDashboard()\n          ? t('Save to new dashboard')\n          : t('Save')}\n      </Button>\n    </div>\n  );\n\n  removeAlert() {\n    if (this.props.alert) {\n      this.props.actions.removeSaveModalAlert();\n    }\n    this.setState({ alert: null });\n  }\n\n  render() {\n    return (\n      <StyledModal\n        show={this.props.isVisible}\n        onHide={this.onHide}\n        title={t('Save chart')}\n        footer={this.renderFooter()}\n      >\n        {this.state.isLoading ? (\n          <div\n            css={css`\n              display: flex;\n              justify-content: center;\n            `}\n          >\n            <Loading position=\"normal\" />\n          </div>\n        ) : (\n          this.renderSaveChartModal()\n        )}\n      </StyledModal>\n    );\n  }\n}\n\ninterface StateProps {\n  datasource: any;\n  slice: any;\n  userId: any;\n  dashboards: any;\n  alert: any;\n  isVisible: boolean;\n}\n\nfunction mapStateToProps({\n  explore,\n  saveModal,\n  user,\n}: Record<string, any>): StateProps {\n  return {\n    datasource: explore.datasource,\n    slice: explore.slice,\n    userId: user?.userId,\n    dashboards: saveModal.dashboards,\n    alert: saveModal.saveModalAlert,\n    isVisible: saveModal.isVisible,\n  };\n}\n\nexport default withRouter(connect(mapStateToProps)(SaveModal));\n"]},"metadata":{},"sourceType":"module"}