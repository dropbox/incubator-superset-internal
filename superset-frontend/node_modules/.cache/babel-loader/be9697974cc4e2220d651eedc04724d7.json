{"ast":null,"code":"import _omit from \"lodash/omit\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint camelcase: 0 */\nimport { t } from '@superset-ui/core';\n\nimport { HYDRATE_DASHBOARD } from 'src/dashboard/actions/hydrate';\nimport { DatasourcesAction } from 'src/dashboard/actions/datasources';\nimport { getFormDataFromControls } from 'src/explore/controlUtils';\nimport { HYDRATE_EXPLORE } from 'src/explore/actions/hydrateExplore';\nimport { now } from 'src/utils/dates';\nimport * as actions from './chartAction';\nexport const chart = {\n  id: 0,\n  chartAlert: null,\n  chartStatus: 'loading',\n  chartStackTrace: null,\n  chartUpdateEndTime: null,\n  chartUpdateStartTime: 0,\n  latestQueryFormData: {},\n  sliceFormData: null,\n  queryController: null,\n  queriesResponse: null,\n  triggerQuery: true,\n  lastRendered: 0 };\n\nexport default function chartReducer(charts, action) {if (charts === void 0) {charts = {};}\n  const actionHandlers = {\n    [actions.ADD_CHART]() {\n      return {\n        ...chart,\n        ...action.chart };\n\n    },\n    [actions.CHART_UPDATE_SUCCEEDED](state) {\n      return {\n        ...state,\n        chartStatus: 'success',\n        chartAlert: null,\n        queriesResponse: action.queriesResponse,\n        chartUpdateEndTime: now() };\n\n    },\n    [actions.CHART_UPDATE_STARTED](state) {\n      return {\n        ...state,\n        chartStatus: 'loading',\n        chartStackTrace: null,\n        chartAlert: null,\n        chartUpdateEndTime: null,\n        chartUpdateStartTime: now(),\n        queryController: action.queryController };\n\n    },\n    [actions.CHART_UPDATE_STOPPED](state) {\n      return {\n        ...state,\n        chartStatus: 'stopped',\n        chartAlert: t('Updating chart was stopped'),\n        chartUpdateEndTime: now() };\n\n    },\n    [actions.CHART_RENDERING_SUCCEEDED](state) {\n      return { ...state, chartStatus: 'rendered', chartUpdateEndTime: now() };\n    },\n    [actions.CHART_RENDERING_FAILED](state) {\n      return {\n        ...state,\n        chartStatus: 'failed',\n        chartStackTrace: action.stackTrace,\n        chartAlert: t('An error occurred while rendering the visualization: %s', action.error) };\n\n    },\n    [actions.CHART_UPDATE_FAILED](state) {var _action$queriesRespon, _action$queriesRespon2, _action$queriesRespon3, _action$queriesRespon4;\n      return {\n        ...state,\n        chartStatus: 'failed',\n        chartAlert: action.queriesResponse ? (_action$queriesRespon =\n        action.queriesResponse) == null ? void 0 : (_action$queriesRespon2 = _action$queriesRespon[0]) == null ? void 0 : _action$queriesRespon2.error :\n        t('Network error.'),\n        chartUpdateEndTime: now(),\n        queriesResponse: action.queriesResponse,\n        chartStackTrace: action.queriesResponse ? (_action$queriesRespon3 =\n        action.queriesResponse) == null ? void 0 : (_action$queriesRespon4 = _action$queriesRespon3[0]) == null ? void 0 : _action$queriesRespon4.stacktrace :\n        null };\n\n    },\n    [actions.DYNAMIC_PLUGIN_CONTROLS_READY](state) {\n      const sliceFormData = getFormDataFromControls(action.controlsState);\n      return { ...state, sliceFormData };\n    },\n    [actions.TRIGGER_QUERY](state) {\n      return {\n        ...state,\n        triggerQuery: action.value,\n        chartStatus: 'loading' };\n\n    },\n    [actions.RENDER_TRIGGERED](state) {\n      return { ...state, lastRendered: action.value };\n    },\n    [actions.UPDATE_QUERY_FORM_DATA](state) {\n      return { ...state, latestQueryFormData: action.value };\n    },\n    [actions.ANNOTATION_QUERY_STARTED](state) {var _state$annotationQuer;\n      if ((_state$annotationQuer = state.annotationQuery) != null && _state$annotationQuer[action.annotation.name]) {\n        state.annotationQuery[action.annotation.name].abort();\n      }\n      const annotationQuery = {\n        ...state.annotationQuery,\n        [action.annotation.name]: action.queryController };\n\n      return {\n        ...state,\n        annotationQuery };\n\n    },\n    [actions.ANNOTATION_QUERY_SUCCESS](state) {\n      const annotationData = {\n        ...state.annotationData,\n        [action.annotation.name]: action.queryResponse.data };\n\n      const annotationError = { ...state.annotationError };\n      delete annotationError[action.annotation.name];\n      const annotationQuery = { ...state.annotationQuery };\n      delete annotationQuery[action.annotation.name];\n      return {\n        ...state,\n        annotationData,\n        annotationError,\n        annotationQuery };\n\n    },\n    [actions.ANNOTATION_QUERY_FAILED](state) {\n      const annotationData = { ...state.annotationData };\n      delete annotationData[action.annotation.name];\n      const annotationError = {\n        ...state.annotationError,\n        [action.annotation.name]: action.queryResponse ?\n        action.queryResponse.error :\n        t('Network error.') };\n\n      const annotationQuery = { ...state.annotationQuery };\n      delete annotationQuery[action.annotation.name];\n      return {\n        ...state,\n        annotationData,\n        annotationError,\n        annotationQuery };\n\n    } };\n\n  /* eslint-disable no-param-reassign */\n  if (action.type === actions.REMOVE_CHART) {\n    return _omit(charts, [action.key]);\n  }\n  if (action.type === actions.UPDATE_CHART_ID) {\n    const { newId, key } = action;\n    charts[newId] = {\n      ...charts[key],\n      id: newId };\n\n    delete charts[key];\n    return charts;\n  }\n  if (action.type === HYDRATE_DASHBOARD || action.type === HYDRATE_EXPLORE) {\n    return { ...action.data.charts };\n  }\n  if (action.type === DatasourcesAction.SET_DATASOURCES) {\n    return Object.fromEntries(Object.entries(charts).map((_ref) => {let [chartId, chart] = _ref;return [\n      chartId,\n      // some charts may not have properly handled missing datasource,\n      // causing a JS error, so we reset error message and try to re-render\n      // the chart once the datasource is fully loaded\n      chart.chartStatus === 'failed' && chart.chartStackTrace ?\n      {\n        ...chart,\n        chartStatus: '',\n        chartStackTrace: null,\n        chartAlert: null } :\n\n      chart];}));\n\n  }\n  if (action.type in actionHandlers) {\n    return {\n      ...charts,\n      [action.key]: actionHandlers[action.type](charts[action.key]) };\n\n  }\n  return charts;\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(chart, \"chart\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/Chart/chartReducer.ts\");reactHotLoader.register(chartReducer, \"chartReducer\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/Chart/chartReducer.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"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","names":["t","HYDRATE_DASHBOARD","DatasourcesAction","getFormDataFromControls","HYDRATE_EXPLORE","now","actions","chart","id","chartAlert","chartStatus","chartStackTrace","chartUpdateEndTime","chartUpdateStartTime","latestQueryFormData","sliceFormData","queryController","queriesResponse","triggerQuery","lastRendered","chartReducer","charts","action","actionHandlers","ADD_CHART","CHART_UPDATE_SUCCEEDED","state","CHART_UPDATE_STARTED","CHART_UPDATE_STOPPED","CHART_RENDERING_SUCCEEDED","CHART_RENDERING_FAILED","stackTrace","error","CHART_UPDATE_FAILED","stacktrace","DYNAMIC_PLUGIN_CONTROLS_READY","controlsState","TRIGGER_QUERY","value","RENDER_TRIGGERED","UPDATE_QUERY_FORM_DATA","ANNOTATION_QUERY_STARTED","annotationQuery","annotation","name","abort","ANNOTATION_QUERY_SUCCESS","annotationData","queryResponse","data","annotationError","ANNOTATION_QUERY_FAILED","type","REMOVE_CHART","key","UPDATE_CHART_ID","newId","SET_DATASOURCES","Object","fromEntries","entries","map","chartId"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/Chart/chartReducer.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint camelcase: 0 */\nimport { t } from '@superset-ui/core';\nimport { omit } from 'lodash';\nimport { HYDRATE_DASHBOARD } from 'src/dashboard/actions/hydrate';\nimport { DatasourcesAction } from 'src/dashboard/actions/datasources';\nimport { ChartState } from 'src/explore/types';\nimport { getFormDataFromControls } from 'src/explore/controlUtils';\nimport { HYDRATE_EXPLORE } from 'src/explore/actions/hydrateExplore';\nimport { now } from 'src/utils/dates';\nimport * as actions from './chartAction';\n\nexport const chart: ChartState = {\n  id: 0,\n  chartAlert: null,\n  chartStatus: 'loading',\n  chartStackTrace: null,\n  chartUpdateEndTime: null,\n  chartUpdateStartTime: 0,\n  latestQueryFormData: {},\n  sliceFormData: null,\n  queryController: null,\n  queriesResponse: null,\n  triggerQuery: true,\n  lastRendered: 0,\n};\n\ntype ChartActionHandler = (state: ChartState) => ChartState;\n\ntype AnyChartAction = Record<string, any>;\n\nexport default function chartReducer(\n  charts: Record<string, ChartState> = {},\n  action: AnyChartAction,\n) {\n  const actionHandlers: Record<string, ChartActionHandler> = {\n    [actions.ADD_CHART]() {\n      return {\n        ...chart,\n        ...action.chart,\n      };\n    },\n    [actions.CHART_UPDATE_SUCCEEDED](state) {\n      return {\n        ...state,\n        chartStatus: 'success',\n        chartAlert: null,\n        queriesResponse: action.queriesResponse,\n        chartUpdateEndTime: now(),\n      };\n    },\n    [actions.CHART_UPDATE_STARTED](state) {\n      return {\n        ...state,\n        chartStatus: 'loading',\n        chartStackTrace: null,\n        chartAlert: null,\n        chartUpdateEndTime: null,\n        chartUpdateStartTime: now(),\n        queryController: action.queryController,\n      };\n    },\n    [actions.CHART_UPDATE_STOPPED](state) {\n      return {\n        ...state,\n        chartStatus: 'stopped',\n        chartAlert: t('Updating chart was stopped'),\n        chartUpdateEndTime: now(),\n      };\n    },\n    [actions.CHART_RENDERING_SUCCEEDED](state) {\n      return { ...state, chartStatus: 'rendered', chartUpdateEndTime: now() };\n    },\n    [actions.CHART_RENDERING_FAILED](state) {\n      return {\n        ...state,\n        chartStatus: 'failed',\n        chartStackTrace: action.stackTrace,\n        chartAlert: t(\n          'An error occurred while rendering the visualization: %s',\n          action.error,\n        ),\n      };\n    },\n    [actions.CHART_UPDATE_FAILED](state) {\n      return {\n        ...state,\n        chartStatus: 'failed',\n        chartAlert: action.queriesResponse\n          ? action.queriesResponse?.[0]?.error\n          : t('Network error.'),\n        chartUpdateEndTime: now(),\n        queriesResponse: action.queriesResponse,\n        chartStackTrace: action.queriesResponse\n          ? action.queriesResponse?.[0]?.stacktrace\n          : null,\n      };\n    },\n    [actions.DYNAMIC_PLUGIN_CONTROLS_READY](state) {\n      const sliceFormData = getFormDataFromControls(action.controlsState);\n      return { ...state, sliceFormData };\n    },\n    [actions.TRIGGER_QUERY](state) {\n      return {\n        ...state,\n        triggerQuery: action.value,\n        chartStatus: 'loading',\n      };\n    },\n    [actions.RENDER_TRIGGERED](state) {\n      return { ...state, lastRendered: action.value };\n    },\n    [actions.UPDATE_QUERY_FORM_DATA](state) {\n      return { ...state, latestQueryFormData: action.value };\n    },\n    [actions.ANNOTATION_QUERY_STARTED](state) {\n      if (state.annotationQuery?.[action.annotation.name]) {\n        state.annotationQuery[action.annotation.name].abort();\n      }\n      const annotationQuery = {\n        ...state.annotationQuery,\n        [action.annotation.name]: action.queryController,\n      };\n      return {\n        ...state,\n        annotationQuery,\n      };\n    },\n    [actions.ANNOTATION_QUERY_SUCCESS](state) {\n      const annotationData = {\n        ...state.annotationData,\n        [action.annotation.name]: action.queryResponse.data,\n      };\n      const annotationError = { ...state.annotationError };\n      delete annotationError[action.annotation.name];\n      const annotationQuery = { ...state.annotationQuery };\n      delete annotationQuery[action.annotation.name];\n      return {\n        ...state,\n        annotationData,\n        annotationError,\n        annotationQuery,\n      };\n    },\n    [actions.ANNOTATION_QUERY_FAILED](state) {\n      const annotationData = { ...state.annotationData };\n      delete annotationData[action.annotation.name];\n      const annotationError = {\n        ...state.annotationError,\n        [action.annotation.name]: action.queryResponse\n          ? action.queryResponse.error\n          : t('Network error.'),\n      };\n      const annotationQuery = { ...state.annotationQuery };\n      delete annotationQuery[action.annotation.name];\n      return {\n        ...state,\n        annotationData,\n        annotationError,\n        annotationQuery,\n      };\n    },\n  };\n\n  /* eslint-disable no-param-reassign */\n  if (action.type === actions.REMOVE_CHART) {\n    return omit(charts, [action.key]);\n  }\n  if (action.type === actions.UPDATE_CHART_ID) {\n    const { newId, key } = action;\n    charts[newId] = {\n      ...charts[key],\n      id: newId,\n    };\n    delete charts[key];\n    return charts;\n  }\n  if (action.type === HYDRATE_DASHBOARD || action.type === HYDRATE_EXPLORE) {\n    return { ...action.data.charts };\n  }\n  if (action.type === DatasourcesAction.SET_DATASOURCES) {\n    return Object.fromEntries(\n      Object.entries(charts).map(([chartId, chart]) => [\n        chartId,\n        // some charts may not have properly handled missing datasource,\n        // causing a JS error, so we reset error message and try to re-render\n        // the chart once the datasource is fully loaded\n        chart.chartStatus === 'failed' && chart.chartStackTrace\n          ? {\n              ...chart,\n              chartStatus: '',\n              chartStackTrace: null,\n              chartAlert: null,\n            }\n          : chart,\n      ]),\n    );\n  }\n\n  if (action.type in actionHandlers) {\n    return {\n      ...charts,\n      [action.key]: actionHandlers[action.type](charts[action.key]),\n    };\n  }\n\n  return charts;\n}\n"]},"metadata":{},"sourceType":"module"}