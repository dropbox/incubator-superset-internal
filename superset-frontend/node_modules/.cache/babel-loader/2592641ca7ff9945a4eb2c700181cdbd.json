{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { isColumnMeta } from '@superset-ui/chart-controls';\nimport { ensureIsArray, isPhysicalColumn } from '@superset-ui/core';\nconst getColumnNameOrAdhocColumn = (column) => {\n  if (isColumnMeta(column)) {\n    return column.column_name;\n  }\n  return column;\n};\nexport class OptionSelector {\n\n\n\n  constructor(options, multi, initialValues) {this.values = void 0;this.options = void 0;this.multi = void 0;\n    this.options = options;\n    this.multi = multi;\n    this.values = ensureIsArray(initialValues).\n    map((value) => {\n      if (value && isPhysicalColumn(value) && value in options) {\n        return options[value];\n      }\n      if (!isPhysicalColumn(value)) {\n        return value;\n      }\n      return null;\n    }).\n    filter(Boolean);\n  }\n  add(value) {\n    if (isPhysicalColumn(value) && value in this.options) {\n      this.values.push(this.options[value]);\n    } else\n    if (!isPhysicalColumn(value)) {\n      this.values.push(value);\n    }\n  }\n  del(idx) {\n    this.values.splice(idx, 1);\n  }\n  replace(idx, value) {\n    if (this.values[idx]) {\n      this.values[idx] = isPhysicalColumn(value) ? this.options[value] : value;\n    }\n  }\n  swap(a, b) {\n    [this.values[a], this.values[b]] = [this.values[b], this.values[a]];\n  }\n  has(value) {\n    return this.values.some((col) => {\n      if (isPhysicalColumn(value)) {\n        return col.column_name === value ||\n        col.label === value;\n      }\n      return col.column_name === value.label ||\n      col.label === value.label;\n    });\n  }\n  getValues() {\n    if (!this.multi) {\n      return this.values.length > 0 ?\n      getColumnNameOrAdhocColumn(this.values[0]) :\n      undefined;\n    }\n    return this.values.map(getColumnNameOrAdhocColumn);\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(getColumnNameOrAdhocColumn, \"getColumnNameOrAdhocColumn\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/utils/optionSelector.ts\");reactHotLoader.register(OptionSelector, \"OptionSelector\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/utils/optionSelector.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"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","names":["isColumnMeta","ensureIsArray","isPhysicalColumn","getColumnNameOrAdhocColumn","column","column_name","OptionSelector","constructor","options","multi","initialValues","values","map","value","filter","Boolean","add","push","del","idx","splice","replace","swap","a","b","has","some","col","label","getValues","length","undefined"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/utils/optionSelector.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ColumnMeta, isColumnMeta } from '@superset-ui/chart-controls';\nimport {\n  AdhocColumn,\n  ensureIsArray,\n  QueryFormColumn,\n  isPhysicalColumn,\n} from '@superset-ui/core';\n\nconst getColumnNameOrAdhocColumn = (\n  column: ColumnMeta | AdhocColumn,\n): QueryFormColumn => {\n  if (isColumnMeta(column)) {\n    return column.column_name;\n  }\n  return column as AdhocColumn;\n};\n\nexport class OptionSelector {\n  values: (ColumnMeta | AdhocColumn)[];\n\n  options: Record<string, ColumnMeta>;\n\n  multi: boolean;\n\n  constructor(\n    options: Record<string, ColumnMeta>,\n    multi: boolean,\n    initialValues?: QueryFormColumn[] | QueryFormColumn | null,\n  ) {\n    this.options = options;\n    this.multi = multi;\n    this.values = ensureIsArray(initialValues)\n      .map(value => {\n        if (value && isPhysicalColumn(value) && value in options) {\n          return options[value];\n        }\n        if (!isPhysicalColumn(value)) {\n          return value;\n        }\n        return null;\n      })\n      .filter(Boolean) as ColumnMeta[];\n  }\n\n  add(value: QueryFormColumn) {\n    if (isPhysicalColumn(value) && value in this.options) {\n      this.values.push(this.options[value]);\n    } else if (!isPhysicalColumn(value)) {\n      this.values.push(value as AdhocColumn);\n    }\n  }\n\n  del(idx: number) {\n    this.values.splice(idx, 1);\n  }\n\n  replace(idx: number, value: QueryFormColumn) {\n    if (this.values[idx]) {\n      this.values[idx] = isPhysicalColumn(value) ? this.options[value] : value;\n    }\n  }\n\n  swap(a: number, b: number) {\n    [this.values[a], this.values[b]] = [this.values[b], this.values[a]];\n  }\n\n  has(value: QueryFormColumn): boolean {\n    return this.values.some(col => {\n      if (isPhysicalColumn(value)) {\n        return (\n          (col as ColumnMeta).column_name === value ||\n          (col as AdhocColumn).label === value\n        );\n      }\n      return (\n        (col as ColumnMeta).column_name === value.label ||\n        (col as AdhocColumn).label === value.label\n      );\n    });\n  }\n\n  getValues(): QueryFormColumn[] | QueryFormColumn | undefined {\n    if (!this.multi) {\n      return this.values.length > 0\n        ? getColumnNameOrAdhocColumn(this.values[0])\n        : undefined;\n    }\n    return this.values.map(getColumnNameOrAdhocColumn);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}