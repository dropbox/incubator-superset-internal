{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useLayoutEffect } from 'react';\nimport { css, styled, SafeMarkdown } from '@superset-ui/core';\nimport InfoTooltipWithTrigger from './InfoTooltipWithTrigger';\nimport { ColumnTypeLabel } from './ColumnTypeLabel/ColumnTypeLabel';\nimport CertifiedIconWithTooltip from './CertifiedIconWithTooltip';\nimport Tooltip from './Tooltip';\nimport { getMetricTooltipNode } from './labelUtils';\nimport { SQLPopover } from './SQLPopover';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst FlexRowContainer = styled.div`\n  align-items: center;\n  display: flex;\n\n  > svg {\n    margin-right: ${(_ref) => {let { theme } = _ref;return theme.gridUnit;}}px;\n  }\n`;\nexport function MetricOption(_ref2) {let { metric, labelRef, openInNewWindow = false, showFormula = true, showType = false, shouldShowTooltip = true, url = '' } = _ref2;\n  const verbose = metric.verbose_name || metric.metric_name || metric.label;\n  const link = url ? ___EmotionJSX(\"a\", { href: url, target: openInNewWindow ? '_blank' : '', rel: \"noreferrer\" },\n  verbose) :\n  verbose;\n  const label = ___EmotionJSX(\"span\", { className: \"option-label metric-option-label\", css: (theme) => css`\n        margin-right: ${theme.gridUnit}px;\n      `, ref: labelRef },\n  link);\n\n  const warningMarkdown = metric.warning_markdown || metric.warning_text;\n  const [tooltipText, setTooltipText] = useState(metric.metric_name);\n  useLayoutEffect(() => {\n    setTooltipText(getMetricTooltipNode(metric, labelRef));\n  }, [labelRef, metric]);\n  return ___EmotionJSX(FlexRowContainer, { className: \"metric-option\" },\n  showType && ___EmotionJSX(ColumnTypeLabel, { type: \"expression\" }),\n  shouldShowTooltip ? ___EmotionJSX(Tooltip, { id: \"metric-name-tooltip\", title: tooltipText },\n  label) :\n  label,\n  showFormula && metric.expression && ___EmotionJSX(SQLPopover, { sqlExpression: metric.expression }),\n  metric.is_certified && ___EmotionJSX(CertifiedIconWithTooltip, { metricName: metric.metric_name, certifiedBy: metric.certified_by, details: metric.certification_details }),\n  warningMarkdown && ___EmotionJSX(InfoTooltipWithTrigger, { className: \"text-warning\", icon: \"warning\", tooltip: ___EmotionJSX(SafeMarkdown, { source: warningMarkdown }), label: `warn-${metric.metric_name}`, iconsStyle: { marginLeft: 0 } }));\n\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,KAAP,IAAgBC,QAAhB,EAAqCC,eAArC,QAA4D,OAA5D;AACA,SACEC,GADF,EAEEC,MAFF,EAIEC,YAJF,QAMO,mBANP;AAOA,OAAOC,sBAAP,MAAmC,0BAAnC;AACA,SAASC,eAAT,QAAgC,mCAAhC;AACA,OAAOC,wBAAP,MAAqC,4BAArC;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,oBAAT,QAAqC,cAArC;AACA,SAASC,UAAT,QAA2B,cAA3B,C;AAEA,MAAMC,gBAAgB,GAAGR,MAAM,CAACS,GAAG;;;;;oBAKf,eAAC,EAAEC,KAAF,EAAD,eAAeA,KAAK,CAACC,QAArB,EAA6B;;CALjD;AAmBA,OAAM,SAAUC,YAAV,QAQc,KARS,EAC3BC,MAD2B,EAE3BC,QAF2B,EAG3BC,eAAe,GAAG,KAHS,EAI3BC,WAAW,GAAG,IAJa,EAK3BC,QAAQ,GAAG,KALgB,EAM3BC,iBAAiB,GAAG,IANO,EAO3BC,GAAG,GAAG,EAPqB,EAQT;EAClB,MAAMC,OAAO,GAAGP,MAAM,CAACQ,YAAP,IAAuBR,MAAM,CAACS,WAA9B,IAA6CT,MAAM,CAACU,KAApE;EACA,MAAMC,IAAI,GAAGL,GAAG,GACd,qBAAG,IAAI,EAAEA,GAAT,EAAc,MAAM,EAAEJ,eAAe,GAAG,QAAH,GAAc,EAAnD,EAAuD,GAAG,EAAC,YAA3D;EACGK,OADH,CADc;EAKdA,OALF;EAQA,MAAMG,KAAK,GACT,wBACE,SAAS,EAAC,kCADZ,EAEE,GAAG,EAAE,CAACb,KAAD,KAA0BX,GAAG;wBAChBW,KAAK,CAACC,QAAQ;OAHlC,EAKE,GAAG,EAAEG,QALP;EAOGU,IAPH,CADF;;EAYA,MAAMC,eAAe,GAAGZ,MAAM,CAACa,gBAAP,IAA2Bb,MAAM,CAACc,YAA1D;EAEA,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgChC,QAAQ,CAAYgB,MAAM,CAACS,WAAnB,CAA9C;EAEAxB,eAAe,CAAC,MAAK;IACnB+B,cAAc,CAACvB,oBAAoB,CAACO,MAAD,EAASC,QAAT,CAArB,CAAd;EACD,CAFc,EAEZ,CAACA,QAAD,EAAWD,MAAX,CAFY,CAAf;EAIA,OACE,cAAC,gBAAD,IAAkB,SAAS,EAAC,eAA5B;EACGI,QAAQ,IAAI,cAAC,eAAD,IAAiB,IAAI,EAAC,YAAtB,GADf;EAEGC,iBAAiB,GAChB,cAAC,OAAD,IAAS,EAAE,EAAC,qBAAZ,EAAkC,KAAK,EAAEU,WAAzC;EACGL,KADH,CADgB;EAKhBA,KAPJ;EASGP,WAAW,IAAIH,MAAM,CAACiB,UAAtB,IACC,cAAC,UAAD,IAAY,aAAa,EAAEjB,MAAM,CAACiB,UAAlC,GAVJ;EAYGjB,MAAM,CAACkB,YAAP,IACC,cAAC,wBAAD,IACE,UAAU,EAAElB,MAAM,CAACS,WADrB,EAEE,WAAW,EAAET,MAAM,CAACmB,YAFtB,EAGE,OAAO,EAAEnB,MAAM,CAACoB,qBAHlB,GAbJ;EAmBGR,eAAe,IACd,cAAC,sBAAD,IACE,SAAS,EAAC,cADZ,EAEE,IAAI,EAAC,SAFP,EAGE,OAAO,EAAE,cAAC,YAAD,IAAc,MAAM,EAAEA,eAAtB,GAHX,EAIE,KAAK,EAAE,QAAQZ,MAAM,CAACS,WAAW,EAJnC,EAKE,UAAU,EAAE,EAAEY,UAAU,EAAE,CAAd,EALd,GApBJ,CADF;;AA+BD","names":["React","useState","useLayoutEffect","css","styled","SafeMarkdown","InfoTooltipWithTrigger","ColumnTypeLabel","CertifiedIconWithTooltip","Tooltip","getMetricTooltipNode","SQLPopover","FlexRowContainer","div","theme","gridUnit","MetricOption","metric","labelRef","openInNewWindow","showFormula","showType","shouldShowTooltip","url","verbose","verbose_name","metric_name","label","link","warningMarkdown","warning_markdown","warning_text","tooltipText","setTooltipText","expression","is_certified","certified_by","certification_details","marginLeft"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-chart-controls/src/components/MetricOption.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, ReactNode, useLayoutEffect } from 'react';\nimport {\n  css,\n  styled,\n  Metric,\n  SafeMarkdown,\n  SupersetTheme,\n} from '@superset-ui/core';\nimport InfoTooltipWithTrigger from './InfoTooltipWithTrigger';\nimport { ColumnTypeLabel } from './ColumnTypeLabel/ColumnTypeLabel';\nimport CertifiedIconWithTooltip from './CertifiedIconWithTooltip';\nimport Tooltip from './Tooltip';\nimport { getMetricTooltipNode } from './labelUtils';\nimport { SQLPopover } from './SQLPopover';\n\nconst FlexRowContainer = styled.div`\n  align-items: center;\n  display: flex;\n\n  > svg {\n    margin-right: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n\nexport interface MetricOptionProps {\n  metric: Omit<Metric, 'id'> & { label?: string };\n  openInNewWindow?: boolean;\n  showFormula?: boolean;\n  showType?: boolean;\n  url?: string;\n  labelRef?: React.RefObject<any>;\n  shouldShowTooltip?: boolean;\n}\n\nexport function MetricOption({\n  metric,\n  labelRef,\n  openInNewWindow = false,\n  showFormula = true,\n  showType = false,\n  shouldShowTooltip = true,\n  url = '',\n}: MetricOptionProps) {\n  const verbose = metric.verbose_name || metric.metric_name || metric.label;\n  const link = url ? (\n    <a href={url} target={openInNewWindow ? '_blank' : ''} rel=\"noreferrer\">\n      {verbose}\n    </a>\n  ) : (\n    verbose\n  );\n\n  const label = (\n    <span\n      className=\"option-label metric-option-label\"\n      css={(theme: SupersetTheme) => css`\n        margin-right: ${theme.gridUnit}px;\n      `}\n      ref={labelRef}\n    >\n      {link}\n    </span>\n  );\n\n  const warningMarkdown = metric.warning_markdown || metric.warning_text;\n\n  const [tooltipText, setTooltipText] = useState<ReactNode>(metric.metric_name);\n\n  useLayoutEffect(() => {\n    setTooltipText(getMetricTooltipNode(metric, labelRef));\n  }, [labelRef, metric]);\n\n  return (\n    <FlexRowContainer className=\"metric-option\">\n      {showType && <ColumnTypeLabel type=\"expression\" />}\n      {shouldShowTooltip ? (\n        <Tooltip id=\"metric-name-tooltip\" title={tooltipText}>\n          {label}\n        </Tooltip>\n      ) : (\n        label\n      )}\n      {showFormula && metric.expression && (\n        <SQLPopover sqlExpression={metric.expression} />\n      )}\n      {metric.is_certified && (\n        <CertifiedIconWithTooltip\n          metricName={metric.metric_name}\n          certifiedBy={metric.certified_by}\n          details={metric.certification_details}\n        />\n      )}\n      {warningMarkdown && (\n        <InfoTooltipWithTrigger\n          className=\"text-warning\"\n          icon=\"warning\"\n          tooltip={<SafeMarkdown source={warningMarkdown} />}\n          label={`warn-${metric.metric_name}`}\n          iconsStyle={{ marginLeft: 0 }}\n        />\n      )}\n    </FlexRowContainer>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}