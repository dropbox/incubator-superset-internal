{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};export var ForecastSeriesEnum;\n(function (ForecastSeriesEnum) {\n  ForecastSeriesEnum[\"Observation\"] = \"\";\n  ForecastSeriesEnum[\"ForecastTrend\"] = \"__yhat\";\n  ForecastSeriesEnum[\"ForecastUpper\"] = \"__yhat_upper\";\n  ForecastSeriesEnum[\"ForecastLower\"] = \"__yhat_lower\";\n})(ForecastSeriesEnum || (ForecastSeriesEnum = {}));\nexport var LegendOrientation;\n(function (LegendOrientation) {\n  LegendOrientation[\"Top\"] = \"top\";\n  LegendOrientation[\"Bottom\"] = \"bottom\";\n  LegendOrientation[\"Left\"] = \"left\";\n  LegendOrientation[\"Right\"] = \"right\";\n})(LegendOrientation || (LegendOrientation = {}));\nexport var LegendType;\n(function (LegendType) {\n  LegendType[\"Scroll\"] = \"scroll\";\n  LegendType[\"Plain\"] = \"plain\";\n})(LegendType || (LegendType = {}));\nexport var LabelPositionEnum;\n(function (LabelPositionEnum) {\n  LabelPositionEnum[\"Top\"] = \"top\";\n  LabelPositionEnum[\"Left\"] = \"left\";\n  LabelPositionEnum[\"Right\"] = \"right\";\n  LabelPositionEnum[\"Bottom\"] = \"bottom\";\n  LabelPositionEnum[\"Inside\"] = \"inside\";\n  LabelPositionEnum[\"InsideLeft\"] = \"insideLeft\";\n  LabelPositionEnum[\"InsideRight\"] = \"insideRight\";\n  LabelPositionEnum[\"InsideTop\"] = \"insideTop\";\n  LabelPositionEnum[\"InsideBottom\"] = \"insideBottom\";\n  LabelPositionEnum[\"InsideTopLeft\"] = \"insideTopLeft\";\n  LabelPositionEnum[\"InsideBottomLeft\"] = \"insideBottomLeft\";\n  LabelPositionEnum[\"InsideTopRight\"] = \"insideTopRight\";\n  LabelPositionEnum[\"InsideBottomRight\"] = \"insideBottomRight\";\n})(LabelPositionEnum || (LabelPositionEnum = {}));\nexport * from './Timeseries/types';;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(ForecastSeriesEnum, \"ForecastSeriesEnum\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-echarts/src/types.ts\");reactHotLoader.register(LegendOrientation, \"LegendOrientation\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-echarts/src/types.ts\");reactHotLoader.register(LegendType, \"LegendType\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-echarts/src/types.ts\");reactHotLoader.register(LabelPositionEnum, \"LabelPositionEnum\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-echarts/src/types.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"uSA0DA,WAAYA,kBAAZ;AAAA,WAAYA,kBAAZ,EAA8B;EAC5BA;EACAA;EACAA;EACAA;AACD,CALD,EAAYA,kBAAkB,KAAlBA,kBAAkB,MAA9B;AAYA,WAAYC,iBAAZ;AAAA,WAAYA,iBAAZ,EAA6B;EAC3BA;EACAA;EACAA;EACAA;AACD,CALD,EAAYA,iBAAiB,KAAjBA,iBAAiB,MAA7B;AAOA,WAAYC,UAAZ;AAAA,WAAYA,UAAZ,EAAsB;EACpBA;EACAA;AACD,CAHD,EAAYA,UAAU,KAAVA,UAAU,MAAtB;AAsBA,WAAYC,iBAAZ;AAAA,WAAYA,iBAAZ,EAA6B;EAC3BA;EACAA;EACAA;EACAA;EACAA;EACAA;EACAA;EACAA;EACAA;EACAA;EACAA;EACAA;EACAA;AACD,CAdD,EAAYA,iBAAiB,KAAjBA,iBAAiB,MAA7B;AAuEA,cAAc,oBAAd,C,iLAhHYH,kB,8JAYAC,iB,6JAOAC,U,sJAsBAC,iB","names":["ForecastSeriesEnum","LegendOrientation","LegendType","LabelPositionEnum"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-echarts/src/types.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { RefObject } from 'react';\nimport {\n  ChartDataResponseResult,\n  ChartProps,\n  ContextMenuFilters,\n  FilterState,\n  HandlerFunction,\n  PlainObject,\n  QueryFormColumn,\n  SetDataMaskHook,\n} from '@superset-ui/core';\nimport { EChartsCoreOption, ECharts } from 'echarts';\nimport { TooltipMarker } from 'echarts/types/src/util/format';\nimport { StackControlsValue } from './constants';\n\nexport type EchartsStylesProps = {\n  height: number;\n  width: number;\n};\n\nexport type Refs = {\n  echartRef?: React.Ref<EchartsHandler>;\n  divRef?: RefObject<HTMLDivElement>;\n};\n\nexport interface EchartsProps {\n  height: number;\n  width: number;\n  echartOptions: EChartsCoreOption;\n  eventHandlers?: EventHandlers;\n  zrEventHandlers?: EventHandlers;\n  selectedValues?: Record<number, string>;\n  forceClear?: boolean;\n  refs: Refs;\n}\n\nexport interface EchartsHandler {\n  getEchartInstance: () => ECharts | undefined;\n}\n\nexport enum ForecastSeriesEnum {\n  Observation = '',\n  ForecastTrend = '__yhat',\n  ForecastUpper = '__yhat_upper',\n  ForecastLower = '__yhat_lower',\n}\n\nexport type ForecastSeriesContext = {\n  name: string;\n  type: ForecastSeriesEnum;\n};\n\nexport enum LegendOrientation {\n  Top = 'top',\n  Bottom = 'bottom',\n  Left = 'left',\n  Right = 'right',\n}\n\nexport enum LegendType {\n  Scroll = 'scroll',\n  Plain = 'plain',\n}\n\nexport type ForecastValue = {\n  marker: TooltipMarker;\n  observation?: number;\n  forecastTrend?: number;\n  forecastLower?: number;\n  forecastUpper?: number;\n};\n\nexport type LegendFormData = {\n  legendMargin: number | null | string;\n  legendOrientation: LegendOrientation;\n  legendType: LegendType;\n  showLegend: boolean;\n};\n\nexport type EventHandlers = Record<string, { (props: any): void }>;\n\nexport enum LabelPositionEnum {\n  Top = 'top',\n  Left = 'left',\n  Right = 'right',\n  Bottom = 'bottom',\n  Inside = 'inside',\n  InsideLeft = 'insideLeft',\n  InsideRight = 'insideRight',\n  InsideTop = 'insideTop',\n  InsideBottom = 'insideBottom',\n  InsideTopLeft = 'insideTopLeft',\n  InsideBottomLeft = 'insideBottomLeft',\n  InsideTopRight = 'insideTopRight',\n  InsideBottomRight = 'insideBottomRight',\n}\n\nexport interface BaseChartProps<T extends PlainObject> extends ChartProps<T> {\n  queriesData: ChartDataResponseResult[];\n}\n\nexport interface BaseTransformedProps<F> {\n  echartOptions: EChartsCoreOption;\n  formData: F;\n  height: number;\n  onContextMenu?: (\n    clientX: number,\n    clientY: number,\n    filters?: ContextMenuFilters,\n  ) => void;\n  setDataMask?: SetDataMaskHook;\n  filterState?: FilterState;\n  refs: Refs;\n  width: number;\n  emitCrossFilters?: boolean;\n  coltypeMapping?: Record<string, number>;\n}\n\nexport type CrossFilterTransformedProps = {\n  groupby: QueryFormColumn[];\n  labelMap: Record<string, string[]>;\n  setControlValue?: HandlerFunction;\n  setDataMask: SetDataMaskHook;\n  selectedValues: Record<number, string>;\n  emitCrossFilters?: boolean;\n};\n\nexport type ContextMenuTransformedProps = {\n  onContextMenu?: (\n    clientX: number,\n    clientY: number,\n    filters?: ContextMenuFilters,\n  ) => void;\n  setDataMask?: SetDataMaskHook;\n};\n\nexport interface TitleFormData {\n  xAxisTitle: string;\n  xAxisTitleMargin: number;\n  yAxisTitle: string;\n  yAxisTitleMargin: number;\n  yAxisTitlePosition: string;\n}\n\nexport type StackType = boolean | null | Partial<StackControlsValue>;\n\nexport interface TreePathInfo {\n  name: string;\n  dataIndex: number;\n  value: number | number[];\n}\n\nexport * from './Timeseries/types';\n"]},"metadata":{},"sourceType":"module"}