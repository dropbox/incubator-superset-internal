{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\nimport { getStandardizedControls, sections } from '@superset-ui/chart-controls';\nconst config = {\n  controlPanelSections: [\n  sections.legacyRegularTime,\n  {\n    label: t('Query'),\n    expanded: true,\n    controlSetRows: [\n    ['groupby'],\n    ['metric'],\n    ['secondary_metric'],\n    ['adhoc_filters'],\n    ['row_limit'],\n    [\n    {\n      name: 'sort_by_metric',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Sort by metric'),\n        description: t('Whether to sort results by the selected metric in descending order.') } }]] },\n\n\n\n\n\n  {\n    label: t('Chart Options'),\n    expanded: true,\n    controlSetRows: [['color_scheme'], ['linear_color_scheme']] }],\n\n\n  controlOverrides: {\n    metric: {\n      label: t('Primary Metric'),\n      description: t('The primary metric is used to define the arc segment sizes') },\n\n    secondary_metric: {\n      label: t('Secondary Metric'),\n      default: null,\n      description: t('[optional] this secondary metric is used to ' +\n      'define the color as a ratio against the primary metric. ' +\n      'When omitted, the color is categorical and based on labels') },\n\n    color_scheme: {\n      description: t('When only a primary metric is provided, a categorical color scale is used.'),\n      visibility: (_ref) => {var _controls$secondary_m, _controls$secondary_m2;let { controls } = _ref;return Boolean(!(controls != null && (_controls$secondary_m = controls.secondary_metric) != null && _controls$secondary_m.value) ||\n        (controls == null ? void 0 : (_controls$secondary_m2 = controls.secondary_metric) == null ? void 0 : _controls$secondary_m2.value) === (controls == null ? void 0 : controls.metric.value));} },\n\n    linear_color_scheme: {\n      description: t('When a secondary metric is provided, a linear color scale is used.'),\n      visibility: (_ref2) => {var _controls$secondary_m3, _controls$secondary_m4;let { controls } = _ref2;return Boolean((controls == null ? void 0 : (_controls$secondary_m3 = controls.secondary_metric) == null ? void 0 : _controls$secondary_m3.value) &&\n        (controls == null ? void 0 : (_controls$secondary_m4 = controls.secondary_metric) == null ? void 0 : _controls$secondary_m4.value) !== (controls == null ? void 0 : controls.metric.value));} },\n\n    groupby: {\n      label: t('Hierarchy'),\n      description: t('This defines the level of the hierarchy') } },\n\n\n  formDataOverrides: (formData) => ({\n    ...formData,\n    groupby: getStandardizedControls().popAllColumns(),\n    metric: getStandardizedControls().shiftMetric(),\n    secondary_metric: getStandardizedControls().shiftMetric() }) };const _default =\n\n\nconfig;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(config, \"config\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/legacy-plugin-chart-sunburst/src/controlPanel.ts\");reactHotLoader.register(_default, \"default\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/legacy-plugin-chart-sunburst/src/controlPanel.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAkBA,SAASA,CAAT,QAAkB,mBAAlB;AACA,SAGEC,uBAHF,EAIEC,QAJF,QAKO,6BALP;AAOA,MAAMC,MAAM,GAAuB;EACjCC,oBAAoB,EAAE;EACpBF,QAAQ,CAACG,iBADW;EAEpB;IACEC,KAAK,EAAEN,CAAC,CAAC,OAAD,CADV;IAEEO,QAAQ,EAAE,IAFZ;IAGEC,cAAc,EAAE;IACd,CAAC,SAAD,CADc;IAEd,CAAC,QAAD,CAFc;IAGd,CAAC,kBAAD,CAHc;IAId,CAAC,eAAD,CAJc;IAKd,CAAC,WAAD,CALc;IAMd;IACE;MACEC,IAAI,EAAE,gBADR;MAEEN,MAAM,EAAE;QACNO,IAAI,EAAE,iBADA;QAENJ,KAAK,EAAEN,CAAC,CAAC,gBAAD,CAFF;QAGNW,WAAW,EAAEX,CAAC,CACZ,qEADY,CAHR,EAFV,EADF,CANc,CAHlB,EAFoB;;;;;;EAyBpB;IACEM,KAAK,EAAEN,CAAC,CAAC,eAAD,CADV;IAEEO,QAAQ,EAAE,IAFZ;IAGEC,cAAc,EAAE,CAAC,CAAC,cAAD,CAAD,EAAmB,CAAC,qBAAD,CAAnB,CAHlB,EAzBoB,CADW;;;EAgCjCI,gBAAgB,EAAE;IAChBC,MAAM,EAAE;MACNP,KAAK,EAAEN,CAAC,CAAC,gBAAD,CADF;MAENW,WAAW,EAAEX,CAAC,CACZ,4DADY,CAFR,EADQ;;IAOhBc,gBAAgB,EAAE;MAChBR,KAAK,EAAEN,CAAC,CAAC,kBAAD,CADQ;MAEhBe,OAAO,EAAE,IAFO;MAGhBJ,WAAW,EAAEX,CAAC,CACZ;MACE,0DADF;MAEE,4DAHU,CAHE,EAPF;;IAgBhBgB,YAAY,EAAE;MACZL,WAAW,EAAEX,CAAC,CACZ,4EADY,CADF;MAIZiB,UAAU,EAAE,iEAAC,EAAEC,QAAF,EAAD,eACVC,OAAO,CACL,EAACD,QAAD,qCAACA,QAAQ,CAAEJ,gBAAX,aAAC,sBAA4BM,KAA7B;QACE,SAAQ,QAAR,8CAAQ,CAAEN,gBAAV,4CAA4BM,KAA5B,OAAsCF,QAAtC,oBAAsCA,QAAQ,CAAEL,MAAV,CAAiBO,KAAvD,CAFG,CADG,EAJA,EAhBE;;IA0BhBC,mBAAmB,EAAE;MACnBV,WAAW,EAAEX,CAAC,CACZ,oEADY,CADK;MAInBiB,UAAU,EAAE,mEAAC,EAAEC,QAAF,EAAD,gBACVC,OAAO,CACL,SAAQ,QAAR,8CAAQ,CAAEL,gBAAV,4CAA4BM,KAA5B;QACE,SAAQ,QAAR,8CAAQ,CAAEN,gBAAV,4CAA4BM,KAA5B,OAAsCF,QAAtC,oBAAsCA,QAAQ,CAAEL,MAAV,CAAiBO,KAAvD,CAFG,CADG,EAJO,EA1BL;;IAoChBE,OAAO,EAAE;MACPhB,KAAK,EAAEN,CAAC,CAAC,WAAD,CADD;MAEPW,WAAW,EAAEX,CAAC,CAAC,yCAAD,CAFP,EApCO,EAhCe;;;EAyEjCuB,iBAAiB,EAAE,SAAQ,MAAK;IAC9B,GAAGC,QAD2B;IAE9BF,OAAO,EAAErB,uBAAuB,GAAGwB,aAA1B,EAFqB;IAG9BZ,MAAM,EAAEZ,uBAAuB,GAAGyB,WAA1B,EAHsB;IAI9BZ,gBAAgB,EAAEb,uBAAuB,GAAGyB,WAA1B,EAJY,EAAL,CAzEM,EAAnC,C;;;AAiFevB,M,CAAf,wB,iLAjFMA,M","names":["t","getStandardizedControls","sections","config","controlPanelSections","legacyRegularTime","label","expanded","controlSetRows","name","type","description","controlOverrides","metric","secondary_metric","default","color_scheme","visibility","controls","Boolean","value","linear_color_scheme","groupby","formDataOverrides","formData","popAllColumns","shiftMetric"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/legacy-plugin-chart-sunburst/src/controlPanel.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\nimport {\n  ControlPanelConfig,\n  ControlPanelsContainerProps,\n  getStandardizedControls,\n  sections,\n} from '@superset-ui/chart-controls';\n\nconst config: ControlPanelConfig = {\n  controlPanelSections: [\n    sections.legacyRegularTime,\n    {\n      label: t('Query'),\n      expanded: true,\n      controlSetRows: [\n        ['groupby'],\n        ['metric'],\n        ['secondary_metric'],\n        ['adhoc_filters'],\n        ['row_limit'],\n        [\n          {\n            name: 'sort_by_metric',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Sort by metric'),\n              description: t(\n                'Whether to sort results by the selected metric in descending order.',\n              ),\n            },\n          },\n        ],\n      ],\n    },\n    {\n      label: t('Chart Options'),\n      expanded: true,\n      controlSetRows: [['color_scheme'], ['linear_color_scheme']],\n    },\n  ],\n  controlOverrides: {\n    metric: {\n      label: t('Primary Metric'),\n      description: t(\n        'The primary metric is used to define the arc segment sizes',\n      ),\n    },\n    secondary_metric: {\n      label: t('Secondary Metric'),\n      default: null,\n      description: t(\n        '[optional] this secondary metric is used to ' +\n          'define the color as a ratio against the primary metric. ' +\n          'When omitted, the color is categorical and based on labels',\n      ),\n    },\n    color_scheme: {\n      description: t(\n        'When only a primary metric is provided, a categorical color scale is used.',\n      ),\n      visibility: ({ controls }: ControlPanelsContainerProps) =>\n        Boolean(\n          !controls?.secondary_metric?.value ||\n            controls?.secondary_metric?.value === controls?.metric.value,\n        ),\n    },\n    linear_color_scheme: {\n      description: t(\n        'When a secondary metric is provided, a linear color scale is used.',\n      ),\n      visibility: ({ controls }: ControlPanelsContainerProps) =>\n        Boolean(\n          controls?.secondary_metric?.value &&\n            controls?.secondary_metric?.value !== controls?.metric.value,\n        ),\n    },\n    groupby: {\n      label: t('Hierarchy'),\n      description: t('This defines the level of the hierarchy'),\n    },\n  },\n  formDataOverrides: formData => ({\n    ...formData,\n    groupby: getStandardizedControls().popAllColumns(),\n    metric: getStandardizedControls().shiftMetric(),\n    secondary_metric: getStandardizedControls().shiftMetric(),\n  }),\n};\n\nexport default config;\n"]},"metadata":{},"sourceType":"module"}