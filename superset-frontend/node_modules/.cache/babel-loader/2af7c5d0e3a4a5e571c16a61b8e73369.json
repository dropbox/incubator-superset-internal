{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { buildQueryContext, ensureIsArray, getXAxisColumn, isXAxisSet, normalizeOrderBy } from '@superset-ui/core';\nimport { contributionOperator, extractExtraMetrics, flattenOperator, isTimeComparison, pivotOperator, prophetOperator, renameOperator, resampleOperator, rollingWindowOperator, sortOperator, timeComparePivotOperator, timeCompareOperator } from '@superset-ui/chart-controls';\nexport default function buildQuery(formData) {\n  const { groupby } = formData;\n  return buildQueryContext(formData, (baseQueryObject) => {\n    /* the `pivotOperatorInRuntime` determines how to pivot the dataframe returned from the raw query.\n       1. If it's a time compared query, there will return a pivoted dataframe that append time compared metrics. for instance:\n                                 MAX(value) MAX(value)__1 year ago MIN(value) MIN(value)__1 year ago\n          city               LA                     LA         LA                     LA\n          __timestamp\n          2015-01-01      568.0                  671.0        5.0                    6.0\n          2015-02-01      407.0                  649.0        4.0                    3.0\n          2015-03-01      318.0                  465.0        0.0                    3.0\n            2. If it's a normal query, there will return a pivoted dataframe.\n                          MAX(value)  MIN(value)\n          city               LA          LA\n          __timestamp\n          2015-01-01      568.0         5.0\n          2015-02-01      407.0         4.0\n          2015-03-01      318.0         0.0\n          */\n\n\n\n\n    // only add series limit metric if it's explicitly needed e.g. for sorting\n    const extra_metrics = extractExtraMetrics(formData);\n    const pivotOperatorInRuntime = isTimeComparison(formData, baseQueryObject) ?\n    timeComparePivotOperator(formData, baseQueryObject) :\n    pivotOperator(formData, baseQueryObject);\n    const columns = [\n    ...(isXAxisSet(formData) ? ensureIsArray(getXAxisColumn(formData)) : []),\n    ...ensureIsArray(groupby)];\n\n    return [\n    {\n      ...baseQueryObject,\n      metrics: [...(baseQueryObject.metrics || []), ...extra_metrics],\n      columns,\n      series_columns: groupby,\n      ...(isXAxisSet(formData) ? {} : { is_timeseries: true }),\n      // todo: move `normalizeOrderBy to extractQueryFields`\n      orderby: normalizeOrderBy(baseQueryObject).orderby,\n      time_offsets: isTimeComparison(formData, baseQueryObject) ?\n      formData.time_compare :\n      [],\n      /* Note that:\n        1. The resample, rolling, cum, timeCompare operators should be after pivot.\n        2. the flatOperator makes multiIndex Dataframe into flat Dataframe\n      */\n      post_processing: [\n      pivotOperatorInRuntime,\n      rollingWindowOperator(formData, baseQueryObject),\n      timeCompareOperator(formData, baseQueryObject),\n      resampleOperator(formData, baseQueryObject),\n      renameOperator(formData, baseQueryObject),\n      contributionOperator(formData, baseQueryObject),\n      sortOperator(formData, baseQueryObject),\n      flattenOperator(formData, baseQueryObject),\n      // todo: move prophet before flatten\n      prophetOperator(formData, baseQueryObject)] }];\n\n\n\n  });\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,SACEA,iBADF,EAEEC,aAFF,EAGEC,cAHF,EAIEC,UAJF,EAKEC,gBALF,QAQO,mBARP;AASA,SACEC,oBADF,EAEEC,mBAFF,EAGEC,eAHF,EAIEC,gBAJF,EAKEC,aALF,EAMEC,eANF,EAOEC,cAPF,EAQEC,gBARF,EASEC,qBATF,EAUEC,YAVF,EAWEC,wBAXF,EAYEC,mBAZF,QAaO,6BAbP;AAeA,eAAc,SAAUC,UAAV,CAAqBC,QAArB,EAA4C;EACxD,MAAM,EAAEC,OAAF,KAAcD,QAApB;EACA,OAAOlB,iBAAiB,CAACkB,QAAD,EAAW,gBAAe,KAAG;IACnD;;;;;;;;;;;;;;;;;;;;IAoBA;IACA,MAAME,aAAa,GAAGd,mBAAmB,CAACY,QAAD,CAAzC;IAEA,MAAMG,sBAAsB,GAAwBb,gBAAgB,CAClEU,QADkE,EAElEI,eAFkE,CAAhB;IAIhDP,wBAAwB,CAACG,QAAD,EAAWI,eAAX,CAJwB;IAKhDb,aAAa,CAACS,QAAD,EAAWI,eAAX,CALjB;IAOA,MAAMC,OAAO,GAAG;IACd,IAAIpB,UAAU,CAACe,QAAD,CAAV,GAAuBjB,aAAa,CAACC,cAAc,CAACgB,QAAD,CAAf,CAApC,GAAiE,EAArE,CADc;IAEd,GAAGjB,aAAa,CAACkB,OAAD,CAFF,CAAhB;;IAKA,OAAO;IACL;MACE,GAAGG,eADL;MAEEE,OAAO,EAAE,CAAC,IAAIF,eAAe,CAACE,OAAhB,IAA2B,EAA/B,CAAD,EAAqC,GAAGJ,aAAxC,CAFX;MAGEG,OAHF;MAIEE,cAAc,EAAEN,OAJlB;MAKE,IAAIhB,UAAU,CAACe,QAAD,CAAV,GAAuB,EAAvB,GAA4B,EAAEQ,aAAa,EAAE,IAAjB,EAAhC,CALF;MAME;MACAC,OAAO,EAAEvB,gBAAgB,CAACkB,eAAD,CAAhB,CAAkCK,OAP7C;MAQEC,YAAY,EAAEpB,gBAAgB,CAACU,QAAD,EAAWI,eAAX,CAAhB;MACVJ,QAAQ,CAACW,YADC;MAEV,EAVN;MAWE;;;;MAIAC,eAAe,EAAE;MACfT,sBADe;MAEfR,qBAAqB,CAACK,QAAD,EAAWI,eAAX,CAFN;MAGfN,mBAAmB,CAACE,QAAD,EAAWI,eAAX,CAHJ;MAIfV,gBAAgB,CAACM,QAAD,EAAWI,eAAX,CAJD;MAKfX,cAAc,CAACO,QAAD,EAAWI,eAAX,CALC;MAMfjB,oBAAoB,CAACa,QAAD,EAAWI,eAAX,CANL;MAOfR,YAAY,CAACI,QAAD,EAAWI,eAAX,CAPG;MAQff,eAAe,CAACW,QAAD,EAAWI,eAAX,CARA;MASf;MACAZ,eAAe,CAACQ,QAAD,EAAWI,eAAX,CAVA,CAfnB,EADK,CAAP;;;;EA8BD,CAlEuB,CAAxB;AAmED","names":["buildQueryContext","ensureIsArray","getXAxisColumn","isXAxisSet","normalizeOrderBy","contributionOperator","extractExtraMetrics","flattenOperator","isTimeComparison","pivotOperator","prophetOperator","renameOperator","resampleOperator","rollingWindowOperator","sortOperator","timeComparePivotOperator","timeCompareOperator","buildQuery","formData","groupby","extra_metrics","pivotOperatorInRuntime","baseQueryObject","columns","metrics","series_columns","is_timeseries","orderby","time_offsets","time_compare","post_processing"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/plugins/plugin-chart-echarts/src/Timeseries/buildQuery.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  buildQueryContext,\n  ensureIsArray,\n  getXAxisColumn,\n  isXAxisSet,\n  normalizeOrderBy,\n  PostProcessingPivot,\n  QueryFormData,\n} from '@superset-ui/core';\nimport {\n  contributionOperator,\n  extractExtraMetrics,\n  flattenOperator,\n  isTimeComparison,\n  pivotOperator,\n  prophetOperator,\n  renameOperator,\n  resampleOperator,\n  rollingWindowOperator,\n  sortOperator,\n  timeComparePivotOperator,\n  timeCompareOperator,\n} from '@superset-ui/chart-controls';\n\nexport default function buildQuery(formData: QueryFormData) {\n  const { groupby } = formData;\n  return buildQueryContext(formData, baseQueryObject => {\n    /* the `pivotOperatorInRuntime` determines how to pivot the dataframe returned from the raw query.\n       1. If it's a time compared query, there will return a pivoted dataframe that append time compared metrics. for instance:\n\n                            MAX(value) MAX(value)__1 year ago MIN(value) MIN(value)__1 year ago\n          city               LA                     LA         LA                     LA\n          __timestamp\n          2015-01-01      568.0                  671.0        5.0                    6.0\n          2015-02-01      407.0                  649.0        4.0                    3.0\n          2015-03-01      318.0                  465.0        0.0                    3.0\n\n       2. If it's a normal query, there will return a pivoted dataframe.\n\n                     MAX(value)  MIN(value)\n          city               LA          LA\n          __timestamp\n          2015-01-01      568.0         5.0\n          2015-02-01      407.0         4.0\n          2015-03-01      318.0         0.0\n\n     */\n    // only add series limit metric if it's explicitly needed e.g. for sorting\n    const extra_metrics = extractExtraMetrics(formData);\n\n    const pivotOperatorInRuntime: PostProcessingPivot = isTimeComparison(\n      formData,\n      baseQueryObject,\n    )\n      ? timeComparePivotOperator(formData, baseQueryObject)\n      : pivotOperator(formData, baseQueryObject);\n\n    const columns = [\n      ...(isXAxisSet(formData) ? ensureIsArray(getXAxisColumn(formData)) : []),\n      ...ensureIsArray(groupby),\n    ];\n\n    return [\n      {\n        ...baseQueryObject,\n        metrics: [...(baseQueryObject.metrics || []), ...extra_metrics],\n        columns,\n        series_columns: groupby,\n        ...(isXAxisSet(formData) ? {} : { is_timeseries: true }),\n        // todo: move `normalizeOrderBy to extractQueryFields`\n        orderby: normalizeOrderBy(baseQueryObject).orderby,\n        time_offsets: isTimeComparison(formData, baseQueryObject)\n          ? formData.time_compare\n          : [],\n        /* Note that:\n          1. The resample, rolling, cum, timeCompare operators should be after pivot.\n          2. the flatOperator makes multiIndex Dataframe into flat Dataframe\n        */\n        post_processing: [\n          pivotOperatorInRuntime,\n          rollingWindowOperator(formData, baseQueryObject),\n          timeCompareOperator(formData, baseQueryObject),\n          resampleOperator(formData, baseQueryObject),\n          renameOperator(formData, baseQueryObject),\n          contributionOperator(formData, baseQueryObject),\n          sortOperator(formData, baseQueryObject),\n          flattenOperator(formData, baseQueryObject),\n          // todo: move prophet before flatten\n          prophetOperator(formData, baseQueryObject),\n        ],\n      },\n    ];\n  });\n}\n"]},"metadata":{},"sourceType":"module"}