{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { getColumnLabel, isDefined } from '@superset-ui/core';\nimport { getCrossFilterIndicator } from '../../selectors';\nexport const crossFiltersSelector = (props) => {\n  const { dataMask, chartConfiguration, dashboardLayout, verboseMaps } = props;\n  const chartsIds = Object.keys(chartConfiguration);\n  return chartsIds.\n  map((chartId) => {\n    const id = Number(chartId);\n    const filterIndicator = getCrossFilterIndicator(id, dataMask[id], dashboardLayout);\n    if (isDefined(filterIndicator.column) &&\n    isDefined(filterIndicator.value)) {var _verboseMaps$id;\n      const verboseColName = ((_verboseMaps$id = verboseMaps[id]) == null ? void 0 : _verboseMaps$id[getColumnLabel(filterIndicator.column)]) ||\n      filterIndicator.column;\n      return { ...filterIndicator, column: verboseColName, emitterId: id };\n    }\n    return null;\n  }).\n  filter(Boolean);\n};\nexport default crossFiltersSelector;","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAmBA,SAEEA,cAFF,EAGEC,SAHF,QAKO,mBALP;AAOA,SAA+BC,uBAA/B,QAA8D,iBAA9D;AAEA,OAAO,MAAMC,oBAAoB,GAAG,CAACC,KAAD,KAKP;EAC3B,MAAM,EAAEC,QAAF,EAAYC,kBAAZ,EAAgCC,eAAhC,EAAiDC,WAAjD,KAAiEJ,KAAvE;EACA,MAAMK,SAAS,GAAGC,MAAM,CAACC,IAAP,CAAYL,kBAAZ,CAAlB;EAEA,OAAOG,SAAS;EACbG,GADI,CACA,QAAO,KAAG;IACb,MAAMC,EAAE,GAAGC,MAAM,CAACC,OAAD,CAAjB;IACA,MAAMC,eAAe,GAAGd,uBAAuB,CAC7CW,EAD6C,EAE7CR,QAAQ,CAACQ,EAAD,CAFqC,EAG7CN,eAH6C,CAA/C;IAKA,IACEN,SAAS,CAACe,eAAe,CAACC,MAAjB,CAAT;IACAhB,SAAS,CAACe,eAAe,CAACE,KAAjB,CAFX,EAGE;MACA,MAAMC,cAAc,GAClB,+BAAW,CAACN,EAAD,CAAX,qCAAkBb,cAAc,CAACgB,eAAe,CAACC,MAAjB,CAAhC;MACAD,eAAe,CAACC,MAFlB;MAGA,OAAO,EAAE,GAAGD,eAAL,EAAsBC,MAAM,EAAEE,cAA9B,EAA8CC,SAAS,EAAEP,EAAzD,EAAP;IACD;IACD,OAAO,IAAP;EACD,CAlBI;EAmBJQ,MAnBI,CAmBGC,OAnBH,CAAP;AAoBD,CA7BM;AA+BP,eAAenB,oBAAf","names":["getColumnLabel","isDefined","getCrossFilterIndicator","crossFiltersSelector","props","dataMask","chartConfiguration","dashboardLayout","verboseMaps","chartsIds","Object","keys","map","id","Number","chartId","filterIndicator","column","value","verboseColName","emitterId","filter","Boolean"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/components/nativeFilters/FilterBar/CrossFilters/selectors.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport {\n  DataMaskStateWithId,\n  getColumnLabel,\n  isDefined,\n  JsonObject,\n} from '@superset-ui/core';\nimport { DashboardLayout } from 'src/dashboard/types';\nimport { CrossFilterIndicator, getCrossFilterIndicator } from '../../selectors';\n\nexport const crossFiltersSelector = (props: {\n  dataMask: DataMaskStateWithId;\n  chartConfiguration: JsonObject;\n  dashboardLayout: DashboardLayout;\n  verboseMaps: { [key: string]: Record<string, string> };\n}): CrossFilterIndicator[] => {\n  const { dataMask, chartConfiguration, dashboardLayout, verboseMaps } = props;\n  const chartsIds = Object.keys(chartConfiguration);\n\n  return chartsIds\n    .map(chartId => {\n      const id = Number(chartId);\n      const filterIndicator = getCrossFilterIndicator(\n        id,\n        dataMask[id],\n        dashboardLayout,\n      );\n      if (\n        isDefined(filterIndicator.column) &&\n        isDefined(filterIndicator.value)\n      ) {\n        const verboseColName =\n          verboseMaps[id]?.[getColumnLabel(filterIndicator.column)] ||\n          filterIndicator.column;\n        return { ...filterIndicator, column: verboseColName, emitterId: id };\n      }\n      return null;\n    })\n    .filter(Boolean) as CrossFilterIndicator[];\n};\n\nexport default crossFiltersSelector;\n"]},"metadata":{},"sourceType":"module"}