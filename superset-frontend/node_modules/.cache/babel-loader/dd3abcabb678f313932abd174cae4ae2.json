{"ast":null,"code":"import _isEqualWith from \"lodash/isEqualWith\";import _isEqual from \"lodash/isEqual\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { Behavior, isFeatureEnabled, FeatureFlag, getChartMetadataRegistry, styled, SuperChart, t } from '@superset-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { getChartDataRequest } from 'src/components/Chart/chartAction';\nimport Loading from 'src/components/Loading';\nimport BasicErrorAlert from 'src/components/ErrorMessage/BasicErrorAlert';\nimport ErrorMessageWithStackTrace from 'src/components/ErrorMessage/ErrorMessageWithStackTrace';\nimport { waitForAsyncData } from 'src/middleware/asyncEvent';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport { FilterBarOrientation } from 'src/dashboard/types';\nimport { onFiltersRefreshSuccess, setDirectPathToChild } from 'src/dashboard/actions/dashboardState';\nimport { FAST_DEBOUNCE } from 'src/constants';\nimport { dispatchHoverAction, dispatchFocusAction } from './utils';\nimport { getFormData } from '../../utils';\nimport { useFilterDependencies } from './state';\nimport { useFilterOutlined } from '../useFilterOutlined';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst HEIGHT = 32;\n// Overrides superset-ui height with min-height\nconst StyledDiv = styled.div`\n  & > div {\n    height: auto !important;\n    min-height: ${HEIGHT}px;\n  }\n`;\nconst queriesDataPlaceholder = [{ data: [{}] }];\nconst behaviors = [Behavior.NATIVE_FILTER];\nconst useShouldFilterRefresh = () => {\n  const isDashboardRefreshing = useSelector((state) => state.dashboardState.isRefreshing);\n  const isFilterRefreshing = useSelector((state) => state.dashboardState.isFiltersRefreshing);\n  // trigger filter requests only after charts requests were triggered\n  return !isDashboardRefreshing && isFilterRefreshing;\n};\nconst FilterValue = (_ref) => {var _filter$dataMask3, _filter$dataMask4;let { dataMaskSelected, filter, onFilterSelectionChange, inView = true, showOverflow, parentRef, setFilterActive, orientation = FilterBarOrientation.VERTICAL, overflow = false, validateStatus } = _ref;\n  const { id, targets, filterType, adhoc_filters, time_range } = filter;\n  const metadata = getChartMetadataRegistry().get(filterType);\n  const dependencies = useFilterDependencies(id, dataMaskSelected);\n  const shouldRefresh = useShouldFilterRefresh();\n  const [state, setState] = useState([]);\n  const dashboardId = useSelector((state) => state.dashboardInfo.id);\n  const [error, setError] = useState();\n  const [formData, setFormData] = useState({\n    inView: false });\n\n  const [ownState, setOwnState] = useState({});\n  const [inViewFirstTime, setInViewFirstTime] = useState(inView);\n  const inputRef = useRef(null);\n  const [target] = targets;\n  const { datasetId, column = {} } = target;\n  const { name: groupby } = column;\n  const hasDataSource = !!datasetId;\n  const [isLoading, setIsLoading] = useState(hasDataSource);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const dispatch = useDispatch();\n  const { outlinedFilterId, lastUpdated } = useFilterOutlined();\n  const handleFilterLoadFinish = useCallback(() => {\n    setIsRefreshing(false);\n    setIsLoading(false);\n    if (shouldRefresh) {\n      dispatch(onFiltersRefreshSuccess());\n    }\n  }, [dispatch, shouldRefresh]);\n  useEffect(() => {\n    if (!inViewFirstTime && inView) {\n      setInViewFirstTime(true);\n    }\n  }, [inView, inViewFirstTime, setInViewFirstTime]);\n  useEffect(() => {var _filter$dataMask;\n    if (!inViewFirstTime) {\n      return;\n    }\n    const newFormData = getFormData({\n      ...filter,\n      datasetId,\n      dependencies,\n      groupby,\n      adhoc_filters,\n      time_range,\n      dashboardId });\n\n    const filterOwnState = ((_filter$dataMask = filter.dataMask) == null ? void 0 : _filter$dataMask.ownState) || {};\n    // TODO: We should try to improve our useEffect hooks to depend more on\n    // granular information instead of big objects that require deep comparison.\n    const customizer = (objValue, othValue, key) => key === 'url_params' ? true : undefined;\n    if (!isRefreshing && (\n    !_isEqualWith(formData, newFormData, customizer) ||\n    !_isEqual(ownState, filterOwnState) ||\n    shouldRefresh)) {\n      setFormData(newFormData);\n      setOwnState(filterOwnState);\n      if (!hasDataSource) {\n        return;\n      }\n      setIsRefreshing(true);\n      getChartDataRequest({\n        formData: newFormData,\n        force: false,\n        ownState: filterOwnState }).\n\n      then((_ref2) => {let { response, json } = _ref2;\n        if (isFeatureEnabled(FeatureFlag.GLOBAL_ASYNC_QUERIES)) {\n          // deal with getChartDataRequest transforming the response data\n          const result = 'result' in json ? json.result[0] : json;\n          if (response.status === 200) {\n            setState([result]);\n            handleFilterLoadFinish();\n          } else\n          if (response.status === 202) {\n            waitForAsyncData(result).\n            then((asyncResult) => {\n              setState(asyncResult);\n              handleFilterLoadFinish();\n            }).\n            catch((error) => {\n              getClientErrorObject(error).then((clientErrorObject) => {\n                setError(clientErrorObject);\n                handleFilterLoadFinish();\n              });\n            });\n          } else\n          {\n            throw new Error(`Received unexpected response status (${response.status}) while fetching chart data`);\n          }\n        } else\n        {\n          setState(json.result);\n          setError(undefined);\n          handleFilterLoadFinish();\n        }\n      }).\n      catch((error) => {\n        getClientErrorObject(error).then((clientErrorObject) => {\n          setError(clientErrorObject);\n          handleFilterLoadFinish();\n        });\n      });\n    }\n  }, [\n  inViewFirstTime,\n  dependencies,\n  datasetId,\n  groupby,\n  handleFilterLoadFinish,\n  JSON.stringify(filter),\n  hasDataSource,\n  isRefreshing,\n  shouldRefresh]);\n\n  useEffect(() => {\n    if (outlinedFilterId && outlinedFilterId === filter.id) {\n      setTimeout(() => {var _inputRef$current;\n        inputRef == null ? void 0 : (_inputRef$current = inputRef.current) == null ? void 0 : _inputRef$current.focus();\n      }, overflow ? FAST_DEBOUNCE : 0);\n    }\n  }, [inputRef, outlinedFilterId, lastUpdated, filter.id, overflow]);\n  const setDataMask = useCallback((dataMask) => onFilterSelectionChange(filter, dataMask), [filter, onFilterSelectionChange]);\n  const setFocusedFilter = useCallback(() => {\n    // don't highlight charts in scope if filter was focused programmatically\n    if (outlinedFilterId !== id) {\n      dispatchFocusAction(dispatch, id);\n    }\n  }, [dispatch, id, outlinedFilterId]);\n  const unsetFocusedFilter = useCallback(() => {\n    dispatchFocusAction(dispatch);\n    if (outlinedFilterId === id) {\n      dispatch(setDirectPathToChild([]));\n    }\n  }, [dispatch, id, outlinedFilterId]);\n  const setHoveredFilter = useCallback(() => dispatchHoverAction(dispatch, id), [dispatch, id]);\n  const unsetHoveredFilter = useCallback(() => dispatchHoverAction(dispatch), [dispatch]);\n  const hooks = useMemo(() => ({\n    setDataMask,\n    setHoveredFilter,\n    unsetHoveredFilter,\n    setFocusedFilter,\n    unsetFocusedFilter,\n    setFilterActive }),\n  [\n  setDataMask,\n  setFilterActive,\n  setHoveredFilter,\n  unsetHoveredFilter,\n  setFocusedFilter,\n  unsetFocusedFilter]);\n\n  const filterState = useMemo(() => {var _filter$dataMask2;return {\n      ...((_filter$dataMask2 = filter.dataMask) == null ? void 0 : _filter$dataMask2.filterState),\n      validateStatus };},\n  [(_filter$dataMask3 = filter.dataMask) == null ? void 0 : _filter$dataMask3.filterState, validateStatus]);\n  const displaySettings = useMemo(() => ({\n    filterBarOrientation: orientation,\n    isOverflowingFilterBar: overflow }),\n  [orientation, overflow]);\n  if (error) {var _error$errors;\n    return ___EmotionJSX(ErrorMessageWithStackTrace, { error: (_error$errors = error.errors) == null ? void 0 : _error$errors[0], fallback: ___EmotionJSX(BasicErrorAlert, { title: t('Cannot load filter'), body: error.error, level: \"error\" }) });\n  }\n  return ___EmotionJSX(StyledDiv, null,\n  isLoading ? ___EmotionJSX(Loading, { position: \"inline-centered\" }) : ___EmotionJSX(SuperChart, { height: HEIGHT, width: \"100%\", showOverflow: showOverflow, formData: formData, displaySettings: displaySettings, parentRef: parentRef, inputRef: inputRef\n    // For charts that don't have datasource we need workaround for empty placeholder\n    , queriesData: hasDataSource ? state : queriesDataPlaceholder, chartType: filterType, behaviors: behaviors, filterState: filterState, ownState: (_filter$dataMask4 = filter.dataMask) == null ? void 0 : _filter$dataMask4.ownState, enableNoResults: metadata == null ? void 0 : metadata.enableNoResults, isRefreshing: isRefreshing, hooks: hooks }));\n\n};\nexport default /*#__PURE__*/React.memo(FilterValue);","map":{"version":3,"mappings":"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","names":["React","useCallback","useEffect","useMemo","useRef","useState","Behavior","isFeatureEnabled","FeatureFlag","getChartMetadataRegistry","styled","SuperChart","t","useDispatch","useSelector","getChartDataRequest","Loading","BasicErrorAlert","ErrorMessageWithStackTrace","waitForAsyncData","getClientErrorObject","FilterBarOrientation","onFiltersRefreshSuccess","setDirectPathToChild","FAST_DEBOUNCE","dispatchHoverAction","dispatchFocusAction","getFormData","useFilterDependencies","useFilterOutlined","HEIGHT","StyledDiv","div","queriesDataPlaceholder","data","behaviors","NATIVE_FILTER","useShouldFilterRefresh","isDashboardRefreshing","state","dashboardState","isRefreshing","isFilterRefreshing","isFiltersRefreshing","FilterValue","dataMaskSelected","filter","onFilterSelectionChange","inView","showOverflow","parentRef","setFilterActive","orientation","VERTICAL","overflow","validateStatus","id","targets","filterType","adhoc_filters","time_range","metadata","get","dependencies","shouldRefresh","setState","dashboardId","dashboardInfo","error","setError","formData","setFormData","ownState","setOwnState","inViewFirstTime","setInViewFirstTime","inputRef","target","datasetId","column","name","groupby","hasDataSource","isLoading","setIsLoading","setIsRefreshing","dispatch","outlinedFilterId","lastUpdated","handleFilterLoadFinish","newFormData","filterOwnState","dataMask","customizer","objValue","othValue","key","undefined","force","then","response","json","GLOBAL_ASYNC_QUERIES","result","status","asyncResult","catch","clientErrorObject","Error","JSON","stringify","setTimeout","current","focus","setDataMask","setFocusedFilter","unsetFocusedFilter","setHoveredFilter","unsetHoveredFilter","hooks","filterState","displaySettings","filterBarOrientation","isOverflowingFilterBar","errors","enableNoResults","memo"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/dashboard/components/nativeFilters/FilterBar/FilterControls/FilterValue.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport {\n  ChartDataResponseResult,\n  Behavior,\n  DataMask,\n  isFeatureEnabled,\n  FeatureFlag,\n  getChartMetadataRegistry,\n  JsonObject,\n  QueryFormData,\n  styled,\n  SuperChart,\n  t,\n} from '@superset-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { isEqual, isEqualWith } from 'lodash';\nimport { getChartDataRequest } from 'src/components/Chart/chartAction';\nimport Loading from 'src/components/Loading';\nimport BasicErrorAlert from 'src/components/ErrorMessage/BasicErrorAlert';\nimport ErrorMessageWithStackTrace from 'src/components/ErrorMessage/ErrorMessageWithStackTrace';\nimport { waitForAsyncData } from 'src/middleware/asyncEvent';\nimport {\n  ClientErrorObject,\n  getClientErrorObject,\n} from 'src/utils/getClientErrorObject';\nimport { FilterBarOrientation, RootState } from 'src/dashboard/types';\nimport {\n  onFiltersRefreshSuccess,\n  setDirectPathToChild,\n} from 'src/dashboard/actions/dashboardState';\nimport { FAST_DEBOUNCE } from 'src/constants';\nimport { dispatchHoverAction, dispatchFocusAction } from './utils';\nimport { FilterControlProps } from './types';\nimport { getFormData } from '../../utils';\nimport { useFilterDependencies } from './state';\nimport { useFilterOutlined } from '../useFilterOutlined';\n\nconst HEIGHT = 32;\n\n// Overrides superset-ui height with min-height\nconst StyledDiv = styled.div`\n  & > div {\n    height: auto !important;\n    min-height: ${HEIGHT}px;\n  }\n`;\n\nconst queriesDataPlaceholder = [{ data: [{}] }];\nconst behaviors = [Behavior.NATIVE_FILTER];\n\nconst useShouldFilterRefresh = () => {\n  const isDashboardRefreshing = useSelector<RootState, boolean>(\n    state => state.dashboardState.isRefreshing,\n  );\n  const isFilterRefreshing = useSelector<RootState, boolean>(\n    state => state.dashboardState.isFiltersRefreshing,\n  );\n\n  // trigger filter requests only after charts requests were triggered\n  return !isDashboardRefreshing && isFilterRefreshing;\n};\n\nconst FilterValue: React.FC<FilterControlProps> = ({\n  dataMaskSelected,\n  filter,\n  onFilterSelectionChange,\n  inView = true,\n  showOverflow,\n  parentRef,\n  setFilterActive,\n  orientation = FilterBarOrientation.VERTICAL,\n  overflow = false,\n  validateStatus,\n}) => {\n  const { id, targets, filterType, adhoc_filters, time_range } = filter;\n  const metadata = getChartMetadataRegistry().get(filterType);\n  const dependencies = useFilterDependencies(id, dataMaskSelected);\n  const shouldRefresh = useShouldFilterRefresh();\n  const [state, setState] = useState<ChartDataResponseResult[]>([]);\n  const dashboardId = useSelector<RootState, number>(\n    state => state.dashboardInfo.id,\n  );\n  const [error, setError] = useState<ClientErrorObject>();\n  const [formData, setFormData] = useState<Partial<QueryFormData>>({\n    inView: false,\n  });\n  const [ownState, setOwnState] = useState<JsonObject>({});\n  const [inViewFirstTime, setInViewFirstTime] = useState(inView);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [target] = targets;\n  const {\n    datasetId,\n    column = {},\n  }: Partial<{ datasetId: number; column: { name?: string } }> = target;\n  const { name: groupby } = column;\n  const hasDataSource = !!datasetId;\n  const [isLoading, setIsLoading] = useState<boolean>(hasDataSource);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const dispatch = useDispatch();\n\n  const { outlinedFilterId, lastUpdated } = useFilterOutlined();\n\n  const handleFilterLoadFinish = useCallback(() => {\n    setIsRefreshing(false);\n    setIsLoading(false);\n    if (shouldRefresh) {\n      dispatch(onFiltersRefreshSuccess());\n    }\n  }, [dispatch, shouldRefresh]);\n\n  useEffect(() => {\n    if (!inViewFirstTime && inView) {\n      setInViewFirstTime(true);\n    }\n  }, [inView, inViewFirstTime, setInViewFirstTime]);\n\n  useEffect(() => {\n    if (!inViewFirstTime) {\n      return;\n    }\n    const newFormData = getFormData({\n      ...filter,\n      datasetId,\n      dependencies,\n      groupby,\n      adhoc_filters,\n      time_range,\n      dashboardId,\n    });\n    const filterOwnState = filter.dataMask?.ownState || {};\n    // TODO: We should try to improve our useEffect hooks to depend more on\n    // granular information instead of big objects that require deep comparison.\n    const customizer = (\n      objValue: Partial<QueryFormData>,\n      othValue: Partial<QueryFormData>,\n      key: string,\n    ) => (key === 'url_params' ? true : undefined);\n    if (\n      !isRefreshing &&\n      (!isEqualWith(formData, newFormData, customizer) ||\n        !isEqual(ownState, filterOwnState) ||\n        shouldRefresh)\n    ) {\n      setFormData(newFormData);\n      setOwnState(filterOwnState);\n      if (!hasDataSource) {\n        return;\n      }\n      setIsRefreshing(true);\n      getChartDataRequest({\n        formData: newFormData,\n        force: false,\n        ownState: filterOwnState,\n      })\n        .then(({ response, json }) => {\n          if (isFeatureEnabled(FeatureFlag.GLOBAL_ASYNC_QUERIES)) {\n            // deal with getChartDataRequest transforming the response data\n            const result = 'result' in json ? json.result[0] : json;\n\n            if (response.status === 200) {\n              setState([result]);\n              handleFilterLoadFinish();\n            } else if (response.status === 202) {\n              waitForAsyncData(result)\n                .then((asyncResult: ChartDataResponseResult[]) => {\n                  setState(asyncResult);\n                  handleFilterLoadFinish();\n                })\n                .catch((error: Response) => {\n                  getClientErrorObject(error).then(clientErrorObject => {\n                    setError(clientErrorObject);\n                    handleFilterLoadFinish();\n                  });\n                });\n            } else {\n              throw new Error(\n                `Received unexpected response status (${response.status}) while fetching chart data`,\n              );\n            }\n          } else {\n            setState(json.result);\n            setError(undefined);\n            handleFilterLoadFinish();\n          }\n        })\n        .catch((error: Response) => {\n          getClientErrorObject(error).then(clientErrorObject => {\n            setError(clientErrorObject);\n            handleFilterLoadFinish();\n          });\n        });\n    }\n  }, [\n    inViewFirstTime,\n    dependencies,\n    datasetId,\n    groupby,\n    handleFilterLoadFinish,\n    JSON.stringify(filter),\n    hasDataSource,\n    isRefreshing,\n    shouldRefresh,\n  ]);\n\n  useEffect(() => {\n    if (outlinedFilterId && outlinedFilterId === filter.id) {\n      setTimeout(\n        () => {\n          inputRef?.current?.focus();\n        },\n        overflow ? FAST_DEBOUNCE : 0,\n      );\n    }\n  }, [inputRef, outlinedFilterId, lastUpdated, filter.id, overflow]);\n\n  const setDataMask = useCallback(\n    (dataMask: DataMask) => onFilterSelectionChange(filter, dataMask),\n    [filter, onFilterSelectionChange],\n  );\n\n  const setFocusedFilter = useCallback(() => {\n    // don't highlight charts in scope if filter was focused programmatically\n    if (outlinedFilterId !== id) {\n      dispatchFocusAction(dispatch, id);\n    }\n  }, [dispatch, id, outlinedFilterId]);\n\n  const unsetFocusedFilter = useCallback(() => {\n    dispatchFocusAction(dispatch);\n    if (outlinedFilterId === id) {\n      dispatch(setDirectPathToChild([]));\n    }\n  }, [dispatch, id, outlinedFilterId]);\n\n  const setHoveredFilter = useCallback(\n    () => dispatchHoverAction(dispatch, id),\n    [dispatch, id],\n  );\n  const unsetHoveredFilter = useCallback(\n    () => dispatchHoverAction(dispatch),\n    [dispatch],\n  );\n\n  const hooks = useMemo(\n    () => ({\n      setDataMask,\n      setHoveredFilter,\n      unsetHoveredFilter,\n      setFocusedFilter,\n      unsetFocusedFilter,\n      setFilterActive,\n    }),\n    [\n      setDataMask,\n      setFilterActive,\n      setHoveredFilter,\n      unsetHoveredFilter,\n      setFocusedFilter,\n      unsetFocusedFilter,\n    ],\n  );\n\n  const filterState = useMemo(\n    () => ({\n      ...filter.dataMask?.filterState,\n      validateStatus,\n    }),\n    [filter.dataMask?.filterState, validateStatus],\n  );\n\n  const displaySettings = useMemo(\n    () => ({\n      filterBarOrientation: orientation,\n      isOverflowingFilterBar: overflow,\n    }),\n    [orientation, overflow],\n  );\n\n  if (error) {\n    return (\n      <ErrorMessageWithStackTrace\n        error={error.errors?.[0]}\n        fallback={\n          <BasicErrorAlert\n            title={t('Cannot load filter')}\n            body={error.error}\n            level=\"error\"\n          />\n        }\n      />\n    );\n  }\n\n  return (\n    <StyledDiv data-test=\"form-item-value\">\n      {isLoading ? (\n        <Loading position=\"inline-centered\" />\n      ) : (\n        <SuperChart\n          height={HEIGHT}\n          width=\"100%\"\n          showOverflow={showOverflow}\n          formData={formData}\n          displaySettings={displaySettings}\n          parentRef={parentRef}\n          inputRef={inputRef}\n          // For charts that don't have datasource we need workaround for empty placeholder\n          queriesData={hasDataSource ? state : queriesDataPlaceholder}\n          chartType={filterType}\n          behaviors={behaviors}\n          filterState={filterState}\n          ownState={filter.dataMask?.ownState}\n          enableNoResults={metadata?.enableNoResults}\n          isRefreshing={isRefreshing}\n          hooks={hooks}\n        />\n      )}\n    </StyledDiv>\n  );\n};\nexport default React.memo(FilterValue);\n"]},"metadata":{},"sourceType":"module"}