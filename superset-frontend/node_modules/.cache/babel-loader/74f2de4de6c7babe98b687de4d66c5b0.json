{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { GenericDataType, t, validateNumber } from '@superset-ui/core';\nimport { FaAlignLeft } from '@react-icons/all-files/fa/FaAlignLeft';\nimport { FaAlignRight } from '@react-icons/all-files/fa/FaAlignRight';\nimport { FaAlignCenter } from '@react-icons/all-files/fa/FaAlignCenter';\nimport { D3_FORMAT_DOCS, D3_FORMAT_OPTIONS, D3_TIME_FORMAT_DOCS, D3_TIME_FORMAT_OPTIONS } from '../../../utils';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst d3NumberFormat = {\n  controlType: 'Select',\n  label: t('D3 format'),\n  description: D3_FORMAT_DOCS,\n  options: D3_FORMAT_OPTIONS,\n  defaultValue: D3_FORMAT_OPTIONS[0][0],\n  creatable: true,\n  minWidth: '14em',\n  debounceDelay: 500 };\n\nconst d3TimeFormat = {\n  controlType: 'Select',\n  label: t('D3 format'),\n  description: D3_TIME_FORMAT_DOCS,\n  options: D3_TIME_FORMAT_OPTIONS,\n  defaultValue: D3_TIME_FORMAT_OPTIONS[0][0],\n  creatable: true,\n  minWidth: '10em',\n  debounceDelay: 500 };\n\nconst fractionDigits = {\n  controlType: 'Slider',\n  label: t('Fraction digits'),\n  description: t('Number of decimal digits to round numbers to'),\n  min: 0,\n  step: 1,\n  max: 100,\n  defaultValue: 100 };\n\nconst columnWidth = {\n  controlType: 'InputNumber',\n  label: t('Min Width'),\n  description: t(\"Default minimal column width in pixels, actual width may still be larger than this if other columns don't need much space\"),\n  width: 120,\n  placeholder: t('auto'),\n  debounceDelay: 400,\n  validators: [validateNumber] };\n\nconst horizontalAlign = {\n  controlType: 'RadioButtonControl',\n  label: t('Text align'),\n  description: t('Horizontal alignment'),\n  width: 130,\n  debounceDelay: 50,\n  defaultValue: 'left',\n  options: [\n  ['left', ___EmotionJSX(FaAlignLeft, { title: t('Left') })],\n  ['center', ___EmotionJSX(FaAlignCenter, { title: t('Center') })],\n  ['right', ___EmotionJSX(FaAlignRight, { title: t('Right') })]] };\n\n\nconst showCellBars = {\n  controlType: 'Checkbox',\n  label: t('Show cell bars'),\n  description: t('Whether to display a bar chart background in table columns'),\n  defaultValue: true,\n  debounceDelay: 200 };\n\nconst alignPositiveNegative = {\n  controlType: 'Checkbox',\n  label: t('Align +/-'),\n  description: t('Whether to align positive and negative values in cell bar chart at 0'),\n  defaultValue: false,\n  debounceDelay: 200 };\n\nconst colorPositiveNegative = {\n  controlType: 'Checkbox',\n  label: t('Color +/-'),\n  description: t('Whether to colorize numeric values by if they are positive or negative'),\n  defaultValue: false,\n  debounceDelay: 200 };\n\nconst truncateLongCells = {\n  controlType: 'Checkbox',\n  label: t('Truncate Cells'),\n  description: t('Truncate long cells to the \"min width\" set above'),\n  defaultValue: false,\n  debounceDelay: 400 };\n\n/**\n * All configurable column formatting properties.\n */\nexport const SHARED_COLUMN_CONFIG_PROPS = {\n  d3NumberFormat,\n  d3SmallNumberFormat: {\n    ...d3NumberFormat,\n    label: t('Small number format'),\n    description: t('D3 number format for numbers between -1.0 and 1.0, ' +\n    'useful when you want to have different significant digits for small and large numbers') },\n\n  d3TimeFormat,\n  fractionDigits,\n  columnWidth,\n  truncateLongCells,\n  horizontalAlign,\n  showCellBars,\n  alignPositiveNegative,\n  colorPositiveNegative };\n\nexport const DEFAULT_CONFIG_FORM_LAYOUT = {\n  [GenericDataType.STRING]: [\n  [\n  'columnWidth',\n  { name: 'horizontalAlign', override: { defaultValue: 'left' } }],\n\n  ['truncateLongCells']],\n\n  [GenericDataType.NUMERIC]: [\n  [\n  'columnWidth',\n  { name: 'horizontalAlign', override: { defaultValue: 'right' } }],\n\n  ['d3NumberFormat'],\n  ['d3SmallNumberFormat'],\n  ['alignPositiveNegative', 'colorPositiveNegative'],\n  ['showCellBars']],\n\n  [GenericDataType.TEMPORAL]: [\n  [\n  'columnWidth',\n  { name: 'horizontalAlign', override: { defaultValue: 'left' } }],\n\n  ['d3TimeFormat']],\n\n  [GenericDataType.BOOLEAN]: [\n  [\n  'columnWidth',\n  { name: 'horizontalAlign', override: { defaultValue: 'left' } }]] };","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,EAA0BC,CAA1B,EAA6BC,cAA7B,QAAmD,mBAAnD;AACA,SAASC,WAAT,QAA4B,uCAA5B;AACA,SAASC,YAAT,QAA6B,wCAA7B;AACA,SAASC,aAAT,QAA8B,yCAA9B;AACA,SACEC,cADF,EAEEC,iBAFF,EAGEC,mBAHF,EAIEC,sBAJF,QAKO,gBALP,C;AAqBA,MAAMC,cAAc,GAAkC;EACpDC,WAAW,EAAE,QADuC;EAEpDC,KAAK,EAAEX,CAAC,CAAC,WAAD,CAF4C;EAGpDY,WAAW,EAAEP,cAHuC;EAIpDQ,OAAO,EAAEP,iBAJ2C;EAKpDQ,YAAY,EAAER,iBAAiB,CAAC,CAAD,CAAjB,CAAqB,CAArB,CALsC;EAMpDS,SAAS,EAAE,IANyC;EAOpDC,QAAQ,EAAE,MAP0C;EAQpDC,aAAa,EAAE,GARqC,EAAtD;;AAWA,MAAMC,YAAY,GAAkC;EAClDR,WAAW,EAAE,QADqC;EAElDC,KAAK,EAAEX,CAAC,CAAC,WAAD,CAF0C;EAGlDY,WAAW,EAAEL,mBAHqC;EAIlDM,OAAO,EAAEL,sBAJyC;EAKlDM,YAAY,EAAEN,sBAAsB,CAAC,CAAD,CAAtB,CAA0B,CAA1B,CALoC;EAMlDO,SAAS,EAAE,IANuC;EAOlDC,QAAQ,EAAE,MAPwC;EAQlDC,aAAa,EAAE,GARmC,EAApD;;AAWA,MAAME,cAAc,GAAkC;EACpDT,WAAW,EAAE,QADuC;EAEpDC,KAAK,EAAEX,CAAC,CAAC,iBAAD,CAF4C;EAGpDY,WAAW,EAAEZ,CAAC,CAAC,8CAAD,CAHsC;EAIpDoB,GAAG,EAAE,CAJ+C;EAKpDC,IAAI,EAAE,CAL8C;EAMpDC,GAAG,EAAE,GAN+C;EAOpDR,YAAY,EAAE,GAPsC,EAAtD;;AAUA,MAAMS,WAAW,GAAuC;EACtDb,WAAW,EAAE,aADyC;EAEtDC,KAAK,EAAEX,CAAC,CAAC,WAAD,CAF8C;EAGtDY,WAAW,EAAEZ,CAAC,CACZ,2HADY,CAHwC;EAMtDwB,KAAK,EAAE,GAN+C;EAOtDC,WAAW,EAAEzB,CAAC,CAAC,MAAD,CAPwC;EAQtDiB,aAAa,EAAE,GARuC;EAStDS,UAAU,EAAE,CAACzB,cAAD,CAT0C,EAAxD;;AAYA,MAAM0B,eAAe,GAGjB;EACFjB,WAAW,EAAE,oBADX;EAEFC,KAAK,EAAEX,CAAC,CAAC,YAAD,CAFN;EAGFY,WAAW,EAAEZ,CAAC,CAAC,sBAAD,CAHZ;EAIFwB,KAAK,EAAE,GAJL;EAKFP,aAAa,EAAE,EALb;EAMFH,YAAY,EAAE,MANZ;EAOFD,OAAO,EAAE;EACP,CAAC,MAAD,EAAS,cAAC,WAAD,IAAa,KAAK,EAAEb,CAAC,CAAC,MAAD,CAArB,GAAT,CADO;EAEP,CAAC,QAAD,EAAW,cAAC,aAAD,IAAe,KAAK,EAAEA,CAAC,CAAC,QAAD,CAAvB,GAAX,CAFO;EAGP,CAAC,OAAD,EAAU,cAAC,YAAD,IAAc,KAAK,EAAEA,CAAC,CAAC,OAAD,CAAtB,GAAV,CAHO,CAPP,EAHJ;;;AAiBA,MAAM4B,YAAY,GAAoC;EACpDlB,WAAW,EAAE,UADuC;EAEpDC,KAAK,EAAEX,CAAC,CAAC,gBAAD,CAF4C;EAGpDY,WAAW,EAAEZ,CAAC,CAAC,4DAAD,CAHsC;EAIpDc,YAAY,EAAE,IAJsC;EAKpDG,aAAa,EAAE,GALqC,EAAtD;;AAQA,MAAMY,qBAAqB,GAAoC;EAC7DnB,WAAW,EAAE,UADgD;EAE7DC,KAAK,EAAEX,CAAC,CAAC,WAAD,CAFqD;EAG7DY,WAAW,EAAEZ,CAAC,CACZ,sEADY,CAH+C;EAM7Dc,YAAY,EAAE,KAN+C;EAO7DG,aAAa,EAAE,GAP8C,EAA/D;;AAUA,MAAMa,qBAAqB,GAAoC;EAC7DpB,WAAW,EAAE,UADgD;EAE7DC,KAAK,EAAEX,CAAC,CAAC,WAAD,CAFqD;EAG7DY,WAAW,EAAEZ,CAAC,CACZ,wEADY,CAH+C;EAM7Dc,YAAY,EAAE,KAN+C;EAO7DG,aAAa,EAAE,GAP8C,EAA/D;;AAUA,MAAMc,iBAAiB,GAAoC;EACzDrB,WAAW,EAAE,UAD4C;EAEzDC,KAAK,EAAEX,CAAC,CAAC,gBAAD,CAFiD;EAGzDY,WAAW,EAAEZ,CAAC,CAAC,kDAAD,CAH2C;EAIzDc,YAAY,EAAE,KAJ2C;EAKzDG,aAAa,EAAE,GAL0C,EAA3D;;AAQA;;;AAGA,OAAO,MAAMe,0BAA0B,GAAG;EACxCvB,cADwC;EAExCwB,mBAAmB,EAAE;IACnB,GAAGxB,cADgB;IAEnBE,KAAK,EAAEX,CAAC,CAAC,qBAAD,CAFW;IAGnBY,WAAW,EAAEZ,CAAC,CACZ;IACE,uFAFU,CAHK,EAFmB;;EAUxCkB,YAVwC;EAWxCC,cAXwC;EAYxCI,WAZwC;EAaxCQ,iBAbwC;EAcxCJ,eAdwC;EAexCC,YAfwC;EAgBxCC,qBAhBwC;EAiBxCC,qBAjBwC,EAAnC;;AAwBP,OAAO,MAAMI,0BAA0B,GAA2B;EAChE,CAACnC,eAAe,CAACoC,MAAjB,GAA0B;EACxB;EACE,aADF;EAEE,EAAEC,IAAI,EAAE,iBAAR,EAA2BC,QAAQ,EAAE,EAAEvB,YAAY,EAAE,MAAhB,EAArC,EAFF,CADwB;;EAKxB,CAAC,mBAAD,CALwB,CADsC;;EAQhE,CAACf,eAAe,CAACuC,OAAjB,GAA2B;EACzB;EACE,aADF;EAEE,EAAEF,IAAI,EAAE,iBAAR,EAA2BC,QAAQ,EAAE,EAAEvB,YAAY,EAAE,OAAhB,EAArC,EAFF,CADyB;;EAKzB,CAAC,gBAAD,CALyB;EAMzB,CAAC,qBAAD,CANyB;EAOzB,CAAC,uBAAD,EAA0B,uBAA1B,CAPyB;EAQzB,CAAC,cAAD,CARyB,CARqC;;EAkBhE,CAACf,eAAe,CAACwC,QAAjB,GAA4B;EAC1B;EACE,aADF;EAEE,EAAEH,IAAI,EAAE,iBAAR,EAA2BC,QAAQ,EAAE,EAAEvB,YAAY,EAAE,MAAhB,EAArC,EAFF,CAD0B;;EAK1B,CAAC,cAAD,CAL0B,CAlBoC;;EAyBhE,CAACf,eAAe,CAACyC,OAAjB,GAA2B;EACzB;EACE,aADF;EAEE,EAAEJ,IAAI,EAAE,iBAAR,EAA2BC,QAAQ,EAAE,EAAEvB,YAAY,EAAE,MAAhB,EAArC,EAFF,CADyB,CAzBqC,EAA3D","names":["React","GenericDataType","t","validateNumber","FaAlignLeft","FaAlignRight","FaAlignCenter","D3_FORMAT_DOCS","D3_FORMAT_OPTIONS","D3_TIME_FORMAT_DOCS","D3_TIME_FORMAT_OPTIONS","d3NumberFormat","controlType","label","description","options","defaultValue","creatable","minWidth","debounceDelay","d3TimeFormat","fractionDigits","min","step","max","columnWidth","width","placeholder","validators","horizontalAlign","showCellBars","alignPositiveNegative","colorPositiveNegative","truncateLongCells","SHARED_COLUMN_CONFIG_PROPS","d3SmallNumberFormat","DEFAULT_CONFIG_FORM_LAYOUT","STRING","name","override","NUMERIC","TEMPORAL","BOOLEAN"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/packages/superset-ui-chart-controls/src/shared-controls/components/ColumnConfigControl/constants.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { GenericDataType, t, validateNumber } from '@superset-ui/core';\nimport { FaAlignLeft } from '@react-icons/all-files/fa/FaAlignLeft';\nimport { FaAlignRight } from '@react-icons/all-files/fa/FaAlignRight';\nimport { FaAlignCenter } from '@react-icons/all-files/fa/FaAlignCenter';\nimport {\n  D3_FORMAT_DOCS,\n  D3_FORMAT_OPTIONS,\n  D3_TIME_FORMAT_DOCS,\n  D3_TIME_FORMAT_OPTIONS,\n} from '../../../utils';\nimport { ControlFormItemSpec } from '../../../components/ControlForm';\nimport { ColumnConfigFormLayout } from './types';\n\nexport type SharedColumnConfigProp =\n  | 'alignPositiveNegative'\n  | 'colorPositiveNegative'\n  | 'columnWidth'\n  | 'fractionDigits'\n  | 'd3NumberFormat'\n  | 'd3SmallNumberFormat'\n  | 'd3TimeFormat'\n  | 'horizontalAlign'\n  | 'truncateLongCells'\n  | 'showCellBars';\n\nconst d3NumberFormat: ControlFormItemSpec<'Select'> = {\n  controlType: 'Select',\n  label: t('D3 format'),\n  description: D3_FORMAT_DOCS,\n  options: D3_FORMAT_OPTIONS,\n  defaultValue: D3_FORMAT_OPTIONS[0][0],\n  creatable: true,\n  minWidth: '14em',\n  debounceDelay: 500,\n};\n\nconst d3TimeFormat: ControlFormItemSpec<'Select'> = {\n  controlType: 'Select',\n  label: t('D3 format'),\n  description: D3_TIME_FORMAT_DOCS,\n  options: D3_TIME_FORMAT_OPTIONS,\n  defaultValue: D3_TIME_FORMAT_OPTIONS[0][0],\n  creatable: true,\n  minWidth: '10em',\n  debounceDelay: 500,\n};\n\nconst fractionDigits: ControlFormItemSpec<'Slider'> = {\n  controlType: 'Slider',\n  label: t('Fraction digits'),\n  description: t('Number of decimal digits to round numbers to'),\n  min: 0,\n  step: 1,\n  max: 100,\n  defaultValue: 100,\n};\n\nconst columnWidth: ControlFormItemSpec<'InputNumber'> = {\n  controlType: 'InputNumber',\n  label: t('Min Width'),\n  description: t(\n    \"Default minimal column width in pixels, actual width may still be larger than this if other columns don't need much space\",\n  ),\n  width: 120,\n  placeholder: t('auto'),\n  debounceDelay: 400,\n  validators: [validateNumber],\n};\n\nconst horizontalAlign: ControlFormItemSpec<'RadioButtonControl'> & {\n  value?: 'left' | 'right' | 'center';\n  defaultValue?: 'left' | 'right' | 'center';\n} = {\n  controlType: 'RadioButtonControl',\n  label: t('Text align'),\n  description: t('Horizontal alignment'),\n  width: 130,\n  debounceDelay: 50,\n  defaultValue: 'left',\n  options: [\n    ['left', <FaAlignLeft title={t('Left')} />],\n    ['center', <FaAlignCenter title={t('Center')} />],\n    ['right', <FaAlignRight title={t('Right')} />],\n  ],\n};\n\nconst showCellBars: ControlFormItemSpec<'Checkbox'> = {\n  controlType: 'Checkbox',\n  label: t('Show cell bars'),\n  description: t('Whether to display a bar chart background in table columns'),\n  defaultValue: true,\n  debounceDelay: 200,\n};\n\nconst alignPositiveNegative: ControlFormItemSpec<'Checkbox'> = {\n  controlType: 'Checkbox',\n  label: t('Align +/-'),\n  description: t(\n    'Whether to align positive and negative values in cell bar chart at 0',\n  ),\n  defaultValue: false,\n  debounceDelay: 200,\n};\n\nconst colorPositiveNegative: ControlFormItemSpec<'Checkbox'> = {\n  controlType: 'Checkbox',\n  label: t('Color +/-'),\n  description: t(\n    'Whether to colorize numeric values by if they are positive or negative',\n  ),\n  defaultValue: false,\n  debounceDelay: 200,\n};\n\nconst truncateLongCells: ControlFormItemSpec<'Checkbox'> = {\n  controlType: 'Checkbox',\n  label: t('Truncate Cells'),\n  description: t('Truncate long cells to the \"min width\" set above'),\n  defaultValue: false,\n  debounceDelay: 400,\n};\n\n/**\n * All configurable column formatting properties.\n */\nexport const SHARED_COLUMN_CONFIG_PROPS = {\n  d3NumberFormat,\n  d3SmallNumberFormat: {\n    ...d3NumberFormat,\n    label: t('Small number format'),\n    description: t(\n      'D3 number format for numbers between -1.0 and 1.0, ' +\n        'useful when you want to have different significant digits for small and large numbers',\n    ),\n  },\n  d3TimeFormat,\n  fractionDigits,\n  columnWidth,\n  truncateLongCells,\n  horizontalAlign,\n  showCellBars,\n  alignPositiveNegative,\n  colorPositiveNegative,\n};\n\nexport type SharedColumnConfig = {\n  [key in SharedColumnConfigProp]?: typeof SHARED_COLUMN_CONFIG_PROPS[key]['value'];\n};\n\nexport const DEFAULT_CONFIG_FORM_LAYOUT: ColumnConfigFormLayout = {\n  [GenericDataType.STRING]: [\n    [\n      'columnWidth',\n      { name: 'horizontalAlign', override: { defaultValue: 'left' } },\n    ],\n    ['truncateLongCells'],\n  ],\n  [GenericDataType.NUMERIC]: [\n    [\n      'columnWidth',\n      { name: 'horizontalAlign', override: { defaultValue: 'right' } },\n    ],\n    ['d3NumberFormat'],\n    ['d3SmallNumberFormat'],\n    ['alignPositiveNegative', 'colorPositiveNegative'],\n    ['showCellBars'],\n  ],\n  [GenericDataType.TEMPORAL]: [\n    [\n      'columnWidth',\n      { name: 'horizontalAlign', override: { defaultValue: 'left' } },\n    ],\n    ['d3TimeFormat'],\n  ],\n  [GenericDataType.BOOLEAN]: [\n    [\n      'columnWidth',\n      { name: 'horizontalAlign', override: { defaultValue: 'left' } },\n    ],\n  ],\n};\n"]},"metadata":{},"sourceType":"module"}