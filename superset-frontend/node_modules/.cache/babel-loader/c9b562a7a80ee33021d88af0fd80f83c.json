{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { Suspense, useEffect } from 'react';\nimport { hot } from 'react-hot-loader/root';\nimport { BrowserRouter as Router, Switch, Route, useLocation } from 'react-router-dom';\nimport { bindActionCreators } from 'redux';\nimport { GlobalStyles } from 'src/GlobalStyles';\nimport ErrorBoundary from 'src/components/ErrorBoundary';\nimport Loading from 'src/components/Loading';\nimport Menu from 'src/features/home/Menu';\nimport getBootstrapData from 'src/utils/getBootstrapData';\nimport ToastContainer from 'src/components/MessageToasts/ToastContainer';\nimport setupApp from 'src/setup/setupApp';\nimport setupPlugins from 'src/setup/setupPlugins';\nimport { routes, isFrontendRoute } from 'src/views/routes';\nimport { Logger, LOG_ACTIONS_SPA_NAVIGATION } from 'src/logger/LogUtils';\nimport setupExtensions from 'src/setup/setupExtensions';\nimport { logEvent } from 'src/logger/actions';\nimport { store } from 'src/views/store';\nimport { RootContextProviders } from './RootContextProviders';\nimport { ScrollToTop } from './ScrollToTop';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nsetupApp();\nsetupPlugins();\nsetupExtensions();\nconst bootstrapData = getBootstrapData();\nlet lastLocationPathname;\nconst boundActions = bindActionCreators({ logEvent }, store.dispatch);\nconst LocationPathnameLogger = () => {\n  const location = useLocation();\n  useEffect(() => {\n    // This will log client side route changes for single page app user navigation\n    boundActions.logEvent(LOG_ACTIONS_SPA_NAVIGATION, {\n      path: location.pathname });\n\n    // reset performance logger timer start point to avoid soft navigation\n    // cause dashboard perf measurement problem\n    if (lastLocationPathname && lastLocationPathname !== location.pathname) {\n      Logger.markTimeOrigin();\n    }\n    lastLocationPathname = location.pathname;\n  }, [location.pathname]);\n  return ___EmotionJSX(React.Fragment, null);\n};\nconst App = () => ___EmotionJSX(Router, null,\n___EmotionJSX(ScrollToTop, null),\n___EmotionJSX(LocationPathnameLogger, null),\n___EmotionJSX(RootContextProviders, null,\n___EmotionJSX(GlobalStyles, null),\n___EmotionJSX(Menu, { data: bootstrapData.common.menu_data, isFrontendRoute: isFrontendRoute }),\n___EmotionJSX(Switch, null,\nroutes.map((_ref) => {let { path, Component, props = {}, Fallback = Loading } = _ref;return ___EmotionJSX(Route, { path: path, key: path },\n  ___EmotionJSX(Suspense, { fallback: ___EmotionJSX(Fallback, null) },\n  ___EmotionJSX(ErrorBoundary, null,\n  ___EmotionJSX(Component, _extends({ user: bootstrapData.user }, props)))));})),\n\n\n\n\n___EmotionJSX(ToastContainer, null)));\n\n\nexport default App;","map":{"version":3,"mappings":"+DAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,GAAT,QAAoB,uBAApB;AACA,SACEC,aAAa,IAAIC,MADnB,EAEEC,MAFF,EAGEC,KAHF,EAIEC,WAJF,QAKO,kBALP;AAMA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,OAAOC,aAAP,MAA0B,8BAA1B;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,gBAAP,MAA6B,4BAA7B;AACA,OAAOC,cAAP,MAA2B,6CAA3B;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,OAAOC,YAAP,MAAyB,wBAAzB;AACA,SAASC,MAAT,EAAiBC,eAAjB,QAAwC,kBAAxC;AACA,SAASC,MAAT,EAAiBC,0BAAjB,QAAmD,qBAAnD;AACA,OAAOC,eAAP,MAA4B,2BAA5B;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,KAAT,QAAsB,iBAAtB;AACA,SAASC,oBAAT,QAAqC,wBAArC;AACA,SAASC,WAAT,QAA4B,eAA5B,C;AAEAV,QAAQ;AACRC,YAAY;AACZK,eAAe;AAEf,MAAMK,aAAa,GAAGb,gBAAgB,EAAtC;AAEA,IAAIc,oBAAJ;AAEA,MAAMC,YAAY,GAAGpB,kBAAkB,CAAC,EAAEc,QAAF,EAAD,EAAeC,KAAK,CAACM,QAArB,CAAvC;AAEA,MAAMC,sBAAsB,GAAG,MAAK;EAClC,MAAMC,QAAQ,GAAGxB,WAAW,EAA5B;EACAN,SAAS,CAAC,MAAK;IACb;IACA2B,YAAY,CAACN,QAAb,CAAsBF,0BAAtB,EAAkD;MAChDY,IAAI,EAAED,QAAQ,CAACE,QADiC,EAAlD;;IAGA;IACA;IACA,IAAIN,oBAAoB,IAAIA,oBAAoB,KAAKI,QAAQ,CAACE,QAA9D,EAAwE;MACtEd,MAAM,CAACe,cAAP;IACD;IACDP,oBAAoB,GAAGI,QAAQ,CAACE,QAAhC;EACD,CAXQ,EAWN,CAACF,QAAQ,CAACE,QAAV,CAXM,CAAT;EAYA,OAAO,mCAAP;AACD,CAfD;AAiBA,MAAME,GAAG,GAAG,MACV,cAAC,MAAD;AACE,cAAC,WAAD,OADF;AAEE,cAAC,sBAAD,OAFF;AAGE,cAAC,oBAAD;AACE,cAAC,YAAD,OADF;AAEE,cAAC,IAAD,IACE,IAAI,EAAET,aAAa,CAACU,MAAd,CAAqBC,SAD7B,EAEE,eAAe,EAAEnB,eAFnB,GAFF;AAME,cAAC,MAAD;AACGD,MAAM,CAACqB,GAAP,CAAW,eAAC,EAAEN,IAAF,EAAQO,SAAR,EAAmBC,KAAK,GAAG,EAA3B,EAA+BC,QAAQ,GAAG9B,OAA1C,EAAD,eACV,cAAC,KAAD,IAAO,IAAI,EAAEqB,IAAb,EAAmB,GAAG,EAAEA,IAAxB;EACE,cAAC,QAAD,IAAU,QAAQ,EAAE,cAAC,QAAD,OAApB;EACE,cAAC,aAAD;EACE,cAAC,SAAD,aAAW,IAAI,EAAEN,aAAa,CAACgB,IAA/B,IAAyCF,KAAzC,EADF,CADF,CADF,CADU,EAAX,CADH,CANF;;;;;AAiBE,cAAC,cAAD,OAjBF,CAHF,CADF;;;AA0BA,eAAmBL,GAAnB","names":["React","Suspense","useEffect","hot","BrowserRouter","Router","Switch","Route","useLocation","bindActionCreators","GlobalStyles","ErrorBoundary","Loading","Menu","getBootstrapData","ToastContainer","setupApp","setupPlugins","routes","isFrontendRoute","Logger","LOG_ACTIONS_SPA_NAVIGATION","setupExtensions","logEvent","store","RootContextProviders","ScrollToTop","bootstrapData","lastLocationPathname","boundActions","dispatch","LocationPathnameLogger","location","path","pathname","markTimeOrigin","App","common","menu_data","map","Component","props","Fallback","user"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/views/App.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { Suspense, useEffect } from 'react';\nimport { hot } from 'react-hot-loader/root';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  useLocation,\n} from 'react-router-dom';\nimport { bindActionCreators } from 'redux';\nimport { GlobalStyles } from 'src/GlobalStyles';\nimport ErrorBoundary from 'src/components/ErrorBoundary';\nimport Loading from 'src/components/Loading';\nimport Menu from 'src/features/home/Menu';\nimport getBootstrapData from 'src/utils/getBootstrapData';\nimport ToastContainer from 'src/components/MessageToasts/ToastContainer';\nimport setupApp from 'src/setup/setupApp';\nimport setupPlugins from 'src/setup/setupPlugins';\nimport { routes, isFrontendRoute } from 'src/views/routes';\nimport { Logger, LOG_ACTIONS_SPA_NAVIGATION } from 'src/logger/LogUtils';\nimport setupExtensions from 'src/setup/setupExtensions';\nimport { logEvent } from 'src/logger/actions';\nimport { store } from 'src/views/store';\nimport { RootContextProviders } from './RootContextProviders';\nimport { ScrollToTop } from './ScrollToTop';\n\nsetupApp();\nsetupPlugins();\nsetupExtensions();\n\nconst bootstrapData = getBootstrapData();\n\nlet lastLocationPathname: string;\n\nconst boundActions = bindActionCreators({ logEvent }, store.dispatch);\n\nconst LocationPathnameLogger = () => {\n  const location = useLocation();\n  useEffect(() => {\n    // This will log client side route changes for single page app user navigation\n    boundActions.logEvent(LOG_ACTIONS_SPA_NAVIGATION, {\n      path: location.pathname,\n    });\n    // reset performance logger timer start point to avoid soft navigation\n    // cause dashboard perf measurement problem\n    if (lastLocationPathname && lastLocationPathname !== location.pathname) {\n      Logger.markTimeOrigin();\n    }\n    lastLocationPathname = location.pathname;\n  }, [location.pathname]);\n  return <></>;\n};\n\nconst App = () => (\n  <Router>\n    <ScrollToTop />\n    <LocationPathnameLogger />\n    <RootContextProviders>\n      <GlobalStyles />\n      <Menu\n        data={bootstrapData.common.menu_data}\n        isFrontendRoute={isFrontendRoute}\n      />\n      <Switch>\n        {routes.map(({ path, Component, props = {}, Fallback = Loading }) => (\n          <Route path={path} key={path}>\n            <Suspense fallback={<Fallback />}>\n              <ErrorBoundary>\n                <Component user={bootstrapData.user} {...props} />\n              </ErrorBoundary>\n            </Suspense>\n          </Route>\n        ))}\n      </Switch>\n      <ToastContainer />\n    </RootContextProviders>\n  </Router>\n);\n\nexport default hot(App);\n"]},"metadata":{},"sourceType":"module"}