{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useMemo, useRef } from 'react';\nimport { t, useTruncation } from '@superset-ui/core';\nimport { useFilterScope } from './useFilterScope';\nimport { Row, RowLabel, RowTruncationCount, RowValue, TooltipList, TooltipSectionLabel } from './Styles';\nimport { TooltipWithTruncation } from './TooltipWithTruncation';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst getTooltipSection = (items, label) => Array.isArray(items) && items.length > 0 ? ___EmotionJSX(React.Fragment, null,\n___EmotionJSX(TooltipSectionLabel, null, label, \":\"),\n___EmotionJSX(TooltipList, null,\nitems.map((item) => ___EmotionJSX(\"li\", null, item)))) :\n\nnull;\nexport const ScopeRow = /*#__PURE__*/React.memo(__signature__((_ref) => {let { filter } = _ref;\n  const scope = useFilterScope(filter);\n  const scopeRef = useRef(null);\n  const plusRef = useRef(null);\n  const [elementsTruncated, hasHiddenElements] = useTruncation(scopeRef, plusRef);\n  const tooltipText = useMemo(() => {\n    if (elementsTruncated === 0 || !scope) {\n      return null;\n    }\n    if (scope.all) {\n      return ___EmotionJSX(\"span\", null, t('All charts'));\n    }\n    return ___EmotionJSX(\"div\", null,\n    getTooltipSection(scope.tabs, t('Tabs')),\n    getTooltipSection(scope.charts, t('Charts')));\n\n  }, [elementsTruncated, scope]);\n  return ___EmotionJSX(Row, null,\n  ___EmotionJSX(RowLabel, null, t('Scope')),\n  ___EmotionJSX(TooltipWithTruncation, { title: tooltipText },\n  ___EmotionJSX(RowValue, { ref: scopeRef },\n  scope ?\n  Object.values(scope).\n  flat().\n  map((element, index) => ___EmotionJSX(\"span\", { key: element },\n  index === 0 ? element : `, ${element}`)) :\n\n  t('None')),\n\n  hasHiddenElements > 0 && ___EmotionJSX(RowTruncationCount, { ref: plusRef }, \"+\",\n  elementsTruncated)));\n\n\n\n}, \"useFilterScope{scope}\\nuseRef{scopeRef}\\nuseRef{plusRef}\\nuseTruncation{[elementsTruncated, hasHiddenElements]}\\nuseMemo{tooltipText}\", () => [useFilterScope, useTruncation]));;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(getTooltipSection, \"getTooltipSection\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/components/nativeFilters/FilterCard/ScopeRow.tsx\");reactHotLoader.register(ScopeRow, \"ScopeRow\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/components/nativeFilters/FilterCard/ScopeRow.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,KAAP,IAAgBC,OAAhB,EAAyBC,MAAzB,QAAuC,OAAvC;AACA,SAASC,CAAT,EAAYC,aAAZ,QAAiC,mBAAjC;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SACEC,GADF,EAEEC,QAFF,EAGEC,kBAHF,EAIEC,QAJF,EAKEC,WALF,EAMEC,mBANF,QAOO,UAPP;AASA,SAASC,qBAAT,QAAsC,yBAAtC,C;AAEA,MAAMC,iBAAiB,GAAG,CAACC,KAAD,EAA8BC,KAA9B,KACxBC,KAAK,CAACC,OAAN,CAAcH,KAAd,KAAwBA,KAAK,CAACI,MAAN,GAAe,CAAvC,GACE;AACE,cAAC,mBAAD,QAAsBH,KAAtB,MADF;AAEE,cAAC,WAAD;AACGD,KAAK,CAACK,GAAN,CAAU,KAAI,KACb,0BAAKC,IAAL,CADD,CADH,CAFF,CADF;;AASI,IAVN;AAYA,OAAO,MAAMC,QAAQ,gBAAGrB,KAAK,CAACsB,IAAN,eAAW,UAAmC,KAAlC,EAAEC,MAAF,EAAkC;EACpE,MAAMC,KAAK,GAAGnB,cAAc,CAACkB,MAAD,CAA5B;EACA,MAAME,QAAQ,GAAGvB,MAAM,CAAiB,IAAjB,CAAvB;EACA,MAAMwB,OAAO,GAAGxB,MAAM,CAAiB,IAAjB,CAAtB;EAEA,MAAM,CAACyB,iBAAD,EAAoBC,iBAApB,IAAyCxB,aAAa,CAC1DqB,QAD0D,EAE1DC,OAF0D,CAA5D;EAIA,MAAMG,WAAW,GAAG5B,OAAO,CAAC,MAAK;IAC/B,IAAI0B,iBAAiB,KAAK,CAAtB,IAA2B,CAACH,KAAhC,EAAuC;MACrC,OAAO,IAAP;IACD;IACD,IAAIA,KAAK,CAACM,GAAV,EAAe;MACb,OAAO,4BAAO3B,CAAC,CAAC,YAAD,CAAR,CAAP;IACD;IACD,OACE;IACGU,iBAAiB,CAACW,KAAK,CAACO,IAAP,EAAa5B,CAAC,CAAC,MAAD,CAAd,CADpB;IAEGU,iBAAiB,CAACW,KAAK,CAACQ,MAAP,EAAe7B,CAAC,CAAC,QAAD,CAAhB,CAFpB,CADF;;EAMD,CAb0B,EAaxB,CAACwB,iBAAD,EAAoBH,KAApB,CAbwB,CAA3B;EAeA,OACE,cAAC,GAAD;EACE,cAAC,QAAD,QAAWrB,CAAC,CAAC,OAAD,CAAZ,CADF;EAEE,cAAC,qBAAD,IAAuB,KAAK,EAAE0B,WAA9B;EACE,cAAC,QAAD,IAAU,GAAG,EAAEJ,QAAf;EACGD,KAAK;EACFS,MAAM,CAACC,MAAP,CAAcV,KAAd;EACGW,IADH;EAEGhB,GAFH,CAEO,CAACiB,OAAD,EAAUC,KAAV,KACH,wBAAM,GAAG,EAAED,OAAX;EACGC,KAAK,KAAK,CAAV,GAAcD,OAAd,GAAwB,KAAKA,OAAO,EADvC,CAHJ,CADE;;EAQFjC,CAAC,CAAC,MAAD,CATP,CADF;;EAYGyB,iBAAiB,GAAG,CAApB,IACC,cAAC,kBAAD,IAAoB,GAAG,EAAEF,OAAzB;EACIC,iBADJ,CAbJ,CAFF,CADF;;;;AAuBD,CA/CuB,kJACRtB,cADQ,EAKyBD,aALzB,GAAjB,C,iLAZDS,iB,kLAYOQ,Q","names":["React","useMemo","useRef","t","useTruncation","useFilterScope","Row","RowLabel","RowTruncationCount","RowValue","TooltipList","TooltipSectionLabel","TooltipWithTruncation","getTooltipSection","items","label","Array","isArray","length","map","item","ScopeRow","memo","filter","scope","scopeRef","plusRef","elementsTruncated","hasHiddenElements","tooltipText","all","tabs","charts","Object","values","flat","element","index"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/components/nativeFilters/FilterCard/ScopeRow.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useMemo, useRef } from 'react';\nimport { t, useTruncation } from '@superset-ui/core';\nimport { useFilterScope } from './useFilterScope';\nimport {\n  Row,\n  RowLabel,\n  RowTruncationCount,\n  RowValue,\n  TooltipList,\n  TooltipSectionLabel,\n} from './Styles';\nimport { FilterCardRowProps } from './types';\nimport { TooltipWithTruncation } from './TooltipWithTruncation';\n\nconst getTooltipSection = (items: string[] | undefined, label: string) =>\n  Array.isArray(items) && items.length > 0 ? (\n    <>\n      <TooltipSectionLabel>{label}:</TooltipSectionLabel>\n      <TooltipList>\n        {items.map(item => (\n          <li>{item}</li>\n        ))}\n      </TooltipList>\n    </>\n  ) : null;\n\nexport const ScopeRow = React.memo(({ filter }: FilterCardRowProps) => {\n  const scope = useFilterScope(filter);\n  const scopeRef = useRef<HTMLDivElement>(null);\n  const plusRef = useRef<HTMLDivElement>(null);\n\n  const [elementsTruncated, hasHiddenElements] = useTruncation(\n    scopeRef,\n    plusRef,\n  );\n  const tooltipText = useMemo(() => {\n    if (elementsTruncated === 0 || !scope) {\n      return null;\n    }\n    if (scope.all) {\n      return <span>{t('All charts')}</span>;\n    }\n    return (\n      <div>\n        {getTooltipSection(scope.tabs, t('Tabs'))}\n        {getTooltipSection(scope.charts, t('Charts'))}\n      </div>\n    );\n  }, [elementsTruncated, scope]);\n\n  return (\n    <Row>\n      <RowLabel>{t('Scope')}</RowLabel>\n      <TooltipWithTruncation title={tooltipText}>\n        <RowValue ref={scopeRef}>\n          {scope\n            ? Object.values(scope)\n                .flat()\n                .map((element, index) => (\n                  <span key={element}>\n                    {index === 0 ? element : `, ${element}`}\n                  </span>\n                ))\n            : t('None')}\n        </RowValue>\n        {hasHiddenElements > 0 && (\n          <RowTruncationCount ref={plusRef}>\n            +{elementsTruncated}\n          </RowTruncationCount>\n        )}\n      </TooltipWithTruncation>\n    </Row>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}