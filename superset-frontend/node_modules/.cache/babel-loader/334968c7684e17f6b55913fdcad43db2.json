{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { FeatureFlag, isFeatureEnabled, t, validateNonEmpty } from '@superset-ui/core';\nimport { columnChoices, formatSelectOptionsForRange, sections, sharedControls, getStandardizedControls } from '@superset-ui/chart-controls';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst sortAxisChoices = [\n['alpha_asc', t('Axis ascending')],\n['alpha_desc', t('Axis descending')],\n['value_asc', t('Metric ascending')],\n['value_desc', t('Metric descending')]];\n\nconst allColumns = {\n  type: 'SelectControl',\n  default: null,\n  description: t('Columns to display'),\n  mapStateToProps: (state) => ({\n    choices: columnChoices(state.datasource) }),\n\n  validators: [validateNonEmpty] };\n\nconst dndAllColumns = {\n  ...sharedControls.entity,\n  description: t('Columns to display') };\n\nconst columnsConfig = isFeatureEnabled(FeatureFlag.ENABLE_EXPLORE_DRAG_AND_DROP) ?\ndndAllColumns :\nallColumns;\nconst config = {\n  controlPanelSections: [\n  sections.legacyRegularTime,\n  {\n    label: t('Query'),\n    expanded: true,\n    controlSetRows: [\n    [\n    {\n      name: 'all_columns_x',\n      config: {\n        ...columnsConfig,\n        label: t('X Axis') } }],\n\n\n\n    [\n    {\n      name: 'all_columns_y',\n      config: {\n        ...columnsConfig,\n        label: t('Y Axis') } }],\n\n\n\n    ['metric'],\n    ['adhoc_filters'],\n    ['row_limit'],\n    [\n    {\n      name: 'sort_by_metric',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Sort by metric'),\n        description: t('Whether to sort results by the selected metric in descending order.') } }]] },\n\n\n\n\n\n  {\n    label: t('Heatmap Options'),\n    expanded: true,\n    tabOverride: 'customize',\n    controlSetRows: [\n    ['linear_color_scheme'],\n    [\n    {\n      name: 'xscale_interval',\n      config: {\n        type: 'SelectControl',\n        label: t('XScale Interval'),\n        renderTrigger: true,\n        choices: formatSelectOptionsForRange(1, 50),\n        default: 1,\n        clearable: false,\n        description: t('Number of steps to take between ticks when displaying the X scale') } }],\n\n\n\n    [\n    {\n      name: 'yscale_interval',\n      config: {\n        type: 'SelectControl',\n        label: t('YScale Interval'),\n        choices: formatSelectOptionsForRange(1, 50),\n        default: 1,\n        clearable: false,\n        renderTrigger: true,\n        description: t('Number of steps to take between ticks when displaying the Y scale') } }],\n\n\n\n    [\n    {\n      name: 'canvas_image_rendering',\n      config: {\n        type: 'SelectControl',\n        label: t('Rendering'),\n        renderTrigger: true,\n        choices: [\n        ['pixelated', t('pixelated (Sharp)')],\n        ['auto', t('auto (Smooth)')]],\n\n        default: 'pixelated',\n        description: t('image-rendering CSS attribute of the canvas object that ' +\n        'defines how the browser scales up the image') } }],\n\n\n\n    [\n    {\n      name: 'normalize_across',\n      config: {\n        type: 'SelectControl',\n        label: t('Normalize Across'),\n        choices: [\n        ['heatmap', t('heatmap')],\n        ['x', t('x')],\n        ['y', t('y')]],\n\n        default: 'heatmap',\n        description: ___EmotionJSX(React.Fragment, null,\n        ___EmotionJSX(\"div\", null,\n        t('Color will be shaded based the normalized (0% to 100%) value of a given cell against the other cells in the selected range: ')),\n\n        ___EmotionJSX(\"ul\", null,\n        ___EmotionJSX(\"li\", null, t('x: values are normalized within each column')),\n        ___EmotionJSX(\"li\", null, t('y: values are normalized within each row')),\n        ___EmotionJSX(\"li\", null,\n        t('heatmap: values are normalized across the entire heatmap')))) } }],\n\n\n\n\n\n\n    [\n    {\n      name: 'left_margin',\n      config: {\n        type: 'SelectControl',\n        freeForm: true,\n        clearable: false,\n        label: t('Left Margin'),\n        choices: [\n        ['auto', t('auto')],\n        [50, '50'],\n        [75, '75'],\n        [100, '100'],\n        [125, '125'],\n        [150, '150'],\n        [200, '200']],\n\n        default: 'auto',\n        renderTrigger: true,\n        description: t('Left margin, in pixels, allowing for more room for axis labels') } }],\n\n\n\n    [\n    {\n      name: 'bottom_margin',\n      config: {\n        type: 'SelectControl',\n        clearable: false,\n        freeForm: true,\n        label: t('Bottom Margin'),\n        choices: [\n        ['auto', t('auto')],\n        [50, '50'],\n        [75, '75'],\n        [100, '100'],\n        [125, '125'],\n        [150, '150'],\n        [200, '200']],\n\n        default: 'auto',\n        renderTrigger: true,\n        description: t('Bottom margin, in pixels, allowing for more room for axis labels') } }],\n\n\n\n    [\n    {\n      name: 'y_axis_bounds',\n      config: {\n        type: 'BoundsControl',\n        label: t('Value bounds'),\n        renderTrigger: true,\n        default: [null, null],\n        description: t('Hard value bounds applied for color coding. Is only relevant ' +\n        'and applied when the normalization is applied against the whole heatmap.') } }],\n\n\n\n    ['y_axis_format'],\n    [\n    {\n      name: 'sort_x_axis',\n      config: {\n        type: 'SelectControl',\n        label: t('Sort X Axis'),\n        choices: sortAxisChoices,\n        clearable: false,\n        default: 'alpha_asc' } }],\n\n\n\n    [\n    {\n      name: 'sort_y_axis',\n      config: {\n        type: 'SelectControl',\n        label: t('Sort Y Axis'),\n        choices: sortAxisChoices,\n        clearable: false,\n        default: 'alpha_asc' } }],\n\n\n\n    [\n    {\n      name: 'show_legend',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Legend'),\n        renderTrigger: true,\n        default: true,\n        description: t('Whether to display the legend (toggles)') } }],\n\n\n\n    [\n    {\n      name: 'show_perc',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Show percentage'),\n        renderTrigger: true,\n        description: t('Whether to include the percentage in the tooltip'),\n        default: true } }],\n\n\n\n    [\n    {\n      name: 'show_values',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Show Values'),\n        renderTrigger: true,\n        default: false,\n        description: t('Whether to display the numerical values within the cells') } }],\n\n\n\n    [\n    {\n      name: 'normalized',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Normalized'),\n        renderTrigger: true,\n        description: t('Whether to apply a normal distribution based on rank on the color scale'),\n        default: false } }]] }],\n\n\n\n\n\n\n  controlOverrides: {\n    y_axis_format: {\n      label: t('Value Format') } },\n\n\n  formDataOverrides: (formData) => ({\n    ...formData,\n    metric: getStandardizedControls().shiftMetric() }) };\n\n\nexport default config;","map":{"version":3,"mappings":"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","names":["React","FeatureFlag","isFeatureEnabled","t","validateNonEmpty","columnChoices","formatSelectOptionsForRange","sections","sharedControls","getStandardizedControls","sortAxisChoices","allColumns","type","default","description","mapStateToProps","state","choices","datasource","validators","dndAllColumns","entity","columnsConfig","ENABLE_EXPLORE_DRAG_AND_DROP","config","controlPanelSections","legacyRegularTime","label","expanded","controlSetRows","name","tabOverride","renderTrigger","clearable","freeForm","controlOverrides","y_axis_format","formDataOverrides","formData","metric","shiftMetric"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/legacy-plugin-chart-heatmap/src/controlPanel.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport {\n  FeatureFlag,\n  isFeatureEnabled,\n  t,\n  validateNonEmpty,\n} from '@superset-ui/core';\nimport {\n  columnChoices,\n  ControlPanelConfig,\n  ControlPanelState,\n  formatSelectOptionsForRange,\n  sections,\n  sharedControls,\n  getStandardizedControls,\n} from '@superset-ui/chart-controls';\n\nconst sortAxisChoices = [\n  ['alpha_asc', t('Axis ascending')],\n  ['alpha_desc', t('Axis descending')],\n  ['value_asc', t('Metric ascending')],\n  ['value_desc', t('Metric descending')],\n];\n\nconst allColumns = {\n  type: 'SelectControl',\n  default: null,\n  description: t('Columns to display'),\n  mapStateToProps: (state: ControlPanelState) => ({\n    choices: columnChoices(state.datasource),\n  }),\n  validators: [validateNonEmpty],\n};\n\nconst dndAllColumns = {\n  ...sharedControls.entity,\n  description: t('Columns to display'),\n};\n\nconst columnsConfig = isFeatureEnabled(FeatureFlag.ENABLE_EXPLORE_DRAG_AND_DROP)\n  ? dndAllColumns\n  : allColumns;\n\nconst config: ControlPanelConfig = {\n  controlPanelSections: [\n    sections.legacyRegularTime,\n    {\n      label: t('Query'),\n      expanded: true,\n      controlSetRows: [\n        [\n          {\n            name: 'all_columns_x',\n            config: {\n              ...columnsConfig,\n              label: t('X Axis'),\n            },\n          },\n        ],\n        [\n          {\n            name: 'all_columns_y',\n            config: {\n              ...columnsConfig,\n              label: t('Y Axis'),\n            },\n          },\n        ],\n        ['metric'],\n        ['adhoc_filters'],\n        ['row_limit'],\n        [\n          {\n            name: 'sort_by_metric',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Sort by metric'),\n              description: t(\n                'Whether to sort results by the selected metric in descending order.',\n              ),\n            },\n          },\n        ],\n      ],\n    },\n    {\n      label: t('Heatmap Options'),\n      expanded: true,\n      tabOverride: 'customize',\n      controlSetRows: [\n        ['linear_color_scheme'],\n        [\n          {\n            name: 'xscale_interval',\n            config: {\n              type: 'SelectControl',\n              label: t('XScale Interval'),\n              renderTrigger: true,\n              choices: formatSelectOptionsForRange(1, 50),\n              default: 1,\n              clearable: false,\n              description: t(\n                'Number of steps to take between ticks when displaying the X scale',\n              ),\n            },\n          },\n        ],\n        [\n          {\n            name: 'yscale_interval',\n            config: {\n              type: 'SelectControl',\n              label: t('YScale Interval'),\n              choices: formatSelectOptionsForRange(1, 50),\n              default: 1,\n              clearable: false,\n              renderTrigger: true,\n              description: t(\n                'Number of steps to take between ticks when displaying the Y scale',\n              ),\n            },\n          },\n        ],\n        [\n          {\n            name: 'canvas_image_rendering',\n            config: {\n              type: 'SelectControl',\n              label: t('Rendering'),\n              renderTrigger: true,\n              choices: [\n                ['pixelated', t('pixelated (Sharp)')],\n                ['auto', t('auto (Smooth)')],\n              ],\n              default: 'pixelated',\n              description: t(\n                'image-rendering CSS attribute of the canvas object that ' +\n                  'defines how the browser scales up the image',\n              ),\n            },\n          },\n        ],\n        [\n          {\n            name: 'normalize_across',\n            config: {\n              type: 'SelectControl',\n              label: t('Normalize Across'),\n              choices: [\n                ['heatmap', t('heatmap')],\n                ['x', t('x')],\n                ['y', t('y')],\n              ],\n              default: 'heatmap',\n              description: (\n                <>\n                  <div>\n                    {t(\n                      'Color will be shaded based the normalized (0% to 100%) value of a given cell against the other cells in the selected range: ',\n                    )}\n                  </div>\n                  <ul>\n                    <li>{t('x: values are normalized within each column')}</li>\n                    <li>{t('y: values are normalized within each row')}</li>\n                    <li>\n                      {t(\n                        'heatmap: values are normalized across the entire heatmap',\n                      )}\n                    </li>\n                  </ul>\n                </>\n              ),\n            },\n          },\n        ],\n        [\n          {\n            name: 'left_margin',\n            config: {\n              type: 'SelectControl',\n              freeForm: true,\n              clearable: false,\n              label: t('Left Margin'),\n              choices: [\n                ['auto', t('auto')],\n                [50, '50'],\n                [75, '75'],\n                [100, '100'],\n                [125, '125'],\n                [150, '150'],\n                [200, '200'],\n              ],\n              default: 'auto',\n              renderTrigger: true,\n              description: t(\n                'Left margin, in pixels, allowing for more room for axis labels',\n              ),\n            },\n          },\n        ],\n        [\n          {\n            name: 'bottom_margin',\n            config: {\n              type: 'SelectControl',\n              clearable: false,\n              freeForm: true,\n              label: t('Bottom Margin'),\n              choices: [\n                ['auto', t('auto')],\n                [50, '50'],\n                [75, '75'],\n                [100, '100'],\n                [125, '125'],\n                [150, '150'],\n                [200, '200'],\n              ],\n              default: 'auto',\n              renderTrigger: true,\n              description: t(\n                'Bottom margin, in pixels, allowing for more room for axis labels',\n              ),\n            },\n          },\n        ],\n        [\n          {\n            name: 'y_axis_bounds',\n            config: {\n              type: 'BoundsControl',\n              label: t('Value bounds'),\n              renderTrigger: true,\n              default: [null, null],\n              description: t(\n                'Hard value bounds applied for color coding. Is only relevant ' +\n                  'and applied when the normalization is applied against the whole heatmap.',\n              ),\n            },\n          },\n        ],\n        ['y_axis_format'],\n        [\n          {\n            name: 'sort_x_axis',\n            config: {\n              type: 'SelectControl',\n              label: t('Sort X Axis'),\n              choices: sortAxisChoices,\n              clearable: false,\n              default: 'alpha_asc',\n            },\n          },\n        ],\n        [\n          {\n            name: 'sort_y_axis',\n            config: {\n              type: 'SelectControl',\n              label: t('Sort Y Axis'),\n              choices: sortAxisChoices,\n              clearable: false,\n              default: 'alpha_asc',\n            },\n          },\n        ],\n        [\n          {\n            name: 'show_legend',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Legend'),\n              renderTrigger: true,\n              default: true,\n              description: t('Whether to display the legend (toggles)'),\n            },\n          },\n        ],\n        [\n          {\n            name: 'show_perc',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Show percentage'),\n              renderTrigger: true,\n              description: t(\n                'Whether to include the percentage in the tooltip',\n              ),\n              default: true,\n            },\n          },\n        ],\n        [\n          {\n            name: 'show_values',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Show Values'),\n              renderTrigger: true,\n              default: false,\n              description: t(\n                'Whether to display the numerical values within the cells',\n              ),\n            },\n          },\n        ],\n        [\n          {\n            name: 'normalized',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Normalized'),\n              renderTrigger: true,\n              description: t(\n                'Whether to apply a normal distribution based on rank on the color scale',\n              ),\n              default: false,\n            },\n          },\n        ],\n      ],\n    },\n  ],\n  controlOverrides: {\n    y_axis_format: {\n      label: t('Value Format'),\n    },\n  },\n  formDataOverrides: formData => ({\n    ...formData,\n    metric: getStandardizedControls().shiftMetric(),\n  }),\n};\n\nexport default config;\n"]},"metadata":{},"sourceType":"module"}