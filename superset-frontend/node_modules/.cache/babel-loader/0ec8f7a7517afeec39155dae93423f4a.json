{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\";import _isArray from \"lodash/isArray\";import _debounce from \"lodash/debounce\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { css, DatasourceType, FeatureFlag, styled, t } from '@superset-ui/core';\n\nimport { matchSorter, rankings } from 'match-sorter';\nimport Collapse from 'src/components/Collapse';\nimport Alert from 'src/components/Alert';\nimport { SaveDatasetModal } from 'src/SqlLab/components/SaveDatasetModal';\nimport { getDatasourceAsSaveableDataset } from 'src/utils/datasourceUtils';\nimport { Input } from 'src/components/Input';\nimport { FAST_DEBOUNCE } from 'src/constants';\nimport { isFeatureEnabled } from 'src/featureFlags';\nimport Control from 'src/explore/components/Control';\nimport DatasourcePanelDragOption from './DatasourcePanelDragOption';\nimport { DndItemType } from '../DndItemType';\nimport { StyledColumnOption, StyledMetricOption } from '../optionRenderers';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst enableExploreDnd = isFeatureEnabled(FeatureFlag.ENABLE_EXPLORE_DRAG_AND_DROP);\nconst Button = styled.button`\n  background: none;\n  border: none;\n  text-decoration: underline;\n  color: ${(_ref) => {let { theme } = _ref;return theme.colors.primary.dark1;}};\n`;\nconst ButtonContainer = styled.div`\n  text-align: center;\n  padding-top: 2px;\n`;\nconst DatasourceContainer = styled.div`\n  ${(_ref2) => {let { theme } = _ref2;return css`\n    background-color: ${theme.colors.grayscale.light5};\n    position: relative;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    max-height: 100%;\n    .ant-collapse {\n      height: auto;\n    }\n    .field-selections {\n      padding: 0 0 ${4 * theme.gridUnit}px;\n      overflow: auto;\n    }\n    .field-length {\n      margin-bottom: ${theme.gridUnit * 2}px;\n      font-size: ${theme.typography.sizes.s}px;\n      color: ${theme.colors.grayscale.light1};\n    }\n    .form-control.input-md {\n      width: calc(100% - ${theme.gridUnit * 8}px);\n      height: ${theme.gridUnit * 8}px;\n      margin: ${theme.gridUnit * 2}px auto;\n    }\n    .type-label {\n      font-size: ${theme.typography.sizes.s}px;\n      color: ${theme.colors.grayscale.base};\n    }\n    .Control {\n      padding-bottom: 0;\n    }\n  `;}};\n`;\nconst LabelWrapper = styled.div`\n  ${(_ref3) => {let { theme } = _ref3;return css`\n    overflow: hidden;\n    text-overflow: ellipsis;\n    font-size: ${theme.typography.sizes.s}px;\n    background-color: ${theme.colors.grayscale.light4};\n    margin: ${theme.gridUnit * 2}px 0;\n    border-radius: 4px;\n    padding: 0 ${theme.gridUnit}px;\n\n    &:first-of-type {\n      margin-top: 0;\n    }\n    &:last-of-type {\n      margin-bottom: 0;\n    }\n\n    ${enableExploreDnd &&\n  css`\n      padding: 0;\n      cursor: pointer;\n      &:hover {\n        background-color: ${theme.colors.grayscale.light3};\n      }\n    `}\n\n    & > span {\n      white-space: nowrap;\n    }\n\n    .option-label {\n      display: inline;\n    }\n\n    .metric-option {\n      & > svg {\n        min-width: ${theme.gridUnit * 4}px;\n      }\n      & > .option-label {\n        overflow: hidden;\n        text-overflow: ellipsis;\n      }\n    }\n  `;}}\n`;\nconst SectionHeader = styled.span`\n  ${(_ref4) => {let { theme } = _ref4;return `\n    font-size: ${theme.typography.sizes.m}px;\n    line-height: 1.3;\n  `;}}\n`;\nconst StyledInfoboxWrapper = styled.div`\n  ${(_ref5) => {let { theme } = _ref5;return css`\n    margin: 0 ${theme.gridUnit * 2.5}px;\n\n    span {\n      text-decoration: underline;\n    }\n  `;}}\n`;\nconst LabelContainer = (props) => {\n  const labelRef = useRef(null);\n  const extendedProps = {\n    labelRef };\n\n  return ___EmotionJSX(LabelWrapper, { className: props.className }, /*#__PURE__*/\n  React.cloneElement(props.children, extendedProps));\n\n};\nexport default function DataSourcePanel(_ref6) {var _lists$metrics3;let { datasource, formData, controls: { datasource: datasourceControl }, actions, shouldForceUpdate } = _ref6;\n  const { columns: _columns, metrics } = datasource;\n  // display temporal column first\n  const columns = useMemo(() => [...(_isArray(_columns) ? _columns : [])].sort((col1, col2) => {\n    if (col1 != null && col1.is_dttm && !(col2 != null && col2.is_dttm)) {\n      return -1;\n    }\n    if (col2 != null && col2.is_dttm && !(col1 != null && col1.is_dttm)) {\n      return 1;\n    }\n    return 0;\n  }), [_columns]);\n  const [showSaveDatasetModal, setShowSaveDatasetModal] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n  const [lists, setList] = useState({\n    columns,\n    metrics });\n\n  const [showAllMetrics, setShowAllMetrics] = useState(false);\n  const [showAllColumns, setShowAllColumns] = useState(false);\n  const DEFAULT_MAX_COLUMNS_LENGTH = 50;\n  const DEFAULT_MAX_METRICS_LENGTH = 50;\n  const search = useMemo(() => _debounce((value) => {\n    if (value === '') {\n      setList({ columns, metrics });\n      return;\n    }\n    setList({\n      columns: matchSorter(columns, value, {\n        keys: [\n        {\n          key: 'verbose_name',\n          threshold: rankings.CONTAINS },\n\n        {\n          key: 'column_name',\n          threshold: rankings.CONTAINS },\n\n        {\n          key: (item) => {var _item$description, _item$expression;return [(_item$description = item == null ? void 0 : item.description) != null ? _item$description : '', (_item$expression = item == null ? void 0 : item.expression) != null ? _item$expression : ''].map((x) => (x == null ? void 0 : x.replace(/[_\\n\\s]+/g, ' ')) || '');},\n          threshold: rankings.CONTAINS,\n          maxRanking: rankings.CONTAINS }],\n\n\n        keepDiacritics: true }),\n\n      metrics: matchSorter(metrics, value, {\n        keys: [\n        {\n          key: 'verbose_name',\n          threshold: rankings.CONTAINS },\n\n        {\n          key: 'metric_name',\n          threshold: rankings.CONTAINS },\n\n        {\n          key: (item) => {var _item$description2, _item$expression2;return [(_item$description2 = item == null ? void 0 : item.description) != null ? _item$description2 : '', (_item$expression2 = item == null ? void 0 : item.expression) != null ? _item$expression2 : ''].map((x) => (x == null ? void 0 : x.replace(/[_\\n\\s]+/g, ' ')) || '');},\n          threshold: rankings.CONTAINS,\n          maxRanking: rankings.CONTAINS }],\n\n\n        keepDiacritics: true,\n        baseSort: (a, b) => {var _b$item$is_certified, _b$item, _a$item$is_certified, _a$item, _a$rankedValue, _b$rankedValue;return Number((_b$item$is_certified = b == null ? void 0 : (_b$item = b.item) == null ? void 0 : _b$item.is_certified) != null ? _b$item$is_certified : 0) -\n          Number((_a$item$is_certified = a == null ? void 0 : (_a$item = a.item) == null ? void 0 : _a$item.is_certified) != null ? _a$item$is_certified : 0) ||\n          String((_a$rankedValue = a == null ? void 0 : a.rankedValue) != null ? _a$rankedValue : '').localeCompare((_b$rankedValue = b == null ? void 0 : b.rankedValue) != null ? _b$rankedValue : '');} }) });\n\n\n  }, FAST_DEBOUNCE), [columns, metrics]);\n  useEffect(() => {\n    setList({\n      columns,\n      metrics });\n\n    setInputValue('');\n  }, [columns, datasource, metrics]);\n  const sortCertifiedFirst = (slice) => slice.sort((a, b) => {var _b$is_certified, _a$is_certified;return ((_b$is_certified = b == null ? void 0 : b.is_certified) != null ? _b$is_certified : 0) - ((_a$is_certified = a == null ? void 0 : a.is_certified) != null ? _a$is_certified : 0);});\n  const metricSlice = useMemo(() => {var _lists$metrics;return showAllMetrics ?\n    lists == null ? void 0 : lists.metrics :\n    lists == null ? void 0 : (_lists$metrics = lists.metrics) == null ? void 0 : _lists$metrics.slice == null ? void 0 : _lists$metrics.slice(0, DEFAULT_MAX_METRICS_LENGTH);}, [lists == null ? void 0 : lists.metrics, showAllMetrics]);\n  const columnSlice = useMemo(() => {var _lists$columns;return showAllColumns ?\n    sortCertifiedFirst(lists == null ? void 0 : lists.columns) :\n    sortCertifiedFirst(lists == null ? void 0 : (_lists$columns = lists.columns) == null ? void 0 : _lists$columns.slice == null ? void 0 : _lists$columns.slice(0, DEFAULT_MAX_COLUMNS_LENGTH));}, [lists.columns, showAllColumns]);\n  const showInfoboxCheck = () => {\n    if (sessionStorage.getItem('showInfobox') === 'false')\n    return false;\n    return true;\n  };\n  const saveableDatasets = {\n    query: DatasourceType.Query,\n    saved_query: DatasourceType.SavedQuery };\n\n  const datasourceIsSaveable = datasource.type && saveableDatasets[datasource.type];\n  const mainBody = useMemo(() => {var _lists$metrics2;return ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(Input, { allowClear: true, onChange: (evt) => {\n        setInputValue(evt.target.value);\n        search(evt.target.value);\n      }, value: inputValue, className: \"form-control input-md\", placeholder: t('Search Metrics & Columns') }),\n    ___EmotionJSX(\"div\", { className: \"field-selections\" },\n    datasourceIsSaveable && showInfoboxCheck() && ___EmotionJSX(StyledInfoboxWrapper, null,\n    ___EmotionJSX(Alert, { closable: true, onClose: () => sessionStorage.setItem('showInfobox', 'false'), type: \"info\", message: \"\", description: ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, onClick: () => setShowSaveDatasetModal(true), className: \"add-dataset-alert-description\" },\n      t('Create a dataset')),\n\n      t(' to edit or add columns and metrics.')) })),\n\n\n    ___EmotionJSX(Collapse, { defaultActiveKey: ['metrics', 'column'], expandIconPosition: \"right\", ghost: true },\n    (metrics == null ? void 0 : metrics.length) && ___EmotionJSX(Collapse.Panel, { header: ___EmotionJSX(SectionHeader, null, t('Metrics')), key: \"metrics\" },\n    ___EmotionJSX(\"div\", { className: \"field-length\" },\n    t(`Showing %s of %s`, metricSlice == null ? void 0 : metricSlice.length, lists == null ? void 0 : lists.metrics.length)),\n\n    metricSlice == null ? void 0 : metricSlice.map == null ? void 0 : metricSlice.map((m) => ___EmotionJSX(LabelContainer, { key: m.metric_name + String(shouldForceUpdate), className: \"column\" },\n    enableExploreDnd ? ___EmotionJSX(DatasourcePanelDragOption, { value: m, type: DndItemType.Metric }) : ___EmotionJSX(StyledMetricOption, { metric: m, showType: true }))),\n\n    (lists == null ? void 0 : (_lists$metrics2 = lists.metrics) == null ? void 0 : _lists$metrics2.length) > DEFAULT_MAX_METRICS_LENGTH ? ___EmotionJSX(ButtonContainer, null,\n    ___EmotionJSX(Button, { onClick: () => setShowAllMetrics(!showAllMetrics) },\n    showAllMetrics ? t('Show less...') : t('Show all...'))) :\n\n    ___EmotionJSX(React.Fragment, null)),\n\n    ___EmotionJSX(Collapse.Panel, { header: ___EmotionJSX(SectionHeader, null, t('Columns')), key: \"column\" },\n    ___EmotionJSX(\"div\", { className: \"field-length\" },\n    t(`Showing %s of %s`, columnSlice.length, lists.columns.length)),\n\n    columnSlice.map((col) => ___EmotionJSX(LabelContainer, { key: col.column_name + String(shouldForceUpdate), className: \"column\" },\n    enableExploreDnd ? ___EmotionJSX(DatasourcePanelDragOption, { value: col, type: DndItemType.Column }) : ___EmotionJSX(StyledColumnOption, { column: col, showType: true }))),\n\n    lists.columns.length > DEFAULT_MAX_COLUMNS_LENGTH ? ___EmotionJSX(ButtonContainer, null,\n    ___EmotionJSX(Button, { onClick: () => setShowAllColumns(!showAllColumns) },\n    showAllColumns ? t('Show Less...') : t('Show all...'))) :\n\n    ___EmotionJSX(React.Fragment, null)))));},\n\n\n\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [\n  columnSlice,\n  inputValue,\n  lists.columns.length,\n  lists == null ? void 0 : (_lists$metrics3 = lists.metrics) == null ? void 0 : _lists$metrics3.length,\n  metricSlice,\n  search,\n  showAllColumns,\n  showAllMetrics,\n  datasourceIsSaveable,\n  shouldForceUpdate]);\n\n  return ___EmotionJSX(DatasourceContainer, null,\n  datasourceIsSaveable && showSaveDatasetModal && ___EmotionJSX(SaveDatasetModal, { visible: showSaveDatasetModal, onHide: () => setShowSaveDatasetModal(false), buttonTextOnSave: t('Save'), buttonTextOnOverwrite: t('Overwrite'), datasource: getDatasourceAsSaveableDataset(datasource), openWindow: false, formData: formData }),\n  ___EmotionJSX(Control, _extends({}, datasourceControl, { name: \"datasource\", actions: actions })),\n  datasource.id != null && mainBody);\n\n}","map":{"version":3,"mappings":"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","names":["React","useEffect","useMemo","useRef","useState","css","DatasourceType","FeatureFlag","styled","t","matchSorter","rankings","Collapse","Alert","SaveDatasetModal","getDatasourceAsSaveableDataset","Input","FAST_DEBOUNCE","isFeatureEnabled","Control","DatasourcePanelDragOption","DndItemType","StyledColumnOption","StyledMetricOption","enableExploreDnd","ENABLE_EXPLORE_DRAG_AND_DROP","Button","button","theme","colors","primary","dark1","ButtonContainer","div","DatasourceContainer","grayscale","light5","gridUnit","typography","sizes","s","light1","base","LabelWrapper","light4","light3","SectionHeader","span","m","StyledInfoboxWrapper","LabelContainer","props","labelRef","extendedProps","className","cloneElement","children","DataSourcePanel","datasource","formData","controls","datasourceControl","actions","shouldForceUpdate","columns","_columns","metrics","sort","col1","col2","is_dttm","showSaveDatasetModal","setShowSaveDatasetModal","inputValue","setInputValue","lists","setList","showAllMetrics","setShowAllMetrics","showAllColumns","setShowAllColumns","DEFAULT_MAX_COLUMNS_LENGTH","DEFAULT_MAX_METRICS_LENGTH","search","value","keys","key","threshold","CONTAINS","item","description","expression","map","replace","maxRanking","keepDiacritics","baseSort","a","b","Number","is_certified","String","rankedValue","localeCompare","sortCertifiedFirst","slice","metricSlice","columnSlice","showInfoboxCheck","sessionStorage","getItem","saveableDatasets","query","Query","saved_query","SavedQuery","datasourceIsSaveable","type","mainBody","evt","target","setItem","length","metric_name","Metric","col","column_name","Column","id"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/DatasourcePanel/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport {\n  css,\n  DatasourceType,\n  FeatureFlag,\n  Metric,\n  QueryFormData,\n  styled,\n  t,\n} from '@superset-ui/core';\n\nimport { ControlConfig, ColumnMeta } from '@superset-ui/chart-controls';\n\nimport { debounce, isArray } from 'lodash';\nimport { matchSorter, rankings } from 'match-sorter';\nimport Collapse from 'src/components/Collapse';\nimport Alert from 'src/components/Alert';\nimport { SaveDatasetModal } from 'src/SqlLab/components/SaveDatasetModal';\nimport { getDatasourceAsSaveableDataset } from 'src/utils/datasourceUtils';\nimport { Input } from 'src/components/Input';\nimport { FAST_DEBOUNCE } from 'src/constants';\nimport { isFeatureEnabled } from 'src/featureFlags';\nimport { ExploreActions } from 'src/explore/actions/exploreActions';\nimport Control from 'src/explore/components/Control';\nimport DatasourcePanelDragOption from './DatasourcePanelDragOption';\nimport { DndItemType } from '../DndItemType';\nimport { StyledColumnOption, StyledMetricOption } from '../optionRenderers';\nimport { DndItemValue } from './types';\n\ninterface DatasourceControl extends ControlConfig {\n  datasource?: IDatasource;\n}\n\nexport interface DataSourcePanelColumn {\n  is_dttm?: boolean | null;\n  description?: string | null;\n  expression?: string | null;\n  is_certified?: number | null;\n  column_name?: string | null;\n  name?: string | null;\n  type?: string;\n}\nexport interface IDatasource {\n  metrics: Metric[];\n  columns: DataSourcePanelColumn[];\n  id: number;\n  type: DatasourceType;\n  database: {\n    id: number;\n  };\n  sql?: string | null;\n  datasource_name?: string | null;\n  name?: string | null;\n  schema?: string | null;\n}\n\nexport interface Props {\n  datasource: IDatasource;\n  controls: {\n    datasource: DatasourceControl;\n  };\n  actions: Partial<ExploreActions> & Pick<ExploreActions, 'setControlValue'>;\n  // we use this props control force update when this panel resize\n  shouldForceUpdate?: number;\n  formData?: QueryFormData;\n}\n\nconst enableExploreDnd = isFeatureEnabled(\n  FeatureFlag.ENABLE_EXPLORE_DRAG_AND_DROP,\n);\n\nconst Button = styled.button`\n  background: none;\n  border: none;\n  text-decoration: underline;\n  color: ${({ theme }) => theme.colors.primary.dark1};\n`;\n\nconst ButtonContainer = styled.div`\n  text-align: center;\n  padding-top: 2px;\n`;\n\nconst DatasourceContainer = styled.div`\n  ${({ theme }) => css`\n    background-color: ${theme.colors.grayscale.light5};\n    position: relative;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    max-height: 100%;\n    .ant-collapse {\n      height: auto;\n    }\n    .field-selections {\n      padding: 0 0 ${4 * theme.gridUnit}px;\n      overflow: auto;\n    }\n    .field-length {\n      margin-bottom: ${theme.gridUnit * 2}px;\n      font-size: ${theme.typography.sizes.s}px;\n      color: ${theme.colors.grayscale.light1};\n    }\n    .form-control.input-md {\n      width: calc(100% - ${theme.gridUnit * 8}px);\n      height: ${theme.gridUnit * 8}px;\n      margin: ${theme.gridUnit * 2}px auto;\n    }\n    .type-label {\n      font-size: ${theme.typography.sizes.s}px;\n      color: ${theme.colors.grayscale.base};\n    }\n    .Control {\n      padding-bottom: 0;\n    }\n  `};\n`;\n\nconst LabelWrapper = styled.div`\n  ${({ theme }) => css`\n    overflow: hidden;\n    text-overflow: ellipsis;\n    font-size: ${theme.typography.sizes.s}px;\n    background-color: ${theme.colors.grayscale.light4};\n    margin: ${theme.gridUnit * 2}px 0;\n    border-radius: 4px;\n    padding: 0 ${theme.gridUnit}px;\n\n    &:first-of-type {\n      margin-top: 0;\n    }\n    &:last-of-type {\n      margin-bottom: 0;\n    }\n\n    ${enableExploreDnd &&\n    css`\n      padding: 0;\n      cursor: pointer;\n      &:hover {\n        background-color: ${theme.colors.grayscale.light3};\n      }\n    `}\n\n    & > span {\n      white-space: nowrap;\n    }\n\n    .option-label {\n      display: inline;\n    }\n\n    .metric-option {\n      & > svg {\n        min-width: ${theme.gridUnit * 4}px;\n      }\n      & > .option-label {\n        overflow: hidden;\n        text-overflow: ellipsis;\n      }\n    }\n  `}\n`;\n\nconst SectionHeader = styled.span`\n  ${({ theme }) => `\n    font-size: ${theme.typography.sizes.m}px;\n    line-height: 1.3;\n  `}\n`;\n\nconst StyledInfoboxWrapper = styled.div`\n  ${({ theme }) => css`\n    margin: 0 ${theme.gridUnit * 2.5}px;\n\n    span {\n      text-decoration: underline;\n    }\n  `}\n`;\n\nconst LabelContainer = (props: {\n  children: React.ReactElement;\n  className: string;\n}) => {\n  const labelRef = useRef<HTMLDivElement>(null);\n  const extendedProps = {\n    labelRef,\n  };\n  return (\n    <LabelWrapper className={props.className}>\n      {React.cloneElement(props.children, extendedProps)}\n    </LabelWrapper>\n  );\n};\n\nexport default function DataSourcePanel({\n  datasource,\n  formData,\n  controls: { datasource: datasourceControl },\n  actions,\n  shouldForceUpdate,\n}: Props) {\n  const { columns: _columns, metrics } = datasource;\n  // display temporal column first\n  const columns = useMemo(\n    () =>\n      [...(isArray(_columns) ? _columns : [])].sort((col1, col2) => {\n        if (col1?.is_dttm && !col2?.is_dttm) {\n          return -1;\n        }\n        if (col2?.is_dttm && !col1?.is_dttm) {\n          return 1;\n        }\n        return 0;\n      }),\n    [_columns],\n  );\n\n  const [showSaveDatasetModal, setShowSaveDatasetModal] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n  const [lists, setList] = useState({\n    columns,\n    metrics,\n  });\n  const [showAllMetrics, setShowAllMetrics] = useState(false);\n  const [showAllColumns, setShowAllColumns] = useState(false);\n\n  const DEFAULT_MAX_COLUMNS_LENGTH = 50;\n  const DEFAULT_MAX_METRICS_LENGTH = 50;\n\n  const search = useMemo(\n    () =>\n      debounce((value: string) => {\n        if (value === '') {\n          setList({ columns, metrics });\n          return;\n        }\n        setList({\n          columns: matchSorter(columns, value, {\n            keys: [\n              {\n                key: 'verbose_name',\n                threshold: rankings.CONTAINS,\n              },\n              {\n                key: 'column_name',\n                threshold: rankings.CONTAINS,\n              },\n              {\n                key: item =>\n                  [item?.description ?? '', item?.expression ?? ''].map(\n                    x => x?.replace(/[_\\n\\s]+/g, ' ') || '',\n                  ),\n                threshold: rankings.CONTAINS,\n                maxRanking: rankings.CONTAINS,\n              },\n            ],\n            keepDiacritics: true,\n          }),\n          metrics: matchSorter(metrics, value, {\n            keys: [\n              {\n                key: 'verbose_name',\n                threshold: rankings.CONTAINS,\n              },\n              {\n                key: 'metric_name',\n                threshold: rankings.CONTAINS,\n              },\n              {\n                key: item =>\n                  [item?.description ?? '', item?.expression ?? ''].map(\n                    x => x?.replace(/[_\\n\\s]+/g, ' ') || '',\n                  ),\n                threshold: rankings.CONTAINS,\n                maxRanking: rankings.CONTAINS,\n              },\n            ],\n            keepDiacritics: true,\n            baseSort: (a, b) =>\n              Number(b?.item?.is_certified ?? 0) -\n                Number(a?.item?.is_certified ?? 0) ||\n              String(a?.rankedValue ?? '').localeCompare(b?.rankedValue ?? ''),\n          }),\n        });\n      }, FAST_DEBOUNCE),\n    [columns, metrics],\n  );\n\n  useEffect(() => {\n    setList({\n      columns,\n      metrics,\n    });\n    setInputValue('');\n  }, [columns, datasource, metrics]);\n\n  const sortCertifiedFirst = (slice: DataSourcePanelColumn[]) =>\n    slice.sort((a, b) => (b?.is_certified ?? 0) - (a?.is_certified ?? 0));\n\n  const metricSlice = useMemo(\n    () =>\n      showAllMetrics\n        ? lists?.metrics\n        : lists?.metrics?.slice?.(0, DEFAULT_MAX_METRICS_LENGTH),\n    [lists?.metrics, showAllMetrics],\n  );\n\n  const columnSlice = useMemo(\n    () =>\n      showAllColumns\n        ? sortCertifiedFirst(lists?.columns)\n        : sortCertifiedFirst(\n            lists?.columns?.slice?.(0, DEFAULT_MAX_COLUMNS_LENGTH),\n          ),\n    [lists.columns, showAllColumns],\n  );\n\n  const showInfoboxCheck = () => {\n    if (sessionStorage.getItem('showInfobox') === 'false') return false;\n    return true;\n  };\n\n  const saveableDatasets = {\n    query: DatasourceType.Query,\n    saved_query: DatasourceType.SavedQuery,\n  };\n\n  const datasourceIsSaveable =\n    datasource.type && saveableDatasets[datasource.type];\n\n  const mainBody = useMemo(\n    () => (\n      <>\n        <Input\n          allowClear\n          onChange={evt => {\n            setInputValue(evt.target.value);\n            search(evt.target.value);\n          }}\n          value={inputValue}\n          className=\"form-control input-md\"\n          placeholder={t('Search Metrics & Columns')}\n        />\n        <div className=\"field-selections\">\n          {datasourceIsSaveable && showInfoboxCheck() && (\n            <StyledInfoboxWrapper>\n              <Alert\n                closable\n                onClose={() => sessionStorage.setItem('showInfobox', 'false')}\n                type=\"info\"\n                message=\"\"\n                description={\n                  <>\n                    <span\n                      role=\"button\"\n                      tabIndex={0}\n                      onClick={() => setShowSaveDatasetModal(true)}\n                      className=\"add-dataset-alert-description\"\n                    >\n                      {t('Create a dataset')}\n                    </span>\n                    {t(' to edit or add columns and metrics.')}\n                  </>\n                }\n              />\n            </StyledInfoboxWrapper>\n          )}\n          <Collapse\n            defaultActiveKey={['metrics', 'column']}\n            expandIconPosition=\"right\"\n            ghost\n          >\n            {metrics?.length && (\n              <Collapse.Panel\n                header={<SectionHeader>{t('Metrics')}</SectionHeader>}\n                key=\"metrics\"\n              >\n                <div className=\"field-length\">\n                  {t(\n                    `Showing %s of %s`,\n                    metricSlice?.length,\n                    lists?.metrics.length,\n                  )}\n                </div>\n                {metricSlice?.map?.((m: Metric) => (\n                  <LabelContainer\n                    key={m.metric_name + String(shouldForceUpdate)}\n                    className=\"column\"\n                  >\n                    {enableExploreDnd ? (\n                      <DatasourcePanelDragOption\n                        value={m}\n                        type={DndItemType.Metric}\n                      />\n                    ) : (\n                      <StyledMetricOption metric={m} showType />\n                    )}\n                  </LabelContainer>\n                ))}\n                {lists?.metrics?.length > DEFAULT_MAX_METRICS_LENGTH ? (\n                  <ButtonContainer>\n                    <Button onClick={() => setShowAllMetrics(!showAllMetrics)}>\n                      {showAllMetrics ? t('Show less...') : t('Show all...')}\n                    </Button>\n                  </ButtonContainer>\n                ) : (\n                  <></>\n                )}\n              </Collapse.Panel>\n            )}\n            <Collapse.Panel\n              header={<SectionHeader>{t('Columns')}</SectionHeader>}\n              key=\"column\"\n            >\n              <div className=\"field-length\">\n                {t(\n                  `Showing %s of %s`,\n                  columnSlice.length,\n                  lists.columns.length,\n                )}\n              </div>\n              {columnSlice.map(col => (\n                <LabelContainer\n                  key={col.column_name + String(shouldForceUpdate)}\n                  className=\"column\"\n                >\n                  {enableExploreDnd ? (\n                    <DatasourcePanelDragOption\n                      value={col as DndItemValue}\n                      type={DndItemType.Column}\n                    />\n                  ) : (\n                    <StyledColumnOption column={col as ColumnMeta} showType />\n                  )}\n                </LabelContainer>\n              ))}\n              {lists.columns.length > DEFAULT_MAX_COLUMNS_LENGTH ? (\n                <ButtonContainer>\n                  <Button onClick={() => setShowAllColumns(!showAllColumns)}>\n                    {showAllColumns ? t('Show Less...') : t('Show all...')}\n                  </Button>\n                </ButtonContainer>\n              ) : (\n                <></>\n              )}\n            </Collapse.Panel>\n          </Collapse>\n        </div>\n      </>\n    ),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      columnSlice,\n      inputValue,\n      lists.columns.length,\n      lists?.metrics?.length,\n      metricSlice,\n      search,\n      showAllColumns,\n      showAllMetrics,\n      datasourceIsSaveable,\n      shouldForceUpdate,\n    ],\n  );\n\n  return (\n    <DatasourceContainer>\n      {datasourceIsSaveable && showSaveDatasetModal && (\n        <SaveDatasetModal\n          visible={showSaveDatasetModal}\n          onHide={() => setShowSaveDatasetModal(false)}\n          buttonTextOnSave={t('Save')}\n          buttonTextOnOverwrite={t('Overwrite')}\n          datasource={getDatasourceAsSaveableDataset(datasource)}\n          openWindow={false}\n          formData={formData}\n        />\n      )}\n      <Control {...datasourceControl} name=\"datasource\" actions={actions} />\n      {datasource.id != null && mainBody}\n    </DatasourceContainer>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}