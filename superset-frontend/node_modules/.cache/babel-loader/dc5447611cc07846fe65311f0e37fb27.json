{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable camelcase */\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { isAdhocColumn, t, styled, css, DatasourceType } from '@superset-ui/core';\nimport { isSavedExpression } from '@superset-ui/chart-controls';\nimport Tabs from 'src/components/Tabs';\nimport Button from 'src/components/Button';\nimport { Select } from 'src/components';\nimport { Form, FormItem } from 'src/components/Form';\nimport { SQLEditor } from 'src/components/AsyncAceEditor';\nimport { EmptyStateSmall } from 'src/components/EmptyState';\nimport { StyledColumnOption } from 'src/explore/components/optionRenderers';\nimport { POPOVER_INITIAL_HEIGHT, POPOVER_INITIAL_WIDTH } from 'src/explore/constants';\nimport useResizeButton from './useResizeButton';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst StyledSelect = styled(Select)`\n  .metric-option {\n    & > svg {\n      min-width: ${(_ref) => {let { theme } = _ref;return `${theme.gridUnit * 4}px`;}};\n    }\n    & > .option-label {\n      overflow: hidden;\n      text-overflow: ellipsis;\n    }\n  }\n`;\nconst getInitialColumnValues = (editedColumn) => {\n  if (!editedColumn) {\n    return [undefined, undefined, undefined];\n  }\n  if (isAdhocColumn(editedColumn)) {\n    return [editedColumn, undefined, undefined];\n  }\n  if (isSavedExpression(editedColumn)) {\n    return [undefined, editedColumn, undefined];\n  }\n  return [undefined, undefined, editedColumn];\n};\nconst ColumnSelectPopover = (_ref2) => {let { columns, editedColumn, onChange, onClose, setDatasetModal, setLabel, getCurrentTab, label, isTemporal } = _ref2;\n  const datasourceType = useSelector((state) => state.explore.datasource.type);\n  const [initialLabel] = useState(label);\n  const [initialAdhocColumn, initialCalculatedColumn, initialSimpleColumn] = getInitialColumnValues(editedColumn);\n  const [adhocColumn, setAdhocColumn] = useState(initialAdhocColumn);\n  const [selectedCalculatedColumn, setSelectedCalculatedColumn] = useState(initialCalculatedColumn);\n  const [selectedSimpleColumn, setSelectedSimpleColumn] = useState(initialSimpleColumn);\n  const [resizeButton, width, height] = useResizeButton(POPOVER_INITIAL_WIDTH, POPOVER_INITIAL_HEIGHT);\n  const sqlEditorRef = useRef(null);\n  const [calculatedColumns, simpleColumns] = useMemo(() => columns == null ? void 0 : columns.reduce((acc, column) => {\n    if (column.expression) {\n      acc[0].push(column);\n    } else\n    {\n      acc[1].push(column);\n    }\n    return acc;\n  }, [[], []]), [columns]);\n  const onSqlExpressionChange = useCallback((sqlExpression) => {\n    setAdhocColumn({ label, sqlExpression, expressionType: 'SQL' });\n    setSelectedSimpleColumn(undefined);\n    setSelectedCalculatedColumn(undefined);\n  }, [label]);\n  const onCalculatedColumnChange = useCallback((selectedColumnName) => {\n    const selectedColumn = calculatedColumns.find((col) => col.column_name === selectedColumnName);\n    setSelectedCalculatedColumn(selectedColumn);\n    setSelectedSimpleColumn(undefined);\n    setAdhocColumn(undefined);\n    setLabel((selectedColumn == null ? void 0 : selectedColumn.verbose_name) || (selectedColumn == null ? void 0 : selectedColumn.column_name) || '');\n  }, [calculatedColumns, setLabel]);\n  const onSimpleColumnChange = useCallback((selectedColumnName) => {\n    const selectedColumn = simpleColumns.find((col) => col.column_name === selectedColumnName);\n    setSelectedCalculatedColumn(undefined);\n    setSelectedSimpleColumn(selectedColumn);\n    setAdhocColumn(undefined);\n    setLabel((selectedColumn == null ? void 0 : selectedColumn.verbose_name) || (selectedColumn == null ? void 0 : selectedColumn.column_name) || '');\n  }, [setLabel, simpleColumns]);\n  const defaultActiveTabKey = initialAdhocColumn ?\n  'sqlExpression' :\n  initialSimpleColumn || calculatedColumns.length === 0 ?\n  'simple' :\n  'saved';\n  useEffect(() => {\n    getCurrentTab(defaultActiveTabKey);\n  }, [defaultActiveTabKey, getCurrentTab]);\n  const onSave = useCallback(() => {\n    if (adhocColumn && adhocColumn.label !== label) {\n      adhocColumn.label = label;\n    }\n    const selectedColumn = adhocColumn || selectedCalculatedColumn || selectedSimpleColumn;\n    if (!selectedColumn) {\n      return;\n    }\n    onChange(selectedColumn);\n    onClose();\n  }, [\n  adhocColumn,\n  label,\n  onChange,\n  onClose,\n  selectedCalculatedColumn,\n  selectedSimpleColumn]);\n\n  const onResetStateAndClose = useCallback(() => {\n    setSelectedCalculatedColumn(initialCalculatedColumn);\n    setSelectedSimpleColumn(initialSimpleColumn);\n    setAdhocColumn(initialAdhocColumn);\n    onClose();\n  }, [\n  initialAdhocColumn,\n  initialCalculatedColumn,\n  initialSimpleColumn,\n  onClose]);\n\n  const onTabChange = useCallback((tab) => {var _sqlEditorRef$current;\n    getCurrentTab(tab);\n    // @ts-ignore\n    (_sqlEditorRef$current = sqlEditorRef.current) == null ? void 0 : _sqlEditorRef$current.editor.focus();\n  }, [getCurrentTab]);\n  const onSqlEditorFocus = useCallback(() => {var _sqlEditorRef$current2;\n    // @ts-ignore\n    (_sqlEditorRef$current2 = sqlEditorRef.current) == null ? void 0 : _sqlEditorRef$current2.editor.resize();\n  }, []);\n  const setDatasetAndClose = () => {\n    if (setDatasetModal) {\n      setDatasetModal(true);\n    }\n    onClose();\n  };\n  const stateIsValid = adhocColumn || selectedCalculatedColumn || selectedSimpleColumn;\n  const hasUnsavedChanges = initialLabel !== label ||\n  (selectedCalculatedColumn == null ? void 0 : selectedCalculatedColumn.column_name) !== (\n  initialCalculatedColumn == null ? void 0 : initialCalculatedColumn.column_name) ||\n  (selectedSimpleColumn == null ? void 0 : selectedSimpleColumn.column_name) !== (initialSimpleColumn == null ? void 0 : initialSimpleColumn.column_name) ||\n  (adhocColumn == null ? void 0 : adhocColumn.sqlExpression) !== (initialAdhocColumn == null ? void 0 : initialAdhocColumn.sqlExpression);\n  const savedExpressionsLabel = t('Saved expressions');\n  const simpleColumnsLabel = t('Column');\n  return ___EmotionJSX(Form, { layout: \"vertical\", id: \"metrics-edit-popover\" },\n  ___EmotionJSX(Tabs, { id: \"adhoc-metric-edit-tabs\", defaultActiveKey: defaultActiveTabKey, onChange: onTabChange, className: \"adhoc-metric-edit-tabs\", allowOverflow: true, css: css`\n          height: ${height}px;\n          width: ${width}px;\n        ` },\n  ___EmotionJSX(Tabs.TabPane, { key: \"saved\", tab: t('Saved') },\n  calculatedColumns.length > 0 ? ___EmotionJSX(FormItem, { label: savedExpressionsLabel },\n  ___EmotionJSX(StyledSelect, { ariaLabel: savedExpressionsLabel, value: selectedCalculatedColumn == null ? void 0 : selectedCalculatedColumn.column_name, onChange: onCalculatedColumnChange, allowClear: true, autoFocus: !selectedCalculatedColumn, placeholder: t('%s column(s)', calculatedColumns.length), options: calculatedColumns.map((calculatedColumn) => ({\n      value: calculatedColumn.column_name,\n      label: calculatedColumn.verbose_name ||\n      calculatedColumn.column_name,\n      customLabel: ___EmotionJSX(StyledColumnOption, { column: calculatedColumn, showType: true }),\n      key: calculatedColumn.column_name })) })) :\n\n  datasourceType === DatasourceType.Table ? ___EmotionJSX(EmptyStateSmall, { image: \"empty.svg\", title: isTemporal ?\n    t('No temporal columns found') :\n    t('No saved expressions found'), description: isTemporal ?\n    t('Add calculated temporal columns to dataset in \"Edit datasource\" modal') :\n    t('Add calculated columns to dataset in \"Edit datasource\" modal') }) : ___EmotionJSX(EmptyStateSmall, { image: \"empty.svg\", title: isTemporal ?\n    t('No temporal columns found') :\n    t('No saved expressions found'), description: isTemporal ? ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, onClick: setDatasetAndClose },\n    t('Create a dataset')),\n    ' ',\n    t(' to mark a column as a time column')) :\n    ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, onClick: setDatasetAndClose },\n    t('Create a dataset')),\n    ' ',\n    t(' to add calculated columns')) })),\n\n\n  ___EmotionJSX(Tabs.TabPane, { key: \"simple\", tab: t('Simple') },\n  isTemporal && simpleColumns.length === 0 ? ___EmotionJSX(EmptyStateSmall, { image: \"empty.svg\", title: t('No temporal columns found'), description: datasourceType === DatasourceType.Table ? t('Mark a column as temporal in \"Edit datasource\" modal') : ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, onClick: setDatasetAndClose },\n    t('Create a dataset')),\n    ' ',\n    t(' to mark a column as a time column')) }) :\n  ___EmotionJSX(FormItem, { label: simpleColumnsLabel },\n  ___EmotionJSX(Select, { ariaLabel: simpleColumnsLabel, value: selectedSimpleColumn == null ? void 0 : selectedSimpleColumn.column_name, onChange: onSimpleColumnChange, allowClear: true, autoFocus: !selectedSimpleColumn, placeholder: t('%s column(s)', simpleColumns.length), options: simpleColumns.map((simpleColumn) => ({\n      value: simpleColumn.column_name,\n      label: simpleColumn.verbose_name || simpleColumn.column_name,\n      customLabel: ___EmotionJSX(StyledColumnOption, { column: simpleColumn, showType: true }),\n      key: simpleColumn.column_name })) }))),\n\n\n\n\n  ___EmotionJSX(Tabs.TabPane, { key: \"sqlExpression\", tab: t('Custom SQL') },\n  ___EmotionJSX(SQLEditor, { value: (adhocColumn == null ? void 0 : adhocColumn.sqlExpression) || (\n    selectedSimpleColumn == null ? void 0 : selectedSimpleColumn.column_name) || (\n    selectedCalculatedColumn == null ? void 0 : selectedCalculatedColumn.expression), onFocus: onSqlEditorFocus, showLoadingForImport: true, onChange: onSqlExpressionChange, width: \"100%\", height: `${height - 80}px`, showGutter: false, editorProps: { $blockScrolling: true }, enableLiveAutocompletion: true, className: \"filter-sql-editor\", wrapEnabled: true, ref: sqlEditorRef }))),\n\n\n  ___EmotionJSX(\"div\", null,\n  ___EmotionJSX(Button, { buttonSize: \"small\", onClick: onResetStateAndClose, cta: true },\n  t('Close')),\n\n  ___EmotionJSX(Button, { disabled: !stateIsValid || !hasUnsavedChanges, buttonStyle: \"primary\", buttonSize: \"small\", onClick: onSave, cta: true },\n  t('Save')),\n\n  resizeButton));\n\n\n};\nexport default ColumnSelectPopover;","map":{"version":3,"mappings":"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","names":["React","useCallback","useEffect","useMemo","useRef","useState","useSelector","isAdhocColumn","t","styled","css","DatasourceType","isSavedExpression","Tabs","Button","Select","Form","FormItem","SQLEditor","EmptyStateSmall","StyledColumnOption","POPOVER_INITIAL_HEIGHT","POPOVER_INITIAL_WIDTH","useResizeButton","StyledSelect","theme","gridUnit","getInitialColumnValues","editedColumn","undefined","ColumnSelectPopover","columns","onChange","onClose","setDatasetModal","setLabel","getCurrentTab","label","isTemporal","datasourceType","state","explore","datasource","type","initialLabel","initialAdhocColumn","initialCalculatedColumn","initialSimpleColumn","adhocColumn","setAdhocColumn","selectedCalculatedColumn","setSelectedCalculatedColumn","selectedSimpleColumn","setSelectedSimpleColumn","resizeButton","width","height","sqlEditorRef","calculatedColumns","simpleColumns","reduce","acc","column","expression","push","onSqlExpressionChange","sqlExpression","expressionType","onCalculatedColumnChange","selectedColumn","find","col","column_name","selectedColumnName","verbose_name","onSimpleColumnChange","defaultActiveTabKey","length","onSave","onResetStateAndClose","onTabChange","tab","current","editor","focus","onSqlEditorFocus","resize","setDatasetAndClose","stateIsValid","hasUnsavedChanges","savedExpressionsLabel","simpleColumnsLabel","map","value","calculatedColumn","customLabel","key","Table","simpleColumn","$blockScrolling"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/ColumnSelectPopover.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable camelcase */\nimport React, {\n  Dispatch,\n  SetStateAction,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n  AdhocColumn,\n  isAdhocColumn,\n  t,\n  styled,\n  css,\n  DatasourceType,\n} from '@superset-ui/core';\nimport { ColumnMeta, isSavedExpression } from '@superset-ui/chart-controls';\nimport Tabs from 'src/components/Tabs';\nimport Button from 'src/components/Button';\nimport { Select } from 'src/components';\n\nimport { Form, FormItem } from 'src/components/Form';\nimport { SQLEditor } from 'src/components/AsyncAceEditor';\nimport { EmptyStateSmall } from 'src/components/EmptyState';\nimport { StyledColumnOption } from 'src/explore/components/optionRenderers';\nimport {\n  POPOVER_INITIAL_HEIGHT,\n  POPOVER_INITIAL_WIDTH,\n} from 'src/explore/constants';\nimport { ExplorePageState } from 'src/explore/types';\nimport useResizeButton from './useResizeButton';\n\nconst StyledSelect = styled(Select)`\n  .metric-option {\n    & > svg {\n      min-width: ${({ theme }) => `${theme.gridUnit * 4}px`};\n    }\n    & > .option-label {\n      overflow: hidden;\n      text-overflow: ellipsis;\n    }\n  }\n`;\n\ninterface ColumnSelectPopoverProps {\n  columns: ColumnMeta[];\n  editedColumn?: ColumnMeta | AdhocColumn;\n  onChange: (column: ColumnMeta | AdhocColumn) => void;\n  onClose: () => void;\n  setLabel: (title: string) => void;\n  getCurrentTab: (tab: string) => void;\n  label: string;\n  isTemporal?: boolean;\n  setDatasetModal?: Dispatch<SetStateAction<boolean>>;\n}\n\nconst getInitialColumnValues = (\n  editedColumn?: ColumnMeta | AdhocColumn,\n): [AdhocColumn?, ColumnMeta?, ColumnMeta?] => {\n  if (!editedColumn) {\n    return [undefined, undefined, undefined];\n  }\n  if (isAdhocColumn(editedColumn)) {\n    return [editedColumn, undefined, undefined];\n  }\n  if (isSavedExpression(editedColumn)) {\n    return [undefined, editedColumn, undefined];\n  }\n  return [undefined, undefined, editedColumn];\n};\n\nconst ColumnSelectPopover = ({\n  columns,\n  editedColumn,\n  onChange,\n  onClose,\n  setDatasetModal,\n  setLabel,\n  getCurrentTab,\n  label,\n  isTemporal,\n}: ColumnSelectPopoverProps) => {\n  const datasourceType = useSelector<ExplorePageState, string | undefined>(\n    state => state.explore.datasource.type,\n  );\n  const [initialLabel] = useState(label);\n  const [initialAdhocColumn, initialCalculatedColumn, initialSimpleColumn] =\n    getInitialColumnValues(editedColumn);\n\n  const [adhocColumn, setAdhocColumn] = useState<AdhocColumn | undefined>(\n    initialAdhocColumn,\n  );\n  const [selectedCalculatedColumn, setSelectedCalculatedColumn] = useState<\n    ColumnMeta | undefined\n  >(initialCalculatedColumn);\n  const [selectedSimpleColumn, setSelectedSimpleColumn] = useState<\n    ColumnMeta | undefined\n  >(initialSimpleColumn);\n\n  const [resizeButton, width, height] = useResizeButton(\n    POPOVER_INITIAL_WIDTH,\n    POPOVER_INITIAL_HEIGHT,\n  );\n\n  const sqlEditorRef = useRef(null);\n\n  const [calculatedColumns, simpleColumns] = useMemo(\n    () =>\n      columns?.reduce(\n        (acc: [ColumnMeta[], ColumnMeta[]], column: ColumnMeta) => {\n          if (column.expression) {\n            acc[0].push(column);\n          } else {\n            acc[1].push(column);\n          }\n          return acc;\n        },\n        [[], []],\n      ),\n    [columns],\n  );\n\n  const onSqlExpressionChange = useCallback(\n    sqlExpression => {\n      setAdhocColumn({ label, sqlExpression, expressionType: 'SQL' });\n      setSelectedSimpleColumn(undefined);\n      setSelectedCalculatedColumn(undefined);\n    },\n    [label],\n  );\n\n  const onCalculatedColumnChange = useCallback(\n    selectedColumnName => {\n      const selectedColumn = calculatedColumns.find(\n        col => col.column_name === selectedColumnName,\n      );\n      setSelectedCalculatedColumn(selectedColumn);\n      setSelectedSimpleColumn(undefined);\n      setAdhocColumn(undefined);\n      setLabel(\n        selectedColumn?.verbose_name || selectedColumn?.column_name || '',\n      );\n    },\n    [calculatedColumns, setLabel],\n  );\n\n  const onSimpleColumnChange = useCallback(\n    selectedColumnName => {\n      const selectedColumn = simpleColumns.find(\n        col => col.column_name === selectedColumnName,\n      );\n      setSelectedCalculatedColumn(undefined);\n      setSelectedSimpleColumn(selectedColumn);\n      setAdhocColumn(undefined);\n      setLabel(\n        selectedColumn?.verbose_name || selectedColumn?.column_name || '',\n      );\n    },\n    [setLabel, simpleColumns],\n  );\n\n  const defaultActiveTabKey = initialAdhocColumn\n    ? 'sqlExpression'\n    : initialSimpleColumn || calculatedColumns.length === 0\n    ? 'simple'\n    : 'saved';\n\n  useEffect(() => {\n    getCurrentTab(defaultActiveTabKey);\n  }, [defaultActiveTabKey, getCurrentTab]);\n\n  const onSave = useCallback(() => {\n    if (adhocColumn && adhocColumn.label !== label) {\n      adhocColumn.label = label;\n    }\n    const selectedColumn =\n      adhocColumn || selectedCalculatedColumn || selectedSimpleColumn;\n    if (!selectedColumn) {\n      return;\n    }\n    onChange(selectedColumn);\n    onClose();\n  }, [\n    adhocColumn,\n    label,\n    onChange,\n    onClose,\n    selectedCalculatedColumn,\n    selectedSimpleColumn,\n  ]);\n\n  const onResetStateAndClose = useCallback(() => {\n    setSelectedCalculatedColumn(initialCalculatedColumn);\n    setSelectedSimpleColumn(initialSimpleColumn);\n    setAdhocColumn(initialAdhocColumn);\n    onClose();\n  }, [\n    initialAdhocColumn,\n    initialCalculatedColumn,\n    initialSimpleColumn,\n    onClose,\n  ]);\n\n  const onTabChange = useCallback(\n    tab => {\n      getCurrentTab(tab);\n      // @ts-ignore\n      sqlEditorRef.current?.editor.focus();\n    },\n    [getCurrentTab],\n  );\n\n  const onSqlEditorFocus = useCallback(() => {\n    // @ts-ignore\n    sqlEditorRef.current?.editor.resize();\n  }, []);\n\n  const setDatasetAndClose = () => {\n    if (setDatasetModal) {\n      setDatasetModal(true);\n    }\n    onClose();\n  };\n\n  const stateIsValid =\n    adhocColumn || selectedCalculatedColumn || selectedSimpleColumn;\n  const hasUnsavedChanges =\n    initialLabel !== label ||\n    selectedCalculatedColumn?.column_name !==\n      initialCalculatedColumn?.column_name ||\n    selectedSimpleColumn?.column_name !== initialSimpleColumn?.column_name ||\n    adhocColumn?.sqlExpression !== initialAdhocColumn?.sqlExpression;\n\n  const savedExpressionsLabel = t('Saved expressions');\n  const simpleColumnsLabel = t('Column');\n\n  return (\n    <Form layout=\"vertical\" id=\"metrics-edit-popover\">\n      <Tabs\n        id=\"adhoc-metric-edit-tabs\"\n        defaultActiveKey={defaultActiveTabKey}\n        onChange={onTabChange}\n        className=\"adhoc-metric-edit-tabs\"\n        allowOverflow\n        css={css`\n          height: ${height}px;\n          width: ${width}px;\n        `}\n      >\n        <Tabs.TabPane key=\"saved\" tab={t('Saved')}>\n          {calculatedColumns.length > 0 ? (\n            <FormItem label={savedExpressionsLabel}>\n              <StyledSelect\n                ariaLabel={savedExpressionsLabel}\n                value={selectedCalculatedColumn?.column_name}\n                onChange={onCalculatedColumnChange}\n                allowClear\n                autoFocus={!selectedCalculatedColumn}\n                placeholder={t('%s column(s)', calculatedColumns.length)}\n                options={calculatedColumns.map(calculatedColumn => ({\n                  value: calculatedColumn.column_name,\n                  label:\n                    calculatedColumn.verbose_name ||\n                    calculatedColumn.column_name,\n                  customLabel: (\n                    <StyledColumnOption column={calculatedColumn} showType />\n                  ),\n                  key: calculatedColumn.column_name,\n                }))}\n              />\n            </FormItem>\n          ) : datasourceType === DatasourceType.Table ? (\n            <EmptyStateSmall\n              image=\"empty.svg\"\n              title={\n                isTemporal\n                  ? t('No temporal columns found')\n                  : t('No saved expressions found')\n              }\n              description={\n                isTemporal\n                  ? t(\n                      'Add calculated temporal columns to dataset in \"Edit datasource\" modal',\n                    )\n                  : t(\n                      'Add calculated columns to dataset in \"Edit datasource\" modal',\n                    )\n              }\n            />\n          ) : (\n            <EmptyStateSmall\n              image=\"empty.svg\"\n              title={\n                isTemporal\n                  ? t('No temporal columns found')\n                  : t('No saved expressions found')\n              }\n              description={\n                isTemporal ? (\n                  <>\n                    <span\n                      role=\"button\"\n                      tabIndex={0}\n                      onClick={setDatasetAndClose}\n                    >\n                      {t('Create a dataset')}\n                    </span>{' '}\n                    {t(' to mark a column as a time column')}\n                  </>\n                ) : (\n                  <>\n                    <span\n                      role=\"button\"\n                      tabIndex={0}\n                      onClick={setDatasetAndClose}\n                    >\n                      {t('Create a dataset')}\n                    </span>{' '}\n                    {t(' to add calculated columns')}\n                  </>\n                )\n              }\n            />\n          )}\n        </Tabs.TabPane>\n        <Tabs.TabPane key=\"simple\" tab={t('Simple')}>\n          {isTemporal && simpleColumns.length === 0 ? (\n            <EmptyStateSmall\n              image=\"empty.svg\"\n              title={t('No temporal columns found')}\n              description={\n                datasourceType === DatasourceType.Table ? (\n                  t('Mark a column as temporal in \"Edit datasource\" modal')\n                ) : (\n                  <>\n                    <span\n                      role=\"button\"\n                      tabIndex={0}\n                      onClick={setDatasetAndClose}\n                    >\n                      {t('Create a dataset')}\n                    </span>{' '}\n                    {t(' to mark a column as a time column')}\n                  </>\n                )\n              }\n            />\n          ) : (\n            <FormItem label={simpleColumnsLabel}>\n              <Select\n                ariaLabel={simpleColumnsLabel}\n                value={selectedSimpleColumn?.column_name}\n                onChange={onSimpleColumnChange}\n                allowClear\n                autoFocus={!selectedSimpleColumn}\n                placeholder={t('%s column(s)', simpleColumns.length)}\n                options={simpleColumns.map(simpleColumn => ({\n                  value: simpleColumn.column_name,\n                  label: simpleColumn.verbose_name || simpleColumn.column_name,\n                  customLabel: (\n                    <StyledColumnOption column={simpleColumn} showType />\n                  ),\n                  key: simpleColumn.column_name,\n                }))}\n              />\n            </FormItem>\n          )}\n        </Tabs.TabPane>\n\n        <Tabs.TabPane key=\"sqlExpression\" tab={t('Custom SQL')}>\n          <SQLEditor\n            value={\n              adhocColumn?.sqlExpression ||\n              selectedSimpleColumn?.column_name ||\n              selectedCalculatedColumn?.expression\n            }\n            onFocus={onSqlEditorFocus}\n            showLoadingForImport\n            onChange={onSqlExpressionChange}\n            width=\"100%\"\n            height={`${height - 80}px`}\n            showGutter={false}\n            editorProps={{ $blockScrolling: true }}\n            enableLiveAutocompletion\n            className=\"filter-sql-editor\"\n            wrapEnabled\n            ref={sqlEditorRef}\n          />\n        </Tabs.TabPane>\n      </Tabs>\n      <div>\n        <Button buttonSize=\"small\" onClick={onResetStateAndClose} cta>\n          {t('Close')}\n        </Button>\n        <Button\n          disabled={!stateIsValid || !hasUnsavedChanges}\n          buttonStyle=\"primary\"\n          buttonSize=\"small\"\n          onClick={onSave}\n          data-test=\"ColumnEdit#save\"\n          cta\n        >\n          {t('Save')}\n        </Button>\n        {resizeButton}\n      </div>\n    </Form>\n  );\n};\n\nexport default ColumnSelectPopover;\n"]},"metadata":{},"sourceType":"module"}