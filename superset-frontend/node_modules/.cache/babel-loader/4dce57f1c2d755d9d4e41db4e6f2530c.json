{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ensureIsArray, getColumnLabel, t, tn } from '@superset-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport { Select } from 'src/components';\nimport { FilterPluginStyle, StyledFormItem, StatusMessage } from '../common';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport default function PluginFilterGroupBy(props) {var _groupbys$;\n  const { data, formData, height, width, setDataMask, setHoveredFilter, unsetHoveredFilter, setFocusedFilter, unsetFocusedFilter, setFilterActive, filterState, inputRef } = props;\n  const { defaultValue, multiSelect } = formData;\n  const [value, setValue] = useState(defaultValue != null ? defaultValue : []);\n  const handleChange = (value) => {\n    const resultValue = ensureIsArray(value);\n    setValue(resultValue);\n    const extraFormData = {};\n    if (resultValue.length) {\n      extraFormData.interactive_groupby = resultValue;\n    }\n    setDataMask({\n      filterState: { value: resultValue.length ? resultValue : null },\n      extraFormData });\n\n  };\n  useEffect(() => {\n    handleChange(filterState.value);\n  }, [JSON.stringify(filterState.value), multiSelect]);\n  useEffect(() => {\n    handleChange(defaultValue != null ? defaultValue : null);\n    // I think after Config Modal update some filter it re-creates default value for all other filters\n    // so we can process it like this `JSON.stringify` or start to use `Immer`\n  }, [JSON.stringify(defaultValue), multiSelect]);\n  const groupbys = ensureIsArray(formData.groupby).map(getColumnLabel);\n  const groupby = (_groupbys$ = groupbys[0]) != null && _groupbys$.length ? groupbys[0] : null;\n  const withData = groupby ?\n  data.filter((row) => _includesInstanceProperty(groupby).call(groupby, row.column_name)) :\n  data;\n  const columns = data ? withData : [];\n  const placeholderText = columns.length === 0 ?\n  t('No columns') :\n  tn('%s option', '%s options', columns.length, columns.length);\n  const formItemData = {};\n  if (filterState.validateMessage) {\n    formItemData.extra = ___EmotionJSX(StatusMessage, { status: filterState.validateStatus },\n    filterState.validateMessage);\n\n  }\n  const options = columns.map((row) => {\n    const { column_name: columnName, verbose_name: verboseName } = row;\n    return {\n      label: verboseName != null ? verboseName : columnName,\n      value: columnName };\n\n  });\n  return ___EmotionJSX(FilterPluginStyle, { height: height, width: width },\n  ___EmotionJSX(StyledFormItem, _extends({ validateStatus: filterState.validateStatus }, formItemData),\n  ___EmotionJSX(Select, { allowClear: true, value: value, placeholder: placeholderText, mode: multiSelect ? 'multiple' : undefined\n    // @ts-ignore\n    , onChange: handleChange, onBlur: unsetFocusedFilter, onFocus: setFocusedFilter, onMouseEnter: setHoveredFilter, onMouseLeave: unsetHoveredFilter, ref: inputRef, options: options, onDropdownVisibleChange: setFilterActive })));\n\n\n}__signature__(PluginFilterGroupBy, \"useState{[value, setValue](defaultValue ?? [])}\\nuseEffect{}\\nuseEffect{}\");;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(PluginFilterGroupBy, \"PluginFilterGroupBy\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/filters/components/GroupBy/GroupByFilterPlugin.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"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","names":["ensureIsArray","getColumnLabel","t","tn","React","useEffect","useState","Select","FilterPluginStyle","StyledFormItem","StatusMessage","PluginFilterGroupBy","props","data","formData","height","width","setDataMask","setHoveredFilter","unsetHoveredFilter","setFocusedFilter","unsetFocusedFilter","setFilterActive","filterState","inputRef","defaultValue","multiSelect","value","setValue","handleChange","resultValue","extraFormData","length","interactive_groupby","JSON","stringify","groupbys","groupby","map","withData","filter","row","column_name","columns","placeholderText","formItemData","validateMessage","extra","validateStatus","options","columnName","verbose_name","verboseName","label","undefined"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/filters/components/GroupBy/GroupByFilterPlugin.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  ensureIsArray,\n  ExtraFormData,\n  getColumnLabel,\n  t,\n  tn,\n} from '@superset-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport { FormItemProps } from 'antd/lib/form';\nimport { Select } from 'src/components';\nimport { FilterPluginStyle, StyledFormItem, StatusMessage } from '../common';\nimport { PluginFilterGroupByProps } from './types';\n\nexport default function PluginFilterGroupBy(props: PluginFilterGroupByProps) {\n  const {\n    data,\n    formData,\n    height,\n    width,\n    setDataMask,\n    setHoveredFilter,\n    unsetHoveredFilter,\n    setFocusedFilter,\n    unsetFocusedFilter,\n    setFilterActive,\n    filterState,\n    inputRef,\n  } = props;\n  const { defaultValue, multiSelect } = formData;\n\n  const [value, setValue] = useState<string[]>(defaultValue ?? []);\n\n  const handleChange = (value?: string[] | string | null) => {\n    const resultValue: string[] = ensureIsArray<string>(value);\n    setValue(resultValue);\n    const extraFormData: ExtraFormData = {};\n    if (resultValue.length) {\n      extraFormData.interactive_groupby = resultValue;\n    }\n\n    setDataMask({\n      filterState: { value: resultValue.length ? resultValue : null },\n      extraFormData,\n    });\n  };\n\n  useEffect(() => {\n    handleChange(filterState.value);\n  }, [JSON.stringify(filterState.value), multiSelect]);\n\n  useEffect(() => {\n    handleChange(defaultValue ?? null);\n    // I think after Config Modal update some filter it re-creates default value for all other filters\n    // so we can process it like this `JSON.stringify` or start to use `Immer`\n  }, [JSON.stringify(defaultValue), multiSelect]);\n\n  const groupbys = ensureIsArray(formData.groupby).map(getColumnLabel);\n  const groupby = groupbys[0]?.length ? groupbys[0] : null;\n\n  const withData = groupby\n    ? data.filter(row => groupby.includes(row.column_name as string))\n    : data;\n\n  const columns = data ? withData : [];\n\n  const placeholderText =\n    columns.length === 0\n      ? t('No columns')\n      : tn('%s option', '%s options', columns.length, columns.length);\n\n  const formItemData: FormItemProps = {};\n  if (filterState.validateMessage) {\n    formItemData.extra = (\n      <StatusMessage status={filterState.validateStatus}>\n        {filterState.validateMessage}\n      </StatusMessage>\n    );\n  }\n  const options = columns.map(\n    (row: { column_name: string; verbose_name: string | null }) => {\n      const { column_name: columnName, verbose_name: verboseName } = row;\n      return {\n        label: verboseName ?? columnName,\n        value: columnName,\n      };\n    },\n  );\n  return (\n    <FilterPluginStyle height={height} width={width}>\n      <StyledFormItem\n        validateStatus={filterState.validateStatus}\n        {...formItemData}\n      >\n        <Select\n          allowClear\n          value={value}\n          placeholder={placeholderText}\n          mode={multiSelect ? 'multiple' : undefined}\n          // @ts-ignore\n          onChange={handleChange}\n          onBlur={unsetFocusedFilter}\n          onFocus={setFocusedFilter}\n          onMouseEnter={setHoveredFilter}\n          onMouseLeave={unsetHoveredFilter}\n          ref={inputRef}\n          options={options}\n          onDropdownVisibleChange={setFilterActive}\n        />\n      </StyledFormItem>\n    </FilterPluginStyle>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}