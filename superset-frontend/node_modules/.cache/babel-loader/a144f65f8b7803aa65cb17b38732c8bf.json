{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport persistState from 'redux-localstorage';\nimport { Provider } from 'react-redux';\nimport { hot } from 'react-hot-loader/root';\nimport {\nFeatureFlag,\nThemeProvider,\ninitFeatureFlags,\nisFeatureEnabled } from\n'@superset-ui/core';\nimport { GlobalStyles } from 'src/GlobalStyles';\nimport { setupStore } from 'src/views/store';\nimport setupExtensions from 'src/setup/setupExtensions';\nimport getBootstrapData from 'src/utils/getBootstrapData';\nimport { tableApiUtil } from 'src/hooks/apiResources/tables';\nimport getInitialState from './reducers/getInitialState';\nimport { reducers } from './reducers/index';\nimport App from './components/App';\nimport {\nemptyTablePersistData,\nemptyQueryResults,\nclearQueryEditors } from\n'./utils/reduxStateToLocalStorageHelper';\nimport { BYTES_PER_CHAR, KB_STORAGE } from './constants';\nimport setupApp from '../setup/setupApp';\n\nimport '../assets/stylesheets/reactable-pagination.less';\nimport { theme } from '../preamble';\nimport { SqlLabGlobalStyles } from './SqlLabGlobalStyles';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nsetupApp();\nsetupExtensions();\n\nconst bootstrapData = getBootstrapData();\n\ninitFeatureFlags(bootstrapData.common.feature_flags);\n\nconst initialState = getInitialState(bootstrapData);\nconst sqlLabPersistStateConfig = {\n  paths: ['sqlLab'],\n  config: {\n    slicer: (paths) => (state) => {var _subset$sqlLab;\n      const subset = {};\n      paths.forEach((path) => {\n        // this line is used to remove old data from browser localStorage.\n        // we used to persist all redux state into localStorage, but\n        // it caused configurations passed from server-side got override.\n        // see PR 6257 for details\n        delete state[path].common; // eslint-disable-line no-param-reassign\n        if (path === 'sqlLab') {\n          subset[path] = {\n            ...state[path],\n            tables: emptyTablePersistData(state[path].tables),\n            queries: emptyQueryResults(state[path].queries),\n            queryEditors: clearQueryEditors(state[path].queryEditors),\n            unsavedQueryEditor: clearQueryEditors([\n            state[path].unsavedQueryEditor])[\n            0] };\n\n        }\n      });\n\n      if ((_subset$sqlLab = subset.sqlLab) != null && _subset$sqlLab.user) {\n        // Don't persist the user.\n        // User should really not be stored under the \"sqlLab\" field. Oh well.\n        delete subset.sqlLab.user;\n      }\n\n      const data = JSON.stringify(subset);\n      // 2 digit precision\n      const currentSize =\n      Math.round(data.length * BYTES_PER_CHAR / KB_STORAGE * 100) / 100;\n      if (state.localStorageUsageInKilobytes !== currentSize) {\n        state.localStorageUsageInKilobytes = currentSize; // eslint-disable-line no-param-reassign\n      }\n\n      return subset;\n    },\n    merge: function (initialState, persistedState) {var _persistedState;if (persistedState === void 0) {persistedState = {};}\n      const result = {\n        ...initialState,\n        ...persistedState,\n        sqlLab: {\n          ...(((_persistedState = persistedState) == null ? void 0 : _persistedState.sqlLab) || {}),\n          // Overwrite initialState over persistedState for sqlLab\n          // since a logic in getInitialState overrides the value from persistedState\n          ...initialState.sqlLab } };\n\n\n      // Filter out any user data that may have been persisted in an older version.\n      // Get user from bootstrap data instead, every time\n      result.sqlLab.user = initialState.sqlLab.user;\n      return result;\n    } } };\n\n\n\nexport const store = setupStore({\n  initialState,\n  rootReducers: reducers,\n  ...(!isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) && {\n    enhancers: [\n    persistState(\n    sqlLabPersistStateConfig.paths,\n    sqlLabPersistStateConfig.config)] }) });\n\n\n\n\n\n// Rehydrate server side persisted table metadata\ninitialState.sqlLab.tables.forEach(\n(_ref) => {let { name: table, schema, dbId, persistData } = _ref;\n  if (dbId && schema && table && persistData != null && persistData.columns) {\n    store.dispatch(\n    tableApiUtil.upsertQueryData(\n    'tableMetadata',\n    { dbId, schema, table },\n    persistData));\n\n\n    store.dispatch(\n    tableApiUtil.upsertQueryData(\n    'tableExtendedMetadata',\n    { dbId, schema, table },\n    {}));\n\n\n  }\n});\n\n\n// Highlight the navbar menu\nconst menus = document.querySelectorAll('.nav.navbar-nav li.dropdown');\nconst sqlLabMenu = Array.prototype.slice.\napply(menus).\nfind((element) => element.innerText.trim() === 'SQL Lab');\nif (sqlLabMenu) {\n  const classes = sqlLabMenu.getAttribute('class');\n  if (classes.indexOf('active') === -1) {\n    sqlLabMenu.setAttribute('class', `${classes} active`);\n  }\n}\n\nconst Application = () =>\n___EmotionJSX(Provider, { store: store },\n___EmotionJSX(ThemeProvider, { theme: theme },\n___EmotionJSX(GlobalStyles, null),\n___EmotionJSX(SqlLabGlobalStyles, null),\n___EmotionJSX(App, null)));\n\n\n\n\nexport default Application;","map":{"version":3,"names":["React","persistState","Provider","hot","FeatureFlag","ThemeProvider","initFeatureFlags","isFeatureEnabled","GlobalStyles","setupStore","setupExtensions","getBootstrapData","tableApiUtil","getInitialState","reducers","App","emptyTablePersistData","emptyQueryResults","clearQueryEditors","BYTES_PER_CHAR","KB_STORAGE","setupApp","theme","SqlLabGlobalStyles","bootstrapData","common","feature_flags","initialState","sqlLabPersistStateConfig","paths","config","slicer","state","subset","forEach","path","tables","queries","queryEditors","unsavedQueryEditor","sqlLab","user","data","JSON","stringify","currentSize","Math","round","length","localStorageUsageInKilobytes","merge","persistedState","result","store","rootReducers","SQLLAB_BACKEND_PERSISTENCE","enhancers","name","table","schema","dbId","persistData","columns","dispatch","upsertQueryData","menus","document","querySelectorAll","sqlLabMenu","Array","prototype","slice","apply","find","element","innerText","trim","classes","getAttribute","indexOf","setAttribute","Application"],"sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/SqlLab/App.jsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport persistState from 'redux-localstorage';\nimport { Provider } from 'react-redux';\nimport { hot } from 'react-hot-loader/root';\nimport {\n  FeatureFlag,\n  ThemeProvider,\n  initFeatureFlags,\n  isFeatureEnabled,\n} from '@superset-ui/core';\nimport { GlobalStyles } from 'src/GlobalStyles';\nimport { setupStore } from 'src/views/store';\nimport setupExtensions from 'src/setup/setupExtensions';\nimport getBootstrapData from 'src/utils/getBootstrapData';\nimport { tableApiUtil } from 'src/hooks/apiResources/tables';\nimport getInitialState from './reducers/getInitialState';\nimport { reducers } from './reducers/index';\nimport App from './components/App';\nimport {\n  emptyTablePersistData,\n  emptyQueryResults,\n  clearQueryEditors,\n} from './utils/reduxStateToLocalStorageHelper';\nimport { BYTES_PER_CHAR, KB_STORAGE } from './constants';\nimport setupApp from '../setup/setupApp';\n\nimport '../assets/stylesheets/reactable-pagination.less';\nimport { theme } from '../preamble';\nimport { SqlLabGlobalStyles } from './SqlLabGlobalStyles';\n\nsetupApp();\nsetupExtensions();\n\nconst bootstrapData = getBootstrapData();\n\ninitFeatureFlags(bootstrapData.common.feature_flags);\n\nconst initialState = getInitialState(bootstrapData);\nconst sqlLabPersistStateConfig = {\n  paths: ['sqlLab'],\n  config: {\n    slicer: paths => state => {\n      const subset = {};\n      paths.forEach(path => {\n        // this line is used to remove old data from browser localStorage.\n        // we used to persist all redux state into localStorage, but\n        // it caused configurations passed from server-side got override.\n        // see PR 6257 for details\n        delete state[path].common; // eslint-disable-line no-param-reassign\n        if (path === 'sqlLab') {\n          subset[path] = {\n            ...state[path],\n            tables: emptyTablePersistData(state[path].tables),\n            queries: emptyQueryResults(state[path].queries),\n            queryEditors: clearQueryEditors(state[path].queryEditors),\n            unsavedQueryEditor: clearQueryEditors([\n              state[path].unsavedQueryEditor,\n            ])[0],\n          };\n        }\n      });\n\n      if (subset.sqlLab?.user) {\n        // Don't persist the user.\n        // User should really not be stored under the \"sqlLab\" field. Oh well.\n        delete subset.sqlLab.user;\n      }\n\n      const data = JSON.stringify(subset);\n      // 2 digit precision\n      const currentSize =\n        Math.round(((data.length * BYTES_PER_CHAR) / KB_STORAGE) * 100) / 100;\n      if (state.localStorageUsageInKilobytes !== currentSize) {\n        state.localStorageUsageInKilobytes = currentSize; // eslint-disable-line no-param-reassign\n      }\n\n      return subset;\n    },\n    merge: (initialState, persistedState = {}) => {\n      const result = {\n        ...initialState,\n        ...persistedState,\n        sqlLab: {\n          ...(persistedState?.sqlLab || {}),\n          // Overwrite initialState over persistedState for sqlLab\n          // since a logic in getInitialState overrides the value from persistedState\n          ...initialState.sqlLab,\n        },\n      };\n      // Filter out any user data that may have been persisted in an older version.\n      // Get user from bootstrap data instead, every time\n      result.sqlLab.user = initialState.sqlLab.user;\n      return result;\n    },\n  },\n};\n\nexport const store = setupStore({\n  initialState,\n  rootReducers: reducers,\n  ...(!isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) && {\n    enhancers: [\n      persistState(\n        sqlLabPersistStateConfig.paths,\n        sqlLabPersistStateConfig.config,\n      ),\n    ],\n  }),\n});\n\n// Rehydrate server side persisted table metadata\ninitialState.sqlLab.tables.forEach(\n  ({ name: table, schema, dbId, persistData }) => {\n    if (dbId && schema && table && persistData?.columns) {\n      store.dispatch(\n        tableApiUtil.upsertQueryData(\n          'tableMetadata',\n          { dbId, schema, table },\n          persistData,\n        ),\n      );\n      store.dispatch(\n        tableApiUtil.upsertQueryData(\n          'tableExtendedMetadata',\n          { dbId, schema, table },\n          {},\n        ),\n      );\n    }\n  },\n);\n\n// Highlight the navbar menu\nconst menus = document.querySelectorAll('.nav.navbar-nav li.dropdown');\nconst sqlLabMenu = Array.prototype.slice\n  .apply(menus)\n  .find(element => element.innerText.trim() === 'SQL Lab');\nif (sqlLabMenu) {\n  const classes = sqlLabMenu.getAttribute('class');\n  if (classes.indexOf('active') === -1) {\n    sqlLabMenu.setAttribute('class', `${classes} active`);\n  }\n}\n\nconst Application = () => (\n  <Provider store={store}>\n    <ThemeProvider theme={theme}>\n      <GlobalStyles />\n      <SqlLabGlobalStyles />\n      <App />\n    </ThemeProvider>\n  </Provider>\n);\n\nexport default hot(Application);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}