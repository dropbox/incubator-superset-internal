{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};export const isStandardizedFormData = (formData) => {var _formData$standardize, _formData$standardize2;return (formData == null ? void 0 : (_formData$standardize = formData.standardizedFormData) == null ? void 0 : _formData$standardize.controls) && (\n  formData == null ? void 0 : (_formData$standardize2 = formData.standardizedFormData) == null ? void 0 : _formData$standardize2.memorizedFormData) &&\n  Array.isArray(formData.standardizedFormData.controls.metrics) &&\n  Array.isArray(formData.standardizedFormData.controls.columns);};\n// Ref:\n//  - superset-frontend/src/explore/components/ConditionalFormattingControl.tsx\nexport var COMPARATOR;\n(function (COMPARATOR) {\n  COMPARATOR[\"NONE\"] = \"None\";\n  COMPARATOR[\"GREATER_THAN\"] = \">\";\n  COMPARATOR[\"LESS_THAN\"] = \"<\";\n  COMPARATOR[\"GREATER_OR_EQUAL\"] = \"\\u2265\";\n  COMPARATOR[\"LESS_OR_EQUAL\"] = \"\\u2264\";\n  COMPARATOR[\"EQUAL\"] = \"=\";\n  COMPARATOR[\"NOT_EQUAL\"] = \"\\u2260\";\n  COMPARATOR[\"BETWEEN\"] = \"< x <\";\n  COMPARATOR[\"BETWEEN_OR_EQUAL\"] = \"\\u2264 x \\u2264\";\n  COMPARATOR[\"BETWEEN_OR_LEFT_EQUAL\"] = \"\\u2264 x <\";\n  COMPARATOR[\"BETWEEN_OR_RIGHT_EQUAL\"] = \"< x \\u2264\";\n})(COMPARATOR || (COMPARATOR = {}));\nexport const MULTIPLE_VALUE_COMPARATORS = [\nCOMPARATOR.BETWEEN,\nCOMPARATOR.BETWEEN_OR_EQUAL,\nCOMPARATOR.BETWEEN_OR_LEFT_EQUAL,\nCOMPARATOR.BETWEEN_OR_RIGHT_EQUAL];const _default =\n\n{};export default _default;\nexport function isColumnMeta(column) {\n  return !!column && 'column_name' in column;\n}\nexport function isSavedExpression(column) {\n  return 'column_name' in column && 'expression' in column && !!column.expression;\n}\nexport function isControlPanelSectionConfig(section) {\n  return section !== null;\n}\nexport function isDataset(datasource) {\n  return !!datasource && 'columns' in datasource;\n}\nexport function isQueryResponse(datasource) {\n  return !!datasource && 'results' in datasource && 'sql' in datasource;\n}\nexport var SortSeriesType;\n(function (SortSeriesType) {\n  SortSeriesType[\"Name\"] = \"name\";\n  SortSeriesType[\"Max\"] = \"max\";\n  SortSeriesType[\"Min\"] = \"min\";\n  SortSeriesType[\"Sum\"] = \"sum\";\n  SortSeriesType[\"Avg\"] = \"avg\";\n})(SortSeriesType || (SortSeriesType = {}));;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(isStandardizedFormData, \"isStandardizedFormData\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-chart-controls/src/types.ts\");reactHotLoader.register(COMPARATOR, \"COMPARATOR\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-chart-controls/src/types.ts\");reactHotLoader.register(MULTIPLE_VALUE_COMPARATORS, \"MULTIPLE_VALUE_COMPARATORS\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-chart-controls/src/types.ts\");reactHotLoader.register(isColumnMeta, \"isColumnMeta\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-chart-controls/src/types.ts\");reactHotLoader.register(isSavedExpression, \"isSavedExpression\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-chart-controls/src/types.ts\");reactHotLoader.register(isControlPanelSectionConfig, \"isControlPanelSectionConfig\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-chart-controls/src/types.ts\");reactHotLoader.register(isDataset, \"isDataset\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-chart-controls/src/types.ts\");reactHotLoader.register(isQueryResponse, \"isQueryResponse\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-chart-controls/src/types.ts\");reactHotLoader.register(SortSeriesType, \"SortSeriesType\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-chart-controls/src/types.ts\");reactHotLoader.register(_default, \"default\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-chart-controls/src/types.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"uSAuYA,OAAO,MAAMA,sBAAsB,GAAG,CACpCC,QADoC,+DAGpC,SAAQ,QAAR,6CAAQ,CAAEC,oBAAV,2CAAgCC,QAAhC;EACAF,QADA,8CACAA,QAAQ,CAAEC,oBADV,qBACA,uBAAgCE,iBADhC;EAEAC,KAAK,CAACC,OAAN,CAAcL,QAAQ,CAACC,oBAAT,CAA8BC,QAA9B,CAAuCI,OAArD,CAFA;EAGAF,KAAK,CAACC,OAAN,CAAcL,QAAQ,CAACC,oBAAT,CAA8BC,QAA9B,CAAuCK,OAArD,CANoC,EAA/B;AAwBP;AACA;AACA,WAAYC,UAAZ;AAAA,WAAYA,UAAZ,EAAsB;EACpBA;EACAA;EACAA;EACAA;EACAA;EACAA;EACAA;EACAA;EACAA;EACAA;EACAA;AACD,CAZD,EAAYA,UAAU,KAAVA,UAAU,MAAtB;AAcA,OAAO,MAAMC,0BAA0B,GAAG;AACxCD,UAAU,CAACE,OAD6B;AAExCF,UAAU,CAACG,gBAF6B;AAGxCH,UAAU,CAACI,qBAH6B;AAIxCJ,UAAU,CAACK,sBAJ6B,CAAnC,C;;AAqBQ,E,CAAf;AAEA,OAAM,SAAUC,YAAV,CAAuBC,MAAvB,EAAsC;EAC1C,OAAO,CAAC,CAACA,MAAF,IAAY,iBAAiBA,MAApC;AACD;AAED,OAAM,SAAUC,iBAAV,CACJD,MADI,EAC4B;EAEhC,OACE,iBAAiBA,MAAjB,IAA2B,gBAAgBA,MAA3C,IAAqD,CAAC,CAACA,MAAM,CAACE,UADhE;AAGD;AAED,OAAM,SAAUC,2BAAV,CACJC,OADI,EACqC;EAEzC,OAAOA,OAAO,KAAK,IAAnB;AACD;AAED,OAAM,SAAUC,SAAV,CACJC,UADI,EACkD;EAEtD,OAAO,CAAC,CAACA,UAAF,IAAgB,aAAaA,UAApC;AACD;AAED,OAAM,SAAUC,eAAV,CACJD,UADI,EACkD;EAEtD,OAAO,CAAC,CAACA,UAAF,IAAgB,aAAaA,UAA7B,IAA2C,SAASA,UAA3D;AACD;AAED,WAAYE,cAAZ;AAAA,WAAYA,cAAZ,EAA0B;EACxBA;EACAA;EACAA;EACAA;EACAA;AACD,CAND,EAAYA,cAAc,KAAdA,cAAc,MAA1B,E,iLA7FaxB,sB,yKA0BDS,U,6JAcCC,0B,6KAuBGK,Y,+JAIAE,iB,oKAQAE,2B,8KAMAE,S,4JAMAE,e,kKAMJC,c","names":["isStandardizedFormData","formData","standardizedFormData","controls","memorizedFormData","Array","isArray","metrics","columns","COMPARATOR","MULTIPLE_VALUE_COMPARATORS","BETWEEN","BETWEEN_OR_EQUAL","BETWEEN_OR_LEFT_EQUAL","BETWEEN_OR_RIGHT_EQUAL","isColumnMeta","column","isSavedExpression","expression","isControlPanelSectionConfig","section","isDataset","datasource","isQueryResponse","SortSeriesType"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-chart-controls/src/types.ts"],"sourcesContent":["/* eslint-disable camelcase */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { ReactElement, ReactNode, ReactText } from 'react';\nimport type {\n  AdhocColumn,\n  Column,\n  DatasourceType,\n  JsonObject,\n  JsonValue,\n  Metric,\n  QueryFormColumn,\n  QueryFormData,\n  QueryFormMetric,\n  QueryResponse,\n} from '@superset-ui/core';\nimport { sharedControls, sharedControlComponents } from './shared-controls';\n\nexport type { Metric } from '@superset-ui/core';\nexport type { ControlFormItemSpec } from './components/ControlForm';\nexport type { ControlComponentProps } from './shared-controls/components/types';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype AnyDict = Record<string, any>;\ninterface Action {\n  type: string;\n}\ninterface AnyAction extends Action, AnyDict {}\n\nexport type SharedControls = typeof sharedControls;\nexport type SharedControlAlias = keyof typeof sharedControls;\nexport type SharedControlComponents = typeof sharedControlComponents;\n\n/** ----------------------------------------------\n * Input data/props while rendering\n * ---------------------------------------------*/\nexport interface Owner {\n  first_name: string;\n  id: number;\n  last_name: string;\n  username: string;\n  email?: string;\n}\n\nexport type ColumnMeta = Omit<Column, 'id'> & {\n  id?: number;\n} & AnyDict;\n\nexport interface Dataset {\n  id: number;\n  type: DatasourceType;\n  columns: ColumnMeta[];\n  metrics: Metric[];\n  column_formats: Record<string, string>;\n  verbose_map: Record<string, string>;\n  main_dttm_col: string;\n  // eg. ['[\"ds\", true]', 'ds [asc]']\n  order_by_choices?: [string, string][] | null;\n  time_grain_sqla?: string;\n  granularity_sqla?: string;\n  datasource_name: string | null;\n  name?: string;\n  description: string | null;\n  uid?: string;\n  owners?: Owner[];\n  filter_select?: boolean;\n  filter_select_enabled?: boolean;\n}\n\nexport interface ControlPanelState {\n  form_data: QueryFormData;\n  datasource: Dataset | QueryResponse | null;\n  controls: ControlStateMapping;\n  common: JsonObject;\n  metadata?: JsonObject | null;\n}\n\n/**\n * The action dispatcher will call Redux `dispatch` internally and return what's\n * returned from `dispatch`, which by default is the original or another action.\n */\nexport interface ActionDispatcher<\n  ARGS extends unknown[],\n  A extends Action = AnyAction,\n> {\n  (...args: ARGS): A;\n}\n\n/**\n * Mapping of action dispatchers\n */\nexport interface ControlPanelActionDispatchers {\n  setDatasource: ActionDispatcher<[Dataset]>;\n}\n\n/**\n * Additional control props obtained from `mapStateToProps`.\n */\nexport type ExtraControlProps = {\n  value?: JsonValue;\n} & AnyDict;\n\n// Ref:superset-frontend/src/explore/store.js\nexport type ControlState<\n  T = ControlType,\n  O extends SelectOption = SelectOption,\n> = ControlConfig<T, O> & ExtraControlProps;\n\nexport interface ControlStateMapping {\n  [key: string]: ControlState;\n}\n\n// Ref: superset-frontend/src/explore/components/ControlPanelsContainer.jsx\nexport interface ControlPanelsContainerProps extends AnyDict {\n  actions: ControlPanelActionDispatchers;\n  controls: ControlStateMapping;\n  exportState: AnyDict;\n  form_data: QueryFormData;\n}\n\n/** ----------------------------------------------\n * Config for a chart Control\n * ---------------------------------------------*/\n\n// Ref: superset-frontend/src/explore/components/controls/index.js\nexport type InternalControlType =\n  | 'AnnotationLayerControl'\n  | 'BoundsControl'\n  | 'CheckboxControl'\n  | 'CollectionControl'\n  | 'ColorPickerControl'\n  | 'ColorSchemeControl'\n  | 'DatasourceControl'\n  | 'DateFilterControl'\n  | 'FixedOrMetricControl'\n  | 'HiddenControl'\n  | 'SelectAsyncControl'\n  | 'SelectControl'\n  | 'SliderControl'\n  | 'SpatialControl'\n  | 'TextAreaControl'\n  | 'TextControl'\n  | 'TimeSeriesColumnControl'\n  | 'ViewportControl'\n  | 'VizTypeControl'\n  | 'MetricsControl'\n  | 'AdhocFilterControl'\n  | 'FilterBoxItemControl'\n  | 'DndColumnSelect'\n  | 'DndFilterSelect'\n  | 'DndMetricSelect'\n  | keyof SharedControlComponents; // expanded in `expandControlConfig`\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type ControlType = InternalControlType | React.ComponentType<any>;\n\nexport type TabOverride = 'data' | 'customize' | boolean;\n\n/**\n * Control config specifying how chart controls appear in the control panel, all\n * these configs will be passed to the UI component for control as props.\n *\n * - type: the control type, referencing a React component of the same name\n * - label: the label as shown in the control's header\n * - description: shown in the info tooltip of the control's header\n * - default: the default value when opening a new chart, or changing visualization type\n * - renderTrigger: a bool that defines whether the visualization should be re-rendered\n *    when changed. This should `true` for controls that only affect the rendering (client side)\n *    and don't affect the query or backend data processing as those require to re run a query\n *    and fetch the data\n * - validators: an array of functions that will receive the value of the component and\n *    should return error messages when the value is not valid. The error message gets\n *    bubbled up to the control header, section header and query panel header.\n * - warning: text shown as a tooltip on a warning icon in the control's header\n * - error: text shown as a tooltip on a error icon in the control's header\n * - shouldMapStateToProps: a function that receives the previous and current app state\n *   and determines if the control needs to recalculate it's props based on the new state.\n * - mapStateToProps: a function that receives the App's state and return an object of k/v\n *    to overwrite configuration at runtime. This is useful to alter a component based on\n *    anything external to it, like another control's value. For instance it's possible to\n *    show a warning based on the value of another component. It's also possible to bind\n *    arbitrary data from the redux store to the component this way.\n * - tabOverride: set to 'data' if you want to force a renderTrigger to show up on the `Data`\n     tab, or 'customize' if you want it to show up on that tam. Otherwise sections with ALL\n     `renderTrigger: true` components will show up on the `Customize` tab.\n * - visibility: a function that uses control panel props to check whether a control should\n *    be visible.\n */\nexport interface BaseControlConfig<\n  T extends ControlType = ControlType,\n  O extends SelectOption = SelectOption,\n  V = JsonValue,\n> extends AnyDict {\n  type: T;\n  label?:\n    | ReactNode\n    | ((\n        state: ControlPanelState,\n        controlState: ControlState,\n        // TODO: add strict `chartState` typing (see superset-frontend/src/explore/types)\n        chartState?: AnyDict,\n      ) => ReactNode);\n  description?:\n    | ReactNode\n    | ((\n        state: ControlPanelState,\n        controlState: ControlState,\n        // TODO: add strict `chartState` typing (see superset-frontend/src/explore/types)\n        chartState?: AnyDict,\n      ) => ReactNode);\n  default?: V;\n  initialValue?: V;\n  renderTrigger?: boolean;\n  validators?: ControlValueValidator<T, O, V>[];\n  warning?: ReactNode;\n  error?: ReactNode;\n  /**\n   * Add additional props to chart control.\n   */\n  shouldMapStateToProps?: (\n    prevState: ControlPanelState,\n    state: ControlPanelState,\n    controlState: ControlState,\n    // TODO: add strict `chartState` typing (see superset-frontend/src/explore/types)\n    chartState?: AnyDict,\n  ) => boolean;\n  mapStateToProps?: (\n    state: ControlPanelState,\n    controlState: ControlState,\n    // TODO: add strict `chartState` typing (see superset-frontend/src/explore/types)\n    chartState?: AnyDict,\n  ) => ExtraControlProps;\n  visibility?: (\n    props: ControlPanelsContainerProps,\n    controlData: AnyDict,\n  ) => boolean;\n}\n\nexport interface ControlValueValidator<\n  T = ControlType,\n  O extends SelectOption = SelectOption,\n  V = unknown,\n> {\n  (value: V, state?: ControlState<T, O>): boolean | string;\n}\n\n/** --------------------------------------------\n * Additional Config for specific control Types\n * --------------------------------------------- */\nexport type SelectOption = AnyDict | string | [ReactText, ReactNode];\n\nexport type SelectControlType =\n  | 'SelectControl'\n  | 'SelectAsyncControl'\n  | 'MetricsControl'\n  | 'FixedOrMetricControl'\n  | 'AdhocFilterControl'\n  | 'FilterBoxItemControl';\n\n// via react-select/src/filters\nexport interface FilterOption<T extends SelectOption> {\n  label: string;\n  value: string;\n  data: T;\n}\n\n// Ref: superset-frontend/src/components/Select/SupersetStyledSelect.tsx\nexport interface SelectControlConfig<\n  O extends SelectOption = SelectOption,\n  T extends SelectControlType = SelectControlType,\n> extends BaseControlConfig<T, O> {\n  clearable?: boolean;\n  freeForm?: boolean;\n  multi?: boolean;\n  valueKey?: string;\n  labelKey?: string;\n  options?: O[];\n  optionRenderer?: (option: O) => ReactNode;\n  valueRenderer?: (option: O) => ReactNode;\n  filterOption?:\n    | ((option: FilterOption<O>, rawInput: string) => Boolean)\n    | null;\n}\n\nexport type SharedControlConfig<\n  T extends InternalControlType = InternalControlType,\n  O extends SelectOption = SelectOption,\n> = T extends SelectControlType\n  ? SelectControlConfig<O, T>\n  : BaseControlConfig<T>;\n\n/** --------------------------------------------\n * Custom controls\n * --------------------------------------------- */\nexport type CustomControlConfig<P = {}> = BaseControlConfig<\n  React.ComponentType<P>\n> &\n  // two run-time properties from superset-frontend/src/explore/components/Control.jsx\n  Omit<P, 'onChange' | 'hovered'>;\n\n// Catch-all ControlConfig\n//  - if T is known control types, return SharedControlConfig,\n//  - if T is object, assume a CustomComponent\n//  - otherwise assume it's a custom component control\nexport type ControlConfig<\n  T = AnyDict,\n  O extends SelectOption = SelectOption,\n> = T extends InternalControlType\n  ? SharedControlConfig<T, O>\n  : T extends object\n  ? CustomControlConfig<T> // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  : CustomControlConfig<any>;\n\n/** ===========================================================\n * Chart plugin control panel config\n * ========================================================= */\nexport type SharedSectionAlias =\n  | 'annotations'\n  | 'colorScheme'\n  | 'datasourceAndVizType'\n  | 'druidTimeSeries'\n  | 'sqlaTimeSeries'\n  | 'NVD3TimeSeries';\n\nexport interface OverrideSharedControlItem<\n  A extends SharedControlAlias = SharedControlAlias,\n> {\n  name: A;\n  override: Partial<SharedControls[A]>;\n}\n\nexport type CustomControlItem = {\n  name: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  config: BaseControlConfig<any, any, any>;\n};\n\n// use ReactElement instead of ReactNode because `string`, `number`, etc. may\n// interfere with other ControlSetItem types\nexport type ExpandedControlItem = CustomControlItem | ReactElement | null;\n\nexport type ControlSetItem =\n  | SharedControlAlias\n  | OverrideSharedControlItem\n  | ExpandedControlItem;\n\nexport type ControlSetRow = ControlSetItem[];\n\n// Ref:\n//  - superset-frontend/src/explore/components/ControlPanelsContainer.jsx\n//  - superset-frontend/src/explore/components/ControlPanelSection.jsx\nexport interface ControlPanelSectionConfig {\n  label?: ReactNode;\n  description?: ReactNode;\n  expanded?: boolean;\n  tabOverride?: TabOverride;\n  controlSetRows: ControlSetRow[];\n}\n\nexport interface StandardizedControls {\n  metrics: QueryFormMetric[];\n  columns: QueryFormColumn[];\n}\n\nexport interface StandardizedFormDataInterface {\n  // Controls not used in the current viz\n  controls: StandardizedControls;\n  // Transformation history\n  memorizedFormData: Map<string, QueryFormData>;\n}\n\nexport type QueryStandardizedFormData = QueryFormData & {\n  standardizedFormData: StandardizedFormDataInterface;\n};\n\nexport const isStandardizedFormData = (\n  formData: QueryFormData,\n): formData is QueryStandardizedFormData =>\n  formData?.standardizedFormData?.controls &&\n  formData?.standardizedFormData?.memorizedFormData &&\n  Array.isArray(formData.standardizedFormData.controls.metrics) &&\n  Array.isArray(formData.standardizedFormData.controls.columns);\n\nexport interface ControlPanelConfig {\n  controlPanelSections: (ControlPanelSectionConfig | null)[];\n  controlOverrides?: ControlOverrides;\n  sectionOverrides?: SectionOverrides;\n  onInit?: (state: ControlStateMapping) => void;\n  formDataOverrides?: (formData: QueryFormData) => QueryFormData;\n}\n\nexport type ControlOverrides = {\n  [P in SharedControlAlias]?: Partial<SharedControls[P]>;\n};\n\nexport type SectionOverrides = {\n  [P in SharedSectionAlias]?: Partial<ControlPanelSectionConfig>;\n};\n\n// Ref:\n//  - superset-frontend/src/explore/components/ConditionalFormattingControl.tsx\nexport enum COMPARATOR {\n  NONE = 'None',\n  GREATER_THAN = '>',\n  LESS_THAN = '<',\n  GREATER_OR_EQUAL = '≥',\n  LESS_OR_EQUAL = '≤',\n  EQUAL = '=',\n  NOT_EQUAL = '≠',\n  BETWEEN = '< x <',\n  BETWEEN_OR_EQUAL = '≤ x ≤',\n  BETWEEN_OR_LEFT_EQUAL = '≤ x <',\n  BETWEEN_OR_RIGHT_EQUAL = '< x ≤',\n}\n\nexport const MULTIPLE_VALUE_COMPARATORS = [\n  COMPARATOR.BETWEEN,\n  COMPARATOR.BETWEEN_OR_EQUAL,\n  COMPARATOR.BETWEEN_OR_LEFT_EQUAL,\n  COMPARATOR.BETWEEN_OR_RIGHT_EQUAL,\n];\n\nexport type ConditionalFormattingConfig = {\n  operator?: COMPARATOR;\n  targetValue?: number;\n  targetValueLeft?: number;\n  targetValueRight?: number;\n  column?: string;\n  colorScheme?: string;\n};\n\nexport type ColorFormatters = {\n  column: string;\n  getColorFromValue: (value: number) => string | undefined;\n}[];\n\nexport default {};\n\nexport function isColumnMeta(column: AnyDict): column is ColumnMeta {\n  return !!column && 'column_name' in column;\n}\n\nexport function isSavedExpression(\n  column: AdhocColumn | ColumnMeta,\n): column is ColumnMeta {\n  return (\n    'column_name' in column && 'expression' in column && !!column.expression\n  );\n}\n\nexport function isControlPanelSectionConfig(\n  section: ControlPanelSectionConfig | null,\n): section is ControlPanelSectionConfig {\n  return section !== null;\n}\n\nexport function isDataset(\n  datasource: Dataset | QueryResponse | null | undefined,\n): datasource is Dataset {\n  return !!datasource && 'columns' in datasource;\n}\n\nexport function isQueryResponse(\n  datasource: Dataset | QueryResponse | null | undefined,\n): datasource is QueryResponse {\n  return !!datasource && 'results' in datasource && 'sql' in datasource;\n}\n\nexport enum SortSeriesType {\n  Name = 'name',\n  Max = 'max',\n  Min = 'min',\n  Sum = 'sum',\n  Avg = 'avg',\n}\n\nexport type SortSeriesData = {\n  sort_series_type: SortSeriesType;\n  sort_series_ascending: boolean;\n};\n"]},"metadata":{},"sourceType":"module"}