{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\";import _isEqual from \"lodash/isEqual\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useState, useEffect } from 'react';\n\nimport { styled, usePrevious } from '@superset-ui/core';\nimport ErrorBoundary from 'src/components/ErrorBoundary';\nimport controlMap from './controls';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst StyledControl = styled.div`\n  padding-bottom: ${(_ref) => {let { theme } = _ref;return theme.gridUnit * 4;}}px;\n`;\nexport default function Control(props) {\n  const { actions: { setControlValue }, name, type, hidden, isVisible, resetOnHide = true } = props;\n  const [hovered, setHovered] = useState(false);\n  const wasVisible = usePrevious(isVisible);\n  const onChange = useCallback((value, errors) => setControlValue(name, value, errors), [name, setControlValue]);\n  useEffect(() => {\n    if (wasVisible === true &&\n    isVisible === false &&\n    props.default !== undefined &&\n    !_isEqual(props.value, props.default) &&\n    resetOnHide) {\n      // reset control value if setting to invisible\n      setControlValue == null ? void 0 : setControlValue(name, props.default);\n    }\n  }, [\n  name,\n  wasVisible,\n  isVisible,\n  setControlValue,\n  props.value,\n  props.default]);\n\n  if (!type || isVisible === false)\n  return null;\n  const ControlComponent = typeof type === 'string' ? controlMap[type] : type;\n  if (!ControlComponent) {\n    // eslint-disable-next-line no-console\n    console.warn(`Unknown controlType: ${type}`);\n    return null;\n  }\n  return ___EmotionJSX(StyledControl, { className: \"Control\", \"data-test\": name, style: hidden ? { display: 'none' } : undefined, onMouseEnter: () => setHovered(true), onMouseLeave: () => setHovered(false) },\n  ___EmotionJSX(ErrorBoundary, null,\n  ___EmotionJSX(ControlComponent, _extends({ onChange: onChange, hovered: hovered }, props))));\n\n\n}__signature__(Control, \"useState{[hovered, setHovered](false)}\\nusePrevious{wasVisible}\\nuseCallback{onChange}\\nuseEffect{}\", () => [usePrevious]);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(StyledControl, \"StyledControl\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/Control.tsx\");reactHotLoader.register(Control, \"Control\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/Control.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"4YAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,KAAP,IAA2BC,WAA3B,EAAwCC,QAAxC,EAAkDC,SAAlD,QAAmE,OAAnE;;AAMA,SACEC,MADF,EAIEC,WAJF,QAKO,mBALP;AAMA,OAAOC,aAAP,MAA0B,8BAA1B;AAEA,OAAOC,UAAP,MAAuB,YAAvB,C;AA6BA,MAAMC,aAAa,GAAGJ,MAAM,CAACK,GAAG;oBACZ,eAAC,EAAEC,KAAF,EAAD,eAAeA,KAAK,CAACC,QAAN,GAAiB,CAAhC,EAAiC;CADrD;AAIA,eAAc,SAAUC,OAAV,CAAkBC,KAAlB,EAAqC;EACjD,MAAM,EACJC,OAAO,EAAE,EAAEC,eAAF,EADL,EAEJC,IAFI,EAGJC,IAHI,EAIJC,MAJI,EAKJC,SALI,EAMJC,WAAW,GAAG,IANV,KAOFP,KAPJ;EASA,MAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBpB,QAAQ,CAAC,KAAD,CAAtC;EACA,MAAMqB,UAAU,GAAGlB,WAAW,CAACc,SAAD,CAA9B;EACA,MAAMK,QAAQ,GAAGvB,WAAW,CAC1B,CAACwB,KAAD,EAAaC,MAAb,KAA+BX,eAAe,CAACC,IAAD,EAAOS,KAAP,EAAcC,MAAd,CADpB,EAE1B,CAACV,IAAD,EAAOD,eAAP,CAF0B,CAA5B;EAKAZ,SAAS,CAAC,MAAK;IACb,IACEoB,UAAU,KAAK,IAAf;IACAJ,SAAS,KAAK,KADd;IAEAN,KAAK,CAACc,OAAN,KAAkBC,SAFlB;IAGA,CAAC,SAAQf,KAAK,CAACY,KAAd,EAAqBZ,KAAK,CAACc,OAA3B,CAHD;IAIAP,WALF,EAME;MACA;MACAL,eAAe,QAAf,2BAAe,CAAGC,IAAH,EAASH,KAAK,CAACc,OAAf,CAAf;IACD;EACF,CAXQ,EAWN;EACDX,IADC;EAEDO,UAFC;EAGDJ,SAHC;EAIDJ,eAJC;EAKDF,KAAK,CAACY,KALL;EAMDZ,KAAK,CAACc,OANL,CAXM,CAAT;;EAoBA,IAAI,CAACV,IAAD,IAASE,SAAS,KAAK,KAA3B;EAAkC,OAAO,IAAP;EAElC,MAAMU,gBAAgB,GAAG,OAAOZ,IAAP,KAAgB,QAAhB,GAA2BV,UAAU,CAACU,IAAD,CAArC,GAA8CA,IAAvE;EACA,IAAI,CAACY,gBAAL,EAAuB;IACrB;IACAC,OAAO,CAACC,IAAR,CAAa,wBAAwBd,IAAI,EAAzC;IACA,OAAO,IAAP;EACD;EAED,OACE,cAAC,aAAD,IACE,SAAS,EAAC,SADZ,EAEE,aAAWD,IAFb,EAGE,KAAK,EAAEE,MAAM,GAAG,EAAEc,OAAO,EAAE,MAAX,EAAH,GAAyBJ,SAHxC,EAIE,YAAY,EAAE,MAAMN,UAAU,CAAC,IAAD,CAJhC,EAKE,YAAY,EAAE,MAAMA,UAAU,CAAC,KAAD,CALhC;EAOE,cAAC,aAAD;EACE,cAAC,gBAAD,aAAkB,QAAQ,EAAEE,QAA5B,EAAsC,OAAO,EAAEH,OAA/C,IAA4DR,KAA5D,EADF,CAPF,CADF;;;AAaD,C,cA3DuBD,O,gHAWHP,W,oLAffG,a,kJAIkBI,O","names":["React","useCallback","useState","useEffect","styled","usePrevious","ErrorBoundary","controlMap","StyledControl","div","theme","gridUnit","Control","props","actions","setControlValue","name","type","hidden","isVisible","resetOnHide","hovered","setHovered","wasVisible","onChange","value","errors","default","undefined","ControlComponent","console","warn","display"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/Control.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { ReactNode, useCallback, useState, useEffect } from 'react';\nimport { isEqual } from 'lodash';\nimport {\n  ControlType,\n  ControlComponentProps as BaseControlComponentProps,\n} from '@superset-ui/chart-controls';\nimport {\n  styled,\n  JsonValue,\n  QueryFormData,\n  usePrevious,\n} from '@superset-ui/core';\nimport ErrorBoundary from 'src/components/ErrorBoundary';\nimport { ExploreActions } from 'src/explore/actions/exploreActions';\nimport controlMap from './controls';\n\nexport type ControlProps = {\n  // the actual action dispatcher (via bindActionCreators) has identical\n  // signature to the original action factory.\n  actions: Partial<ExploreActions> & Pick<ExploreActions, 'setControlValue'>;\n  type: ControlType;\n  label?: ReactNode;\n  name: string;\n  description?: ReactNode;\n  tooltipOnClick?: () => ReactNode;\n  places?: number;\n  rightNode?: ReactNode;\n  formData?: QueryFormData | null;\n  value?: JsonValue;\n  validationErrors?: any[];\n  hidden?: boolean;\n  renderTrigger?: boolean;\n  default?: JsonValue;\n  isVisible?: boolean;\n  resetOnHide?: boolean;\n};\n\n/**\n *\n */\nexport type ControlComponentProps<ValueType extends JsonValue = JsonValue> =\n  Omit<ControlProps, 'value'> & BaseControlComponentProps<ValueType>;\n\nconst StyledControl = styled.div`\n  padding-bottom: ${({ theme }) => theme.gridUnit * 4}px;\n`;\n\nexport default function Control(props: ControlProps) {\n  const {\n    actions: { setControlValue },\n    name,\n    type,\n    hidden,\n    isVisible,\n    resetOnHide = true,\n  } = props;\n\n  const [hovered, setHovered] = useState(false);\n  const wasVisible = usePrevious(isVisible);\n  const onChange = useCallback(\n    (value: any, errors: any[]) => setControlValue(name, value, errors),\n    [name, setControlValue],\n  );\n\n  useEffect(() => {\n    if (\n      wasVisible === true &&\n      isVisible === false &&\n      props.default !== undefined &&\n      !isEqual(props.value, props.default) &&\n      resetOnHide\n    ) {\n      // reset control value if setting to invisible\n      setControlValue?.(name, props.default);\n    }\n  }, [\n    name,\n    wasVisible,\n    isVisible,\n    setControlValue,\n    props.value,\n    props.default,\n  ]);\n\n  if (!type || isVisible === false) return null;\n\n  const ControlComponent = typeof type === 'string' ? controlMap[type] : type;\n  if (!ControlComponent) {\n    // eslint-disable-next-line no-console\n    console.warn(`Unknown controlType: ${type}`);\n    return null;\n  }\n\n  return (\n    <StyledControl\n      className=\"Control\"\n      data-test={name}\n      style={hidden ? { display: 'none' } : undefined}\n      onMouseEnter={() => setHovered(true)}\n      onMouseLeave={() => setHovered(false)}\n    >\n      <ErrorBoundary>\n        <ControlComponent onChange={onChange} hovered={hovered} {...props} />\n      </ErrorBoundary>\n    </StyledControl>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}