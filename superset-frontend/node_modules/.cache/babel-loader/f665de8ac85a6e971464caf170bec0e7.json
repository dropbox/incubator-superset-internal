{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport PropTypes from 'prop-types';\nimport { t } from '@superset-ui/core';\n\nconst addSeparators = function (nStr, thousandsSep, decimalSep) {\n  const x = String(nStr).split('.');\n  let x1 = x[0];\n  const x2 = x.length > 1 ? decimalSep + x[1] : '';\n  const rgx = /(\\d+)(\\d{3})/;\n  while (rgx.test(x1)) {\n    x1 = x1.replace(rgx, `$1${thousandsSep}$2`);\n  }\n  return x1 + x2;\n};\n\nconst numberFormat = function (optsIn) {\n  const defaults = {\n    digitsAfterDecimal: 2,\n    scaler: 1,\n    thousandsSep: ',',\n    decimalSep: '.',\n    prefix: '',\n    suffix: '' };\n\n  const opts = { ...defaults, ...optsIn };\n  return function (x) {\n    if (Number.isNaN(x) || !Number.isFinite(x)) {\n      return '';\n    }\n    const result = addSeparators(\n    (opts.scaler * x).toFixed(opts.digitsAfterDecimal),\n    opts.thousandsSep,\n    opts.decimalSep);\n\n    return `${opts.prefix}${result}${opts.suffix}`;\n  };\n};\n\nconst rx = /(\\d+)|(\\D+)/g;\nconst rd = /\\d/;\nconst rz = /^0/;\nconst naturalSort = (as, bs) => {\n  // nulls first\n  if (bs !== null && as === null) {\n    return -1;\n  }\n  if (as !== null && bs === null) {\n    return 1;\n  }\n\n  // then raw NaNs\n  if (typeof as === 'number' && Number.isNaN(as)) {\n    return -1;\n  }\n  if (typeof bs === 'number' && Number.isNaN(bs)) {\n    return 1;\n  }\n\n  // numbers and numbery strings group together\n  const nas = Number(as);\n  const nbs = Number(bs);\n  if (nas < nbs) {\n    return -1;\n  }\n  if (nas > nbs) {\n    return 1;\n  }\n\n  // within that, true numbers before numbery strings\n  if (typeof as === 'number' && typeof bs !== 'number') {\n    return -1;\n  }\n  if (typeof bs === 'number' && typeof as !== 'number') {\n    return 1;\n  }\n  if (typeof as === 'number' && typeof bs === 'number') {\n    return 0;\n  }\n\n  // 'Infinity' is a textual number, so less than 'A'\n  if (Number.isNaN(nbs) && !Number.isNaN(nas)) {\n    return -1;\n  }\n  if (Number.isNaN(nas) && !Number.isNaN(nbs)) {\n    return 1;\n  }\n\n  // finally, \"smart\" string sorting per http://stackoverflow.com/a/4373421/112871\n  let a = String(as);\n  let b = String(bs);\n  if (a === b) {\n    return 0;\n  }\n  if (!rd.test(a) || !rd.test(b)) {\n    return a > b ? 1 : -1;\n  }\n\n  // special treatment for strings containing digits\n  a = a.match(rx);\n  b = b.match(rx);\n  while (a.length && b.length) {\n    const a1 = a.shift();\n    const b1 = b.shift();\n    if (a1 !== b1) {\n      if (rd.test(a1) && rd.test(b1)) {\n        return a1.replace(rz, '.0') - b1.replace(rz, '.0');\n      }\n      return a1 > b1 ? 1 : -1;\n    }\n  }\n  return a.length - b.length;\n};\n\nconst sortAs = function (order) {\n  const mapping = {};\n\n  // sort lowercased keys similarly\n  const lMapping = {};\n  order.forEach((element, i) => {\n    mapping[element] = i;\n    if (typeof element === 'string') {\n      lMapping[element.toLowerCase()] = i;\n    }\n  });\n  return function (a, b) {\n    if (a in mapping && b in mapping) {\n      return mapping[a] - mapping[b];\n    }\n    if (a in mapping) {\n      return -1;\n    }\n    if (b in mapping) {\n      return 1;\n    }\n    if (a in lMapping && b in lMapping) {\n      return lMapping[a] - lMapping[b];\n    }\n    if (a in lMapping) {\n      return -1;\n    }\n    if (b in lMapping) {\n      return 1;\n    }\n    return naturalSort(a, b);\n  };\n};\n\nconst getSort = function (sorters, attr) {\n  if (sorters) {\n    if (typeof sorters === 'function') {\n      const sort = sorters(attr);\n      if (typeof sort === 'function') {\n        return sort;\n      }\n    } else if (attr in sorters) {\n      return sorters[attr];\n    }\n  }\n  return naturalSort;\n};\n\n// aggregator templates default to US number formatting but this is overridable\nconst usFmt = numberFormat();\nconst usFmtInt = numberFormat({ digitsAfterDecimal: 0 });\nconst usFmtPct = numberFormat({\n  digitsAfterDecimal: 1,\n  scaler: 100,\n  suffix: '%' });\n\n\nconst fmtNonString = (formatter) => (x) => typeof x === 'string' ? x : formatter(x);\n\nconst baseAggregatorTemplates = {\n  count(formatter) {if (formatter === void 0) {formatter = usFmtInt;}\n    return () =>\n    function () {\n      return {\n        count: 0,\n        push() {\n          this.count += 1;\n        },\n        value() {\n          return this.count;\n        },\n        format: formatter };\n\n    };\n  },\n\n  uniques(fn, formatter) {if (formatter === void 0) {formatter = usFmtInt;}\n    return function (_ref) {let [attr] = _ref;\n      return function () {\n        return {\n          uniq: [],\n          push(record) {var _context;\n            if (!_includesInstanceProperty(_context = Array.from(this.uniq)).call(_context, record[attr])) {\n              this.uniq.push(record[attr]);\n            }\n          },\n          value() {\n            return fn(this.uniq);\n          },\n          format: fmtNonString(formatter),\n          numInputs: typeof attr !== 'undefined' ? 0 : 1 };\n\n      };\n    };\n  },\n\n  sum(formatter) {if (formatter === void 0) {formatter = usFmt;}\n    return function (_ref2) {let [attr] = _ref2;\n      return function () {\n        return {\n          sum: 0,\n          push(record) {\n            if (Number.isNaN(Number(record[attr]))) {\n              this.sum = record[attr];\n            } else {\n              this.sum += parseFloat(record[attr]);\n            }\n          },\n          value() {\n            return this.sum;\n          },\n          format: fmtNonString(formatter),\n          numInputs: typeof attr !== 'undefined' ? 0 : 1 };\n\n      };\n    };\n  },\n\n  extremes(mode, formatter) {if (formatter === void 0) {formatter = usFmt;}\n    return function (_ref3) {let [attr] = _ref3;\n      return function (data) {\n        return {\n          val: null,\n          sorter: getSort(\n          typeof data !== 'undefined' ? data.sorters : null,\n          attr),\n\n          push(record) {var _context2;\n            const x = record[attr];\n            if (_includesInstanceProperty(_context2 = ['min', 'max']).call(_context2, mode)) {\n              const coercedValue = Number(x);\n              if (Number.isNaN(coercedValue)) {\n                this.val =\n                !this.val ||\n                mode === 'min' && x < this.val ||\n                mode === 'max' && x > this.val ?\n                x :\n                this.val;\n              } else {\n                this.val = Math[mode](\n                coercedValue,\n                this.val !== null ? this.val : coercedValue);\n\n              }\n            } else if (\n            mode === 'first' &&\n            this.sorter(x, this.val !== null ? this.val : x) <= 0)\n            {\n              this.val = x;\n            } else if (\n            mode === 'last' &&\n            this.sorter(x, this.val !== null ? this.val : x) >= 0)\n            {\n              this.val = x;\n            }\n          },\n          value() {\n            return this.val;\n          },\n          format(x) {\n            if (typeof x === 'number') {\n              return formatter(x);\n            }\n            return x;\n          },\n          numInputs: typeof attr !== 'undefined' ? 0 : 1 };\n\n      };\n    };\n  },\n\n  quantile(q, formatter) {if (formatter === void 0) {formatter = usFmt;}\n    return function (_ref4) {let [attr] = _ref4;\n      return function () {\n        return {\n          vals: [],\n          strMap: {},\n          push(record) {\n            const val = record[attr];\n            const x = Number(val);\n\n            if (Number.isNaN(x)) {\n              this.strMap[val] = (this.strMap[val] || 0) + 1;\n            } else {\n              this.vals.push(x);\n            }\n          },\n          value() {\n            if (\n            this.vals.length === 0 &&\n            Object.keys(this.strMap).length === 0)\n            {\n              return null;\n            }\n\n            if (Object.keys(this.strMap).length) {\n              const values = Object.values(this.strMap).sort((a, b) => a - b);\n              const middle = Math.floor(values.length / 2);\n\n              const keys = Object.keys(this.strMap);\n              return keys.length % 2 !== 0 ?\n              keys[middle] :\n              (keys[middle - 1] + keys[middle]) / 2;\n            }\n\n            this.vals.sort((a, b) => a - b);\n            const i = (this.vals.length - 1) * q;\n            return (this.vals[Math.floor(i)] + this.vals[Math.ceil(i)]) / 2.0;\n          },\n          format: fmtNonString(formatter),\n          numInputs: typeof attr !== 'undefined' ? 0 : 1 };\n\n      };\n    };\n  },\n\n  runningStat(mode, ddof, formatter) {if (mode === void 0) {mode = 'mean';}if (ddof === void 0) {ddof = 1;}if (formatter === void 0) {formatter = usFmt;}\n    return function (_ref5) {let [attr] = _ref5;\n      return function () {\n        return {\n          n: 0.0,\n          m: 0.0,\n          s: 0.0,\n          strValue: null,\n          push(record) {\n            const x = Number(record[attr]);\n            if (Number.isNaN(x)) {\n              this.strValue =\n              typeof record[attr] === 'string' ? record[attr] : this.strValue;\n              return;\n            }\n            this.n += 1.0;\n            if (this.n === 1.0) {\n              this.m = x;\n            }\n            const mNew = this.m + (x - this.m) / this.n;\n            this.s += (x - this.m) * (x - mNew);\n            this.m = mNew;\n          },\n          value() {\n            if (this.strValue) {\n              return this.strValue;\n            }\n\n            if (mode === 'mean') {\n              if (this.n === 0) {\n                return 0 / 0;\n              }\n              return this.m;\n            }\n            if (this.n <= ddof) {\n              return 0;\n            }\n            switch (mode) {\n              case 'var':\n                return this.s / (this.n - ddof);\n              case 'stdev':\n                return Math.sqrt(this.s / (this.n - ddof));\n              default:\n                throw new Error('unknown mode for runningStat');}\n\n          },\n          format: fmtNonString(formatter),\n          numInputs: typeof attr !== 'undefined' ? 0 : 1 };\n\n      };\n    };\n  },\n\n  sumOverSum(formatter) {if (formatter === void 0) {formatter = usFmt;}\n    return function (_ref6) {let [num, denom] = _ref6;\n      return function () {\n        return {\n          sumNum: 0,\n          sumDenom: 0,\n          push(record) {\n            if (!Number.isNaN(Number(record[num]))) {\n              this.sumNum += parseFloat(record[num]);\n            }\n            if (!Number.isNaN(Number(record[denom]))) {\n              this.sumDenom += parseFloat(record[denom]);\n            }\n          },\n          value() {\n            return this.sumNum / this.sumDenom;\n          },\n          format: formatter,\n          numInputs:\n          typeof num !== 'undefined' && typeof denom !== 'undefined' ? 0 : 2 };\n\n      };\n    };\n  },\n\n  fractionOf(wrapped, type, formatter) {if (type === void 0) {type = 'total';}if (formatter === void 0) {formatter = usFmtPct;}\n    return function () {for (var _len = arguments.length, x = new Array(_len), _key = 0; _key < _len; _key++) {x[_key] = arguments[_key];}return (\n        function (data, rowKey, colKey) {\n          return {\n            selector: { total: [[], []], row: [rowKey, []], col: [[], colKey] }[\n            type],\n\n            inner: wrapped(...Array.from(x || []))(data, rowKey, colKey),\n            push(record) {\n              this.inner.push(record);\n            },\n            format: fmtNonString(formatter),\n            value() {\n              const acc = data.\n              getAggregator(...Array.from(this.selector || [])).\n              inner.value();\n\n              if (typeof acc === 'string') {\n                return acc;\n              }\n\n              return this.inner.value() / acc;\n            },\n            numInputs: wrapped(...Array.from(x || []))().numInputs };\n\n        });};\n  } };\n\n\nconst extendedAggregatorTemplates = {\n  countUnique(f) {\n    return baseAggregatorTemplates.uniques((x) => x.length, f);\n  },\n  listUnique(s, f) {\n    return baseAggregatorTemplates.uniques((x) => x.join(s), f || ((x) => x));\n  },\n  max(f) {\n    return baseAggregatorTemplates.extremes('max', f);\n  },\n  min(f) {\n    return baseAggregatorTemplates.extremes('min', f);\n  },\n  first(f) {\n    return baseAggregatorTemplates.extremes('first', f);\n  },\n  last(f) {\n    return baseAggregatorTemplates.extremes('last', f);\n  },\n  median(f) {\n    return baseAggregatorTemplates.quantile(0.5, f);\n  },\n  average(f) {\n    return baseAggregatorTemplates.runningStat('mean', 1, f);\n  },\n  var(ddof, f) {\n    return baseAggregatorTemplates.runningStat('var', ddof, f);\n  },\n  stdev(ddof, f) {\n    return baseAggregatorTemplates.runningStat('stdev', ddof, f);\n  } };\n\n\nconst aggregatorTemplates = {\n  ...baseAggregatorTemplates,\n  ...extendedAggregatorTemplates };\n\n\n// default aggregators & renderers use US naming and number formatting\nconst aggregators = ((tpl) => ({\n  Count: tpl.count(usFmtInt),\n  'Count Unique Values': tpl.countUnique(usFmtInt),\n  'List Unique Values': tpl.listUnique(', '),\n  Sum: tpl.sum(usFmt),\n  'Integer Sum': tpl.sum(usFmtInt),\n  Average: tpl.average(usFmt),\n  Median: tpl.median(usFmt),\n  'Sample Variance': tpl.var(1, usFmt),\n  'Sample Standard Deviation': tpl.stdev(1, usFmt),\n  Minimum: tpl.min(usFmt),\n  Maximum: tpl.max(usFmt),\n  First: tpl.first(usFmt),\n  Last: tpl.last(usFmt),\n  'Sum over Sum': tpl.sumOverSum(usFmt),\n  'Sum as Fraction of Total': tpl.fractionOf(tpl.sum(), 'total', usFmtPct),\n  'Sum as Fraction of Rows': tpl.fractionOf(tpl.sum(), 'row', usFmtPct),\n  'Sum as Fraction of Columns': tpl.fractionOf(tpl.sum(), 'col', usFmtPct),\n  'Count as Fraction of Total': tpl.fractionOf(tpl.count(), 'total', usFmtPct),\n  'Count as Fraction of Rows': tpl.fractionOf(tpl.count(), 'row', usFmtPct),\n  'Count as Fraction of Columns': tpl.fractionOf(tpl.count(), 'col', usFmtPct) }))(\naggregatorTemplates);\n\nconst locales = {\n  en: {\n    aggregators,\n    localeStrings: {\n      renderError: 'An error occurred rendering the PivotTable results.',\n      computeError: 'An error occurred computing the PivotTable results.',\n      uiRenderError: 'An error occurred rendering the PivotTable UI.',\n      selectAll: 'Select All',\n      selectNone: 'Select None',\n      tooMany: '(too many to list)',\n      filterResults: 'Filter values',\n      apply: 'Apply',\n      cancel: 'Cancel',\n      totals: 'Totals',\n      vs: 'vs',\n      by: 'by' } } };\n\n\n\n\n// dateFormat deriver l10n requires month and day names to be passed in directly\nconst mthNamesEn = [\n'Jan',\n'Feb',\n'Mar',\n'Apr',\n'May',\n'Jun',\n'Jul',\n'Aug',\n'Sep',\n'Oct',\n'Nov',\n'Dec'];\n\nconst dayNamesEn = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\nconst zeroPad = (number) => `0${number}`.substr(-2, 2); // eslint-disable-line no-magic-numbers\n\nconst derivers = {\n  bin(col, binWidth) {\n    return (record) => record[col] - record[col] % binWidth;\n  },\n  dateFormat(\n  col,\n  formatString,\n  utcOutput,\n  mthNames,\n  dayNames)\n  {if (utcOutput === void 0) {utcOutput = false;}if (mthNames === void 0) {mthNames = mthNamesEn;}if (dayNames === void 0) {dayNames = dayNamesEn;}\n    const utc = utcOutput ? 'UTC' : '';\n    return function (record) {\n      const date = new Date(Date.parse(record[col]));\n      if (Number.isNaN(date)) {\n        return '';\n      }\n      return formatString.replace(/%(.)/g, function (m, p) {\n        switch (p) {\n          case 'y':\n            return date[`get${utc}FullYear`]();\n          case 'm':\n            return zeroPad(date[`get${utc}Month`]() + 1);\n          case 'n':\n            return mthNames[date[`get${utc}Month`]()];\n          case 'd':\n            return zeroPad(date[`get${utc}Date`]());\n          case 'w':\n            return dayNames[date[`get${utc}Day`]()];\n          case 'x':\n            return date[`get${utc}Day`]();\n          case 'H':\n            return zeroPad(date[`get${utc}Hours`]());\n          case 'M':\n            return zeroPad(date[`get${utc}Minutes`]());\n          case 'S':\n            return zeroPad(date[`get${utc}Seconds`]());\n          default:\n            return `%${p}`;}\n\n      });\n    };\n  } };\n\n\n// Given an array of attribute values, convert to a key that\n// can be used in objects.\nconst flatKey = (attrVals) => attrVals.join(String.fromCharCode(0));\n\n/*\nData Model class\n*/\n\nclass PivotData {\n  constructor(inputProps, subtotals) {if (inputProps === void 0) {inputProps = {};}if (subtotals === void 0) {subtotals = {};}\n    this.props = { ...PivotData.defaultProps, ...inputProps };\n    this.processRecord = this.processRecord.bind(this);\n    PropTypes.checkPropTypes(\n    PivotData.propTypes,\n    this.props,\n    'prop',\n    'PivotData');\n\n\n    this.aggregator = this.props.\n    aggregatorsFactory(this.props.defaultFormatter)[\n    this.props.aggregatorName](this.props.vals);\n    this.formattedAggregators =\n    this.props.customFormatters &&\n    Object.entries(this.props.customFormatters).reduce(\n    (acc, _ref7) => {let [key, columnFormatter] = _ref7;\n      acc[key] = {};\n      Object.entries(columnFormatter).forEach((_ref8) => {let [column, formatter] = _ref8;\n        acc[key][column] = this.props.\n        aggregatorsFactory(formatter)[\n        this.props.aggregatorName](this.props.vals);\n      });\n      return acc;\n    },\n    {});\n\n    this.tree = {};\n    this.rowKeys = [];\n    this.colKeys = [];\n    this.rowTotals = {};\n    this.colTotals = {};\n    this.allTotal = this.aggregator(this, [], []);\n    this.subtotals = subtotals;\n    this.sorted = false;\n\n    // iterate through input, accumulating data for cells\n    PivotData.forEachRecord(this.props.data, this.processRecord);\n  }\n\n  getFormattedAggregator(record, totalsKeys) {\n    if (!this.formattedAggregators) {\n      return this.aggregator;\n    }\n    const [groupName, groupValue] =\n    Object.entries(record).find(\n    (_ref9) => {let [name, value] = _ref9;return (\n        this.formattedAggregators[name] &&\n        this.formattedAggregators[name][value]);}) ||\n    [];\n    if (\n    !groupName ||\n    !groupValue ||\n    totalsKeys && !_includesInstanceProperty(totalsKeys).call(totalsKeys, groupValue))\n    {\n      return this.aggregator;\n    }\n    return this.formattedAggregators[groupName][groupValue] || this.aggregator;\n  }\n\n  arrSort(attrs, partialOnTop, reverse) {if (reverse === void 0) {reverse = false;}\n    const sortersArr = attrs.map((a) => getSort(this.props.sorters, a));\n    return function (a, b) {\n      const limit = Math.min(a.length, b.length);\n      for (let i = 0; i < limit; i += 1) {\n        const sorter = sortersArr[i];\n        const comparison = reverse ? sorter(b[i], a[i]) : sorter(a[i], b[i]);\n        if (comparison !== 0) {\n          return comparison;\n        }\n      }\n      return partialOnTop ? a.length - b.length : b.length - a.length;\n    };\n  }\n\n  sortKeys() {\n    if (!this.sorted) {\n      this.sorted = true;\n      const v = (r, c) => this.getAggregator(r, c).value();\n      switch (this.props.rowOrder) {\n        case 'key_z_to_a':\n          this.rowKeys.sort(\n          this.arrSort(this.props.rows, this.subtotals.rowPartialOnTop, true));\n\n          break;\n        case 'value_a_to_z':\n          this.rowKeys.sort((a, b) => naturalSort(v(a, []), v(b, [])));\n          break;\n        case 'value_z_to_a':\n          this.rowKeys.sort((a, b) => -naturalSort(v(a, []), v(b, [])));\n          break;\n        default:\n          this.rowKeys.sort(\n          this.arrSort(this.props.rows, this.subtotals.rowPartialOnTop));}\n\n\n      switch (this.props.colOrder) {\n        case 'key_z_to_a':\n          this.colKeys.sort(\n          this.arrSort(this.props.cols, this.subtotals.colPartialOnTop, true));\n\n          break;\n        case 'value_a_to_z':\n          this.colKeys.sort((a, b) => naturalSort(v([], a), v([], b)));\n          break;\n        case 'value_z_to_a':\n          this.colKeys.sort((a, b) => -naturalSort(v([], a), v([], b)));\n          break;\n        default:\n          this.colKeys.sort(\n          this.arrSort(this.props.cols, this.subtotals.colPartialOnTop));}\n\n\n    }\n  }\n\n  getColKeys() {\n    this.sortKeys();\n    return this.colKeys;\n  }\n\n  getRowKeys() {\n    this.sortKeys();\n    return this.rowKeys;\n  }\n\n  processRecord(record) {\n    // this code is called in a tight loop\n    const colKey = [];\n    const rowKey = [];\n    this.props.cols.forEach((col) => {\n      colKey.push(col in record ? record[col] : 'null');\n    });\n    this.props.rows.forEach((row) => {\n      rowKey.push(row in record ? record[row] : 'null');\n    });\n\n    this.allTotal.push(record);\n\n    const rowStart = this.subtotals.rowEnabled ? 1 : Math.max(1, rowKey.length);\n    const colStart = this.subtotals.colEnabled ? 1 : Math.max(1, colKey.length);\n\n    let isRowSubtotal;\n    let isColSubtotal;\n    for (let ri = rowStart; ri <= rowKey.length; ri += 1) {\n      isRowSubtotal = ri < rowKey.length;\n      const fRowKey = rowKey.slice(0, ri);\n      const flatRowKey = flatKey(fRowKey);\n      if (!this.rowTotals[flatRowKey]) {\n        this.rowKeys.push(fRowKey);\n        this.rowTotals[flatRowKey] = this.getFormattedAggregator(\n        record,\n        rowKey)(\n        this, fRowKey, []);\n      }\n      this.rowTotals[flatRowKey].push(record);\n      this.rowTotals[flatRowKey].isSubtotal = isRowSubtotal;\n    }\n\n    for (let ci = colStart; ci <= colKey.length; ci += 1) {\n      isColSubtotal = ci < colKey.length;\n      const fColKey = colKey.slice(0, ci);\n      const flatColKey = flatKey(fColKey);\n      if (!this.colTotals[flatColKey]) {\n        this.colKeys.push(fColKey);\n        this.colTotals[flatColKey] = this.getFormattedAggregator(\n        record,\n        colKey)(\n        this, [], fColKey);\n      }\n      this.colTotals[flatColKey].push(record);\n      this.colTotals[flatColKey].isSubtotal = isColSubtotal;\n    }\n\n    // And now fill in for all the sub-cells.\n    for (let ri = rowStart; ri <= rowKey.length; ri += 1) {\n      isRowSubtotal = ri < rowKey.length;\n      const fRowKey = rowKey.slice(0, ri);\n      const flatRowKey = flatKey(fRowKey);\n      if (!this.tree[flatRowKey]) {\n        this.tree[flatRowKey] = {};\n      }\n      for (let ci = colStart; ci <= colKey.length; ci += 1) {\n        isColSubtotal = ci < colKey.length;\n        const fColKey = colKey.slice(0, ci);\n        const flatColKey = flatKey(fColKey);\n        if (!this.tree[flatRowKey][flatColKey]) {\n          this.tree[flatRowKey][flatColKey] = this.getFormattedAggregator(\n          record)(\n          this, fRowKey, fColKey);\n        }\n        this.tree[flatRowKey][flatColKey].push(record);\n\n        this.tree[flatRowKey][flatColKey].isRowSubtotal = isRowSubtotal;\n        this.tree[flatRowKey][flatColKey].isColSubtotal = isColSubtotal;\n        this.tree[flatRowKey][flatColKey].isSubtotal =\n        isRowSubtotal || isColSubtotal;\n      }\n    }\n  }\n\n  getAggregator(rowKey, colKey) {\n    let agg;\n    const flatRowKey = flatKey(rowKey);\n    const flatColKey = flatKey(colKey);\n    if (rowKey.length === 0 && colKey.length === 0) {\n      agg = this.allTotal;\n    } else if (rowKey.length === 0) {\n      agg = this.colTotals[flatColKey];\n    } else if (colKey.length === 0) {\n      agg = this.rowTotals[flatRowKey];\n    } else {\n      agg = this.tree[flatRowKey][flatColKey];\n    }\n    return (\n      agg || {\n        value() {\n          return null;\n        },\n        format() {\n          return '';\n        } });\n\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\n// can handle arrays or jQuery selections of tables\nPivotData.forEachRecord = function (input, processRecord) {\n  if (Array.isArray(input)) {\n    // array of objects\n    return input.map((record) => processRecord(record));\n  }\n  throw new Error(t('Unknown input format'));\n};\n\nPivotData.defaultProps = {\n  aggregators,\n  cols: [],\n  rows: [],\n  vals: [],\n  aggregatorName: 'Count',\n  sorters: {},\n  rowOrder: 'key_a_to_z',\n  colOrder: 'key_a_to_z' };\n\n\nPivotData.propTypes = {\n  data: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.func]).\n  isRequired,\n  aggregatorName: PropTypes.string,\n  cols: PropTypes.arrayOf(PropTypes.string),\n  rows: PropTypes.arrayOf(PropTypes.string),\n  vals: PropTypes.arrayOf(PropTypes.string),\n  valueFilter: PropTypes.objectOf(PropTypes.objectOf(PropTypes.bool)),\n  sorters: PropTypes.oneOfType([\n  PropTypes.func,\n  PropTypes.objectOf(PropTypes.func)]),\n\n  derivedAttributes: PropTypes.objectOf(PropTypes.func),\n  rowOrder: PropTypes.oneOf([\n  'key_a_to_z',\n  'key_z_to_a',\n  'value_a_to_z',\n  'value_z_to_a']),\n\n  colOrder: PropTypes.oneOf([\n  'key_a_to_z',\n  'key_z_to_a',\n  'value_a_to_z',\n  'value_z_to_a']) };\n\n\n\nexport {\naggregatorTemplates,\naggregators,\nderivers,\nlocales,\nnaturalSort,\nnumberFormat,\ngetSort,\nsortAs,\nflatKey,\nPivotData };;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(addSeparators, \"addSeparators\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/utilities.js\");reactHotLoader.register(numberFormat, \"numberFormat\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/utilities.js\");reactHotLoader.register(rx, \"rx\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/utilities.js\");reactHotLoader.register(rd, \"rd\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/utilities.js\");reactHotLoader.register(rz, \"rz\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/utilities.js\");reactHotLoader.register(naturalSort, \"naturalSort\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/utilities.js\");reactHotLoader.register(sortAs, \"sortAs\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/utilities.js\");reactHotLoader.register(getSort, \"getSort\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/utilities.js\");reactHotLoader.register(usFmt, \"usFmt\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/utilities.js\");reactHotLoader.register(usFmtInt, \"usFmtInt\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/utilities.js\");reactHotLoader.register(usFmtPct, \"usFmtPct\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/utilities.js\");reactHotLoader.register(fmtNonString, \"fmtNonString\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/utilities.js\");reactHotLoader.register(baseAggregatorTemplates, \"baseAggregatorTemplates\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/utilities.js\");reactHotLoader.register(extendedAggregatorTemplates, \"extendedAggregatorTemplates\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/utilities.js\");reactHotLoader.register(aggregatorTemplates, \"aggregatorTemplates\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/utilities.js\");reactHotLoader.register(aggregators, \"aggregators\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/utilities.js\");reactHotLoader.register(locales, \"locales\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/utilities.js\");reactHotLoader.register(mthNamesEn, \"mthNamesEn\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/utilities.js\");reactHotLoader.register(dayNamesEn, \"dayNamesEn\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/utilities.js\");reactHotLoader.register(zeroPad, \"zeroPad\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/utilities.js\");reactHotLoader.register(derivers, \"derivers\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/utilities.js\");reactHotLoader.register(flatKey, \"flatKey\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/utilities.js\");reactHotLoader.register(PivotData, \"PivotData\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/utilities.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["PropTypes","t","addSeparators","nStr","thousandsSep","decimalSep","x","String","split","x1","x2","length","rgx","test","replace","numberFormat","optsIn","defaults","digitsAfterDecimal","scaler","prefix","suffix","opts","Number","isNaN","isFinite","result","toFixed","rx","rd","rz","naturalSort","as","bs","nas","nbs","a","b","match","a1","shift","b1","sortAs","order","mapping","lMapping","forEach","element","i","toLowerCase","getSort","sorters","attr","sort","usFmt","usFmtInt","usFmtPct","fmtNonString","formatter","baseAggregatorTemplates","count","push","value","format","uniques","fn","uniq","record","Array","from","numInputs","sum","parseFloat","extremes","mode","data","val","sorter","coercedValue","Math","quantile","q","vals","strMap","Object","keys","values","middle","floor","ceil","runningStat","ddof","n","m","s","strValue","mNew","sqrt","Error","sumOverSum","num","denom","sumNum","sumDenom","fractionOf","wrapped","type","rowKey","colKey","selector","total","row","col","inner","acc","getAggregator","extendedAggregatorTemplates","countUnique","f","listUnique","join","max","min","first","last","median","average","var","stdev","aggregatorTemplates","aggregators","tpl","Count","Sum","Average","Median","Minimum","Maximum","First","Last","locales","en","localeStrings","renderError","computeError","uiRenderError","selectAll","selectNone","tooMany","filterResults","apply","cancel","totals","vs","by","mthNamesEn","dayNamesEn","zeroPad","number","substr","derivers","bin","binWidth","dateFormat","formatString","utcOutput","mthNames","dayNames","utc","date","Date","parse","p","flatKey","attrVals","fromCharCode","PivotData","constructor","inputProps","subtotals","props","defaultProps","processRecord","bind","checkPropTypes","propTypes","aggregator","aggregatorsFactory","defaultFormatter","aggregatorName","formattedAggregators","customFormatters","entries","reduce","key","columnFormatter","column","tree","rowKeys","colKeys","rowTotals","colTotals","allTotal","sorted","forEachRecord","getFormattedAggregator","totalsKeys","groupName","groupValue","find","name","arrSort","attrs","partialOnTop","reverse","sortersArr","map","limit","comparison","sortKeys","v","r","c","rowOrder","rows","rowPartialOnTop","colOrder","cols","colPartialOnTop","getColKeys","getRowKeys","rowStart","rowEnabled","colStart","colEnabled","isRowSubtotal","isColSubtotal","ri","fRowKey","slice","flatRowKey","isSubtotal","ci","fColKey","flatColKey","agg","input","isArray","oneOfType","array","object","func","isRequired","string","arrayOf","valueFilter","objectOf","bool","derivedAttributes","oneOf"],"sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-pivot-table/src/react-pivottable/utilities.js"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport PropTypes from 'prop-types';\nimport { t } from '@superset-ui/core';\n\nconst addSeparators = function (nStr, thousandsSep, decimalSep) {\n  const x = String(nStr).split('.');\n  let x1 = x[0];\n  const x2 = x.length > 1 ? decimalSep + x[1] : '';\n  const rgx = /(\\d+)(\\d{3})/;\n  while (rgx.test(x1)) {\n    x1 = x1.replace(rgx, `$1${thousandsSep}$2`);\n  }\n  return x1 + x2;\n};\n\nconst numberFormat = function (optsIn) {\n  const defaults = {\n    digitsAfterDecimal: 2,\n    scaler: 1,\n    thousandsSep: ',',\n    decimalSep: '.',\n    prefix: '',\n    suffix: '',\n  };\n  const opts = { ...defaults, ...optsIn };\n  return function (x) {\n    if (Number.isNaN(x) || !Number.isFinite(x)) {\n      return '';\n    }\n    const result = addSeparators(\n      (opts.scaler * x).toFixed(opts.digitsAfterDecimal),\n      opts.thousandsSep,\n      opts.decimalSep,\n    );\n    return `${opts.prefix}${result}${opts.suffix}`;\n  };\n};\n\nconst rx = /(\\d+)|(\\D+)/g;\nconst rd = /\\d/;\nconst rz = /^0/;\nconst naturalSort = (as, bs) => {\n  // nulls first\n  if (bs !== null && as === null) {\n    return -1;\n  }\n  if (as !== null && bs === null) {\n    return 1;\n  }\n\n  // then raw NaNs\n  if (typeof as === 'number' && Number.isNaN(as)) {\n    return -1;\n  }\n  if (typeof bs === 'number' && Number.isNaN(bs)) {\n    return 1;\n  }\n\n  // numbers and numbery strings group together\n  const nas = Number(as);\n  const nbs = Number(bs);\n  if (nas < nbs) {\n    return -1;\n  }\n  if (nas > nbs) {\n    return 1;\n  }\n\n  // within that, true numbers before numbery strings\n  if (typeof as === 'number' && typeof bs !== 'number') {\n    return -1;\n  }\n  if (typeof bs === 'number' && typeof as !== 'number') {\n    return 1;\n  }\n  if (typeof as === 'number' && typeof bs === 'number') {\n    return 0;\n  }\n\n  // 'Infinity' is a textual number, so less than 'A'\n  if (Number.isNaN(nbs) && !Number.isNaN(nas)) {\n    return -1;\n  }\n  if (Number.isNaN(nas) && !Number.isNaN(nbs)) {\n    return 1;\n  }\n\n  // finally, \"smart\" string sorting per http://stackoverflow.com/a/4373421/112871\n  let a = String(as);\n  let b = String(bs);\n  if (a === b) {\n    return 0;\n  }\n  if (!rd.test(a) || !rd.test(b)) {\n    return a > b ? 1 : -1;\n  }\n\n  // special treatment for strings containing digits\n  a = a.match(rx);\n  b = b.match(rx);\n  while (a.length && b.length) {\n    const a1 = a.shift();\n    const b1 = b.shift();\n    if (a1 !== b1) {\n      if (rd.test(a1) && rd.test(b1)) {\n        return a1.replace(rz, '.0') - b1.replace(rz, '.0');\n      }\n      return a1 > b1 ? 1 : -1;\n    }\n  }\n  return a.length - b.length;\n};\n\nconst sortAs = function (order) {\n  const mapping = {};\n\n  // sort lowercased keys similarly\n  const lMapping = {};\n  order.forEach((element, i) => {\n    mapping[element] = i;\n    if (typeof element === 'string') {\n      lMapping[element.toLowerCase()] = i;\n    }\n  });\n  return function (a, b) {\n    if (a in mapping && b in mapping) {\n      return mapping[a] - mapping[b];\n    }\n    if (a in mapping) {\n      return -1;\n    }\n    if (b in mapping) {\n      return 1;\n    }\n    if (a in lMapping && b in lMapping) {\n      return lMapping[a] - lMapping[b];\n    }\n    if (a in lMapping) {\n      return -1;\n    }\n    if (b in lMapping) {\n      return 1;\n    }\n    return naturalSort(a, b);\n  };\n};\n\nconst getSort = function (sorters, attr) {\n  if (sorters) {\n    if (typeof sorters === 'function') {\n      const sort = sorters(attr);\n      if (typeof sort === 'function') {\n        return sort;\n      }\n    } else if (attr in sorters) {\n      return sorters[attr];\n    }\n  }\n  return naturalSort;\n};\n\n// aggregator templates default to US number formatting but this is overridable\nconst usFmt = numberFormat();\nconst usFmtInt = numberFormat({ digitsAfterDecimal: 0 });\nconst usFmtPct = numberFormat({\n  digitsAfterDecimal: 1,\n  scaler: 100,\n  suffix: '%',\n});\n\nconst fmtNonString = formatter => x => typeof x === 'string' ? x : formatter(x);\n\nconst baseAggregatorTemplates = {\n  count(formatter = usFmtInt) {\n    return () =>\n      function () {\n        return {\n          count: 0,\n          push() {\n            this.count += 1;\n          },\n          value() {\n            return this.count;\n          },\n          format: formatter,\n        };\n      };\n  },\n\n  uniques(fn, formatter = usFmtInt) {\n    return function ([attr]) {\n      return function () {\n        return {\n          uniq: [],\n          push(record) {\n            if (!Array.from(this.uniq).includes(record[attr])) {\n              this.uniq.push(record[attr]);\n            }\n          },\n          value() {\n            return fn(this.uniq);\n          },\n          format: fmtNonString(formatter),\n          numInputs: typeof attr !== 'undefined' ? 0 : 1,\n        };\n      };\n    };\n  },\n\n  sum(formatter = usFmt) {\n    return function ([attr]) {\n      return function () {\n        return {\n          sum: 0,\n          push(record) {\n            if (Number.isNaN(Number(record[attr]))) {\n              this.sum = record[attr];\n            } else {\n              this.sum += parseFloat(record[attr]);\n            }\n          },\n          value() {\n            return this.sum;\n          },\n          format: fmtNonString(formatter),\n          numInputs: typeof attr !== 'undefined' ? 0 : 1,\n        };\n      };\n    };\n  },\n\n  extremes(mode, formatter = usFmt) {\n    return function ([attr]) {\n      return function (data) {\n        return {\n          val: null,\n          sorter: getSort(\n            typeof data !== 'undefined' ? data.sorters : null,\n            attr,\n          ),\n          push(record) {\n            const x = record[attr];\n            if (['min', 'max'].includes(mode)) {\n              const coercedValue = Number(x);\n              if (Number.isNaN(coercedValue)) {\n                this.val =\n                  !this.val ||\n                  (mode === 'min' && x < this.val) ||\n                  (mode === 'max' && x > this.val)\n                    ? x\n                    : this.val;\n              } else {\n                this.val = Math[mode](\n                  coercedValue,\n                  this.val !== null ? this.val : coercedValue,\n                );\n              }\n            } else if (\n              mode === 'first' &&\n              this.sorter(x, this.val !== null ? this.val : x) <= 0\n            ) {\n              this.val = x;\n            } else if (\n              mode === 'last' &&\n              this.sorter(x, this.val !== null ? this.val : x) >= 0\n            ) {\n              this.val = x;\n            }\n          },\n          value() {\n            return this.val;\n          },\n          format(x) {\n            if (typeof x === 'number') {\n              return formatter(x);\n            }\n            return x;\n          },\n          numInputs: typeof attr !== 'undefined' ? 0 : 1,\n        };\n      };\n    };\n  },\n\n  quantile(q, formatter = usFmt) {\n    return function ([attr]) {\n      return function () {\n        return {\n          vals: [],\n          strMap: {},\n          push(record) {\n            const val = record[attr];\n            const x = Number(val);\n\n            if (Number.isNaN(x)) {\n              this.strMap[val] = (this.strMap[val] || 0) + 1;\n            } else {\n              this.vals.push(x);\n            }\n          },\n          value() {\n            if (\n              this.vals.length === 0 &&\n              Object.keys(this.strMap).length === 0\n            ) {\n              return null;\n            }\n\n            if (Object.keys(this.strMap).length) {\n              const values = Object.values(this.strMap).sort((a, b) => a - b);\n              const middle = Math.floor(values.length / 2);\n\n              const keys = Object.keys(this.strMap);\n              return keys.length % 2 !== 0\n                ? keys[middle]\n                : (keys[middle - 1] + keys[middle]) / 2;\n            }\n\n            this.vals.sort((a, b) => a - b);\n            const i = (this.vals.length - 1) * q;\n            return (this.vals[Math.floor(i)] + this.vals[Math.ceil(i)]) / 2.0;\n          },\n          format: fmtNonString(formatter),\n          numInputs: typeof attr !== 'undefined' ? 0 : 1,\n        };\n      };\n    };\n  },\n\n  runningStat(mode = 'mean', ddof = 1, formatter = usFmt) {\n    return function ([attr]) {\n      return function () {\n        return {\n          n: 0.0,\n          m: 0.0,\n          s: 0.0,\n          strValue: null,\n          push(record) {\n            const x = Number(record[attr]);\n            if (Number.isNaN(x)) {\n              this.strValue =\n                typeof record[attr] === 'string' ? record[attr] : this.strValue;\n              return;\n            }\n            this.n += 1.0;\n            if (this.n === 1.0) {\n              this.m = x;\n            }\n            const mNew = this.m + (x - this.m) / this.n;\n            this.s += (x - this.m) * (x - mNew);\n            this.m = mNew;\n          },\n          value() {\n            if (this.strValue) {\n              return this.strValue;\n            }\n\n            if (mode === 'mean') {\n              if (this.n === 0) {\n                return 0 / 0;\n              }\n              return this.m;\n            }\n            if (this.n <= ddof) {\n              return 0;\n            }\n            switch (mode) {\n              case 'var':\n                return this.s / (this.n - ddof);\n              case 'stdev':\n                return Math.sqrt(this.s / (this.n - ddof));\n              default:\n                throw new Error('unknown mode for runningStat');\n            }\n          },\n          format: fmtNonString(formatter),\n          numInputs: typeof attr !== 'undefined' ? 0 : 1,\n        };\n      };\n    };\n  },\n\n  sumOverSum(formatter = usFmt) {\n    return function ([num, denom]) {\n      return function () {\n        return {\n          sumNum: 0,\n          sumDenom: 0,\n          push(record) {\n            if (!Number.isNaN(Number(record[num]))) {\n              this.sumNum += parseFloat(record[num]);\n            }\n            if (!Number.isNaN(Number(record[denom]))) {\n              this.sumDenom += parseFloat(record[denom]);\n            }\n          },\n          value() {\n            return this.sumNum / this.sumDenom;\n          },\n          format: formatter,\n          numInputs:\n            typeof num !== 'undefined' && typeof denom !== 'undefined' ? 0 : 2,\n        };\n      };\n    };\n  },\n\n  fractionOf(wrapped, type = 'total', formatter = usFmtPct) {\n    return (...x) =>\n      function (data, rowKey, colKey) {\n        return {\n          selector: { total: [[], []], row: [rowKey, []], col: [[], colKey] }[\n            type\n          ],\n          inner: wrapped(...Array.from(x || []))(data, rowKey, colKey),\n          push(record) {\n            this.inner.push(record);\n          },\n          format: fmtNonString(formatter),\n          value() {\n            const acc = data\n              .getAggregator(...Array.from(this.selector || []))\n              .inner.value();\n\n            if (typeof acc === 'string') {\n              return acc;\n            }\n\n            return this.inner.value() / acc;\n          },\n          numInputs: wrapped(...Array.from(x || []))().numInputs,\n        };\n      };\n  },\n};\n\nconst extendedAggregatorTemplates = {\n  countUnique(f) {\n    return baseAggregatorTemplates.uniques(x => x.length, f);\n  },\n  listUnique(s, f) {\n    return baseAggregatorTemplates.uniques(x => x.join(s), f || (x => x));\n  },\n  max(f) {\n    return baseAggregatorTemplates.extremes('max', f);\n  },\n  min(f) {\n    return baseAggregatorTemplates.extremes('min', f);\n  },\n  first(f) {\n    return baseAggregatorTemplates.extremes('first', f);\n  },\n  last(f) {\n    return baseAggregatorTemplates.extremes('last', f);\n  },\n  median(f) {\n    return baseAggregatorTemplates.quantile(0.5, f);\n  },\n  average(f) {\n    return baseAggregatorTemplates.runningStat('mean', 1, f);\n  },\n  var(ddof, f) {\n    return baseAggregatorTemplates.runningStat('var', ddof, f);\n  },\n  stdev(ddof, f) {\n    return baseAggregatorTemplates.runningStat('stdev', ddof, f);\n  },\n};\n\nconst aggregatorTemplates = {\n  ...baseAggregatorTemplates,\n  ...extendedAggregatorTemplates,\n};\n\n// default aggregators & renderers use US naming and number formatting\nconst aggregators = (tpl => ({\n  Count: tpl.count(usFmtInt),\n  'Count Unique Values': tpl.countUnique(usFmtInt),\n  'List Unique Values': tpl.listUnique(', '),\n  Sum: tpl.sum(usFmt),\n  'Integer Sum': tpl.sum(usFmtInt),\n  Average: tpl.average(usFmt),\n  Median: tpl.median(usFmt),\n  'Sample Variance': tpl.var(1, usFmt),\n  'Sample Standard Deviation': tpl.stdev(1, usFmt),\n  Minimum: tpl.min(usFmt),\n  Maximum: tpl.max(usFmt),\n  First: tpl.first(usFmt),\n  Last: tpl.last(usFmt),\n  'Sum over Sum': tpl.sumOverSum(usFmt),\n  'Sum as Fraction of Total': tpl.fractionOf(tpl.sum(), 'total', usFmtPct),\n  'Sum as Fraction of Rows': tpl.fractionOf(tpl.sum(), 'row', usFmtPct),\n  'Sum as Fraction of Columns': tpl.fractionOf(tpl.sum(), 'col', usFmtPct),\n  'Count as Fraction of Total': tpl.fractionOf(tpl.count(), 'total', usFmtPct),\n  'Count as Fraction of Rows': tpl.fractionOf(tpl.count(), 'row', usFmtPct),\n  'Count as Fraction of Columns': tpl.fractionOf(tpl.count(), 'col', usFmtPct),\n}))(aggregatorTemplates);\n\nconst locales = {\n  en: {\n    aggregators,\n    localeStrings: {\n      renderError: 'An error occurred rendering the PivotTable results.',\n      computeError: 'An error occurred computing the PivotTable results.',\n      uiRenderError: 'An error occurred rendering the PivotTable UI.',\n      selectAll: 'Select All',\n      selectNone: 'Select None',\n      tooMany: '(too many to list)',\n      filterResults: 'Filter values',\n      apply: 'Apply',\n      cancel: 'Cancel',\n      totals: 'Totals',\n      vs: 'vs',\n      by: 'by',\n    },\n  },\n};\n\n// dateFormat deriver l10n requires month and day names to be passed in directly\nconst mthNamesEn = [\n  'Jan',\n  'Feb',\n  'Mar',\n  'Apr',\n  'May',\n  'Jun',\n  'Jul',\n  'Aug',\n  'Sep',\n  'Oct',\n  'Nov',\n  'Dec',\n];\nconst dayNamesEn = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\nconst zeroPad = number => `0${number}`.substr(-2, 2); // eslint-disable-line no-magic-numbers\n\nconst derivers = {\n  bin(col, binWidth) {\n    return record => record[col] - (record[col] % binWidth);\n  },\n  dateFormat(\n    col,\n    formatString,\n    utcOutput = false,\n    mthNames = mthNamesEn,\n    dayNames = dayNamesEn,\n  ) {\n    const utc = utcOutput ? 'UTC' : '';\n    return function (record) {\n      const date = new Date(Date.parse(record[col]));\n      if (Number.isNaN(date)) {\n        return '';\n      }\n      return formatString.replace(/%(.)/g, function (m, p) {\n        switch (p) {\n          case 'y':\n            return date[`get${utc}FullYear`]();\n          case 'm':\n            return zeroPad(date[`get${utc}Month`]() + 1);\n          case 'n':\n            return mthNames[date[`get${utc}Month`]()];\n          case 'd':\n            return zeroPad(date[`get${utc}Date`]());\n          case 'w':\n            return dayNames[date[`get${utc}Day`]()];\n          case 'x':\n            return date[`get${utc}Day`]();\n          case 'H':\n            return zeroPad(date[`get${utc}Hours`]());\n          case 'M':\n            return zeroPad(date[`get${utc}Minutes`]());\n          case 'S':\n            return zeroPad(date[`get${utc}Seconds`]());\n          default:\n            return `%${p}`;\n        }\n      });\n    };\n  },\n};\n\n// Given an array of attribute values, convert to a key that\n// can be used in objects.\nconst flatKey = attrVals => attrVals.join(String.fromCharCode(0));\n\n/*\nData Model class\n*/\n\nclass PivotData {\n  constructor(inputProps = {}, subtotals = {}) {\n    this.props = { ...PivotData.defaultProps, ...inputProps };\n    this.processRecord = this.processRecord.bind(this);\n    PropTypes.checkPropTypes(\n      PivotData.propTypes,\n      this.props,\n      'prop',\n      'PivotData',\n    );\n\n    this.aggregator = this.props\n      .aggregatorsFactory(this.props.defaultFormatter)\n      [this.props.aggregatorName](this.props.vals);\n    this.formattedAggregators =\n      this.props.customFormatters &&\n      Object.entries(this.props.customFormatters).reduce(\n        (acc, [key, columnFormatter]) => {\n          acc[key] = {};\n          Object.entries(columnFormatter).forEach(([column, formatter]) => {\n            acc[key][column] = this.props\n              .aggregatorsFactory(formatter)\n              [this.props.aggregatorName](this.props.vals);\n          });\n          return acc;\n        },\n        {},\n      );\n    this.tree = {};\n    this.rowKeys = [];\n    this.colKeys = [];\n    this.rowTotals = {};\n    this.colTotals = {};\n    this.allTotal = this.aggregator(this, [], []);\n    this.subtotals = subtotals;\n    this.sorted = false;\n\n    // iterate through input, accumulating data for cells\n    PivotData.forEachRecord(this.props.data, this.processRecord);\n  }\n\n  getFormattedAggregator(record, totalsKeys) {\n    if (!this.formattedAggregators) {\n      return this.aggregator;\n    }\n    const [groupName, groupValue] =\n      Object.entries(record).find(\n        ([name, value]) =>\n          this.formattedAggregators[name] &&\n          this.formattedAggregators[name][value],\n      ) || [];\n    if (\n      !groupName ||\n      !groupValue ||\n      (totalsKeys && !totalsKeys.includes(groupValue))\n    ) {\n      return this.aggregator;\n    }\n    return this.formattedAggregators[groupName][groupValue] || this.aggregator;\n  }\n\n  arrSort(attrs, partialOnTop, reverse = false) {\n    const sortersArr = attrs.map(a => getSort(this.props.sorters, a));\n    return function (a, b) {\n      const limit = Math.min(a.length, b.length);\n      for (let i = 0; i < limit; i += 1) {\n        const sorter = sortersArr[i];\n        const comparison = reverse ? sorter(b[i], a[i]) : sorter(a[i], b[i]);\n        if (comparison !== 0) {\n          return comparison;\n        }\n      }\n      return partialOnTop ? a.length - b.length : b.length - a.length;\n    };\n  }\n\n  sortKeys() {\n    if (!this.sorted) {\n      this.sorted = true;\n      const v = (r, c) => this.getAggregator(r, c).value();\n      switch (this.props.rowOrder) {\n        case 'key_z_to_a':\n          this.rowKeys.sort(\n            this.arrSort(this.props.rows, this.subtotals.rowPartialOnTop, true),\n          );\n          break;\n        case 'value_a_to_z':\n          this.rowKeys.sort((a, b) => naturalSort(v(a, []), v(b, [])));\n          break;\n        case 'value_z_to_a':\n          this.rowKeys.sort((a, b) => -naturalSort(v(a, []), v(b, [])));\n          break;\n        default:\n          this.rowKeys.sort(\n            this.arrSort(this.props.rows, this.subtotals.rowPartialOnTop),\n          );\n      }\n      switch (this.props.colOrder) {\n        case 'key_z_to_a':\n          this.colKeys.sort(\n            this.arrSort(this.props.cols, this.subtotals.colPartialOnTop, true),\n          );\n          break;\n        case 'value_a_to_z':\n          this.colKeys.sort((a, b) => naturalSort(v([], a), v([], b)));\n          break;\n        case 'value_z_to_a':\n          this.colKeys.sort((a, b) => -naturalSort(v([], a), v([], b)));\n          break;\n        default:\n          this.colKeys.sort(\n            this.arrSort(this.props.cols, this.subtotals.colPartialOnTop),\n          );\n      }\n    }\n  }\n\n  getColKeys() {\n    this.sortKeys();\n    return this.colKeys;\n  }\n\n  getRowKeys() {\n    this.sortKeys();\n    return this.rowKeys;\n  }\n\n  processRecord(record) {\n    // this code is called in a tight loop\n    const colKey = [];\n    const rowKey = [];\n    this.props.cols.forEach(col => {\n      colKey.push(col in record ? record[col] : 'null');\n    });\n    this.props.rows.forEach(row => {\n      rowKey.push(row in record ? record[row] : 'null');\n    });\n\n    this.allTotal.push(record);\n\n    const rowStart = this.subtotals.rowEnabled ? 1 : Math.max(1, rowKey.length);\n    const colStart = this.subtotals.colEnabled ? 1 : Math.max(1, colKey.length);\n\n    let isRowSubtotal;\n    let isColSubtotal;\n    for (let ri = rowStart; ri <= rowKey.length; ri += 1) {\n      isRowSubtotal = ri < rowKey.length;\n      const fRowKey = rowKey.slice(0, ri);\n      const flatRowKey = flatKey(fRowKey);\n      if (!this.rowTotals[flatRowKey]) {\n        this.rowKeys.push(fRowKey);\n        this.rowTotals[flatRowKey] = this.getFormattedAggregator(\n          record,\n          rowKey,\n        )(this, fRowKey, []);\n      }\n      this.rowTotals[flatRowKey].push(record);\n      this.rowTotals[flatRowKey].isSubtotal = isRowSubtotal;\n    }\n\n    for (let ci = colStart; ci <= colKey.length; ci += 1) {\n      isColSubtotal = ci < colKey.length;\n      const fColKey = colKey.slice(0, ci);\n      const flatColKey = flatKey(fColKey);\n      if (!this.colTotals[flatColKey]) {\n        this.colKeys.push(fColKey);\n        this.colTotals[flatColKey] = this.getFormattedAggregator(\n          record,\n          colKey,\n        )(this, [], fColKey);\n      }\n      this.colTotals[flatColKey].push(record);\n      this.colTotals[flatColKey].isSubtotal = isColSubtotal;\n    }\n\n    // And now fill in for all the sub-cells.\n    for (let ri = rowStart; ri <= rowKey.length; ri += 1) {\n      isRowSubtotal = ri < rowKey.length;\n      const fRowKey = rowKey.slice(0, ri);\n      const flatRowKey = flatKey(fRowKey);\n      if (!this.tree[flatRowKey]) {\n        this.tree[flatRowKey] = {};\n      }\n      for (let ci = colStart; ci <= colKey.length; ci += 1) {\n        isColSubtotal = ci < colKey.length;\n        const fColKey = colKey.slice(0, ci);\n        const flatColKey = flatKey(fColKey);\n        if (!this.tree[flatRowKey][flatColKey]) {\n          this.tree[flatRowKey][flatColKey] = this.getFormattedAggregator(\n            record,\n          )(this, fRowKey, fColKey);\n        }\n        this.tree[flatRowKey][flatColKey].push(record);\n\n        this.tree[flatRowKey][flatColKey].isRowSubtotal = isRowSubtotal;\n        this.tree[flatRowKey][flatColKey].isColSubtotal = isColSubtotal;\n        this.tree[flatRowKey][flatColKey].isSubtotal =\n          isRowSubtotal || isColSubtotal;\n      }\n    }\n  }\n\n  getAggregator(rowKey, colKey) {\n    let agg;\n    const flatRowKey = flatKey(rowKey);\n    const flatColKey = flatKey(colKey);\n    if (rowKey.length === 0 && colKey.length === 0) {\n      agg = this.allTotal;\n    } else if (rowKey.length === 0) {\n      agg = this.colTotals[flatColKey];\n    } else if (colKey.length === 0) {\n      agg = this.rowTotals[flatRowKey];\n    } else {\n      agg = this.tree[flatRowKey][flatColKey];\n    }\n    return (\n      agg || {\n        value() {\n          return null;\n        },\n        format() {\n          return '';\n        },\n      }\n    );\n  }\n}\n\n// can handle arrays or jQuery selections of tables\nPivotData.forEachRecord = function (input, processRecord) {\n  if (Array.isArray(input)) {\n    // array of objects\n    return input.map(record => processRecord(record));\n  }\n  throw new Error(t('Unknown input format'));\n};\n\nPivotData.defaultProps = {\n  aggregators,\n  cols: [],\n  rows: [],\n  vals: [],\n  aggregatorName: 'Count',\n  sorters: {},\n  rowOrder: 'key_a_to_z',\n  colOrder: 'key_a_to_z',\n};\n\nPivotData.propTypes = {\n  data: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.func])\n    .isRequired,\n  aggregatorName: PropTypes.string,\n  cols: PropTypes.arrayOf(PropTypes.string),\n  rows: PropTypes.arrayOf(PropTypes.string),\n  vals: PropTypes.arrayOf(PropTypes.string),\n  valueFilter: PropTypes.objectOf(PropTypes.objectOf(PropTypes.bool)),\n  sorters: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.objectOf(PropTypes.func),\n  ]),\n  derivedAttributes: PropTypes.objectOf(PropTypes.func),\n  rowOrder: PropTypes.oneOf([\n    'key_a_to_z',\n    'key_z_to_a',\n    'value_a_to_z',\n    'value_z_to_a',\n  ]),\n  colOrder: PropTypes.oneOf([\n    'key_a_to_z',\n    'key_z_to_a',\n    'value_a_to_z',\n    'value_z_to_a',\n  ]),\n};\n\nexport {\n  aggregatorTemplates,\n  aggregators,\n  derivers,\n  locales,\n  naturalSort,\n  numberFormat,\n  getSort,\n  sortAs,\n  flatKey,\n  PivotData,\n};\n"],"mappings":"wYAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,CAAT,QAAkB,mBAAlB;;AAEA,MAAMC,aAAa,GAAG,UAAUC,IAAV,EAAgBC,YAAhB,EAA8BC,UAA9B,EAA0C;EAC9D,MAAMC,CAAC,GAAGC,MAAM,CAACJ,IAAD,CAAN,CAAaK,KAAb,CAAmB,GAAnB,CAAV;EACA,IAAIC,EAAE,GAAGH,CAAC,CAAC,CAAD,CAAV;EACA,MAAMI,EAAE,GAAGJ,CAAC,CAACK,MAAF,GAAW,CAAX,GAAeN,UAAU,GAAGC,CAAC,CAAC,CAAD,CAA7B,GAAmC,EAA9C;EACA,MAAMM,GAAG,GAAG,cAAZ;EACA,OAAOA,GAAG,CAACC,IAAJ,CAASJ,EAAT,CAAP,EAAqB;IACnBA,EAAE,GAAGA,EAAE,CAACK,OAAH,CAAWF,GAAX,EAAiB,KAAIR,YAAa,IAAlC,CAAL;EACD;EACD,OAAOK,EAAE,GAAGC,EAAZ;AACD,CATD;;AAWA,MAAMK,YAAY,GAAG,UAAUC,MAAV,EAAkB;EACrC,MAAMC,QAAQ,GAAG;IACfC,kBAAkB,EAAE,CADL;IAEfC,MAAM,EAAE,CAFO;IAGff,YAAY,EAAE,GAHC;IAIfC,UAAU,EAAE,GAJG;IAKfe,MAAM,EAAE,EALO;IAMfC,MAAM,EAAE,EANO,EAAjB;;EAQA,MAAMC,IAAI,GAAG,EAAE,GAAGL,QAAL,EAAe,GAAGD,MAAlB,EAAb;EACA,OAAO,UAAUV,CAAV,EAAa;IAClB,IAAIiB,MAAM,CAACC,KAAP,CAAalB,CAAb,KAAmB,CAACiB,MAAM,CAACE,QAAP,CAAgBnB,CAAhB,CAAxB,EAA4C;MAC1C,OAAO,EAAP;IACD;IACD,MAAMoB,MAAM,GAAGxB,aAAa;IAC1B,CAACoB,IAAI,CAACH,MAAL,GAAcb,CAAf,EAAkBqB,OAAlB,CAA0BL,IAAI,CAACJ,kBAA/B,CAD0B;IAE1BI,IAAI,CAAClB,YAFqB;IAG1BkB,IAAI,CAACjB,UAHqB,CAA5B;;IAKA,OAAQ,GAAEiB,IAAI,CAACF,MAAO,GAAEM,MAAO,GAAEJ,IAAI,CAACD,MAAO,EAA7C;EACD,CAVD;AAWD,CArBD;;AAuBA,MAAMO,EAAE,GAAG,cAAX;AACA,MAAMC,EAAE,GAAG,IAAX;AACA,MAAMC,EAAE,GAAG,IAAX;AACA,MAAMC,WAAW,GAAG,CAACC,EAAD,EAAKC,EAAL,KAAY;EAC9B;EACA,IAAIA,EAAE,KAAK,IAAP,IAAeD,EAAE,KAAK,IAA1B,EAAgC;IAC9B,OAAO,CAAC,CAAR;EACD;EACD,IAAIA,EAAE,KAAK,IAAP,IAAeC,EAAE,KAAK,IAA1B,EAAgC;IAC9B,OAAO,CAAP;EACD;;EAED;EACA,IAAI,OAAOD,EAAP,KAAc,QAAd,IAA0BT,MAAM,CAACC,KAAP,CAAaQ,EAAb,CAA9B,EAAgD;IAC9C,OAAO,CAAC,CAAR;EACD;EACD,IAAI,OAAOC,EAAP,KAAc,QAAd,IAA0BV,MAAM,CAACC,KAAP,CAAaS,EAAb,CAA9B,EAAgD;IAC9C,OAAO,CAAP;EACD;;EAED;EACA,MAAMC,GAAG,GAAGX,MAAM,CAACS,EAAD,CAAlB;EACA,MAAMG,GAAG,GAAGZ,MAAM,CAACU,EAAD,CAAlB;EACA,IAAIC,GAAG,GAAGC,GAAV,EAAe;IACb,OAAO,CAAC,CAAR;EACD;EACD,IAAID,GAAG,GAAGC,GAAV,EAAe;IACb,OAAO,CAAP;EACD;;EAED;EACA,IAAI,OAAOH,EAAP,KAAc,QAAd,IAA0B,OAAOC,EAAP,KAAc,QAA5C,EAAsD;IACpD,OAAO,CAAC,CAAR;EACD;EACD,IAAI,OAAOA,EAAP,KAAc,QAAd,IAA0B,OAAOD,EAAP,KAAc,QAA5C,EAAsD;IACpD,OAAO,CAAP;EACD;EACD,IAAI,OAAOA,EAAP,KAAc,QAAd,IAA0B,OAAOC,EAAP,KAAc,QAA5C,EAAsD;IACpD,OAAO,CAAP;EACD;;EAED;EACA,IAAIV,MAAM,CAACC,KAAP,CAAaW,GAAb,KAAqB,CAACZ,MAAM,CAACC,KAAP,CAAaU,GAAb,CAA1B,EAA6C;IAC3C,OAAO,CAAC,CAAR;EACD;EACD,IAAIX,MAAM,CAACC,KAAP,CAAaU,GAAb,KAAqB,CAACX,MAAM,CAACC,KAAP,CAAaW,GAAb,CAA1B,EAA6C;IAC3C,OAAO,CAAP;EACD;;EAED;EACA,IAAIC,CAAC,GAAG7B,MAAM,CAACyB,EAAD,CAAd;EACA,IAAIK,CAAC,GAAG9B,MAAM,CAAC0B,EAAD,CAAd;EACA,IAAIG,CAAC,KAAKC,CAAV,EAAa;IACX,OAAO,CAAP;EACD;EACD,IAAI,CAACR,EAAE,CAAChB,IAAH,CAAQuB,CAAR,CAAD,IAAe,CAACP,EAAE,CAAChB,IAAH,CAAQwB,CAAR,CAApB,EAAgC;IAC9B,OAAOD,CAAC,GAAGC,CAAJ,GAAQ,CAAR,GAAY,CAAC,CAApB;EACD;;EAED;EACAD,CAAC,GAAGA,CAAC,CAACE,KAAF,CAAQV,EAAR,CAAJ;EACAS,CAAC,GAAGA,CAAC,CAACC,KAAF,CAAQV,EAAR,CAAJ;EACA,OAAOQ,CAAC,CAACzB,MAAF,IAAY0B,CAAC,CAAC1B,MAArB,EAA6B;IAC3B,MAAM4B,EAAE,GAAGH,CAAC,CAACI,KAAF,EAAX;IACA,MAAMC,EAAE,GAAGJ,CAAC,CAACG,KAAF,EAAX;IACA,IAAID,EAAE,KAAKE,EAAX,EAAe;MACb,IAAIZ,EAAE,CAAChB,IAAH,CAAQ0B,EAAR,KAAeV,EAAE,CAAChB,IAAH,CAAQ4B,EAAR,CAAnB,EAAgC;QAC9B,OAAOF,EAAE,CAACzB,OAAH,CAAWgB,EAAX,EAAe,IAAf,IAAuBW,EAAE,CAAC3B,OAAH,CAAWgB,EAAX,EAAe,IAAf,CAA9B;MACD;MACD,OAAOS,EAAE,GAAGE,EAAL,GAAU,CAAV,GAAc,CAAC,CAAtB;IACD;EACF;EACD,OAAOL,CAAC,CAACzB,MAAF,GAAW0B,CAAC,CAAC1B,MAApB;AACD,CAtED;;AAwEA,MAAM+B,MAAM,GAAG,UAAUC,KAAV,EAAiB;EAC9B,MAAMC,OAAO,GAAG,EAAhB;;EAEA;EACA,MAAMC,QAAQ,GAAG,EAAjB;EACAF,KAAK,CAACG,OAAN,CAAc,CAACC,OAAD,EAAUC,CAAV,KAAgB;IAC5BJ,OAAO,CAACG,OAAD,CAAP,GAAmBC,CAAnB;IACA,IAAI,OAAOD,OAAP,KAAmB,QAAvB,EAAiC;MAC/BF,QAAQ,CAACE,OAAO,CAACE,WAAR,EAAD,CAAR,GAAkCD,CAAlC;IACD;EACF,CALD;EAMA,OAAO,UAAUZ,CAAV,EAAaC,CAAb,EAAgB;IACrB,IAAID,CAAC,IAAIQ,OAAL,IAAgBP,CAAC,IAAIO,OAAzB,EAAkC;MAChC,OAAOA,OAAO,CAACR,CAAD,CAAP,GAAaQ,OAAO,CAACP,CAAD,CAA3B;IACD;IACD,IAAID,CAAC,IAAIQ,OAAT,EAAkB;MAChB,OAAO,CAAC,CAAR;IACD;IACD,IAAIP,CAAC,IAAIO,OAAT,EAAkB;MAChB,OAAO,CAAP;IACD;IACD,IAAIR,CAAC,IAAIS,QAAL,IAAiBR,CAAC,IAAIQ,QAA1B,EAAoC;MAClC,OAAOA,QAAQ,CAACT,CAAD,CAAR,GAAcS,QAAQ,CAACR,CAAD,CAA7B;IACD;IACD,IAAID,CAAC,IAAIS,QAAT,EAAmB;MACjB,OAAO,CAAC,CAAR;IACD;IACD,IAAIR,CAAC,IAAIQ,QAAT,EAAmB;MACjB,OAAO,CAAP;IACD;IACD,OAAOd,WAAW,CAACK,CAAD,EAAIC,CAAJ,CAAlB;EACD,CApBD;AAqBD,CAhCD;;AAkCA,MAAMa,OAAO,GAAG,UAAUC,OAAV,EAAmBC,IAAnB,EAAyB;EACvC,IAAID,OAAJ,EAAa;IACX,IAAI,OAAOA,OAAP,KAAmB,UAAvB,EAAmC;MACjC,MAAME,IAAI,GAAGF,OAAO,CAACC,IAAD,CAApB;MACA,IAAI,OAAOC,IAAP,KAAgB,UAApB,EAAgC;QAC9B,OAAOA,IAAP;MACD;IACF,CALD,MAKO,IAAID,IAAI,IAAID,OAAZ,EAAqB;MAC1B,OAAOA,OAAO,CAACC,IAAD,CAAd;IACD;EACF;EACD,OAAOrB,WAAP;AACD,CAZD;;AAcA;AACA,MAAMuB,KAAK,GAAGvC,YAAY,EAA1B;AACA,MAAMwC,QAAQ,GAAGxC,YAAY,CAAC,EAAEG,kBAAkB,EAAE,CAAtB,EAAD,CAA7B;AACA,MAAMsC,QAAQ,GAAGzC,YAAY,CAAC;EAC5BG,kBAAkB,EAAE,CADQ;EAE5BC,MAAM,EAAE,GAFoB;EAG5BE,MAAM,EAAE,GAHoB,EAAD,CAA7B;;;AAMA,MAAMoC,YAAY,GAAG,CAAAC,SAAS,KAAI,CAAApD,CAAC,KAAI,OAAOA,CAAP,KAAa,QAAb,GAAwBA,CAAxB,GAA4BoD,SAAS,CAACpD,CAAD,CAA5E;;AAEA,MAAMqD,uBAAuB,GAAG;EAC9BC,KAAK,CAACF,SAAD,EAAuB,KAAtBA,SAAsB,cAAtBA,SAAsB,GAAVH,QAAU;IAC1B,OAAO;IACL,YAAY;MACV,OAAO;QACLK,KAAK,EAAE,CADF;QAELC,IAAI,GAAG;UACL,KAAKD,KAAL,IAAc,CAAd;QACD,CAJI;QAKLE,KAAK,GAAG;UACN,OAAO,KAAKF,KAAZ;QACD,CAPI;QAQLG,MAAM,EAAEL,SARH,EAAP;;IAUD,CAZH;EAaD,CAf6B;;EAiB9BM,OAAO,CAACC,EAAD,EAAKP,SAAL,EAA2B,KAAtBA,SAAsB,cAAtBA,SAAsB,GAAVH,QAAU;IAChC,OAAO,gBAAkB,KAAR,CAACH,IAAD,CAAQ;MACvB,OAAO,YAAY;QACjB,OAAO;UACLc,IAAI,EAAE,EADD;UAELL,IAAI,CAACM,MAAD,EAAS;YACX,IAAI,CAAC,qCAAAC,KAAK,CAACC,IAAN,CAAW,KAAKH,IAAhB,kBAA+BC,MAAM,CAACf,IAAD,CAArC,CAAL,EAAmD;cACjD,KAAKc,IAAL,CAAUL,IAAV,CAAeM,MAAM,CAACf,IAAD,CAArB;YACD;UACF,CANI;UAOLU,KAAK,GAAG;YACN,OAAOG,EAAE,CAAC,KAAKC,IAAN,CAAT;UACD,CATI;UAULH,MAAM,EAAEN,YAAY,CAACC,SAAD,CAVf;UAWLY,SAAS,EAAE,OAAOlB,IAAP,KAAgB,WAAhB,GAA8B,CAA9B,GAAkC,CAXxC,EAAP;;MAaD,CAdD;IAeD,CAhBD;EAiBD,CAnC6B;;EAqC9BmB,GAAG,CAACb,SAAD,EAAoB,KAAnBA,SAAmB,cAAnBA,SAAmB,GAAPJ,KAAO;IACrB,OAAO,iBAAkB,KAAR,CAACF,IAAD,CAAQ;MACvB,OAAO,YAAY;QACjB,OAAO;UACLmB,GAAG,EAAE,CADA;UAELV,IAAI,CAACM,MAAD,EAAS;YACX,IAAI5C,MAAM,CAACC,KAAP,CAAaD,MAAM,CAAC4C,MAAM,CAACf,IAAD,CAAP,CAAnB,CAAJ,EAAwC;cACtC,KAAKmB,GAAL,GAAWJ,MAAM,CAACf,IAAD,CAAjB;YACD,CAFD,MAEO;cACL,KAAKmB,GAAL,IAAYC,UAAU,CAACL,MAAM,CAACf,IAAD,CAAP,CAAtB;YACD;UACF,CARI;UASLU,KAAK,GAAG;YACN,OAAO,KAAKS,GAAZ;UACD,CAXI;UAYLR,MAAM,EAAEN,YAAY,CAACC,SAAD,CAZf;UAaLY,SAAS,EAAE,OAAOlB,IAAP,KAAgB,WAAhB,GAA8B,CAA9B,GAAkC,CAbxC,EAAP;;MAeD,CAhBD;IAiBD,CAlBD;EAmBD,CAzD6B;;EA2D9BqB,QAAQ,CAACC,IAAD,EAAOhB,SAAP,EAA0B,KAAnBA,SAAmB,cAAnBA,SAAmB,GAAPJ,KAAO;IAChC,OAAO,iBAAkB,KAAR,CAACF,IAAD,CAAQ;MACvB,OAAO,UAAUuB,IAAV,EAAgB;QACrB,OAAO;UACLC,GAAG,EAAE,IADA;UAELC,MAAM,EAAE3B,OAAO;UACb,OAAOyB,IAAP,KAAgB,WAAhB,GAA8BA,IAAI,CAACxB,OAAnC,GAA6C,IADhC;UAEbC,IAFa,CAFV;;UAMLS,IAAI,CAACM,MAAD,EAAS;YACX,MAAM7D,CAAC,GAAG6D,MAAM,CAACf,IAAD,CAAhB;YACA,IAAI,uCAAC,KAAD,EAAQ,KAAR,mBAAwBsB,IAAxB,CAAJ,EAAmC;cACjC,MAAMI,YAAY,GAAGvD,MAAM,CAACjB,CAAD,CAA3B;cACA,IAAIiB,MAAM,CAACC,KAAP,CAAasD,YAAb,CAAJ,EAAgC;gBAC9B,KAAKF,GAAL;gBACE,CAAC,KAAKA,GAAN;gBACCF,IAAI,KAAK,KAAT,IAAkBpE,CAAC,GAAG,KAAKsE,GAD5B;gBAECF,IAAI,KAAK,KAAT,IAAkBpE,CAAC,GAAG,KAAKsE,GAF5B;gBAGItE,CAHJ;gBAII,KAAKsE,GALX;cAMD,CAPD,MAOO;gBACL,KAAKA,GAAL,GAAWG,IAAI,CAACL,IAAD,CAAJ;gBACTI,YADS;gBAET,KAAKF,GAAL,KAAa,IAAb,GAAoB,KAAKA,GAAzB,GAA+BE,YAFtB,CAAX;;cAID;YACF,CAfD,MAeO;YACLJ,IAAI,KAAK,OAAT;YACA,KAAKG,MAAL,CAAYvE,CAAZ,EAAe,KAAKsE,GAAL,KAAa,IAAb,GAAoB,KAAKA,GAAzB,GAA+BtE,CAA9C,KAAoD,CAF/C;YAGL;cACA,KAAKsE,GAAL,GAAWtE,CAAX;YACD,CALM,MAKA;YACLoE,IAAI,KAAK,MAAT;YACA,KAAKG,MAAL,CAAYvE,CAAZ,EAAe,KAAKsE,GAAL,KAAa,IAAb,GAAoB,KAAKA,GAAzB,GAA+BtE,CAA9C,KAAoD,CAF/C;YAGL;cACA,KAAKsE,GAAL,GAAWtE,CAAX;YACD;UACF,CAlCI;UAmCLwD,KAAK,GAAG;YACN,OAAO,KAAKc,GAAZ;UACD,CArCI;UAsCLb,MAAM,CAACzD,CAAD,EAAI;YACR,IAAI,OAAOA,CAAP,KAAa,QAAjB,EAA2B;cACzB,OAAOoD,SAAS,CAACpD,CAAD,CAAhB;YACD;YACD,OAAOA,CAAP;UACD,CA3CI;UA4CLgE,SAAS,EAAE,OAAOlB,IAAP,KAAgB,WAAhB,GAA8B,CAA9B,GAAkC,CA5CxC,EAAP;;MA8CD,CA/CD;IAgDD,CAjDD;EAkDD,CA9G6B;;EAgH9B4B,QAAQ,CAACC,CAAD,EAAIvB,SAAJ,EAAuB,KAAnBA,SAAmB,cAAnBA,SAAmB,GAAPJ,KAAO;IAC7B,OAAO,iBAAkB,KAAR,CAACF,IAAD,CAAQ;MACvB,OAAO,YAAY;QACjB,OAAO;UACL8B,IAAI,EAAE,EADD;UAELC,MAAM,EAAE,EAFH;UAGLtB,IAAI,CAACM,MAAD,EAAS;YACX,MAAMS,GAAG,GAAGT,MAAM,CAACf,IAAD,CAAlB;YACA,MAAM9C,CAAC,GAAGiB,MAAM,CAACqD,GAAD,CAAhB;;YAEA,IAAIrD,MAAM,CAACC,KAAP,CAAalB,CAAb,CAAJ,EAAqB;cACnB,KAAK6E,MAAL,CAAYP,GAAZ,IAAmB,CAAC,KAAKO,MAAL,CAAYP,GAAZ,KAAoB,CAArB,IAA0B,CAA7C;YACD,CAFD,MAEO;cACL,KAAKM,IAAL,CAAUrB,IAAV,CAAevD,CAAf;YACD;UACF,CAZI;UAaLwD,KAAK,GAAG;YACN;YACE,KAAKoB,IAAL,CAAUvE,MAAV,KAAqB,CAArB;YACAyE,MAAM,CAACC,IAAP,CAAY,KAAKF,MAAjB,EAAyBxE,MAAzB,KAAoC,CAFtC;YAGE;cACA,OAAO,IAAP;YACD;;YAED,IAAIyE,MAAM,CAACC,IAAP,CAAY,KAAKF,MAAjB,EAAyBxE,MAA7B,EAAqC;cACnC,MAAM2E,MAAM,GAAGF,MAAM,CAACE,MAAP,CAAc,KAAKH,MAAnB,EAA2B9B,IAA3B,CAAgC,CAACjB,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAA9C,CAAf;cACA,MAAMkD,MAAM,GAAGR,IAAI,CAACS,KAAL,CAAWF,MAAM,CAAC3E,MAAP,GAAgB,CAA3B,CAAf;;cAEA,MAAM0E,IAAI,GAAGD,MAAM,CAACC,IAAP,CAAY,KAAKF,MAAjB,CAAb;cACA,OAAOE,IAAI,CAAC1E,MAAL,GAAc,CAAd,KAAoB,CAApB;cACH0E,IAAI,CAACE,MAAD,CADD;cAEH,CAACF,IAAI,CAACE,MAAM,GAAG,CAAV,CAAJ,GAAmBF,IAAI,CAACE,MAAD,CAAxB,IAAoC,CAFxC;YAGD;;YAED,KAAKL,IAAL,CAAU7B,IAAV,CAAe,CAACjB,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAA7B;YACA,MAAMW,CAAC,GAAG,CAAC,KAAKkC,IAAL,CAAUvE,MAAV,GAAmB,CAApB,IAAyBsE,CAAnC;YACA,OAAO,CAAC,KAAKC,IAAL,CAAUH,IAAI,CAACS,KAAL,CAAWxC,CAAX,CAAV,IAA2B,KAAKkC,IAAL,CAAUH,IAAI,CAACU,IAAL,CAAUzC,CAAV,CAAV,CAA5B,IAAuD,GAA9D;UACD,CAlCI;UAmCLe,MAAM,EAAEN,YAAY,CAACC,SAAD,CAnCf;UAoCLY,SAAS,EAAE,OAAOlB,IAAP,KAAgB,WAAhB,GAA8B,CAA9B,GAAkC,CApCxC,EAAP;;MAsCD,CAvCD;IAwCD,CAzCD;EA0CD,CA3J6B;;EA6J9BsC,WAAW,CAAChB,IAAD,EAAgBiB,IAAhB,EAA0BjC,SAA1B,EAA6C,KAA5CgB,IAA4C,cAA5CA,IAA4C,GAArC,MAAqC,MAA7BiB,IAA6B,cAA7BA,IAA6B,GAAtB,CAAsB,MAAnBjC,SAAmB,cAAnBA,SAAmB,GAAPJ,KAAO;IACtD,OAAO,iBAAkB,KAAR,CAACF,IAAD,CAAQ;MACvB,OAAO,YAAY;QACjB,OAAO;UACLwC,CAAC,EAAE,GADE;UAELC,CAAC,EAAE,GAFE;UAGLC,CAAC,EAAE,GAHE;UAILC,QAAQ,EAAE,IAJL;UAKLlC,IAAI,CAACM,MAAD,EAAS;YACX,MAAM7D,CAAC,GAAGiB,MAAM,CAAC4C,MAAM,CAACf,IAAD,CAAP,CAAhB;YACA,IAAI7B,MAAM,CAACC,KAAP,CAAalB,CAAb,CAAJ,EAAqB;cACnB,KAAKyF,QAAL;cACE,OAAO5B,MAAM,CAACf,IAAD,CAAb,KAAwB,QAAxB,GAAmCe,MAAM,CAACf,IAAD,CAAzC,GAAkD,KAAK2C,QADzD;cAEA;YACD;YACD,KAAKH,CAAL,IAAU,GAAV;YACA,IAAI,KAAKA,CAAL,KAAW,GAAf,EAAoB;cAClB,KAAKC,CAAL,GAASvF,CAAT;YACD;YACD,MAAM0F,IAAI,GAAG,KAAKH,CAAL,GAAS,CAACvF,CAAC,GAAG,KAAKuF,CAAV,IAAe,KAAKD,CAA1C;YACA,KAAKE,CAAL,IAAU,CAACxF,CAAC,GAAG,KAAKuF,CAAV,KAAgBvF,CAAC,GAAG0F,IAApB,CAAV;YACA,KAAKH,CAAL,GAASG,IAAT;UACD,CAnBI;UAoBLlC,KAAK,GAAG;YACN,IAAI,KAAKiC,QAAT,EAAmB;cACjB,OAAO,KAAKA,QAAZ;YACD;;YAED,IAAIrB,IAAI,KAAK,MAAb,EAAqB;cACnB,IAAI,KAAKkB,CAAL,KAAW,CAAf,EAAkB;gBAChB,OAAO,IAAI,CAAX;cACD;cACD,OAAO,KAAKC,CAAZ;YACD;YACD,IAAI,KAAKD,CAAL,IAAUD,IAAd,EAAoB;cAClB,OAAO,CAAP;YACD;YACD,QAAQjB,IAAR;cACE,KAAK,KAAL;gBACE,OAAO,KAAKoB,CAAL,IAAU,KAAKF,CAAL,GAASD,IAAnB,CAAP;cACF,KAAK,OAAL;gBACE,OAAOZ,IAAI,CAACkB,IAAL,CAAU,KAAKH,CAAL,IAAU,KAAKF,CAAL,GAASD,IAAnB,CAAV,CAAP;cACF;gBACE,MAAM,IAAIO,KAAJ,CAAU,8BAAV,CAAN,CANJ;;UAQD,CA1CI;UA2CLnC,MAAM,EAAEN,YAAY,CAACC,SAAD,CA3Cf;UA4CLY,SAAS,EAAE,OAAOlB,IAAP,KAAgB,WAAhB,GAA8B,CAA9B,GAAkC,CA5CxC,EAAP;;MA8CD,CA/CD;IAgDD,CAjDD;EAkDD,CAhN6B;;EAkN9B+C,UAAU,CAACzC,SAAD,EAAoB,KAAnBA,SAAmB,cAAnBA,SAAmB,GAAPJ,KAAO;IAC5B,OAAO,iBAAwB,KAAd,CAAC8C,GAAD,EAAMC,KAAN,CAAc;MAC7B,OAAO,YAAY;QACjB,OAAO;UACLC,MAAM,EAAE,CADH;UAELC,QAAQ,EAAE,CAFL;UAGL1C,IAAI,CAACM,MAAD,EAAS;YACX,IAAI,CAAC5C,MAAM,CAACC,KAAP,CAAaD,MAAM,CAAC4C,MAAM,CAACiC,GAAD,CAAP,CAAnB,CAAL,EAAwC;cACtC,KAAKE,MAAL,IAAe9B,UAAU,CAACL,MAAM,CAACiC,GAAD,CAAP,CAAzB;YACD;YACD,IAAI,CAAC7E,MAAM,CAACC,KAAP,CAAaD,MAAM,CAAC4C,MAAM,CAACkC,KAAD,CAAP,CAAnB,CAAL,EAA0C;cACxC,KAAKE,QAAL,IAAiB/B,UAAU,CAACL,MAAM,CAACkC,KAAD,CAAP,CAA3B;YACD;UACF,CAVI;UAWLvC,KAAK,GAAG;YACN,OAAO,KAAKwC,MAAL,GAAc,KAAKC,QAA1B;UACD,CAbI;UAcLxC,MAAM,EAAEL,SAdH;UAeLY,SAAS;UACP,OAAO8B,GAAP,KAAe,WAAf,IAA8B,OAAOC,KAAP,KAAiB,WAA/C,GAA6D,CAA7D,GAAiE,CAhB9D,EAAP;;MAkBD,CAnBD;IAoBD,CArBD;EAsBD,CAzO6B;;EA2O9BG,UAAU,CAACC,OAAD,EAAUC,IAAV,EAA0BhD,SAA1B,EAAgD,KAAtCgD,IAAsC,cAAtCA,IAAsC,GAA/B,OAA+B,MAAtBhD,SAAsB,cAAtBA,SAAsB,GAAVF,QAAU;IACxD,OAAO,+CAAIlD,CAAJ,oDAAIA,CAAJ;QACL,UAAUqE,IAAV,EAAgBgC,MAAhB,EAAwBC,MAAxB,EAAgC;UAC9B,OAAO;YACLC,QAAQ,EAAE,EAAEC,KAAK,EAAE,CAAC,EAAD,EAAK,EAAL,CAAT,EAAmBC,GAAG,EAAE,CAACJ,MAAD,EAAS,EAAT,CAAxB,EAAsCK,GAAG,EAAE,CAAC,EAAD,EAAKJ,MAAL,CAA3C;YACRF,IADQ,CADL;;YAILO,KAAK,EAAER,OAAO,CAAC,GAAGrC,KAAK,CAACC,IAAN,CAAW/D,CAAC,IAAI,EAAhB,CAAJ,CAAP,CAAgCqE,IAAhC,EAAsCgC,MAAtC,EAA8CC,MAA9C,CAJF;YAKL/C,IAAI,CAACM,MAAD,EAAS;cACX,KAAK8C,KAAL,CAAWpD,IAAX,CAAgBM,MAAhB;YACD,CAPI;YAQLJ,MAAM,EAAEN,YAAY,CAACC,SAAD,CARf;YASLI,KAAK,GAAG;cACN,MAAMoD,GAAG,GAAGvC,IAAI;cACbwC,aADS,CACK,GAAG/C,KAAK,CAACC,IAAN,CAAW,KAAKwC,QAAL,IAAiB,EAA5B,CADR;cAETI,KAFS,CAEHnD,KAFG,EAAZ;;cAIA,IAAI,OAAOoD,GAAP,KAAe,QAAnB,EAA6B;gBAC3B,OAAOA,GAAP;cACD;;cAED,OAAO,KAAKD,KAAL,CAAWnD,KAAX,KAAqBoD,GAA5B;YACD,CAnBI;YAoBL5C,SAAS,EAAEmC,OAAO,CAAC,GAAGrC,KAAK,CAACC,IAAN,CAAW/D,CAAC,IAAI,EAAhB,CAAJ,CAAP,GAAkCgE,SApBxC,EAAP;;QAsBD,CAxBI,GAAP;EAyBD,CArQ6B,EAAhC;;;AAwQA,MAAM8C,2BAA2B,GAAG;EAClCC,WAAW,CAACC,CAAD,EAAI;IACb,OAAO3D,uBAAuB,CAACK,OAAxB,CAAgC,CAAA1D,CAAC,KAAIA,CAAC,CAACK,MAAvC,EAA+C2G,CAA/C,CAAP;EACD,CAHiC;EAIlCC,UAAU,CAACzB,CAAD,EAAIwB,CAAJ,EAAO;IACf,OAAO3D,uBAAuB,CAACK,OAAxB,CAAgC,CAAA1D,CAAC,KAAIA,CAAC,CAACkH,IAAF,CAAO1B,CAAP,CAArC,EAAgDwB,CAAC,KAAK,CAAAhH,CAAC,KAAIA,CAAV,CAAjD,CAAP;EACD,CANiC;EAOlCmH,GAAG,CAACH,CAAD,EAAI;IACL,OAAO3D,uBAAuB,CAACc,QAAxB,CAAiC,KAAjC,EAAwC6C,CAAxC,CAAP;EACD,CATiC;EAUlCI,GAAG,CAACJ,CAAD,EAAI;IACL,OAAO3D,uBAAuB,CAACc,QAAxB,CAAiC,KAAjC,EAAwC6C,CAAxC,CAAP;EACD,CAZiC;EAalCK,KAAK,CAACL,CAAD,EAAI;IACP,OAAO3D,uBAAuB,CAACc,QAAxB,CAAiC,OAAjC,EAA0C6C,CAA1C,CAAP;EACD,CAfiC;EAgBlCM,IAAI,CAACN,CAAD,EAAI;IACN,OAAO3D,uBAAuB,CAACc,QAAxB,CAAiC,MAAjC,EAAyC6C,CAAzC,CAAP;EACD,CAlBiC;EAmBlCO,MAAM,CAACP,CAAD,EAAI;IACR,OAAO3D,uBAAuB,CAACqB,QAAxB,CAAiC,GAAjC,EAAsCsC,CAAtC,CAAP;EACD,CArBiC;EAsBlCQ,OAAO,CAACR,CAAD,EAAI;IACT,OAAO3D,uBAAuB,CAAC+B,WAAxB,CAAoC,MAApC,EAA4C,CAA5C,EAA+C4B,CAA/C,CAAP;EACD,CAxBiC;EAyBlCS,GAAG,CAACpC,IAAD,EAAO2B,CAAP,EAAU;IACX,OAAO3D,uBAAuB,CAAC+B,WAAxB,CAAoC,KAApC,EAA2CC,IAA3C,EAAiD2B,CAAjD,CAAP;EACD,CA3BiC;EA4BlCU,KAAK,CAACrC,IAAD,EAAO2B,CAAP,EAAU;IACb,OAAO3D,uBAAuB,CAAC+B,WAAxB,CAAoC,OAApC,EAA6CC,IAA7C,EAAmD2B,CAAnD,CAAP;EACD,CA9BiC,EAApC;;;AAiCA,MAAMW,mBAAmB,GAAG;EAC1B,GAAGtE,uBADuB;EAE1B,GAAGyD,2BAFuB,EAA5B;;;AAKA;AACA,MAAMc,WAAW,GAAG,CAAC,CAAAC,GAAG,MAAK;EAC3BC,KAAK,EAAED,GAAG,CAACvE,KAAJ,CAAUL,QAAV,CADoB;EAE3B,uBAAuB4E,GAAG,CAACd,WAAJ,CAAgB9D,QAAhB,CAFI;EAG3B,sBAAsB4E,GAAG,CAACZ,UAAJ,CAAe,IAAf,CAHK;EAI3Bc,GAAG,EAAEF,GAAG,CAAC5D,GAAJ,CAAQjB,KAAR,CAJsB;EAK3B,eAAe6E,GAAG,CAAC5D,GAAJ,CAAQhB,QAAR,CALY;EAM3B+E,OAAO,EAAEH,GAAG,CAACL,OAAJ,CAAYxE,KAAZ,CANkB;EAO3BiF,MAAM,EAAEJ,GAAG,CAACN,MAAJ,CAAWvE,KAAX,CAPmB;EAQ3B,mBAAmB6E,GAAG,CAACJ,GAAJ,CAAQ,CAAR,EAAWzE,KAAX,CARQ;EAS3B,6BAA6B6E,GAAG,CAACH,KAAJ,CAAU,CAAV,EAAa1E,KAAb,CATF;EAU3BkF,OAAO,EAAEL,GAAG,CAACT,GAAJ,CAAQpE,KAAR,CAVkB;EAW3BmF,OAAO,EAAEN,GAAG,CAACV,GAAJ,CAAQnE,KAAR,CAXkB;EAY3BoF,KAAK,EAAEP,GAAG,CAACR,KAAJ,CAAUrE,KAAV,CAZoB;EAa3BqF,IAAI,EAAER,GAAG,CAACP,IAAJ,CAAStE,KAAT,CAbqB;EAc3B,gBAAgB6E,GAAG,CAAChC,UAAJ,CAAe7C,KAAf,CAdW;EAe3B,4BAA4B6E,GAAG,CAAC3B,UAAJ,CAAe2B,GAAG,CAAC5D,GAAJ,EAAf,EAA0B,OAA1B,EAAmCf,QAAnC,CAfD;EAgB3B,2BAA2B2E,GAAG,CAAC3B,UAAJ,CAAe2B,GAAG,CAAC5D,GAAJ,EAAf,EAA0B,KAA1B,EAAiCf,QAAjC,CAhBA;EAiB3B,8BAA8B2E,GAAG,CAAC3B,UAAJ,CAAe2B,GAAG,CAAC5D,GAAJ,EAAf,EAA0B,KAA1B,EAAiCf,QAAjC,CAjBH;EAkB3B,8BAA8B2E,GAAG,CAAC3B,UAAJ,CAAe2B,GAAG,CAACvE,KAAJ,EAAf,EAA4B,OAA5B,EAAqCJ,QAArC,CAlBH;EAmB3B,6BAA6B2E,GAAG,CAAC3B,UAAJ,CAAe2B,GAAG,CAACvE,KAAJ,EAAf,EAA4B,KAA5B,EAAmCJ,QAAnC,CAnBF;EAoB3B,gCAAgC2E,GAAG,CAAC3B,UAAJ,CAAe2B,GAAG,CAACvE,KAAJ,EAAf,EAA4B,KAA5B,EAAmCJ,QAAnC,CApBL,EAAL,CAAJ;AAqBhByE,mBArBgB,CAApB;;AAuBA,MAAMW,OAAO,GAAG;EACdC,EAAE,EAAE;IACFX,WADE;IAEFY,aAAa,EAAE;MACbC,WAAW,EAAE,qDADA;MAEbC,YAAY,EAAE,qDAFD;MAGbC,aAAa,EAAE,gDAHF;MAIbC,SAAS,EAAE,YAJE;MAKbC,UAAU,EAAE,aALC;MAMbC,OAAO,EAAE,oBANI;MAObC,aAAa,EAAE,eAPF;MAQbC,KAAK,EAAE,OARM;MASbC,MAAM,EAAE,QATK;MAUbC,MAAM,EAAE,QAVK;MAWbC,EAAE,EAAE,IAXS;MAYbC,EAAE,EAAE,IAZS,EAFb,EADU,EAAhB;;;;;AAoBA;AACA,MAAMC,UAAU,GAAG;AACjB,KADiB;AAEjB,KAFiB;AAGjB,KAHiB;AAIjB,KAJiB;AAKjB,KALiB;AAMjB,KANiB;AAOjB,KAPiB;AAQjB,KARiB;AASjB,KATiB;AAUjB,KAViB;AAWjB,KAXiB;AAYjB,KAZiB,CAAnB;;AAcA,MAAMC,UAAU,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,CAAnB;AACA,MAAMC,OAAO,GAAG,CAAAC,MAAM,KAAK,IAAGA,MAAO,EAAX,CAAaC,MAAb,CAAoB,CAAC,CAArB,EAAwB,CAAxB,CAA1B,C,CAAsD;;AAEtD,MAAMC,QAAQ,GAAG;EACfC,GAAG,CAACjD,GAAD,EAAMkD,QAAN,EAAgB;IACjB,OAAO,CAAA/F,MAAM,KAAIA,MAAM,CAAC6C,GAAD,CAAN,GAAe7C,MAAM,CAAC6C,GAAD,CAAN,GAAckD,QAA9C;EACD,CAHc;EAIfC,UAAU;EACRnD,GADQ;EAERoD,YAFQ;EAGRC,SAHQ;EAIRC,QAJQ;EAKRC,QALQ;EAMR,KAHAF,SAGA,cAHAA,SAGA,GAHY,KAGZ,MAFAC,QAEA,cAFAA,QAEA,GAFWX,UAEX,MADAY,QACA,cADAA,QACA,GADWX,UACX;IACA,MAAMY,GAAG,GAAGH,SAAS,GAAG,KAAH,GAAW,EAAhC;IACA,OAAO,UAAUlG,MAAV,EAAkB;MACvB,MAAMsG,IAAI,GAAG,IAAIC,IAAJ,CAASA,IAAI,CAACC,KAAL,CAAWxG,MAAM,CAAC6C,GAAD,CAAjB,CAAT,CAAb;MACA,IAAIzF,MAAM,CAACC,KAAP,CAAaiJ,IAAb,CAAJ,EAAwB;QACtB,OAAO,EAAP;MACD;MACD,OAAOL,YAAY,CAACtJ,OAAb,CAAqB,OAArB,EAA8B,UAAU+E,CAAV,EAAa+E,CAAb,EAAgB;QACnD,QAAQA,CAAR;UACE,KAAK,GAAL;YACE,OAAOH,IAAI,CAAE,MAAKD,GAAI,UAAX,CAAJ,EAAP;UACF,KAAK,GAAL;YACE,OAAOX,OAAO,CAACY,IAAI,CAAE,MAAKD,GAAI,OAAX,CAAJ,KAA2B,CAA5B,CAAd;UACF,KAAK,GAAL;YACE,OAAOF,QAAQ,CAACG,IAAI,CAAE,MAAKD,GAAI,OAAX,CAAJ,EAAD,CAAf;UACF,KAAK,GAAL;YACE,OAAOX,OAAO,CAACY,IAAI,CAAE,MAAKD,GAAI,MAAX,CAAJ,EAAD,CAAd;UACF,KAAK,GAAL;YACE,OAAOD,QAAQ,CAACE,IAAI,CAAE,MAAKD,GAAI,KAAX,CAAJ,EAAD,CAAf;UACF,KAAK,GAAL;YACE,OAAOC,IAAI,CAAE,MAAKD,GAAI,KAAX,CAAJ,EAAP;UACF,KAAK,GAAL;YACE,OAAOX,OAAO,CAACY,IAAI,CAAE,MAAKD,GAAI,OAAX,CAAJ,EAAD,CAAd;UACF,KAAK,GAAL;YACE,OAAOX,OAAO,CAACY,IAAI,CAAE,MAAKD,GAAI,SAAX,CAAJ,EAAD,CAAd;UACF,KAAK,GAAL;YACE,OAAOX,OAAO,CAACY,IAAI,CAAE,MAAKD,GAAI,SAAX,CAAJ,EAAD,CAAd;UACF;YACE,OAAQ,IAAGI,CAAE,EAAb,CApBJ;;MAsBD,CAvBM,CAAP;IAwBD,CA7BD;EA8BD,CA1Cc,EAAjB;;;AA6CA;AACA;AACA,MAAMC,OAAO,GAAG,CAAAC,QAAQ,KAAIA,QAAQ,CAACtD,IAAT,CAAcjH,MAAM,CAACwK,YAAP,CAAoB,CAApB,CAAd,CAA5B;;AAEA;AACA;AACA;;AAEA,MAAMC,SAAN,CAAgB;EACdC,WAAW,CAACC,UAAD,EAAkBC,SAAlB,EAAkC,KAAjCD,UAAiC,cAAjCA,UAAiC,GAApB,EAAoB,MAAhBC,SAAgB,cAAhBA,SAAgB,GAAJ,EAAI;IAC3C,KAAKC,KAAL,GAAa,EAAE,GAAGJ,SAAS,CAACK,YAAf,EAA6B,GAAGH,UAAhC,EAAb;IACA,KAAKI,aAAL,GAAqB,KAAKA,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAArB;IACAvL,SAAS,CAACwL,cAAV;IACER,SAAS,CAACS,SADZ;IAEE,KAAKL,KAFP;IAGE,MAHF;IAIE,WAJF;;;IAOA,KAAKM,UAAL,GAAkB,KAAKN,KAAL;IACfO,kBADe,CACI,KAAKP,KAAL,CAAWQ,gBADf;IAEf,KAAKR,KAAL,CAAWS,cAFI,EAEY,KAAKT,KAAL,CAAWlG,IAFvB,CAAlB;IAGA,KAAK4G,oBAAL;IACE,KAAKV,KAAL,CAAWW,gBAAX;IACA3G,MAAM,CAAC4G,OAAP,CAAe,KAAKZ,KAAL,CAAWW,gBAA1B,EAA4CE,MAA5C;IACE,CAAC/E,GAAD,YAAiC,KAA3B,CAACgF,GAAD,EAAMC,eAAN,CAA2B;MAC/BjF,GAAG,CAACgF,GAAD,CAAH,GAAW,EAAX;MACA9G,MAAM,CAAC4G,OAAP,CAAeG,eAAf,EAAgCrJ,OAAhC,CAAwC,WAAyB,KAAxB,CAACsJ,MAAD,EAAS1I,SAAT,CAAwB;QAC/DwD,GAAG,CAACgF,GAAD,CAAH,CAASE,MAAT,IAAmB,KAAKhB,KAAL;QAChBO,kBADgB,CACGjI,SADH;QAEhB,KAAK0H,KAAL,CAAWS,cAFK,EAEW,KAAKT,KAAL,CAAWlG,IAFtB,CAAnB;MAGD,CAJD;MAKA,OAAOgC,GAAP;IACD,CATH;IAUE,EAVF,CAFF;;IAcA,KAAKmF,IAAL,GAAY,EAAZ;IACA,KAAKC,OAAL,GAAe,EAAf;IACA,KAAKC,OAAL,GAAe,EAAf;IACA,KAAKC,SAAL,GAAiB,EAAjB;IACA,KAAKC,SAAL,GAAiB,EAAjB;IACA,KAAKC,QAAL,GAAgB,KAAKhB,UAAL,CAAgB,IAAhB,EAAsB,EAAtB,EAA0B,EAA1B,CAAhB;IACA,KAAKP,SAAL,GAAiBA,SAAjB;IACA,KAAKwB,MAAL,GAAc,KAAd;;IAEA;IACA3B,SAAS,CAAC4B,aAAV,CAAwB,KAAKxB,KAAL,CAAWzG,IAAnC,EAAyC,KAAK2G,aAA9C;EACD;;EAEDuB,sBAAsB,CAAC1I,MAAD,EAAS2I,UAAT,EAAqB;IACzC,IAAI,CAAC,KAAKhB,oBAAV,EAAgC;MAC9B,OAAO,KAAKJ,UAAZ;IACD;IACD,MAAM,CAACqB,SAAD,EAAYC,UAAZ;IACJ5H,MAAM,CAAC4G,OAAP,CAAe7H,MAAf,EAAuB8I,IAAvB;IACE,gBAAC,CAACC,IAAD,EAAOpJ,KAAP,CAAD;QACE,KAAKgI,oBAAL,CAA0BoB,IAA1B;QACA,KAAKpB,oBAAL,CAA0BoB,IAA1B,EAAgCpJ,KAAhC,CAFF,GADF;IAIK,EALP;IAMA;IACE,CAACiJ,SAAD;IACA,CAACC,UADD;IAECF,UAAU,IAAI,CAAC,0BAAAA,UAAU,MAAV,CAAAA,UAAU,EAAUE,UAAV,CAH5B;IAIE;MACA,OAAO,KAAKtB,UAAZ;IACD;IACD,OAAO,KAAKI,oBAAL,CAA0BiB,SAA1B,EAAqCC,UAArC,KAAoD,KAAKtB,UAAhE;EACD;;EAEDyB,OAAO,CAACC,KAAD,EAAQC,YAAR,EAAsBC,OAAtB,EAAuC,KAAjBA,OAAiB,cAAjBA,OAAiB,GAAP,KAAO;IAC5C,MAAMC,UAAU,GAAGH,KAAK,CAACI,GAAN,CAAU,CAAApL,CAAC,KAAIc,OAAO,CAAC,KAAKkI,KAAL,CAAWjI,OAAZ,EAAqBf,CAArB,CAAtB,CAAnB;IACA,OAAO,UAAUA,CAAV,EAAaC,CAAb,EAAgB;MACrB,MAAMoL,KAAK,GAAG1I,IAAI,CAAC2C,GAAL,CAAStF,CAAC,CAACzB,MAAX,EAAmB0B,CAAC,CAAC1B,MAArB,CAAd;MACA,KAAK,IAAIqC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyK,KAApB,EAA2BzK,CAAC,IAAI,CAAhC,EAAmC;QACjC,MAAM6B,MAAM,GAAG0I,UAAU,CAACvK,CAAD,CAAzB;QACA,MAAM0K,UAAU,GAAGJ,OAAO,GAAGzI,MAAM,CAACxC,CAAC,CAACW,CAAD,CAAF,EAAOZ,CAAC,CAACY,CAAD,CAAR,CAAT,GAAwB6B,MAAM,CAACzC,CAAC,CAACY,CAAD,CAAF,EAAOX,CAAC,CAACW,CAAD,CAAR,CAAxD;QACA,IAAI0K,UAAU,KAAK,CAAnB,EAAsB;UACpB,OAAOA,UAAP;QACD;MACF;MACD,OAAOL,YAAY,GAAGjL,CAAC,CAACzB,MAAF,GAAW0B,CAAC,CAAC1B,MAAhB,GAAyB0B,CAAC,CAAC1B,MAAF,GAAWyB,CAAC,CAACzB,MAAzD;IACD,CAVD;EAWD;;EAEDgN,QAAQ,GAAG;IACT,IAAI,CAAC,KAAKhB,MAAV,EAAkB;MAChB,KAAKA,MAAL,GAAc,IAAd;MACA,MAAMiB,CAAC,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAAU,KAAK3G,aAAL,CAAmB0G,CAAnB,EAAsBC,CAAtB,EAAyBhK,KAAzB,EAApB;MACA,QAAQ,KAAKsH,KAAL,CAAW2C,QAAnB;QACE,KAAK,YAAL;UACE,KAAKzB,OAAL,CAAajJ,IAAb;UACE,KAAK8J,OAAL,CAAa,KAAK/B,KAAL,CAAW4C,IAAxB,EAA8B,KAAK7C,SAAL,CAAe8C,eAA7C,EAA8D,IAA9D,CADF;;UAGA;QACF,KAAK,cAAL;UACE,KAAK3B,OAAL,CAAajJ,IAAb,CAAkB,CAACjB,CAAD,EAAIC,CAAJ,KAAUN,WAAW,CAAC6L,CAAC,CAACxL,CAAD,EAAI,EAAJ,CAAF,EAAWwL,CAAC,CAACvL,CAAD,EAAI,EAAJ,CAAZ,CAAvC;UACA;QACF,KAAK,cAAL;UACE,KAAKiK,OAAL,CAAajJ,IAAb,CAAkB,CAACjB,CAAD,EAAIC,CAAJ,KAAU,CAACN,WAAW,CAAC6L,CAAC,CAACxL,CAAD,EAAI,EAAJ,CAAF,EAAWwL,CAAC,CAACvL,CAAD,EAAI,EAAJ,CAAZ,CAAxC;UACA;QACF;UACE,KAAKiK,OAAL,CAAajJ,IAAb;UACE,KAAK8J,OAAL,CAAa,KAAK/B,KAAL,CAAW4C,IAAxB,EAA8B,KAAK7C,SAAL,CAAe8C,eAA7C,CADF,EAbJ;;;MAiBA,QAAQ,KAAK7C,KAAL,CAAW8C,QAAnB;QACE,KAAK,YAAL;UACE,KAAK3B,OAAL,CAAalJ,IAAb;UACE,KAAK8J,OAAL,CAAa,KAAK/B,KAAL,CAAW+C,IAAxB,EAA8B,KAAKhD,SAAL,CAAeiD,eAA7C,EAA8D,IAA9D,CADF;;UAGA;QACF,KAAK,cAAL;UACE,KAAK7B,OAAL,CAAalJ,IAAb,CAAkB,CAACjB,CAAD,EAAIC,CAAJ,KAAUN,WAAW,CAAC6L,CAAC,CAAC,EAAD,EAAKxL,CAAL,CAAF,EAAWwL,CAAC,CAAC,EAAD,EAAKvL,CAAL,CAAZ,CAAvC;UACA;QACF,KAAK,cAAL;UACE,KAAKkK,OAAL,CAAalJ,IAAb,CAAkB,CAACjB,CAAD,EAAIC,CAAJ,KAAU,CAACN,WAAW,CAAC6L,CAAC,CAAC,EAAD,EAAKxL,CAAL,CAAF,EAAWwL,CAAC,CAAC,EAAD,EAAKvL,CAAL,CAAZ,CAAxC;UACA;QACF;UACE,KAAKkK,OAAL,CAAalJ,IAAb;UACE,KAAK8J,OAAL,CAAa,KAAK/B,KAAL,CAAW+C,IAAxB,EAA8B,KAAKhD,SAAL,CAAeiD,eAA7C,CADF,EAbJ;;;IAiBD;EACF;;EAEDC,UAAU,GAAG;IACX,KAAKV,QAAL;IACA,OAAO,KAAKpB,OAAZ;EACD;;EAED+B,UAAU,GAAG;IACX,KAAKX,QAAL;IACA,OAAO,KAAKrB,OAAZ;EACD;;EAEDhB,aAAa,CAACnH,MAAD,EAAS;IACpB;IACA,MAAMyC,MAAM,GAAG,EAAf;IACA,MAAMD,MAAM,GAAG,EAAf;IACA,KAAKyE,KAAL,CAAW+C,IAAX,CAAgBrL,OAAhB,CAAwB,CAAAkE,GAAG,KAAI;MAC7BJ,MAAM,CAAC/C,IAAP,CAAYmD,GAAG,IAAI7C,MAAP,GAAgBA,MAAM,CAAC6C,GAAD,CAAtB,GAA8B,MAA1C;IACD,CAFD;IAGA,KAAKoE,KAAL,CAAW4C,IAAX,CAAgBlL,OAAhB,CAAwB,CAAAiE,GAAG,KAAI;MAC7BJ,MAAM,CAAC9C,IAAP,CAAYkD,GAAG,IAAI5C,MAAP,GAAgBA,MAAM,CAAC4C,GAAD,CAAtB,GAA8B,MAA1C;IACD,CAFD;;IAIA,KAAK2F,QAAL,CAAc7I,IAAd,CAAmBM,MAAnB;;IAEA,MAAMoK,QAAQ,GAAG,KAAKpD,SAAL,CAAeqD,UAAf,GAA4B,CAA5B,GAAgCzJ,IAAI,CAAC0C,GAAL,CAAS,CAAT,EAAYd,MAAM,CAAChG,MAAnB,CAAjD;IACA,MAAM8N,QAAQ,GAAG,KAAKtD,SAAL,CAAeuD,UAAf,GAA4B,CAA5B,GAAgC3J,IAAI,CAAC0C,GAAL,CAAS,CAAT,EAAYb,MAAM,CAACjG,MAAnB,CAAjD;;IAEA,IAAIgO,aAAJ;IACA,IAAIC,aAAJ;IACA,KAAK,IAAIC,EAAE,GAAGN,QAAd,EAAwBM,EAAE,IAAIlI,MAAM,CAAChG,MAArC,EAA6CkO,EAAE,IAAI,CAAnD,EAAsD;MACpDF,aAAa,GAAGE,EAAE,GAAGlI,MAAM,CAAChG,MAA5B;MACA,MAAMmO,OAAO,GAAGnI,MAAM,CAACoI,KAAP,CAAa,CAAb,EAAgBF,EAAhB,CAAhB;MACA,MAAMG,UAAU,GAAGnE,OAAO,CAACiE,OAAD,CAA1B;MACA,IAAI,CAAC,KAAKtC,SAAL,CAAewC,UAAf,CAAL,EAAiC;QAC/B,KAAK1C,OAAL,CAAazI,IAAb,CAAkBiL,OAAlB;QACA,KAAKtC,SAAL,CAAewC,UAAf,IAA6B,KAAKnC,sBAAL;QAC3B1I,MAD2B;QAE3BwC,MAF2B;QAG3B,IAH2B,EAGrBmI,OAHqB,EAGZ,EAHY,CAA7B;MAID;MACD,KAAKtC,SAAL,CAAewC,UAAf,EAA2BnL,IAA3B,CAAgCM,MAAhC;MACA,KAAKqI,SAAL,CAAewC,UAAf,EAA2BC,UAA3B,GAAwCN,aAAxC;IACD;;IAED,KAAK,IAAIO,EAAE,GAAGT,QAAd,EAAwBS,EAAE,IAAItI,MAAM,CAACjG,MAArC,EAA6CuO,EAAE,IAAI,CAAnD,EAAsD;MACpDN,aAAa,GAAGM,EAAE,GAAGtI,MAAM,CAACjG,MAA5B;MACA,MAAMwO,OAAO,GAAGvI,MAAM,CAACmI,KAAP,CAAa,CAAb,EAAgBG,EAAhB,CAAhB;MACA,MAAME,UAAU,GAAGvE,OAAO,CAACsE,OAAD,CAA1B;MACA,IAAI,CAAC,KAAK1C,SAAL,CAAe2C,UAAf,CAAL,EAAiC;QAC/B,KAAK7C,OAAL,CAAa1I,IAAb,CAAkBsL,OAAlB;QACA,KAAK1C,SAAL,CAAe2C,UAAf,IAA6B,KAAKvC,sBAAL;QAC3B1I,MAD2B;QAE3ByC,MAF2B;QAG3B,IAH2B,EAGrB,EAHqB,EAGjBuI,OAHiB,CAA7B;MAID;MACD,KAAK1C,SAAL,CAAe2C,UAAf,EAA2BvL,IAA3B,CAAgCM,MAAhC;MACA,KAAKsI,SAAL,CAAe2C,UAAf,EAA2BH,UAA3B,GAAwCL,aAAxC;IACD;;IAED;IACA,KAAK,IAAIC,EAAE,GAAGN,QAAd,EAAwBM,EAAE,IAAIlI,MAAM,CAAChG,MAArC,EAA6CkO,EAAE,IAAI,CAAnD,EAAsD;MACpDF,aAAa,GAAGE,EAAE,GAAGlI,MAAM,CAAChG,MAA5B;MACA,MAAMmO,OAAO,GAAGnI,MAAM,CAACoI,KAAP,CAAa,CAAb,EAAgBF,EAAhB,CAAhB;MACA,MAAMG,UAAU,GAAGnE,OAAO,CAACiE,OAAD,CAA1B;MACA,IAAI,CAAC,KAAKzC,IAAL,CAAU2C,UAAV,CAAL,EAA4B;QAC1B,KAAK3C,IAAL,CAAU2C,UAAV,IAAwB,EAAxB;MACD;MACD,KAAK,IAAIE,EAAE,GAAGT,QAAd,EAAwBS,EAAE,IAAItI,MAAM,CAACjG,MAArC,EAA6CuO,EAAE,IAAI,CAAnD,EAAsD;QACpDN,aAAa,GAAGM,EAAE,GAAGtI,MAAM,CAACjG,MAA5B;QACA,MAAMwO,OAAO,GAAGvI,MAAM,CAACmI,KAAP,CAAa,CAAb,EAAgBG,EAAhB,CAAhB;QACA,MAAME,UAAU,GAAGvE,OAAO,CAACsE,OAAD,CAA1B;QACA,IAAI,CAAC,KAAK9C,IAAL,CAAU2C,UAAV,EAAsBI,UAAtB,CAAL,EAAwC;UACtC,KAAK/C,IAAL,CAAU2C,UAAV,EAAsBI,UAAtB,IAAoC,KAAKvC,sBAAL;UAClC1I,MADkC;UAElC,IAFkC,EAE5B2K,OAF4B,EAEnBK,OAFmB,CAApC;QAGD;QACD,KAAK9C,IAAL,CAAU2C,UAAV,EAAsBI,UAAtB,EAAkCvL,IAAlC,CAAuCM,MAAvC;;QAEA,KAAKkI,IAAL,CAAU2C,UAAV,EAAsBI,UAAtB,EAAkCT,aAAlC,GAAkDA,aAAlD;QACA,KAAKtC,IAAL,CAAU2C,UAAV,EAAsBI,UAAtB,EAAkCR,aAAlC,GAAkDA,aAAlD;QACA,KAAKvC,IAAL,CAAU2C,UAAV,EAAsBI,UAAtB,EAAkCH,UAAlC;QACEN,aAAa,IAAIC,aADnB;MAED;IACF;EACF;;EAEDzH,aAAa,CAACR,MAAD,EAASC,MAAT,EAAiB;IAC5B,IAAIyI,GAAJ;IACA,MAAML,UAAU,GAAGnE,OAAO,CAAClE,MAAD,CAA1B;IACA,MAAMyI,UAAU,GAAGvE,OAAO,CAACjE,MAAD,CAA1B;IACA,IAAID,MAAM,CAAChG,MAAP,KAAkB,CAAlB,IAAuBiG,MAAM,CAACjG,MAAP,KAAkB,CAA7C,EAAgD;MAC9C0O,GAAG,GAAG,KAAK3C,QAAX;IACD,CAFD,MAEO,IAAI/F,MAAM,CAAChG,MAAP,KAAkB,CAAtB,EAAyB;MAC9B0O,GAAG,GAAG,KAAK5C,SAAL,CAAe2C,UAAf,CAAN;IACD,CAFM,MAEA,IAAIxI,MAAM,CAACjG,MAAP,KAAkB,CAAtB,EAAyB;MAC9B0O,GAAG,GAAG,KAAK7C,SAAL,CAAewC,UAAf,CAAN;IACD,CAFM,MAEA;MACLK,GAAG,GAAG,KAAKhD,IAAL,CAAU2C,UAAV,EAAsBI,UAAtB,CAAN;IACD;IACD;MACEC,GAAG,IAAI;QACLvL,KAAK,GAAG;UACN,OAAO,IAAP;QACD,CAHI;QAILC,MAAM,GAAG;UACP,OAAO,EAAP;QACD,CANI,EADT;;;EAUD,CAjOa;EAAA;IAAA;AAoOhB;AACAiH,SAAS,CAAC4B,aAAV,GAA0B,UAAU0C,KAAV,EAAiBhE,aAAjB,EAAgC;EACxD,IAAIlH,KAAK,CAACmL,OAAN,CAAcD,KAAd,CAAJ,EAA0B;IACxB;IACA,OAAOA,KAAK,CAAC9B,GAAN,CAAU,CAAArJ,MAAM,KAAImH,aAAa,CAACnH,MAAD,CAAjC,CAAP;EACD;EACD,MAAM,IAAI+B,KAAJ,CAAUjG,CAAC,CAAC,sBAAD,CAAX,CAAN;AACD,CAND;;AAQA+K,SAAS,CAACK,YAAV,GAAyB;EACvBnD,WADuB;EAEvBiG,IAAI,EAAE,EAFiB;EAGvBH,IAAI,EAAE,EAHiB;EAIvB9I,IAAI,EAAE,EAJiB;EAKvB2G,cAAc,EAAE,OALO;EAMvB1I,OAAO,EAAE,EANc;EAOvB4K,QAAQ,EAAE,YAPa;EAQvBG,QAAQ,EAAE,YARa,EAAzB;;;AAWAlD,SAAS,CAACS,SAAV,GAAsB;EACpB9G,IAAI,EAAE3E,SAAS,CAACwP,SAAV,CAAoB,CAACxP,SAAS,CAACyP,KAAX,EAAkBzP,SAAS,CAAC0P,MAA5B,EAAoC1P,SAAS,CAAC2P,IAA9C,CAApB;EACHC,UAFiB;EAGpB/D,cAAc,EAAE7L,SAAS,CAAC6P,MAHN;EAIpB1B,IAAI,EAAEnO,SAAS,CAAC8P,OAAV,CAAkB9P,SAAS,CAAC6P,MAA5B,CAJc;EAKpB7B,IAAI,EAAEhO,SAAS,CAAC8P,OAAV,CAAkB9P,SAAS,CAAC6P,MAA5B,CALc;EAMpB3K,IAAI,EAAElF,SAAS,CAAC8P,OAAV,CAAkB9P,SAAS,CAAC6P,MAA5B,CANc;EAOpBE,WAAW,EAAE/P,SAAS,CAACgQ,QAAV,CAAmBhQ,SAAS,CAACgQ,QAAV,CAAmBhQ,SAAS,CAACiQ,IAA7B,CAAnB,CAPO;EAQpB9M,OAAO,EAAEnD,SAAS,CAACwP,SAAV,CAAoB;EAC3BxP,SAAS,CAAC2P,IADiB;EAE3B3P,SAAS,CAACgQ,QAAV,CAAmBhQ,SAAS,CAAC2P,IAA7B,CAF2B,CAApB,CARW;;EAYpBO,iBAAiB,EAAElQ,SAAS,CAACgQ,QAAV,CAAmBhQ,SAAS,CAAC2P,IAA7B,CAZC;EAapB5B,QAAQ,EAAE/N,SAAS,CAACmQ,KAAV,CAAgB;EACxB,YADwB;EAExB,YAFwB;EAGxB,cAHwB;EAIxB,cAJwB,CAAhB,CAbU;;EAmBpBjC,QAAQ,EAAElO,SAAS,CAACmQ,KAAV,CAAgB;EACxB,YADwB;EAExB,YAFwB;EAGxB,cAHwB;EAIxB,cAJwB,CAAhB,CAnBU,EAAtB;;;;AA2BA;AACElI,mBADF;AAEEC,WAFF;AAGE8B,QAHF;AAIEpB,OAJF;AAKE7G,WALF;AAMEhB,YANF;AAOEmC,OAPF;AAQER,MARF;AASEmI,OATF;AAUEG,SAVF,G,iLA51BM9K,a,kLAWAa,Y,iLAuBAa,E,uKACAC,E,uKACAC,E,uKACAC,W,gLAwEAW,M,2KAkCAQ,O,4KAeAI,K,0KACAC,Q,6KACAC,Q,6KAMAC,Y,iLAEAE,uB,4LAwQAyD,2B,gMAiCAa,mB,wLAMAC,W,gLAuBAU,O,4KAqBAe,U,+KAcAC,U,+KACAC,O,4KAEAG,Q,6KA+CAa,O,4KAMAG,S"},"metadata":{},"sourceType":"module"}