{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t, styled } from '@superset-ui/core';\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport Alert from 'src/components/Alert';\nimport cx from 'classnames';\nimport Button from 'src/components/Button';\nimport Icons from 'src/components/Icons';\nimport IndeterminateCheckbox from 'src/components/IndeterminateCheckbox';\nimport Pagination from 'src/components/Pagination';\nimport TableCollection from 'src/components/TableCollection';\nimport CardCollection from './CardCollection';\nimport FilterControls from './Filters';\nimport { CardSortSelect } from './CardSortSelect';\nimport { ListViewError, useListViewState } from './utils';\nimport { EmptyStateBig } from '../EmptyState';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst ListViewStyles = styled.div`\n  text-align: center;\n\n  .superset-list-view {\n    text-align: left;\n    border-radius: 4px 0;\n    margin: 0 ${(_ref) => {let { theme } = _ref;return theme.gridUnit * 4;}}px;\n\n    .header {\n      display: flex;\n      padding-bottom: ${(_ref2) => {let { theme } = _ref2;return theme.gridUnit * 4;}}px;\n\n      & .controls {\n        display: flex;\n        flex-wrap: wrap;\n        column-gap: ${(_ref3) => {let { theme } = _ref3;return theme.gridUnit * 6;}}px;\n        row-gap: ${(_ref4) => {let { theme } = _ref4;return theme.gridUnit * 4;}}px;\n      }\n    }\n\n    .body.empty table {\n      margin-bottom: 0;\n    }\n\n    .body {\n      overflow-x: auto;\n    }\n\n    .ant-empty {\n      .ant-empty-image {\n        height: auto;\n      }\n    }\n  }\n\n  .pagination-container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    margin-bottom: ${(_ref5) => {let { theme } = _ref5;return theme.gridUnit * 4;}}px;\n  }\n\n  .row-count-container {\n    margin-top: ${(_ref6) => {let { theme } = _ref6;return theme.gridUnit * 2;}}px;\n    color: ${(_ref7) => {let { theme } = _ref7;return theme.colors.grayscale.base;}};\n  }\n`;\nconst BulkSelectWrapper = styled(Alert)`\n  ${(_ref8) => {let { theme } = _ref8;return `\n    border-radius: 0;\n    margin-bottom: 0;\n    color: ${theme.colors.grayscale.dark1};\n    background-color: ${theme.colors.primary.light4};\n\n    .selectedCopy {\n      display: inline-block;\n      padding: ${theme.gridUnit * 2}px 0;\n    }\n\n    .deselect-all {\n      color: ${theme.colors.primary.base};\n      margin-left: ${theme.gridUnit * 4}px;\n    }\n\n    .divider {\n      margin: ${`${-theme.gridUnit * 2}px 0 ${-theme.gridUnit * 2}px ${theme.gridUnit * 4}px`};\n      width: 1px;\n      height: ${theme.gridUnit * 8}px;\n      box-shadow: inset -1px 0px 0px ${theme.colors.grayscale.light2};\n      display: inline-flex;\n      vertical-align: middle;\n      position: relative;\n    }\n\n    .ant-alert-close-icon {\n      margin-top: ${theme.gridUnit * 1.5}px;\n    }\n  `;}}\n`;\nconst bulkSelectColumnConfig = {\n  Cell: (_ref9) => {let { row } = _ref9;return ___EmotionJSX(IndeterminateCheckbox, _extends({}, row.getToggleRowSelectedProps(), { id: row.id }));},\n  Header: (_ref10) => {let { getToggleAllRowsSelectedProps } = _ref10;return ___EmotionJSX(IndeterminateCheckbox, _extends({}, getToggleAllRowsSelectedProps(), { id: \"header-toggle-all\" }));},\n  id: 'selection',\n  size: 'sm' };\n\nconst ViewModeContainer = styled.div`\n  padding-right: ${(_ref11) => {let { theme } = _ref11;return theme.gridUnit * 4;}}px;\n  margin-top: ${(_ref12) => {let { theme } = _ref12;return theme.gridUnit * 5 + 1;}}px;\n  white-space: nowrap;\n  display: inline-block;\n\n  .toggle-button {\n    display: inline-block;\n    border-radius: ${(_ref13) => {let { theme } = _ref13;return theme.gridUnit / 2;}}px;\n    padding: ${(_ref14) => {let { theme } = _ref14;return theme.gridUnit;}}px;\n    padding-bottom: ${(_ref15) => {let { theme } = _ref15;return theme.gridUnit * 0.5;}}px;\n\n    &:first-of-type {\n      margin-right: ${(_ref16) => {let { theme } = _ref16;return theme.gridUnit * 2;}}px;\n    }\n  }\n\n  .active {\n    background-color: ${(_ref17) => {let { theme } = _ref17;return theme.colors.grayscale.base;}};\n    svg {\n      color: ${(_ref18) => {let { theme } = _ref18;return theme.colors.grayscale.light5;}};\n    }\n  }\n`;\nconst EmptyWrapper = styled.div`\n  padding: ${(_ref19) => {let { theme } = _ref19;return theme.gridUnit * 40;}}px 0;\n\n  &.table {\n    background: ${(_ref20) => {let { theme } = _ref20;return theme.colors.grayscale.light5;}};\n  }\n`;\nconst ViewModeToggle = (_ref21) => {let { mode, setMode } = _ref21;return ___EmotionJSX(ViewModeContainer, null,\n  ___EmotionJSX(\"div\", { role: \"button\", tabIndex: 0, onClick: (e) => {\n      e.currentTarget.blur();\n      setMode('card');\n    }, className: cx('toggle-button', { active: mode === 'card' }) },\n  ___EmotionJSX(Icons.CardView, null)),\n\n  ___EmotionJSX(\"div\", { role: \"button\", tabIndex: 0, onClick: (e) => {\n      e.currentTarget.blur();\n      setMode('table');\n    }, className: cx('toggle-button', { active: mode === 'table' }) },\n  ___EmotionJSX(Icons.ListView, null)));};\n\n\nfunction ListView(_ref22) {let { columns, data, count, pageSize: initialPageSize, fetchData, loading, initialSort = [], className = '', filters = [], bulkActions = [], bulkSelectEnabled = false, disableBulkSelect = () => {}, renderBulkSelectCopy = (selected) => t('%s Selected', selected.length), renderCard, showThumbnails, cardSortSelectOptions, defaultViewMode = 'card', highlightRowId, emptyState, columnsForWrapText } = _ref22;\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow, pageCount = 1, gotoPage, applyFilterValue, selectedFlatRows, toggleAllRowsSelected, setViewMode, state: { pageIndex, pageSize, internalFilters, viewMode }, query } = useListViewState({\n    bulkSelectColumnConfig,\n    bulkSelectMode: bulkSelectEnabled && Boolean(bulkActions.length),\n    columns,\n    count,\n    data,\n    fetchData,\n    initialPageSize,\n    initialSort,\n    initialFilters: filters,\n    renderCard: Boolean(renderCard),\n    defaultViewMode });\n\n  const filterable = Boolean(filters.length);\n  if (filterable) {\n    const columnAccessors = columns.reduce((acc, col) => ({ ...acc, [col.id || col.accessor]: true }), {});\n    filters.forEach((f) => {\n      if (!columnAccessors[f.id]) {\n        throw new ListViewError(`Invalid filter config, ${f.id} is not present in columns`);\n      }\n    });\n  }\n  const filterControlsRef = useRef(null);\n  const handleClearFilterControls = useCallback(() => {\n    if (query.filters) {var _filterControlsRef$cu;\n      (_filterControlsRef$cu = filterControlsRef.current) == null ? void 0 : _filterControlsRef$cu.clearFilters();\n    }\n  }, [query.filters]);\n  const cardViewEnabled = Boolean(renderCard);\n  useEffect(() => {\n    // discard selections if bulk select is disabled\n    if (!bulkSelectEnabled)\n    toggleAllRowsSelected(false);\n  }, [bulkSelectEnabled, toggleAllRowsSelected]);\n  return ___EmotionJSX(ListViewStyles, null,\n  ___EmotionJSX(\"div\", { \"data-test\": className, className: `superset-list-view ${className}` },\n  ___EmotionJSX(\"div\", { className: \"header\" },\n  cardViewEnabled && ___EmotionJSX(ViewModeToggle, { mode: viewMode, setMode: setViewMode }),\n  ___EmotionJSX(\"div\", { className: \"controls\" },\n  filterable && ___EmotionJSX(FilterControls, { ref: filterControlsRef, filters: filters, internalFilters: internalFilters, updateFilterValue: applyFilterValue }),\n  viewMode === 'card' && cardSortSelectOptions && ___EmotionJSX(CardSortSelect, { initialSort: initialSort, onChange: fetchData, options: cardSortSelectOptions, pageIndex: pageIndex, pageSize: pageSize }))),\n\n\n  ___EmotionJSX(\"div\", { className: `body ${rows.length === 0 ? 'empty' : ''}` },\n  bulkSelectEnabled && ___EmotionJSX(BulkSelectWrapper, { \"data-test\": \"bulk-select-controls\", type: \"info\", closable: true, showIcon: false, onClose: disableBulkSelect, message: ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(\"div\", { className: \"selectedCopy\", \"data-test\": \"bulk-select-copy\" },\n    renderBulkSelectCopy(selectedFlatRows)),\n\n    Boolean(selectedFlatRows.length) && ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(\"span\", { \"data-test\": \"bulk-select-deselect-all\", role: \"button\", tabIndex: 0, className: \"deselect-all\", onClick: () => toggleAllRowsSelected(false) },\n    t('Deselect all')),\n\n    ___EmotionJSX(\"div\", { className: \"divider\" }),\n    bulkActions.map((action) => ___EmotionJSX(Button, { \"data-test\": \"bulk-select-action\", key: action.key, buttonStyle: action.type, cta: true, onClick: () => action.onSelect(selectedFlatRows.map((r) => r.original)) },\n    action.name)))) }),\n\n\n\n  viewMode === 'card' && ___EmotionJSX(CardCollection, { bulkSelectEnabled: bulkSelectEnabled, prepareRow: prepareRow, renderCard: renderCard, rows: rows, loading: loading, showThumbnails: showThumbnails }),\n  viewMode === 'table' && ___EmotionJSX(TableCollection, { getTableProps: getTableProps, getTableBodyProps: getTableBodyProps, prepareRow: prepareRow, headerGroups: headerGroups, rows: rows, columns: columns, loading: loading, highlightRowId: highlightRowId, columnsForWrapText: columnsForWrapText }),\n  !loading && rows.length === 0 && ___EmotionJSX(EmptyWrapper, { className: viewMode },\n  query.filters ? ___EmotionJSX(EmptyStateBig, { title: t('No results match your filter criteria'), description: t('Try different criteria to display results.'), image: \"filter-results.svg\", buttonAction: () => handleClearFilterControls(), buttonText: t('clear all filters') }) : ___EmotionJSX(EmptyStateBig, _extends({}, emptyState, { title: (emptyState == null ? void 0 : emptyState.title) || t('No Data'), image: (emptyState == null ? void 0 : emptyState.image) || 'filter-results.svg' }))))),\n\n\n\n\n  rows.length > 0 && ___EmotionJSX(\"div\", { className: \"pagination-container\" },\n  ___EmotionJSX(Pagination, { totalPages: pageCount || 0, currentPage: pageCount ? pageIndex + 1 : 0, onChange: (p) => gotoPage(p - 1), hideFirstAndLastPageLinks: true }),\n  ___EmotionJSX(\"div\", { className: \"row-count-container\" },\n  !loading &&\n  t('%s-%s of %s', pageSize * pageIndex + (rows.length && 1), pageSize * pageIndex + rows.length, count))));\n\n\n\n}__signature__(ListView, \"useListViewState{{ getTableProps, getTableBodyProps, headerGroups, rows, prepareRow, pageCount = 1, gotoPage, applyFilterValue, selectedFlatRows, toggleAllRowsSelected, setViewMode, state: { pageIndex, pageSize, internalFilters, viewMode }, query, }}\\nuseRef{filterControlsRef}\\nuseCallback{handleClearFilterControls}\\nuseEffect{}\", () => [useListViewState]);const _default =\nListView;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(ListViewStyles, \"ListViewStyles\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/ListView/ListView.tsx\");reactHotLoader.register(BulkSelectWrapper, \"BulkSelectWrapper\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/ListView/ListView.tsx\");reactHotLoader.register(bulkSelectColumnConfig, \"bulkSelectColumnConfig\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/ListView/ListView.tsx\");reactHotLoader.register(ViewModeContainer, \"ViewModeContainer\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/ListView/ListView.tsx\");reactHotLoader.register(EmptyWrapper, \"EmptyWrapper\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/ListView/ListView.tsx\");reactHotLoader.register(ViewModeToggle, \"ViewModeToggle\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/ListView/ListView.tsx\");reactHotLoader.register(ListView, \"ListView\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/ListView/ListView.tsx\");reactHotLoader.register(_default, \"default\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/ListView/ListView.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"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","names":["t","styled","React","useCallback","useEffect","useRef","Alert","cx","Button","Icons","IndeterminateCheckbox","Pagination","TableCollection","CardCollection","FilterControls","CardSortSelect","ListViewError","useListViewState","EmptyStateBig","ListViewStyles","div","theme","gridUnit","colors","grayscale","base","BulkSelectWrapper","dark1","primary","light4","light2","bulkSelectColumnConfig","Cell","row","getToggleRowSelectedProps","id","Header","getToggleAllRowsSelectedProps","size","ViewModeContainer","light5","EmptyWrapper","ViewModeToggle","mode","setMode","e","currentTarget","blur","active","ListView","columns","data","count","pageSize","initialPageSize","fetchData","loading","initialSort","className","filters","bulkActions","bulkSelectEnabled","disableBulkSelect","renderBulkSelectCopy","selected","length","renderCard","showThumbnails","cardSortSelectOptions","defaultViewMode","highlightRowId","emptyState","columnsForWrapText","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","pageCount","gotoPage","applyFilterValue","selectedFlatRows","toggleAllRowsSelected","setViewMode","state","pageIndex","internalFilters","viewMode","query","bulkSelectMode","Boolean","initialFilters","filterable","columnAccessors","reduce","acc","col","accessor","forEach","f","filterControlsRef","handleClearFilterControls","current","clearFilters","cardViewEnabled","map","action","key","type","onSelect","r","original","name","title","image","p"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/ListView/ListView.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t, styled } from '@superset-ui/core';\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport Alert from 'src/components/Alert';\nimport cx from 'classnames';\nimport Button from 'src/components/Button';\nimport Icons from 'src/components/Icons';\nimport IndeterminateCheckbox from 'src/components/IndeterminateCheckbox';\nimport Pagination from 'src/components/Pagination';\nimport TableCollection from 'src/components/TableCollection';\nimport CardCollection from './CardCollection';\nimport FilterControls from './Filters';\nimport { CardSortSelect } from './CardSortSelect';\nimport {\n  FetchDataConfig,\n  Filters,\n  SortColumn,\n  CardSortSelectOption,\n  ViewModeType,\n} from './types';\nimport { ListViewError, useListViewState } from './utils';\nimport { EmptyStateBig, EmptyStateProps } from '../EmptyState';\n\nconst ListViewStyles = styled.div`\n  text-align: center;\n\n  .superset-list-view {\n    text-align: left;\n    border-radius: 4px 0;\n    margin: 0 ${({ theme }) => theme.gridUnit * 4}px;\n\n    .header {\n      display: flex;\n      padding-bottom: ${({ theme }) => theme.gridUnit * 4}px;\n\n      & .controls {\n        display: flex;\n        flex-wrap: wrap;\n        column-gap: ${({ theme }) => theme.gridUnit * 6}px;\n        row-gap: ${({ theme }) => theme.gridUnit * 4}px;\n      }\n    }\n\n    .body.empty table {\n      margin-bottom: 0;\n    }\n\n    .body {\n      overflow-x: auto;\n    }\n\n    .ant-empty {\n      .ant-empty-image {\n        height: auto;\n      }\n    }\n  }\n\n  .pagination-container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    margin-bottom: ${({ theme }) => theme.gridUnit * 4}px;\n  }\n\n  .row-count-container {\n    margin-top: ${({ theme }) => theme.gridUnit * 2}px;\n    color: ${({ theme }) => theme.colors.grayscale.base};\n  }\n`;\n\nconst BulkSelectWrapper = styled(Alert)`\n  ${({ theme }) => `\n    border-radius: 0;\n    margin-bottom: 0;\n    color: ${theme.colors.grayscale.dark1};\n    background-color: ${theme.colors.primary.light4};\n\n    .selectedCopy {\n      display: inline-block;\n      padding: ${theme.gridUnit * 2}px 0;\n    }\n\n    .deselect-all {\n      color: ${theme.colors.primary.base};\n      margin-left: ${theme.gridUnit * 4}px;\n    }\n\n    .divider {\n      margin: ${`${-theme.gridUnit * 2}px 0 ${-theme.gridUnit * 2}px ${\n        theme.gridUnit * 4\n      }px`};\n      width: 1px;\n      height: ${theme.gridUnit * 8}px;\n      box-shadow: inset -1px 0px 0px ${theme.colors.grayscale.light2};\n      display: inline-flex;\n      vertical-align: middle;\n      position: relative;\n    }\n\n    .ant-alert-close-icon {\n      margin-top: ${theme.gridUnit * 1.5}px;\n    }\n  `}\n`;\n\nconst bulkSelectColumnConfig = {\n  Cell: ({ row }: any) => (\n    <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} id={row.id} />\n  ),\n  Header: ({ getToggleAllRowsSelectedProps }: any) => (\n    <IndeterminateCheckbox\n      {...getToggleAllRowsSelectedProps()}\n      id=\"header-toggle-all\"\n    />\n  ),\n  id: 'selection',\n  size: 'sm',\n};\n\nconst ViewModeContainer = styled.div`\n  padding-right: ${({ theme }) => theme.gridUnit * 4}px;\n  margin-top: ${({ theme }) => theme.gridUnit * 5 + 1}px;\n  white-space: nowrap;\n  display: inline-block;\n\n  .toggle-button {\n    display: inline-block;\n    border-radius: ${({ theme }) => theme.gridUnit / 2}px;\n    padding: ${({ theme }) => theme.gridUnit}px;\n    padding-bottom: ${({ theme }) => theme.gridUnit * 0.5}px;\n\n    &:first-of-type {\n      margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n    }\n  }\n\n  .active {\n    background-color: ${({ theme }) => theme.colors.grayscale.base};\n    svg {\n      color: ${({ theme }) => theme.colors.grayscale.light5};\n    }\n  }\n`;\n\nconst EmptyWrapper = styled.div`\n  padding: ${({ theme }) => theme.gridUnit * 40}px 0;\n\n  &.table {\n    background: ${({ theme }) => theme.colors.grayscale.light5};\n  }\n`;\n\nconst ViewModeToggle = ({\n  mode,\n  setMode,\n}: {\n  mode: 'table' | 'card';\n  setMode: (mode: 'table' | 'card') => void;\n}) => (\n  <ViewModeContainer>\n    <div\n      role=\"button\"\n      tabIndex={0}\n      onClick={e => {\n        e.currentTarget.blur();\n        setMode('card');\n      }}\n      className={cx('toggle-button', { active: mode === 'card' })}\n    >\n      <Icons.CardView />\n    </div>\n    <div\n      role=\"button\"\n      tabIndex={0}\n      onClick={e => {\n        e.currentTarget.blur();\n        setMode('table');\n      }}\n      className={cx('toggle-button', { active: mode === 'table' })}\n    >\n      <Icons.ListView />\n    </div>\n  </ViewModeContainer>\n);\n\nexport interface ListViewProps<T extends object = any> {\n  columns: any[];\n  data: T[];\n  count: number;\n  pageSize: number;\n  fetchData: (conf: FetchDataConfig) => any;\n  loading: boolean;\n  className?: string;\n  initialSort?: SortColumn[];\n  filters?: Filters;\n  bulkActions?: Array<{\n    key: string;\n    name: React.ReactNode;\n    onSelect: (rows: any[]) => any;\n    type?: 'primary' | 'secondary' | 'danger';\n  }>;\n  bulkSelectEnabled?: boolean;\n  disableBulkSelect?: () => void;\n  renderBulkSelectCopy?: (selects: any[]) => React.ReactNode;\n  renderCard?: (row: T & { loading: boolean }) => React.ReactNode;\n  cardSortSelectOptions?: Array<CardSortSelectOption>;\n  defaultViewMode?: ViewModeType;\n  highlightRowId?: number;\n  showThumbnails?: boolean;\n  emptyState?: EmptyStateProps;\n  columnsForWrapText?: string[];\n}\n\nfunction ListView<T extends object = any>({\n  columns,\n  data,\n  count,\n  pageSize: initialPageSize,\n  fetchData,\n  loading,\n  initialSort = [],\n  className = '',\n  filters = [],\n  bulkActions = [],\n  bulkSelectEnabled = false,\n  disableBulkSelect = () => {},\n  renderBulkSelectCopy = selected => t('%s Selected', selected.length),\n  renderCard,\n  showThumbnails,\n  cardSortSelectOptions,\n  defaultViewMode = 'card',\n  highlightRowId,\n  emptyState,\n  columnsForWrapText,\n}: ListViewProps<T>) {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    pageCount = 1,\n    gotoPage,\n    applyFilterValue,\n    selectedFlatRows,\n    toggleAllRowsSelected,\n    setViewMode,\n    state: { pageIndex, pageSize, internalFilters, viewMode },\n    query,\n  } = useListViewState({\n    bulkSelectColumnConfig,\n    bulkSelectMode: bulkSelectEnabled && Boolean(bulkActions.length),\n    columns,\n    count,\n    data,\n    fetchData,\n    initialPageSize,\n    initialSort,\n    initialFilters: filters,\n    renderCard: Boolean(renderCard),\n    defaultViewMode,\n  });\n  const filterable = Boolean(filters.length);\n  if (filterable) {\n    const columnAccessors = columns.reduce(\n      (acc, col) => ({ ...acc, [col.id || col.accessor]: true }),\n      {},\n    );\n    filters.forEach(f => {\n      if (!columnAccessors[f.id]) {\n        throw new ListViewError(\n          `Invalid filter config, ${f.id} is not present in columns`,\n        );\n      }\n    });\n  }\n\n  const filterControlsRef = useRef<{ clearFilters: () => void }>(null);\n\n  const handleClearFilterControls = useCallback(() => {\n    if (query.filters) {\n      filterControlsRef.current?.clearFilters();\n    }\n  }, [query.filters]);\n\n  const cardViewEnabled = Boolean(renderCard);\n\n  useEffect(() => {\n    // discard selections if bulk select is disabled\n    if (!bulkSelectEnabled) toggleAllRowsSelected(false);\n  }, [bulkSelectEnabled, toggleAllRowsSelected]);\n\n  return (\n    <ListViewStyles>\n      <div data-test={className} className={`superset-list-view ${className}`}>\n        <div className=\"header\">\n          {cardViewEnabled && (\n            <ViewModeToggle mode={viewMode} setMode={setViewMode} />\n          )}\n          <div className=\"controls\">\n            {filterable && (\n              <FilterControls\n                ref={filterControlsRef}\n                filters={filters}\n                internalFilters={internalFilters}\n                updateFilterValue={applyFilterValue}\n              />\n            )}\n            {viewMode === 'card' && cardSortSelectOptions && (\n              <CardSortSelect\n                initialSort={initialSort}\n                onChange={fetchData}\n                options={cardSortSelectOptions}\n                pageIndex={pageIndex}\n                pageSize={pageSize}\n              />\n            )}\n          </div>\n        </div>\n        <div className={`body ${rows.length === 0 ? 'empty' : ''}`}>\n          {bulkSelectEnabled && (\n            <BulkSelectWrapper\n              data-test=\"bulk-select-controls\"\n              type=\"info\"\n              closable\n              showIcon={false}\n              onClose={disableBulkSelect}\n              message={\n                <>\n                  <div className=\"selectedCopy\" data-test=\"bulk-select-copy\">\n                    {renderBulkSelectCopy(selectedFlatRows)}\n                  </div>\n                  {Boolean(selectedFlatRows.length) && (\n                    <>\n                      <span\n                        data-test=\"bulk-select-deselect-all\"\n                        role=\"button\"\n                        tabIndex={0}\n                        className=\"deselect-all\"\n                        onClick={() => toggleAllRowsSelected(false)}\n                      >\n                        {t('Deselect all')}\n                      </span>\n                      <div className=\"divider\" />\n                      {bulkActions.map(action => (\n                        <Button\n                          data-test=\"bulk-select-action\"\n                          key={action.key}\n                          buttonStyle={action.type}\n                          cta\n                          onClick={() =>\n                            action.onSelect(\n                              selectedFlatRows.map(r => r.original),\n                            )\n                          }\n                        >\n                          {action.name}\n                        </Button>\n                      ))}\n                    </>\n                  )}\n                </>\n              }\n            />\n          )}\n          {viewMode === 'card' && (\n            <CardCollection\n              bulkSelectEnabled={bulkSelectEnabled}\n              prepareRow={prepareRow}\n              renderCard={renderCard}\n              rows={rows}\n              loading={loading}\n              showThumbnails={showThumbnails}\n            />\n          )}\n          {viewMode === 'table' && (\n            <TableCollection\n              getTableProps={getTableProps}\n              getTableBodyProps={getTableBodyProps}\n              prepareRow={prepareRow}\n              headerGroups={headerGroups}\n              rows={rows}\n              columns={columns}\n              loading={loading}\n              highlightRowId={highlightRowId}\n              columnsForWrapText={columnsForWrapText}\n            />\n          )}\n          {!loading && rows.length === 0 && (\n            <EmptyWrapper className={viewMode}>\n              {query.filters ? (\n                <EmptyStateBig\n                  title={t('No results match your filter criteria')}\n                  description={t('Try different criteria to display results.')}\n                  image=\"filter-results.svg\"\n                  buttonAction={() => handleClearFilterControls()}\n                  buttonText={t('clear all filters')}\n                />\n              ) : (\n                <EmptyStateBig\n                  {...emptyState}\n                  title={emptyState?.title || t('No Data')}\n                  image={emptyState?.image || 'filter-results.svg'}\n                />\n              )}\n            </EmptyWrapper>\n          )}\n        </div>\n      </div>\n\n      {rows.length > 0 && (\n        <div className=\"pagination-container\">\n          <Pagination\n            totalPages={pageCount || 0}\n            currentPage={pageCount ? pageIndex + 1 : 0}\n            onChange={(p: number) => gotoPage(p - 1)}\n            hideFirstAndLastPageLinks\n          />\n          <div className=\"row-count-container\">\n            {!loading &&\n              t(\n                '%s-%s of %s',\n                pageSize * pageIndex + (rows.length && 1),\n                pageSize * pageIndex + rows.length,\n                count,\n              )}\n          </div>\n        </div>\n      )}\n    </ListViewStyles>\n  );\n}\n\nexport default ListView;\n"]},"metadata":{},"sourceType":"module"}