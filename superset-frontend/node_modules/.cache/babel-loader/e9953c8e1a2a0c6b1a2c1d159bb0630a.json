{"ast":null,"code":"import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable no-param-reassign, react/sort-prop-types */\nimport d3 from 'd3';\nimport PropTypes from 'prop-types';\nimport {\ngetNumberFormatter,\nNumberFormats,\nCategoricalColorNamespace,\ngetSequentialSchemeRegistry,\nt } from\n'@superset-ui/core';\nimport wrapSvgText from './utils/wrapSvgText';\n\nconst propTypes = {\n  // Each row is an array of [hierarchy-lvl1, hierarchy-lvl2, metric1, metric2]\n  // hierarchy-lvls are string. metrics are number\n  data: PropTypes.arrayOf(PropTypes.array),\n  width: PropTypes.number,\n  height: PropTypes.number,\n  colorScheme: PropTypes.string,\n  linearColorScheme: PropTypes.string,\n  numberFormat: PropTypes.string,\n  metrics: PropTypes.arrayOf(\n  PropTypes.oneOfType([\n  PropTypes.string,\n  PropTypes.object // The metric object\n  ])) };\n\n\n\nfunction metricLabel(metric) {\n  return typeof metric === 'string' || metric instanceof String ?\n  metric :\n  metric.label;\n}\n\n// Given a node in a partition layout, return an array of all of its ancestor\n// nodes, highest first, but excluding the root.\nfunction getAncestors(node) {\n  const path = [];\n  let current = node;\n  while (current.parent) {\n    path.unshift(current);\n    current = current.parent;\n  }\n\n  return path;\n}\n\nfunction buildHierarchy(rows) {\n  const root = {\n    name: 'root',\n    children: [] };\n\n\n  // each record [groupby1val, groupby2val, (<string> or 0)n, m1, m2]\n  rows.forEach((row) => {\n    const m1 = Number(row[row.length - 2]);\n    const m2 = Number(row[row.length - 1]);\n    const levels = row.slice(0, -2);\n    if (Number.isNaN(m1)) {\n      // e.g. if this is a header row\n      return;\n    }\n    let currentNode = root;\n    for (let level = 0; level < levels.length; level += 1) {\n      const children = currentNode.children || [];\n      const nodeName = levels[level].toString();\n      // If the next node has the name '0', it will\n      const isLeafNode = level >= levels.length - 1 || levels[level + 1] === 0;\n      let childNode;\n\n      if (!isLeafNode) {\n        childNode = children.find(\n        (child) => child.name === nodeName && child.level === level);\n\n\n        if (!childNode) {\n          childNode = {\n            name: nodeName,\n            children: [],\n            level };\n\n          children.push(childNode);\n        }\n        currentNode = childNode;\n      } else if (nodeName !== 0) {\n        // Reached the end of the sequence; create a leaf node.\n        childNode = {\n          name: nodeName,\n          m1,\n          m2 };\n\n        children.push(childNode);\n      }\n    }\n  });\n\n  function recurse(node) {\n    if (node.children) {\n      let sums;\n      let m1 = 0;\n      let m2 = 0;\n      for (let i = 0; i < node.children.length; i += 1) {\n        sums = recurse(node.children[i]);\n        m1 += sums[0];\n        m2 += sums[1];\n      }\n      node.m1 = m1;\n      node.m2 = m2;\n    }\n\n    return [node.m1, node.m2];\n  }\n\n  recurse(root);\n\n  return root;\n}\n\nfunction getResponsiveContainerClass(width) {\n  if (width > 500) {\n    return 'l';\n  }\n\n  if (width > 200 && width <= 500) {\n    return 'm';\n  }\n\n  return 's';\n}\n\nfunction getYOffset(width) {\n  if (width > 500) {\n    return ['0', '20', '40', '60'];\n  }\n\n  if (width > 200 && width <= 500) {\n    return ['0', '15', '30', '45'];\n  }\n\n  return ['0', '10', '20', '30'];\n}\n\n// Modified from http://bl.ocks.org/kerryrodden/7090426\nfunction Sunburst(element, props) {\n  const container = d3.select(element);\n  const {\n    data,\n    width,\n    height,\n    colorScheme,\n    linearColorScheme,\n    metrics,\n    numberFormat,\n    sliceId } =\n  props;\n  const responsiveClass = getResponsiveContainerClass(width);\n  const isSmallWidth = responsiveClass === 's';\n  container.attr('class', `superset-legacy-chart-sunburst ${responsiveClass}`);\n  // vars with shared scope within this function\n  const margin = { top: 10, right: 5, bottom: 10, left: 5 };\n  const containerWidth = width;\n  const containerHeight = height;\n  const breadcrumbHeight = containerHeight * 0.085;\n  const visWidth = containerWidth - margin.left - margin.right;\n  const visHeight =\n  containerHeight - margin.top - margin.bottom - breadcrumbHeight;\n  const radius = Math.min(visWidth, visHeight) / 2;\n\n  let colorByCategory = true; // color by category if primary/secondary metrics match\n  let maxBreadcrumbs;\n  let breadcrumbDims; // set based on data\n  let totalSize; // total size of all segments; set after loading the data.\n  let breadcrumbs;\n  let vis;\n  let arcs;\n  let gMiddleText; // dom handles\n\n  const categoricalColorScale = CategoricalColorNamespace.getScale(colorScheme);\n  let linearColorScale;\n\n  // Helper + path gen functions\n  const partition = d3.layout.\n  partition().\n  size([2 * Math.PI, radius * radius]).\n  value((d) => d.m1);\n\n  const arc = d3.svg.\n  arc().\n  startAngle((d) => d.x).\n  endAngle((d) => d.x + d.dx).\n  innerRadius((d) => Math.sqrt(d.y)).\n  outerRadius((d) => Math.sqrt(d.y + d.dy));\n\n  const formatNum = getNumberFormatter(\n  numberFormat || NumberFormats.SI_3_DIGIT);\n\n  const formatPerc = getNumberFormatter(NumberFormats.PERCENT_3_POINT);\n\n  container.select('svg').remove();\n\n  const svg = container.\n  append('svg:svg').\n  attr('width', containerWidth).\n  attr('height', containerHeight);\n\n  function createBreadcrumbs(firstRowData) {\n    // -2 bc row contains 2x metrics, +extra for %label and buffer\n    maxBreadcrumbs = firstRowData.length - 2 + 1;\n    breadcrumbDims = {\n      width: visWidth / maxBreadcrumbs,\n      height: breadcrumbHeight * 0.8, // more margin\n      spacing: 3,\n      tipTailWidth: 10 };\n\n\n    breadcrumbs = svg.\n    append('svg:g').\n    attr('class', 'breadcrumbs').\n    attr('transform', `translate(${margin.left},${margin.top})`);\n\n    breadcrumbs.append('svg:text').attr('class', 'end-label');\n  }\n\n  // Generate a string that describes the points of a breadcrumb polygon.\n  function breadcrumbPoints(d, i) {\n    const points = [];\n    if (isSmallWidth) {\n      points.push('0,0');\n      points.push(`${width},0`);\n      points.push(`${width},0`);\n      points.push(`${width},${breadcrumbDims.height}`);\n      points.push(`0,${breadcrumbDims.height}`);\n      if (i > 0) {\n        // Leftmost breadcrumb; don't include 6th vertex.\n        // points.push(`${breadcrumbDims.tipTailWidth},${breadcrumbDims.height / 2}`);\n      }\n    } else {\n      points.push('0,0');\n      points.push(`${breadcrumbDims.width},0`);\n      points.push(\n      `${breadcrumbDims.width + breadcrumbDims.tipTailWidth},${\n      breadcrumbDims.height / 2\n      }`);\n\n      points.push(`${breadcrumbDims.width},${breadcrumbDims.height}`);\n      points.push(`0,${breadcrumbDims.height}`);\n      if (i > 0) {\n        // Leftmost breadcrumb; don't include 6th vertex.\n        points.push(\n        `${breadcrumbDims.tipTailWidth},${breadcrumbDims.height / 2}`);\n\n      }\n    }\n\n    return points.join(' ');\n  }\n\n  function updateBreadcrumbs(sequenceArray, percentageString) {\n    const breadcrumbWidth = isSmallWidth ? width : breadcrumbDims.width;\n    const g = breadcrumbs.\n    selectAll('g').\n    data(sequenceArray, (d) => d.name + d.depth);\n\n    // Add breadcrumb and label for entering nodes.\n    const entering = g.enter().append('svg:g');\n\n    entering.\n    append('svg:polygon').\n    attr('points', breadcrumbPoints).\n    style('fill', (d) =>\n    colorByCategory ?\n    categoricalColorScale(d.name, sliceId) :\n    linearColorScale(d.m2 / d.m1));\n\n\n    entering.\n    append('svg:text').\n    attr('x', (breadcrumbWidth + breadcrumbDims.tipTailWidth) / 2).\n    attr('y', breadcrumbDims.height / 4).\n    attr('dy', '0.35em').\n    style('fill', (d) => {\n      // Make text white or black based on the lightness of the background\n      const col = d3.hsl(\n      colorByCategory ?\n      categoricalColorScale(d.name, sliceId) :\n      linearColorScale(d.m2 / d.m1));\n\n\n      return col.l < 0.5 ? 'white' : 'black';\n    }).\n    attr('class', 'step-label').\n    text((d) => d.name.replace(/_/g, ' ')).\n    call(wrapSvgText, breadcrumbWidth, breadcrumbDims.height / 2);\n\n    // Set position for entering and updating nodes.\n    g.attr('transform', (d, i) => {\n      if (isSmallWidth) {\n        return `translate(0, ${\n        i * (breadcrumbDims.height + breadcrumbDims.spacing)\n        })`;\n      }\n      return `translate(${\n      i * (breadcrumbDims.width + breadcrumbDims.spacing)\n      }, 0)`;\n    });\n\n    // Remove exiting nodes.\n    g.exit().remove();\n\n    // Now move and update the percentage at the end.\n    breadcrumbs.\n    select('.end-label').\n    attr('x', () => {\n      if (isSmallWidth) {\n        return (breadcrumbWidth + breadcrumbDims.tipTailWidth) / 2;\n      }\n\n      return (\n        (sequenceArray.length + 0.5) * (\n        breadcrumbDims.width + breadcrumbDims.spacing));\n\n    }).\n    attr('y', () => {\n      if (isSmallWidth) {\n        return (sequenceArray.length + 1) * breadcrumbDims.height;\n      }\n\n      return breadcrumbDims.height / 2;\n    }).\n    attr('dy', '0.35em').\n    text(percentageString);\n\n    // Make the breadcrumb trail visible, if it's hidden.\n    breadcrumbs.style('visibility', null);\n  }\n\n  // Fade all but the current sequence, and show it in the breadcrumb trail.\n  function mouseenter(d) {\n    const sequenceArray = getAncestors(d);\n    const parentOfD = sequenceArray[sequenceArray.length - 2] || null;\n\n    const absolutePercentage = (d.m1 / totalSize).toPrecision(3);\n    const conditionalPercentage = parentOfD ?\n    (d.m1 / parentOfD.m1).toPrecision(3) :\n    null;\n\n    const absolutePercString = formatPerc(absolutePercentage);\n    const conditionalPercString = parentOfD ?\n    formatPerc(conditionalPercentage) :\n    '';\n\n    // 3 levels of text if inner-most level, 4 otherwise\n    const yOffsets = getYOffset(width);\n    let offsetIndex = 0;\n\n    // If metrics match, assume we are coloring by category\n    const metricsMatch = Math.abs(d.m1 - d.m2) < 0.00001;\n\n    gMiddleText.selectAll('*').remove();\n\n    offsetIndex += 1;\n    gMiddleText.\n    append('text').\n    attr('class', 'path-abs-percent').\n    attr('y', yOffsets[offsetIndex])\n    // eslint-disable-next-line prefer-template\n    .text(absolutePercString + ' ' + t('of total'));\n\n    const OF_PARENT_TEXT = t('of parent');\n\n    if (conditionalPercString) {\n      offsetIndex += 1;\n      gMiddleText.\n      append('text').\n      attr('class', 'path-cond-percent').\n      attr('y', yOffsets[offsetIndex]).\n      text(`${conditionalPercString} ${OF_PARENT_TEXT}`);\n    }\n\n    offsetIndex += 1;\n    gMiddleText.\n    append('text').\n    attr('class', 'path-metrics').\n    attr('y', yOffsets[offsetIndex]).\n    text(\n    `${metricLabel(metrics[0])}: ${formatNum(d.m1)}${\n    metricsMatch ? '' : `, ${metricLabel(metrics[1])}: ${formatNum(d.m2)}`\n    }`);\n\n\n    offsetIndex += 1;\n    gMiddleText.\n    append('text').\n    attr('class', 'path-ratio').\n    attr('y', yOffsets[offsetIndex]).\n    text(\n    metricsMatch ?\n    '' :\n    `${metricLabel(metrics[1])}/${metricLabel(\n    metrics[0])\n    }: ${formatPerc(d.m2 / d.m1)}`);\n\n\n    // Reset and fade all the segments.\n    arcs.\n    selectAll('path').\n    style('stroke-width', null).\n    style('stroke', null).\n    style('opacity', 0.3);\n\n    // Then highlight only those that are an ancestor of the current segment.\n    arcs.\n    selectAll('path').\n    filter((node) => _includesInstanceProperty(sequenceArray).call(sequenceArray, node)).\n    style('opacity', 1).\n    style('stroke', '#aaa');\n\n    updateBreadcrumbs(sequenceArray, absolutePercString);\n  }\n\n  // Restore everything to full opacity when moving off the visualization.\n  function mouseleave() {\n    // Hide the breadcrumb trail\n    breadcrumbs.style('visibility', 'hidden');\n\n    gMiddleText.selectAll('*').remove();\n\n    // Deactivate all segments during transition.\n    arcs.selectAll('path').on('mouseenter', null);\n\n    // Transition each segment to full opacity and then reactivate it.\n    arcs.\n    selectAll('path').\n    transition().\n    duration(200).\n    style('opacity', 1).\n    style('stroke', null).\n    style('stroke-width', null).\n    each('end', function end() {\n      d3.select(this).on('mouseenter', mouseenter);\n    });\n  }\n\n  // Main function to draw and set up the visualization, once we have the data.\n  function createVisualization(rows) {\n    const root = buildHierarchy(rows);\n    maxBreadcrumbs = rows[0].length - 2;\n    vis = svg.\n    append('svg:g').\n    attr('class', 'sunburst-vis').\n    attr(\n    'transform',\n    'translate(' +\n    `${margin.left + visWidth / 2},` +\n    `${\n    margin.top + (\n    isSmallWidth ?\n    breadcrumbHeight * maxBreadcrumbs :\n    breadcrumbHeight) +\n    visHeight / 2\n    }` +\n    ')').\n\n    on('mouseleave', mouseleave);\n\n    arcs = vis.append('svg:g').attr('id', 'arcs');\n\n    gMiddleText = vis.append('svg:g').attr('class', 'center-label');\n\n    // Bounding circle underneath the sunburst, to make it easier to detect\n    // when the mouse leaves the parent g.\n    arcs.append('svg:circle').attr('r', radius).style('opacity', 0);\n\n    // For efficiency, filter nodes to keep only those large enough to see.\n    const nodes = partition.nodes(root).filter((d) => d.dx > 0.005); // 0.005 radians = 0.29 degrees\n\n    if (metrics[0] !== metrics[1] && metrics[1]) {\n      colorByCategory = false;\n      const ext = d3.extent(nodes, (d) => d.m2 / d.m1);\n      linearColorScale = getSequentialSchemeRegistry().\n      get(linearColorScheme).\n      createLinearScale(ext);\n    }\n\n    arcs.\n    selectAll('path').\n    data(nodes).\n    enter().\n    append('svg:path').\n    attr('display', (d) => d.depth ? null : 'none').\n    attr('d', arc).\n    attr('fill-rule', 'evenodd').\n    style('fill', (d) =>\n    colorByCategory ?\n    categoricalColorScale(d.name, sliceId) :\n    linearColorScale(d.m2 / d.m1)).\n\n    style('opacity', 1).\n    on('mouseenter', mouseenter);\n\n    // Get total size of the tree = value of root node from partition.\n    totalSize = root.value;\n  }\n  createBreadcrumbs(data[0]);\n  createVisualization(data);\n}\n\nSunburst.displayName = 'Sunburst';\nSunburst.propTypes = propTypes;\n\nexport default Sunburst;","map":{"version":3,"names":["d3","PropTypes","getNumberFormatter","NumberFormats","CategoricalColorNamespace","getSequentialSchemeRegistry","t","wrapSvgText","propTypes","data","arrayOf","array","width","number","height","colorScheme","string","linearColorScheme","numberFormat","metrics","oneOfType","object","metricLabel","metric","String","label","getAncestors","node","path","current","parent","unshift","buildHierarchy","rows","root","name","children","forEach","row","m1","Number","length","m2","levels","slice","isNaN","currentNode","level","nodeName","toString","isLeafNode","childNode","find","child","push","recurse","sums","i","getResponsiveContainerClass","getYOffset","Sunburst","element","props","container","select","sliceId","responsiveClass","isSmallWidth","attr","margin","top","right","bottom","left","containerWidth","containerHeight","breadcrumbHeight","visWidth","visHeight","radius","Math","min","colorByCategory","maxBreadcrumbs","breadcrumbDims","totalSize","breadcrumbs","vis","arcs","gMiddleText","categoricalColorScale","getScale","linearColorScale","partition","layout","size","PI","value","d","arc","svg","startAngle","x","endAngle","dx","innerRadius","sqrt","y","outerRadius","dy","formatNum","SI_3_DIGIT","formatPerc","PERCENT_3_POINT","remove","append","createBreadcrumbs","firstRowData","spacing","tipTailWidth","breadcrumbPoints","points","join","updateBreadcrumbs","sequenceArray","percentageString","breadcrumbWidth","g","selectAll","depth","entering","enter","style","col","hsl","l","text","replace","call","exit","mouseenter","parentOfD","absolutePercentage","toPrecision","conditionalPercentage","absolutePercString","conditionalPercString","yOffsets","offsetIndex","metricsMatch","abs","OF_PARENT_TEXT","filter","mouseleave","on","transition","duration","each","end","createVisualization","nodes","ext","extent","get","createLinearScale","displayName"],"sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/plugins/legacy-plugin-chart-sunburst/src/Sunburst.js"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable no-param-reassign, react/sort-prop-types */\nimport d3 from 'd3';\nimport PropTypes from 'prop-types';\nimport {\n  getNumberFormatter,\n  NumberFormats,\n  CategoricalColorNamespace,\n  getSequentialSchemeRegistry,\n  t,\n} from '@superset-ui/core';\nimport wrapSvgText from './utils/wrapSvgText';\n\nconst propTypes = {\n  // Each row is an array of [hierarchy-lvl1, hierarchy-lvl2, metric1, metric2]\n  // hierarchy-lvls are string. metrics are number\n  data: PropTypes.arrayOf(PropTypes.array),\n  width: PropTypes.number,\n  height: PropTypes.number,\n  colorScheme: PropTypes.string,\n  linearColorScheme: PropTypes.string,\n  numberFormat: PropTypes.string,\n  metrics: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.object, // The metric object\n    ]),\n  ),\n};\n\nfunction metricLabel(metric) {\n  return typeof metric === 'string' || metric instanceof String\n    ? metric\n    : metric.label;\n}\n\n// Given a node in a partition layout, return an array of all of its ancestor\n// nodes, highest first, but excluding the root.\nfunction getAncestors(node) {\n  const path = [];\n  let current = node;\n  while (current.parent) {\n    path.unshift(current);\n    current = current.parent;\n  }\n\n  return path;\n}\n\nfunction buildHierarchy(rows) {\n  const root = {\n    name: 'root',\n    children: [],\n  };\n\n  // each record [groupby1val, groupby2val, (<string> or 0)n, m1, m2]\n  rows.forEach(row => {\n    const m1 = Number(row[row.length - 2]);\n    const m2 = Number(row[row.length - 1]);\n    const levels = row.slice(0, -2);\n    if (Number.isNaN(m1)) {\n      // e.g. if this is a header row\n      return;\n    }\n    let currentNode = root;\n    for (let level = 0; level < levels.length; level += 1) {\n      const children = currentNode.children || [];\n      const nodeName = levels[level].toString();\n      // If the next node has the name '0', it will\n      const isLeafNode = level >= levels.length - 1 || levels[level + 1] === 0;\n      let childNode;\n\n      if (!isLeafNode) {\n        childNode = children.find(\n          child => child.name === nodeName && child.level === level,\n        );\n\n        if (!childNode) {\n          childNode = {\n            name: nodeName,\n            children: [],\n            level,\n          };\n          children.push(childNode);\n        }\n        currentNode = childNode;\n      } else if (nodeName !== 0) {\n        // Reached the end of the sequence; create a leaf node.\n        childNode = {\n          name: nodeName,\n          m1,\n          m2,\n        };\n        children.push(childNode);\n      }\n    }\n  });\n\n  function recurse(node) {\n    if (node.children) {\n      let sums;\n      let m1 = 0;\n      let m2 = 0;\n      for (let i = 0; i < node.children.length; i += 1) {\n        sums = recurse(node.children[i]);\n        m1 += sums[0];\n        m2 += sums[1];\n      }\n      node.m1 = m1;\n      node.m2 = m2;\n    }\n\n    return [node.m1, node.m2];\n  }\n\n  recurse(root);\n\n  return root;\n}\n\nfunction getResponsiveContainerClass(width) {\n  if (width > 500) {\n    return 'l';\n  }\n\n  if (width > 200 && width <= 500) {\n    return 'm';\n  }\n\n  return 's';\n}\n\nfunction getYOffset(width) {\n  if (width > 500) {\n    return ['0', '20', '40', '60'];\n  }\n\n  if (width > 200 && width <= 500) {\n    return ['0', '15', '30', '45'];\n  }\n\n  return ['0', '10', '20', '30'];\n}\n\n// Modified from http://bl.ocks.org/kerryrodden/7090426\nfunction Sunburst(element, props) {\n  const container = d3.select(element);\n  const {\n    data,\n    width,\n    height,\n    colorScheme,\n    linearColorScheme,\n    metrics,\n    numberFormat,\n    sliceId,\n  } = props;\n  const responsiveClass = getResponsiveContainerClass(width);\n  const isSmallWidth = responsiveClass === 's';\n  container.attr('class', `superset-legacy-chart-sunburst ${responsiveClass}`);\n  // vars with shared scope within this function\n  const margin = { top: 10, right: 5, bottom: 10, left: 5 };\n  const containerWidth = width;\n  const containerHeight = height;\n  const breadcrumbHeight = containerHeight * 0.085;\n  const visWidth = containerWidth - margin.left - margin.right;\n  const visHeight =\n    containerHeight - margin.top - margin.bottom - breadcrumbHeight;\n  const radius = Math.min(visWidth, visHeight) / 2;\n\n  let colorByCategory = true; // color by category if primary/secondary metrics match\n  let maxBreadcrumbs;\n  let breadcrumbDims; // set based on data\n  let totalSize; // total size of all segments; set after loading the data.\n  let breadcrumbs;\n  let vis;\n  let arcs;\n  let gMiddleText; // dom handles\n\n  const categoricalColorScale = CategoricalColorNamespace.getScale(colorScheme);\n  let linearColorScale;\n\n  // Helper + path gen functions\n  const partition = d3.layout\n    .partition()\n    .size([2 * Math.PI, radius * radius])\n    .value(d => d.m1);\n\n  const arc = d3.svg\n    .arc()\n    .startAngle(d => d.x)\n    .endAngle(d => d.x + d.dx)\n    .innerRadius(d => Math.sqrt(d.y))\n    .outerRadius(d => Math.sqrt(d.y + d.dy));\n\n  const formatNum = getNumberFormatter(\n    numberFormat || NumberFormats.SI_3_DIGIT,\n  );\n  const formatPerc = getNumberFormatter(NumberFormats.PERCENT_3_POINT);\n\n  container.select('svg').remove();\n\n  const svg = container\n    .append('svg:svg')\n    .attr('width', containerWidth)\n    .attr('height', containerHeight);\n\n  function createBreadcrumbs(firstRowData) {\n    // -2 bc row contains 2x metrics, +extra for %label and buffer\n    maxBreadcrumbs = firstRowData.length - 2 + 1;\n    breadcrumbDims = {\n      width: visWidth / maxBreadcrumbs,\n      height: breadcrumbHeight * 0.8, // more margin\n      spacing: 3,\n      tipTailWidth: 10,\n    };\n\n    breadcrumbs = svg\n      .append('svg:g')\n      .attr('class', 'breadcrumbs')\n      .attr('transform', `translate(${margin.left},${margin.top})`);\n\n    breadcrumbs.append('svg:text').attr('class', 'end-label');\n  }\n\n  // Generate a string that describes the points of a breadcrumb polygon.\n  function breadcrumbPoints(d, i) {\n    const points = [];\n    if (isSmallWidth) {\n      points.push('0,0');\n      points.push(`${width},0`);\n      points.push(`${width},0`);\n      points.push(`${width},${breadcrumbDims.height}`);\n      points.push(`0,${breadcrumbDims.height}`);\n      if (i > 0) {\n        // Leftmost breadcrumb; don't include 6th vertex.\n        // points.push(`${breadcrumbDims.tipTailWidth},${breadcrumbDims.height / 2}`);\n      }\n    } else {\n      points.push('0,0');\n      points.push(`${breadcrumbDims.width},0`);\n      points.push(\n        `${breadcrumbDims.width + breadcrumbDims.tipTailWidth},${\n          breadcrumbDims.height / 2\n        }`,\n      );\n      points.push(`${breadcrumbDims.width},${breadcrumbDims.height}`);\n      points.push(`0,${breadcrumbDims.height}`);\n      if (i > 0) {\n        // Leftmost breadcrumb; don't include 6th vertex.\n        points.push(\n          `${breadcrumbDims.tipTailWidth},${breadcrumbDims.height / 2}`,\n        );\n      }\n    }\n\n    return points.join(' ');\n  }\n\n  function updateBreadcrumbs(sequenceArray, percentageString) {\n    const breadcrumbWidth = isSmallWidth ? width : breadcrumbDims.width;\n    const g = breadcrumbs\n      .selectAll('g')\n      .data(sequenceArray, d => d.name + d.depth);\n\n    // Add breadcrumb and label for entering nodes.\n    const entering = g.enter().append('svg:g');\n\n    entering\n      .append('svg:polygon')\n      .attr('points', breadcrumbPoints)\n      .style('fill', d =>\n        colorByCategory\n          ? categoricalColorScale(d.name, sliceId)\n          : linearColorScale(d.m2 / d.m1),\n      );\n\n    entering\n      .append('svg:text')\n      .attr('x', (breadcrumbWidth + breadcrumbDims.tipTailWidth) / 2)\n      .attr('y', breadcrumbDims.height / 4)\n      .attr('dy', '0.35em')\n      .style('fill', d => {\n        // Make text white or black based on the lightness of the background\n        const col = d3.hsl(\n          colorByCategory\n            ? categoricalColorScale(d.name, sliceId)\n            : linearColorScale(d.m2 / d.m1),\n        );\n\n        return col.l < 0.5 ? 'white' : 'black';\n      })\n      .attr('class', 'step-label')\n      .text(d => d.name.replace(/_/g, ' '))\n      .call(wrapSvgText, breadcrumbWidth, breadcrumbDims.height / 2);\n\n    // Set position for entering and updating nodes.\n    g.attr('transform', (d, i) => {\n      if (isSmallWidth) {\n        return `translate(0, ${\n          i * (breadcrumbDims.height + breadcrumbDims.spacing)\n        })`;\n      }\n      return `translate(${\n        i * (breadcrumbDims.width + breadcrumbDims.spacing)\n      }, 0)`;\n    });\n\n    // Remove exiting nodes.\n    g.exit().remove();\n\n    // Now move and update the percentage at the end.\n    breadcrumbs\n      .select('.end-label')\n      .attr('x', () => {\n        if (isSmallWidth) {\n          return (breadcrumbWidth + breadcrumbDims.tipTailWidth) / 2;\n        }\n\n        return (\n          (sequenceArray.length + 0.5) *\n          (breadcrumbDims.width + breadcrumbDims.spacing)\n        );\n      })\n      .attr('y', () => {\n        if (isSmallWidth) {\n          return (sequenceArray.length + 1) * breadcrumbDims.height;\n        }\n\n        return breadcrumbDims.height / 2;\n      })\n      .attr('dy', '0.35em')\n      .text(percentageString);\n\n    // Make the breadcrumb trail visible, if it's hidden.\n    breadcrumbs.style('visibility', null);\n  }\n\n  // Fade all but the current sequence, and show it in the breadcrumb trail.\n  function mouseenter(d) {\n    const sequenceArray = getAncestors(d);\n    const parentOfD = sequenceArray[sequenceArray.length - 2] || null;\n\n    const absolutePercentage = (d.m1 / totalSize).toPrecision(3);\n    const conditionalPercentage = parentOfD\n      ? (d.m1 / parentOfD.m1).toPrecision(3)\n      : null;\n\n    const absolutePercString = formatPerc(absolutePercentage);\n    const conditionalPercString = parentOfD\n      ? formatPerc(conditionalPercentage)\n      : '';\n\n    // 3 levels of text if inner-most level, 4 otherwise\n    const yOffsets = getYOffset(width);\n    let offsetIndex = 0;\n\n    // If metrics match, assume we are coloring by category\n    const metricsMatch = Math.abs(d.m1 - d.m2) < 0.00001;\n\n    gMiddleText.selectAll('*').remove();\n\n    offsetIndex += 1;\n    gMiddleText\n      .append('text')\n      .attr('class', 'path-abs-percent')\n      .attr('y', yOffsets[offsetIndex])\n      // eslint-disable-next-line prefer-template\n      .text(absolutePercString + ' ' + t('of total'));\n\n    const OF_PARENT_TEXT = t('of parent');\n\n    if (conditionalPercString) {\n      offsetIndex += 1;\n      gMiddleText\n        .append('text')\n        .attr('class', 'path-cond-percent')\n        .attr('y', yOffsets[offsetIndex])\n        .text(`${conditionalPercString} ${OF_PARENT_TEXT}`);\n    }\n\n    offsetIndex += 1;\n    gMiddleText\n      .append('text')\n      .attr('class', 'path-metrics')\n      .attr('y', yOffsets[offsetIndex])\n      .text(\n        `${metricLabel(metrics[0])}: ${formatNum(d.m1)}${\n          metricsMatch ? '' : `, ${metricLabel(metrics[1])}: ${formatNum(d.m2)}`\n        }`,\n      );\n\n    offsetIndex += 1;\n    gMiddleText\n      .append('text')\n      .attr('class', 'path-ratio')\n      .attr('y', yOffsets[offsetIndex])\n      .text(\n        metricsMatch\n          ? ''\n          : `${metricLabel(metrics[1])}/${metricLabel(\n              metrics[0],\n            )}: ${formatPerc(d.m2 / d.m1)}`,\n      );\n\n    // Reset and fade all the segments.\n    arcs\n      .selectAll('path')\n      .style('stroke-width', null)\n      .style('stroke', null)\n      .style('opacity', 0.3);\n\n    // Then highlight only those that are an ancestor of the current segment.\n    arcs\n      .selectAll('path')\n      .filter(node => sequenceArray.includes(node))\n      .style('opacity', 1)\n      .style('stroke', '#aaa');\n\n    updateBreadcrumbs(sequenceArray, absolutePercString);\n  }\n\n  // Restore everything to full opacity when moving off the visualization.\n  function mouseleave() {\n    // Hide the breadcrumb trail\n    breadcrumbs.style('visibility', 'hidden');\n\n    gMiddleText.selectAll('*').remove();\n\n    // Deactivate all segments during transition.\n    arcs.selectAll('path').on('mouseenter', null);\n\n    // Transition each segment to full opacity and then reactivate it.\n    arcs\n      .selectAll('path')\n      .transition()\n      .duration(200)\n      .style('opacity', 1)\n      .style('stroke', null)\n      .style('stroke-width', null)\n      .each('end', function end() {\n        d3.select(this).on('mouseenter', mouseenter);\n      });\n  }\n\n  // Main function to draw and set up the visualization, once we have the data.\n  function createVisualization(rows) {\n    const root = buildHierarchy(rows);\n    maxBreadcrumbs = rows[0].length - 2;\n    vis = svg\n      .append('svg:g')\n      .attr('class', 'sunburst-vis')\n      .attr(\n        'transform',\n        'translate(' +\n          `${margin.left + visWidth / 2},` +\n          `${\n            margin.top +\n            (isSmallWidth\n              ? breadcrumbHeight * maxBreadcrumbs\n              : breadcrumbHeight) +\n            visHeight / 2\n          }` +\n          ')',\n      )\n      .on('mouseleave', mouseleave);\n\n    arcs = vis.append('svg:g').attr('id', 'arcs');\n\n    gMiddleText = vis.append('svg:g').attr('class', 'center-label');\n\n    // Bounding circle underneath the sunburst, to make it easier to detect\n    // when the mouse leaves the parent g.\n    arcs.append('svg:circle').attr('r', radius).style('opacity', 0);\n\n    // For efficiency, filter nodes to keep only those large enough to see.\n    const nodes = partition.nodes(root).filter(d => d.dx > 0.005); // 0.005 radians = 0.29 degrees\n\n    if (metrics[0] !== metrics[1] && metrics[1]) {\n      colorByCategory = false;\n      const ext = d3.extent(nodes, d => d.m2 / d.m1);\n      linearColorScale = getSequentialSchemeRegistry()\n        .get(linearColorScheme)\n        .createLinearScale(ext);\n    }\n\n    arcs\n      .selectAll('path')\n      .data(nodes)\n      .enter()\n      .append('svg:path')\n      .attr('display', d => (d.depth ? null : 'none'))\n      .attr('d', arc)\n      .attr('fill-rule', 'evenodd')\n      .style('fill', d =>\n        colorByCategory\n          ? categoricalColorScale(d.name, sliceId)\n          : linearColorScale(d.m2 / d.m1),\n      )\n      .style('opacity', 1)\n      .on('mouseenter', mouseenter);\n\n    // Get total size of the tree = value of root node from partition.\n    totalSize = root.value;\n  }\n  createBreadcrumbs(data[0]);\n  createVisualization(data);\n}\n\nSunburst.displayName = 'Sunburst';\nSunburst.propTypes = propTypes;\n\nexport default Sunburst;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}