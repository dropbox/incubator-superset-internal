{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { css, styled, t } from '@superset-ui/core';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst TooltipSectionWrapper = styled.div`\n  ${(_ref) => {let { theme } = _ref;return css`\n    display: flex;\n    flex-direction: column;\n    font-size: ${theme.typography.sizes.s}px;\n    line-height: 1.2;\n\n    &:not(:last-of-type) {\n      margin-bottom: ${theme.gridUnit * 2}px;\n    }\n  `;}}\n`;\nconst TooltipSectionLabel = styled.span`\n  ${(_ref2) => {let { theme } = _ref2;return css`\n    font-weight: ${theme.typography.weights.bold};\n  `;}}\n`;\nconst TooltipSection = (_ref3) => {let { label, text } = _ref3;return ___EmotionJSX(TooltipSectionWrapper, null,\n  ___EmotionJSX(TooltipSectionLabel, null, label),\n  ___EmotionJSX(\"span\", null, text));};\n\nexport const isLabelTruncated = (labelRef) => {var _labelRef$current, _labelRef$current2;return !!((labelRef == null ? void 0 : (_labelRef$current = labelRef.current) == null ? void 0 : _labelRef$current.scrollWidth) > (labelRef == null ? void 0 : (_labelRef$current2 = labelRef.current) == null ? void 0 : _labelRef$current2.clientWidth));};\nexport const getColumnLabelText = (column) => column.verbose_name || column.column_name;\nexport const getColumnTypeTooltipNode = (column) => {\n  if (!column.type) {\n    return null;\n  }\n  return ___EmotionJSX(TooltipSection, { label: t('Column datatype'), text: column.type.toLowerCase() });\n};\nexport const getColumnTooltipNode = (column, labelRef) => {\n  if ((!column.column_name || !column.verbose_name) &&\n  !column.description &&\n  !isLabelTruncated(labelRef)) {\n    return null;\n  }\n  return ___EmotionJSX(React.Fragment, null,\n  column.column_name && ___EmotionJSX(TooltipSection, { label: t('Column name'), text: column.column_name }),\n  column.verbose_name && ___EmotionJSX(TooltipSection, { label: t('Label'), text: column.verbose_name }),\n  column.description && ___EmotionJSX(TooltipSection, { label: t('Description'), text: column.description }));\n\n};\nexport const getMetricTooltipNode = (metric, labelRef) => {\n  if (!metric.verbose_name &&\n  !metric.description &&\n  !metric.label &&\n  !isLabelTruncated(labelRef)) {\n    return null;\n  }\n  return ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(TooltipSection, { label: t('Metric name'), text: metric.metric_name }),\n  (metric.label || metric.verbose_name) && ___EmotionJSX(TooltipSection, { label: t('Label'), text: metric.label || metric.verbose_name }),\n  metric.description && ___EmotionJSX(TooltipSection, { label: t('Description'), text: metric.description }));\n\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,KAAP,MAAiC,OAAjC;AAEA,SAASC,GAAT,EAAcC,MAAd,EAAsBC,CAAtB,QAA+B,mBAA/B,C;AAGA,MAAMC,qBAAqB,GAAGF,MAAM,CAACG,GAAG;IACpC,eAAC,EAAEC,KAAF,EAAD,eAAeL,GAAG;;;iBAGLK,KAAK,CAACC,UAAN,CAAiBC,KAAjB,CAAuBC,CAAC;;;;uBAIlBH,KAAK,CAACI,QAAN,GAAiB,CAAC;;GAPrC,EASD;CAVH;AAaA,MAAMC,mBAAmB,GAAGT,MAAM,CAACU,IAAI;IACnC,gBAAC,EAAEN,KAAF,EAAD,gBAAeL,GAAG;mBACHK,KAAK,CAACC,UAAN,CAAiBM,OAAjB,CAAyBC,IAAI;GAD5C,EAED;CAHH;AAMA,MAAMC,cAAc,GAAG,gBAAC,EACtBC,KADsB,EAEtBC,IAFsB,EAAD,gBAOrB,cAAC,qBAAD;EACE,cAAC,mBAAD,QAAsBD,KAAtB,CADF;EAEE,4BAAOC,IAAP,CAFF,CAPqB,EAAvB;;AAaA,OAAO,MAAMC,gBAAgB,GAAG,CAACC,QAAD,uDAC9B,CAAC,EAAE,SAAQ,QAAR,yCAAQ,CAAEC,OAAV,uCAAmBC,WAAnB,KAAiCF,QAAjC,0CAAiCA,QAAQ,CAAEC,OAA3C,qBAAiC,mBAAmBE,WAApD,CAAF,CAD6B,EAAzB;AAGP,OAAO,MAAMC,kBAAkB,GAAG,CAACC,MAAD,KAChCA,MAAM,CAACC,YAAP,IAAuBD,MAAM,CAACE,WADzB;AAGP,OAAO,MAAMC,wBAAwB,GAAG,CAACH,MAAD,KAAkC;EACxE,IAAI,CAACA,MAAM,CAACI,IAAZ,EAAkB;IAChB,OAAO,IAAP;EACD;EAED,OACE,cAAC,cAAD,IACE,KAAK,EAAEzB,CAAC,CAAC,iBAAD,CADV,EAEE,IAAI,EAAEqB,MAAM,CAACI,IAAP,CAAYC,WAAZ,EAFR,GADF;AAMD,CAXM;AAaP,OAAO,MAAMC,oBAAoB,GAAG,CAClCN,MADkC,EAElCL,QAFkC,KAGrB;EACb,IACE,CAAC,CAACK,MAAM,CAACE,WAAR,IAAuB,CAACF,MAAM,CAACC,YAAhC;EACA,CAACD,MAAM,CAACO,WADR;EAEA,CAACb,gBAAgB,CAACC,QAAD,CAHnB,EAIE;IACA,OAAO,IAAP;EACD;EAED,OACE;EACGK,MAAM,CAACE,WAAP,IACC,cAAC,cAAD,IAAgB,KAAK,EAAEvB,CAAC,CAAC,aAAD,CAAxB,EAAyC,IAAI,EAAEqB,MAAM,CAACE,WAAtD,GAFJ;EAIGF,MAAM,CAACC,YAAP,IACC,cAAC,cAAD,IAAgB,KAAK,EAAEtB,CAAC,CAAC,OAAD,CAAxB,EAAmC,IAAI,EAAEqB,MAAM,CAACC,YAAhD,GALJ;EAOGD,MAAM,CAACO,WAAP,IACC,cAAC,cAAD,IAAgB,KAAK,EAAE5B,CAAC,CAAC,aAAD,CAAxB,EAAyC,IAAI,EAAEqB,MAAM,CAACO,WAAtD,GARJ,CADF;;AAaD,CAzBM;AA6BP,OAAO,MAAMC,oBAAoB,GAAG,CAClCC,MADkC,EAElCd,QAFkC,KAGrB;EACb,IACE,CAACc,MAAM,CAACR,YAAR;EACA,CAACQ,MAAM,CAACF,WADR;EAEA,CAACE,MAAM,CAACjB,KAFR;EAGA,CAACE,gBAAgB,CAACC,QAAD,CAJnB,EAKE;IACA,OAAO,IAAP;EACD;EAED,OACE;EACE,cAAC,cAAD,IAAgB,KAAK,EAAEhB,CAAC,CAAC,aAAD,CAAxB,EAAyC,IAAI,EAAE8B,MAAM,CAACC,WAAtD,GADF;EAEG,CAACD,MAAM,CAACjB,KAAP,IAAgBiB,MAAM,CAACR,YAAxB,KACC,cAAC,cAAD,IACE,KAAK,EAAEtB,CAAC,CAAC,OAAD,CADV,EAEE,IAAI,EAAE8B,MAAM,CAACjB,KAAP,IAAgBiB,MAAM,CAACR,YAF/B,GAHJ;EAQGQ,MAAM,CAACF,WAAP,IACC,cAAC,cAAD,IAAgB,KAAK,EAAE5B,CAAC,CAAC,aAAD,CAAxB,EAAyC,IAAI,EAAE8B,MAAM,CAACF,WAAtD,GATJ,CADF;;AAcD,CA3BM","names":["React","css","styled","t","TooltipSectionWrapper","div","theme","typography","sizes","s","gridUnit","TooltipSectionLabel","span","weights","bold","TooltipSection","label","text","isLabelTruncated","labelRef","current","scrollWidth","clientWidth","getColumnLabelText","column","verbose_name","column_name","getColumnTypeTooltipNode","type","toLowerCase","getColumnTooltipNode","description","getMetricTooltipNode","metric","metric_name"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-chart-controls/src/components/labelUtils.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { ReactNode } from 'react';\n\nimport { css, styled, t } from '@superset-ui/core';\nimport { ColumnMeta, Metric } from '@superset-ui/chart-controls';\n\nconst TooltipSectionWrapper = styled.div`\n  ${({ theme }) => css`\n    display: flex;\n    flex-direction: column;\n    font-size: ${theme.typography.sizes.s}px;\n    line-height: 1.2;\n\n    &:not(:last-of-type) {\n      margin-bottom: ${theme.gridUnit * 2}px;\n    }\n  `}\n`;\n\nconst TooltipSectionLabel = styled.span`\n  ${({ theme }) => css`\n    font-weight: ${theme.typography.weights.bold};\n  `}\n`;\n\nconst TooltipSection = ({\n  label,\n  text,\n}: {\n  label: ReactNode;\n  text: ReactNode;\n}) => (\n  <TooltipSectionWrapper>\n    <TooltipSectionLabel>{label}</TooltipSectionLabel>\n    <span>{text}</span>\n  </TooltipSectionWrapper>\n);\n\nexport const isLabelTruncated = (labelRef?: React.RefObject<any>): boolean =>\n  !!(labelRef?.current?.scrollWidth > labelRef?.current?.clientWidth);\n\nexport const getColumnLabelText = (column: ColumnMeta): string =>\n  column.verbose_name || column.column_name;\n\nexport const getColumnTypeTooltipNode = (column: ColumnMeta): ReactNode => {\n  if (!column.type) {\n    return null;\n  }\n\n  return (\n    <TooltipSection\n      label={t('Column datatype')}\n      text={column.type.toLowerCase()}\n    />\n  );\n};\n\nexport const getColumnTooltipNode = (\n  column: ColumnMeta,\n  labelRef?: React.RefObject<any>,\n): ReactNode => {\n  if (\n    (!column.column_name || !column.verbose_name) &&\n    !column.description &&\n    !isLabelTruncated(labelRef)\n  ) {\n    return null;\n  }\n\n  return (\n    <>\n      {column.column_name && (\n        <TooltipSection label={t('Column name')} text={column.column_name} />\n      )}\n      {column.verbose_name && (\n        <TooltipSection label={t('Label')} text={column.verbose_name} />\n      )}\n      {column.description && (\n        <TooltipSection label={t('Description')} text={column.description} />\n      )}\n    </>\n  );\n};\n\ntype MetricType = Omit<Metric, 'id'> & { label?: string };\n\nexport const getMetricTooltipNode = (\n  metric: MetricType,\n  labelRef?: React.RefObject<any>,\n): ReactNode => {\n  if (\n    !metric.verbose_name &&\n    !metric.description &&\n    !metric.label &&\n    !isLabelTruncated(labelRef)\n  ) {\n    return null;\n  }\n\n  return (\n    <>\n      <TooltipSection label={t('Metric name')} text={metric.metric_name} />\n      {(metric.label || metric.verbose_name) && (\n        <TooltipSection\n          label={t('Label')}\n          text={metric.label || metric.verbose_name}\n        />\n      )}\n      {metric.description && (\n        <TooltipSection label={t('Description')} text={metric.description} />\n      )}\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}