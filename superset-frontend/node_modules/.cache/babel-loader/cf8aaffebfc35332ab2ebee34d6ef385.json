{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\"; /*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable react/jsx-sort-default-props */\nimport * as React from 'react';\nimport { t } from '@superset-ui/core';\nimport { createSelector } from 'reselect';\nimport getChartComponentRegistry from '../registries/ChartComponentRegistrySingleton';\nimport getChartTransformPropsRegistry from '../registries/ChartTransformPropsRegistrySingleton';\nimport ChartProps from '../models/ChartProps';\nimport createLoadableRenderer from './createLoadableRenderer';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nfunction IDENTITY(x) {\n  return x;\n}\nconst EMPTY = () => null;\nconst defaultProps = {\n  id: '',\n  className: '',\n  preTransformProps: IDENTITY,\n  overrideTransformProps: undefined,\n  postTransformProps: IDENTITY,\n  onRenderSuccess() {},\n  onRenderFailure() {} };\n\nconst BLANK_CHART_PROPS = new ChartProps();\nexport default class SuperChartCore extends React.PureComponent {constructor() {super(...arguments);this.\n\n\n\n    container = void 0;this.\n\n\n\n\n\n\n\n\n\n\n    processChartProps = createSelector([\n    (input) => input.chartProps,\n    (input) => input.preTransformProps,\n    (input) => input.transformProps,\n    (input) => input.postTransformProps],\n    function (chartProps, pre, transform, post) {if (pre === void 0) {pre = IDENTITY;}if (transform === void 0) {transform = IDENTITY;}if (post === void 0) {post = IDENTITY;}return post(transform(pre(chartProps)));});this.\n\n\n\n\n\n\n\n\n    createLoadableRenderer = createSelector([\n    (input) => input.chartType,\n    (input) => input.overrideTransformProps],\n    (chartType, overrideTransformProps) => {\n      if (chartType) {\n        const Renderer = createLoadableRenderer({\n          loader: {\n            Chart: () => getChartComponentRegistry().getAsPromise(chartType),\n            transformProps: overrideTransformProps ?\n            () => Promise.resolve(overrideTransformProps) :\n            () => getChartTransformPropsRegistry().getAsPromise(chartType) },\n\n          loading: (loadingProps) => this.renderLoading(loadingProps, chartType),\n          render: this.renderChart });\n\n        // Trigger preloading.\n        Renderer.preload();\n        return Renderer;\n      }\n      return EMPTY;\n    });this.\n\n    renderChart = (loaded, props) => {\n      const { Chart, transformProps } = loaded;\n      const { chartProps, preTransformProps, postTransformProps } = props;\n      return ___EmotionJSX(Chart, this.processChartProps({\n        chartProps,\n        preTransformProps,\n        transformProps,\n        postTransformProps }));\n\n    };this.\n    renderLoading = (loadingProps, chartType) => {\n      const { error } = loadingProps;\n      if (error) {\n        return ___EmotionJSX(\"div\", { className: \"alert alert-warning\", role: \"alert\" },\n        ___EmotionJSX(\"strong\", null, t('ERROR')), \"\\xA0\",\n        ___EmotionJSX(\"code\", null, \"chartType=\\\"\", chartType, \"\\\"\"), \" \\u2014\",\n        error.toString());\n\n      }\n      return null;\n    };this.\n    setRef = (container) => {\n      this.container = container;\n    };}\n  render() {\n    const { id, className, preTransformProps, postTransformProps, chartProps = BLANK_CHART_PROPS, onRenderSuccess, onRenderFailure } = this.props;\n    // Create LoadableRenderer and start preloading\n    // the lazy-loaded Chart components\n    const Renderer = this.createLoadableRenderer(this.props);\n    // Do not render if chartProps is set to null.\n    // but the pre-loading has been started in this.createLoadableRenderer\n    // to prepare for rendering once chartProps becomes available.\n    if (chartProps === null) {\n      return null;\n    }\n    const containerProps = {};\n    if (id) {\n      containerProps.id = id;\n    }\n    if (className) {\n      containerProps.className = className;\n    }\n    return ___EmotionJSX(\"div\", _extends({}, containerProps, { ref: this.setRef }),\n    ___EmotionJSX(Renderer, { preTransformProps: preTransformProps, postTransformProps: postTransformProps, chartProps: chartProps, onRenderSuccess: onRenderSuccess, onRenderFailure: onRenderFailure }));\n\n  }}SuperChartCore.defaultProps = defaultProps;","map":{"version":3,"mappings":"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","names":["React","t","createSelector","getChartComponentRegistry","getChartTransformPropsRegistry","ChartProps","createLoadableRenderer","IDENTITY","x","EMPTY","defaultProps","id","className","preTransformProps","overrideTransformProps","undefined","postTransformProps","onRenderSuccess","onRenderFailure","BLANK_CHART_PROPS","SuperChartCore","PureComponent","container","processChartProps","input","chartProps","transformProps","pre","transform","post","chartType","Renderer","loader","Chart","getAsPromise","Promise","resolve","loading","loadingProps","renderLoading","render","renderChart","preload","loaded","props","error","toString","setRef","containerProps"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/packages/superset-ui-core/src/chart/components/SuperChartCore.tsx"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/* eslint-disable react/jsx-sort-default-props */\nimport * as React from 'react';\nimport { t } from '@superset-ui/core';\nimport { createSelector } from 'reselect';\nimport getChartComponentRegistry from '../registries/ChartComponentRegistrySingleton';\nimport getChartTransformPropsRegistry from '../registries/ChartTransformPropsRegistrySingleton';\nimport ChartProps from '../models/ChartProps';\nimport createLoadableRenderer from './createLoadableRenderer';\nimport { ChartType } from '../models/ChartPlugin';\nimport {\n  PreTransformProps,\n  TransformProps,\n  PostTransformProps,\n} from '../types/TransformFunction';\nimport { HandlerFunction } from '../types/Base';\n\nfunction IDENTITY<T>(x: T) {\n  return x;\n}\n\nconst EMPTY = () => null;\n\nconst defaultProps = {\n  id: '',\n  className: '',\n  preTransformProps: IDENTITY,\n  overrideTransformProps: undefined,\n  postTransformProps: IDENTITY,\n  onRenderSuccess() {},\n  onRenderFailure() {},\n};\n\ninterface LoadingProps {\n  error: { toString(): string };\n}\n\ninterface LoadedModules {\n  Chart: ChartType;\n  transformProps: TransformProps;\n}\n\ninterface RenderProps {\n  chartProps: ChartProps;\n  preTransformProps?: PreTransformProps;\n  postTransformProps?: PostTransformProps;\n}\n\nconst BLANK_CHART_PROPS = new ChartProps();\n\nexport type Props = {\n  id?: string;\n  className?: string;\n  chartProps?: ChartProps | null;\n  chartType: string;\n  preTransformProps?: PreTransformProps;\n  overrideTransformProps?: TransformProps;\n  postTransformProps?: PostTransformProps;\n  onRenderSuccess?: HandlerFunction;\n  onRenderFailure?: HandlerFunction;\n};\n\nexport default class SuperChartCore extends React.PureComponent<Props, {}> {\n  /**\n   * The HTML element that wraps all chart content\n   */\n  container?: HTMLElement | null;\n\n  /**\n   * memoized function so it will not recompute\n   * and return previous value\n   * unless one of\n   * - preTransformProps\n   * - transformProps\n   * - postTransformProps\n   * - chartProps\n   * is changed.\n   */\n  processChartProps = createSelector(\n    [\n      (input: {\n        chartProps: ChartProps;\n        preTransformProps?: PreTransformProps;\n        transformProps?: TransformProps;\n        postTransformProps?: PostTransformProps;\n      }) => input.chartProps,\n      input => input.preTransformProps,\n      input => input.transformProps,\n      input => input.postTransformProps,\n    ],\n    (chartProps, pre = IDENTITY, transform = IDENTITY, post = IDENTITY) =>\n      post(transform(pre(chartProps))),\n  );\n\n  /**\n   * memoized function so it will not recompute\n   * and return previous value\n   * unless one of\n   * - chartType\n   * - overrideTransformProps\n   * is changed.\n   */\n  private createLoadableRenderer = createSelector(\n    [\n      (input: { chartType: string; overrideTransformProps?: TransformProps }) =>\n        input.chartType,\n      input => input.overrideTransformProps,\n    ],\n    (chartType, overrideTransformProps) => {\n      if (chartType) {\n        const Renderer = createLoadableRenderer({\n          loader: {\n            Chart: () => getChartComponentRegistry().getAsPromise(chartType),\n            transformProps: overrideTransformProps\n              ? () => Promise.resolve(overrideTransformProps)\n              : () => getChartTransformPropsRegistry().getAsPromise(chartType),\n          },\n          loading: (loadingProps: LoadingProps) =>\n            this.renderLoading(loadingProps, chartType),\n          render: this.renderChart,\n        });\n\n        // Trigger preloading.\n        Renderer.preload();\n\n        return Renderer;\n      }\n\n      return EMPTY;\n    },\n  );\n\n  static defaultProps = defaultProps;\n\n  private renderChart = (loaded: LoadedModules, props: RenderProps) => {\n    const { Chart, transformProps } = loaded;\n    const { chartProps, preTransformProps, postTransformProps } = props;\n\n    return (\n      <Chart\n        {...this.processChartProps({\n          chartProps,\n          preTransformProps,\n          transformProps,\n          postTransformProps,\n        })}\n      />\n    );\n  };\n\n  private renderLoading = (loadingProps: LoadingProps, chartType: string) => {\n    const { error } = loadingProps;\n\n    if (error) {\n      return (\n        <div className=\"alert alert-warning\" role=\"alert\">\n          <strong>{t('ERROR')}</strong>&nbsp;\n          <code>chartType=&quot;{chartType}&quot;</code> &mdash;\n          {error.toString()}\n        </div>\n      );\n    }\n\n    return null;\n  };\n\n  private setRef = (container: HTMLElement | null) => {\n    this.container = container;\n  };\n\n  render() {\n    const {\n      id,\n      className,\n      preTransformProps,\n      postTransformProps,\n      chartProps = BLANK_CHART_PROPS,\n      onRenderSuccess,\n      onRenderFailure,\n    } = this.props;\n\n    // Create LoadableRenderer and start preloading\n    // the lazy-loaded Chart components\n    const Renderer = this.createLoadableRenderer(this.props);\n\n    // Do not render if chartProps is set to null.\n    // but the pre-loading has been started in this.createLoadableRenderer\n    // to prepare for rendering once chartProps becomes available.\n    if (chartProps === null) {\n      return null;\n    }\n\n    const containerProps: {\n      id?: string;\n      className?: string;\n    } = {};\n    if (id) {\n      containerProps.id = id;\n    }\n    if (className) {\n      containerProps.className = className;\n    }\n\n    return (\n      <div {...containerProps} ref={this.setRef}>\n        <Renderer\n          preTransformProps={preTransformProps}\n          postTransformProps={postTransformProps}\n          chartProps={chartProps}\n          onRenderSuccess={onRenderSuccess}\n          onRenderFailure={onRenderFailure}\n        />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}