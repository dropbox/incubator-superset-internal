{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { ensureIsArray, styled, t } from '@superset-ui/core';\nimport Loading from 'src/components/Loading';\nimport { EmptyStateMedium } from 'src/components/EmptyState';\nimport TableView, { EmptyWrapperType } from 'src/components/TableView';\nimport { useFilteredTableData, useTableColumns } from 'src/explore/components/DataTableControl';\nimport { getDatasourceSamples } from 'src/components/Chart/chartAction';\nimport { TableControls } from './DataTableControls';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst Error = styled.pre`\n  margin-top: ${(_ref) => {let { theme } = _ref;return `${theme.gridUnit * 4}px`;}};\n`;\nconst cache = new WeakSet();\nexport const SamplesPane = (_ref2) => {let { isRequest, datasource, queryForce, actions, dataSize = 50, isVisible } = _ref2;\n  const [filterText, setFilterText] = useState('');\n  const [data, setData] = useState([]);\n  const [colnames, setColnames] = useState([]);\n  const [coltypes, setColtypes] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [responseError, setResponseError] = useState('');\n  const datasourceId = useMemo(() => `${datasource.id}__${datasource.type}`, [datasource]);\n  useEffect(() => {\n    if (isRequest && queryForce) {\n      cache.delete(datasource);\n    }\n    if (isRequest && !cache.has(datasource)) {\n      setIsLoading(true);\n      getDatasourceSamples(datasource.type, datasource.id, queryForce, {}).\n      then((response) => {\n        setData(ensureIsArray(response.data));\n        setColnames(ensureIsArray(response.colnames));\n        setColtypes(ensureIsArray(response.coltypes));\n        setResponseError('');\n        cache.add(datasource);\n        if (queryForce && actions) {\n          actions.setForceQuery(false);\n        }\n      }).\n      catch((error) => {\n        setData([]);\n        setColnames([]);\n        setColtypes([]);\n        setResponseError(`${error.name}: ${error.message}`);\n      }).\n      finally(() => {\n        setIsLoading(false);\n      });\n    }\n  }, [datasource, isRequest, queryForce]);\n  // this is to preserve the order of the columns, even if there are integer values,\n  // while also only grabbing the first column's keys\n  const columns = useTableColumns(colnames, coltypes, data, datasourceId, isVisible, {}, // moreConfig\n  true);\n  const filteredData = useFilteredTableData(filterText, data);\n  if (isLoading) {\n    return ___EmotionJSX(Loading, null);\n  }\n  if (responseError) {\n    return ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(TableControls, { data: filteredData, columnNames: colnames, columnTypes: coltypes, datasourceId: datasourceId, onInputChange: (input) => setFilterText(input), isLoading: isLoading }),\n    ___EmotionJSX(Error, null, responseError));\n\n  }\n  if (data.length === 0) {\n    const title = t('No samples were returned for this dataset');\n    return ___EmotionJSX(EmptyStateMedium, { image: \"document.svg\", title: title });\n  }\n  return ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(TableControls, { data: filteredData, columnNames: colnames, columnTypes: coltypes, datasourceId: datasourceId, onInputChange: (input) => setFilterText(input), isLoading: isLoading }),\n  ___EmotionJSX(TableView, { columns: columns, data: filteredData, pageSize: dataSize, noDataText: t('No results'), emptyWrapperType: EmptyWrapperType.Small, className: \"table-condensed\", isPaginationSticky: true, showRowCount: false, small: true }));\n\n};","map":{"version":3,"mappings":"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","names":["React","useState","useEffect","useMemo","ensureIsArray","styled","t","Loading","EmptyStateMedium","TableView","EmptyWrapperType","useFilteredTableData","useTableColumns","getDatasourceSamples","TableControls","Error","pre","theme","gridUnit","cache","WeakSet","SamplesPane","isRequest","datasource","queryForce","actions","dataSize","isVisible","filterText","setFilterText","data","setData","colnames","setColnames","coltypes","setColtypes","isLoading","setIsLoading","responseError","setResponseError","datasourceId","id","type","delete","has","then","response","add","setForceQuery","catch","error","name","message","finally","columns","filteredData","input","length","title","Small"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/explore/components/DataTablesPane/components/SamplesPane.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { ensureIsArray, GenericDataType, styled, t } from '@superset-ui/core';\nimport Loading from 'src/components/Loading';\nimport { EmptyStateMedium } from 'src/components/EmptyState';\nimport TableView, { EmptyWrapperType } from 'src/components/TableView';\nimport {\n  useFilteredTableData,\n  useTableColumns,\n} from 'src/explore/components/DataTableControl';\nimport { getDatasourceSamples } from 'src/components/Chart/chartAction';\nimport { TableControls } from './DataTableControls';\nimport { SamplesPaneProps } from '../types';\n\nconst Error = styled.pre`\n  margin-top: ${({ theme }) => `${theme.gridUnit * 4}px`};\n`;\n\nconst cache = new WeakSet();\n\nexport const SamplesPane = ({\n  isRequest,\n  datasource,\n  queryForce,\n  actions,\n  dataSize = 50,\n  isVisible,\n}: SamplesPaneProps) => {\n  const [filterText, setFilterText] = useState('');\n  const [data, setData] = useState<Record<string, any>[][]>([]);\n  const [colnames, setColnames] = useState<string[]>([]);\n  const [coltypes, setColtypes] = useState<GenericDataType[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [responseError, setResponseError] = useState<string>('');\n  const datasourceId = useMemo(\n    () => `${datasource.id}__${datasource.type}`,\n    [datasource],\n  );\n\n  useEffect(() => {\n    if (isRequest && queryForce) {\n      cache.delete(datasource);\n    }\n\n    if (isRequest && !cache.has(datasource)) {\n      setIsLoading(true);\n      getDatasourceSamples(datasource.type, datasource.id, queryForce, {})\n        .then(response => {\n          setData(ensureIsArray(response.data));\n          setColnames(ensureIsArray(response.colnames));\n          setColtypes(ensureIsArray(response.coltypes));\n          setResponseError('');\n          cache.add(datasource);\n          if (queryForce && actions) {\n            actions.setForceQuery(false);\n          }\n        })\n        .catch(error => {\n          setData([]);\n          setColnames([]);\n          setColtypes([]);\n          setResponseError(`${error.name}: ${error.message}`);\n        })\n        .finally(() => {\n          setIsLoading(false);\n        });\n    }\n  }, [datasource, isRequest, queryForce]);\n\n  // this is to preserve the order of the columns, even if there are integer values,\n  // while also only grabbing the first column's keys\n  const columns = useTableColumns(\n    colnames,\n    coltypes,\n    data,\n    datasourceId,\n    isVisible,\n    {}, // moreConfig\n    true, // allowHTML\n  );\n  const filteredData = useFilteredTableData(filterText, data);\n\n  if (isLoading) {\n    return <Loading />;\n  }\n\n  if (responseError) {\n    return (\n      <>\n        <TableControls\n          data={filteredData}\n          columnNames={colnames}\n          columnTypes={coltypes}\n          datasourceId={datasourceId}\n          onInputChange={input => setFilterText(input)}\n          isLoading={isLoading}\n        />\n        <Error>{responseError}</Error>\n      </>\n    );\n  }\n\n  if (data.length === 0) {\n    const title = t('No samples were returned for this dataset');\n    return <EmptyStateMedium image=\"document.svg\" title={title} />;\n  }\n\n  return (\n    <>\n      <TableControls\n        data={filteredData}\n        columnNames={colnames}\n        columnTypes={coltypes}\n        datasourceId={datasourceId}\n        onInputChange={input => setFilterText(input)}\n        isLoading={isLoading}\n      />\n      <TableView\n        columns={columns}\n        data={filteredData}\n        pageSize={dataSize}\n        noDataText={t('No results')}\n        emptyWrapperType={EmptyWrapperType.Small}\n        className=\"table-condensed\"\n        isPaginationSticky\n        showRowCount={false}\n        small\n      />\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}