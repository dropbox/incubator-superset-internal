{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\";import _isEqual from \"lodash/isEqual\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useRef } from 'react';\nimport { useTable, usePagination, useSortBy, useGlobalFilter, useColumnOrder } from 'react-table';\nimport { matchSorter, rankings } from 'match-sorter';\nimport { typedMemo, usePrevious } from '@superset-ui/core';\n\nimport GlobalFilter from './components/GlobalFilter';\nimport SelectPageSize from './components/SelectPageSize';\nimport SimplePagination from './components/Pagination';\nimport useSticky from './hooks/useSticky';\nimport { PAGE_SIZE_OPTIONS } from '../consts';\nimport { sortAlphanumericCaseInsensitive } from './utils/sortAlphanumericCaseInsensitive';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst sortTypes = {\n  alphanumeric: sortAlphanumericCaseInsensitive };\n\n// Be sure to pass our updateMyData and the skipReset option\nconst _default = typedMemo(__signature__(function DataTable(_ref) {let { tableClassName, columns, data, serverPaginationData, width: initialWidth = '100%', height: initialHeight = 300, pageSize: initialPageSize = 0, initialState: initialState_ = {}, pageSizeOptions = PAGE_SIZE_OPTIONS, maxPageItemCount = 9, sticky: doSticky, searchInput = true, onServerPaginationChange, rowCount, selectPageSize, noResults: noResultsText = 'No data found', hooks, serverPagination, wrapperRef: userWrapperRef, onColumnOrderChange, ...moreUseTableOptions } = _ref;\n  const tableHooks = [\n  useGlobalFilter,\n  useSortBy,\n  usePagination,\n  useColumnOrder,\n  doSticky ? useSticky : [],\n  hooks || []].\n  flat();\n  const columnNames = Object.keys((data == null ? void 0 : data[0]) || {});\n  const previousColumnNames = usePrevious(columnNames);\n  const resultsSize = serverPagination ? rowCount : data.length;\n  const sortByRef = useRef([]); // cache initial `sortby` so sorting doesn't trigger page reset\n  const pageSizeRef = useRef([initialPageSize, resultsSize]);\n  const hasPagination = initialPageSize > 0 && resultsSize > 0; // pageSize == 0 means no pagination\n  const hasGlobalControl = hasPagination || !!searchInput;\n  const initialState = {\n    ...initialState_,\n    // zero length means all pages, the `usePagination` plugin does not\n    // understand pageSize = 0\n    sortBy: sortByRef.current,\n    pageSize: initialPageSize > 0 ? initialPageSize : resultsSize || 10 };\n\n  const defaultWrapperRef = useRef(null);\n  const globalControlRef = useRef(null);\n  const paginationRef = useRef(null);\n  const wrapperRef = userWrapperRef || defaultWrapperRef;\n  const paginationData = JSON.stringify(serverPaginationData);\n  const defaultGetTableSize = useCallback(() => {\n    if (wrapperRef.current) {var _globalControlRef$cur, _paginationRef$curren;\n      // `initialWidth` and `initialHeight` could be also parameters like `100%`\n      // `Number` returns `NaN` on them, then we fallback to computed size\n      const width = Number(initialWidth) || wrapperRef.current.clientWidth;\n      const height = (Number(initialHeight) || wrapperRef.current.clientHeight) - (\n      ((_globalControlRef$cur = globalControlRef.current) == null ? void 0 : _globalControlRef$cur.clientHeight) || 0) - (\n      ((_paginationRef$curren = paginationRef.current) == null ? void 0 : _paginationRef$curren.clientHeight) || 0);\n      return { width, height };\n    }\n    return undefined;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n  initialHeight,\n  initialWidth,\n  wrapperRef,\n  hasPagination,\n  hasGlobalControl,\n  paginationRef,\n  resultsSize,\n  paginationData]);\n\n  const defaultGlobalFilter = useCallback((rows, columnIds, filterValue) => {\n    // allow searching by \"col1_value col2_value\"\n    const joinedString = (row) => columnIds.map((x) => row.values[x]).join(' ');\n    return matchSorter(rows, filterValue, {\n      keys: [...columnIds, joinedString],\n      threshold: rankings.ACRONYM });\n\n  }, []);\n  const { getTableProps, getTableBodyProps, prepareRow, headerGroups, footerGroups, page, pageCount, gotoPage, preGlobalFilteredRows, setGlobalFilter, setPageSize: setPageSize_, wrapStickyTable, setColumnOrder, allColumns, state: { pageIndex, pageSize, globalFilter: filterValue, sticky = {} } } = useTable({\n    columns,\n    data,\n    initialState,\n    getTableSize: defaultGetTableSize,\n    globalFilter: defaultGlobalFilter,\n    sortTypes,\n    autoResetSortBy: !_isEqual(columnNames, previousColumnNames),\n    ...moreUseTableOptions },\n  ...tableHooks);\n  // make setPageSize accept 0\n  const setPageSize = (size) => {\n    if (serverPagination) {\n      onServerPaginationChange(0, size);\n    }\n    // keep the original size if data is empty\n    if (size || resultsSize !== 0) {\n      setPageSize_(size === 0 ? resultsSize : size);\n    }\n  };\n  const noResults = typeof noResultsText === 'function' ?\n  noResultsText(filterValue) :\n  noResultsText;\n  const getNoResults = () => ___EmotionJSX(\"div\", { className: \"dt-no-results\" }, noResults);\n  if (!columns || columns.length === 0) {\n    return wrapStickyTable ? wrapStickyTable(getNoResults) : getNoResults();\n  }\n  const shouldRenderFooter = columns.some((x) => !!x.Footer);\n  let columnBeingDragged = -1;\n  const onDragStart = (e) => {\n    const el = e.target;\n    columnBeingDragged = allColumns.findIndex((col) => col.id === el.dataset.columnName);\n    e.dataTransfer.setData('text/plain', `${columnBeingDragged}`);\n  };\n  const onDrop = (e) => {\n    const el = e.target;\n    const newPosition = allColumns.findIndex((col) => col.id === el.dataset.columnName);\n    if (newPosition !== -1) {\n      const currentCols = allColumns.map((c) => c.id);\n      const colToBeMoved = currentCols.splice(columnBeingDragged, 1);\n      currentCols.splice(newPosition, 0, colToBeMoved[0]);\n      setColumnOrder(currentCols);\n      // toggle value in TableChart to trigger column width recalc\n      onColumnOrderChange();\n    }\n    e.preventDefault();\n  };\n  const renderTable = () => ___EmotionJSX(\"table\", getTableProps({ className: tableClassName }),\n  ___EmotionJSX(\"thead\", null,\n  headerGroups.map((headerGroup) => {\n    const { key: headerGroupKey, ...headerGroupProps } = headerGroup.getHeaderGroupProps();\n    return ___EmotionJSX(\"tr\", _extends({ key: headerGroupKey || headerGroup.id }, headerGroupProps),\n    headerGroup.headers.map((column) => column.render('Header', {\n      key: column.id,\n      ...column.getSortByToggleProps(),\n      onDragStart,\n      onDrop })));\n\n\n  })),\n\n  ___EmotionJSX(\"tbody\", getTableBodyProps(),\n  page && page.length > 0 ? page.map((row) => {\n    prepareRow(row);\n    const { key: rowKey, ...rowProps } = row.getRowProps();\n    return ___EmotionJSX(\"tr\", _extends({ key: rowKey || row.id }, rowProps),\n    row.cells.map((cell) => cell.render('Cell', { key: cell.column.id })));\n\n  }) : ___EmotionJSX(\"tr\", null,\n  ___EmotionJSX(\"td\", { className: \"dt-no-results\", colSpan: columns.length },\n  noResults))),\n\n\n\n  shouldRenderFooter && ___EmotionJSX(\"tfoot\", null,\n  footerGroups.map((footerGroup) => {\n    const { key: footerGroupKey, ...footerGroupProps } = footerGroup.getHeaderGroupProps();\n    return ___EmotionJSX(\"tr\", _extends({ key: footerGroupKey || footerGroup.id }, footerGroupProps),\n    footerGroup.headers.map((column) => column.render('Footer', { key: column.id })));\n\n  })));\n\n\n  // force update the pageSize when it's been update from the initial state\n  if (pageSizeRef.current[0] !== initialPageSize ||\n  // when initialPageSize stays as zero, but total number of records changed,\n  // we'd also need to update page size\n  initialPageSize === 0 && pageSizeRef.current[1] !== resultsSize) {\n    pageSizeRef.current = [initialPageSize, resultsSize];\n    setPageSize(initialPageSize);\n  }\n  const paginationStyle = sticky.height ?\n  {} :\n  { visibility: 'hidden' };\n  let resultPageCount = pageCount;\n  let resultCurrentPageSize = pageSize;\n  let resultCurrentPage = pageIndex;\n  let resultOnPageChange = gotoPage;\n  if (serverPagination) {var _serverPaginationData, _serverPaginationData2;\n    const serverPageSize = (_serverPaginationData = serverPaginationData == null ? void 0 : serverPaginationData.pageSize) != null ? _serverPaginationData : initialPageSize;\n    resultPageCount = Math.ceil(rowCount / serverPageSize);\n    if (!Number.isFinite(resultPageCount)) {\n      resultPageCount = 0;\n    }\n    resultCurrentPageSize = serverPageSize;\n    const foundPageSizeIndex = pageSizeOptions.findIndex((_ref2) => {let [option] = _ref2;return option >= resultCurrentPageSize;});\n    if (foundPageSizeIndex === -1) {\n      resultCurrentPageSize = 0;\n    }\n    resultCurrentPage = (_serverPaginationData2 = serverPaginationData == null ? void 0 : serverPaginationData.currentPage) != null ? _serverPaginationData2 : 0;\n    resultOnPageChange = (pageNumber) => onServerPaginationChange(pageNumber, serverPageSize);\n  }\n  return ___EmotionJSX(\"div\", { ref: wrapperRef, style: { width: initialWidth, height: initialHeight } },\n  hasGlobalControl ? ___EmotionJSX(\"div\", { ref: globalControlRef, className: \"form-inline dt-controls\" },\n  ___EmotionJSX(\"div\", { className: \"row\" },\n  ___EmotionJSX(\"div\", { className: \"col-sm-6\" },\n  hasPagination ? ___EmotionJSX(SelectPageSize, { total: resultsSize, current: resultCurrentPageSize, options: pageSizeOptions, selectRenderer: typeof selectPageSize === 'boolean' ?\n    undefined :\n    selectPageSize, onChange: setPageSize }) : null),\n\n  searchInput ? ___EmotionJSX(\"div\", { className: \"col-sm-6\" },\n  ___EmotionJSX(GlobalFilter, { searchInput: typeof searchInput === 'boolean' ? undefined : searchInput, preGlobalFilteredRows: preGlobalFilteredRows, setGlobalFilter: setGlobalFilter, filterValue: filterValue })) :\n  null)) :\n\n  null,\n  wrapStickyTable ? wrapStickyTable(renderTable) : renderTable(),\n  hasPagination && resultPageCount > 1 ? ___EmotionJSX(SimplePagination, { ref: paginationRef, style: paginationStyle, maxPageItemCount: maxPageItemCount, pageCount: resultPageCount, currentPage: resultCurrentPage, onPageChange: resultOnPageChange }) : null);\n\n}, \"usePrevious{previousColumnNames}\\nuseRef{sortByRef}\\nuseRef{pageSizeRef}\\nuseRef{defaultWrapperRef}\\nuseRef{globalControlRef}\\nuseRef{paginationRef}\\nuseCallback{defaultGetTableSize}\\nuseCallback{defaultGlobalFilter}\\nuseTable{{ getTableProps, getTableBodyProps, prepareRow, headerGroups, footerGroups, page, pageCount, gotoPage, preGlobalFilteredRows, setGlobalFilter, setPageSize: setPageSize_, wrapStickyTable, setColumnOrder, allColumns, state: { pageIndex, pageSize, globalFilter: filterValue, sticky = {} }, }}\", () => [usePrevious, useTable]));export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(sortTypes, \"sortTypes\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-table/src/DataTable/DataTable.tsx\");reactHotLoader.register(_default, \"default\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-table/src/DataTable/DataTable.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"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","names":["React","useCallback","useRef","useTable","usePagination","useSortBy","useGlobalFilter","useColumnOrder","matchSorter","rankings","typedMemo","usePrevious","GlobalFilter","SelectPageSize","SimplePagination","useSticky","PAGE_SIZE_OPTIONS","sortAlphanumericCaseInsensitive","sortTypes","alphanumeric","DataTable","tableClassName","columns","data","serverPaginationData","width","initialWidth","height","initialHeight","pageSize","initialPageSize","initialState","initialState_","pageSizeOptions","maxPageItemCount","sticky","doSticky","searchInput","onServerPaginationChange","rowCount","selectPageSize","noResults","noResultsText","hooks","serverPagination","wrapperRef","userWrapperRef","onColumnOrderChange","moreUseTableOptions","tableHooks","flat","columnNames","Object","keys","previousColumnNames","resultsSize","length","sortByRef","pageSizeRef","hasPagination","hasGlobalControl","sortBy","current","defaultWrapperRef","globalControlRef","paginationRef","paginationData","JSON","stringify","defaultGetTableSize","Number","clientWidth","clientHeight","undefined","defaultGlobalFilter","rows","columnIds","filterValue","joinedString","row","map","values","x","join","threshold","ACRONYM","getTableProps","getTableBodyProps","prepareRow","headerGroups","footerGroups","page","pageCount","gotoPage","preGlobalFilteredRows","setGlobalFilter","setPageSize","setPageSize_","wrapStickyTable","setColumnOrder","allColumns","state","pageIndex","globalFilter","getTableSize","autoResetSortBy","size","getNoResults","shouldRenderFooter","some","Footer","columnBeingDragged","onDragStart","e","el","target","findIndex","col","id","dataset","columnName","dataTransfer","setData","onDrop","newPosition","currentCols","c","colToBeMoved","splice","preventDefault","renderTable","className","key","headerGroupKey","headerGroupProps","headerGroup","getHeaderGroupProps","headers","column","render","getSortByToggleProps","rowKey","rowProps","getRowProps","cells","cell","footerGroupKey","footerGroupProps","footerGroup","paginationStyle","visibility","resultPageCount","resultCurrentPageSize","resultCurrentPage","resultOnPageChange","serverPageSize","Math","ceil","isFinite","foundPageSizeIndex","option","currentPage","pageNumber"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-table/src/DataTable/DataTable.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, {\n  useCallback,\n  useRef,\n  ReactNode,\n  HTMLProps,\n  MutableRefObject,\n  CSSProperties,\n} from 'react';\nimport {\n  useTable,\n  usePagination,\n  useSortBy,\n  useGlobalFilter,\n  useColumnOrder,\n  PluginHook,\n  TableOptions,\n  FilterType,\n  IdType,\n  Row,\n} from 'react-table';\nimport { matchSorter, rankings } from 'match-sorter';\nimport { typedMemo, usePrevious } from '@superset-ui/core';\nimport { isEqual } from 'lodash';\nimport GlobalFilter, { GlobalFilterProps } from './components/GlobalFilter';\nimport SelectPageSize, {\n  SelectPageSizeProps,\n  SizeOption,\n} from './components/SelectPageSize';\nimport SimplePagination from './components/Pagination';\nimport useSticky from './hooks/useSticky';\nimport { PAGE_SIZE_OPTIONS } from '../consts';\nimport { sortAlphanumericCaseInsensitive } from './utils/sortAlphanumericCaseInsensitive';\n\nexport interface DataTableProps<D extends object> extends TableOptions<D> {\n  tableClassName?: string;\n  searchInput?: boolean | GlobalFilterProps<D>['searchInput'];\n  selectPageSize?: boolean | SelectPageSizeProps['selectRenderer'];\n  pageSizeOptions?: SizeOption[]; // available page size options\n  maxPageItemCount?: number;\n  hooks?: PluginHook<D>[]; // any additional hooks\n  width?: string | number;\n  height?: string | number;\n  serverPagination?: boolean;\n  onServerPaginationChange: (pageNumber: number, pageSize: number) => void;\n  serverPaginationData: { pageSize?: number; currentPage?: number };\n  pageSize?: number;\n  noResults?: string | ((filterString: string) => ReactNode);\n  sticky?: boolean;\n  rowCount: number;\n  wrapperRef?: MutableRefObject<HTMLDivElement>;\n  onColumnOrderChange: () => void;\n}\n\nexport interface RenderHTMLCellProps extends HTMLProps<HTMLTableCellElement> {\n  cellContent: ReactNode;\n}\n\nconst sortTypes = {\n  alphanumeric: sortAlphanumericCaseInsensitive,\n};\n\n// Be sure to pass our updateMyData and the skipReset option\nexport default typedMemo(function DataTable<D extends object>({\n  tableClassName,\n  columns,\n  data,\n  serverPaginationData,\n  width: initialWidth = '100%',\n  height: initialHeight = 300,\n  pageSize: initialPageSize = 0,\n  initialState: initialState_ = {},\n  pageSizeOptions = PAGE_SIZE_OPTIONS,\n  maxPageItemCount = 9,\n  sticky: doSticky,\n  searchInput = true,\n  onServerPaginationChange,\n  rowCount,\n  selectPageSize,\n  noResults: noResultsText = 'No data found',\n  hooks,\n  serverPagination,\n  wrapperRef: userWrapperRef,\n  onColumnOrderChange,\n  ...moreUseTableOptions\n}: DataTableProps<D>): JSX.Element {\n  const tableHooks: PluginHook<D>[] = [\n    useGlobalFilter,\n    useSortBy,\n    usePagination,\n    useColumnOrder,\n    doSticky ? useSticky : [],\n    hooks || [],\n  ].flat();\n  const columnNames = Object.keys(data?.[0] || {});\n  const previousColumnNames = usePrevious(columnNames);\n  const resultsSize = serverPagination ? rowCount : data.length;\n  const sortByRef = useRef([]); // cache initial `sortby` so sorting doesn't trigger page reset\n  const pageSizeRef = useRef([initialPageSize, resultsSize]);\n  const hasPagination = initialPageSize > 0 && resultsSize > 0; // pageSize == 0 means no pagination\n  const hasGlobalControl = hasPagination || !!searchInput;\n  const initialState = {\n    ...initialState_,\n    // zero length means all pages, the `usePagination` plugin does not\n    // understand pageSize = 0\n    sortBy: sortByRef.current,\n    pageSize: initialPageSize > 0 ? initialPageSize : resultsSize || 10,\n  };\n  const defaultWrapperRef = useRef<HTMLDivElement>(null);\n  const globalControlRef = useRef<HTMLDivElement>(null);\n  const paginationRef = useRef<HTMLDivElement>(null);\n  const wrapperRef = userWrapperRef || defaultWrapperRef;\n  const paginationData = JSON.stringify(serverPaginationData);\n\n  const defaultGetTableSize = useCallback(() => {\n    if (wrapperRef.current) {\n      // `initialWidth` and `initialHeight` could be also parameters like `100%`\n      // `Number` returns `NaN` on them, then we fallback to computed size\n      const width = Number(initialWidth) || wrapperRef.current.clientWidth;\n      const height =\n        (Number(initialHeight) || wrapperRef.current.clientHeight) -\n        (globalControlRef.current?.clientHeight || 0) -\n        (paginationRef.current?.clientHeight || 0);\n      return { width, height };\n    }\n    return undefined;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    initialHeight,\n    initialWidth,\n    wrapperRef,\n    hasPagination,\n    hasGlobalControl,\n    paginationRef,\n    resultsSize,\n    paginationData,\n  ]);\n\n  const defaultGlobalFilter: FilterType<D> = useCallback(\n    (rows: Row<D>[], columnIds: IdType<D>[], filterValue: string) => {\n      // allow searching by \"col1_value col2_value\"\n      const joinedString = (row: Row<D>) =>\n        columnIds.map(x => row.values[x]).join(' ');\n      return matchSorter(rows, filterValue, {\n        keys: [...columnIds, joinedString],\n        threshold: rankings.ACRONYM,\n      }) as typeof rows;\n    },\n    [],\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    prepareRow,\n    headerGroups,\n    footerGroups,\n    page,\n    pageCount,\n    gotoPage,\n    preGlobalFilteredRows,\n    setGlobalFilter,\n    setPageSize: setPageSize_,\n    wrapStickyTable,\n    setColumnOrder,\n    allColumns,\n    state: { pageIndex, pageSize, globalFilter: filterValue, sticky = {} },\n  } = useTable<D>(\n    {\n      columns,\n      data,\n      initialState,\n      getTableSize: defaultGetTableSize,\n      globalFilter: defaultGlobalFilter,\n      sortTypes,\n      autoResetSortBy: !isEqual(columnNames, previousColumnNames),\n      ...moreUseTableOptions,\n    },\n    ...tableHooks,\n  );\n  // make setPageSize accept 0\n  const setPageSize = (size: number) => {\n    if (serverPagination) {\n      onServerPaginationChange(0, size);\n    }\n    // keep the original size if data is empty\n    if (size || resultsSize !== 0) {\n      setPageSize_(size === 0 ? resultsSize : size);\n    }\n  };\n\n  const noResults =\n    typeof noResultsText === 'function'\n      ? noResultsText(filterValue as string)\n      : noResultsText;\n\n  const getNoResults = () => <div className=\"dt-no-results\">{noResults}</div>;\n\n  if (!columns || columns.length === 0) {\n    return (\n      wrapStickyTable ? wrapStickyTable(getNoResults) : getNoResults()\n    ) as JSX.Element;\n  }\n\n  const shouldRenderFooter = columns.some(x => !!x.Footer);\n\n  let columnBeingDragged = -1;\n\n  const onDragStart = (e: React.DragEvent) => {\n    const el = e.target as HTMLTableCellElement;\n    columnBeingDragged = allColumns.findIndex(\n      col => col.id === el.dataset.columnName,\n    );\n    e.dataTransfer.setData('text/plain', `${columnBeingDragged}`);\n  };\n\n  const onDrop = (e: React.DragEvent) => {\n    const el = e.target as HTMLTableCellElement;\n    const newPosition = allColumns.findIndex(\n      col => col.id === el.dataset.columnName,\n    );\n\n    if (newPosition !== -1) {\n      const currentCols = allColumns.map(c => c.id);\n      const colToBeMoved = currentCols.splice(columnBeingDragged, 1);\n      currentCols.splice(newPosition, 0, colToBeMoved[0]);\n      setColumnOrder(currentCols);\n      // toggle value in TableChart to trigger column width recalc\n      onColumnOrderChange();\n    }\n    e.preventDefault();\n  };\n\n  const renderTable = () => (\n    <table {...getTableProps({ className: tableClassName })}>\n      <thead>\n        {headerGroups.map(headerGroup => {\n          const { key: headerGroupKey, ...headerGroupProps } =\n            headerGroup.getHeaderGroupProps();\n          return (\n            <tr key={headerGroupKey || headerGroup.id} {...headerGroupProps}>\n              {headerGroup.headers.map(column =>\n                column.render('Header', {\n                  key: column.id,\n                  ...column.getSortByToggleProps(),\n                  onDragStart,\n                  onDrop,\n                }),\n              )}\n            </tr>\n          );\n        })}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {page && page.length > 0 ? (\n          page.map(row => {\n            prepareRow(row);\n            const { key: rowKey, ...rowProps } = row.getRowProps();\n            return (\n              <tr key={rowKey || row.id} {...rowProps}>\n                {row.cells.map(cell =>\n                  cell.render('Cell', { key: cell.column.id }),\n                )}\n              </tr>\n            );\n          })\n        ) : (\n          <tr>\n            <td className=\"dt-no-results\" colSpan={columns.length}>\n              {noResults}\n            </td>\n          </tr>\n        )}\n      </tbody>\n      {shouldRenderFooter && (\n        <tfoot>\n          {footerGroups.map(footerGroup => {\n            const { key: footerGroupKey, ...footerGroupProps } =\n              footerGroup.getHeaderGroupProps();\n            return (\n              <tr key={footerGroupKey || footerGroup.id} {...footerGroupProps}>\n                {footerGroup.headers.map(column =>\n                  column.render('Footer', { key: column.id }),\n                )}\n              </tr>\n            );\n          })}\n        </tfoot>\n      )}\n    </table>\n  );\n\n  // force update the pageSize when it's been update from the initial state\n  if (\n    pageSizeRef.current[0] !== initialPageSize ||\n    // when initialPageSize stays as zero, but total number of records changed,\n    // we'd also need to update page size\n    (initialPageSize === 0 && pageSizeRef.current[1] !== resultsSize)\n  ) {\n    pageSizeRef.current = [initialPageSize, resultsSize];\n    setPageSize(initialPageSize);\n  }\n\n  const paginationStyle: CSSProperties = sticky.height\n    ? {}\n    : { visibility: 'hidden' };\n\n  let resultPageCount = pageCount;\n  let resultCurrentPageSize = pageSize;\n  let resultCurrentPage = pageIndex;\n  let resultOnPageChange: (page: number) => void = gotoPage;\n  if (serverPagination) {\n    const serverPageSize = serverPaginationData?.pageSize ?? initialPageSize;\n    resultPageCount = Math.ceil(rowCount / serverPageSize);\n    if (!Number.isFinite(resultPageCount)) {\n      resultPageCount = 0;\n    }\n    resultCurrentPageSize = serverPageSize;\n    const foundPageSizeIndex = pageSizeOptions.findIndex(\n      ([option]) => option >= resultCurrentPageSize,\n    );\n    if (foundPageSizeIndex === -1) {\n      resultCurrentPageSize = 0;\n    }\n    resultCurrentPage = serverPaginationData?.currentPage ?? 0;\n    resultOnPageChange = (pageNumber: number) =>\n      onServerPaginationChange(pageNumber, serverPageSize);\n  }\n  return (\n    <div\n      ref={wrapperRef}\n      style={{ width: initialWidth, height: initialHeight }}\n    >\n      {hasGlobalControl ? (\n        <div ref={globalControlRef} className=\"form-inline dt-controls\">\n          <div className=\"row\">\n            <div className=\"col-sm-6\">\n              {hasPagination ? (\n                <SelectPageSize\n                  total={resultsSize}\n                  current={resultCurrentPageSize}\n                  options={pageSizeOptions}\n                  selectRenderer={\n                    typeof selectPageSize === 'boolean'\n                      ? undefined\n                      : selectPageSize\n                  }\n                  onChange={setPageSize}\n                />\n              ) : null}\n            </div>\n            {searchInput ? (\n              <div className=\"col-sm-6\">\n                <GlobalFilter<D>\n                  searchInput={\n                    typeof searchInput === 'boolean' ? undefined : searchInput\n                  }\n                  preGlobalFilteredRows={preGlobalFilteredRows}\n                  setGlobalFilter={setGlobalFilter}\n                  filterValue={filterValue}\n                />\n              </div>\n            ) : null}\n          </div>\n        </div>\n      ) : null}\n      {wrapStickyTable ? wrapStickyTable(renderTable) : renderTable()}\n      {hasPagination && resultPageCount > 1 ? (\n        <SimplePagination\n          ref={paginationRef}\n          style={paginationStyle}\n          maxPageItemCount={maxPageItemCount}\n          pageCount={resultPageCount}\n          currentPage={resultCurrentPage}\n          onPageChange={resultOnPageChange}\n        />\n      ) : null}\n    </div>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}