{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport rison from 'rison';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport { createApi } from '@reduxjs/toolkit/query/react';\nimport { SupersetClient } from '@superset-ui/core';\nexport const supersetClientQuery = (_ref, api) => {let { endpoint, urlParams, transformResponse, method = 'GET', parseMethod = 'json', ...rest } = _ref;return SupersetClient.request({\n    ...rest,\n    endpoint: `${endpoint}${urlParams ? `?q=${rison.encode(urlParams)}` : ''}`,\n    method,\n    parseMethod,\n    signal: api.signal }).\n\n  then((data) => {var _transformResponse;return {\n      data: (_transformResponse = transformResponse == null ? void 0 : transformResponse(data)) != null ? _transformResponse : data };}).\n\n  catch((response) => getClientErrorObject(response).then((errorObj) => ({\n    error: errorObj })));};\n\nexport const api = createApi({\n  reducerPath: 'queryApi',\n  tagTypes: [\n  'Schemas',\n  'Tables',\n  'DatabaseFunctions',\n  'QueryValidations',\n  'TableMetadatas'],\n\n  endpoints: () => ({}),\n  baseQuery: supersetClientQuery });","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,oBAAT,QAAqC,gCAArC;AACA,SAASC,SAAT,QAAuC,8BAAvC;AACA,SACEC,cADF,QAMO,mBANP;AAUA,OAAO,MAAMC,mBAAmB,GAO5B,OASFC,GATE,UACF,EACEC,QADF,EAEEC,SAFF,EAGEC,iBAHF,EAIEC,MAAM,GAAG,KAJX,EAKEC,WAAW,GAAG,MALhB,EAME,GAAGC,IANL,EADE,eAWFR,cAAc,CAACS,OAAf,CAAuB;IACrB,GAAGD,IADkB;IAErBL,QAAQ,EAAE,GAAGA,QAAQ,GAAGC,SAAS,GAAG,MAAMP,KAAK,CAACa,MAAN,CAAaN,SAAb,CAAuB,EAAhC,GAAqC,EAAE,EAFnD;IAGrBE,MAHqB;IAIrBC,WAJqB;IAKrBI,MAAM,EAAET,GAAG,CAACS,MALS,EAAvB;;EAOGC,IAPH,CAOQ,KAAI,oCAAK;MACbC,IAAI,wBAAER,iBAAF,oBAAEA,iBAAiB,CAAGQ,IAAH,CAAnB,iCAA+BA,IADtB,EAAL,EAPZ;;EAUGC,KAVH,CAUS,SAAQ,KACbhB,oBAAoB,CAACiB,QAAD,CAApB,CAA+BH,IAA/B,CAAoC,SAAQ,MAAK;IAC/CI,KAAK,EAAEC,QADwC,EAAL,CAA5C,CAXJ,CAXE,EAPG;;AAkCP,OAAO,MAAMf,GAAG,GAAGH,SAAS,CAAC;EAC3BmB,WAAW,EAAE,UADc;EAE3BC,QAAQ,EAAE;EACR,SADQ;EAER,QAFQ;EAGR,mBAHQ;EAIR,kBAJQ;EAKR,gBALQ,CAFiB;;EAS3BC,SAAS,EAAE,OAAO,EAAP,CATgB;EAU3BC,SAAS,EAAEpB,mBAVgB,EAAD,CAArB","names":["rison","getClientErrorObject","createApi","SupersetClient","supersetClientQuery","api","endpoint","urlParams","transformResponse","method","parseMethod","rest","request","encode","signal","then","data","catch","response","error","errorObj","reducerPath","tagTypes","endpoints","baseQuery"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/hooks/apiResources/queryApi.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport rison from 'rison';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport { createApi, BaseQueryFn } from '@reduxjs/toolkit/query/react';\nimport {\n  SupersetClient,\n  ParseMethod,\n  SupersetClientResponse,\n  JsonValue,\n  RequestBase,\n} from '@superset-ui/core';\n\nexport type { JsonResponse, TextResponse } from '@superset-ui/core';\n\nexport const supersetClientQuery: BaseQueryFn<\n  Pick<RequestBase, 'method' | 'body' | 'jsonPayload' | 'postPayload'> & {\n    endpoint: string;\n    parseMethod?: ParseMethod;\n    transformResponse?: (response: SupersetClientResponse) => JsonValue;\n    urlParams?: Record<string, number | string | undefined | boolean>;\n  }\n> = (\n  {\n    endpoint,\n    urlParams,\n    transformResponse,\n    method = 'GET',\n    parseMethod = 'json',\n    ...rest\n  },\n  api,\n) =>\n  SupersetClient.request({\n    ...rest,\n    endpoint: `${endpoint}${urlParams ? `?q=${rison.encode(urlParams)}` : ''}`,\n    method,\n    parseMethod,\n    signal: api.signal,\n  })\n    .then(data => ({\n      data: transformResponse?.(data) ?? data,\n    }))\n    .catch(response =>\n      getClientErrorObject(response).then(errorObj => ({\n        error: errorObj,\n      })),\n    );\n\nexport const api = createApi({\n  reducerPath: 'queryApi',\n  tagTypes: [\n    'Schemas',\n    'Tables',\n    'DatabaseFunctions',\n    'QueryValidations',\n    'TableMetadatas',\n  ],\n  endpoints: () => ({}),\n  baseQuery: supersetClientQuery,\n});\n"]},"metadata":{},"sourceType":"module"}