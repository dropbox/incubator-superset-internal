{"ast":null,"code":"import _isPlainObject from \"lodash/isPlainObject\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { SafeMarkdown, styled, t } from '@superset-ui/core';\nimport Handlebars from 'handlebars';\nimport moment from 'moment';\nimport React, { useMemo, useState } from 'react';\n\nimport Helpers from 'just-handlebars-helpers';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport const HandlebarsViewer = (_ref) => {var _common$conf$HTML_SAN, _common$conf, _common$conf2;let { templateSource, data } = _ref;\n  const [renderedTemplate, setRenderedTemplate] = useState('');\n  const [error, setError] = useState('');\n  const appContainer = document.getElementById('app');\n  const { common } = JSON.parse((appContainer == null ? void 0 : appContainer.getAttribute('data-bootstrap')) || '{}');\n  const htmlSanitization = (_common$conf$HTML_SAN = common == null ? void 0 : (_common$conf = common.conf) == null ? void 0 : _common$conf.HTML_SANITIZATION) != null ? _common$conf$HTML_SAN : true;\n  const htmlSchemaOverrides = (common == null ? void 0 : (_common$conf2 = common.conf) == null ? void 0 : _common$conf2.HTML_SANITIZATION_SCHEMA_EXTENSIONS) || {};\n  useMemo(() => {\n    try {\n      const template = Handlebars.compile(templateSource);\n      const result = template(data);\n      setRenderedTemplate(result);\n      setError('');\n    }\n    catch (error) {\n      setRenderedTemplate('');\n      setError(error.message);\n    }\n  }, [templateSource, data]);\n  const Error = styled.pre`\n    white-space: pre-wrap;\n  `;\n  if (error) {\n    return ___EmotionJSX(Error, null, error);\n  }\n  if (renderedTemplate) {\n    return ___EmotionJSX(SafeMarkdown, { source: renderedTemplate, htmlSanitization: htmlSanitization, htmlSchemaOverrides: htmlSchemaOverrides });\n  }\n  return ___EmotionJSX(\"p\", null, t('Loading...'));\n};\n//  usage: {{dateFormat my_date format=\"MMMM YYYY\"}}\nHandlebars.registerHelper('dateFormat', function (context, block) {\n  const f = block.hash.format || 'YYYY-MM-DD';\n  return moment(context).format(f);\n});\n// usage: {{  }}\nHandlebars.registerHelper('stringify', (obj, obj2) => {\n  // calling without an argument\n  if (obj2 === undefined)\n  throw Error('Please call with an object. Example: `stringify myObj`');\n  return _isPlainObject(obj) ? JSON.stringify(obj) : String(obj);\n});\nHelpers.registerHelpers(Handlebars);","map":{"version":3,"mappings":"mDAAA;;;;;;;;;;;;;;;;;;AAkBA,SAASA,YAAT,EAAuBC,MAAvB,EAA+BC,CAA/B,QAAwC,mBAAxC;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,KAAP,IAAgBC,OAAhB,EAAyBC,QAAzB,QAAyC,OAAzC;;AAEA,OAAOC,OAAP,MAAoB,yBAApB,C;AAOA,OAAO,MAAMC,gBAAgB,GAAG,UAGJ,4DAHK,EAC/BC,cAD+B,EAE/BC,IAF+B,EAGL;EAC1B,MAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CN,QAAQ,CAAC,EAAD,CAAxD;EACA,MAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;EACA,MAAMS,YAAY,GAAGC,QAAQ,CAACC,cAAT,CAAwB,KAAxB,CAArB;EACA,MAAM,EAAEC,MAAF,KAAaC,IAAI,CAACC,KAAL,CACjB,aAAY,QAAZ,wBAAY,CAAEC,YAAd,CAA2B,gBAA3B,MAAgD,IAD/B,CAAnB;EAGA,MAAMC,gBAAgB,4BAAGJ,MAAH,oCAAGA,MAAM,CAAEK,IAAX,qBAAG,aAAcC,iBAAjB,oCAAsC,IAA5D;EACA,MAAMC,mBAAmB,GACvB,OAAM,QAAN,mCAAM,CAAEF,IAAR,mCAAcG,mCAAd,KAAqD,EADvD;EAGArB,OAAO,CAAC,MAAK;IACX,IAAI;MACF,MAAMsB,QAAQ,GAAGzB,UAAU,CAAC0B,OAAX,CAAmBnB,cAAnB,CAAjB;MACA,MAAMoB,MAAM,GAAGF,QAAQ,CAACjB,IAAD,CAAvB;MACAE,mBAAmB,CAACiB,MAAD,CAAnB;MACAf,QAAQ,CAAC,EAAD,CAAR;IACD;IAAC,OAAOD,KAAP,EAAc;MACdD,mBAAmB,CAAC,EAAD,CAAnB;MACAE,QAAQ,CAACD,KAAK,CAACiB,OAAP,CAAR;IACD;EACF,CAVM,EAUJ,CAACrB,cAAD,EAAiBC,IAAjB,CAVI,CAAP;EAYA,MAAMqB,KAAK,GAAG/B,MAAM,CAACgC,GAAG;;GAAxB;EAIA,IAAInB,KAAJ,EAAW;IACT,OAAO,cAAC,KAAD,QAAQA,KAAR,CAAP;EACD;EAED,IAAIF,gBAAJ,EAAsB;IACpB,OACE,cAAC,YAAD,IACE,MAAM,EAAEA,gBADV,EAEE,gBAAgB,EAAEW,gBAFpB,EAGE,mBAAmB,EAAEG,mBAHvB,GADF;EAOD;EACD,OAAO,yBAAIxB,CAAC,CAAC,YAAD,CAAL,CAAP;AACD,CA5CM;AA8CP;AACAC,UAAU,CAAC+B,cAAX,CAA0B,YAA1B,EAAwC,UAAUC,OAAV,EAAmBC,KAAnB,EAAwB;EAC9D,MAAMC,CAAC,GAAGD,KAAK,CAACE,IAAN,CAAWC,MAAX,IAAqB,YAA/B;EACA,OAAOnC,MAAM,CAAC+B,OAAD,CAAN,CAAgBI,MAAhB,CAAuBF,CAAvB,CAAP;AACD,CAHD;AAKA;AACAlC,UAAU,CAAC+B,cAAX,CAA0B,WAA1B,EAAuC,CAACM,GAAD,EAAWC,IAAX,KAAwB;EAC7D;EACA,IAAIA,IAAI,KAAKC,SAAb;EACE,MAAMV,KAAK,CAAC,wDAAD,CAAX;EACF,OAAO,eAAcQ,GAAd,IAAqBpB,IAAI,CAACuB,SAAL,CAAeH,GAAf,CAArB,GAA2CI,MAAM,CAACJ,GAAD,CAAxD;AACD,CALD;AAOAhC,OAAO,CAACqC,eAAR,CAAwB1C,UAAxB","names":["SafeMarkdown","styled","t","Handlebars","moment","React","useMemo","useState","Helpers","HandlebarsViewer","templateSource","data","renderedTemplate","setRenderedTemplate","error","setError","appContainer","document","getElementById","common","JSON","parse","getAttribute","htmlSanitization","conf","HTML_SANITIZATION","htmlSchemaOverrides","HTML_SANITIZATION_SCHEMA_EXTENSIONS","template","compile","result","message","Error","pre","registerHelper","context","block","f","hash","format","obj","obj2","undefined","stringify","String","registerHelpers"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-handlebars/src/components/Handlebars/HandlebarsViewer.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { SafeMarkdown, styled, t } from '@superset-ui/core';\nimport Handlebars from 'handlebars';\nimport moment from 'moment';\nimport React, { useMemo, useState } from 'react';\nimport { isPlainObject } from 'lodash';\nimport Helpers from 'just-handlebars-helpers';\n\nexport interface HandlebarsViewerProps {\n  templateSource: string;\n  data: any;\n}\n\nexport const HandlebarsViewer = ({\n  templateSource,\n  data,\n}: HandlebarsViewerProps) => {\n  const [renderedTemplate, setRenderedTemplate] = useState('');\n  const [error, setError] = useState('');\n  const appContainer = document.getElementById('app');\n  const { common } = JSON.parse(\n    appContainer?.getAttribute('data-bootstrap') || '{}',\n  );\n  const htmlSanitization = common?.conf?.HTML_SANITIZATION ?? true;\n  const htmlSchemaOverrides =\n    common?.conf?.HTML_SANITIZATION_SCHEMA_EXTENSIONS || {};\n\n  useMemo(() => {\n    try {\n      const template = Handlebars.compile(templateSource);\n      const result = template(data);\n      setRenderedTemplate(result);\n      setError('');\n    } catch (error) {\n      setRenderedTemplate('');\n      setError(error.message);\n    }\n  }, [templateSource, data]);\n\n  const Error = styled.pre`\n    white-space: pre-wrap;\n  `;\n\n  if (error) {\n    return <Error>{error}</Error>;\n  }\n\n  if (renderedTemplate) {\n    return (\n      <SafeMarkdown\n        source={renderedTemplate}\n        htmlSanitization={htmlSanitization}\n        htmlSchemaOverrides={htmlSchemaOverrides}\n      />\n    );\n  }\n  return <p>{t('Loading...')}</p>;\n};\n\n//  usage: {{dateFormat my_date format=\"MMMM YYYY\"}}\nHandlebars.registerHelper('dateFormat', function (context, block) {\n  const f = block.hash.format || 'YYYY-MM-DD';\n  return moment(context).format(f);\n});\n\n// usage: {{  }}\nHandlebars.registerHelper('stringify', (obj: any, obj2: any) => {\n  // calling without an argument\n  if (obj2 === undefined)\n    throw Error('Please call with an object. Example: `stringify myObj`');\n  return isPlainObject(obj) ? JSON.stringify(obj) : String(obj);\n});\n\nHelpers.registerHelpers(Handlebars);\n"]},"metadata":{},"sourceType":"module"}