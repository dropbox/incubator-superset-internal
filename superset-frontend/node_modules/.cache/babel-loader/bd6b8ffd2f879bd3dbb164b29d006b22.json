{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { createDurationFormatter, getNumberFormatter, getNumberFormatterRegistry, NumberFormats, getTimeFormatterRegistry, smartDateFormatter, smartDateVerboseFormatter } from '@superset-ui/core';\nexport default function setupFormatters(d3Format) {\n  getNumberFormatterRegistry().\n  setD3Format(d3Format)\n  // Add shims for format strings that are deprecated or common typos.\n  // Temporary solution until performing a db migration to fix this.\n  .registerValue(',0', getNumberFormatter(',.4~f')).\n  registerValue('null', getNumberFormatter(',.4~f')).\n  registerValue('%', getNumberFormatter('.0%')).\n  registerValue('.', getNumberFormatter('.4~f')).\n  registerValue(',f', getNumberFormatter(',d')).\n  registerValue(',r', getNumberFormatter(',.4f')).\n  registerValue('0f', getNumberFormatter(',d')).\n  registerValue(',#', getNumberFormatter(',.4~f')).\n  registerValue('$,f', getNumberFormatter('$,d')).\n  registerValue('0%', getNumberFormatter('.0%')).\n  registerValue('f', getNumberFormatter(',d')).\n  registerValue(',.', getNumberFormatter(',.4~f')).\n  registerValue('.1%f', getNumberFormatter('.1%')).\n  registerValue('1%', getNumberFormatter('.0%')).\n  registerValue('3%', getNumberFormatter('.0%')).\n  registerValue(',%', getNumberFormatter(',.0%')).\n  registerValue('.r', getNumberFormatter('.4~f')).\n  registerValue('$,.0', getNumberFormatter('$,d')).\n  registerValue('$,.1', getNumberFormatter('$,.1~f')).\n  registerValue(',0s', getNumberFormatter(',.4~f')).\n  registerValue('%%%', getNumberFormatter('.0%')).\n  registerValue(',0f', getNumberFormatter(',d')).\n  registerValue('+,%', getNumberFormatter('+,.0%')).\n  registerValue('$f', getNumberFormatter('$,d')).\n  registerValue('+,', getNumberFormatter(NumberFormats.INTEGER_SIGNED)).\n  registerValue(',2f', getNumberFormatter(',.4~f')).\n  registerValue(',g', getNumberFormatter(',.4~f')).\n  registerValue('int', getNumberFormatter(NumberFormats.INTEGER)).\n  registerValue('.0%f', getNumberFormatter('.1%')).\n  registerValue('$,0', getNumberFormatter('$,.4f')).\n  registerValue('$,0f', getNumberFormatter('$,.4f')).\n  registerValue('$,.f', getNumberFormatter('$,.4f')).\n  registerValue('DURATION', createDurationFormatter()).\n  registerValue('DURATION_SUB', createDurationFormatter({ formatSubMilliseconds: true }));\n  getTimeFormatterRegistry().\n  registerValue('smart_date', smartDateFormatter).\n  registerValue('smart_date_verbose', smartDateVerboseFormatter).\n  setDefaultKey('smart_date');\n}","map":{"version":3,"mappings":"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","names":["createDurationFormatter","getNumberFormatter","getNumberFormatterRegistry","NumberFormats","getTimeFormatterRegistry","smartDateFormatter","smartDateVerboseFormatter","setupFormatters","d3Format","setD3Format","registerValue","INTEGER_SIGNED","INTEGER","formatSubMilliseconds","setDefaultKey"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/setup/setupFormatters.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  createDurationFormatter,\n  getNumberFormatter,\n  getNumberFormatterRegistry,\n  NumberFormats,\n  getTimeFormatterRegistry,\n  smartDateFormatter,\n  smartDateVerboseFormatter,\n} from '@superset-ui/core';\nimport { FormatLocaleDefinition } from 'd3-format';\n\nexport default function setupFormatters(\n  d3Format: Partial<FormatLocaleDefinition>,\n) {\n  getNumberFormatterRegistry()\n    .setD3Format(d3Format)\n    // Add shims for format strings that are deprecated or common typos.\n    // Temporary solution until performing a db migration to fix this.\n    .registerValue(',0', getNumberFormatter(',.4~f'))\n    .registerValue('null', getNumberFormatter(',.4~f'))\n    .registerValue('%', getNumberFormatter('.0%'))\n    .registerValue('.', getNumberFormatter('.4~f'))\n    .registerValue(',f', getNumberFormatter(',d'))\n    .registerValue(',r', getNumberFormatter(',.4f'))\n    .registerValue('0f', getNumberFormatter(',d'))\n    .registerValue(',#', getNumberFormatter(',.4~f'))\n    .registerValue('$,f', getNumberFormatter('$,d'))\n    .registerValue('0%', getNumberFormatter('.0%'))\n    .registerValue('f', getNumberFormatter(',d'))\n    .registerValue(',.', getNumberFormatter(',.4~f'))\n    .registerValue('.1%f', getNumberFormatter('.1%'))\n    .registerValue('1%', getNumberFormatter('.0%'))\n    .registerValue('3%', getNumberFormatter('.0%'))\n    .registerValue(',%', getNumberFormatter(',.0%'))\n    .registerValue('.r', getNumberFormatter('.4~f'))\n    .registerValue('$,.0', getNumberFormatter('$,d'))\n    .registerValue('$,.1', getNumberFormatter('$,.1~f'))\n    .registerValue(',0s', getNumberFormatter(',.4~f'))\n    .registerValue('%%%', getNumberFormatter('.0%'))\n    .registerValue(',0f', getNumberFormatter(',d'))\n    .registerValue('+,%', getNumberFormatter('+,.0%'))\n    .registerValue('$f', getNumberFormatter('$,d'))\n    .registerValue('+,', getNumberFormatter(NumberFormats.INTEGER_SIGNED))\n    .registerValue(',2f', getNumberFormatter(',.4~f'))\n    .registerValue(',g', getNumberFormatter(',.4~f'))\n    .registerValue('int', getNumberFormatter(NumberFormats.INTEGER))\n    .registerValue('.0%f', getNumberFormatter('.1%'))\n    .registerValue('$,0', getNumberFormatter('$,.4f'))\n    .registerValue('$,0f', getNumberFormatter('$,.4f'))\n    .registerValue('$,.f', getNumberFormatter('$,.4f'))\n    .registerValue('DURATION', createDurationFormatter())\n    .registerValue(\n      'DURATION_SUB',\n      createDurationFormatter({ formatSubMilliseconds: true }),\n    );\n\n  getTimeFormatterRegistry()\n    .registerValue('smart_date', smartDateFormatter)\n    .registerValue('smart_date_verbose', smartDateVerboseFormatter)\n    .setDefaultKey('smart_date');\n}\n"]},"metadata":{},"sourceType":"module"}