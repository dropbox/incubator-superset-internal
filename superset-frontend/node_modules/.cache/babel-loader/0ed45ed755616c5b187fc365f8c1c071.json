{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t, useTheme } from '@superset-ui/core';\nimport React from 'react';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport { AlertState } from '../types';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nfunction getStatusColor(status, isReportEnabled, theme) {\n  switch (status) {\n    case AlertState.Working:\n      return theme.colors.primary.base;\n    case AlertState.Error:\n      return theme.colors.error.base;\n    case AlertState.Success:\n      return isReportEnabled ?\n      theme.colors.success.base :\n      theme.colors.alert.base;\n    case AlertState.Noop:\n      return theme.colors.success.base;\n    case AlertState.Grace:\n      return theme.colors.alert.base;\n    default:\n      return theme.colors.grayscale.base;}\n\n}\nexport default function AlertStatusIcon(_ref) {let { state, isReportEnabled = false } = _ref;\n  const theme = useTheme();\n  const lastStateConfig = {\n    icon: Icons.Check,\n    label: '',\n    status: '' };\n\n  switch (state) {\n    case AlertState.Success:\n      lastStateConfig.icon = isReportEnabled ?\n      Icons.Check :\n      Icons.AlertSolidSmall;\n      lastStateConfig.label = isReportEnabled ?\n      t('Report sent') :\n      t('Alert triggered, notification sent');\n      lastStateConfig.status = AlertState.Success;\n      break;\n    case AlertState.Working:\n      lastStateConfig.icon = Icons.Running;\n      lastStateConfig.label = isReportEnabled ?\n      t('Report sending') :\n      t('Alert running');\n      lastStateConfig.status = AlertState.Working;\n      break;\n    case AlertState.Error:\n      lastStateConfig.icon = Icons.XSmall;\n      lastStateConfig.label = isReportEnabled ?\n      t('Report failed') :\n      t('Alert failed');\n      lastStateConfig.status = AlertState.Error;\n      break;\n    case AlertState.Noop:\n      lastStateConfig.icon = Icons.Check;\n      lastStateConfig.label = t('Nothing triggered');\n      lastStateConfig.status = AlertState.Noop;\n      break;\n    case AlertState.Grace:\n      lastStateConfig.icon = Icons.AlertSolidSmall;\n      lastStateConfig.label = t('Alert Triggered, In Grace Period');\n      lastStateConfig.status = AlertState.Grace;\n      break;\n    default:\n      lastStateConfig.icon = Icons.Check;\n      lastStateConfig.label = t('Nothing triggered');\n      lastStateConfig.status = AlertState.Noop;}\n\n  const Icon = lastStateConfig.icon;\n  return ___EmotionJSX(Tooltip, { title: lastStateConfig.label, placement: \"bottomLeft\" },\n  ___EmotionJSX(Icon, { iconColor: getStatusColor(lastStateConfig.status, isReportEnabled, theme) }));\n\n}__signature__(AlertStatusIcon, \"useTheme{theme}\", () => [useTheme]);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(getStatusColor, \"getStatusColor\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/features/alerts/components/AlertStatusIcon.tsx\");reactHotLoader.register(AlertStatusIcon, \"AlertStatusIcon\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/features/alerts/components/AlertStatusIcon.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"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","names":["t","useTheme","React","Tooltip","Icons","AlertState","getStatusColor","status","isReportEnabled","theme","Working","colors","primary","base","Error","error","Success","success","alert","Noop","Grace","grayscale","AlertStatusIcon","state","lastStateConfig","icon","Check","label","AlertSolidSmall","Running","XSmall","Icon"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/features/alerts/components/AlertStatusIcon.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t, SupersetTheme, useTheme } from '@superset-ui/core';\nimport React from 'react';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport { AlertState } from '../types';\n\nfunction getStatusColor(\n  status: string,\n  isReportEnabled: boolean,\n  theme: SupersetTheme,\n) {\n  switch (status) {\n    case AlertState.Working:\n      return theme.colors.primary.base;\n    case AlertState.Error:\n      return theme.colors.error.base;\n    case AlertState.Success:\n      return isReportEnabled\n        ? theme.colors.success.base\n        : theme.colors.alert.base;\n    case AlertState.Noop:\n      return theme.colors.success.base;\n    case AlertState.Grace:\n      return theme.colors.alert.base;\n    default:\n      return theme.colors.grayscale.base;\n  }\n}\n\nexport default function AlertStatusIcon({\n  state,\n  isReportEnabled = false,\n}: {\n  state: string;\n  isReportEnabled: boolean;\n}) {\n  const theme = useTheme();\n  const lastStateConfig = {\n    icon: Icons.Check,\n    label: '',\n    status: '',\n  };\n  switch (state) {\n    case AlertState.Success:\n      lastStateConfig.icon = isReportEnabled\n        ? Icons.Check\n        : Icons.AlertSolidSmall;\n      lastStateConfig.label = isReportEnabled\n        ? t('Report sent')\n        : t('Alert triggered, notification sent');\n      lastStateConfig.status = AlertState.Success;\n      break;\n    case AlertState.Working:\n      lastStateConfig.icon = Icons.Running;\n      lastStateConfig.label = isReportEnabled\n        ? t('Report sending')\n        : t('Alert running');\n      lastStateConfig.status = AlertState.Working;\n      break;\n    case AlertState.Error:\n      lastStateConfig.icon = Icons.XSmall;\n      lastStateConfig.label = isReportEnabled\n        ? t('Report failed')\n        : t('Alert failed');\n      lastStateConfig.status = AlertState.Error;\n      break;\n    case AlertState.Noop:\n      lastStateConfig.icon = Icons.Check;\n      lastStateConfig.label = t('Nothing triggered');\n      lastStateConfig.status = AlertState.Noop;\n      break;\n    case AlertState.Grace:\n      lastStateConfig.icon = Icons.AlertSolidSmall;\n      lastStateConfig.label = t('Alert Triggered, In Grace Period');\n      lastStateConfig.status = AlertState.Grace;\n      break;\n    default:\n      lastStateConfig.icon = Icons.Check;\n      lastStateConfig.label = t('Nothing triggered');\n      lastStateConfig.status = AlertState.Noop;\n  }\n  const Icon = lastStateConfig.icon;\n  return (\n    <Tooltip title={lastStateConfig.label} placement=\"bottomLeft\">\n      <Icon\n        iconColor={getStatusColor(\n          lastStateConfig.status,\n          isReportEnabled,\n          theme,\n        )}\n      />\n    </Tooltip>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}