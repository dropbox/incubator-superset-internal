{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport rison from 'rison';\nimport { FeatureFlag, SupersetClient, t } from '@superset-ui/core';\nimport { addDangerToast } from 'src/components/MessageToasts/actions';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport { isFeatureEnabled } from 'src/featureFlags';\nconst FETCH_SLICES_PAGE_SIZE = 200;\nexport function getDatasourceParameter(datasourceId, datasourceType) {\n  return `${datasourceId}__${datasourceType}`;\n}\nexport const ADD_SLICES = 'ADD_SLICES';\nfunction addSlices(slices) {\n  return { type: ADD_SLICES, payload: { slices } };\n}\nexport const SET_SLICES = 'SET_SLICES';\nfunction setSlices(slices) {\n  return { type: SET_SLICES, payload: { slices } };\n}\nexport const FETCH_ALL_SLICES_STARTED = 'FETCH_ALL_SLICES_STARTED';\nfunction fetchAllSlicesStarted() {\n  return { type: FETCH_ALL_SLICES_STARTED };\n}\nexport const FETCH_ALL_SLICES_FAILED = 'FETCH_ALL_SLICES_FAILED';\nfunction fetchAllSlicesFailed(error) {\n  return { type: FETCH_ALL_SLICES_FAILED, payload: { error } };\n}\nconst parseResult = (result) => result.reduce((slices, slice) => {\n  let form_data = JSON.parse(slice.params);\n  form_data = {\n    ...form_data,\n    // force using datasource stored in relational table prop\n    datasource: getDatasourceParameter(slice.datasource_id, slice.datasource_type) ||\n    form_data.datasource };\n\n  return {\n    ...slices,\n    [slice.id]: {\n      slice_id: slice.id,\n      slice_url: slice.url,\n      slice_name: slice.slice_name,\n      form_data,\n      datasource_name: slice.datasource_name_text,\n      datasource_url: slice.datasource_url,\n      datasource_id: slice.datasource_id,\n      datasource_type: slice.datasource_type,\n      changed_on: new Date(slice.changed_on_utc).getTime(),\n      description: slice.description,\n      description_markdown: slice.description_markeddown,\n      viz_type: slice.viz_type,\n      modified: slice.changed_on_delta_humanized,\n      changed_on_humanized: slice.changed_on_delta_humanized,\n      thumbnail_url: slice.thumbnail_url,\n      owners: slice.owners,\n      created_by: slice.created_by } };\n\n\n}, {});\nexport function updateSlices(slices) {\n  return (dispatch) => {\n    dispatch(setSlices(slices));\n  };\n}\nexport function fetchSlices(userId, filter_value, sortColumn) {if (sortColumn === void 0) {sortColumn = 'changed_on';}\n  return (dispatch) => {\n    dispatch(fetchAllSlicesStarted());\n    const filters = filter_value ?\n    [{ col: 'slice_name', opr: 'chart_all_text', value: filter_value }] :\n    [];\n    if (isFeatureEnabled(FeatureFlag.DASHBOARD_NATIVE_FILTERS)) {\n      filters.push({\n        col: 'viz_type',\n        opr: 'neq',\n        value: 'filter_box' });\n\n    }\n    if (userId) {\n      filters.push({ col: 'owners', opr: 'rel_m_m', value: userId });\n    }\n    return SupersetClient.get({\n      endpoint: `/api/v1/chart/?q=${rison.encode({\n        columns: [\n        'changed_on_delta_humanized',\n        'changed_on_utc',\n        'datasource_id',\n        'datasource_type',\n        'datasource_url',\n        'datasource_name_text',\n        'description_markeddown',\n        'description',\n        'id',\n        'params',\n        'slice_name',\n        'thumbnail_url',\n        'url',\n        'viz_type',\n        'owners.id',\n        'created_by.id'],\n\n        filters,\n        page_size: FETCH_SLICES_PAGE_SIZE,\n        order_column: sortColumn === 'changed_on' ?\n        'changed_on_delta_humanized' :\n        sortColumn,\n        order_direction: sortColumn === 'changed_on' ? 'desc' : 'asc' })\n      }` }).\n\n    then((_ref) => {let { json } = _ref;\n      const { result } = json;\n      const slices = parseResult(result);\n      return dispatch(addSlices(slices));\n    }).\n    catch((errorResponse) => getClientErrorObject(errorResponse).then((_ref2) => {let { error } = _ref2;\n      dispatch(fetchAllSlicesFailed(error || t('Could not fetch all saved charts')));\n      dispatch(addDangerToast(t('Sorry there was an error fetching saved charts: ') + error));\n    }));\n  };\n}","map":{"version":3,"mappings":"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","names":["rison","FeatureFlag","SupersetClient","t","addDangerToast","getClientErrorObject","isFeatureEnabled","FETCH_SLICES_PAGE_SIZE","getDatasourceParameter","datasourceId","datasourceType","ADD_SLICES","addSlices","slices","type","payload","SET_SLICES","setSlices","FETCH_ALL_SLICES_STARTED","fetchAllSlicesStarted","FETCH_ALL_SLICES_FAILED","fetchAllSlicesFailed","error","parseResult","result","reduce","slice","form_data","JSON","parse","params","datasource","datasource_id","datasource_type","id","slice_id","slice_url","url","slice_name","datasource_name","datasource_name_text","datasource_url","changed_on","Date","changed_on_utc","getTime","description","description_markdown","description_markeddown","viz_type","modified","changed_on_delta_humanized","changed_on_humanized","thumbnail_url","owners","created_by","updateSlices","dispatch","fetchSlices","userId","filter_value","sortColumn","filters","col","opr","value","DASHBOARD_NATIVE_FILTERS","push","get","endpoint","encode","columns","page_size","order_column","order_direction","then","json","catch","errorResponse"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/actions/sliceEntities.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport rison from 'rison';\nimport {\n  DatasourceType,\n  FeatureFlag,\n  SupersetClient,\n  t,\n} from '@superset-ui/core';\nimport { addDangerToast } from 'src/components/MessageToasts/actions';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport { isFeatureEnabled } from 'src/featureFlags';\nimport { Dispatch } from 'redux';\nimport { Slice } from '../types';\n\nconst FETCH_SLICES_PAGE_SIZE = 200;\n\nexport function getDatasourceParameter(\n  datasourceId: number,\n  datasourceType: DatasourceType,\n) {\n  return `${datasourceId}__${datasourceType}`;\n}\n\nexport const ADD_SLICES = 'ADD_SLICES';\nfunction addSlices(slices: { [id: number]: Slice }) {\n  return { type: ADD_SLICES, payload: { slices } };\n}\n\nexport const SET_SLICES = 'SET_SLICES';\nfunction setSlices(slices: { [id: number]: Slice }) {\n  return { type: SET_SLICES, payload: { slices } };\n}\n\nexport const FETCH_ALL_SLICES_STARTED = 'FETCH_ALL_SLICES_STARTED';\nfunction fetchAllSlicesStarted() {\n  return { type: FETCH_ALL_SLICES_STARTED };\n}\n\nexport const FETCH_ALL_SLICES_FAILED = 'FETCH_ALL_SLICES_FAILED';\nfunction fetchAllSlicesFailed(error: string) {\n  return { type: FETCH_ALL_SLICES_FAILED, payload: { error } };\n}\n\nconst parseResult = (result: any[]) =>\n  result.reduce((slices, slice: any) => {\n    let form_data = JSON.parse(slice.params);\n    form_data = {\n      ...form_data,\n      // force using datasource stored in relational table prop\n      datasource:\n        getDatasourceParameter(slice.datasource_id, slice.datasource_type) ||\n        form_data.datasource,\n    };\n    return {\n      ...slices,\n      [slice.id]: {\n        slice_id: slice.id,\n        slice_url: slice.url,\n        slice_name: slice.slice_name,\n        form_data,\n        datasource_name: slice.datasource_name_text,\n        datasource_url: slice.datasource_url,\n        datasource_id: slice.datasource_id,\n        datasource_type: slice.datasource_type,\n        changed_on: new Date(slice.changed_on_utc).getTime(),\n        description: slice.description,\n        description_markdown: slice.description_markeddown,\n        viz_type: slice.viz_type,\n        modified: slice.changed_on_delta_humanized,\n        changed_on_humanized: slice.changed_on_delta_humanized,\n        thumbnail_url: slice.thumbnail_url,\n        owners: slice.owners,\n        created_by: slice.created_by,\n      },\n    };\n  }, {});\n\nexport function updateSlices(slices: { [id: number]: Slice }) {\n  return (dispatch: Dispatch) => {\n    dispatch(setSlices(slices));\n  };\n}\n\nexport function fetchSlices(\n  userId?: number,\n  filter_value?: string,\n  sortColumn = 'changed_on',\n) {\n  return (dispatch: Dispatch) => {\n    dispatch(fetchAllSlicesStarted());\n\n    const filters: {\n      col: string;\n      opr: string;\n      value: string | number;\n    }[] = filter_value\n      ? [{ col: 'slice_name', opr: 'chart_all_text', value: filter_value }]\n      : [];\n\n    if (isFeatureEnabled(FeatureFlag.DASHBOARD_NATIVE_FILTERS)) {\n      filters.push({\n        col: 'viz_type',\n        opr: 'neq',\n        value: 'filter_box',\n      });\n    }\n\n    if (userId) {\n      filters.push({ col: 'owners', opr: 'rel_m_m', value: userId });\n    }\n\n    return SupersetClient.get({\n      endpoint: `/api/v1/chart/?q=${rison.encode({\n        columns: [\n          'changed_on_delta_humanized',\n          'changed_on_utc',\n          'datasource_id',\n          'datasource_type',\n          'datasource_url',\n          'datasource_name_text',\n          'description_markeddown',\n          'description',\n          'id',\n          'params',\n          'slice_name',\n          'thumbnail_url',\n          'url',\n          'viz_type',\n          'owners.id',\n          'created_by.id',\n        ],\n        filters,\n        page_size: FETCH_SLICES_PAGE_SIZE,\n        order_column:\n          sortColumn === 'changed_on'\n            ? 'changed_on_delta_humanized'\n            : sortColumn,\n        order_direction: sortColumn === 'changed_on' ? 'desc' : 'asc',\n      })}`,\n    })\n      .then(({ json }) => {\n        const { result } = json;\n        const slices = parseResult(result);\n        return dispatch(addSlices(slices));\n      })\n      .catch(errorResponse =>\n        getClientErrorObject(errorResponse).then(({ error }) => {\n          dispatch(\n            fetchAllSlicesFailed(\n              error || t('Could not fetch all saved charts'),\n            ),\n          );\n          dispatch(\n            addDangerToast(\n              t('Sorry there was an error fetching saved charts: ') + error,\n            ),\n          );\n        }),\n      );\n  };\n}\n"]},"metadata":{},"sourceType":"module"}