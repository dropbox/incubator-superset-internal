{"ast":null,"code":"import _uniqWith from \"lodash/uniqWith\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { useResizeDetector } from 'react-resize-detector';\n\nimport { styled } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { config } from './ContentConfig';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport const MIN_NUMBER_ITEMS = 2;\nexport const MAX_NUMBER_ITEMS = 6;\nconst HORIZONTAL_PADDING = 12;\nconst VERTICAL_PADDING = 8;\nconst ICON_PADDING = 8;\nconst SPACE_BETWEEN_ITEMS = 16;\nconst ICON_WIDTH = 16;\nconst TEXT_MIN_WIDTH = 70;\nconst TEXT_MAX_WIDTH = 150;\nconst ORDER = {\n  dashboards: 0,\n  table: 1,\n  sql: 2,\n  rows: 3,\n  tags: 4,\n  description: 5,\n  owner: 6,\n  lastModified: 7 };\n\nconst Bar = styled.div`\n  ${(_ref) => {let { theme, count } = _ref;return `\n    display: flex;\n    align-items: center;\n    padding: ${VERTICAL_PADDING}px ${HORIZONTAL_PADDING}px;\n    background-color: ${theme.colors.grayscale.light4};\n    color: ${theme.colors.grayscale.base};\n    font-size: ${theme.typography.sizes.s}px;\n    min-width: ${HORIZONTAL_PADDING * 2 +\n  (ICON_WIDTH + SPACE_BETWEEN_ITEMS) * count -\n  SPACE_BETWEEN_ITEMS}px;\n    border-radius: ${theme.borderRadius}px;\n    line-height: 1;\n  `;}}\n`;\nconst StyledItem = styled.div`\n  ${(_ref2) => {let { theme, collapsed, last, onClick } = _ref2;return `\n    display: flex;\n    align-items: center;\n    max-width: ${ICON_WIDTH +\n  ICON_PADDING +\n  TEXT_MAX_WIDTH + (\n  last ? 0 : SPACE_BETWEEN_ITEMS)}px;\n    min-width: ${collapsed ?\n  ICON_WIDTH + (last ? 0 : SPACE_BETWEEN_ITEMS) :\n  ICON_WIDTH +\n  ICON_PADDING +\n  TEXT_MIN_WIDTH + (\n  last ? 0 : SPACE_BETWEEN_ITEMS)}px;\n    padding-right: ${last ? 0 : SPACE_BETWEEN_ITEMS}px;\n    cursor: ${onClick ? 'pointer' : 'default'};\n    & .metadata-icon {\n      color: ${onClick && collapsed ?\n  theme.colors.primary.base :\n  theme.colors.grayscale.base};\n      padding-right: ${collapsed ? 0 : ICON_PADDING}px;\n      & .anticon {\n        line-height: 0;\n      }\n    }\n    & .metadata-text {\n      min-width: ${TEXT_MIN_WIDTH}px;\n      overflow: hidden;\n      text-overflow: ${collapsed ? 'unset' : 'ellipsis'};\n      white-space: nowrap;\n      text-decoration: ${onClick ? 'underline' : 'none'};\n    }\n  `;}}\n`;\n// Make sure big tootips are truncated\nconst TootipContent = styled.div`\n  display: -webkit-box;\n  -webkit-line-clamp: 20;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\nconst Item = (_ref3) => {let { barWidth, contentType, collapsed, last = false, tooltipPlacement } = _ref3;\n  const { icon, title, tooltip = title } = config(contentType);\n  const [isTruncated, setIsTruncated] = useState(false);\n  const ref = useRef(null);\n  const Icon = icon;\n  const { type, onClick } = contentType;\n  useEffect(() => {\n    setIsTruncated(ref.current ? ref.current.scrollWidth > ref.current.clientWidth : false);\n  }, [barWidth, setIsTruncated, contentType]);\n  const content = ___EmotionJSX(StyledItem, { collapsed: collapsed, last: last, onClick: onClick ? () => onClick(type) : undefined },\n  ___EmotionJSX(Icon, { iconSize: \"l\", className: \"metadata-icon\" }),\n  !collapsed && ___EmotionJSX(\"span\", { ref: ref, className: \"metadata-text\" },\n  title));\n\n\n  return isTruncated || collapsed || tooltip && tooltip !== title ? ___EmotionJSX(Tooltip, { placement: tooltipPlacement, title: ___EmotionJSX(TootipContent, null, tooltip) },\n  content) :\n  content;\n};\n/**\n * The metadata bar component is used to display additional information about an entity.\n * Content types are predefined and consistent across the whole app. This means that\n * they will be displayed and behave in a consistent manner, keeping the same ordering,\n * information formatting, and interactions.\n * To extend the list of content types, a developer needs to request the inclusion of the new type in the design system.\n * This process is important to make sure the new type is reviewed by the design team, improving Superset consistency.\n */\nconst MetadataBar = (_ref4) => {let { items, tooltipPlacement = 'top' } = _ref4;\n  const [width, setWidth] = useState();\n  const [collapsed, setCollapsed] = useState(false);\n  const uniqueItems = _uniqWith(items, (a, b) => a.type === b.type);\n  const sortedItems = uniqueItems.sort((a, b) => ORDER[a.type] - ORDER[b.type]);\n  const count = sortedItems.length;\n  if (count < MIN_NUMBER_ITEMS) {\n    throw Error('The minimum number of items for the metadata bar is 2.');\n  }\n  if (count > MAX_NUMBER_ITEMS) {\n    throw Error('The maximum number of items for the metadata bar is 6.');\n  }\n  const onResize = useCallback((width) => {\n    // Calculates the breakpoint width to collapse the bar.\n    // The last item does not have a space, so we subtract SPACE_BETWEEN_ITEMS from the total.\n    const breakpoint = (ICON_WIDTH + ICON_PADDING + TEXT_MIN_WIDTH + SPACE_BETWEEN_ITEMS) *\n    count -\n    SPACE_BETWEEN_ITEMS;\n    setWidth(width);\n    setCollapsed(Boolean(width && width < breakpoint));\n  }, [count]);\n  const { ref } = useResizeDetector({ onResize });\n  return ___EmotionJSX(Bar, { ref: ref, count: count },\n  sortedItems.map((item, index) => ___EmotionJSX(Item, { barWidth: width, key: index, contentType: item, collapsed: collapsed, last: index === count - 1, tooltipPlacement: tooltipPlacement })));\n\n};\nexport default MetadataBar;","map":{"version":3,"mappings":"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","names":["React","useCallback","useEffect","useRef","useState","useResizeDetector","styled","Tooltip","config","MIN_NUMBER_ITEMS","MAX_NUMBER_ITEMS","HORIZONTAL_PADDING","VERTICAL_PADDING","ICON_PADDING","SPACE_BETWEEN_ITEMS","ICON_WIDTH","TEXT_MIN_WIDTH","TEXT_MAX_WIDTH","ORDER","dashboards","table","sql","rows","tags","description","owner","lastModified","Bar","div","theme","count","colors","grayscale","light4","base","typography","sizes","s","borderRadius","StyledItem","collapsed","last","onClick","primary","TootipContent","Item","barWidth","contentType","tooltipPlacement","icon","title","tooltip","isTruncated","setIsTruncated","ref","Icon","type","current","scrollWidth","clientWidth","content","undefined","MetadataBar","items","width","setWidth","setCollapsed","uniqueItems","a","b","sortedItems","sort","length","Error","onResize","breakpoint","Boolean","map","item","index"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/components/MetadataBar/MetadataBar.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { useResizeDetector } from 'react-resize-detector';\nimport { uniqWith } from 'lodash';\nimport { styled } from '@superset-ui/core';\nimport { Tooltip, TooltipPlacement } from 'src/components/Tooltip';\nimport { ContentType } from './ContentType';\nimport { config } from './ContentConfig';\n\nexport const MIN_NUMBER_ITEMS = 2;\nexport const MAX_NUMBER_ITEMS = 6;\n\nconst HORIZONTAL_PADDING = 12;\nconst VERTICAL_PADDING = 8;\nconst ICON_PADDING = 8;\nconst SPACE_BETWEEN_ITEMS = 16;\nconst ICON_WIDTH = 16;\nconst TEXT_MIN_WIDTH = 70;\nconst TEXT_MAX_WIDTH = 150;\nconst ORDER = {\n  dashboards: 0,\n  table: 1,\n  sql: 2,\n  rows: 3,\n  tags: 4,\n  description: 5,\n  owner: 6,\n  lastModified: 7,\n};\n\nconst Bar = styled.div<{ count: number }>`\n  ${({ theme, count }) => `\n    display: flex;\n    align-items: center;\n    padding: ${VERTICAL_PADDING}px ${HORIZONTAL_PADDING}px;\n    background-color: ${theme.colors.grayscale.light4};\n    color: ${theme.colors.grayscale.base};\n    font-size: ${theme.typography.sizes.s}px;\n    min-width: ${\n      HORIZONTAL_PADDING * 2 +\n      (ICON_WIDTH + SPACE_BETWEEN_ITEMS) * count -\n      SPACE_BETWEEN_ITEMS\n    }px;\n    border-radius: ${theme.borderRadius}px;\n    line-height: 1;\n  `}\n`;\n\nconst StyledItem = styled.div<{\n  collapsed: boolean;\n  last: boolean;\n  onClick?: () => void;\n}>`\n  ${({ theme, collapsed, last, onClick }) => `\n    display: flex;\n    align-items: center;\n    max-width: ${\n      ICON_WIDTH +\n      ICON_PADDING +\n      TEXT_MAX_WIDTH +\n      (last ? 0 : SPACE_BETWEEN_ITEMS)\n    }px;\n    min-width: ${\n      collapsed\n        ? ICON_WIDTH + (last ? 0 : SPACE_BETWEEN_ITEMS)\n        : ICON_WIDTH +\n          ICON_PADDING +\n          TEXT_MIN_WIDTH +\n          (last ? 0 : SPACE_BETWEEN_ITEMS)\n    }px;\n    padding-right: ${last ? 0 : SPACE_BETWEEN_ITEMS}px;\n    cursor: ${onClick ? 'pointer' : 'default'};\n    & .metadata-icon {\n      color: ${\n        onClick && collapsed\n          ? theme.colors.primary.base\n          : theme.colors.grayscale.base\n      };\n      padding-right: ${collapsed ? 0 : ICON_PADDING}px;\n      & .anticon {\n        line-height: 0;\n      }\n    }\n    & .metadata-text {\n      min-width: ${TEXT_MIN_WIDTH}px;\n      overflow: hidden;\n      text-overflow: ${collapsed ? 'unset' : 'ellipsis'};\n      white-space: nowrap;\n      text-decoration: ${onClick ? 'underline' : 'none'};\n    }\n  `}\n`;\n\n// Make sure big tootips are truncated\nconst TootipContent = styled.div`\n  display: -webkit-box;\n  -webkit-line-clamp: 20;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nconst Item = ({\n  barWidth,\n  contentType,\n  collapsed,\n  last = false,\n  tooltipPlacement,\n}: {\n  barWidth: number | undefined;\n  contentType: ContentType;\n  collapsed: boolean;\n  last?: boolean;\n  tooltipPlacement: TooltipPlacement;\n}) => {\n  const { icon, title, tooltip = title } = config(contentType);\n  const [isTruncated, setIsTruncated] = useState(false);\n  const ref = useRef<HTMLDivElement>(null);\n  const Icon = icon;\n  const { type, onClick } = contentType;\n\n  useEffect(() => {\n    setIsTruncated(\n      ref.current ? ref.current.scrollWidth > ref.current.clientWidth : false,\n    );\n  }, [barWidth, setIsTruncated, contentType]);\n\n  const content = (\n    <StyledItem\n      collapsed={collapsed}\n      last={last}\n      onClick={onClick ? () => onClick(type) : undefined}\n    >\n      <Icon iconSize=\"l\" className=\"metadata-icon\" />\n      {!collapsed && (\n        <span ref={ref} className=\"metadata-text\">\n          {title}\n        </span>\n      )}\n    </StyledItem>\n  );\n  return isTruncated || collapsed || (tooltip && tooltip !== title) ? (\n    <Tooltip\n      placement={tooltipPlacement}\n      title={<TootipContent>{tooltip}</TootipContent>}\n    >\n      {content}\n    </Tooltip>\n  ) : (\n    content\n  );\n};\n\nexport interface MetadataBarProps {\n  /**\n   * Array of content type configurations. To see the available properties\n   * for each content type, check {@link ContentType}\n   */\n  items: ContentType[];\n  /**\n   * Antd tooltip placement. To see available values, check {@link TooltipPlacement}.\n   * Defaults to \"top\".\n   */\n  tooltipPlacement?: TooltipPlacement;\n}\n\n/**\n * The metadata bar component is used to display additional information about an entity.\n * Content types are predefined and consistent across the whole app. This means that\n * they will be displayed and behave in a consistent manner, keeping the same ordering,\n * information formatting, and interactions.\n * To extend the list of content types, a developer needs to request the inclusion of the new type in the design system.\n * This process is important to make sure the new type is reviewed by the design team, improving Superset consistency.\n */\nconst MetadataBar = ({ items, tooltipPlacement = 'top' }: MetadataBarProps) => {\n  const [width, setWidth] = useState<number>();\n  const [collapsed, setCollapsed] = useState(false);\n  const uniqueItems = uniqWith(items, (a, b) => a.type === b.type);\n  const sortedItems = uniqueItems.sort((a, b) => ORDER[a.type] - ORDER[b.type]);\n  const count = sortedItems.length;\n  if (count < MIN_NUMBER_ITEMS) {\n    throw Error('The minimum number of items for the metadata bar is 2.');\n  }\n  if (count > MAX_NUMBER_ITEMS) {\n    throw Error('The maximum number of items for the metadata bar is 6.');\n  }\n\n  const onResize = useCallback(\n    width => {\n      // Calculates the breakpoint width to collapse the bar.\n      // The last item does not have a space, so we subtract SPACE_BETWEEN_ITEMS from the total.\n      const breakpoint =\n        (ICON_WIDTH + ICON_PADDING + TEXT_MIN_WIDTH + SPACE_BETWEEN_ITEMS) *\n          count -\n        SPACE_BETWEEN_ITEMS;\n      setWidth(width);\n      setCollapsed(Boolean(width && width < breakpoint));\n    },\n    [count],\n  );\n\n  const { ref } = useResizeDetector({ onResize });\n\n  return (\n    <Bar ref={ref} count={count} data-test=\"metadata-bar\">\n      {sortedItems.map((item, index) => (\n        <Item\n          barWidth={width}\n          key={index}\n          contentType={item}\n          collapsed={collapsed}\n          last={index === count - 1}\n          tooltipPlacement={tooltipPlacement}\n        />\n      ))}\n    </Bar>\n  );\n};\n\nexport default MetadataBar;\n"]},"metadata":{},"sourceType":"module"}