{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { ensureIsInt, t, validateNonEmpty } from '@superset-ui/core';\nimport { ControlSubSectionHeader, D3_FORMAT_DOCS, D3_NUMBER_FORMAT_DESCRIPTION_VALUES_TEXT, D3_FORMAT_OPTIONS, D3_TIME_FORMAT_OPTIONS, sections, getStandardizedControls } from '@superset-ui/chart-controls';\nimport { DEFAULT_FORM_DATA } from './types';\nimport { legendSection } from '../controls';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst { donut, innerRadius, labelsOutside, labelType, labelLine, outerRadius, numberFormat, showLabels } = DEFAULT_FORM_DATA;\nconst config = {\n  controlPanelSections: [\n  sections.legacyRegularTime,\n  {\n    label: t('Query'),\n    expanded: true,\n    controlSetRows: [\n    ['groupby'],\n    ['metric'],\n    ['adhoc_filters'],\n    ['row_limit'],\n    [\n    {\n      name: 'sort_by_metric',\n      config: {\n        default: true,\n        type: 'CheckboxControl',\n        label: t('Sort by metric'),\n        description: t('Whether to sort results by the selected metric in descending order.') } }]] },\n\n\n\n\n\n  {\n    label: t('Chart Options'),\n    expanded: true,\n    controlSetRows: [\n    ['color_scheme'],\n    [\n    {\n      name: 'show_labels_threshold',\n      config: {\n        type: 'TextControl',\n        label: t('Percentage threshold'),\n        renderTrigger: true,\n        isFloat: true,\n        default: 5,\n        description: t('Minimum threshold in percentage points for showing labels.') } }],\n\n\n\n    ...legendSection,\n    // eslint-disable-next-line react/jsx-key\n    [___EmotionJSX(ControlSubSectionHeader, null, t('Labels'))],\n    [\n    {\n      name: 'label_type',\n      config: {\n        type: 'SelectControl',\n        label: t('Label Type'),\n        default: labelType,\n        renderTrigger: true,\n        choices: [\n        ['key', t('Category Name')],\n        ['value', t('Value')],\n        ['percent', t('Percentage')],\n        ['key_value', t('Category and Value')],\n        ['key_percent', t('Category and Percentage')],\n        ['key_value_percent', t('Category, Value and Percentage')]],\n\n        description: t('What should be shown on the label?') } }],\n\n\n\n    [\n    {\n      name: 'number_format',\n      config: {\n        type: 'SelectControl',\n        freeForm: true,\n        label: t('Number format'),\n        renderTrigger: true,\n        default: numberFormat,\n        choices: D3_FORMAT_OPTIONS,\n        description: `${D3_FORMAT_DOCS} ${D3_NUMBER_FORMAT_DESCRIPTION_VALUES_TEXT}`,\n        tokenSeparators: ['\\n', '\\t', ';'] } }],\n\n\n\n    [\n    {\n      name: 'date_format',\n      config: {\n        type: 'SelectControl',\n        freeForm: true,\n        label: t('Date format'),\n        renderTrigger: true,\n        choices: D3_TIME_FORMAT_OPTIONS,\n        default: 'smart_date',\n        description: D3_FORMAT_DOCS } }],\n\n\n\n    [\n    {\n      name: 'show_labels',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Show Labels'),\n        renderTrigger: true,\n        default: showLabels,\n        description: t('Whether to display the labels.') } }],\n\n\n\n    [\n    {\n      name: 'labels_outside',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Put labels outside'),\n        default: labelsOutside,\n        renderTrigger: true,\n        description: t('Put the labels outside of the pie?'),\n        visibility: (_ref) => {var _controls$show_labels;let { controls } = _ref;return Boolean(controls == null ? void 0 : (_controls$show_labels = controls.show_labels) == null ? void 0 : _controls$show_labels.value);} } }],\n\n\n\n    [\n    {\n      name: 'label_line',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Label Line'),\n        default: labelLine,\n        renderTrigger: true,\n        description: t('Draw line from Pie to label when labels outside?'),\n        visibility: (_ref2) => {var _controls$show_labels2;let { controls } = _ref2;return Boolean(controls == null ? void 0 : (_controls$show_labels2 = controls.show_labels) == null ? void 0 : _controls$show_labels2.value);} } }],\n\n\n\n    [\n    {\n      name: 'show_total',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Show Total'),\n        default: false,\n        renderTrigger: true,\n        description: t('Whether to display the aggregate count') } }],\n\n\n\n    // eslint-disable-next-line react/jsx-key\n    [___EmotionJSX(ControlSubSectionHeader, null, t('Pie shape'))],\n    [\n    {\n      name: 'outerRadius',\n      config: {\n        type: 'SliderControl',\n        label: t('Outer Radius'),\n        renderTrigger: true,\n        min: 10,\n        max: 100,\n        step: 1,\n        default: outerRadius,\n        description: t('Outer edge of Pie chart') } }],\n\n\n\n    [\n    {\n      name: 'donut',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Donut'),\n        default: donut,\n        renderTrigger: true,\n        description: t('Do you want a donut or a pie?') } }],\n\n\n\n    [\n    {\n      name: 'innerRadius',\n      config: {\n        type: 'SliderControl',\n        label: t('Inner Radius'),\n        renderTrigger: true,\n        min: 0,\n        max: 100,\n        step: 1,\n        default: innerRadius,\n        description: t('Inner radius of donut hole'),\n        visibility: (_ref3) => {var _controls$donut;let { controls } = _ref3;return Boolean(controls == null ? void 0 : (_controls$donut = controls.donut) == null ? void 0 : _controls$donut.value);} } }]] }],\n\n\n\n\n\n\n  controlOverrides: {\n    series: {\n      validators: [validateNonEmpty],\n      clearable: false },\n\n    row_limit: {\n      default: 100 } },\n\n\n  formDataOverrides: (formData) => ({\n    ...formData,\n    metric: getStandardizedControls().shiftMetric(),\n    groupby: getStandardizedControls().popAllColumns(),\n    row_limit: ensureIsInt(formData.row_limit, 100) >= 100 ? 100 : formData.row_limit }) };\n\n\nexport default config;","map":{"version":3,"mappings":"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","names":["React","ensureIsInt","t","validateNonEmpty","ControlSubSectionHeader","D3_FORMAT_DOCS","D3_NUMBER_FORMAT_DESCRIPTION_VALUES_TEXT","D3_FORMAT_OPTIONS","D3_TIME_FORMAT_OPTIONS","sections","getStandardizedControls","DEFAULT_FORM_DATA","legendSection","donut","innerRadius","labelsOutside","labelType","labelLine","outerRadius","numberFormat","showLabels","config","controlPanelSections","legacyRegularTime","label","expanded","controlSetRows","name","default","type","description","renderTrigger","isFloat","choices","freeForm","tokenSeparators","visibility","controls","Boolean","show_labels","value","min","max","step","controlOverrides","series","validators","clearable","row_limit","formDataOverrides","formData","metric","shiftMetric","groupby","popAllColumns"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/plugins/plugin-chart-echarts/src/Pie/controlPanel.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { ensureIsInt, t, validateNonEmpty } from '@superset-ui/core';\nimport {\n  ControlPanelConfig,\n  ControlPanelsContainerProps,\n  ControlSubSectionHeader,\n  D3_FORMAT_DOCS,\n  D3_NUMBER_FORMAT_DESCRIPTION_VALUES_TEXT,\n  D3_FORMAT_OPTIONS,\n  D3_TIME_FORMAT_OPTIONS,\n  sections,\n  getStandardizedControls,\n} from '@superset-ui/chart-controls';\nimport { DEFAULT_FORM_DATA } from './types';\nimport { legendSection } from '../controls';\n\nconst {\n  donut,\n  innerRadius,\n  labelsOutside,\n  labelType,\n  labelLine,\n  outerRadius,\n  numberFormat,\n  showLabels,\n} = DEFAULT_FORM_DATA;\n\nconst config: ControlPanelConfig = {\n  controlPanelSections: [\n    sections.legacyRegularTime,\n    {\n      label: t('Query'),\n      expanded: true,\n      controlSetRows: [\n        ['groupby'],\n        ['metric'],\n        ['adhoc_filters'],\n        ['row_limit'],\n        [\n          {\n            name: 'sort_by_metric',\n            config: {\n              default: true,\n              type: 'CheckboxControl',\n              label: t('Sort by metric'),\n              description: t(\n                'Whether to sort results by the selected metric in descending order.',\n              ),\n            },\n          },\n        ],\n      ],\n    },\n    {\n      label: t('Chart Options'),\n      expanded: true,\n      controlSetRows: [\n        ['color_scheme'],\n        [\n          {\n            name: 'show_labels_threshold',\n            config: {\n              type: 'TextControl',\n              label: t('Percentage threshold'),\n              renderTrigger: true,\n              isFloat: true,\n              default: 5,\n              description: t(\n                'Minimum threshold in percentage points for showing labels.',\n              ),\n            },\n          },\n        ],\n        ...legendSection,\n        // eslint-disable-next-line react/jsx-key\n        [<ControlSubSectionHeader>{t('Labels')}</ControlSubSectionHeader>],\n        [\n          {\n            name: 'label_type',\n            config: {\n              type: 'SelectControl',\n              label: t('Label Type'),\n              default: labelType,\n              renderTrigger: true,\n              choices: [\n                ['key', t('Category Name')],\n                ['value', t('Value')],\n                ['percent', t('Percentage')],\n                ['key_value', t('Category and Value')],\n                ['key_percent', t('Category and Percentage')],\n                ['key_value_percent', t('Category, Value and Percentage')],\n              ],\n              description: t('What should be shown on the label?'),\n            },\n          },\n        ],\n        [\n          {\n            name: 'number_format',\n            config: {\n              type: 'SelectControl',\n              freeForm: true,\n              label: t('Number format'),\n              renderTrigger: true,\n              default: numberFormat,\n              choices: D3_FORMAT_OPTIONS,\n              description: `${D3_FORMAT_DOCS} ${D3_NUMBER_FORMAT_DESCRIPTION_VALUES_TEXT}`,\n              tokenSeparators: ['\\n', '\\t', ';'],\n            },\n          },\n        ],\n        [\n          {\n            name: 'date_format',\n            config: {\n              type: 'SelectControl',\n              freeForm: true,\n              label: t('Date format'),\n              renderTrigger: true,\n              choices: D3_TIME_FORMAT_OPTIONS,\n              default: 'smart_date',\n              description: D3_FORMAT_DOCS,\n            },\n          },\n        ],\n        [\n          {\n            name: 'show_labels',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Show Labels'),\n              renderTrigger: true,\n              default: showLabels,\n              description: t('Whether to display the labels.'),\n            },\n          },\n        ],\n        [\n          {\n            name: 'labels_outside',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Put labels outside'),\n              default: labelsOutside,\n              renderTrigger: true,\n              description: t('Put the labels outside of the pie?'),\n              visibility: ({ controls }: ControlPanelsContainerProps) =>\n                Boolean(controls?.show_labels?.value),\n            },\n          },\n        ],\n        [\n          {\n            name: 'label_line',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Label Line'),\n              default: labelLine,\n              renderTrigger: true,\n              description: t(\n                'Draw line from Pie to label when labels outside?',\n              ),\n              visibility: ({ controls }: ControlPanelsContainerProps) =>\n                Boolean(controls?.show_labels?.value),\n            },\n          },\n        ],\n        [\n          {\n            name: 'show_total',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Show Total'),\n              default: false,\n              renderTrigger: true,\n              description: t('Whether to display the aggregate count'),\n            },\n          },\n        ],\n        // eslint-disable-next-line react/jsx-key\n        [<ControlSubSectionHeader>{t('Pie shape')}</ControlSubSectionHeader>],\n        [\n          {\n            name: 'outerRadius',\n            config: {\n              type: 'SliderControl',\n              label: t('Outer Radius'),\n              renderTrigger: true,\n              min: 10,\n              max: 100,\n              step: 1,\n              default: outerRadius,\n              description: t('Outer edge of Pie chart'),\n            },\n          },\n        ],\n        [\n          {\n            name: 'donut',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Donut'),\n              default: donut,\n              renderTrigger: true,\n              description: t('Do you want a donut or a pie?'),\n            },\n          },\n        ],\n        [\n          {\n            name: 'innerRadius',\n            config: {\n              type: 'SliderControl',\n              label: t('Inner Radius'),\n              renderTrigger: true,\n              min: 0,\n              max: 100,\n              step: 1,\n              default: innerRadius,\n              description: t('Inner radius of donut hole'),\n              visibility: ({ controls }: ControlPanelsContainerProps) =>\n                Boolean(controls?.donut?.value),\n            },\n          },\n        ],\n      ],\n    },\n  ],\n  controlOverrides: {\n    series: {\n      validators: [validateNonEmpty],\n      clearable: false,\n    },\n    row_limit: {\n      default: 100,\n    },\n  },\n  formDataOverrides: formData => ({\n    ...formData,\n    metric: getStandardizedControls().shiftMetric(),\n    groupby: getStandardizedControls().popAllColumns(),\n    row_limit:\n      ensureIsInt(formData.row_limit, 100) >= 100 ? 100 : formData.row_limit,\n  }),\n};\n\nexport default config;\n"]},"metadata":{},"sourceType":"module"}