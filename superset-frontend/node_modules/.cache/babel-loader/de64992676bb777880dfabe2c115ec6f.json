{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { DatasourceType } from './types/Datasource';\nexport default class DatasourceKey {\n\n\n  constructor(key) {this.id = void 0;this.type = void 0;\n    const [idStr, typeStr] = key.split('__');\n    this.id = parseInt(idStr, 10);\n    this.type = DatasourceType.Table; // default to SqlaTable model\n    this.type = typeStr === 'query' ? DatasourceType.Query : this.type;\n  }\n  toString() {\n    return `${this.id}__${this.type}`;\n  }\n  toObject() {\n    return {\n      id: this.id,\n      type: this.type };\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(DatasourceKey, \"DatasourceKey\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/query/DatasourceKey.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAmBA,SAASA,cAAT,QAA+B,oBAA/B;AAEA,eAAc,MAAOC,aAAP,CAAoB;;;EAKhCC,YAAYC,GAAZ,EAAuB,MAJdC,EAIc,eAFdC,IAEc;IACrB,MAAM,CAACC,KAAD,EAAQC,OAAR,IAAmBJ,GAAG,CAACK,KAAJ,CAAU,IAAV,CAAzB;IACA,KAAKJ,EAAL,GAAUK,QAAQ,CAACH,KAAD,EAAQ,EAAR,CAAlB;IACA,KAAKD,IAAL,GAAYL,cAAc,CAACU,KAA3B,CAHqB,CAGa;IAClC,KAAKL,IAAL,GAAYE,OAAO,KAAK,OAAZ,GAAsBP,cAAc,CAACW,KAArC,GAA6C,KAAKN,IAA9D;EACD;EAEMO,QAAQ;IACb,OAAO,GAAG,KAAKR,EAAE,KAAK,KAAKC,IAAI,EAA/B;EACD;EAEMQ,QAAQ;IACb,OAAO;MACLT,EAAE,EAAE,KAAKA,EADJ;MAELC,IAAI,EAAE,KAAKA,IAFN,EAAP;;EAID,CArB+B;EAAA;IAAA,yB,iLAAbJ,a","names":["DatasourceType","DatasourceKey","constructor","key","id","type","idStr","typeStr","split","parseInt","Table","Query","toString","toObject"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/query/DatasourceKey.ts"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { DatasourceType } from './types/Datasource';\n\nexport default class DatasourceKey {\n  readonly id: number;\n\n  readonly type: DatasourceType;\n\n  constructor(key: string) {\n    const [idStr, typeStr] = key.split('__');\n    this.id = parseInt(idStr, 10);\n    this.type = DatasourceType.Table; // default to SqlaTable model\n    this.type = typeStr === 'query' ? DatasourceType.Query : this.type;\n  }\n\n  public toString() {\n    return `${this.id}__${this.type}`;\n  }\n\n  public toObject() {\n    return {\n      id: this.id,\n      type: this.type,\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}