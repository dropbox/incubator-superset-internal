{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport shortid from 'shortid';\nimport { t } from '@superset-ui/core';\nimport { areObjectsEqual } from 'src/reduxUtils';\nexport const generateFiltersSetId = () => `FILTERS_SET-${shortid.generate()}`;\nexport const APPLY_FILTERS_HINT = t('Please apply filter changes');\nexport const getFilterValueForDisplay = (value) => {\n  if (value === null || value === undefined) {\n    return '';\n  }\n  if (typeof value === 'string' || typeof value === 'number') {\n    return `${value}`;\n  }\n  if (Array.isArray(value)) {\n    return value.join(', ');\n  }\n  if (typeof value === 'object') {\n    return JSON.stringify(value);\n  }\n  return t('Unknown value');\n};\nexport const findExistingFilterSet = (_ref) => {let { filterSetFilterValues, dataMaskSelected } = _ref;return filterSetFilterValues.find((_ref2) => {let { dataMask: dataMaskFromFilterSet = {} } = _ref2;\n    const dataMaskSelectedEntries = Object.entries(dataMaskSelected);\n    return dataMaskSelectedEntries.every((_ref3) => {var _dataMaskFromFilterSe;let [id, filterFromSelectedFilters] = _ref3;\n      const isEqual = areObjectsEqual(filterFromSelectedFilters.filterState, dataMaskFromFilterSet == null ? void 0 : (_dataMaskFromFilterSe = dataMaskFromFilterSet[id]) == null ? void 0 : _dataMaskFromFilterSe.filterState, { ignoreUndefined: true, ignoreNull: true });\n      const hasSamePropsNumber = dataMaskSelectedEntries.length ===\n      Object.keys(dataMaskFromFilterSet != null ? dataMaskFromFilterSet : {}).length;\n      return isEqual && hasSamePropsNumber;\n    });\n  });};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAmBA,OAAOA,OAAP,MAAoB,SAApB;AACA,SAAmCC,CAAnC,QAA4C,mBAA5C;AACA,SAASC,eAAT,QAAgC,gBAAhC;AAEA,OAAO,MAAMC,oBAAoB,GAAG,MAAM,eAAeH,OAAO,CAACI,QAAR,EAAkB,EAApE;AAEP,OAAO,MAAMC,kBAAkB,GAAGJ,CAAC,CAAC,6BAAD,CAA5B;AAEP,OAAO,MAAMK,wBAAwB,GAAG,CACtCC,KADsC,KAE5B;EACV,IAAIA,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKC,SAAhC,EAA2C;IACzC,OAAO,EAAP;EACD;EACD,IAAI,OAAOD,KAAP,KAAiB,QAAjB,IAA6B,OAAOA,KAAP,KAAiB,QAAlD,EAA4D;IAC1D,OAAO,GAAGA,KAAK,EAAf;EACD;EACD,IAAIE,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAJ,EAA0B;IACxB,OAAOA,KAAK,CAACI,IAAN,CAAW,IAAX,CAAP;EACD;EACD,IAAI,OAAOJ,KAAP,KAAiB,QAArB,EAA+B;IAC7B,OAAOK,IAAI,CAACC,SAAL,CAAeN,KAAf,CAAP;EACD;EACD,OAAON,CAAC,CAAC,eAAD,CAAR;AACD,CAhBM;AAkBP,OAAO,MAAMa,qBAAqB,GAAG,eAAC,EACpCC,qBADoC,EAEpCC,gBAFoC,EAAD,eAOnCD,qBAAqB,CAACE,IAAtB,CAA2B,WAA6C,KAA5C,EAAEC,QAAQ,EAAEC,qBAAqB,GAAG,EAApC,EAA4C;IACtE,MAAMC,uBAAuB,GAAGC,MAAM,CAACC,OAAP,CAAeN,gBAAf,CAAhC;IACA,OAAOI,uBAAuB,CAACG,KAAxB,CAA8B,WAAoC,+BAAnC,CAACC,EAAD,EAAKC,yBAAL,CAAmC;MACvE,MAAMC,OAAO,GAAGxB,eAAe,CAC7BuB,yBAAyB,CAACE,WADG,EAE7BR,qBAF6B,6CAE7BA,qBAAqB,CAAGK,EAAH,CAFQ,qBAE7B,sBAA6BG,WAFA,EAG7B,EAAEC,eAAe,EAAE,IAAnB,EAAyBC,UAAU,EAAE,IAArC,EAH6B,CAA/B;MAKA,MAAMC,kBAAkB,GACtBV,uBAAuB,CAACW,MAAxB;MACAV,MAAM,CAACW,IAAP,CAAYb,qBAAZ,WAAYA,qBAAZ,GAAqC,EAArC,EAAyCY,MAF3C;MAGA,OAAOL,OAAO,IAAII,kBAAlB;IACD,CAVM,CAAP;EAWD,CAbD,CAPmC,EAA9B","names":["shortid","t","areObjectsEqual","generateFiltersSetId","generate","APPLY_FILTERS_HINT","getFilterValueForDisplay","value","undefined","Array","isArray","join","JSON","stringify","findExistingFilterSet","filterSetFilterValues","dataMaskSelected","find","dataMask","dataMaskFromFilterSet","dataMaskSelectedEntries","Object","entries","every","id","filterFromSelectedFilters","isEqual","filterState","ignoreUndefined","ignoreNull","hasSamePropsNumber","length","keys"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/components/nativeFilters/FilterBar/FilterSets/utils/index.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport shortid from 'shortid';\nimport { DataMaskState, FilterSet, t } from '@superset-ui/core';\nimport { areObjectsEqual } from 'src/reduxUtils';\n\nexport const generateFiltersSetId = () => `FILTERS_SET-${shortid.generate()}`;\n\nexport const APPLY_FILTERS_HINT = t('Please apply filter changes');\n\nexport const getFilterValueForDisplay = (\n  value?: string[] | null | string | number | object,\n): string => {\n  if (value === null || value === undefined) {\n    return '';\n  }\n  if (typeof value === 'string' || typeof value === 'number') {\n    return `${value}`;\n  }\n  if (Array.isArray(value)) {\n    return value.join(', ');\n  }\n  if (typeof value === 'object') {\n    return JSON.stringify(value);\n  }\n  return t('Unknown value');\n};\n\nexport const findExistingFilterSet = ({\n  filterSetFilterValues,\n  dataMaskSelected,\n}: {\n  filterSetFilterValues: FilterSet[];\n  dataMaskSelected: DataMaskState;\n}) =>\n  filterSetFilterValues.find(({ dataMask: dataMaskFromFilterSet = {} }) => {\n    const dataMaskSelectedEntries = Object.entries(dataMaskSelected);\n    return dataMaskSelectedEntries.every(([id, filterFromSelectedFilters]) => {\n      const isEqual = areObjectsEqual(\n        filterFromSelectedFilters.filterState,\n        dataMaskFromFilterSet?.[id]?.filterState,\n        { ignoreUndefined: true, ignoreNull: true },\n      );\n      const hasSamePropsNumber =\n        dataMaskSelectedEntries.length ===\n        Object.keys(dataMaskFromFilterSet ?? {}).length;\n      return isEqual && hasSamePropsNumber;\n    });\n  });\n"]},"metadata":{},"sourceType":"module"}