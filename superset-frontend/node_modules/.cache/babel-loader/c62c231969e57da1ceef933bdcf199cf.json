{"ast":null,"code":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport getBBoxCeil from './svg/getBBoxCeil';\nimport { hiddenSvgFactory, textFactory } from './svg/factories';\nimport updateTextNode from './svg/updateTextNode';\n/**\n * get dimensions of multiple texts with same style\n * @param input\n * @param defaultDimension\n */\nexport default function getMultipleTextDimensions(input, defaultDimension) {\n  const { texts, className, style, container } = input;\n  const cache = new Map();\n  // for empty string\n  cache.set('', { height: 0, width: 0 });\n  let textNode;\n  let svgNode;\n  const dimensions = texts.map((text) => {\n    // Check if this string has been computed already\n    if (cache.has(text)) {\n      return cache.get(text);\n    }\n    // Lazy creation of text and svg nodes\n    if (!textNode) {\n      svgNode = hiddenSvgFactory.createInContainer(container);\n      textNode = textFactory.createInContainer(svgNode);\n    }\n    // Update text and get dimension\n    updateTextNode(textNode, { className, style, text });\n    const dimension = getBBoxCeil(textNode, defaultDimension);\n    // Store result to cache\n    cache.set(text, dimension);\n    return dimension;\n  });\n  // Remove svg node, if any\n  if (svgNode && textNode) {\n    // The nodes are added to the DOM briefly only to make getBBox works.\n    // (If not added to DOM getBBox will always return 0x0.)\n    // After that the svg nodes are not needed.\n    // We delay its removal in case there are subsequent calls to this function\n    // that can reuse the svg nodes.\n    // Experiments have shown that reusing existing nodes\n    // instead of deleting and adding new ones can save lot of time.\n    setTimeout(() => {\n      textFactory.removeFromContainer(svgNode);\n      hiddenSvgFactory.removeFromContainer(container);\n    }, 500);\n  }\n  return dimensions;\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAoBA,OAAOA,WAAP,MAAwB,mBAAxB;AACA,SAASC,gBAAT,EAA2BC,WAA3B,QAA8C,iBAA9C;AACA,OAAOC,cAAP,MAA2B,sBAA3B;AAEA;;;;;AAKA,eAAc,SAAUC,yBAAV,CACZC,KADY,EAOZC,gBAPY,EAOgB;EAE5B,MAAM,EAAEC,KAAF,EAASC,SAAT,EAAoBC,KAApB,EAA2BC,SAA3B,KAAyCL,KAA/C;EAEA,MAAMM,KAAK,GAAG,IAAIC,GAAJ,EAAd;EACA;EACAD,KAAK,CAACE,GAAN,CAAU,EAAV,EAAc,EAAEC,MAAM,EAAE,CAAV,EAAaC,KAAK,EAAE,CAApB,EAAd;EACA,IAAIC,QAAJ;EACA,IAAIC,OAAJ;EAEA,MAAMC,UAAU,GAAGX,KAAK,CAACY,GAAN,CAAU,KAAI,KAAG;IAClC;IACA,IAAIR,KAAK,CAACS,GAAN,CAAUC,IAAV,CAAJ,EAAqB;MACnB,OAAOV,KAAK,CAACW,GAAN,CAAUD,IAAV,CAAP;IACD;IAED;IACA,IAAI,CAACL,QAAL,EAAe;MACbC,OAAO,GAAGhB,gBAAgB,CAACsB,iBAAjB,CAAmCb,SAAnC,CAAV;MACAM,QAAQ,GAAGd,WAAW,CAACqB,iBAAZ,CAA8BN,OAA9B,CAAX;IACD;IAED;IACAd,cAAc,CAACa,QAAD,EAAW,EAAER,SAAF,EAAaC,KAAb,EAAoBY,IAApB,EAAX,CAAd;IACA,MAAMG,SAAS,GAAGxB,WAAW,CAACgB,QAAD,EAAWV,gBAAX,CAA7B;IACA;IACAK,KAAK,CAACE,GAAN,CAAUQ,IAAV,EAAgBG,SAAhB;IAEA,OAAOA,SAAP;EACD,CAnBkB,CAAnB;EAqBA;EACA,IAAIP,OAAO,IAAID,QAAf,EAAyB;IACvB;IACA;IACA;IACA;IACA;IACA;IACA;IACAS,UAAU,CAAC,MAAK;MACdvB,WAAW,CAACwB,mBAAZ,CAAgCT,OAAhC;MACAhB,gBAAgB,CAACyB,mBAAjB,CAAqChB,SAArC;IACD,CAHS,EAGP,GAHO,CAAV;EAID;EAED,OAAOQ,UAAP;AACD","names":["getBBoxCeil","hiddenSvgFactory","textFactory","updateTextNode","getMultipleTextDimensions","input","defaultDimension","texts","className","style","container","cache","Map","set","height","width","textNode","svgNode","dimensions","map","has","text","get","createInContainer","dimension","setTimeout","removeFromContainer"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/packages/superset-ui-core/src/dimension/getMultipleTextDimensions.ts"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { TextStyle, Dimension } from './types';\nimport getBBoxCeil from './svg/getBBoxCeil';\nimport { hiddenSvgFactory, textFactory } from './svg/factories';\nimport updateTextNode from './svg/updateTextNode';\n\n/**\n * get dimensions of multiple texts with same style\n * @param input\n * @param defaultDimension\n */\nexport default function getMultipleTextDimensions(\n  input: {\n    className?: string;\n    container?: HTMLElement;\n    style?: TextStyle;\n    texts: string[];\n  },\n  defaultDimension?: Dimension,\n): Dimension[] {\n  const { texts, className, style, container } = input;\n\n  const cache = new Map<string, Dimension>();\n  // for empty string\n  cache.set('', { height: 0, width: 0 });\n  let textNode: SVGTextElement | undefined;\n  let svgNode: SVGSVGElement | undefined;\n\n  const dimensions = texts.map(text => {\n    // Check if this string has been computed already\n    if (cache.has(text)) {\n      return cache.get(text) as Dimension;\n    }\n\n    // Lazy creation of text and svg nodes\n    if (!textNode) {\n      svgNode = hiddenSvgFactory.createInContainer(container);\n      textNode = textFactory.createInContainer(svgNode);\n    }\n\n    // Update text and get dimension\n    updateTextNode(textNode, { className, style, text });\n    const dimension = getBBoxCeil(textNode, defaultDimension);\n    // Store result to cache\n    cache.set(text, dimension);\n\n    return dimension;\n  });\n\n  // Remove svg node, if any\n  if (svgNode && textNode) {\n    // The nodes are added to the DOM briefly only to make getBBox works.\n    // (If not added to DOM getBBox will always return 0x0.)\n    // After that the svg nodes are not needed.\n    // We delay its removal in case there are subsequent calls to this function\n    // that can reuse the svg nodes.\n    // Experiments have shown that reusing existing nodes\n    // instead of deleting and adding new ones can save lot of time.\n    setTimeout(() => {\n      textFactory.removeFromContainer(svgNode);\n      hiddenSvgFactory.removeFromContainer(container);\n    }, 500);\n  }\n\n  return dimensions;\n}\n"]},"metadata":{},"sourceType":"module"}