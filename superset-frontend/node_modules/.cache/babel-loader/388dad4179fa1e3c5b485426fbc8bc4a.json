{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport AntTable from 'antd/lib/table';\nimport classNames from 'classnames';\nimport { useResizeDetector } from 'react-resize-detector';\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\nimport { VariableSizeGrid as Grid } from 'react-window';\nimport { useTheme, styled, safeHtmlSpan } from '@superset-ui/core';\nimport { TableSize, ETableAction } from './index';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst StyledCell = styled('div')((_ref) => {let { theme, height } = _ref;return `\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding-left: ${theme.gridUnit * 2}px;\n  padding-right: ${theme.gridUnit}px;\n  border-bottom: 1px solid ${theme.colors.grayscale.light3};\n  transition: background 0.3s;\n  line-height: ${height}px;\n  box-sizing: border-box;\n`;});\nconst StyledTable = styled(AntTable)((_ref2) => {let { theme } = _ref2;return `\n    th.ant-table-cell {\n      font-weight: ${theme.typography.weights.bold};\n      color: ${theme.colors.grayscale.dark1};\n      user-select: none;\n      white-space: nowrap;\n      overflow: hidden;\n      text-overflow: ellipsis;\n    }\n\n    .ant-pagination-item-active {\n      border-color: ${theme.colors.primary.base};\n      }\n    }\n    .ant-table.ant-table-small {\n      font-size: ${theme.typography.sizes.s}px;\n    }\n`;});\nconst SMALL = 39;\nconst MIDDLE = 47;\nconst VirtualTable = (props) => {var _columns$map;\n  const { columns, pagination, onChange, height, scroll, size, allowHTML = false } = props;\n  const [tableWidth, setTableWidth] = useState(0);\n  const onResize = useCallback((width) => {\n    setTableWidth(width);\n  }, []);\n  const { ref } = useResizeDetector({ onResize });\n  const theme = useTheme();\n  // If a column definition has no width, react-window will use this as the default column width\n  const DEFAULT_COL_WIDTH = (theme == null ? void 0 : theme.gridUnit) * 37 || 150;\n  const widthColumnCount = columns.filter((_ref3) => {let { width } = _ref3;return !width;}).length;\n  let staticColWidthTotal = 0;\n  columns == null ? void 0 : columns.forEach((column) => {\n    if (column.width) {\n      staticColWidthTotal += column.width;\n    }\n  });\n  let totalWidth = 0;\n  const defaultWidth = Math.max(Math.floor((tableWidth - staticColWidthTotal) / widthColumnCount), 50);\n  const mergedColumns = (_columns$map = columns == null ? void 0 : columns.map == null ? void 0 : columns.map((column) => {\n    const modifiedColumn = { ...column };\n    if (!column.width) {\n      modifiedColumn.width = defaultWidth;\n    }\n    totalWidth += modifiedColumn.width;\n    return modifiedColumn;\n  })) != null ? _columns$map : [];\n  /*\n   * There are cases where a user could set the width of each column and the total width is less than width of\n   * the table.  In this case we will stretch the last column to use the extra space\n   */\n  if (totalWidth < tableWidth) {\n    const lastColumn = mergedColumns[mergedColumns.length - 1];\n    lastColumn.width =\n    lastColumn.width + Math.floor(tableWidth - totalWidth);\n  }\n  const gridRef = useRef();\n  const [connectObject] = useState(() => {\n    const obj = {};\n    Object.defineProperty(obj, 'scrollLeft', {\n      get: () => {\n        if (gridRef.current) {var _gridRef$current, _gridRef$current$stat;\n          return (_gridRef$current = gridRef.current) == null ? void 0 : (_gridRef$current$stat = _gridRef$current.state) == null ? void 0 : _gridRef$current$stat.scrollLeft;\n        }\n        return null;\n      },\n      set: (scrollLeft) => {\n        if (gridRef.current) {\n          gridRef.current.scrollTo({ scrollLeft });\n        }\n      } });\n\n    return obj;\n  });\n  const resetVirtualGrid = () => {var _gridRef$current2;\n    (_gridRef$current2 = gridRef.current) == null ? void 0 : _gridRef$current2.resetAfterIndices({\n      columnIndex: 0,\n      shouldForceUpdate: true });\n\n  };\n  useEffect(() => resetVirtualGrid, [tableWidth, columns, size]);\n  /*\n   * antd Table has a runtime error when it tries to fire the onChange event triggered from a pageChange\n   * when the table body is overridden with the virtualized table.  This function capture the page change event\n   * from within the pagination controls and proxies the onChange event payload\n   */\n  const onPageChange = (page, size) => {var _gridRef$current3;\n    /**\n     * This resets vertical scroll position to 0 (top) when page changes\n     * We intentionally leave horizontal scroll where it was so user can focus on\n     * specific range of columns as they page through data\n     */\n    (_gridRef$current3 = gridRef.current) == null ? void 0 : _gridRef$current3.scrollTo == null ? void 0 : _gridRef$current3.scrollTo({ scrollTop: 0 });\n    onChange == null ? void 0 : onChange({\n      ...pagination,\n      current: page,\n      pageSize: size },\n    {}, {}, {\n      action: ETableAction.PAGINATE,\n      currentDataSource: [] });\n\n  };\n  const renderVirtualList = (rawData, _ref4) => {let { ref, onScroll } = _ref4;\n    // eslint-disable-next-line no-param-reassign\n    ref.current = connectObject;\n    const cellSize = size === TableSize.MIDDLE ? MIDDLE : SMALL;\n    return ___EmotionJSX(Grid, { ref: gridRef, className: \"virtual-grid\", columnCount: mergedColumns.length, columnWidth: (index) => {\n        const { width = DEFAULT_COL_WIDTH } = mergedColumns[index];\n        return width;\n      }, height: height || scroll.y, rowCount: rawData.length, rowHeight: () => cellSize, width: tableWidth, onScroll: (_ref5) => {let { scrollLeft } = _ref5;\n        onScroll({ scrollLeft });\n      } },\n    (_ref6) => {var _mergedColumns$column, _mergedColumns$column2;let { columnIndex, rowIndex, style } = _ref6;\n      const data = rawData == null ? void 0 : rawData[rowIndex];\n      // Set default content\n      let content = data == null ? void 0 : data[mergedColumns == null ? void 0 : (_mergedColumns$column = mergedColumns[columnIndex]) == null ? void 0 : _mergedColumns$column.dataIndex];\n      // Check if the column has a render function\n      const render = (_mergedColumns$column2 = mergedColumns[columnIndex]) == null ? void 0 : _mergedColumns$column2.render;\n      if (typeof render === 'function') {\n        // Use render function to generate formatted content using column's render function\n        content = render(content, data, rowIndex);\n      }\n      if (allowHTML && typeof content === 'string') {\n        content = safeHtmlSpan(content);\n      }\n      return ___EmotionJSX(StyledCell, { className: classNames('virtual-table-cell', {\n          'virtual-table-cell-last': columnIndex === mergedColumns.length - 1 }),\n        style: style, title: typeof content === 'string' ? content : undefined, theme: theme, height: cellSize },\n      content);\n\n    });\n\n  };\n  const modifiedPagination = {\n    ...pagination,\n    onChange: onPageChange };\n\n  return ___EmotionJSX(\"div\", { ref: ref },\n  ___EmotionJSX(StyledTable, _extends({}, props, { sticky: false, className: \"virtual-table\", columns: mergedColumns, components: {\n      body: renderVirtualList },\n    pagination: pagination ? modifiedPagination : false })));\n\n};\nexport default VirtualTable;","map":{"version":3,"mappings":"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","names":["AntTable","classNames","useResizeDetector","React","useEffect","useRef","useState","useCallback","VariableSizeGrid","Grid","useTheme","styled","safeHtmlSpan","TableSize","ETableAction","StyledCell","theme","height","gridUnit","colors","grayscale","light3","StyledTable","typography","weights","bold","dark1","primary","base","sizes","s","SMALL","MIDDLE","VirtualTable","props","columns","pagination","onChange","scroll","size","allowHTML","tableWidth","setTableWidth","onResize","width","ref","DEFAULT_COL_WIDTH","widthColumnCount","filter","length","staticColWidthTotal","forEach","column","totalWidth","defaultWidth","Math","max","floor","mergedColumns","map","modifiedColumn","lastColumn","gridRef","connectObject","obj","Object","defineProperty","get","current","state","scrollLeft","set","scrollTo","resetVirtualGrid","resetAfterIndices","columnIndex","shouldForceUpdate","onPageChange","page","scrollTop","pageSize","action","PAGINATE","currentDataSource","renderVirtualList","rawData","onScroll","cellSize","index","y","rowIndex","style","data","content","dataIndex","render","undefined","modifiedPagination","body"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/components/Table/VirtualTable.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport AntTable, {\n  TablePaginationConfig,\n  TableProps as AntTableProps,\n} from 'antd/lib/table';\nimport classNames from 'classnames';\nimport { useResizeDetector } from 'react-resize-detector';\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\nimport { VariableSizeGrid as Grid } from 'react-window';\nimport { useTheme, styled, safeHtmlSpan } from '@superset-ui/core';\n\nimport { TableSize, ETableAction } from './index';\n\ninterface VirtualTableProps<RecordType> extends AntTableProps<RecordType> {\n  height?: number;\n  allowHTML?: boolean;\n}\n\nconst StyledCell = styled('div')<{ height?: number }>(\n  ({ theme, height }) => `\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding-left: ${theme.gridUnit * 2}px;\n  padding-right: ${theme.gridUnit}px;\n  border-bottom: 1px solid ${theme.colors.grayscale.light3};\n  transition: background 0.3s;\n  line-height: ${height}px;\n  box-sizing: border-box;\n`,\n);\n\nconst StyledTable = styled(AntTable)<{ height?: number }>(\n  ({ theme }) => `\n    th.ant-table-cell {\n      font-weight: ${theme.typography.weights.bold};\n      color: ${theme.colors.grayscale.dark1};\n      user-select: none;\n      white-space: nowrap;\n      overflow: hidden;\n      text-overflow: ellipsis;\n    }\n\n    .ant-pagination-item-active {\n      border-color: ${theme.colors.primary.base};\n      }\n    }\n    .ant-table.ant-table-small {\n      font-size: ${theme.typography.sizes.s}px;\n    }\n`,\n);\n\nconst SMALL = 39;\nconst MIDDLE = 47;\n\nconst VirtualTable = <RecordType extends object>(\n  props: VirtualTableProps<RecordType>,\n) => {\n  const {\n    columns,\n    pagination,\n    onChange,\n    height,\n    scroll,\n    size,\n    allowHTML = false,\n  } = props;\n  const [tableWidth, setTableWidth] = useState<number>(0);\n  const onResize = useCallback((width: number) => {\n    setTableWidth(width);\n  }, []);\n  const { ref } = useResizeDetector({ onResize });\n  const theme = useTheme();\n\n  // If a column definition has no width, react-window will use this as the default column width\n  const DEFAULT_COL_WIDTH = theme?.gridUnit * 37 || 150;\n  const widthColumnCount = columns!.filter(({ width }) => !width).length;\n  let staticColWidthTotal = 0;\n  columns?.forEach(column => {\n    if (column.width) {\n      staticColWidthTotal += column.width as number;\n    }\n  });\n\n  let totalWidth = 0;\n  const defaultWidth = Math.max(\n    Math.floor((tableWidth - staticColWidthTotal) / widthColumnCount),\n    50,\n  );\n\n  const mergedColumns =\n    columns?.map?.(column => {\n      const modifiedColumn = { ...column };\n      if (!column.width) {\n        modifiedColumn.width = defaultWidth;\n      }\n      totalWidth += modifiedColumn.width as number;\n      return modifiedColumn;\n    }) ?? [];\n\n  /*\n   * There are cases where a user could set the width of each column and the total width is less than width of\n   * the table.  In this case we will stretch the last column to use the extra space\n   */\n  if (totalWidth < tableWidth) {\n    const lastColumn = mergedColumns[mergedColumns.length - 1];\n    lastColumn.width =\n      (lastColumn.width as number) + Math.floor(tableWidth - totalWidth);\n  }\n\n  const gridRef = useRef<any>();\n  const [connectObject] = useState<any>(() => {\n    const obj = {};\n    Object.defineProperty(obj, 'scrollLeft', {\n      get: () => {\n        if (gridRef.current) {\n          return gridRef.current?.state?.scrollLeft;\n        }\n        return null;\n      },\n      set: (scrollLeft: number) => {\n        if (gridRef.current) {\n          gridRef.current.scrollTo({ scrollLeft });\n        }\n      },\n    });\n\n    return obj;\n  });\n\n  const resetVirtualGrid = () => {\n    gridRef.current?.resetAfterIndices({\n      columnIndex: 0,\n      shouldForceUpdate: true,\n    });\n  };\n\n  useEffect(() => resetVirtualGrid, [tableWidth, columns, size]);\n\n  /*\n   * antd Table has a runtime error when it tries to fire the onChange event triggered from a pageChange\n   * when the table body is overridden with the virtualized table.  This function capture the page change event\n   * from within the pagination controls and proxies the onChange event payload\n   */\n  const onPageChange = (page: number, size: number) => {\n    /**\n     * This resets vertical scroll position to 0 (top) when page changes\n     * We intentionally leave horizontal scroll where it was so user can focus on\n     * specific range of columns as they page through data\n     */\n    gridRef.current?.scrollTo?.({ scrollTop: 0 });\n\n    onChange?.(\n      {\n        ...pagination,\n        current: page,\n        pageSize: size,\n      } as TablePaginationConfig,\n      {},\n      {},\n      {\n        action: ETableAction.PAGINATE,\n        currentDataSource: [],\n      },\n    );\n  };\n\n  const renderVirtualList = (rawData: object[], { ref, onScroll }: any) => {\n    // eslint-disable-next-line no-param-reassign\n    ref.current = connectObject;\n    const cellSize = size === TableSize.MIDDLE ? MIDDLE : SMALL;\n    return (\n      <Grid\n        ref={gridRef}\n        className=\"virtual-grid\"\n        columnCount={mergedColumns.length}\n        columnWidth={(index: number) => {\n          const { width = DEFAULT_COL_WIDTH } = mergedColumns[index];\n          return width as number;\n        }}\n        height={height || (scroll!.y as number)}\n        rowCount={rawData.length}\n        rowHeight={() => cellSize}\n        width={tableWidth}\n        onScroll={({ scrollLeft }: { scrollLeft: number }) => {\n          onScroll({ scrollLeft });\n        }}\n      >\n        {({\n          columnIndex,\n          rowIndex,\n          style,\n        }: {\n          columnIndex: number;\n          rowIndex: number;\n          style: React.CSSProperties;\n        }) => {\n          const data: any = rawData?.[rowIndex];\n          // Set default content\n          let content =\n            data?.[(mergedColumns as any)?.[columnIndex]?.dataIndex];\n          // Check if the column has a render function\n          const render = mergedColumns[columnIndex]?.render;\n          if (typeof render === 'function') {\n            // Use render function to generate formatted content using column's render function\n            content = render(content, data, rowIndex);\n          }\n\n          if (allowHTML && typeof content === 'string') {\n            content = safeHtmlSpan(content);\n          }\n\n          return (\n            <StyledCell\n              className={classNames('virtual-table-cell', {\n                'virtual-table-cell-last':\n                  columnIndex === mergedColumns.length - 1,\n              })}\n              style={style}\n              title={typeof content === 'string' ? content : undefined}\n              theme={theme}\n              height={cellSize}\n            >\n              {content}\n            </StyledCell>\n          );\n        }}\n      </Grid>\n    );\n  };\n\n  const modifiedPagination = {\n    ...pagination,\n    onChange: onPageChange,\n  };\n\n  return (\n    <div ref={ref}>\n      <StyledTable\n        {...props}\n        sticky={false}\n        className=\"virtual-table\"\n        columns={mergedColumns}\n        components={{\n          body: renderVirtualList,\n        }}\n        pagination={pagination ? modifiedPagination : false}\n      />\n    </div>\n  );\n};\n\nexport default VirtualTable;\n"]},"metadata":{},"sourceType":"module"}