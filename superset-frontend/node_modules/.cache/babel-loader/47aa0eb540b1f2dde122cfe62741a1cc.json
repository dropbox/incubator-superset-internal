{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { isSafari } from './common';\n// Use the new Clipboard API if the browser supports it\nconst copyTextWithClipboardApi = async (getText) => {\n  // Safari (WebKit) does not support delayed generation of clipboard.\n  // This means that writing to the clipboard, from the moment the user\n  // interacts with the app, must be instantaneous.\n  // However, neither writeText nor write accepts a Promise, so\n  // we need to create a ClipboardItem that accepts said Promise to\n  // delay the text generation, as needed.\n  // Source: https://bugs.webkit.org/show_bug.cgi?id=222262P\n  if (isSafari()) {\n    try {\n      const clipboardItem = new ClipboardItem({\n        'text/plain': getText() });\n\n      await navigator.clipboard.write([clipboardItem]);\n    }\n    catch {\n      // Fallback to default clipboard API implementation\n      const text = await getText();\n      await navigator.clipboard.writeText(text);\n    }\n  } else\n  {\n    // For Blink, the above method won't work, but we can use the\n    // default (intended) API, since the delayed generation of the\n    // clipboard is now supported.\n    // Source: https://bugs.chromium.org/p/chromium/issues/detail?id=1014310\n    const text = await getText();\n    await navigator.clipboard.writeText(text);\n  }\n};\nconst copyTextToClipboard = (getText) => copyTextWithClipboardApi(getText)\n// If the Clipboard API is not supported, fallback to the older method.\n.catch(() => getText().then((text) => new Promise((resolve, reject) => {\n  const selection = document.getSelection();\n  if (selection) {\n    selection.removeAllRanges();\n    const range = document.createRange();\n    const span = document.createElement('span');\n    span.textContent = text;\n    span.style.position = 'fixed';\n    span.style.top = '0';\n    span.style.clip = 'rect(0, 0, 0, 0)';\n    span.style.whiteSpace = 'pre';\n    document.body.appendChild(span);\n    range.selectNode(span);\n    selection.addRange(range);\n    try {\n      if (!document.execCommand('copy')) {\n        reject();\n      }\n    }\n    catch (err) {\n      reject();\n    }\n    document.body.removeChild(span);\n    if (selection.removeRange) {\n      selection.removeRange(range);\n    } else\n    {\n      selection.removeAllRanges();\n    }\n  }\n  resolve();\n})));\nexport default copyTextToClipboard;","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAmBA,SAASA,QAAT,QAAyB,UAAzB;AAEA;AACA,MAAMC,wBAAwB,GAAG,OAAOC,OAAP,KAAyC;EACxE;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAIF,QAAQ,EAAZ,EAAgB;IACd,IAAI;MACF,MAAMG,aAAa,GAAG,IAAIC,aAAJ,CAAkB;QACtC,cAAcF,OAAO,EADiB,EAAlB,CAAtB;;MAGA,MAAMG,SAAS,CAACC,SAAV,CAAoBC,KAApB,CAA0B,CAACJ,aAAD,CAA1B,CAAN;IACD;IAAC,MAAM;MACN;MACA,MAAMK,IAAI,GAAG,MAAMN,OAAO,EAA1B;MACA,MAAMG,SAAS,CAACC,SAAV,CAAoBG,SAApB,CAA8BD,IAA9B,CAAN;IACD;EACF,CAXD;EAWO;IACL;IACA;IACA;IACA;IACA,MAAMA,IAAI,GAAG,MAAMN,OAAO,EAA1B;IACA,MAAMG,SAAS,CAACC,SAAV,CAAoBG,SAApB,CAA8BD,IAA9B,CAAN;EACD;AACF,CA3BD;AA6BA,MAAME,mBAAmB,GAAG,CAACR,OAAD,KAC1BD,wBAAwB,CAACC,OAAD;AACtB;AADF,CAEGS,KAFH,CAES,MACLT,OAAO,GAAGU,IAAV,CACE,KAAI,KACF,IAAIC,OAAJ,CAAkB,CAACC,OAAD,EAAUC,MAAV,KAAoB;EACpC,MAAMC,SAAS,GAAqBC,QAAQ,CAACC,YAAT,EAApC;EACA,IAAIF,SAAJ,EAAe;IACbA,SAAS,CAACG,eAAV;IACA,MAAMC,KAAK,GAAGH,QAAQ,CAACI,WAAT,EAAd;IACA,MAAMC,IAAI,GAAGL,QAAQ,CAACM,aAAT,CAAuB,MAAvB,CAAb;IACAD,IAAI,CAACE,WAAL,GAAmBhB,IAAnB;IACAc,IAAI,CAACG,KAAL,CAAWC,QAAX,GAAsB,OAAtB;IACAJ,IAAI,CAACG,KAAL,CAAWE,GAAX,GAAiB,GAAjB;IACAL,IAAI,CAACG,KAAL,CAAWG,IAAX,GAAkB,kBAAlB;IACAN,IAAI,CAACG,KAAL,CAAWI,UAAX,GAAwB,KAAxB;IAEAZ,QAAQ,CAACa,IAAT,CAAcC,WAAd,CAA0BT,IAA1B;IACAF,KAAK,CAACY,UAAN,CAAiBV,IAAjB;IACAN,SAAS,CAACiB,QAAV,CAAmBb,KAAnB;IAEA,IAAI;MACF,IAAI,CAACH,QAAQ,CAACiB,WAAT,CAAqB,MAArB,CAAL,EAAmC;QACjCnB,MAAM;MACP;IACF;IAAC,OAAOoB,GAAP,EAAY;MACZpB,MAAM;IACP;IAEDE,QAAQ,CAACa,IAAT,CAAcM,WAAd,CAA0Bd,IAA1B;IACA,IAAIN,SAAS,CAACqB,WAAd,EAA2B;MACzBrB,SAAS,CAACqB,WAAV,CAAsBjB,KAAtB;IACD,CAFD;IAEO;MACLJ,SAAS,CAACG,eAAV;IACD;EACF;EAEDL,OAAO;AACR,CAjCD,CAFJ,CAHJ,CADF;AA2CA,eAAeJ,mBAAf","names":["isSafari","copyTextWithClipboardApi","getText","clipboardItem","ClipboardItem","navigator","clipboard","write","text","writeText","copyTextToClipboard","catch","then","Promise","resolve","reject","selection","document","getSelection","removeAllRanges","range","createRange","span","createElement","textContent","style","position","top","clip","whiteSpace","body","appendChild","selectNode","addRange","execCommand","err","removeChild","removeRange"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/utils/copy.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { isSafari } from './common';\n\n// Use the new Clipboard API if the browser supports it\nconst copyTextWithClipboardApi = async (getText: () => Promise<string>) => {\n  // Safari (WebKit) does not support delayed generation of clipboard.\n  // This means that writing to the clipboard, from the moment the user\n  // interacts with the app, must be instantaneous.\n  // However, neither writeText nor write accepts a Promise, so\n  // we need to create a ClipboardItem that accepts said Promise to\n  // delay the text generation, as needed.\n  // Source: https://bugs.webkit.org/show_bug.cgi?id=222262P\n  if (isSafari()) {\n    try {\n      const clipboardItem = new ClipboardItem({\n        'text/plain': getText(),\n      });\n      await navigator.clipboard.write([clipboardItem]);\n    } catch {\n      // Fallback to default clipboard API implementation\n      const text = await getText();\n      await navigator.clipboard.writeText(text);\n    }\n  } else {\n    // For Blink, the above method won't work, but we can use the\n    // default (intended) API, since the delayed generation of the\n    // clipboard is now supported.\n    // Source: https://bugs.chromium.org/p/chromium/issues/detail?id=1014310\n    const text = await getText();\n    await navigator.clipboard.writeText(text);\n  }\n};\n\nconst copyTextToClipboard = (getText: () => Promise<string>) =>\n  copyTextWithClipboardApi(getText)\n    // If the Clipboard API is not supported, fallback to the older method.\n    .catch(() =>\n      getText().then(\n        text =>\n          new Promise<void>((resolve, reject) => {\n            const selection: Selection | null = document.getSelection();\n            if (selection) {\n              selection.removeAllRanges();\n              const range = document.createRange();\n              const span = document.createElement('span');\n              span.textContent = text;\n              span.style.position = 'fixed';\n              span.style.top = '0';\n              span.style.clip = 'rect(0, 0, 0, 0)';\n              span.style.whiteSpace = 'pre';\n\n              document.body.appendChild(span);\n              range.selectNode(span);\n              selection.addRange(range);\n\n              try {\n                if (!document.execCommand('copy')) {\n                  reject();\n                }\n              } catch (err) {\n                reject();\n              }\n\n              document.body.removeChild(span);\n              if (selection.removeRange) {\n                selection.removeRange(range);\n              } else {\n                selection.removeAllRanges();\n              }\n            }\n\n            resolve();\n          }),\n      ),\n    );\n\nexport default copyTextToClipboard;\n"]},"metadata":{},"sourceType":"module"}