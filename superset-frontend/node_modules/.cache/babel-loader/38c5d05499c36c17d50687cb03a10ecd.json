{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};import { CHART_TYPE, DASHBOARD_ROOT_TYPE, TAB_TYPE } from 'src/dashboard/util/componentTypes';\nimport { DASHBOARD_ROOT_ID } from 'src/dashboard/util/constants';\nimport { logging, t } from '@superset-ui/core';\nexport const isShowTypeInTree = (_ref, charts) => {var _charts$meta$chartId, _charts$meta$chartId$;let { type, meta } = _ref;return (type === TAB_TYPE || type === CHART_TYPE || type === DASHBOARD_ROOT_TYPE) && (\n  !charts || ((_charts$meta$chartId = charts[meta == null ? void 0 : meta.chartId]) == null ? void 0 : (_charts$meta$chartId$ = _charts$meta$chartId.form_data) == null ? void 0 : _charts$meta$chartId$.viz_type) !== 'filter_box');};\nexport const getNodeTitle = (node) => {var _ref2, _ref3, _ref4, _ref5, _node$meta$sliceNameO, _node$meta, _node$meta2, _node$meta3, _node$meta4, _node$id;return (_ref2 = (_ref3 = (_ref4 = (_ref5 = (_node$meta$sliceNameO = node == null ? void 0 : (_node$meta = node.meta) == null ? void 0 : _node$meta.sliceNameOverride) != null ? _node$meta$sliceNameO :\n  node == null ? void 0 : (_node$meta2 = node.meta) == null ? void 0 : _node$meta2.sliceName) != null ? _ref5 :\n  node == null ? void 0 : (_node$meta3 = node.meta) == null ? void 0 : _node$meta3.text) != null ? _ref4 :\n  node == null ? void 0 : (_node$meta4 = node.meta) == null ? void 0 : _node$meta4.defaultText) != null ? _ref3 :\n  node == null ? void 0 : (_node$id = node.id) == null ? void 0 : _node$id.toString == null ? void 0 : _node$id.toString()) != null ? _ref2 :\n  '';};\nexport const buildTree = (node, treeItem, layout, charts, validNodes, initiallyExcludedCharts, buildTreeLeafTitle) => {var _node$children;\n  let itemToPass = treeItem;\n  if (node &&\n  treeItem &&\n  isShowTypeInTree(node, charts) &&\n  node.type !== DASHBOARD_ROOT_TYPE &&\n  validNodes != null && _includesInstanceProperty(validNodes) != null && _includesInstanceProperty(validNodes).call(validNodes, node.id)) {var _node$meta5;\n    const title = buildTreeLeafTitle(getNodeTitle(node), initiallyExcludedCharts == null ? void 0 : _includesInstanceProperty(initiallyExcludedCharts) == null ? void 0 : _includesInstanceProperty(initiallyExcludedCharts).call(initiallyExcludedCharts, (_node$meta5 = node.meta) == null ? void 0 : _node$meta5.chartId), t(\"This chart might be incompatible with the filter (datasets don't match)\"));\n    const currentTreeItem = {\n      key: node.id,\n      title,\n      children: [] };\n\n    treeItem.children.push(currentTreeItem);\n    itemToPass = currentTreeItem;\n  }\n  node == null ? void 0 : (_node$children = node.children) == null ? void 0 : _node$children.forEach == null ? void 0 : _node$children.forEach((child) => {\n    const node = layout == null ? void 0 : layout[child];\n    if (node) {\n      buildTree(node, itemToPass, layout, charts, validNodes, initiallyExcludedCharts, buildTreeLeafTitle);\n    } else\n    {\n      logging.warn(`Unable to find item with id: ${child} in the dashboard layout. This may indicate you have invalid references in your dashboard and the references to id: ${child} should be removed.`);\n    }\n  });\n};\nconst addInvisibleParents = (layout, item) => {var _layout$item;return [\n  ...(((_layout$item = layout[item]) == null ? void 0 : _layout$item.children) || []),\n  ...Object.values(layout).\n  filter((val) => val.parents &&\n  val.parents[val.parents.length - 1] === item &&\n  !isShowTypeInTree(layout[val.parents[val.parents.length - 1]])).\n  map((_ref6) => {let { id } = _ref6;return id;})];};\n\n// Generate checked options for Ant tree from redux scope\nconst checkTreeItem = (checkedItems, layout, items, excluded) => {\n  items.forEach((item) => {var _layout$item2, _layout$item3;\n    checkTreeItem(checkedItems, layout, addInvisibleParents(layout, item), excluded);\n    if (((_layout$item2 = layout[item]) == null ? void 0 : _layout$item2.type) === CHART_TYPE &&\n    !_includesInstanceProperty(excluded).call(excluded, (_layout$item3 = layout[item]) == null ? void 0 : _layout$item3.meta.chartId)) {\n      checkedItems.push(item);\n    }\n  });\n};\nexport const getTreeCheckedItems = (scope, layout) => {\n  const checkedItems = [];\n  checkTreeItem(checkedItems, layout, [...scope.rootPath], [...scope.excluded]);\n  return [...new Set(checkedItems)];\n};\n// Looking for first common parent for selected charts/tabs/tab\nexport const findFilterScope = (checkedKeys, layout) => {\n  if (!checkedKeys.length) {\n    return {\n      rootPath: [],\n      excluded: [] };\n\n  }\n  // Get arrays of parents for selected charts\n  const checkedItemParents = checkedKeys.\n  filter((item) => {var _layout$item4;return ((_layout$item4 = layout[item]) == null ? void 0 : _layout$item4.type) === CHART_TYPE;}).\n  map((key) => {var _layout$key;\n    const parents = [DASHBOARD_ROOT_ID, ...(((_layout$key = layout[key]) == null ? void 0 : _layout$key.parents) || [])];\n    return parents.filter((parent) => isShowTypeInTree(layout[parent]));\n  });\n  // Sort arrays of parents to get first shortest array of parents,\n  // that means on it's level of parents located common parent, from this place parents start be different\n  checkedItemParents.sort((p1, p2) => p1.length - p2.length);\n  const rootPath = checkedItemParents.map((parents) => parents[checkedItemParents[0].length - 1]);\n  const excluded = [];\n  const isExcluded = (parent, item) => _includesInstanceProperty(rootPath).call(rootPath, parent) && !_includesInstanceProperty(checkedKeys).call(checkedKeys, item);\n  // looking for charts to be excluded: iterate over all charts\n  // and looking for charts that have one of their parents in `rootPath` and not in selected items\n  Object.entries(layout).forEach((_ref7) => {var _ref8;let [key, value] = _ref7;\n    const parents = value.parents || [];\n    if (value.type === CHART_TYPE && (_ref8 =\n    [DASHBOARD_ROOT_ID, ...parents]) != null && _ref8.find((parent) => isExcluded(parent, key))) {\n      excluded.push(value.meta.chartId);\n    }\n  });\n  return {\n    rootPath: [...new Set(rootPath)],\n    excluded };\n\n};\nexport const getDefaultScopeValue = function (chartId, initiallyExcludedCharts) {if (initiallyExcludedCharts === void 0) {initiallyExcludedCharts = [];}return {\n    rootPath: [DASHBOARD_ROOT_ID],\n    excluded: chartId ?\n    [chartId, ...initiallyExcludedCharts] :\n    initiallyExcludedCharts };};\n\nexport const isScopingAll = (scope, chartId) => !scope ||\nscope.rootPath[0] === DASHBOARD_ROOT_ID &&\n!scope.excluded.filter((item) => item !== chartId).length;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(isShowTypeInTree, \"isShowTypeInTree\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/FilterScope/utils.ts\");reactHotLoader.register(getNodeTitle, \"getNodeTitle\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/FilterScope/utils.ts\");reactHotLoader.register(buildTree, \"buildTree\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/FilterScope/utils.ts\");reactHotLoader.register(addInvisibleParents, \"addInvisibleParents\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/FilterScope/utils.ts\");reactHotLoader.register(checkTreeItem, \"checkTreeItem\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/FilterScope/utils.ts\");reactHotLoader.register(getTreeCheckedItems, \"getTreeCheckedItems\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/FilterScope/utils.ts\");reactHotLoader.register(findFilterScope, \"findFilterScope\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/FilterScope/utils.ts\");reactHotLoader.register(getDefaultScopeValue, \"getDefaultScopeValue\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/FilterScope/utils.ts\");reactHotLoader.register(isScopingAll, \"isScopingAll\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/FilterScope/utils.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"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","names":["CHART_TYPE","DASHBOARD_ROOT_TYPE","TAB_TYPE","DASHBOARD_ROOT_ID","logging","t","isShowTypeInTree","charts","type","meta","chartId","form_data","viz_type","getNodeTitle","node","sliceNameOverride","sliceName","text","defaultText","id","toString","buildTree","treeItem","layout","validNodes","initiallyExcludedCharts","buildTreeLeafTitle","itemToPass","title","currentTreeItem","key","children","push","forEach","child","warn","addInvisibleParents","item","Object","values","filter","val","parents","length","map","checkTreeItem","checkedItems","items","excluded","getTreeCheckedItems","scope","rootPath","Set","findFilterScope","checkedKeys","checkedItemParents","parent","sort","p1","p2","isExcluded","entries","value","find","getDefaultScopeValue","isScopingAll"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/FilterScope/utils.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { Charts, Layout, LayoutItem } from 'src/dashboard/types';\nimport {\n  CHART_TYPE,\n  DASHBOARD_ROOT_TYPE,\n  TAB_TYPE,\n} from 'src/dashboard/util/componentTypes';\nimport { DASHBOARD_ROOT_ID } from 'src/dashboard/util/constants';\nimport { logging, NativeFilterScope, t } from '@superset-ui/core';\nimport { BuildTreeLeafTitle, TreeItem } from './types';\n\nexport const isShowTypeInTree = ({ type, meta }: LayoutItem, charts?: Charts) =>\n  (type === TAB_TYPE || type === CHART_TYPE || type === DASHBOARD_ROOT_TYPE) &&\n  (!charts || charts[meta?.chartId]?.form_data?.viz_type !== 'filter_box');\n\nexport const getNodeTitle = (node: LayoutItem) =>\n  node?.meta?.sliceNameOverride ??\n  node?.meta?.sliceName ??\n  node?.meta?.text ??\n  node?.meta?.defaultText ??\n  node?.id?.toString?.() ??\n  '';\n\nexport const buildTree = (\n  node: LayoutItem,\n  treeItem: TreeItem,\n  layout: Layout,\n  charts: Charts,\n  validNodes: string[],\n  initiallyExcludedCharts: number[],\n  buildTreeLeafTitle: BuildTreeLeafTitle,\n) => {\n  let itemToPass: TreeItem = treeItem;\n  if (\n    node &&\n    treeItem &&\n    isShowTypeInTree(node, charts) &&\n    node.type !== DASHBOARD_ROOT_TYPE &&\n    validNodes?.includes?.(node.id)\n  ) {\n    const title = buildTreeLeafTitle(\n      getNodeTitle(node),\n      initiallyExcludedCharts?.includes?.(node.meta?.chartId),\n      t(\n        \"This chart might be incompatible with the filter (datasets don't match)\",\n      ),\n    );\n\n    const currentTreeItem = {\n      key: node.id,\n      title,\n      children: [],\n    };\n    treeItem.children.push(currentTreeItem);\n    itemToPass = currentTreeItem;\n  }\n  node?.children?.forEach?.(child => {\n    const node = layout?.[child];\n    if (node) {\n      buildTree(\n        node,\n        itemToPass,\n        layout,\n        charts,\n        validNodes,\n        initiallyExcludedCharts,\n        buildTreeLeafTitle,\n      );\n    } else {\n      logging.warn(\n        `Unable to find item with id: ${child} in the dashboard layout. This may indicate you have invalid references in your dashboard and the references to id: ${child} should be removed.`,\n      );\n    }\n  });\n};\n\nconst addInvisibleParents = (layout: Layout, item: string) => [\n  ...(layout[item]?.children || []),\n  ...Object.values(layout)\n    .filter(\n      val =>\n        val.parents &&\n        val.parents[val.parents.length - 1] === item &&\n        !isShowTypeInTree(layout[val.parents[val.parents.length - 1]]),\n    )\n    .map(({ id }) => id),\n];\n\n// Generate checked options for Ant tree from redux scope\nconst checkTreeItem = (\n  checkedItems: string[],\n  layout: Layout,\n  items: string[],\n  excluded: number[],\n) => {\n  items.forEach(item => {\n    checkTreeItem(\n      checkedItems,\n      layout,\n      addInvisibleParents(layout, item),\n      excluded,\n    );\n    if (\n      layout[item]?.type === CHART_TYPE &&\n      !excluded.includes(layout[item]?.meta.chartId)\n    ) {\n      checkedItems.push(item);\n    }\n  });\n};\n\nexport const getTreeCheckedItems = (\n  scope: NativeFilterScope,\n  layout: Layout,\n) => {\n  const checkedItems: string[] = [];\n  checkTreeItem(checkedItems, layout, [...scope.rootPath], [...scope.excluded]);\n  return [...new Set(checkedItems)];\n};\n\n// Looking for first common parent for selected charts/tabs/tab\nexport const findFilterScope = (\n  checkedKeys: string[],\n  layout: Layout,\n): NativeFilterScope => {\n  if (!checkedKeys.length) {\n    return {\n      rootPath: [],\n      excluded: [],\n    };\n  }\n\n  // Get arrays of parents for selected charts\n  const checkedItemParents = checkedKeys\n    .filter(item => layout[item]?.type === CHART_TYPE)\n    .map(key => {\n      const parents = [DASHBOARD_ROOT_ID, ...(layout[key]?.parents || [])];\n      return parents.filter(parent => isShowTypeInTree(layout[parent]));\n    });\n  // Sort arrays of parents to get first shortest array of parents,\n  // that means on it's level of parents located common parent, from this place parents start be different\n  checkedItemParents.sort((p1, p2) => p1.length - p2.length);\n  const rootPath = checkedItemParents.map(\n    parents => parents[checkedItemParents[0].length - 1],\n  );\n\n  const excluded: number[] = [];\n  const isExcluded = (parent: string, item: string) =>\n    rootPath.includes(parent) && !checkedKeys.includes(item);\n  // looking for charts to be excluded: iterate over all charts\n  // and looking for charts that have one of their parents in `rootPath` and not in selected items\n  Object.entries(layout).forEach(([key, value]) => {\n    const parents = value.parents || [];\n    if (\n      value.type === CHART_TYPE &&\n      [DASHBOARD_ROOT_ID, ...parents]?.find(parent => isExcluded(parent, key))\n    ) {\n      excluded.push(value.meta.chartId);\n    }\n  });\n\n  return {\n    rootPath: [...new Set(rootPath)],\n    excluded,\n  };\n};\n\nexport const getDefaultScopeValue = (\n  chartId?: number,\n  initiallyExcludedCharts: number[] = [],\n): NativeFilterScope => ({\n  rootPath: [DASHBOARD_ROOT_ID],\n  excluded: chartId\n    ? [chartId, ...initiallyExcludedCharts]\n    : initiallyExcludedCharts,\n});\n\nexport const isScopingAll = (scope: NativeFilterScope, chartId?: number) =>\n  !scope ||\n  (scope.rootPath[0] === DASHBOARD_ROOT_ID &&\n    !scope.excluded.filter(item => item !== chartId).length);\n"]},"metadata":{},"sourceType":"module"}