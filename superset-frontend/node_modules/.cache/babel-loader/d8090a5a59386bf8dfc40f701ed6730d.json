{"ast":null,"code":"import _isArray from \"lodash/isArray\";import _mergeWith from \"lodash/mergeWith\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useMemo } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport rehypeSanitize, { defaultSchema } from 'rehype-sanitize';\nimport rehypeRaw from 'rehype-raw';\nimport remarkGfm from 'remark-gfm';\n\nimport { FeatureFlag, isFeatureEnabled } from '../utils';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport function getOverrideHtmlSchema(originalSchema, htmlSchemaOverrides) {\n  return _mergeWith(originalSchema, htmlSchemaOverrides, (objValue, srcValue) => _isArray(objValue) ? objValue.concat(srcValue) : undefined);\n}\nfunction SafeMarkdown(_ref) {let { source, htmlSanitization = true, htmlSchemaOverrides = {} } = _ref;\n  const escapeHtml = isFeatureEnabled(FeatureFlag.ESCAPE_MARKDOWN_HTML);\n  const rehypePlugins = useMemo(() => {\n    const rehypePlugins = [];\n    if (!escapeHtml) {\n      rehypePlugins.push(rehypeRaw);\n      if (htmlSanitization) {\n        const schema = getOverrideHtmlSchema(defaultSchema, htmlSchemaOverrides);\n        rehypePlugins.push([rehypeSanitize, schema]);\n      }\n    }\n    return rehypePlugins;\n  }, [escapeHtml, htmlSanitization, htmlSchemaOverrides]);\n  // React Markdown escapes HTML by default\n  return ___EmotionJSX(ReactMarkdown, { rehypePlugins: rehypePlugins, remarkPlugins: [remarkGfm], skipHtml: false },\n  source);\n\n}__signature__(SafeMarkdown, \"useMemo{rehypePlugins}\");const _default =\nSafeMarkdown;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(getOverrideHtmlSchema, \"getOverrideHtmlSchema\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/components/SafeMarkdown.tsx\");reactHotLoader.register(SafeMarkdown, \"SafeMarkdown\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/components/SafeMarkdown.tsx\");reactHotLoader.register(_default, \"default\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/components/SafeMarkdown.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"wXAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,OAAOC,cAAP,IAAyBC,aAAzB,QAA8C,iBAA9C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,SAASC,WAAT,EAAsBC,gBAAtB,QAA8C,UAA9C,C;AAQA,OAAM,SAAUC,qBAAV,CACJC,cADI,EAEJC,mBAFI,EAEyD;EAE7D,OAAO,WAAUD,cAAV,EAA0BC,mBAA1B,EAA+C,CAACC,QAAD,EAAWC,QAAX,KACpD,SAAQD,QAAR,IAAoBA,QAAQ,CAACE,MAAT,CAAgBD,QAAhB,CAApB,GAAgDE,SAD3C,CAAP;AAGD;AAED,SAASC,YAAT,OAIoB,KAJE,EACpBC,MADoB,EAEpBC,gBAAgB,GAAG,IAFC,EAGpBP,mBAAmB,GAAG,EAHF,EAIF;EAClB,MAAMQ,UAAU,GAAGX,gBAAgB,CAACD,WAAW,CAACa,oBAAb,CAAnC;EAEA,MAAMC,aAAa,GAAGpB,OAAO,CAAC,MAAK;IACjC,MAAMoB,aAAa,GAAQ,EAA3B;IACA,IAAI,CAACF,UAAL,EAAiB;MACfE,aAAa,CAACC,IAAd,CAAmBjB,SAAnB;MACA,IAAIa,gBAAJ,EAAsB;QACpB,MAAMK,MAAM,GAAGd,qBAAqB,CAClCL,aADkC,EAElCO,mBAFkC,CAApC;QAIAU,aAAa,CAACC,IAAd,CAAmB,CAACnB,cAAD,EAAiBoB,MAAjB,CAAnB;MACD;IACF;IACD,OAAOF,aAAP;EACD,CAb4B,EAa1B,CAACF,UAAD,EAAaD,gBAAb,EAA+BP,mBAA/B,CAb0B,CAA7B;EAeA;EACA,OACE,cAAC,aAAD,IACE,aAAa,EAAEU,aADjB,EAEE,aAAa,EAAE,CAACf,SAAD,CAFjB,EAGE,QAAQ,EAAE,KAHZ;EAKGW,MALH,CADF;;AASD,C,cAhCQD,Y;AAkCMA,Y,CAAf,wB,iLA3CgBP,qB,iLASPO,Y","names":["React","useMemo","ReactMarkdown","rehypeSanitize","defaultSchema","rehypeRaw","remarkGfm","FeatureFlag","isFeatureEnabled","getOverrideHtmlSchema","originalSchema","htmlSchemaOverrides","objValue","srcValue","concat","undefined","SafeMarkdown","source","htmlSanitization","escapeHtml","ESCAPE_MARKDOWN_HTML","rehypePlugins","push","schema"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/components/SafeMarkdown.tsx"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useMemo } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport rehypeSanitize, { defaultSchema } from 'rehype-sanitize';\nimport rehypeRaw from 'rehype-raw';\nimport remarkGfm from 'remark-gfm';\nimport { mergeWith, isArray } from 'lodash';\nimport { FeatureFlag, isFeatureEnabled } from '../utils';\n\ninterface SafeMarkdownProps {\n  source: string;\n  htmlSanitization?: boolean;\n  htmlSchemaOverrides?: typeof defaultSchema;\n}\n\nexport function getOverrideHtmlSchema(\n  originalSchema: typeof defaultSchema,\n  htmlSchemaOverrides: SafeMarkdownProps['htmlSchemaOverrides'],\n) {\n  return mergeWith(originalSchema, htmlSchemaOverrides, (objValue, srcValue) =>\n    isArray(objValue) ? objValue.concat(srcValue) : undefined,\n  );\n}\n\nfunction SafeMarkdown({\n  source,\n  htmlSanitization = true,\n  htmlSchemaOverrides = {},\n}: SafeMarkdownProps) {\n  const escapeHtml = isFeatureEnabled(FeatureFlag.ESCAPE_MARKDOWN_HTML);\n\n  const rehypePlugins = useMemo(() => {\n    const rehypePlugins: any = [];\n    if (!escapeHtml) {\n      rehypePlugins.push(rehypeRaw);\n      if (htmlSanitization) {\n        const schema = getOverrideHtmlSchema(\n          defaultSchema,\n          htmlSchemaOverrides,\n        );\n        rehypePlugins.push([rehypeSanitize, schema]);\n      }\n    }\n    return rehypePlugins;\n  }, [escapeHtml, htmlSanitization, htmlSchemaOverrides]);\n\n  // React Markdown escapes HTML by default\n  return (\n    <ReactMarkdown\n      rehypePlugins={rehypePlugins}\n      remarkPlugins={[remarkGfm]}\n      skipHtml={false}\n    >\n      {source}\n    </ReactMarkdown>\n  );\n}\n\nexport default SafeMarkdown;\n"]},"metadata":{},"sourceType":"module"}