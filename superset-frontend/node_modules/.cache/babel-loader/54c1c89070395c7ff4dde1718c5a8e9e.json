{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useState, useCallback } from 'react';\nimport rison from 'rison';\nimport { SupersetClient, t, styled, css, useTheme, logging } from '@superset-ui/core';\nimport { Input } from 'src/components/Input';\nimport { Form } from 'src/components/Form';\nimport Icons from 'src/components/Icons';\nimport { TableOption } from 'src/components/TableSelector';\nimport RefreshLabel from 'src/components/RefreshLabel';\nimport Loading from 'src/components/Loading';\nimport DatabaseSelector from 'src/components/DatabaseSelector';\nimport { EmptyStateMedium, emptyStateComponent } from 'src/components/EmptyState';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\nimport { LocalStorageKeys, getItem } from 'src/utils/localStorageHelpers';\nimport { DatasetActionType } from 'src/features/datasets/AddDataset/types';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst SearchIcon = styled(Icons.Search)`\n  color: ${(_ref) => {let { theme } = _ref;return theme.colors.grayscale.light1;}};\n`;\nconst LeftPanelStyle = styled.div`\n  ${(_ref2) => {let { theme } = _ref2;return `\n    max-width: ${theme.gridUnit * 87.5}px;\n    padding: ${theme.gridUnit * 4}px;\n    height: 100%;\n    background-color: ${theme.colors.grayscale.light5};\n    position: relative;\n    .emptystate {\n      height: auto;\n      margin-top: ${theme.gridUnit * 17.5}px;\n    }\n    .refresh {\n      position: absolute;\n      top: ${theme.gridUnit * 38.75}px;\n      left: ${theme.gridUnit * 16.75}px;\n      span[role=\"button\"]{\n        font-size: ${theme.gridUnit * 4.25}px;\n      }\n    }\n    .section-title {\n      margin-top: ${theme.gridUnit * 5.5}px;\n      margin-bottom: ${theme.gridUnit * 11}px;\n      font-weight: ${theme.typography.weights.bold};\n    }\n    .table-title {\n      margin-top: ${theme.gridUnit * 11}px;\n      margin-bottom: ${theme.gridUnit * 6}px;\n      font-weight: ${theme.typography.weights.bold};\n    }\n    .options-list {\n      overflow: auto;\n      position: absolute;\n      bottom: 0;\n      top: ${theme.gridUnit * 92.25}px;\n      left: ${theme.gridUnit * 3.25}px;\n      right: 0;\n\n      .no-scrollbar {\n        margin-right: ${theme.gridUnit * 4}px;\n      }\n\n      .options {\n        cursor: pointer;\n        padding: ${theme.gridUnit * 1.75}px;\n        border-radius: ${theme.borderRadius}px;\n        :hover {\n          background-color: ${theme.colors.grayscale.light4}\n        }\n      }\n\n      .options-highlighted {\n        cursor: pointer;\n        padding: ${theme.gridUnit * 1.75}px;\n        border-radius: ${theme.borderRadius}px;\n        background-color: ${theme.colors.primary.dark1};\n        color: ${theme.colors.grayscale.light5};\n      }\n\n      .options, .options-highlighted {\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n      }\n    }\n    form > span[aria-label=\"refresh\"] {\n      position: absolute;\n      top: ${theme.gridUnit * 69}px;\n      left: ${theme.gridUnit * 42.75}px;\n      font-size: ${theme.gridUnit * 4.25}px;\n    }\n    .table-form {\n      margin-bottom: ${theme.gridUnit * 8}px;\n    }\n    .loading-container {\n      position: absolute;\n      top: ${theme.gridUnit * 89.75}px;\n      left: 0;\n      right: 0;\n      text-align: center;\n      img {\n        width: ${theme.gridUnit * 20}px;\n        margin-bottom: ${theme.gridUnit * 2.5}px;\n      }\n      p {\n        color: ${theme.colors.grayscale.light1};\n      }\n    }\n`;}}\n`;\nexport default function LeftPanel(_ref3) {var _dataset$db2, _optionsList$, _optionsList$2;let { setDataset, dataset, datasetNames } = _ref3;\n  const theme = useTheme();\n  const [tableOptions, setTableOptions] = useState([]);\n  const [resetTables, setResetTables] = useState(false);\n  const [loadTables, setLoadTables] = useState(false);\n  const [searchVal, setSearchVal] = useState('');\n  const [refresh, setRefresh] = useState(false);\n  const [selectedTable, setSelectedTable] = useState(null);\n  const { addDangerToast } = useToasts();\n  const setDatabase = useCallback((db) => {\n    setDataset({ type: DatasetActionType.selectDatabase, payload: { db } });\n    setSelectedTable(null);\n    setResetTables(true);\n  }, [setDataset]);\n  const setTable = (tableName, index) => {\n    setSelectedTable(index);\n    setDataset({\n      type: DatasetActionType.selectTable,\n      payload: { name: 'table_name', value: tableName } });\n\n  };\n  const getTablesList = useCallback((url) => {\n    SupersetClient.get({ url }).\n    then((_ref4) => {let { json } = _ref4;\n      const options = json.result.map((table) => {\n        const option = {\n          value: table.value,\n          label: ___EmotionJSX(TableOption, { table: table }),\n          text: table.label };\n\n        return option;\n      });\n      setTableOptions(options);\n      setLoadTables(false);\n      setResetTables(false);\n      setRefresh(false);\n    }).\n    catch((error) => {\n      addDangerToast(t('There was an error fetching tables'));\n      logging.error(t('There was an error fetching tables'), error);\n    });\n  }, [addDangerToast]);\n  const setSchema = (schema) => {\n    if (schema) {\n      setDataset({\n        type: DatasetActionType.selectSchema,\n        payload: { name: 'schema', value: schema } });\n\n      setLoadTables(true);\n    }\n    setSelectedTable(null);\n    setResetTables(true);\n  };\n  const encodedSchema = dataset != null && dataset.schema ?\n  encodeURIComponent(dataset == null ? void 0 : dataset.schema) :\n  undefined;\n  useEffect(() => {\n    const currentUserSelectedDb = getItem(LocalStorageKeys.db, null);\n    if (currentUserSelectedDb) {\n      setDatabase(currentUserSelectedDb);\n    }\n  }, [setDatabase]);\n  useEffect(() => {\n    if (loadTables) {var _dataset$db;\n      const params = rison.encode({\n        force: refresh,\n        schema_name: encodedSchema });\n\n      const endpoint = `/api/v1/database/${dataset == null ? void 0 : (_dataset$db = dataset.db) == null ? void 0 : _dataset$db.id}/tables/?q=${params}`;\n      getTablesList(endpoint);\n    }\n  }, [loadTables, dataset == null ? void 0 : (_dataset$db2 = dataset.db) == null ? void 0 : _dataset$db2.id, encodedSchema, getTablesList, refresh]);\n  useEffect(() => {\n    if (resetTables) {\n      setTableOptions([]);\n      setResetTables(false);\n    }\n  }, [resetTables]);\n  const filteredOptions = tableOptions.filter((option) => {var _option$value, _context;return option == null ? void 0 : (_option$value = option.value) == null ? void 0 : _includesInstanceProperty(_context = _option$value.toLowerCase()).call(_context, searchVal.toLowerCase());});\n  const Loader = (inline) => ___EmotionJSX(\"div\", { className: \"loading-container\" },\n  ___EmotionJSX(Loading, { position: \"inline\" }),\n  ___EmotionJSX(\"p\", null, inline));\n\n  const SELECT_DATABASE_AND_SCHEMA_TEXT = t('Select database & schema');\n  const TABLE_LOADING_TEXT = t('Table loading');\n  const NO_TABLES_FOUND_TITLE = t('No database tables found');\n  const NO_TABLES_FOUND_DESCRIPTION = t('Try selecting a different schema');\n  const SELECT_DATABASE_TABLE_TEXT = t('Select database table');\n  const REFRESH_TABLE_LIST_TOOLTIP = t('Refresh table list');\n  const REFRESH_TABLES_TEXT = t('Refresh tables');\n  const SEARCH_TABLES_PLACEHOLDER_TEXT = t('Search tables');\n  const optionsList = document.getElementsByClassName('options-list');\n  const scrollableOptionsList = ((_optionsList$ = optionsList[0]) == null ? void 0 : _optionsList$.scrollHeight) > ((_optionsList$2 = optionsList[0]) == null ? void 0 : _optionsList$2.clientHeight);\n  const [emptyResultsWithSearch, setEmptyResultsWithSearch] = useState(false);\n  const onEmptyResults = (searchText) => {\n    setEmptyResultsWithSearch(!!searchText);\n  };\n  return ___EmotionJSX(LeftPanelStyle, null,\n  ___EmotionJSX(\"p\", { className: \"section-title db-schema\" },\n  SELECT_DATABASE_AND_SCHEMA_TEXT),\n\n  ___EmotionJSX(DatabaseSelector, { db: dataset == null ? void 0 : dataset.db, handleError: addDangerToast, onDbChange: setDatabase, onSchemaChange: setSchema, emptyState: emptyStateComponent(emptyResultsWithSearch), onEmptyResults: onEmptyResults }),\n  loadTables && !refresh && Loader(TABLE_LOADING_TEXT),\n  (dataset == null ? void 0 : dataset.schema) && !loadTables && !tableOptions.length && !searchVal && ___EmotionJSX(\"div\", { className: \"emptystate\" },\n  ___EmotionJSX(EmptyStateMedium, { image: \"empty-table.svg\", title: NO_TABLES_FOUND_TITLE, description: NO_TABLES_FOUND_DESCRIPTION })),\n\n\n  (dataset == null ? void 0 : dataset.schema) && (tableOptions.length > 0 || searchVal.length > 0) && ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(Form, null,\n  ___EmotionJSX(\"p\", { className: \"table-title\" }, SELECT_DATABASE_TABLE_TEXT),\n  ___EmotionJSX(RefreshLabel, { onClick: () => {\n      setLoadTables(true);\n      setRefresh(true);\n    }, tooltipContent: REFRESH_TABLE_LIST_TOOLTIP }),\n  refresh && Loader(REFRESH_TABLES_TEXT),\n  !refresh && ___EmotionJSX(Input, { value: searchVal, prefix: ___EmotionJSX(SearchIcon, { iconSize: \"l\" }), onChange: (evt) => {\n      setSearchVal(evt.target.value);\n    }, className: \"table-form\", placeholder: SEARCH_TABLES_PLACEHOLDER_TEXT, allowClear: true })),\n\n  ___EmotionJSX(\"div\", { className: \"options-list\", \"data-test\": \"options-list\" },\n  !refresh &&\n  filteredOptions.map((option, i) => ___EmotionJSX(\"div\", { className: selectedTable === i ?\n    scrollableOptionsList ?\n    'options-highlighted' :\n    'options-highlighted no-scrollbar' :\n    scrollableOptionsList ?\n    'options' :\n    'options no-scrollbar', key: i, role: \"button\", tabIndex: 0, onClick: () => setTable(option.value, i) },\n  option.label,\n  (datasetNames == null ? void 0 : _includesInstanceProperty(datasetNames).call(datasetNames, option.value)) && ___EmotionJSX(Icons.Warning, { iconColor: selectedTable === i ?\n    theme.colors.grayscale.light5 :\n    theme.colors.info.base, iconSize: \"m\", css: css`\n                        margin-right: ${theme.gridUnit * 2}px;\n                      ` }))))));\n\n\n\n\n}__signature__(LeftPanel, \"useTheme{theme}\\nuseState{[tableOptions, setTableOptions]([])}\\nuseState{[resetTables, setResetTables](false)}\\nuseState{[loadTables, setLoadTables](false)}\\nuseState{[searchVal, setSearchVal]('')}\\nuseState{[refresh, setRefresh](false)}\\nuseState{[selectedTable, setSelectedTable](null)}\\nuseToasts{{ addDangerToast }}\\nuseCallback{setDatabase}\\nuseCallback{getTablesList}\\nuseEffect{}\\nuseEffect{}\\nuseEffect{}\\nuseState{[emptyResultsWithSearch, setEmptyResultsWithSearch](false)}\", () => [useTheme, useToasts]);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(SearchIcon, \"SearchIcon\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/features/datasets/AddDataset/LeftPanel/index.tsx\");reactHotLoader.register(LeftPanelStyle, \"LeftPanelStyle\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/features/datasets/AddDataset/LeftPanel/index.tsx\");reactHotLoader.register(LeftPanel, \"LeftPanel\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/features/datasets/AddDataset/LeftPanel/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"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","names":["React","useEffect","useState","useCallback","rison","SupersetClient","t","styled","css","useTheme","logging","Input","Form","Icons","TableOption","RefreshLabel","Loading","DatabaseSelector","EmptyStateMedium","emptyStateComponent","useToasts","LocalStorageKeys","getItem","DatasetActionType","SearchIcon","Search","theme","colors","grayscale","light1","LeftPanelStyle","div","gridUnit","light5","typography","weights","bold","borderRadius","light4","primary","dark1","LeftPanel","setDataset","dataset","datasetNames","tableOptions","setTableOptions","resetTables","setResetTables","loadTables","setLoadTables","searchVal","setSearchVal","refresh","setRefresh","selectedTable","setSelectedTable","addDangerToast","setDatabase","db","type","selectDatabase","payload","setTable","tableName","index","selectTable","name","value","getTablesList","url","get","then","json","options","result","map","table","option","label","text","catch","error","setSchema","schema","selectSchema","encodedSchema","encodeURIComponent","undefined","currentUserSelectedDb","params","encode","force","schema_name","endpoint","id","filteredOptions","filter","toLowerCase","Loader","inline","SELECT_DATABASE_AND_SCHEMA_TEXT","TABLE_LOADING_TEXT","NO_TABLES_FOUND_TITLE","NO_TABLES_FOUND_DESCRIPTION","SELECT_DATABASE_TABLE_TEXT","REFRESH_TABLE_LIST_TOOLTIP","REFRESH_TABLES_TEXT","SEARCH_TABLES_PLACEHOLDER_TEXT","optionsList","document","getElementsByClassName","scrollableOptionsList","scrollHeight","clientHeight","emptyResultsWithSearch","setEmptyResultsWithSearch","onEmptyResults","searchText","length","evt","target","i","info","base"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/features/datasets/AddDataset/LeftPanel/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, {\n  useEffect,\n  useState,\n  SetStateAction,\n  Dispatch,\n  useCallback,\n} from 'react';\nimport rison from 'rison';\nimport {\n  SupersetClient,\n  t,\n  styled,\n  css,\n  useTheme,\n  logging,\n} from '@superset-ui/core';\nimport { Input } from 'src/components/Input';\nimport { Form } from 'src/components/Form';\nimport Icons from 'src/components/Icons';\nimport { TableOption } from 'src/components/TableSelector';\nimport RefreshLabel from 'src/components/RefreshLabel';\nimport { Table } from 'src/hooks/apiResources';\nimport Loading from 'src/components/Loading';\nimport DatabaseSelector, {\n  DatabaseObject,\n} from 'src/components/DatabaseSelector';\nimport {\n  EmptyStateMedium,\n  emptyStateComponent,\n} from 'src/components/EmptyState';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\nimport { LocalStorageKeys, getItem } from 'src/utils/localStorageHelpers';\nimport {\n  DatasetActionType,\n  DatasetObject,\n} from 'src/features/datasets/AddDataset/types';\n\ninterface LeftPanelProps {\n  setDataset: Dispatch<SetStateAction<object>>;\n  dataset?: Partial<DatasetObject> | null;\n  datasetNames?: (string | null | undefined)[] | undefined;\n}\n\nconst SearchIcon = styled(Icons.Search)`\n  color: ${({ theme }) => theme.colors.grayscale.light1};\n`;\n\nconst LeftPanelStyle = styled.div`\n  ${({ theme }) => `\n    max-width: ${theme.gridUnit * 87.5}px;\n    padding: ${theme.gridUnit * 4}px;\n    height: 100%;\n    background-color: ${theme.colors.grayscale.light5};\n    position: relative;\n    .emptystate {\n      height: auto;\n      margin-top: ${theme.gridUnit * 17.5}px;\n    }\n    .refresh {\n      position: absolute;\n      top: ${theme.gridUnit * 38.75}px;\n      left: ${theme.gridUnit * 16.75}px;\n      span[role=\"button\"]{\n        font-size: ${theme.gridUnit * 4.25}px;\n      }\n    }\n    .section-title {\n      margin-top: ${theme.gridUnit * 5.5}px;\n      margin-bottom: ${theme.gridUnit * 11}px;\n      font-weight: ${theme.typography.weights.bold};\n    }\n    .table-title {\n      margin-top: ${theme.gridUnit * 11}px;\n      margin-bottom: ${theme.gridUnit * 6}px;\n      font-weight: ${theme.typography.weights.bold};\n    }\n    .options-list {\n      overflow: auto;\n      position: absolute;\n      bottom: 0;\n      top: ${theme.gridUnit * 92.25}px;\n      left: ${theme.gridUnit * 3.25}px;\n      right: 0;\n\n      .no-scrollbar {\n        margin-right: ${theme.gridUnit * 4}px;\n      }\n\n      .options {\n        cursor: pointer;\n        padding: ${theme.gridUnit * 1.75}px;\n        border-radius: ${theme.borderRadius}px;\n        :hover {\n          background-color: ${theme.colors.grayscale.light4}\n        }\n      }\n\n      .options-highlighted {\n        cursor: pointer;\n        padding: ${theme.gridUnit * 1.75}px;\n        border-radius: ${theme.borderRadius}px;\n        background-color: ${theme.colors.primary.dark1};\n        color: ${theme.colors.grayscale.light5};\n      }\n\n      .options, .options-highlighted {\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n      }\n    }\n    form > span[aria-label=\"refresh\"] {\n      position: absolute;\n      top: ${theme.gridUnit * 69}px;\n      left: ${theme.gridUnit * 42.75}px;\n      font-size: ${theme.gridUnit * 4.25}px;\n    }\n    .table-form {\n      margin-bottom: ${theme.gridUnit * 8}px;\n    }\n    .loading-container {\n      position: absolute;\n      top: ${theme.gridUnit * 89.75}px;\n      left: 0;\n      right: 0;\n      text-align: center;\n      img {\n        width: ${theme.gridUnit * 20}px;\n        margin-bottom: ${theme.gridUnit * 2.5}px;\n      }\n      p {\n        color: ${theme.colors.grayscale.light1};\n      }\n    }\n`}\n`;\n\nexport default function LeftPanel({\n  setDataset,\n  dataset,\n  datasetNames,\n}: LeftPanelProps) {\n  const theme = useTheme();\n\n  const [tableOptions, setTableOptions] = useState<Array<TableOption>>([]);\n  const [resetTables, setResetTables] = useState(false);\n  const [loadTables, setLoadTables] = useState(false);\n  const [searchVal, setSearchVal] = useState('');\n  const [refresh, setRefresh] = useState(false);\n  const [selectedTable, setSelectedTable] = useState<number | null>(null);\n\n  const { addDangerToast } = useToasts();\n\n  const setDatabase = useCallback(\n    (db: Partial<DatabaseObject>) => {\n      setDataset({ type: DatasetActionType.selectDatabase, payload: { db } });\n      setSelectedTable(null);\n      setResetTables(true);\n    },\n    [setDataset],\n  );\n\n  const setTable = (tableName: string, index: number) => {\n    setSelectedTable(index);\n    setDataset({\n      type: DatasetActionType.selectTable,\n      payload: { name: 'table_name', value: tableName },\n    });\n  };\n\n  const getTablesList = useCallback(\n    (url: string) => {\n      SupersetClient.get({ url })\n        .then(({ json }) => {\n          const options: TableOption[] = json.result.map((table: Table) => {\n            const option: TableOption = {\n              value: table.value,\n              label: <TableOption table={table} />,\n              text: table.label,\n            };\n\n            return option;\n          });\n\n          setTableOptions(options);\n          setLoadTables(false);\n          setResetTables(false);\n          setRefresh(false);\n        })\n        .catch(error => {\n          addDangerToast(t('There was an error fetching tables'));\n          logging.error(t('There was an error fetching tables'), error);\n        });\n    },\n    [addDangerToast],\n  );\n\n  const setSchema = (schema: string) => {\n    if (schema) {\n      setDataset({\n        type: DatasetActionType.selectSchema,\n        payload: { name: 'schema', value: schema },\n      });\n      setLoadTables(true);\n    }\n    setSelectedTable(null);\n    setResetTables(true);\n  };\n\n  const encodedSchema = dataset?.schema\n    ? encodeURIComponent(dataset?.schema)\n    : undefined;\n\n  useEffect(() => {\n    const currentUserSelectedDb = getItem(\n      LocalStorageKeys.db,\n      null,\n    ) as DatabaseObject;\n    if (currentUserSelectedDb) {\n      setDatabase(currentUserSelectedDb);\n    }\n  }, [setDatabase]);\n\n  useEffect(() => {\n    if (loadTables) {\n      const params = rison.encode({\n        force: refresh,\n        schema_name: encodedSchema,\n      });\n\n      const endpoint = `/api/v1/database/${dataset?.db?.id}/tables/?q=${params}`;\n      getTablesList(endpoint);\n    }\n  }, [loadTables, dataset?.db?.id, encodedSchema, getTablesList, refresh]);\n\n  useEffect(() => {\n    if (resetTables) {\n      setTableOptions([]);\n      setResetTables(false);\n    }\n  }, [resetTables]);\n\n  const filteredOptions = tableOptions.filter(option =>\n    option?.value?.toLowerCase().includes(searchVal.toLowerCase()),\n  );\n\n  const Loader = (inline: string) => (\n    <div className=\"loading-container\">\n      <Loading position=\"inline\" />\n      <p>{inline}</p>\n    </div>\n  );\n\n  const SELECT_DATABASE_AND_SCHEMA_TEXT = t('Select database & schema');\n  const TABLE_LOADING_TEXT = t('Table loading');\n  const NO_TABLES_FOUND_TITLE = t('No database tables found');\n  const NO_TABLES_FOUND_DESCRIPTION = t('Try selecting a different schema');\n  const SELECT_DATABASE_TABLE_TEXT = t('Select database table');\n  const REFRESH_TABLE_LIST_TOOLTIP = t('Refresh table list');\n  const REFRESH_TABLES_TEXT = t('Refresh tables');\n  const SEARCH_TABLES_PLACEHOLDER_TEXT = t('Search tables');\n\n  const optionsList = document.getElementsByClassName('options-list');\n  const scrollableOptionsList =\n    optionsList[0]?.scrollHeight > optionsList[0]?.clientHeight;\n  const [emptyResultsWithSearch, setEmptyResultsWithSearch] = useState(false);\n\n  const onEmptyResults = (searchText?: string) => {\n    setEmptyResultsWithSearch(!!searchText);\n  };\n\n  return (\n    <LeftPanelStyle>\n      <p className=\"section-title db-schema\">\n        {SELECT_DATABASE_AND_SCHEMA_TEXT}\n      </p>\n      <DatabaseSelector\n        db={dataset?.db}\n        handleError={addDangerToast}\n        onDbChange={setDatabase}\n        onSchemaChange={setSchema}\n        emptyState={emptyStateComponent(emptyResultsWithSearch)}\n        onEmptyResults={onEmptyResults}\n      />\n      {loadTables && !refresh && Loader(TABLE_LOADING_TEXT)}\n      {dataset?.schema && !loadTables && !tableOptions.length && !searchVal && (\n        <div className=\"emptystate\">\n          <EmptyStateMedium\n            image=\"empty-table.svg\"\n            title={NO_TABLES_FOUND_TITLE}\n            description={NO_TABLES_FOUND_DESCRIPTION}\n          />\n        </div>\n      )}\n\n      {dataset?.schema && (tableOptions.length > 0 || searchVal.length > 0) && (\n        <>\n          <Form>\n            <p className=\"table-title\">{SELECT_DATABASE_TABLE_TEXT}</p>\n            <RefreshLabel\n              onClick={() => {\n                setLoadTables(true);\n                setRefresh(true);\n              }}\n              tooltipContent={REFRESH_TABLE_LIST_TOOLTIP}\n            />\n            {refresh && Loader(REFRESH_TABLES_TEXT)}\n            {!refresh && (\n              <Input\n                value={searchVal}\n                prefix={<SearchIcon iconSize=\"l\" />}\n                onChange={evt => {\n                  setSearchVal(evt.target.value);\n                }}\n                className=\"table-form\"\n                placeholder={SEARCH_TABLES_PLACEHOLDER_TEXT}\n                allowClear\n              />\n            )}\n          </Form>\n          <div className=\"options-list\" data-test=\"options-list\">\n            {!refresh &&\n              filteredOptions.map((option, i) => (\n                <div\n                  className={\n                    selectedTable === i\n                      ? scrollableOptionsList\n                        ? 'options-highlighted'\n                        : 'options-highlighted no-scrollbar'\n                      : scrollableOptionsList\n                      ? 'options'\n                      : 'options no-scrollbar'\n                  }\n                  key={i}\n                  role=\"button\"\n                  tabIndex={0}\n                  onClick={() => setTable(option.value, i)}\n                >\n                  {option.label}\n                  {datasetNames?.includes(option.value) && (\n                    <Icons.Warning\n                      iconColor={\n                        selectedTable === i\n                          ? theme.colors.grayscale.light5\n                          : theme.colors.info.base\n                      }\n                      iconSize=\"m\"\n                      css={css`\n                        margin-right: ${theme.gridUnit * 2}px;\n                      `}\n                    />\n                  )}\n                </div>\n              ))}\n          </div>\n        </>\n      )}\n    </LeftPanelStyle>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}