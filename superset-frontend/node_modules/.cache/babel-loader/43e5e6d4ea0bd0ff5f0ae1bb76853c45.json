{"ast":null,"code":"var _getCategoricalScheme, _getCategoricalScheme2;(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { getCategoricalSchemeRegistry, styled } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { Avatar } from 'src/components';\nimport { getRandomColor } from './utils';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst colorList = (_getCategoricalScheme = (_getCategoricalScheme2 = getCategoricalSchemeRegistry().get()) == null ? void 0 : _getCategoricalScheme2.colors) != null ? _getCategoricalScheme : [];\nconst customAvatarStyler = (theme) => `\n  width: ${theme.gridUnit * 6}px;\n  height: ${theme.gridUnit * 6}px;\n  line-height: ${theme.gridUnit * 6}px;\n  font-size: ${theme.typography.sizes.m}px;\n`;\nconst StyledAvatar = styled(Avatar)`\n  ${(_ref) => {let { theme } = _ref;return customAvatarStyler(theme);}}\n`;\n// to apply styling to the maxCount avatar\nconst StyledGroup = styled(Avatar.Group)`\n  .ant-avatar {\n    ${(_ref2) => {let { theme } = _ref2;return customAvatarStyler(theme);}}\n  }\n`;\nexport default function FacePile(_ref3) {let { users, maxCount = 4 } = _ref3;\n  return ___EmotionJSX(StyledGroup, { maxCount: maxCount },\n  users.map((_ref4) => {var _first_name$, _last_name$;let { first_name, last_name, id } = _ref4;\n    const name = `${first_name} ${last_name}`;\n    const uniqueKey = `${id}-${first_name}-${last_name}`;\n    const color = getRandomColor(uniqueKey, colorList);\n    return ___EmotionJSX(Tooltip, { key: name, title: name, placement: \"top\" },\n    ___EmotionJSX(StyledAvatar, { key: name, style: {\n        backgroundColor: color,\n        borderColor: color } },\n\n    first_name == null ? void 0 : (_first_name$ = first_name[0]) == null ? void 0 : _first_name$.toLocaleUpperCase(),\n    last_name == null ? void 0 : (_last_name$ = last_name[0]) == null ? void 0 : _last_name$.toLocaleUpperCase()));\n\n\n  }));\n\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(colorList, \"colorList\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/FacePile/index.tsx\");reactHotLoader.register(customAvatarStyler, \"customAvatarStyler\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/FacePile/index.tsx\");reactHotLoader.register(StyledAvatar, \"StyledAvatar\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/FacePile/index.tsx\");reactHotLoader.register(StyledGroup, \"StyledGroup\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/FacePile/index.tsx\");reactHotLoader.register(FacePile, \"FacePile\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/FacePile/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"0VAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,4BADF,EAEEC,MAFF,QAIO,mBAJP;AAKA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,MAAT,QAAuB,gBAAvB;AACA,SAASC,cAAT,QAA+B,SAA/B,C;AAOA,MAAMC,SAAS,sDAAGL,4BAA4B,GAAGM,GAA/B,EAAH,qBAAG,uBAAsCC,MAAzC,oCAAmD,EAAlE;AAEA,MAAMC,kBAAkB,GAAG,CAACC,KAAD,KAA0B;WAC1CA,KAAK,CAACC,QAAN,GAAiB,CAAC;YACjBD,KAAK,CAACC,QAAN,GAAiB,CAAC;iBACbD,KAAK,CAACC,QAAN,GAAiB,CAAC;eACpBD,KAAK,CAACE,UAAN,CAAiBC,KAAjB,CAAuBC,CAAC;CAJvC;AAOA,MAAMC,YAAY,GAAGb,MAAM,CAACE,MAAD,CAAQ;IAC/B,eAAC,EAAEM,KAAF,EAAD,eAAeD,kBAAkB,CAACC,KAAD,CAAjC,EAAwC;CAD5C;AAIA;AACA,MAAMM,WAAW,GAAGd,MAAM,CAACE,MAAM,CAACa,KAAR,CAAc;;MAElC,gBAAC,EAAEP,KAAF,EAAD,gBAAeD,kBAAkB,CAACC,KAAD,CAAjC,EAAwC;;CAF9C;AAMA,eAAc,SAAUQ,QAAV,QAAyD,KAAtC,EAAEC,KAAF,EAASC,QAAQ,GAAG,CAApB,EAAsC;EACrE,OACE,cAAC,WAAD,IAAa,QAAQ,EAAEA,QAAvB;EACGD,KAAK,CAACE,GAAN,CAAU,WAAkC,mCAAjC,EAAEC,UAAF,EAAcC,SAAd,EAAyBC,EAAzB,EAAiC;IAC3C,MAAMC,IAAI,GAAG,GAAGH,UAAU,IAAIC,SAAS,EAAvC;IACA,MAAMG,SAAS,GAAG,GAAGF,EAAE,IAAIF,UAAU,IAAIC,SAAS,EAAlD;IACA,MAAMI,KAAK,GAAGtB,cAAc,CAACqB,SAAD,EAAYpB,SAAZ,CAA5B;IACA,OACE,cAAC,OAAD,IAAS,GAAG,EAAEmB,IAAd,EAAoB,KAAK,EAAEA,IAA3B,EAAiC,SAAS,EAAC,KAA3C;IACE,cAAC,YAAD,IACE,GAAG,EAAEA,IADP,EAEE,KAAK,EAAE;QACLG,eAAe,EAAED,KADZ;QAELE,WAAW,EAAEF,KAFR,EAFT;;IAOGL,UAPH,oCAOGA,UAAU,CAAG,CAAH,CAPb,qBAOG,aAAiBQ,iBAAjB,EAPH;IAQGP,SARH,mCAQGA,SAAS,CAAG,CAAH,CARZ,qBAQG,YAAgBO,iBAAhB,EARH,CADF,CADF;;;EAcD,CAlBA,CADH,CADF;;AAuBD,C,iLA5CKxB,S,6IAEAG,kB,sJAOAM,Y,gJAKAC,W,+IAMkBE,Q","names":["React","getCategoricalSchemeRegistry","styled","Tooltip","Avatar","getRandomColor","colorList","get","colors","customAvatarStyler","theme","gridUnit","typography","sizes","m","StyledAvatar","StyledGroup","Group","FacePile","users","maxCount","map","first_name","last_name","id","name","uniqueKey","color","backgroundColor","borderColor","toLocaleUpperCase"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/FacePile/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport {\n  getCategoricalSchemeRegistry,\n  styled,\n  SupersetTheme,\n} from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { Avatar } from 'src/components';\nimport { getRandomColor } from './utils';\n\ninterface FacePileProps {\n  users: { first_name: string; last_name: string; id: number }[];\n  maxCount?: number;\n}\n\nconst colorList = getCategoricalSchemeRegistry().get()?.colors ?? [];\n\nconst customAvatarStyler = (theme: SupersetTheme) => `\n  width: ${theme.gridUnit * 6}px;\n  height: ${theme.gridUnit * 6}px;\n  line-height: ${theme.gridUnit * 6}px;\n  font-size: ${theme.typography.sizes.m}px;\n`;\n\nconst StyledAvatar = styled(Avatar)`\n  ${({ theme }) => customAvatarStyler(theme)}\n`;\n\n// to apply styling to the maxCount avatar\nconst StyledGroup = styled(Avatar.Group)`\n  .ant-avatar {\n    ${({ theme }) => customAvatarStyler(theme)}\n  }\n`;\n\nexport default function FacePile({ users, maxCount = 4 }: FacePileProps) {\n  return (\n    <StyledGroup maxCount={maxCount}>\n      {users.map(({ first_name, last_name, id }) => {\n        const name = `${first_name} ${last_name}`;\n        const uniqueKey = `${id}-${first_name}-${last_name}`;\n        const color = getRandomColor(uniqueKey, colorList);\n        return (\n          <Tooltip key={name} title={name} placement=\"top\">\n            <StyledAvatar\n              key={name}\n              style={{\n                backgroundColor: color,\n                borderColor: color,\n              }}\n            >\n              {first_name?.[0]?.toLocaleUpperCase()}\n              {last_name?.[0]?.toLocaleUpperCase()}\n            </StyledAvatar>\n          </Tooltip>\n        );\n      })}\n    </StyledGroup>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}