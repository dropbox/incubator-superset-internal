{"ast":null,"code":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { scaleLinear } from 'd3-scale';\nimport { interpolateHcl, interpolateNumber, piecewise, quantize } from 'd3-interpolate';\nimport ColorScheme from './ColorScheme';\nexport default class SequentialScheme extends ColorScheme {\n\n  constructor(config) {\n    super(config);this.isDiverging = void 0;\n    const { isDiverging = false } = config;\n    this.isDiverging = isDiverging;\n  }\n  /**\n   * Return a linear scale with a new domain interpolated from the input domain\n   * to match the number of elements in the color scheme\n   * because D3 continuous scale uses piecewise mapping between domain and range.\n   * This is a common use-case when the domain is [min, max]\n   * and the palette has more than two colors.\n   *\n   * @param domain domain of the scale\n   * @param modifyRange Set this to true if you don't want to modify the domain and\n   * want to interpolate range to have the same number of elements with domain instead.\n   */\n  createLinearScale(domain, modifyRange) {if (domain === void 0) {domain = [0, 1];}if (modifyRange === void 0) {modifyRange = false;}\n    const scale = scaleLinear().interpolate(interpolateHcl).clamp(true);\n    return modifyRange || domain.length === this.colors.length ?\n    scale.domain(domain).range(this.getColors(domain.length)) :\n    scale.\n    domain(quantize(piecewise(interpolateNumber, domain), this.colors.length)).\n    range(this.colors);\n  }\n  /**\n   * Get colors from this scheme\n   * @param numColors number of colors to return.\n   * Will interpolate the current scheme to match the number of colors requested\n   * @param extent The extent of the color range to use.\n   * For example [0.2, 1] will rescale the color scheme\n   * such that color values in the range [0, 0.2) are excluded from the scheme.\n   */\n  getColors(numColors, extent) {if (numColors === void 0) {numColors = this.colors.length;}if (extent === void 0) {extent = [0, 1];}\n    if (numColors === this.colors.length &&\n    extent[0] === 0 &&\n    extent[1] === 1) {\n      return this.colors;\n    }\n    const piecewiseScale = piecewise(interpolateHcl, this.colors);\n    const adjustExtent = scaleLinear().range(extent).clamp(true);\n    return quantize((t) => piecewiseScale(adjustExtent(t)), numColors);\n  }}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAmBA,SAASA,WAAT,QAA4B,UAA5B;AACA,SACEC,cADF,EAEEC,iBAFF,EAGEC,SAHF,EAIEC,QAJF,QAKO,gBALP;AAMA,OAAOC,WAAP,MAA+C,eAA/C;AAMA,eAAc,MAAOC,gBAAP,SAAgCD,WAAhC,CAA2C;;EAGvDE,YAAYC,MAAZ,EAA0C;IACxC,MAAMA,MAAN,EADwC,KAF1CC,WAE0C;IAExC,MAAM,EAAEA,WAAW,GAAG,KAAhB,KAA0BD,MAAhC;IACA,KAAKC,WAAL,GAAmBA,WAAnB;EACD;EAED;;;;;;;;;;;EAWAC,iBAAiB,CAACC,MAAD,EAA4BC,WAA5B,EAA+C,KAA9CD,MAA8C,cAA9CA,MAA8C,GAA3B,CAAC,CAAD,EAAI,CAAJ,CAA2B,MAAnBC,WAAmB,cAAnBA,WAAmB,GAAL,KAAK;IAC9D,MAAMC,KAAK,GAAGb,WAAW,GAAWc,WAAtB,CAAkCb,cAAlC,EAAkDc,KAAlD,CAAwD,IAAxD,CAAd;IAEA,OAAOH,WAAW,IAAID,MAAM,CAACK,MAAP,KAAkB,KAAKC,MAAL,CAAYD,MAA7C;IACHH,KAAK,CAACF,MAAN,CAAaA,MAAb,EAAqBO,KAArB,CAA2B,KAAKC,SAAL,CAAeR,MAAM,CAACK,MAAtB,CAA3B,CADG;IAEHH,KAAK;IACFF,MADH,CAEIP,QAAQ,CAACD,SAAS,CAACD,iBAAD,EAAoBS,MAApB,CAAV,EAAuC,KAAKM,MAAL,CAAYD,MAAnD,CAFZ;IAIGE,KAJH,CAIS,KAAKD,MAJd,CAFJ;EAOD;EAED;;;;;;;;EAQAE,SAAS,CACPC,SADO,EAEPC,MAFO,EAEkB,KADzBD,SACyB,cADzBA,SACyB,GADb,KAAKH,MAAL,CAAYD,MACC,MAAzBK,MAAyB,cAAzBA,MAAyB,GAAN,CAAC,CAAD,EAAI,CAAJ,CAAM;IAEzB,IACED,SAAS,KAAK,KAAKH,MAAL,CAAYD,MAA1B;IACAK,MAAM,CAAC,CAAD,CAAN,KAAc,CADd;IAEAA,MAAM,CAAC,CAAD,CAAN,KAAc,CAHhB,EAIE;MACA,OAAO,KAAKJ,MAAZ;IACD;IAED,MAAMK,cAAc,GAA0BnB,SAAS,CACrDF,cADqD,EAErD,KAAKgB,MAFgD,CAAvD;IAIA,MAAMM,YAAY,GAAGvB,WAAW,GAAGkB,KAAd,CAAoBG,MAApB,EAA4BN,KAA5B,CAAkC,IAAlC,CAArB;IAEA,OAAOX,QAAQ,CACb,EAAC,KAAIkB,cAAc,CAACC,YAAY,CAACC,CAAD,CAAb,CADN,EAEbJ,SAFa,CAAf;EAID,CA9DsD","names":["scaleLinear","interpolateHcl","interpolateNumber","piecewise","quantize","ColorScheme","SequentialScheme","constructor","config","isDiverging","createLinearScale","domain","modifyRange","scale","interpolate","clamp","length","colors","range","getColors","numColors","extent","piecewiseScale","adjustExtent","t"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/packages/superset-ui-core/src/color/SequentialScheme.ts"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { scaleLinear } from 'd3-scale';\nimport {\n  interpolateHcl,\n  interpolateNumber,\n  piecewise,\n  quantize,\n} from 'd3-interpolate';\nimport ColorScheme, { ColorSchemeConfig } from './ColorScheme';\n\nexport interface SequentialSchemeConfig extends ColorSchemeConfig {\n  isDiverging?: boolean;\n}\n\nexport default class SequentialScheme extends ColorScheme {\n  isDiverging: boolean;\n\n  constructor(config: SequentialSchemeConfig) {\n    super(config);\n    const { isDiverging = false } = config;\n    this.isDiverging = isDiverging;\n  }\n\n  /**\n   * Return a linear scale with a new domain interpolated from the input domain\n   * to match the number of elements in the color scheme\n   * because D3 continuous scale uses piecewise mapping between domain and range.\n   * This is a common use-case when the domain is [min, max]\n   * and the palette has more than two colors.\n   *\n   * @param domain domain of the scale\n   * @param modifyRange Set this to true if you don't want to modify the domain and\n   * want to interpolate range to have the same number of elements with domain instead.\n   */\n  createLinearScale(domain: number[] = [0, 1], modifyRange = false) {\n    const scale = scaleLinear<string>().interpolate(interpolateHcl).clamp(true);\n\n    return modifyRange || domain.length === this.colors.length\n      ? scale.domain(domain).range(this.getColors(domain.length))\n      : scale\n          .domain(\n            quantize(piecewise(interpolateNumber, domain), this.colors.length),\n          )\n          .range(this.colors);\n  }\n\n  /**\n   * Get colors from this scheme\n   * @param numColors number of colors to return.\n   * Will interpolate the current scheme to match the number of colors requested\n   * @param extent The extent of the color range to use.\n   * For example [0.2, 1] will rescale the color scheme\n   * such that color values in the range [0, 0.2) are excluded from the scheme.\n   */\n  getColors(\n    numColors = this.colors.length,\n    extent: number[] = [0, 1],\n  ): string[] {\n    if (\n      numColors === this.colors.length &&\n      extent[0] === 0 &&\n      extent[1] === 1\n    ) {\n      return this.colors;\n    }\n\n    const piecewiseScale: (t: number) => string = piecewise(\n      interpolateHcl,\n      this.colors,\n    );\n    const adjustExtent = scaleLinear().range(extent).clamp(true);\n\n    return quantize<string>(\n      t => piecewiseScale(adjustExtent(t) as number),\n      numColors,\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}