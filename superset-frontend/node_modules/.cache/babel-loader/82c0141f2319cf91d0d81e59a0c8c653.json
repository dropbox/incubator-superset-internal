{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { isAdhocMetricSimple, isAdhocMetricSQL, isSavedMetric, isSimpleAdhocFilter } from '@superset-ui/core';\nconst isControlValueCompatibleWithDatasource = (datasource, controlState, value) => {\n  if (controlState.options && typeof value === 'string') {\n    if (controlState.options.some((option) => Array.isArray(option) ?\n    option[0] === value :\n    option.column_name === value)) {\n      return datasource.columns.some((column) => column.column_name === value);\n    }\n  }\n  if (controlState.savedMetrics &&\n  isSavedMetric(value) &&\n  controlState.savedMetrics.some((savedMetric) => savedMetric.metric_name === value)) {\n    return datasource.metrics.some((metric) => metric.metric_name === value);\n  }\n  if (controlState.columns && (\n  isAdhocMetricSimple(value) || isSimpleAdhocFilter(value)) &&\n  controlState.columns.some((column) => {var _value$column;return column.column_name === ((_value$column = value.column) == null ? void 0 : _value$column.column_name) ||\n    column.column_name === value.subject;})) {\n    return datasource.columns.some((column) => {var _value$column2;return column.column_name === ((_value$column2 = value.column) == null ? void 0 : _value$column2.column_name) ||\n      column.column_name === value.subject;});\n  }\n  if (isAdhocMetricSQL(value)) {\n    Object.assign(value, { datasourceWarning: true });\n    return true;\n  }\n  return false;\n};\nexport const getControlValuesCompatibleWithDatasource = (datasource, controlState, value) => {\n  if (value === undefined || value === null) {\n    return undefined;\n  }\n  if (Array.isArray(value)) {\n    const compatibleValues = value.filter((val) => isControlValueCompatibleWithDatasource(datasource, controlState, val));\n    return compatibleValues.length > 0 ?\n    compatibleValues :\n    controlState.default;\n  }\n  return isControlValueCompatibleWithDatasource(datasource, controlState, value) ?\n  value :\n  controlState.default;\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAoBA,SAEEA,mBAFF,EAGEC,gBAHF,EAIEC,aAJF,EAKEC,mBALF,QAQO,mBARP;AAWA,MAAMC,sCAAsC,GAAG,CAC7CC,UAD6C,EAE7CC,YAF6C,EAG7CC,KAH6C,KAI3C;EACF,IAAID,YAAY,CAACE,OAAb,IAAwB,OAAOD,KAAP,KAAiB,QAA7C,EAAuD;IACrD,IACED,YAAY,CAACE,OAAb,CAAqBC,IAArB,CACE,CAACC,MAAD,KACEC,KAAK,CAACC,OAAN,CAAcF,MAAd;IACIA,MAAM,CAAC,CAAD,CAAN,KAAcH,KADlB;IAEIG,MAAM,CAACG,WAAP,KAAuBN,KAJ/B,CADF,EAOE;MACA,OAAOF,UAAU,CAACS,OAAX,CAAmBL,IAAnB,CAAwB,OAAM,KAAIM,MAAM,CAACF,WAAP,KAAuBN,KAAzD,CAAP;IACD;EACF;EACD,IACED,YAAY,CAACU,YAAb;EACAd,aAAa,CAACK,KAAD,CADb;EAEAD,YAAY,CAACU,YAAb,CAA0BP,IAA1B,CACE,CAACQ,WAAD,KAAyBA,WAAW,CAACC,WAAZ,KAA4BX,KADvD,CAHF,EAME;IACA,OAAOF,UAAU,CAACc,OAAX,CAAmBV,IAAnB,CACL,CAACW,MAAD,KAAoBA,MAAM,CAACF,WAAP,KAAuBX,KADtC,CAAP;EAGD;EACD,IACED,YAAY,CAACQ,OAAb;EACCd,mBAAmB,CAACO,KAAD,CAAnB,IAA8BJ,mBAAmB,CAACI,KAAD,CADlD;EAEAD,YAAY,CAACQ,OAAb,CAAqBL,IAArB,CACE,CAACM,MAAD,+BACEA,MAAM,CAACF,WAAP,uBAAwBN,KAAqB,CAACQ,MAA9C,qBAAwB,cAA8BF,WAAtD;IACAE,MAAM,CAACF,WAAP,KAAwBN,KAA2B,CAACc,OAFtD,EADF,CAHF,EAQE;IACA,OAAOhB,UAAU,CAACS,OAAX,CAAmBL,IAAnB,CACL,CAACM,MAAD,gCACEA,MAAM,CAACF,WAAP,wBAAwBN,KAAqB,CAACQ,MAA9C,qBAAwB,eAA8BF,WAAtD;MACAE,MAAM,CAACF,WAAP,KAAwBN,KAA2B,CAACc,OAFtD,EADK,CAAP;EAKD;EACD,IAAIpB,gBAAgB,CAACM,KAAD,CAApB,EAA6B;IAC3Be,MAAM,CAACC,MAAP,CAAchB,KAAd,EAAqB,EAAEiB,iBAAiB,EAAE,IAArB,EAArB;IACA,OAAO,IAAP;EACD;EACD,OAAO,KAAP;AACD,CAhDD;AAkDA,OAAO,MAAMC,wCAAwC,GAAG,CACtDpB,UADsD,EAEtDC,YAFsD,EAGtDC,KAHsD,KAIpD;EACF,IAAIA,KAAK,KAAKmB,SAAV,IAAuBnB,KAAK,KAAK,IAArC,EAA2C;IACzC,OAAOmB,SAAP;EACD;EACD,IAAIf,KAAK,CAACC,OAAN,CAAcL,KAAd,CAAJ,EAA0B;IACxB,MAAMoB,gBAAgB,GAAGpB,KAAK,CAACqB,MAAN,CAAa,IAAG,KACvCxB,sCAAsC,CAACC,UAAD,EAAaC,YAAb,EAA2BuB,GAA3B,CADf,CAAzB;IAGA,OAAOF,gBAAgB,CAACG,MAAjB,GAA0B,CAA1B;IACHH,gBADG;IAEHrB,YAAY,CAACyB,OAFjB;EAGD;EACD,OAAO3B,sCAAsC,CAACC,UAAD,EAAaC,YAAb,EAA2BC,KAA3B,CAAtC;EACHA,KADG;EAEHD,YAAY,CAACyB,OAFjB;AAGD,CAnBM","names":["isAdhocMetricSimple","isAdhocMetricSQL","isSavedMetric","isSimpleAdhocFilter","isControlValueCompatibleWithDatasource","datasource","controlState","value","options","some","option","Array","isArray","column_name","columns","column","savedMetrics","savedMetric","metric_name","metrics","metric","subject","Object","assign","datasourceWarning","getControlValuesCompatibleWithDatasource","undefined","compatibleValues","filter","val","length","default"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/controlUtils/getControlValuesCompatibleWithDatasource.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { ControlState, Dataset, Metric } from '@superset-ui/chart-controls';\nimport {\n  Column,\n  isAdhocMetricSimple,\n  isAdhocMetricSQL,\n  isSavedMetric,\n  isSimpleAdhocFilter,\n  JsonValue,\n  SimpleAdhocFilter,\n} from '@superset-ui/core';\nimport AdhocMetric from 'src/explore/components/controls/MetricControl/AdhocMetric';\n\nconst isControlValueCompatibleWithDatasource = (\n  datasource: Dataset,\n  controlState: ControlState,\n  value: any,\n) => {\n  if (controlState.options && typeof value === 'string') {\n    if (\n      controlState.options.some(\n        (option: [string | number, string] | { column_name: string }) =>\n          Array.isArray(option)\n            ? option[0] === value\n            : option.column_name === value,\n      )\n    ) {\n      return datasource.columns.some(column => column.column_name === value);\n    }\n  }\n  if (\n    controlState.savedMetrics &&\n    isSavedMetric(value) &&\n    controlState.savedMetrics.some(\n      (savedMetric: Metric) => savedMetric.metric_name === value,\n    )\n  ) {\n    return datasource.metrics.some(\n      (metric: Metric) => metric.metric_name === value,\n    );\n  }\n  if (\n    controlState.columns &&\n    (isAdhocMetricSimple(value) || isSimpleAdhocFilter(value)) &&\n    controlState.columns.some(\n      (column: Column) =>\n        column.column_name === (value as AdhocMetric).column?.column_name ||\n        column.column_name === (value as SimpleAdhocFilter).subject,\n    )\n  ) {\n    return datasource.columns.some(\n      (column: Column) =>\n        column.column_name === (value as AdhocMetric).column?.column_name ||\n        column.column_name === (value as SimpleAdhocFilter).subject,\n    );\n  }\n  if (isAdhocMetricSQL(value)) {\n    Object.assign(value, { datasourceWarning: true });\n    return true;\n  }\n  return false;\n};\n\nexport const getControlValuesCompatibleWithDatasource = (\n  datasource: Dataset,\n  controlState: ControlState,\n  value: JsonValue,\n) => {\n  if (value === undefined || value === null) {\n    return undefined;\n  }\n  if (Array.isArray(value)) {\n    const compatibleValues = value.filter(val =>\n      isControlValueCompatibleWithDatasource(datasource, controlState, val),\n    );\n    return compatibleValues.length > 0\n      ? compatibleValues\n      : controlState.default;\n  }\n  return isControlValueCompatibleWithDatasource(datasource, controlState, value)\n    ? value\n    : controlState.default;\n};\n"]},"metadata":{},"sourceType":"module"}