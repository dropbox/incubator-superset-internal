{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useState } from 'react';\nimport { css, t, getChartMetadataRegistry, styled } from '@superset-ui/core';\nimport { usePluginContext } from 'src/components/DynamicPlugins';\nimport Modal from 'src/components/Modal';\nimport { noOp } from 'src/utils/common';\nimport getBootstrapData from 'src/utils/getBootstrapData';\nimport VizTypeGallery, { MAX_ADVISABLE_VIZ_GALLERY_WIDTH } from './VizTypeGallery';\nimport { FastVizSwitcher } from './FastVizSwitcher';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst bootstrapData = getBootstrapData();\nconst denyList = bootstrapData.common.conf.VIZ_TYPE_DENYLIST || [];\nconst metadataRegistry = getChartMetadataRegistry();\nexport const VIZ_TYPE_CONTROL_TEST_ID = 'viz-type-control';\nfunction VizSupportValidation(_ref) {let { vizType } = _ref;\n  const state = usePluginContext();\n  if (state.loading || metadataRegistry.has(vizType)) {\n    return null;\n  }\n  return ___EmotionJSX(\"div\", { className: \"text-danger\", css: (theme) => css`\n        margin-top: ${theme.gridUnit}px;\n      ` },\n  ___EmotionJSX(\"i\", { className: \"fa fa-exclamation-circle text-danger\" }), ' ',\n  ___EmotionJSX(\"small\", null, t('This visualization type is not supported.')));\n\n}__signature__(VizSupportValidation, \"usePluginContext{state}\", () => [usePluginContext]);\nconst UnpaddedModal = styled(Modal)`\n  .ant-modal-body {\n    padding: 0;\n  }\n`;\n/** Manages the viz type and the viz picker modal */\nconst VizTypeControl = (_ref2) => {let { value: initialValue, onChange = noOp, isModalOpenInit } = _ref2;\n  const [showModal, setShowModal] = useState(!!isModalOpenInit);\n  // a trick to force re-initialization of the gallery each time the modal opens,\n  // ensuring that the modal always opens to the correct category.\n  const [modalKey, setModalKey] = useState(0);\n  const [selectedViz, setSelectedViz] = useState(initialValue);\n  const openModal = useCallback(() => {\n    setShowModal(true);\n  }, []);\n  const onSubmit = useCallback(() => {\n    onChange(selectedViz);\n    setShowModal(false);\n  }, [selectedViz, onChange]);\n  const onCancel = useCallback(() => {\n    setShowModal(false);\n    setModalKey((key) => key + 1);\n    // make sure the modal re-opens to the last submitted viz\n    setSelectedViz(initialValue);\n  }, [initialValue]);\n  return ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(\"div\", { css: (theme) => css`\n          min-width: ${theme.gridUnit * 72}px;\n          max-width: fit-content;\n        ` },\n  ___EmotionJSX(FastVizSwitcher, { onChange: onChange, currentSelection: initialValue }),\n  initialValue && ___EmotionJSX(VizSupportValidation, { vizType: initialValue })),\n\n  ___EmotionJSX(\"div\", { css: (theme) => css`\n          display: flex;\n          justify-content: flex-end;\n          margin-top: ${theme.gridUnit * 3}px;\n          color: ${theme.colors.grayscale.base};\n          text-decoration: underline;\n        ` },\n  ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, onClick: openModal },\n  t('View all charts'))),\n\n\n  ___EmotionJSX(UnpaddedModal, { show: showModal, onHide: onCancel, title: t('Select a visualization type'), primaryButtonName: t('Select'), disablePrimaryButton: !selectedViz, onHandledPrimaryAction: onSubmit, maxWidth: `${MAX_ADVISABLE_VIZ_GALLERY_WIDTH}px`, responsive: true },\n\n  ___EmotionJSX(VizTypeGallery, { key: modalKey, selectedViz: selectedViz, onChange: setSelectedViz, onDoubleClick: onSubmit, denyList: denyList })));\n\n\n};__signature__(VizTypeControl, \"useState{[showModal, setShowModal](!!isModalOpenInit)}\\nuseState{[modalKey, setModalKey](0)}\\nuseState{[selectedViz, setSelectedViz](initialValue)}\\nuseCallback{openModal}\\nuseCallback{onSubmit}\\nuseCallback{onCancel}\");const _default =\nVizTypeControl;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(bootstrapData, \"bootstrapData\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/controls/VizTypeControl/index.tsx\");reactHotLoader.register(denyList, \"denyList\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/controls/VizTypeControl/index.tsx\");reactHotLoader.register(metadataRegistry, \"metadataRegistry\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/controls/VizTypeControl/index.tsx\");reactHotLoader.register(VIZ_TYPE_CONTROL_TEST_ID, \"VIZ_TYPE_CONTROL_TEST_ID\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/controls/VizTypeControl/index.tsx\");reactHotLoader.register(VizSupportValidation, \"VizSupportValidation\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/controls/VizTypeControl/index.tsx\");reactHotLoader.register(UnpaddedModal, \"UnpaddedModal\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/controls/VizTypeControl/index.tsx\");reactHotLoader.register(VizTypeControl, \"VizTypeControl\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/controls/VizTypeControl/index.tsx\");reactHotLoader.register(_default, \"default\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/controls/VizTypeControl/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"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","names":["React","useCallback","useState","css","t","getChartMetadataRegistry","styled","usePluginContext","Modal","noOp","getBootstrapData","VizTypeGallery","MAX_ADVISABLE_VIZ_GALLERY_WIDTH","FastVizSwitcher","bootstrapData","denyList","common","conf","VIZ_TYPE_DENYLIST","metadataRegistry","VIZ_TYPE_CONTROL_TEST_ID","VizSupportValidation","vizType","state","loading","has","theme","gridUnit","UnpaddedModal","VizTypeControl","value","initialValue","onChange","isModalOpenInit","showModal","setShowModal","modalKey","setModalKey","selectedViz","setSelectedViz","openModal","onSubmit","onCancel","key","colors","grayscale","base"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/controls/VizTypeControl/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useState } from 'react';\nimport {\n  css,\n  t,\n  getChartMetadataRegistry,\n  styled,\n  SupersetTheme,\n} from '@superset-ui/core';\nimport { usePluginContext } from 'src/components/DynamicPlugins';\nimport Modal from 'src/components/Modal';\nimport { noOp } from 'src/utils/common';\nimport getBootstrapData from 'src/utils/getBootstrapData';\nimport VizTypeGallery, {\n  MAX_ADVISABLE_VIZ_GALLERY_WIDTH,\n} from './VizTypeGallery';\nimport { FastVizSwitcher } from './FastVizSwitcher';\n\ninterface VizTypeControlProps {\n  description?: string;\n  label?: string;\n  name: string;\n  onChange: (vizType: string | null) => void;\n  value: string | null;\n  isModalOpenInit?: boolean;\n}\n\nconst bootstrapData = getBootstrapData();\nconst denyList: string[] = bootstrapData.common.conf.VIZ_TYPE_DENYLIST || [];\nconst metadataRegistry = getChartMetadataRegistry();\n\nexport const VIZ_TYPE_CONTROL_TEST_ID = 'viz-type-control';\n\nfunction VizSupportValidation({ vizType }: { vizType: string }) {\n  const state = usePluginContext();\n  if (state.loading || metadataRegistry.has(vizType)) {\n    return null;\n  }\n  return (\n    <div\n      className=\"text-danger\"\n      css={(theme: SupersetTheme) => css`\n        margin-top: ${theme.gridUnit}px;\n      `}\n    >\n      <i className=\"fa fa-exclamation-circle text-danger\" />{' '}\n      <small>{t('This visualization type is not supported.')}</small>\n    </div>\n  );\n}\n\nconst UnpaddedModal = styled(Modal)`\n  .ant-modal-body {\n    padding: 0;\n  }\n`;\n\n/** Manages the viz type and the viz picker modal */\nconst VizTypeControl = ({\n  value: initialValue,\n  onChange = noOp,\n  isModalOpenInit,\n}: VizTypeControlProps) => {\n  const [showModal, setShowModal] = useState(!!isModalOpenInit);\n  // a trick to force re-initialization of the gallery each time the modal opens,\n  // ensuring that the modal always opens to the correct category.\n  const [modalKey, setModalKey] = useState(0);\n  const [selectedViz, setSelectedViz] = useState<string | null>(initialValue);\n\n  const openModal = useCallback(() => {\n    setShowModal(true);\n  }, []);\n\n  const onSubmit = useCallback(() => {\n    onChange(selectedViz);\n    setShowModal(false);\n  }, [selectedViz, onChange]);\n\n  const onCancel = useCallback(() => {\n    setShowModal(false);\n    setModalKey(key => key + 1);\n    // make sure the modal re-opens to the last submitted viz\n    setSelectedViz(initialValue);\n  }, [initialValue]);\n\n  return (\n    <>\n      <div\n        css={(theme: SupersetTheme) => css`\n          min-width: ${theme.gridUnit * 72}px;\n          max-width: fit-content;\n        `}\n      >\n        <FastVizSwitcher onChange={onChange} currentSelection={initialValue} />\n        {initialValue && <VizSupportValidation vizType={initialValue} />}\n      </div>\n      <div\n        css={(theme: SupersetTheme) => css`\n          display: flex;\n          justify-content: flex-end;\n          margin-top: ${theme.gridUnit * 3}px;\n          color: ${theme.colors.grayscale.base};\n          text-decoration: underline;\n        `}\n      >\n        <span role=\"button\" tabIndex={0} onClick={openModal}>\n          {t('View all charts')}\n        </span>\n      </div>\n      <UnpaddedModal\n        show={showModal}\n        onHide={onCancel}\n        title={t('Select a visualization type')}\n        primaryButtonName={t('Select')}\n        disablePrimaryButton={!selectedViz}\n        onHandledPrimaryAction={onSubmit}\n        maxWidth={`${MAX_ADVISABLE_VIZ_GALLERY_WIDTH}px`}\n        responsive\n      >\n        {/* When the key increments, it forces react to re-init the gallery component */}\n        <VizTypeGallery\n          key={modalKey}\n          selectedViz={selectedViz}\n          onChange={setSelectedViz}\n          onDoubleClick={onSubmit}\n          denyList={denyList}\n        />\n      </UnpaddedModal>\n    </>\n  );\n};\n\nexport default VizTypeControl;\n"]},"metadata":{},"sourceType":"module"}