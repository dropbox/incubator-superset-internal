{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { styled, css } from '@superset-ui/core';\nimport cx from 'classnames';\nimport { Interweave } from 'interweave';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport Icons from 'src/components/Icons';\nimport { ToastType } from './types';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst ToastContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  span {\n    padding: 0 11px;\n  }\n`;\nconst StyledIcon = (theme) => css`\n  min-width: ${theme.gridUnit * 5}px;\n  color: ${theme.colors.grayscale.base};\n`;\nexport default function Toast(_ref) {let { toast, onCloseToast } = _ref;\n  const hideTimer = useRef();\n  const [visible, setVisible] = useState(false);\n  const showToast = () => {\n    setVisible(true);\n  };\n  const handleClosePress = useCallback(() => {\n    if (hideTimer.current) {\n      clearTimeout(hideTimer.current);\n    }\n    // Wait for the transition\n    setVisible(() => {\n      setTimeout(() => {\n        onCloseToast(toast.id);\n      }, 150);\n      return false;\n    });\n  }, [onCloseToast, toast.id]);\n  useEffect(() => {\n    setTimeout(showToast);\n    if (toast.duration > 0) {\n      hideTimer.current = setTimeout(handleClosePress, toast.duration);\n    }\n    return () => {\n      if (hideTimer.current) {\n        clearTimeout(hideTimer.current);\n      }\n    };\n  }, [handleClosePress, toast.duration]);\n  let className = 'toast--success';\n  let icon = ___EmotionJSX(Icons.CircleCheckSolid, { css: (theme) => StyledIcon(theme) });\n  if (toast.toastType === ToastType.WARNING) {\n    icon = ___EmotionJSX(Icons.WarningSolid, { css: StyledIcon });\n    className = 'toast--warning';\n  } else\n  if (toast.toastType === ToastType.DANGER) {\n    icon = ___EmotionJSX(Icons.ErrorSolid, { css: StyledIcon });\n    className = 'toast--danger';\n  } else\n  if (toast.toastType === ToastType.INFO) {\n    icon = ___EmotionJSX(Icons.InfoSolid, { css: StyledIcon });\n    className = 'toast--info';\n  }\n  return ___EmotionJSX(ToastContainer, { className: cx('alert', 'toast', visible && 'toast--visible', className), role: \"alert\" },\n  icon,\n  ___EmotionJSX(Interweave, { content: toast.text, noHtml: !toast.allowHtml }),\n  ___EmotionJSX(\"i\", { className: \"fa fa-close pull-right pointer\", role: \"button\", tabIndex: 0, onClick: handleClosePress, \"aria-label\": \"Close\" }));\n\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,SAASA,MAAT,EAAiBC,GAAjB,QAA2C,mBAA3C;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,SAASC,UAAT,QAA2B,YAA3B;AACA,OAAOC,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,MAAxC,EAAgDC,QAAhD,QAAgE,OAAhE;AACA,OAAOC,KAAP,MAAkB,sBAAlB;AACA,SAASC,SAAT,QAAqC,SAArC,C;AAEA,MAAMC,cAAc,GAAGX,MAAM,CAACY,GAAG;;;;;;;;CAAjC;AAUA,MAAMC,UAAU,GAAG,CAACC,KAAD,KAA0Bb,GAAG;eACjCa,KAAK,CAACC,QAAN,GAAiB,CAAC;WACtBD,KAAK,CAACE,MAAN,CAAaC,SAAb,CAAuBC,IAAI;CAFtC;AAUA,eAAc,SAAUC,KAAV,OAA4D,KAA5C,EAAEC,KAAF,EAASC,YAAT,EAA4C;EACxE,MAAMC,SAAS,GAAGf,MAAM,EAAxB;EACA,MAAM,CAACgB,OAAD,EAAUC,UAAV,IAAwBhB,QAAQ,CAAC,KAAD,CAAtC;EACA,MAAMiB,SAAS,GAAG,MAAK;IACrBD,UAAU,CAAC,IAAD,CAAV;EACD,CAFD;EAIA,MAAME,gBAAgB,GAAGrB,WAAW,CAAC,MAAK;IACxC,IAAIiB,SAAS,CAACK,OAAd,EAAuB;MACrBC,YAAY,CAACN,SAAS,CAACK,OAAX,CAAZ;IACD;IACD;IACAH,UAAU,CAAC,MAAK;MACdK,UAAU,CAAC,MAAK;QACdR,YAAY,CAACD,KAAK,CAACU,EAAP,CAAZ;MACD,CAFS,EAEP,GAFO,CAAV;MAGA,OAAO,KAAP;IACD,CALS,CAAV;EAMD,CAXmC,EAWjC,CAACT,YAAD,EAAeD,KAAK,CAACU,EAArB,CAXiC,CAApC;EAaAxB,SAAS,CAAC,MAAK;IACbuB,UAAU,CAACJ,SAAD,CAAV;IAEA,IAAIL,KAAK,CAACW,QAAN,GAAiB,CAArB,EAAwB;MACtBT,SAAS,CAACK,OAAV,GAAoBE,UAAU,CAACH,gBAAD,EAAmBN,KAAK,CAACW,QAAzB,CAA9B;IACD;IACD,OAAO,MAAK;MACV,IAAIT,SAAS,CAACK,OAAd,EAAuB;QACrBC,YAAY,CAACN,SAAS,CAACK,OAAX,CAAZ;MACD;IACF,CAJD;EAKD,CAXQ,EAWN,CAACD,gBAAD,EAAmBN,KAAK,CAACW,QAAzB,CAXM,CAAT;EAaA,IAAIC,SAAS,GAAG,gBAAhB;EACA,IAAIC,IAAI,GAAG,cAAC,KAAD,CAAO,gBAAP,IAAwB,GAAG,EAAE,MAAK,KAAIpB,UAAU,CAACC,KAAD,CAAhD,GAAX;EAEA,IAAIM,KAAK,CAACc,SAAN,KAAoBxB,SAAS,CAACyB,OAAlC,EAA2C;IACzCF,IAAI,GAAG,cAAC,KAAD,CAAO,YAAP,IAAoB,GAAG,EAAEpB,UAAzB,GAAP;IACAmB,SAAS,GAAG,gBAAZ;EACD,CAHD;EAGO,IAAIZ,KAAK,CAACc,SAAN,KAAoBxB,SAAS,CAAC0B,MAAlC,EAA0C;IAC/CH,IAAI,GAAG,cAAC,KAAD,CAAO,UAAP,IAAkB,GAAG,EAAEpB,UAAvB,GAAP;IACAmB,SAAS,GAAG,eAAZ;EACD,CAHM;EAGA,IAAIZ,KAAK,CAACc,SAAN,KAAoBxB,SAAS,CAAC2B,IAAlC,EAAwC;IAC7CJ,IAAI,GAAG,cAAC,KAAD,CAAO,SAAP,IAAiB,GAAG,EAAEpB,UAAtB,GAAP;IACAmB,SAAS,GAAG,aAAZ;EACD;EAED,OACE,cAAC,cAAD,IACE,SAAS,EAAE9B,EAAE,CAAC,OAAD,EAAU,OAAV,EAAmBqB,OAAO,IAAI,gBAA9B,EAAgDS,SAAhD,CADf,EAGE,IAAI,EAAC,OAHP;EAKGC,IALH;EAME,cAAC,UAAD,IAAY,OAAO,EAAEb,KAAK,CAACkB,IAA3B,EAAiC,MAAM,EAAE,CAAClB,KAAK,CAACmB,SAAhD,GANF;EAOE,qBACE,SAAS,EAAC,gCADZ,EAEE,IAAI,EAAC,QAFP,EAGE,QAAQ,EAAE,CAHZ,EAIE,OAAO,EAAEb,gBAJX,EAKE,cAAW,OALb,GAPF,CADF;;AAkBD","names":["styled","css","cx","Interweave","React","useCallback","useEffect","useRef","useState","Icons","ToastType","ToastContainer","div","StyledIcon","theme","gridUnit","colors","grayscale","base","Toast","toast","onCloseToast","hideTimer","visible","setVisible","showToast","handleClosePress","current","clearTimeout","setTimeout","id","duration","className","icon","toastType","WARNING","DANGER","INFO","text","allowHtml"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/MessageToasts/Toast.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { styled, css, SupersetTheme } from '@superset-ui/core';\nimport cx from 'classnames';\nimport { Interweave } from 'interweave';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport Icons from 'src/components/Icons';\nimport { ToastType, ToastMeta } from './types';\n\nconst ToastContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  span {\n    padding: 0 11px;\n  }\n`;\n\nconst StyledIcon = (theme: SupersetTheme) => css`\n  min-width: ${theme.gridUnit * 5}px;\n  color: ${theme.colors.grayscale.base};\n`;\n\ninterface ToastPresenterProps {\n  toast: ToastMeta;\n  onCloseToast: (id: string) => void;\n}\n\nexport default function Toast({ toast, onCloseToast }: ToastPresenterProps) {\n  const hideTimer = useRef<ReturnType<typeof setTimeout>>();\n  const [visible, setVisible] = useState(false);\n  const showToast = () => {\n    setVisible(true);\n  };\n\n  const handleClosePress = useCallback(() => {\n    if (hideTimer.current) {\n      clearTimeout(hideTimer.current);\n    }\n    // Wait for the transition\n    setVisible(() => {\n      setTimeout(() => {\n        onCloseToast(toast.id);\n      }, 150);\n      return false;\n    });\n  }, [onCloseToast, toast.id]);\n\n  useEffect(() => {\n    setTimeout(showToast);\n\n    if (toast.duration > 0) {\n      hideTimer.current = setTimeout(handleClosePress, toast.duration);\n    }\n    return () => {\n      if (hideTimer.current) {\n        clearTimeout(hideTimer.current);\n      }\n    };\n  }, [handleClosePress, toast.duration]);\n\n  let className = 'toast--success';\n  let icon = <Icons.CircleCheckSolid css={theme => StyledIcon(theme)} />;\n\n  if (toast.toastType === ToastType.WARNING) {\n    icon = <Icons.WarningSolid css={StyledIcon} />;\n    className = 'toast--warning';\n  } else if (toast.toastType === ToastType.DANGER) {\n    icon = <Icons.ErrorSolid css={StyledIcon} />;\n    className = 'toast--danger';\n  } else if (toast.toastType === ToastType.INFO) {\n    icon = <Icons.InfoSolid css={StyledIcon} />;\n    className = 'toast--info';\n  }\n\n  return (\n    <ToastContainer\n      className={cx('alert', 'toast', visible && 'toast--visible', className)}\n      data-test=\"toast-container\"\n      role=\"alert\"\n    >\n      {icon}\n      <Interweave content={toast.text} noHtml={!toast.allowHtml} />\n      <i\n        className=\"fa fa-close pull-right pointer\"\n        role=\"button\"\n        tabIndex={0}\n        onClick={handleClosePress}\n        aria-label=\"Close\"\n        data-test=\"close-button\"\n      />\n    </ToastContainer>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}