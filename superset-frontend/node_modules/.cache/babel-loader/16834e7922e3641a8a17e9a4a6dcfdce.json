{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport pick from 'lodash/pick';\nimport PropTypes from 'prop-types';\nimport { EditableTabs } from 'src/components/Tabs';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport URI from 'urijs';\nimport { FeatureFlag, styled, t, isFeatureEnabled } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { detectOS } from 'src/utils/common';\nimport * as Actions from 'src/SqlLab/actions/sqlLab';\nimport { EmptyStateBig } from 'src/components/EmptyState';\nimport getBootstrapData from 'src/utils/getBootstrapData';\nimport SqlEditor from '../SqlEditor';\nimport SqlEditorTabHeader from '../SqlEditorTabHeader';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  actions: PropTypes.object.isRequired,\n  defaultDbId: PropTypes.number,\n  displayLimit: PropTypes.number,\n  defaultQueryLimit: PropTypes.number.isRequired,\n  maxRow: PropTypes.number.isRequired,\n  databases: PropTypes.object.isRequired,\n  queries: PropTypes.object.isRequired,\n  queryEditors: PropTypes.array,\n  tabHistory: PropTypes.array.isRequired,\n  tables: PropTypes.array.isRequired,\n  offline: PropTypes.bool,\n  saveQueryWarning: PropTypes.string,\n  scheduleQueryWarning: PropTypes.string };\n\nconst defaultProps = {\n  queryEditors: [],\n  offline: false,\n  saveQueryWarning: null,\n  scheduleQueryWarning: null };\n\n\nconst StyledEditableTabs = styled(EditableTabs)`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst StyledTab = styled.span`\n  line-height: 24px;\n`;\n\nconst TabTitle = styled.span`\n  margin-right: ${(_ref) => {let { theme } = _ref;return theme.gridUnit * 2;}}px;\n  text-transform: none;\n`;\n\n// Get the user's OS\nconst userOS = detectOS();\n\nclass TabbedSqlEditors extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    const sqlLabUrl = '/superset/sqllab';\n    this.state = {\n      sqlLabUrl };\n\n    this.removeQueryEditor = this.removeQueryEditor.bind(this);\n    this.duplicateQueryEditor = this.duplicateQueryEditor.bind(this);\n    this.handleSelect = this.handleSelect.bind(this);\n    this.handleEdit = this.handleEdit.bind(this);\n  }\n\n  componentDidMount() {\n    // migrate query editor and associated tables state to server\n    if (isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)) {\n      const localStorageTables = this.props.tables.filter(\n      (table) => table.inLocalStorage);\n\n      const localStorageQueries = Object.values(this.props.queries).filter(\n      (query) => query.inLocalStorage);\n\n      this.props.queryEditors.\n      filter((qe) => qe.inLocalStorage).\n      forEach((qe) => {\n        // get all queries associated with the query editor\n        const queries = localStorageQueries.filter(\n        (query) => query.sqlEditorId === qe.id);\n\n        const tables = localStorageTables.filter(\n        (table) => table.queryEditorId === qe.id);\n\n        this.props.actions.migrateQueryEditorFromLocalStorage(\n        qe,\n        tables,\n        queries);\n\n      });\n    }\n\n    // merge post form data with GET search params\n    // Hack: this data should be coming from getInitialState\n    // but for some reason this data isn't being passed properly through\n    // the reducer.\n    const bootstrapData = getBootstrapData();\n    const queryParameters = URI(window.location).search(true);\n    const {\n      id,\n      name,\n      sql,\n      savedQueryId,\n      datasourceKey,\n      queryId,\n      dbid,\n      dbname,\n      schema,\n      autorun,\n      new: isNewQuery,\n      ...urlParams } =\n    {\n      ...bootstrapData.requested_query,\n      ...queryParameters };\n\n\n    // Popping a new tab based on the querystring\n    if (id || sql || savedQueryId || datasourceKey || queryId) {\n      if (id) {\n        this.props.actions.popStoredQuery(id);\n      } else if (savedQueryId) {\n        this.props.actions.popSavedQuery(savedQueryId);\n      } else if (queryId) {\n        this.props.actions.popQuery(queryId);\n      } else if (datasourceKey) {\n        this.props.actions.popDatasourceQuery(datasourceKey, sql);\n      } else if (sql) {\n        let databaseId = dbid;\n        if (databaseId) {\n          databaseId = parseInt(databaseId, 10);\n        } else {\n          const { databases } = this.props;\n          const databaseName = dbname;\n          if (databaseName) {\n            Object.keys(databases).forEach((db) => {\n              if (databases[db].database_name === databaseName) {\n                databaseId = databases[db].id;\n              }\n            });\n          }\n        }\n        const newQueryEditor = {\n          name,\n          dbId: databaseId,\n          schema,\n          autorun,\n          sql };\n\n        this.props.actions.addQueryEditor(newQueryEditor);\n      }\n      this.popNewTab(pick(urlParams, Object.keys(queryParameters)));\n    } else if (isNewQuery || this.props.queryEditors.length === 0) {\n      this.newQueryEditor();\n\n      if (isNewQuery) {\n        window.history.replaceState({}, document.title, this.state.sqlLabUrl);\n      }\n    } else {\n      const qe = this.activeQueryEditor();\n      const latestQuery = this.props.queries[qe.latestQueryId];\n      if (\n      isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) &&\n      latestQuery &&\n      latestQuery.resultsKey)\n      {\n        // when results are not stored in localStorage they need to be\n        // fetched from the results backend (if configured)\n        this.props.actions.fetchQueryResults(\n        latestQuery,\n        this.props.displayLimit);\n\n      }\n    }\n  }\n\n  popNewTab(urlParams) {\n    // Clean the url in browser history\n    const updatedUrl = `${URI(this.state.sqlLabUrl).query(urlParams)}`;\n    window.history.replaceState({}, document.title, updatedUrl);\n  }\n\n  activeQueryEditor() {\n    if (this.props.tabHistory.length === 0) {\n      return this.props.queryEditors[0];\n    }\n    const qeid = this.props.tabHistory[this.props.tabHistory.length - 1];\n    return this.props.queryEditors.find((qe) => qe.id === qeid) || null;\n  }\n\n  newQueryEditor() {\n    this.props.actions.addNewQueryEditor();\n  }\n\n  handleSelect(key) {\n    const qeid = this.props.tabHistory[this.props.tabHistory.length - 1];\n    if (key !== qeid) {\n      const queryEditor = this.props.queryEditors.find((qe) => qe.id === key);\n      if (!queryEditor) {\n        return;\n      }\n      this.props.actions.switchQueryEditor(\n      queryEditor,\n      this.props.displayLimit);\n\n    }\n  }\n\n  handleEdit(key, action) {\n    if (action === 'remove') {\n      const qe = this.props.queryEditors.find((qe) => qe.id === key);\n      this.removeQueryEditor(qe);\n    }\n    if (action === 'add') {\n      this.newQueryEditor();\n    }\n  }\n\n  removeQueryEditor(qe) {\n    this.props.actions.removeQueryEditor(qe);\n  }\n\n  duplicateQueryEditor(qe) {\n    this.props.actions.cloneQueryToNewTab(qe, false);\n  }\n\n  render() {var _this$props$queryEdit, _this$props$queryEdit2;\n    const noQueryEditors = ((_this$props$queryEdit = this.props.queryEditors) == null ? void 0 : _this$props$queryEdit.length) === 0;\n    const editors = (_this$props$queryEdit2 = this.props.queryEditors) == null ? void 0 : _this$props$queryEdit2.map((qe) =>\n    ___EmotionJSX(EditableTabs.TabPane, {\n      key: qe.id,\n      tab: ___EmotionJSX(SqlEditorTabHeader, { queryEditor: qe })\n      // for tests - key prop isn't handled by enzyme well bcs it's a react keyword\n      , \"data-key\": qe.id },\n\n    ___EmotionJSX(SqlEditor, {\n      tables: this.props.tables.filter((xt) => xt.queryEditorId === qe.id),\n      queryEditor: qe,\n      defaultQueryLimit: this.props.defaultQueryLimit,\n      maxRow: this.props.maxRow,\n      displayLimit: this.props.displayLimit,\n      saveQueryWarning: this.props.saveQueryWarning,\n      scheduleQueryWarning: this.props.scheduleQueryWarning })));\n\n\n\n\n    const emptyTab =\n    ___EmotionJSX(StyledTab, null,\n    ___EmotionJSX(TabTitle, null, t('Add a new tab')),\n    ___EmotionJSX(Tooltip, {\n      id: \"add-tab\",\n      placement: \"bottom\",\n      title:\n      userOS === 'Windows' ?\n      t('New tab (Ctrl + q)') :\n      t('New tab (Ctrl + t)') },\n\n\n    ___EmotionJSX(\"i\", { className: \"fa fa-plus-circle\" })));\n\n\n\n\n    const emptyTabState =\n    ___EmotionJSX(EditableTabs.TabPane, {\n      key: 0,\n      \"data-key\": 0,\n      tab: emptyTab,\n      closable: false },\n\n    ___EmotionJSX(EmptyStateBig, {\n      image: \"empty_sql_chart.svg\",\n      description: t('Add a new tab to create SQL Query') }));\n\n\n\n\n    return (\n      ___EmotionJSX(StyledEditableTabs, {\n        destroyInactiveTabPane: true,\n        activeKey: this.props.tabHistory[this.props.tabHistory.length - 1],\n        id: \"a11y-query-editor-tabs\",\n        className: \"SqlEditorTabs\",\n\n        onChange: this.handleSelect,\n        fullWidth: false,\n        hideAdd: this.props.offline,\n        onTabClick: () => noQueryEditors && this.newQueryEditor(),\n        onEdit: this.handleEdit,\n        type: noQueryEditors ? 'card' : 'editable-card',\n        addIcon:\n        ___EmotionJSX(Tooltip, {\n          id: \"add-tab\",\n          placement: \"bottom\",\n          title:\n          userOS === 'Windows' ?\n          t('New tab (Ctrl + q)') :\n          t('New tab (Ctrl + t)') },\n\n\n        ___EmotionJSX(\"i\", { className: \"fa fa-plus-circle\" })) },\n\n\n\n      editors,\n      noQueryEditors && emptyTabState));\n\n\n  }}\n\nTabbedSqlEditors.propTypes = propTypes;\nTabbedSqlEditors.defaultProps = defaultProps;\n\nfunction mapStateToProps(_ref2) {let { sqlLab, common } = _ref2;\n  return {\n    databases: sqlLab.databases,\n    queryEditors: sqlLab.queryEditors,\n    queries: sqlLab.queries,\n    tabHistory: sqlLab.tabHistory,\n    tables: sqlLab.tables,\n    defaultDbId: sqlLab.defaultDbId,\n    displayLimit: common.conf.DISPLAY_MAX_ROW,\n    offline: sqlLab.offline,\n    defaultQueryLimit: common.conf.DEFAULT_SQLLAB_LIMIT,\n    maxRow: common.conf.SQL_MAX_ROW,\n    saveQueryWarning: common.conf.SQLLAB_SAVE_WARNING_MESSAGE,\n    scheduleQueryWarning: common.conf.SQLLAB_SCHEDULE_WARNING_MESSAGE };\n\n}\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators(Actions, dispatch) };\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TabbedSqlEditors);","map":{"version":3,"names":["React","pick","PropTypes","EditableTabs","connect","bindActionCreators","URI","FeatureFlag","styled","t","isFeatureEnabled","Tooltip","detectOS","Actions","EmptyStateBig","getBootstrapData","SqlEditor","SqlEditorTabHeader","propTypes","actions","object","isRequired","defaultDbId","number","displayLimit","defaultQueryLimit","maxRow","databases","queries","queryEditors","array","tabHistory","tables","offline","bool","saveQueryWarning","string","scheduleQueryWarning","defaultProps","StyledEditableTabs","StyledTab","span","TabTitle","theme","gridUnit","userOS","TabbedSqlEditors","PureComponent","constructor","props","sqlLabUrl","state","removeQueryEditor","bind","duplicateQueryEditor","handleSelect","handleEdit","componentDidMount","SQLLAB_BACKEND_PERSISTENCE","localStorageTables","filter","table","inLocalStorage","localStorageQueries","Object","values","query","qe","forEach","sqlEditorId","id","queryEditorId","migrateQueryEditorFromLocalStorage","bootstrapData","queryParameters","window","location","search","name","sql","savedQueryId","datasourceKey","queryId","dbid","dbname","schema","autorun","new","isNewQuery","urlParams","requested_query","popStoredQuery","popSavedQuery","popQuery","popDatasourceQuery","databaseId","parseInt","databaseName","keys","db","database_name","newQueryEditor","dbId","addQueryEditor","popNewTab","length","history","replaceState","document","title","activeQueryEditor","latestQuery","latestQueryId","resultsKey","fetchQueryResults","updatedUrl","qeid","find","addNewQueryEditor","key","queryEditor","switchQueryEditor","action","cloneQueryToNewTab","render","noQueryEditors","editors","map","xt","emptyTab","emptyTabState","mapStateToProps","sqlLab","common","conf","DISPLAY_MAX_ROW","DEFAULT_SQLLAB_LIMIT","SQL_MAX_ROW","SQLLAB_SAVE_WARNING_MESSAGE","SQLLAB_SCHEDULE_WARNING_MESSAGE","mapDispatchToProps","dispatch"],"sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/SqlLab/components/TabbedSqlEditors/index.jsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport pick from 'lodash/pick';\nimport PropTypes from 'prop-types';\nimport { EditableTabs } from 'src/components/Tabs';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport URI from 'urijs';\nimport { FeatureFlag, styled, t, isFeatureEnabled } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { detectOS } from 'src/utils/common';\nimport * as Actions from 'src/SqlLab/actions/sqlLab';\nimport { EmptyStateBig } from 'src/components/EmptyState';\nimport getBootstrapData from 'src/utils/getBootstrapData';\nimport SqlEditor from '../SqlEditor';\nimport SqlEditorTabHeader from '../SqlEditorTabHeader';\n\nconst propTypes = {\n  actions: PropTypes.object.isRequired,\n  defaultDbId: PropTypes.number,\n  displayLimit: PropTypes.number,\n  defaultQueryLimit: PropTypes.number.isRequired,\n  maxRow: PropTypes.number.isRequired,\n  databases: PropTypes.object.isRequired,\n  queries: PropTypes.object.isRequired,\n  queryEditors: PropTypes.array,\n  tabHistory: PropTypes.array.isRequired,\n  tables: PropTypes.array.isRequired,\n  offline: PropTypes.bool,\n  saveQueryWarning: PropTypes.string,\n  scheduleQueryWarning: PropTypes.string,\n};\nconst defaultProps = {\n  queryEditors: [],\n  offline: false,\n  saveQueryWarning: null,\n  scheduleQueryWarning: null,\n};\n\nconst StyledEditableTabs = styled(EditableTabs)`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst StyledTab = styled.span`\n  line-height: 24px;\n`;\n\nconst TabTitle = styled.span`\n  margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n  text-transform: none;\n`;\n\n// Get the user's OS\nconst userOS = detectOS();\n\nclass TabbedSqlEditors extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    const sqlLabUrl = '/superset/sqllab';\n    this.state = {\n      sqlLabUrl,\n    };\n    this.removeQueryEditor = this.removeQueryEditor.bind(this);\n    this.duplicateQueryEditor = this.duplicateQueryEditor.bind(this);\n    this.handleSelect = this.handleSelect.bind(this);\n    this.handleEdit = this.handleEdit.bind(this);\n  }\n\n  componentDidMount() {\n    // migrate query editor and associated tables state to server\n    if (isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)) {\n      const localStorageTables = this.props.tables.filter(\n        table => table.inLocalStorage,\n      );\n      const localStorageQueries = Object.values(this.props.queries).filter(\n        query => query.inLocalStorage,\n      );\n      this.props.queryEditors\n        .filter(qe => qe.inLocalStorage)\n        .forEach(qe => {\n          // get all queries associated with the query editor\n          const queries = localStorageQueries.filter(\n            query => query.sqlEditorId === qe.id,\n          );\n          const tables = localStorageTables.filter(\n            table => table.queryEditorId === qe.id,\n          );\n          this.props.actions.migrateQueryEditorFromLocalStorage(\n            qe,\n            tables,\n            queries,\n          );\n        });\n    }\n\n    // merge post form data with GET search params\n    // Hack: this data should be coming from getInitialState\n    // but for some reason this data isn't being passed properly through\n    // the reducer.\n    const bootstrapData = getBootstrapData();\n    const queryParameters = URI(window.location).search(true);\n    const {\n      id,\n      name,\n      sql,\n      savedQueryId,\n      datasourceKey,\n      queryId,\n      dbid,\n      dbname,\n      schema,\n      autorun,\n      new: isNewQuery,\n      ...urlParams\n    } = {\n      ...bootstrapData.requested_query,\n      ...queryParameters,\n    };\n\n    // Popping a new tab based on the querystring\n    if (id || sql || savedQueryId || datasourceKey || queryId) {\n      if (id) {\n        this.props.actions.popStoredQuery(id);\n      } else if (savedQueryId) {\n        this.props.actions.popSavedQuery(savedQueryId);\n      } else if (queryId) {\n        this.props.actions.popQuery(queryId);\n      } else if (datasourceKey) {\n        this.props.actions.popDatasourceQuery(datasourceKey, sql);\n      } else if (sql) {\n        let databaseId = dbid;\n        if (databaseId) {\n          databaseId = parseInt(databaseId, 10);\n        } else {\n          const { databases } = this.props;\n          const databaseName = dbname;\n          if (databaseName) {\n            Object.keys(databases).forEach(db => {\n              if (databases[db].database_name === databaseName) {\n                databaseId = databases[db].id;\n              }\n            });\n          }\n        }\n        const newQueryEditor = {\n          name,\n          dbId: databaseId,\n          schema,\n          autorun,\n          sql,\n        };\n        this.props.actions.addQueryEditor(newQueryEditor);\n      }\n      this.popNewTab(pick(urlParams, Object.keys(queryParameters)));\n    } else if (isNewQuery || this.props.queryEditors.length === 0) {\n      this.newQueryEditor();\n\n      if (isNewQuery) {\n        window.history.replaceState({}, document.title, this.state.sqlLabUrl);\n      }\n    } else {\n      const qe = this.activeQueryEditor();\n      const latestQuery = this.props.queries[qe.latestQueryId];\n      if (\n        isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) &&\n        latestQuery &&\n        latestQuery.resultsKey\n      ) {\n        // when results are not stored in localStorage they need to be\n        // fetched from the results backend (if configured)\n        this.props.actions.fetchQueryResults(\n          latestQuery,\n          this.props.displayLimit,\n        );\n      }\n    }\n  }\n\n  popNewTab(urlParams) {\n    // Clean the url in browser history\n    const updatedUrl = `${URI(this.state.sqlLabUrl).query(urlParams)}`;\n    window.history.replaceState({}, document.title, updatedUrl);\n  }\n\n  activeQueryEditor() {\n    if (this.props.tabHistory.length === 0) {\n      return this.props.queryEditors[0];\n    }\n    const qeid = this.props.tabHistory[this.props.tabHistory.length - 1];\n    return this.props.queryEditors.find(qe => qe.id === qeid) || null;\n  }\n\n  newQueryEditor() {\n    this.props.actions.addNewQueryEditor();\n  }\n\n  handleSelect(key) {\n    const qeid = this.props.tabHistory[this.props.tabHistory.length - 1];\n    if (key !== qeid) {\n      const queryEditor = this.props.queryEditors.find(qe => qe.id === key);\n      if (!queryEditor) {\n        return;\n      }\n      this.props.actions.switchQueryEditor(\n        queryEditor,\n        this.props.displayLimit,\n      );\n    }\n  }\n\n  handleEdit(key, action) {\n    if (action === 'remove') {\n      const qe = this.props.queryEditors.find(qe => qe.id === key);\n      this.removeQueryEditor(qe);\n    }\n    if (action === 'add') {\n      this.newQueryEditor();\n    }\n  }\n\n  removeQueryEditor(qe) {\n    this.props.actions.removeQueryEditor(qe);\n  }\n\n  duplicateQueryEditor(qe) {\n    this.props.actions.cloneQueryToNewTab(qe, false);\n  }\n\n  render() {\n    const noQueryEditors = this.props.queryEditors?.length === 0;\n    const editors = this.props.queryEditors?.map(qe => (\n      <EditableTabs.TabPane\n        key={qe.id}\n        tab={<SqlEditorTabHeader queryEditor={qe} />}\n        // for tests - key prop isn't handled by enzyme well bcs it's a react keyword\n        data-key={qe.id}\n      >\n        <SqlEditor\n          tables={this.props.tables.filter(xt => xt.queryEditorId === qe.id)}\n          queryEditor={qe}\n          defaultQueryLimit={this.props.defaultQueryLimit}\n          maxRow={this.props.maxRow}\n          displayLimit={this.props.displayLimit}\n          saveQueryWarning={this.props.saveQueryWarning}\n          scheduleQueryWarning={this.props.scheduleQueryWarning}\n        />\n      </EditableTabs.TabPane>\n    ));\n\n    const emptyTab = (\n      <StyledTab>\n        <TabTitle>{t('Add a new tab')}</TabTitle>\n        <Tooltip\n          id=\"add-tab\"\n          placement=\"bottom\"\n          title={\n            userOS === 'Windows'\n              ? t('New tab (Ctrl + q)')\n              : t('New tab (Ctrl + t)')\n          }\n        >\n          <i data-test=\"add-tab-icon\" className=\"fa fa-plus-circle\" />\n        </Tooltip>\n      </StyledTab>\n    );\n\n    const emptyTabState = (\n      <EditableTabs.TabPane\n        key={0}\n        data-key={0}\n        tab={emptyTab}\n        closable={false}\n      >\n        <EmptyStateBig\n          image=\"empty_sql_chart.svg\"\n          description={t('Add a new tab to create SQL Query')}\n        />\n      </EditableTabs.TabPane>\n    );\n\n    return (\n      <StyledEditableTabs\n        destroyInactiveTabPane\n        activeKey={this.props.tabHistory[this.props.tabHistory.length - 1]}\n        id=\"a11y-query-editor-tabs\"\n        className=\"SqlEditorTabs\"\n        data-test=\"sql-editor-tabs\"\n        onChange={this.handleSelect}\n        fullWidth={false}\n        hideAdd={this.props.offline}\n        onTabClick={() => noQueryEditors && this.newQueryEditor()}\n        onEdit={this.handleEdit}\n        type={noQueryEditors ? 'card' : 'editable-card'}\n        addIcon={\n          <Tooltip\n            id=\"add-tab\"\n            placement=\"bottom\"\n            title={\n              userOS === 'Windows'\n                ? t('New tab (Ctrl + q)')\n                : t('New tab (Ctrl + t)')\n            }\n          >\n            <i data-test=\"add-tab-icon\" className=\"fa fa-plus-circle\" />\n          </Tooltip>\n        }\n      >\n        {editors}\n        {noQueryEditors && emptyTabState}\n      </StyledEditableTabs>\n    );\n  }\n}\nTabbedSqlEditors.propTypes = propTypes;\nTabbedSqlEditors.defaultProps = defaultProps;\n\nfunction mapStateToProps({ sqlLab, common }) {\n  return {\n    databases: sqlLab.databases,\n    queryEditors: sqlLab.queryEditors,\n    queries: sqlLab.queries,\n    tabHistory: sqlLab.tabHistory,\n    tables: sqlLab.tables,\n    defaultDbId: sqlLab.defaultDbId,\n    displayLimit: common.conf.DISPLAY_MAX_ROW,\n    offline: sqlLab.offline,\n    defaultQueryLimit: common.conf.DEFAULT_SQLLAB_LIMIT,\n    maxRow: common.conf.SQL_MAX_ROW,\n    saveQueryWarning: common.conf.SQLLAB_SAVE_WARNING_MESSAGE,\n    scheduleQueryWarning: common.conf.SQLLAB_SCHEDULE_WARNING_MESSAGE,\n  };\n}\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators(Actions, dispatch),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TabbedSqlEditors);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}