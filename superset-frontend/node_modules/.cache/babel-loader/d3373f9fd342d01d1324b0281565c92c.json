{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { isFeatureEnabled, FeatureFlag, styled, SupersetClient, t } from '@superset-ui/core';\nimport React, { useState, useMemo, useCallback } from 'react';\nimport { Link } from 'react-router-dom';\nimport rison from 'rison';\nimport { createFetchRelated, createErrorHandler, handleDashboardDelete } from 'src/views/CRUD/utils';\nimport { useListViewResource, useFavoriteStatus } from 'src/views/CRUD/hooks';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport { TagsList } from 'src/components/Tags';\nimport handleResourceExport from 'src/utils/export';\nimport Loading from 'src/components/Loading';\nimport SubMenu from 'src/features/home/SubMenu';\nimport ListView, { FilterOperator } from 'src/components/ListView';\nimport { dangerouslyGetItemDoNotUse } from 'src/utils/localStorageHelpers';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport FacePile from 'src/components/FacePile';\nimport Icons from 'src/components/Icons';\nimport DeleteModal from 'src/components/DeleteModal';\nimport FaveStar from 'src/components/FaveStar';\nimport PropertiesModal from 'src/dashboard/components/PropertiesModal';\nimport { Tooltip } from 'src/components/Tooltip';\nimport ImportModelsModal from 'src/components/ImportModal/index';\nimport CertifiedBadge from 'src/components/CertifiedBadge';\nimport { loadTags } from 'src/components/Tags/utils';\nimport DashboardCard from 'src/features/dashboards/DashboardCard';\nimport { DashboardStatus } from 'src/features/dashboards/types';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst PAGE_SIZE = 25;\nconst PASSWORDS_NEEDED_MESSAGE = t('The passwords for the databases below are needed in order to ' +\n'import them together with the dashboards. Please note that the ' +\n'\"Secure Extra\" and \"Certificate\" sections of ' +\n'the database configuration are not present in export files, and ' +\n'should be added manually after the import if they are needed.');\nconst CONFIRM_OVERWRITE_MESSAGE = t('You are importing one or more dashboards that already exist. ' +\n'Overwriting might cause you to lose some of your work. Are you ' +\n'sure you want to overwrite?');\nconst Actions = styled.div`\n  color: ${(_ref) => {let { theme } = _ref;return theme.colors.grayscale.base;}};\n`;\nfunction DashboardList(props) {\n  const { addDangerToast, addSuccessToast, user: { userId } } = props;\n  const { state: { loading, resourceCount: dashboardCount, resourceCollection: dashboards, bulkSelectEnabled }, setResourceCollection: setDashboards, hasPerm, fetchData, toggleBulkSelect, refreshData } = useListViewResource('dashboard', t('dashboard'), addDangerToast);\n  const dashboardIds = useMemo(() => dashboards.map((d) => d.id), [dashboards]);\n  const [saveFavoriteStatus, favoriteStatus] = useFavoriteStatus('dashboard', dashboardIds, addDangerToast);\n  const [dashboardToEdit, setDashboardToEdit] = useState(null);\n  const [dashboardToDelete, setDashboardToDelete] = useState(null);\n  const [importingDashboard, showImportModal] = useState(false);\n  const [passwordFields, setPasswordFields] = useState([]);\n  const [preparingExport, setPreparingExport] = useState(false);\n  const [sshTunnelPasswordFields, setSSHTunnelPasswordFields] = useState([]);\n  const [sshTunnelPrivateKeyFields, setSSHTunnelPrivateKeyFields] = useState([]);\n  const [sshTunnelPrivateKeyPasswordFields, setSSHTunnelPrivateKeyPasswordFields] = useState([]);\n  const openDashboardImportModal = () => {\n    showImportModal(true);\n  };\n  const closeDashboardImportModal = () => {\n    showImportModal(false);\n  };\n  const handleDashboardImport = () => {\n    showImportModal(false);\n    refreshData();\n    addSuccessToast(t('Dashboard imported'));\n  };\n  // TODO: Fix usage of localStorage keying on the user id\n  const userKey = dangerouslyGetItemDoNotUse(userId == null ? void 0 : userId.toString(), null);\n  const canCreate = hasPerm('can_write');\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canExport = hasPerm('can_export') && isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT);\n  const initialSort = [{ id: 'changed_on_delta_humanized', desc: true }];\n  function openDashboardEditModal(dashboard) {\n    setDashboardToEdit(dashboard);\n  }\n  function handleDashboardEdit(edits) {\n    return SupersetClient.get({\n      endpoint: `/api/v1/dashboard/${edits.id}` }).\n    then((_ref2) => {let { json = {} } = _ref2;\n      setDashboards(dashboards.map((dashboard) => {var _json$result;\n        if (dashboard.id === (json == null ? void 0 : (_json$result = json.result) == null ? void 0 : _json$result.id)) {\n          const { changed_by_name, changed_by, dashboard_title = '', slug = '', json_metadata = '', changed_on_delta_humanized, url = '', certified_by = '', certification_details = '', owners, tags } = json.result;\n          return {\n            ...dashboard,\n            changed_by_name,\n            changed_by,\n            dashboard_title,\n            slug,\n            json_metadata,\n            changed_on_delta_humanized,\n            url,\n            certified_by,\n            certification_details,\n            owners,\n            tags };\n\n        }\n        return dashboard;\n      }));\n    }, createErrorHandler((errMsg) => addDangerToast(t('An error occurred while fetching dashboards: %s', errMsg))));\n  }\n  const handleBulkDashboardExport = (dashboardsToExport) => {\n    const ids = dashboardsToExport.map((_ref3) => {let { id } = _ref3;return id;});\n    handleResourceExport('dashboard', ids, () => {\n      setPreparingExport(false);\n    });\n    setPreparingExport(true);\n  };\n  function handleBulkDashboardDelete(dashboardsToDelete) {\n    return SupersetClient.delete({\n      endpoint: `/api/v1/dashboard/?q=${rison.encode(dashboardsToDelete.map((_ref4) => {let { id } = _ref4;return id;}))}` }).\n    then((_ref5) => {let { json = {} } = _ref5;\n      refreshData();\n      addSuccessToast(json.message);\n    }, createErrorHandler((errMsg) => addDangerToast(t('There was an issue deleting the selected dashboards: ', errMsg))));\n  }\n  const columns = useMemo(() => [\n  {\n    Cell: (_ref6) => {let { row: { original: { id } } } = _ref6;return userId && ___EmotionJSX(FaveStar, { itemId: id, saveFaveStar: saveFavoriteStatus, isStarred: favoriteStatus[id] });},\n    Header: '',\n    id: 'id',\n    disableSortBy: true,\n    size: 'xs',\n    hidden: !userId },\n\n  {\n    Cell: (_ref7) => {let { row: { original: { url, dashboard_title: dashboardTitle, certified_by: certifiedBy, certification_details: certificationDetails } } } = _ref7;return ___EmotionJSX(Link, { to: url },\n      certifiedBy && ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(CertifiedBadge, { certifiedBy: certifiedBy, details: certificationDetails }), ' '),\n\n      dashboardTitle);},\n\n    Header: t('Title'),\n    accessor: 'dashboard_title' },\n\n  {\n    Cell: (_ref8) => {let { row: { original: { changed_by_name: changedByName } } } = _ref8;return ___EmotionJSX(React.Fragment, null, changedByName);},\n    Header: t('Modified by'),\n    accessor: 'changed_by.first_name',\n    size: 'xl' },\n\n  {\n    Cell: (_ref9) => {let { row: { original: { status } } } = _ref9;return status === DashboardStatus.PUBLISHED ? t('Published') : t('Draft');},\n    Header: t('Status'),\n    accessor: 'published',\n    size: 'xl' },\n\n  {\n    Cell: (_ref10) => {let { row: { original: { changed_on_delta_humanized: changedOn } } } = _ref10;return ___EmotionJSX(\"span\", { className: \"no-wrap\" }, changedOn);},\n    Header: t('Modified'),\n    accessor: 'changed_on_delta_humanized',\n    size: 'xl' },\n\n  {\n    Cell: (_ref11) => {let { row: { original: { created_by: createdBy } } } = _ref11;return createdBy ? `${createdBy.first_name} ${createdBy.last_name}` : '';},\n    Header: t('Created by'),\n    accessor: 'created_by',\n    disableSortBy: true,\n    size: 'xl' },\n\n  {\n    Cell: (_ref12) => {let { row: { original: { owners = [] } } } = _ref12;return ___EmotionJSX(FacePile, { users: owners });},\n    Header: t('Owners'),\n    accessor: 'owners',\n    disableSortBy: true,\n    size: 'xl' },\n\n  {\n    Cell: (_ref13) => {let { row: { original: { tags = [] } } } = _ref13;return (\n        // Only show custom type tags\n        ___EmotionJSX(TagsList, { tags: tags.filter((tag) => tag.type === 'TagTypes.custom' || tag.type === 1), maxTags: 3 }));},\n    Header: t('Tags'),\n    accessor: 'tags',\n    disableSortBy: true,\n    hidden: !isFeatureEnabled(FeatureFlag.TAGGING_SYSTEM) },\n\n  {\n    Cell: (_ref14) => {let { row: { original } } = _ref14;\n      const handleDelete = () => handleDashboardDelete(original, refreshData, addSuccessToast, addDangerToast);\n      const handleEdit = () => openDashboardEditModal(original);\n      const handleExport = () => handleBulkDashboardExport([original]);\n      return ___EmotionJSX(Actions, { className: \"actions\" },\n      canDelete && ___EmotionJSX(ConfirmStatusChange, { title: t('Please confirm'), description: ___EmotionJSX(React.Fragment, null,\n        t('Are you sure you want to delete'), ' ',\n        ___EmotionJSX(\"b\", null, original.dashboard_title), \"?\"),\n        onConfirm: handleDelete },\n      (confirmDelete) => ___EmotionJSX(Tooltip, { id: \"delete-action-tooltip\", title: t('Delete'), placement: \"bottom\" },\n      ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: confirmDelete },\n      ___EmotionJSX(Icons.Trash, null)))),\n\n\n\n      canExport && ___EmotionJSX(Tooltip, { id: \"export-action-tooltip\", title: t('Export'), placement: \"bottom\" },\n      ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: handleExport },\n      ___EmotionJSX(Icons.Share, null))),\n\n\n      canEdit && ___EmotionJSX(Tooltip, { id: \"edit-action-tooltip\", title: t('Edit'), placement: \"bottom\" },\n      ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: handleEdit },\n      ___EmotionJSX(Icons.EditAlt, null))));\n\n\n\n    },\n    Header: t('Actions'),\n    id: 'actions',\n    hidden: !canEdit && !canDelete && !canExport,\n    disableSortBy: true }],\n\n  [\n  userId,\n  canEdit,\n  canDelete,\n  canExport,\n  saveFavoriteStatus,\n  favoriteStatus,\n  refreshData,\n  addSuccessToast,\n  addDangerToast]);\n\n  const favoritesFilter = useMemo(() => ({\n    Header: t('Favorite'),\n    key: 'favorite',\n    id: 'id',\n    urlDisplay: 'favorite',\n    input: 'select',\n    operator: FilterOperator.dashboardIsFav,\n    unfilteredLabel: t('Any'),\n    selects: [\n    { label: t('Yes'), value: true },\n    { label: t('No'), value: false }] }),\n\n  []);\n  const filters = useMemo(() => {\n    const filters_list = [\n    {\n      Header: t('Search'),\n      key: 'search',\n      id: 'dashboard_title',\n      input: 'search',\n      operator: FilterOperator.titleOrSlug },\n\n    {\n      Header: t('Owner'),\n      key: 'owner',\n      id: 'owners',\n      input: 'select',\n      operator: FilterOperator.relationManyMany,\n      unfilteredLabel: t('All'),\n      fetchSelects: createFetchRelated('dashboard', 'owners', createErrorHandler((errMsg) => addDangerToast(t('An error occurred while fetching dashboard owner values: %s', errMsg))), props.user),\n      paginate: true },\n\n    {\n      Header: t('Created by'),\n      key: 'created_by',\n      id: 'created_by',\n      input: 'select',\n      operator: FilterOperator.relationOneMany,\n      unfilteredLabel: t('All'),\n      fetchSelects: createFetchRelated('dashboard', 'created_by', createErrorHandler((errMsg) => addDangerToast(t('An error occurred while fetching dashboard created by values: %s', errMsg))), props.user),\n      paginate: true },\n\n    {\n      Header: t('Status'),\n      key: 'published',\n      id: 'published',\n      input: 'select',\n      operator: FilterOperator.equals,\n      unfilteredLabel: t('Any'),\n      selects: [\n      { label: t('Published'), value: true },\n      { label: t('Draft'), value: false }] },\n\n\n    ...(userId ? [favoritesFilter] : []),\n    {\n      Header: t('Certified'),\n      key: 'certified',\n      id: 'id',\n      urlDisplay: 'certified',\n      input: 'select',\n      operator: FilterOperator.dashboardIsCertified,\n      unfilteredLabel: t('Any'),\n      selects: [\n      { label: t('Yes'), value: true },\n      { label: t('No'), value: false }] }];\n\n\n\n    if (isFeatureEnabled(FeatureFlag.TAGGING_SYSTEM)) {\n      filters_list.push({\n        Header: t('Tags'),\n        key: 'tags',\n        id: 'tags',\n        input: 'select',\n        operator: FilterOperator.dashboardTags,\n        unfilteredLabel: t('All'),\n        fetchSelects: loadTags });\n\n    }\n    return filters_list;\n  }, [addDangerToast, favoritesFilter, props.user]);\n  const sortTypes = [\n  {\n    desc: false,\n    id: 'dashboard_title',\n    label: t('Alphabetical'),\n    value: 'alphabetical' },\n\n  {\n    desc: true,\n    id: 'changed_on_delta_humanized',\n    label: t('Recently modified'),\n    value: 'recently_modified' },\n\n  {\n    desc: false,\n    id: 'changed_on_delta_humanized',\n    label: t('Least recently modified'),\n    value: 'least_recently_modified' }];\n\n\n  const renderCard = useCallback((dashboard) => ___EmotionJSX(DashboardCard, { dashboard: dashboard, hasPerm: hasPerm, bulkSelectEnabled: bulkSelectEnabled, showThumbnails: userKey ?\n    userKey.thumbnails :\n    isFeatureEnabled(FeatureFlag.THUMBNAILS), userId: userId, loading: loading, openDashboardEditModal: openDashboardEditModal, saveFavoriteStatus: saveFavoriteStatus, favoriteStatus: favoriteStatus[dashboard.id], handleBulkDashboardExport: handleBulkDashboardExport, onDelete: (dashboard) => setDashboardToDelete(dashboard) }), [\n  bulkSelectEnabled,\n  favoriteStatus,\n  hasPerm,\n  loading,\n  userId,\n  saveFavoriteStatus,\n  userKey]);\n\n  const subMenuButtons = [];\n  if (canDelete || canExport) {\n    subMenuButtons.push({\n      name: t('Bulk select'),\n      buttonStyle: 'secondary',\n      'data-test': 'bulk-select',\n      onClick: toggleBulkSelect });\n\n  }\n  if (canCreate) {\n    subMenuButtons.push({\n      name: ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(\"i\", { className: \"fa fa-plus\" }), \" \", t('Dashboard')),\n\n      buttonStyle: 'primary',\n      onClick: () => {\n        window.location.assign('/dashboard/new');\n      } });\n\n    if (isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT)) {\n      subMenuButtons.push({\n        name: ___EmotionJSX(Tooltip, { id: \"import-tooltip\", title: t('Import dashboards'), placement: \"bottomRight\" },\n        ___EmotionJSX(Icons.Import, null)),\n\n        buttonStyle: 'link',\n        onClick: openDashboardImportModal });\n\n    }\n  }\n  return ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(SubMenu, { name: t('Dashboards'), buttons: subMenuButtons }),\n  ___EmotionJSX(ConfirmStatusChange, { title: t('Please confirm'), description: t('Are you sure you want to delete the selected dashboards?'), onConfirm: handleBulkDashboardDelete },\n  (confirmDelete) => {\n    const bulkActions = [];\n    if (canDelete) {\n      bulkActions.push({\n        key: 'delete',\n        name: t('Delete'),\n        type: 'danger',\n        onSelect: confirmDelete });\n\n    }\n    if (canExport) {\n      bulkActions.push({\n        key: 'export',\n        name: t('Export'),\n        type: 'primary',\n        onSelect: handleBulkDashboardExport });\n\n    }\n    return ___EmotionJSX(React.Fragment, null,\n    dashboardToEdit && ___EmotionJSX(PropertiesModal, { dashboardId: dashboardToEdit.id, show: true, onHide: () => setDashboardToEdit(null), onSubmit: handleDashboardEdit }),\n    dashboardToDelete && ___EmotionJSX(DeleteModal, { description: ___EmotionJSX(React.Fragment, null,\n      t('Are you sure you want to delete'), ' ',\n      ___EmotionJSX(\"b\", null, dashboardToDelete.dashboard_title), \"?\"),\n      onConfirm: () => {\n        handleDashboardDelete(dashboardToDelete, refreshData, addSuccessToast, addDangerToast, undefined, userId);\n        setDashboardToDelete(null);\n      }, onHide: () => setDashboardToDelete(null), open: !!dashboardToDelete, title: t('Please confirm') }),\n    ___EmotionJSX(ListView, { bulkActions: bulkActions, bulkSelectEnabled: bulkSelectEnabled, cardSortSelectOptions: sortTypes, className: \"dashboard-list-view\", columns: columns, count: dashboardCount, data: dashboards, disableBulkSelect: toggleBulkSelect, fetchData: fetchData, filters: filters, initialSort: initialSort, loading: loading, pageSize: PAGE_SIZE, showThumbnails: userKey ?\n      userKey.thumbnails :\n      isFeatureEnabled(FeatureFlag.THUMBNAILS), renderCard: renderCard, defaultViewMode: isFeatureEnabled(FeatureFlag.LISTVIEWS_DEFAULT_CARD_VIEW) ?\n      'card' :\n      'table' }));\n\n  }),\n\n\n  ___EmotionJSX(ImportModelsModal, { resourceName: \"dashboard\", resourceLabel: t('dashboard'), passwordsNeededMessage: PASSWORDS_NEEDED_MESSAGE, confirmOverwriteMessage: CONFIRM_OVERWRITE_MESSAGE, addDangerToast: addDangerToast, addSuccessToast: addSuccessToast, onModelImport: handleDashboardImport, show: importingDashboard, onHide: closeDashboardImportModal, passwordFields: passwordFields, setPasswordFields: setPasswordFields, sshTunnelPasswordFields: sshTunnelPasswordFields, setSSHTunnelPasswordFields: setSSHTunnelPasswordFields, sshTunnelPrivateKeyFields: sshTunnelPrivateKeyFields, setSSHTunnelPrivateKeyFields: setSSHTunnelPrivateKeyFields, sshTunnelPrivateKeyPasswordFields: sshTunnelPrivateKeyPasswordFields, setSSHTunnelPrivateKeyPasswordFields: setSSHTunnelPrivateKeyPasswordFields }),\n\n  preparingExport && ___EmotionJSX(Loading, null));\n\n}\nexport default withToasts(DashboardList);","map":{"version":3,"mappings":"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","names":["isFeatureEnabled","FeatureFlag","styled","SupersetClient","t","React","useState","useMemo","useCallback","Link","rison","createFetchRelated","createErrorHandler","handleDashboardDelete","useListViewResource","useFavoriteStatus","ConfirmStatusChange","TagsList","handleResourceExport","Loading","SubMenu","ListView","FilterOperator","dangerouslyGetItemDoNotUse","withToasts","FacePile","Icons","DeleteModal","FaveStar","PropertiesModal","Tooltip","ImportModelsModal","CertifiedBadge","loadTags","DashboardCard","DashboardStatus","PAGE_SIZE","PASSWORDS_NEEDED_MESSAGE","CONFIRM_OVERWRITE_MESSAGE","Actions","div","theme","colors","grayscale","base","DashboardList","props","addDangerToast","addSuccessToast","user","userId","state","loading","resourceCount","dashboardCount","resourceCollection","dashboards","bulkSelectEnabled","setResourceCollection","setDashboards","hasPerm","fetchData","toggleBulkSelect","refreshData","dashboardIds","map","d","id","saveFavoriteStatus","favoriteStatus","dashboardToEdit","setDashboardToEdit","dashboardToDelete","setDashboardToDelete","importingDashboard","showImportModal","passwordFields","setPasswordFields","preparingExport","setPreparingExport","sshTunnelPasswordFields","setSSHTunnelPasswordFields","sshTunnelPrivateKeyFields","setSSHTunnelPrivateKeyFields","sshTunnelPrivateKeyPasswordFields","setSSHTunnelPrivateKeyPasswordFields","openDashboardImportModal","closeDashboardImportModal","handleDashboardImport","userKey","toString","canCreate","canEdit","canDelete","canExport","VERSIONED_EXPORT","initialSort","desc","openDashboardEditModal","dashboard","handleDashboardEdit","edits","get","endpoint","then","json","result","changed_by_name","changed_by","dashboard_title","slug","json_metadata","changed_on_delta_humanized","url","certified_by","certification_details","owners","tags","errMsg","handleBulkDashboardExport","dashboardsToExport","ids","handleBulkDashboardDelete","dashboardsToDelete","delete","encode","message","columns","Cell","row","original","Header","disableSortBy","size","hidden","dashboardTitle","certifiedBy","certificationDetails","accessor","changedByName","status","PUBLISHED","changedOn","created_by","createdBy","first_name","last_name","filter","tag","type","TAGGING_SYSTEM","handleDelete","handleEdit","handleExport","confirmDelete","favoritesFilter","key","urlDisplay","input","operator","dashboardIsFav","unfilteredLabel","selects","label","value","filters","filters_list","titleOrSlug","relationManyMany","fetchSelects","paginate","relationOneMany","equals","dashboardIsCertified","push","dashboardTags","sortTypes","renderCard","thumbnails","THUMBNAILS","subMenuButtons","name","buttonStyle","onClick","window","location","assign","bulkActions","onSelect","undefined","LISTVIEWS_DEFAULT_CARD_VIEW"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/pages/DashboardList/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  isFeatureEnabled,\n  FeatureFlag,\n  styled,\n  SupersetClient,\n  t,\n} from '@superset-ui/core';\nimport React, { useState, useMemo, useCallback } from 'react';\nimport { Link } from 'react-router-dom';\nimport rison from 'rison';\nimport {\n  createFetchRelated,\n  createErrorHandler,\n  handleDashboardDelete,\n} from 'src/views/CRUD/utils';\nimport { useListViewResource, useFavoriteStatus } from 'src/views/CRUD/hooks';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport { TagsList } from 'src/components/Tags';\nimport handleResourceExport from 'src/utils/export';\nimport Loading from 'src/components/Loading';\nimport SubMenu, { SubMenuProps } from 'src/features/home/SubMenu';\nimport ListView, {\n  ListViewProps,\n  Filter,\n  Filters,\n  FilterOperator,\n} from 'src/components/ListView';\nimport { dangerouslyGetItemDoNotUse } from 'src/utils/localStorageHelpers';\nimport Owner from 'src/types/Owner';\nimport Tag from 'src/types/TagType';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport FacePile from 'src/components/FacePile';\nimport Icons from 'src/components/Icons';\nimport DeleteModal from 'src/components/DeleteModal';\nimport FaveStar from 'src/components/FaveStar';\nimport PropertiesModal from 'src/dashboard/components/PropertiesModal';\nimport { Tooltip } from 'src/components/Tooltip';\nimport ImportModelsModal from 'src/components/ImportModal/index';\n\nimport Dashboard from 'src/dashboard/containers/Dashboard';\nimport { Dashboard as CRUDDashboard } from 'src/views/CRUD/types';\nimport CertifiedBadge from 'src/components/CertifiedBadge';\nimport { loadTags } from 'src/components/Tags/utils';\nimport DashboardCard from 'src/features/dashboards/DashboardCard';\nimport { DashboardStatus } from 'src/features/dashboards/types';\n\nconst PAGE_SIZE = 25;\nconst PASSWORDS_NEEDED_MESSAGE = t(\n  'The passwords for the databases below are needed in order to ' +\n    'import them together with the dashboards. Please note that the ' +\n    '\"Secure Extra\" and \"Certificate\" sections of ' +\n    'the database configuration are not present in export files, and ' +\n    'should be added manually after the import if they are needed.',\n);\nconst CONFIRM_OVERWRITE_MESSAGE = t(\n  'You are importing one or more dashboards that already exist. ' +\n    'Overwriting might cause you to lose some of your work. Are you ' +\n    'sure you want to overwrite?',\n);\n\ninterface DashboardListProps {\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n  user: {\n    userId: string | number;\n    firstName: string;\n    lastName: string;\n  };\n}\n\ninterface Dashboard {\n  changed_by_name: string;\n  changed_on_delta_humanized: string;\n  changed_by: string;\n  dashboard_title: string;\n  id: number;\n  published: boolean;\n  url: string;\n  thumbnail_url: string;\n  owners: Owner[];\n  tags: Tag[];\n  created_by: object;\n}\n\nconst Actions = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.base};\n`;\n\nfunction DashboardList(props: DashboardListProps) {\n  const {\n    addDangerToast,\n    addSuccessToast,\n    user: { userId },\n  } = props;\n\n  const {\n    state: {\n      loading,\n      resourceCount: dashboardCount,\n      resourceCollection: dashboards,\n      bulkSelectEnabled,\n    },\n    setResourceCollection: setDashboards,\n    hasPerm,\n    fetchData,\n    toggleBulkSelect,\n    refreshData,\n  } = useListViewResource<Dashboard>(\n    'dashboard',\n    t('dashboard'),\n    addDangerToast,\n  );\n  const dashboardIds = useMemo(() => dashboards.map(d => d.id), [dashboards]);\n  const [saveFavoriteStatus, favoriteStatus] = useFavoriteStatus(\n    'dashboard',\n    dashboardIds,\n    addDangerToast,\n  );\n\n  const [dashboardToEdit, setDashboardToEdit] = useState<Dashboard | null>(\n    null,\n  );\n  const [dashboardToDelete, setDashboardToDelete] =\n    useState<CRUDDashboard | null>(null);\n\n  const [importingDashboard, showImportModal] = useState<boolean>(false);\n  const [passwordFields, setPasswordFields] = useState<string[]>([]);\n  const [preparingExport, setPreparingExport] = useState<boolean>(false);\n  const [sshTunnelPasswordFields, setSSHTunnelPasswordFields] = useState<\n    string[]\n  >([]);\n  const [sshTunnelPrivateKeyFields, setSSHTunnelPrivateKeyFields] = useState<\n    string[]\n  >([]);\n  const [\n    sshTunnelPrivateKeyPasswordFields,\n    setSSHTunnelPrivateKeyPasswordFields,\n  ] = useState<string[]>([]);\n\n  const openDashboardImportModal = () => {\n    showImportModal(true);\n  };\n\n  const closeDashboardImportModal = () => {\n    showImportModal(false);\n  };\n\n  const handleDashboardImport = () => {\n    showImportModal(false);\n    refreshData();\n    addSuccessToast(t('Dashboard imported'));\n  };\n\n  // TODO: Fix usage of localStorage keying on the user id\n  const userKey = dangerouslyGetItemDoNotUse(userId?.toString(), null);\n\n  const canCreate = hasPerm('can_write');\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canExport =\n    hasPerm('can_export') && isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT);\n\n  const initialSort = [{ id: 'changed_on_delta_humanized', desc: true }];\n\n  function openDashboardEditModal(dashboard: Dashboard) {\n    setDashboardToEdit(dashboard);\n  }\n\n  function handleDashboardEdit(edits: Dashboard) {\n    return SupersetClient.get({\n      endpoint: `/api/v1/dashboard/${edits.id}`,\n    }).then(\n      ({ json = {} }) => {\n        setDashboards(\n          dashboards.map(dashboard => {\n            if (dashboard.id === json?.result?.id) {\n              const {\n                changed_by_name,\n                changed_by,\n                dashboard_title = '',\n                slug = '',\n                json_metadata = '',\n                changed_on_delta_humanized,\n                url = '',\n                certified_by = '',\n                certification_details = '',\n                owners,\n                tags,\n              } = json.result;\n              return {\n                ...dashboard,\n                changed_by_name,\n                changed_by,\n                dashboard_title,\n                slug,\n                json_metadata,\n                changed_on_delta_humanized,\n                url,\n                certified_by,\n                certification_details,\n                owners,\n                tags,\n              };\n            }\n            return dashboard;\n          }),\n        );\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(\n          t('An error occurred while fetching dashboards: %s', errMsg),\n        ),\n      ),\n    );\n  }\n\n  const handleBulkDashboardExport = (dashboardsToExport: Dashboard[]) => {\n    const ids = dashboardsToExport.map(({ id }) => id);\n    handleResourceExport('dashboard', ids, () => {\n      setPreparingExport(false);\n    });\n    setPreparingExport(true);\n  };\n\n  function handleBulkDashboardDelete(dashboardsToDelete: Dashboard[]) {\n    return SupersetClient.delete({\n      endpoint: `/api/v1/dashboard/?q=${rison.encode(\n        dashboardsToDelete.map(({ id }) => id),\n      )}`,\n    }).then(\n      ({ json = {} }) => {\n        refreshData();\n        addSuccessToast(json.message);\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(\n          t('There was an issue deleting the selected dashboards: ', errMsg),\n        ),\n      ),\n    );\n  }\n\n  const columns = useMemo(\n    () => [\n      {\n        Cell: ({\n          row: {\n            original: { id },\n          },\n        }: any) =>\n          userId && (\n            <FaveStar\n              itemId={id}\n              saveFaveStar={saveFavoriteStatus}\n              isStarred={favoriteStatus[id]}\n            />\n          ),\n        Header: '',\n        id: 'id',\n        disableSortBy: true,\n        size: 'xs',\n        hidden: !userId,\n      },\n      {\n        Cell: ({\n          row: {\n            original: {\n              url,\n              dashboard_title: dashboardTitle,\n              certified_by: certifiedBy,\n              certification_details: certificationDetails,\n            },\n          },\n        }: any) => (\n          <Link to={url}>\n            {certifiedBy && (\n              <>\n                <CertifiedBadge\n                  certifiedBy={certifiedBy}\n                  details={certificationDetails}\n                />{' '}\n              </>\n            )}\n            {dashboardTitle}\n          </Link>\n        ),\n        Header: t('Title'),\n        accessor: 'dashboard_title',\n      },\n\n      {\n        Cell: ({\n          row: {\n            original: { changed_by_name: changedByName },\n          },\n        }: any) => <>{changedByName}</>,\n        Header: t('Modified by'),\n        accessor: 'changed_by.first_name',\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { status },\n          },\n        }: any) =>\n          status === DashboardStatus.PUBLISHED ? t('Published') : t('Draft'),\n        Header: t('Status'),\n        accessor: 'published',\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { changed_on_delta_humanized: changedOn },\n          },\n        }: any) => <span className=\"no-wrap\">{changedOn}</span>,\n        Header: t('Modified'),\n        accessor: 'changed_on_delta_humanized',\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { created_by: createdBy },\n          },\n        }: any) =>\n          createdBy ? `${createdBy.first_name} ${createdBy.last_name}` : '',\n        Header: t('Created by'),\n        accessor: 'created_by',\n        disableSortBy: true,\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { owners = [] },\n          },\n        }: any) => <FacePile users={owners} />,\n        Header: t('Owners'),\n        accessor: 'owners',\n        disableSortBy: true,\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { tags = [] },\n          },\n        }: {\n          row: {\n            original: {\n              tags: Tag[];\n            };\n          };\n        }) => (\n          // Only show custom type tags\n          <TagsList\n            tags={tags.filter(\n              (tag: Tag) => tag.type === 'TagTypes.custom' || tag.type === 1,\n            )}\n            maxTags={3}\n          />\n        ),\n        Header: t('Tags'),\n        accessor: 'tags',\n        disableSortBy: true,\n        hidden: !isFeatureEnabled(FeatureFlag.TAGGING_SYSTEM),\n      },\n      {\n        Cell: ({ row: { original } }: any) => {\n          const handleDelete = () =>\n            handleDashboardDelete(\n              original,\n              refreshData,\n              addSuccessToast,\n              addDangerToast,\n            );\n          const handleEdit = () => openDashboardEditModal(original);\n          const handleExport = () => handleBulkDashboardExport([original]);\n\n          return (\n            <Actions className=\"actions\">\n              {canDelete && (\n                <ConfirmStatusChange\n                  title={t('Please confirm')}\n                  description={\n                    <>\n                      {t('Are you sure you want to delete')}{' '}\n                      <b>{original.dashboard_title}</b>?\n                    </>\n                  }\n                  onConfirm={handleDelete}\n                >\n                  {confirmDelete => (\n                    <Tooltip\n                      id=\"delete-action-tooltip\"\n                      title={t('Delete')}\n                      placement=\"bottom\"\n                    >\n                      <span\n                        role=\"button\"\n                        tabIndex={0}\n                        className=\"action-button\"\n                        onClick={confirmDelete}\n                      >\n                        <Icons.Trash data-test=\"dashboard-list-trash-icon\" />\n                      </span>\n                    </Tooltip>\n                  )}\n                </ConfirmStatusChange>\n              )}\n              {canExport && (\n                <Tooltip\n                  id=\"export-action-tooltip\"\n                  title={t('Export')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={handleExport}\n                  >\n                    <Icons.Share />\n                  </span>\n                </Tooltip>\n              )}\n              {canEdit && (\n                <Tooltip\n                  id=\"edit-action-tooltip\"\n                  title={t('Edit')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={handleEdit}\n                  >\n                    <Icons.EditAlt data-test=\"edit-alt\" />\n                  </span>\n                </Tooltip>\n              )}\n            </Actions>\n          );\n        },\n        Header: t('Actions'),\n        id: 'actions',\n        hidden: !canEdit && !canDelete && !canExport,\n        disableSortBy: true,\n      },\n    ],\n    [\n      userId,\n      canEdit,\n      canDelete,\n      canExport,\n      saveFavoriteStatus,\n      favoriteStatus,\n      refreshData,\n      addSuccessToast,\n      addDangerToast,\n    ],\n  );\n\n  const favoritesFilter: Filter = useMemo(\n    () => ({\n      Header: t('Favorite'),\n      key: 'favorite',\n      id: 'id',\n      urlDisplay: 'favorite',\n      input: 'select',\n      operator: FilterOperator.dashboardIsFav,\n      unfilteredLabel: t('Any'),\n      selects: [\n        { label: t('Yes'), value: true },\n        { label: t('No'), value: false },\n      ],\n    }),\n    [],\n  );\n\n  const filters: Filters = useMemo(() => {\n    const filters_list = [\n      {\n        Header: t('Search'),\n        key: 'search',\n        id: 'dashboard_title',\n        input: 'search',\n        operator: FilterOperator.titleOrSlug,\n      },\n      {\n        Header: t('Owner'),\n        key: 'owner',\n        id: 'owners',\n        input: 'select',\n        operator: FilterOperator.relationManyMany,\n        unfilteredLabel: t('All'),\n        fetchSelects: createFetchRelated(\n          'dashboard',\n          'owners',\n          createErrorHandler(errMsg =>\n            addDangerToast(\n              t(\n                'An error occurred while fetching dashboard owner values: %s',\n                errMsg,\n              ),\n            ),\n          ),\n          props.user,\n        ),\n        paginate: true,\n      },\n      {\n        Header: t('Created by'),\n        key: 'created_by',\n        id: 'created_by',\n        input: 'select',\n        operator: FilterOperator.relationOneMany,\n        unfilteredLabel: t('All'),\n        fetchSelects: createFetchRelated(\n          'dashboard',\n          'created_by',\n          createErrorHandler(errMsg =>\n            addDangerToast(\n              t(\n                'An error occurred while fetching dashboard created by values: %s',\n                errMsg,\n              ),\n            ),\n          ),\n          props.user,\n        ),\n        paginate: true,\n      },\n      {\n        Header: t('Status'),\n        key: 'published',\n        id: 'published',\n        input: 'select',\n        operator: FilterOperator.equals,\n        unfilteredLabel: t('Any'),\n        selects: [\n          { label: t('Published'), value: true },\n          { label: t('Draft'), value: false },\n        ],\n      },\n      ...(userId ? [favoritesFilter] : []),\n      {\n        Header: t('Certified'),\n        key: 'certified',\n        id: 'id',\n        urlDisplay: 'certified',\n        input: 'select',\n        operator: FilterOperator.dashboardIsCertified,\n        unfilteredLabel: t('Any'),\n        selects: [\n          { label: t('Yes'), value: true },\n          { label: t('No'), value: false },\n        ],\n      },\n    ] as Filters;\n    if (isFeatureEnabled(FeatureFlag.TAGGING_SYSTEM)) {\n      filters_list.push({\n        Header: t('Tags'),\n        key: 'tags',\n        id: 'tags',\n        input: 'select',\n        operator: FilterOperator.dashboardTags,\n        unfilteredLabel: t('All'),\n        fetchSelects: loadTags,\n      });\n    }\n    return filters_list;\n  }, [addDangerToast, favoritesFilter, props.user]);\n\n  const sortTypes = [\n    {\n      desc: false,\n      id: 'dashboard_title',\n      label: t('Alphabetical'),\n      value: 'alphabetical',\n    },\n    {\n      desc: true,\n      id: 'changed_on_delta_humanized',\n      label: t('Recently modified'),\n      value: 'recently_modified',\n    },\n    {\n      desc: false,\n      id: 'changed_on_delta_humanized',\n      label: t('Least recently modified'),\n      value: 'least_recently_modified',\n    },\n  ];\n\n  const renderCard = useCallback(\n    (dashboard: Dashboard) => (\n      <DashboardCard\n        dashboard={dashboard}\n        hasPerm={hasPerm}\n        bulkSelectEnabled={bulkSelectEnabled}\n        showThumbnails={\n          userKey\n            ? userKey.thumbnails\n            : isFeatureEnabled(FeatureFlag.THUMBNAILS)\n        }\n        userId={userId}\n        loading={loading}\n        openDashboardEditModal={openDashboardEditModal}\n        saveFavoriteStatus={saveFavoriteStatus}\n        favoriteStatus={favoriteStatus[dashboard.id]}\n        handleBulkDashboardExport={handleBulkDashboardExport}\n        onDelete={dashboard => setDashboardToDelete(dashboard)}\n      />\n    ),\n    [\n      bulkSelectEnabled,\n      favoriteStatus,\n      hasPerm,\n      loading,\n      userId,\n      saveFavoriteStatus,\n      userKey,\n    ],\n  );\n\n  const subMenuButtons: SubMenuProps['buttons'] = [];\n  if (canDelete || canExport) {\n    subMenuButtons.push({\n      name: t('Bulk select'),\n      buttonStyle: 'secondary',\n      'data-test': 'bulk-select',\n      onClick: toggleBulkSelect,\n    });\n  }\n  if (canCreate) {\n    subMenuButtons.push({\n      name: (\n        <>\n          <i className=\"fa fa-plus\" /> {t('Dashboard')}\n        </>\n      ),\n      buttonStyle: 'primary',\n      onClick: () => {\n        window.location.assign('/dashboard/new');\n      },\n    });\n\n    if (isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT)) {\n      subMenuButtons.push({\n        name: (\n          <Tooltip\n            id=\"import-tooltip\"\n            title={t('Import dashboards')}\n            placement=\"bottomRight\"\n          >\n            <Icons.Import data-test=\"import-button\" />\n          </Tooltip>\n        ),\n        buttonStyle: 'link',\n        onClick: openDashboardImportModal,\n      });\n    }\n  }\n  return (\n    <>\n      <SubMenu name={t('Dashboards')} buttons={subMenuButtons} />\n      <ConfirmStatusChange\n        title={t('Please confirm')}\n        description={t(\n          'Are you sure you want to delete the selected dashboards?',\n        )}\n        onConfirm={handleBulkDashboardDelete}\n      >\n        {confirmDelete => {\n          const bulkActions: ListViewProps['bulkActions'] = [];\n          if (canDelete) {\n            bulkActions.push({\n              key: 'delete',\n              name: t('Delete'),\n              type: 'danger',\n              onSelect: confirmDelete,\n            });\n          }\n          if (canExport) {\n            bulkActions.push({\n              key: 'export',\n              name: t('Export'),\n              type: 'primary',\n              onSelect: handleBulkDashboardExport,\n            });\n          }\n          return (\n            <>\n              {dashboardToEdit && (\n                <PropertiesModal\n                  dashboardId={dashboardToEdit.id}\n                  show\n                  onHide={() => setDashboardToEdit(null)}\n                  onSubmit={handleDashboardEdit}\n                />\n              )}\n              {dashboardToDelete && (\n                <DeleteModal\n                  description={\n                    <>\n                      {t('Are you sure you want to delete')}{' '}\n                      <b>{dashboardToDelete.dashboard_title}</b>?\n                    </>\n                  }\n                  onConfirm={() => {\n                    handleDashboardDelete(\n                      dashboardToDelete,\n                      refreshData,\n                      addSuccessToast,\n                      addDangerToast,\n                      undefined,\n                      userId,\n                    );\n                    setDashboardToDelete(null);\n                  }}\n                  onHide={() => setDashboardToDelete(null)}\n                  open={!!dashboardToDelete}\n                  title={t('Please confirm')}\n                />\n              )}\n              <ListView<Dashboard>\n                bulkActions={bulkActions}\n                bulkSelectEnabled={bulkSelectEnabled}\n                cardSortSelectOptions={sortTypes}\n                className=\"dashboard-list-view\"\n                columns={columns}\n                count={dashboardCount}\n                data={dashboards}\n                disableBulkSelect={toggleBulkSelect}\n                fetchData={fetchData}\n                filters={filters}\n                initialSort={initialSort}\n                loading={loading}\n                pageSize={PAGE_SIZE}\n                showThumbnails={\n                  userKey\n                    ? userKey.thumbnails\n                    : isFeatureEnabled(FeatureFlag.THUMBNAILS)\n                }\n                renderCard={renderCard}\n                defaultViewMode={\n                  isFeatureEnabled(FeatureFlag.LISTVIEWS_DEFAULT_CARD_VIEW)\n                    ? 'card'\n                    : 'table'\n                }\n              />\n            </>\n          );\n        }}\n      </ConfirmStatusChange>\n\n      <ImportModelsModal\n        resourceName=\"dashboard\"\n        resourceLabel={t('dashboard')}\n        passwordsNeededMessage={PASSWORDS_NEEDED_MESSAGE}\n        confirmOverwriteMessage={CONFIRM_OVERWRITE_MESSAGE}\n        addDangerToast={addDangerToast}\n        addSuccessToast={addSuccessToast}\n        onModelImport={handleDashboardImport}\n        show={importingDashboard}\n        onHide={closeDashboardImportModal}\n        passwordFields={passwordFields}\n        setPasswordFields={setPasswordFields}\n        sshTunnelPasswordFields={sshTunnelPasswordFields}\n        setSSHTunnelPasswordFields={setSSHTunnelPasswordFields}\n        sshTunnelPrivateKeyFields={sshTunnelPrivateKeyFields}\n        setSSHTunnelPrivateKeyFields={setSSHTunnelPrivateKeyFields}\n        sshTunnelPrivateKeyPasswordFields={sshTunnelPrivateKeyPasswordFields}\n        setSSHTunnelPrivateKeyPasswordFields={\n          setSSHTunnelPrivateKeyPasswordFields\n        }\n      />\n\n      {preparingExport && <Loading />}\n    </>\n  );\n}\n\nexport default withToasts(DashboardList);\n"]},"metadata":{},"sourceType":"module"}