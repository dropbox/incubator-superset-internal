{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n// https://en.wikipedia.org/wiki/Linear_congruential_generator\nfunction stringAsciiPRNG(value, m) {\n  // Xn+1 = (a * Xn + c) % m\n  // 0 < a < m\n  // 0 <= c < m\n  // 0 <= X0 < m\n  const charCodes = [...value].map((letter) => letter.charCodeAt(0));\n  const len = charCodes.length;\n  const a = len % (m - 1) + 1;\n  const c = charCodes.reduce((current, next) => current + next) % m;\n  let random = charCodes[0] % m;\n  [...new Array(len)].forEach(() => {\n    random = (a * random + c) % m;\n  });\n  return random;\n}\nexport function getRandomColor(sampleValue, colorList) {\n  // if no value is passed, always return transparent color for consistency\n  if (!sampleValue)\n  return 'transparent';\n  // value based random color index,\n  // ensuring the same sampleValue always resolves to the same color\n  return colorList[stringAsciiPRNG(sampleValue, colorList.length)];\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAmBA;AACA,SAASA,eAAT,CAAyBC,KAAzB,EAAwCC,CAAxC,EAAiD;EAC/C;EACA;EACA;EACA;EAEA,MAAMC,SAAS,GAAG,CAAC,GAAGF,KAAJ,EAAWG,GAAX,CAAe,OAAM,KAAIC,MAAM,CAACC,UAAP,CAAkB,CAAlB,CAAzB,CAAlB;EACA,MAAMC,GAAG,GAAGJ,SAAS,CAACK,MAAtB;EAEA,MAAMC,CAAC,GAAIF,GAAG,IAAIL,CAAC,GAAG,CAAR,CAAJ,GAAkB,CAA5B;EACA,MAAMQ,CAAC,GAAGP,SAAS,CAACQ,MAAV,CAAiB,CAACC,OAAD,EAAUC,IAAV,KAAmBD,OAAO,GAAGC,IAA9C,IAAsDX,CAAhE;EAEA,IAAIY,MAAM,GAAGX,SAAS,CAAC,CAAD,CAAT,GAAeD,CAA5B;EAEA,CAAC,GAAG,IAAIa,KAAJ,CAAUR,GAAV,CAAJ,EAAoBS,OAApB,CAA4B,MAAK;IAC/BF,MAAM,GAAG,CAACL,CAAC,GAAGK,MAAJ,GAAaJ,CAAd,IAAmBR,CAA5B;EACD,CAFD;EAIA,OAAOY,MAAP;AACD;AAED,OAAM,SAAUG,cAAV,CAAyBC,WAAzB,EAA8CC,SAA9C,EAAiE;EACrE;EACA,IAAI,CAACD,WAAL;EAAkB,OAAO,aAAP;EAElB;EACA;EACA,OAAOC,SAAS,CAACnB,eAAe,CAACkB,WAAD,EAAcC,SAAS,CAACX,MAAxB,CAAhB,CAAhB;AACD","names":["stringAsciiPRNG","value","m","charCodes","map","letter","charCodeAt","len","length","a","c","reduce","current","next","random","Array","forEach","getRandomColor","sampleValue","colorList"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/components/FacePile/utils.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n// https://en.wikipedia.org/wiki/Linear_congruential_generator\nfunction stringAsciiPRNG(value: string, m: number) {\n  // Xn+1 = (a * Xn + c) % m\n  // 0 < a < m\n  // 0 <= c < m\n  // 0 <= X0 < m\n\n  const charCodes = [...value].map(letter => letter.charCodeAt(0));\n  const len = charCodes.length;\n\n  const a = (len % (m - 1)) + 1;\n  const c = charCodes.reduce((current, next) => current + next) % m;\n\n  let random = charCodes[0] % m;\n\n  [...new Array(len)].forEach(() => {\n    random = (a * random + c) % m;\n  });\n\n  return random;\n}\n\nexport function getRandomColor(sampleValue: string, colorList: string[]) {\n  // if no value is passed, always return transparent color for consistency\n  if (!sampleValue) return 'transparent';\n\n  // value based random color index,\n  // ensuring the same sampleValue always resolves to the same color\n  return colorList[stringAsciiPRNG(sampleValue, colorList.length)];\n}\n"]},"metadata":{},"sourceType":"module"}