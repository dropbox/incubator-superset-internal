{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { t, tn } from '@superset-ui/core';\nimport levenshtein from 'js-levenshtein';\nimport IssueCode from './IssueCode';\nimport ErrorAlert from './ErrorAlert';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst maxDistanceForSuggestion = 2;\nconst findMatches = (undefinedParameters, templateKeys) => {\n  const matches = {};\n  undefinedParameters.forEach((undefinedParameter) => {\n    templateKeys.forEach((templateKey) => {\n      if (levenshtein(undefinedParameter, templateKey) <= maxDistanceForSuggestion) {\n        if (!matches[undefinedParameter]) {\n          matches[undefinedParameter] = [];\n        }\n        matches[undefinedParameter].push(`\"${templateKey}\"`);\n      }\n    });\n  });\n  return matches;\n};\nfunction ParameterErrorMessage(_ref) {let { error, source = 'sqllab', subtitle } = _ref;\n  const { extra = { issue_codes: [] }, level, message } = error;\n  const triggerMessage = tn('This was triggered by:', 'This may be triggered by:', extra.issue_codes.length);\n  const matches = findMatches(extra.undefined_parameters || [], Object.keys(extra.template_parameters || {}));\n  const body = ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(\"p\", null,\n  Object.keys(matches).length > 0 && ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(\"p\", null, t('Did you mean:')),\n  ___EmotionJSX(\"ul\", null,\n  Object.entries(matches).map((_ref2) => {let [undefinedParameter, templateKeys] = _ref2;return ___EmotionJSX(\"li\", null,\n    tn('%(suggestion)s instead of \"%(undefinedParameter)s?\"', '%(firstSuggestions)s or %(lastSuggestion)s instead of \"%(undefinedParameter)s\"?', templateKeys.length, {\n      suggestion: templateKeys.join(', '),\n      firstSuggestions: templateKeys.slice(0, -1).join(', '),\n      lastSuggestion: templateKeys[templateKeys.length - 1],\n      undefinedParameter }));})),\n\n\n\n  ___EmotionJSX(\"br\", null)),\n\n  triggerMessage,\n  ___EmotionJSX(\"br\", null),\n  extra.issue_codes.length > 0 &&\n  extra.issue_codes.\n  map((issueCode) => ___EmotionJSX(IssueCode, issueCode)).\n  reduce((prev, curr) => [prev, ___EmotionJSX(\"br\", null), curr])));\n\n\n  const copyText = `${message}\n${triggerMessage}\n${extra.issue_codes.map((issueCode) => issueCode.message).join('\\n')}`;\n  return ___EmotionJSX(ErrorAlert, { title: t('Parameter error'), subtitle: subtitle, level: level, source: source, copyText: copyText, body: body });\n}\nexport default ParameterErrorMessage;","map":{"version":3,"mappings":"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","names":["React","t","tn","levenshtein","IssueCode","ErrorAlert","maxDistanceForSuggestion","findMatches","undefinedParameters","templateKeys","matches","forEach","undefinedParameter","templateKey","push","ParameterErrorMessage","error","source","subtitle","extra","issue_codes","level","message","triggerMessage","length","undefined_parameters","Object","keys","template_parameters","body","entries","map","suggestion","join","firstSuggestions","slice","lastSuggestion","issueCode","reduce","prev","curr","copyText"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/ErrorMessage/ParameterErrorMessage.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { t, tn } from '@superset-ui/core';\nimport levenshtein from 'js-levenshtein';\n\nimport { ErrorMessageComponentProps } from './types';\nimport IssueCode from './IssueCode';\nimport ErrorAlert from './ErrorAlert';\n\ninterface ParameterErrorExtra {\n  undefined_parameters?: string[];\n  template_parameters?: object;\n  issue_codes: {\n    code: number;\n    message: string;\n  }[];\n}\n\nconst maxDistanceForSuggestion = 2;\nconst findMatches = (undefinedParameters: string[], templateKeys: string[]) => {\n  const matches: { [undefinedParameter: string]: string[] } = {};\n  undefinedParameters.forEach(undefinedParameter => {\n    templateKeys.forEach(templateKey => {\n      if (\n        levenshtein(undefinedParameter, templateKey) <= maxDistanceForSuggestion\n      ) {\n        if (!matches[undefinedParameter]) {\n          matches[undefinedParameter] = [];\n        }\n        matches[undefinedParameter].push(`\"${templateKey}\"`);\n      }\n    });\n  });\n  return matches;\n};\n\nfunction ParameterErrorMessage({\n  error,\n  source = 'sqllab',\n  subtitle,\n}: ErrorMessageComponentProps<ParameterErrorExtra>) {\n  const { extra = { issue_codes: [] }, level, message } = error;\n\n  const triggerMessage = tn(\n    'This was triggered by:',\n    'This may be triggered by:',\n    extra.issue_codes.length,\n  );\n\n  const matches = findMatches(\n    extra.undefined_parameters || [],\n    Object.keys(extra.template_parameters || {}),\n  );\n\n  const body = (\n    <>\n      <p>\n        {Object.keys(matches).length > 0 && (\n          <>\n            <p>{t('Did you mean:')}</p>\n            <ul>\n              {Object.entries(matches).map(\n                ([undefinedParameter, templateKeys]) => (\n                  <li>\n                    {tn(\n                      '%(suggestion)s instead of \"%(undefinedParameter)s?\"',\n                      '%(firstSuggestions)s or %(lastSuggestion)s instead of \"%(undefinedParameter)s\"?',\n                      templateKeys.length,\n                      {\n                        suggestion: templateKeys.join(', '),\n                        firstSuggestions: templateKeys.slice(0, -1).join(', '),\n                        lastSuggestion: templateKeys[templateKeys.length - 1],\n                        undefinedParameter,\n                      },\n                    )}\n                  </li>\n                ),\n              )}\n            </ul>\n            <br />\n          </>\n        )}\n        {triggerMessage}\n        <br />\n        {extra.issue_codes.length > 0 &&\n          extra.issue_codes\n            .map<React.ReactNode>(issueCode => <IssueCode {...issueCode} />)\n            .reduce((prev, curr) => [prev, <br />, curr])}\n      </p>\n    </>\n  );\n\n  const copyText = `${message}\n${triggerMessage}\n${extra.issue_codes.map(issueCode => issueCode.message).join('\\n')}`;\n\n  return (\n    <ErrorAlert\n      title={t('Parameter error')}\n      subtitle={subtitle}\n      level={level}\n      source={source}\n      copyText={copyText}\n      body={body}\n    />\n  );\n}\n\nexport default ParameterErrorMessage;\n"]},"metadata":{},"sourceType":"module"}