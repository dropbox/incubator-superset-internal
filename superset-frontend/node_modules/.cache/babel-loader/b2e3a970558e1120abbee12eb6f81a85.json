{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Array.sort(...) comparator for potential numeric values with the ability to\n * treat null and NaN as the smallest or largest values or always sort to bottom.\n */\nexport default function sortNumericValues(valueA, valueB, _temp) {let { descending = false, nanTreatment = 'alwaysLast' } = _temp === void 0 ? {} : _temp;\n  let orderByIsNaN = Number(valueA == null) - Number(valueB == null) ||\n  Number(Number.isNaN(Number(valueA))) - Number(Number.isNaN(Number(valueB)));\n  // if A is null or NaN and B is not, `orderByIsNaN` is 1,\n  // which will make A come after B in the sorted array,\n  // since we want to treat A as smallest number, we need to flip the sign\n  // when sorting in ascending order.\n  if (nanTreatment === 'asSmallest' && !descending) {\n    orderByIsNaN = -orderByIsNaN;\n  }\n  if (nanTreatment === 'asLargest' && descending) {\n    orderByIsNaN = -orderByIsNaN;\n  }\n  return orderByIsNaN || (Number(valueA) - Number(valueB)) * (descending ? -1 : 1);\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(sortNumericValues, \"sortNumericValues\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/utils/sortNumericValues.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"wSAsBA;;;;AAIA,eAAc,SAAUA,iBAAV,CACZC,MADY,EAEZC,MAFY,SAMiD,KAH7D,EACEC,UAAU,GAAG,KADf,EAEEC,YAAY,GAAG,YAFjB,EAG6D,sBAAF,EAAE;EAE7D,IAAIC,YAAY,GACdC,MAAM,CAACL,MAAM,IAAI,IAAX,CAAN,GAAyBK,MAAM,CAACJ,MAAM,IAAI,IAAX,CAA/B;EACAI,MAAM,CAACA,MAAM,CAACC,KAAP,CAAaD,MAAM,CAACL,MAAD,CAAnB,CAAD,CAAN,GAAuCK,MAAM,CAACA,MAAM,CAACC,KAAP,CAAaD,MAAM,CAACJ,MAAD,CAAnB,CAAD,CAF/C;EAIA;EACA;EACA;EACA;EACA,IAAIE,YAAY,KAAK,YAAjB,IAAiC,CAACD,UAAtC,EAAkD;IAChDE,YAAY,GAAG,CAACA,YAAhB;EACD;EACD,IAAID,YAAY,KAAK,WAAjB,IAAgCD,UAApC,EAAgD;IAC9CE,YAAY,GAAG,CAACA,YAAhB;EACD;EACD,OACEA,YAAY,IAAI,CAACC,MAAM,CAACL,MAAD,CAAN,GAAiBK,MAAM,CAACJ,MAAD,CAAxB,KAAqCC,UAAU,GAAG,CAAC,CAAJ,GAAQ,CAAvD,CADlB;AAGD,C,iLAzBuBH,iB","names":["sortNumericValues","valueA","valueB","descending","nanTreatment","orderByIsNaN","Number","isNaN"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/utils/sortNumericValues.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { JsonPrimitive } from '@superset-ui/core';\n\nexport type NaNTreatment = 'alwaysLast' | 'asSmallest' | 'asLargest';\n\n/**\n * Array.sort(...) comparator for potential numeric values with the ability to\n * treat null and NaN as the smallest or largest values or always sort to bottom.\n */\nexport default function sortNumericValues(\n  valueA: JsonPrimitive,\n  valueB: JsonPrimitive,\n  {\n    descending = false,\n    nanTreatment = 'alwaysLast',\n  }: { descending?: boolean; nanTreatment?: NaNTreatment } = {},\n) {\n  let orderByIsNaN =\n    Number(valueA == null) - Number(valueB == null) ||\n    Number(Number.isNaN(Number(valueA))) - Number(Number.isNaN(Number(valueB)));\n\n  // if A is null or NaN and B is not, `orderByIsNaN` is 1,\n  // which will make A come after B in the sorted array,\n  // since we want to treat A as smallest number, we need to flip the sign\n  // when sorting in ascending order.\n  if (nanTreatment === 'asSmallest' && !descending) {\n    orderByIsNaN = -orderByIsNaN;\n  }\n  if (nanTreatment === 'asLargest' && descending) {\n    orderByIsNaN = -orderByIsNaN;\n  }\n  return (\n    orderByIsNaN || (Number(valueA) - Number(valueB)) * (descending ? -1 : 1)\n  );\n}\n"]},"metadata":{},"sourceType":"module"}