{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useMemo } from 'react';\nimport { Tag } from 'antd';\nimport { css, isAdhocColumn, t, useTheme } from '@superset-ui/core';\nimport RowCountLabel from 'src/explore/components/RowCountLabel';\nimport Icons from 'src/components/Icons';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport default function TableControls(_ref) {let { filters, setFilters, totalCount, loading, onReload } = _ref;\n  const theme = useTheme();\n  const filterMap = useMemo(() => Object.assign({}, ...filters.map((filter) => ({\n    [isAdhocColumn(filter.col) ?\n    filter.col.label :\n    filter.col]: filter }))),\n  [filters]);\n  const removeFilter = useCallback((colName) => {\n    const updatedFilterMap = { ...filterMap };\n    delete updatedFilterMap[colName];\n    setFilters([...Object.values(updatedFilterMap)]);\n  }, [filterMap, setFilters]);\n  const filterTags = useMemo(() => Object.entries(filterMap).\n  map((_ref2) => {let [colName, { val, formattedVal }] = _ref2;return {\n      colName,\n      val: formattedVal != null ? formattedVal : val };}).\n\n  sort((a, b) => a.colName.localeCompare(b.colName)), [filterMap]);\n  return ___EmotionJSX(\"div\", { css: css`\n        display: flex;\n        justify-content: space-between;\n        padding: ${theme.gridUnit / 2}px 0;\n        margin-bottom: ${theme.gridUnit * 2}px;\n      ` },\n  ___EmotionJSX(\"div\", { css: css`\n          display: flex;\n          flex-wrap: wrap;\n          margin-bottom: -${theme.gridUnit * 4}px;\n        ` },\n  filterTags.map((_ref3) => {let { colName, val } = _ref3;return ___EmotionJSX(Tag, { closable: true, onClose: removeFilter.bind(null, colName), key: colName, css: css`\n              height: ${theme.gridUnit * 6}px;\n              display: flex;\n              align-items: center;\n              padding: ${theme.gridUnit / 2}px ${theme.gridUnit * 2}px;\n              margin-right: ${theme.gridUnit * 4}px;\n              margin-bottom: ${theme.gridUnit * 4}px;\n              line-height: 1.2;\n            ` },\n    ___EmotionJSX(\"span\", { css: css`\n                margin-right: ${theme.gridUnit}px;\n              ` },\n    colName),\n\n    ___EmotionJSX(\"strong\", null, val));})),\n\n\n  ___EmotionJSX(\"div\", { css: css`\n          display: flex;\n          align-items: center;\n          height: min-content;\n        ` },\n  ___EmotionJSX(RowCountLabel, { loading: loading && !totalCount, rowcount: totalCount }),\n  ___EmotionJSX(Icons.ReloadOutlined, { iconColor: theme.colors.grayscale.light1, iconSize: \"l\", \"aria-label\": t('Reload'), role: \"button\", onClick: onReload })));\n\n\n}","map":{"version":3,"mappings":"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","names":["React","useCallback","useMemo","Tag","css","isAdhocColumn","t","useTheme","RowCountLabel","Icons","TableControls","filters","setFilters","totalCount","loading","onReload","theme","filterMap","Object","assign","map","filter","col","label","removeFilter","updatedFilterMap","colName","values","filterTags","entries","val","formattedVal","sort","a","b","localeCompare","gridUnit","bind","colors","grayscale","light1"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/components/Chart/DrillDetail/DrillDetailTableControls.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useCallback, useMemo } from 'react';\nimport { Tag } from 'antd';\nimport {\n  BinaryQueryObjectFilterClause,\n  css,\n  isAdhocColumn,\n  t,\n  useTheme,\n} from '@superset-ui/core';\nimport RowCountLabel from 'src/explore/components/RowCountLabel';\nimport Icons from 'src/components/Icons';\n\nexport default function TableControls({\n  filters,\n  setFilters,\n  totalCount,\n  loading,\n  onReload,\n}: {\n  filters: BinaryQueryObjectFilterClause[];\n  setFilters: (filters: BinaryQueryObjectFilterClause[]) => void;\n  totalCount?: number;\n  loading: boolean;\n  onReload: () => void;\n}) {\n  const theme = useTheme();\n  const filterMap: Record<string, BinaryQueryObjectFilterClause> = useMemo(\n    () =>\n      Object.assign(\n        {},\n        ...filters.map(filter => ({\n          [isAdhocColumn(filter.col)\n            ? (filter.col.label as string)\n            : filter.col]: filter,\n        })),\n      ),\n    [filters],\n  );\n\n  const removeFilter = useCallback(\n    colName => {\n      const updatedFilterMap = { ...filterMap };\n      delete updatedFilterMap[colName];\n      setFilters([...Object.values(updatedFilterMap)]);\n    },\n    [filterMap, setFilters],\n  );\n\n  const filterTags = useMemo(\n    () =>\n      Object.entries(filterMap)\n        .map(([colName, { val, formattedVal }]) => ({\n          colName,\n          val: formattedVal ?? val,\n        }))\n        .sort((a, b) => a.colName.localeCompare(b.colName)),\n    [filterMap],\n  );\n\n  return (\n    <div\n      css={css`\n        display: flex;\n        justify-content: space-between;\n        padding: ${theme.gridUnit / 2}px 0;\n        margin-bottom: ${theme.gridUnit * 2}px;\n      `}\n    >\n      <div\n        css={css`\n          display: flex;\n          flex-wrap: wrap;\n          margin-bottom: -${theme.gridUnit * 4}px;\n        `}\n      >\n        {filterTags.map(({ colName, val }) => (\n          <Tag\n            closable\n            onClose={removeFilter.bind(null, colName)}\n            key={colName}\n            css={css`\n              height: ${theme.gridUnit * 6}px;\n              display: flex;\n              align-items: center;\n              padding: ${theme.gridUnit / 2}px ${theme.gridUnit * 2}px;\n              margin-right: ${theme.gridUnit * 4}px;\n              margin-bottom: ${theme.gridUnit * 4}px;\n              line-height: 1.2;\n            `}\n            data-test=\"filter-col\"\n          >\n            <span\n              css={css`\n                margin-right: ${theme.gridUnit}px;\n              `}\n            >\n              {colName}\n            </span>\n            <strong data-test=\"filter-val\">{val}</strong>\n          </Tag>\n        ))}\n      </div>\n      <div\n        css={css`\n          display: flex;\n          align-items: center;\n          height: min-content;\n        `}\n      >\n        <RowCountLabel loading={loading && !totalCount} rowcount={totalCount} />\n        <Icons.ReloadOutlined\n          iconColor={theme.colors.grayscale.light1}\n          iconSize=\"l\"\n          aria-label={t('Reload')}\n          role=\"button\"\n          onClick={onReload}\n        />\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}