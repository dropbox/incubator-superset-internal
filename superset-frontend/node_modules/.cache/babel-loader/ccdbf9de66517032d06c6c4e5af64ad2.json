{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useState } from 'react';\nimport shortid from 'shortid';\nimport { BroadcastChannel } from 'broadcast-channel';\n// TODO: We are using broadcast-channel to support Safari.\n// The native BroadcastChannel API will be supported in Safari version 15.4.\n// After that, we should remove this dependency and use the native API.\nconst channel = new BroadcastChannel('tab_id_channel');\nexport function useTabId() {\n  const [tabId, setTabId] = useState();\n  function isStorageAvailable() {\n    try {\n      return window.localStorage && window.sessionStorage;\n    }\n    catch (error) {\n      return false;\n    }\n  }\n  useEffect(() => {\n    if (!isStorageAvailable()) {\n      if (!tabId) {\n        setTabId(shortid.generate());\n      }\n      return;\n    }\n    const updateTabId = () => {\n      const lastTabId = window.localStorage.getItem('last_tab_id');\n      const newTabId = String(lastTabId ? Number.parseInt(lastTabId, 10) + 1 : 1);\n      window.sessionStorage.setItem('tab_id', newTabId);\n      window.localStorage.setItem('last_tab_id', newTabId);\n      setTabId(newTabId);\n    };\n    const storedTabId = window.sessionStorage.getItem('tab_id');\n    if (storedTabId) {\n      channel.postMessage({\n        type: 'REQUESTING_TAB_ID',\n        tabId: storedTabId });\n\n      setTabId(storedTabId);\n    } else\n    {\n      updateTabId();\n    }\n    channel.onmessage = (messageEvent) => {\n      if (messageEvent.tabId === tabId) {\n        if (messageEvent.type === 'REQUESTING_TAB_ID') {\n          const message = {\n            type: 'TAB_ID_DENIED',\n            tabId: messageEvent.tabId };\n\n          channel.postMessage(message);\n        } else\n        if (messageEvent.type === 'TAB_ID_DENIED') {\n          updateTabId();\n        }\n      }\n    };\n  }, [tabId]);\n  return tabId;\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,SAASC,gBAAT,QAAiC,mBAAjC;AAOA;AACA;AACA;AACA,MAAMC,OAAO,GAAG,IAAID,gBAAJ,CAA0C,gBAA1C,CAAhB;AAEA,OAAM,SAAUE,QAAV,GAAkB;EACtB,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,EAAlC;EAEA,SAASO,kBAAT,GAA2B;IACzB,IAAI;MACF,OAAOC,MAAM,CAACC,YAAP,IAAuBD,MAAM,CAACE,cAArC;IACD;IAAC,OAAOC,KAAP,EAAc;MACd,OAAO,KAAP;IACD;EACF;EACDZ,SAAS,CAAC,MAAK;IACb,IAAI,CAACQ,kBAAkB,EAAvB,EAA2B;MACzB,IAAI,CAACF,KAAL,EAAY;QACVC,QAAQ,CAACL,OAAO,CAACW,QAAR,EAAD,CAAR;MACD;MACD;IACD;IAED,MAAMC,WAAW,GAAG,MAAK;MACvB,MAAMC,SAAS,GAAGN,MAAM,CAACC,YAAP,CAAoBM,OAApB,CAA4B,aAA5B,CAAlB;MACA,MAAMC,QAAQ,GAAGC,MAAM,CACrBH,SAAS,GAAGI,MAAM,CAACC,QAAP,CAAgBL,SAAhB,EAA2B,EAA3B,IAAiC,CAApC,GAAwC,CAD5B,CAAvB;MAGAN,MAAM,CAACE,cAAP,CAAsBU,OAAtB,CAA8B,QAA9B,EAAwCJ,QAAxC;MACAR,MAAM,CAACC,YAAP,CAAoBW,OAApB,CAA4B,aAA5B,EAA2CJ,QAA3C;MACAV,QAAQ,CAACU,QAAD,CAAR;IACD,CARD;IAUA,MAAMK,WAAW,GAAGb,MAAM,CAACE,cAAP,CAAsBK,OAAtB,CAA8B,QAA9B,CAApB;IACA,IAAIM,WAAJ,EAAiB;MACflB,OAAO,CAACmB,WAAR,CAAoB;QAClBC,IAAI,EAAE,mBADY;QAElBlB,KAAK,EAAEgB,WAFW,EAApB;;MAIAf,QAAQ,CAACe,WAAD,CAAR;IACD,CAND;IAMO;MACLR,WAAW;IACZ;IAEDV,OAAO,CAACqB,SAAR,GAAoB,aAAY,KAAG;MACjC,IAAIC,YAAY,CAACpB,KAAb,KAAuBA,KAA3B,EAAkC;QAChC,IAAIoB,YAAY,CAACF,IAAb,KAAsB,mBAA1B,EAA+C;UAC7C,MAAMG,OAAO,GAAwB;YACnCH,IAAI,EAAE,eAD6B;YAEnClB,KAAK,EAAEoB,YAAY,CAACpB,KAFe,EAArC;;UAIAF,OAAO,CAACmB,WAAR,CAAoBI,OAApB;QACD,CAND;QAMO,IAAID,YAAY,CAACF,IAAb,KAAsB,eAA1B,EAA2C;UAChDV,WAAW;QACZ;MACF;IACF,CAZD;EAaD,CA1CQ,EA0CN,CAACR,KAAD,CA1CM,CAAT;EA4CA,OAAOA,KAAP;AACD","names":["useEffect","useState","shortid","BroadcastChannel","channel","useTabId","tabId","setTabId","isStorageAvailable","window","localStorage","sessionStorage","error","generate","updateTabId","lastTabId","getItem","newTabId","String","Number","parseInt","setItem","storedTabId","postMessage","type","onmessage","messageEvent","message"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/hooks/useTabId.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useState } from 'react';\nimport shortid from 'shortid';\nimport { BroadcastChannel } from 'broadcast-channel';\n\ninterface TabIdChannelMessage {\n  type: 'REQUESTING_TAB_ID' | 'TAB_ID_DENIED';\n  tabId: string;\n}\n\n// TODO: We are using broadcast-channel to support Safari.\n// The native BroadcastChannel API will be supported in Safari version 15.4.\n// After that, we should remove this dependency and use the native API.\nconst channel = new BroadcastChannel<TabIdChannelMessage>('tab_id_channel');\n\nexport function useTabId() {\n  const [tabId, setTabId] = useState<string>();\n\n  function isStorageAvailable() {\n    try {\n      return window.localStorage && window.sessionStorage;\n    } catch (error) {\n      return false;\n    }\n  }\n  useEffect(() => {\n    if (!isStorageAvailable()) {\n      if (!tabId) {\n        setTabId(shortid.generate());\n      }\n      return;\n    }\n\n    const updateTabId = () => {\n      const lastTabId = window.localStorage.getItem('last_tab_id');\n      const newTabId = String(\n        lastTabId ? Number.parseInt(lastTabId, 10) + 1 : 1,\n      );\n      window.sessionStorage.setItem('tab_id', newTabId);\n      window.localStorage.setItem('last_tab_id', newTabId);\n      setTabId(newTabId);\n    };\n\n    const storedTabId = window.sessionStorage.getItem('tab_id');\n    if (storedTabId) {\n      channel.postMessage({\n        type: 'REQUESTING_TAB_ID',\n        tabId: storedTabId,\n      });\n      setTabId(storedTabId);\n    } else {\n      updateTabId();\n    }\n\n    channel.onmessage = messageEvent => {\n      if (messageEvent.tabId === tabId) {\n        if (messageEvent.type === 'REQUESTING_TAB_ID') {\n          const message: TabIdChannelMessage = {\n            type: 'TAB_ID_DENIED',\n            tabId: messageEvent.tabId,\n          };\n          channel.postMessage(message);\n        } else if (messageEvent.type === 'TAB_ID_DENIED') {\n          updateTabId();\n        }\n      }\n    };\n  }, [tabId]);\n\n  return tabId;\n}\n"]},"metadata":{},"sourceType":"module"}