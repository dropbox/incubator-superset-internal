{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useMemo } from 'react';\nimport { useDrop } from 'react-dnd';\nimport { t, useTheme } from '@superset-ui/core';\nimport ControlHeader from 'src/explore/components/ControlHeader';\nimport { AddControlLabel, DndLabelsContainer, HeaderContainer } from 'src/explore/components/controls/OptionControls';\nimport Icons from 'src/components/Icons';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport default function DndSelectLabel(_ref) {let { displayGhostButton = true, accept, valuesRenderer, ...props } = _ref;\n  const theme = useTheme();\n  const [{ isOver, canDrop }, datasourcePanelDrop] = useDrop({\n    accept,\n    drop: (item) => {\n      props.onDrop(item);\n      props.onDropValue == null ? void 0 : props.onDropValue(item.value);\n    },\n    canDrop: (item) => {var _props$canDropValue;return props.canDrop(item) && ((_props$canDropValue = props.canDropValue == null ? void 0 : props.canDropValue(item.value)) != null ? _props$canDropValue : true);},\n    collect: (monitor) => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop(),\n      type: monitor.getItemType() }) });\n\n\n  const values = useMemo(() => valuesRenderer(), [valuesRenderer]);\n  function renderGhostButton() {\n    return ___EmotionJSX(AddControlLabel, { cancelHover: !props.onClickGhostButton, onClick: props.onClickGhostButton },\n    ___EmotionJSX(Icons.PlusSmall, { iconColor: theme.colors.grayscale.light1 }),\n    t(props.ghostButtonText));\n\n  }\n  return ___EmotionJSX(\"div\", { ref: datasourcePanelDrop },\n  ___EmotionJSX(HeaderContainer, null,\n  ___EmotionJSX(ControlHeader, props)),\n\n  ___EmotionJSX(DndLabelsContainer, { canDrop: canDrop, isOver: isOver },\n  values,\n  displayGhostButton && renderGhostButton()));\n\n\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,KAAP,IAA2BC,OAA3B,QAA0C,OAA1C;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,CAAT,EAAYC,QAAZ,QAA4B,mBAA5B;AACA,OAAOC,aAAP,MAA0B,sCAA1B;AACA,SACEC,eADF,EAEEC,kBAFF,EAGEC,eAHF,QAIO,gDAJP;AASA,OAAOC,KAAP,MAAkB,sBAAlB,C;AAgBA,eAAc,SAAUC,cAAV,OAKQ,KALiB,EACrCC,kBAAkB,GAAG,IADgB,EAErCC,MAFqC,EAGrCC,cAHqC,EAIrC,GAAGC,KAJkC,EAKjB;EACpB,MAAMC,KAAK,GAAGX,QAAQ,EAAtB;EAEA,MAAM,CAAC,EAAEY,MAAF,EAAUC,OAAV,EAAD,EAAsBC,mBAAtB,IAA6ChB,OAAO,CAAC;IACzDU,MADyD;IAGzDO,IAAI,EAAE,CAACC,IAAD,KAAiC;MACrCN,KAAK,CAACO,MAAN,CAAaD,IAAb;MACAN,KAAK,CAACQ,WAAN,yBAAK,CAACA,WAAN,CAAoBF,IAAI,CAACG,KAAzB;IACD,CANwD;IAQzDN,OAAO,EAAE,CAACG,IAAD,qCACPN,KAAK,CAACG,OAAN,CAAcG,IAAd,6BAAwBN,KAAK,CAACU,YAA9B,oBAAwBV,KAAK,CAACU,YAAN,CAAqBJ,IAAI,CAACG,KAA1B,CAAxB,kCAA4D,IAA5D,CADO,EARgD;IAWzDE,OAAO,EAAE,QAAO,MAAK;MACnBT,MAAM,EAAEU,OAAO,CAACV,MAAR,EADW;MAEnBC,OAAO,EAAES,OAAO,CAACT,OAAR,EAFU;MAGnBU,IAAI,EAAED,OAAO,CAACE,WAAR,EAHa,EAAL,CAXyC,EAAD,CAA1D;;;EAkBA,MAAMC,MAAM,GAAG5B,OAAO,CAAC,MAAMY,cAAc,EAArB,EAAyB,CAACA,cAAD,CAAzB,CAAtB;EAEA,SAASiB,iBAAT,GAA0B;IACxB,OACE,cAAC,eAAD,IACE,WAAW,EAAE,CAAChB,KAAK,CAACiB,kBADtB,EAEE,OAAO,EAAEjB,KAAK,CAACiB,kBAFjB;IAIE,cAAC,KAAD,CAAO,SAAP,IAAiB,SAAS,EAAEhB,KAAK,CAACiB,MAAN,CAAaC,SAAb,CAAuBC,MAAnD,GAJF;IAKG/B,CAAC,CAACW,KAAK,CAACqB,eAAP,CALJ,CADF;;EASD;EAED,OACE,uBAAK,GAAG,EAAEjB,mBAAV;EACE,cAAC,eAAD;EACE,cAAC,aAAD,EAAmBJ,KAAnB,CADF,CADF;;EAIE,cAAC,kBAAD,IAEE,OAAO,EAAEG,OAFX,EAGE,MAAM,EAAED,MAHV;EAKGa,MALH;EAMGlB,kBAAkB,IAAImB,iBAAiB,EAN1C,CAJF,CADF;;;AAeD","names":["React","useMemo","useDrop","t","useTheme","ControlHeader","AddControlLabel","DndLabelsContainer","HeaderContainer","Icons","DndSelectLabel","displayGhostButton","accept","valuesRenderer","props","theme","isOver","canDrop","datasourcePanelDrop","drop","item","onDrop","onDropValue","value","canDropValue","collect","monitor","type","getItemType","values","renderGhostButton","onClickGhostButton","colors","grayscale","light1","ghostButtonText"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndSelectLabel.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { ReactNode, useMemo } from 'react';\nimport { useDrop } from 'react-dnd';\nimport { t, useTheme } from '@superset-ui/core';\nimport ControlHeader from 'src/explore/components/ControlHeader';\nimport {\n  AddControlLabel,\n  DndLabelsContainer,\n  HeaderContainer,\n} from 'src/explore/components/controls/OptionControls';\nimport {\n  DatasourcePanelDndItem,\n  DndItemValue,\n} from 'src/explore/components/DatasourcePanel/types';\nimport Icons from 'src/components/Icons';\nimport { DndItemType } from '../../DndItemType';\n\nexport type DndSelectLabelProps = {\n  name: string;\n  accept: DndItemType | DndItemType[];\n  ghostButtonText: string;\n  onDrop: (item: DatasourcePanelDndItem) => void;\n  canDrop: (item: DatasourcePanelDndItem) => boolean;\n  canDropValue?: (value: DndItemValue) => boolean;\n  onDropValue?: (value: DndItemValue) => void;\n  valuesRenderer: () => ReactNode;\n  displayGhostButton?: boolean;\n  onClickGhostButton: () => void;\n};\n\nexport default function DndSelectLabel({\n  displayGhostButton = true,\n  accept,\n  valuesRenderer,\n  ...props\n}: DndSelectLabelProps) {\n  const theme = useTheme();\n\n  const [{ isOver, canDrop }, datasourcePanelDrop] = useDrop({\n    accept,\n\n    drop: (item: DatasourcePanelDndItem) => {\n      props.onDrop(item);\n      props.onDropValue?.(item.value);\n    },\n\n    canDrop: (item: DatasourcePanelDndItem) =>\n      props.canDrop(item) && (props.canDropValue?.(item.value) ?? true),\n\n    collect: monitor => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop(),\n      type: monitor.getItemType(),\n    }),\n  });\n\n  const values = useMemo(() => valuesRenderer(), [valuesRenderer]);\n\n  function renderGhostButton() {\n    return (\n      <AddControlLabel\n        cancelHover={!props.onClickGhostButton}\n        onClick={props.onClickGhostButton}\n      >\n        <Icons.PlusSmall iconColor={theme.colors.grayscale.light1} />\n        {t(props.ghostButtonText)}\n      </AddControlLabel>\n    );\n  }\n\n  return (\n    <div ref={datasourcePanelDrop}>\n      <HeaderContainer>\n        <ControlHeader {...props} />\n      </HeaderContainer>\n      <DndLabelsContainer\n        data-test=\"dnd-labels-container\"\n        canDrop={canDrop}\n        isOver={isOver}\n      >\n        {values}\n        {displayGhostButton && renderGhostButton()}\n      </DndLabelsContainer>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}