{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { InfoTooltipWithTrigger } from '@superset-ui/chart-controls';\nimport React from 'react';\nimport { AntdCheckbox } from 'src/components';\nimport { getChartControlPanelRegistry, styled, t } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { FormItem } from 'src/components/Form';\nimport { doesColumnMatchFilterType, getControlItems, setNativeFilterFieldValues } from './utils';\nimport { StyledFormItem, StyledLabel, StyledRowFormItem } from './FiltersConfigForm';\nimport { ColumnSelect } from './ColumnSelect';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst CleanFormItem = styled(FormItem)`\n  margin-bottom: 0;\n`;\nexport default function getControlItemsMap(_ref) {var _getControlItems;let { datasetId, disabled, forceUpdate, form, filterId, filterType, filterToEdit, formFilter, removed } = _ref;\n  const controlPanelRegistry = getChartControlPanelRegistry();\n  const controlItems = (_getControlItems = getControlItems(controlPanelRegistry.get(filterType))) != null ? _getControlItems : [];\n  const mapControlItems = {};\n  const mapMainControlItems = {};\n  controlItems.\n  filter((mainControlItem) => (mainControlItem == null ? void 0 : mainControlItem.name) === 'groupby').\n  forEach((mainControlItem) => {var _filterToEdit$control, _filterToEdit$control2, _mainControlItem$conf, _filterToEdit$targets, _filterToEdit$targets2, _mainControlItem$conf2, _mainControlItem$conf3, _mainControlItem$conf4, _mainControlItem$conf5;\n    const initialValue = (_filterToEdit$control = filterToEdit == null ? void 0 : (_filterToEdit$control2 = filterToEdit.controlValues) == null ? void 0 : _filterToEdit$control2[mainControlItem.name]) != null ? _filterToEdit$control :\n    mainControlItem == null ? void 0 : (_mainControlItem$conf = mainControlItem.config) == null ? void 0 : _mainControlItem$conf.default;\n    const initColumn = filterToEdit == null ? void 0 : (_filterToEdit$targets = filterToEdit.targets[0]) == null ? void 0 : (_filterToEdit$targets2 = _filterToEdit$targets.column) == null ? void 0 : _filterToEdit$targets2.name;\n    const element = ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(CleanFormItem, { name: ['filters', filterId, 'requiredFirst', mainControlItem.name], hidden: true, initialValue: (mainControlItem == null ? void 0 : (_mainControlItem$conf2 = mainControlItem.config) == null ? void 0 : _mainControlItem$conf2.requiredFirst) && (\n      filterToEdit == null ? void 0 : filterToEdit.requiredFirst) }),\n    ___EmotionJSX(StyledFormItem\n    // don't show the column select unless we have a dataset\n    , { name: ['filters', filterId, 'column'], initialValue: initColumn, label: ___EmotionJSX(StyledLabel, null,\n      ((_mainControlItem$conf3 = mainControlItem.config) == null ? void 0 : _mainControlItem$conf3.label) || t('Column')),\n      rules: [\n      {\n        required: ((_mainControlItem$conf4 = mainControlItem.config) == null ? void 0 : _mainControlItem$conf4.required) && !removed,\n        message: t('Column is required') }],\n\n      \"data-test\": \"field-input\" },\n    ___EmotionJSX(ColumnSelect, { mode: ((_mainControlItem$conf5 = mainControlItem.config) == null ? void 0 : _mainControlItem$conf5.multiple) && 'multiple', form: form, filterId: filterId, datasetId: datasetId, filterValues: (column) => doesColumnMatchFilterType((formFilter == null ? void 0 : formFilter.filterType) || '', column), onChange: () => {\n        // We need reset default value when column changed\n        setNativeFilterFieldValues(form, filterId, {\n          defaultDataMask: null });\n\n        forceUpdate();\n      } })));\n\n\n    mapMainControlItems[mainControlItem.name] = {\n      element,\n      checked: initialValue };\n\n  });\n  controlItems.\n  filter((controlItem) => {var _controlItem$config;return (controlItem == null ? void 0 : (_controlItem$config = controlItem.config) == null ? void 0 : _controlItem$config.renderTrigger) &&\n    controlItem.name !== 'sortAscending' &&\n    controlItem.name !== 'enableSingleValue';}).\n  forEach((controlItem) => {var _filterToEdit$control3, _filterToEdit$control4, _controlItem$config2, _controlItem$config3;\n    const initialValue = (_filterToEdit$control3 = filterToEdit == null ? void 0 : (_filterToEdit$control4 = filterToEdit.controlValues) == null ? void 0 : _filterToEdit$control4[controlItem.name]) != null ? _filterToEdit$control3 :\n    controlItem == null ? void 0 : (_controlItem$config2 = controlItem.config) == null ? void 0 : _controlItem$config2.default;\n    const element = ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(CleanFormItem, { name: ['filters', filterId, 'requiredFirst', controlItem.name], hidden: true, initialValue: (controlItem == null ? void 0 : (_controlItem$config3 = controlItem.config) == null ? void 0 : _controlItem$config3.requiredFirst) && (filterToEdit == null ? void 0 : filterToEdit.requiredFirst) }),\n    ___EmotionJSX(Tooltip, { key: controlItem.name, placement: \"left\", title: controlItem.config.affectsDataMask &&\n      disabled &&\n      t('Populate \"Default value\" to enable this control') },\n    ___EmotionJSX(StyledRowFormItem, { key: controlItem.name, name: ['filters', filterId, 'controlValues', controlItem.name], initialValue: initialValue, valuePropName: \"checked\", colon: false },\n    ___EmotionJSX(AntdCheckbox, { disabled: controlItem.config.affectsDataMask && disabled, onChange: (_ref2) => {let { target: { checked } } = _ref2;\n        if (controlItem.config.requiredFirst) {\n          setNativeFilterFieldValues(form, filterId, {\n            requiredFirst: {\n              ...(formFilter == null ? void 0 : formFilter.requiredFirst),\n              [controlItem.name]: checked } });\n\n\n        }\n        if (controlItem.config.resetConfig) {\n          setNativeFilterFieldValues(form, filterId, {\n            defaultDataMask: null });\n\n        }\n        forceUpdate();\n      } },\n    controlItem.config.label, \"\\xA0\",\n    controlItem.config.description && ___EmotionJSX(InfoTooltipWithTrigger, { placement: \"top\", label: controlItem.config.name, tooltip: controlItem.config.description })))));\n\n\n\n\n    mapControlItems[controlItem.name] = { element, checked: initialValue };\n  });\n  return {\n    controlItems: mapControlItems,\n    mainControlItems: mapMainControlItems };\n\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(CleanFormItem, \"CleanFormItem\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/getControlItemsMap.tsx\");reactHotLoader.register(getControlItemsMap, \"getControlItemsMap\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/getControlItemsMap.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"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","names":["InfoTooltipWithTrigger","React","AntdCheckbox","getChartControlPanelRegistry","styled","t","Tooltip","FormItem","doesColumnMatchFilterType","getControlItems","setNativeFilterFieldValues","StyledFormItem","StyledLabel","StyledRowFormItem","ColumnSelect","CleanFormItem","getControlItemsMap","datasetId","disabled","forceUpdate","form","filterId","filterType","filterToEdit","formFilter","removed","controlPanelRegistry","controlItems","get","mapControlItems","mapMainControlItems","filter","mainControlItem","name","forEach","initialValue","controlValues","config","default","initColumn","targets","column","element","requiredFirst","label","required","message","multiple","defaultDataMask","checked","controlItem","renderTrigger","affectsDataMask","target","resetConfig","description","mainControlItems"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/getControlItemsMap.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  CustomControlItem,\n  InfoTooltipWithTrigger,\n} from '@superset-ui/chart-controls';\nimport React from 'react';\nimport { AntdCheckbox, FormInstance } from 'src/components';\nimport {\n  Filter,\n  getChartControlPanelRegistry,\n  styled,\n  t,\n} from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { FormItem } from 'src/components/Form';\nimport {\n  doesColumnMatchFilterType,\n  getControlItems,\n  setNativeFilterFieldValues,\n} from './utils';\nimport { NativeFiltersForm, NativeFiltersFormItem } from '../types';\nimport {\n  StyledFormItem,\n  StyledLabel,\n  StyledRowFormItem,\n} from './FiltersConfigForm';\nimport { ColumnSelect } from './ColumnSelect';\n\nexport interface ControlItemsProps {\n  datasetId: number;\n  disabled: boolean;\n  forceUpdate: Function;\n  form: FormInstance<NativeFiltersForm>;\n  filterId: string;\n  filterType: string;\n  filterToEdit?: Filter;\n  formFilter?: NativeFiltersFormItem;\n  removed?: boolean;\n}\n\nconst CleanFormItem = styled(FormItem)`\n  margin-bottom: 0;\n`;\n\nexport default function getControlItemsMap({\n  datasetId,\n  disabled,\n  forceUpdate,\n  form,\n  filterId,\n  filterType,\n  filterToEdit,\n  formFilter,\n  removed,\n}: ControlItemsProps) {\n  const controlPanelRegistry = getChartControlPanelRegistry();\n  const controlItems =\n    getControlItems(controlPanelRegistry.get(filterType)) ?? [];\n  const mapControlItems: Record<\n    string,\n    { element: React.ReactNode; checked: boolean }\n  > = {};\n  const mapMainControlItems: Record<\n    string,\n    { element: React.ReactNode; checked: boolean }\n  > = {};\n\n  controlItems\n    .filter(\n      (mainControlItem: CustomControlItem) =>\n        mainControlItem?.name === 'groupby',\n    )\n    .forEach(mainControlItem => {\n      const initialValue =\n        filterToEdit?.controlValues?.[mainControlItem.name] ??\n        mainControlItem?.config?.default;\n      const initColumn = filterToEdit?.targets[0]?.column?.name;\n\n      const element = (\n        <>\n          <CleanFormItem\n            name={['filters', filterId, 'requiredFirst', mainControlItem.name]}\n            hidden\n            initialValue={\n              mainControlItem?.config?.requiredFirst &&\n              filterToEdit?.requiredFirst\n            }\n          />\n          <StyledFormItem\n            // don't show the column select unless we have a dataset\n            name={['filters', filterId, 'column']}\n            initialValue={initColumn}\n            label={\n              <StyledLabel>\n                {mainControlItem.config?.label || t('Column')}\n              </StyledLabel>\n            }\n            rules={[\n              {\n                required: mainControlItem.config?.required && !removed, // TODO: need to move ColumnSelect settings to controlPanel for all filters\n                message: t('Column is required'),\n              },\n            ]}\n            data-test=\"field-input\"\n          >\n            <ColumnSelect\n              mode={mainControlItem.config?.multiple && 'multiple'}\n              form={form}\n              filterId={filterId}\n              datasetId={datasetId}\n              filterValues={column =>\n                doesColumnMatchFilterType(formFilter?.filterType || '', column)\n              }\n              onChange={() => {\n                // We need reset default value when column changed\n                setNativeFilterFieldValues(form, filterId, {\n                  defaultDataMask: null,\n                });\n                forceUpdate();\n              }}\n            />\n          </StyledFormItem>\n        </>\n      );\n      mapMainControlItems[mainControlItem.name] = {\n        element,\n        checked: initialValue,\n      };\n    });\n  controlItems\n    .filter(\n      (controlItem: CustomControlItem) =>\n        controlItem?.config?.renderTrigger &&\n        controlItem.name !== 'sortAscending' &&\n        controlItem.name !== 'enableSingleValue',\n    )\n    .forEach(controlItem => {\n      const initialValue =\n        filterToEdit?.controlValues?.[controlItem.name] ??\n        controlItem?.config?.default;\n      const element = (\n        <>\n          <CleanFormItem\n            name={['filters', filterId, 'requiredFirst', controlItem.name]}\n            hidden\n            initialValue={\n              controlItem?.config?.requiredFirst && filterToEdit?.requiredFirst\n            }\n          />\n          <Tooltip\n            key={controlItem.name}\n            placement=\"left\"\n            title={\n              controlItem.config.affectsDataMask &&\n              disabled &&\n              t('Populate \"Default value\" to enable this control')\n            }\n          >\n            <StyledRowFormItem\n              key={controlItem.name}\n              name={['filters', filterId, 'controlValues', controlItem.name]}\n              initialValue={initialValue}\n              valuePropName=\"checked\"\n              colon={false}\n            >\n              <AntdCheckbox\n                disabled={controlItem.config.affectsDataMask && disabled}\n                onChange={({ target: { checked } }) => {\n                  if (controlItem.config.requiredFirst) {\n                    setNativeFilterFieldValues(form, filterId, {\n                      requiredFirst: {\n                        ...formFilter?.requiredFirst,\n                        [controlItem.name]: checked,\n                      },\n                    });\n                  }\n                  if (controlItem.config.resetConfig) {\n                    setNativeFilterFieldValues(form, filterId, {\n                      defaultDataMask: null,\n                    });\n                  }\n                  forceUpdate();\n                }}\n              >\n                {controlItem.config.label}&nbsp;\n                {controlItem.config.description && (\n                  <InfoTooltipWithTrigger\n                    placement=\"top\"\n                    label={controlItem.config.name}\n                    tooltip={controlItem.config.description}\n                  />\n                )}\n              </AntdCheckbox>\n            </StyledRowFormItem>\n          </Tooltip>\n        </>\n      );\n      mapControlItems[controlItem.name] = { element, checked: initialValue };\n    });\n  return {\n    controlItems: mapControlItems,\n    mainControlItems: mapMainControlItems,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}