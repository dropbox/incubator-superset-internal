{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { isDefined, t } from '@superset-ui/core';\nimport Modal from 'src/components/Modal';\nimport { isCrossFilterScopeGlobal, GLOBAL_SCOPE_POINTER } from 'src/dashboard/types';\nimport { getChartIdsInFilterScope } from 'src/dashboard/util/getChartIdsInFilterScope';\nimport { useChartIds } from 'src/dashboard/util/charts/useChartIds';\nimport { saveChartConfiguration } from 'src/dashboard/actions/dashboardInfo';\nimport { DEFAULT_CROSS_FILTER_SCOPING } from 'src/dashboard/constants';\nimport { ScopingModalContent } from './ScopingModalContent';\nimport { NEW_CHART_SCOPING_ID } from './constants';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst getUpdatedGloballyScopedChartsInScope = (configs, globalChartsInScope) => Object.entries(configs).reduce((acc, _ref) => {let [id, config] = _ref;\n  if (isCrossFilterScopeGlobal(config.crossFilters.scope)) {\n    acc[id] = {\n      id: Number(config.id),\n      crossFilters: {\n        scope: GLOBAL_SCOPE_POINTER,\n        chartsInScope: globalChartsInScope.filter((chartId) => chartId !== Number(config.id)) } };\n\n\n  } else\n  {\n    acc[id] = config;\n  }\n  return acc;\n}, {});\nconst getActualScopeFromGlobalScope = (chartId, globalScope) => ({\n  rootPath: globalScope.rootPath,\n  excluded: globalScope.excluded.filter((id) => id !== chartId) });\n\nexport const ScopingModal = (_ref2) => {let { initialChartId, isVisible, closeModal } = _ref2;\n  const dispatch = useDispatch();\n  const layout = useSelector((state) => state.dashboardLayout.present);\n  const chartIds = useChartIds();\n  const [currentChartId, setCurrentChartId] = useState(initialChartId);\n  const initialChartConfig = useSelector((state) => {var _state$dashboardInfo$;return ((_state$dashboardInfo$ = state.dashboardInfo.metadata) == null ? void 0 : _state$dashboardInfo$.chart_configuration) || {};});\n  const defaultGlobalChartConfig = useMemo(() => ({\n    scope: DEFAULT_CROSS_FILTER_SCOPING,\n    chartsInScope: chartIds }),\n  [chartIds]);\n  const initialGlobalChartConfig = useSelector((state) => {var _state$dashboardInfo$2;return ((_state$dashboardInfo$2 = state.dashboardInfo.metadata) == null ? void 0 : _state$dashboardInfo$2.global_chart_configuration) ||\n    defaultGlobalChartConfig;});\n  const getInitialChartConfig = () => {var _initialChartConfig$i;\n    if (isDefined(initialChartId) &&\n    isCrossFilterScopeGlobal((_initialChartConfig$i = initialChartConfig[initialChartId]) == null ? void 0 : _initialChartConfig$i.crossFilters.scope)) {var _initialChartConfig$i2;\n      return {\n        ...initialChartConfig,\n        [initialChartId]: {\n          id: initialChartId,\n          crossFilters: {\n            scope: getActualScopeFromGlobalScope(initialChartId, initialGlobalChartConfig.scope),\n            chartsInScope: (_initialChartConfig$i2 = initialChartConfig[initialChartId]) == null ? void 0 : _initialChartConfig$i2.crossFilters.chartsInScope } } };\n\n\n\n    }\n    return initialChartConfig;\n  };\n  const [chartConfigs, setChartConfigs] = useState(getInitialChartConfig());\n  const [globalChartConfig, setGlobalChartConfig] = useState(initialGlobalChartConfig);\n  const saveScoping = useCallback(() => {\n    const savedChartConfigs = { ...chartConfigs };\n    if (savedChartConfigs[NEW_CHART_SCOPING_ID]) {\n      delete savedChartConfigs[NEW_CHART_SCOPING_ID];\n    }\n    dispatch(saveChartConfiguration({\n      chartConfiguration: savedChartConfigs,\n      globalChartConfiguration: globalChartConfig }));\n\n    closeModal();\n  }, [chartConfigs, closeModal, dispatch, globalChartConfig]);\n  const handleScopeUpdate = useCallback((_ref3) => {let { scope } = _ref3;\n    if (isDefined(currentChartId)) {\n      setChartConfigs((prevConfig) => ({\n        ...prevConfig,\n        [currentChartId]: {\n          id: currentChartId,\n          crossFilters: {\n            scope,\n            chartsInScope: getChartIdsInFilterScope(scope, chartIds, layout) } } }));\n\n\n\n    } else\n    {\n      const globalChartsInScope = getChartIdsInFilterScope(scope, chartIds, layout);\n      setGlobalChartConfig({\n        scope,\n        chartsInScope: globalChartsInScope });\n\n      setChartConfigs((prevConfig) => getUpdatedGloballyScopedChartsInScope(prevConfig, globalChartsInScope));\n    }\n  }, [currentChartId, chartIds, layout]);\n  const removeCustomScope = useCallback((chartId) => {\n    setChartConfigs((prevConfigs) => {\n      const newConfigs = { ...prevConfigs };\n      if (chartId === NEW_CHART_SCOPING_ID) {\n        delete newConfigs[NEW_CHART_SCOPING_ID];\n      } else\n      {\n        newConfigs[chartId] = {\n          id: chartId,\n          crossFilters: {\n            scope: GLOBAL_SCOPE_POINTER,\n            chartsInScope: globalChartConfig.chartsInScope.filter((id) => id !== chartId) } };\n\n\n      }\n      return newConfigs;\n    });\n    if (currentChartId === chartId) {\n      setCurrentChartId(undefined);\n    }\n  }, [currentChartId, globalChartConfig.chartsInScope]);\n  const addNewCustomScope = useCallback(() => {\n    setCurrentChartId(NEW_CHART_SCOPING_ID);\n    if (!chartConfigs[NEW_CHART_SCOPING_ID]) {\n      setChartConfigs((prevConfigs) => ({\n        ...prevConfigs,\n        [NEW_CHART_SCOPING_ID]: {\n          id: NEW_CHART_SCOPING_ID,\n          crossFilters: {\n            scope: globalChartConfig.scope,\n            chartsInScope: globalChartConfig.chartsInScope } } }));\n\n\n\n    }\n  }, [chartConfigs, globalChartConfig.chartsInScope, globalChartConfig.scope]);\n  const handleSelectChange = useCallback((newChartId) => {\n    if (isDefined(currentChartId)) {var _chartConfigs$current;\n      const currentScope = !isCrossFilterScopeGlobal((_chartConfigs$current = chartConfigs[currentChartId]) == null ? void 0 : _chartConfigs$current.crossFilters.scope) ?\n      chartConfigs[currentChartId].crossFilters.\n      scope :\n      globalChartConfig.scope;\n      const newScope = {\n        rootPath: currentScope.rootPath,\n        excluded: [\n        ...currentScope.excluded.filter((id) => id !== currentChartId),\n        newChartId] };\n\n\n      const newCrossFiltersConfig = {\n        id: newChartId,\n        crossFilters: {\n          scope: newScope,\n          chartsInScope: getChartIdsInFilterScope(newScope, chartIds, layout) } };\n\n\n      setChartConfigs((prevConfig) => {\n        const newConfig = {\n          ...prevConfig,\n          [newChartId]: newCrossFiltersConfig };\n\n        if (currentChartId === NEW_CHART_SCOPING_ID) {\n          delete newConfig[NEW_CHART_SCOPING_ID];\n        } else\n        {\n          newConfig[currentChartId] = {\n            id: currentChartId,\n            crossFilters: {\n              scope: GLOBAL_SCOPE_POINTER,\n              chartsInScope: globalChartConfig.chartsInScope.filter((id) => id !== currentChartId) } };\n\n\n        }\n        return newConfig;\n      });\n      setCurrentChartId(newChartId);\n    }\n  }, [\n  chartConfigs,\n  chartIds,\n  currentChartId,\n  globalChartConfig.chartsInScope,\n  globalChartConfig.scope,\n  layout]);\n\n  const scope = useMemo(() => {var _chartConfigs$current2, _chartConfigs$current3, _chartConfigs$current4, _chartConfigs$current5;\n    const globalScope = globalChartConfig.scope;\n    if (!isDefined(currentChartId)) {\n      return globalScope;\n    }\n    if (isCrossFilterScopeGlobal((_chartConfigs$current2 = chartConfigs[currentChartId]) == null ? void 0 : (_chartConfigs$current3 = _chartConfigs$current2.crossFilters) == null ? void 0 : _chartConfigs$current3.scope)) {\n      return getActualScopeFromGlobalScope(currentChartId, globalScope);\n    }\n    return (_chartConfigs$current4 = chartConfigs[currentChartId]) == null ? void 0 : (_chartConfigs$current5 = _chartConfigs$current4.crossFilters) == null ? void 0 : _chartConfigs$current5.\n    scope;\n  }, [chartConfigs, currentChartId, globalChartConfig.scope]);\n  return ___EmotionJSX(Modal, { onHide: closeModal, show: isVisible, title: t('Cross-filtering scoping'), onHandledPrimaryAction: saveScoping, primaryButtonName: t('Save'), responsive: true, destroyOnClose: true, bodyStyle: {\n      padding: 0,\n      height: 700 } },\n\n  ___EmotionJSX(ScopingModalContent, { chartConfigs: chartConfigs, currentScope: scope, onScopeUpdate: handleScopeUpdate, chartId: currentChartId, setCurrentChartId: setCurrentChartId, onSelectChange: handleSelectChange, removeCustomScope: removeCustomScope, addNewCustomScope: addNewCustomScope }));\n\n};","map":{"version":3,"mappings":"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","names":["React","useCallback","useMemo","useState","useDispatch","useSelector","isDefined","t","Modal","isCrossFilterScopeGlobal","GLOBAL_SCOPE_POINTER","getChartIdsInFilterScope","useChartIds","saveChartConfiguration","DEFAULT_CROSS_FILTER_SCOPING","ScopingModalContent","NEW_CHART_SCOPING_ID","getUpdatedGloballyScopedChartsInScope","configs","globalChartsInScope","Object","entries","reduce","acc","id","config","crossFilters","scope","Number","chartsInScope","filter","chartId","getActualScopeFromGlobalScope","globalScope","rootPath","excluded","ScopingModal","initialChartId","isVisible","closeModal","dispatch","layout","state","dashboardLayout","present","chartIds","currentChartId","setCurrentChartId","initialChartConfig","dashboardInfo","metadata","chart_configuration","defaultGlobalChartConfig","initialGlobalChartConfig","global_chart_configuration","getInitialChartConfig","chartConfigs","setChartConfigs","globalChartConfig","setGlobalChartConfig","saveScoping","savedChartConfigs","chartConfiguration","globalChartConfiguration","handleScopeUpdate","prevConfig","removeCustomScope","newConfigs","prevConfigs","undefined","addNewCustomScope","handleSelectChange","newChartId","currentScope","newScope","newCrossFiltersConfig","newConfig","padding","height"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/dashboard/components/nativeFilters/FilterBar/CrossFilters/ScopingModal/ScopingModal.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { isDefined, NativeFilterScope, t } from '@superset-ui/core';\nimport Modal from 'src/components/Modal';\nimport {\n  ChartConfiguration,\n  Layout,\n  RootState,\n  isCrossFilterScopeGlobal,\n  GlobalChartCrossFilterConfig,\n  GLOBAL_SCOPE_POINTER,\n} from 'src/dashboard/types';\nimport { getChartIdsInFilterScope } from 'src/dashboard/util/getChartIdsInFilterScope';\nimport { useChartIds } from 'src/dashboard/util/charts/useChartIds';\nimport { saveChartConfiguration } from 'src/dashboard/actions/dashboardInfo';\nimport { DEFAULT_CROSS_FILTER_SCOPING } from 'src/dashboard/constants';\nimport { ScopingModalContent } from './ScopingModalContent';\nimport { NEW_CHART_SCOPING_ID } from './constants';\n\nconst getUpdatedGloballyScopedChartsInScope = (\n  configs: ChartConfiguration,\n  globalChartsInScope: number[],\n) =>\n  Object.entries(configs).reduce((acc, [id, config]) => {\n    if (isCrossFilterScopeGlobal(config.crossFilters.scope)) {\n      acc[id] = {\n        id: Number(config.id),\n        crossFilters: {\n          scope: GLOBAL_SCOPE_POINTER,\n          chartsInScope: globalChartsInScope.filter(\n            chartId => chartId !== Number(config.id),\n          ),\n        },\n      };\n    } else {\n      acc[id] = config;\n    }\n    return acc;\n  }, {});\n\nconst getActualScopeFromGlobalScope = (\n  chartId: number,\n  globalScope: NativeFilterScope,\n) => ({\n  rootPath: globalScope.rootPath,\n  excluded: globalScope.excluded.filter(id => id !== chartId),\n});\n\nexport interface ScopingModalProps {\n  initialChartId: number | undefined;\n  isVisible: boolean;\n  closeModal: () => void;\n}\n\nexport const ScopingModal = ({\n  initialChartId,\n  isVisible,\n  closeModal,\n}: ScopingModalProps) => {\n  const dispatch = useDispatch();\n  const layout = useSelector<RootState, Layout>(\n    state => state.dashboardLayout.present,\n  );\n  const chartIds = useChartIds();\n  const [currentChartId, setCurrentChartId] = useState(initialChartId);\n  const initialChartConfig = useSelector<RootState, ChartConfiguration>(\n    state => state.dashboardInfo.metadata?.chart_configuration || {},\n  );\n  const defaultGlobalChartConfig = useMemo(\n    () => ({\n      scope: DEFAULT_CROSS_FILTER_SCOPING,\n      chartsInScope: chartIds,\n    }),\n    [chartIds],\n  );\n\n  const initialGlobalChartConfig = useSelector<\n    RootState,\n    GlobalChartCrossFilterConfig\n  >(\n    state =>\n      state.dashboardInfo.metadata?.global_chart_configuration ||\n      defaultGlobalChartConfig,\n  );\n\n  const getInitialChartConfig = () => {\n    if (\n      isDefined(initialChartId) &&\n      isCrossFilterScopeGlobal(\n        initialChartConfig[initialChartId]?.crossFilters.scope,\n      )\n    ) {\n      return {\n        ...initialChartConfig,\n        [initialChartId]: {\n          id: initialChartId,\n          crossFilters: {\n            scope: getActualScopeFromGlobalScope(\n              initialChartId,\n              initialGlobalChartConfig.scope,\n            ),\n            chartsInScope:\n              initialChartConfig[initialChartId]?.crossFilters.chartsInScope,\n          },\n        },\n      };\n    }\n    return initialChartConfig;\n  };\n\n  const [chartConfigs, setChartConfigs] = useState(getInitialChartConfig());\n  const [globalChartConfig, setGlobalChartConfig] = useState(\n    initialGlobalChartConfig,\n  );\n\n  const saveScoping = useCallback(() => {\n    const savedChartConfigs = { ...chartConfigs };\n    if (savedChartConfigs[NEW_CHART_SCOPING_ID]) {\n      delete savedChartConfigs[NEW_CHART_SCOPING_ID];\n    }\n    dispatch(\n      saveChartConfiguration({\n        chartConfiguration: savedChartConfigs,\n        globalChartConfiguration: globalChartConfig,\n      }),\n    );\n    closeModal();\n  }, [chartConfigs, closeModal, dispatch, globalChartConfig]);\n\n  const handleScopeUpdate = useCallback(\n    ({ scope }: { scope: NativeFilterScope }) => {\n      if (isDefined(currentChartId)) {\n        setChartConfigs(prevConfig => ({\n          ...prevConfig,\n          [currentChartId]: {\n            id: currentChartId,\n            crossFilters: {\n              scope,\n              chartsInScope: getChartIdsInFilterScope(scope, chartIds, layout),\n            },\n          },\n        }));\n      } else {\n        const globalChartsInScope = getChartIdsInFilterScope(\n          scope,\n          chartIds,\n          layout,\n        );\n        setGlobalChartConfig({\n          scope,\n          chartsInScope: globalChartsInScope,\n        });\n        setChartConfigs(prevConfig =>\n          getUpdatedGloballyScopedChartsInScope(\n            prevConfig,\n            globalChartsInScope,\n          ),\n        );\n      }\n    },\n    [currentChartId, chartIds, layout],\n  );\n\n  const removeCustomScope = useCallback(\n    (chartId: number) => {\n      setChartConfigs(prevConfigs => {\n        const newConfigs = { ...prevConfigs };\n        if (chartId === NEW_CHART_SCOPING_ID) {\n          delete newConfigs[NEW_CHART_SCOPING_ID];\n        } else {\n          newConfigs[chartId] = {\n            id: chartId,\n            crossFilters: {\n              scope: GLOBAL_SCOPE_POINTER,\n              chartsInScope: globalChartConfig.chartsInScope.filter(\n                id => id !== chartId,\n              ),\n            },\n          };\n        }\n        return newConfigs;\n      });\n      if (currentChartId === chartId) {\n        setCurrentChartId(undefined);\n      }\n    },\n    [currentChartId, globalChartConfig.chartsInScope],\n  );\n\n  const addNewCustomScope = useCallback(() => {\n    setCurrentChartId(NEW_CHART_SCOPING_ID);\n    if (!chartConfigs[NEW_CHART_SCOPING_ID]) {\n      setChartConfigs(prevConfigs => ({\n        ...prevConfigs,\n        [NEW_CHART_SCOPING_ID]: {\n          id: NEW_CHART_SCOPING_ID,\n          crossFilters: {\n            scope: globalChartConfig.scope,\n            chartsInScope: globalChartConfig.chartsInScope,\n          },\n        },\n      }));\n    }\n  }, [chartConfigs, globalChartConfig.chartsInScope, globalChartConfig.scope]);\n\n  const handleSelectChange = useCallback(\n    (newChartId: number) => {\n      if (isDefined(currentChartId)) {\n        const currentScope = !isCrossFilterScopeGlobal(\n          chartConfigs[currentChartId]?.crossFilters.scope,\n        )\n          ? (chartConfigs[currentChartId].crossFilters\n              .scope as NativeFilterScope)\n          : globalChartConfig.scope;\n        const newScope = {\n          rootPath: currentScope.rootPath,\n          excluded: [\n            ...currentScope.excluded.filter(id => id !== currentChartId),\n            newChartId,\n          ],\n        };\n        const newCrossFiltersConfig = {\n          id: newChartId,\n          crossFilters: {\n            scope: newScope,\n            chartsInScope: getChartIdsInFilterScope(newScope, chartIds, layout),\n          },\n        };\n\n        setChartConfigs(prevConfig => {\n          const newConfig = {\n            ...prevConfig,\n            [newChartId]: newCrossFiltersConfig,\n          };\n          if (currentChartId === NEW_CHART_SCOPING_ID) {\n            delete newConfig[NEW_CHART_SCOPING_ID];\n          } else {\n            newConfig[currentChartId] = {\n              id: currentChartId,\n              crossFilters: {\n                scope: GLOBAL_SCOPE_POINTER,\n                chartsInScope: globalChartConfig.chartsInScope.filter(\n                  id => id !== currentChartId,\n                ),\n              },\n            };\n          }\n          return newConfig;\n        });\n\n        setCurrentChartId(newChartId);\n      }\n    },\n    [\n      chartConfigs,\n      chartIds,\n      currentChartId,\n      globalChartConfig.chartsInScope,\n      globalChartConfig.scope,\n      layout,\n    ],\n  );\n\n  const scope = useMemo(() => {\n    const globalScope = globalChartConfig.scope;\n    if (!isDefined(currentChartId)) {\n      return globalScope;\n    }\n    if (\n      isCrossFilterScopeGlobal(\n        chartConfigs[currentChartId]?.crossFilters?.scope,\n      )\n    ) {\n      return getActualScopeFromGlobalScope(currentChartId, globalScope);\n    }\n    return chartConfigs[currentChartId]?.crossFilters\n      ?.scope as NativeFilterScope;\n  }, [chartConfigs, currentChartId, globalChartConfig.scope]);\n\n  return (\n    <Modal\n      onHide={closeModal}\n      show={isVisible}\n      title={t('Cross-filtering scoping')}\n      onHandledPrimaryAction={saveScoping}\n      primaryButtonName={t('Save')}\n      responsive\n      destroyOnClose\n      bodyStyle={{\n        padding: 0,\n        height: 700,\n      }}\n    >\n      <ScopingModalContent\n        chartConfigs={chartConfigs}\n        currentScope={scope}\n        onScopeUpdate={handleScopeUpdate}\n        chartId={currentChartId}\n        setCurrentChartId={setCurrentChartId}\n        onSelectChange={handleSelectChange}\n        removeCustomScope={removeCustomScope}\n        addNewCustomScope={addNewCustomScope}\n      />\n    </Modal>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}