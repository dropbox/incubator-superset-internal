{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport omit from 'lodash/omit';\nimport { buildQueryContext, ensureIsArray, hasGenericChartAxes, isPhysicalColumn } from '@superset-ui/core';\nexport default function buildQuery(formData) {\n  const { groupbyColumns = [], groupbyRows = [], extra_form_data } = formData;\n  const time_grain_sqla = (extra_form_data == null ? void 0 : extra_form_data.time_grain_sqla) || formData.time_grain_sqla;\n  // TODO: add deduping of AdhocColumns\n  const columns = Array.from(new Set([\n  ...ensureIsArray(groupbyColumns),\n  ...ensureIsArray(groupbyRows)])).\n  map((col) => {var _formData$temporal_co;\n    if (isPhysicalColumn(col) &&\n    time_grain_sqla &&\n    hasGenericChartAxes && (\n    /* Charts created before `GENERIC_CHART_AXES` is enabled have a different\n     * form data, with `granularity_sqla` set instead.\n     */\n    formData != null && (_formData$temporal_co = formData.temporal_columns_lookup) != null && _formData$temporal_co[col] ||\n    formData.granularity_sqla === col)) {\n      return {\n        timeGrain: time_grain_sqla,\n        columnType: 'BASE_AXIS',\n        sqlExpression: col,\n        label: col,\n        expressionType: 'SQL' };\n\n    }\n    return col;\n  });\n  return buildQueryContext(formData, (baseQueryObject) => {\n    const { series_limit_metric, metrics, order_desc } = baseQueryObject;\n    let orderBy;\n    if (series_limit_metric) {\n      orderBy = [[series_limit_metric, !order_desc]];\n    } else\n    if (Array.isArray(metrics) && metrics[0]) {\n      orderBy = [[metrics[0], !order_desc]];\n    }\n    return [\n    {\n      ...(hasGenericChartAxes ?\n      omit(baseQueryObject, ['extras.time_grain_sqla']) :\n      baseQueryObject),\n      orderby: orderBy,\n      columns }];\n\n\n  });\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,IAAP,MAAiB,aAAjB;AAEA,SAEEC,iBAFF,EAGEC,aAHF,EAIEC,mBAJF,EAKEC,gBALF,QAQO,mBARP;AAWA,eAAc,SAAUC,UAAV,CAAqBC,QAArB,EAAsD;EAClE,MAAM,EAAEC,cAAc,GAAG,EAAnB,EAAuBC,WAAW,GAAG,EAArC,EAAyCC,eAAzC,KAA6DH,QAAnE;EACA,MAAMI,eAAe,GACnB,gBAAe,QAAf,2BAAe,CAAEA,eAAjB,KAAoCJ,QAAQ,CAACI,eAD/C;EAGA;EACA,MAAMC,OAAO,GAAGC,KAAK,CAACC,IAAN,CACd,IAAIC,GAAJ,CAAQ;EACN,GAAGZ,aAAa,CAAkBK,cAAlB,CADV;EAEN,GAAGL,aAAa,CAAkBM,WAAlB,CAFV,CAAR,CADc;EAKdO,GALc,CAKV,IAAG,KAAG;IACV,IACEX,gBAAgB,CAACY,GAAD,CAAhB;IACAN,eADA;IAEAP,mBAFA;IAGA;;;IAGCG,QAAQ,QAAR,qCAAQ,CAAEW,uBAAV,mCAAoCD,GAApC;IACCV,QAAQ,CAACY,gBAAT,KAA8BF,GAPhC,CADF,EASE;MACA,OAAO;QACLG,SAAS,EAAET,eADN;QAELU,UAAU,EAAE,WAFP;QAGLC,aAAa,EAAEL,GAHV;QAILM,KAAK,EAAEN,GAJF;QAKLO,cAAc,EAAE,KALX,EAAP;;IAOD;IACD,OAAOP,GAAP;EACD,CAzBe,CAAhB;EA2BA,OAAOf,iBAAiB,CAACK,QAAD,EAAW,gBAAe,KAAG;IACnD,MAAM,EAAEkB,mBAAF,EAAuBC,OAAvB,EAAgCC,UAAhC,KAA+CC,eAArD;IACA,IAAIC,OAAJ;IACA,IAAIJ,mBAAJ,EAAyB;MACvBI,OAAO,GAAG,CAAC,CAACJ,mBAAD,EAAsB,CAACE,UAAvB,CAAD,CAAV;IACD,CAFD;IAEO,IAAId,KAAK,CAACiB,OAAN,CAAcJ,OAAd,KAA0BA,OAAO,CAAC,CAAD,CAArC,EAA0C;MAC/CG,OAAO,GAAG,CAAC,CAACH,OAAO,CAAC,CAAD,CAAR,EAAa,CAACC,UAAd,CAAD,CAAV;IACD;IACD,OAAO;IACL;MACE,IAAIvB,mBAAmB;MACnBH,IAAI,CAAC2B,eAAD,EAAkB,CAAC,wBAAD,CAAlB,CADe;MAEnBA,eAFJ,CADF;MAIEG,OAAO,EAAEF,OAJX;MAKEjB,OALF,EADK,CAAP;;;EASD,CAjBuB,CAAxB;AAkBD","names":["omit","buildQueryContext","ensureIsArray","hasGenericChartAxes","isPhysicalColumn","buildQuery","formData","groupbyColumns","groupbyRows","extra_form_data","time_grain_sqla","columns","Array","from","Set","map","col","temporal_columns_lookup","granularity_sqla","timeGrain","columnType","sqlExpression","label","expressionType","series_limit_metric","metrics","order_desc","baseQueryObject","orderBy","isArray","orderby"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/plugins/plugin-chart-pivot-table/src/plugin/buildQuery.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport omit from 'lodash/omit';\n\nimport {\n  AdhocColumn,\n  buildQueryContext,\n  ensureIsArray,\n  hasGenericChartAxes,\n  isPhysicalColumn,\n  QueryFormColumn,\n  QueryFormOrderBy,\n} from '@superset-ui/core';\nimport { PivotTableQueryFormData } from '../types';\n\nexport default function buildQuery(formData: PivotTableQueryFormData) {\n  const { groupbyColumns = [], groupbyRows = [], extra_form_data } = formData;\n  const time_grain_sqla =\n    extra_form_data?.time_grain_sqla || formData.time_grain_sqla;\n\n  // TODO: add deduping of AdhocColumns\n  const columns = Array.from(\n    new Set([\n      ...ensureIsArray<QueryFormColumn>(groupbyColumns),\n      ...ensureIsArray<QueryFormColumn>(groupbyRows),\n    ]),\n  ).map(col => {\n    if (\n      isPhysicalColumn(col) &&\n      time_grain_sqla &&\n      hasGenericChartAxes &&\n      /* Charts created before `GENERIC_CHART_AXES` is enabled have a different\n       * form data, with `granularity_sqla` set instead.\n       */\n      (formData?.temporal_columns_lookup?.[col] ||\n        formData.granularity_sqla === col)\n    ) {\n      return {\n        timeGrain: time_grain_sqla,\n        columnType: 'BASE_AXIS',\n        sqlExpression: col,\n        label: col,\n        expressionType: 'SQL',\n      } as AdhocColumn;\n    }\n    return col;\n  });\n\n  return buildQueryContext(formData, baseQueryObject => {\n    const { series_limit_metric, metrics, order_desc } = baseQueryObject;\n    let orderBy: QueryFormOrderBy[] | undefined;\n    if (series_limit_metric) {\n      orderBy = [[series_limit_metric, !order_desc]];\n    } else if (Array.isArray(metrics) && metrics[0]) {\n      orderBy = [[metrics[0], !order_desc]];\n    }\n    return [\n      {\n        ...(hasGenericChartAxes\n          ? omit(baseQueryObject, ['extras.time_grain_sqla'])\n          : baseQueryObject),\n        orderby: orderBy,\n        columns,\n      },\n    ];\n  });\n}\n"]},"metadata":{},"sourceType":"module"}