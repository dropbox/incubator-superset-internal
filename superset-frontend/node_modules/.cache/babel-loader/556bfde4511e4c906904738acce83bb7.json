{"ast":null,"code":"import _isEmpty from \"lodash/isEmpty\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport { t } from '@superset-ui/core';\n\nimport { DASHBOARD_ROOT_ID } from './constants';\nimport { CHART_TYPE, DASHBOARD_ROOT_TYPE, TAB_TYPE } from './componentTypes';\n\nconst FILTER_SCOPE_CONTAINER_TYPES = [TAB_TYPE, DASHBOARD_ROOT_TYPE];\n\nfunction traverse(_ref)\n\n\n\n\n{let { currentNode = {}, components = {}, filterFields = [], selectedChartId } = _ref;\n  if (!currentNode) {\n    return null;\n  }\n\n  const { type } = currentNode;\n  if (\n  CHART_TYPE === type &&\n  currentNode &&\n  currentNode.meta &&\n  currentNode.meta.chartId)\n  {\n    const chartNode = {\n      value: currentNode.meta.chartId,\n      label:\n      currentNode.meta.sliceName || `${type} ${currentNode.meta.chartId}`,\n      type,\n      showCheckbox: selectedChartId !== currentNode.meta.chartId };\n\n\n    return {\n      ...chartNode,\n      children: filterFields.map((filterField) => ({\n        value: `${currentNode.meta.chartId}:${filterField}`,\n        label: `${chartNode.label}`,\n        type: 'filter_box',\n        showCheckbox: false })) };\n\n\n  }\n\n  let children = [];\n  if (currentNode.children && currentNode.children.length) {\n    currentNode.children.forEach((child) => {\n      const childNodeTree = traverse({\n        currentNode: components[child],\n        components,\n        filterFields,\n        selectedChartId });\n\n\n      const childType = components[child].type;\n      if (_includesInstanceProperty(FILTER_SCOPE_CONTAINER_TYPES).call(FILTER_SCOPE_CONTAINER_TYPES, childType)) {\n        children.push(childNodeTree);\n      } else {\n        children = children.concat(childNodeTree);\n      }\n    });\n  }\n\n  if (_includesInstanceProperty(FILTER_SCOPE_CONTAINER_TYPES).call(FILTER_SCOPE_CONTAINER_TYPES, type)) {\n    let label = null;\n    if (type === DASHBOARD_ROOT_TYPE) {\n      label = t('All charts');\n    } else {\n      label =\n      currentNode.meta && currentNode.meta.text ?\n      currentNode.meta.text :\n      `${type} ${currentNode.id}`;\n    }\n\n    return {\n      value: currentNode.id,\n      label,\n      type,\n      children };\n\n  }\n\n  return children;\n}\n\nexport default function getFilterScopeNodesTree(_ref2)\n\n\n\n{let { components = {}, filterFields = [], selectedChartId } = _ref2;\n  if (_isEmpty(components)) {\n    return [];\n  }\n\n  const root = traverse({\n    currentNode: components[DASHBOARD_ROOT_ID],\n    components,\n    filterFields,\n    selectedChartId });\n\n  return [\n  {\n    ...root }];\n\n\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(FILTER_SCOPE_CONTAINER_TYPES, \"FILTER_SCOPE_CONTAINER_TYPES\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/util/getFilterScopeNodesTree.js\");reactHotLoader.register(traverse, \"traverse\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/util/getFilterScopeNodesTree.js\");reactHotLoader.register(getFilterScopeNodesTree, \"getFilterScopeNodesTree\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/util/getFilterScopeNodesTree.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["t","DASHBOARD_ROOT_ID","CHART_TYPE","DASHBOARD_ROOT_TYPE","TAB_TYPE","FILTER_SCOPE_CONTAINER_TYPES","traverse","currentNode","components","filterFields","selectedChartId","type","meta","chartId","chartNode","value","label","sliceName","showCheckbox","children","map","filterField","length","forEach","child","childNodeTree","childType","push","concat","text","id","getFilterScopeNodesTree","root"],"sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/util/getFilterScopeNodesTree.js"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { isEmpty } from 'lodash';\nimport { t } from '@superset-ui/core';\n\nimport { DASHBOARD_ROOT_ID } from './constants';\nimport { CHART_TYPE, DASHBOARD_ROOT_TYPE, TAB_TYPE } from './componentTypes';\n\nconst FILTER_SCOPE_CONTAINER_TYPES = [TAB_TYPE, DASHBOARD_ROOT_TYPE];\n\nfunction traverse({\n  currentNode = {},\n  components = {},\n  filterFields = [],\n  selectedChartId,\n}) {\n  if (!currentNode) {\n    return null;\n  }\n\n  const { type } = currentNode;\n  if (\n    CHART_TYPE === type &&\n    currentNode &&\n    currentNode.meta &&\n    currentNode.meta.chartId\n  ) {\n    const chartNode = {\n      value: currentNode.meta.chartId,\n      label:\n        currentNode.meta.sliceName || `${type} ${currentNode.meta.chartId}`,\n      type,\n      showCheckbox: selectedChartId !== currentNode.meta.chartId,\n    };\n\n    return {\n      ...chartNode,\n      children: filterFields.map(filterField => ({\n        value: `${currentNode.meta.chartId}:${filterField}`,\n        label: `${chartNode.label}`,\n        type: 'filter_box',\n        showCheckbox: false,\n      })),\n    };\n  }\n\n  let children = [];\n  if (currentNode.children && currentNode.children.length) {\n    currentNode.children.forEach(child => {\n      const childNodeTree = traverse({\n        currentNode: components[child],\n        components,\n        filterFields,\n        selectedChartId,\n      });\n\n      const childType = components[child].type;\n      if (FILTER_SCOPE_CONTAINER_TYPES.includes(childType)) {\n        children.push(childNodeTree);\n      } else {\n        children = children.concat(childNodeTree);\n      }\n    });\n  }\n\n  if (FILTER_SCOPE_CONTAINER_TYPES.includes(type)) {\n    let label = null;\n    if (type === DASHBOARD_ROOT_TYPE) {\n      label = t('All charts');\n    } else {\n      label =\n        currentNode.meta && currentNode.meta.text\n          ? currentNode.meta.text\n          : `${type} ${currentNode.id}`;\n    }\n\n    return {\n      value: currentNode.id,\n      label,\n      type,\n      children,\n    };\n  }\n\n  return children;\n}\n\nexport default function getFilterScopeNodesTree({\n  components = {},\n  filterFields = [],\n  selectedChartId,\n}) {\n  if (isEmpty(components)) {\n    return [];\n  }\n\n  const root = traverse({\n    currentNode: components[DASHBOARD_ROOT_ID],\n    components,\n    filterFields,\n    selectedChartId,\n  });\n  return [\n    {\n      ...root,\n    },\n  ];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}