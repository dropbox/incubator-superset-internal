{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { forwardRef, useEffect, useImperativeHandle, useLayoutEffect, useMemo, useState, useRef } from 'react';\nimport { Global } from '@emotion/react';\nimport { css, t, useTheme, usePrevious } from '@superset-ui/core';\nimport { useResizeDetector } from 'react-resize-detector';\nimport Badge from '../Badge';\nimport Icons from '../Icons';\nimport Button from '../Button';\nimport Popover from '../Popover';\nimport { Tooltip } from '../Tooltip';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst MAX_HEIGHT = 500;\nconst DropdownContainer = /*#__PURE__*/forwardRef((_ref, outerRef) => {let { items, onOverflowingStateChange, dropdownContent, dropdownRef, dropdownStyle = {}, dropdownTriggerCount, dropdownTriggerIcon, dropdownTriggerText = t('More'), dropdownTriggerTooltip = null, style } = _ref;\n  const theme = useTheme();\n  const { ref, width = 0 } = useResizeDetector();\n  const previousWidth = usePrevious(width) || 0;\n  const { current } = ref;\n  const [itemsWidth, setItemsWidth] = useState([]);\n  const [popoverVisible, setPopoverVisible] = useState(false);\n  // We use React.useState to be able to mock the state in Jest\n  const [overflowingIndex, setOverflowingIndex] = React.useState(-1);\n  let targetRef = useRef(null);\n  if (dropdownRef) {\n    targetRef = dropdownRef;\n  }\n  const [showOverflow, setShowOverflow] = useState(false);\n  const reduceItems = (items) => items.reduce((_ref2, item) => {let [items, ids] = _ref2;\n    items.push({\n      id: item.id,\n      element: /*#__PURE__*/React.cloneElement(item.element, { key: item.id }) });\n\n    ids.push(item.id);\n    return [items, ids];\n  }, [[], []]);\n  const [notOverflowedItems, notOverflowedIds] = useMemo(() => reduceItems(items.slice(0, overflowingIndex !== -1 ? overflowingIndex : items.length)), [items, overflowingIndex]);\n  const [overflowedItems, overflowedIds] = useMemo(() => overflowingIndex !== -1 ?\n  reduceItems(items.slice(overflowingIndex)) :\n  [[], []], [items, overflowingIndex]);\n  useLayoutEffect(() => {\n    const container = current == null ? void 0 : current.children.item(0);\n    if (container) {\n      const { children } = container;\n      const childrenArray = Array.from(children);\n      // If items length change, add all items to the container\n      // and recalculate the widths\n      if (itemsWidth.length !== items.length) {\n        if (childrenArray.length === items.length) {\n          setItemsWidth(childrenArray.map((child) => child.getBoundingClientRect().width));\n        } else\n        {\n          setOverflowingIndex(-1);\n          return;\n        }\n      }\n      // Calculates the index of the first overflowed element\n      // +1 is to give at least one pixel of difference and avoid flakiness\n      const index = childrenArray.findIndex((child) => child.getBoundingClientRect().right >\n      container.getBoundingClientRect().right + 1);\n      // If elements fit (-1) and there's overflowed items\n      // then preserve the overflow index. We can't use overflowIndex\n      // directly because the items may have been modified\n      let newOverflowingIndex = index === -1 && overflowedItems.length > 0 ?\n      items.length - overflowedItems.length :\n      index;\n      if (width > previousWidth) {\n        // Calculates remaining space in the container\n        const button = current == null ? void 0 : current.children.item(1);\n        const buttonRight = (button == null ? void 0 : button.getBoundingClientRect().right) || 0;\n        const containerRight = (current == null ? void 0 : current.getBoundingClientRect().right) || 0;\n        const remainingSpace = containerRight - buttonRight;\n        // Checks if some elements in the dropdown fits in the remaining space\n        let sum = 0;\n        for (let i = childrenArray.length; i < items.length; i += 1) {\n          sum += itemsWidth[i];\n          if (sum <= remainingSpace) {\n            newOverflowingIndex = i + 1;\n          } else\n          {\n            break;\n          }\n        }\n      }\n      setOverflowingIndex(newOverflowingIndex);\n    }\n  }, [\n  current,\n  items.length,\n  itemsWidth,\n  overflowedItems.length,\n  previousWidth,\n  width]);\n\n  useEffect(() => {\n    if (onOverflowingStateChange) {\n      onOverflowingStateChange({\n        notOverflowed: notOverflowedIds,\n        overflowed: overflowedIds });\n\n    }\n  }, [notOverflowedIds, onOverflowingStateChange, overflowedIds]);\n  const overflowingCount = overflowingIndex !== -1 ? items.length - overflowingIndex : 0;\n  const popoverContent = useMemo(() => dropdownContent || overflowingCount ? ___EmotionJSX(\"div\", { css: css`\n              display: flex;\n              flex-direction: column;\n              gap: ${theme.gridUnit * 4}px;\n            `, style: dropdownStyle, ref: targetRef },\n  dropdownContent ?\n  dropdownContent(overflowedItems) :\n  overflowedItems.map((item) => item.element)) :\n  null, [\n  dropdownContent,\n  overflowingCount,\n  theme.gridUnit,\n  dropdownStyle,\n  overflowedItems]);\n\n  useLayoutEffect(() => {\n    if (popoverVisible) {\n      // Measures scroll height after rendering the elements\n      setTimeout(() => {\n        if (targetRef.current) {\n          // We only set overflow when there's enough space to display\n          // Select's popovers because they are restrained by the overflow property.\n          setShowOverflow(targetRef.current.scrollHeight > MAX_HEIGHT);\n        }\n      }, 100);\n    }\n  }, [popoverVisible]);\n  useImperativeHandle(outerRef, () => ({\n    ...ref.current,\n    open: () => setPopoverVisible(true) }),\n  [ref]);\n  // Closes the popover when scrolling on the document\n  useEffect(() => {\n    document.onscroll = popoverVisible ?\n    () => setPopoverVisible(false) :\n    null;\n    return () => {\n      document.onscroll = null;\n    };\n  }, [popoverVisible]);\n  return ___EmotionJSX(\"div\", { ref: ref, css: css`\n          display: flex;\n          align-items: center;\n        ` },\n  ___EmotionJSX(\"div\", { css: css`\n            display: flex;\n            align-items: center;\n            gap: ${theme.gridUnit * 4}px;\n            margin-right: ${theme.gridUnit * 4}px;\n            min-width: 0px;\n          `, style: style },\n  notOverflowedItems.map((item) => item.element)),\n\n  popoverContent && ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(Global, { styles: css`\n                .ant-popover-inner-content {\n                  max-height: ${MAX_HEIGHT}px;\n                  overflow: ${showOverflow ? 'auto' : 'visible'};\n                  padding: ${theme.gridUnit * 3}px ${theme.gridUnit * 4}px;\n\n                  // Some OS versions only show the scroll when hovering.\n                  // These settings will make the scroll always visible.\n                  ::-webkit-scrollbar {\n                    -webkit-appearance: none;\n                    width: 14px;\n                  }\n                  ::-webkit-scrollbar-thumb {\n                    border-radius: 9px;\n                    background-color: ${theme.colors.grayscale.light1};\n                    border: 3px solid transparent;\n                    background-clip: content-box;\n                  }\n                  ::-webkit-scrollbar-track {\n                    background-color: ${theme.colors.grayscale.light4};\n                    border-left: 1px solid ${theme.colors.grayscale.light2};\n                  }\n                }\n              ` }),\n  ___EmotionJSX(Popover, { content: popoverContent, trigger: \"click\", visible: popoverVisible, onVisibleChange: (visible) => setPopoverVisible(visible), placement: \"bottom\", destroyTooltipOnHide: true },\n  ___EmotionJSX(Tooltip, { title: dropdownTriggerTooltip },\n  ___EmotionJSX(Button, { buttonStyle: \"secondary\" },\n  dropdownTriggerIcon,\n  dropdownTriggerText,\n  ___EmotionJSX(Badge, { count: dropdownTriggerCount != null ? dropdownTriggerCount : overflowingCount, color: (dropdownTriggerCount != null ? dropdownTriggerCount : overflowingCount) > 0 ?\n    theme.colors.primary.base :\n    theme.colors.grayscale.light1, showZero: true, css: css`\n                      margin-left: ${theme.gridUnit * 2}px;\n                    ` }),\n  ___EmotionJSX(Icons.DownOutlined, { iconSize: \"m\", iconColor: theme.colors.grayscale.light1, css: css`\n                      .anticon {\n                        display: flex;\n                      }\n                    ` }))))));\n\n\n\n\n\n});\nexport default DropdownContainer;","map":{"version":3,"mappings":"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","names":["React","forwardRef","useEffect","useImperativeHandle","useLayoutEffect","useMemo","useState","useRef","Global","css","t","useTheme","usePrevious","useResizeDetector","Badge","Icons","Button","Popover","Tooltip","MAX_HEIGHT","DropdownContainer","outerRef","items","onOverflowingStateChange","dropdownContent","dropdownRef","dropdownStyle","dropdownTriggerCount","dropdownTriggerIcon","dropdownTriggerText","dropdownTriggerTooltip","style","theme","ref","width","previousWidth","current","itemsWidth","setItemsWidth","popoverVisible","setPopoverVisible","overflowingIndex","setOverflowingIndex","targetRef","showOverflow","setShowOverflow","reduceItems","reduce","item","ids","push","id","element","cloneElement","key","notOverflowedItems","notOverflowedIds","slice","length","overflowedItems","overflowedIds","container","children","childrenArray","Array","from","map","child","getBoundingClientRect","index","findIndex","right","newOverflowingIndex","button","buttonRight","containerRight","remainingSpace","sum","i","notOverflowed","overflowed","overflowingCount","popoverContent","gridUnit","setTimeout","scrollHeight","open","document","onscroll","colors","grayscale","light1","light4","light2","visible","primary","base"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/components/DropdownContainer/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, {\n  CSSProperties,\n  forwardRef,\n  ReactElement,\n  RefObject,\n  useEffect,\n  useImperativeHandle,\n  useLayoutEffect,\n  useMemo,\n  useState,\n  useRef,\n  ReactNode,\n} from 'react';\nimport { Global } from '@emotion/react';\nimport { css, t, useTheme, usePrevious } from '@superset-ui/core';\nimport { useResizeDetector } from 'react-resize-detector';\nimport Badge from '../Badge';\nimport Icons from '../Icons';\nimport Button from '../Button';\nimport Popover from '../Popover';\nimport { Tooltip } from '../Tooltip';\n\nconst MAX_HEIGHT = 500;\n\n/**\n * Container item.\n */\nexport interface Item {\n  /**\n   * String that uniquely identifies the item.\n   */\n  id: string;\n  /**\n   * The element to be rendered.\n   */\n  element: ReactElement;\n}\n\n/**\n * Horizontal container that displays overflowed items in a dropdown.\n * It shows an indicator of how many items are currently overflowing.\n */\nexport interface DropdownContainerProps {\n  /**\n   * Array of items. The id property is used to uniquely identify\n   * the elements when rendering or dealing with event handlers.\n   */\n  items: Item[];\n  /**\n   * Event handler called every time an element moves between\n   * main container and dropdown.\n   */\n  onOverflowingStateChange?: (overflowingState: {\n    notOverflowed: string[];\n    overflowed: string[];\n  }) => void;\n  /**\n   * Option to customize the content of the dropdown.\n   */\n  dropdownContent?: (overflowedItems: Item[]) => ReactElement;\n  /**\n   * Dropdown ref.\n   */\n  dropdownRef?: RefObject<HTMLDivElement>;\n  /**\n   * Dropdown additional style properties.\n   */\n  dropdownStyle?: CSSProperties;\n  /**\n   * Displayed count in the dropdown trigger.\n   */\n  dropdownTriggerCount?: number;\n  /**\n   * Icon of the dropdown trigger.\n   */\n  dropdownTriggerIcon?: ReactElement;\n  /**\n   * Text of the dropdown trigger.\n   */\n  dropdownTriggerText?: string;\n  /**\n   * Text of the dropdown trigger tooltip\n   */\n  dropdownTriggerTooltip?: ReactNode | null;\n  /**\n   * Main container additional style properties.\n   */\n  style?: CSSProperties;\n}\n\nexport type Ref = HTMLDivElement & { open: () => void };\n\nconst DropdownContainer = forwardRef(\n  (\n    {\n      items,\n      onOverflowingStateChange,\n      dropdownContent,\n      dropdownRef,\n      dropdownStyle = {},\n      dropdownTriggerCount,\n      dropdownTriggerIcon,\n      dropdownTriggerText = t('More'),\n      dropdownTriggerTooltip = null,\n      style,\n    }: DropdownContainerProps,\n    outerRef: RefObject<Ref>,\n  ) => {\n    const theme = useTheme();\n    const { ref, width = 0 } = useResizeDetector<HTMLDivElement>();\n    const previousWidth = usePrevious(width) || 0;\n    const { current } = ref;\n    const [itemsWidth, setItemsWidth] = useState<number[]>([]);\n    const [popoverVisible, setPopoverVisible] = useState(false);\n\n    // We use React.useState to be able to mock the state in Jest\n    const [overflowingIndex, setOverflowingIndex] = React.useState<number>(-1);\n\n    let targetRef = useRef<HTMLDivElement>(null);\n    if (dropdownRef) {\n      targetRef = dropdownRef;\n    }\n\n    const [showOverflow, setShowOverflow] = useState(false);\n\n    const reduceItems = (items: Item[]): [Item[], string[]] =>\n      items.reduce(\n        ([items, ids], item) => {\n          items.push({\n            id: item.id,\n            element: React.cloneElement(item.element, { key: item.id }),\n          });\n          ids.push(item.id);\n          return [items, ids];\n        },\n        [[], []] as [Item[], string[]],\n      );\n\n    const [notOverflowedItems, notOverflowedIds] = useMemo(\n      () =>\n        reduceItems(\n          items.slice(\n            0,\n            overflowingIndex !== -1 ? overflowingIndex : items.length,\n          ),\n        ),\n      [items, overflowingIndex],\n    );\n\n    const [overflowedItems, overflowedIds] = useMemo(\n      () =>\n        overflowingIndex !== -1\n          ? reduceItems(items.slice(overflowingIndex))\n          : [[], []],\n      [items, overflowingIndex],\n    );\n\n    useLayoutEffect(() => {\n      const container = current?.children.item(0);\n      if (container) {\n        const { children } = container;\n        const childrenArray = Array.from(children);\n\n        // If items length change, add all items to the container\n        // and recalculate the widths\n        if (itemsWidth.length !== items.length) {\n          if (childrenArray.length === items.length) {\n            setItemsWidth(\n              childrenArray.map(child => child.getBoundingClientRect().width),\n            );\n          } else {\n            setOverflowingIndex(-1);\n            return;\n          }\n        }\n\n        // Calculates the index of the first overflowed element\n        // +1 is to give at least one pixel of difference and avoid flakiness\n        const index = childrenArray.findIndex(\n          child =>\n            child.getBoundingClientRect().right >\n            container.getBoundingClientRect().right + 1,\n        );\n\n        // If elements fit (-1) and there's overflowed items\n        // then preserve the overflow index. We can't use overflowIndex\n        // directly because the items may have been modified\n        let newOverflowingIndex =\n          index === -1 && overflowedItems.length > 0\n            ? items.length - overflowedItems.length\n            : index;\n\n        if (width > previousWidth) {\n          // Calculates remaining space in the container\n          const button = current?.children.item(1);\n          const buttonRight = button?.getBoundingClientRect().right || 0;\n          const containerRight = current?.getBoundingClientRect().right || 0;\n          const remainingSpace = containerRight - buttonRight;\n\n          // Checks if some elements in the dropdown fits in the remaining space\n          let sum = 0;\n          for (let i = childrenArray.length; i < items.length; i += 1) {\n            sum += itemsWidth[i];\n            if (sum <= remainingSpace) {\n              newOverflowingIndex = i + 1;\n            } else {\n              break;\n            }\n          }\n        }\n\n        setOverflowingIndex(newOverflowingIndex);\n      }\n    }, [\n      current,\n      items.length,\n      itemsWidth,\n      overflowedItems.length,\n      previousWidth,\n      width,\n    ]);\n\n    useEffect(() => {\n      if (onOverflowingStateChange) {\n        onOverflowingStateChange({\n          notOverflowed: notOverflowedIds,\n          overflowed: overflowedIds,\n        });\n      }\n    }, [notOverflowedIds, onOverflowingStateChange, overflowedIds]);\n\n    const overflowingCount =\n      overflowingIndex !== -1 ? items.length - overflowingIndex : 0;\n\n    const popoverContent = useMemo(\n      () =>\n        dropdownContent || overflowingCount ? (\n          <div\n            css={css`\n              display: flex;\n              flex-direction: column;\n              gap: ${theme.gridUnit * 4}px;\n            `}\n            data-test=\"dropdown-content\"\n            style={dropdownStyle}\n            ref={targetRef}\n          >\n            {dropdownContent\n              ? dropdownContent(overflowedItems)\n              : overflowedItems.map(item => item.element)}\n          </div>\n        ) : null,\n      [\n        dropdownContent,\n        overflowingCount,\n        theme.gridUnit,\n        dropdownStyle,\n        overflowedItems,\n      ],\n    );\n\n    useLayoutEffect(() => {\n      if (popoverVisible) {\n        // Measures scroll height after rendering the elements\n        setTimeout(() => {\n          if (targetRef.current) {\n            // We only set overflow when there's enough space to display\n            // Select's popovers because they are restrained by the overflow property.\n            setShowOverflow(targetRef.current.scrollHeight > MAX_HEIGHT);\n          }\n        }, 100);\n      }\n    }, [popoverVisible]);\n\n    useImperativeHandle(\n      outerRef,\n      () => ({\n        ...(ref.current as HTMLDivElement),\n        open: () => setPopoverVisible(true),\n      }),\n      [ref],\n    );\n\n    // Closes the popover when scrolling on the document\n    useEffect(() => {\n      document.onscroll = popoverVisible\n        ? () => setPopoverVisible(false)\n        : null;\n      return () => {\n        document.onscroll = null;\n      };\n    }, [popoverVisible]);\n\n    return (\n      <div\n        ref={ref}\n        css={css`\n          display: flex;\n          align-items: center;\n        `}\n      >\n        <div\n          css={css`\n            display: flex;\n            align-items: center;\n            gap: ${theme.gridUnit * 4}px;\n            margin-right: ${theme.gridUnit * 4}px;\n            min-width: 0px;\n          `}\n          data-test=\"container\"\n          style={style}\n        >\n          {notOverflowedItems.map(item => item.element)}\n        </div>\n        {popoverContent && (\n          <>\n            <Global\n              styles={css`\n                .ant-popover-inner-content {\n                  max-height: ${MAX_HEIGHT}px;\n                  overflow: ${showOverflow ? 'auto' : 'visible'};\n                  padding: ${theme.gridUnit * 3}px ${theme.gridUnit * 4}px;\n\n                  // Some OS versions only show the scroll when hovering.\n                  // These settings will make the scroll always visible.\n                  ::-webkit-scrollbar {\n                    -webkit-appearance: none;\n                    width: 14px;\n                  }\n                  ::-webkit-scrollbar-thumb {\n                    border-radius: 9px;\n                    background-color: ${theme.colors.grayscale.light1};\n                    border: 3px solid transparent;\n                    background-clip: content-box;\n                  }\n                  ::-webkit-scrollbar-track {\n                    background-color: ${theme.colors.grayscale.light4};\n                    border-left: 1px solid ${theme.colors.grayscale.light2};\n                  }\n                }\n              `}\n            />\n            <Popover\n              content={popoverContent}\n              trigger=\"click\"\n              visible={popoverVisible}\n              onVisibleChange={visible => setPopoverVisible(visible)}\n              placement=\"bottom\"\n              destroyTooltipOnHide\n            >\n              <Tooltip title={dropdownTriggerTooltip}>\n                <Button\n                  buttonStyle=\"secondary\"\n                  data-test=\"dropdown-container-btn\"\n                >\n                  {dropdownTriggerIcon}\n                  {dropdownTriggerText}\n                  <Badge\n                    count={dropdownTriggerCount ?? overflowingCount}\n                    color={\n                      (dropdownTriggerCount ?? overflowingCount) > 0\n                        ? theme.colors.primary.base\n                        : theme.colors.grayscale.light1\n                    }\n                    showZero\n                    css={css`\n                      margin-left: ${theme.gridUnit * 2}px;\n                    `}\n                  />\n                  <Icons.DownOutlined\n                    iconSize=\"m\"\n                    iconColor={theme.colors.grayscale.light1}\n                    css={css`\n                      .anticon {\n                        display: flex;\n                      }\n                    `}\n                  />\n                </Button>\n              </Tooltip>\n            </Popover>\n          </>\n        )}\n      </div>\n    );\n  },\n);\n\nexport default DropdownContainer;\n"]},"metadata":{},"sourceType":"module"}