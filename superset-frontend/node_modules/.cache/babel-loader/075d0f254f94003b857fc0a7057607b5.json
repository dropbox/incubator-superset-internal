{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { api } from './queryApi';\nconst queryValidationApi = api.injectEndpoints({\n  endpoints: (builder) => ({\n    queryValidations: builder.query({\n      providesTags: ['QueryValidations'],\n      query: (_ref) => {let { dbId, schema, sql, templateParams } = _ref;\n        let template_params = templateParams;\n        try {\n          template_params = JSON.parse(templateParams || '');\n        }\n        catch (e) {\n          template_params = undefined;\n        }\n        const postPayload = {\n          schema,\n          sql,\n          ...(template_params && { template_params }) };\n\n        return {\n          method: 'post',\n          endpoint: `/api/v1/database/${dbId}/validate_sql/`,\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(postPayload),\n          transformResponse: (_ref2) => {let { json } = _ref2;return json.result;} };\n\n      } }) }) });\n\n\n\nexport const { useQueryValidationsQuery } = queryValidationApi;","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,SAASA,GAAT,QAAkC,YAAlC;AAgBA,MAAMC,kBAAkB,GAAGD,GAAG,CAACE,eAAJ,CAAoB;EAC7CC,SAAS,EAAE,QAAO,MAAK;IACrBC,gBAAgB,EAAEC,OAAO,CAACC,KAAR,CAGhB;MACAC,YAAY,EAAE,CAAC,kBAAD,CADd;MAEAD,KAAK,EAAE,UAA0C,KAAzC,EAAEE,IAAF,EAAQC,MAAR,EAAgBC,GAAhB,EAAqBC,cAArB,EAAyC;QAC/C,IAAIC,eAAe,GAAGD,cAAtB;QACA,IAAI;UACFC,eAAe,GAAGC,IAAI,CAACC,KAAL,CAAWH,cAAc,IAAI,EAA7B,CAAlB;QACD;QAAC,OAAOI,CAAP,EAAU;UACVH,eAAe,GAAGI,SAAlB;QACD;QACD,MAAMC,WAAW,GAAG;UAClBR,MADkB;UAElBC,GAFkB;UAGlB,IAAIE,eAAe,IAAI,EAAEA,eAAF,EAAvB,CAHkB,EAApB;;QAKA,OAAO;UACLM,MAAM,EAAE,MADH;UAELC,QAAQ,EAAE,oBAAoBX,IAAI,gBAF7B;UAGLY,OAAO,EAAE,EAAE,gBAAgB,kBAAlB,EAHJ;UAILC,IAAI,EAAER,IAAI,CAACS,SAAL,CAAeL,WAAf,CAJD;UAKLM,iBAAiB,EAAE,gBAAC,EAAEC,IAAF,EAAD,gBAA4BA,IAAI,CAACC,MAAjC,EALd,EAAP;;MAOD,CArBD,EAHgB,CADG,EAAL,CAD2B,EAApB,CAA3B;;;;AA+BA,OAAO,MAAM,EAAEC,wBAAF,KAA+BzB,kBAArC","names":["api","queryValidationApi","injectEndpoints","endpoints","queryValidations","builder","query","providesTags","dbId","schema","sql","templateParams","template_params","JSON","parse","e","undefined","postPayload","method","endpoint","headers","body","stringify","transformResponse","json","result","useQueryValidationsQuery"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/hooks/apiResources/queryValidations.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { api, JsonResponse } from './queryApi';\n\nexport type FetchValidationQueryParams = {\n  dbId?: string | number;\n  schema?: string;\n  sql: string;\n  templateParams?: string;\n};\n\ntype ValidationResult = {\n  end_column: number | null;\n  line_number: number | null;\n  message: string | null;\n  start_column: number | null;\n};\n\nconst queryValidationApi = api.injectEndpoints({\n  endpoints: builder => ({\n    queryValidations: builder.query<\n      ValidationResult[],\n      FetchValidationQueryParams\n    >({\n      providesTags: ['QueryValidations'],\n      query: ({ dbId, schema, sql, templateParams }) => {\n        let template_params = templateParams;\n        try {\n          template_params = JSON.parse(templateParams || '');\n        } catch (e) {\n          template_params = undefined;\n        }\n        const postPayload = {\n          schema,\n          sql,\n          ...(template_params && { template_params }),\n        };\n        return {\n          method: 'post',\n          endpoint: `/api/v1/database/${dbId}/validate_sql/`,\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(postPayload),\n          transformResponse: ({ json }: JsonResponse) => json.result,\n        };\n      },\n    }),\n  }),\n});\n\nexport const { useQueryValidationsQuery } = queryValidationApi;\n"]},"metadata":{},"sourceType":"module"}