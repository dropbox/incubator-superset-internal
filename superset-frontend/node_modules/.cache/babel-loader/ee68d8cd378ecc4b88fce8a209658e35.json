{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { t, SupersetClient } from '@superset-ui/core';\nimport TableView, { EmptyWrapperType } from 'src/components/TableView';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport Loading from 'src/components/Loading';\nimport '../../assets/stylesheets/reactable-pagination.less';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst TableLoader = (props) => {\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isBlocked, setIsBlocked] = useState(false);\n  useEffect(() => {\n    const { dataEndpoint, mutator } = props;\n    if (dataEndpoint) {\n      SupersetClient.get({ endpoint: dataEndpoint }).\n      then((_ref) => {let { json } = _ref;\n        const data = mutator ? mutator(json) : json;\n        setData(data);\n        setIsBlocked(false);\n        setIsLoading(false);\n      }).\n      catch((response) => {\n        setIsLoading(false);\n        if (response.status === 403) {\n          setIsBlocked(true);\n        } else\n        {\n          setIsBlocked(false);\n          props.addDangerToast(t('An error occurred'));\n        }\n      });\n    }\n  }, [props]);\n  const { columns, noDataText, ...tableProps } = props;\n  const memoizedColumns = useMemo(() => {\n    let tableColumns = columns;\n    if (!columns && data.length > 0) {\n      tableColumns = Object.keys(data[0]).filter((col) => col[0] !== '_');\n    }\n    return tableColumns ?\n    tableColumns.map((column) => ({\n      accessor: column,\n      Header: column })) :\n\n    [];\n  }, [columns, data]);\n  delete tableProps.dataEndpoint;\n  delete tableProps.mutator;\n  if (isLoading) {\n    return ___EmotionJSX(Loading, null);\n  }\n  return ___EmotionJSX(TableView, _extends({ columns: memoizedColumns, data: data, pageSize: 50, loading: isLoading, emptyWrapperType: EmptyWrapperType.Small, noDataText: isBlocked ? t('Access to user activity data is restricted') : noDataText }, tableProps));\n};\nexport default withToasts(TableLoader);","map":{"version":3,"mappings":"+DAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,OAArC,QAAoD,OAApD;AACA,SAASC,CAAT,EAAYC,cAAZ,QAA8C,mBAA9C;AACA,OAAOC,SAAP,IAAoBC,gBAApB,QAA4C,0BAA5C;AACA,OAAOC,UAAP,MAAuB,yCAAvB;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAO,oDAAP,C;AAUA,MAAMC,WAAW,GAAG,CAACC,KAAD,KAA4B;EAC9C,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAa,EAAb,CAAhC;EACA,MAAM,CAACa,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,IAAD,CAA1C;EACA,MAAM,CAACe,SAAD,EAAYC,YAAZ,IAA4BhB,QAAQ,CAAC,KAAD,CAA1C;EAEAC,SAAS,CAAC,MAAK;IACb,MAAM,EAAEgB,YAAF,EAAgBC,OAAhB,KAA4BR,KAAlC;IACA,IAAIO,YAAJ,EAAkB;MAChBb,cAAc,CAACe,GAAf,CAAmB,EAAEC,QAAQ,EAAEH,YAAZ,EAAnB;MACGI,IADH,CACQ,UAAa,KAAZ,EAAEC,IAAF,EAAY;QACjB,MAAMX,IAAI,GAAIO,OAAO,GAAGA,OAAO,CAACI,IAAD,CAAV,GAAmBA,IAAxC;QACAV,OAAO,CAACD,IAAD,CAAP;QACAK,YAAY,CAAC,KAAD,CAAZ;QACAF,YAAY,CAAC,KAAD,CAAZ;MACD,CANH;MAOGS,KAPH,CAOS,SAAQ,KAAG;QAChBT,YAAY,CAAC,KAAD,CAAZ;QACA,IAAIU,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;UAC3BT,YAAY,CAAC,IAAD,CAAZ;QACD,CAFD;QAEO;UACLA,YAAY,CAAC,KAAD,CAAZ;UACAN,KAAK,CAACgB,cAAN,CAAqBvB,CAAC,CAAC,mBAAD,CAAtB;QACD;MACF,CAfH;IAgBD;EACF,CApBQ,EAoBN,CAACO,KAAD,CApBM,CAAT;EAsBA,MAAM,EAAEiB,OAAF,EAAWC,UAAX,EAAuB,GAAGC,UAA1B,KAAyCnB,KAA/C;EAEA,MAAMoB,eAAe,GAAG5B,OAAO,CAAC,MAAK;IACnC,IAAI6B,YAAY,GAAGJ,OAAnB;IACA,IAAI,CAACA,OAAD,IAAYhB,IAAI,CAACqB,MAAL,GAAc,CAA9B,EAAiC;MAC/BD,YAAY,GAAGE,MAAM,CAACC,IAAP,CAAYvB,IAAI,CAAC,CAAD,CAAhB,EAAqBwB,MAArB,CAA4B,IAAG,KAAIC,GAAG,CAAC,CAAD,CAAH,KAAW,GAA9C,CAAf;IACD;IACD,OAAOL,YAAY;IACfA,YAAY,CAACM,GAAb,CAAiB,CAACC,MAAD,MAAqB;MACpCC,QAAQ,EAAED,MAD0B;MAEpCE,MAAM,EAAEF,MAF4B,EAArB,CAAjB,CADe;;IAKf,EALJ;EAMD,CAX8B,EAW5B,CAACX,OAAD,EAAUhB,IAAV,CAX4B,CAA/B;EAaA,OAAOkB,UAAU,CAACZ,YAAlB;EACA,OAAOY,UAAU,CAACX,OAAlB;EAEA,IAAIL,SAAJ,EAAe;IACb,OAAO,cAAC,OAAD,OAAP;EACD;EAED,OACE,cAAC,SAAD,aACE,OAAO,EAAEiB,eADX,EAEE,IAAI,EAAEnB,IAFR,EAGE,QAAQ,EAAE,EAHZ,EAIE,OAAO,EAAEE,SAJX,EAKE,gBAAgB,EAAEP,gBAAgB,CAACmC,KALrC,EAME,UAAU,EACR1B,SAAS,GAAGZ,CAAC,CAAC,4CAAD,CAAJ,GAAqDyB,UAPlE,IASMC,UATN,EADF;AAaD,CA9DD;AAgEA,eAAetB,UAAU,CAACE,WAAD,CAAzB","names":["React","useState","useEffect","useMemo","t","SupersetClient","TableView","EmptyWrapperType","withToasts","Loading","TableLoader","props","data","setData","isLoading","setIsLoading","isBlocked","setIsBlocked","dataEndpoint","mutator","get","endpoint","then","json","catch","response","status","addDangerToast","columns","noDataText","tableProps","memoizedColumns","tableColumns","length","Object","keys","filter","col","map","column","accessor","Header","Small"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/components/TableLoader/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { t, SupersetClient, JsonObject } from '@superset-ui/core';\nimport TableView, { EmptyWrapperType } from 'src/components/TableView';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport Loading from 'src/components/Loading';\nimport '../../assets/stylesheets/reactable-pagination.less';\n\nexport interface TableLoaderProps {\n  dataEndpoint?: string;\n  mutator?: (data: JsonObject) => any[];\n  columns?: string[];\n  noDataText?: string;\n  addDangerToast(text: string): any;\n}\n\nconst TableLoader = (props: TableLoaderProps) => {\n  const [data, setData] = useState<Array<any>>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isBlocked, setIsBlocked] = useState(false);\n\n  useEffect(() => {\n    const { dataEndpoint, mutator } = props;\n    if (dataEndpoint) {\n      SupersetClient.get({ endpoint: dataEndpoint })\n        .then(({ json }) => {\n          const data = (mutator ? mutator(json) : json) as Array<any>;\n          setData(data);\n          setIsBlocked(false);\n          setIsLoading(false);\n        })\n        .catch(response => {\n          setIsLoading(false);\n          if (response.status === 403) {\n            setIsBlocked(true);\n          } else {\n            setIsBlocked(false);\n            props.addDangerToast(t('An error occurred'));\n          }\n        });\n    }\n  }, [props]);\n\n  const { columns, noDataText, ...tableProps } = props;\n\n  const memoizedColumns = useMemo(() => {\n    let tableColumns = columns;\n    if (!columns && data.length > 0) {\n      tableColumns = Object.keys(data[0]).filter(col => col[0] !== '_');\n    }\n    return tableColumns\n      ? tableColumns.map((column: string) => ({\n          accessor: column,\n          Header: column,\n        }))\n      : [];\n  }, [columns, data]);\n\n  delete tableProps.dataEndpoint;\n  delete tableProps.mutator;\n\n  if (isLoading) {\n    return <Loading />;\n  }\n\n  return (\n    <TableView\n      columns={memoizedColumns}\n      data={data}\n      pageSize={50}\n      loading={isLoading}\n      emptyWrapperType={EmptyWrapperType.Small}\n      noDataText={\n        isBlocked ? t('Access to user activity data is restricted') : noDataText\n      }\n      {...tableProps}\n    />\n  );\n};\n\nexport default withToasts(TableLoader);\n"]},"metadata":{},"sourceType":"module"}