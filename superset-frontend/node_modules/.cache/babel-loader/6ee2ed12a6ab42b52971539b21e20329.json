{"ast":null,"code":"import { cleanEvents, TS, EVENT_NAME, ENTITY_ID } from '@data-ui/event-flow';\nexport default function transformProps(chartProps) {\n  const { formData, queriesData, width, height } = chartProps;\n  const { allColumnsX, entity, minLeafNodeEventCount } = formData;\n  const { data } = queriesData[0];\n  const hasData = data && data.length > 0;\n  if (hasData) {\n    const userKey = entity;\n    const eventNameKey = allColumnsX;\n    // map from the Superset form fields to <EventFlow />'s expected data keys\n    const accessorFunctions = {\n      [ENTITY_ID]: (datum) => String(datum[userKey]),\n      [EVENT_NAME]: (datum) => datum[eventNameKey],\n      [TS]: (datum) =>\n      // eslint-disable-next-line no-underscore-dangle\n      datum.__timestamp || datum.__timestamp === 0 ?\n      // eslint-disable-next-line no-underscore-dangle\n      new Date(datum.__timestamp) :\n      null };\n\n    const cleanData = cleanEvents(data, accessorFunctions);\n    return {\n      data: cleanData,\n      height,\n      initialMinEventCount: minLeafNodeEventCount,\n      width };\n\n  }\n  return { data: null, height, width };\n}","map":{"version":3,"mappings":"AAmBA,SAASA,WAAT,EAAsBC,EAAtB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,qBAAvD;AAeA,eAAc,SAAUC,cAAV,CAAyBC,UAAzB,EAA+C;EAC3D,MAAM,EAAEC,QAAF,EAAYC,WAAZ,EAAyBC,KAAzB,EAAgCC,MAAhC,KACJJ,UADF;EAEA,MAAM,EAAEK,WAAF,EAAeC,MAAf,EAAuBC,qBAAvB,KAAiDN,QAAvD;EACA,MAAM,EAAEO,IAAF,KAAWN,WAAW,CAAC,CAAD,CAA5B;EAEA,MAAMO,OAAO,GAAGD,IAAI,IAAIA,IAAI,CAACE,MAAL,GAAc,CAAtC;EACA,IAAID,OAAJ,EAAa;IACX,MAAME,OAAO,GAAGL,MAAhB;IACA,MAAMM,YAAY,GAAGP,WAArB;IAEA;IACA,MAAMQ,iBAAiB,GAAG;MACxB,CAACf,SAAD,GAAa,CAACgB,KAAD,KAAiCC,MAAM,CAACD,KAAK,CAACH,OAAD,CAAN,CAD5B;MAExB,CAACd,UAAD,GAAc,CAACiB,KAAD,KACZA,KAAK,CAACF,YAAD,CAHiB;MAIxB,CAAChB,EAAD,GAAM,CAACkB,KAAD;MACJ;MACAA,KAAK,CAACE,WAAN,IAAqBF,KAAK,CAACE,WAAN,KAAsB,CAA3C;MACI;MACA,IAAIC,IAAJ,CAASH,KAAK,CAACE,WAAf,CAFJ;MAGI,IATkB,EAA1B;;IAYA,MAAME,SAAS,GAAGvB,WAAW,CAACa,IAAD,EAAOK,iBAAP,CAA7B;IAEA,OAAO;MACLL,IAAI,EAAEU,SADD;MAELd,MAFK;MAGLe,oBAAoB,EAAEZ,qBAHjB;MAILJ,KAJK,EAAP;;EAMD;EAED,OAAO,EAAEK,IAAI,EAAE,IAAR,EAAcJ,MAAd,EAAsBD,KAAtB,EAAP;AACD","names":["cleanEvents","TS","EVENT_NAME","ENTITY_ID","transformProps","chartProps","formData","queriesData","width","height","allColumnsX","entity","minLeafNodeEventCount","data","hasData","length","userKey","eventNameKey","accessorFunctions","datum","String","__timestamp","Date","cleanData","initialMinEventCount"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/plugins/legacy-plugin-chart-event-flow/src/transformProps.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ChartProps, TimeseriesDataRecord } from '@superset-ui/core';\nimport { cleanEvents, TS, EVENT_NAME, ENTITY_ID } from '@data-ui/event-flow';\n\nexport interface EventFlowFormData {\n  allColumnsX: string;\n  entity: string;\n  minLeafNodeEventCount: number;\n}\n\nexport interface EventFlowChartProps extends ChartProps {\n  formData: EventFlowFormData;\n  queriesData: {\n    data: TimeseriesDataRecord[];\n  }[];\n}\n\nexport default function transformProps(chartProps: ChartProps) {\n  const { formData, queriesData, width, height } =\n    chartProps as EventFlowChartProps;\n  const { allColumnsX, entity, minLeafNodeEventCount } = formData;\n  const { data } = queriesData[0];\n\n  const hasData = data && data.length > 0;\n  if (hasData) {\n    const userKey = entity;\n    const eventNameKey = allColumnsX;\n\n    // map from the Superset form fields to <EventFlow />'s expected data keys\n    const accessorFunctions = {\n      [ENTITY_ID]: (datum: TimeseriesDataRecord) => String(datum[userKey]),\n      [EVENT_NAME]: (datum: TimeseriesDataRecord) =>\n        datum[eventNameKey] as string,\n      [TS]: (datum: TimeseriesDataRecord): Date | null =>\n        // eslint-disable-next-line no-underscore-dangle\n        datum.__timestamp || datum.__timestamp === 0\n          ? // eslint-disable-next-line no-underscore-dangle\n            new Date(datum.__timestamp)\n          : null,\n    };\n\n    const cleanData = cleanEvents(data, accessorFunctions);\n\n    return {\n      data: cleanData,\n      height,\n      initialMinEventCount: minLeafNodeEventCount,\n      width,\n    };\n  }\n\n  return { data: null, height, width };\n}\n"]},"metadata":{},"sourceType":"module"}