{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport isEqual from 'lodash/isEqual';\nimport { ensureIsArray, EXTRA_FORM_DATA_OVERRIDE_EXTRA_KEYS, EXTRA_FORM_DATA_OVERRIDE_REGULAR_MAPPINGS, isDefined, isFreeFormAdhocFilter, isSimpleAdhocFilter, NO_TIME_RANGE } from '@superset-ui/core';\nimport { simpleFilterToAdhoc } from 'src/utils/simpleFilterToAdhoc';\nconst removeExtraFieldForNewCharts = (filters, isNewChart) => filters.map((filter) => {\n  if (filter.isExtra) {\n    return { ...filter, isExtra: !isNewChart };\n  }\n  return filter;\n});\nconst removeAdhocFilterDuplicates = (filters) => {\n  const isDuplicate = (adhocFilter, existingFilters) => existingFilters.some((existingFilter) => isFreeFormAdhocFilter(existingFilter) &&\n  isFreeFormAdhocFilter(adhocFilter) &&\n  existingFilter.clause === adhocFilter.clause &&\n  existingFilter.sqlExpression === adhocFilter.sqlExpression ||\n  isSimpleAdhocFilter(existingFilter) &&\n  isSimpleAdhocFilter(adhocFilter) &&\n  existingFilter.operator === adhocFilter.operator &&\n  existingFilter.subject === adhocFilter.subject && (\n  !('comparator' in existingFilter) &&\n  !('comparator' in adhocFilter) ||\n  'comparator' in existingFilter &&\n  'comparator' in adhocFilter &&\n  isEqual(existingFilter.comparator, adhocFilter.comparator)));\n  return filters.reduce((acc, filter) => {\n    if (!isDuplicate(filter, acc)) {\n      acc.push(filter);\n    }\n    return acc;\n  }, []);\n};\nconst mergeFilterBoxToFormData = (exploreFormData, dashboardFormData) => {\n  const dateColumns = {\n    __time_range: 'time_range',\n    __time_col: 'granularity_sqla',\n    __time_grain: 'time_grain_sqla',\n    __granularity: 'granularity' };\n\n  const appliedTimeExtras = {};\n  const filterBoxData = {};\n  ensureIsArray(dashboardFormData.extra_filters).forEach((filter) => {\n    if (dateColumns[filter.col]) {\n      if (filter.val !== NO_TIME_RANGE) {\n        filterBoxData[dateColumns[filter.col]] = filter.val;\n        appliedTimeExtras[filter.col] = filter.val;\n      }\n    } else\n    {\n      const adhocFilter = simpleFilterToAdhoc({\n        ...filter,\n        isExtra: true });\n\n      filterBoxData.adhoc_filters = [\n      ...ensureIsArray(filterBoxData.adhoc_filters),\n      adhocFilter];\n\n    }\n  });\n  filterBoxData.applied_time_extras = appliedTimeExtras;\n  return filterBoxData;\n};\nconst mergeNativeFiltersToFormData = (exploreFormData, dashboardFormData) => {\n  const nativeFiltersData = {};\n  const extraFormData = dashboardFormData.extra_form_data || {};\n  Object.entries(EXTRA_FORM_DATA_OVERRIDE_REGULAR_MAPPINGS).forEach((_ref) => {let [srcKey, targetKey] = _ref;\n    const val = extraFormData[srcKey];\n    if (isDefined(val)) {\n      nativeFiltersData[targetKey] = val;\n    }\n  });\n  if ('time_grain_sqla' in extraFormData) {\n    nativeFiltersData.time_grain_sqla = extraFormData.time_grain_sqla;\n  }\n  if ('granularity_sqla' in extraFormData) {\n    nativeFiltersData.granularity_sqla = extraFormData.granularity_sqla;\n  }\n  const extras = dashboardFormData.extras || {};\n  EXTRA_FORM_DATA_OVERRIDE_EXTRA_KEYS.forEach((key) => {\n    const val = extraFormData[key];\n    if (isDefined(val)) {\n      extras[key] = val;\n    }\n  });\n  if (Object.keys(extras).length) {\n    nativeFiltersData.extras = extras;\n  }\n  nativeFiltersData.adhoc_filters = ensureIsArray(extraFormData.adhoc_filters).map((filter) => ({\n    ...filter,\n    isExtra: true }));\n\n  const appendFilters = ensureIsArray(extraFormData.filters).map((extraFilter) => simpleFilterToAdhoc({ ...extraFilter, isExtra: true }));\n  Object.keys(exploreFormData).forEach((key) => {\n    if (key.match(/adhoc_filter.*/)) {\n      nativeFiltersData[key] = [\n      ...ensureIsArray(nativeFiltersData[key]),\n      ...appendFilters];\n\n    }\n  });\n  return nativeFiltersData;\n};\nconst applyTimeRangeFilters = (dashboardFormData, adhocFilters) => {\n  const extraFormData = dashboardFormData.extra_form_data || {};\n  if ('time_range' in extraFormData) {\n    return adhocFilters.map((filter) => {\n      if (filter.operator === 'TEMPORAL_RANGE') {\n        return {\n          ...filter,\n          comparator: extraFormData.time_range,\n          isExtra: true };\n\n      }\n      return filter;\n    });\n  }\n  return adhocFilters;\n};\nexport const getFormDataWithDashboardContext = (exploreFormData, dashboardContextFormData) => {\n  const filterBoxData = mergeFilterBoxToFormData(exploreFormData, dashboardContextFormData);\n  const nativeFiltersData = mergeNativeFiltersToFormData(exploreFormData, dashboardContextFormData);\n  const adhocFilters = [\n  ...Object.keys(exploreFormData),\n  ...Object.keys(filterBoxData),\n  ...Object.keys(nativeFiltersData)].\n\n  filter((key) => key.match(/adhoc_filter.*/)).\n  reduce((acc, key) => ({\n    ...acc,\n    [key]: removeExtraFieldForNewCharts(applyTimeRangeFilters(dashboardContextFormData, removeAdhocFilterDuplicates([\n    ...ensureIsArray(exploreFormData[key]),\n    ...ensureIsArray(filterBoxData[key]),\n    ...ensureIsArray(nativeFiltersData[key])])),\n    exploreFormData.slice_id === 0) }),\n  {});\n  return {\n    ...exploreFormData,\n    ...dashboardContextFormData,\n    ...filterBoxData,\n    ...nativeFiltersData,\n    ...adhocFilters };\n\n};","map":{"version":3,"mappings":"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","names":["isEqual","ensureIsArray","EXTRA_FORM_DATA_OVERRIDE_EXTRA_KEYS","EXTRA_FORM_DATA_OVERRIDE_REGULAR_MAPPINGS","isDefined","isFreeFormAdhocFilter","isSimpleAdhocFilter","NO_TIME_RANGE","simpleFilterToAdhoc","removeExtraFieldForNewCharts","filters","isNewChart","map","filter","isExtra","removeAdhocFilterDuplicates","isDuplicate","adhocFilter","existingFilters","some","existingFilter","clause","sqlExpression","operator","subject","comparator","reduce","acc","push","mergeFilterBoxToFormData","exploreFormData","dashboardFormData","dateColumns","__time_range","__time_col","__time_grain","__granularity","appliedTimeExtras","filterBoxData","extra_filters","forEach","col","val","adhoc_filters","applied_time_extras","mergeNativeFiltersToFormData","nativeFiltersData","extraFormData","extra_form_data","Object","entries","srcKey","targetKey","time_grain_sqla","granularity_sqla","extras","key","keys","length","appendFilters","extraFilter","match","applyTimeRangeFilters","adhocFilters","time_range","getFormDataWithDashboardContext","dashboardContextFormData","slice_id"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/explore/controlUtils/getFormDataWithDashboardContext.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport isEqual from 'lodash/isEqual';\nimport {\n  AdhocFilter,\n  ensureIsArray,\n  EXTRA_FORM_DATA_OVERRIDE_EXTRA_KEYS,\n  EXTRA_FORM_DATA_OVERRIDE_REGULAR_MAPPINGS,\n  isDefined,\n  isFreeFormAdhocFilter,\n  isSimpleAdhocFilter,\n  JsonObject,\n  NO_TIME_RANGE,\n  QueryFormData,\n  QueryObjectFilterClause,\n  SimpleAdhocFilter,\n} from '@superset-ui/core';\nimport { simpleFilterToAdhoc } from 'src/utils/simpleFilterToAdhoc';\n\nconst removeExtraFieldForNewCharts = (\n  filters: AdhocFilter[],\n  isNewChart: boolean,\n) =>\n  filters.map(filter => {\n    if (filter.isExtra) {\n      return { ...filter, isExtra: !isNewChart };\n    }\n    return filter;\n  });\n\nconst removeAdhocFilterDuplicates = (filters: AdhocFilter[]) => {\n  const isDuplicate = (\n    adhocFilter: AdhocFilter,\n    existingFilters: AdhocFilter[],\n  ) =>\n    existingFilters.some(\n      (existingFilter: AdhocFilter) =>\n        (isFreeFormAdhocFilter(existingFilter) &&\n          isFreeFormAdhocFilter(adhocFilter) &&\n          existingFilter.clause === adhocFilter.clause &&\n          existingFilter.sqlExpression === adhocFilter.sqlExpression) ||\n        (isSimpleAdhocFilter(existingFilter) &&\n          isSimpleAdhocFilter(adhocFilter) &&\n          existingFilter.operator === adhocFilter.operator &&\n          existingFilter.subject === adhocFilter.subject &&\n          ((!('comparator' in existingFilter) &&\n            !('comparator' in adhocFilter)) ||\n            ('comparator' in existingFilter &&\n              'comparator' in adhocFilter &&\n              isEqual(existingFilter.comparator, adhocFilter.comparator)))),\n    );\n\n  return filters.reduce((acc, filter) => {\n    if (!isDuplicate(filter, acc)) {\n      acc.push(filter);\n    }\n    return acc;\n  }, [] as AdhocFilter[]);\n};\n\nconst mergeFilterBoxToFormData = (\n  exploreFormData: QueryFormData,\n  dashboardFormData: JsonObject,\n) => {\n  const dateColumns = {\n    __time_range: 'time_range',\n    __time_col: 'granularity_sqla',\n    __time_grain: 'time_grain_sqla',\n    __granularity: 'granularity',\n  };\n  const appliedTimeExtras = {};\n\n  const filterBoxData: JsonObject = {};\n  ensureIsArray(dashboardFormData.extra_filters).forEach(filter => {\n    if (dateColumns[filter.col]) {\n      if (filter.val !== NO_TIME_RANGE) {\n        filterBoxData[dateColumns[filter.col]] = filter.val;\n        appliedTimeExtras[filter.col] = filter.val;\n      }\n    } else {\n      const adhocFilter = simpleFilterToAdhoc({\n        ...(filter as QueryObjectFilterClause),\n        isExtra: true,\n      });\n      filterBoxData.adhoc_filters = [\n        ...ensureIsArray(filterBoxData.adhoc_filters),\n        adhocFilter,\n      ];\n    }\n  });\n  filterBoxData.applied_time_extras = appliedTimeExtras;\n  return filterBoxData;\n};\n\nconst mergeNativeFiltersToFormData = (\n  exploreFormData: QueryFormData,\n  dashboardFormData: JsonObject,\n) => {\n  const nativeFiltersData: JsonObject = {};\n  const extraFormData = dashboardFormData.extra_form_data || {};\n  Object.entries(EXTRA_FORM_DATA_OVERRIDE_REGULAR_MAPPINGS).forEach(\n    ([srcKey, targetKey]) => {\n      const val = extraFormData[srcKey];\n      if (isDefined(val)) {\n        nativeFiltersData[targetKey] = val;\n      }\n    },\n  );\n\n  if ('time_grain_sqla' in extraFormData) {\n    nativeFiltersData.time_grain_sqla = extraFormData.time_grain_sqla;\n  }\n  if ('granularity_sqla' in extraFormData) {\n    nativeFiltersData.granularity_sqla = extraFormData.granularity_sqla;\n  }\n\n  const extras = dashboardFormData.extras || {};\n  EXTRA_FORM_DATA_OVERRIDE_EXTRA_KEYS.forEach(key => {\n    const val = extraFormData[key];\n    if (isDefined(val)) {\n      extras[key] = val;\n    }\n  });\n  if (Object.keys(extras).length) {\n    nativeFiltersData.extras = extras;\n  }\n\n  nativeFiltersData.adhoc_filters = ensureIsArray(\n    extraFormData.adhoc_filters,\n  ).map(filter => ({\n    ...filter,\n    isExtra: true,\n  }));\n\n  const appendFilters = ensureIsArray(extraFormData.filters).map(extraFilter =>\n    simpleFilterToAdhoc({ ...extraFilter, isExtra: true }),\n  );\n  Object.keys(exploreFormData).forEach(key => {\n    if (key.match(/adhoc_filter.*/)) {\n      nativeFiltersData[key] = [\n        ...ensureIsArray(nativeFiltersData[key]),\n        ...appendFilters,\n      ];\n    }\n  });\n  return nativeFiltersData;\n};\n\nconst applyTimeRangeFilters = (\n  dashboardFormData: JsonObject,\n  adhocFilters: AdhocFilter[],\n) => {\n  const extraFormData = dashboardFormData.extra_form_data || {};\n  if ('time_range' in extraFormData) {\n    return adhocFilters.map((filter: SimpleAdhocFilter) => {\n      if (filter.operator === 'TEMPORAL_RANGE') {\n        return {\n          ...filter,\n          comparator: extraFormData.time_range,\n          isExtra: true,\n        };\n      }\n      return filter;\n    });\n  }\n  return adhocFilters;\n};\n\nexport const getFormDataWithDashboardContext = (\n  exploreFormData: QueryFormData,\n  dashboardContextFormData: JsonObject,\n) => {\n  const filterBoxData = mergeFilterBoxToFormData(\n    exploreFormData,\n    dashboardContextFormData,\n  );\n  const nativeFiltersData = mergeNativeFiltersToFormData(\n    exploreFormData,\n    dashboardContextFormData,\n  );\n  const adhocFilters = [\n    ...Object.keys(exploreFormData),\n    ...Object.keys(filterBoxData),\n    ...Object.keys(nativeFiltersData),\n  ]\n    .filter(key => key.match(/adhoc_filter.*/))\n    .reduce(\n      (acc, key) => ({\n        ...acc,\n        [key]: removeExtraFieldForNewCharts(\n          applyTimeRangeFilters(\n            dashboardContextFormData,\n            removeAdhocFilterDuplicates([\n              ...ensureIsArray(exploreFormData[key]),\n              ...ensureIsArray(filterBoxData[key]),\n              ...ensureIsArray(nativeFiltersData[key]),\n            ]),\n          ),\n          exploreFormData.slice_id === 0,\n        ),\n      }),\n      {},\n    );\n\n  return {\n    ...exploreFormData,\n    ...dashboardContextFormData,\n    ...filterBoxData,\n    ...nativeFiltersData,\n    ...adhocFilters,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}