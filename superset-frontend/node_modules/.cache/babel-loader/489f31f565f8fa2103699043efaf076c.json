{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport supercluster from 'supercluster';\nimport { DEFAULT_POINT_RADIUS, DEFAULT_MAX_ZOOM } from './MapBox';\n\nconst NOOP = () => {};\n\nexport default function transformProps(chartProps) {\n  const { width, height, formData, hooks, queriesData } = chartProps;\n  const { onError = NOOP, setControlValue = NOOP } = hooks;\n  const { bounds, geoJSON, hasCustomMetric, mapboxApiKey } =\n  queriesData[0].data;\n  const {\n    clusteringRadius,\n    globalOpacity,\n    mapboxColor,\n    mapboxStyle,\n    pandasAggfunc,\n    pointRadius,\n    pointRadiusUnit,\n    renderWhileDragging } =\n  formData;\n\n  // Validate mapbox color\n  const rgb = /^rgb\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3})\\)$/.exec(mapboxColor);\n  if (rgb === null) {\n    onError(\"Color field must be of form 'rgb(%d, %d, %d)'\");\n\n    return {};\n  }\n\n  const opts = {\n    maxZoom: DEFAULT_MAX_ZOOM,\n    radius: clusteringRadius };\n\n  if (hasCustomMetric) {\n    opts.initial = () => ({\n      sum: 0,\n      squaredSum: 0,\n      min: Infinity,\n      max: -Infinity });\n\n    opts.map = (prop) => ({\n      sum: prop.metric,\n      squaredSum: prop.metric ** 2,\n      min: prop.metric,\n      max: prop.metric });\n\n    opts.reduce = (accu, prop) => {\n      // Temporarily disable param-reassignment linting to work with supercluster's api\n      /* eslint-disable no-param-reassign */\n      accu.sum += prop.sum;\n      accu.squaredSum += prop.squaredSum;\n      accu.min = Math.min(accu.min, prop.min);\n      accu.max = Math.max(accu.max, prop.max);\n      /* eslint-enable no-param-reassign */\n    };\n  }\n  const clusterer = supercluster(opts);\n  clusterer.load(geoJSON.features);\n\n  return {\n    width,\n    height,\n    aggregatorName: pandasAggfunc,\n    bounds,\n    clusterer,\n    globalOpacity,\n    hasCustomMetric,\n    mapboxApiKey,\n    mapStyle: mapboxStyle,\n    onViewportChange(_ref) {let { latitude, longitude, zoom } = _ref;\n      setControlValue('viewport_longitude', longitude);\n      setControlValue('viewport_latitude', latitude);\n      setControlValue('viewport_zoom', zoom);\n    },\n    pointRadius: pointRadius === 'Auto' ? DEFAULT_POINT_RADIUS : pointRadius,\n    pointRadiusUnit,\n    renderWhileDragging,\n    rgb };\n\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(NOOP, \"NOOP\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/legacy-plugin-chart-map-box/src/transformProps.js\");reactHotLoader.register(transformProps, \"transformProps\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/legacy-plugin-chart-map-box/src/transformProps.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["supercluster","DEFAULT_POINT_RADIUS","DEFAULT_MAX_ZOOM","NOOP","transformProps","chartProps","width","height","formData","hooks","queriesData","onError","setControlValue","bounds","geoJSON","hasCustomMetric","mapboxApiKey","data","clusteringRadius","globalOpacity","mapboxColor","mapboxStyle","pandasAggfunc","pointRadius","pointRadiusUnit","renderWhileDragging","rgb","exec","opts","maxZoom","radius","initial","sum","squaredSum","min","Infinity","max","map","prop","metric","reduce","accu","Math","clusterer","load","features","aggregatorName","mapStyle","onViewportChange","latitude","longitude","zoom"],"sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/legacy-plugin-chart-map-box/src/transformProps.js"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport supercluster from 'supercluster';\nimport { DEFAULT_POINT_RADIUS, DEFAULT_MAX_ZOOM } from './MapBox';\n\nconst NOOP = () => {};\n\nexport default function transformProps(chartProps) {\n  const { width, height, formData, hooks, queriesData } = chartProps;\n  const { onError = NOOP, setControlValue = NOOP } = hooks;\n  const { bounds, geoJSON, hasCustomMetric, mapboxApiKey } =\n    queriesData[0].data;\n  const {\n    clusteringRadius,\n    globalOpacity,\n    mapboxColor,\n    mapboxStyle,\n    pandasAggfunc,\n    pointRadius,\n    pointRadiusUnit,\n    renderWhileDragging,\n  } = formData;\n\n  // Validate mapbox color\n  const rgb = /^rgb\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3})\\)$/.exec(mapboxColor);\n  if (rgb === null) {\n    onError(\"Color field must be of form 'rgb(%d, %d, %d)'\");\n\n    return {};\n  }\n\n  const opts = {\n    maxZoom: DEFAULT_MAX_ZOOM,\n    radius: clusteringRadius,\n  };\n  if (hasCustomMetric) {\n    opts.initial = () => ({\n      sum: 0,\n      squaredSum: 0,\n      min: Infinity,\n      max: -Infinity,\n    });\n    opts.map = prop => ({\n      sum: prop.metric,\n      squaredSum: prop.metric ** 2,\n      min: prop.metric,\n      max: prop.metric,\n    });\n    opts.reduce = (accu, prop) => {\n      // Temporarily disable param-reassignment linting to work with supercluster's api\n      /* eslint-disable no-param-reassign */\n      accu.sum += prop.sum;\n      accu.squaredSum += prop.squaredSum;\n      accu.min = Math.min(accu.min, prop.min);\n      accu.max = Math.max(accu.max, prop.max);\n      /* eslint-enable no-param-reassign */\n    };\n  }\n  const clusterer = supercluster(opts);\n  clusterer.load(geoJSON.features);\n\n  return {\n    width,\n    height,\n    aggregatorName: pandasAggfunc,\n    bounds,\n    clusterer,\n    globalOpacity,\n    hasCustomMetric,\n    mapboxApiKey,\n    mapStyle: mapboxStyle,\n    onViewportChange({ latitude, longitude, zoom }) {\n      setControlValue('viewport_longitude', longitude);\n      setControlValue('viewport_latitude', latitude);\n      setControlValue('viewport_zoom', zoom);\n    },\n    pointRadius: pointRadius === 'Auto' ? DEFAULT_POINT_RADIUS : pointRadius,\n    pointRadiusUnit,\n    renderWhileDragging,\n    rgb,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}