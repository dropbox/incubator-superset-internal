{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { SupersetApiError } from './types';\n/**\n * Handle API request errors, convert to consistent Superset API error.\n * @param error the catched error from SupersetClient.request(...)\n */\nexport default async function handleError(error) {\n  // already a Superset error\n  if (error instanceof SupersetApiError) {\n    throw error;\n  }\n  // string is the error message itself\n  if (typeof error === 'string') {\n    throw new SupersetApiError({ message: error });\n  }\n  // JS errors, normally happens before request was sent\n  if (error instanceof Error) {\n    throw new SupersetApiError({\n      message: error.message || 'Unknown Error',\n      originalError: error });\n\n  }\n  let errorJson;\n  let originalError;\n  let errorMessage = 'Unknown Error';\n  let status;\n  let statusText;\n  // catch HTTP errors\n  if (error instanceof Response) {\n    const { status: responseStatus, statusText: responseStatusText } = error;\n    status = responseStatus;\n    statusText = responseStatusText;\n    errorMessage = `${status} ${statusText}`;\n    try {\n      errorJson = await error.json();\n      originalError = errorJson;\n    }\n    catch (error_) {\n      originalError = error;\n    }\n  } else\n  if (error) {\n    errorJson = error;\n  }\n  // when API returns 200 but operation fails (see Python API json_error_response(...))\n  // or when frontend promise rejects with `{ error: ... }`\n  if (errorJson && (\n  'error' in errorJson || 'message' in errorJson || 'errors' in errorJson)) {\n    let err;\n    if ('errors' in errorJson) {var _errorJson$errors;\n      err = ((_errorJson$errors = errorJson.errors) == null ? void 0 : _errorJson$errors[0]) || {};\n    } else\n    if (typeof errorJson.error === 'object') {\n      err = errorJson.error;\n    } else\n    {\n      err = errorJson;\n    }\n    errorMessage =\n    err.message ||\n    err.error ||\n    err.error_type ||\n    errorMessage;\n    throw new SupersetApiError({\n      status,\n      statusText,\n      message: errorMessage,\n      originalError,\n      ...err });\n\n  }\n  // all unknown error\n  throw new SupersetApiError({\n    status,\n    statusText,\n    message: errorMessage,\n    originalError: error });\n\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(handleError, \"handleError\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/query/api/v1/handleError.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAkBA,SACEA,gBADF,QAIO,SAJP;AAQA;;;;AAIA,eAAe,eAAeC,WAAf,CAA2BC,KAA3B,EAA4C;EACzD;EACA,IAAIA,KAAK,YAAYF,gBAArB,EAAuC;IACrC,MAAME,KAAN;EACD;EACD;EACA,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;IAC7B,MAAM,IAAIF,gBAAJ,CAAqB,EAAEG,OAAO,EAAED,KAAX,EAArB,CAAN;EACD;EACD;EACA,IAAIA,KAAK,YAAYE,KAArB,EAA4B;IAC1B,MAAM,IAAIJ,gBAAJ,CAAqB;MACzBG,OAAO,EAAED,KAAK,CAACC,OAAN,IAAiB,eADD;MAEzBE,aAAa,EAAEH,KAFU,EAArB,CAAN;;EAID;EAED,IAAII,SAAJ;EACA,IAAID,aAAJ;EACA,IAAIE,YAAY,GAAG,eAAnB;EACA,IAAIC,MAAJ;EACA,IAAIC,UAAJ;EAEA;EACA,IAAIP,KAAK,YAAYQ,QAArB,EAA+B;IAC7B,MAAM,EAAEF,MAAM,EAAEG,cAAV,EAA0BF,UAAU,EAAEG,kBAAtC,KAA6DV,KAAnE;IACAM,MAAM,GAAGG,cAAT;IACAF,UAAU,GAAGG,kBAAb;IACAL,YAAY,GAAG,GAAGC,MAAM,IAAIC,UAAU,EAAtC;IACA,IAAI;MACFH,SAAS,GAAI,MAAMJ,KAAK,CAACW,IAAN,EAAnB;MAGAR,aAAa,GAAGC,SAAhB;IACD;IAAC,OAAOQ,MAAP,EAAe;MACfT,aAAa,GAAGH,KAAhB;IACD;EACF,CAbD;EAaO,IAAIA,KAAJ,EAAW;IAChBI,SAAS,GAAGJ,KAAZ;EACD;EAED;EACA;EACA,IACEI,SAAS;EACR,WAAWA,SAAX,IAAwB,aAAaA,SAArC,IAAkD,YAAYA,SADtD,CADX,EAGE;IACA,IAAIS,GAAJ;IACA,IAAI,YAAYT,SAAhB,EAA2B;MACzBS,GAAG,GAAG,+BAAS,CAACC,MAAV,uCAAmB,CAAnB,MAAyB,EAA/B;IACD,CAFD;IAEO,IAAI,OAAOV,SAAS,CAACJ,KAAjB,KAA2B,QAA/B,EAAyC;MAC9Ca,GAAG,GAAGT,SAAS,CAACJ,KAAhB;IACD,CAFM;IAEA;MACLa,GAAG,GAAGT,SAAN;IACD;IACDC,YAAY;IACVQ,GAAG,CAACZ,OAAJ;IACCY,GAAG,CAACb,KADL;IAEAa,GAAG,CAACE,UAFJ;IAGAV,YAJF;IAKA,MAAM,IAAIP,gBAAJ,CAAqB;MACzBQ,MADyB;MAEzBC,UAFyB;MAGzBN,OAAO,EAAEI,YAHgB;MAIzBF,aAJyB;MAKzB,GAAGU,GALsB,EAArB,CAAN;;EAOD;EACD;EACA,MAAM,IAAIf,gBAAJ,CAAqB;IACzBQ,MADyB;IAEzBC,UAFyB;IAGzBN,OAAO,EAAEI,YAHgB;IAIzBF,aAAa,EAAEH,KAJU,EAArB,CAAN;;AAMD,C,iLA3E6BD,W","names":["SupersetApiError","handleError","error","message","Error","originalError","errorJson","errorMessage","status","statusText","Response","responseStatus","responseStatusText","json","error_","err","errors","error_type"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/query/api/v1/handleError.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  SupersetApiError,\n  SupersetApiErrorPayload,\n  SupersetApiMultiErrorsPayload,\n} from './types';\n\nexport type ErrorInput = string | Error | Response | SupersetApiErrorPayload;\n\n/**\n * Handle API request errors, convert to consistent Superset API error.\n * @param error the catched error from SupersetClient.request(...)\n */\nexport default async function handleError(error: ErrorInput): Promise<never> {\n  // already a Superset error\n  if (error instanceof SupersetApiError) {\n    throw error;\n  }\n  // string is the error message itself\n  if (typeof error === 'string') {\n    throw new SupersetApiError({ message: error });\n  }\n  // JS errors, normally happens before request was sent\n  if (error instanceof Error) {\n    throw new SupersetApiError({\n      message: error.message || 'Unknown Error',\n      originalError: error,\n    });\n  }\n\n  let errorJson;\n  let originalError;\n  let errorMessage = 'Unknown Error';\n  let status: number | undefined;\n  let statusText: string | undefined;\n\n  // catch HTTP errors\n  if (error instanceof Response) {\n    const { status: responseStatus, statusText: responseStatusText } = error;\n    status = responseStatus;\n    statusText = responseStatusText;\n    errorMessage = `${status} ${statusText}`;\n    try {\n      errorJson = (await error.json()) as\n        | SupersetApiErrorPayload\n        | SupersetApiMultiErrorsPayload;\n      originalError = errorJson;\n    } catch (error_) {\n      originalError = error;\n    }\n  } else if (error) {\n    errorJson = error;\n  }\n\n  // when API returns 200 but operation fails (see Python API json_error_response(...))\n  // or when frontend promise rejects with `{ error: ... }`\n  if (\n    errorJson &&\n    ('error' in errorJson || 'message' in errorJson || 'errors' in errorJson)\n  ) {\n    let err;\n    if ('errors' in errorJson) {\n      err = errorJson.errors?.[0] || {};\n    } else if (typeof errorJson.error === 'object') {\n      err = errorJson.error;\n    } else {\n      err = errorJson;\n    }\n    errorMessage =\n      err.message ||\n      (err.error as string | undefined) ||\n      err.error_type ||\n      errorMessage;\n    throw new SupersetApiError({\n      status,\n      statusText,\n      message: errorMessage,\n      originalError,\n      ...err,\n    });\n  }\n  // all unknown error\n  throw new SupersetApiError({\n    status,\n    statusText,\n    message: errorMessage,\n    originalError: error,\n  });\n}\n"]},"metadata":{},"sourceType":"module"}