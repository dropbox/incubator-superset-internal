{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { defineSavedMetrics } from '@superset-ui/chart-controls';\nimport { FeatureFlag, isFeatureEnabled, t } from '@superset-ui/core';\nimport { getQueryMode, isAggMode, validateAggControlValues } from './shared';\nconst percentMetrics = {\n  type: 'MetricsControl',\n  label: t('Percentage metrics'),\n  description: t('Metrics for which percentage of total are to be displayed. Calculated from only data within the row limit.'),\n  multi: true,\n  visibility: isAggMode,\n  resetOnHide: false,\n  mapStateToProps: (_ref, controlState) => {var _controls$groupby, _controls$metrics;let { datasource, controls } = _ref;return {\n      columns: (datasource == null ? void 0 : datasource.columns) || [],\n      savedMetrics: defineSavedMetrics(datasource),\n      datasource,\n      datasourceType: datasource == null ? void 0 : datasource.type,\n      queryMode: getQueryMode(controls),\n      externalValidationErrors: validateAggControlValues(controls, [(_controls$groupby =\n      controls.groupby) == null ? void 0 : _controls$groupby.value, (_controls$metrics =\n      controls.metrics) == null ? void 0 : _controls$metrics.value,\n      controlState == null ? void 0 : controlState.value]) };},\n\n\n  rerender: ['groupby', 'metrics'],\n  default: [],\n  validators: [] };\n\nconst dndPercentMetrics = {\n  ...percentMetrics,\n  type: 'DndMetricSelect' };\n\nexport const percentMetricsControlSetItem = {\n  name: 'percent_metrics',\n  config: {\n    ...(isFeatureEnabled(FeatureFlag.ENABLE_EXPLORE_DRAG_AND_DROP) ?\n    dndPercentMetrics :\n    percentMetrics) } };\n\n\nexport const metricsControlSetItem = {\n  name: 'metrics',\n  override: {\n    validators: [],\n    visibility: isAggMode,\n    mapStateToProps: (_ref2, controlState) => {var _datasource$columns$, _datasource$columns, _controls$groupby2, _controls$percent_met;let { controls, datasource, form_data } = _ref2;return {\n        columns: datasource != null && (_datasource$columns$ = datasource.columns[0]) != null && _datasource$columns$.hasOwnProperty('filterable') ?\n        datasource == null ? void 0 : (_datasource$columns = datasource.columns) == null ? void 0 : _datasource$columns.filter((c) => c.filterable) :\n        datasource == null ? void 0 : datasource.columns,\n        savedMetrics: defineSavedMetrics(datasource),\n        // current active adhoc metrics\n        selectedMetrics: form_data.metrics || (form_data.metric ? [form_data.metric] : []),\n        datasource,\n        externalValidationErrors: validateAggControlValues(controls, [(_controls$groupby2 =\n        controls.groupby) == null ? void 0 : _controls$groupby2.value, (_controls$percent_met =\n        controls.percent_metrics) == null ? void 0 : _controls$percent_met.value,\n        controlState.value]) };},\n\n\n    rerender: ['groupby', 'percent_metrics'],\n    resetOnHide: false } };\n\n\nexport const showTotalsControlSetItem = {\n  name: 'show_totals',\n  config: {\n    type: 'CheckboxControl',\n    label: t('Show totals'),\n    default: false,\n    description: t('Show total aggregations of selected metrics. Note that row limit does not apply to the result.'),\n    visibility: isAggMode,\n    resetOnHide: false } };","map":{"version":3,"mappings":"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","names":["defineSavedMetrics","FeatureFlag","isFeatureEnabled","t","getQueryMode","isAggMode","validateAggControlValues","percentMetrics","type","label","description","multi","visibility","resetOnHide","mapStateToProps","controlState","datasource","controls","columns","savedMetrics","datasourceType","queryMode","externalValidationErrors","groupby","value","metrics","rerender","default","validators","dndPercentMetrics","percentMetricsControlSetItem","name","config","ENABLE_EXPLORE_DRAG_AND_DROP","metricsControlSetItem","override","form_data","hasOwnProperty","filter","c","filterable","selectedMetrics","metric","percent_metrics","showTotalsControlSetItem"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/plugins/plugin-chart-handlebars/src/plugin/controls/metrics.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  ControlPanelState,\n  ControlSetItem,\n  ControlState,\n  sharedControls,\n  Dataset,\n  ColumnMeta,\n  defineSavedMetrics,\n} from '@superset-ui/chart-controls';\nimport { FeatureFlag, isFeatureEnabled, t } from '@superset-ui/core';\nimport { getQueryMode, isAggMode, validateAggControlValues } from './shared';\n\nconst percentMetrics: typeof sharedControls.metrics = {\n  type: 'MetricsControl',\n  label: t('Percentage metrics'),\n  description: t(\n    'Metrics for which percentage of total are to be displayed. Calculated from only data within the row limit.',\n  ),\n  multi: true,\n  visibility: isAggMode,\n  resetOnHide: false,\n  mapStateToProps: ({ datasource, controls }, controlState) => ({\n    columns: datasource?.columns || [],\n    savedMetrics: defineSavedMetrics(datasource),\n    datasource,\n    datasourceType: datasource?.type,\n    queryMode: getQueryMode(controls),\n    externalValidationErrors: validateAggControlValues(controls, [\n      controls.groupby?.value,\n      controls.metrics?.value,\n      controlState?.value,\n    ]),\n  }),\n  rerender: ['groupby', 'metrics'],\n  default: [],\n  validators: [],\n};\n\nconst dndPercentMetrics = {\n  ...percentMetrics,\n  type: 'DndMetricSelect',\n};\n\nexport const percentMetricsControlSetItem: ControlSetItem = {\n  name: 'percent_metrics',\n  config: {\n    ...(isFeatureEnabled(FeatureFlag.ENABLE_EXPLORE_DRAG_AND_DROP)\n      ? dndPercentMetrics\n      : percentMetrics),\n  },\n};\n\nexport const metricsControlSetItem: ControlSetItem = {\n  name: 'metrics',\n  override: {\n    validators: [],\n    visibility: isAggMode,\n    mapStateToProps: (\n      { controls, datasource, form_data }: ControlPanelState,\n      controlState: ControlState,\n    ) => ({\n      columns: datasource?.columns[0]?.hasOwnProperty('filterable')\n        ? (datasource as Dataset)?.columns?.filter(\n            (c: ColumnMeta) => c.filterable,\n          )\n        : datasource?.columns,\n      savedMetrics: defineSavedMetrics(datasource),\n      // current active adhoc metrics\n      selectedMetrics:\n        form_data.metrics || (form_data.metric ? [form_data.metric] : []),\n      datasource,\n      externalValidationErrors: validateAggControlValues(controls, [\n        controls.groupby?.value,\n        controls.percent_metrics?.value,\n        controlState.value,\n      ]),\n    }),\n    rerender: ['groupby', 'percent_metrics'],\n    resetOnHide: false,\n  },\n};\n\nexport const showTotalsControlSetItem: ControlSetItem = {\n  name: 'show_totals',\n  config: {\n    type: 'CheckboxControl',\n    label: t('Show totals'),\n    default: false,\n    description: t(\n      'Show total aggregations of selected metrics. Note that row limit does not apply to the result.',\n    ),\n    visibility: isAggMode,\n    resetOnHide: false,\n  },\n};\n"]},"metadata":{},"sourceType":"module"}