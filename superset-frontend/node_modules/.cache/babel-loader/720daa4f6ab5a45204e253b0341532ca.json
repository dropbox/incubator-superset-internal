{"ast":null,"code":"import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback } from 'react';\nimport { AxisType, DTTM_ALIAS, getColumnLabel, getNumberFormatter, getTimeFormatter } from '@superset-ui/core';\nimport Echart from '../components/Echart';\nimport { currentSeries, formatSeriesName } from '../utils/series';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport default function EchartsMixedTimeseries(_ref) {let { height, width, echartOptions, setDataMask, labelMap, labelMapB, groupby, groupbyB, selectedValues, formData, emitCrossFilters, seriesBreakdown, onContextMenu, xValueFormatter, xAxis, refs, coltypeMapping } = _ref;\n  const isFirstQuery = useCallback((seriesIndex) => seriesIndex < seriesBreakdown, [seriesBreakdown]);\n  const getCrossFilterDataMask = useCallback((seriesName, seriesIndex) => {\n    const selected = Object.values(selectedValues || {});\n    let values;\n    if (_includesInstanceProperty(selected).call(selected, seriesName)) {\n      values = selected.filter((v) => v !== seriesName);\n    } else\n    {\n      values = [seriesName];\n    }\n    const currentGroupBy = isFirstQuery(seriesIndex) ? groupby : groupbyB;\n    const currentLabelMap = isFirstQuery(seriesIndex) ? labelMap : labelMapB;\n    const groupbyValues = values.\n    map((value) => currentLabelMap == null ? void 0 : currentLabelMap[value]).\n    filter((value) => !!value);\n    return {\n      dataMask: {\n        extraFormData: {\n          // @ts-ignore\n          filters: values.length === 0 ?\n          [] :\n          [\n          ...currentGroupBy.map((col, idx) => {\n            const val = groupbyValues.map((v) => v[idx]);\n            if (val === null || val === undefined)\n            return {\n              col,\n              op: 'IS NULL' };\n\n            return {\n              col,\n              op: 'IN',\n              val: val };\n\n          })] },\n\n\n        filterState: {\n          value: !groupbyValues.length ? null : groupbyValues,\n          selectedValues: values.length ? values : null } },\n\n\n      isCurrentValueSelected: _includesInstanceProperty(selected).call(selected, seriesName) };\n\n  }, [groupby, groupbyB, isFirstQuery, labelMap, labelMapB, selectedValues]);\n  const handleChange = useCallback((seriesName, seriesIndex) => {\n    if (!emitCrossFilters) {\n      return;\n    }\n    setDataMask(getCrossFilterDataMask(seriesName, seriesIndex).dataMask);\n  }, [emitCrossFilters, setDataMask, getCrossFilterDataMask]);\n  const eventHandlers = {\n    click: (props) => {\n      const { seriesName, seriesIndex } = props;\n      handleChange(seriesName, seriesIndex);\n    },\n    mouseout: () => {\n      currentSeries.name = '';\n    },\n    mouseover: (params) => {\n      currentSeries.name = params.seriesName;\n    },\n    contextmenu: async (eventParams) => {\n      if (onContextMenu) {\n        eventParams.event.stop();\n        const { data, seriesName, seriesIndex } = eventParams;\n        const pointerEvent = eventParams.event.event;\n        const drillToDetailFilters = [];\n        const drillByFilters = [];\n        const isFirst = isFirstQuery(seriesIndex);\n        const values = [\n        ...(eventParams.name ? [eventParams.name] : []),\n        ...(isFirst ? labelMap : labelMapB)[eventParams.seriesName]];\n\n        if (data && xAxis.type === AxisType.time) {\n          drillToDetailFilters.push({\n            col: xAxis.label === DTTM_ALIAS ?\n            formData.granularitySqla :\n            xAxis.label,\n            grain: formData.timeGrainSqla,\n            op: '==',\n            val: data[0],\n            formattedVal: xValueFormatter(data[0]) });\n\n        }\n        [\n        ...(data && xAxis.type === AxisType.category ? [xAxis.label] : []),\n        ...(isFirst ? formData.groupby : formData.groupbyB)].\n        forEach((dimension, i) => drillToDetailFilters.push({\n          col: dimension,\n          op: '==',\n          val: values[i],\n          formattedVal: String(values[i]) }));\n\n        [...(isFirst ? formData.groupby : formData.groupbyB)].forEach((dimension, i) => drillByFilters.push({\n          col: dimension,\n          op: '==',\n          val: values[i],\n          formattedVal: formatSeriesName(values[i], {\n            timeFormatter: getTimeFormatter(formData.dateFormat),\n            numberFormatter: getNumberFormatter(formData.numberFormat),\n            coltype: coltypeMapping == null ? void 0 : coltypeMapping[getColumnLabel(dimension)] }) }));\n\n\n        onContextMenu(pointerEvent.clientX, pointerEvent.clientY, {\n          drillToDetail: drillToDetailFilters,\n          crossFilter: getCrossFilterDataMask(seriesName, seriesIndex),\n          drillBy: {\n            filters: drillByFilters,\n            groupbyFieldName: isFirst ? 'groupby' : 'groupby_b',\n            adhocFilterFieldName: isFirst ? 'adhoc_filters' : 'adhoc_filters_b' } });\n\n\n      }\n    } };\n\n  return ___EmotionJSX(Echart, { refs: refs, height: height, width: width, echartOptions: echartOptions, eventHandlers: eventHandlers, selectedValues: selectedValues });\n}","map":{"version":3,"mappings":"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","names":["React","useCallback","AxisType","DTTM_ALIAS","getColumnLabel","getNumberFormatter","getTimeFormatter","Echart","currentSeries","formatSeriesName","EchartsMixedTimeseries","height","width","echartOptions","setDataMask","labelMap","labelMapB","groupby","groupbyB","selectedValues","formData","emitCrossFilters","seriesBreakdown","onContextMenu","xValueFormatter","xAxis","refs","coltypeMapping","isFirstQuery","seriesIndex","getCrossFilterDataMask","seriesName","selected","Object","values","filter","v","currentGroupBy","currentLabelMap","groupbyValues","map","value","dataMask","extraFormData","filters","length","col","idx","val","undefined","op","filterState","isCurrentValueSelected","handleChange","eventHandlers","click","props","mouseout","name","mouseover","params","contextmenu","eventParams","event","stop","data","pointerEvent","drillToDetailFilters","drillByFilters","isFirst","type","time","push","label","granularitySqla","grain","timeGrainSqla","formattedVal","category","forEach","dimension","i","String","timeFormatter","dateFormat","numberFormatter","numberFormat","coltype","clientX","clientY","drillToDetail","crossFilter","drillBy","groupbyFieldName","adhocFilterFieldName"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-echarts/src/MixedTimeseries/EchartsMixedTimeseries.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback } from 'react';\nimport {\n  AxisType,\n  BinaryQueryObjectFilterClause,\n  DTTM_ALIAS,\n  DataRecordValue,\n  getColumnLabel,\n  getNumberFormatter,\n  getTimeFormatter,\n} from '@superset-ui/core';\nimport { EchartsMixedTimeseriesChartTransformedProps } from './types';\nimport Echart from '../components/Echart';\nimport { EventHandlers } from '../types';\nimport { currentSeries, formatSeriesName } from '../utils/series';\n\nexport default function EchartsMixedTimeseries({\n  height,\n  width,\n  echartOptions,\n  setDataMask,\n  labelMap,\n  labelMapB,\n  groupby,\n  groupbyB,\n  selectedValues,\n  formData,\n  emitCrossFilters,\n  seriesBreakdown,\n  onContextMenu,\n  xValueFormatter,\n  xAxis,\n  refs,\n  coltypeMapping,\n}: EchartsMixedTimeseriesChartTransformedProps) {\n  const isFirstQuery = useCallback(\n    (seriesIndex: number) => seriesIndex < seriesBreakdown,\n    [seriesBreakdown],\n  );\n\n  const getCrossFilterDataMask = useCallback(\n    (seriesName, seriesIndex) => {\n      const selected: string[] = Object.values(selectedValues || {});\n      let values: string[];\n      if (selected.includes(seriesName)) {\n        values = selected.filter(v => v !== seriesName);\n      } else {\n        values = [seriesName];\n      }\n\n      const currentGroupBy = isFirstQuery(seriesIndex) ? groupby : groupbyB;\n      const currentLabelMap = isFirstQuery(seriesIndex) ? labelMap : labelMapB;\n      const groupbyValues = values\n        .map(value => currentLabelMap?.[value])\n        .filter(value => !!value);\n\n      return {\n        dataMask: {\n          extraFormData: {\n            // @ts-ignore\n            filters:\n              values.length === 0\n                ? []\n                : [\n                    ...currentGroupBy.map((col, idx) => {\n                      const val: DataRecordValue[] = groupbyValues.map(\n                        v => v[idx],\n                      );\n                      if (val === null || val === undefined)\n                        return {\n                          col,\n                          op: 'IS NULL' as const,\n                        };\n                      return {\n                        col,\n                        op: 'IN' as const,\n                        val: val as (string | number | boolean)[],\n                      };\n                    }),\n                  ],\n          },\n          filterState: {\n            value: !groupbyValues.length ? null : groupbyValues,\n            selectedValues: values.length ? values : null,\n          },\n        },\n        isCurrentValueSelected: selected.includes(seriesName),\n      };\n    },\n    [groupby, groupbyB, isFirstQuery, labelMap, labelMapB, selectedValues],\n  );\n\n  const handleChange = useCallback(\n    (seriesName: string, seriesIndex: number) => {\n      if (!emitCrossFilters) {\n        return;\n      }\n\n      setDataMask(getCrossFilterDataMask(seriesName, seriesIndex).dataMask);\n    },\n    [emitCrossFilters, setDataMask, getCrossFilterDataMask],\n  );\n\n  const eventHandlers: EventHandlers = {\n    click: props => {\n      const { seriesName, seriesIndex } = props;\n      handleChange(seriesName, seriesIndex);\n    },\n    mouseout: () => {\n      currentSeries.name = '';\n    },\n    mouseover: params => {\n      currentSeries.name = params.seriesName;\n    },\n    contextmenu: async eventParams => {\n      if (onContextMenu) {\n        eventParams.event.stop();\n        const { data, seriesName, seriesIndex } = eventParams;\n        const pointerEvent = eventParams.event.event;\n        const drillToDetailFilters: BinaryQueryObjectFilterClause[] = [];\n        const drillByFilters: BinaryQueryObjectFilterClause[] = [];\n        const isFirst = isFirstQuery(seriesIndex);\n        const values = [\n          ...(eventParams.name ? [eventParams.name] : []),\n          ...(isFirst ? labelMap : labelMapB)[eventParams.seriesName],\n        ];\n        if (data && xAxis.type === AxisType.time) {\n          drillToDetailFilters.push({\n            col:\n              xAxis.label === DTTM_ALIAS\n                ? formData.granularitySqla\n                : xAxis.label,\n            grain: formData.timeGrainSqla,\n            op: '==',\n            val: data[0],\n            formattedVal: xValueFormatter(data[0]),\n          });\n        }\n        [\n          ...(data && xAxis.type === AxisType.category ? [xAxis.label] : []),\n          ...(isFirst ? formData.groupby : formData.groupbyB),\n        ].forEach((dimension, i) =>\n          drillToDetailFilters.push({\n            col: dimension,\n            op: '==',\n            val: values[i],\n            formattedVal: String(values[i]),\n          }),\n        );\n\n        [...(isFirst ? formData.groupby : formData.groupbyB)].forEach(\n          (dimension, i) =>\n            drillByFilters.push({\n              col: dimension,\n              op: '==',\n              val: values[i],\n              formattedVal: formatSeriesName(values[i], {\n                timeFormatter: getTimeFormatter(formData.dateFormat),\n                numberFormatter: getNumberFormatter(formData.numberFormat),\n                coltype: coltypeMapping?.[getColumnLabel(dimension)],\n              }),\n            }),\n        );\n        onContextMenu(pointerEvent.clientX, pointerEvent.clientY, {\n          drillToDetail: drillToDetailFilters,\n          crossFilter: getCrossFilterDataMask(seriesName, seriesIndex),\n          drillBy: {\n            filters: drillByFilters,\n            groupbyFieldName: isFirst ? 'groupby' : 'groupby_b',\n            adhocFilterFieldName: isFirst ? 'adhoc_filters' : 'adhoc_filters_b',\n          },\n        });\n      }\n    },\n  };\n\n  return (\n    <Echart\n      refs={refs}\n      height={height}\n      width={width}\n      echartOptions={echartOptions}\n      eventHandlers={eventHandlers}\n      selectedValues={selectedValues}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}