{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useMemo, useCallback, useEffect } from 'react';\nimport cx from 'classnames';\nimport { useSelector } from 'react-redux';\nimport { css } from '@superset-ui/core';\nimport AnchorLink from 'src/dashboard/components/AnchorLink';\nimport Chart from 'src/dashboard/containers/Chart';\nimport DeleteComponentButton from 'src/dashboard/components/DeleteComponentButton';\nimport DragDroppable from 'src/dashboard/components/dnd/DragDroppable';\nimport HoverMenu from 'src/dashboard/components/menu/HoverMenu';\nimport ResizableContainer from 'src/dashboard/components/resizable/ResizableContainer';\nimport getChartAndLabelComponentIdFromPath from 'src/dashboard/util/getChartAndLabelComponentIdFromPath';\nimport useFilterFocusHighlightStyles from 'src/dashboard/util/useFilterFocusHighlightStyles';\nimport { COLUMN_TYPE, ROW_TYPE } from 'src/dashboard/util/componentTypes';\nimport { GRID_BASE_UNIT, GRID_GUTTER_SIZE, GRID_MIN_COLUMN_COUNT, GRID_MIN_ROW_UNITS } from 'src/dashboard/util/constants';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport const CHART_MARGIN = 32;\nconst fullSizeStyle = css`\n  && {\n    position: fixed;\n    z-index: 3000;\n    left: 0;\n    top: 0;\n  }\n`;\nconst ChartHolder = (_ref) => {let { id, parentId, component, parentComponent, index, depth, availableColumnCount, columnWidth, onResizeStart, onResize, onResizeStop, editMode, isComponentVisible, dashboardId, fullSizeChartId, getComponentById = () => undefined, deleteComponent, updateComponents, handleComponentDrop, setFullSizeChartId, isInView } = _ref;\n  const { chartId } = component.meta;\n  const isFullSize = fullSizeChartId === chartId;\n  const focusHighlightStyles = useFilterFocusHighlightStyles(chartId);\n  const dashboardState = useSelector((state) => state.dashboardState);\n  const [extraControls, setExtraControls] = useState({});\n  const [outlinedComponentId, setOutlinedComponentId] = useState();\n  const [outlinedColumnName, setOutlinedColumnName] = useState();\n  const [currentDirectPathLastUpdated, setCurrentDirectPathLastUpdated] = useState(0);\n  const directPathToChild = useMemo(() => {var _dashboardState$direc;return (_dashboardState$direc = dashboardState == null ? void 0 : dashboardState.directPathToChild) != null ? _dashboardState$direc : [];}, [dashboardState]);\n  const directPathLastUpdated = useMemo(() => {var _dashboardState$direc2;return (_dashboardState$direc2 = dashboardState == null ? void 0 : dashboardState.directPathLastUpdated) != null ? _dashboardState$direc2 : 0;}, [dashboardState]);\n  const infoFromPath = useMemo(() => getChartAndLabelComponentIdFromPath(directPathToChild), [directPathToChild]);\n  // Calculate if the chart should be outlined\n  useEffect(() => {\n    const { label: columnName, chart: chartComponentId } = infoFromPath;\n    if (directPathLastUpdated !== currentDirectPathLastUpdated &&\n    component.id === chartComponentId) {\n      setCurrentDirectPathLastUpdated(directPathLastUpdated);\n      setOutlinedComponentId(component.id);\n      setOutlinedColumnName(columnName);\n    }\n  }, [\n  component,\n  currentDirectPathLastUpdated,\n  directPathLastUpdated,\n  infoFromPath]);\n\n  // Remove the chart outline after a defined time\n  useEffect(() => {\n    let timerId;\n    if (outlinedComponentId) {\n      timerId = setTimeout(() => {\n        setOutlinedComponentId(undefined);\n        setOutlinedColumnName(undefined);\n      }, 2000);\n    }\n    return () => {\n      if (timerId) {\n        clearTimeout(timerId);\n      }\n    };\n  }, [outlinedComponentId]);\n  const widthMultiple = useMemo(() => {var _getComponentById, _getComponentById$met, _parentComponent$pare;\n    const columnParentWidth = (_getComponentById = getComponentById((_parentComponent$pare = parentComponent.parents) == null ? void 0 : _parentComponent$pare.find((parent) => parent.startsWith(COLUMN_TYPE)))) == null ? void 0 : (_getComponentById$met = _getComponentById.meta) == null ? void 0 : _getComponentById$met.width;\n    let widthMultiple = component.meta.width || GRID_MIN_COLUMN_COUNT;\n    if (parentComponent.type === COLUMN_TYPE) {\n      widthMultiple = parentComponent.meta.width || GRID_MIN_COLUMN_COUNT;\n    } else\n    if (columnParentWidth && widthMultiple > columnParentWidth) {\n      widthMultiple = columnParentWidth;\n    }\n    return widthMultiple;\n  }, [\n  component,\n  getComponentById,\n  parentComponent.meta.width,\n  parentComponent.parents,\n  parentComponent.type]);\n\n  const { chartWidth, chartHeight } = useMemo(() => {\n    let chartWidth = 0;\n    let chartHeight = 0;\n    if (isFullSize) {\n      chartWidth = window.innerWidth - CHART_MARGIN;\n      chartHeight = window.innerHeight - CHART_MARGIN;\n    } else\n    {\n      chartWidth = Math.floor(widthMultiple * columnWidth +\n      (widthMultiple - 1) * GRID_GUTTER_SIZE -\n      CHART_MARGIN);\n      chartHeight = Math.floor(component.meta.height * GRID_BASE_UNIT - CHART_MARGIN);\n    }\n    return {\n      chartWidth,\n      chartHeight };\n\n  }, [columnWidth, component, isFullSize, widthMultiple]);\n  const handleDeleteComponent = useCallback(() => {\n    deleteComponent(id, parentId);\n  }, [deleteComponent, id, parentId]);\n  const handleUpdateSliceName = useCallback((nextName) => {\n    updateComponents({\n      [component.id]: {\n        ...component,\n        meta: {\n          ...component.meta,\n          sliceNameOverride: nextName } } });\n\n\n\n  }, [component, updateComponents]);\n  const handleToggleFullSize = useCallback(() => {\n    setFullSizeChartId(isFullSize ? null : chartId);\n  }, [chartId, isFullSize, setFullSizeChartId]);\n  const handleExtraControl = useCallback((name, value) => {\n    setExtraControls((current) => ({\n      ...current,\n      [name]: value }));\n\n  }, []);\n  return ___EmotionJSX(DragDroppable, { component: component, parentComponent: parentComponent, orientation: parentComponent.type === ROW_TYPE ? 'column' : 'row', index: index, depth: depth, onDrop: handleComponentDrop, disableDragDrop: false, editMode: editMode },\n  (_ref2) => {let { dropIndicatorProps, dragSourceRef } = _ref2;return ___EmotionJSX(ResizableContainer, { id: component.id, adjustableWidth: parentComponent.type === ROW_TYPE, adjustableHeight: true, widthStep: columnWidth, widthMultiple: widthMultiple, heightStep: GRID_BASE_UNIT, heightMultiple: component.meta.height, minWidthMultiple: GRID_MIN_COLUMN_COUNT, minHeightMultiple: GRID_MIN_ROW_UNITS, maxWidthMultiple: availableColumnCount + widthMultiple, onResizeStart: onResizeStart, onResize: onResize, onResizeStop: onResizeStop, editMode: editMode },\n    ___EmotionJSX(\"div\", { ref: dragSourceRef, style: focusHighlightStyles, css: isFullSize ? fullSizeStyle : undefined, className: cx('dashboard-component', 'dashboard-component-chart-holder',\n      // The following class is added to support custom dashboard styling via the CSS editor\n      `dashboard-chart-id-${chartId}`, outlinedComponentId ? 'fade-in' : 'fade-out') },\n    !editMode && ___EmotionJSX(AnchorLink, { id: component.id, scrollIntoView: outlinedComponentId === component.id }),\n    !!outlinedComponentId && ___EmotionJSX(\"style\", null,\n    `label[for=${outlinedColumnName}] + .Select .Select__control {\n                    border-color: #00736a;\n                    transition: border-color 1s ease-in-out;\n                  }`),\n\n    ___EmotionJSX(Chart, { componentId: component.id, id: component.meta.chartId, dashboardId: dashboardId, width: chartWidth, height: chartHeight, sliceName: component.meta.sliceNameOverride ||\n      component.meta.sliceName ||\n      '', updateSliceName: handleUpdateSliceName, isComponentVisible: isComponentVisible, handleToggleFullSize: handleToggleFullSize, isFullSize: isFullSize, setControlValue: handleExtraControl, extraControls: extraControls, isInView: isInView }),\n    editMode && ___EmotionJSX(HoverMenu, { position: \"top\" },\n    ___EmotionJSX(\"div\", null,\n    ___EmotionJSX(DeleteComponentButton, { onDelete: handleDeleteComponent })))),\n\n\n\n    dropIndicatorProps && ___EmotionJSX(\"div\", dropIndicatorProps));});\n\n\n};\nexport default ChartHolder;","map":{"version":3,"mappings":"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","names":["React","useState","useMemo","useCallback","useEffect","cx","useSelector","css","AnchorLink","Chart","DeleteComponentButton","DragDroppable","HoverMenu","ResizableContainer","getChartAndLabelComponentIdFromPath","useFilterFocusHighlightStyles","COLUMN_TYPE","ROW_TYPE","GRID_BASE_UNIT","GRID_GUTTER_SIZE","GRID_MIN_COLUMN_COUNT","GRID_MIN_ROW_UNITS","CHART_MARGIN","fullSizeStyle","ChartHolder","id","parentId","component","parentComponent","index","depth","availableColumnCount","columnWidth","onResizeStart","onResize","onResizeStop","editMode","isComponentVisible","dashboardId","fullSizeChartId","getComponentById","undefined","deleteComponent","updateComponents","handleComponentDrop","setFullSizeChartId","isInView","chartId","meta","isFullSize","focusHighlightStyles","dashboardState","state","extraControls","setExtraControls","outlinedComponentId","setOutlinedComponentId","outlinedColumnName","setOutlinedColumnName","currentDirectPathLastUpdated","setCurrentDirectPathLastUpdated","directPathToChild","directPathLastUpdated","infoFromPath","label","columnName","chart","chartComponentId","timerId","setTimeout","clearTimeout","widthMultiple","columnParentWidth","parents","find","parent","startsWith","width","type","chartWidth","chartHeight","window","innerWidth","innerHeight","Math","floor","height","handleDeleteComponent","handleUpdateSliceName","nextName","sliceNameOverride","handleToggleFullSize","handleExtraControl","name","value","current","dropIndicatorProps","dragSourceRef","sliceName"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/dashboard/components/gridComponents/ChartHolder.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useMemo, useCallback, useEffect } from 'react';\nimport { ResizeCallback, ResizeStartCallback } from 're-resizable';\nimport cx from 'classnames';\nimport { useSelector } from 'react-redux';\nimport { css } from '@superset-ui/core';\nimport { LayoutItem, RootState } from 'src/dashboard/types';\nimport AnchorLink from 'src/dashboard/components/AnchorLink';\nimport Chart from 'src/dashboard/containers/Chart';\nimport DeleteComponentButton from 'src/dashboard/components/DeleteComponentButton';\nimport DragDroppable from 'src/dashboard/components/dnd/DragDroppable';\nimport HoverMenu from 'src/dashboard/components/menu/HoverMenu';\nimport ResizableContainer from 'src/dashboard/components/resizable/ResizableContainer';\nimport getChartAndLabelComponentIdFromPath from 'src/dashboard/util/getChartAndLabelComponentIdFromPath';\nimport useFilterFocusHighlightStyles from 'src/dashboard/util/useFilterFocusHighlightStyles';\nimport { COLUMN_TYPE, ROW_TYPE } from 'src/dashboard/util/componentTypes';\nimport {\n  GRID_BASE_UNIT,\n  GRID_GUTTER_SIZE,\n  GRID_MIN_COLUMN_COUNT,\n  GRID_MIN_ROW_UNITS,\n} from 'src/dashboard/util/constants';\n\nexport const CHART_MARGIN = 32;\n\ninterface ChartHolderProps {\n  id: string;\n  parentId: string;\n  dashboardId: number;\n  component: LayoutItem;\n  parentComponent: LayoutItem;\n  getComponentById?: (id?: string) => LayoutItem | undefined;\n  index: number;\n  depth: number;\n  editMode: boolean;\n  directPathLastUpdated?: number;\n  fullSizeChartId: number | null;\n  isComponentVisible: boolean;\n\n  // grid related\n  availableColumnCount: number;\n  columnWidth: number;\n  onResizeStart: ResizeStartCallback;\n  onResize: ResizeCallback;\n  onResizeStop: ResizeCallback;\n\n  // dnd\n  deleteComponent: (id: string, parentId: string) => void;\n  updateComponents: Function;\n  handleComponentDrop: (...args: unknown[]) => unknown;\n  setFullSizeChartId: (chartId: number | null) => void;\n  isInView: boolean;\n}\n\nconst fullSizeStyle = css`\n  && {\n    position: fixed;\n    z-index: 3000;\n    left: 0;\n    top: 0;\n  }\n`;\n\nconst ChartHolder: React.FC<ChartHolderProps> = ({\n  id,\n  parentId,\n  component,\n  parentComponent,\n  index,\n  depth,\n  availableColumnCount,\n  columnWidth,\n  onResizeStart,\n  onResize,\n  onResizeStop,\n  editMode,\n  isComponentVisible,\n  dashboardId,\n  fullSizeChartId,\n  getComponentById = () => undefined,\n  deleteComponent,\n  updateComponents,\n  handleComponentDrop,\n  setFullSizeChartId,\n  isInView,\n}) => {\n  const { chartId } = component.meta;\n  const isFullSize = fullSizeChartId === chartId;\n\n  const focusHighlightStyles = useFilterFocusHighlightStyles(chartId);\n  const dashboardState = useSelector(\n    (state: RootState) => state.dashboardState,\n  );\n  const [extraControls, setExtraControls] = useState<Record<string, unknown>>(\n    {},\n  );\n  const [outlinedComponentId, setOutlinedComponentId] = useState<string>();\n  const [outlinedColumnName, setOutlinedColumnName] = useState<string>();\n  const [currentDirectPathLastUpdated, setCurrentDirectPathLastUpdated] =\n    useState(0);\n\n  const directPathToChild = useMemo(\n    () => dashboardState?.directPathToChild ?? [],\n    [dashboardState],\n  );\n\n  const directPathLastUpdated = useMemo(\n    () => dashboardState?.directPathLastUpdated ?? 0,\n    [dashboardState],\n  );\n\n  const infoFromPath = useMemo(\n    () => getChartAndLabelComponentIdFromPath(directPathToChild) as any,\n    [directPathToChild],\n  );\n\n  // Calculate if the chart should be outlined\n  useEffect(() => {\n    const { label: columnName, chart: chartComponentId } = infoFromPath;\n\n    if (\n      directPathLastUpdated !== currentDirectPathLastUpdated &&\n      component.id === chartComponentId\n    ) {\n      setCurrentDirectPathLastUpdated(directPathLastUpdated);\n      setOutlinedComponentId(component.id);\n      setOutlinedColumnName(columnName);\n    }\n  }, [\n    component,\n    currentDirectPathLastUpdated,\n    directPathLastUpdated,\n    infoFromPath,\n  ]);\n\n  // Remove the chart outline after a defined time\n  useEffect(() => {\n    let timerId: NodeJS.Timeout | undefined;\n    if (outlinedComponentId) {\n      timerId = setTimeout(() => {\n        setOutlinedComponentId(undefined);\n        setOutlinedColumnName(undefined);\n      }, 2000);\n    }\n\n    return () => {\n      if (timerId) {\n        clearTimeout(timerId);\n      }\n    };\n  }, [outlinedComponentId]);\n\n  const widthMultiple = useMemo(() => {\n    const columnParentWidth = getComponentById(\n      parentComponent.parents?.find(parent => parent.startsWith(COLUMN_TYPE)),\n    )?.meta?.width;\n\n    let widthMultiple = component.meta.width || GRID_MIN_COLUMN_COUNT;\n    if (parentComponent.type === COLUMN_TYPE) {\n      widthMultiple = parentComponent.meta.width || GRID_MIN_COLUMN_COUNT;\n    } else if (columnParentWidth && widthMultiple > columnParentWidth) {\n      widthMultiple = columnParentWidth;\n    }\n\n    return widthMultiple;\n  }, [\n    component,\n    getComponentById,\n    parentComponent.meta.width,\n    parentComponent.parents,\n    parentComponent.type,\n  ]);\n\n  const { chartWidth, chartHeight } = useMemo(() => {\n    let chartWidth = 0;\n    let chartHeight = 0;\n\n    if (isFullSize) {\n      chartWidth = window.innerWidth - CHART_MARGIN;\n      chartHeight = window.innerHeight - CHART_MARGIN;\n    } else {\n      chartWidth = Math.floor(\n        widthMultiple * columnWidth +\n          (widthMultiple - 1) * GRID_GUTTER_SIZE -\n          CHART_MARGIN,\n      );\n      chartHeight = Math.floor(\n        component.meta.height * GRID_BASE_UNIT - CHART_MARGIN,\n      );\n    }\n\n    return {\n      chartWidth,\n      chartHeight,\n    };\n  }, [columnWidth, component, isFullSize, widthMultiple]);\n\n  const handleDeleteComponent = useCallback(() => {\n    deleteComponent(id, parentId);\n  }, [deleteComponent, id, parentId]);\n\n  const handleUpdateSliceName = useCallback(\n    (nextName: string) => {\n      updateComponents({\n        [component.id]: {\n          ...component,\n          meta: {\n            ...component.meta,\n            sliceNameOverride: nextName,\n          },\n        },\n      });\n    },\n    [component, updateComponents],\n  );\n\n  const handleToggleFullSize = useCallback(() => {\n    setFullSizeChartId(isFullSize ? null : chartId);\n  }, [chartId, isFullSize, setFullSizeChartId]);\n\n  const handleExtraControl = useCallback((name: string, value: unknown) => {\n    setExtraControls(current => ({\n      ...current,\n      [name]: value,\n    }));\n  }, []);\n\n  return (\n    <DragDroppable\n      component={component}\n      parentComponent={parentComponent}\n      orientation={parentComponent.type === ROW_TYPE ? 'column' : 'row'}\n      index={index}\n      depth={depth}\n      onDrop={handleComponentDrop}\n      disableDragDrop={false}\n      editMode={editMode}\n    >\n      {({ dropIndicatorProps, dragSourceRef }) => (\n        <ResizableContainer\n          id={component.id}\n          adjustableWidth={parentComponent.type === ROW_TYPE}\n          adjustableHeight\n          widthStep={columnWidth}\n          widthMultiple={widthMultiple}\n          heightStep={GRID_BASE_UNIT}\n          heightMultiple={component.meta.height}\n          minWidthMultiple={GRID_MIN_COLUMN_COUNT}\n          minHeightMultiple={GRID_MIN_ROW_UNITS}\n          maxWidthMultiple={availableColumnCount + widthMultiple}\n          onResizeStart={onResizeStart}\n          onResize={onResize}\n          onResizeStop={onResizeStop}\n          editMode={editMode}\n        >\n          <div\n            ref={dragSourceRef}\n            data-test=\"dashboard-component-chart-holder\"\n            style={focusHighlightStyles}\n            css={isFullSize ? fullSizeStyle : undefined}\n            className={cx(\n              'dashboard-component',\n              'dashboard-component-chart-holder',\n              // The following class is added to support custom dashboard styling via the CSS editor\n              `dashboard-chart-id-${chartId}`,\n              outlinedComponentId ? 'fade-in' : 'fade-out',\n            )}\n          >\n            {!editMode && (\n              <AnchorLink\n                id={component.id}\n                scrollIntoView={outlinedComponentId === component.id}\n              />\n            )}\n            {!!outlinedComponentId && (\n              <style>\n                {`label[for=${outlinedColumnName}] + .Select .Select__control {\n                    border-color: #00736a;\n                    transition: border-color 1s ease-in-out;\n                  }`}\n              </style>\n            )}\n            <Chart\n              componentId={component.id}\n              id={component.meta.chartId}\n              dashboardId={dashboardId}\n              width={chartWidth}\n              height={chartHeight}\n              sliceName={\n                component.meta.sliceNameOverride ||\n                component.meta.sliceName ||\n                ''\n              }\n              updateSliceName={handleUpdateSliceName}\n              isComponentVisible={isComponentVisible}\n              handleToggleFullSize={handleToggleFullSize}\n              isFullSize={isFullSize}\n              setControlValue={handleExtraControl}\n              extraControls={extraControls}\n              isInView={isInView}\n            />\n            {editMode && (\n              <HoverMenu position=\"top\">\n                <div data-test=\"dashboard-delete-component-button\">\n                  <DeleteComponentButton onDelete={handleDeleteComponent} />\n                </div>\n              </HoverMenu>\n            )}\n          </div>\n          {dropIndicatorProps && <div {...dropIndicatorProps} />}\n        </ResizableContainer>\n      )}\n    </DragDroppable>\n  );\n};\n\nexport default ChartHolder;\n"]},"metadata":{},"sourceType":"module"}