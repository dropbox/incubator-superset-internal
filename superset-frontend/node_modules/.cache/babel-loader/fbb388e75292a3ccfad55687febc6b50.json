{"ast":null,"code":"import _isEmpty from \"lodash/isEmpty\";import _debounce from \"lodash/debounce\";import _sortBy from \"lodash/sortBy\";import _isEqual from \"lodash/isEqual\";import _uniq from \"lodash/uniq\";import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useCallback, useMemo, useState, useRef } from 'react';\n\nimport { styled, SLOW_DEBOUNCE, t, css, useTheme } from '@superset-ui/core';\nimport { useDispatch } from 'react-redux';\nimport { AntdForm } from 'src/components';\nimport Icons from 'src/components/Icons';\nimport ErrorBoundary from 'src/components/ErrorBoundary';\nimport { StyledModal } from 'src/components/Modal';\nimport { testWithId } from 'src/utils/testUtils';\nimport { updateCascadeParentIds } from 'src/dashboard/actions/nativeFilters';\nimport useEffectEvent from 'src/hooks/useEffectEvent';\nimport { useFilterConfigMap, useFilterConfiguration } from '../state';\nimport FilterConfigurePane from './FilterConfigurePane';\nimport FiltersConfigForm, { FilterPanels } from './FiltersConfigForm/FiltersConfigForm';\nimport Footer from './Footer/Footer';\nimport { useOpenModal, useRemoveCurrentFilter } from './state';\nimport { createHandleSave, createHandleRemoveItem, generateFilterId, getFilterIds, validateForm, NATIVE_FILTER_DIVIDER_PREFIX, hasCircularDependency } from './utils';\nimport DividerConfigForm from './DividerConfigForm';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst MODAL_MARGIN = 16;\nconst MIN_WIDTH = 880;\nconst StyledModalWrapper = styled(StyledModal)`\n  min-width: ${MIN_WIDTH}px;\n  width: ${(_ref) => {let { expanded } = _ref;return expanded ? '100%' : MIN_WIDTH;}} !important;\n\n  @media (max-width: ${MIN_WIDTH + MODAL_MARGIN * 2}px) {\n    width: 100% !important;\n    min-width: auto;\n  }\n\n  .ant-modal-body {\n    padding: 0px;\n  }\n\n  ${(_ref2) => {let { expanded } = _ref2;return expanded &&\n  css`\n      height: 100%;\n\n      .ant-modal-body {\n        flex: 1 1 auto;\n      }\n      .ant-modal-content {\n        height: 100%;\n      }\n    `;}}\n`;\nexport const StyledModalBody = styled.div`\n  display: flex;\n  height: ${(_ref3) => {let { expanded } = _ref3;return expanded ? '100%' : '700px';}};\n  flex-direction: row;\n  flex: 1;\n  .filters-list {\n    width: ${(_ref4) => {let { theme } = _ref4;return theme.gridUnit * 50;}}px;\n    overflow: auto;\n  }\n`;\nexport const StyledForm = styled(AntdForm)`\n  width: 100%;\n`;\nexport const StyledExpandButtonWrapper = styled.div`\n  margin-left: ${(_ref5) => {let { theme } = _ref5;return theme.gridUnit * 4;}}px;\n`;\nexport const FILTERS_CONFIG_MODAL_TEST_ID = 'filters-config-modal';\nexport const getFiltersConfigModalTestId = testWithId(FILTERS_CONFIG_MODAL_TEST_ID);\nexport const ALLOW_DEPENDENCIES = [\n'filter_range',\n'filter_select',\n'filter_time'];\n\nconst DEFAULT_EMPTY_FILTERS = [];\nconst DEFAULT_REMOVED_FILTERS = {};\nconst DEFAULT_FORM_VALUES = {\n  filters: {} };\n\n/**\n * This is the modal to configure all the dashboard-native filters.\n * Manages modal-level state, such as what filters are in the list,\n * and which filter is currently being edited.\n *\n * Calls the `save` callback with the new FilterConfiguration object\n * when the user saves the filters.\n */\nfunction FiltersConfigModal(_ref6) {let { isOpen, initialFilterId, createNewOnOpen, onSave, onCancel } = _ref6;\n  const dispatch = useDispatch();\n  const theme = useTheme();\n  const [form] = AntdForm.useForm();\n  const configFormRef = useRef();\n  // the filter config from redux state, this does not change until modal is closed.\n  const filterConfig = useFilterConfiguration();\n  const filterConfigMap = useFilterConfigMap();\n  // new filter ids belong to filters have been added during\n  // this configuration session, and only exist in the form state until we submit.\n  const [newFilterIds, setNewFilterIds] = useState(DEFAULT_EMPTY_FILTERS);\n  // store ids of filters that have been removed with the time they were removed\n  // so that we can disappear them after a few secs.\n  // filters are still kept in state until form is submitted.\n  const [removedFilters, setRemovedFilters] = useState(DEFAULT_REMOVED_FILTERS);\n  const [saveAlertVisible, setSaveAlertVisible] = useState(false);\n  // The full ordered set of ((original + new) - completely removed) filter ids\n  // Use this as the canonical list of what filters are being configured!\n  // This includes filter ids that are pending removal, so check for that.\n  const filterIds = useMemo(() => _uniq([...getFilterIds(filterConfig), ...newFilterIds]).filter((id) => {var _removedFilters$id;return !removedFilters[id] || ((_removedFilters$id = removedFilters[id]) == null ? void 0 : _removedFilters$id.isPending);}), [filterConfig, newFilterIds, removedFilters]);\n  // open the first filter in the list to start\n  const initialCurrentFilterId = initialFilterId != null ? initialFilterId : filterIds[0];\n  const [currentFilterId, setCurrentFilterId] = useState(initialCurrentFilterId);\n  const [erroredFilters, setErroredFilters] = useState(DEFAULT_EMPTY_FILTERS);\n  // the form values are managed by the antd form, but we copy them to here\n  // so that we can display them (e.g. filter titles in the tab headers)\n  const [formValues, setFormValues] = useState(DEFAULT_FORM_VALUES);\n  const unsavedFiltersIds = newFilterIds.filter((id) => !removedFilters[id]);\n  // brings back a filter that was previously removed (\"Undo\")\n  const restoreFilter = useCallback((id) => {\n    const removal = removedFilters[id];\n    // gotta clear the removal timeout to prevent the filter from getting deleted\n    if (removal != null && removal.isPending)\n    clearTimeout(removal.timerId);\n    setRemovedFilters((current) => ({ ...current, [id]: null }));\n  }, [removedFilters]);\n  const initialFilterOrder = useMemo(() => Object.keys(filterConfigMap), [filterConfigMap]);\n  // State for tracking the re-ordering of filters\n  const [orderedFilters, setOrderedFilters] = useState(initialFilterOrder);\n  // State for rendered filter to improve performance\n  const [renderedFilters, setRenderedFilters] = useState([\n  initialCurrentFilterId]);\n\n  const getActiveFilterPanelKey = (filterId) => [\n  `${filterId}-${FilterPanels.configuration.key}`,\n  `${filterId}-${FilterPanels.settings.key}`];\n\n  const [activeFilterPanelKey, setActiveFilterPanelKey] = useState(getActiveFilterPanelKey(initialCurrentFilterId));\n  const handleTabChange = (filterId) => {\n    setCurrentFilterId(filterId);\n    setActiveFilterPanelKey(getActiveFilterPanelKey(filterId));\n  };\n  // generates a new filter id and appends it to the newFilterIds\n  const addFilter = useCallback((type) => {\n    const newFilterId = generateFilterId(type);\n    setNewFilterIds([...newFilterIds, newFilterId]);\n    setCurrentFilterId(newFilterId);\n    setSaveAlertVisible(false);\n    setOrderedFilters([...orderedFilters, newFilterId]);\n    setActiveFilterPanelKey(getActiveFilterPanelKey(newFilterId));\n  }, [\n  newFilterIds,\n  orderedFilters,\n  setCurrentFilterId,\n  setOrderedFilters,\n  setNewFilterIds]);\n\n  useOpenModal(isOpen, addFilter, createNewOnOpen);\n  useRemoveCurrentFilter(removedFilters, currentFilterId, orderedFilters, setCurrentFilterId);\n  const handleRemoveItem = createHandleRemoveItem(setRemovedFilters, setOrderedFilters, setSaveAlertVisible);\n  // After this, it should be as if the modal was just opened fresh.\n  // Called when the modal is closed.\n  const resetForm = function (isSaving) {if (isSaving === void 0) {isSaving = false;}\n    setNewFilterIds(DEFAULT_EMPTY_FILTERS);\n    setCurrentFilterId(initialCurrentFilterId);\n    setRemovedFilters(DEFAULT_REMOVED_FILTERS);\n    setSaveAlertVisible(false);\n    setFormValues(DEFAULT_FORM_VALUES);\n    setErroredFilters(DEFAULT_EMPTY_FILTERS);\n    if (filterIds.length > 0) {\n      setActiveFilterPanelKey(getActiveFilterPanelKey(filterIds[0]));\n    }\n    if (!isSaving) {\n      setOrderedFilters(initialFilterOrder);\n    }\n    setRenderedFilters([initialCurrentFilterId]);\n    form.resetFields(['filters']);\n    form.setFieldsValue({ changed: false });\n  };\n  const getFilterTitle = useCallback((id) => {\n    const formValue = formValues.filters[id];\n    const config = filterConfigMap[id];\n    return formValue && 'name' in formValue && formValue.name ||\n    formValue && 'title' in formValue && formValue.title ||\n    config && 'name' in config && config.name ||\n    config && 'title' in config && config.title ||\n    t('[untitled]');\n  }, [filterConfigMap, formValues.filters]);\n  const canBeUsedAsDependency = useCallback((filterId) => {var _form$getFieldValue;\n    if (removedFilters[filterId]) {\n      return false;\n    }\n    const component = ((_form$getFieldValue = form.getFieldValue('filters')) == null ? void 0 : _form$getFieldValue[filterId]) || filterConfigMap[filterId];\n    return component &&\n    'filterType' in component &&\n    _includesInstanceProperty(ALLOW_DEPENDENCIES).call(ALLOW_DEPENDENCIES, component.filterType);\n  }, [filterConfigMap, form, removedFilters]);\n  const getAvailableFilters = useCallback((filterId) => filterIds.\n  filter((id) => id !== filterId).\n  filter((id) => canBeUsedAsDependency(id)).\n  map((id) => {var _filterConfigMap$id;return {\n      label: getFilterTitle(id),\n      value: id,\n      type: (_filterConfigMap$id = filterConfigMap[id]) == null ? void 0 : _filterConfigMap$id.filterType };}),\n  [canBeUsedAsDependency, filterIds, getFilterTitle]);\n  const cleanDeletedParents = (values) => {\n    const updatedFilterConfigMap = Object.keys(filterConfigMap).reduce((acc, key) => {var _filter$cascadeParent;\n      const filter = filterConfigMap[key];\n      const cascadeParentIds = (_filter$cascadeParent = filter.cascadeParentIds) == null ? void 0 : _filter$cascadeParent.filter((id) => canBeUsedAsDependency(id));\n      if (cascadeParentIds) {\n        dispatch(updateCascadeParentIds(key, cascadeParentIds));\n      }\n      return {\n        ...acc,\n        [key]: {\n          ...filter,\n          cascadeParentIds } };\n\n\n    }, {});\n    const filters = values == null ? void 0 : values.filters;\n    if (filters) {\n      Object.keys(filters).forEach((key) => {\n        const filter = filters[key];\n        if (!('dependencies' in filter)) {\n          return;\n        }\n        const { dependencies } = filter;\n        if (dependencies) {\n          filter.dependencies = dependencies.filter((id) => canBeUsedAsDependency(id));\n        }\n      });\n    }\n    return updatedFilterConfigMap;\n  };\n  const handleErroredFilters = useCallback(() => {\n    // managing left pane errored filters indicators\n    const formValidationFields = form.getFieldsError();\n    const erroredFiltersIds = [];\n    formValidationFields.forEach((field) => {\n      const filterId = field.name[1];\n      if (field.errors.length > 0 && !_includesInstanceProperty(erroredFiltersIds).call(erroredFiltersIds, filterId)) {\n        erroredFiltersIds.push(filterId);\n      }\n    });\n    // no form validation issues found, resets errored filters\n    if (!erroredFiltersIds.length && erroredFilters.length > 0) {\n      setErroredFilters(DEFAULT_EMPTY_FILTERS);\n      return;\n    }\n    // form validation issues found, sets errored filters\n    if (erroredFiltersIds.length > 0 &&\n    !_isEqual(_sortBy(erroredFilters), _sortBy(erroredFiltersIds))) {\n      setErroredFilters(erroredFiltersIds);\n    }\n  }, [form, erroredFilters]);\n  const handleSave = async () => {\n    const values = await validateForm(form, currentFilterId, setCurrentFilterId);\n    handleErroredFilters();\n    if (values) {\n      const updatedFilterConfigMap = cleanDeletedParents(values);\n      createHandleSave(updatedFilterConfigMap, orderedFilters, removedFilters, onSave, values)();\n      resetForm(true);\n    } else\n    {\n      configFormRef.current.changeTab('configuration');\n    }\n  };\n  const handleConfirmCancel = () => {\n    resetForm();\n    onCancel();\n  };\n  const handleCancel = () => {\n    const changed = form.getFieldValue('changed');\n    const didChangeOrder = orderedFilters.length !== initialFilterOrder.length ||\n    orderedFilters.some((val, index) => val !== initialFilterOrder[index]);\n    if (unsavedFiltersIds.length > 0 ||\n    form.isFieldsTouched() ||\n    changed ||\n    didChangeOrder) {\n      setSaveAlertVisible(true);\n    } else\n    {\n      handleConfirmCancel();\n    }\n  };\n  const handleRearrange = (dragIndex, targetIndex) => {\n    const newOrderedFilter = [...orderedFilters];\n    const removed = newOrderedFilter.splice(dragIndex, 1)[0];\n    newOrderedFilter.splice(targetIndex, 0, removed);\n    setOrderedFilters(newOrderedFilter);\n  };\n  const buildDependencyMap = useCallback(() => {\n    const dependencyMap = new Map();\n    const filters = form.getFieldValue('filters');\n    if (filters) {\n      Object.keys(filters).forEach((key) => {\n        const formItem = filters[key];\n        const configItem = filterConfigMap[key];\n        let array = [];\n        if (formItem && 'dependencies' in formItem) {\n          array = [...formItem.dependencies];\n        } else\n        if (configItem != null && configItem.cascadeParentIds) {\n          array = [...configItem.cascadeParentIds];\n        }\n        dependencyMap.set(key, array);\n      });\n    }\n    return dependencyMap;\n  }, [filterConfigMap, form]);\n  const validateDependencies = useCallback(() => {\n    const dependencyMap = buildDependencyMap();\n    filterIds.\n    filter((id) => !removedFilters[id]).\n    forEach((filterId) => {\n      const result = hasCircularDependency(dependencyMap, filterId);\n      const field = {\n        name: ['filters', filterId, 'dependencies'],\n        errors: result ? [t('Cyclic dependency detected')] : [] };\n\n      form.setFields([field]);\n    });\n    handleErroredFilters();\n  }, [\n  buildDependencyMap,\n  filterIds,\n  form,\n  handleErroredFilters,\n  removedFilters]);\n\n  const getDependencySuggestion = useCallback((filterId) => {\n    const dependencyMap = buildDependencyMap();\n    const possibleDependencies = orderedFilters.filter((key) => key !== filterId && canBeUsedAsDependency(key));\n    const found = possibleDependencies.find((filter) => {\n      const dependencies = dependencyMap.get(filterId) || [];\n      dependencies.push(filter);\n      if (hasCircularDependency(dependencyMap, filterId)) {\n        dependencies.pop();\n        return false;\n      }\n      return true;\n    });\n    return found || possibleDependencies[0];\n  }, [buildDependencyMap, canBeUsedAsDependency, orderedFilters]);\n  const [expanded, setExpanded] = useState(false);\n  const toggleExpand = useEffectEvent(() => {\n    setExpanded(!expanded);\n  });\n  const ToggleIcon = expanded ?\n  Icons.FullscreenExitOutlined :\n  Icons.FullscreenOutlined;\n  const handleValuesChange = useMemo(() => _debounce((changes, values) => {\n    const didChangeFilterName = changes.filters &&\n    Object.values(changes.filters).some((filter) => filter.name && filter.name !== null);\n    const didChangeSectionTitle = changes.filters &&\n    Object.values(changes.filters).some((filter) => filter.title && filter.title !== null);\n    if (didChangeFilterName || didChangeSectionTitle) {\n      // we only need to set this if a name/title changed\n      setFormValues(values);\n    }\n    setSaveAlertVisible(false);\n    handleErroredFilters();\n  }, SLOW_DEBOUNCE), [handleErroredFilters]);\n  useEffect(() => {\n    if (!_isEmpty(removedFilters)) {\n      setErroredFilters((prevErroredFilters) => prevErroredFilters.filter((f) => !removedFilters[f]));\n    }\n  }, [removedFilters]);\n  useEffect(() => {\n    if (!_includesInstanceProperty(renderedFilters).call(renderedFilters, currentFilterId)) {\n      setRenderedFilters([...renderedFilters, currentFilterId]);\n    }\n  }, [currentFilterId]);\n  const handleActiveFilterPanelChange = useCallback((key) => setActiveFilterPanelKey(key), [setActiveFilterPanelKey]);\n  const formList = useMemo(() => orderedFilters.map((id) => {\n    if (!_includesInstanceProperty(renderedFilters).call(renderedFilters, id))\n    return null;\n    const isDivider = id.startsWith(NATIVE_FILTER_DIVIDER_PREFIX);\n    const isActive = currentFilterId === id;\n    return ___EmotionJSX(\"div\", { key: id, style: {\n        height: '100%',\n        overflowY: 'auto',\n        display: isActive ? '' : 'none' } },\n\n    isDivider ? ___EmotionJSX(DividerConfigForm, { componentId: id, divider: filterConfigMap[id] }) : ___EmotionJSX(FiltersConfigForm, { ref: configFormRef, form: form, filterId: id, filterToEdit: filterConfigMap[id], removedFilters: removedFilters, restoreFilter: restoreFilter, getAvailableFilters: getAvailableFilters, key: id, activeFilterPanelKeys: activeFilterPanelKey, handleActiveFilterPanelChange: handleActiveFilterPanelChange, isActive: isActive, setErroredFilters: setErroredFilters, validateDependencies: validateDependencies, getDependencySuggestion: getDependencySuggestion }));\n\n  }), [\n  renderedFilters,\n  orderedFilters,\n  currentFilterId,\n  filterConfigMap,\n  form,\n  removedFilters,\n  restoreFilter,\n  getAvailableFilters,\n  activeFilterPanelKey,\n  validateDependencies,\n  getDependencySuggestion,\n  handleActiveFilterPanelChange]);\n\n  return ___EmotionJSX(StyledModalWrapper, { visible: isOpen, maskClosable: false, title: t('Add and edit filters'), expanded: expanded, destroyOnClose: true, onCancel: handleCancel, onOk: handleSave, centered: true, footer: ___EmotionJSX(\"div\", { css: css`\n            display: flex;\n            justify-content: flex-end;\n            align-items: flex-end;\n          ` },\n    ___EmotionJSX(Footer, { onDismiss: () => setSaveAlertVisible(false), onCancel: handleCancel, handleSave: handleSave, canSave: !erroredFilters.length, saveAlertVisible: saveAlertVisible, onConfirmCancel: handleConfirmCancel }),\n    ___EmotionJSX(StyledExpandButtonWrapper, null,\n    ___EmotionJSX(ToggleIcon, { iconSize: \"l\", iconColor: theme.colors.grayscale.dark2, onClick: toggleExpand }))) },\n\n\n  ___EmotionJSX(ErrorBoundary, null,\n  ___EmotionJSX(StyledModalBody, { expanded: expanded },\n  ___EmotionJSX(StyledForm, { form: form, onValuesChange: handleValuesChange, layout: \"vertical\" },\n  ___EmotionJSX(FilterConfigurePane, { erroredFilters: erroredFilters, onRemove: handleRemoveItem, onAdd: addFilter, onChange: handleTabChange, getFilterTitle: getFilterTitle, currentFilterId: currentFilterId, removedFilters: removedFilters, restoreFilter: restoreFilter, onRearrange: handleRearrange, filters: orderedFilters },\n  formList)))));\n\n\n\n\n\n}\nexport default /*#__PURE__*/React.memo(FiltersConfigModal);","map":{"version":3,"mappings":"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","names":["React","useEffect","useCallback","useMemo","useState","useRef","styled","SLOW_DEBOUNCE","t","css","useTheme","useDispatch","AntdForm","Icons","ErrorBoundary","StyledModal","testWithId","updateCascadeParentIds","useEffectEvent","useFilterConfigMap","useFilterConfiguration","FilterConfigurePane","FiltersConfigForm","FilterPanels","Footer","useOpenModal","useRemoveCurrentFilter","createHandleSave","createHandleRemoveItem","generateFilterId","getFilterIds","validateForm","NATIVE_FILTER_DIVIDER_PREFIX","hasCircularDependency","DividerConfigForm","MODAL_MARGIN","MIN_WIDTH","StyledModalWrapper","expanded","StyledModalBody","div","theme","gridUnit","StyledForm","StyledExpandButtonWrapper","FILTERS_CONFIG_MODAL_TEST_ID","getFiltersConfigModalTestId","ALLOW_DEPENDENCIES","DEFAULT_EMPTY_FILTERS","DEFAULT_REMOVED_FILTERS","DEFAULT_FORM_VALUES","filters","FiltersConfigModal","isOpen","initialFilterId","createNewOnOpen","onSave","onCancel","dispatch","form","useForm","configFormRef","filterConfig","filterConfigMap","newFilterIds","setNewFilterIds","removedFilters","setRemovedFilters","saveAlertVisible","setSaveAlertVisible","filterIds","filter","id","isPending","initialCurrentFilterId","currentFilterId","setCurrentFilterId","erroredFilters","setErroredFilters","formValues","setFormValues","unsavedFiltersIds","restoreFilter","removal","clearTimeout","timerId","current","initialFilterOrder","Object","keys","orderedFilters","setOrderedFilters","renderedFilters","setRenderedFilters","getActiveFilterPanelKey","filterId","configuration","key","settings","activeFilterPanelKey","setActiveFilterPanelKey","handleTabChange","addFilter","type","newFilterId","handleRemoveItem","resetForm","isSaving","length","resetFields","setFieldsValue","changed","getFilterTitle","formValue","config","name","title","canBeUsedAsDependency","component","getFieldValue","filterType","getAvailableFilters","map","label","value","cleanDeletedParents","values","updatedFilterConfigMap","reduce","acc","cascadeParentIds","forEach","dependencies","handleErroredFilters","formValidationFields","getFieldsError","erroredFiltersIds","field","errors","push","handleSave","changeTab","handleConfirmCancel","handleCancel","didChangeOrder","some","val","index","isFieldsTouched","handleRearrange","dragIndex","targetIndex","newOrderedFilter","removed","splice","buildDependencyMap","dependencyMap","Map","formItem","configItem","array","set","validateDependencies","result","setFields","getDependencySuggestion","possibleDependencies","found","find","get","pop","setExpanded","toggleExpand","ToggleIcon","FullscreenExitOutlined","FullscreenOutlined","handleValuesChange","changes","didChangeFilterName","didChangeSectionTitle","prevErroredFilters","f","handleActiveFilterPanelChange","formList","isDivider","startsWith","isActive","height","overflowY","display","colors","grayscale","dark2","memo"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigModal.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, {\n  useEffect,\n  useCallback,\n  useMemo,\n  useState,\n  useRef,\n} from 'react';\nimport { uniq, isEqual, sortBy, debounce, isEmpty } from 'lodash';\nimport {\n  Filter,\n  FilterConfiguration,\n  NativeFilterType,\n  Divider,\n  styled,\n  SLOW_DEBOUNCE,\n  t,\n  css,\n  useTheme,\n} from '@superset-ui/core';\nimport { useDispatch } from 'react-redux';\nimport { AntdForm } from 'src/components';\nimport Icons from 'src/components/Icons';\nimport ErrorBoundary from 'src/components/ErrorBoundary';\nimport { StyledModal } from 'src/components/Modal';\nimport { testWithId } from 'src/utils/testUtils';\nimport { updateCascadeParentIds } from 'src/dashboard/actions/nativeFilters';\nimport useEffectEvent from 'src/hooks/useEffectEvent';\nimport { useFilterConfigMap, useFilterConfiguration } from '../state';\nimport FilterConfigurePane from './FilterConfigurePane';\nimport FiltersConfigForm, {\n  FilterPanels,\n} from './FiltersConfigForm/FiltersConfigForm';\nimport Footer from './Footer/Footer';\nimport { useOpenModal, useRemoveCurrentFilter } from './state';\nimport { FilterRemoval, NativeFiltersForm } from './types';\nimport {\n  createHandleSave,\n  createHandleRemoveItem,\n  generateFilterId,\n  getFilterIds,\n  validateForm,\n  NATIVE_FILTER_DIVIDER_PREFIX,\n  hasCircularDependency,\n} from './utils';\nimport DividerConfigForm from './DividerConfigForm';\n\nconst MODAL_MARGIN = 16;\nconst MIN_WIDTH = 880;\n\nconst StyledModalWrapper = styled(StyledModal)<{ expanded: boolean }>`\n  min-width: ${MIN_WIDTH}px;\n  width: ${({ expanded }) => (expanded ? '100%' : MIN_WIDTH)} !important;\n\n  @media (max-width: ${MIN_WIDTH + MODAL_MARGIN * 2}px) {\n    width: 100% !important;\n    min-width: auto;\n  }\n\n  .ant-modal-body {\n    padding: 0px;\n  }\n\n  ${({ expanded }) =>\n    expanded &&\n    css`\n      height: 100%;\n\n      .ant-modal-body {\n        flex: 1 1 auto;\n      }\n      .ant-modal-content {\n        height: 100%;\n      }\n    `}\n`;\n\nexport const StyledModalBody = styled.div<{ expanded: boolean }>`\n  display: flex;\n  height: ${({ expanded }) => (expanded ? '100%' : '700px')};\n  flex-direction: row;\n  flex: 1;\n  .filters-list {\n    width: ${({ theme }) => theme.gridUnit * 50}px;\n    overflow: auto;\n  }\n`;\n\nexport const StyledForm = styled(AntdForm)`\n  width: 100%;\n`;\n\nexport const StyledExpandButtonWrapper = styled.div`\n  margin-left: ${({ theme }) => theme.gridUnit * 4}px;\n`;\n\nexport const FILTERS_CONFIG_MODAL_TEST_ID = 'filters-config-modal';\nexport const getFiltersConfigModalTestId = testWithId(\n  FILTERS_CONFIG_MODAL_TEST_ID,\n);\n\nexport interface FiltersConfigModalProps {\n  isOpen: boolean;\n  initialFilterId?: string;\n  createNewOnOpen?: boolean;\n  onSave: (filterConfig: FilterConfiguration) => Promise<void>;\n  onCancel: () => void;\n}\nexport const ALLOW_DEPENDENCIES = [\n  'filter_range',\n  'filter_select',\n  'filter_time',\n];\n\nconst DEFAULT_EMPTY_FILTERS: string[] = [];\nconst DEFAULT_REMOVED_FILTERS: Record<string, FilterRemoval> = {};\nconst DEFAULT_FORM_VALUES: NativeFiltersForm = {\n  filters: {},\n};\n\n/**\n * This is the modal to configure all the dashboard-native filters.\n * Manages modal-level state, such as what filters are in the list,\n * and which filter is currently being edited.\n *\n * Calls the `save` callback with the new FilterConfiguration object\n * when the user saves the filters.\n */\nfunction FiltersConfigModal({\n  isOpen,\n  initialFilterId,\n  createNewOnOpen,\n  onSave,\n  onCancel,\n}: FiltersConfigModalProps) {\n  const dispatch = useDispatch();\n  const theme = useTheme();\n\n  const [form] = AntdForm.useForm<NativeFiltersForm>();\n\n  const configFormRef = useRef<any>();\n\n  // the filter config from redux state, this does not change until modal is closed.\n  const filterConfig = useFilterConfiguration();\n  const filterConfigMap = useFilterConfigMap();\n\n  // new filter ids belong to filters have been added during\n  // this configuration session, and only exist in the form state until we submit.\n  const [newFilterIds, setNewFilterIds] = useState<string[]>(\n    DEFAULT_EMPTY_FILTERS,\n  );\n\n  // store ids of filters that have been removed with the time they were removed\n  // so that we can disappear them after a few secs.\n  // filters are still kept in state until form is submitted.\n  const [removedFilters, setRemovedFilters] = useState<\n    Record<string, FilterRemoval>\n  >(DEFAULT_REMOVED_FILTERS);\n\n  const [saveAlertVisible, setSaveAlertVisible] = useState<boolean>(false);\n\n  // The full ordered set of ((original + new) - completely removed) filter ids\n  // Use this as the canonical list of what filters are being configured!\n  // This includes filter ids that are pending removal, so check for that.\n  const filterIds = useMemo(\n    () =>\n      uniq([...getFilterIds(filterConfig), ...newFilterIds]).filter(\n        id => !removedFilters[id] || removedFilters[id]?.isPending,\n      ),\n    [filterConfig, newFilterIds, removedFilters],\n  );\n\n  // open the first filter in the list to start\n  const initialCurrentFilterId = initialFilterId ?? filterIds[0];\n  const [currentFilterId, setCurrentFilterId] = useState(\n    initialCurrentFilterId,\n  );\n  const [erroredFilters, setErroredFilters] = useState<string[]>(\n    DEFAULT_EMPTY_FILTERS,\n  );\n\n  // the form values are managed by the antd form, but we copy them to here\n  // so that we can display them (e.g. filter titles in the tab headers)\n  const [formValues, setFormValues] =\n    useState<NativeFiltersForm>(DEFAULT_FORM_VALUES);\n\n  const unsavedFiltersIds = newFilterIds.filter(id => !removedFilters[id]);\n  // brings back a filter that was previously removed (\"Undo\")\n  const restoreFilter = useCallback(\n    (id: string) => {\n      const removal = removedFilters[id];\n      // gotta clear the removal timeout to prevent the filter from getting deleted\n      if (removal?.isPending) clearTimeout(removal.timerId);\n      setRemovedFilters(current => ({ ...current, [id]: null }));\n    },\n    [removedFilters],\n  );\n  const initialFilterOrder = useMemo(\n    () => Object.keys(filterConfigMap),\n    [filterConfigMap],\n  );\n\n  // State for tracking the re-ordering of filters\n  const [orderedFilters, setOrderedFilters] =\n    useState<string[]>(initialFilterOrder);\n\n  // State for rendered filter to improve performance\n  const [renderedFilters, setRenderedFilters] = useState<string[]>([\n    initialCurrentFilterId,\n  ]);\n\n  const getActiveFilterPanelKey = (filterId: string) => [\n    `${filterId}-${FilterPanels.configuration.key}`,\n    `${filterId}-${FilterPanels.settings.key}`,\n  ];\n\n  const [activeFilterPanelKey, setActiveFilterPanelKey] = useState<\n    string | string[]\n  >(getActiveFilterPanelKey(initialCurrentFilterId));\n\n  const handleTabChange = (filterId: string) => {\n    setCurrentFilterId(filterId);\n    setActiveFilterPanelKey(getActiveFilterPanelKey(filterId));\n  };\n\n  // generates a new filter id and appends it to the newFilterIds\n  const addFilter = useCallback(\n    (type: NativeFilterType) => {\n      const newFilterId = generateFilterId(type);\n      setNewFilterIds([...newFilterIds, newFilterId]);\n      setCurrentFilterId(newFilterId);\n      setSaveAlertVisible(false);\n      setOrderedFilters([...orderedFilters, newFilterId]);\n      setActiveFilterPanelKey(getActiveFilterPanelKey(newFilterId));\n    },\n    [\n      newFilterIds,\n      orderedFilters,\n      setCurrentFilterId,\n      setOrderedFilters,\n      setNewFilterIds,\n    ],\n  );\n\n  useOpenModal(isOpen, addFilter, createNewOnOpen);\n\n  useRemoveCurrentFilter(\n    removedFilters,\n    currentFilterId,\n    orderedFilters,\n    setCurrentFilterId,\n  );\n\n  const handleRemoveItem = createHandleRemoveItem(\n    setRemovedFilters,\n    setOrderedFilters,\n    setSaveAlertVisible,\n  );\n\n  // After this, it should be as if the modal was just opened fresh.\n  // Called when the modal is closed.\n  const resetForm = (isSaving = false) => {\n    setNewFilterIds(DEFAULT_EMPTY_FILTERS);\n    setCurrentFilterId(initialCurrentFilterId);\n    setRemovedFilters(DEFAULT_REMOVED_FILTERS);\n    setSaveAlertVisible(false);\n    setFormValues(DEFAULT_FORM_VALUES);\n    setErroredFilters(DEFAULT_EMPTY_FILTERS);\n    if (filterIds.length > 0) {\n      setActiveFilterPanelKey(getActiveFilterPanelKey(filterIds[0]));\n    }\n    if (!isSaving) {\n      setOrderedFilters(initialFilterOrder);\n    }\n    setRenderedFilters([initialCurrentFilterId]);\n    form.resetFields(['filters']);\n    form.setFieldsValue({ changed: false });\n  };\n\n  const getFilterTitle = useCallback(\n    (id: string) => {\n      const formValue = formValues.filters[id];\n      const config = filterConfigMap[id];\n      return (\n        (formValue && 'name' in formValue && formValue.name) ||\n        (formValue && 'title' in formValue && formValue.title) ||\n        (config && 'name' in config && config.name) ||\n        (config && 'title' in config && config.title) ||\n        t('[untitled]')\n      );\n    },\n    [filterConfigMap, formValues.filters],\n  );\n\n  const canBeUsedAsDependency = useCallback(\n    (filterId: string) => {\n      if (removedFilters[filterId]) {\n        return false;\n      }\n      const component =\n        form.getFieldValue('filters')?.[filterId] || filterConfigMap[filterId];\n      return (\n        component &&\n        'filterType' in component &&\n        ALLOW_DEPENDENCIES.includes(component.filterType)\n      );\n    },\n    [filterConfigMap, form, removedFilters],\n  );\n\n  const getAvailableFilters = useCallback(\n    (filterId: string) =>\n      filterIds\n        .filter(id => id !== filterId)\n        .filter(id => canBeUsedAsDependency(id))\n        .map(id => ({\n          label: getFilterTitle(id),\n          value: id,\n          type: filterConfigMap[id]?.filterType,\n        })),\n    [canBeUsedAsDependency, filterIds, getFilterTitle],\n  );\n\n  const cleanDeletedParents = (values: NativeFiltersForm | null) => {\n    const updatedFilterConfigMap = Object.keys(filterConfigMap).reduce(\n      (acc, key) => {\n        const filter = filterConfigMap[key];\n        const cascadeParentIds = filter.cascadeParentIds?.filter(id =>\n          canBeUsedAsDependency(id),\n        );\n        if (cascadeParentIds) {\n          dispatch(updateCascadeParentIds(key, cascadeParentIds));\n        }\n        return {\n          ...acc,\n          [key]: {\n            ...filter,\n            cascadeParentIds,\n          },\n        };\n      },\n      {},\n    );\n\n    const filters = values?.filters;\n    if (filters) {\n      Object.keys(filters).forEach(key => {\n        const filter = filters[key];\n        if (!('dependencies' in filter)) {\n          return;\n        }\n        const { dependencies } = filter;\n        if (dependencies) {\n          filter.dependencies = dependencies.filter(id =>\n            canBeUsedAsDependency(id),\n          );\n        }\n      });\n    }\n    return updatedFilterConfigMap;\n  };\n\n  const handleErroredFilters = useCallback(() => {\n    // managing left pane errored filters indicators\n    const formValidationFields = form.getFieldsError();\n    const erroredFiltersIds: string[] = [];\n\n    formValidationFields.forEach(field => {\n      const filterId = field.name[1] as string;\n      if (field.errors.length > 0 && !erroredFiltersIds.includes(filterId)) {\n        erroredFiltersIds.push(filterId);\n      }\n    });\n\n    // no form validation issues found, resets errored filters\n    if (!erroredFiltersIds.length && erroredFilters.length > 0) {\n      setErroredFilters(DEFAULT_EMPTY_FILTERS);\n      return;\n    }\n    // form validation issues found, sets errored filters\n    if (\n      erroredFiltersIds.length > 0 &&\n      !isEqual(sortBy(erroredFilters), sortBy(erroredFiltersIds))\n    ) {\n      setErroredFilters(erroredFiltersIds);\n    }\n  }, [form, erroredFilters]);\n\n  const handleSave = async () => {\n    const values: NativeFiltersForm | null = await validateForm(\n      form,\n      currentFilterId,\n      setCurrentFilterId,\n    );\n\n    handleErroredFilters();\n\n    if (values) {\n      const updatedFilterConfigMap = cleanDeletedParents(values);\n      createHandleSave(\n        updatedFilterConfigMap,\n        orderedFilters,\n        removedFilters,\n        onSave,\n        values,\n      )();\n      resetForm(true);\n    } else {\n      configFormRef.current.changeTab('configuration');\n    }\n  };\n\n  const handleConfirmCancel = () => {\n    resetForm();\n    onCancel();\n  };\n\n  const handleCancel = () => {\n    const changed = form.getFieldValue('changed');\n    const didChangeOrder =\n      orderedFilters.length !== initialFilterOrder.length ||\n      orderedFilters.some((val, index) => val !== initialFilterOrder[index]);\n    if (\n      unsavedFiltersIds.length > 0 ||\n      form.isFieldsTouched() ||\n      changed ||\n      didChangeOrder\n    ) {\n      setSaveAlertVisible(true);\n    } else {\n      handleConfirmCancel();\n    }\n  };\n  const handleRearrange = (dragIndex: number, targetIndex: number) => {\n    const newOrderedFilter = [...orderedFilters];\n    const removed = newOrderedFilter.splice(dragIndex, 1)[0];\n    newOrderedFilter.splice(targetIndex, 0, removed);\n    setOrderedFilters(newOrderedFilter);\n  };\n\n  const buildDependencyMap = useCallback(() => {\n    const dependencyMap = new Map<string, string[]>();\n    const filters = form.getFieldValue('filters');\n    if (filters) {\n      Object.keys(filters).forEach(key => {\n        const formItem = filters[key];\n        const configItem = filterConfigMap[key];\n        let array: string[] = [];\n        if (formItem && 'dependencies' in formItem) {\n          array = [...formItem.dependencies];\n        } else if (configItem?.cascadeParentIds) {\n          array = [...configItem.cascadeParentIds];\n        }\n        dependencyMap.set(key, array);\n      });\n    }\n    return dependencyMap;\n  }, [filterConfigMap, form]);\n\n  const validateDependencies = useCallback(() => {\n    const dependencyMap = buildDependencyMap();\n    filterIds\n      .filter(id => !removedFilters[id])\n      .forEach(filterId => {\n        const result = hasCircularDependency(dependencyMap, filterId);\n        const field = {\n          name: ['filters', filterId, 'dependencies'],\n          errors: result ? [t('Cyclic dependency detected')] : [],\n        };\n        form.setFields([field]);\n      });\n    handleErroredFilters();\n  }, [\n    buildDependencyMap,\n    filterIds,\n    form,\n    handleErroredFilters,\n    removedFilters,\n  ]);\n\n  const getDependencySuggestion = useCallback(\n    (filterId: string) => {\n      const dependencyMap = buildDependencyMap();\n      const possibleDependencies = orderedFilters.filter(\n        key => key !== filterId && canBeUsedAsDependency(key),\n      );\n      const found = possibleDependencies.find(filter => {\n        const dependencies = dependencyMap.get(filterId) || [];\n        dependencies.push(filter);\n        if (hasCircularDependency(dependencyMap, filterId)) {\n          dependencies.pop();\n          return false;\n        }\n        return true;\n      });\n      return found || possibleDependencies[0];\n    },\n    [buildDependencyMap, canBeUsedAsDependency, orderedFilters],\n  );\n\n  const [expanded, setExpanded] = useState(false);\n  const toggleExpand = useEffectEvent(() => {\n    setExpanded(!expanded);\n  });\n  const ToggleIcon = expanded\n    ? Icons.FullscreenExitOutlined\n    : Icons.FullscreenOutlined;\n\n  const handleValuesChange = useMemo(\n    () =>\n      debounce((changes: any, values: NativeFiltersForm) => {\n        const didChangeFilterName =\n          changes.filters &&\n          Object.values(changes.filters).some(\n            (filter: any) => filter.name && filter.name !== null,\n          );\n        const didChangeSectionTitle =\n          changes.filters &&\n          Object.values(changes.filters).some(\n            (filter: any) => filter.title && filter.title !== null,\n          );\n        if (didChangeFilterName || didChangeSectionTitle) {\n          // we only need to set this if a name/title changed\n          setFormValues(values);\n        }\n        setSaveAlertVisible(false);\n        handleErroredFilters();\n      }, SLOW_DEBOUNCE),\n    [handleErroredFilters],\n  );\n\n  useEffect(() => {\n    if (!isEmpty(removedFilters)) {\n      setErroredFilters(prevErroredFilters =>\n        prevErroredFilters.filter(f => !removedFilters[f]),\n      );\n    }\n  }, [removedFilters]);\n\n  useEffect(() => {\n    if (!renderedFilters.includes(currentFilterId)) {\n      setRenderedFilters([...renderedFilters, currentFilterId]);\n    }\n  }, [currentFilterId]);\n\n  const handleActiveFilterPanelChange = useCallback(\n    key => setActiveFilterPanelKey(key),\n    [setActiveFilterPanelKey],\n  );\n\n  const formList = useMemo(\n    () =>\n      orderedFilters.map(id => {\n        if (!renderedFilters.includes(id)) return null;\n        const isDivider = id.startsWith(NATIVE_FILTER_DIVIDER_PREFIX);\n        const isActive = currentFilterId === id;\n        return (\n          <div\n            key={id}\n            style={{\n              height: '100%',\n              overflowY: 'auto',\n              display: isActive ? '' : 'none',\n            }}\n          >\n            {isDivider ? (\n              <DividerConfigForm\n                componentId={id}\n                divider={filterConfigMap[id] as Divider}\n              />\n            ) : (\n              <FiltersConfigForm\n                ref={configFormRef}\n                form={form}\n                filterId={id}\n                filterToEdit={filterConfigMap[id] as Filter}\n                removedFilters={removedFilters}\n                restoreFilter={restoreFilter}\n                getAvailableFilters={getAvailableFilters}\n                key={id}\n                activeFilterPanelKeys={activeFilterPanelKey}\n                handleActiveFilterPanelChange={handleActiveFilterPanelChange}\n                isActive={isActive}\n                setErroredFilters={setErroredFilters}\n                validateDependencies={validateDependencies}\n                getDependencySuggestion={getDependencySuggestion}\n              />\n            )}\n          </div>\n        );\n      }),\n    [\n      renderedFilters,\n      orderedFilters,\n      currentFilterId,\n      filterConfigMap,\n      form,\n      removedFilters,\n      restoreFilter,\n      getAvailableFilters,\n      activeFilterPanelKey,\n      validateDependencies,\n      getDependencySuggestion,\n      handleActiveFilterPanelChange,\n    ],\n  );\n\n  return (\n    <StyledModalWrapper\n      visible={isOpen}\n      maskClosable={false}\n      title={t('Add and edit filters')}\n      expanded={expanded}\n      destroyOnClose\n      onCancel={handleCancel}\n      onOk={handleSave}\n      centered\n      data-test=\"filter-modal\"\n      footer={\n        <div\n          css={css`\n            display: flex;\n            justify-content: flex-end;\n            align-items: flex-end;\n          `}\n        >\n          <Footer\n            onDismiss={() => setSaveAlertVisible(false)}\n            onCancel={handleCancel}\n            handleSave={handleSave}\n            canSave={!erroredFilters.length}\n            saveAlertVisible={saveAlertVisible}\n            onConfirmCancel={handleConfirmCancel}\n          />\n          <StyledExpandButtonWrapper>\n            <ToggleIcon\n              iconSize=\"l\"\n              iconColor={theme.colors.grayscale.dark2}\n              onClick={toggleExpand}\n            />\n          </StyledExpandButtonWrapper>\n        </div>\n      }\n    >\n      <ErrorBoundary>\n        <StyledModalBody expanded={expanded}>\n          <StyledForm\n            form={form}\n            onValuesChange={handleValuesChange}\n            layout=\"vertical\"\n          >\n            <FilterConfigurePane\n              erroredFilters={erroredFilters}\n              onRemove={handleRemoveItem}\n              onAdd={addFilter}\n              onChange={handleTabChange}\n              getFilterTitle={getFilterTitle}\n              currentFilterId={currentFilterId}\n              removedFilters={removedFilters}\n              restoreFilter={restoreFilter}\n              onRearrange={handleRearrange}\n              filters={orderedFilters}\n            >\n              {formList}\n            </FilterConfigurePane>\n          </StyledForm>\n        </StyledModalBody>\n      </ErrorBoundary>\n    </StyledModalWrapper>\n  );\n}\n\nexport default React.memo(FiltersConfigModal);\n"]},"metadata":{},"sourceType":"module"}