{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { TypedRegistry } from '../models';\nimport { makeSingleton } from '../utils';\n/**\n * A registry containing extensions which can alter Superset's UI at specific points defined by Superset.\n * See SIP-87: https://github.com/apache/superset/issues/20615\n */\nclass ExtensionsRegistry extends TypedRegistry {constructor() {super(...arguments);this.\n    name = 'ExtensionsRegistry';} // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}export const getExtensionsRegistry = makeSingleton(ExtensionsRegistry, {});\n// Exporting this under the old name for backwards compatibility.\n// After downstream folks have migrated to `getExtensionsRegistry`, we should remove this.\nexport const getUiOverrideRegistry = getExtensionsRegistry;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(ExtensionsRegistry, \"ExtensionsRegistry\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/ui-overrides/ExtensionsRegistry.ts\");reactHotLoader.register(getExtensionsRegistry, \"getExtensionsRegistry\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/ui-overrides/ExtensionsRegistry.ts\");reactHotLoader.register(getUiOverrideRegistry, \"getUiOverrideRegistry\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/ui-overrides/ExtensionsRegistry.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAoBA,SAASA,aAAT,QAA8B,WAA9B;AACA,SAASC,aAAT,QAA8B,UAA9B;AA2GA;;;;AAIA,MAAMC,kBAAN,SAAiCF,aAAjC,CAA0D;IACxDG,IADwD,GACjD,oBADiD;EAAA;IAAA,yBAI1D,OAAO,MAAMC,qBAAqB,GAAGH,aAAa,CAACC,kBAAD,EAAqB,EAArB,CAA3C;AAEP;AACA;AACA,OAAO,MAAMG,qBAAqB,GAAGD,qBAA9B,C,iLARDF,kB,qLAIOE,qB,wLAIAC,qB","names":["TypedRegistry","makeSingleton","ExtensionsRegistry","name","getExtensionsRegistry","getUiOverrideRegistry"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/ui-overrides/ExtensionsRegistry.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { TypedRegistry } from '../models';\nimport { makeSingleton } from '../utils';\n\n/**\n * A function which returns text (or marked-up text)\n * If what you want is a react component, don't use this. Use React.ComponentType instead.\n */\ntype ReturningDisplayable<P = void> = (props: P) => string | React.ReactElement;\n\n/**\n * This type defines all available extensions of Superset's default UI.\n * Namespace the keys here to follow the form of 'some_domain.functionality.item'.\n * Take care to name your keys well, as the name describes what this extension point's role is in Superset.\n *\n * When defining a new option here, take care to keep any parameters to functions (or components) minimal.\n * Any removal or alteration to a parameter will be considered a breaking change.\n */\n\n// from src/views/components/Menu, not imported since this is a separate package\ninterface MenuObjectChildProps {\n  label: string;\n  name?: string;\n  icon?: string;\n  index?: number;\n  url?: string;\n  isFrontendRoute?: boolean;\n  perm?: string | boolean;\n  view?: string;\n  disable?: boolean;\n}\n\nexport interface SwitchProps {\n  isEditMode: boolean;\n  dbFetched: any;\n  disableSSHTunnelingForEngine?: boolean;\n  useSSHTunneling: boolean;\n  setUseSSHTunneling: React.Dispatch<React.SetStateAction<boolean>>;\n  setDB: React.Dispatch<any>;\n  isSSHTunneling: boolean;\n}\n\ntype ConfigDetailsProps = {\n  embeddedId: string;\n};\ntype RightMenuItemIconProps = {\n  menuChild: MenuObjectChildProps;\n};\ntype DatabaseDeleteRelatedExtensionProps = {\n  database: object;\n};\ntype DatasetDeleteRelatedExtensionProps = {\n  dataset: object;\n};\n\n/**\n * Interface for extensions to database connections\n */\nexport interface DatabaseConnectionExtension {\n  /**\n   * Display title text for the extension show when creating a database connection\n   */\n  title: string;\n  /**\n   * url or dataURI (recommended) of a logo to use in place of a title.  title is fallback display if no logo is provided\n   */\n  logo?: React.ComponentType<any>;\n  /**\n   * Descriptive text displayed under the logo or title to provide user with more context about the configuration section\n   */\n  description: React.ComponentType<any>;\n  /**\n   * React component to render for display in the database connection configuration\n   */\n  component: React.ComponentType<any>;\n  /**\n   * Is the database extension enabled?\n   */\n  enabled: () => boolean;\n\n  /**\n   * Callbacks\n   */\n  // TODO: we need to move the db types to superset-ui/core in order to import them correctly\n  onSave: (componentState: any, db: any) => any;\n  onEdit?: (componentState: any) => void;\n  onDelete?: (db: any) => void;\n}\n\nexport type Extensions = Partial<{\n  'alertsreports.header.icon': React.ComponentType;\n  'embedded.documentation.configuration_details': React.ComponentType<ConfigDetailsProps>;\n  'embedded.documentation.description': ReturningDisplayable;\n  'embedded.documentation.url': string;\n  'dashboard.nav.right': React.ComponentType;\n  'navbar.right-menu.item.icon': React.ComponentType<RightMenuItemIconProps>;\n  'navbar.right': React.ComponentType;\n  'report-modal.dropdown.item.icon': React.ComponentType;\n  'root.context.provider': React.ComponentType;\n  'welcome.message': React.ComponentType;\n  'welcome.banner': React.ComponentType;\n  'welcome.main.replacement': React.ComponentType;\n  'ssh_tunnel.form.switch': React.ComponentType<SwitchProps>;\n  'databaseconnection.extraOption': DatabaseConnectionExtension;\n  /* Custom components to show in the database and dataset delete modals */\n  'database.delete.related': React.ComponentType<DatabaseDeleteRelatedExtensionProps>;\n  'dataset.delete.related': React.ComponentType<DatasetDeleteRelatedExtensionProps>;\n}>;\n\n/**\n * A registry containing extensions which can alter Superset's UI at specific points defined by Superset.\n * See SIP-87: https://github.com/apache/superset/issues/20615\n */\nclass ExtensionsRegistry extends TypedRegistry<Extensions> {\n  name = 'ExtensionsRegistry';\n}\n\nexport const getExtensionsRegistry = makeSingleton(ExtensionsRegistry, {});\n\n// Exporting this under the old name for backwards compatibility.\n// After downstream folks have migrated to `getExtensionsRegistry`, we should remove this.\nexport const getUiOverrideRegistry = getExtensionsRegistry;\n"]},"metadata":{},"sourceType":"module"}