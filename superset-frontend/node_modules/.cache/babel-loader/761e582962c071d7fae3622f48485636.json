{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { makeApi, styled, t, getExtensionsRegistry } from '@superset-ui/core';\nimport { InfoTooltipWithTrigger } from '@superset-ui/chart-controls';\nimport Modal from 'src/components/Modal';\nimport Loading from 'src/components/Loading';\nimport Button from 'src/components/Button';\nimport { Input } from 'src/components/Input';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\nimport { FormItem } from 'src/components/Form';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst extensionsRegistry = getExtensionsRegistry();\nconst stringToList = (stringyList) => stringyList.split(/(?:\\s|,)+/).filter((x) => x);\nconst ButtonRow = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n`;\nexport const DashboardEmbedControls = (_ref) => {var _extensionsRegistry$g;let { dashboardId, onHide } = _ref;\n  const { addInfoToast, addDangerToast } = useToasts();\n  const [ready, setReady] = useState(true); // whether we have initialized yet\n  const [loading, setLoading] = useState(false); // whether we are currently doing an async thing\n  const [embedded, setEmbedded] = useState(null); // the embedded dashboard config\n  const [allowedDomains, setAllowedDomains] = useState('');\n  const endpoint = `/api/v1/dashboard/${dashboardId}/embedded`;\n  // whether saveable changes have been made to the config\n  const isDirty = !embedded ||\n  stringToList(allowedDomains).join() !== embedded.allowed_domains.join();\n  const enableEmbedded = useCallback(() => {\n    setLoading(true);\n    makeApi({\n      method: 'POST',\n      endpoint })(\n    {\n      allowed_domains: stringToList(allowedDomains) }).\n\n    then((_ref2) => {let { result } = _ref2;\n      setEmbedded(result);\n      setAllowedDomains(result.allowed_domains.join(', '));\n      addInfoToast(t('Changes saved.'));\n    }, (err) => {\n      console.error(err);\n      addDangerToast(t(t('Sorry, something went wrong. The changes could not be saved.')));\n    }).\n    finally(() => {\n      setLoading(false);\n    });\n  }, [endpoint, allowedDomains]);\n  const disableEmbedded = useCallback(() => {\n    Modal.confirm({\n      title: t('Disable embedding?'),\n      content: t('This will remove your current embed configuration.'),\n      okType: 'danger',\n      onOk: () => {\n        setLoading(true);\n        makeApi({ method: 'DELETE', endpoint })({}).\n        then(() => {\n          setEmbedded(null);\n          setAllowedDomains('');\n          addInfoToast(t('Embedding deactivated.'));\n          onHide();\n        }, (err) => {\n          console.error(err);\n          addDangerToast(t('Sorry, something went wrong. Embedding could not be deactivated.'));\n        }).\n        finally(() => {\n          setLoading(false);\n        });\n      } });\n\n  }, [endpoint]);\n  useEffect(() => {\n    setReady(false);\n    makeApi({\n      method: 'GET',\n      endpoint })(\n    {}).\n    catch((err) => {\n      if (err.status === 404) {\n        // 404 just means the dashboard isn't currently embedded\n        return { result: null };\n      }\n      throw err;\n    }).\n    then((_ref3) => {let { result } = _ref3;\n      setReady(true);\n      setEmbedded(result);\n      setAllowedDomains(result ? result.allowed_domains.join(', ') : '');\n    });\n  }, [dashboardId]);\n  if (!ready) {\n    return ___EmotionJSX(Loading, null);\n  }\n  const DocsConfigDetails = extensionsRegistry.get('embedded.documentation.configuration_details');\n  const docsDescription = extensionsRegistry.get('embedded.documentation.description');\n  const docsUrl = (_extensionsRegistry$g = extensionsRegistry.get('embedded.documentation.url')) != null ? _extensionsRegistry$g :\n  'https://www.npmjs.com/package/@superset-ui/embedded-sdk';\n  return ___EmotionJSX(React.Fragment, null,\n  embedded ? DocsConfigDetails ? ___EmotionJSX(DocsConfigDetails, { embeddedId: embedded.uuid }) : ___EmotionJSX(\"p\", null,\n  t('This dashboard is ready to embed. In your application, pass the following id to the SDK:'),\n  ___EmotionJSX(\"br\", null),\n  ___EmotionJSX(\"code\", null, embedded.uuid)) :\n  ___EmotionJSX(\"p\", null,\n  t('Configure this dashboard to embed it into an external web application.')),\n\n  ___EmotionJSX(\"p\", null,\n  t('For further instructions, consult the'), ' ',\n  ___EmotionJSX(\"a\", { href: docsUrl, target: \"_blank\", rel: \"noreferrer\" },\n  docsDescription ?\n  docsDescription() :\n  t('Superset Embedded SDK documentation.'))),\n\n\n  ___EmotionJSX(\"h3\", null, t('Settings')),\n  ___EmotionJSX(FormItem, null,\n  ___EmotionJSX(\"label\", { htmlFor: \"allowed-domains\" },\n  t('Allowed Domains (comma separated)'), ' ',\n  ___EmotionJSX(InfoTooltipWithTrigger, { tooltip: t('A list of domain names that can embed this dashboard. Leaving this field empty will allow embedding from any domain.') })),\n\n  ___EmotionJSX(Input, { name: \"allowed-domains\", value: allowedDomains, placeholder: \"superset.example.com\", onChange: (event) => setAllowedDomains(event.target.value) })),\n\n  ___EmotionJSX(ButtonRow, null,\n  embedded ? ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(Button, { onClick: disableEmbedded, buttonStyle: \"secondary\", loading: loading },\n  t('Deactivate')),\n\n  ___EmotionJSX(Button, { onClick: enableEmbedded, buttonStyle: \"primary\", disabled: !isDirty, loading: loading },\n  t('Save changes'))) :\n\n  ___EmotionJSX(Button, { onClick: enableEmbedded, buttonStyle: \"primary\", loading: loading },\n  t('Enable embedding'))));\n\n\n\n};\nexport const DashboardEmbedModal = (props) => {\n  const { show, onHide } = props;\n  return ___EmotionJSX(Modal, { show: show, onHide: onHide, title: t('Embed'), hideFooter: true },\n  ___EmotionJSX(DashboardEmbedControls, props));\n\n};","map":{"version":3,"mappings":"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","names":["React","useCallback","useEffect","useState","makeApi","styled","t","getExtensionsRegistry","InfoTooltipWithTrigger","Modal","Loading","Button","Input","useToasts","FormItem","extensionsRegistry","stringToList","stringyList","split","filter","x","ButtonRow","div","DashboardEmbedControls","dashboardId","onHide","addInfoToast","addDangerToast","ready","setReady","loading","setLoading","embedded","setEmbedded","allowedDomains","setAllowedDomains","endpoint","isDirty","join","allowed_domains","enableEmbedded","method","then","result","console","error","err","finally","disableEmbedded","confirm","title","content","okType","onOk","catch","status","DocsConfigDetails","get","docsDescription","docsUrl","uuid","event","target","value","DashboardEmbedModal","props","show"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/dashboard/components/DashboardEmbedControls.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useEffect, useState } from 'react';\nimport {\n  makeApi,\n  styled,\n  SupersetApiError,\n  t,\n  getExtensionsRegistry,\n} from '@superset-ui/core';\nimport { InfoTooltipWithTrigger } from '@superset-ui/chart-controls';\nimport Modal from 'src/components/Modal';\nimport Loading from 'src/components/Loading';\nimport Button from 'src/components/Button';\nimport { Input } from 'src/components/Input';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\nimport { FormItem } from 'src/components/Form';\nimport { EmbeddedDashboard } from '../types';\n\nconst extensionsRegistry = getExtensionsRegistry();\n\ntype Props = {\n  dashboardId: string;\n  show: boolean;\n  onHide: () => void;\n};\n\ntype EmbeddedApiPayload = { allowed_domains: string[] };\n\nconst stringToList = (stringyList: string): string[] =>\n  stringyList.split(/(?:\\s|,)+/).filter(x => x);\n\nconst ButtonRow = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n`;\n\nexport const DashboardEmbedControls = ({ dashboardId, onHide }: Props) => {\n  const { addInfoToast, addDangerToast } = useToasts();\n  const [ready, setReady] = useState(true); // whether we have initialized yet\n  const [loading, setLoading] = useState(false); // whether we are currently doing an async thing\n  const [embedded, setEmbedded] = useState<EmbeddedDashboard | null>(null); // the embedded dashboard config\n  const [allowedDomains, setAllowedDomains] = useState<string>('');\n\n  const endpoint = `/api/v1/dashboard/${dashboardId}/embedded`;\n  // whether saveable changes have been made to the config\n  const isDirty =\n    !embedded ||\n    stringToList(allowedDomains).join() !== embedded.allowed_domains.join();\n\n  const enableEmbedded = useCallback(() => {\n    setLoading(true);\n    makeApi<EmbeddedApiPayload, { result: EmbeddedDashboard }>({\n      method: 'POST',\n      endpoint,\n    })({\n      allowed_domains: stringToList(allowedDomains),\n    })\n      .then(\n        ({ result }) => {\n          setEmbedded(result);\n          setAllowedDomains(result.allowed_domains.join(', '));\n          addInfoToast(t('Changes saved.'));\n        },\n        err => {\n          console.error(err);\n          addDangerToast(\n            t(\n              t('Sorry, something went wrong. The changes could not be saved.'),\n            ),\n          );\n        },\n      )\n      .finally(() => {\n        setLoading(false);\n      });\n  }, [endpoint, allowedDomains]);\n\n  const disableEmbedded = useCallback(() => {\n    Modal.confirm({\n      title: t('Disable embedding?'),\n      content: t('This will remove your current embed configuration.'),\n      okType: 'danger',\n      onOk: () => {\n        setLoading(true);\n        makeApi<{}>({ method: 'DELETE', endpoint })({})\n          .then(\n            () => {\n              setEmbedded(null);\n              setAllowedDomains('');\n              addInfoToast(t('Embedding deactivated.'));\n              onHide();\n            },\n            err => {\n              console.error(err);\n              addDangerToast(\n                t(\n                  'Sorry, something went wrong. Embedding could not be deactivated.',\n                ),\n              );\n            },\n          )\n          .finally(() => {\n            setLoading(false);\n          });\n      },\n    });\n  }, [endpoint]);\n\n  useEffect(() => {\n    setReady(false);\n    makeApi<{}, { result: EmbeddedDashboard }>({\n      method: 'GET',\n      endpoint,\n    })({})\n      .catch(err => {\n        if ((err as SupersetApiError).status === 404) {\n          // 404 just means the dashboard isn't currently embedded\n          return { result: null };\n        }\n        throw err;\n      })\n      .then(({ result }) => {\n        setReady(true);\n        setEmbedded(result);\n        setAllowedDomains(result ? result.allowed_domains.join(', ') : '');\n      });\n  }, [dashboardId]);\n\n  if (!ready) {\n    return <Loading />;\n  }\n\n  const DocsConfigDetails = extensionsRegistry.get(\n    'embedded.documentation.configuration_details',\n  );\n  const docsDescription = extensionsRegistry.get(\n    'embedded.documentation.description',\n  );\n  const docsUrl =\n    extensionsRegistry.get('embedded.documentation.url') ??\n    'https://www.npmjs.com/package/@superset-ui/embedded-sdk';\n\n  return (\n    <>\n      {embedded ? (\n        DocsConfigDetails ? (\n          <DocsConfigDetails embeddedId={embedded.uuid} />\n        ) : (\n          <p>\n            {t(\n              'This dashboard is ready to embed. In your application, pass the following id to the SDK:',\n            )}\n            <br />\n            <code>{embedded.uuid}</code>\n          </p>\n        )\n      ) : (\n        <p>\n          {t(\n            'Configure this dashboard to embed it into an external web application.',\n          )}\n        </p>\n      )}\n      <p>\n        {t('For further instructions, consult the')}{' '}\n        <a href={docsUrl} target=\"_blank\" rel=\"noreferrer\">\n          {docsDescription\n            ? docsDescription()\n            : t('Superset Embedded SDK documentation.')}\n        </a>\n      </p>\n      <h3>{t('Settings')}</h3>\n      <FormItem>\n        <label htmlFor=\"allowed-domains\">\n          {t('Allowed Domains (comma separated)')}{' '}\n          <InfoTooltipWithTrigger\n            tooltip={t(\n              'A list of domain names that can embed this dashboard. Leaving this field empty will allow embedding from any domain.',\n            )}\n          />\n        </label>\n        <Input\n          name=\"allowed-domains\"\n          value={allowedDomains}\n          placeholder=\"superset.example.com\"\n          onChange={event => setAllowedDomains(event.target.value)}\n        />\n      </FormItem>\n      <ButtonRow>\n        {embedded ? (\n          <>\n            <Button\n              onClick={disableEmbedded}\n              buttonStyle=\"secondary\"\n              loading={loading}\n            >\n              {t('Deactivate')}\n            </Button>\n            <Button\n              onClick={enableEmbedded}\n              buttonStyle=\"primary\"\n              disabled={!isDirty}\n              loading={loading}\n            >\n              {t('Save changes')}\n            </Button>\n          </>\n        ) : (\n          <Button\n            onClick={enableEmbedded}\n            buttonStyle=\"primary\"\n            loading={loading}\n          >\n            {t('Enable embedding')}\n          </Button>\n        )}\n      </ButtonRow>\n    </>\n  );\n};\n\nexport const DashboardEmbedModal = (props: Props) => {\n  const { show, onHide } = props;\n\n  return (\n    <Modal show={show} onHide={onHide} title={t('Embed')} hideFooter>\n      <DashboardEmbedControls {...props} />\n    </Modal>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}