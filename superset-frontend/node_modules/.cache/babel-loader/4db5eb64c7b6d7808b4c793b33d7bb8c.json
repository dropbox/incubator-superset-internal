{"ast":null,"code":"/* eslint-disable camelcase */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nexport var QueryMode;\n(function (QueryMode) {\n  QueryMode[\"aggregate\"] = \"aggregate\";\n  QueryMode[\"raw\"] = \"raw\";\n})(QueryMode || (QueryMode = {}));\n//---------------------------------------------------\n// Type guards\n//---------------------------------------------------\nexport default {};","map":{"version":3,"mappings":"AAAA;AACA;;;;;;;;;;;;;;;;;;AA2DA,WAAYA,SAAZ;AAAA,WAAYA,SAAZ,EAAqB;EACnBA;EACAA;AACD,CAHD,EAAYA,SAAS,KAATA,SAAS,MAArB;AAkJA;AACA;AACA;AAEA,eAAe,EAAf","names":["QueryMode"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/packages/superset-ui-core/src/query/types/QueryFormData.ts"],"sourcesContent":["/* eslint-disable camelcase */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/**\n * Types for the final QueryContext sent to /api/v1/chart/data.\n */\nimport { AdhocMetric, SavedMetric } from './Metric';\nimport { AdhocFilter } from './Filter';\nimport { BinaryOperator, SetOperator } from './Operator';\nimport { AnnotationLayer } from './AnnotationLayer';\nimport {\n  QueryObject,\n  QueryObjectExtras,\n  QueryObjectFilterClause,\n} from './Query';\nimport { TimeRange } from './Time';\nimport { TimeGranularity } from '../../time-format';\nimport { JsonObject } from '../../connection';\nimport { AdhocColumn, PhysicalColumn } from './Column';\n\n/**\n * Metric definition/reference in query object.\n */\nexport type QueryFormMetric = SavedMetric | AdhocMetric;\n\n/**\n * Column selects in query object (used as dimensions in both groupby or raw\n * query mode). Can be either reference to physical column or expression.\n */\nexport type QueryFormColumn = PhysicalColumn | AdhocColumn;\n\n/**\n * Order query results by columns.\n * Format: [metric/column, is_ascending].\n */\nexport type QueryFormOrderBy =\n  | [QueryFormColumn | QueryFormMetric | {}, boolean]\n  | [];\n\nexport interface FormDataResidual {\n  [key: string]: any;\n}\n\nexport enum QueryMode {\n  aggregate = 'aggregate',\n  raw = 'raw',\n}\n\n/**\n * Query form fields related to SQL query and data outputs.\n */\nexport interface QueryFields {\n  columns?: QueryFormColumn[];\n  metrics?: QueryFormMetric[];\n  orderby?: QueryFormOrderBy[];\n}\n\n/**\n * Name of query fields.\n */\nexport type QueryField = keyof QueryFields;\n\n/**\n * Map of arbitrary control field names to query field names\n * (one of 'metrics' | 'columns' | 'groupby').\n *\n * Note that `groupby` is only added here because it is will be handled when\n * processing aliases but will not be sent to final objects. See `extraQueryFields.ts`.\n */\nexport type QueryFieldAliases = {\n  [key: string]: QueryField | 'groupby';\n};\n\n/**\n * Filter value for adhoc filters from dashboard FilterBox.\n * Currently only Binary and Set filters are supported.\n */\nexport type QueryFormExtraFilter = {\n  col: string;\n} & (\n  | {\n      op: BinaryOperator;\n      val: string;\n    }\n  | {\n      op: SetOperator;\n      val: string[];\n    }\n);\n\n/** These properties will be appended to those pre-existing in the form data/query object */\nexport type ExtraFormDataAppend = {\n  adhoc_filters?: AdhocFilter[];\n  filters?: QueryObjectFilterClause[];\n  /** These properties are for dynamic cross chart interaction */\n  interactive_drilldown?: string[];\n  interactive_groupby?: string[];\n  interactive_highlight?: string[];\n  /** This property can be used to pass non-standard form data between viz components */\n  custom_form_data?: JsonObject;\n};\n\n/** These parameters override properties in the extras parameter in the form data/query object.\n * Not all keys of QueryObjectExtras are supported here to ensure that freeform where and having\n * filter clauses can't be overridden */\nexport type ExtraFormDataOverrideExtras = Pick<\n  QueryObjectExtras,\n  'relative_start' | 'relative_end' | 'time_grain_sqla'\n>;\n\n/** These parameters override those already present in the form data/query object */\nexport type ExtraFormDataOverrideRegular = Partial<\n  Pick<SqlaFormData, 'granularity_sqla'>\n> &\n  Partial<Pick<SqlaFormData, 'granularity'>> &\n  Partial<Pick<BaseFormData, 'time_range'>> &\n  Partial<Pick<QueryObject, 'time_column' | 'time_grain'>>;\n\n/** These parameters override those already present in the form data/query object */\nexport type ExtraFormDataOverride = ExtraFormDataOverrideRegular &\n  ExtraFormDataOverrideExtras;\n\nexport type ExtraFormData = ExtraFormDataAppend & ExtraFormDataOverride;\n\n// Type signature for formData shared by all viz types\n// It will be gradually filled out as we build out the query object\n\nexport interface BaseFormData extends TimeRange, FormDataResidual {\n  /** datasource identifier ${id}_${type} */\n  datasource: string;\n  /**\n   * visualization type\n   * - necessary if you use the plugin and want to use\n   * buildQuery function from the plugin.\n   * This must match the key used when registering the plugin.\n   * - not necessary if you do not plan to use the\n   * buildQuery function from the plugin.\n   * Can put \"custom\" (or any string) in this field in that case.\n   */\n  viz_type: string;\n  metrics?: QueryFormMetric[];\n  where?: string;\n  columns?: QueryFormColumn[];\n  groupby?: QueryFormColumn[];\n  all_columns?: QueryFormColumn[];\n  /** list of filters */\n  adhoc_filters?: AdhocFilter[] | null;\n  extra_filters?: QueryFormExtraFilter[] | null;\n  extra_form_data?: ExtraFormData;\n  /** order descending */\n  order_desc?: boolean;\n  /** limit number of time series\n   *  deprecated - use series_limit instead */\n  limit?: number;\n  /** limit number of row in the results */\n  row_limit?: string | number | null;\n  /** row offset for server side pagination */\n  row_offset?: string | number | null;\n  /** The metric used to order timeseries for limiting\n   *  deprecated - use series_limit_metric instead */\n  timeseries_limit_metric?: QueryFormMetric;\n  /** Force refresh */\n  force?: boolean;\n  result_format?: string;\n  result_type?: string;\n  annotation_layers?: AnnotationLayer[];\n  url_params?: Record<string, string>;\n  custom_params?: Record<string, string>;\n  /** limit number of series */\n  series_columns?: QueryFormColumn[];\n  series_limit?: number;\n  series_limit_metric?: QueryFormMetric;\n}\n\n/**\n * Form data for SQLAlchemy based datasources.\n */\nexport interface SqlaFormData extends BaseFormData {\n  /**\n   * Name of the Time Column. Time column is optional.\n   */\n  granularity?: string;\n  granularity_sqla?: string;\n  time_grain_sqla?: TimeGranularity;\n  having?: string;\n}\n\nexport type QueryFormData = SqlaFormData;\n\n//---------------------------------------------------\n// Type guards\n//---------------------------------------------------\n\nexport default {};\n"]},"metadata":{},"sourceType":"module"}