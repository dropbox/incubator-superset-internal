{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect } from 'react';\nimport { styled, t } from '@superset-ui/core';\nimport { useSingleViewResource } from 'src/views/CRUD/hooks';\nimport Icons from 'src/components/Icons';\nimport { StyledIcon } from 'src/views/CRUD/utils';\nimport Modal from 'src/components/Modal';\nimport withToasts from 'src/components/MessageToasts/withToasts';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst StyledAnnotationLayerTitle = styled.div`\n  margin: ${(_ref) => {let { theme } = _ref;return theme.gridUnit * 2;}}px auto\n    ${(_ref2) => {let { theme } = _ref2;return theme.gridUnit * 4;}}px auto;\n`;\nconst LayerContainer = styled.div`\n  margin-bottom: ${(_ref3) => {let { theme } = _ref3;return theme.gridUnit * 10;}}px;\n\n  .control-label {\n    margin-bottom: ${(_ref4) => {let { theme } = _ref4;return theme.gridUnit * 2;}}px;\n  }\n\n  .required {\n    margin-left: ${(_ref5) => {let { theme } = _ref5;return theme.gridUnit / 2;}}px;\n    color: ${(_ref6) => {let { theme } = _ref6;return theme.colors.error.base;}};\n  }\n\n  textarea,\n  input[type='text'] {\n    padding: ${(_ref7) => {let { theme } = _ref7;return theme.gridUnit * 1.5;}}px\n      ${(_ref8) => {let { theme } = _ref8;return theme.gridUnit * 2;}}px;\n    border: 1px solid ${(_ref9) => {let { theme } = _ref9;return theme.colors.grayscale.light2;}};\n    border-radius: ${(_ref10) => {let { theme } = _ref10;return theme.gridUnit;}}px;\n    width: 50%;\n  }\n\n  input,\n  textarea {\n    flex: 1 1 auto;\n  }\n\n  textarea {\n    width: 100%;\n    height: 160px;\n    resize: none;\n  }\n\n  input::placeholder,\n  textarea::placeholder {\n    color: ${(_ref11) => {let { theme } = _ref11;return theme.colors.grayscale.light1;}};\n  }\n`;\nconst AnnotationLayerModal = (_ref12) => {let { addDangerToast, addSuccessToast, onLayerAdd, onHide, show, layer = null } = _ref12;\n  const [disableSave, setDisableSave] = useState(true);\n  const [currentLayer, setCurrentLayer] = useState();\n  const [isHidden, setIsHidden] = useState(true);\n  const isEditMode = layer !== null;\n  // annotation layer fetch logic\n  const { state: { loading, resource }, fetchResource, createResource, updateResource } = useSingleViewResource('annotation_layer', t('annotation_layer'), addDangerToast);\n  const resetLayer = () => {\n    // Reset layer\n    setCurrentLayer({\n      name: '',\n      descr: '' });\n\n  };\n  // Functions\n  const hide = () => {\n    setIsHidden(true);\n    // Reset layer\n    resetLayer();\n    onHide();\n  };\n  const onSave = () => {\n    if (isEditMode) {\n      // Edit\n      if (currentLayer != null && currentLayer.id) {\n        const update_id = currentLayer.id;\n        delete currentLayer.id;\n        delete currentLayer.created_by;\n        updateResource(update_id, currentLayer).then((response) => {\n          if (!response) {\n            return;\n          }\n          hide();\n          addSuccessToast(t('Annotation template updated'));\n        });\n      }\n    } else\n    if (currentLayer) {\n      // Create\n      createResource(currentLayer).then((response) => {\n        if (!response) {\n          return;\n        }\n        if (onLayerAdd) {\n          onLayerAdd(response);\n        }\n        hide();\n        addSuccessToast(t('Annotation template created'));\n      });\n    }\n  };\n  const onTextChange = (event) => {\n    const { target } = event;\n    const data = {\n      ...currentLayer,\n      name: currentLayer ? currentLayer.name : '',\n      descr: currentLayer ? currentLayer.descr : '' };\n\n    data[target.name] = target.value;\n    setCurrentLayer(data);\n  };\n  const validate = () => {var _currentLayer$name;\n    if (currentLayer != null && (_currentLayer$name = currentLayer.name) != null && _currentLayer$name.length) {\n      setDisableSave(false);\n    } else\n    {\n      setDisableSave(true);\n    }\n  };\n  // Initialize\n  useEffect(() => {\n    if (isEditMode && (\n    !currentLayer ||\n    !currentLayer.id ||\n    layer && layer.id !== currentLayer.id ||\n    isHidden && show)) {\n      if (show && layer && layer.id !== null && !loading) {\n        const id = layer.id || 0;\n        fetchResource(id);\n      }\n    } else\n    if (!isEditMode && (\n    !currentLayer || currentLayer.id || isHidden && show)) {\n      // Reset layer\n      resetLayer();\n    }\n  }, [layer, show]);\n  useEffect(() => {\n    if (resource) {\n      setCurrentLayer(resource);\n    }\n  }, [resource]);\n  // Validation\n  useEffect(() => {\n    validate();\n  }, [\n  currentLayer ? currentLayer.name : '',\n  currentLayer ? currentLayer.descr : '']);\n\n  // Show/hide\n  if (isHidden && show) {\n    setIsHidden(false);\n  }\n  return ___EmotionJSX(Modal, { disablePrimaryButton: disableSave, onHandledPrimaryAction: onSave, onHide: hide, primaryButtonName: isEditMode ? t('Save') : t('Add'), show: show, width: \"55%\", title: ___EmotionJSX(\"h4\", null,\n    isEditMode ? ___EmotionJSX(Icons.EditAlt, { css: StyledIcon }) : ___EmotionJSX(Icons.PlusLarge, { css: StyledIcon }),\n    isEditMode ?\n    t('Edit annotation layer properties') :\n    t('Add annotation layer')) },\n\n  ___EmotionJSX(StyledAnnotationLayerTitle, null,\n  ___EmotionJSX(\"h4\", null, t('Basic information'))),\n\n  ___EmotionJSX(LayerContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" },\n  t('Annotation layer name'),\n  ___EmotionJSX(\"span\", { className: \"required\" }, \"*\")),\n\n  ___EmotionJSX(\"input\", { name: \"name\", onChange: onTextChange, type: \"text\", value: currentLayer == null ? void 0 : currentLayer.name })),\n\n  ___EmotionJSX(LayerContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" }, t('description')),\n  ___EmotionJSX(\"textarea\", { name: \"descr\", value: currentLayer == null ? void 0 : currentLayer.descr, placeholder: t('Description (this can be seen in the list)'), onChange: onTextChange })));\n\n\n};\nexport default withToasts(AnnotationLayerModal);","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,KAAP,IAAmCC,QAAnC,EAA6CC,SAA7C,QAA8D,OAA9D;AACA,SAASC,MAAT,EAAiBC,CAAjB,QAA0B,mBAA1B;AACA,SAASC,qBAAT,QAAsC,sBAAtC;AAEA,OAAOC,KAAP,MAAkB,sBAAlB;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,OAAOC,KAAP,MAAkB,sBAAlB;AACA,OAAOC,UAAP,MAAuB,yCAAvB,C;AAaA,MAAMC,0BAA0B,GAAGP,MAAM,CAACQ,GAAG;YACjC,eAAC,EAAEC,KAAF,EAAD,eAAeA,KAAK,CAACC,QAAN,GAAiB,CAAhC,EAAiC;MACvC,gBAAC,EAAED,KAAF,EAAD,gBAAeA,KAAK,CAACC,QAAN,GAAiB,CAAhC,EAAiC;CAFvC;AAKA,MAAMC,cAAc,GAAGX,MAAM,CAACQ,GAAG;mBACd,gBAAC,EAAEC,KAAF,EAAD,gBAAeA,KAAK,CAACC,QAAN,GAAiB,EAAhC,EAAkC;;;qBAGhC,gBAAC,EAAED,KAAF,EAAD,gBAAeA,KAAK,CAACC,QAAN,GAAiB,CAAhC,EAAiC;;;;mBAInC,gBAAC,EAAED,KAAF,EAAD,gBAAeA,KAAK,CAACC,QAAN,GAAiB,CAAhC,EAAiC;aACvC,gBAAC,EAAED,KAAF,EAAD,gBAAeA,KAAK,CAACG,MAAN,CAAaC,KAAb,CAAmBC,IAAlC,EAAsC;;;;;eAKpC,gBAAC,EAAEL,KAAF,EAAD,gBAAeA,KAAK,CAACC,QAAN,GAAiB,GAAhC,EAAmC;QAC1C,gBAAC,EAAED,KAAF,EAAD,gBAAeA,KAAK,CAACC,QAAN,GAAiB,CAAhC,EAAiC;wBACjB,gBAAC,EAAED,KAAF,EAAD,gBAAeA,KAAK,CAACG,MAAN,CAAaG,SAAb,CAAuBC,MAAtC,EAA4C;qBAC/C,iBAAC,EAAEP,KAAF,EAAD,iBAAeA,KAAK,CAACC,QAArB,EAA6B;;;;;;;;;;;;;;;;;aAiBrC,iBAAC,EAAED,KAAF,EAAD,iBAAeA,KAAK,CAACG,MAAN,CAAaG,SAAb,CAAuBE,MAAtC,EAA4C;;CAlCzD;AAsCA,MAAMC,oBAAoB,GAAiD,YAOtE,KAPuE,EAC1EC,cAD0E,EAE1EC,eAF0E,EAG1EC,UAH0E,EAI1EC,MAJ0E,EAK1EC,IAL0E,EAM1EC,KAAK,GAAG,IANkE,EAOvE;EACH,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgC5B,QAAQ,CAAU,IAAV,CAA9C;EACA,MAAM,CAAC6B,YAAD,EAAeC,eAAf,IACJ9B,QAAQ,EADV;EAEA,MAAM,CAAC+B,QAAD,EAAWC,WAAX,IAA0BhC,QAAQ,CAAU,IAAV,CAAxC;EACA,MAAMiC,UAAU,GAAGP,KAAK,KAAK,IAA7B;EAEA;EACA,MAAM,EACJQ,KAAK,EAAE,EAAEC,OAAF,EAAWC,QAAX,EADH,EAEJC,aAFI,EAGJC,cAHI,EAIJC,cAJI,KAKFnC,qBAAqB,CACvB,kBADuB,EAEvBD,CAAC,CAAC,kBAAD,CAFsB,EAGvBkB,cAHuB,CALzB;EAWA,MAAMmB,UAAU,GAAG,MAAK;IACtB;IACAV,eAAe,CAAC;MACdW,IAAI,EAAE,EADQ;MAEdC,KAAK,EAAE,EAFO,EAAD,CAAf;;EAID,CAND;EAQA;EACA,MAAMC,IAAI,GAAG,MAAK;IAChBX,WAAW,CAAC,IAAD,CAAX;IAEA;IACAQ,UAAU;IAEVhB,MAAM;EACP,CAPD;EASA,MAAMoB,MAAM,GAAG,MAAK;IAClB,IAAIX,UAAJ,EAAgB;MACd;MACA,IAAIJ,YAAJ,YAAIA,YAAY,CAAEgB,EAAlB,EAAsB;QACpB,MAAMC,SAAS,GAAGjB,YAAY,CAACgB,EAA/B;QACA,OAAOhB,YAAY,CAACgB,EAApB;QACA,OAAOhB,YAAY,CAACkB,UAApB;QACAR,cAAc,CAACO,SAAD,EAAYjB,YAAZ,CAAd,CAAwCmB,IAAxC,CAA6C,SAAQ,KAAG;UACtD,IAAI,CAACC,QAAL,EAAe;YACb;UACD;UAEDN,IAAI;UACJrB,eAAe,CAACnB,CAAC,CAAC,6BAAD,CAAF,CAAf;QACD,CAPD;MAQD;IACF,CAfD;IAeO,IAAI0B,YAAJ,EAAkB;MACvB;MACAS,cAAc,CAACT,YAAD,CAAd,CAA6BmB,IAA7B,CAAkC,SAAQ,KAAG;QAC3C,IAAI,CAACC,QAAL,EAAe;UACb;QACD;QAED,IAAI1B,UAAJ,EAAgB;UACdA,UAAU,CAAC0B,QAAD,CAAV;QACD;QAEDN,IAAI;QACJrB,eAAe,CAACnB,CAAC,CAAC,6BAAD,CAAF,CAAf;MACD,CAXD;IAYD;EACF,CA/BD;EAiCA,MAAM+C,YAAY,GAAG,CACnBC,KADmB,KAIjB;IACF,MAAM,EAAEC,MAAF,KAAaD,KAAnB;IACA,MAAME,IAAI,GAAG;MACX,GAAGxB,YADQ;MAEXY,IAAI,EAAEZ,YAAY,GAAGA,YAAY,CAACY,IAAhB,GAAuB,EAF9B;MAGXC,KAAK,EAAEb,YAAY,GAAGA,YAAY,CAACa,KAAhB,GAAwB,EAHhC,EAAb;;IAMAW,IAAI,CAACD,MAAM,CAACX,IAAR,CAAJ,GAAoBW,MAAM,CAACE,KAA3B;IACAxB,eAAe,CAACuB,IAAD,CAAf;EACD,CAdD;EAgBA,MAAME,QAAQ,GAAG,MAAK;IACpB,IAAI1B,YAAJ,kCAAIA,YAAY,CAAEY,IAAlB,aAAI,mBAAoBe,MAAxB,EAAgC;MAC9B5B,cAAc,CAAC,KAAD,CAAd;IACD,CAFD;IAEO;MACLA,cAAc,CAAC,IAAD,CAAd;IACD;EACF,CAND;EAQA;EACA3B,SAAS,CAAC,MAAK;IACb,IACEgC,UAAU;IACT,CAACJ,YAAD;IACC,CAACA,YAAY,CAACgB,EADf;IAEEnB,KAAK,IAAIA,KAAK,CAACmB,EAAN,KAAahB,YAAY,CAACgB,EAFrC;IAGEd,QAAQ,IAAIN,IAJL,CADZ,EAME;MACA,IAAIA,IAAI,IAAIC,KAAR,IAAiBA,KAAK,CAACmB,EAAN,KAAa,IAA9B,IAAsC,CAACV,OAA3C,EAAoD;QAClD,MAAMU,EAAE,GAAGnB,KAAK,CAACmB,EAAN,IAAY,CAAvB;QAEAR,aAAa,CAACQ,EAAD,CAAb;MACD;IACF,CAZD;IAYO,IACL,CAACZ,UAAD;IACC,CAACJ,YAAD,IAAiBA,YAAY,CAACgB,EAA9B,IAAqCd,QAAQ,IAAIN,IADlD,CADK,EAGL;MACA;MACAe,UAAU;IACX;EACF,CApBQ,EAoBN,CAACd,KAAD,EAAQD,IAAR,CApBM,CAAT;EAsBAxB,SAAS,CAAC,MAAK;IACb,IAAImC,QAAJ,EAAc;MACZN,eAAe,CAACM,QAAD,CAAf;IACD;EACF,CAJQ,EAIN,CAACA,QAAD,CAJM,CAAT;EAMA;EACAnC,SAAS,CAAC,MAAK;IACbsD,QAAQ;EACT,CAFQ,EAEN;EACD1B,YAAY,GAAGA,YAAY,CAACY,IAAhB,GAAuB,EADlC;EAEDZ,YAAY,GAAGA,YAAY,CAACa,KAAhB,GAAwB,EAFnC,CAFM,CAAT;;EAOA;EACA,IAAIX,QAAQ,IAAIN,IAAhB,EAAsB;IACpBO,WAAW,CAAC,KAAD,CAAX;EACD;EAED,OACE,cAAC,KAAD,IACE,oBAAoB,EAAEL,WADxB,EAEE,sBAAsB,EAAEiB,MAF1B,EAGE,MAAM,EAAED,IAHV,EAIE,iBAAiB,EAAEV,UAAU,GAAG9B,CAAC,CAAC,MAAD,CAAJ,GAAeA,CAAC,CAAC,KAAD,CAJ/C,EAKE,IAAI,EAAEsB,IALR,EAME,KAAK,EAAC,KANR,EAOE,KAAK,EACH;IACGQ,UAAU,GACT,cAAC,KAAD,CAAO,OAAP,IAAe,GAAG,EAAE3B,UAApB,GADS,GAGT,cAAC,KAAD,CAAO,SAAP,IAAiB,GAAG,EAAEA,UAAtB,GAJJ;IAMG2B,UAAU;IACP9B,CAAC,CAAC,kCAAD,CADM;IAEPA,CAAC,CAAC,sBAAD,CARP,CARJ;;EAoBE,cAAC,0BAAD;EACE,0BAAKA,CAAC,CAAC,mBAAD,CAAN,CADF,CApBF;;EAuBE,cAAC,cAAD;EACE,uBAAK,SAAS,EAAC,eAAf;EACGA,CAAC,CAAC,uBAAD,CADJ;EAEE,wBAAM,SAAS,EAAC,UAAhB,QAFF,CADF;;EAKE,yBACE,IAAI,EAAC,MADP,EAEE,QAAQ,EAAE+C,YAFZ,EAGE,IAAI,EAAC,MAHP,EAIE,KAAK,EAAErB,YAAF,oBAAEA,YAAY,CAAEY,IAJvB,GALF,CAvBF;;EAmCE,cAAC,cAAD;EACE,uBAAK,SAAS,EAAC,eAAf,IAAgCtC,CAAC,CAAC,aAAD,CAAjC,CADF;EAEE,4BACE,IAAI,EAAC,OADP,EAEE,KAAK,EAAE0B,YAAF,oBAAEA,YAAY,CAAEa,KAFvB,EAGE,WAAW,EAAEvC,CAAC,CAAC,4CAAD,CAHhB,EAIE,QAAQ,EAAE+C,YAJZ,GAFF,CAnCF,CADF;;;AA+CD,CA9LD;AAgMA,eAAe1C,UAAU,CAACY,oBAAD,CAAzB","names":["React","useState","useEffect","styled","t","useSingleViewResource","Icons","StyledIcon","Modal","withToasts","StyledAnnotationLayerTitle","div","theme","gridUnit","LayerContainer","colors","error","base","grayscale","light2","light1","AnnotationLayerModal","addDangerToast","addSuccessToast","onLayerAdd","onHide","show","layer","disableSave","setDisableSave","currentLayer","setCurrentLayer","isHidden","setIsHidden","isEditMode","state","loading","resource","fetchResource","createResource","updateResource","resetLayer","name","descr","hide","onSave","id","update_id","created_by","then","response","onTextChange","event","target","data","value","validate","length"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/features/annotationLayers/AnnotationLayerModal.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { FunctionComponent, useState, useEffect } from 'react';\nimport { styled, t } from '@superset-ui/core';\nimport { useSingleViewResource } from 'src/views/CRUD/hooks';\n\nimport Icons from 'src/components/Icons';\nimport { StyledIcon } from 'src/views/CRUD/utils';\nimport Modal from 'src/components/Modal';\nimport withToasts from 'src/components/MessageToasts/withToasts';\n\nimport { AnnotationLayerObject } from './types';\n\ninterface AnnotationLayerModalProps {\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n  layer?: AnnotationLayerObject | null;\n  onLayerAdd?: (layer?: AnnotationLayerObject) => void;\n  onHide: () => void;\n  show: boolean;\n}\n\nconst StyledAnnotationLayerTitle = styled.div`\n  margin: ${({ theme }) => theme.gridUnit * 2}px auto\n    ${({ theme }) => theme.gridUnit * 4}px auto;\n`;\n\nconst LayerContainer = styled.div`\n  margin-bottom: ${({ theme }) => theme.gridUnit * 10}px;\n\n  .control-label {\n    margin-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n  }\n\n  .required {\n    margin-left: ${({ theme }) => theme.gridUnit / 2}px;\n    color: ${({ theme }) => theme.colors.error.base};\n  }\n\n  textarea,\n  input[type='text'] {\n    padding: ${({ theme }) => theme.gridUnit * 1.5}px\n      ${({ theme }) => theme.gridUnit * 2}px;\n    border: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n    border-radius: ${({ theme }) => theme.gridUnit}px;\n    width: 50%;\n  }\n\n  input,\n  textarea {\n    flex: 1 1 auto;\n  }\n\n  textarea {\n    width: 100%;\n    height: 160px;\n    resize: none;\n  }\n\n  input::placeholder,\n  textarea::placeholder {\n    color: ${({ theme }) => theme.colors.grayscale.light1};\n  }\n`;\n\nconst AnnotationLayerModal: FunctionComponent<AnnotationLayerModalProps> = ({\n  addDangerToast,\n  addSuccessToast,\n  onLayerAdd,\n  onHide,\n  show,\n  layer = null,\n}) => {\n  const [disableSave, setDisableSave] = useState<boolean>(true);\n  const [currentLayer, setCurrentLayer] =\n    useState<AnnotationLayerObject | null>();\n  const [isHidden, setIsHidden] = useState<boolean>(true);\n  const isEditMode = layer !== null;\n\n  // annotation layer fetch logic\n  const {\n    state: { loading, resource },\n    fetchResource,\n    createResource,\n    updateResource,\n  } = useSingleViewResource<AnnotationLayerObject>(\n    'annotation_layer',\n    t('annotation_layer'),\n    addDangerToast,\n  );\n\n  const resetLayer = () => {\n    // Reset layer\n    setCurrentLayer({\n      name: '',\n      descr: '',\n    });\n  };\n\n  // Functions\n  const hide = () => {\n    setIsHidden(true);\n\n    // Reset layer\n    resetLayer();\n\n    onHide();\n  };\n\n  const onSave = () => {\n    if (isEditMode) {\n      // Edit\n      if (currentLayer?.id) {\n        const update_id = currentLayer.id;\n        delete currentLayer.id;\n        delete currentLayer.created_by;\n        updateResource(update_id, currentLayer).then(response => {\n          if (!response) {\n            return;\n          }\n\n          hide();\n          addSuccessToast(t('Annotation template updated'));\n        });\n      }\n    } else if (currentLayer) {\n      // Create\n      createResource(currentLayer).then(response => {\n        if (!response) {\n          return;\n        }\n\n        if (onLayerAdd) {\n          onLayerAdd(response);\n        }\n\n        hide();\n        addSuccessToast(t('Annotation template created'));\n      });\n    }\n  };\n\n  const onTextChange = (\n    event:\n      | React.ChangeEvent<HTMLTextAreaElement>\n      | React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    const { target } = event;\n    const data = {\n      ...currentLayer,\n      name: currentLayer ? currentLayer.name : '',\n      descr: currentLayer ? currentLayer.descr : '',\n    };\n\n    data[target.name] = target.value;\n    setCurrentLayer(data);\n  };\n\n  const validate = () => {\n    if (currentLayer?.name?.length) {\n      setDisableSave(false);\n    } else {\n      setDisableSave(true);\n    }\n  };\n\n  // Initialize\n  useEffect(() => {\n    if (\n      isEditMode &&\n      (!currentLayer ||\n        !currentLayer.id ||\n        (layer && layer.id !== currentLayer.id) ||\n        (isHidden && show))\n    ) {\n      if (show && layer && layer.id !== null && !loading) {\n        const id = layer.id || 0;\n\n        fetchResource(id);\n      }\n    } else if (\n      !isEditMode &&\n      (!currentLayer || currentLayer.id || (isHidden && show))\n    ) {\n      // Reset layer\n      resetLayer();\n    }\n  }, [layer, show]);\n\n  useEffect(() => {\n    if (resource) {\n      setCurrentLayer(resource);\n    }\n  }, [resource]);\n\n  // Validation\n  useEffect(() => {\n    validate();\n  }, [\n    currentLayer ? currentLayer.name : '',\n    currentLayer ? currentLayer.descr : '',\n  ]);\n\n  // Show/hide\n  if (isHidden && show) {\n    setIsHidden(false);\n  }\n\n  return (\n    <Modal\n      disablePrimaryButton={disableSave}\n      onHandledPrimaryAction={onSave}\n      onHide={hide}\n      primaryButtonName={isEditMode ? t('Save') : t('Add')}\n      show={show}\n      width=\"55%\"\n      title={\n        <h4 data-test=\"annotation-layer-modal-title\">\n          {isEditMode ? (\n            <Icons.EditAlt css={StyledIcon} />\n          ) : (\n            <Icons.PlusLarge css={StyledIcon} />\n          )}\n          {isEditMode\n            ? t('Edit annotation layer properties')\n            : t('Add annotation layer')}\n        </h4>\n      }\n    >\n      <StyledAnnotationLayerTitle>\n        <h4>{t('Basic information')}</h4>\n      </StyledAnnotationLayerTitle>\n      <LayerContainer>\n        <div className=\"control-label\">\n          {t('Annotation layer name')}\n          <span className=\"required\">*</span>\n        </div>\n        <input\n          name=\"name\"\n          onChange={onTextChange}\n          type=\"text\"\n          value={currentLayer?.name}\n        />\n      </LayerContainer>\n      <LayerContainer>\n        <div className=\"control-label\">{t('description')}</div>\n        <textarea\n          name=\"descr\"\n          value={currentLayer?.descr}\n          placeholder={t('Description (this can be seen in the list)')}\n          onChange={onTextChange}\n        />\n      </LayerContainer>\n    </Modal>\n  );\n};\n\nexport default withToasts(AnnotationLayerModal);\n"]},"metadata":{},"sourceType":"module"}