{"ast":null,"code":"import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useState, useMemo, useEffect } from 'react';\nimport rison from 'rison';\nimport { ensureIsArray, t, useChangeEffect } from '@superset-ui/core';\nimport { Select } from 'src/components';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport { cachedSupersetGet } from 'src/utils/cachedSupersetGet';\n/** Special purpose AsyncSelect that selects a column from a dataset */\n// eslint-disable-next-line import/prefer-default-export\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";export function ColumnSelect(_ref) {var _form$getFieldValue;let { allowClear = false, filterValues = () => true, form, formField = 'column', filterId, datasetId, value, onChange, mode } = _ref;\n  const [columns, setColumns] = useState();\n  const { addDangerToast } = useToasts();\n  const resetColumnField = useCallback(() => {\n    form.setFields([\n    { name: ['filters', filterId, formField], touched: false, value: null }]);\n\n  }, [form, filterId, formField]);\n  const options = useMemo(() => ensureIsArray(columns).\n  filter(filterValues).\n  map((col) => col.column_name).\n  map((column) => ({ label: column, value: column })), [columns, filterValues]);\n  const currentFilterType = (_form$getFieldValue = form.getFieldValue('filters')) == null ? void 0 : _form$getFieldValue[filterId].filterType;\n  const currentColumn = useMemo(() => columns == null ? void 0 : columns.find((column) => column.column_name === value), [columns, value]);\n  useEffect(() => {\n    if (currentColumn && !filterValues(currentColumn)) {\n      resetColumnField();\n    }\n  }, [currentColumn, currentFilterType, resetColumnField]);\n  useChangeEffect(datasetId, (previous) => {\n    if (previous != null) {\n      resetColumnField();\n    }\n    if (datasetId != null) {\n      cachedSupersetGet({\n        endpoint: `/api/v1/dataset/${datasetId}?q=${rison.encode({\n          columns: [\n          'columns.column_name',\n          'columns.is_dttm',\n          'columns.type_generic'] })\n\n        }` }).\n      then((_ref2) => {let { json: { result } } = _ref2;\n        const lookupValue = Array.isArray(value) ? value : [value];\n        const valueExists = result.columns.some((column) => lookupValue == null ? void 0 : _includesInstanceProperty(lookupValue).call(lookupValue, column.column_name));\n        if (!valueExists) {\n          resetColumnField();\n        }\n        setColumns(result.columns);\n      }, async (badResponse) => {\n        const { error, message } = await getClientErrorObject(badResponse);\n        let errorText = message || error || t('An error has occurred');\n        if (message === 'Forbidden') {\n          errorText = t('You do not have permission to edit this dashboard');\n        }\n        addDangerToast(errorText);\n      });\n    }\n  });\n  return ___EmotionJSX(Select, { mode: mode, value: mode === 'multiple' ? value || [] : value, ariaLabel: t('Column select'), onChange: onChange, options: options, placeholder: t('Select a column'), notFoundContent: t('No compatible columns found'), showSearch: true, allowClear: allowClear });\n}","map":{"version":3,"mappings":"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","names":["React","useCallback","useState","useMemo","useEffect","rison","ensureIsArray","t","useChangeEffect","Select","useToasts","getClientErrorObject","cachedSupersetGet","ColumnSelect","allowClear","filterValues","form","formField","filterId","datasetId","value","onChange","mode","columns","setColumns","addDangerToast","resetColumnField","setFields","name","touched","options","filter","map","col","column_name","column","label","currentFilterType","getFieldValue","filterType","currentColumn","find","previous","endpoint","encode","then","json","result","lookupValue","Array","isArray","valueExists","some","badResponse","error","message","errorText"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/ColumnSelect.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useState, useMemo, useEffect } from 'react';\nimport rison from 'rison';\nimport { Column, ensureIsArray, t, useChangeEffect } from '@superset-ui/core';\nimport { Select, FormInstance } from 'src/components';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport { cachedSupersetGet } from 'src/utils/cachedSupersetGet';\nimport { NativeFiltersForm } from '../types';\n\ninterface ColumnSelectProps {\n  allowClear?: boolean;\n  filterValues?: (column: Column) => boolean;\n  form: FormInstance<NativeFiltersForm>;\n  formField?: string;\n  filterId: string;\n  datasetId?: number;\n  value?: string | string[];\n  onChange?: (value: string) => void;\n  mode?: 'multiple';\n}\n\n/** Special purpose AsyncSelect that selects a column from a dataset */\n// eslint-disable-next-line import/prefer-default-export\nexport function ColumnSelect({\n  allowClear = false,\n  filterValues = () => true,\n  form,\n  formField = 'column',\n  filterId,\n  datasetId,\n  value,\n  onChange,\n  mode,\n}: ColumnSelectProps) {\n  const [columns, setColumns] = useState<Column[]>();\n  const { addDangerToast } = useToasts();\n  const resetColumnField = useCallback(() => {\n    form.setFields([\n      { name: ['filters', filterId, formField], touched: false, value: null },\n    ]);\n  }, [form, filterId, formField]);\n\n  const options = useMemo(\n    () =>\n      ensureIsArray(columns)\n        .filter(filterValues)\n        .map((col: Column) => col.column_name)\n        .map((column: string) => ({ label: column, value: column })),\n    [columns, filterValues],\n  );\n\n  const currentFilterType =\n    form.getFieldValue('filters')?.[filterId].filterType;\n  const currentColumn = useMemo(\n    () => columns?.find(column => column.column_name === value),\n    [columns, value],\n  );\n\n  useEffect(() => {\n    if (currentColumn && !filterValues(currentColumn)) {\n      resetColumnField();\n    }\n  }, [currentColumn, currentFilterType, resetColumnField]);\n\n  useChangeEffect(datasetId, previous => {\n    if (previous != null) {\n      resetColumnField();\n    }\n    if (datasetId != null) {\n      cachedSupersetGet({\n        endpoint: `/api/v1/dataset/${datasetId}?q=${rison.encode({\n          columns: [\n            'columns.column_name',\n            'columns.is_dttm',\n            'columns.type_generic',\n          ],\n        })}`,\n      }).then(\n        ({ json: { result } }) => {\n          const lookupValue = Array.isArray(value) ? value : [value];\n          const valueExists = result.columns.some((column: Column) =>\n            lookupValue?.includes(column.column_name),\n          );\n          if (!valueExists) {\n            resetColumnField();\n          }\n          setColumns(result.columns);\n        },\n        async badResponse => {\n          const { error, message } = await getClientErrorObject(badResponse);\n          let errorText = message || error || t('An error has occurred');\n          if (message === 'Forbidden') {\n            errorText = t('You do not have permission to edit this dashboard');\n          }\n          addDangerToast(errorText);\n        },\n      );\n    }\n  });\n\n  return (\n    <Select\n      mode={mode}\n      value={mode === 'multiple' ? value || [] : value}\n      ariaLabel={t('Column select')}\n      onChange={onChange}\n      options={options}\n      placeholder={t('Select a column')}\n      notFoundContent={t('No compatible columns found')}\n      showSearch\n      allowClear={allowClear}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}