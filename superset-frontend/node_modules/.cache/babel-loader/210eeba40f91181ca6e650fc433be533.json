{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useState } from 'react';\nimport { styled, css, t, useTheme } from '@superset-ui/core';\nimport Icons from 'src/components/Icons';\nimport ControlHeader from 'src/explore/components/ControlHeader';\nimport { FormattingPopover } from './FormattingPopover';\nimport { COMPARATOR } from './types';\nimport { AddControlLabel, CaretContainer, Label, OptionControlContainer } from '../OptionControls';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst FormattersContainer = styled.div`\n  ${(_ref) => {let { theme } = _ref;return css`\n    padding: ${theme.gridUnit}px;\n    border: solid 1px ${theme.colors.grayscale.light2};\n    border-radius: ${theme.gridUnit}px;\n  `;}}\n`;\nexport const FormatterContainer = styled(OptionControlContainer)`\n  &,\n  & > div {\n    margin-bottom: ${(_ref2) => {let { theme } = _ref2;return theme.gridUnit;}}px;\n    :last-child {\n      margin-bottom: 0;\n    }\n  }\n`;\nexport const CloseButton = styled.button`\n  ${(_ref3) => {let { theme } = _ref3;return css`\n    color: ${theme.colors.grayscale.light1};\n    height: 100%;\n    width: ${theme.gridUnit * 6}px;\n    border: none;\n    border-right: solid 1px ${theme.colors.grayscale.dark2}0C;\n    padding: 0;\n    outline: none;\n    border-bottom-left-radius: 3px;\n    border-top-left-radius: 3px;\n  `;}}\n`;\nconst ConditionalFormattingControl = (_ref4) => {let { value, onChange, columnOptions, verboseMap, removeIrrelevantConditions, ...props } = _ref4;\n  const theme = useTheme();\n  const [conditionalFormattingConfigs, setConditionalFormattingConfigs] = useState(value != null ? value : []);\n  useEffect(() => {\n    if (onChange) {\n      onChange(conditionalFormattingConfigs);\n    }\n  }, [conditionalFormattingConfigs, onChange]);\n  useEffect(() => {\n    if (removeIrrelevantConditions) {\n      // remove formatter when corresponding column is removed from controls\n      const newFormattingConfigs = conditionalFormattingConfigs.filter((config) => columnOptions.some((option) => (option == null ? void 0 : option.value) === (config == null ? void 0 : config.column)));\n      if (newFormattingConfigs.length !== conditionalFormattingConfigs.length &&\n      removeIrrelevantConditions) {\n        setConditionalFormattingConfigs(newFormattingConfigs);\n      }\n    }\n  }, [conditionalFormattingConfigs, columnOptions, removeIrrelevantConditions]);\n  const onDelete = (index) => {\n    setConditionalFormattingConfigs((prevConfigs) => prevConfigs.filter((_, i) => i !== index));\n  };\n  const onSave = (config) => {\n    setConditionalFormattingConfigs((prevConfigs) => [...prevConfigs, config]);\n  };\n  const onEdit = (newConfig, index) => {\n    const newConfigs = [...conditionalFormattingConfigs];\n    newConfigs.splice(index, 1, newConfig);\n    setConditionalFormattingConfigs(newConfigs);\n  };\n  const createLabel = (_ref5) => {var _ref6;let { column, operator, targetValue, targetValueLeft, targetValueRight } = _ref5;\n    const columnName = (_ref6 = column && (verboseMap == null ? void 0 : verboseMap[column])) != null ? _ref6 : column;\n    switch (operator) {\n      case COMPARATOR.NONE:\n        return `${columnName}`;\n      case COMPARATOR.BETWEEN:\n        return `${targetValueLeft} ${COMPARATOR.LESS_THAN} ${columnName} ${COMPARATOR.LESS_THAN} ${targetValueRight}`;\n      case COMPARATOR.BETWEEN_OR_EQUAL:\n        return `${targetValueLeft} ${COMPARATOR.LESS_OR_EQUAL} ${columnName} ${COMPARATOR.LESS_OR_EQUAL} ${targetValueRight}`;\n      case COMPARATOR.BETWEEN_OR_LEFT_EQUAL:\n        return `${targetValueLeft} ${COMPARATOR.LESS_OR_EQUAL} ${columnName} ${COMPARATOR.LESS_THAN} ${targetValueRight}`;\n      case COMPARATOR.BETWEEN_OR_RIGHT_EQUAL:\n        return `${targetValueLeft} ${COMPARATOR.LESS_THAN} ${columnName} ${COMPARATOR.LESS_OR_EQUAL} ${targetValueRight}`;\n      default:\n        return `${columnName} ${operator} ${targetValue}`;}\n\n  };\n  return ___EmotionJSX(\"div\", null,\n  ___EmotionJSX(ControlHeader, props),\n  ___EmotionJSX(FormattersContainer, null,\n  conditionalFormattingConfigs.map((config, index) => ___EmotionJSX(FormatterContainer, { key: index },\n  ___EmotionJSX(CloseButton, { onClick: () => onDelete(index) },\n  ___EmotionJSX(Icons.XSmall, { iconColor: theme.colors.grayscale.light1 })),\n\n  ___EmotionJSX(FormattingPopover, { title: t('Edit formatter'), config: config, columns: columnOptions, onChange: (newConfig) => onEdit(newConfig, index), destroyTooltipOnHide: true },\n  ___EmotionJSX(OptionControlContainer, { withCaret: true },\n  ___EmotionJSX(Label, null, createLabel(config)),\n  ___EmotionJSX(CaretContainer, null,\n  ___EmotionJSX(Icons.CaretRight, { iconColor: theme.colors.grayscale.light1 })))))),\n\n\n\n\n  ___EmotionJSX(FormattingPopover, { title: t('Add new formatter'), columns: columnOptions, onChange: onSave, destroyTooltipOnHide: true },\n  ___EmotionJSX(AddControlLabel, null,\n  ___EmotionJSX(Icons.PlusSmall, { iconColor: theme.colors.grayscale.light1 }),\n  t('Add new color formatter')))));\n\n\n\n\n};\nexport default ConditionalFormattingControl;","map":{"version":3,"mappings":"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","names":["React","useEffect","useState","styled","css","t","useTheme","Icons","ControlHeader","FormattingPopover","COMPARATOR","AddControlLabel","CaretContainer","Label","OptionControlContainer","FormattersContainer","div","theme","gridUnit","colors","grayscale","light2","FormatterContainer","CloseButton","button","light1","dark2","ConditionalFormattingControl","value","onChange","columnOptions","verboseMap","removeIrrelevantConditions","props","conditionalFormattingConfigs","setConditionalFormattingConfigs","newFormattingConfigs","filter","some","option","config","column","length","onDelete","index","prevConfigs","_","i","onSave","onEdit","newConfig","newConfigs","splice","createLabel","operator","targetValue","targetValueLeft","targetValueRight","columnName","NONE","BETWEEN","LESS_THAN","BETWEEN_OR_EQUAL","LESS_OR_EQUAL","BETWEEN_OR_LEFT_EQUAL","BETWEEN_OR_RIGHT_EQUAL","map"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/explore/components/controls/ConditionalFormattingControl/ConditionalFormattingControl.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useState } from 'react';\nimport { styled, css, t, useTheme } from '@superset-ui/core';\nimport Icons from 'src/components/Icons';\nimport ControlHeader from 'src/explore/components/ControlHeader';\nimport { FormattingPopover } from './FormattingPopover';\nimport {\n  COMPARATOR,\n  ConditionalFormattingConfig,\n  ConditionalFormattingControlProps,\n} from './types';\nimport {\n  AddControlLabel,\n  CaretContainer,\n  Label,\n  OptionControlContainer,\n} from '../OptionControls';\n\nconst FormattersContainer = styled.div`\n  ${({ theme }) => css`\n    padding: ${theme.gridUnit}px;\n    border: solid 1px ${theme.colors.grayscale.light2};\n    border-radius: ${theme.gridUnit}px;\n  `}\n`;\n\nexport const FormatterContainer = styled(OptionControlContainer)`\n  &,\n  & > div {\n    margin-bottom: ${({ theme }) => theme.gridUnit}px;\n    :last-child {\n      margin-bottom: 0;\n    }\n  }\n`;\n\nexport const CloseButton = styled.button`\n  ${({ theme }) => css`\n    color: ${theme.colors.grayscale.light1};\n    height: 100%;\n    width: ${theme.gridUnit * 6}px;\n    border: none;\n    border-right: solid 1px ${theme.colors.grayscale.dark2}0C;\n    padding: 0;\n    outline: none;\n    border-bottom-left-radius: 3px;\n    border-top-left-radius: 3px;\n  `}\n`;\n\nconst ConditionalFormattingControl = ({\n  value,\n  onChange,\n  columnOptions,\n  verboseMap,\n  removeIrrelevantConditions,\n  ...props\n}: ConditionalFormattingControlProps) => {\n  const theme = useTheme();\n  const [conditionalFormattingConfigs, setConditionalFormattingConfigs] =\n    useState<ConditionalFormattingConfig[]>(value ?? []);\n\n  useEffect(() => {\n    if (onChange) {\n      onChange(conditionalFormattingConfigs);\n    }\n  }, [conditionalFormattingConfigs, onChange]);\n\n  useEffect(() => {\n    if (removeIrrelevantConditions) {\n      // remove formatter when corresponding column is removed from controls\n      const newFormattingConfigs = conditionalFormattingConfigs.filter(config =>\n        columnOptions.some((option: any) => option?.value === config?.column),\n      );\n      if (\n        newFormattingConfigs.length !== conditionalFormattingConfigs.length &&\n        removeIrrelevantConditions\n      ) {\n        setConditionalFormattingConfigs(newFormattingConfigs);\n      }\n    }\n  }, [conditionalFormattingConfigs, columnOptions, removeIrrelevantConditions]);\n\n  const onDelete = (index: number) => {\n    setConditionalFormattingConfigs(prevConfigs =>\n      prevConfigs.filter((_, i) => i !== index),\n    );\n  };\n\n  const onSave = (config: ConditionalFormattingConfig) => {\n    setConditionalFormattingConfigs(prevConfigs => [...prevConfigs, config]);\n  };\n\n  const onEdit = (newConfig: ConditionalFormattingConfig, index: number) => {\n    const newConfigs = [...conditionalFormattingConfigs];\n    newConfigs.splice(index, 1, newConfig);\n    setConditionalFormattingConfigs(newConfigs);\n  };\n\n  const createLabel = ({\n    column,\n    operator,\n    targetValue,\n    targetValueLeft,\n    targetValueRight,\n  }: ConditionalFormattingConfig) => {\n    const columnName = (column && verboseMap?.[column]) ?? column;\n    switch (operator) {\n      case COMPARATOR.NONE:\n        return `${columnName}`;\n      case COMPARATOR.BETWEEN:\n        return `${targetValueLeft} ${COMPARATOR.LESS_THAN} ${columnName} ${COMPARATOR.LESS_THAN} ${targetValueRight}`;\n      case COMPARATOR.BETWEEN_OR_EQUAL:\n        return `${targetValueLeft} ${COMPARATOR.LESS_OR_EQUAL} ${columnName} ${COMPARATOR.LESS_OR_EQUAL} ${targetValueRight}`;\n      case COMPARATOR.BETWEEN_OR_LEFT_EQUAL:\n        return `${targetValueLeft} ${COMPARATOR.LESS_OR_EQUAL} ${columnName} ${COMPARATOR.LESS_THAN} ${targetValueRight}`;\n      case COMPARATOR.BETWEEN_OR_RIGHT_EQUAL:\n        return `${targetValueLeft} ${COMPARATOR.LESS_THAN} ${columnName} ${COMPARATOR.LESS_OR_EQUAL} ${targetValueRight}`;\n      default:\n        return `${columnName} ${operator} ${targetValue}`;\n    }\n  };\n\n  return (\n    <div>\n      <ControlHeader {...props} />\n      <FormattersContainer>\n        {conditionalFormattingConfigs.map((config, index) => (\n          <FormatterContainer key={index}>\n            <CloseButton onClick={() => onDelete(index)}>\n              <Icons.XSmall iconColor={theme.colors.grayscale.light1} />\n            </CloseButton>\n            <FormattingPopover\n              title={t('Edit formatter')}\n              config={config}\n              columns={columnOptions}\n              onChange={(newConfig: ConditionalFormattingConfig) =>\n                onEdit(newConfig, index)\n              }\n              destroyTooltipOnHide\n            >\n              <OptionControlContainer withCaret>\n                <Label>{createLabel(config)}</Label>\n                <CaretContainer>\n                  <Icons.CaretRight iconColor={theme.colors.grayscale.light1} />\n                </CaretContainer>\n              </OptionControlContainer>\n            </FormattingPopover>\n          </FormatterContainer>\n        ))}\n        <FormattingPopover\n          title={t('Add new formatter')}\n          columns={columnOptions}\n          onChange={onSave}\n          destroyTooltipOnHide\n        >\n          <AddControlLabel>\n            <Icons.PlusSmall iconColor={theme.colors.grayscale.light1} />\n            {t('Add new color formatter')}\n          </AddControlLabel>\n        </FormattingPopover>\n      </FormattersContainer>\n    </div>\n  );\n};\n\nexport default ConditionalFormattingControl;\n"]},"metadata":{},"sourceType":"module"}