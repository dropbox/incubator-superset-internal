{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\nimport getToastsFromPyFlashMessages from 'src/components/MessageToasts/getToastsFromPyFlashMessages';\n\nexport function dedupeTabHistory(tabHistory) {\n  return tabHistory.reduce(\n  (result, tabId) =>\n  result.slice(-1)[0] === tabId ? result : result.concat(tabId),\n  []);\n\n}\n\nexport default function getInitialState(_ref)\n\n\n\n\n\n\n\n\n{let { defaultDbId, common, active_tab: activeTab, tab_state_ids: tabStateIds = [], databases, queries: queries_, requested_query: requestedQuery, user } = _ref;\n  /**\n   * Before YYYY-MM-DD, the state for SQL Lab was stored exclusively in the\n   * browser's localStorage. The feature flag `SQLLAB_BACKEND_PERSISTENCE`\n   * moves the state to the backend instead, migrating it from local storage.\n   *\n   * To allow for a transparent migration, the initial state is a combination\n   * of the backend state (if any) with the browser state (if any).\n   */\n  let queryEditors = {};\n  const defaultQueryEditor = {\n    id: null,\n    loaded: true,\n    name: t('Untitled query'),\n    sql: 'SELECT *\\nFROM\\nWHERE',\n    selectedText: null,\n    latestQueryId: null,\n    autorun: false,\n    templateParams: null,\n    dbId: defaultDbId,\n    queryLimit: common.conf.DEFAULT_SQLLAB_LIMIT,\n    validationResult: {\n      id: null,\n      errors: [],\n      completed: false },\n\n    hideLeftBar: false };\n\n  let unsavedQueryEditor = {};\n\n  /**\n   * Load state from the backend. This will be empty if the feature flag\n   * `SQLLAB_BACKEND_PERSISTENCE` is off.\n   */\n  tabStateIds.forEach((_ref2) => {let { id, label } = _ref2;\n    let queryEditor;\n    if (activeTab && activeTab.id === id) {var _activeTab$saved_quer;\n      queryEditor = {\n        id: id.toString(),\n        loaded: true,\n        name: activeTab.label,\n        sql: activeTab.sql || undefined,\n        selectedText: undefined,\n        latestQueryId: activeTab.latest_query ?\n        activeTab.latest_query.id :\n        null,\n        remoteId: (_activeTab$saved_quer = activeTab.saved_query) == null ? void 0 : _activeTab$saved_quer.id,\n        autorun: activeTab.autorun,\n        templateParams: activeTab.template_params || undefined,\n        dbId: activeTab.database_id,\n        schema: activeTab.schema,\n        queryLimit: activeTab.query_limit,\n        validationResult: {\n          id: null,\n          errors: [],\n          completed: false },\n\n        hideLeftBar: activeTab.hide_left_bar };\n\n    } else {\n      // dummy state, actual state will be loaded on tab switch\n      queryEditor = {\n        ...defaultQueryEditor,\n        id: id.toString(),\n        loaded: false,\n        name: label };\n\n    }\n    queryEditors = {\n      ...queryEditors,\n      [queryEditor.id]: queryEditor };\n\n  });\n\n  const tabHistory = activeTab ? [activeTab.id.toString()] : [];\n  let tables = {};\n  if (activeTab) {\n    activeTab.table_schemas.\n    filter((tableSchema) => tableSchema.description !== null).\n    forEach((tableSchema) => {\n      const { dataPreviewQueryId, ...persistData } = tableSchema.description;\n      const table = {\n        dbId: tableSchema.database_id,\n        queryEditorId: tableSchema.tab_state_id.toString(),\n        schema: tableSchema.schema,\n        name: tableSchema.table,\n        expanded: tableSchema.expanded,\n        id: tableSchema.id,\n        dataPreviewQueryId,\n        persistData,\n        initialized: true };\n\n      tables = {\n        ...tables,\n        [table.id]: table };\n\n    });\n  }\n\n  const queries = { ...queries_ };\n\n  /**\n   * If the `SQLLAB_BACKEND_PERSISTENCE` feature flag is off, or if the user\n   * hasn't used SQL Lab after it has been turned on, the state will be stored\n   * in the browser's local storage.\n   */\n  if (\n  localStorage.getItem('redux') &&\n  JSON.parse(localStorage.getItem('redux')).sqlLab)\n  {\n    const { sqlLab } = JSON.parse(localStorage.getItem('redux'));\n\n    if (sqlLab.queryEditors.length === 0) {\n      // migration was successful\n      localStorage.removeItem('redux');\n    } else {\n      unsavedQueryEditor = sqlLab.unsavedQueryEditor || {};\n      // add query editors and tables to state with a special flag so they can\n      // be migrated if the `SQLLAB_BACKEND_PERSISTENCE` feature flag is on\n      sqlLab.queryEditors.forEach((qe) => {\n        queryEditors = {\n          ...queryEditors,\n          [qe.id]: {\n            ...queryEditors[qe.id],\n            ...qe,\n            name: qe.title || qe.name,\n            ...(unsavedQueryEditor.id === qe.id && unsavedQueryEditor),\n            inLocalStorage: true,\n            loaded: true } };\n\n\n      });\n      const expandedTables = new Set();\n      tables = sqlLab.tables.reduce((merged, table) => {\n        const expanded = !expandedTables.has(table.queryEditorId);\n        if (expanded) {\n          expandedTables.add(table.queryEditorId);\n        }\n        return {\n          ...merged,\n          [table.id]: {\n            ...tables[table.id],\n            ...table,\n            expanded } };\n\n\n      }, tables);\n      Object.values(sqlLab.queries).forEach((query) => {\n        queries[query.id] = { ...query, inLocalStorage: true };\n      });\n      tabHistory.push(...sqlLab.tabHistory);\n    }\n  }\n\n  return {\n    sqlLab: {\n      activeSouthPaneTab: 'Results',\n      alerts: [],\n      databases,\n      offline: false,\n      queries,\n      queryEditors: Object.values(queryEditors),\n      tabHistory: dedupeTabHistory(tabHistory),\n      tables: Object.values(tables),\n      queriesLastUpdate: Date.now(),\n      user,\n      unsavedQueryEditor,\n      queryCostEstimates: {} },\n\n    requestedQuery,\n    messageToasts: getToastsFromPyFlashMessages(\n    (common || {}).flash_messages || []),\n\n    localStorageUsageInKilobytes: 0,\n    common: {\n      flash_messages: common.flash_messages,\n      conf: common.conf } };\n\n\n}","map":{"version":3,"names":["t","getToastsFromPyFlashMessages","dedupeTabHistory","tabHistory","reduce","result","tabId","slice","concat","getInitialState","defaultDbId","common","active_tab","activeTab","tab_state_ids","tabStateIds","databases","queries","queries_","requested_query","requestedQuery","user","queryEditors","defaultQueryEditor","id","loaded","name","sql","selectedText","latestQueryId","autorun","templateParams","dbId","queryLimit","conf","DEFAULT_SQLLAB_LIMIT","validationResult","errors","completed","hideLeftBar","unsavedQueryEditor","forEach","label","queryEditor","toString","undefined","latest_query","remoteId","saved_query","template_params","database_id","schema","query_limit","hide_left_bar","tables","table_schemas","filter","tableSchema","description","dataPreviewQueryId","persistData","table","queryEditorId","tab_state_id","expanded","initialized","localStorage","getItem","JSON","parse","sqlLab","length","removeItem","qe","title","inLocalStorage","expandedTables","Set","merged","has","add","Object","values","query","push","activeSouthPaneTab","alerts","offline","queriesLastUpdate","Date","now","queryCostEstimates","messageToasts","flash_messages","localStorageUsageInKilobytes"],"sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/SqlLab/reducers/getInitialState.js"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\nimport getToastsFromPyFlashMessages from 'src/components/MessageToasts/getToastsFromPyFlashMessages';\n\nexport function dedupeTabHistory(tabHistory) {\n  return tabHistory.reduce(\n    (result, tabId) =>\n      result.slice(-1)[0] === tabId ? result : result.concat(tabId),\n    [],\n  );\n}\n\nexport default function getInitialState({\n  defaultDbId,\n  common,\n  active_tab: activeTab,\n  tab_state_ids: tabStateIds = [],\n  databases,\n  queries: queries_,\n  requested_query: requestedQuery,\n  user,\n}) {\n  /**\n   * Before YYYY-MM-DD, the state for SQL Lab was stored exclusively in the\n   * browser's localStorage. The feature flag `SQLLAB_BACKEND_PERSISTENCE`\n   * moves the state to the backend instead, migrating it from local storage.\n   *\n   * To allow for a transparent migration, the initial state is a combination\n   * of the backend state (if any) with the browser state (if any).\n   */\n  let queryEditors = {};\n  const defaultQueryEditor = {\n    id: null,\n    loaded: true,\n    name: t('Untitled query'),\n    sql: 'SELECT *\\nFROM\\nWHERE',\n    selectedText: null,\n    latestQueryId: null,\n    autorun: false,\n    templateParams: null,\n    dbId: defaultDbId,\n    queryLimit: common.conf.DEFAULT_SQLLAB_LIMIT,\n    validationResult: {\n      id: null,\n      errors: [],\n      completed: false,\n    },\n    hideLeftBar: false,\n  };\n  let unsavedQueryEditor = {};\n\n  /**\n   * Load state from the backend. This will be empty if the feature flag\n   * `SQLLAB_BACKEND_PERSISTENCE` is off.\n   */\n  tabStateIds.forEach(({ id, label }) => {\n    let queryEditor;\n    if (activeTab && activeTab.id === id) {\n      queryEditor = {\n        id: id.toString(),\n        loaded: true,\n        name: activeTab.label,\n        sql: activeTab.sql || undefined,\n        selectedText: undefined,\n        latestQueryId: activeTab.latest_query\n          ? activeTab.latest_query.id\n          : null,\n        remoteId: activeTab.saved_query?.id,\n        autorun: activeTab.autorun,\n        templateParams: activeTab.template_params || undefined,\n        dbId: activeTab.database_id,\n        schema: activeTab.schema,\n        queryLimit: activeTab.query_limit,\n        validationResult: {\n          id: null,\n          errors: [],\n          completed: false,\n        },\n        hideLeftBar: activeTab.hide_left_bar,\n      };\n    } else {\n      // dummy state, actual state will be loaded on tab switch\n      queryEditor = {\n        ...defaultQueryEditor,\n        id: id.toString(),\n        loaded: false,\n        name: label,\n      };\n    }\n    queryEditors = {\n      ...queryEditors,\n      [queryEditor.id]: queryEditor,\n    };\n  });\n\n  const tabHistory = activeTab ? [activeTab.id.toString()] : [];\n  let tables = {};\n  if (activeTab) {\n    activeTab.table_schemas\n      .filter(tableSchema => tableSchema.description !== null)\n      .forEach(tableSchema => {\n        const { dataPreviewQueryId, ...persistData } = tableSchema.description;\n        const table = {\n          dbId: tableSchema.database_id,\n          queryEditorId: tableSchema.tab_state_id.toString(),\n          schema: tableSchema.schema,\n          name: tableSchema.table,\n          expanded: tableSchema.expanded,\n          id: tableSchema.id,\n          dataPreviewQueryId,\n          persistData,\n          initialized: true,\n        };\n        tables = {\n          ...tables,\n          [table.id]: table,\n        };\n      });\n  }\n\n  const queries = { ...queries_ };\n\n  /**\n   * If the `SQLLAB_BACKEND_PERSISTENCE` feature flag is off, or if the user\n   * hasn't used SQL Lab after it has been turned on, the state will be stored\n   * in the browser's local storage.\n   */\n  if (\n    localStorage.getItem('redux') &&\n    JSON.parse(localStorage.getItem('redux')).sqlLab\n  ) {\n    const { sqlLab } = JSON.parse(localStorage.getItem('redux'));\n\n    if (sqlLab.queryEditors.length === 0) {\n      // migration was successful\n      localStorage.removeItem('redux');\n    } else {\n      unsavedQueryEditor = sqlLab.unsavedQueryEditor || {};\n      // add query editors and tables to state with a special flag so they can\n      // be migrated if the `SQLLAB_BACKEND_PERSISTENCE` feature flag is on\n      sqlLab.queryEditors.forEach(qe => {\n        queryEditors = {\n          ...queryEditors,\n          [qe.id]: {\n            ...queryEditors[qe.id],\n            ...qe,\n            name: qe.title || qe.name,\n            ...(unsavedQueryEditor.id === qe.id && unsavedQueryEditor),\n            inLocalStorage: true,\n            loaded: true,\n          },\n        };\n      });\n      const expandedTables = new Set();\n      tables = sqlLab.tables.reduce((merged, table) => {\n        const expanded = !expandedTables.has(table.queryEditorId);\n        if (expanded) {\n          expandedTables.add(table.queryEditorId);\n        }\n        return {\n          ...merged,\n          [table.id]: {\n            ...tables[table.id],\n            ...table,\n            expanded,\n          },\n        };\n      }, tables);\n      Object.values(sqlLab.queries).forEach(query => {\n        queries[query.id] = { ...query, inLocalStorage: true };\n      });\n      tabHistory.push(...sqlLab.tabHistory);\n    }\n  }\n\n  return {\n    sqlLab: {\n      activeSouthPaneTab: 'Results',\n      alerts: [],\n      databases,\n      offline: false,\n      queries,\n      queryEditors: Object.values(queryEditors),\n      tabHistory: dedupeTabHistory(tabHistory),\n      tables: Object.values(tables),\n      queriesLastUpdate: Date.now(),\n      user,\n      unsavedQueryEditor,\n      queryCostEstimates: {},\n    },\n    requestedQuery,\n    messageToasts: getToastsFromPyFlashMessages(\n      (common || {}).flash_messages || [],\n    ),\n    localStorageUsageInKilobytes: 0,\n    common: {\n      flash_messages: common.flash_messages,\n      conf: common.conf,\n    },\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}