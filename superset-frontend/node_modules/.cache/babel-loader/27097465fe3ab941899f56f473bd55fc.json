{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ContributionType, ensureIsArray, getColumnLabel, getMetricLabel, isDefined, t } from '@superset-ui/core';\nimport { isDataset } from '../types';\nimport { isTemporalColumn } from '../utils';\nimport { DEFAULT_XAXIS_SORT_SERIES_DATA, SORT_SERIES_CHOICES } from '../constants';\nexport const contributionModeControl = {\n  name: 'contributionMode',\n  config: {\n    type: 'SelectControl',\n    label: t('Contribution Mode'),\n    default: null,\n    choices: [\n    [null, t('None')],\n    [ContributionType.Row, t('Row')],\n    [ContributionType.Column, t('Series')]],\n\n    description: t('Calculate contribution per series or row') } };\n\n\nfunction isTemporal(controls) {var _controls$x_axis, _controls$x_axis2, _controls$datasource;\n  return !(isDefined(controls == null ? void 0 : (_controls$x_axis = controls.x_axis) == null ? void 0 : _controls$x_axis.value) &&\n  !isTemporalColumn(getColumnLabel(controls == null ? void 0 : (_controls$x_axis2 = controls.x_axis) == null ? void 0 : _controls$x_axis2.value), controls == null ? void 0 : (_controls$datasource = controls.datasource) == null ? void 0 : _controls$datasource.datasource));\n}\nconst xAxisSortVisibility = (_ref) => {var _controls$groupby, _controls$metrics;let { controls } = _ref;return !isTemporal(controls) &&\n  ensureIsArray(controls == null ? void 0 : (_controls$groupby = controls.groupby) == null ? void 0 : _controls$groupby.value).length === 0 &&\n  ensureIsArray(controls == null ? void 0 : (_controls$metrics = controls.metrics) == null ? void 0 : _controls$metrics.value).length === 1;};\nconst xAxisMultiSortVisibility = (_ref2) => {var _controls$groupby2, _controls$metrics2;let { controls } = _ref2;return !isTemporal(controls) && (\n  !!ensureIsArray(controls == null ? void 0 : (_controls$groupby2 = controls.groupby) == null ? void 0 : _controls$groupby2.value).length ||\n  ensureIsArray(controls == null ? void 0 : (_controls$metrics2 = controls.metrics) == null ? void 0 : _controls$metrics2.value).length > 1);};\nexport const xAxisSortControl = {\n  name: 'x_axis_sort',\n  config: {\n    type: 'XAxisSortControl',\n    label: (state) => {var _state$form_data;return ((_state$form_data = state.form_data) == null ? void 0 : _state$form_data.orientation) === 'horizontal' ?\n      t('Y-Axis Sort By') :\n      t('X-Axis Sort By');},\n    description: t('Decides which column to sort the base axis by.'),\n    shouldMapStateToProps: () => true,\n    mapStateToProps: (state, controlState) => {var _controls$x_axis3, _controls$metrics3, _controls$timeseries_, _context, _controls$x_axis4, _controls$datasource2;\n      const { controls, datasource } = state;\n      const dataset = isDataset(datasource) ? datasource : undefined;\n      const columns = [controls == null ? void 0 : (_controls$x_axis3 = controls.x_axis) == null ? void 0 : _controls$x_axis3.value].filter(Boolean);\n      const metrics = [\n      ...ensureIsArray(controls == null ? void 0 : (_controls$metrics3 = controls.metrics) == null ? void 0 : _controls$metrics3.value),\n      controls == null ? void 0 : (_controls$timeseries_ = controls.timeseries_limit_metric) == null ? void 0 : _controls$timeseries_.value].\n      filter(Boolean);\n      const metricLabels = [...new Set(metrics.map(getMetricLabel))];\n      const options = [\n      ...columns.map((column) => {var _dataset$verbose_map;\n        const value = getColumnLabel(column);\n        return {\n          value,\n          label: (dataset == null ? void 0 : (_dataset$verbose_map = dataset.verbose_map) == null ? void 0 : _dataset$verbose_map[value]) || value };\n\n      }),\n      ...metricLabels.map((value) => {var _dataset$verbose_map2;return {\n          value,\n          label: (dataset == null ? void 0 : (_dataset$verbose_map2 = dataset.verbose_map) == null ? void 0 : _dataset$verbose_map2[value]) || value };})];\n\n\n      const shouldReset = !(typeof controlState.value === 'string' &&\n      _includesInstanceProperty(_context = options.map((option) => option.value)).call(_context, controlState.value) &&\n      !isTemporalColumn(getColumnLabel(controls == null ? void 0 : (_controls$x_axis4 = controls.x_axis) == null ? void 0 : _controls$x_axis4.value), controls == null ? void 0 : (_controls$datasource2 = controls.datasource) == null ? void 0 : _controls$datasource2.datasource));\n      return {\n        shouldReset,\n        options };\n\n    },\n    visibility: xAxisSortVisibility } };\n\n\nexport const xAxisSortAscControl = {\n  name: 'x_axis_sort_asc',\n  config: {\n    type: 'CheckboxControl',\n    label: (state) => {var _state$form_data2;return ((_state$form_data2 = state.form_data) == null ? void 0 : _state$form_data2.orientation) === 'horizontal' ?\n      t('Y-Axis Sort Ascending') :\n      t('X-Axis Sort Ascending');},\n    default: true,\n    description: t('Whether to sort ascending or descending on the base Axis.'),\n    visibility: xAxisSortVisibility } };\n\n\nexport const xAxisSortSeriesControl = {\n  name: 'x_axis_sort_series',\n  config: {\n    type: 'SelectControl',\n    freeForm: false,\n    label: (state) => {var _state$form_data3;return ((_state$form_data3 = state.form_data) == null ? void 0 : _state$form_data3.orientation) === 'horizontal' ?\n      t('Y-Axis Sort By') :\n      t('X-Axis Sort By');},\n    choices: SORT_SERIES_CHOICES,\n    default: DEFAULT_XAXIS_SORT_SERIES_DATA.sort_series_type,\n    renderTrigger: true,\n    description: t('Decides which measure to sort the base axis by.'),\n    visibility: xAxisMultiSortVisibility } };\n\n\nexport const xAxisSortSeriesAscendingControl = {\n  name: 'x_axis_sort_series_ascending',\n  config: {\n    type: 'CheckboxControl',\n    label: (state) => {var _state$form_data4;return ((_state$form_data4 = state.form_data) == null ? void 0 : _state$form_data4.orientation) === 'horizontal' ?\n      t('Y-Axis Sort Ascending') :\n      t('X-Axis Sort Ascending');},\n    default: DEFAULT_XAXIS_SORT_SERIES_DATA.sort_series_ascending,\n    description: t('Whether to sort ascending or descending on the base Axis.'),\n    renderTrigger: true,\n    visibility: xAxisMultiSortVisibility } };;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(contributionModeControl, \"contributionModeControl\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-chart-controls/src/shared-controls/customControls.tsx\");reactHotLoader.register(isTemporal, \"isTemporal\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-chart-controls/src/shared-controls/customControls.tsx\");reactHotLoader.register(xAxisSortVisibility, \"xAxisSortVisibility\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-chart-controls/src/shared-controls/customControls.tsx\");reactHotLoader.register(xAxisMultiSortVisibility, \"xAxisMultiSortVisibility\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-chart-controls/src/shared-controls/customControls.tsx\");reactHotLoader.register(xAxisSortControl, \"xAxisSortControl\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-chart-controls/src/shared-controls/customControls.tsx\");reactHotLoader.register(xAxisSortAscControl, \"xAxisSortAscControl\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-chart-controls/src/shared-controls/customControls.tsx\");reactHotLoader.register(xAxisSortSeriesControl, \"xAxisSortSeriesControl\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-chart-controls/src/shared-controls/customControls.tsx\");reactHotLoader.register(xAxisSortSeriesAscendingControl, \"xAxisSortSeriesAscendingControl\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-chart-controls/src/shared-controls/customControls.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"wYAAA;;;;;;;;;;;;;;;;;;AAmBA,SACEA,gBADF,EAEEC,aAFF,EAGEC,cAHF,EAIEC,cAJF,EAKEC,SALF,EAQEC,CARF,QASO,mBATP;AAUA,SAIEC,SAJF,QAKO,UALP;AAMA,SAASC,gBAAT,QAAiC,UAAjC;AACA,SACEC,8BADF,EAEEC,mBAFF,QAGO,cAHP;AAKA,OAAO,MAAMC,uBAAuB,GAAG;EACrCC,IAAI,EAAE,kBAD+B;EAErCC,MAAM,EAAE;IACNC,IAAI,EAAE,eADA;IAENC,KAAK,EAAET,CAAC,CAAC,mBAAD,CAFF;IAGNU,OAAO,EAAE,IAHH;IAINC,OAAO,EAAE;IACP,CAAC,IAAD,EAAOX,CAAC,CAAC,MAAD,CAAR,CADO;IAEP,CAACL,gBAAgB,CAACiB,GAAlB,EAAuBZ,CAAC,CAAC,KAAD,CAAxB,CAFO;IAGP,CAACL,gBAAgB,CAACkB,MAAlB,EAA0Bb,CAAC,CAAC,QAAD,CAA3B,CAHO,CAJH;;IASNc,WAAW,EAAEd,CAAC,CAAC,0CAAD,CATR,EAF6B,EAAhC;;;AAeP,SAASe,UAAT,CAAoBC,QAApB,EAAiD;EAC/C,OAAO,EACLjB,SAAS,CAACiB,QAAD,wCAACA,QAAQ,CAAEC,MAAX,qBAAC,iBAAkBC,KAAnB,CAAT;EACA,CAAChB,gBAAgB,CACfL,cAAc,CAACmB,QAAD,yCAACA,QAAQ,CAAEC,MAAX,qBAAC,kBAAkBC,KAAnB,CADC,EAEfF,QAFe,4CAEfA,QAAQ,CAAEG,UAFK,qBAEf,qBAAsBA,UAFP,CAFZ,CAAP;AAOD;AAED,MAAMC,mBAAmB,GAAG,wDAAC,EAAEJ,QAAF,EAAD,eAC1B,CAACD,UAAU,CAACC,QAAD,CAAX;EACApB,aAAa,CAACoB,QAAD,yCAACA,QAAQ,CAAEK,OAAX,qBAAC,kBAAmBH,KAApB,CAAb,CAAwCI,MAAxC,KAAmD,CADnD;EAEA1B,aAAa,CAACoB,QAAD,yCAACA,QAAQ,CAAEO,OAAX,qBAAC,kBAAmBL,KAApB,CAAb,CAAwCI,MAAxC,KAAmD,CAHzB,EAA5B;AAKA,MAAME,wBAAwB,GAAG,2DAAC,EAChCR,QADgC,EAAD,gBAK/B,CAACD,UAAU,CAACC,QAAD,CAAX;EACC,CAAC,CAACpB,aAAa,CAACoB,QAAD,0CAACA,QAAQ,CAAEK,OAAX,qBAAC,mBAAmBH,KAApB,CAAb,CAAwCI,MAA1C;EACC1B,aAAa,CAACoB,QAAD,0CAACA,QAAQ,CAAEO,OAAX,qBAAC,mBAAmBL,KAApB,CAAb,CAAwCI,MAAxC,GAAiD,CAFnD,CAL+B,EAAjC;AASA,OAAO,MAAMG,gBAAgB,GAAG;EAC9BnB,IAAI,EAAE,aADwB;EAE9BC,MAAM,EAAE;IACNC,IAAI,EAAE,kBADA;IAENC,KAAK,EAAE,CAACiB,KAAD,kCACL,0BAAK,CAACC,SAAN,sCAAiBC,WAAjB,MAAiC,YAAjC;MACI5B,CAAC,CAAC,gBAAD,CADL;MAEIA,CAAC,CAAC,gBAAD,CAHA,EAFD;IAMNc,WAAW,EAAEd,CAAC,CAAC,gDAAD,CANR;IAON6B,qBAAqB,EAAE,MAAM,IAPvB;IAQNC,eAAe,EAAE,CAACJ,KAAD,EAA2BK,YAA3B,KAAyD;MACxE,MAAM,EAAEf,QAAF,EAAYG,UAAZ,KAA2BO,KAAjC;MACA,MAAMM,OAAO,GAAG/B,SAAS,CAACkB,UAAD,CAAT,GAAwBA,UAAxB,GAAqCc,SAArD;MACA,MAAMC,OAAO,GAAG,CAAClB,QAAD,yCAACA,QAAQ,CAAEC,MAAX,qBAAC,kBAAkBC,KAAnB,EAA6CiB,MAA7C,CACdC,OADc,CAAhB;MAGA,MAAMb,OAAO,GAAG;MACd,GAAG3B,aAAa,CAACoB,QAAD,0CAACA,QAAQ,CAAEO,OAAX,qBAAC,mBAAmBL,KAApB,CADF;MAEdF,QAFc,6CAEdA,QAAQ,CAAEqB,uBAFI,qBAEd,sBAAmCnB,KAFrB;MAGdiB,MAHc,CAGPC,OAHO,CAAhB;MAIA,MAAME,YAAY,GAAG,CAAC,GAAG,IAAIC,GAAJ,CAAQhB,OAAO,CAACiB,GAAR,CAAY1C,cAAZ,CAAR,CAAJ,CAArB;MACA,MAAM2C,OAAO,GAAG;MACd,GAAGP,OAAO,CAACM,GAAR,CAAY,OAAM,KAAG;QACtB,MAAMtB,KAAK,GAAGrB,cAAc,CAAC6C,MAAD,CAA5B;QACA,OAAO;UACLxB,KADK;UAELT,KAAK,EAAE,QAAO,QAAP,2CAAO,CAAEkC,WAAT,0CAAuBzB,KAAvB,MAAiCA,KAFnC,EAAP;;MAID,CANE,CADW;MAQd,GAAGoB,YAAY,CAACE,GAAb,CAAiB,MAAK,uCAAK;UAC5BtB,KAD4B;UAE5BT,KAAK,EAAE,QAAO,QAAP,4CAAO,CAAEkC,WAAT,2CAAuBzB,KAAvB,MAAiCA,KAFZ,EAAL,EAAtB,CARW,CAAhB;;;MAcA,MAAM0B,WAAW,GAAG,EAClB,OAAOb,YAAY,CAACb,KAApB,KAA8B,QAA9B;MACA,4CAAO,CAACsB,GAAR,CAAY,OAAM,KAAIK,MAAM,CAAC3B,KAA7B,kBAA6Ca,YAAY,CAACb,KAA1D,CADA;MAEA,CAAChB,gBAAgB,CACfL,cAAc,CAACmB,QAAD,yCAACA,QAAQ,CAAEC,MAAX,qBAAC,kBAAkBC,KAAnB,CADC,EAEfF,QAFe,6CAEfA,QAAQ,CAAEG,UAFK,qBAEf,sBAAsBA,UAFP,CAHC,CAApB;MASA,OAAO;QACLyB,WADK;QAELH,OAFK,EAAP;;IAID,CA9CK;IA+CNK,UAAU,EAAE1B,mBA/CN,EAFsB,EAAzB;;;AAqDP,OAAO,MAAM2B,mBAAmB,GAAG;EACjCzC,IAAI,EAAE,iBAD2B;EAEjCC,MAAM,EAAE;IACNC,IAAI,EAAE,iBADA;IAENC,KAAK,EAAE,CAACiB,KAAD,mCACL,2BAAK,CAACC,SAAN,uCAAiBC,WAAjB,MAAiC,YAAjC;MACI5B,CAAC,CAAC,uBAAD,CADL;MAEIA,CAAC,CAAC,uBAAD,CAHA,EAFD;IAMNU,OAAO,EAAE,IANH;IAONI,WAAW,EAAEd,CAAC,CAAC,2DAAD,CAPR;IAQN8C,UAAU,EAAE1B,mBARN,EAFyB,EAA5B;;;AAcP,OAAO,MAAM4B,sBAAsB,GAAG;EACpC1C,IAAI,EAAE,oBAD8B;EAEpCC,MAAM,EAAE;IACNC,IAAI,EAAE,eADA;IAENyC,QAAQ,EAAE,KAFJ;IAGNxC,KAAK,EAAE,CAACiB,KAAD,mCACL,2BAAK,CAACC,SAAN,uCAAiBC,WAAjB,MAAiC,YAAjC;MACI5B,CAAC,CAAC,gBAAD,CADL;MAEIA,CAAC,CAAC,gBAAD,CAHA,EAHD;IAONW,OAAO,EAAEP,mBAPH;IAQNM,OAAO,EAAEP,8BAA8B,CAAC+C,gBARlC;IASNC,aAAa,EAAE,IATT;IAUNrC,WAAW,EAAEd,CAAC,CAAC,iDAAD,CAVR;IAWN8C,UAAU,EAAEtB,wBAXN,EAF4B,EAA/B;;;AAiBP,OAAO,MAAM4B,+BAA+B,GAAG;EAC7C9C,IAAI,EAAE,8BADuC;EAE7CC,MAAM,EAAE;IACNC,IAAI,EAAE,iBADA;IAENC,KAAK,EAAE,CAACiB,KAAD,mCACL,2BAAK,CAACC,SAAN,uCAAiBC,WAAjB,MAAiC,YAAjC;MACI5B,CAAC,CAAC,uBAAD,CADL;MAEIA,CAAC,CAAC,uBAAD,CAHA,EAFD;IAMNU,OAAO,EAAEP,8BAA8B,CAACkD,qBANlC;IAONvC,WAAW,EAAEd,CAAC,CAAC,2DAAD,CAPR;IAQNmD,aAAa,EAAE,IART;IASNL,UAAU,EAAEtB,wBATN,EAFqC,EAAxC,C,iLA3HMnB,uB,oMAeJU,U,uLAUHK,mB,gMAKAI,wB,qMASOC,gB,6LAqDAsB,mB,gMAcAC,sB,mMAiBAI,+B","names":["ContributionType","ensureIsArray","getColumnLabel","getMetricLabel","isDefined","t","isDataset","isTemporalColumn","DEFAULT_XAXIS_SORT_SERIES_DATA","SORT_SERIES_CHOICES","contributionModeControl","name","config","type","label","default","choices","Row","Column","description","isTemporal","controls","x_axis","value","datasource","xAxisSortVisibility","groupby","length","metrics","xAxisMultiSortVisibility","xAxisSortControl","state","form_data","orientation","shouldMapStateToProps","mapStateToProps","controlState","dataset","undefined","columns","filter","Boolean","timeseries_limit_metric","metricLabels","Set","map","options","column","verbose_map","shouldReset","option","visibility","xAxisSortAscControl","xAxisSortSeriesControl","freeForm","sort_series_type","renderTrigger","xAxisSortSeriesAscendingControl","sort_series_ascending"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-chart-controls/src/shared-controls/customControls.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport {\n  ContributionType,\n  ensureIsArray,\n  getColumnLabel,\n  getMetricLabel,\n  isDefined,\n  QueryFormColumn,\n  QueryFormMetric,\n  t,\n} from '@superset-ui/core';\nimport {\n  ControlPanelState,\n  ControlState,\n  ControlStateMapping,\n  isDataset,\n} from '../types';\nimport { isTemporalColumn } from '../utils';\nimport {\n  DEFAULT_XAXIS_SORT_SERIES_DATA,\n  SORT_SERIES_CHOICES,\n} from '../constants';\n\nexport const contributionModeControl = {\n  name: 'contributionMode',\n  config: {\n    type: 'SelectControl',\n    label: t('Contribution Mode'),\n    default: null,\n    choices: [\n      [null, t('None')],\n      [ContributionType.Row, t('Row')],\n      [ContributionType.Column, t('Series')],\n    ],\n    description: t('Calculate contribution per series or row'),\n  },\n};\n\nfunction isTemporal(controls: ControlStateMapping): boolean {\n  return !(\n    isDefined(controls?.x_axis?.value) &&\n    !isTemporalColumn(\n      getColumnLabel(controls?.x_axis?.value as QueryFormColumn),\n      controls?.datasource?.datasource,\n    )\n  );\n}\n\nconst xAxisSortVisibility = ({ controls }: { controls: ControlStateMapping }) =>\n  !isTemporal(controls) &&\n  ensureIsArray(controls?.groupby?.value).length === 0 &&\n  ensureIsArray(controls?.metrics?.value).length === 1;\n\nconst xAxisMultiSortVisibility = ({\n  controls,\n}: {\n  controls: ControlStateMapping;\n}) =>\n  !isTemporal(controls) &&\n  (!!ensureIsArray(controls?.groupby?.value).length ||\n    ensureIsArray(controls?.metrics?.value).length > 1);\n\nexport const xAxisSortControl = {\n  name: 'x_axis_sort',\n  config: {\n    type: 'XAxisSortControl',\n    label: (state: ControlPanelState) =>\n      state.form_data?.orientation === 'horizontal'\n        ? t('Y-Axis Sort By')\n        : t('X-Axis Sort By'),\n    description: t('Decides which column to sort the base axis by.'),\n    shouldMapStateToProps: () => true,\n    mapStateToProps: (state: ControlPanelState, controlState: ControlState) => {\n      const { controls, datasource } = state;\n      const dataset = isDataset(datasource) ? datasource : undefined;\n      const columns = [controls?.x_axis?.value as QueryFormColumn].filter(\n        Boolean,\n      );\n      const metrics = [\n        ...ensureIsArray(controls?.metrics?.value as QueryFormMetric),\n        controls?.timeseries_limit_metric?.value as QueryFormMetric,\n      ].filter(Boolean);\n      const metricLabels = [...new Set(metrics.map(getMetricLabel))];\n      const options = [\n        ...columns.map(column => {\n          const value = getColumnLabel(column);\n          return {\n            value,\n            label: dataset?.verbose_map?.[value] || value,\n          };\n        }),\n        ...metricLabels.map(value => ({\n          value,\n          label: dataset?.verbose_map?.[value] || value,\n        })),\n      ];\n\n      const shouldReset = !(\n        typeof controlState.value === 'string' &&\n        options.map(option => option.value).includes(controlState.value) &&\n        !isTemporalColumn(\n          getColumnLabel(controls?.x_axis?.value as QueryFormColumn),\n          controls?.datasource?.datasource,\n        )\n      );\n\n      return {\n        shouldReset,\n        options,\n      };\n    },\n    visibility: xAxisSortVisibility,\n  },\n};\n\nexport const xAxisSortAscControl = {\n  name: 'x_axis_sort_asc',\n  config: {\n    type: 'CheckboxControl',\n    label: (state: ControlPanelState) =>\n      state.form_data?.orientation === 'horizontal'\n        ? t('Y-Axis Sort Ascending')\n        : t('X-Axis Sort Ascending'),\n    default: true,\n    description: t('Whether to sort ascending or descending on the base Axis.'),\n    visibility: xAxisSortVisibility,\n  },\n};\n\nexport const xAxisSortSeriesControl = {\n  name: 'x_axis_sort_series',\n  config: {\n    type: 'SelectControl',\n    freeForm: false,\n    label: (state: ControlPanelState) =>\n      state.form_data?.orientation === 'horizontal'\n        ? t('Y-Axis Sort By')\n        : t('X-Axis Sort By'),\n    choices: SORT_SERIES_CHOICES,\n    default: DEFAULT_XAXIS_SORT_SERIES_DATA.sort_series_type,\n    renderTrigger: true,\n    description: t('Decides which measure to sort the base axis by.'),\n    visibility: xAxisMultiSortVisibility,\n  },\n};\n\nexport const xAxisSortSeriesAscendingControl = {\n  name: 'x_axis_sort_series_ascending',\n  config: {\n    type: 'CheckboxControl',\n    label: (state: ControlPanelState) =>\n      state.form_data?.orientation === 'horizontal'\n        ? t('Y-Axis Sort Ascending')\n        : t('X-Axis Sort Ascending'),\n    default: DEFAULT_XAXIS_SORT_SERIES_DATA.sort_series_ascending,\n    description: t('Whether to sort ascending or descending on the base Axis.'),\n    renderTrigger: true,\n    visibility: xAxisMultiSortVisibility,\n  },\n};\n"]},"metadata":{},"sourceType":"module"}