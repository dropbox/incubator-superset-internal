{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { styled, useTheme, t } from '@superset-ui/core';\nimport { AntdDropdown } from 'src/components';\nimport { Menu } from 'src/components/Menu';\nimport Icons from 'src/components/Icons';\nimport { queryEditorSetQueryLimit } from 'src/SqlLab/actions/sqlLab';\nimport useQueryEditor from 'src/SqlLab/hooks/useQueryEditor';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport const LIMIT_DROPDOWN = [10, 100, 1000, 10000, 100000];\nexport function convertToNumWithSpaces(num) {\n  return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1 ');\n}\nconst LimitSelectStyled = styled.span`\n  ${(_ref) => {let { theme } = _ref;return `\n    .ant-dropdown-trigger {\n      align-items: center;\n      color: ${theme.colors.grayscale.dark2};\n      display: flex;\n      font-size: 12px;\n      margin-right: ${theme.gridUnit * 2}px;\n      text-decoration: none;\n      border: 0;\n      background: transparent;\n      span {\n        display: inline-block;\n        margin-right: ${theme.gridUnit * 2}px;\n        &:last-of-type: {\n          margin-right: ${theme.gridUnit * 4}px;\n        }\n      }\n    }\n  `;}}\n`;\nfunction renderQueryLimit(maxRow, setQueryLimit) {\n  // Adding SQL_MAX_ROW value to dropdown\n  LIMIT_DROPDOWN.push(maxRow);\n  return ___EmotionJSX(Menu, null,\n  [...new Set(LIMIT_DROPDOWN)].map((limit) => ___EmotionJSX(Menu.Item, { key: `${limit}`, onClick: () => setQueryLimit(limit) },\n\n  ___EmotionJSX(\"a\", { role: \"button\" }, convertToNumWithSpaces(limit)), ' ')));\n\n\n}\nconst QueryLimitSelect = (_ref2) => {let { queryEditorId, maxRow, defaultQueryLimit } = _ref2;\n  const theme = useTheme();\n  const dispatch = useDispatch();\n  const queryEditor = useQueryEditor(queryEditorId, ['id', 'queryLimit']);\n  const queryLimit = queryEditor.queryLimit || defaultQueryLimit;\n  const setQueryLimit = (updatedQueryLimit) => dispatch(queryEditorSetQueryLimit(queryEditor, updatedQueryLimit));\n  return ___EmotionJSX(LimitSelectStyled, null,\n  ___EmotionJSX(AntdDropdown, { overlay: renderQueryLimit(maxRow, setQueryLimit), trigger: ['click'] },\n  ___EmotionJSX(\"button\", { type: \"button\", onClick: (e) => e.preventDefault() },\n  ___EmotionJSX(\"span\", null, t('LIMIT'), \":\"),\n  ___EmotionJSX(\"span\", { className: \"limitDropdown\" },\n  convertToNumWithSpaces(queryLimit)),\n\n  ___EmotionJSX(Icons.TriangleDown, { iconColor: theme.colors.grayscale.base }))));\n\n\n\n};\nexport default QueryLimitSelect;","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,MAAT,EAAiBC,QAAjB,EAA2BC,CAA3B,QAAoC,mBAApC;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,IAAT,QAAqB,qBAArB;AACA,OAAOC,KAAP,MAAkB,sBAAlB;AACA,SAASC,wBAAT,QAAyC,2BAAzC;AACA,OAAOC,cAAP,MAA2B,iCAA3B,C;AAQA,OAAO,MAAMC,cAAc,GAAG,CAAC,EAAD,EAAK,GAAL,EAAU,IAAV,EAAgB,KAAhB,EAAuB,MAAvB,CAAvB;AAEP,OAAM,SAAUC,sBAAV,CAAiCC,GAAjC,EAA4C;EAChD,OAAOA,GAAG,CAACC,QAAJ,GAAeC,OAAf,CAAuB,yBAAvB,EAAkD,KAAlD,CAAP;AACD;AAED,MAAMC,iBAAiB,GAAGb,MAAM,CAACc,IAAI;IACjC,eAAC,EAAEC,KAAF,EAAD,eAAe;;;eAGJA,KAAK,CAACC,MAAN,CAAaC,SAAb,CAAuBC,KAAK;;;sBAGrBH,KAAK,CAACI,QAAN,GAAiB,CAAC;;;;;;wBAMhBJ,KAAK,CAACI,QAAN,GAAiB,CAAC;;0BAEhBJ,KAAK,CAACI,QAAN,GAAiB,CAAC;;;;GAdxC,EAkBD;CAnBH;AAsBA,SAASC,gBAAT,CACEC,MADF,EAEEC,aAFF,EAEwC;EAEtC;EACAd,cAAc,CAACe,IAAf,CAAoBF,MAApB;EAEA,OACE,cAAC,IAAD;EACG,CAAC,GAAG,IAAIG,GAAJ,CAAQhB,cAAR,CAAJ,EAA6BiB,GAA7B,CAAiC,MAAK,KACrC,cAAC,IAAD,CAAM,IAAN,IAAW,GAAG,EAAE,GAAGC,KAAK,EAAxB,EAA4B,OAAO,EAAE,MAAMJ,aAAa,CAACI,KAAD,CAAxD;;EAEE,qBAAG,IAAI,EAAC,QAAR,IAAkBjB,sBAAsB,CAACiB,KAAD,CAAxC,CAFF,EAEuD,GAFvD,CADD,CADH,CADF;;;AAUD;AAED,MAAMC,gBAAgB,GAAG,WAIG,KAJF,EACxBC,aADwB,EAExBP,MAFwB,EAGxBQ,iBAHwB,EAIE;EAC1B,MAAMd,KAAK,GAAGd,QAAQ,EAAtB;EACA,MAAM6B,QAAQ,GAAG/B,WAAW,EAA5B;EAEA,MAAMgC,WAAW,GAAGxB,cAAc,CAACqB,aAAD,EAAgB,CAAC,IAAD,EAAO,YAAP,CAAhB,CAAlC;EACA,MAAMI,UAAU,GAAGD,WAAW,CAACC,UAAZ,IAA0BH,iBAA7C;EACA,MAAMP,aAAa,GAAG,CAACW,iBAAD,KACpBH,QAAQ,CAACxB,wBAAwB,CAACyB,WAAD,EAAcE,iBAAd,CAAzB,CADV;EAGA,OACE,cAAC,iBAAD;EACE,cAAC,YAAD,IACE,OAAO,EAAEb,gBAAgB,CAACC,MAAD,EAASC,aAAT,CAD3B,EAEE,OAAO,EAAE,CAAC,OAAD,CAFX;EAIE,0BAAQ,IAAI,EAAC,QAAb,EAAsB,OAAO,EAAE,EAAC,KAAIY,CAAC,CAACC,cAAF,EAApC;EACE,4BAAOjC,CAAC,CAAC,OAAD,CAAR,MADF;EAEE,wBAAM,SAAS,EAAC,eAAhB;EACGO,sBAAsB,CAACuB,UAAD,CADzB,CAFF;;EAKE,cAAC,KAAD,CAAO,YAAP,IAAoB,SAAS,EAAEjB,KAAK,CAACC,MAAN,CAAaC,SAAb,CAAuBmB,IAAtD,GALF,CAJF,CADF,CADF;;;;AAgBD,CA7BD;AA+BA,eAAeT,gBAAf","names":["React","useDispatch","styled","useTheme","t","AntdDropdown","Menu","Icons","queryEditorSetQueryLimit","useQueryEditor","LIMIT_DROPDOWN","convertToNumWithSpaces","num","toString","replace","LimitSelectStyled","span","theme","colors","grayscale","dark2","gridUnit","renderQueryLimit","maxRow","setQueryLimit","push","Set","map","limit","QueryLimitSelect","queryEditorId","defaultQueryLimit","dispatch","queryEditor","queryLimit","updatedQueryLimit","e","preventDefault","base"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/SqlLab/components/QueryLimitSelect/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { styled, useTheme, t } from '@superset-ui/core';\nimport { AntdDropdown } from 'src/components';\nimport { Menu } from 'src/components/Menu';\nimport Icons from 'src/components/Icons';\nimport { queryEditorSetQueryLimit } from 'src/SqlLab/actions/sqlLab';\nimport useQueryEditor from 'src/SqlLab/hooks/useQueryEditor';\n\nexport interface QueryLimitSelectProps {\n  queryEditorId: string;\n  maxRow: number;\n  defaultQueryLimit: number;\n}\n\nexport const LIMIT_DROPDOWN = [10, 100, 1000, 10000, 100000];\n\nexport function convertToNumWithSpaces(num: number) {\n  return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1 ');\n}\n\nconst LimitSelectStyled = styled.span`\n  ${({ theme }) => `\n    .ant-dropdown-trigger {\n      align-items: center;\n      color: ${theme.colors.grayscale.dark2};\n      display: flex;\n      font-size: 12px;\n      margin-right: ${theme.gridUnit * 2}px;\n      text-decoration: none;\n      border: 0;\n      background: transparent;\n      span {\n        display: inline-block;\n        margin-right: ${theme.gridUnit * 2}px;\n        &:last-of-type: {\n          margin-right: ${theme.gridUnit * 4}px;\n        }\n      }\n    }\n  `}\n`;\n\nfunction renderQueryLimit(\n  maxRow: number,\n  setQueryLimit: (limit: number) => void,\n) {\n  // Adding SQL_MAX_ROW value to dropdown\n  LIMIT_DROPDOWN.push(maxRow);\n\n  return (\n    <Menu>\n      {[...new Set(LIMIT_DROPDOWN)].map(limit => (\n        <Menu.Item key={`${limit}`} onClick={() => setQueryLimit(limit)}>\n          {/* // eslint-disable-line no-use-before-define */}\n          <a role=\"button\">{convertToNumWithSpaces(limit)}</a>{' '}\n        </Menu.Item>\n      ))}\n    </Menu>\n  );\n}\n\nconst QueryLimitSelect = ({\n  queryEditorId,\n  maxRow,\n  defaultQueryLimit,\n}: QueryLimitSelectProps) => {\n  const theme = useTheme();\n  const dispatch = useDispatch();\n\n  const queryEditor = useQueryEditor(queryEditorId, ['id', 'queryLimit']);\n  const queryLimit = queryEditor.queryLimit || defaultQueryLimit;\n  const setQueryLimit = (updatedQueryLimit: number) =>\n    dispatch(queryEditorSetQueryLimit(queryEditor, updatedQueryLimit));\n\n  return (\n    <LimitSelectStyled>\n      <AntdDropdown\n        overlay={renderQueryLimit(maxRow, setQueryLimit)}\n        trigger={['click']}\n      >\n        <button type=\"button\" onClick={e => e.preventDefault()}>\n          <span>{t('LIMIT')}:</span>\n          <span className=\"limitDropdown\">\n            {convertToNumWithSpaces(queryLimit)}\n          </span>\n          <Icons.TriangleDown iconColor={theme.colors.grayscale.base} />\n        </button>\n      </AntdDropdown>\n    </LimitSelectStyled>\n  );\n};\n\nexport default QueryLimitSelect;\n"]},"metadata":{},"sourceType":"module"}