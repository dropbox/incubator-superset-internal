{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { t } from '@superset-ui/core';\nimport { DASHBOARD_ROOT_ID } from 'src/dashboard/util/constants';\nimport { CHART_TYPE, DASHBOARD_ROOT_TYPE } from 'src/dashboard/util/componentTypes';\nimport { buildTree } from './utils';\n// eslint-disable-next-line import/prefer-default-export\nexport function useFilterScopeTree(currentChartId, initiallyExcludedCharts, buildTreeLeafTitle, title) {if (initiallyExcludedCharts === void 0) {initiallyExcludedCharts = [];}if (buildTreeLeafTitle === void 0) {buildTreeLeafTitle = (label) => label;}if (title === void 0) {title = t('All panels');}\n  const layout = useSelector((_ref) => {let { dashboardLayout: { present } } = _ref;return present;});\n  const charts = useSelector((_ref2) => {let { charts } = _ref2;return charts;});\n  const tree = {\n    children: [],\n    key: DASHBOARD_ROOT_ID,\n    type: DASHBOARD_ROOT_TYPE,\n    title };\n\n  // We need to get only nodes that have charts as children or grandchildren\n  const validNodes = useMemo(() => Object.values(layout).reduce((acc, cur) => {\n    const { id, parents = [], type, meta } = cur;\n    if (type === CHART_TYPE && currentChartId !== (meta == null ? void 0 : meta.chartId)) {\n      return [...new Set([...acc, ...parents, id])];\n    }\n    return acc;\n  }, []), [layout, currentChartId]);\n  useMemo(() => {\n    buildTree(layout[DASHBOARD_ROOT_ID], tree, layout, charts, validNodes, initiallyExcludedCharts, buildTreeLeafTitle);\n  }, [layout, tree, charts, initiallyExcludedCharts, buildTreeLeafTitle]);\n  return { treeData: [tree], layout };\n}__signature__(useFilterScopeTree, \"useSelector{layout}\\nuseSelector{charts}\\nuseMemo{validNodes}\\nuseMemo{}\", () => [useSelector, useSelector]);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(useFilterScopeTree, \"useFilterScopeTree\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/FilterScope/state.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAkBA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,CAAT,QAAkB,mBAAlB;AAEA,SAASC,iBAAT,QAAkC,8BAAlC;AACA,SACEC,UADF,EAEEC,mBAFF,QAGO,mCAHP;AAKA,SAASC,SAAT,QAA0B,SAA1B;AAEA;AACA,OAAM,SAAUC,kBAAV,CACJC,cADI,EAEJC,uBAFI,EAGJC,kBAHI,EAIJC,KAJI,EAImB,KAFvBF,uBAEuB,cAFvBA,uBAEuB,GAFa,EAEb,MADvBC,kBACuB,cADvBA,kBACuB,GADkB,MAAK,KAAIE,KAC3B,MAAvBD,KAAuB,cAAvBA,KAAuB,GAAfT,CAAC,CAAC,YAAD,CAAc;EAKvB,MAAMW,MAAM,GAAGZ,WAAW,CACxB,eAAC,EAAEa,eAAe,EAAE,EAAEC,OAAF,EAAnB,EAAD,eAAsCA,OAAtC,EADwB,CAA1B;EAIA,MAAMC,MAAM,GAAGf,WAAW,CAAoB,gBAAC,EAAEe,MAAF,EAAD,gBAAgBA,MAAhB,EAApB,CAA1B;EACA,MAAMC,IAAI,GAAG;IACXC,QAAQ,EAAE,EADC;IAEXC,GAAG,EAAEhB,iBAFM;IAGXiB,IAAI,EAAEf,mBAHK;IAIXM,KAJW,EAAb;;EAOA;EACA,MAAMU,UAAU,GAAGrB,OAAO,CACxB,MACEsB,MAAM,CAACC,MAAP,CAAcV,MAAd,EAAsBW,MAAtB,CAAuC,CAACC,GAAD,EAAMC,GAAN,KAAa;IAClD,MAAM,EAAEC,EAAF,EAAMC,OAAO,GAAG,EAAhB,EAAoBR,IAApB,EAA0BS,IAA1B,KAAmCH,GAAzC;IACA,IAAIN,IAAI,KAAKhB,UAAT,IAAuBI,cAAc,MAAKqB,IAAL,oBAAKA,IAAI,CAAEC,OAAX,CAAzC,EAA6D;MAC3D,OAAO,CAAC,GAAG,IAAIC,GAAJ,CAAQ,CAAC,GAAGN,GAAJ,EAAS,GAAGG,OAAZ,EAAqBD,EAArB,CAAR,CAAJ,CAAP;IACD;IACD,OAAOF,GAAP;EACD,CAND,EAMG,EANH,CAFsB,EASxB,CAACZ,MAAD,EAASL,cAAT,CATwB,CAA1B;EAYAR,OAAO,CAAC,MAAK;IACXM,SAAS,CACPO,MAAM,CAACV,iBAAD,CADC,EAEPc,IAFO,EAGPJ,MAHO,EAIPG,MAJO,EAKPK,UALO,EAMPZ,uBANO,EAOPC,kBAPO,CAAT;EASD,CAVM,EAUJ,CAACG,MAAD,EAASI,IAAT,EAAeD,MAAf,EAAuBP,uBAAvB,EAAgDC,kBAAhD,CAVI,CAAP;EAYA,OAAO,EAAEsB,QAAQ,EAAE,CAACf,IAAD,CAAZ,EAAoBJ,MAApB,EAAP;AACD,C,cA/CeN,kB,qFASCN,W,EAIAA,W,oLAbDM,kB","names":["useMemo","useSelector","t","DASHBOARD_ROOT_ID","CHART_TYPE","DASHBOARD_ROOT_TYPE","buildTree","useFilterScopeTree","currentChartId","initiallyExcludedCharts","buildTreeLeafTitle","title","label","layout","dashboardLayout","present","charts","tree","children","key","type","validNodes","Object","values","reduce","acc","cur","id","parents","meta","chartId","Set","treeData"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/FilterScope/state.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { t } from '@superset-ui/core';\nimport { Charts, Layout, RootState } from 'src/dashboard/types';\nimport { DASHBOARD_ROOT_ID } from 'src/dashboard/util/constants';\nimport {\n  CHART_TYPE,\n  DASHBOARD_ROOT_TYPE,\n} from 'src/dashboard/util/componentTypes';\nimport { BuildTreeLeafTitle, TreeItem } from './types';\nimport { buildTree } from './utils';\n\n// eslint-disable-next-line import/prefer-default-export\nexport function useFilterScopeTree(\n  currentChartId: number | undefined,\n  initiallyExcludedCharts: number[] = [],\n  buildTreeLeafTitle: BuildTreeLeafTitle = label => label,\n  title = t('All panels'),\n): {\n  treeData: [TreeItem];\n  layout: Layout;\n} {\n  const layout = useSelector<RootState, Layout>(\n    ({ dashboardLayout: { present } }) => present,\n  );\n\n  const charts = useSelector<RootState, Charts>(({ charts }) => charts);\n  const tree = {\n    children: [],\n    key: DASHBOARD_ROOT_ID,\n    type: DASHBOARD_ROOT_TYPE,\n    title,\n  };\n\n  // We need to get only nodes that have charts as children or grandchildren\n  const validNodes = useMemo(\n    () =>\n      Object.values(layout).reduce<string[]>((acc, cur) => {\n        const { id, parents = [], type, meta } = cur;\n        if (type === CHART_TYPE && currentChartId !== meta?.chartId) {\n          return [...new Set([...acc, ...parents, id])];\n        }\n        return acc;\n      }, []),\n    [layout, currentChartId],\n  );\n\n  useMemo(() => {\n    buildTree(\n      layout[DASHBOARD_ROOT_ID],\n      tree,\n      layout,\n      charts,\n      validNodes,\n      initiallyExcludedCharts,\n      buildTreeLeafTitle,\n    );\n  }, [layout, tree, charts, initiallyExcludedCharts, buildTreeLeafTitle]);\n\n  return { treeData: [tree], layout };\n}\n"]},"metadata":{},"sourceType":"module"}