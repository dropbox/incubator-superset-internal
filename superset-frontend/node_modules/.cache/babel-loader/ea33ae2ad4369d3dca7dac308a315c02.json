{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitationsxw\n * under the License.\n */\nimport { ensureIsArray, getColumnLabel, getMetricLabel } from '@superset-ui/core';\nconst PERCENTILE_REGEX = /(\\d+)\\/(\\d+) percentiles/;\nexport const boxplotOperator = (formData, queryObject) => {\n  const { groupby, whiskerOptions } = formData;\n  if (whiskerOptions) {\n    let whiskerType;\n    let percentiles;\n    const percentileMatch = PERCENTILE_REGEX.exec(whiskerOptions);\n    if (whiskerOptions === 'Tukey' || !whiskerOptions) {\n      whiskerType = 'tukey';\n    } else\n    if (whiskerOptions === 'Min/max (no outliers)') {\n      whiskerType = 'min/max';\n    } else\n    if (percentileMatch) {\n      whiskerType = 'percentile';\n      percentiles = [\n      parseInt(percentileMatch[1], 10),\n      parseInt(percentileMatch[2], 10)];\n\n    } else\n    {\n      throw new Error(`Unsupported whisker type: ${whiskerOptions}`);\n    }\n    return {\n      operation: 'boxplot',\n      options: {\n        whisker_type: whiskerType,\n        percentiles,\n        groupby: ensureIsArray(groupby).map(getColumnLabel),\n        metrics: ensureIsArray(queryObject.metrics).map(getMetricLabel) } };\n\n\n  }\n  return undefined;\n};;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(PERCENTILE_REGEX, \"PERCENTILE_REGEX\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-chart-controls/src/operators/boxplotOperator.ts\");reactHotLoader.register(boxplotOperator, \"boxplotOperator\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-chart-controls/src/operators/boxplotOperator.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAkBA,SACEA,aADF,EAEEC,cAFF,EAGEC,cAHF,QAMO,mBANP;AASA,MAAMC,gBAAgB,GAAG,0BAAzB;AAEA,OAAO,MAAMC,eAAe,GAAiD,CAC3EC,QAD2E,EAE3EC,WAF2E,KAGzE;EACF,MAAM,EAAEC,OAAF,EAAWC,cAAX,KAA8BH,QAApC;EAEA,IAAIG,cAAJ,EAAoB;IAClB,IAAIC,WAAJ;IACA,IAAIC,WAAJ;IACA,MAAMC,eAAe,GAAGR,gBAAgB,CAACS,IAAjB,CAAsBJ,cAAtB,CAAxB;IAEA,IAAIA,cAAc,KAAK,OAAnB,IAA8B,CAACA,cAAnC,EAAmD;MACjDC,WAAW,GAAG,OAAd;IACD,CAFD;IAEO,IAAID,cAAc,KAAK,uBAAvB,EAAgD;MACrDC,WAAW,GAAG,SAAd;IACD,CAFM;IAEA,IAAIE,eAAJ,EAAqB;MAC1BF,WAAW,GAAG,YAAd;MACAC,WAAW,GAAG;MACZG,QAAQ,CAACF,eAAe,CAAC,CAAD,CAAhB,EAAqB,EAArB,CADI;MAEZE,QAAQ,CAACF,eAAe,CAAC,CAAD,CAAhB,EAAqB,EAArB,CAFI,CAAd;;IAID,CANM;IAMA;MACL,MAAM,IAAIG,KAAJ,CAAU,6BAA6BN,cAAc,EAArD,CAAN;IACD;IAED,OAAO;MACLO,SAAS,EAAE,SADN;MAELC,OAAO,EAAE;QACPC,YAAY,EAAER,WADP;QAEPC,WAFO;QAGPH,OAAO,EAAEP,aAAa,CAACO,OAAD,CAAb,CAAuBW,GAAvB,CAA2BjB,cAA3B,CAHF;QAIPkB,OAAO,EAAEnB,aAAa,CAACM,WAAW,CAACa,OAAb,CAAb,CAAmCD,GAAnC,CAAuChB,cAAvC,CAJF,EAFJ,EAAP;;;EASD;EACD,OAAOkB,SAAP;AACD,CApCM,C,iLAFDjB,gB,uLAEOC,e","names":["ensureIsArray","getColumnLabel","getMetricLabel","PERCENTILE_REGEX","boxplotOperator","formData","queryObject","groupby","whiskerOptions","whiskerType","percentiles","percentileMatch","exec","parseInt","Error","operation","options","whisker_type","map","metrics","undefined"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-chart-controls/src/operators/boxplotOperator.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitationsxw\n * under the License.\n */\nimport {\n  ensureIsArray,\n  getColumnLabel,\n  getMetricLabel,\n  PostProcessingBoxplot,\n  BoxPlotQueryObjectWhiskerType,\n} from '@superset-ui/core';\nimport { PostProcessingFactory } from './types';\n\nconst PERCENTILE_REGEX = /(\\d+)\\/(\\d+) percentiles/;\n\nexport const boxplotOperator: PostProcessingFactory<PostProcessingBoxplot> = (\n  formData,\n  queryObject,\n) => {\n  const { groupby, whiskerOptions } = formData;\n\n  if (whiskerOptions) {\n    let whiskerType: BoxPlotQueryObjectWhiskerType;\n    let percentiles: [number, number] | undefined;\n    const percentileMatch = PERCENTILE_REGEX.exec(whiskerOptions as string);\n\n    if (whiskerOptions === 'Tukey' || !whiskerOptions) {\n      whiskerType = 'tukey';\n    } else if (whiskerOptions === 'Min/max (no outliers)') {\n      whiskerType = 'min/max';\n    } else if (percentileMatch) {\n      whiskerType = 'percentile';\n      percentiles = [\n        parseInt(percentileMatch[1], 10),\n        parseInt(percentileMatch[2], 10),\n      ];\n    } else {\n      throw new Error(`Unsupported whisker type: ${whiskerOptions}`);\n    }\n\n    return {\n      operation: 'boxplot',\n      options: {\n        whisker_type: whiskerType,\n        percentiles,\n        groupby: ensureIsArray(groupby).map(getColumnLabel),\n        metrics: ensureIsArray(queryObject.metrics).map(getMetricLabel),\n      },\n    };\n  }\n  return undefined;\n};\n"]},"metadata":{},"sourceType":"module"}