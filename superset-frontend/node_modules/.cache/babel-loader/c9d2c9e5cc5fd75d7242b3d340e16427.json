{"ast":null,"code":"import _cloneDeepWith from \"lodash/cloneDeepWith\"; /*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport JSONbig from 'json-bigint';\n\nexport default async function parseResponse(apiPromise, parseMethod) {\n  const response = await apiPromise;\n  // reject failed HTTP requests with the raw response\n  if (!response.ok) {\n    return Promise.reject(response);\n  }\n  if (parseMethod === null || parseMethod === 'raw') {\n    return response;\n  }\n  if (parseMethod === 'text') {\n    const text = await response.text();\n    const result = {\n      response,\n      text };\n\n    return result;\n  }\n  if (parseMethod === 'json-bigint') {\n    const rawData = await response.text();\n    const json = JSONbig.parse(rawData);\n    const result = {\n      response,\n      // `json-bigint` could not handle floats well, see sidorares/json-bigint#62\n      // TODO: clean up after json-bigint>1.0.1 is released\n      json: _cloneDeepWith(json, (value) => (value == null ? void 0 : value.isInteger == null ? void 0 : value.isInteger()) === false ? Number(value) : undefined) };\n\n    return result;\n  }\n  // by default treat this as json\n  if (parseMethod === undefined || parseMethod === 'json') {\n    const json = await response.json();\n    const result = {\n      json,\n      response };\n\n    return result;\n  }\n  throw new Error(`Expected parseResponse=json|json-bigint|text|raw|null, got '${parseMethod}'.`);\n}","map":{"version":3,"mappings":"mDAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,OAAP,MAAoB,aAApB;;AAKA,eAAe,eAAeC,aAAf,CACbC,UADa,EAEbC,WAFa,EAEE;EASf,MAAMC,QAAQ,GAAG,MAAMF,UAAvB;EACA;EACA,IAAI,CAACE,QAAQ,CAACC,EAAd,EAAkB;IAChB,OAAOC,OAAO,CAACC,MAAR,CAAeH,QAAf,CAAP;EACD;EACD,IAAID,WAAW,KAAK,IAAhB,IAAwBA,WAAW,KAAK,KAA5C,EAAmD;IACjD,OAAOC,QAAP;EACD;EACD,IAAID,WAAW,KAAK,MAApB,EAA4B;IAC1B,MAAMK,IAAI,GAAG,MAAMJ,QAAQ,CAACI,IAAT,EAAnB;IACA,MAAMC,MAAM,GAAiB;MAC3BL,QAD2B;MAE3BI,IAF2B,EAA7B;;IAIA,OAAOC,MAAP;EACD;EACD,IAAIN,WAAW,KAAK,aAApB,EAAmC;IACjC,MAAMO,OAAO,GAAG,MAAMN,QAAQ,CAACI,IAAT,EAAtB;IACA,MAAMG,IAAI,GAAGX,OAAO,CAACY,KAAR,CAAcF,OAAd,CAAb;IACA,MAAMD,MAAM,GAAiB;MAC3BL,QAD2B;MAE3B;MACA;MACAO,IAAI,EAAE,eAAcA,IAAd,EAAoB,CAACE,KAAD,KACxB,MAAK,QAAL,iBAAK,CAAEC,SAAP,yBAAK,CAAEA,SAAP,QAAyB,KAAzB,GAAiCC,MAAM,CAACF,KAAD,CAAvC,GAAiDG,SAD7C,CAJqB,EAA7B;;IAQA,OAAOP,MAAP;EACD;EACD;EACA,IAAIN,WAAW,KAAKa,SAAhB,IAA6Bb,WAAW,KAAK,MAAjD,EAAyD;IACvD,MAAMQ,IAAI,GAAG,MAAMP,QAAQ,CAACO,IAAT,EAAnB;IACA,MAAMF,MAAM,GAAiB;MAC3BE,IAD2B;MAE3BP,QAF2B,EAA7B;;IAIA,OAAOK,MAAP;EACD;EACD,MAAM,IAAIQ,KAAJ,CACJ,+DAA+Dd,WAAW,IADtE,CAAN;AAGD","names":["JSONbig","parseResponse","apiPromise","parseMethod","response","ok","Promise","reject","text","result","rawData","json","parse","value","isInteger","Number","undefined","Error"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/packages/superset-ui-core/src/connection/callApi/parseResponse.ts"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport JSONbig from 'json-bigint';\nimport { cloneDeepWith } from 'lodash';\n\nimport { ParseMethod, TextResponse, JsonResponse } from '../types';\n\nexport default async function parseResponse<T extends ParseMethod = 'json'>(\n  apiPromise: Promise<Response>,\n  parseMethod?: T,\n) {\n  type ReturnType = T extends 'raw' | null\n    ? Response\n    : T extends 'json' | 'json-bigint' | undefined\n    ? JsonResponse\n    : T extends 'text'\n    ? TextResponse\n    : never;\n  const response = await apiPromise;\n  // reject failed HTTP requests with the raw response\n  if (!response.ok) {\n    return Promise.reject(response);\n  }\n  if (parseMethod === null || parseMethod === 'raw') {\n    return response as ReturnType;\n  }\n  if (parseMethod === 'text') {\n    const text = await response.text();\n    const result: TextResponse = {\n      response,\n      text,\n    };\n    return result as ReturnType;\n  }\n  if (parseMethod === 'json-bigint') {\n    const rawData = await response.text();\n    const json = JSONbig.parse(rawData);\n    const result: JsonResponse = {\n      response,\n      // `json-bigint` could not handle floats well, see sidorares/json-bigint#62\n      // TODO: clean up after json-bigint>1.0.1 is released\n      json: cloneDeepWith(json, (value: any) =>\n        value?.isInteger?.() === false ? Number(value) : undefined,\n      ),\n    };\n    return result as ReturnType;\n  }\n  // by default treat this as json\n  if (parseMethod === undefined || parseMethod === 'json') {\n    const json = await response.json();\n    const result: JsonResponse = {\n      json,\n      response,\n    };\n    return result as ReturnType;\n  }\n  throw new Error(\n    `Expected parseResponse=json|json-bigint|text|raw|null, got '${parseMethod}'.`,\n  );\n}\n"]},"metadata":{},"sourceType":"module"}