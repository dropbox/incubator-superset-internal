{"ast":null,"code":"import _cloneDeep from \"lodash/cloneDeep\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { makeApi } from '@superset-ui/core';\n\nimport { SET_DATA_MASK_FOR_FILTER_CONFIG_FAIL, setDataMaskForFilterConfigComplete } from 'src/dataMask/actions';\nimport { dashboardInfoChanged } from './dashboardInfo';\nexport const SET_FILTER_CONFIG_BEGIN = 'SET_FILTER_CONFIG_BEGIN';\nexport const SET_FILTER_CONFIG_COMPLETE = 'SET_FILTER_CONFIG_COMPLETE';\nexport const SET_FILTER_CONFIG_FAIL = 'SET_FILTER_CONFIG_FAIL';\nexport const SET_IN_SCOPE_STATUS_OF_FILTERS = 'SET_IN_SCOPE_STATUS_OF_FILTERS';\nexport const SET_FILTER_SETS_BEGIN = 'SET_FILTER_SETS_BEGIN';\nexport const SET_FILTER_SETS_COMPLETE = 'SET_FILTER_SETS_COMPLETE';\nexport const SET_FILTER_SETS_FAIL = 'SET_FILTER_SETS_FAIL';\nexport const CREATE_FILTER_SET_BEGIN = 'CREATE_FILTER_SET_BEGIN';\nexport const CREATE_FILTER_SET_COMPLETE = 'CREATE_FILTER_SET_COMPLETE';\nexport const CREATE_FILTER_SET_FAIL = 'CREATE_FILTER_SET_FAIL';\nexport const DELETE_FILTER_SET_BEGIN = 'DELETE_FILTER_SET_BEGIN';\nexport const DELETE_FILTER_SET_COMPLETE = 'DELETE_FILTER_SET_COMPLETE';\nexport const DELETE_FILTER_SET_FAIL = 'DELETE_FILTER_SET_FAIL';\nexport const UPDATE_FILTER_SET_BEGIN = 'UPDATE_FILTER_SET_BEGIN';\nexport const UPDATE_FILTER_SET_COMPLETE = 'UPDATE_FILTER_SET_COMPLETE';\nexport const UPDATE_FILTER_SET_FAIL = 'UPDATE_FILTER_SET_FAIL';\nexport const setFilterConfiguration = (filterConfig) => async (dispatch, getState) => {var _getState$nativeFilte;\n  dispatch({\n    type: SET_FILTER_CONFIG_BEGIN,\n    filterConfig });\n\n  const { id, metadata } = getState().dashboardInfo;\n  const oldFilters = (_getState$nativeFilte = getState().nativeFilters) == null ? void 0 : _getState$nativeFilte.filters;\n  // TODO extract this out when makeApi supports url parameters\n  const updateDashboard = makeApi({\n    method: 'PUT',\n    endpoint: `/api/v1/dashboard/${id}` });\n\n  const mergedFilterConfig = filterConfig.map((filter) => {\n    const oldFilter = oldFilters[filter.id];\n    if (!oldFilter) {\n      return filter;\n    }\n    return { ...oldFilter, ...filter };\n  });\n  try {\n    const response = await updateDashboard({\n      json_metadata: JSON.stringify({\n        ...metadata,\n        native_filter_configuration: mergedFilterConfig }) });\n\n\n    dispatch(dashboardInfoChanged({\n      metadata: JSON.parse(response.result.json_metadata) }));\n\n    dispatch({\n      type: SET_FILTER_CONFIG_COMPLETE,\n      filterConfig: mergedFilterConfig });\n\n    dispatch(setDataMaskForFilterConfigComplete(mergedFilterConfig, oldFilters));\n  }\n  catch (err) {\n    dispatch({\n      type: SET_FILTER_CONFIG_FAIL,\n      filterConfig: mergedFilterConfig });\n\n    dispatch({\n      type: SET_DATA_MASK_FOR_FILTER_CONFIG_FAIL,\n      filterConfig: mergedFilterConfig });\n\n  }\n};\nexport const setInScopeStatusOfFilters = (filterScopes) => async (dispatch, getState) => {var _getState$nativeFilte2;\n  const filters = (_getState$nativeFilte2 = getState().nativeFilters) == null ? void 0 : _getState$nativeFilte2.filters;\n  const filtersWithScopes = filterScopes.map((scope) => ({\n    ...filters[scope.filterId],\n    chartsInScope: scope.chartsInScope,\n    tabsInScope: scope.tabsInScope }));\n\n  dispatch({\n    type: SET_IN_SCOPE_STATUS_OF_FILTERS,\n    filterConfig: filtersWithScopes });\n\n  // need to update native_filter_configuration in the dashboard metadata\n  const metadata = _cloneDeep(getState().dashboardInfo.metadata);\n  const filterConfig = metadata.native_filter_configuration;\n  const mergedFilterConfig = filterConfig.map((filter) => {\n    const filterWithScope = filtersWithScopes.find((scope) => scope.id === filter.id);\n    if (!filterWithScope) {\n      return filter;\n    }\n    return { ...filterWithScope, ...filter };\n  });\n  metadata.native_filter_configuration = mergedFilterConfig;\n  dispatch(dashboardInfoChanged({\n    metadata }));\n\n};\nexport const getFilterSets = (dashboardId) => async (dispatch) => {\n  const fetchFilterSets = makeApi({\n    method: 'GET',\n    endpoint: `/api/v1/dashboard/${dashboardId}/filtersets` });\n\n  dispatch({\n    type: SET_FILTER_SETS_BEGIN });\n\n  const response = await fetchFilterSets(null);\n  dispatch({\n    type: SET_FILTER_SETS_COMPLETE,\n    filterSets: response.ids.map((id, i) => ({\n      ...response.result[i].params,\n      id,\n      name: response.result[i].name })) });\n\n\n};\nexport const createFilterSet = (filterSet) => async (dispatch, getState) => {\n  const dashboardId = getState().dashboardInfo.id;\n  const postFilterSets = makeApi({\n    method: 'POST',\n    endpoint: `/api/v1/dashboard/${dashboardId}/filtersets` });\n\n  dispatch({\n    type: CREATE_FILTER_SET_BEGIN });\n\n  const serverFilterSet = {\n    ...filterSet };\n\n  delete serverFilterSet.name;\n  await postFilterSets({\n    name: filterSet.name,\n    owner_type: 'Dashboard',\n    owner_id: dashboardId,\n    json_metadata: JSON.stringify(serverFilterSet) });\n\n  dispatch({\n    type: CREATE_FILTER_SET_COMPLETE });\n\n  dispatch(getFilterSets(dashboardId));\n};\nexport const updateFilterSet = (filterSet) => async (dispatch, getState) => {\n  const dashboardId = getState().dashboardInfo.id;\n  const postFilterSets = makeApi({\n    method: 'PUT',\n    endpoint: `/api/v1/dashboard/${dashboardId}/filtersets/${filterSet.id}` });\n\n  dispatch({\n    type: UPDATE_FILTER_SET_BEGIN });\n\n  const serverFilterSet = {\n    ...filterSet };\n\n  delete serverFilterSet.id;\n  delete serverFilterSet.name;\n  await postFilterSets({\n    name: filterSet.name,\n    json_metadata: JSON.stringify(serverFilterSet) });\n\n  dispatch({\n    type: UPDATE_FILTER_SET_COMPLETE });\n\n  dispatch(getFilterSets(dashboardId));\n};\nexport const deleteFilterSet = (filterSetId) => async (dispatch, getState) => {\n  const dashboardId = getState().dashboardInfo.id;\n  const deleteFilterSets = makeApi({\n    method: 'DELETE',\n    endpoint: `/api/v1/dashboard/${dashboardId}/filtersets/${filterSetId}` });\n\n  dispatch({\n    type: DELETE_FILTER_SET_BEGIN });\n\n  await deleteFilterSets({});\n  dispatch({\n    type: DELETE_FILTER_SET_COMPLETE });\n\n  dispatch(getFilterSets(dashboardId));\n};\nexport const SET_FOCUSED_NATIVE_FILTER = 'SET_FOCUSED_NATIVE_FILTER';\nexport const UNSET_FOCUSED_NATIVE_FILTER = 'UNSET_FOCUSED_NATIVE_FILTER';\nexport function setFocusedNativeFilter(id) {\n  return {\n    type: SET_FOCUSED_NATIVE_FILTER,\n    id };\n\n}\nexport function unsetFocusedNativeFilter() {\n  return {\n    type: UNSET_FOCUSED_NATIVE_FILTER };\n\n}\nexport const SET_HOVERED_NATIVE_FILTER = 'SET_HOVERED_NATIVE_FILTER';\nexport const UNSET_HOVERED_NATIVE_FILTER = 'UNSET_HOVERED_NATIVE_FILTER';\nexport function setHoveredNativeFilter(id) {\n  return {\n    type: SET_HOVERED_NATIVE_FILTER,\n    id };\n\n}\nexport function unsetHoveredNativeFilter() {\n  return {\n    type: UNSET_HOVERED_NATIVE_FILTER };\n\n}\nexport const UPDATE_CASCADE_PARENT_IDS = 'UPDATE_CASCADE_PARENT_IDS';\nexport function updateCascadeParentIds(id, parentIds) {\n  return {\n    type: UPDATE_CASCADE_PARENT_IDS,\n    id,\n    parentIds };\n\n}","map":{"version":3,"mappings":"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","names":["makeApi","SET_DATA_MASK_FOR_FILTER_CONFIG_FAIL","setDataMaskForFilterConfigComplete","dashboardInfoChanged","SET_FILTER_CONFIG_BEGIN","SET_FILTER_CONFIG_COMPLETE","SET_FILTER_CONFIG_FAIL","SET_IN_SCOPE_STATUS_OF_FILTERS","SET_FILTER_SETS_BEGIN","SET_FILTER_SETS_COMPLETE","SET_FILTER_SETS_FAIL","CREATE_FILTER_SET_BEGIN","CREATE_FILTER_SET_COMPLETE","CREATE_FILTER_SET_FAIL","DELETE_FILTER_SET_BEGIN","DELETE_FILTER_SET_COMPLETE","DELETE_FILTER_SET_FAIL","UPDATE_FILTER_SET_BEGIN","UPDATE_FILTER_SET_COMPLETE","UPDATE_FILTER_SET_FAIL","setFilterConfiguration","filterConfig","dispatch","getState","type","id","metadata","dashboardInfo","oldFilters","nativeFilters","filters","updateDashboard","method","endpoint","mergedFilterConfig","map","oldFilter","filter","response","json_metadata","JSON","stringify","native_filter_configuration","parse","result","err","setInScopeStatusOfFilters","filterScopes","filtersWithScopes","scope","filterId","chartsInScope","tabsInScope","filterWithScope","find","getFilterSets","dashboardId","fetchFilterSets","filterSets","ids","i","params","name","createFilterSet","filterSet","postFilterSets","serverFilterSet","owner_type","owner_id","updateFilterSet","deleteFilterSet","filterSetId","deleteFilterSets","SET_FOCUSED_NATIVE_FILTER","UNSET_FOCUSED_NATIVE_FILTER","setFocusedNativeFilter","unsetFocusedNativeFilter","SET_HOVERED_NATIVE_FILTER","UNSET_HOVERED_NATIVE_FILTER","setHoveredNativeFilter","unsetHoveredNativeFilter","UPDATE_CASCADE_PARENT_IDS","updateCascadeParentIds","parentIds"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/actions/nativeFilters.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport {\n  FilterConfiguration,\n  Filters,\n  FilterSet,\n  FilterSets,\n  makeApi,\n} from '@superset-ui/core';\nimport { Dispatch } from 'redux';\nimport { cloneDeep } from 'lodash';\nimport {\n  SET_DATA_MASK_FOR_FILTER_CONFIG_FAIL,\n  setDataMaskForFilterConfigComplete,\n} from 'src/dataMask/actions';\nimport { HYDRATE_DASHBOARD } from './hydrate';\nimport { dashboardInfoChanged } from './dashboardInfo';\nimport { FilterSetFullData } from '../reducers/types';\nimport { DashboardInfo, RootState } from '../types';\n\nexport const SET_FILTER_CONFIG_BEGIN = 'SET_FILTER_CONFIG_BEGIN';\nexport interface SetFilterConfigBegin {\n  type: typeof SET_FILTER_CONFIG_BEGIN;\n  filterConfig: FilterConfiguration;\n}\n\nexport const SET_FILTER_CONFIG_COMPLETE = 'SET_FILTER_CONFIG_COMPLETE';\nexport interface SetFilterConfigComplete {\n  type: typeof SET_FILTER_CONFIG_COMPLETE;\n  filterConfig: FilterConfiguration;\n}\nexport const SET_FILTER_CONFIG_FAIL = 'SET_FILTER_CONFIG_FAIL';\nexport interface SetFilterConfigFail {\n  type: typeof SET_FILTER_CONFIG_FAIL;\n  filterConfig: FilterConfiguration;\n}\nexport const SET_IN_SCOPE_STATUS_OF_FILTERS = 'SET_IN_SCOPE_STATUS_OF_FILTERS';\nexport interface SetInScopeStatusOfFilters {\n  type: typeof SET_IN_SCOPE_STATUS_OF_FILTERS;\n  filterConfig: FilterConfiguration;\n}\nexport const SET_FILTER_SETS_BEGIN = 'SET_FILTER_SETS_BEGIN';\nexport interface SetFilterSetsBegin {\n  type: typeof SET_FILTER_SETS_BEGIN;\n}\nexport const SET_FILTER_SETS_COMPLETE = 'SET_FILTER_SETS_COMPLETE';\nexport interface SetFilterSetsComplete {\n  type: typeof SET_FILTER_SETS_COMPLETE;\n  filterSets: FilterSet[];\n}\nexport const SET_FILTER_SETS_FAIL = 'SET_FILTER_SETS_FAIL';\nexport interface SetFilterSetsFail {\n  type: typeof SET_FILTER_SETS_FAIL;\n}\n\nexport const CREATE_FILTER_SET_BEGIN = 'CREATE_FILTER_SET_BEGIN';\nexport interface CreateFilterSetBegin {\n  type: typeof CREATE_FILTER_SET_BEGIN;\n}\nexport const CREATE_FILTER_SET_COMPLETE = 'CREATE_FILTER_SET_COMPLETE';\nexport interface CreateFilterSetComplete {\n  type: typeof CREATE_FILTER_SET_COMPLETE;\n  filterSet: FilterSet;\n}\nexport const CREATE_FILTER_SET_FAIL = 'CREATE_FILTER_SET_FAIL';\nexport interface CreateFilterSetFail {\n  type: typeof CREATE_FILTER_SET_FAIL;\n}\n\nexport const DELETE_FILTER_SET_BEGIN = 'DELETE_FILTER_SET_BEGIN';\nexport interface DeleteFilterSetBegin {\n  type: typeof DELETE_FILTER_SET_BEGIN;\n}\nexport const DELETE_FILTER_SET_COMPLETE = 'DELETE_FILTER_SET_COMPLETE';\nexport interface DeleteFilterSetComplete {\n  type: typeof DELETE_FILTER_SET_COMPLETE;\n  filterSet: FilterSet;\n}\nexport const DELETE_FILTER_SET_FAIL = 'DELETE_FILTER_SET_FAIL';\nexport interface DeleteFilterSetFail {\n  type: typeof DELETE_FILTER_SET_FAIL;\n}\n\nexport const UPDATE_FILTER_SET_BEGIN = 'UPDATE_FILTER_SET_BEGIN';\nexport interface UpdateFilterSetBegin {\n  type: typeof UPDATE_FILTER_SET_BEGIN;\n}\nexport const UPDATE_FILTER_SET_COMPLETE = 'UPDATE_FILTER_SET_COMPLETE';\nexport interface UpdateFilterSetComplete {\n  type: typeof UPDATE_FILTER_SET_COMPLETE;\n  filterSet: FilterSet;\n}\nexport const UPDATE_FILTER_SET_FAIL = 'UPDATE_FILTER_SET_FAIL';\nexport interface UpdateFilterSetFail {\n  type: typeof UPDATE_FILTER_SET_FAIL;\n}\n\nexport const setFilterConfiguration =\n  (filterConfig: FilterConfiguration) =>\n  async (dispatch: Dispatch, getState: () => any) => {\n    dispatch({\n      type: SET_FILTER_CONFIG_BEGIN,\n      filterConfig,\n    });\n    const { id, metadata } = getState().dashboardInfo;\n    const oldFilters = getState().nativeFilters?.filters;\n\n    // TODO extract this out when makeApi supports url parameters\n    const updateDashboard = makeApi<\n      Partial<DashboardInfo>,\n      { result: DashboardInfo }\n    >({\n      method: 'PUT',\n      endpoint: `/api/v1/dashboard/${id}`,\n    });\n\n    const mergedFilterConfig = filterConfig.map(filter => {\n      const oldFilter = oldFilters[filter.id];\n      if (!oldFilter) {\n        return filter;\n      }\n      return { ...oldFilter, ...filter };\n    });\n\n    try {\n      const response = await updateDashboard({\n        json_metadata: JSON.stringify({\n          ...metadata,\n          native_filter_configuration: mergedFilterConfig,\n        }),\n      });\n      dispatch(\n        dashboardInfoChanged({\n          metadata: JSON.parse(response.result.json_metadata),\n        }),\n      );\n      dispatch({\n        type: SET_FILTER_CONFIG_COMPLETE,\n        filterConfig: mergedFilterConfig,\n      });\n      dispatch(\n        setDataMaskForFilterConfigComplete(mergedFilterConfig, oldFilters),\n      );\n    } catch (err) {\n      dispatch({\n        type: SET_FILTER_CONFIG_FAIL,\n        filterConfig: mergedFilterConfig,\n      });\n      dispatch({\n        type: SET_DATA_MASK_FOR_FILTER_CONFIG_FAIL,\n        filterConfig: mergedFilterConfig,\n      });\n    }\n  };\n\nexport const setInScopeStatusOfFilters =\n  (\n    filterScopes: {\n      filterId: string;\n      chartsInScope: number[];\n      tabsInScope: string[];\n    }[],\n  ) =>\n  async (dispatch: Dispatch, getState: () => any) => {\n    const filters = getState().nativeFilters?.filters;\n    const filtersWithScopes = filterScopes.map(scope => ({\n      ...filters[scope.filterId],\n      chartsInScope: scope.chartsInScope,\n      tabsInScope: scope.tabsInScope,\n    }));\n    dispatch({\n      type: SET_IN_SCOPE_STATUS_OF_FILTERS,\n      filterConfig: filtersWithScopes,\n    });\n    // need to update native_filter_configuration in the dashboard metadata\n    const metadata = cloneDeep(getState().dashboardInfo.metadata);\n    const filterConfig: FilterConfiguration =\n      metadata.native_filter_configuration;\n    const mergedFilterConfig = filterConfig.map(filter => {\n      const filterWithScope = filtersWithScopes.find(\n        scope => scope.id === filter.id,\n      );\n      if (!filterWithScope) {\n        return filter;\n      }\n      return { ...filterWithScope, ...filter };\n    });\n    metadata.native_filter_configuration = mergedFilterConfig;\n    dispatch(\n      dashboardInfoChanged({\n        metadata,\n      }),\n    );\n  };\n\ntype BootstrapData = {\n  nativeFilters: {\n    filters: Filters;\n    filterSets: FilterSets;\n    filtersState: object;\n  };\n};\n\nexport interface SetBootstrapData {\n  type: typeof HYDRATE_DASHBOARD;\n  data: BootstrapData;\n}\n\nexport const getFilterSets =\n  (dashboardId: number) => async (dispatch: Dispatch) => {\n    const fetchFilterSets = makeApi<\n      null,\n      {\n        count: number;\n        ids: number[];\n        result: FilterSetFullData[];\n      }\n    >({\n      method: 'GET',\n      endpoint: `/api/v1/dashboard/${dashboardId}/filtersets`,\n    });\n\n    dispatch({\n      type: SET_FILTER_SETS_BEGIN,\n    });\n\n    const response = await fetchFilterSets(null);\n\n    dispatch({\n      type: SET_FILTER_SETS_COMPLETE,\n      filterSets: response.ids.map((id, i) => ({\n        ...response.result[i].params,\n        id,\n        name: response.result[i].name,\n      })),\n    });\n  };\n\nexport const createFilterSet =\n  (filterSet: Omit<FilterSet, 'id'>) =>\n  async (dispatch: Function, getState: () => RootState) => {\n    const dashboardId = getState().dashboardInfo.id;\n    const postFilterSets = makeApi<\n      Partial<FilterSetFullData & { json_metadata: any }>,\n      {\n        count: number;\n        ids: number[];\n        result: FilterSetFullData[];\n      }\n    >({\n      method: 'POST',\n      endpoint: `/api/v1/dashboard/${dashboardId}/filtersets`,\n    });\n\n    dispatch({\n      type: CREATE_FILTER_SET_BEGIN,\n    });\n\n    const serverFilterSet: Omit<FilterSet, 'id' | 'name'> & { name?: string } =\n      {\n        ...filterSet,\n      };\n\n    delete serverFilterSet.name;\n\n    await postFilterSets({\n      name: filterSet.name,\n      owner_type: 'Dashboard',\n      owner_id: dashboardId,\n      json_metadata: JSON.stringify(serverFilterSet),\n    });\n\n    dispatch({\n      type: CREATE_FILTER_SET_COMPLETE,\n    });\n    dispatch(getFilterSets(dashboardId));\n  };\n\nexport const updateFilterSet =\n  (filterSet: FilterSet) =>\n  async (dispatch: Function, getState: () => RootState) => {\n    const dashboardId = getState().dashboardInfo.id;\n    const postFilterSets = makeApi<\n      Partial<FilterSetFullData & { json_metadata: any }>,\n      {}\n    >({\n      method: 'PUT',\n      endpoint: `/api/v1/dashboard/${dashboardId}/filtersets/${filterSet.id}`,\n    });\n\n    dispatch({\n      type: UPDATE_FILTER_SET_BEGIN,\n    });\n\n    const serverFilterSet: Omit<FilterSet, 'id' | 'name'> & {\n      name?: string;\n      id?: number;\n    } = {\n      ...filterSet,\n    };\n\n    delete serverFilterSet.id;\n    delete serverFilterSet.name;\n\n    await postFilterSets({\n      name: filterSet.name,\n      json_metadata: JSON.stringify(serverFilterSet),\n    });\n\n    dispatch({\n      type: UPDATE_FILTER_SET_COMPLETE,\n    });\n    dispatch(getFilterSets(dashboardId));\n  };\n\nexport const deleteFilterSet =\n  (filterSetId: number) =>\n  async (dispatch: Function, getState: () => RootState) => {\n    const dashboardId = getState().dashboardInfo.id;\n    const deleteFilterSets = makeApi<{}, {}>({\n      method: 'DELETE',\n      endpoint: `/api/v1/dashboard/${dashboardId}/filtersets/${filterSetId}`,\n    });\n\n    dispatch({\n      type: DELETE_FILTER_SET_BEGIN,\n    });\n\n    await deleteFilterSets({});\n\n    dispatch({\n      type: DELETE_FILTER_SET_COMPLETE,\n    });\n    dispatch(getFilterSets(dashboardId));\n  };\n\nexport const SET_FOCUSED_NATIVE_FILTER = 'SET_FOCUSED_NATIVE_FILTER';\nexport interface SetFocusedNativeFilter {\n  type: typeof SET_FOCUSED_NATIVE_FILTER;\n  id: string;\n}\nexport const UNSET_FOCUSED_NATIVE_FILTER = 'UNSET_FOCUSED_NATIVE_FILTER';\nexport interface UnsetFocusedNativeFilter {\n  type: typeof UNSET_FOCUSED_NATIVE_FILTER;\n}\n\nexport function setFocusedNativeFilter(id: string): SetFocusedNativeFilter {\n  return {\n    type: SET_FOCUSED_NATIVE_FILTER,\n    id,\n  };\n}\nexport function unsetFocusedNativeFilter(): UnsetFocusedNativeFilter {\n  return {\n    type: UNSET_FOCUSED_NATIVE_FILTER,\n  };\n}\n\nexport const SET_HOVERED_NATIVE_FILTER = 'SET_HOVERED_NATIVE_FILTER';\nexport interface SetHoveredNativeFilter {\n  type: typeof SET_HOVERED_NATIVE_FILTER;\n  id: string;\n}\nexport const UNSET_HOVERED_NATIVE_FILTER = 'UNSET_HOVERED_NATIVE_FILTER';\nexport interface UnsetHoveredNativeFilter {\n  type: typeof UNSET_HOVERED_NATIVE_FILTER;\n}\n\nexport function setHoveredNativeFilter(id: string): SetHoveredNativeFilter {\n  return {\n    type: SET_HOVERED_NATIVE_FILTER,\n    id,\n  };\n}\nexport function unsetHoveredNativeFilter(): UnsetHoveredNativeFilter {\n  return {\n    type: UNSET_HOVERED_NATIVE_FILTER,\n  };\n}\n\nexport const UPDATE_CASCADE_PARENT_IDS = 'UPDATE_CASCADE_PARENT_IDS';\nexport interface UpdateCascadeParentIds {\n  type: typeof UPDATE_CASCADE_PARENT_IDS;\n  id: string;\n  parentIds: string[];\n}\nexport function updateCascadeParentIds(\n  id: string,\n  parentIds: string[],\n): UpdateCascadeParentIds {\n  return {\n    type: UPDATE_CASCADE_PARENT_IDS,\n    id,\n    parentIds,\n  };\n}\n\nexport type AnyFilterAction =\n  | SetFilterConfigBegin\n  | SetFilterConfigComplete\n  | SetFilterConfigFail\n  | SetFilterSetsBegin\n  | SetFilterSetsComplete\n  | SetFilterSetsFail\n  | SetInScopeStatusOfFilters\n  | SetBootstrapData\n  | SetFocusedNativeFilter\n  | UnsetFocusedNativeFilter\n  | SetHoveredNativeFilter\n  | UnsetHoveredNativeFilter\n  | CreateFilterSetBegin\n  | CreateFilterSetComplete\n  | CreateFilterSetFail\n  | DeleteFilterSetBegin\n  | DeleteFilterSetComplete\n  | DeleteFilterSetFail\n  | UpdateFilterSetBegin\n  | UpdateFilterSetComplete\n  | UpdateFilterSetFail\n  | UpdateCascadeParentIds;\n"]},"metadata":{},"sourceType":"module"}