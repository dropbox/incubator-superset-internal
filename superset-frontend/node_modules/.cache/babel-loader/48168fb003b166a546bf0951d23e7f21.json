{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n// A safe alternative to JS's eval\nimport vm from 'vm';\nimport _ from 'underscore';\nimport * as d3array from 'd3-array';\nimport * as colors from './colors';\n\n// Objects exposed here should be treated like a public API\n// if `underscore` had backwards incompatible changes in a future release, we'd\n// have to be careful about bumping the library as those changes could break user charts\nconst GLOBAL_CONTEXT = {\n  console,\n  _,\n  colors,\n  d3array };\n\n\n// Copied/modified from https://github.com/hacksparrow/safe-eval/blob/master/index.js\nexport default function sandboxedEval(code, context, opts) {\n  const sandbox = {};\n  const resultKey = `SAFE_EVAL_${Math.floor(Math.random() * 1000000)}`;\n  sandbox[resultKey] = {};\n  const codeToEval = `${resultKey}=${code}`;\n  const sandboxContext = { ...GLOBAL_CONTEXT, ...context };\n  Object.keys(sandboxContext).forEach((key) => {\n    sandbox[key] = sandboxContext[key];\n  });\n  try {\n    vm.runInNewContext(codeToEval, sandbox, opts);\n\n    return sandbox[resultKey];\n  } catch (error) {\n    return () => error;\n  }\n}","map":{"version":3,"names":["vm","_","d3array","colors","GLOBAL_CONTEXT","console","sandboxedEval","code","context","opts","sandbox","resultKey","Math","floor","random","codeToEval","sandboxContext","Object","keys","forEach","key","runInNewContext","error"],"sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/src/utils/sandbox.js"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n// A safe alternative to JS's eval\nimport vm from 'vm';\nimport _ from 'underscore';\nimport * as d3array from 'd3-array';\nimport * as colors from './colors';\n\n// Objects exposed here should be treated like a public API\n// if `underscore` had backwards incompatible changes in a future release, we'd\n// have to be careful about bumping the library as those changes could break user charts\nconst GLOBAL_CONTEXT = {\n  console,\n  _,\n  colors,\n  d3array,\n};\n\n// Copied/modified from https://github.com/hacksparrow/safe-eval/blob/master/index.js\nexport default function sandboxedEval(code, context, opts) {\n  const sandbox = {};\n  const resultKey = `SAFE_EVAL_${Math.floor(Math.random() * 1000000)}`;\n  sandbox[resultKey] = {};\n  const codeToEval = `${resultKey}=${code}`;\n  const sandboxContext = { ...GLOBAL_CONTEXT, ...context };\n  Object.keys(sandboxContext).forEach(key => {\n    sandbox[key] = sandboxContext[key];\n  });\n  try {\n    vm.runInNewContext(codeToEval, sandbox, opts);\n\n    return sandbox[resultKey];\n  } catch (error) {\n    return () => error;\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,CAAP,MAAc,YAAd;AACA,OAAO,KAAKC,OAAZ,MAAyB,UAAzB;AACA,OAAO,KAAKC,MAAZ,MAAwB,UAAxB;;AAEA;AACA;AACA;AACA,MAAMC,cAAc,GAAG;EACrBC,OADqB;EAErBJ,CAFqB;EAGrBE,MAHqB;EAIrBD,OAJqB,EAAvB;;;AAOA;AACA,eAAe,SAASI,aAAT,CAAuBC,IAAvB,EAA6BC,OAA7B,EAAsCC,IAAtC,EAA4C;EACzD,MAAMC,OAAO,GAAG,EAAhB;EACA,MAAMC,SAAS,GAAI,aAAYC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,OAA3B,CAAoC,EAAnE;EACAJ,OAAO,CAACC,SAAD,CAAP,GAAqB,EAArB;EACA,MAAMI,UAAU,GAAI,GAAEJ,SAAU,IAAGJ,IAAK,EAAxC;EACA,MAAMS,cAAc,GAAG,EAAE,GAAGZ,cAAL,EAAqB,GAAGI,OAAxB,EAAvB;EACAS,MAAM,CAACC,IAAP,CAAYF,cAAZ,EAA4BG,OAA5B,CAAoC,CAAAC,GAAG,KAAI;IACzCV,OAAO,CAACU,GAAD,CAAP,GAAeJ,cAAc,CAACI,GAAD,CAA7B;EACD,CAFD;EAGA,IAAI;IACFpB,EAAE,CAACqB,eAAH,CAAmBN,UAAnB,EAA+BL,OAA/B,EAAwCD,IAAxC;;IAEA,OAAOC,OAAO,CAACC,SAAD,CAAd;EACD,CAJD,CAIE,OAAOW,KAAP,EAAc;IACd,OAAO,MAAMA,KAAb;EACD;AACF"},"metadata":{},"sourceType":"module"}