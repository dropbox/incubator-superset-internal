{"ast":null,"code":"export function getLabelFontSize(width) {\n  if (width > 550) {\n    return 0.8;\n  }\n  if (width > 400 && width <= 550) {\n    return 0.55;\n  }\n  return 0.45;\n}\nexport const isOverlapping = (rect1, rect2) => {\n  const { x: x1, y: y1, width: width1, height: height1 } = rect1;\n  const { x: x2, y: y2, width: width2, height: height2 } = rect2;\n  return !(x1 > x2 + width2 ||\n  x1 + width1 < x2 ||\n  y1 > y2 + height2 ||\n  y1 + height1 < y2);\n};\nexport const getRectangle = function (element, offset) {if (offset === void 0) {offset = 0;}\n  const { x, y, width, height } = element.getBoundingClientRect();\n  return {\n    x,\n    y: y + offset,\n    width,\n    height: height - offset * 2 };\n\n};\nexport const getOverlappingElements = (elements) => {\n  const overlappingElements = [];\n  elements.forEach((e1, index1) => {\n    const rect1 = getRectangle(e1, 1);\n    elements.forEach((e2, index2) => {\n      if (index2 <= index1)\n      return;\n      const rect2 = getRectangle(e2, 1);\n      if (isOverlapping(rect1, rect2)) {\n        overlappingElements.push(elements[index2]);\n        overlappingElements.push(elements[index1]);\n      }\n    });\n  });\n  return overlappingElements;\n};","map":{"version":3,"mappings":"AAyBA,OAAM,SAAUA,gBAAV,CAA2BC,KAA3B,EAAwC;EAC5C,IAAIA,KAAK,GAAG,GAAZ,EAAiB;IACf,OAAO,GAAP;EACD;EAED,IAAIA,KAAK,GAAG,GAAR,IAAeA,KAAK,IAAI,GAA5B,EAAiC;IAC/B,OAAO,IAAP;EACD;EAED,OAAO,IAAP;AACD;AAED,OAAO,MAAMC,aAAa,GAAG,CAACC,KAAD,EAAcC,KAAd,KAAsC;EACjE,MAAM,EAAEC,CAAC,EAAEC,EAAL,EAASC,CAAC,EAAEC,EAAZ,EAAgBP,KAAK,EAAEQ,MAAvB,EAA+BC,MAAM,EAAEC,OAAvC,KAAmDR,KAAzD;EACA,MAAM,EAAEE,CAAC,EAAEO,EAAL,EAASL,CAAC,EAAEM,EAAZ,EAAgBZ,KAAK,EAAEa,MAAvB,EAA+BJ,MAAM,EAAEK,OAAvC,KAAmDX,KAAzD;EAEA,OAAO,EACLE,EAAE,GAAGM,EAAE,GAAGE,MAAV;EACAR,EAAE,GAAGG,MAAL,GAAcG,EADd;EAEAJ,EAAE,GAAGK,EAAE,GAAGE,OAFV;EAGAP,EAAE,GAAGG,OAAL,GAAeE,EAJV,CAAP;AAMD,CAVM;AAYP,OAAO,MAAMG,YAAY,GAAG,UAACC,OAAD,EAAsBC,MAAtB,EAA0C,KAApBA,MAAoB,cAApBA,MAAoB,GAAX,CAAW;EACpE,MAAM,EAAEb,CAAF,EAAKE,CAAL,EAAQN,KAAR,EAAeS,MAAf,KAA0BO,OAAO,CAACE,qBAAR,EAAhC;EAEA,OAAO;IACLd,CADK;IAELE,CAAC,EAAEA,CAAC,GAAGW,MAFF;IAGLjB,KAHK;IAILS,MAAM,EAAEA,MAAM,GAAGQ,MAAM,GAAG,CAJrB,EAAP;;AAMD,CATM;AAWP,OAAO,MAAME,sBAAsB,GAAG,CACpCC,QADoC,KAEpB;EAChB,MAAMC,mBAAmB,GAAiB,EAA1C;EAEAD,QAAQ,CAACE,OAAT,CAAiB,CAACC,EAAD,EAAKC,MAAL,KAAe;IAC9B,MAAMtB,KAAK,GAASa,YAAY,CAACQ,EAAD,EAAK,CAAL,CAAhC;IAEAH,QAAQ,CAACE,OAAT,CAAiB,CAACG,EAAD,EAAKC,MAAL,KAAe;MAC9B,IAAIA,MAAM,IAAIF,MAAd;MAAsB;MACtB,MAAMrB,KAAK,GAASY,YAAY,CAACU,EAAD,EAAK,CAAL,CAAhC;MAEA,IAAIxB,aAAa,CAACC,KAAD,EAAQC,KAAR,CAAjB,EAAiC;QAC/BkB,mBAAmB,CAACM,IAApB,CAAyBP,QAAQ,CAACM,MAAD,CAAjC;QACAL,mBAAmB,CAACM,IAApB,CAAyBP,QAAQ,CAACI,MAAD,CAAjC;MACD;IACF,CARD;EASD,CAZD;EAcA,OAAOH,mBAAP;AACD,CApBM","names":["getLabelFontSize","width","isOverlapping","rect1","rect2","x","x1","y","y1","width1","height","height1","x2","y2","width2","height2","getRectangle","element","offset","getBoundingClientRect","getOverlappingElements","elements","overlappingElements","forEach","e1","index1","e2","index2","push"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/legacy-plugin-chart-sankey/src/utils.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\ntype Rect = {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n};\n\nexport function getLabelFontSize(width: number): number {\n  if (width > 550) {\n    return 0.8;\n  }\n\n  if (width > 400 && width <= 550) {\n    return 0.55;\n  }\n\n  return 0.45;\n}\n\nexport const isOverlapping = (rect1: Rect, rect2: Rect): boolean => {\n  const { x: x1, y: y1, width: width1, height: height1 } = rect1;\n  const { x: x2, y: y2, width: width2, height: height2 } = rect2;\n\n  return !(\n    x1 > x2 + width2 ||\n    x1 + width1 < x2 ||\n    y1 > y2 + height2 ||\n    y1 + height1 < y2\n  );\n};\n\nexport const getRectangle = (element: SVGElement, offset = 0): Rect => {\n  const { x, y, width, height } = element.getBoundingClientRect();\n\n  return {\n    x,\n    y: y + offset,\n    width,\n    height: height - offset * 2,\n  };\n};\n\nexport const getOverlappingElements = (\n  elements: SVGElement[],\n): SVGElement[] => {\n  const overlappingElements: SVGElement[] = [];\n\n  elements.forEach((e1, index1) => {\n    const rect1: Rect = getRectangle(e1, 1);\n\n    elements.forEach((e2, index2) => {\n      if (index2 <= index1) return;\n      const rect2: Rect = getRectangle(e2, 1);\n\n      if (isOverlapping(rect1, rect2)) {\n        overlappingElements.push(elements[index2]);\n        overlappingElements.push(elements[index1]);\n      }\n    });\n  });\n\n  return overlappingElements;\n};\n"]},"metadata":{},"sourceType":"module"}