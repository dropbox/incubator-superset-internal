{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};import { getChartKey } from 'src/explore/exploreUtils';\nimport { getControlsState } from 'src/explore/store';\nimport { ensureIsArray, getCategoricalSchemeRegistry, getColumnLabel, getSequentialSchemeRegistry, hasGenericChartAxes, NO_TIME_RANGE } from '@superset-ui/core';\nimport { getFormDataFromControls, applyMapStateToPropsToControl } from 'src/explore/controlUtils';\nimport { getDatasourceUid } from 'src/utils/getDatasourceUid';\nimport { getUrlParam } from 'src/utils/urlUtils';\nimport { URL_PARAMS } from 'src/constants';\nimport { findPermission } from 'src/utils/findPermission';\nvar ColorSchemeType;\n(function (ColorSchemeType) {\n  ColorSchemeType[\"CATEGORICAL\"] = \"CATEGORICAL\";\n  ColorSchemeType[\"SEQUENTIAL\"] = \"SEQUENTIAL\";\n})(ColorSchemeType || (ColorSchemeType = {}));\nexport const HYDRATE_EXPLORE = 'HYDRATE_EXPLORE';\nexport const hydrateExplore = (_ref) => {let { form_data, slice, dataset, metadata, saveAction = null } = _ref;return (dispatch, getState) => {var _sliceEntities$slices, _initialFormData$grou, _context;\n    const { user, datasources, charts, sliceEntities, common, explore } = getState();\n    const sliceId = getUrlParam(URL_PARAMS.sliceId);\n    const dashboardId = getUrlParam(URL_PARAMS.dashboardId);\n    const fallbackSlice = sliceId ? sliceEntities == null ? void 0 : (_sliceEntities$slices = sliceEntities.slices) == null ? void 0 : _sliceEntities$slices[sliceId] : null;\n    const initialSlice = slice != null ? slice : fallbackSlice;\n    const initialFormData = form_data != null ? form_data : initialSlice == null ? void 0 : initialSlice.form_data;\n    if (!initialFormData.viz_type) {\n      const defaultVizType = (common == null ? void 0 : common.conf.DEFAULT_VIZ_TYPE) || 'table';\n      initialFormData.viz_type =\n      getUrlParam(URL_PARAMS.vizType) || defaultVizType;\n    }\n    if (!initialFormData.time_range) {var _common$conf;\n      initialFormData.time_range =\n      (common == null ? void 0 : (_common$conf = common.conf) == null ? void 0 : _common$conf.DEFAULT_TIME_FILTER) || NO_TIME_RANGE;\n    }\n    if (hasGenericChartAxes &&\n    initialFormData.include_time &&\n    initialFormData.granularity_sqla &&\n    !((_initialFormData$grou = initialFormData.groupby) != null && _initialFormData$grou.some((col) => getColumnLabel(col) ===\n    getColumnLabel(initialFormData.granularity_sqla)))) {\n      initialFormData.groupby = [\n      initialFormData.granularity_sqla,\n      ...ensureIsArray(initialFormData.groupby)];\n\n      initialFormData.granularity_sqla = undefined;\n    }\n    if (dashboardId) {\n      initialFormData.dashboardId = dashboardId;\n    }\n    const initialDatasource = dataset;\n    const initialExploreState = {\n      form_data: initialFormData,\n      slice: initialSlice,\n      datasource: initialDatasource };\n\n    const initialControls = getControlsState(initialExploreState, initialFormData);\n    const colorSchemeKey = initialControls.color_scheme && 'color_scheme';\n    const linearColorSchemeKey = initialControls.linear_color_scheme && 'linear_color_scheme';\n    // if the selected color scheme does not exist anymore\n    // fallbacks and selects the available default one\n    const verifyColorScheme = (type) => {\n      const schemes = type === 'CATEGORICAL' ?\n      getCategoricalSchemeRegistry() :\n      getSequentialSchemeRegistry();\n      const key = type === 'CATEGORICAL' ? colorSchemeKey : linearColorSchemeKey;\n      const registryDefaultScheme = schemes.defaultKey;\n      const defaultScheme = type === 'CATEGORICAL' ? 'supersetColors' : 'superset_seq_1';\n      const currentScheme = initialFormData[key];\n      const colorSchemeExists = !!schemes.get(currentScheme, true);\n      if (currentScheme && !colorSchemeExists) {\n        initialControls[key].value = registryDefaultScheme || defaultScheme;\n      }\n    };\n    if (colorSchemeKey)\n    verifyColorScheme(ColorSchemeType.CATEGORICAL);\n    if (linearColorSchemeKey)\n    verifyColorScheme(ColorSchemeType.SEQUENTIAL);\n    const exploreState = {\n      // note this will add `form_data` to state,\n      // which will be manipulable by future reducers.\n      can_add: findPermission('can_write', 'Chart', user == null ? void 0 : user.roles),\n      can_download: findPermission('can_csv', 'Superset', user == null ? void 0 : user.roles),\n      can_overwrite: _includesInstanceProperty(_context = ensureIsArray(slice == null ? void 0 : slice.owners)).call(_context, user == null ? void 0 : user.userId),\n      isDatasourceMetaLoading: false,\n      isStarred: false,\n      triggerRender: false,\n      // duplicate datasource in exploreState - it's needed by getControlsState\n      datasource: initialDatasource,\n      // Initial control state will skip `control.mapStateToProps`\n      // because `bootstrapData.controls` is undefined.\n      controls: initialControls,\n      form_data: initialFormData,\n      slice: initialSlice,\n      controlsTransferred: explore.controlsTransferred,\n      standalone: getUrlParam(URL_PARAMS.standalone),\n      force: getUrlParam(URL_PARAMS.force),\n      metadata,\n      saveAction,\n      common };\n\n    // apply initial mapStateToProps for all controls, must execute AFTER\n    // bootstrapState has initialized `controls`. Order of execution is not\n    // guaranteed, so controls shouldn't rely on each other's mapped state.\n    Object.entries(exploreState.controls).forEach((_ref2) => {let [key, controlState] = _ref2;\n      exploreState.controls[key] = applyMapStateToPropsToControl(controlState, exploreState);\n    });\n    const sliceFormData = initialSlice ?\n    getFormDataFromControls(initialControls) :\n    null;\n    const chartKey = getChartKey(initialExploreState);\n    const chart = {\n      id: chartKey,\n      chartAlert: null,\n      chartStatus: null,\n      chartStackTrace: null,\n      chartUpdateEndTime: null,\n      chartUpdateStartTime: 0,\n      latestQueryFormData: getFormDataFromControls(exploreState.controls),\n      sliceFormData,\n      queryController: null,\n      queriesResponse: null,\n      triggerQuery: false,\n      lastRendered: 0 };\n\n    return dispatch({\n      type: HYDRATE_EXPLORE,\n      data: {\n        charts: {\n          ...charts,\n          [chartKey]: chart },\n\n        datasources: {\n          ...datasources,\n          [getDatasourceUid(initialDatasource)]: initialDatasource },\n\n        saveModal: {\n          dashboards: [],\n          saveModalAlert: null,\n          isVisible: false },\n\n        explore: exploreState } });\n\n\n  };};;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(ColorSchemeType, \"ColorSchemeType\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/actions/hydrateExplore.ts\");reactHotLoader.register(HYDRATE_EXPLORE, \"HYDRATE_EXPLORE\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/actions/hydrateExplore.ts\");reactHotLoader.register(hydrateExplore, \"hydrateExplore\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/actions/hydrateExplore.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"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","names":["getChartKey","getControlsState","ensureIsArray","getCategoricalSchemeRegistry","getColumnLabel","getSequentialSchemeRegistry","hasGenericChartAxes","NO_TIME_RANGE","getFormDataFromControls","applyMapStateToPropsToControl","getDatasourceUid","getUrlParam","URL_PARAMS","findPermission","ColorSchemeType","HYDRATE_EXPLORE","hydrateExplore","form_data","slice","dataset","metadata","saveAction","dispatch","getState","user","datasources","charts","sliceEntities","common","explore","sliceId","dashboardId","fallbackSlice","slices","initialSlice","initialFormData","viz_type","defaultVizType","conf","DEFAULT_VIZ_TYPE","vizType","time_range","DEFAULT_TIME_FILTER","include_time","granularity_sqla","groupby","some","col","undefined","initialDatasource","initialExploreState","datasource","initialControls","colorSchemeKey","color_scheme","linearColorSchemeKey","linear_color_scheme","verifyColorScheme","type","schemes","key","registryDefaultScheme","defaultKey","defaultScheme","currentScheme","colorSchemeExists","get","value","CATEGORICAL","SEQUENTIAL","exploreState","can_add","roles","can_download","can_overwrite","owners","userId","isDatasourceMetaLoading","isStarred","triggerRender","controls","controlsTransferred","standalone","force","Object","entries","forEach","controlState","sliceFormData","chartKey","chart","id","chartAlert","chartStatus","chartStackTrace","chartUpdateEndTime","chartUpdateStartTime","latestQueryFormData","queryController","queriesResponse","triggerQuery","lastRendered","data","saveModal","dashboards","saveModalAlert","isVisible"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/actions/hydrateExplore.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ControlStateMapping } from '@superset-ui/chart-controls';\n\nimport {\n  ChartState,\n  ExplorePageInitialData,\n  ExplorePageState,\n} from 'src/explore/types';\nimport { getChartKey } from 'src/explore/exploreUtils';\nimport { getControlsState } from 'src/explore/store';\nimport { Dispatch } from 'redux';\nimport {\n  ensureIsArray,\n  getCategoricalSchemeRegistry,\n  getColumnLabel,\n  getSequentialSchemeRegistry,\n  hasGenericChartAxes,\n  NO_TIME_RANGE,\n  QueryFormColumn,\n} from '@superset-ui/core';\nimport {\n  getFormDataFromControls,\n  applyMapStateToPropsToControl,\n} from 'src/explore/controlUtils';\nimport { getDatasourceUid } from 'src/utils/getDatasourceUid';\nimport { getUrlParam } from 'src/utils/urlUtils';\nimport { URL_PARAMS } from 'src/constants';\nimport { findPermission } from 'src/utils/findPermission';\n\nenum ColorSchemeType {\n  CATEGORICAL = 'CATEGORICAL',\n  SEQUENTIAL = 'SEQUENTIAL',\n}\n\nexport const HYDRATE_EXPLORE = 'HYDRATE_EXPLORE';\nexport const hydrateExplore =\n  ({\n    form_data,\n    slice,\n    dataset,\n    metadata,\n    saveAction = null,\n  }: ExplorePageInitialData) =>\n  (dispatch: Dispatch, getState: () => ExplorePageState) => {\n    const { user, datasources, charts, sliceEntities, common, explore } =\n      getState();\n\n    const sliceId = getUrlParam(URL_PARAMS.sliceId);\n    const dashboardId = getUrlParam(URL_PARAMS.dashboardId);\n    const fallbackSlice = sliceId ? sliceEntities?.slices?.[sliceId] : null;\n    const initialSlice = slice ?? fallbackSlice;\n    const initialFormData = form_data ?? initialSlice?.form_data;\n    if (!initialFormData.viz_type) {\n      const defaultVizType = common?.conf.DEFAULT_VIZ_TYPE || 'table';\n      initialFormData.viz_type =\n        getUrlParam(URL_PARAMS.vizType) || defaultVizType;\n    }\n    if (!initialFormData.time_range) {\n      initialFormData.time_range =\n        common?.conf?.DEFAULT_TIME_FILTER || NO_TIME_RANGE;\n    }\n    if (\n      hasGenericChartAxes &&\n      initialFormData.include_time &&\n      initialFormData.granularity_sqla &&\n      !initialFormData.groupby?.some(\n        (col: QueryFormColumn) =>\n          getColumnLabel(col) ===\n          getColumnLabel(initialFormData.granularity_sqla!),\n      )\n    ) {\n      initialFormData.groupby = [\n        initialFormData.granularity_sqla,\n        ...ensureIsArray(initialFormData.groupby),\n      ];\n      initialFormData.granularity_sqla = undefined;\n    }\n\n    if (dashboardId) {\n      initialFormData.dashboardId = dashboardId;\n    }\n    const initialDatasource = dataset;\n\n    const initialExploreState = {\n      form_data: initialFormData,\n      slice: initialSlice,\n      datasource: initialDatasource,\n    };\n    const initialControls = getControlsState(\n      initialExploreState,\n      initialFormData,\n    ) as ControlStateMapping;\n    const colorSchemeKey = initialControls.color_scheme && 'color_scheme';\n    const linearColorSchemeKey =\n      initialControls.linear_color_scheme && 'linear_color_scheme';\n    // if the selected color scheme does not exist anymore\n    // fallbacks and selects the available default one\n    const verifyColorScheme = (type: ColorSchemeType) => {\n      const schemes =\n        type === 'CATEGORICAL'\n          ? getCategoricalSchemeRegistry()\n          : getSequentialSchemeRegistry();\n      const key =\n        type === 'CATEGORICAL' ? colorSchemeKey : linearColorSchemeKey;\n      const registryDefaultScheme = schemes.defaultKey;\n      const defaultScheme =\n        type === 'CATEGORICAL' ? 'supersetColors' : 'superset_seq_1';\n      const currentScheme = initialFormData[key];\n      const colorSchemeExists = !!schemes.get(currentScheme, true);\n\n      if (currentScheme && !colorSchemeExists) {\n        initialControls[key].value = registryDefaultScheme || defaultScheme;\n      }\n    };\n\n    if (colorSchemeKey) verifyColorScheme(ColorSchemeType.CATEGORICAL);\n    if (linearColorSchemeKey) verifyColorScheme(ColorSchemeType.SEQUENTIAL);\n\n    const exploreState = {\n      // note this will add `form_data` to state,\n      // which will be manipulable by future reducers.\n      can_add: findPermission('can_write', 'Chart', user?.roles),\n      can_download: findPermission('can_csv', 'Superset', user?.roles),\n      can_overwrite: ensureIsArray(slice?.owners).includes(\n        user?.userId as number,\n      ),\n      isDatasourceMetaLoading: false,\n      isStarred: false,\n      triggerRender: false,\n      // duplicate datasource in exploreState - it's needed by getControlsState\n      datasource: initialDatasource,\n      // Initial control state will skip `control.mapStateToProps`\n      // because `bootstrapData.controls` is undefined.\n      controls: initialControls,\n      form_data: initialFormData,\n      slice: initialSlice,\n      controlsTransferred: explore.controlsTransferred,\n      standalone: getUrlParam(URL_PARAMS.standalone),\n      force: getUrlParam(URL_PARAMS.force),\n      metadata,\n      saveAction,\n      common,\n    };\n\n    // apply initial mapStateToProps for all controls, must execute AFTER\n    // bootstrapState has initialized `controls`. Order of execution is not\n    // guaranteed, so controls shouldn't rely on each other's mapped state.\n    Object.entries(exploreState.controls).forEach(([key, controlState]) => {\n      exploreState.controls[key] = applyMapStateToPropsToControl(\n        controlState,\n        exploreState,\n      );\n    });\n    const sliceFormData = initialSlice\n      ? getFormDataFromControls(initialControls)\n      : null;\n\n    const chartKey: number = getChartKey(initialExploreState);\n    const chart: ChartState = {\n      id: chartKey,\n      chartAlert: null,\n      chartStatus: null,\n      chartStackTrace: null,\n      chartUpdateEndTime: null,\n      chartUpdateStartTime: 0,\n      latestQueryFormData: getFormDataFromControls(exploreState.controls),\n      sliceFormData,\n      queryController: null,\n      queriesResponse: null,\n      triggerQuery: false,\n      lastRendered: 0,\n    };\n\n    return dispatch({\n      type: HYDRATE_EXPLORE,\n      data: {\n        charts: {\n          ...charts,\n          [chartKey]: chart,\n        },\n        datasources: {\n          ...datasources,\n          [getDatasourceUid(initialDatasource)]: initialDatasource,\n        },\n        saveModal: {\n          dashboards: [],\n          saveModalAlert: null,\n          isVisible: false,\n        },\n        explore: exploreState,\n      },\n    });\n  };\n\nexport type HydrateExplore = {\n  type: typeof HYDRATE_EXPLORE;\n  data: ExplorePageState;\n};\n"]},"metadata":{},"sourceType":"module"}