{"ast":null,"code":"import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable camelcase */\nimport {\nADD_FILTER,\nREMOVE_FILTER,\nCHANGE_FILTER,\nUPDATE_DIRECT_PATH_TO_FILTER,\nUPDATE_LAYOUT_COMPONENTS,\nUPDATE_DASHBOARD_FILTERS_SCOPE } from\n'../actions/dashboardFilters';\nimport { HYDRATE_DASHBOARD } from '../actions/hydrate';\nimport { TIME_RANGE } from '../../visualizations/FilterBox/FilterBox';\nimport { DASHBOARD_ROOT_ID } from '../util/constants';\nimport getFilterConfigsFromFormdata from '../util/getFilterConfigsFromFormdata';\nimport { buildActiveFilters } from '../util/activeDashboardFilters';\nimport { getChartIdAndColumnFromFilterKey } from '../util/getDashboardFilterKey';\n\nexport const DASHBOARD_FILTER_SCOPE_GLOBAL = {\n  scope: [DASHBOARD_ROOT_ID],\n  immune: [] };\n\n\nexport const dashboardFilter = {\n  chartId: null,\n  componentId: null,\n  filterName: null,\n  datasourceId: null,\n  directPathToFilter: [],\n  isDateFilter: false,\n  isInstantFilter: true,\n  columns: {},\n  labels: {},\n  scopes: {} };\n\n\nconst CHANGE_FILTER_VALUE_ACTIONS = [ADD_FILTER, REMOVE_FILTER, CHANGE_FILTER];\n\nexport default function dashboardFiltersReducer(dashboardFilters, action) {if (dashboardFilters === void 0) {dashboardFilters = {};}\n  const actionHandlers = {\n    [ADD_FILTER]() {var _context;\n      const { chartId, component, form_data } = action;\n      const { columns, labels } = getFilterConfigsFromFormdata(form_data);\n      const scopes = Object.keys(columns).reduce(\n      (map, column) => ({\n        ...map,\n        [column]: DASHBOARD_FILTER_SCOPE_GLOBAL }),\n\n      {});\n\n      const directPathToFilter = component ?\n      (component.parents || []).slice().concat(component.id) :\n      [];\n\n      const newFilter = {\n        ...dashboardFilter,\n        chartId,\n        componentId: component.id,\n        datasourceId: form_data.datasource,\n        filterName: component.meta.sliceName,\n        directPathToFilter,\n        columns,\n        labels,\n        scopes,\n        isInstantFilter: !!form_data.instant_filtering,\n        isDateFilter: _includesInstanceProperty(_context = Object.keys(columns)).call(_context, TIME_RANGE) };\n\n\n      return newFilter;\n    },\n\n    [CHANGE_FILTER](state) {\n      const { newSelectedValues, merge } = action;\n      const updatedColumns = Object.keys(newSelectedValues).reduce(\n      (columns, name) => {\n        // override existed column value, or add new column name\n        if (!merge || !(name in columns)) {\n          return {\n            ...columns,\n            [name]: newSelectedValues[name] };\n\n        }\n\n        return {\n          ...columns,\n          [name]: [...columns[name], ...newSelectedValues[name]] };\n\n      },\n      { ...state.columns });\n\n\n      return {\n        ...state,\n        columns: updatedColumns };\n\n    },\n\n    [UPDATE_DIRECT_PATH_TO_FILTER](state) {\n      const { path } = action;\n      return {\n        ...state,\n        directPathToFilter: path };\n\n    } };\n\n\n  if (action.type === UPDATE_LAYOUT_COMPONENTS) {\n    buildActiveFilters({\n      dashboardFilters,\n      components: action.components });\n\n    return dashboardFilters;\n  }\n  if (action.type === UPDATE_DASHBOARD_FILTERS_SCOPE) {\n    const allDashboardFiltersScope = action.scopes;\n    // update filter scope for each filter field\n    const updatedFilters = Object.entries(allDashboardFiltersScope).reduce(\n    (map, entry) => {\n      const [filterKey, { scope, immune }] = entry;\n      const { chartId, column } = getChartIdAndColumnFromFilterKey(filterKey);\n      const scopes = {\n        ...map[chartId].scopes,\n        [column]: {\n          scope,\n          immune } };\n\n\n      return {\n        ...map,\n        [chartId]: {\n          ...map[chartId],\n          scopes } };\n\n\n    },\n    dashboardFilters);\n\n\n    buildActiveFilters({ dashboardFilters: updatedFilters });\n    return updatedFilters;\n  }\n  if (action.type === REMOVE_FILTER) {\n    const { chartId } = action;\n    const { [chartId]: deletedFilter, ...updatedFilters } = dashboardFilters;\n    buildActiveFilters({ dashboardFilters: updatedFilters });\n\n    return updatedFilters;\n  }\n  if (action.type === HYDRATE_DASHBOARD) {\n    return action.data.dashboardFilters;\n  }\n\n  if (action.type in actionHandlers) {\n    const updatedFilters = {\n      ...dashboardFilters,\n      [action.chartId]: actionHandlers[action.type](\n      dashboardFilters[action.chartId]) };\n\n\n    if (_includesInstanceProperty(CHANGE_FILTER_VALUE_ACTIONS).call(CHANGE_FILTER_VALUE_ACTIONS, action.type)) {\n      buildActiveFilters({ dashboardFilters: updatedFilters });\n    }\n\n    return updatedFilters;\n  }\n\n  return dashboardFilters;\n}","map":{"version":3,"names":["ADD_FILTER","REMOVE_FILTER","CHANGE_FILTER","UPDATE_DIRECT_PATH_TO_FILTER","UPDATE_LAYOUT_COMPONENTS","UPDATE_DASHBOARD_FILTERS_SCOPE","HYDRATE_DASHBOARD","TIME_RANGE","DASHBOARD_ROOT_ID","getFilterConfigsFromFormdata","buildActiveFilters","getChartIdAndColumnFromFilterKey","DASHBOARD_FILTER_SCOPE_GLOBAL","scope","immune","dashboardFilter","chartId","componentId","filterName","datasourceId","directPathToFilter","isDateFilter","isInstantFilter","columns","labels","scopes","CHANGE_FILTER_VALUE_ACTIONS","dashboardFiltersReducer","dashboardFilters","action","actionHandlers","component","form_data","Object","keys","reduce","map","column","parents","slice","concat","id","newFilter","datasource","meta","sliceName","instant_filtering","state","newSelectedValues","merge","updatedColumns","name","path","type","components","allDashboardFiltersScope","updatedFilters","entries","entry","filterKey","deletedFilter","data"],"sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/reducers/dashboardFilters.js"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable camelcase */\nimport {\n  ADD_FILTER,\n  REMOVE_FILTER,\n  CHANGE_FILTER,\n  UPDATE_DIRECT_PATH_TO_FILTER,\n  UPDATE_LAYOUT_COMPONENTS,\n  UPDATE_DASHBOARD_FILTERS_SCOPE,\n} from '../actions/dashboardFilters';\nimport { HYDRATE_DASHBOARD } from '../actions/hydrate';\nimport { TIME_RANGE } from '../../visualizations/FilterBox/FilterBox';\nimport { DASHBOARD_ROOT_ID } from '../util/constants';\nimport getFilterConfigsFromFormdata from '../util/getFilterConfigsFromFormdata';\nimport { buildActiveFilters } from '../util/activeDashboardFilters';\nimport { getChartIdAndColumnFromFilterKey } from '../util/getDashboardFilterKey';\n\nexport const DASHBOARD_FILTER_SCOPE_GLOBAL = {\n  scope: [DASHBOARD_ROOT_ID],\n  immune: [],\n};\n\nexport const dashboardFilter = {\n  chartId: null,\n  componentId: null,\n  filterName: null,\n  datasourceId: null,\n  directPathToFilter: [],\n  isDateFilter: false,\n  isInstantFilter: true,\n  columns: {},\n  labels: {},\n  scopes: {},\n};\n\nconst CHANGE_FILTER_VALUE_ACTIONS = [ADD_FILTER, REMOVE_FILTER, CHANGE_FILTER];\n\nexport default function dashboardFiltersReducer(dashboardFilters = {}, action) {\n  const actionHandlers = {\n    [ADD_FILTER]() {\n      const { chartId, component, form_data } = action;\n      const { columns, labels } = getFilterConfigsFromFormdata(form_data);\n      const scopes = Object.keys(columns).reduce(\n        (map, column) => ({\n          ...map,\n          [column]: DASHBOARD_FILTER_SCOPE_GLOBAL,\n        }),\n        {},\n      );\n      const directPathToFilter = component\n        ? (component.parents || []).slice().concat(component.id)\n        : [];\n\n      const newFilter = {\n        ...dashboardFilter,\n        chartId,\n        componentId: component.id,\n        datasourceId: form_data.datasource,\n        filterName: component.meta.sliceName,\n        directPathToFilter,\n        columns,\n        labels,\n        scopes,\n        isInstantFilter: !!form_data.instant_filtering,\n        isDateFilter: Object.keys(columns).includes(TIME_RANGE),\n      };\n\n      return newFilter;\n    },\n\n    [CHANGE_FILTER](state) {\n      const { newSelectedValues, merge } = action;\n      const updatedColumns = Object.keys(newSelectedValues).reduce(\n        (columns, name) => {\n          // override existed column value, or add new column name\n          if (!merge || !(name in columns)) {\n            return {\n              ...columns,\n              [name]: newSelectedValues[name],\n            };\n          }\n\n          return {\n            ...columns,\n            [name]: [...columns[name], ...newSelectedValues[name]],\n          };\n        },\n        { ...state.columns },\n      );\n\n      return {\n        ...state,\n        columns: updatedColumns,\n      };\n    },\n\n    [UPDATE_DIRECT_PATH_TO_FILTER](state) {\n      const { path } = action;\n      return {\n        ...state,\n        directPathToFilter: path,\n      };\n    },\n  };\n\n  if (action.type === UPDATE_LAYOUT_COMPONENTS) {\n    buildActiveFilters({\n      dashboardFilters,\n      components: action.components,\n    });\n    return dashboardFilters;\n  }\n  if (action.type === UPDATE_DASHBOARD_FILTERS_SCOPE) {\n    const allDashboardFiltersScope = action.scopes;\n    // update filter scope for each filter field\n    const updatedFilters = Object.entries(allDashboardFiltersScope).reduce(\n      (map, entry) => {\n        const [filterKey, { scope, immune }] = entry;\n        const { chartId, column } = getChartIdAndColumnFromFilterKey(filterKey);\n        const scopes = {\n          ...map[chartId].scopes,\n          [column]: {\n            scope,\n            immune,\n          },\n        };\n        return {\n          ...map,\n          [chartId]: {\n            ...map[chartId],\n            scopes,\n          },\n        };\n      },\n      dashboardFilters,\n    );\n\n    buildActiveFilters({ dashboardFilters: updatedFilters });\n    return updatedFilters;\n  }\n  if (action.type === REMOVE_FILTER) {\n    const { chartId } = action;\n    const { [chartId]: deletedFilter, ...updatedFilters } = dashboardFilters;\n    buildActiveFilters({ dashboardFilters: updatedFilters });\n\n    return updatedFilters;\n  }\n  if (action.type === HYDRATE_DASHBOARD) {\n    return action.data.dashboardFilters;\n  }\n\n  if (action.type in actionHandlers) {\n    const updatedFilters = {\n      ...dashboardFilters,\n      [action.chartId]: actionHandlers[action.type](\n        dashboardFilters[action.chartId],\n      ),\n    };\n    if (CHANGE_FILTER_VALUE_ACTIONS.includes(action.type)) {\n      buildActiveFilters({ dashboardFilters: updatedFilters });\n    }\n\n    return updatedFilters;\n  }\n\n  return dashboardFilters;\n}\n"],"mappings":"iGAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEA,UADF;AAEEC,aAFF;AAGEC,aAHF;AAIEC,4BAJF;AAKEC,wBALF;AAMEC,8BANF;AAOO,6BAPP;AAQA,SAASC,iBAAT,QAAkC,oBAAlC;AACA,SAASC,UAAT,QAA2B,0CAA3B;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,OAAOC,4BAAP,MAAyC,sCAAzC;AACA,SAASC,kBAAT,QAAmC,gCAAnC;AACA,SAASC,gCAAT,QAAiD,+BAAjD;;AAEA,OAAO,MAAMC,6BAA6B,GAAG;EAC3CC,KAAK,EAAE,CAACL,iBAAD,CADoC;EAE3CM,MAAM,EAAE,EAFmC,EAAtC;;;AAKP,OAAO,MAAMC,eAAe,GAAG;EAC7BC,OAAO,EAAE,IADoB;EAE7BC,WAAW,EAAE,IAFgB;EAG7BC,UAAU,EAAE,IAHiB;EAI7BC,YAAY,EAAE,IAJe;EAK7BC,kBAAkB,EAAE,EALS;EAM7BC,YAAY,EAAE,KANe;EAO7BC,eAAe,EAAE,IAPY;EAQ7BC,OAAO,EAAE,EARoB;EAS7BC,MAAM,EAAE,EATqB;EAU7BC,MAAM,EAAE,EAVqB,EAAxB;;;AAaP,MAAMC,2BAA2B,GAAG,CAAC1B,UAAD,EAAaC,aAAb,EAA4BC,aAA5B,CAApC;;AAEA,eAAe,SAASyB,uBAAT,CAAiCC,gBAAjC,EAAwDC,MAAxD,EAAgE,KAA/BD,gBAA+B,cAA/BA,gBAA+B,GAAZ,EAAY;EAC7E,MAAME,cAAc,GAAG;IACrB,CAAC9B,UAAD,IAAe;MACb,MAAM,EAAEgB,OAAF,EAAWe,SAAX,EAAsBC,SAAtB,KAAoCH,MAA1C;MACA,MAAM,EAAEN,OAAF,EAAWC,MAAX,KAAsBf,4BAA4B,CAACuB,SAAD,CAAxD;MACA,MAAMP,MAAM,GAAGQ,MAAM,CAACC,IAAP,CAAYX,OAAZ,EAAqBY,MAArB;MACb,CAACC,GAAD,EAAMC,MAAN,MAAkB;QAChB,GAAGD,GADa;QAEhB,CAACC,MAAD,GAAUzB,6BAFM,EAAlB,CADa;;MAKb,EALa,CAAf;;MAOA,MAAMQ,kBAAkB,GAAGW,SAAS;MAChC,CAACA,SAAS,CAACO,OAAV,IAAqB,EAAtB,EAA0BC,KAA1B,GAAkCC,MAAlC,CAAyCT,SAAS,CAACU,EAAnD,CADgC;MAEhC,EAFJ;;MAIA,MAAMC,SAAS,GAAG;QAChB,GAAG3B,eADa;QAEhBC,OAFgB;QAGhBC,WAAW,EAAEc,SAAS,CAACU,EAHP;QAIhBtB,YAAY,EAAEa,SAAS,CAACW,UAJR;QAKhBzB,UAAU,EAAEa,SAAS,CAACa,IAAV,CAAeC,SALX;QAMhBzB,kBANgB;QAOhBG,OAPgB;QAQhBC,MARgB;QAShBC,MATgB;QAUhBH,eAAe,EAAE,CAAC,CAACU,SAAS,CAACc,iBAVb;QAWhBzB,YAAY,EAAE,qCAAAY,MAAM,CAACC,IAAP,CAAYX,OAAZ,kBAA8BhB,UAA9B,CAXE,EAAlB;;;MAcA,OAAOmC,SAAP;IACD,CA9BoB;;IAgCrB,CAACxC,aAAD,EAAgB6C,KAAhB,EAAuB;MACrB,MAAM,EAAEC,iBAAF,EAAqBC,KAArB,KAA+BpB,MAArC;MACA,MAAMqB,cAAc,GAAGjB,MAAM,CAACC,IAAP,CAAYc,iBAAZ,EAA+Bb,MAA/B;MACrB,CAACZ,OAAD,EAAU4B,IAAV,KAAmB;QACjB;QACA,IAAI,CAACF,KAAD,IAAU,EAAEE,IAAI,IAAI5B,OAAV,CAAd,EAAkC;UAChC,OAAO;YACL,GAAGA,OADE;YAEL,CAAC4B,IAAD,GAAQH,iBAAiB,CAACG,IAAD,CAFpB,EAAP;;QAID;;QAED,OAAO;UACL,GAAG5B,OADE;UAEL,CAAC4B,IAAD,GAAQ,CAAC,GAAG5B,OAAO,CAAC4B,IAAD,CAAX,EAAmB,GAAGH,iBAAiB,CAACG,IAAD,CAAvC,CAFH,EAAP;;MAID,CAdoB;MAerB,EAAE,GAAGJ,KAAK,CAACxB,OAAX,EAfqB,CAAvB;;;MAkBA,OAAO;QACL,GAAGwB,KADE;QAELxB,OAAO,EAAE2B,cAFJ,EAAP;;IAID,CAxDoB;;IA0DrB,CAAC/C,4BAAD,EAA+B4C,KAA/B,EAAsC;MACpC,MAAM,EAAEK,IAAF,KAAWvB,MAAjB;MACA,OAAO;QACL,GAAGkB,KADE;QAEL3B,kBAAkB,EAAEgC,IAFf,EAAP;;IAID,CAhEoB,EAAvB;;;EAmEA,IAAIvB,MAAM,CAACwB,IAAP,KAAgBjD,wBAApB,EAA8C;IAC5CM,kBAAkB,CAAC;MACjBkB,gBADiB;MAEjB0B,UAAU,EAAEzB,MAAM,CAACyB,UAFF,EAAD,CAAlB;;IAIA,OAAO1B,gBAAP;EACD;EACD,IAAIC,MAAM,CAACwB,IAAP,KAAgBhD,8BAApB,EAAoD;IAClD,MAAMkD,wBAAwB,GAAG1B,MAAM,CAACJ,MAAxC;IACA;IACA,MAAM+B,cAAc,GAAGvB,MAAM,CAACwB,OAAP,CAAeF,wBAAf,EAAyCpB,MAAzC;IACrB,CAACC,GAAD,EAAMsB,KAAN,KAAgB;MACd,MAAM,CAACC,SAAD,EAAY,EAAE9C,KAAF,EAASC,MAAT,EAAZ,IAAiC4C,KAAvC;MACA,MAAM,EAAE1C,OAAF,EAAWqB,MAAX,KAAsB1B,gCAAgC,CAACgD,SAAD,CAA5D;MACA,MAAMlC,MAAM,GAAG;QACb,GAAGW,GAAG,CAACpB,OAAD,CAAH,CAAaS,MADH;QAEb,CAACY,MAAD,GAAU;UACRxB,KADQ;UAERC,MAFQ,EAFG,EAAf;;;MAOA,OAAO;QACL,GAAGsB,GADE;QAEL,CAACpB,OAAD,GAAW;UACT,GAAGoB,GAAG,CAACpB,OAAD,CADG;UAETS,MAFS,EAFN,EAAP;;;IAOD,CAlBoB;IAmBrBG,gBAnBqB,CAAvB;;;IAsBAlB,kBAAkB,CAAC,EAAEkB,gBAAgB,EAAE4B,cAApB,EAAD,CAAlB;IACA,OAAOA,cAAP;EACD;EACD,IAAI3B,MAAM,CAACwB,IAAP,KAAgBpD,aAApB,EAAmC;IACjC,MAAM,EAAEe,OAAF,KAAca,MAApB;IACA,MAAM,EAAE,CAACb,OAAD,GAAW4C,aAAb,EAA4B,GAAGJ,cAA/B,KAAkD5B,gBAAxD;IACAlB,kBAAkB,CAAC,EAAEkB,gBAAgB,EAAE4B,cAApB,EAAD,CAAlB;;IAEA,OAAOA,cAAP;EACD;EACD,IAAI3B,MAAM,CAACwB,IAAP,KAAgB/C,iBAApB,EAAuC;IACrC,OAAOuB,MAAM,CAACgC,IAAP,CAAYjC,gBAAnB;EACD;;EAED,IAAIC,MAAM,CAACwB,IAAP,IAAevB,cAAnB,EAAmC;IACjC,MAAM0B,cAAc,GAAG;MACrB,GAAG5B,gBADkB;MAErB,CAACC,MAAM,CAACb,OAAR,GAAkBc,cAAc,CAACD,MAAM,CAACwB,IAAR,CAAd;MAChBzB,gBAAgB,CAACC,MAAM,CAACb,OAAR,CADA,CAFG,EAAvB;;;IAMA,IAAI,0BAAAU,2BAA2B,MAA3B,CAAAA,2BAA2B,EAAUG,MAAM,CAACwB,IAAjB,CAA/B,EAAuD;MACrD3C,kBAAkB,CAAC,EAAEkB,gBAAgB,EAAE4B,cAApB,EAAD,CAAlB;IACD;;IAED,OAAOA,cAAP;EACD;;EAED,OAAO5B,gBAAP;AACD"},"metadata":{},"sourceType":"module"}