{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useState } from 'react';\nimport { NO_TIME_RANGE } from '@superset-ui/core';\nimport { fetchTimeRange } from 'src/explore/components/controls/DateFilterControl';\nimport { Operators } from 'src/explore/constants';\nimport { EXPRESSION_TYPES } from '../types';\nexport const useGetTimeRangeLabel = (adhocFilter) => {\n  const [actualTimeRange, setActualTimeRange] = useState({});\n  useEffect(() => {\n    if (adhocFilter.operator !== Operators.TEMPORAL_RANGE ||\n    adhocFilter.expressionType !== EXPRESSION_TYPES.SIMPLE) {\n      setActualTimeRange({});\n    }\n    if (adhocFilter.operator === Operators.TEMPORAL_RANGE &&\n    adhocFilter.comparator === NO_TIME_RANGE) {\n      setActualTimeRange({\n        actualTimeRange: `${adhocFilter.subject} (${NO_TIME_RANGE})`,\n        title: NO_TIME_RANGE });\n\n    }\n    if (adhocFilter.operator === Operators.TEMPORAL_RANGE &&\n    adhocFilter.expressionType === EXPRESSION_TYPES.SIMPLE &&\n    adhocFilter.comparator !== NO_TIME_RANGE &&\n    actualTimeRange.title !== adhocFilter.comparator) {\n      fetchTimeRange(adhocFilter.comparator, adhocFilter.subject).then((_ref) => {let { value, error } = _ref;\n        if (error) {\n          setActualTimeRange({\n            actualTimeRange: `${adhocFilter.subject} (${adhocFilter.comparator})`,\n            title: error });\n\n        } else\n        {\n          setActualTimeRange({\n            actualTimeRange: value != null ? value : '',\n            title: adhocFilter.comparator });\n\n        }\n      });\n    }\n  }, [adhocFilter]);\n  return actualTimeRange;\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,aAAT,QAA8B,mBAA9B;AACA,SAASC,cAAT,QAA+B,mDAA/B;AACA,SAASC,SAAT,QAA0B,uBAA1B;AAEA,SAASC,gBAAT,QAAiC,UAAjC;AAOA,OAAO,MAAMC,oBAAoB,GAAG,CAACC,WAAD,KAAsC;EACxE,MAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCR,QAAQ,CAAU,EAAV,CAAtD;EAEAD,SAAS,CAAC,MAAK;IACb,IACEO,WAAW,CAACG,QAAZ,KAAyBN,SAAS,CAACO,cAAnC;IACAJ,WAAW,CAACK,cAAZ,KAA+BP,gBAAgB,CAACQ,MAFlD,EAGE;MACAJ,kBAAkB,CAAC,EAAD,CAAlB;IACD;IACD,IACEF,WAAW,CAACG,QAAZ,KAAyBN,SAAS,CAACO,cAAnC;IACAJ,WAAW,CAACO,UAAZ,KAA2BZ,aAF7B,EAGE;MACAO,kBAAkB,CAAC;QACjBD,eAAe,EAAE,GAAGD,WAAW,CAACQ,OAAO,KAAKb,aAAa,GADxC;QAEjBc,KAAK,EAAEd,aAFU,EAAD,CAAlB;;IAID;IAED,IACEK,WAAW,CAACG,QAAZ,KAAyBN,SAAS,CAACO,cAAnC;IACAJ,WAAW,CAACK,cAAZ,KAA+BP,gBAAgB,CAACQ,MADhD;IAEAN,WAAW,CAACO,UAAZ,KAA2BZ,aAF3B;IAGAM,eAAe,CAACQ,KAAhB,KAA0BT,WAAW,CAACO,UAJxC,EAKE;MACAX,cAAc,CAACI,WAAW,CAACO,UAAb,EAAyBP,WAAW,CAACQ,OAArC,CAAd,CAA4DE,IAA5D,CACE,UAAqB,KAApB,EAAEC,KAAF,EAASC,KAAT,EAAoB;QACnB,IAAIA,KAAJ,EAAW;UACTV,kBAAkB,CAAC;YACjBD,eAAe,EAAE,GAAGD,WAAW,CAACQ,OAAO,KAAKR,WAAW,CAACO,UAAU,GADjD;YAEjBE,KAAK,EAAEG,KAFU,EAAD,CAAlB;;QAID,CALD;QAKO;UACLV,kBAAkB,CAAC;YACjBD,eAAe,EAAEU,KAAF,WAAEA,KAAF,GAAW,EADT;YAEjBF,KAAK,EAAET,WAAW,CAACO,UAFF,EAAD,CAAlB;;QAID;MACF,CAbH;IAeD;EACF,CAvCQ,EAuCN,CAACP,WAAD,CAvCM,CAAT;EAyCA,OAAOC,eAAP;AACD,CA7CM","names":["useEffect","useState","NO_TIME_RANGE","fetchTimeRange","Operators","EXPRESSION_TYPES","useGetTimeRangeLabel","adhocFilter","actualTimeRange","setActualTimeRange","operator","TEMPORAL_RANGE","expressionType","SIMPLE","comparator","subject","title","then","value","error"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/controls/FilterControl/utils/useGetTimeRangeLabel.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useState } from 'react';\nimport { NO_TIME_RANGE } from '@superset-ui/core';\nimport { fetchTimeRange } from 'src/explore/components/controls/DateFilterControl';\nimport { Operators } from 'src/explore/constants';\nimport AdhocFilter from '../AdhocFilter';\nimport { EXPRESSION_TYPES } from '../types';\n\ninterface Results {\n  actualTimeRange?: string;\n  title?: string;\n}\n\nexport const useGetTimeRangeLabel = (adhocFilter: AdhocFilter): Results => {\n  const [actualTimeRange, setActualTimeRange] = useState<Results>({});\n\n  useEffect(() => {\n    if (\n      adhocFilter.operator !== Operators.TEMPORAL_RANGE ||\n      adhocFilter.expressionType !== EXPRESSION_TYPES.SIMPLE\n    ) {\n      setActualTimeRange({});\n    }\n    if (\n      adhocFilter.operator === Operators.TEMPORAL_RANGE &&\n      adhocFilter.comparator === NO_TIME_RANGE\n    ) {\n      setActualTimeRange({\n        actualTimeRange: `${adhocFilter.subject} (${NO_TIME_RANGE})`,\n        title: NO_TIME_RANGE,\n      });\n    }\n\n    if (\n      adhocFilter.operator === Operators.TEMPORAL_RANGE &&\n      adhocFilter.expressionType === EXPRESSION_TYPES.SIMPLE &&\n      adhocFilter.comparator !== NO_TIME_RANGE &&\n      actualTimeRange.title !== adhocFilter.comparator\n    ) {\n      fetchTimeRange(adhocFilter.comparator, adhocFilter.subject).then(\n        ({ value, error }) => {\n          if (error) {\n            setActualTimeRange({\n              actualTimeRange: `${adhocFilter.subject} (${adhocFilter.comparator})`,\n              title: error,\n            });\n          } else {\n            setActualTimeRange({\n              actualTimeRange: value ?? '',\n              title: adhocFilter.comparator,\n            });\n          }\n        },\n      );\n    }\n  }, [adhocFilter]);\n\n  return actualTimeRange;\n};\n"]},"metadata":{},"sourceType":"module"}