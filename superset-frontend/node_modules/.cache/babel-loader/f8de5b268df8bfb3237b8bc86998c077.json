{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useMemo, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { css, t, useTheme, useTruncation } from '@superset-ui/core';\nimport Icons from 'src/components/Icons';\nimport { setDirectPathToChild } from 'src/dashboard/actions/dashboardState';\nimport { DependencyItem, Row, RowLabel, RowTruncationCount, RowValue, TooltipList } from './Styles';\nimport { useFilterDependencies } from './useFilterDependencies';\nimport { TooltipWithTruncation } from './TooltipWithTruncation';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst DependencyValue = (_ref) => {let { dependency, hasSeparator } = _ref;\n  const dispatch = useDispatch();\n  const handleClick = useCallback(() => {\n    dispatch(setDirectPathToChild([dependency.id]));\n  }, [dependency.id, dispatch]);\n  return ___EmotionJSX(\"span\", null,\n  hasSeparator && ___EmotionJSX(\"span\", null, \", \"),\n  ___EmotionJSX(DependencyItem, { role: \"button\", onClick: handleClick, tabIndex: 0 },\n  dependency.name));\n\n\n};\nexport const DependenciesRow = /*#__PURE__*/React.memo((_ref2) => {let { filter } = _ref2;\n  const dependencies = useFilterDependencies(filter);\n  const dependenciesRef = useRef(null);\n  const plusRef = useRef(null);\n  const [elementsTruncated, hasHiddenElements] = useTruncation(dependenciesRef, plusRef);\n  const theme = useTheme();\n  const tooltipText = useMemo(() => elementsTruncated > 0 && dependencies ? ___EmotionJSX(TooltipList, null,\n  dependencies.map((dependency) => ___EmotionJSX(\"li\", null,\n  ___EmotionJSX(DependencyValue, { dependency: dependency })))) :\n\n  null, [elementsTruncated, dependencies]);\n  if (!Array.isArray(dependencies) || dependencies.length === 0) {\n    return null;\n  }\n  return ___EmotionJSX(Row, null,\n  ___EmotionJSX(RowLabel, { css: css`\n          display: inline-flex;\n          align-items: center;\n        ` },\n  t('Dependent on'), ' ',\n  ___EmotionJSX(TooltipWithTruncation, { title: t('Filter only displays values relevant to selections made in other filters.') },\n  ___EmotionJSX(Icons.Info, { iconSize: \"m\", iconColor: theme.colors.grayscale.light1, css: css`\n              margin-left: ${theme.gridUnit}px;\n            ` }))),\n\n\n  ___EmotionJSX(TooltipWithTruncation, { title: tooltipText },\n  ___EmotionJSX(RowValue, { ref: dependenciesRef },\n  dependencies.map((dependency, index) => ___EmotionJSX(DependencyValue, { key: dependency.id, dependency: dependency, hasSeparator: index !== 0 }))),\n\n  hasHiddenElements && ___EmotionJSX(RowTruncationCount, { ref: plusRef }, \"+\",\n  elementsTruncated)));\n\n\n\n});","map":{"version":3,"mappings":"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","names":["React","useCallback","useMemo","useRef","useDispatch","css","t","useTheme","useTruncation","Icons","setDirectPathToChild","DependencyItem","Row","RowLabel","RowTruncationCount","RowValue","TooltipList","useFilterDependencies","TooltipWithTruncation","DependencyValue","dependency","hasSeparator","dispatch","handleClick","id","name","DependenciesRow","memo","filter","dependencies","dependenciesRef","plusRef","elementsTruncated","hasHiddenElements","theme","tooltipText","map","Array","isArray","length","colors","grayscale","light1","gridUnit","index"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/dashboard/components/nativeFilters/FilterCard/DependenciesRow.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useMemo, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { css, t, useTheme, useTruncation } from '@superset-ui/core';\nimport Icons from 'src/components/Icons';\nimport { setDirectPathToChild } from 'src/dashboard/actions/dashboardState';\nimport {\n  DependencyItem,\n  Row,\n  RowLabel,\n  RowTruncationCount,\n  RowValue,\n  TooltipList,\n} from './Styles';\nimport { useFilterDependencies } from './useFilterDependencies';\nimport { DependencyValueProps, FilterCardRowProps } from './types';\nimport { TooltipWithTruncation } from './TooltipWithTruncation';\n\nconst DependencyValue = ({\n  dependency,\n  hasSeparator,\n}: DependencyValueProps) => {\n  const dispatch = useDispatch();\n  const handleClick = useCallback(() => {\n    dispatch(setDirectPathToChild([dependency.id]));\n  }, [dependency.id, dispatch]);\n  return (\n    <span>\n      {hasSeparator && <span>, </span>}\n      <DependencyItem role=\"button\" onClick={handleClick} tabIndex={0}>\n        {dependency.name}\n      </DependencyItem>\n    </span>\n  );\n};\n\nexport const DependenciesRow = React.memo(({ filter }: FilterCardRowProps) => {\n  const dependencies = useFilterDependencies(filter);\n  const dependenciesRef = useRef<HTMLDivElement>(null);\n  const plusRef = useRef<HTMLDivElement>(null);\n  const [elementsTruncated, hasHiddenElements] = useTruncation(\n    dependenciesRef,\n    plusRef,\n  );\n  const theme = useTheme();\n\n  const tooltipText = useMemo(\n    () =>\n      elementsTruncated > 0 && dependencies ? (\n        <TooltipList>\n          {dependencies.map(dependency => (\n            <li>\n              <DependencyValue dependency={dependency} />\n            </li>\n          ))}\n        </TooltipList>\n      ) : null,\n    [elementsTruncated, dependencies],\n  );\n\n  if (!Array.isArray(dependencies) || dependencies.length === 0) {\n    return null;\n  }\n  return (\n    <Row>\n      <RowLabel\n        css={css`\n          display: inline-flex;\n          align-items: center;\n        `}\n      >\n        {t('Dependent on')}{' '}\n        <TooltipWithTruncation\n          title={t(\n            'Filter only displays values relevant to selections made in other filters.',\n          )}\n        >\n          <Icons.Info\n            iconSize=\"m\"\n            iconColor={theme.colors.grayscale.light1}\n            css={css`\n              margin-left: ${theme.gridUnit}px;\n            `}\n          />\n        </TooltipWithTruncation>\n      </RowLabel>\n      <TooltipWithTruncation title={tooltipText}>\n        <RowValue ref={dependenciesRef}>\n          {dependencies.map((dependency, index) => (\n            <DependencyValue\n              key={dependency.id}\n              dependency={dependency}\n              hasSeparator={index !== 0}\n            />\n          ))}\n        </RowValue>\n        {hasHiddenElements && (\n          <RowTruncationCount ref={plusRef}>\n            +{elementsTruncated}\n          </RowTruncationCount>\n        )}\n      </TooltipWithTruncation>\n    </Row>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}