{"ast":null,"code":"import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { QueryState, t } from '@superset-ui/core';\nimport getInitialState from './getInitialState';\nimport * as actions from '../actions/sqlLab';\nimport { now } from '../../utils/dates';\nimport {\naddToObject,\nalterInObject,\nalterInArr,\nremoveFromArr,\ngetFromArr,\naddToArr,\nextendArr } from\n'../../reduxUtils';\n\nfunction alterUnsavedQueryEditorState(state, updatedState, id) {\n  if (state.tabHistory[state.tabHistory.length - 1] !== id) {\n    const { queryEditors } = alterInArr(\n    state,\n    'queryEditors',\n    { id },\n    updatedState);\n\n    return {\n      queryEditors };\n\n  }\n  return {\n    unsavedQueryEditor: {\n      ...(state.unsavedQueryEditor.id === id && state.unsavedQueryEditor),\n      ...(id ? { id, ...updatedState } : state.unsavedQueryEditor) } };\n\n\n}\n\nexport default function sqlLabReducer(state, action) {if (state === void 0) {state = {};}\n  const actionHandlers = {\n    [actions.ADD_QUERY_EDITOR]() {\n      const mergeUnsavedState = alterInArr(\n      state,\n      'queryEditors',\n      state.unsavedQueryEditor,\n      {\n        ...state.unsavedQueryEditor });\n\n\n      const newState = {\n        ...mergeUnsavedState,\n        tabHistory: [...state.tabHistory, action.queryEditor.id] };\n\n      return addToArr(newState, 'queryEditors', action.queryEditor);\n    },\n    [actions.QUERY_EDITOR_SAVED]() {\n      const { query, result, clientId } = action;\n      const existing = state.queryEditors.find((qe) => qe.id === clientId);\n      return alterInArr(\n      state,\n      'queryEditors',\n      existing,\n      {\n        remoteId: result.remoteId,\n        name: query.name },\n\n      'id');\n\n    },\n    [actions.UPDATE_QUERY_EDITOR]() {\n      const id = action.alterations.remoteId;\n      const existing = state.queryEditors.find((qe) => qe.remoteId === id);\n      if (existing == null) return state;\n      return alterInArr(\n      state,\n      'queryEditors',\n      existing,\n      action.alterations,\n      'remoteId');\n\n    },\n    [actions.CLONE_QUERY_TO_NEW_TAB]() {\n      const queryEditor = state.queryEditors.find(\n      (qe) => qe.id === state.tabHistory[state.tabHistory.length - 1]);\n\n      const progenitor = {\n        ...queryEditor,\n        ...(state.unsavedQueryEditor.id === queryEditor.id &&\n        state.unsavedQueryEditor) };\n\n      const qe = {\n        remoteId: progenitor.remoteId,\n        name: t('Copy of %s', progenitor.name),\n        dbId: action.query.dbId ? action.query.dbId : null,\n        schema: action.query.schema ? action.query.schema : null,\n        autorun: true,\n        sql: action.query.sql,\n        queryLimit: action.query.queryLimit,\n        maxRow: action.query.maxRow };\n\n      const stateWithoutUnsavedState = {\n        ...state,\n        unsavedQueryEditor: {} };\n\n      return sqlLabReducer(\n      stateWithoutUnsavedState,\n      actions.addQueryEditor(qe));\n\n    },\n    [actions.REMOVE_QUERY_EDITOR]() {\n      const queryEditor = {\n        ...action.queryEditor,\n        ...(action.queryEditor.id === state.unsavedQueryEditor.id &&\n        state.unsavedQueryEditor) };\n\n      let newState = removeFromArr(state, 'queryEditors', queryEditor);\n      // List of remaining queryEditor ids\n      const qeIds = newState.queryEditors.map((qe) => qe.id);\n\n      const queries = {};\n      Object.keys(state.queries).forEach((k) => {\n        const query = state.queries[k];\n        if (qeIds.indexOf(query.sqlEditorId) > -1) {\n          queries[k] = query;\n        }\n      });\n\n      let tabHistory = state.tabHistory.slice();\n      tabHistory = tabHistory.filter((id) => qeIds.indexOf(id) > -1);\n\n      // Remove associated table schemas\n      const tables = state.tables.filter(\n      (table) => table.queryEditorId !== queryEditor.id);\n\n\n      newState = {\n        ...newState,\n        tabHistory,\n        tables,\n        queries,\n        unsavedQueryEditor: {\n          ...(action.queryEditor.id !== state.unsavedQueryEditor.id &&\n          state.unsavedQueryEditor) } };\n\n\n      return newState;\n    },\n    [actions.REMOVE_QUERY]() {\n      const newQueries = { ...state.queries };\n      delete newQueries[action.query.id];\n      return { ...state, queries: newQueries };\n    },\n    [actions.RESET_STATE]() {\n      return { ...getInitialState() };\n    },\n    [actions.MERGE_TABLE]() {\n      const at = { ...action.table };\n      let existingTable;\n      state.tables.forEach((xt) => {\n        if (\n        xt.dbId === at.dbId &&\n        xt.queryEditorId === at.queryEditorId &&\n        xt.schema === at.schema &&\n        xt.name === at.name)\n        {\n          existingTable = xt;\n        }\n      });\n      if (existingTable) {\n        if (action.query) {\n          at.dataPreviewQueryId = action.query.id;\n        }\n        return alterInArr(state, 'tables', existingTable, at);\n      }\n      // for new table, associate Id of query for data preview\n      at.dataPreviewQueryId = null;\n      let newState = addToArr(state, 'tables', at, Boolean(action.prepend));\n      if (action.query) {\n        newState = alterInArr(newState, 'tables', at, {\n          dataPreviewQueryId: action.query.id });\n\n      }\n      return newState;\n    },\n    [actions.EXPAND_TABLE]() {\n      return alterInArr(state, 'tables', action.table, { expanded: true });\n    },\n    [actions.REMOVE_DATA_PREVIEW]() {\n      const queries = { ...state.queries };\n      delete queries[action.table.dataPreviewQueryId];\n      const newState = alterInArr(state, 'tables', action.table, {\n        dataPreviewQueryId: null });\n\n      return { ...newState, queries };\n    },\n    [actions.CHANGE_DATA_PREVIEW_ID]() {\n      const queries = { ...state.queries };\n      delete queries[action.oldQueryId];\n\n      const newTables = [];\n      state.tables.forEach((xt) => {\n        if (xt.dataPreviewQueryId === action.oldQueryId) {\n          newTables.push({ ...xt, dataPreviewQueryId: action.newQuery.id });\n        } else {\n          newTables.push(xt);\n        }\n      });\n      return {\n        ...state,\n        queries,\n        tables: newTables,\n        activeSouthPaneTab: action.newQuery.id };\n\n    },\n    [actions.COLLAPSE_TABLE]() {\n      return alterInArr(state, 'tables', action.table, { expanded: false });\n    },\n    [actions.REMOVE_TABLES]() {\n      const tableIds = action.tables.map((table) => table.id);\n      return {\n        ...state,\n        tables: state.tables.filter((table) => !_includesInstanceProperty(tableIds).call(tableIds, table.id)) };\n\n    },\n    [actions.START_QUERY_VALIDATION]() {\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n        state,\n        {\n          validationResult: {\n            id: action.query.id,\n            errors: [],\n            completed: false } },\n\n\n        action.query.sqlEditorId) };\n\n\n    },\n    [actions.QUERY_VALIDATION_RETURNED]() {\n      // If the server is very slow about answering us, we might get validation\n      // responses back out of order. This check confirms the response we're\n      // handling corresponds to the most recently dispatched request.\n      //\n      // We don't care about any but the most recent because validations are\n      // only valid for the SQL text they correspond to -- once the SQL has\n      // changed, the old validation doesn't tell us anything useful anymore.\n      const qe = {\n        ...getFromArr(state.queryEditors, action.query.sqlEditorId),\n        ...(state.unsavedQueryEditor.id === action.query.sqlEditorId &&\n        state.unsavedQueryEditor) };\n\n      if (qe.validationResult.id !== action.query.id) {\n        return state;\n      }\n      // Otherwise, persist the results on the queryEditor state\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n        state,\n        {\n          validationResult: {\n            id: action.query.id,\n            errors: action.results,\n            completed: true } },\n\n\n        action.query.sqlEditorId) };\n\n\n    },\n    [actions.QUERY_VALIDATION_FAILED]() {\n      // If the server is very slow about answering us, we might get validation\n      // responses back out of order. This check confirms the response we're\n      // handling corresponds to the most recently dispatched request.\n      //\n      // We don't care about any but the most recent because validations are\n      // only valid for the SQL text they correspond to -- once the SQL has\n      // changed, the old validation doesn't tell us anything useful anymore.\n      const qe = getFromArr(state.queryEditors, action.query.sqlEditorId);\n      if (qe.validationResult.id !== action.query.id) {\n        return state;\n      }\n      // Otherwise, persist the results on the queryEditor state\n      let newState = { ...state };\n      const sqlEditor = { id: action.query.sqlEditorId };\n      newState = alterInArr(newState, 'queryEditors', sqlEditor, {\n        validationResult: {\n          id: action.query.id,\n          errors: [\n          {\n            line_number: 1,\n            start_column: 1,\n            end_column: 1,\n            message: `The server failed to validate your query.\\n${action.message}` }],\n\n\n          completed: true } });\n\n\n      return newState;\n    },\n    [actions.COST_ESTIMATE_STARTED]() {\n      return {\n        ...state,\n        queryCostEstimates: {\n          ...state.queryCostEstimates,\n          [action.query.id]: {\n            completed: false,\n            cost: null,\n            error: null } } };\n\n\n\n    },\n    [actions.COST_ESTIMATE_RETURNED]() {\n      return {\n        ...state,\n        queryCostEstimates: {\n          ...state.queryCostEstimates,\n          [action.query.id]: {\n            completed: true,\n            cost: action.json.result,\n            error: null } } };\n\n\n\n    },\n    [actions.COST_ESTIMATE_FAILED]() {\n      return {\n        ...state,\n        queryCostEstimates: {\n          ...state.queryCostEstimates,\n          [action.query.id]: {\n            completed: false,\n            cost: null,\n            error: action.error } } };\n\n\n\n    },\n    [actions.START_QUERY]() {\n      let newState = { ...state };\n      if (action.query.sqlEditorId) {\n        const qe = {\n          ...getFromArr(state.queryEditors, action.query.sqlEditorId),\n          ...(action.query.sqlEditorId === state.unsavedQueryEditor.id &&\n          state.unsavedQueryEditor) };\n\n        if (qe.latestQueryId && state.queries[qe.latestQueryId]) {\n          const newResults = {\n            ...state.queries[qe.latestQueryId].results,\n            data: [],\n            query: null };\n\n          const q = { ...state.queries[qe.latestQueryId], results: newResults };\n          const queries = { ...state.queries, [q.id]: q };\n          newState = { ...state, queries };\n        }\n      } else {\n        newState.activeSouthPaneTab = action.query.id;\n      }\n      newState = addToObject(newState, 'queries', action.query);\n\n      return {\n        ...newState,\n        ...alterUnsavedQueryEditorState(\n        state,\n        {\n          latestQueryId: action.query.id },\n\n        action.query.sqlEditorId) };\n\n\n    },\n    [actions.STOP_QUERY]() {\n      return alterInObject(state, 'queries', action.query, {\n        state: QueryState.STOPPED,\n        results: [] });\n\n    },\n    [actions.CLEAR_QUERY_RESULTS]() {\n      const newResults = { ...action.query.results };\n      newResults.data = [];\n      return alterInObject(state, 'queries', action.query, {\n        results: newResults,\n        cached: true });\n\n    },\n    [actions.REQUEST_QUERY_RESULTS]() {\n      return alterInObject(state, 'queries', action.query, {\n        state: QueryState.FETCHING });\n\n    },\n    [actions.QUERY_SUCCESS]() {var _action$results, _action$results$query, _action$results2, _action$results2$quer, _action$results3, _action$results3$quer, _action$results4, _action$results4$quer, _action$results5, _action$results5$quer;\n      // prevent race condition where query succeeds shortly after being canceled\n      // or the final result was unsuccessful\n      if (\n      action.query.state === QueryState.STOPPED ||\n      action.results.status !== QueryState.SUCCESS)\n      {\n        return state;\n      }\n      const alts = {\n        endDttm: now(),\n        progress: 100,\n        results: action.results,\n        rows: (action == null ? void 0 : (_action$results = action.results) == null ? void 0 : (_action$results$query = _action$results.query) == null ? void 0 : _action$results$query.rows) || 0,\n        state: QueryState.SUCCESS,\n        limitingFactor: action == null ? void 0 : (_action$results2 = action.results) == null ? void 0 : (_action$results2$quer = _action$results2.query) == null ? void 0 : _action$results2$quer.limitingFactor,\n        tempSchema: action == null ? void 0 : (_action$results3 = action.results) == null ? void 0 : (_action$results3$quer = _action$results3.query) == null ? void 0 : _action$results3$quer.tempSchema,\n        tempTable: action == null ? void 0 : (_action$results4 = action.results) == null ? void 0 : (_action$results4$quer = _action$results4.query) == null ? void 0 : _action$results4$quer.tempTable,\n        errorMessage: null,\n        cached: false };\n\n\n      const resultsKey = action == null ? void 0 : (_action$results5 = action.results) == null ? void 0 : (_action$results5$quer = _action$results5.query) == null ? void 0 : _action$results5$quer.resultsKey;\n      if (resultsKey) {\n        alts.resultsKey = resultsKey;\n      }\n\n      return alterInObject(state, 'queries', action.query, alts);\n    },\n    [actions.QUERY_FAILED]() {\n      if (action.query.state === QueryState.STOPPED) {\n        return state;\n      }\n      const alts = {\n        state: QueryState.FAILED,\n        errors: action.errors,\n        errorMessage: action.msg,\n        endDttm: now(),\n        link: action.link };\n\n      return alterInObject(state, 'queries', action.query, alts);\n    },\n    [actions.SET_ACTIVE_QUERY_EDITOR]() {var _action$queryEditor;\n      const qeIds = state.queryEditors.map((qe) => qe.id);\n      if (\n      qeIds.indexOf((_action$queryEditor = action.queryEditor) == null ? void 0 : _action$queryEditor.id) > -1 &&\n      state.tabHistory[state.tabHistory.length - 1] !== action.queryEditor.id)\n      {\n        const mergeUnsavedState = alterInArr(\n        state,\n        'queryEditors',\n        state.unsavedQueryEditor,\n        {\n          ...state.unsavedQueryEditor });\n\n\n        return {\n          ...(action.queryEditor.id === state.unsavedQueryEditor.id ?\n          alterInArr(\n          mergeUnsavedState,\n          'queryEditors',\n          action.queryEditor,\n          {\n            ...action.queryEditor,\n            ...state.unsavedQueryEditor }) :\n\n\n          mergeUnsavedState),\n          tabHistory: [...state.tabHistory, action.queryEditor.id] };\n\n      }\n      return state;\n    },\n    [actions.LOAD_QUERY_EDITOR]() {\n      const mergeUnsavedState = alterInArr(\n      state,\n      'queryEditors',\n      state.unsavedQueryEditor,\n      {\n        ...state.unsavedQueryEditor });\n\n\n      return alterInArr(mergeUnsavedState, 'queryEditors', action.queryEditor, {\n        ...action.queryEditor });\n\n    },\n    [actions.SET_TABLES]() {\n      return extendArr(state, 'tables', action.tables);\n    },\n    [actions.SET_ACTIVE_SOUTHPANE_TAB]() {\n      return { ...state, activeSouthPaneTab: action.tabId };\n    },\n    [actions.MIGRATE_QUERY_EDITOR]() {\n      // remove migrated query editor from localStorage\n      const { sqlLab } = JSON.parse(localStorage.getItem('redux'));\n      sqlLab.queryEditors = sqlLab.queryEditors.filter(\n      (qe) => qe.id !== action.oldQueryEditor.id);\n\n      localStorage.setItem('redux', JSON.stringify({ sqlLab }));\n\n      // replace localStorage query editor with the server backed one\n      return addToArr(\n      removeFromArr(state, 'queryEditors', action.oldQueryEditor),\n      'queryEditors',\n      action.newQueryEditor);\n\n    },\n    [actions.MIGRATE_TABLE]() {\n      // remove migrated table from localStorage\n      const { sqlLab } = JSON.parse(localStorage.getItem('redux'));\n      sqlLab.tables = sqlLab.tables.filter(\n      (table) => table.id !== action.oldTable.id);\n\n      localStorage.setItem('redux', JSON.stringify({ sqlLab }));\n\n      // replace localStorage table with the server backed one\n      return addToArr(\n      removeFromArr(state, 'tables', action.oldTable),\n      'tables',\n      action.newTable);\n\n    },\n    [actions.MIGRATE_TAB_HISTORY]() {\n      // remove migrated tab from localStorage tabHistory\n      const { sqlLab } = JSON.parse(localStorage.getItem('redux'));\n      sqlLab.tabHistory = sqlLab.tabHistory.filter(\n      (tabId) => tabId !== action.oldId);\n\n      localStorage.setItem('redux', JSON.stringify({ sqlLab }));\n      const tabHistory = state.tabHistory.filter(\n      (tabId) => tabId !== action.oldId);\n\n      tabHistory.push(action.newId);\n      return { ...state, tabHistory };\n    },\n    [actions.MIGRATE_QUERY]() {\n      const query = {\n        ...state.queries[action.queryId],\n        // point query to migrated query editor\n        sqlEditorId: action.queryEditorId };\n\n      const queries = { ...state.queries, [query.id]: query };\n      return { ...state, queries };\n    },\n    [actions.QUERY_EDITOR_SETDB]() {\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n        state,\n        {\n          dbId: action.dbId },\n\n        action.queryEditor.id) };\n\n\n    },\n    [actions.QUERY_EDITOR_SET_FUNCTION_NAMES]() {\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n        state,\n        {\n          functionNames: action.functionNames },\n\n        action.queryEditor.id) };\n\n\n    },\n    [actions.QUERY_EDITOR_SET_SCHEMA]() {\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n        state,\n        {\n          schema: action.schema },\n\n        action.queryEditor.id) };\n\n\n    },\n    [actions.QUERY_EDITOR_SET_TITLE]() {\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n        state,\n        {\n          name: action.name },\n\n        action.queryEditor.id) };\n\n\n    },\n    [actions.QUERY_EDITOR_SET_SQL]() {\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n        state,\n        {\n          sql: action.sql },\n\n        action.queryEditor.id) };\n\n\n    },\n    [actions.QUERY_EDITOR_SET_QUERY_LIMIT]() {\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n        state,\n        {\n          queryLimit: action.queryLimit },\n\n        action.queryEditor.id) };\n\n\n    },\n    [actions.QUERY_EDITOR_SET_TEMPLATE_PARAMS]() {\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n        state,\n        {\n          templateParams: action.templateParams },\n\n        action.queryEditor.id) };\n\n\n    },\n    [actions.QUERY_EDITOR_SET_SELECTED_TEXT]() {\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n        state,\n        {\n          selectedText: action.sql },\n\n        action.queryEditor.id) };\n\n\n    },\n    [actions.QUERY_EDITOR_SET_AUTORUN]() {\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n        state,\n        {\n          autorun: action.autorun },\n\n        action.queryEditor.id) };\n\n\n    },\n    [actions.QUERY_EDITOR_PERSIST_HEIGHT]() {\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n        state,\n        {\n          northPercent: action.northPercent,\n          southPercent: action.southPercent },\n\n        action.queryEditor.id) };\n\n\n    },\n    [actions.QUERY_EDITOR_TOGGLE_LEFT_BAR]() {\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n        state,\n        {\n          hideLeftBar: action.hideLeftBar },\n\n        action.queryEditor.id) };\n\n\n    },\n    [actions.SET_DATABASES]() {\n      const databases = {};\n      action.databases.forEach((db) => {\n        databases[db.id] = {\n          ...db,\n          extra_json: JSON.parse(db.extra || '') };\n\n      });\n      return { ...state, databases };\n    },\n    [actions.REFRESH_QUERIES]() {\n      let newQueries = { ...state.queries };\n      // Fetch the updates to the queries present in the store.\n      let change = false;\n      let { queriesLastUpdate } = state;\n      Object.entries(action.alteredQueries).forEach((_ref) => {let [id, changedQuery] = _ref;\n        if (\n        !state.queries.hasOwnProperty(id) ||\n        state.queries[id].state !== QueryState.STOPPED &&\n        state.queries[id].state !== QueryState.FAILED)\n        {var _state$queries$id, _context;\n          if (changedQuery.changedOn > queriesLastUpdate) {\n            queriesLastUpdate = changedQuery.changedOn;\n          }\n          const prevState = (_state$queries$id = state.queries[id]) == null ? void 0 : _state$queries$id.state;\n          const currentState = changedQuery.state;\n          newQueries[id] = {\n            ...state.queries[id],\n            ...changedQuery,\n            // race condition:\n            // because of async behavior, sql lab may still poll a couple of seconds\n            // when it started fetching or finished rendering results\n            state:\n            currentState === QueryState.SUCCESS &&\n            _includesInstanceProperty(_context = [QueryState.FETCHING, QueryState.SUCCESS]).call(_context, prevState) ?\n            prevState :\n            currentState };\n\n          change = true;\n        }\n      });\n      if (!change) {\n        newQueries = state.queries;\n      }\n      return { ...state, queries: newQueries, queriesLastUpdate };\n    },\n    [actions.CLEAR_INACTIVE_QUERIES]() {\n      const { queries } = state;\n      const cleanedQueries = Object.fromEntries(\n      Object.entries(queries).filter((_ref2) => {var _context2;let [, query] = _ref2;\n        if (\n        _includesInstanceProperty(_context2 = ['running', 'pending']).call(_context2, query.state) &&\n        query.progress === 0)\n        {\n          return false;\n        }\n        return true;\n      }));\n\n      return { ...state, queries: cleanedQueries };\n    },\n    [actions.SET_USER_OFFLINE]() {\n      return { ...state, offline: action.offline };\n    },\n    [actions.CREATE_DATASOURCE_STARTED]() {\n      return { ...state, isDatasourceLoading: true, errorMessage: null };\n    },\n    [actions.CREATE_DATASOURCE_SUCCESS]() {\n      return {\n        ...state,\n        isDatasourceLoading: false,\n        errorMessage: null,\n        datasource: action.datasource };\n\n    },\n    [actions.CREATE_DATASOURCE_FAILED]() {\n      return { ...state, isDatasourceLoading: false, errorMessage: action.err };\n    } };\n\n  if (action.type in actionHandlers) {\n    return actionHandlers[action.type]();\n  }\n  return state;\n}","map":{"version":3,"names":["QueryState","t","getInitialState","actions","now","addToObject","alterInObject","alterInArr","removeFromArr","getFromArr","addToArr","extendArr","alterUnsavedQueryEditorState","state","updatedState","id","tabHistory","length","queryEditors","unsavedQueryEditor","sqlLabReducer","action","actionHandlers","ADD_QUERY_EDITOR","mergeUnsavedState","newState","queryEditor","QUERY_EDITOR_SAVED","query","result","clientId","existing","find","qe","remoteId","name","UPDATE_QUERY_EDITOR","alterations","CLONE_QUERY_TO_NEW_TAB","progenitor","dbId","schema","autorun","sql","queryLimit","maxRow","stateWithoutUnsavedState","addQueryEditor","REMOVE_QUERY_EDITOR","qeIds","map","queries","Object","keys","forEach","k","indexOf","sqlEditorId","slice","filter","tables","table","queryEditorId","REMOVE_QUERY","newQueries","RESET_STATE","MERGE_TABLE","at","existingTable","xt","dataPreviewQueryId","Boolean","prepend","EXPAND_TABLE","expanded","REMOVE_DATA_PREVIEW","CHANGE_DATA_PREVIEW_ID","oldQueryId","newTables","push","newQuery","activeSouthPaneTab","COLLAPSE_TABLE","REMOVE_TABLES","tableIds","START_QUERY_VALIDATION","validationResult","errors","completed","QUERY_VALIDATION_RETURNED","results","QUERY_VALIDATION_FAILED","sqlEditor","line_number","start_column","end_column","message","COST_ESTIMATE_STARTED","queryCostEstimates","cost","error","COST_ESTIMATE_RETURNED","json","COST_ESTIMATE_FAILED","START_QUERY","latestQueryId","newResults","data","q","STOP_QUERY","STOPPED","CLEAR_QUERY_RESULTS","cached","REQUEST_QUERY_RESULTS","FETCHING","QUERY_SUCCESS","status","SUCCESS","alts","endDttm","progress","rows","limitingFactor","tempSchema","tempTable","errorMessage","resultsKey","QUERY_FAILED","FAILED","msg","link","SET_ACTIVE_QUERY_EDITOR","LOAD_QUERY_EDITOR","SET_TABLES","SET_ACTIVE_SOUTHPANE_TAB","tabId","MIGRATE_QUERY_EDITOR","sqlLab","JSON","parse","localStorage","getItem","oldQueryEditor","setItem","stringify","newQueryEditor","MIGRATE_TABLE","oldTable","newTable","MIGRATE_TAB_HISTORY","oldId","newId","MIGRATE_QUERY","queryId","QUERY_EDITOR_SETDB","QUERY_EDITOR_SET_FUNCTION_NAMES","functionNames","QUERY_EDITOR_SET_SCHEMA","QUERY_EDITOR_SET_TITLE","QUERY_EDITOR_SET_SQL","QUERY_EDITOR_SET_QUERY_LIMIT","QUERY_EDITOR_SET_TEMPLATE_PARAMS","templateParams","QUERY_EDITOR_SET_SELECTED_TEXT","selectedText","QUERY_EDITOR_SET_AUTORUN","QUERY_EDITOR_PERSIST_HEIGHT","northPercent","southPercent","QUERY_EDITOR_TOGGLE_LEFT_BAR","hideLeftBar","SET_DATABASES","databases","db","extra_json","extra","REFRESH_QUERIES","change","queriesLastUpdate","entries","alteredQueries","changedQuery","hasOwnProperty","changedOn","prevState","currentState","CLEAR_INACTIVE_QUERIES","cleanedQueries","fromEntries","SET_USER_OFFLINE","offline","CREATE_DATASOURCE_STARTED","isDatasourceLoading","CREATE_DATASOURCE_SUCCESS","datasource","CREATE_DATASOURCE_FAILED","err","type"],"sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/SqlLab/reducers/sqlLab.js"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { QueryState, t } from '@superset-ui/core';\nimport getInitialState from './getInitialState';\nimport * as actions from '../actions/sqlLab';\nimport { now } from '../../utils/dates';\nimport {\n  addToObject,\n  alterInObject,\n  alterInArr,\n  removeFromArr,\n  getFromArr,\n  addToArr,\n  extendArr,\n} from '../../reduxUtils';\n\nfunction alterUnsavedQueryEditorState(state, updatedState, id) {\n  if (state.tabHistory[state.tabHistory.length - 1] !== id) {\n    const { queryEditors } = alterInArr(\n      state,\n      'queryEditors',\n      { id },\n      updatedState,\n    );\n    return {\n      queryEditors,\n    };\n  }\n  return {\n    unsavedQueryEditor: {\n      ...(state.unsavedQueryEditor.id === id && state.unsavedQueryEditor),\n      ...(id ? { id, ...updatedState } : state.unsavedQueryEditor),\n    },\n  };\n}\n\nexport default function sqlLabReducer(state = {}, action) {\n  const actionHandlers = {\n    [actions.ADD_QUERY_EDITOR]() {\n      const mergeUnsavedState = alterInArr(\n        state,\n        'queryEditors',\n        state.unsavedQueryEditor,\n        {\n          ...state.unsavedQueryEditor,\n        },\n      );\n      const newState = {\n        ...mergeUnsavedState,\n        tabHistory: [...state.tabHistory, action.queryEditor.id],\n      };\n      return addToArr(newState, 'queryEditors', action.queryEditor);\n    },\n    [actions.QUERY_EDITOR_SAVED]() {\n      const { query, result, clientId } = action;\n      const existing = state.queryEditors.find(qe => qe.id === clientId);\n      return alterInArr(\n        state,\n        'queryEditors',\n        existing,\n        {\n          remoteId: result.remoteId,\n          name: query.name,\n        },\n        'id',\n      );\n    },\n    [actions.UPDATE_QUERY_EDITOR]() {\n      const id = action.alterations.remoteId;\n      const existing = state.queryEditors.find(qe => qe.remoteId === id);\n      if (existing == null) return state;\n      return alterInArr(\n        state,\n        'queryEditors',\n        existing,\n        action.alterations,\n        'remoteId',\n      );\n    },\n    [actions.CLONE_QUERY_TO_NEW_TAB]() {\n      const queryEditor = state.queryEditors.find(\n        qe => qe.id === state.tabHistory[state.tabHistory.length - 1],\n      );\n      const progenitor = {\n        ...queryEditor,\n        ...(state.unsavedQueryEditor.id === queryEditor.id &&\n          state.unsavedQueryEditor),\n      };\n      const qe = {\n        remoteId: progenitor.remoteId,\n        name: t('Copy of %s', progenitor.name),\n        dbId: action.query.dbId ? action.query.dbId : null,\n        schema: action.query.schema ? action.query.schema : null,\n        autorun: true,\n        sql: action.query.sql,\n        queryLimit: action.query.queryLimit,\n        maxRow: action.query.maxRow,\n      };\n      const stateWithoutUnsavedState = {\n        ...state,\n        unsavedQueryEditor: {},\n      };\n      return sqlLabReducer(\n        stateWithoutUnsavedState,\n        actions.addQueryEditor(qe),\n      );\n    },\n    [actions.REMOVE_QUERY_EDITOR]() {\n      const queryEditor = {\n        ...action.queryEditor,\n        ...(action.queryEditor.id === state.unsavedQueryEditor.id &&\n          state.unsavedQueryEditor),\n      };\n      let newState = removeFromArr(state, 'queryEditors', queryEditor);\n      // List of remaining queryEditor ids\n      const qeIds = newState.queryEditors.map(qe => qe.id);\n\n      const queries = {};\n      Object.keys(state.queries).forEach(k => {\n        const query = state.queries[k];\n        if (qeIds.indexOf(query.sqlEditorId) > -1) {\n          queries[k] = query;\n        }\n      });\n\n      let tabHistory = state.tabHistory.slice();\n      tabHistory = tabHistory.filter(id => qeIds.indexOf(id) > -1);\n\n      // Remove associated table schemas\n      const tables = state.tables.filter(\n        table => table.queryEditorId !== queryEditor.id,\n      );\n\n      newState = {\n        ...newState,\n        tabHistory,\n        tables,\n        queries,\n        unsavedQueryEditor: {\n          ...(action.queryEditor.id !== state.unsavedQueryEditor.id &&\n            state.unsavedQueryEditor),\n        },\n      };\n      return newState;\n    },\n    [actions.REMOVE_QUERY]() {\n      const newQueries = { ...state.queries };\n      delete newQueries[action.query.id];\n      return { ...state, queries: newQueries };\n    },\n    [actions.RESET_STATE]() {\n      return { ...getInitialState() };\n    },\n    [actions.MERGE_TABLE]() {\n      const at = { ...action.table };\n      let existingTable;\n      state.tables.forEach(xt => {\n        if (\n          xt.dbId === at.dbId &&\n          xt.queryEditorId === at.queryEditorId &&\n          xt.schema === at.schema &&\n          xt.name === at.name\n        ) {\n          existingTable = xt;\n        }\n      });\n      if (existingTable) {\n        if (action.query) {\n          at.dataPreviewQueryId = action.query.id;\n        }\n        return alterInArr(state, 'tables', existingTable, at);\n      }\n      // for new table, associate Id of query for data preview\n      at.dataPreviewQueryId = null;\n      let newState = addToArr(state, 'tables', at, Boolean(action.prepend));\n      if (action.query) {\n        newState = alterInArr(newState, 'tables', at, {\n          dataPreviewQueryId: action.query.id,\n        });\n      }\n      return newState;\n    },\n    [actions.EXPAND_TABLE]() {\n      return alterInArr(state, 'tables', action.table, { expanded: true });\n    },\n    [actions.REMOVE_DATA_PREVIEW]() {\n      const queries = { ...state.queries };\n      delete queries[action.table.dataPreviewQueryId];\n      const newState = alterInArr(state, 'tables', action.table, {\n        dataPreviewQueryId: null,\n      });\n      return { ...newState, queries };\n    },\n    [actions.CHANGE_DATA_PREVIEW_ID]() {\n      const queries = { ...state.queries };\n      delete queries[action.oldQueryId];\n\n      const newTables = [];\n      state.tables.forEach(xt => {\n        if (xt.dataPreviewQueryId === action.oldQueryId) {\n          newTables.push({ ...xt, dataPreviewQueryId: action.newQuery.id });\n        } else {\n          newTables.push(xt);\n        }\n      });\n      return {\n        ...state,\n        queries,\n        tables: newTables,\n        activeSouthPaneTab: action.newQuery.id,\n      };\n    },\n    [actions.COLLAPSE_TABLE]() {\n      return alterInArr(state, 'tables', action.table, { expanded: false });\n    },\n    [actions.REMOVE_TABLES]() {\n      const tableIds = action.tables.map(table => table.id);\n      return {\n        ...state,\n        tables: state.tables.filter(table => !tableIds.includes(table.id)),\n      };\n    },\n    [actions.START_QUERY_VALIDATION]() {\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n          state,\n          {\n            validationResult: {\n              id: action.query.id,\n              errors: [],\n              completed: false,\n            },\n          },\n          action.query.sqlEditorId,\n        ),\n      };\n    },\n    [actions.QUERY_VALIDATION_RETURNED]() {\n      // If the server is very slow about answering us, we might get validation\n      // responses back out of order. This check confirms the response we're\n      // handling corresponds to the most recently dispatched request.\n      //\n      // We don't care about any but the most recent because validations are\n      // only valid for the SQL text they correspond to -- once the SQL has\n      // changed, the old validation doesn't tell us anything useful anymore.\n      const qe = {\n        ...getFromArr(state.queryEditors, action.query.sqlEditorId),\n        ...(state.unsavedQueryEditor.id === action.query.sqlEditorId &&\n          state.unsavedQueryEditor),\n      };\n      if (qe.validationResult.id !== action.query.id) {\n        return state;\n      }\n      // Otherwise, persist the results on the queryEditor state\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n          state,\n          {\n            validationResult: {\n              id: action.query.id,\n              errors: action.results,\n              completed: true,\n            },\n          },\n          action.query.sqlEditorId,\n        ),\n      };\n    },\n    [actions.QUERY_VALIDATION_FAILED]() {\n      // If the server is very slow about answering us, we might get validation\n      // responses back out of order. This check confirms the response we're\n      // handling corresponds to the most recently dispatched request.\n      //\n      // We don't care about any but the most recent because validations are\n      // only valid for the SQL text they correspond to -- once the SQL has\n      // changed, the old validation doesn't tell us anything useful anymore.\n      const qe = getFromArr(state.queryEditors, action.query.sqlEditorId);\n      if (qe.validationResult.id !== action.query.id) {\n        return state;\n      }\n      // Otherwise, persist the results on the queryEditor state\n      let newState = { ...state };\n      const sqlEditor = { id: action.query.sqlEditorId };\n      newState = alterInArr(newState, 'queryEditors', sqlEditor, {\n        validationResult: {\n          id: action.query.id,\n          errors: [\n            {\n              line_number: 1,\n              start_column: 1,\n              end_column: 1,\n              message: `The server failed to validate your query.\\n${action.message}`,\n            },\n          ],\n          completed: true,\n        },\n      });\n      return newState;\n    },\n    [actions.COST_ESTIMATE_STARTED]() {\n      return {\n        ...state,\n        queryCostEstimates: {\n          ...state.queryCostEstimates,\n          [action.query.id]: {\n            completed: false,\n            cost: null,\n            error: null,\n          },\n        },\n      };\n    },\n    [actions.COST_ESTIMATE_RETURNED]() {\n      return {\n        ...state,\n        queryCostEstimates: {\n          ...state.queryCostEstimates,\n          [action.query.id]: {\n            completed: true,\n            cost: action.json.result,\n            error: null,\n          },\n        },\n      };\n    },\n    [actions.COST_ESTIMATE_FAILED]() {\n      return {\n        ...state,\n        queryCostEstimates: {\n          ...state.queryCostEstimates,\n          [action.query.id]: {\n            completed: false,\n            cost: null,\n            error: action.error,\n          },\n        },\n      };\n    },\n    [actions.START_QUERY]() {\n      let newState = { ...state };\n      if (action.query.sqlEditorId) {\n        const qe = {\n          ...getFromArr(state.queryEditors, action.query.sqlEditorId),\n          ...(action.query.sqlEditorId === state.unsavedQueryEditor.id &&\n            state.unsavedQueryEditor),\n        };\n        if (qe.latestQueryId && state.queries[qe.latestQueryId]) {\n          const newResults = {\n            ...state.queries[qe.latestQueryId].results,\n            data: [],\n            query: null,\n          };\n          const q = { ...state.queries[qe.latestQueryId], results: newResults };\n          const queries = { ...state.queries, [q.id]: q };\n          newState = { ...state, queries };\n        }\n      } else {\n        newState.activeSouthPaneTab = action.query.id;\n      }\n      newState = addToObject(newState, 'queries', action.query);\n\n      return {\n        ...newState,\n        ...alterUnsavedQueryEditorState(\n          state,\n          {\n            latestQueryId: action.query.id,\n          },\n          action.query.sqlEditorId,\n        ),\n      };\n    },\n    [actions.STOP_QUERY]() {\n      return alterInObject(state, 'queries', action.query, {\n        state: QueryState.STOPPED,\n        results: [],\n      });\n    },\n    [actions.CLEAR_QUERY_RESULTS]() {\n      const newResults = { ...action.query.results };\n      newResults.data = [];\n      return alterInObject(state, 'queries', action.query, {\n        results: newResults,\n        cached: true,\n      });\n    },\n    [actions.REQUEST_QUERY_RESULTS]() {\n      return alterInObject(state, 'queries', action.query, {\n        state: QueryState.FETCHING,\n      });\n    },\n    [actions.QUERY_SUCCESS]() {\n      // prevent race condition where query succeeds shortly after being canceled\n      // or the final result was unsuccessful\n      if (\n        action.query.state === QueryState.STOPPED ||\n        action.results.status !== QueryState.SUCCESS\n      ) {\n        return state;\n      }\n      const alts = {\n        endDttm: now(),\n        progress: 100,\n        results: action.results,\n        rows: action?.results?.query?.rows || 0,\n        state: QueryState.SUCCESS,\n        limitingFactor: action?.results?.query?.limitingFactor,\n        tempSchema: action?.results?.query?.tempSchema,\n        tempTable: action?.results?.query?.tempTable,\n        errorMessage: null,\n        cached: false,\n      };\n\n      const resultsKey = action?.results?.query?.resultsKey;\n      if (resultsKey) {\n        alts.resultsKey = resultsKey;\n      }\n\n      return alterInObject(state, 'queries', action.query, alts);\n    },\n    [actions.QUERY_FAILED]() {\n      if (action.query.state === QueryState.STOPPED) {\n        return state;\n      }\n      const alts = {\n        state: QueryState.FAILED,\n        errors: action.errors,\n        errorMessage: action.msg,\n        endDttm: now(),\n        link: action.link,\n      };\n      return alterInObject(state, 'queries', action.query, alts);\n    },\n    [actions.SET_ACTIVE_QUERY_EDITOR]() {\n      const qeIds = state.queryEditors.map(qe => qe.id);\n      if (\n        qeIds.indexOf(action.queryEditor?.id) > -1 &&\n        state.tabHistory[state.tabHistory.length - 1] !== action.queryEditor.id\n      ) {\n        const mergeUnsavedState = alterInArr(\n          state,\n          'queryEditors',\n          state.unsavedQueryEditor,\n          {\n            ...state.unsavedQueryEditor,\n          },\n        );\n        return {\n          ...(action.queryEditor.id === state.unsavedQueryEditor.id\n            ? alterInArr(\n                mergeUnsavedState,\n                'queryEditors',\n                action.queryEditor,\n                {\n                  ...action.queryEditor,\n                  ...state.unsavedQueryEditor,\n                },\n              )\n            : mergeUnsavedState),\n          tabHistory: [...state.tabHistory, action.queryEditor.id],\n        };\n      }\n      return state;\n    },\n    [actions.LOAD_QUERY_EDITOR]() {\n      const mergeUnsavedState = alterInArr(\n        state,\n        'queryEditors',\n        state.unsavedQueryEditor,\n        {\n          ...state.unsavedQueryEditor,\n        },\n      );\n      return alterInArr(mergeUnsavedState, 'queryEditors', action.queryEditor, {\n        ...action.queryEditor,\n      });\n    },\n    [actions.SET_TABLES]() {\n      return extendArr(state, 'tables', action.tables);\n    },\n    [actions.SET_ACTIVE_SOUTHPANE_TAB]() {\n      return { ...state, activeSouthPaneTab: action.tabId };\n    },\n    [actions.MIGRATE_QUERY_EDITOR]() {\n      // remove migrated query editor from localStorage\n      const { sqlLab } = JSON.parse(localStorage.getItem('redux'));\n      sqlLab.queryEditors = sqlLab.queryEditors.filter(\n        qe => qe.id !== action.oldQueryEditor.id,\n      );\n      localStorage.setItem('redux', JSON.stringify({ sqlLab }));\n\n      // replace localStorage query editor with the server backed one\n      return addToArr(\n        removeFromArr(state, 'queryEditors', action.oldQueryEditor),\n        'queryEditors',\n        action.newQueryEditor,\n      );\n    },\n    [actions.MIGRATE_TABLE]() {\n      // remove migrated table from localStorage\n      const { sqlLab } = JSON.parse(localStorage.getItem('redux'));\n      sqlLab.tables = sqlLab.tables.filter(\n        table => table.id !== action.oldTable.id,\n      );\n      localStorage.setItem('redux', JSON.stringify({ sqlLab }));\n\n      // replace localStorage table with the server backed one\n      return addToArr(\n        removeFromArr(state, 'tables', action.oldTable),\n        'tables',\n        action.newTable,\n      );\n    },\n    [actions.MIGRATE_TAB_HISTORY]() {\n      // remove migrated tab from localStorage tabHistory\n      const { sqlLab } = JSON.parse(localStorage.getItem('redux'));\n      sqlLab.tabHistory = sqlLab.tabHistory.filter(\n        tabId => tabId !== action.oldId,\n      );\n      localStorage.setItem('redux', JSON.stringify({ sqlLab }));\n      const tabHistory = state.tabHistory.filter(\n        tabId => tabId !== action.oldId,\n      );\n      tabHistory.push(action.newId);\n      return { ...state, tabHistory };\n    },\n    [actions.MIGRATE_QUERY]() {\n      const query = {\n        ...state.queries[action.queryId],\n        // point query to migrated query editor\n        sqlEditorId: action.queryEditorId,\n      };\n      const queries = { ...state.queries, [query.id]: query };\n      return { ...state, queries };\n    },\n    [actions.QUERY_EDITOR_SETDB]() {\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n          state,\n          {\n            dbId: action.dbId,\n          },\n          action.queryEditor.id,\n        ),\n      };\n    },\n    [actions.QUERY_EDITOR_SET_FUNCTION_NAMES]() {\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n          state,\n          {\n            functionNames: action.functionNames,\n          },\n          action.queryEditor.id,\n        ),\n      };\n    },\n    [actions.QUERY_EDITOR_SET_SCHEMA]() {\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n          state,\n          {\n            schema: action.schema,\n          },\n          action.queryEditor.id,\n        ),\n      };\n    },\n    [actions.QUERY_EDITOR_SET_TITLE]() {\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n          state,\n          {\n            name: action.name,\n          },\n          action.queryEditor.id,\n        ),\n      };\n    },\n    [actions.QUERY_EDITOR_SET_SQL]() {\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n          state,\n          {\n            sql: action.sql,\n          },\n          action.queryEditor.id,\n        ),\n      };\n    },\n    [actions.QUERY_EDITOR_SET_QUERY_LIMIT]() {\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n          state,\n          {\n            queryLimit: action.queryLimit,\n          },\n          action.queryEditor.id,\n        ),\n      };\n    },\n    [actions.QUERY_EDITOR_SET_TEMPLATE_PARAMS]() {\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n          state,\n          {\n            templateParams: action.templateParams,\n          },\n          action.queryEditor.id,\n        ),\n      };\n    },\n    [actions.QUERY_EDITOR_SET_SELECTED_TEXT]() {\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n          state,\n          {\n            selectedText: action.sql,\n          },\n          action.queryEditor.id,\n        ),\n      };\n    },\n    [actions.QUERY_EDITOR_SET_AUTORUN]() {\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n          state,\n          {\n            autorun: action.autorun,\n          },\n          action.queryEditor.id,\n        ),\n      };\n    },\n    [actions.QUERY_EDITOR_PERSIST_HEIGHT]() {\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n          state,\n          {\n            northPercent: action.northPercent,\n            southPercent: action.southPercent,\n          },\n          action.queryEditor.id,\n        ),\n      };\n    },\n    [actions.QUERY_EDITOR_TOGGLE_LEFT_BAR]() {\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n          state,\n          {\n            hideLeftBar: action.hideLeftBar,\n          },\n          action.queryEditor.id,\n        ),\n      };\n    },\n    [actions.SET_DATABASES]() {\n      const databases = {};\n      action.databases.forEach(db => {\n        databases[db.id] = {\n          ...db,\n          extra_json: JSON.parse(db.extra || ''),\n        };\n      });\n      return { ...state, databases };\n    },\n    [actions.REFRESH_QUERIES]() {\n      let newQueries = { ...state.queries };\n      // Fetch the updates to the queries present in the store.\n      let change = false;\n      let { queriesLastUpdate } = state;\n      Object.entries(action.alteredQueries).forEach(([id, changedQuery]) => {\n        if (\n          !state.queries.hasOwnProperty(id) ||\n          (state.queries[id].state !== QueryState.STOPPED &&\n            state.queries[id].state !== QueryState.FAILED)\n        ) {\n          if (changedQuery.changedOn > queriesLastUpdate) {\n            queriesLastUpdate = changedQuery.changedOn;\n          }\n          const prevState = state.queries[id]?.state;\n          const currentState = changedQuery.state;\n          newQueries[id] = {\n            ...state.queries[id],\n            ...changedQuery,\n            // race condition:\n            // because of async behavior, sql lab may still poll a couple of seconds\n            // when it started fetching or finished rendering results\n            state:\n              currentState === QueryState.SUCCESS &&\n              [QueryState.FETCHING, QueryState.SUCCESS].includes(prevState)\n                ? prevState\n                : currentState,\n          };\n          change = true;\n        }\n      });\n      if (!change) {\n        newQueries = state.queries;\n      }\n      return { ...state, queries: newQueries, queriesLastUpdate };\n    },\n    [actions.CLEAR_INACTIVE_QUERIES]() {\n      const { queries } = state;\n      const cleanedQueries = Object.fromEntries(\n        Object.entries(queries).filter(([, query]) => {\n          if (\n            ['running', 'pending'].includes(query.state) &&\n            query.progress === 0\n          ) {\n            return false;\n          }\n          return true;\n        }),\n      );\n      return { ...state, queries: cleanedQueries };\n    },\n    [actions.SET_USER_OFFLINE]() {\n      return { ...state, offline: action.offline };\n    },\n    [actions.CREATE_DATASOURCE_STARTED]() {\n      return { ...state, isDatasourceLoading: true, errorMessage: null };\n    },\n    [actions.CREATE_DATASOURCE_SUCCESS]() {\n      return {\n        ...state,\n        isDatasourceLoading: false,\n        errorMessage: null,\n        datasource: action.datasource,\n      };\n    },\n    [actions.CREATE_DATASOURCE_FAILED]() {\n      return { ...state, isDatasourceLoading: false, errorMessage: action.err };\n    },\n  };\n  if (action.type in actionHandlers) {\n    return actionHandlers[action.type]();\n  }\n  return state;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}