{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { extractTimegrain, GenericDataType, getTimeFormatter, getTimeFormatterForGranularity, smartDateFormatter, TimeFormats } from '@superset-ui/core';\nimport { getColorFormatters } from '@superset-ui/chart-controls';\nconst { DATABASE_DATETIME } = TimeFormats;\nfunction isNumeric(key, data) {if (data === void 0) {data = [];}\n  return data.every((record) => record[key] === null ||\n  record[key] === undefined ||\n  typeof record[key] === 'number');\n}\nexport default function transformProps(chartProps) {\n  /**\n   * This function is called after a successful response has been\n   * received from the chart data endpoint, and is used to transform\n   * the incoming data prior to being sent to the Visualization.\n   *\n   * The transformProps function is also quite useful to return\n   * additional/modified props to your data viz component. The formData\n   * can also be accessed from your PivotTableChart.tsx file, but\n   * doing supplying custom props here is often handy for integrating third\n   * party libraries that rely on specific props.\n   *\n   * A description of properties in `chartProps`:\n   * - `height`, `width`: the height/width of the DOM element in which\n   *   the chart is located\n   * - `formData`: the chart data request payload that was sent to the\n   *   backend.\n   * - `queriesData`: the chart data response payload that was received\n   *   from the backend. Some notable properties of `queriesData`:\n   *   - `data`: an array with data, each row with an object mapping\n   *     the column/alias to its value. Example:\n   *     `[{ col1: 'abc', metric1: 10 }, { col1: 'xyz', metric1: 20 }]`\n   *   - `rowcount`: the number of rows in `data`\n   *   - `query`: the query that was issued.\n   *\n   * Please note: the transformProps function gets cached when the\n   * application loads. When making changes to the `transformProps`\n   * function during development with hot reloading, changes won't\n   * be seen until restarting the development server.\n   */\n  const { width, height, queriesData, formData, rawFormData, hooks: { setDataMask = () => {}, onContextMenu }, filterState, datasource: { verboseMap = {}, columnFormats = {}, currencyFormats = {} }, emitCrossFilters } = chartProps;\n  const { data, colnames, coltypes } = queriesData[0];\n  const { groupbyRows, groupbyColumns, metrics, tableRenderer, colOrder, rowOrder, aggregateFunction, transposePivot, combineMetric, rowSubtotalPosition, colSubtotalPosition, colTotals, colSubTotals, rowTotals, rowSubTotals, valueFormat, dateFormat, metricsLayout, conditionalFormatting, timeGrainSqla } = formData;\n  const { selectedFilters } = filterState;\n  const granularity = extractTimegrain(rawFormData);\n  const dateFormatters = colnames.\n  filter((colname, index) => coltypes[index] === GenericDataType.TEMPORAL).\n  reduce((acc, temporalColname) => {\n    let formatter;\n    if (dateFormat === smartDateFormatter.id) {\n      if (granularity) {\n        // time column use formats based on granularity\n        formatter = getTimeFormatterForGranularity(granularity);\n      } else\n      if (isNumeric(temporalColname, data)) {\n        formatter = getTimeFormatter(DATABASE_DATETIME);\n      } else\n      {\n        // if no column-specific format, print cell as is\n        formatter = String;\n      }\n    } else\n    if (dateFormat) {\n      formatter = getTimeFormatter(dateFormat);\n    }\n    if (formatter) {\n      acc[temporalColname] = formatter;\n    }\n    return acc;\n  }, {});\n  const metricColorFormatters = getColorFormatters(conditionalFormatting, data);\n  return {\n    width,\n    height,\n    data,\n    groupbyRows,\n    groupbyColumns,\n    metrics,\n    tableRenderer,\n    colOrder,\n    rowOrder,\n    aggregateFunction,\n    transposePivot,\n    combineMetric,\n    rowSubtotalPosition,\n    colSubtotalPosition,\n    colTotals,\n    colSubTotals,\n    rowTotals,\n    rowSubTotals,\n    valueFormat,\n    emitCrossFilters,\n    setDataMask,\n    selectedFilters,\n    verboseMap,\n    columnFormats,\n    currencyFormats,\n    metricsLayout,\n    metricColorFormatters,\n    dateFormatters,\n    onContextMenu,\n    timeGrainSqla };\n\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,SAGEA,gBAHF,EAIEC,eAJF,EAKEC,gBALF,EAMEC,8BANF,EAQEC,kBARF,EASEC,WATF,QAUO,mBAVP;AAWA,SAASC,kBAAT,QAAmC,6BAAnC;AAGA,MAAM,EAAEC,iBAAF,KAAwBF,WAA9B;AAEA,SAASG,SAAT,CAAmBC,GAAnB,EAAgCC,IAAhC,EAAuD,KAAvBA,IAAuB,cAAvBA,IAAuB,GAAF,EAAE;EACrD,OAAOA,IAAI,CAACC,KAAL,CACL,OAAM,KACJC,MAAM,CAACH,GAAD,CAAN,KAAgB,IAAhB;EACAG,MAAM,CAACH,GAAD,CAAN,KAAgBI,SADhB;EAEA,OAAOD,MAAM,CAACH,GAAD,CAAb,KAAuB,QAJpB,CAAP;AAMD;AAED,eAAc,SAAUK,cAAV,CAAyBC,UAAzB,EAA8D;EAC1E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA6BA,MAAM,EACJC,KADI,EAEJC,MAFI,EAGJC,WAHI,EAIJC,QAJI,EAKJC,WALI,EAMJC,KAAK,EAAE,EAAEC,WAAW,GAAG,MAAK,CAAG,CAAxB,EAA0BC,aAA1B,EANH,EAOJC,WAPI,EAQJC,UAAU,EAAE,EAAEC,UAAU,GAAG,EAAf,EAAmBC,aAAa,GAAG,EAAnC,EAAuCC,eAAe,GAAG,EAAzD,EARR,EASJC,gBATI,KAUFd,UAVJ;EAWA,MAAM,EAAEL,IAAF,EAAQoB,QAAR,EAAkBC,QAAlB,KAA+Bb,WAAW,CAAC,CAAD,CAAhD;EACA,MAAM,EACJc,WADI,EAEJC,cAFI,EAGJC,OAHI,EAIJC,aAJI,EAKJC,QALI,EAMJC,QANI,EAOJC,iBAPI,EAQJC,cARI,EASJC,aATI,EAUJC,mBAVI,EAWJC,mBAXI,EAYJC,SAZI,EAaJC,YAbI,EAcJC,SAdI,EAeJC,YAfI,EAgBJC,WAhBI,EAiBJC,UAjBI,EAkBJC,aAlBI,EAmBJC,qBAnBI,EAoBJC,aApBI,KAqBFhC,QArBJ;EAsBA,MAAM,EAAEiC,eAAF,KAAsB5B,WAA5B;EACA,MAAM6B,WAAW,GAAGrD,gBAAgB,CAACoB,WAAD,CAApC;EAEA,MAAMkC,cAAc,GAAGxB,QAAQ;EAC5ByB,MADoB,CAEnB,CAACC,OAAD,EAAkBC,KAAlB,KACE1B,QAAQ,CAAC0B,KAAD,CAAR,KAAoBxD,eAAe,CAACyD,QAHnB;EAKpBC,MALoB,CAMnB,CACEC,GADF,EAEEC,eAFF,KAGI;IACF,IAAIC,SAAJ;IACA,IAAId,UAAU,KAAK5C,kBAAkB,CAAC2D,EAAtC,EAA0C;MACxC,IAAIV,WAAJ,EAAiB;QACf;QACAS,SAAS,GAAG3D,8BAA8B,CAACkD,WAAD,CAA1C;MACD,CAHD;MAGO,IAAI7C,SAAS,CAACqD,eAAD,EAAkBnD,IAAlB,CAAb,EAAsC;QAC3CoD,SAAS,GAAG5D,gBAAgB,CAACK,iBAAD,CAA5B;MACD,CAFM;MAEA;QACL;QACAuD,SAAS,GAAGE,MAAZ;MACD;IACF,CAVD;IAUO,IAAIhB,UAAJ,EAAgB;MACrBc,SAAS,GAAG5D,gBAAgB,CAAC8C,UAAD,CAA5B;IACD;IACD,IAAIc,SAAJ,EAAe;MACbF,GAAG,CAACC,eAAD,CAAH,GAAuBC,SAAvB;IACD;IACD,OAAOF,GAAP;EACD,CA5BkB,EA6BnB,EA7BmB,CAAvB;EA+BA,MAAMK,qBAAqB,GAAG3D,kBAAkB,CAAC4C,qBAAD,EAAwBxC,IAAxB,CAAhD;EAEA,OAAO;IACLM,KADK;IAELC,MAFK;IAGLP,IAHK;IAILsB,WAJK;IAKLC,cALK;IAMLC,OANK;IAOLC,aAPK;IAQLC,QARK;IASLC,QATK;IAULC,iBAVK;IAWLC,cAXK;IAYLC,aAZK;IAaLC,mBAbK;IAcLC,mBAdK;IAeLC,SAfK;IAgBLC,YAhBK;IAiBLC,SAjBK;IAkBLC,YAlBK;IAmBLC,WAnBK;IAoBLlB,gBApBK;IAqBLP,WArBK;IAsBL8B,eAtBK;IAuBL1B,UAvBK;IAwBLC,aAxBK;IAyBLC,eAzBK;IA0BLqB,aA1BK;IA2BLgB,qBA3BK;IA4BLX,cA5BK;IA6BL/B,aA7BK;IA8BL4B,aA9BK,EAAP;;AAgCD","names":["extractTimegrain","GenericDataType","getTimeFormatter","getTimeFormatterForGranularity","smartDateFormatter","TimeFormats","getColorFormatters","DATABASE_DATETIME","isNumeric","key","data","every","record","undefined","transformProps","chartProps","width","height","queriesData","formData","rawFormData","hooks","setDataMask","onContextMenu","filterState","datasource","verboseMap","columnFormats","currencyFormats","emitCrossFilters","colnames","coltypes","groupbyRows","groupbyColumns","metrics","tableRenderer","colOrder","rowOrder","aggregateFunction","transposePivot","combineMetric","rowSubtotalPosition","colSubtotalPosition","colTotals","colSubTotals","rowTotals","rowSubTotals","valueFormat","dateFormat","metricsLayout","conditionalFormatting","timeGrainSqla","selectedFilters","granularity","dateFormatters","filter","colname","index","TEMPORAL","reduce","acc","temporalColname","formatter","id","String","metricColorFormatters"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/plugins/plugin-chart-pivot-table/src/plugin/transformProps.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  ChartProps,\n  DataRecord,\n  extractTimegrain,\n  GenericDataType,\n  getTimeFormatter,\n  getTimeFormatterForGranularity,\n  QueryFormData,\n  smartDateFormatter,\n  TimeFormats,\n} from '@superset-ui/core';\nimport { getColorFormatters } from '@superset-ui/chart-controls';\nimport { DateFormatter } from '../types';\n\nconst { DATABASE_DATETIME } = TimeFormats;\n\nfunction isNumeric(key: string, data: DataRecord[] = []) {\n  return data.every(\n    record =>\n      record[key] === null ||\n      record[key] === undefined ||\n      typeof record[key] === 'number',\n  );\n}\n\nexport default function transformProps(chartProps: ChartProps<QueryFormData>) {\n  /**\n   * This function is called after a successful response has been\n   * received from the chart data endpoint, and is used to transform\n   * the incoming data prior to being sent to the Visualization.\n   *\n   * The transformProps function is also quite useful to return\n   * additional/modified props to your data viz component. The formData\n   * can also be accessed from your PivotTableChart.tsx file, but\n   * doing supplying custom props here is often handy for integrating third\n   * party libraries that rely on specific props.\n   *\n   * A description of properties in `chartProps`:\n   * - `height`, `width`: the height/width of the DOM element in which\n   *   the chart is located\n   * - `formData`: the chart data request payload that was sent to the\n   *   backend.\n   * - `queriesData`: the chart data response payload that was received\n   *   from the backend. Some notable properties of `queriesData`:\n   *   - `data`: an array with data, each row with an object mapping\n   *     the column/alias to its value. Example:\n   *     `[{ col1: 'abc', metric1: 10 }, { col1: 'xyz', metric1: 20 }]`\n   *   - `rowcount`: the number of rows in `data`\n   *   - `query`: the query that was issued.\n   *\n   * Please note: the transformProps function gets cached when the\n   * application loads. When making changes to the `transformProps`\n   * function during development with hot reloading, changes won't\n   * be seen until restarting the development server.\n   */\n  const {\n    width,\n    height,\n    queriesData,\n    formData,\n    rawFormData,\n    hooks: { setDataMask = () => {}, onContextMenu },\n    filterState,\n    datasource: { verboseMap = {}, columnFormats = {}, currencyFormats = {} },\n    emitCrossFilters,\n  } = chartProps;\n  const { data, colnames, coltypes } = queriesData[0];\n  const {\n    groupbyRows,\n    groupbyColumns,\n    metrics,\n    tableRenderer,\n    colOrder,\n    rowOrder,\n    aggregateFunction,\n    transposePivot,\n    combineMetric,\n    rowSubtotalPosition,\n    colSubtotalPosition,\n    colTotals,\n    colSubTotals,\n    rowTotals,\n    rowSubTotals,\n    valueFormat,\n    dateFormat,\n    metricsLayout,\n    conditionalFormatting,\n    timeGrainSqla,\n  } = formData;\n  const { selectedFilters } = filterState;\n  const granularity = extractTimegrain(rawFormData);\n\n  const dateFormatters = colnames\n    .filter(\n      (colname: string, index: number) =>\n        coltypes[index] === GenericDataType.TEMPORAL,\n    )\n    .reduce(\n      (\n        acc: Record<string, DateFormatter | undefined>,\n        temporalColname: string,\n      ) => {\n        let formatter: DateFormatter | undefined;\n        if (dateFormat === smartDateFormatter.id) {\n          if (granularity) {\n            // time column use formats based on granularity\n            formatter = getTimeFormatterForGranularity(granularity);\n          } else if (isNumeric(temporalColname, data)) {\n            formatter = getTimeFormatter(DATABASE_DATETIME);\n          } else {\n            // if no column-specific format, print cell as is\n            formatter = String;\n          }\n        } else if (dateFormat) {\n          formatter = getTimeFormatter(dateFormat);\n        }\n        if (formatter) {\n          acc[temporalColname] = formatter;\n        }\n        return acc;\n      },\n      {},\n    );\n  const metricColorFormatters = getColorFormatters(conditionalFormatting, data);\n\n  return {\n    width,\n    height,\n    data,\n    groupbyRows,\n    groupbyColumns,\n    metrics,\n    tableRenderer,\n    colOrder,\n    rowOrder,\n    aggregateFunction,\n    transposePivot,\n    combineMetric,\n    rowSubtotalPosition,\n    colSubtotalPosition,\n    colTotals,\n    colSubTotals,\n    rowTotals,\n    rowSubTotals,\n    valueFormat,\n    emitCrossFilters,\n    setDataMask,\n    selectedFilters,\n    verboseMap,\n    columnFormats,\n    currencyFormats,\n    metricsLayout,\n    metricColorFormatters,\n    dateFormatters,\n    onContextMenu,\n    timeGrainSqla,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}