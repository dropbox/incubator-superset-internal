{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Resizable } from 're-resizable';\nimport cx from 'classnames';\nimport { css, styled } from '@superset-ui/core';\n\nimport ResizableHandle from './ResizableHandle';\nimport resizableConfig from '../../util/resizableConfig';\nimport { GRID_BASE_UNIT, GRID_GUTTER_SIZE } from '../../util/constants';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst proxyToInfinity = Number.MAX_VALUE;\n\nconst propTypes = {\n  id: PropTypes.string.isRequired,\n  children: PropTypes.node,\n  adjustableWidth: PropTypes.bool,\n  adjustableHeight: PropTypes.bool,\n  gutterWidth: PropTypes.number,\n  widthStep: PropTypes.number,\n  heightStep: PropTypes.number,\n  widthMultiple: PropTypes.number,\n  heightMultiple: PropTypes.number,\n  minWidthMultiple: PropTypes.number,\n  maxWidthMultiple: PropTypes.number,\n  minHeightMultiple: PropTypes.number,\n  maxHeightMultiple: PropTypes.number,\n  staticHeight: PropTypes.number,\n  staticHeightMultiple: PropTypes.number,\n  staticWidth: PropTypes.number,\n  staticWidthMultiple: PropTypes.number,\n  onResizeStop: PropTypes.func,\n  onResize: PropTypes.func,\n  onResizeStart: PropTypes.func,\n  editMode: PropTypes.bool.isRequired };\n\n\nconst defaultProps = {\n  children: null,\n  adjustableWidth: true,\n  adjustableHeight: true,\n  gutterWidth: GRID_GUTTER_SIZE,\n  widthStep: GRID_BASE_UNIT,\n  heightStep: GRID_BASE_UNIT,\n  widthMultiple: null,\n  heightMultiple: null,\n  minWidthMultiple: 1,\n  maxWidthMultiple: proxyToInfinity,\n  minHeightMultiple: 1,\n  maxHeightMultiple: proxyToInfinity,\n  staticHeight: null,\n  staticHeightMultiple: null,\n  staticWidth: null,\n  staticWidthMultiple: null,\n  onResizeStop: null,\n  onResize: null,\n  onResizeStart: null };\n\n\n// because columns are not multiples of a single variable (width = n*cols + (n-1) * gutters)\n// we snap to the base unit and then snap to _actual_ column multiples on stop\nconst SNAP_TO_GRID = [GRID_BASE_UNIT, GRID_BASE_UNIT];\nconst HANDLE_CLASSES = {\n  right: 'resizable-container-handle--right',\n  bottom: 'resizable-container-handle--bottom' };\n\n\nconst StyledResizable = styled(Resizable)`\n  ${(_ref) => {let { theme } = _ref;return css`\n    &.resizable-container {\n      background-color: transparent;\n      position: relative;\n\n      /* re-resizable sets an empty div to 100% width and height, which doesn't\n      play well with many 100% height containers we need */\n\n      & ~ div {\n        width: auto !important;\n        height: auto !important;\n      }\n    }\n\n    &.resizable-container--resizing {\n      /* after ensures border visibility on top of any children */\n\n      &:after {\n        content: '';\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        box-shadow: inset 0 0 0 2px ${theme.colors.primary.base};\n      }\n\n      & > span .resize-handle {\n        border-color: ${theme.colors.primary.base};\n      }\n    }\n\n    .resize-handle {\n      opacity: 0;\n      z-index: 10;\n\n      &--bottom-right {\n        position: absolute;\n        border-right: 1px solid ${theme.colors.text.label};\n        border-bottom: 1px solid ${theme.colors.text.label};\n        right: ${theme.gridUnit * 4}px;\n        bottom: ${theme.gridUnit * 4}px;\n        width: ${theme.gridUnit * 2}px;\n        height: ${theme.gridUnit * 2}px;\n      }\n\n      &--right {\n        width: ${theme.gridUnit / 2}px;\n        height: ${theme.gridUnit * 5}px;\n        right: ${theme.gridUnit}px;\n        top: 50%;\n        transform: translate(0, -50%);\n        position: absolute;\n        border-left: 1px solid ${theme.colors.text.label};\n        border-right: 1px solid ${theme.colors.text.label};\n      }\n\n      &--bottom {\n        height: ${theme.gridUnit / 2}px;\n        width: ${theme.gridUnit * 5}px;\n        bottom: ${theme.gridUnit}px;\n        left: 50%;\n        transform: translate(-50%);\n        position: absolute;\n        border-top: 1px solid ${theme.colors.text.label};\n        border-bottom: 1px solid ${theme.colors.text.label};\n      }\n    }\n  `;}}\n\n  &.resizable-container:hover .resize-handle,\n  &.resizable-container--resizing .resize-handle {\n    opacity: 1;\n  }\n\n  .dragdroppable-column & .resizable-container-handle--right {\n    /* override the default because the inner column's handle's mouse target is very small */\n    right: 0 !important;\n  }\n\n  & .resizable-container-handle--bottom {\n    bottom: 0 !important;\n  }\n`;\n\nclass ResizableContainer extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isResizing: false };\n\n\n    this.handleResizeStart = this.handleResizeStart.bind(this);\n    this.handleResize = this.handleResize.bind(this);\n    this.handleResizeStop = this.handleResizeStop.bind(this);\n  }\n\n  handleResizeStart(event, direction, ref) {\n    const { id, onResizeStart } = this.props;\n\n    if (onResizeStart) {\n      onResizeStart({ id, direction, ref });\n    }\n\n    this.setState(() => ({ isResizing: true }));\n  }\n\n  handleResize(event, direction, ref) {\n    const { onResize, id } = this.props;\n    if (onResize) {\n      onResize({ id, direction, ref });\n    }\n  }\n\n  handleResizeStop(event, direction, ref, delta) {\n    const {\n      id,\n      onResizeStop,\n      widthStep,\n      heightStep,\n      widthMultiple,\n      heightMultiple,\n      adjustableHeight,\n      adjustableWidth,\n      gutterWidth } =\n    this.props;\n\n    if (onResizeStop) {\n      const nextWidthMultiple =\n      widthMultiple + Math.round(delta.width / (widthStep + gutterWidth));\n      const nextHeightMultiple =\n      heightMultiple + Math.round(delta.height / heightStep);\n\n      onResizeStop({\n        id,\n        widthMultiple: adjustableWidth ? nextWidthMultiple : null,\n        heightMultiple: adjustableHeight ? nextHeightMultiple : null });\n\n\n      this.setState(() => ({ isResizing: false }));\n    }\n  }\n\n  render() {\n    const {\n      children,\n      adjustableWidth,\n      adjustableHeight,\n      widthStep,\n      heightStep,\n      widthMultiple,\n      heightMultiple,\n      staticHeight,\n      staticHeightMultiple,\n      staticWidth,\n      staticWidthMultiple,\n      minWidthMultiple,\n      maxWidthMultiple,\n      minHeightMultiple,\n      maxHeightMultiple,\n      gutterWidth,\n      editMode } =\n    this.props;\n\n    const size = {\n      width: adjustableWidth ?\n      (widthStep + gutterWidth) * widthMultiple - gutterWidth :\n      staticWidthMultiple && staticWidthMultiple * widthStep ||\n      staticWidth ||\n      undefined,\n      height: adjustableHeight ?\n      heightStep * heightMultiple :\n      staticHeightMultiple && staticHeightMultiple * heightStep ||\n      staticHeight ||\n      undefined };\n\n\n    let enableConfig = resizableConfig.notAdjustable;\n\n    if (editMode && adjustableWidth && adjustableHeight) {\n      enableConfig = resizableConfig.widthAndHeight;\n    } else if (editMode && adjustableWidth) {\n      enableConfig = resizableConfig.widthOnly;\n    } else if (editMode && adjustableHeight) {\n      enableConfig = resizableConfig.heightOnly;\n    }\n\n    const { isResizing } = this.state;\n\n    return (\n      ___EmotionJSX(StyledResizable, {\n        enable: enableConfig,\n        grid: SNAP_TO_GRID,\n        minWidth:\n        adjustableWidth ?\n        minWidthMultiple * (widthStep + gutterWidth) - gutterWidth :\n        undefined,\n\n        minHeight:\n        adjustableHeight ? minHeightMultiple * heightStep : undefined,\n\n        maxWidth:\n        adjustableWidth ?\n        Math.max(\n        size.width,\n        Math.min(\n        proxyToInfinity,\n        maxWidthMultiple * (widthStep + gutterWidth) - gutterWidth)) :\n\n\n        undefined,\n\n        maxHeight:\n        adjustableHeight ?\n        Math.max(\n        size.height,\n        Math.min(proxyToInfinity, maxHeightMultiple * heightStep)) :\n\n        undefined,\n\n        size: size,\n        onResizeStart: this.handleResizeStart,\n        onResize: this.handleResize,\n        onResizeStop: this.handleResizeStop,\n        handleComponent: ResizableHandle,\n        className: cx(\n        'resizable-container',\n        isResizing && 'resizable-container--resizing'),\n\n        handleClasses: HANDLE_CLASSES },\n\n      children));\n\n\n  }}\n\n\nResizableContainer.propTypes = propTypes;\nResizableContainer.defaultProps = defaultProps;\n\nexport default ResizableContainer;","map":{"version":3,"names":["React","PropTypes","Resizable","cx","css","styled","ResizableHandle","resizableConfig","GRID_BASE_UNIT","GRID_GUTTER_SIZE","proxyToInfinity","Number","MAX_VALUE","propTypes","id","string","isRequired","children","node","adjustableWidth","bool","adjustableHeight","gutterWidth","number","widthStep","heightStep","widthMultiple","heightMultiple","minWidthMultiple","maxWidthMultiple","minHeightMultiple","maxHeightMultiple","staticHeight","staticHeightMultiple","staticWidth","staticWidthMultiple","onResizeStop","func","onResize","onResizeStart","editMode","defaultProps","SNAP_TO_GRID","HANDLE_CLASSES","right","bottom","StyledResizable","theme","colors","primary","base","text","label","gridUnit","ResizableContainer","PureComponent","constructor","props","state","isResizing","handleResizeStart","bind","handleResize","handleResizeStop","event","direction","ref","setState","delta","nextWidthMultiple","Math","round","width","nextHeightMultiple","height","render","size","undefined","enableConfig","notAdjustable","widthAndHeight","widthOnly","heightOnly","max","min"],"sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/dashboard/components/resizable/ResizableContainer.jsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Resizable } from 're-resizable';\nimport cx from 'classnames';\nimport { css, styled } from '@superset-ui/core';\n\nimport ResizableHandle from './ResizableHandle';\nimport resizableConfig from '../../util/resizableConfig';\nimport { GRID_BASE_UNIT, GRID_GUTTER_SIZE } from '../../util/constants';\n\nconst proxyToInfinity = Number.MAX_VALUE;\n\nconst propTypes = {\n  id: PropTypes.string.isRequired,\n  children: PropTypes.node,\n  adjustableWidth: PropTypes.bool,\n  adjustableHeight: PropTypes.bool,\n  gutterWidth: PropTypes.number,\n  widthStep: PropTypes.number,\n  heightStep: PropTypes.number,\n  widthMultiple: PropTypes.number,\n  heightMultiple: PropTypes.number,\n  minWidthMultiple: PropTypes.number,\n  maxWidthMultiple: PropTypes.number,\n  minHeightMultiple: PropTypes.number,\n  maxHeightMultiple: PropTypes.number,\n  staticHeight: PropTypes.number,\n  staticHeightMultiple: PropTypes.number,\n  staticWidth: PropTypes.number,\n  staticWidthMultiple: PropTypes.number,\n  onResizeStop: PropTypes.func,\n  onResize: PropTypes.func,\n  onResizeStart: PropTypes.func,\n  editMode: PropTypes.bool.isRequired,\n};\n\nconst defaultProps = {\n  children: null,\n  adjustableWidth: true,\n  adjustableHeight: true,\n  gutterWidth: GRID_GUTTER_SIZE,\n  widthStep: GRID_BASE_UNIT,\n  heightStep: GRID_BASE_UNIT,\n  widthMultiple: null,\n  heightMultiple: null,\n  minWidthMultiple: 1,\n  maxWidthMultiple: proxyToInfinity,\n  minHeightMultiple: 1,\n  maxHeightMultiple: proxyToInfinity,\n  staticHeight: null,\n  staticHeightMultiple: null,\n  staticWidth: null,\n  staticWidthMultiple: null,\n  onResizeStop: null,\n  onResize: null,\n  onResizeStart: null,\n};\n\n// because columns are not multiples of a single variable (width = n*cols + (n-1) * gutters)\n// we snap to the base unit and then snap to _actual_ column multiples on stop\nconst SNAP_TO_GRID = [GRID_BASE_UNIT, GRID_BASE_UNIT];\nconst HANDLE_CLASSES = {\n  right: 'resizable-container-handle--right',\n  bottom: 'resizable-container-handle--bottom',\n};\n\nconst StyledResizable = styled(Resizable)`\n  ${({ theme }) => css`\n    &.resizable-container {\n      background-color: transparent;\n      position: relative;\n\n      /* re-resizable sets an empty div to 100% width and height, which doesn't\n      play well with many 100% height containers we need */\n\n      & ~ div {\n        width: auto !important;\n        height: auto !important;\n      }\n    }\n\n    &.resizable-container--resizing {\n      /* after ensures border visibility on top of any children */\n\n      &:after {\n        content: '';\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        box-shadow: inset 0 0 0 2px ${theme.colors.primary.base};\n      }\n\n      & > span .resize-handle {\n        border-color: ${theme.colors.primary.base};\n      }\n    }\n\n    .resize-handle {\n      opacity: 0;\n      z-index: 10;\n\n      &--bottom-right {\n        position: absolute;\n        border-right: 1px solid ${theme.colors.text.label};\n        border-bottom: 1px solid ${theme.colors.text.label};\n        right: ${theme.gridUnit * 4}px;\n        bottom: ${theme.gridUnit * 4}px;\n        width: ${theme.gridUnit * 2}px;\n        height: ${theme.gridUnit * 2}px;\n      }\n\n      &--right {\n        width: ${theme.gridUnit / 2}px;\n        height: ${theme.gridUnit * 5}px;\n        right: ${theme.gridUnit}px;\n        top: 50%;\n        transform: translate(0, -50%);\n        position: absolute;\n        border-left: 1px solid ${theme.colors.text.label};\n        border-right: 1px solid ${theme.colors.text.label};\n      }\n\n      &--bottom {\n        height: ${theme.gridUnit / 2}px;\n        width: ${theme.gridUnit * 5}px;\n        bottom: ${theme.gridUnit}px;\n        left: 50%;\n        transform: translate(-50%);\n        position: absolute;\n        border-top: 1px solid ${theme.colors.text.label};\n        border-bottom: 1px solid ${theme.colors.text.label};\n      }\n    }\n  `}\n\n  &.resizable-container:hover .resize-handle,\n  &.resizable-container--resizing .resize-handle {\n    opacity: 1;\n  }\n\n  .dragdroppable-column & .resizable-container-handle--right {\n    /* override the default because the inner column's handle's mouse target is very small */\n    right: 0 !important;\n  }\n\n  & .resizable-container-handle--bottom {\n    bottom: 0 !important;\n  }\n`;\n\nclass ResizableContainer extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isResizing: false,\n    };\n\n    this.handleResizeStart = this.handleResizeStart.bind(this);\n    this.handleResize = this.handleResize.bind(this);\n    this.handleResizeStop = this.handleResizeStop.bind(this);\n  }\n\n  handleResizeStart(event, direction, ref) {\n    const { id, onResizeStart } = this.props;\n\n    if (onResizeStart) {\n      onResizeStart({ id, direction, ref });\n    }\n\n    this.setState(() => ({ isResizing: true }));\n  }\n\n  handleResize(event, direction, ref) {\n    const { onResize, id } = this.props;\n    if (onResize) {\n      onResize({ id, direction, ref });\n    }\n  }\n\n  handleResizeStop(event, direction, ref, delta) {\n    const {\n      id,\n      onResizeStop,\n      widthStep,\n      heightStep,\n      widthMultiple,\n      heightMultiple,\n      adjustableHeight,\n      adjustableWidth,\n      gutterWidth,\n    } = this.props;\n\n    if (onResizeStop) {\n      const nextWidthMultiple =\n        widthMultiple + Math.round(delta.width / (widthStep + gutterWidth));\n      const nextHeightMultiple =\n        heightMultiple + Math.round(delta.height / heightStep);\n\n      onResizeStop({\n        id,\n        widthMultiple: adjustableWidth ? nextWidthMultiple : null,\n        heightMultiple: adjustableHeight ? nextHeightMultiple : null,\n      });\n\n      this.setState(() => ({ isResizing: false }));\n    }\n  }\n\n  render() {\n    const {\n      children,\n      adjustableWidth,\n      adjustableHeight,\n      widthStep,\n      heightStep,\n      widthMultiple,\n      heightMultiple,\n      staticHeight,\n      staticHeightMultiple,\n      staticWidth,\n      staticWidthMultiple,\n      minWidthMultiple,\n      maxWidthMultiple,\n      minHeightMultiple,\n      maxHeightMultiple,\n      gutterWidth,\n      editMode,\n    } = this.props;\n\n    const size = {\n      width: adjustableWidth\n        ? (widthStep + gutterWidth) * widthMultiple - gutterWidth\n        : (staticWidthMultiple && staticWidthMultiple * widthStep) ||\n          staticWidth ||\n          undefined,\n      height: adjustableHeight\n        ? heightStep * heightMultiple\n        : (staticHeightMultiple && staticHeightMultiple * heightStep) ||\n          staticHeight ||\n          undefined,\n    };\n\n    let enableConfig = resizableConfig.notAdjustable;\n\n    if (editMode && adjustableWidth && adjustableHeight) {\n      enableConfig = resizableConfig.widthAndHeight;\n    } else if (editMode && adjustableWidth) {\n      enableConfig = resizableConfig.widthOnly;\n    } else if (editMode && adjustableHeight) {\n      enableConfig = resizableConfig.heightOnly;\n    }\n\n    const { isResizing } = this.state;\n\n    return (\n      <StyledResizable\n        enable={enableConfig}\n        grid={SNAP_TO_GRID}\n        minWidth={\n          adjustableWidth\n            ? minWidthMultiple * (widthStep + gutterWidth) - gutterWidth\n            : undefined\n        }\n        minHeight={\n          adjustableHeight ? minHeightMultiple * heightStep : undefined\n        }\n        maxWidth={\n          adjustableWidth\n            ? Math.max(\n                size.width,\n                Math.min(\n                  proxyToInfinity,\n                  maxWidthMultiple * (widthStep + gutterWidth) - gutterWidth,\n                ),\n              )\n            : undefined\n        }\n        maxHeight={\n          adjustableHeight\n            ? Math.max(\n                size.height,\n                Math.min(proxyToInfinity, maxHeightMultiple * heightStep),\n              )\n            : undefined\n        }\n        size={size}\n        onResizeStart={this.handleResizeStart}\n        onResize={this.handleResize}\n        onResizeStop={this.handleResizeStop}\n        handleComponent={ResizableHandle}\n        className={cx(\n          'resizable-container',\n          isResizing && 'resizable-container--resizing',\n        )}\n        handleClasses={HANDLE_CLASSES}\n      >\n        {children}\n      </StyledResizable>\n    );\n  }\n}\n\nResizableContainer.propTypes = propTypes;\nResizableContainer.defaultProps = defaultProps;\n\nexport default ResizableContainer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}