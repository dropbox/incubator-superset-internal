{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useMemo } from 'react';\nimport rison from 'rison';\nimport { t } from '@superset-ui/core';\nimport { AsyncSelect } from 'src/components';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport { cachedSupersetGet } from 'src/utils/cachedSupersetGet';\nimport { datasetToSelectOption } from './utils';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst DatasetSelect = (_ref) => {let { onChange, value } = _ref;\n  const getErrorMessage = useCallback((_ref2) => {let { error, message } = _ref2;\n    let errorText = message || error || t('An error has occurred');\n    if (message === 'Forbidden') {\n      errorText = t('You do not have permission to edit this dashboard');\n    }\n    return errorText;\n  }, []);\n  const loadDatasetOptions = async (search, page, pageSize) => {\n    const searchColumn = 'table_name';\n    const query = rison.encode({\n      filters: [{ col: searchColumn, opr: 'ct', value: search }],\n      page,\n      page_size: pageSize,\n      order_column: searchColumn,\n      order_direction: 'asc' });\n\n    return cachedSupersetGet({\n      endpoint: `/api/v1/dataset/?q=${query}` }).\n\n    then((response) => {\n      const data = response.json.result.map(datasetToSelectOption);\n      return {\n        data,\n        totalCount: response.json.count };\n\n    }).\n    catch(async (error) => {\n      const errorMessage = getErrorMessage(await getClientErrorObject(error));\n      throw new Error(errorMessage);\n    });\n  };\n  return ___EmotionJSX(AsyncSelect, { ariaLabel: t('Dataset'), value: value, options: loadDatasetOptions, onChange: onChange, notFoundContent: t('No compatible datasets found') });\n};\nconst MemoizedSelect = (props) =>\n// eslint-disable-next-line react-hooks/exhaustive-deps\nuseMemo(() => ___EmotionJSX(DatasetSelect, props), []);\nexport default MemoizedSelect;","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,OAA7B,QAA4C,OAA5C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,CAAT,QAAkB,mBAAlB;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAEEC,oBAFF,QAGO,gCAHP;AAIA,SAASC,iBAAT,QAAkC,6BAAlC;AACA,SAASC,qBAAT,QAAsC,SAAtC,C;AAOA,MAAMC,aAAa,GAAG,UAA4C,KAA3C,EAAEC,QAAF,EAAYC,KAAZ,EAA2C;EAChE,MAAMC,eAAe,GAAGX,WAAW,CACjC,WAA0C,KAAzC,EAAEY,KAAF,EAASC,OAAT,EAAyC;IACxC,IAAIC,SAAS,GAAGD,OAAO,IAAID,KAAX,IAAoBT,CAAC,CAAC,uBAAD,CAArC;IACA,IAAIU,OAAO,KAAK,WAAhB,EAA6B;MAC3BC,SAAS,GAAGX,CAAC,CAAC,mDAAD,CAAb;IACD;IACD,OAAOW,SAAP;EACD,CAPgC,EAQjC,EARiC,CAAnC;EAWA,MAAMC,kBAAkB,GAAG,OACzBC,MADyB,EAEzBC,IAFyB,EAGzBC,QAHyB,KAIvB;IACF,MAAMC,YAAY,GAAG,YAArB;IACA,MAAMC,KAAK,GAAGlB,KAAK,CAACmB,MAAN,CAAa;MACzBC,OAAO,EAAE,CAAC,EAAEC,GAAG,EAAEJ,YAAP,EAAqBK,GAAG,EAAE,IAA1B,EAAgCd,KAAK,EAAEM,MAAvC,EAAD,CADgB;MAEzBC,IAFyB;MAGzBQ,SAAS,EAAEP,QAHc;MAIzBQ,YAAY,EAAEP,YAJW;MAKzBQ,eAAe,EAAE,KALQ,EAAb,CAAd;;IAOA,OAAOrB,iBAAiB,CAAC;MACvBsB,QAAQ,EAAE,sBAAsBR,KAAK,EADd,EAAD,CAAjB;;IAGJS,IAHI,CAGC,SAAQ,KAAG;MACf,MAAMC,IAAI,GAGJC,QAAQ,CAACC,IAAT,CAAcC,MAAd,CAAqBC,GAArB,CAAyB3B,qBAAzB,CAHN;MAIA,OAAO;QACLuB,IADK;QAELK,UAAU,EAAEJ,QAAQ,CAACC,IAAT,CAAcI,KAFrB,EAAP;;IAID,CAZI;IAaJC,KAbI,CAaE,OAAMzB,KAAN,KAAc;MACnB,MAAM0B,YAAY,GAAG3B,eAAe,CAAC,MAAMN,oBAAoB,CAACO,KAAD,CAA3B,CAApC;MACA,MAAM,IAAI2B,KAAJ,CAAUD,YAAV,CAAN;IACD,CAhBI,CAAP;EAiBD,CA9BD;EAgCA,OACE,cAAC,WAAD,IACE,SAAS,EAAEnC,CAAC,CAAC,SAAD,CADd,EAEE,KAAK,EAAEO,KAFT,EAGE,OAAO,EAAEK,kBAHX,EAIE,QAAQ,EAAEN,QAJZ,EAKE,eAAe,EAAEN,CAAC,CAAC,8BAAD,CALpB,GADF;AASD,CArDD;AAuDA,MAAMqC,cAAc,GAAG,CAACC,KAAD;AACrB;AACAxC,OAAO,CAAC,MAAM,cAAC,aAAD,EAAmBwC,KAAnB,CAAP,EAAqC,EAArC,CAFT;AAIA,eAAeD,cAAf","names":["React","useCallback","useMemo","rison","t","AsyncSelect","getClientErrorObject","cachedSupersetGet","datasetToSelectOption","DatasetSelect","onChange","value","getErrorMessage","error","message","errorText","loadDatasetOptions","search","page","pageSize","searchColumn","query","encode","filters","col","opr","page_size","order_column","order_direction","endpoint","then","data","response","json","result","map","totalCount","count","catch","errorMessage","Error","MemoizedSelect","props"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/DatasetSelect.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useMemo } from 'react';\nimport rison from 'rison';\nimport { t } from '@superset-ui/core';\nimport { AsyncSelect } from 'src/components';\nimport {\n  ClientErrorObject,\n  getClientErrorObject,\n} from 'src/utils/getClientErrorObject';\nimport { cachedSupersetGet } from 'src/utils/cachedSupersetGet';\nimport { datasetToSelectOption } from './utils';\n\ninterface DatasetSelectProps {\n  onChange: (value: { label: string; value: number }) => void;\n  value?: { label: string; value: number };\n}\n\nconst DatasetSelect = ({ onChange, value }: DatasetSelectProps) => {\n  const getErrorMessage = useCallback(\n    ({ error, message }: ClientErrorObject) => {\n      let errorText = message || error || t('An error has occurred');\n      if (message === 'Forbidden') {\n        errorText = t('You do not have permission to edit this dashboard');\n      }\n      return errorText;\n    },\n    [],\n  );\n\n  const loadDatasetOptions = async (\n    search: string,\n    page: number,\n    pageSize: number,\n  ) => {\n    const searchColumn = 'table_name';\n    const query = rison.encode({\n      filters: [{ col: searchColumn, opr: 'ct', value: search }],\n      page,\n      page_size: pageSize,\n      order_column: searchColumn,\n      order_direction: 'asc',\n    });\n    return cachedSupersetGet({\n      endpoint: `/api/v1/dataset/?q=${query}`,\n    })\n      .then(response => {\n        const data: {\n          label: string;\n          value: string | number;\n        }[] = response.json.result.map(datasetToSelectOption);\n        return {\n          data,\n          totalCount: response.json.count,\n        };\n      })\n      .catch(async error => {\n        const errorMessage = getErrorMessage(await getClientErrorObject(error));\n        throw new Error(errorMessage);\n      });\n  };\n\n  return (\n    <AsyncSelect\n      ariaLabel={t('Dataset')}\n      value={value}\n      options={loadDatasetOptions}\n      onChange={onChange}\n      notFoundContent={t('No compatible datasets found')}\n    />\n  );\n};\n\nconst MemoizedSelect = (props: DatasetSelectProps) =>\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useMemo(() => <DatasetSelect {...props} />, []);\n\nexport default MemoizedSelect;\n"]},"metadata":{},"sourceType":"module"}