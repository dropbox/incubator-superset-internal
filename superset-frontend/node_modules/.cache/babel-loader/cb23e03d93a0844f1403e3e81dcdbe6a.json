{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { createSelector } from 'reselect';\nimport { convertKeysToCamelCase } from '../..';\nconst DEFAULT_WIDTH = 800;\nconst DEFAULT_HEIGHT = 600;\nexport default class ChartProps {\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  constructor(config) {if (config === void 0) {config = {};}this.annotationData = void 0;this.datasource = void 0;this.rawDatasource = void 0;this.initialValues = void 0;this.formData = void 0;this.rawFormData = void 0;this.height = void 0;this.hooks = void 0;this.ownState = void 0;this.filterState = void 0;this.queriesData = void 0;this.width = void 0;this.behaviors = void 0;this.displaySettings = void 0;this.appSection = void 0;this.isRefreshing = void 0;this.inputRef = void 0;this.inContextMenu = void 0;this.emitCrossFilters = void 0;this.theme = void 0;\n    const { annotationData = {}, datasource = {}, formData = {}, hooks = {}, ownState = {}, filterState = {}, initialValues = {}, queriesData = [], behaviors = [], displaySettings = {}, width = DEFAULT_WIDTH, height = DEFAULT_HEIGHT, appSection, isRefreshing, inputRef, inContextMenu = false, emitCrossFilters = false, theme } = config;\n    this.width = width;\n    this.height = height;\n    this.annotationData = annotationData;\n    this.datasource = convertKeysToCamelCase(datasource);\n    this.rawDatasource = datasource;\n    this.formData = convertKeysToCamelCase(formData);\n    this.rawFormData = formData;\n    this.hooks = hooks;\n    this.initialValues = initialValues;\n    this.queriesData = queriesData;\n    this.ownState = ownState;\n    this.filterState = filterState;\n    this.behaviors = behaviors;\n    this.displaySettings = displaySettings;\n    this.appSection = appSection;\n    this.isRefreshing = isRefreshing;\n    this.inputRef = inputRef;\n    this.inContextMenu = inContextMenu;\n    this.emitCrossFilters = emitCrossFilters;\n    this.theme = theme;\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}} // eslint-disable-next-line func-name-matching\nChartProps.createSelector = void 0;ChartProps.createSelector = function create() {\n  return createSelector((input) => input.annotationData, (input) => input.datasource, (input) => input.formData, (input) => input.height, (input) => input.hooks, (input) => input.initialValues, (input) => input.queriesData, (input) => input.width, (input) => input.ownState, (input) => input.filterState, (input) => input.behaviors, (input) => input.displaySettings, (input) => input.appSection, (input) => input.isRefreshing, (input) => input.inputRef, (input) => input.inContextMenu, (input) => input.emitCrossFilters, (input) => input.theme, (annotationData, datasource, formData, height, hooks, initialValues, queriesData, width, ownState, filterState, behaviors, displaySettings, appSection, isRefreshing, inputRef, inContextMenu, emitCrossFilters, theme) => new ChartProps({\n    annotationData,\n    datasource,\n    formData,\n    height,\n    hooks,\n    initialValues,\n    queriesData,\n    ownState,\n    filterState,\n    width,\n    behaviors,\n    displaySettings,\n    appSection,\n    isRefreshing,\n    inputRef,\n    inContextMenu,\n    emitCrossFilters,\n    theme }));\n\n};;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(DEFAULT_WIDTH, \"DEFAULT_WIDTH\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/chart/models/ChartProps.ts\");reactHotLoader.register(DEFAULT_HEIGHT, \"DEFAULT_HEIGHT\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/chart/models/ChartProps.ts\");reactHotLoader.register(ChartProps, \"ChartProps\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/chart/models/ChartProps.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"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","names":["createSelector","convertKeysToCamelCase","DEFAULT_WIDTH","DEFAULT_HEIGHT","ChartProps","constructor","config","annotationData","datasource","rawDatasource","initialValues","formData","rawFormData","height","hooks","ownState","filterState","queriesData","width","behaviors","displaySettings","appSection","isRefreshing","inputRef","inContextMenu","emitCrossFilters","theme","create","input"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/chart/models/ChartProps.ts"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/** Type checking is disabled for this file due to reselect only supporting\n * TS declarations for selectors with up to 12 arguments. */\n// @ts-nocheck\nimport { RefObject } from 'react';\nimport { createSelector } from 'reselect';\nimport {\n  AppSection,\n  Behavior,\n  convertKeysToCamelCase,\n  Datasource,\n  FilterState,\n  JsonObject,\n} from '../..';\nimport { HandlerFunction, PlainObject, SetDataMaskHook } from '../types/Base';\nimport { QueryData, DataRecordFilters } from '..';\nimport { SupersetTheme } from '../../style';\n\n// TODO: more specific typing for these fields of ChartProps\ntype AnnotationData = PlainObject;\ntype SnakeCaseDatasource = PlainObject;\ntype CamelCaseFormData = PlainObject;\ntype SnakeCaseFormData = PlainObject;\ntype RawFormData = CamelCaseFormData | SnakeCaseFormData;\n\ntype ChartPropsSelector = (c: ChartPropsConfig) => ChartProps;\n\n/** Optional field for event handlers, renderers */\ntype Hooks = {\n  /**\n   * sync active filters between chart and dashboard, \"add\" actually\n   * also handles \"change\" and \"remove\".\n   */\n  onAddFilter?: (newFilters: DataRecordFilters, merge?: boolean) => void;\n  /** handle right click */\n  onContextMenu?: HandlerFunction;\n  /** handle errors */\n  onError?: HandlerFunction;\n  /** use the vis as control to update state */\n  setControlValue?: HandlerFunction;\n  /** handle external filters */\n  setDataMask?: SetDataMaskHook;\n  /** handle tooltip */\n  setTooltip?: HandlerFunction;\n} & PlainObject;\n\n/**\n * Preferred format for ChartProps config\n */\nexport interface ChartPropsConfig {\n  annotationData?: AnnotationData;\n  /** Datasource metadata */\n  datasource?: SnakeCaseDatasource;\n  /**\n   * Formerly called \"filters\", which was misleading because it is actually\n   * initial values of the filter_box and table vis\n   */\n  initialValues?: DataRecordFilters;\n  /** Main configuration of the chart */\n  formData?: RawFormData;\n  /** Chart height */\n  height?: number;\n  /** Programmatic overrides such as event handlers, renderers */\n  hooks?: Hooks;\n  /** The data returned for all queries objects in the request */\n  queriesData?: QueryData[];\n  /** Chart width */\n  width?: number;\n  /** Own chart state that saved in dashboard */\n  ownState?: JsonObject;\n  /** Filter state that saved in dashboard */\n  filterState?: FilterState;\n  /** Set of actual behaviors that this instance of chart should use */\n  behaviors?: Behavior[];\n  /** Chart display settings related to current view context */\n  displaySettings?: JsonObject;\n  /** Application section of the chart on the screen (in what components/screen it placed) */\n  appSection?: AppSection;\n  /** is the chart refreshing its contents */\n  isRefreshing?: boolean;\n  /** chart ref */\n  inputRef?: RefObject<any>;\n  /** Theme object */\n  theme: SupersetTheme;\n}\n\nconst DEFAULT_WIDTH = 800;\nconst DEFAULT_HEIGHT = 600;\n\nexport default class ChartProps<FormData extends RawFormData = RawFormData> {\n  static createSelector: () => ChartPropsSelector;\n\n  annotationData: AnnotationData;\n\n  datasource: Datasource;\n\n  rawDatasource: SnakeCaseDatasource;\n\n  initialValues: DataRecordFilters;\n\n  formData: CamelCaseFormData;\n\n  rawFormData: FormData;\n\n  height: number;\n\n  hooks: Hooks;\n\n  ownState: JsonObject;\n\n  filterState: FilterState;\n\n  queriesData: QueryData[];\n\n  width: number;\n\n  behaviors: Behavior[];\n\n  displaySettings?: JsonObject;\n\n  appSection?: AppSection;\n\n  isRefreshing?: boolean;\n\n  inputRef?: RefObject<any>;\n\n  inContextMenu?: boolean;\n\n  emitCrossFilters?: boolean;\n\n  theme: SupersetTheme;\n\n  constructor(config: ChartPropsConfig & { formData?: FormData } = {}) {\n    const {\n      annotationData = {},\n      datasource = {},\n      formData = {} as FormData,\n      hooks = {},\n      ownState = {},\n      filterState = {},\n      initialValues = {},\n      queriesData = [],\n      behaviors = [],\n      displaySettings = {},\n      width = DEFAULT_WIDTH,\n      height = DEFAULT_HEIGHT,\n      appSection,\n      isRefreshing,\n      inputRef,\n      inContextMenu = false,\n      emitCrossFilters = false,\n      theme,\n    } = config;\n    this.width = width;\n    this.height = height;\n    this.annotationData = annotationData;\n    this.datasource = convertKeysToCamelCase(datasource) as Datasource;\n    this.rawDatasource = datasource;\n    this.formData = convertKeysToCamelCase(formData);\n    this.rawFormData = formData;\n    this.hooks = hooks;\n    this.initialValues = initialValues;\n    this.queriesData = queriesData;\n    this.ownState = ownState;\n    this.filterState = filterState;\n    this.behaviors = behaviors;\n    this.displaySettings = displaySettings;\n    this.appSection = appSection;\n    this.isRefreshing = isRefreshing;\n    this.inputRef = inputRef;\n    this.inContextMenu = inContextMenu;\n    this.emitCrossFilters = emitCrossFilters;\n    this.theme = theme;\n  }\n}\n\n// eslint-disable-next-line func-name-matching\nChartProps.createSelector = function create(): ChartPropsSelector {\n  return createSelector(\n    (input: ChartPropsConfig) => input.annotationData,\n    input => input.datasource,\n    input => input.formData,\n    input => input.height,\n    input => input.hooks,\n    input => input.initialValues,\n    input => input.queriesData,\n    input => input.width,\n    input => input.ownState,\n    input => input.filterState,\n    input => input.behaviors,\n    input => input.displaySettings,\n    input => input.appSection,\n    input => input.isRefreshing,\n    input => input.inputRef,\n    input => input.inContextMenu,\n    input => input.emitCrossFilters,\n    input => input.theme,\n    (\n      annotationData,\n      datasource,\n      formData,\n      height,\n      hooks,\n      initialValues,\n      queriesData,\n      width,\n      ownState,\n      filterState,\n      behaviors,\n      displaySettings,\n      appSection,\n      isRefreshing,\n      inputRef,\n      inContextMenu,\n      emitCrossFilters,\n      theme,\n    ) =>\n      new ChartProps({\n        annotationData,\n        datasource,\n        formData,\n        height,\n        hooks,\n        initialValues,\n        queriesData,\n        ownState,\n        filterState,\n        width,\n        behaviors,\n        displaySettings,\n        appSection,\n        isRefreshing,\n        inputRef,\n        inContextMenu,\n        emitCrossFilters,\n        theme,\n      }),\n  );\n};\n"]},"metadata":{},"sourceType":"module"}