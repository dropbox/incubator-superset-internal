{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { RegistryWithDefaultKey, OverwritePolicy } from '../models';\nexport default class ColorSchemeRegistry extends RegistryWithDefaultKey {\n  constructor() {\n    super({\n      name: 'ColorScheme',\n      overwritePolicy: OverwritePolicy.WARN,\n      setFirstItemAsDefault: true });\n\n  }\n  get(key, strict) {if (strict === void 0) {strict = false;}\n    const target = super.get(key);\n    // fallsback to default scheme if any\n    if (!strict && !target) {\n      const defaultKey = super.getDefaultKey();\n      if (defaultKey) {\n        return super.get(defaultKey);\n      }\n    }\n    return target;\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(ColorSchemeRegistry, \"ColorSchemeRegistry\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/color/ColorSchemeRegistry.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAmBA,SAASA,sBAAT,EAAiCC,eAAjC,QAAwD,WAAxD;AAEA,eAAc,MAAOC,mBAAP,SAAsCF,sBAAtC,CAA+D;EAC3EG;IACE,MAAM;MACJC,IAAI,EAAE,aADF;MAEJC,eAAe,EAAEJ,eAAe,CAACK,IAF7B;MAGJC,qBAAqB,EAAE,IAHnB,EAAN;;EAKD;EAEDC,GAAG,CAACC,GAAD,EAAeC,MAAf,EAA6B,KAAdA,MAAc,cAAdA,MAAc,GAAL,KAAK;IAC9B,MAAMC,MAAM,GAAG,MAAMH,GAAN,CAAUC,GAAV,CAAf;IAEA;IACA,IAAI,CAACC,MAAD,IAAW,CAACC,MAAhB,EAAwB;MACtB,MAAMC,UAAU,GAAG,MAAMC,aAAN,EAAnB;MACA,IAAID,UAAJ,EAAgB;QACd,OAAO,MAAMJ,GAAN,CAAUI,UAAV,CAAP;MACD;IACF;IACD,OAAOD,MAAP;EACD,CApB0E;EAAA;IAAA,yB,iLAAxDT,mB","names":["RegistryWithDefaultKey","OverwritePolicy","ColorSchemeRegistry","constructor","name","overwritePolicy","WARN","setFirstItemAsDefault","get","key","strict","target","defaultKey","getDefaultKey"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/color/ColorSchemeRegistry.ts"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { RegistryWithDefaultKey, OverwritePolicy } from '../models';\n\nexport default class ColorSchemeRegistry<T> extends RegistryWithDefaultKey<T> {\n  constructor() {\n    super({\n      name: 'ColorScheme',\n      overwritePolicy: OverwritePolicy.WARN,\n      setFirstItemAsDefault: true,\n    });\n  }\n\n  get(key?: string, strict = false) {\n    const target = super.get(key) as T | undefined;\n\n    // fallsback to default scheme if any\n    if (!strict && !target) {\n      const defaultKey = super.getDefaultKey();\n      if (defaultKey) {\n        return super.get(defaultKey) as T | undefined;\n      }\n    }\n    return target;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}