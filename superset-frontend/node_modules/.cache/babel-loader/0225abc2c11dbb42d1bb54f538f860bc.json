{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useMemo, useEffect } from 'react';\nimport { styled, SupersetClient, t } from '@superset-ui/core';\nimport rison from 'rison';\nimport { AsyncSelect, Select } from 'src/components';\nimport Label from 'src/components/Label';\nimport { FormLabel } from 'src/components/Form';\nimport RefreshLabel from 'src/components/RefreshLabel';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\nimport { useSchemas } from 'src/hooks/apiResources';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst DatabaseSelectorWrapper = styled.div`\n  ${(_ref) => {let { theme } = _ref;return `\n    .refresh {\n      display: flex;\n      align-items: center;\n      width: 30px;\n      margin-left: ${theme.gridUnit}px;\n      margin-top: ${theme.gridUnit * 5}px;\n    }\n\n    .section {\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n    }\n\n    .select {\n      width: calc(100% - 30px - ${theme.gridUnit}px);\n      flex: 1;\n    }\n\n    & > div {\n      margin-bottom: ${theme.gridUnit * 4}px;\n    }\n  `;}}\n`;\nconst LabelStyle = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  margin-left: ${(_ref2) => {let { theme } = _ref2;return theme.gridUnit - 2;}}px;\n\n  .backend {\n    overflow: visible;\n  }\n\n  .name {\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n`;\nconst SelectLabel = (_ref3) => {let { backend, databaseName } = _ref3;return ___EmotionJSX(LabelStyle, null,\n  ___EmotionJSX(Label, { className: \"backend\" }, backend),\n  ___EmotionJSX(\"span\", { className: \"name\", title: databaseName },\n  databaseName));};\n\n\nconst EMPTY_SCHEMA_OPTIONS = [];\nexport default function DatabaseSelector(_ref4) {let { db, formMode = false, emptyState, getDbList, handleError, isDatabaseSelectEnabled = true, onDbChange, onEmptyResults, onSchemaChange, readOnly = false, schema, sqlLabMode = false } = _ref4;\n  const [currentDb, setCurrentDb] = useState();\n  const [currentSchema, setCurrentSchema] = useState(schema ? { label: schema, value: schema, title: schema } : undefined);\n  const { addSuccessToast } = useToasts();\n  const loadDatabases = useMemo(() => async (search, page, pageSize) => {\n    const queryParams = rison.encode({\n      order_columns: 'database_name',\n      order_direction: 'asc',\n      page,\n      page_size: pageSize,\n      ...(formMode || !sqlLabMode ?\n      { filters: [{ col: 'database_name', opr: 'ct', value: search }] } :\n      {\n        filters: [\n        { col: 'database_name', opr: 'ct', value: search },\n        {\n          col: 'expose_in_sqllab',\n          opr: 'eq',\n          value: true }] }) });\n\n\n\n\n    const endpoint = `/api/v1/database/?q=${queryParams}`;\n    return SupersetClient.get({ endpoint }).then((_ref5) => {let { json } = _ref5;\n      const { result } = json;\n      if (getDbList) {\n        getDbList(result);\n      }\n      if (result.length === 0) {\n        if (onEmptyResults)\n        onEmptyResults(search);\n      }\n      const options = result.map((row) => ({\n        label: ___EmotionJSX(SelectLabel, { backend: row.backend, databaseName: row.database_name }),\n        value: row.id,\n        id: row.id,\n        database_name: row.database_name,\n        backend: row.backend }));\n\n      return {\n        data: options,\n        totalCount: options.length };\n\n    });\n  }, [formMode, getDbList, sqlLabMode]);\n  useEffect(() => {\n    setCurrentDb((current) => (current == null ? void 0 : current.id) !== (db == null ? void 0 : db.id) ?\n    db ?\n    {\n      label: ___EmotionJSX(SelectLabel, { backend: db.backend, databaseName: db.database_name }),\n      value: db.id,\n      ...db } :\n\n    undefined :\n    current);\n  }, [db]);\n  function changeSchema(schema) {\n    setCurrentSchema(schema);\n    if (onSchemaChange) {\n      onSchemaChange(schema == null ? void 0 : schema.value);\n    }\n  }\n  const { data, isFetching: loadingSchemas, refetch } = useSchemas({\n    dbId: currentDb == null ? void 0 : currentDb.value,\n    onSuccess: (schemas, isFetched) => {\n      if (schemas.length === 1) {\n        changeSchema(schemas[0]);\n      } else\n      if (!schemas.find((schemaOption) => schema === schemaOption.value)) {\n        changeSchema(undefined);\n      }\n      if (isFetched) {\n        addSuccessToast('List refreshed');\n      }\n    },\n    onError: () => handleError(t('There was an error loading the schemas')) });\n\n  const schemaOptions = data || EMPTY_SCHEMA_OPTIONS;\n  function changeDataBase(value, database) {\n    setCurrentDb(database);\n    setCurrentSchema(undefined);\n    if (onDbChange) {\n      onDbChange(database);\n    }\n    if (onSchemaChange) {\n      onSchemaChange(undefined);\n    }\n  }\n  function renderSelectRow(select, refreshBtn) {\n    return ___EmotionJSX(\"div\", { className: \"section\" },\n    ___EmotionJSX(\"span\", { className: \"select\" }, select),\n    ___EmotionJSX(\"span\", { className: \"refresh\" }, refreshBtn));\n\n  }\n  function renderDatabaseSelect() {\n    return renderSelectRow(___EmotionJSX(AsyncSelect, { ariaLabel: t('Select database or type to search databases'), optionFilterProps: ['database_name', 'value'], header: ___EmotionJSX(FormLabel, null, t('Database')), lazyLoading: false, notFoundContent: emptyState, onChange: changeDataBase, value: currentDb, placeholder: t('Select database or type to search databases'), disabled: !isDatabaseSelectEnabled || readOnly, options: loadDatabases }), null);\n  }\n  function renderSchemaSelect() {\n    const refreshIcon = !readOnly && ___EmotionJSX(RefreshLabel, { onClick: () => refetch(), tooltipContent: t('Force refresh schema list') });\n    return renderSelectRow(___EmotionJSX(Select, { ariaLabel: t('Select schema or type to search schemas'), disabled: !currentDb || readOnly, header: ___EmotionJSX(FormLabel, null, t('Schema')), labelInValue: true, loading: loadingSchemas, name: \"select-schema\", notFoundContent: t('No compatible schema found'), placeholder: t('Select schema or type to search schemas'), onChange: (item) => changeSchema(item), options: schemaOptions, showSearch: true, value: currentSchema }), refreshIcon);\n  }\n  return ___EmotionJSX(DatabaseSelectorWrapper, null,\n  renderDatabaseSelect(),\n  renderSchemaSelect());\n\n}","map":{"version":3,"mappings":"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","names":["React","useState","useMemo","useEffect","styled","SupersetClient","t","rison","AsyncSelect","Select","Label","FormLabel","RefreshLabel","useToasts","useSchemas","DatabaseSelectorWrapper","div","theme","gridUnit","LabelStyle","SelectLabel","backend","databaseName","EMPTY_SCHEMA_OPTIONS","DatabaseSelector","db","formMode","emptyState","getDbList","handleError","isDatabaseSelectEnabled","onDbChange","onEmptyResults","onSchemaChange","readOnly","schema","sqlLabMode","currentDb","setCurrentDb","currentSchema","setCurrentSchema","label","value","title","undefined","addSuccessToast","loadDatabases","search","page","pageSize","queryParams","encode","order_columns","order_direction","page_size","filters","col","opr","endpoint","get","then","json","result","length","options","map","row","database_name","id","data","totalCount","current","changeSchema","isFetching","loadingSchemas","refetch","dbId","onSuccess","schemas","isFetched","find","schemaOption","onError","schemaOptions","changeDataBase","database","renderSelectRow","select","refreshBtn","renderDatabaseSelect","renderSchemaSelect","refreshIcon","item"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/components/DatabaseSelector/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { ReactNode, useState, useMemo, useEffect } from 'react';\nimport { styled, SupersetClient, t } from '@superset-ui/core';\nimport rison from 'rison';\nimport { AsyncSelect, Select } from 'src/components';\nimport Label from 'src/components/Label';\nimport { FormLabel } from 'src/components/Form';\nimport RefreshLabel from 'src/components/RefreshLabel';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\nimport { useSchemas, SchemaOption } from 'src/hooks/apiResources';\n\nconst DatabaseSelectorWrapper = styled.div`\n  ${({ theme }) => `\n    .refresh {\n      display: flex;\n      align-items: center;\n      width: 30px;\n      margin-left: ${theme.gridUnit}px;\n      margin-top: ${theme.gridUnit * 5}px;\n    }\n\n    .section {\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n    }\n\n    .select {\n      width: calc(100% - 30px - ${theme.gridUnit}px);\n      flex: 1;\n    }\n\n    & > div {\n      margin-bottom: ${theme.gridUnit * 4}px;\n    }\n  `}\n`;\n\nconst LabelStyle = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  margin-left: ${({ theme }) => theme.gridUnit - 2}px;\n\n  .backend {\n    overflow: visible;\n  }\n\n  .name {\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n`;\n\ntype DatabaseValue = {\n  label: React.ReactNode;\n  value: number;\n  id: number;\n  database_name: string;\n  backend: string;\n};\n\nexport type DatabaseObject = {\n  id: number;\n  database_name: string;\n  backend: string;\n};\n\nexport interface DatabaseSelectorProps {\n  db?: DatabaseObject | null;\n  emptyState?: ReactNode;\n  formMode?: boolean;\n  getDbList?: (arg0: any) => void;\n  handleError: (msg: string) => void;\n  isDatabaseSelectEnabled?: boolean;\n  onDbChange?: (db: DatabaseObject) => void;\n  onEmptyResults?: (searchText?: string) => void;\n  onSchemaChange?: (schema?: string) => void;\n  readOnly?: boolean;\n  schema?: string;\n  sqlLabMode?: boolean;\n}\n\nconst SelectLabel = ({\n  backend,\n  databaseName,\n}: {\n  backend: string;\n  databaseName: string;\n}) => (\n  <LabelStyle>\n    <Label className=\"backend\">{backend}</Label>\n    <span className=\"name\" title={databaseName}>\n      {databaseName}\n    </span>\n  </LabelStyle>\n);\n\nconst EMPTY_SCHEMA_OPTIONS: SchemaOption[] = [];\n\nexport default function DatabaseSelector({\n  db,\n  formMode = false,\n  emptyState,\n  getDbList,\n  handleError,\n  isDatabaseSelectEnabled = true,\n  onDbChange,\n  onEmptyResults,\n  onSchemaChange,\n  readOnly = false,\n  schema,\n  sqlLabMode = false,\n}: DatabaseSelectorProps) {\n  const [currentDb, setCurrentDb] = useState<DatabaseValue | undefined>();\n  const [currentSchema, setCurrentSchema] = useState<SchemaOption | undefined>(\n    schema ? { label: schema, value: schema, title: schema } : undefined,\n  );\n  const { addSuccessToast } = useToasts();\n\n  const loadDatabases = useMemo(\n    () =>\n      async (\n        search: string,\n        page: number,\n        pageSize: number,\n      ): Promise<{\n        data: DatabaseValue[];\n        totalCount: number;\n      }> => {\n        const queryParams = rison.encode({\n          order_columns: 'database_name',\n          order_direction: 'asc',\n          page,\n          page_size: pageSize,\n          ...(formMode || !sqlLabMode\n            ? { filters: [{ col: 'database_name', opr: 'ct', value: search }] }\n            : {\n                filters: [\n                  { col: 'database_name', opr: 'ct', value: search },\n                  {\n                    col: 'expose_in_sqllab',\n                    opr: 'eq',\n                    value: true,\n                  },\n                ],\n              }),\n        });\n        const endpoint = `/api/v1/database/?q=${queryParams}`;\n        return SupersetClient.get({ endpoint }).then(({ json }) => {\n          const { result } = json;\n          if (getDbList) {\n            getDbList(result);\n          }\n          if (result.length === 0) {\n            if (onEmptyResults) onEmptyResults(search);\n          }\n          const options = result.map((row: DatabaseObject) => ({\n            label: (\n              <SelectLabel\n                backend={row.backend}\n                databaseName={row.database_name}\n              />\n            ),\n            value: row.id,\n            id: row.id,\n            database_name: row.database_name,\n            backend: row.backend,\n          }));\n\n          return {\n            data: options,\n            totalCount: options.length,\n          };\n        });\n      },\n    [formMode, getDbList, sqlLabMode],\n  );\n\n  useEffect(() => {\n    setCurrentDb(current =>\n      current?.id !== db?.id\n        ? db\n          ? {\n              label: (\n                <SelectLabel\n                  backend={db.backend}\n                  databaseName={db.database_name}\n                />\n              ),\n              value: db.id,\n              ...db,\n            }\n          : undefined\n        : current,\n    );\n  }, [db]);\n\n  function changeSchema(schema: SchemaOption | undefined) {\n    setCurrentSchema(schema);\n    if (onSchemaChange) {\n      onSchemaChange(schema?.value);\n    }\n  }\n\n  const {\n    data,\n    isFetching: loadingSchemas,\n    refetch,\n  } = useSchemas({\n    dbId: currentDb?.value,\n    onSuccess: (schemas, isFetched) => {\n      if (schemas.length === 1) {\n        changeSchema(schemas[0]);\n      } else if (!schemas.find(schemaOption => schema === schemaOption.value)) {\n        changeSchema(undefined);\n      }\n\n      if (isFetched) {\n        addSuccessToast('List refreshed');\n      }\n    },\n    onError: () => handleError(t('There was an error loading the schemas')),\n  });\n\n  const schemaOptions = data || EMPTY_SCHEMA_OPTIONS;\n\n  function changeDataBase(\n    value: { label: string; value: number },\n    database: DatabaseValue,\n  ) {\n    setCurrentDb(database);\n    setCurrentSchema(undefined);\n    if (onDbChange) {\n      onDbChange(database);\n    }\n    if (onSchemaChange) {\n      onSchemaChange(undefined);\n    }\n  }\n\n  function renderSelectRow(select: ReactNode, refreshBtn: ReactNode) {\n    return (\n      <div className=\"section\">\n        <span className=\"select\">{select}</span>\n        <span className=\"refresh\">{refreshBtn}</span>\n      </div>\n    );\n  }\n\n  function renderDatabaseSelect() {\n    return renderSelectRow(\n      <AsyncSelect\n        ariaLabel={t('Select database or type to search databases')}\n        optionFilterProps={['database_name', 'value']}\n        data-test=\"select-database\"\n        header={<FormLabel>{t('Database')}</FormLabel>}\n        lazyLoading={false}\n        notFoundContent={emptyState}\n        onChange={changeDataBase}\n        value={currentDb}\n        placeholder={t('Select database or type to search databases')}\n        disabled={!isDatabaseSelectEnabled || readOnly}\n        options={loadDatabases}\n      />,\n      null,\n    );\n  }\n\n  function renderSchemaSelect() {\n    const refreshIcon = !readOnly && (\n      <RefreshLabel\n        onClick={() => refetch()}\n        tooltipContent={t('Force refresh schema list')}\n      />\n    );\n    return renderSelectRow(\n      <Select\n        ariaLabel={t('Select schema or type to search schemas')}\n        disabled={!currentDb || readOnly}\n        header={<FormLabel>{t('Schema')}</FormLabel>}\n        labelInValue\n        loading={loadingSchemas}\n        name=\"select-schema\"\n        notFoundContent={t('No compatible schema found')}\n        placeholder={t('Select schema or type to search schemas')}\n        onChange={item => changeSchema(item as SchemaOption)}\n        options={schemaOptions}\n        showSearch\n        value={currentSchema}\n      />,\n      refreshIcon,\n    );\n  }\n\n  return (\n    <DatabaseSelectorWrapper data-test=\"DatabaseSelector\">\n      {renderDatabaseSelect()}\n      {renderSchemaSelect()}\n    </DatabaseSelectorWrapper>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}