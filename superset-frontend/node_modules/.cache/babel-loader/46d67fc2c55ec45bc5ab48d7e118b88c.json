{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};import { getExtraFormData } from 'src/dashboard/components/nativeFilters/utils';\nimport { areObjectsEqual } from 'src/reduxUtils';\nimport getEffectiveExtraFilters from './getEffectiveExtraFilters';\nimport { getAllActiveFilters } from '../activeAllDashboardFilters';\n// We cache formData objects so that our connected container components don't always trigger\n// render cascades. we cannot leverage the reselect library because our cache size is >1\nconst cachedFiltersByChart = {};\nconst cachedFormdataByChart = {};\n// this function merge chart's formData with dashboard filters value,\n// and generate a new formData which will be used in the new query.\n// filters param only contains those applicable to this chart.\nexport default function getFormDataWithExtraFilters(_ref) {let { chart, filters, nativeFilters, chartConfiguration, colorScheme, colorNamespace, sliceId, dataMask, extraControls, labelColors, sharedLabelColors, allSliceIds } = _ref;\n  // if dashboard metadata + filters have not changed, use cache if possible\n  const cachedFormData = cachedFormdataByChart[sliceId];\n  if (cachedFiltersByChart[sliceId] === filters &&\n  areObjectsEqual(cachedFormData == null ? void 0 : cachedFormData.color_scheme, colorScheme, {\n    ignoreUndefined: true }) &&\n\n  areObjectsEqual(cachedFormData == null ? void 0 : cachedFormData.color_namespace, colorNamespace, {\n    ignoreUndefined: true }) &&\n\n  areObjectsEqual(cachedFormData == null ? void 0 : cachedFormData.label_colors, labelColors, {\n    ignoreUndefined: true }) &&\n\n  areObjectsEqual(cachedFormData == null ? void 0 : cachedFormData.shared_label_colors, sharedLabelColors, {\n    ignoreUndefined: true }) &&\n\n  !!cachedFormData &&\n  areObjectsEqual(cachedFormData == null ? void 0 : cachedFormData.dataMask, dataMask, {\n    ignoreUndefined: true }) &&\n\n  areObjectsEqual(cachedFormData == null ? void 0 : cachedFormData.extraControls, extraControls, {\n    ignoreUndefined: true }))\n  {\n    return cachedFormData;\n  }\n  let extraData = {};\n  const activeFilters = getAllActiveFilters({\n    chartConfiguration,\n    dataMask,\n    nativeFilters,\n    allSliceIds });\n\n  const filterIdsAppliedOnChart = Object.entries(activeFilters).\n  filter((_ref2) => {let [, { scope }] = _ref2;return _includesInstanceProperty(scope).call(scope, chart.id);}).\n  map((_ref3) => {let [filterId] = _ref3;return filterId;});\n  if (filterIdsAppliedOnChart.length) {\n    extraData = {\n      extra_form_data: getExtraFormData(dataMask, filterIdsAppliedOnChart) };\n\n  }\n  const formData = {\n    ...chart.form_data,\n    label_colors: labelColors,\n    shared_label_colors: sharedLabelColors,\n    ...(colorScheme && { color_scheme: colorScheme }),\n    extra_filters: getEffectiveExtraFilters(filters),\n    ...extraData,\n    ...extraControls };\n\n  cachedFiltersByChart[sliceId] = filters;\n  cachedFormdataByChart[sliceId] = { ...formData, dataMask, extraControls };\n  return formData;\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(cachedFiltersByChart, \"cachedFiltersByChart\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/util/charts/getFormDataWithExtraFilters.ts\");reactHotLoader.register(cachedFormdataByChart, \"cachedFormdataByChart\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/util/charts/getFormDataWithExtraFilters.ts\");reactHotLoader.register(getFormDataWithExtraFilters, \"getFormDataWithExtraFilters\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/util/charts/getFormDataWithExtraFilters.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"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","names":["getExtraFormData","areObjectsEqual","getEffectiveExtraFilters","getAllActiveFilters","cachedFiltersByChart","cachedFormdataByChart","getFormDataWithExtraFilters","chart","filters","nativeFilters","chartConfiguration","colorScheme","colorNamespace","sliceId","dataMask","extraControls","labelColors","sharedLabelColors","allSliceIds","cachedFormData","color_scheme","ignoreUndefined","color_namespace","label_colors","shared_label_colors","extraData","activeFilters","filterIdsAppliedOnChart","Object","entries","filter","scope","id","map","filterId","length","extra_form_data","formData","form_data","extra_filters"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/dashboard/util/charts/getFormDataWithExtraFilters.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  DataMaskStateWithId,\n  DataRecordFilters,\n  JsonObject,\n  PartialFilters,\n} from '@superset-ui/core';\nimport { ChartConfiguration, ChartQueryPayload } from 'src/dashboard/types';\nimport { getExtraFormData } from 'src/dashboard/components/nativeFilters/utils';\nimport { areObjectsEqual } from 'src/reduxUtils';\nimport getEffectiveExtraFilters from './getEffectiveExtraFilters';\nimport { getAllActiveFilters } from '../activeAllDashboardFilters';\n\n// We cache formData objects so that our connected container components don't always trigger\n// render cascades. we cannot leverage the reselect library because our cache size is >1\nconst cachedFiltersByChart = {};\nconst cachedFormdataByChart = {};\n\nexport interface GetFormDataWithExtraFiltersArguments {\n  chartConfiguration: ChartConfiguration;\n  chart: ChartQueryPayload;\n  filters: DataRecordFilters;\n  colorScheme?: string;\n  colorNamespace?: string;\n  sliceId: number;\n  dataMask: DataMaskStateWithId;\n  nativeFilters: PartialFilters;\n  extraControls: Record<string, string | boolean | null>;\n  labelColors?: Record<string, string>;\n  sharedLabelColors?: Record<string, string>;\n  allSliceIds: number[];\n}\n\n// this function merge chart's formData with dashboard filters value,\n// and generate a new formData which will be used in the new query.\n// filters param only contains those applicable to this chart.\nexport default function getFormDataWithExtraFilters({\n  chart,\n  filters,\n  nativeFilters,\n  chartConfiguration,\n  colorScheme,\n  colorNamespace,\n  sliceId,\n  dataMask,\n  extraControls,\n  labelColors,\n  sharedLabelColors,\n  allSliceIds,\n}: GetFormDataWithExtraFiltersArguments) {\n  // if dashboard metadata + filters have not changed, use cache if possible\n  const cachedFormData = cachedFormdataByChart[sliceId];\n  if (\n    cachedFiltersByChart[sliceId] === filters &&\n    areObjectsEqual(cachedFormData?.color_scheme, colorScheme, {\n      ignoreUndefined: true,\n    }) &&\n    areObjectsEqual(cachedFormData?.color_namespace, colorNamespace, {\n      ignoreUndefined: true,\n    }) &&\n    areObjectsEqual(cachedFormData?.label_colors, labelColors, {\n      ignoreUndefined: true,\n    }) &&\n    areObjectsEqual(cachedFormData?.shared_label_colors, sharedLabelColors, {\n      ignoreUndefined: true,\n    }) &&\n    !!cachedFormData &&\n    areObjectsEqual(cachedFormData?.dataMask, dataMask, {\n      ignoreUndefined: true,\n    }) &&\n    areObjectsEqual(cachedFormData?.extraControls, extraControls, {\n      ignoreUndefined: true,\n    })\n  ) {\n    return cachedFormData;\n  }\n\n  let extraData: { extra_form_data?: JsonObject } = {};\n  const activeFilters = getAllActiveFilters({\n    chartConfiguration,\n    dataMask,\n    nativeFilters,\n    allSliceIds,\n  });\n  const filterIdsAppliedOnChart = Object.entries(activeFilters)\n    .filter(([, { scope }]) => scope.includes(chart.id))\n    .map(([filterId]) => filterId);\n  if (filterIdsAppliedOnChart.length) {\n    extraData = {\n      extra_form_data: getExtraFormData(dataMask, filterIdsAppliedOnChart),\n    };\n  }\n\n  const formData = {\n    ...chart.form_data,\n    label_colors: labelColors,\n    shared_label_colors: sharedLabelColors,\n    ...(colorScheme && { color_scheme: colorScheme }),\n    extra_filters: getEffectiveExtraFilters(filters),\n    ...extraData,\n    ...extraControls,\n  };\n\n  cachedFiltersByChart[sliceId] = filters;\n  cachedFormdataByChart[sliceId] = { ...formData, dataMask, extraControls };\n\n  return formData;\n}\n"]},"metadata":{},"sourceType":"module"}