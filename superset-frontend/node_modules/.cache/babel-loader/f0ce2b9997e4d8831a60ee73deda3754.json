{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ExtensibleFunction } from '../models';\nimport { isRequired } from '../utils';\nexport const PREVIEW_VALUE = 12345.432;\nclass NumberFormatter extends ExtensibleFunction {\n\n\n\n\n\n  constructor(config) {\n    super((value) => this.format(value));this.id = void 0;this.label = void 0;this.description = void 0;this.formatFunc = void 0;this.isInvalid = void 0;\n    const { id = isRequired('config.id'), label, description = '', formatFunc = isRequired('config.formatFunc'), isInvalid = false } = config;\n    this.id = id;\n    this.label = label != null ? label : id;\n    this.description = description;\n    this.formatFunc = formatFunc;\n    this.isInvalid = isInvalid;\n  }\n  format(value) {\n    if (value === null || value === undefined || Number.isNaN(value)) {\n      return `${value}`;\n    }\n    if (value === Number.POSITIVE_INFINITY) {\n      return '∞';\n    }\n    if (value === Number.NEGATIVE_INFINITY) {\n      return '-∞';\n    }\n    return this.formatFunc(value);\n  }\n  preview(value) {if (value === void 0) {value = PREVIEW_VALUE;}\n    return `${value} => ${this.format(value)}`;\n  }}\n\nexport default NumberFormatter;","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,SAASA,kBAAT,QAAmC,WAAnC;AACA,SAASC,UAAT,QAA2B,UAA3B;AAGA,OAAO,MAAMC,aAAa,GAAG,SAAtB;AAgBP,MAAMC,eAAN,SAA8BH,kBAA9B,CAAgD;;;;;;EAW9CI,YAAYC,MAAZ,EAAyC;IACvC,MAAM,CAACC,KAAD,KAAmB,KAAKC,MAAL,CAAYD,KAAZ,CAAzB,EADuC,KAVzCE,EAUyC,eARzCC,KAQyC,eANzCC,WAMyC,eAJzCC,UAIyC,eAFzCC,SAEyC;IAGvC,MAAM,EACJJ,EAAE,GAAGP,UAAU,CAAC,WAAD,CADX,EAEJQ,KAFI,EAGJC,WAAW,GAAG,EAHV,EAIJC,UAAU,GAAGV,UAAU,CAAC,mBAAD,CAJnB,EAKJW,SAAS,GAAG,KALR,KAMFP,MANJ;IAOA,KAAKG,EAAL,GAAUA,EAAV;IACA,KAAKC,KAAL,GAAaA,KAAb,WAAaA,KAAb,GAAsBD,EAAtB;IACA,KAAKE,WAAL,GAAmBA,WAAnB;IACA,KAAKC,UAAL,GAAkBA,UAAlB;IACA,KAAKC,SAAL,GAAiBA,SAAjB;EACD;EAEDL,MAAM,CAACD,KAAD,EAAiC;IACrC,IAAIA,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKO,SAA5B,IAAyCC,MAAM,CAACC,KAAP,CAAaT,KAAb,CAA7C,EAAkE;MAChE,OAAO,GAAGA,KAAK,EAAf;IACD;IACD,IAAIA,KAAK,KAAKQ,MAAM,CAACE,iBAArB,EAAwC;MACtC,OAAO,GAAP;IACD;IACD,IAAIV,KAAK,KAAKQ,MAAM,CAACG,iBAArB,EAAwC;MACtC,OAAO,IAAP;IACD;IAED,OAAO,KAAKN,UAAL,CAAgBL,KAAhB,CAAP;EACD;EAEDY,OAAO,CAACZ,KAAD,EAAsB,KAArBA,KAAqB,cAArBA,KAAqB,GAAbJ,aAAa;IAC3B,OAAO,GAAGI,KAAK,OAAO,KAAKC,MAAL,CAAYD,KAAZ,CAAkB,EAAxC;EACD,CA5C6C;;AA+ChD,eAAeH,eAAf","names":["ExtensibleFunction","isRequired","PREVIEW_VALUE","NumberFormatter","constructor","config","value","format","id","label","description","formatFunc","isInvalid","undefined","Number","isNaN","POSITIVE_INFINITY","NEGATIVE_INFINITY","preview"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/packages/superset-ui-core/src/number-format/NumberFormatter.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ExtensibleFunction } from '../models';\nimport { isRequired } from '../utils';\nimport { NumberFormatFunction } from './types';\n\nexport const PREVIEW_VALUE = 12345.432;\n\nexport interface NumberFormatterConfig {\n  id: string;\n  label?: string;\n  description?: string;\n  formatFunc: NumberFormatFunction;\n  isInvalid?: boolean;\n}\n\n// Use type augmentation to indicate that\n// an instance of NumberFormatter is also a function\ninterface NumberFormatter {\n  (value: number | null | undefined): string;\n}\n\nclass NumberFormatter extends ExtensibleFunction {\n  id: string;\n\n  label: string;\n\n  description: string;\n\n  formatFunc: NumberFormatFunction;\n\n  isInvalid: boolean;\n\n  constructor(config: NumberFormatterConfig) {\n    super((value: number) => this.format(value));\n\n    const {\n      id = isRequired('config.id'),\n      label,\n      description = '',\n      formatFunc = isRequired('config.formatFunc'),\n      isInvalid = false,\n    } = config;\n    this.id = id;\n    this.label = label ?? id;\n    this.description = description;\n    this.formatFunc = formatFunc;\n    this.isInvalid = isInvalid;\n  }\n\n  format(value: number | null | undefined) {\n    if (value === null || value === undefined || Number.isNaN(value)) {\n      return `${value}`;\n    }\n    if (value === Number.POSITIVE_INFINITY) {\n      return '∞';\n    }\n    if (value === Number.NEGATIVE_INFINITY) {\n      return '-∞';\n    }\n\n    return this.formatFunc(value);\n  }\n\n  preview(value = PREVIEW_VALUE) {\n    return `${value} => ${this.format(value)}`;\n  }\n}\n\nexport default NumberFormatter;\n"]},"metadata":{},"sourceType":"module"}