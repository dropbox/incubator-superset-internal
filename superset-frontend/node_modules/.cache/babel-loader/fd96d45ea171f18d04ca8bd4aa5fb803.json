{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport UntypedJed from 'jed';\nimport logging from '../utils/logging';\nconst DEFAULT_LANGUAGE_PACK = {\n  domain: 'superset',\n  locale_data: {\n    superset: {\n      '': {\n        domain: 'superset',\n        lang: 'en',\n        plural_forms: 'nplurals=2; plural=(n != 1)' } } } };\n\n\n\n\nexport default class Translator {\n\n\n  constructor(config) {if (config === void 0) {config = {};}this.i18n = void 0;this.locale = void 0;\n    const { languagePack = DEFAULT_LANGUAGE_PACK } = config;\n    this.i18n = new UntypedJed(languagePack);\n    this.locale = this.i18n.options.locale_data.superset[''].lang;\n  }\n  /**\n   * Add additional translations on the fly, used by plugins.\n   */\n  addTranslation(key, texts) {\n    const translations = this.i18n.options.locale_data.superset;\n    if (process.env.WEBPACK_MODE !== 'test' && key in translations) {\n      logging.warn(`Duplicate translation key \"${key}\", will override.`);\n    }\n    translations[key] = texts;\n  }\n  /**\n   * Add a series of translations.\n   */\n  addTranslations(translations) {\n    if (translations && !Array.isArray(translations)) {\n      Object.entries(translations).forEach((_ref) => {let [key, vals] = _ref;return this.addTranslation(key, vals);});\n    } else\n    {\n      logging.warn('Invalid translations');\n    }\n  }\n  addLocaleData(data) {\n    // always fallback to English\n    const translations = (data == null ? void 0 : data[this.locale]) || (data == null ? void 0 : data.en);\n    if (translations) {\n      this.addTranslations(translations);\n    } else\n    {\n      logging.warn('Invalid locale data');\n    }\n  }\n  translate(input) {for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {args[_key - 1] = arguments[_key];}\n    return this.i18n.translate(input).fetch(...args);\n  }\n  translateWithNumber(key) {for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {args[_key2 - 1] = arguments[_key2];}\n    const [plural, num, ...rest] = args;\n    if (typeof plural === 'number') {\n      return this.i18n.\n      translate(key).\n      ifPlural(plural, key).\n      fetch(plural, num, ...args);\n    }\n    return this.i18n.\n    translate(key).\n    ifPlural(num, plural).\n    fetch(...rest);\n  }}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,OAAOA,UAAP,MAAuB,KAAvB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AAUA,MAAMC,qBAAqB,GAAiB;EAC1CC,MAAM,EAAE,UADkC;EAE1CC,WAAW,EAAE;IACXC,QAAQ,EAAE;MACR,IAAI;QACFF,MAAM,EAAE,UADN;QAEFG,IAAI,EAAE,IAFJ;QAGFC,YAAY,EAAE,6BAHZ,EADI,EADC,EAF6B,EAA5C;;;;;AAaA,eAAc,MAAOC,UAAP,CAAiB;;;EAK7BC,YAAYC,MAAZ,EAAyC,KAA7BA,MAA6B,cAA7BA,MAA6B,GAAF,EAAE,OAJzCC,IAIyC,eAFzCC,MAEyC;IACvC,MAAM,EAAEC,YAAY,GAAGX,qBAAjB,KAA2CQ,MAAjD;IACA,KAAKC,IAAL,GAAY,IAAIX,UAAJ,CAAea,YAAf,CAAZ;IACA,KAAKD,MAAL,GAAc,KAAKD,IAAL,CAAUG,OAAV,CAAkBV,WAAlB,CAA8BC,QAA9B,CAAuC,EAAvC,EAA2CC,IAAzD;EACD;EAED;;;EAGAS,cAAc,CAACC,GAAD,EAAcC,KAAd,EAA0C;IACtD,MAAMC,YAAY,GAAG,KAAKP,IAAL,CAAUG,OAAV,CAAkBV,WAAlB,CAA8BC,QAAnD;IACA,IAAIc,OAAO,CAACC,GAAR,CAAYC,YAAZ,KAA6B,MAA7B,IAAuCL,GAAG,IAAIE,YAAlD,EAAgE;MAC9DjB,OAAO,CAACqB,IAAR,CAAa,8BAA8BN,GAAG,mBAA9C;IACD;IACDE,YAAY,CAACF,GAAD,CAAZ,GAAoBC,KAApB;EACD;EAED;;;EAGAM,eAAe,CAACL,YAAD,EAA2B;IACxC,IAAIA,YAAY,IAAI,CAACM,KAAK,CAACC,OAAN,CAAcP,YAAd,CAArB,EAAkD;MAChDQ,MAAM,CAACC,OAAP,CAAeT,YAAf,EAA6BU,OAA7B,CAAqC,eAAC,CAACZ,GAAD,EAAMa,IAAN,CAAD,eACnC,KAAKd,cAAL,CAAoBC,GAApB,EAAyBa,IAAzB,CADmC,EAArC;IAGD,CAJD;IAIO;MACL5B,OAAO,CAACqB,IAAR,CAAa,sBAAb;IACD;EACF;EAEDQ,aAAa,CAACC,IAAD,EAAiB;IAC5B;IACA,MAAMb,YAAY,GAAG,KAAI,QAAJ,gBAAI,CAAG,KAAKN,MAAR,CAAJ,MAAuBmB,IAAvB,oBAAuBA,IAAI,CAAEC,EAA7B,CAArB;IACA,IAAId,YAAJ,EAAkB;MAChB,KAAKK,eAAL,CAAqBL,YAArB;IACD,CAFD;IAEO;MACLjB,OAAO,CAACqB,IAAR,CAAa,qBAAb;IACD;EACF;EAEDW,SAAS,CAACC,KAAD,EAAkC,mCAAfC,IAAe,uEAAfA,IAAe;IACzC,OAAO,KAAKxB,IAAL,CAAUsB,SAAV,CAAoBC,KAApB,EAA2BE,KAA3B,CAAiC,GAAGD,IAApC,CAAP;EACD;EAEDE,mBAAmB,CAACrB,GAAD,EAAgC,oCAAfmB,IAAe,6EAAfA,IAAe;IACjD,MAAM,CAACG,MAAD,EAASC,GAAT,EAAc,GAAGC,IAAjB,IAAyBL,IAA/B;IACA,IAAI,OAAOG,MAAP,KAAkB,QAAtB,EAAgC;MAC9B,OAAO,KAAK3B,IAAL;MACJsB,SADI,CACMjB,GADN;MAEJyB,QAFI,CAEKH,MAFL,EAEatB,GAFb;MAGJoB,KAHI,CAGEE,MAHF,EAGUC,GAHV,EAGe,GAAGJ,IAHlB,CAAP;IAID;IACD,OAAO,KAAKxB,IAAL;IACJsB,SADI,CACMjB,GADN;IAEJyB,QAFI,CAEKF,GAFL,EAEoBD,MAFpB;IAGJF,KAHI,CAGE,GAAGI,IAHL,CAAP;EAID,CA7D4B","names":["UntypedJed","logging","DEFAULT_LANGUAGE_PACK","domain","locale_data","superset","lang","plural_forms","Translator","constructor","config","i18n","locale","languagePack","options","addTranslation","key","texts","translations","process","env","WEBPACK_MODE","warn","addTranslations","Array","isArray","Object","entries","forEach","vals","addLocaleData","data","en","translate","input","args","fetch","translateWithNumber","plural","num","rest","ifPlural"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/translation/Translator.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport UntypedJed from 'jed';\nimport logging from '../utils/logging';\nimport {\n  Jed,\n  TranslatorConfig,\n  Locale,\n  Translations,\n  LocaleData,\n  LanguagePack,\n} from './types';\n\nconst DEFAULT_LANGUAGE_PACK: LanguagePack = {\n  domain: 'superset',\n  locale_data: {\n    superset: {\n      '': {\n        domain: 'superset',\n        lang: 'en',\n        plural_forms: 'nplurals=2; plural=(n != 1)',\n      },\n    },\n  },\n};\n\nexport default class Translator {\n  i18n: Jed;\n\n  locale: Locale;\n\n  constructor(config: TranslatorConfig = {}) {\n    const { languagePack = DEFAULT_LANGUAGE_PACK } = config;\n    this.i18n = new UntypedJed(languagePack) as Jed;\n    this.locale = this.i18n.options.locale_data.superset[''].lang as Locale;\n  }\n\n  /**\n   * Add additional translations on the fly, used by plugins.\n   */\n  addTranslation(key: string, texts: ReadonlyArray<string>) {\n    const translations = this.i18n.options.locale_data.superset;\n    if (process.env.WEBPACK_MODE !== 'test' && key in translations) {\n      logging.warn(`Duplicate translation key \"${key}\", will override.`);\n    }\n    translations[key] = texts;\n  }\n\n  /**\n   * Add a series of translations.\n   */\n  addTranslations(translations: Translations) {\n    if (translations && !Array.isArray(translations)) {\n      Object.entries(translations).forEach(([key, vals]) =>\n        this.addTranslation(key, vals),\n      );\n    } else {\n      logging.warn('Invalid translations');\n    }\n  }\n\n  addLocaleData(data: LocaleData) {\n    // always fallback to English\n    const translations = data?.[this.locale] || data?.en;\n    if (translations) {\n      this.addTranslations(translations);\n    } else {\n      logging.warn('Invalid locale data');\n    }\n  }\n\n  translate(input: string, ...args: unknown[]): string {\n    return this.i18n.translate(input).fetch(...args);\n  }\n\n  translateWithNumber(key: string, ...args: unknown[]): string {\n    const [plural, num, ...rest] = args;\n    if (typeof plural === 'number') {\n      return this.i18n\n        .translate(key)\n        .ifPlural(plural, key)\n        .fetch(plural, num, ...args);\n    }\n    return this.i18n\n      .translate(key)\n      .ifPlural(num as number, plural as string)\n      .fetch(...rest);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}