{"ast":null,"code":"const NOOP = () => {};\nexport default function transformProps(chartProps) {\n  const { datasource, formData, hooks, initialValues, queriesData, rawDatasource = {}, rawFormData, width, height } = chartProps;\n  const { onAddFilter = NOOP, onFilterMenuOpen = NOOP, onFilterMenuClose = NOOP } = hooks;\n  const { sliceId, dateFilter, instantFiltering, showSqlaTimeColumn, showSqlaTimeGranularity } = formData;\n  const { verboseMap = {} } = datasource;\n  const filterConfigs = formData.filterConfigs || [];\n  const filtersFields = filterConfigs.map((flt) => ({\n    ...flt,\n    key: flt.column,\n    label: flt.label || verboseMap[flt.column] || flt.column }));\n\n  return {\n    chartId: sliceId,\n    width,\n    height,\n    datasource: rawDatasource,\n    filtersChoices: queriesData[0].data,\n    filtersFields,\n    instantFiltering,\n    onChange: onAddFilter,\n    onFilterMenuOpen,\n    onFilterMenuClose,\n    origSelectedValues: initialValues || {},\n    showDateFilter: dateFilter,\n    showSqlaTimeColumn,\n    showSqlaTimeGrain: showSqlaTimeGranularity,\n    // the original form data, needed for async select options\n    rawFormData };\n\n}","map":{"version":3,"mappings":"AAoBA,MAAMA,IAAI,GAAG,MAAK,CAAG,CAArB;AAEA,eAAc,SAAUC,cAAV,CAAyBC,UAAzB,EAAwD;EACpE,MAAM,EACJC,UADI,EAEJC,QAFI,EAGJC,KAHI,EAIJC,aAJI,EAKJC,WALI,EAMJC,aAAa,GAAG,EANZ,EAOJC,WAPI,EAQJC,KARI,EASJC,MATI,KAUFT,UAVJ;EAWA,MAAM,EACJU,WAAW,GAAGZ,IADV,EAEJa,gBAAgB,GAAGb,IAFf,EAGJc,iBAAiB,GAAGd,IAHhB,KAIFK,KAJJ;EAKA,MAAM,EACJU,OADI,EAEJC,UAFI,EAGJC,gBAHI,EAIJC,kBAJI,EAKJC,uBALI,KAMFf,QANJ;EAOA,MAAM,EAAEgB,UAAU,GAAG,EAAf,KAAsBjB,UAA5B;EACA,MAAMkB,aAAa,GAAGjB,QAAQ,CAACiB,aAAT,IAA0B,EAAhD;EAEA,MAAMC,aAAa,GAAGD,aAAa,CAACE,GAAd,CAAkB,IAAG,MAAK;IAC9C,GAAGC,GAD2C;IAE9CC,GAAG,EAAED,GAAG,CAACE,MAFqC;IAG9CC,KAAK,EAAEH,GAAG,CAACG,KAAJ,IAAaP,UAAU,CAACI,GAAG,CAACE,MAAL,CAAvB,IAAuCF,GAAG,CAACE,MAHJ,EAAL,CAArB,CAAtB;;EAMA,OAAO;IACLE,OAAO,EAAEb,OADJ;IAELL,KAFK;IAGLC,MAHK;IAILR,UAAU,EAAEK,aAJP;IAKLqB,cAAc,EAAEtB,WAAW,CAAC,CAAD,CAAX,CAAeuB,IAL1B;IAMLR,aANK;IAOLL,gBAPK;IAQLc,QAAQ,EAAEnB,WARL;IASLC,gBATK;IAULC,iBAVK;IAWLkB,kBAAkB,EAAE1B,aAAa,IAAI,EAXhC;IAYL2B,cAAc,EAAEjB,UAZX;IAaLE,kBAbK;IAcLgB,iBAAiB,EAAEf,uBAdd;IAeL;IACAV,WAhBK,EAAP;;AAkBD","names":["NOOP","transformProps","chartProps","datasource","formData","hooks","initialValues","queriesData","rawDatasource","rawFormData","width","height","onAddFilter","onFilterMenuOpen","onFilterMenuClose","sliceId","dateFilter","instantFiltering","showSqlaTimeColumn","showSqlaTimeGranularity","verboseMap","filterConfigs","filtersFields","map","flt","key","column","label","chartId","filtersChoices","data","onChange","origSelectedValues","showDateFilter","showSqlaTimeGrain"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/visualizations/FilterBox/transformProps.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { FilterBoxChartProps } from './types';\n\nconst NOOP = () => {};\n\nexport default function transformProps(chartProps: FilterBoxChartProps) {\n  const {\n    datasource,\n    formData,\n    hooks,\n    initialValues,\n    queriesData,\n    rawDatasource = {},\n    rawFormData,\n    width,\n    height,\n  } = chartProps;\n  const {\n    onAddFilter = NOOP,\n    onFilterMenuOpen = NOOP,\n    onFilterMenuClose = NOOP,\n  } = hooks;\n  const {\n    sliceId,\n    dateFilter,\n    instantFiltering,\n    showSqlaTimeColumn,\n    showSqlaTimeGranularity,\n  } = formData;\n  const { verboseMap = {} } = datasource;\n  const filterConfigs = formData.filterConfigs || [];\n\n  const filtersFields = filterConfigs.map(flt => ({\n    ...flt,\n    key: flt.column,\n    label: flt.label || verboseMap[flt.column] || flt.column,\n  }));\n\n  return {\n    chartId: sliceId,\n    width,\n    height,\n    datasource: rawDatasource,\n    filtersChoices: queriesData[0].data,\n    filtersFields,\n    instantFiltering,\n    onChange: onAddFilter,\n    onFilterMenuOpen,\n    onFilterMenuClose,\n    origSelectedValues: initialValues || {},\n    showDateFilter: dateFilter,\n    showSqlaTimeColumn,\n    showSqlaTimeGrain: showSqlaTimeGranularity,\n    // the original form data, needed for async select options\n    rawFormData,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}