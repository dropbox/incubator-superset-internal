{"ast":null,"code":"import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\"; /* eslint-disable camelcase */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitationsxw\n * under the License.\n */\nimport { ensureIsArray, ensureIsInt, RollingType } from '@superset-ui/core';\nimport { getMetricOffsetsMap, isTimeComparison } from './utils';\nexport const rollingWindowOperator = (formData, queryObject) => {var _context;\n  let columns;\n  if (isTimeComparison(formData, queryObject)) {\n    const metricsMap = getMetricOffsetsMap(formData, queryObject);\n    columns = [\n    ...Array.from(metricsMap.values()),\n    ...Array.from(metricsMap.keys())];\n\n  } else\n  {\n    columns = ensureIsArray(queryObject.metrics).map((metric) => {\n      if (typeof metric === 'string') {\n        return metric;\n      }\n      return metric.label;\n    });\n  }\n  const columnsMap = Object.fromEntries(columns.map((col) => [col, col]));\n  if (formData.rolling_type === RollingType.Cumsum) {\n    return {\n      operation: 'cum',\n      options: {\n        operator: 'sum',\n        columns: columnsMap } };\n\n\n  }\n  if (_includesInstanceProperty(_context = [RollingType.Sum, RollingType.Mean, RollingType.Std]).call(_context, formData.rolling_type)) {\n    return {\n      operation: 'rolling',\n      options: {\n        rolling_type: formData.rolling_type,\n        window: ensureIsInt(formData.rolling_periods, 1),\n        min_periods: ensureIsInt(formData.min_periods, 0),\n        columns: columnsMap } };\n\n\n  }\n  return undefined;\n};","map":{"version":3,"mappings":"iGAAA;AACA;;;;;;;;;;;;;;;;;;AAkBA,SACEA,aADF,EAEEC,WAFF,EAKEC,WALF,QAMO,mBANP;AAOA,SAASC,mBAAT,EAA8BC,gBAA9B,QAAsD,SAAtD;AAGA,OAAO,MAAMC,qBAAqB,GAE9B,CAACC,QAAD,EAAWC,WAAX,KAA0B;EAC5B,IAAIC,OAAJ;EACA,IAAIJ,gBAAgB,CAACE,QAAD,EAAWC,WAAX,CAApB,EAA6C;IAC3C,MAAME,UAAU,GAAGN,mBAAmB,CAACG,QAAD,EAAWC,WAAX,CAAtC;IACAC,OAAO,GAAG;IACR,GAAGE,KAAK,CAACC,IAAN,CAAWF,UAAU,CAACG,MAAX,EAAX,CADK;IAER,GAAGF,KAAK,CAACC,IAAN,CAAWF,UAAU,CAACI,IAAX,EAAX,CAFK,CAAV;;EAID,CAND;EAMO;IACLL,OAAO,GAAGR,aAAa,CAACO,WAAW,CAACO,OAAb,CAAb,CAAmCC,GAAnC,CAAuC,OAAM,KAAG;MACxD,IAAI,OAAOC,MAAP,KAAkB,QAAtB,EAAgC;QAC9B,OAAOA,MAAP;MACD;MACD,OAAOA,MAAM,CAACC,KAAd;IACD,CALS,CAAV;EAMD;EACD,MAAMC,UAAU,GAAGC,MAAM,CAACC,WAAP,CAAmBZ,OAAO,CAACO,GAAR,CAAY,IAAG,KAAI,CAACM,GAAD,EAAMA,GAAN,CAAnB,CAAnB,CAAnB;EAEA,IAAIf,QAAQ,CAACgB,YAAT,KAA0BpB,WAAW,CAACqB,MAA1C,EAAkD;IAChD,OAAO;MACLC,SAAS,EAAE,KADN;MAELC,OAAO,EAAE;QACPC,QAAQ,EAAE,KADH;QAEPlB,OAAO,EAAEU,UAFF,EAFJ,EAAP;;;EAOD;EAED,IACE,sCAAChB,WAAW,CAACyB,GAAb,EAAkBzB,WAAW,CAAC0B,IAA9B,EAAoC1B,WAAW,CAAC2B,GAAhD,kBACEvB,QAAQ,CAACgB,YADX,CADF,EAIE;IACA,OAAO;MACLE,SAAS,EAAE,SADN;MAELC,OAAO,EAAE;QACPH,YAAY,EAAEhB,QAAQ,CAACgB,YADhB;QAEPQ,MAAM,EAAE7B,WAAW,CAACK,QAAQ,CAACyB,eAAV,EAA2B,CAA3B,CAFZ;QAGPC,WAAW,EAAE/B,WAAW,CAACK,QAAQ,CAAC0B,WAAV,EAAuB,CAAvB,CAHjB;QAIPxB,OAAO,EAAEU,UAJF,EAFJ,EAAP;;;EASD;EAED,OAAOe,SAAP;AACD,CA/CM","names":["ensureIsArray","ensureIsInt","RollingType","getMetricOffsetsMap","isTimeComparison","rollingWindowOperator","formData","queryObject","columns","metricsMap","Array","from","values","keys","metrics","map","metric","label","columnsMap","Object","fromEntries","col","rolling_type","Cumsum","operation","options","operator","Sum","Mean","Std","window","rolling_periods","min_periods","undefined"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-chart-controls/src/operators/rollingWindowOperator.ts"],"sourcesContent":["/* eslint-disable camelcase */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitationsxw\n * under the License.\n */\nimport {\n  ensureIsArray,\n  ensureIsInt,\n  PostProcessingCum,\n  PostProcessingRolling,\n  RollingType,\n} from '@superset-ui/core';\nimport { getMetricOffsetsMap, isTimeComparison } from './utils';\nimport { PostProcessingFactory } from './types';\n\nexport const rollingWindowOperator: PostProcessingFactory<\n  PostProcessingRolling | PostProcessingCum\n> = (formData, queryObject) => {\n  let columns: (string | undefined)[];\n  if (isTimeComparison(formData, queryObject)) {\n    const metricsMap = getMetricOffsetsMap(formData, queryObject);\n    columns = [\n      ...Array.from(metricsMap.values()),\n      ...Array.from(metricsMap.keys()),\n    ];\n  } else {\n    columns = ensureIsArray(queryObject.metrics).map(metric => {\n      if (typeof metric === 'string') {\n        return metric;\n      }\n      return metric.label;\n    });\n  }\n  const columnsMap = Object.fromEntries(columns.map(col => [col, col]));\n\n  if (formData.rolling_type === RollingType.Cumsum) {\n    return {\n      operation: 'cum',\n      options: {\n        operator: 'sum',\n        columns: columnsMap,\n      },\n    };\n  }\n\n  if (\n    [RollingType.Sum, RollingType.Mean, RollingType.Std].includes(\n      formData.rolling_type,\n    )\n  ) {\n    return {\n      operation: 'rolling',\n      options: {\n        rolling_type: formData.rolling_type,\n        window: ensureIsInt(formData.rolling_periods, 1),\n        min_periods: ensureIsInt(formData.min_periods, 0),\n        columns: columnsMap,\n      },\n    };\n  }\n\n  return undefined;\n};\n"]},"metadata":{},"sourceType":"module"}