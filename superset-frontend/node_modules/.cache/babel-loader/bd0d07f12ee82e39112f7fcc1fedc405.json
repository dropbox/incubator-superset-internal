{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { FilterXSS, getDefaultWhiteList } from 'xss';\nimport { GenericDataType, getNumberFormatter } from '@superset-ui/core';\nimport DateWithFormatter from './DateWithFormatter';\nconst xss = new FilterXSS({\n  whiteList: {\n    ...getDefaultWhiteList(),\n    span: ['style', 'class', 'title'],\n    div: ['style', 'class'],\n    a: ['style', 'class', 'href', 'title', 'target'],\n    img: ['style', 'class', 'src', 'alt', 'title', 'width', 'height'],\n    video: [\n    'autoplay',\n    'controls',\n    'loop',\n    'preload',\n    'src',\n    'height',\n    'width',\n    'muted'] },\n\n\n  stripIgnoreTag: true,\n  css: false });\n\nfunction isProbablyHTML(text) {\n  return /<[^>]+>/.test(text);\n}\n/**\n * Format text for cell value.\n */\nfunction formatValue(formatter, value) {\n  // render undefined as empty string\n  if (value === undefined) {\n    return [false, ''];\n  }\n  // render null as `N/A`\n  if (value === null ||\n  // null values in temporal columns are wrapped in a Date object, so make sure we\n  // handle them here too\n  value instanceof DateWithFormatter && value.input === null) {\n    return [false, 'N/A'];\n  }\n  if (formatter) {\n    // in case percent metric can specify percent format in the future\n    return [false, formatter(value)];\n  }\n  if (typeof value === 'string') {\n    return isProbablyHTML(value) ? [true, xss.process(value)] : [false, value];\n  }\n  return [false, value.toString()];\n}\nexport function formatColumnValue(column, value) {\n  const { dataType, formatter, config = {} } = column;\n  const isNumber = dataType === GenericDataType.NUMERIC;\n  const smallNumberFormatter = config.d3SmallNumberFormat === undefined ?\n  formatter :\n  getNumberFormatter(config.d3SmallNumberFormat);\n  return formatValue(isNumber && typeof value === 'number' && Math.abs(value) < 1 ?\n  smallNumberFormatter :\n  formatter, value);\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA,SAASA,SAAT,EAAoBC,mBAApB,QAA+C,KAA/C;AACA,SAEEC,eAFF,EAGEC,kBAHF,QAIO,mBAJP;AAMA,OAAOC,iBAAP,MAA8B,qBAA9B;AAEA,MAAMC,GAAG,GAAG,IAAIL,SAAJ,CAAc;EACxBM,SAAS,EAAE;IACT,GAAGL,mBAAmB,EADb;IAETM,IAAI,EAAE,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,CAFG;IAGTC,GAAG,EAAE,CAAC,OAAD,EAAU,OAAV,CAHI;IAITC,CAAC,EAAE,CAAC,OAAD,EAAU,OAAV,EAAmB,MAAnB,EAA2B,OAA3B,EAAoC,QAApC,CAJM;IAKTC,GAAG,EAAE,CAAC,OAAD,EAAU,OAAV,EAAmB,KAAnB,EAA0B,KAA1B,EAAiC,OAAjC,EAA0C,OAA1C,EAAmD,QAAnD,CALI;IAMTC,KAAK,EAAE;IACL,UADK;IAEL,UAFK;IAGL,MAHK;IAIL,SAJK;IAKL,KALK;IAML,QANK;IAOL,OAPK;IAQL,OARK,CANE,EADa;;;EAkBxBC,cAAc,EAAE,IAlBQ;EAmBxBC,GAAG,EAAE,KAnBmB,EAAd,CAAZ;;AAsBA,SAASC,cAAT,CAAwBC,IAAxB,EAAoC;EAClC,OAAO,UAAUC,IAAV,CAAeD,IAAf,CAAP;AACD;AAED;;;AAGA,SAASE,WAAT,CACEC,SADF,EAEEC,KAFF,EAEwB;EAEtB;EACA,IAAIA,KAAK,KAAKC,SAAd,EAAyB;IACvB,OAAO,CAAC,KAAD,EAAQ,EAAR,CAAP;EACD;EACD;EACA,IACED,KAAK,KAAK,IAAV;EACA;EACA;EACCA,KAAK,YAAYf,iBAAjB,IAAsCe,KAAK,CAACE,KAAN,KAAgB,IAJzD,EAKE;IACA,OAAO,CAAC,KAAD,EAAQ,KAAR,CAAP;EACD;EACD,IAAIH,SAAJ,EAAe;IACb;IACA,OAAO,CAAC,KAAD,EAAQA,SAAS,CAACC,KAAD,CAAjB,CAAP;EACD;EACD,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;IAC7B,OAAOL,cAAc,CAACK,KAAD,CAAd,GAAwB,CAAC,IAAD,EAAOd,GAAG,CAACiB,OAAJ,CAAYH,KAAZ,CAAP,CAAxB,GAAqD,CAAC,KAAD,EAAQA,KAAR,CAA5D;EACD;EACD,OAAO,CAAC,KAAD,EAAQA,KAAK,CAACI,QAAN,EAAR,CAAP;AACD;AAED,OAAM,SAAUC,iBAAV,CACJC,MADI,EAEJN,KAFI,EAEkB;EAEtB,MAAM,EAAEO,QAAF,EAAYR,SAAZ,EAAuBS,MAAM,GAAG,EAAhC,KAAuCF,MAA7C;EACA,MAAMG,QAAQ,GAAGF,QAAQ,KAAKxB,eAAe,CAAC2B,OAA9C;EACA,MAAMC,oBAAoB,GACxBH,MAAM,CAACI,mBAAP,KAA+BX,SAA/B;EACIF,SADJ;EAEIf,kBAAkB,CAACwB,MAAM,CAACI,mBAAR,CAHxB;EAIA,OAAOd,WAAW,CAChBW,QAAQ,IAAI,OAAOT,KAAP,KAAiB,QAA7B,IAAyCa,IAAI,CAACC,GAAL,CAASd,KAAT,IAAkB,CAA3D;EACIW,oBADJ;EAEIZ,SAHY,EAIhBC,KAJgB,CAAlB;AAMD","names":["FilterXSS","getDefaultWhiteList","GenericDataType","getNumberFormatter","DateWithFormatter","xss","whiteList","span","div","a","img","video","stripIgnoreTag","css","isProbablyHTML","text","test","formatValue","formatter","value","undefined","input","process","toString","formatColumnValue","column","dataType","config","isNumber","NUMERIC","smallNumberFormatter","d3SmallNumberFormat","Math","abs"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/plugin-chart-table/src/utils/formatValue.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { FilterXSS, getDefaultWhiteList } from 'xss';\nimport {\n  DataRecordValue,\n  GenericDataType,\n  getNumberFormatter,\n} from '@superset-ui/core';\nimport { DataColumnMeta } from '../types';\nimport DateWithFormatter from './DateWithFormatter';\n\nconst xss = new FilterXSS({\n  whiteList: {\n    ...getDefaultWhiteList(),\n    span: ['style', 'class', 'title'],\n    div: ['style', 'class'],\n    a: ['style', 'class', 'href', 'title', 'target'],\n    img: ['style', 'class', 'src', 'alt', 'title', 'width', 'height'],\n    video: [\n      'autoplay',\n      'controls',\n      'loop',\n      'preload',\n      'src',\n      'height',\n      'width',\n      'muted',\n    ],\n  },\n  stripIgnoreTag: true,\n  css: false,\n});\n\nfunction isProbablyHTML(text: string) {\n  return /<[^>]+>/.test(text);\n}\n\n/**\n * Format text for cell value.\n */\nfunction formatValue(\n  formatter: DataColumnMeta['formatter'],\n  value: DataRecordValue,\n): [boolean, string] {\n  // render undefined as empty string\n  if (value === undefined) {\n    return [false, ''];\n  }\n  // render null as `N/A`\n  if (\n    value === null ||\n    // null values in temporal columns are wrapped in a Date object, so make sure we\n    // handle them here too\n    (value instanceof DateWithFormatter && value.input === null)\n  ) {\n    return [false, 'N/A'];\n  }\n  if (formatter) {\n    // in case percent metric can specify percent format in the future\n    return [false, formatter(value as number)];\n  }\n  if (typeof value === 'string') {\n    return isProbablyHTML(value) ? [true, xss.process(value)] : [false, value];\n  }\n  return [false, value.toString()];\n}\n\nexport function formatColumnValue(\n  column: DataColumnMeta,\n  value: DataRecordValue,\n) {\n  const { dataType, formatter, config = {} } = column;\n  const isNumber = dataType === GenericDataType.NUMERIC;\n  const smallNumberFormatter =\n    config.d3SmallNumberFormat === undefined\n      ? formatter\n      : getNumberFormatter(config.d3SmallNumberFormat);\n  return formatValue(\n    isNumber && typeof value === 'number' && Math.abs(value) < 1\n      ? smallNumberFormatter\n      : formatter,\n    value,\n  );\n}\n"]},"metadata":{},"sourceType":"module"}