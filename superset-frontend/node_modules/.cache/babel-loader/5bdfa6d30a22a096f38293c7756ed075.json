{"ast":null,"code":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { isRequired, Plugin } from '../..';\nimport getChartMetadataRegistry from '../registries/ChartMetadataRegistrySingleton';\nimport getChartBuildQueryRegistry from '../registries/ChartBuildQueryRegistrySingleton';\nimport getChartComponentRegistry from '../registries/ChartComponentRegistrySingleton';\nimport getChartControlPanelRegistry from '../registries/ChartControlPanelRegistrySingleton';\nimport getChartTransformPropsRegistry from '../registries/ChartTransformPropsRegistrySingleton';\nfunction IDENTITY(x) {\n  return x;\n}\nconst EMPTY = {};\n/**\n * Loaders of the form `() => import('foo')` may return esmodules\n * which require the value to be extracted as `module.default`\n * */\nfunction sanitizeLoader(loader) {\n  return () => {\n    const loaded = loader();\n    return loaded instanceof Promise ?\n    loaded.then((module) => 'default' in module && module.default || module) :\n    loaded;\n  };\n}\nexport default class ChartPlugin extends Plugin {\n\n\n\n\n\n  constructor(config) {\n    super();this.controlPanel = void 0;this.metadata = void 0;this.loadBuildQuery = void 0;this.loadTransformProps = void 0;this.loadChart = void 0;\n    const { metadata, buildQuery, loadBuildQuery, transformProps = IDENTITY, loadTransformProps, Chart, loadChart, controlPanel = EMPTY } = config;\n    this.controlPanel = controlPanel;\n    this.metadata = metadata;\n    this.loadBuildQuery =\n    loadBuildQuery && sanitizeLoader(loadBuildQuery) ||\n    buildQuery && sanitizeLoader(() => buildQuery) ||\n    undefined;\n    this.loadTransformProps = sanitizeLoader(loadTransformProps != null ? loadTransformProps : () => transformProps);\n    if (loadChart) {\n      this.loadChart = sanitizeLoader(loadChart);\n    } else\n    if (Chart) {\n      this.loadChart = () => Chart;\n    } else\n    {\n      throw new Error('Chart or loadChart is required');\n    }\n  }\n  register() {\n    const key = this.config.key || isRequired('config.key');\n    getChartMetadataRegistry().registerValue(key, this.metadata);\n    getChartComponentRegistry().registerLoader(key, this.loadChart);\n    getChartControlPanelRegistry().registerValue(key, this.controlPanel);\n    getChartTransformPropsRegistry().registerLoader(key, this.loadTransformProps);\n    if (this.loadBuildQuery) {\n      getChartBuildQueryRegistry().registerLoader(key, this.loadBuildQuery);\n    }\n    return this;\n  }\n  unregister() {\n    const key = this.config.key || isRequired('config.key');\n    getChartMetadataRegistry().remove(key);\n    getChartComponentRegistry().remove(key);\n    getChartControlPanelRegistry().remove(key);\n    getChartTransformPropsRegistry().remove(key);\n    getChartBuildQueryRegistry().remove(key);\n    return this;\n  }\n  configure(config, replace) {\n    super.configure(config, replace);\n    return this;\n  }}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAoBA,SAASA,UAAT,EAAqBC,MAArB,QAAkD,OAAlD;AAEA,OAAOC,wBAAP,MAAqC,8CAArC;AACA,OAAOC,0BAAP,MAAuC,gDAAvC;AACA,OAAOC,yBAAP,MAAsC,+CAAtC;AACA,OAAOC,4BAAP,MAAyC,kDAAzC;AACA,OAAOC,8BAAP,MAA2C,oDAA3C;AAKA,SAASC,QAAT,CAAqBC,CAArB,EAAyB;EACvB,OAAOA,CAAP;AACD;AAED,MAAMC,KAAK,GAAG,EAAd;AAgCA;;;;AAIA,SAASC,cAAT,CACEC,MADF,EACyD;EAEvD,OAAO,MAAK;IACV,MAAMC,MAAM,GAAGD,MAAM,EAArB;IAEA,OAAOC,MAAM,YAAYC,OAAlB;IACFD,MAAM,CAACE,IAAP,CACC,OAAM,KAAK,aAAaC,MAAb,IAAuBA,MAAM,CAACC,OAA/B,IAA2CD,MADtD,CADE;IAIFH,MAJL;EAKD,CARD;AASD;AAED,eAAc,MAAOK,WAAP,SAGJhB,MAHI,CAGE;;;;;;EAWdiB,YAAYC,MAAZ,EAAsD;IACpD,QADoD,KAVtDC,YAUsD,eARtDC,QAQsD,eANtDC,cAMsD,eAJtDC,kBAIsD,eAFtDC,SAEsD;IAEpD,MAAM,EACJH,QADI,EAEJI,UAFI,EAGJH,cAHI,EAIJI,cAAc,GAAGnB,QAJb,EAKJgB,kBALI,EAMJI,KANI,EAOJH,SAPI,EAQJJ,YAAY,GAAGX,KARX,KASFU,MATJ;IAUA,KAAKC,YAAL,GAAoBA,YAApB;IACA,KAAKC,QAAL,GAAgBA,QAAhB;IACA,KAAKC,cAAL;IACGA,cAAc,IAAIZ,cAAc,CAACY,cAAD,CAAjC;IACCG,UAAU,IAAIf,cAAc,CAAC,MAAMe,UAAP,CAD7B;IAEAG,SAHF;IAIA,KAAKL,kBAAL,GAA0Bb,cAAc,CACtCa,kBADsC,WACtCA,kBADsC,GACf,MAAMG,cADS,CAAxC;IAIA,IAAIF,SAAJ,EAAe;MACb,KAAKA,SAAL,GAAiBd,cAAc,CAAYc,SAAZ,CAA/B;IACD,CAFD;IAEO,IAAIG,KAAJ,EAAW;MAChB,KAAKH,SAAL,GAAiB,MAAMG,KAAvB;IACD,CAFM;IAEA;MACL,MAAM,IAAIE,KAAJ,CAAU,gCAAV,CAAN;IACD;EACF;EAEDC,QAAQ;IACN,MAAMC,GAAG,GAAW,KAAKZ,MAAL,CAAYY,GAAZ,IAAmB/B,UAAU,CAAC,YAAD,CAAjD;IACAE,wBAAwB,GAAG8B,aAA3B,CAAyCD,GAAzC,EAA8C,KAAKV,QAAnD;IACAjB,yBAAyB,GAAG6B,cAA5B,CAA2CF,GAA3C,EAAgD,KAAKP,SAArD;IACAnB,4BAA4B,GAAG2B,aAA/B,CAA6CD,GAA7C,EAAkD,KAAKX,YAAvD;IACAd,8BAA8B,GAAG2B,cAAjC,CACEF,GADF,EAEE,KAAKR,kBAFP;IAIA,IAAI,KAAKD,cAAT,EAAyB;MACvBnB,0BAA0B,GAAG8B,cAA7B,CAA4CF,GAA5C,EAAiD,KAAKT,cAAtD;IACD;IACD,OAAO,IAAP;EACD;EAEDY,UAAU;IACR,MAAMH,GAAG,GAAW,KAAKZ,MAAL,CAAYY,GAAZ,IAAmB/B,UAAU,CAAC,YAAD,CAAjD;IACAE,wBAAwB,GAAGiC,MAA3B,CAAkCJ,GAAlC;IACA3B,yBAAyB,GAAG+B,MAA5B,CAAmCJ,GAAnC;IACA1B,4BAA4B,GAAG8B,MAA/B,CAAsCJ,GAAtC;IACAzB,8BAA8B,GAAG6B,MAAjC,CAAwCJ,GAAxC;IACA5B,0BAA0B,GAAGgC,MAA7B,CAAoCJ,GAApC;IACA,OAAO,IAAP;EACD;EAEDK,SAAS,CAACjB,MAAD,EAAqCkB,OAArC,EAAsD;IAC7D,MAAMD,SAAN,CAAgBjB,MAAhB,EAAwBkB,OAAxB;IAEA,OAAO,IAAP;EACD,CAvEa","names":["isRequired","Plugin","getChartMetadataRegistry","getChartBuildQueryRegistry","getChartComponentRegistry","getChartControlPanelRegistry","getChartTransformPropsRegistry","IDENTITY","x","EMPTY","sanitizeLoader","loader","loaded","Promise","then","module","default","ChartPlugin","constructor","config","controlPanel","metadata","loadBuildQuery","loadTransformProps","loadChart","buildQuery","transformProps","Chart","undefined","Error","register","key","registerValue","registerLoader","unregister","remove","configure","replace"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/packages/superset-ui-core/src/chart/models/ChartPlugin.ts"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { ComponentType } from 'react';\nimport { isRequired, Plugin, QueryFormData } from '../..';\nimport ChartMetadata from './ChartMetadata';\nimport getChartMetadataRegistry from '../registries/ChartMetadataRegistrySingleton';\nimport getChartBuildQueryRegistry from '../registries/ChartBuildQueryRegistrySingleton';\nimport getChartComponentRegistry from '../registries/ChartComponentRegistrySingleton';\nimport getChartControlPanelRegistry from '../registries/ChartControlPanelRegistrySingleton';\nimport getChartTransformPropsRegistry from '../registries/ChartTransformPropsRegistrySingleton';\nimport { BuildQueryFunction, TransformProps } from '../types/TransformFunction';\nimport { ChartControlPanel } from './ChartControlPanel';\nimport { ChartProps } from '..';\n\nfunction IDENTITY<T>(x: T) {\n  return x;\n}\n\nconst EMPTY = {};\n\nexport type PromiseOrValue<T> = Promise<T> | T;\nexport type PromiseOrValueLoader<T> = () => PromiseOrValue<T>;\nexport type ChartType = ComponentType<any>;\ntype ValueOrModuleWithValue<T> = T | { default: T };\n\ninterface ChartPluginConfig<\n  FormData extends QueryFormData = QueryFormData,\n  Props extends ChartProps = ChartProps,\n> {\n  metadata: ChartMetadata;\n  /** Use buildQuery for immediate value. For lazy-loading, use loadBuildQuery. */\n  buildQuery?: BuildQueryFunction<FormData>;\n  /** Use loadBuildQuery for dynamic import (lazy-loading) */\n  loadBuildQuery?: PromiseOrValueLoader<\n    ValueOrModuleWithValue<BuildQueryFunction<FormData>>\n  >;\n  /** Use transformProps for immediate value. For lazy-loading, use loadTransformProps.  */\n  transformProps?: TransformProps<Props>;\n  /** Use loadTransformProps for dynamic import (lazy-loading) */\n  loadTransformProps?: PromiseOrValueLoader<\n    ValueOrModuleWithValue<TransformProps<Props>>\n  >;\n  /** Use Chart for immediate value. For lazy-loading, use loadChart. */\n  Chart?: ChartType;\n  /** Use loadChart for dynamic import (lazy-loading) */\n  loadChart?: PromiseOrValueLoader<ValueOrModuleWithValue<ChartType>>;\n  /** Control panel configuration object */\n  controlPanel?: ChartControlPanel;\n}\n\n/**\n * Loaders of the form `() => import('foo')` may return esmodules\n * which require the value to be extracted as `module.default`\n * */\nfunction sanitizeLoader<T>(\n  loader: PromiseOrValueLoader<ValueOrModuleWithValue<T>>,\n): PromiseOrValueLoader<T> {\n  return () => {\n    const loaded = loader();\n\n    return loaded instanceof Promise\n      ? (loaded.then(\n          module => ('default' in module && module.default) || module,\n        ) as Promise<T>)\n      : (loaded as T);\n  };\n}\n\nexport default class ChartPlugin<\n  FormData extends QueryFormData = QueryFormData,\n  Props extends ChartProps = ChartProps,\n> extends Plugin {\n  controlPanel: ChartControlPanel;\n\n  metadata: ChartMetadata;\n\n  loadBuildQuery?: PromiseOrValueLoader<BuildQueryFunction<FormData>>;\n\n  loadTransformProps: PromiseOrValueLoader<TransformProps<Props>>;\n\n  loadChart: PromiseOrValueLoader<ChartType>;\n\n  constructor(config: ChartPluginConfig<FormData, Props>) {\n    super();\n    const {\n      metadata,\n      buildQuery,\n      loadBuildQuery,\n      transformProps = IDENTITY,\n      loadTransformProps,\n      Chart,\n      loadChart,\n      controlPanel = EMPTY,\n    } = config;\n    this.controlPanel = controlPanel;\n    this.metadata = metadata;\n    this.loadBuildQuery =\n      (loadBuildQuery && sanitizeLoader(loadBuildQuery)) ||\n      (buildQuery && sanitizeLoader(() => buildQuery)) ||\n      undefined;\n    this.loadTransformProps = sanitizeLoader(\n      loadTransformProps ?? (() => transformProps),\n    );\n\n    if (loadChart) {\n      this.loadChart = sanitizeLoader<ChartType>(loadChart);\n    } else if (Chart) {\n      this.loadChart = () => Chart;\n    } else {\n      throw new Error('Chart or loadChart is required');\n    }\n  }\n\n  register() {\n    const key: string = this.config.key || isRequired('config.key');\n    getChartMetadataRegistry().registerValue(key, this.metadata);\n    getChartComponentRegistry().registerLoader(key, this.loadChart);\n    getChartControlPanelRegistry().registerValue(key, this.controlPanel);\n    getChartTransformPropsRegistry().registerLoader(\n      key,\n      this.loadTransformProps,\n    );\n    if (this.loadBuildQuery) {\n      getChartBuildQueryRegistry().registerLoader(key, this.loadBuildQuery);\n    }\n    return this;\n  }\n\n  unregister() {\n    const key: string = this.config.key || isRequired('config.key');\n    getChartMetadataRegistry().remove(key);\n    getChartComponentRegistry().remove(key);\n    getChartControlPanelRegistry().remove(key);\n    getChartTransformPropsRegistry().remove(key);\n    getChartBuildQueryRegistry().remove(key);\n    return this;\n  }\n\n  configure(config: { [key: string]: unknown }, replace?: boolean) {\n    super.configure(config, replace);\n\n    return this;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}