{"ast":null,"code":"export var DatasourceType;\n(function (DatasourceType) {\n  DatasourceType[\"Table\"] = \"table\";\n  DatasourceType[\"Query\"] = \"query\";\n  DatasourceType[\"Dataset\"] = \"dataset\";\n  DatasourceType[\"SlTable\"] = \"sl_table\";\n  DatasourceType[\"SavedQuery\"] = \"saved_query\";\n})(DatasourceType || (DatasourceType = {}));\nexport const DEFAULT_METRICS = [\n{\n  metric_name: 'COUNT(*)',\n  expression: 'COUNT(*)' }];\n\n\nexport default {};","map":{"version":3,"mappings":"AAqBA,WAAYA,cAAZ;AAAA,WAAYA,cAAZ,EAA0B;EACxBA;EACAA;EACAA;EACAA;EACAA;AACD,CAND,EAAYA,cAAc,KAAdA,cAAc,MAA1B;AA2BA,OAAO,MAAMC,eAAe,GAAa;AACvC;EACEC,WAAW,EAAE,UADf;EAEEC,UAAU,EAAE,UAFd,EADuC,CAAlC;;;AAOP,eAAe,EAAf","names":["DatasourceType","DEFAULT_METRICS","metric_name","expression"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/packages/superset-ui-core/src/query/types/Datasource.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { Column } from './Column';\nimport { Metric } from './Metric';\n\nexport enum DatasourceType {\n  Table = 'table',\n  Query = 'query',\n  Dataset = 'dataset',\n  SlTable = 'sl_table',\n  SavedQuery = 'saved_query',\n}\n\n/**\n * Datasource metadata.\n */\nexport interface Datasource {\n  id: number;\n  name: string;\n  type: DatasourceType;\n  columns: Column[];\n  metrics: Metric[];\n  description?: string;\n  // key is column names (labels)\n  columnFormats?: {\n    [key: string]: string;\n  };\n  verboseMap?: {\n    [key: string]: string;\n  };\n}\n\nexport const DEFAULT_METRICS: Metric[] = [\n  {\n    metric_name: 'COUNT(*)',\n    expression: 'COUNT(*)',\n  },\n];\n\nexport default {};\n"]},"metadata":{},"sourceType":"module"}