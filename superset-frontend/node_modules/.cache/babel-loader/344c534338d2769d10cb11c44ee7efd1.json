{"ast":null,"code":"import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ensureIsArray, t, validateNonEmpty } from '@superset-ui/core';\nimport { sections, sharedControls, getStandardizedControls } from '@superset-ui/chart-controls';\nimport { showLegend, showControls, xAxisLabel, bottomMargin, xTicksLayout, showBarValue, barStacked, reduceXTicks, yAxisLabel, yAxisShowMinmax, yAxisBounds, richTooltip } from '../NVD3Controls';\nconst config = {\n  controlPanelSections: [\n  sections.legacyRegularTime,\n  {\n    label: t('Query'),\n    expanded: true,\n    controlSetRows: [\n    ['metrics'],\n    ['adhoc_filters'],\n    ['groupby'],\n    ['columns'],\n    ['row_limit'],\n    ['timeseries_limit_metric'],\n    ['order_desc'],\n    [\n    {\n      name: 'contribution',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Contribution'),\n        default: false,\n        description: t('Compute the contribution to the total') } }]] },\n\n\n\n\n\n  {\n    label: t('Chart Options'),\n    expanded: true,\n    controlSetRows: [\n    ['color_scheme'],\n    [showLegend],\n    [showBarValue],\n    [richTooltip],\n    [barStacked],\n    [\n    {\n      name: 'order_bars',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Sort Bars'),\n        default: false,\n        renderTrigger: true,\n        description: t('Sort bars by x labels.') } }],\n\n\n\n    ['y_axis_format'],\n    [yAxisLabel],\n    [showControls, null],\n    [yAxisShowMinmax],\n    [yAxisBounds]] },\n\n\n  {\n    label: t('X Axis'),\n    expanded: true,\n    controlSetRows: [\n    [xAxisLabel],\n    [bottomMargin],\n    [xTicksLayout],\n    [reduceXTicks]] }],\n\n\n\n  controlOverrides: {\n    groupby: {\n      validators: [validateNonEmpty],\n      mapStateToProps: (state, controlState) => {\n        const groupbyProps = (sharedControls.groupby.mapStateToProps == null ? void 0 : sharedControls.groupby.mapStateToProps(state, controlState)) || {};\n        groupbyProps.canDropValue = (column) => {var _context, _state$controls, _state$controls$colum;return !_includesInstanceProperty(_context = ensureIsArray((_state$controls = state.controls) == null ? void 0 : (_state$controls$colum = _state$controls.columns) == null ? void 0 : _state$controls$colum.value)).call(_context, column.column_name);};\n        return groupbyProps;\n      },\n      rerender: ['columns'] },\n\n    columns: {\n      label: t('Breakdowns'),\n      description: t('Defines how each series is broken down'),\n      mapStateToProps: (state, controlState) => {\n        const columnsProps = (sharedControls.columns.mapStateToProps == null ? void 0 : sharedControls.columns.mapStateToProps(state, controlState)) || {};\n        columnsProps.canDropValue = (column) => {var _context2, _state$controls2, _state$controls2$grou;return !_includesInstanceProperty(_context2 = ensureIsArray((_state$controls2 = state.controls) == null ? void 0 : (_state$controls2$grou = _state$controls2.groupby) == null ? void 0 : _state$controls2$grou.value)).call(_context2, column.column_name);};\n        return columnsProps;\n      },\n      rerender: ['groupby'] } },\n\n\n  formDataOverrides: (formData) => {\n    const columns = getStandardizedControls().controls.columns.filter((col) => {var _context3;return !_includesInstanceProperty(_context3 = ensureIsArray(formData.groupby)).call(_context3, col);});\n    getStandardizedControls().controls.columns =\n    getStandardizedControls().controls.columns.filter((col) => !_includesInstanceProperty(columns).call(columns, col));\n    return {\n      ...formData,\n      metrics: getStandardizedControls().popAllMetrics(),\n      columns };\n\n  } };\n\nexport default config;","map":{"version":3,"mappings":"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","names":["ensureIsArray","t","validateNonEmpty","sections","sharedControls","getStandardizedControls","showLegend","showControls","xAxisLabel","bottomMargin","xTicksLayout","showBarValue","barStacked","reduceXTicks","yAxisLabel","yAxisShowMinmax","yAxisBounds","richTooltip","config","controlPanelSections","legacyRegularTime","label","expanded","controlSetRows","name","type","default","description","renderTrigger","controlOverrides","groupby","validators","mapStateToProps","state","controlState","groupbyProps","canDropValue","column","controls","columns","value","column_name","rerender","columnsProps","formDataOverrides","filter","formData","col","metrics","popAllMetrics"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/plugins/legacy-preset-chart-nvd3/src/DistBar/controlPanel.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ensureIsArray, t, validateNonEmpty } from '@superset-ui/core';\nimport {\n  ColumnMeta,\n  ControlPanelConfig,\n  sections,\n  sharedControls,\n  getStandardizedControls,\n} from '@superset-ui/chart-controls';\nimport {\n  showLegend,\n  showControls,\n  xAxisLabel,\n  bottomMargin,\n  xTicksLayout,\n  showBarValue,\n  barStacked,\n  reduceXTicks,\n  yAxisLabel,\n  yAxisShowMinmax,\n  yAxisBounds,\n  richTooltip,\n} from '../NVD3Controls';\n\nconst config: ControlPanelConfig = {\n  controlPanelSections: [\n    sections.legacyRegularTime,\n    {\n      label: t('Query'),\n      expanded: true,\n      controlSetRows: [\n        ['metrics'],\n        ['adhoc_filters'],\n        ['groupby'],\n        ['columns'],\n        ['row_limit'],\n        ['timeseries_limit_metric'],\n        ['order_desc'],\n        [\n          {\n            name: 'contribution',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Contribution'),\n              default: false,\n              description: t('Compute the contribution to the total'),\n            },\n          },\n        ],\n      ],\n    },\n    {\n      label: t('Chart Options'),\n      expanded: true,\n      controlSetRows: [\n        ['color_scheme'],\n        [showLegend],\n        [showBarValue],\n        [richTooltip],\n        [barStacked],\n        [\n          {\n            name: 'order_bars',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Sort Bars'),\n              default: false,\n              renderTrigger: true,\n              description: t('Sort bars by x labels.'),\n            },\n          },\n        ],\n        ['y_axis_format'],\n        [yAxisLabel],\n        [showControls, null],\n        [yAxisShowMinmax],\n        [yAxisBounds],\n      ],\n    },\n    {\n      label: t('X Axis'),\n      expanded: true,\n      controlSetRows: [\n        [xAxisLabel],\n        [bottomMargin],\n        [xTicksLayout],\n        [reduceXTicks],\n      ],\n    },\n  ],\n  controlOverrides: {\n    groupby: {\n      validators: [validateNonEmpty],\n      mapStateToProps: (state, controlState) => {\n        const groupbyProps =\n          sharedControls.groupby.mapStateToProps?.(state, controlState) || {};\n        groupbyProps.canDropValue = (column: ColumnMeta) =>\n          !ensureIsArray(state.controls?.columns?.value).includes(\n            column.column_name,\n          );\n        return groupbyProps;\n      },\n      rerender: ['columns'],\n    },\n    columns: {\n      label: t('Breakdowns'),\n      description: t('Defines how each series is broken down'),\n      mapStateToProps: (state, controlState) => {\n        const columnsProps =\n          sharedControls.columns.mapStateToProps?.(state, controlState) || {};\n        columnsProps.canDropValue = (column: ColumnMeta) =>\n          !ensureIsArray(state.controls?.groupby?.value).includes(\n            column.column_name,\n          );\n        return columnsProps;\n      },\n      rerender: ['groupby'],\n    },\n  },\n  formDataOverrides: formData => {\n    const columns = getStandardizedControls().controls.columns.filter(\n      col => !ensureIsArray(formData.groupby).includes(col),\n    );\n    getStandardizedControls().controls.columns =\n      getStandardizedControls().controls.columns.filter(\n        col => !columns.includes(col),\n      );\n\n    return {\n      ...formData,\n      metrics: getStandardizedControls().popAllMetrics(),\n      columns,\n    };\n  },\n};\n\nexport default config;\n"]},"metadata":{},"sourceType":"module"}