{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\";import _kebabCase from \"lodash/kebabCase\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint camelcase: 0 */\nimport React, { useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport { ensureIsArray, t, styled, getChartControlPanelRegistry, DatasourceType, css, useTheme, isDefined, NO_TIME_RANGE, usePrevious } from '@superset-ui/core';\nimport { isTemporalColumn, sections } from '@superset-ui/chart-controls';\nimport { useSelector } from 'react-redux';\nimport { rgba } from 'emotion-rgba';\n\nimport Collapse from 'src/components/Collapse';\nimport Tabs from 'src/components/Tabs';\nimport { PluginContext } from 'src/components/DynamicPlugins';\nimport Loading from 'src/components/Loading';\nimport Modal from 'src/components/Modal';\nimport { getSectionsToRender } from 'src/explore/controlUtils';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport ControlRow from './ControlRow';\nimport Control from './Control';\nimport { ExploreAlert } from './ExploreAlert';\nimport { RunQueryButton } from './RunQueryButton';\nimport { Operators } from '../constants';\nimport { CLAUSES } from './controls/FilterControl/types';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst { confirm } = Modal;\nconst iconStyles = css`\n  &.anticon {\n    font-size: unset;\n    .anticon {\n      line-height: unset;\n      vertical-align: unset;\n    }\n  }\n`;\nconst actionButtonsContainerStyles = (theme) => css`\n  display: flex;\n  position: sticky;\n  bottom: 0;\n  flex-direction: column;\n  align-items: center;\n  padding: ${theme.gridUnit * 4}px;\n  z-index: 999;\n  background: linear-gradient(\n    ${rgba(theme.colors.grayscale.light5, 0)},\n    ${theme.colors.grayscale.light5} ${theme.opacity.mediumLight}\n  );\n\n  & > button {\n    min-width: 156px;\n  }\n`;\nconst Styles = styled.div`\n  position: relative;\n  height: 100%;\n  width: 100%;\n\n  // Resizable add overflow-y: auto as a style to this div\n  // To override it, we need to use !important\n  overflow: visible !important;\n  #controlSections {\n    height: 100%;\n    overflow: visible;\n  }\n  .nav-tabs {\n    flex: 0 0 1;\n  }\n  .tab-content {\n    overflow: auto;\n    flex: 1 1 100%;\n  }\n  .Select__menu {\n    max-width: 100%;\n  }\n  .type-label {\n    margin-right: ${(_ref) => {let { theme } = _ref;return theme.gridUnit * 3;}}px;\n    width: ${(_ref2) => {let { theme } = _ref2;return theme.gridUnit * 7;}}px;\n    display: inline-block;\n    text-align: center;\n    font-weight: ${(_ref3) => {let { theme } = _ref3;return theme.typography.weights.bold;}};\n  }\n`;\nconst ControlPanelsTabs = styled(Tabs)`\n  ${(_ref4) => {let { theme, fullWidth } = _ref4;return css`\n    height: 100%;\n    overflow: visible;\n    .ant-tabs-nav {\n      margin-bottom: 0;\n    }\n    .ant-tabs-nav-list {\n      width: ${fullWidth ? '100%' : '50%'};\n    }\n    .ant-tabs-tabpane {\n      height: 100%;\n    }\n    .ant-tabs-content-holder {\n      padding-top: ${theme.gridUnit * 4}px;\n    }\n\n    .ant-collapse-ghost > .ant-collapse-item {\n      &:not(:last-child) {\n        border-bottom: 1px solid ${theme.colors.grayscale.light3};\n      }\n\n      & > .ant-collapse-header {\n        font-size: ${theme.typography.sizes.s}px;\n      }\n\n      & > .ant-collapse-content > .ant-collapse-content-box {\n        padding-bottom: 0;\n        font-size: ${theme.typography.sizes.s}px;\n      }\n    }\n  `;}}\n`;\nconst isTimeSection = (section) => !!section.label && (\nsections.legacyRegularTime.label === section.label ||\nsections.legacyTimeseriesTime.label === section.label);\nconst hasTimeColumn = (datasource) => {var _datasource$columns;return datasource == null ? void 0 : (_datasource$columns = datasource.columns) == null ? void 0 : _datasource$columns.some((c) => c.is_dttm);};\nconst sectionsToExpand = (sections, datasource) =>\n// avoid expanding time section if datasource doesn't include time column\nsections.reduce((acc, section) => (section.expanded || !section.label) && (\n!isTimeSection(section) || hasTimeColumn(datasource)) ?\n[...acc, String(section.label)] :\nacc, []);\nfunction getState(vizType, datasource, datasourceType) {\n  const querySections = [];\n  const customizeSections = [];\n  getSectionsToRender(vizType, datasourceType).forEach((section) => {\n    // if at least one control in the section is not `renderTrigger`\n    // or asks to be displayed at the Data tab\n    if (section.tabOverride === 'data' ||\n    section.controlSetRows.some((rows) => rows.some((control) => control &&\n    typeof control === 'object' &&\n    'config' in control &&\n    control.config && (\n    !control.config.renderTrigger ||\n    control.config.tabOverride === 'data')))) {\n      querySections.push(section);\n    } else\n    if (section.controlSetRows.length > 0) {\n      customizeSections.push(section);\n    }\n  });\n  const expandedQuerySections = sectionsToExpand(querySections, datasource);\n  const expandedCustomizeSections = sectionsToExpand(customizeSections, datasource);\n  return {\n    expandedQuerySections,\n    expandedCustomizeSections,\n    querySections,\n    customizeSections };\n\n}\nfunction useResetOnChangeRef(initialValue, resetOnChangeValue) {\n  const value = useRef(initialValue());\n  const prevResetOnChangeValue = useRef(resetOnChangeValue);\n  if (prevResetOnChangeValue.current !== resetOnChangeValue) {\n    value.current = initialValue();\n    prevResetOnChangeValue.current = resetOnChangeValue;\n  }\n  return value;\n}__signature__(useResetOnChangeRef, \"useRef{value}\\nuseRef{prevResetOnChangeValue}\");\nexport const ControlPanelsContainer = (props) => {var _props$exploreState$d3, _props$exploreState$d4;\n  const { colors } = useTheme();\n  const pluginContext = useContext(PluginContext);\n  const prevState = usePrevious(props.exploreState);\n  const prevDatasource = usePrevious(props.exploreState.datasource);\n  const prevChartStatus = usePrevious(props.chart.chartStatus);\n  const [showDatasourceAlert, setShowDatasourceAlert] = useState(false);\n  const containerRef = useRef(null);\n  const controlsTransferred = useSelector((state) => state.explore.controlsTransferred);\n  const defaultTimeFilter = useSelector((state) => {var _state$common, _state$common$conf;return (_state$common = state.common) == null ? void 0 : (_state$common$conf = _state$common.conf) == null ? void 0 : _state$common$conf.DEFAULT_TIME_FILTER;});\n  const { form_data, actions } = props;\n  const { setControlValue } = actions;\n  const { x_axis, adhoc_filters } = form_data;\n  const previousXAxis = usePrevious(x_axis);\n  useEffect(() => {\n    if (x_axis &&\n    x_axis !== previousXAxis &&\n    isTemporalColumn(x_axis, props.exploreState.datasource)) {\n      const noFilter = !adhoc_filters ||\n      !adhoc_filters.find((filter) => filter.expressionType === 'SIMPLE' &&\n      filter.operator === Operators.TEMPORAL_RANGE &&\n      filter.subject === x_axis);\n      if (noFilter) {\n        confirm({\n          title: t('The X-axis is not on the filters list'),\n          content: t(`The X-axis is not on the filters list which will prevent it from being used in\n            time range filters in dashboards. Would you like to add it to the filters list?`),\n          onOk: () => {\n            setControlValue('adhoc_filters', [\n            ...(adhoc_filters || []),\n            {\n              clause: CLAUSES.WHERE,\n              subject: x_axis,\n              operator: Operators.TEMPORAL_RANGE,\n              comparator: defaultTimeFilter || NO_TIME_RANGE,\n              expressionType: 'SIMPLE' }]);\n\n\n          } });\n\n      }\n    }\n  }, [\n  x_axis,\n  adhoc_filters,\n  setControlValue,\n  defaultTimeFilter,\n  previousXAxis,\n  props.exploreState.datasource]);\n\n  useEffect(() => {\n    let shouldUpdateControls = false;\n    const removeDatasourceWarningFromControl = (value) => {\n      if (typeof value === 'object' &&\n      isDefined(value) &&\n      'datasourceWarning' in value &&\n      value.datasourceWarning === true) {\n        shouldUpdateControls = true;\n        return { ...value, datasourceWarning: false };\n      }\n      return value;\n    };\n    if (props.chart.chartStatus === 'success' &&\n    prevChartStatus !== 'success') {\n      controlsTransferred == null ? void 0 : controlsTransferred.forEach((controlName) => {var _ensureIsArray;\n        shouldUpdateControls = false;\n        if (!isDefined(props.controls[controlName])) {\n          return;\n        }\n        const alteredControls = Array.isArray(props.controls[controlName].value) ? (_ensureIsArray =\n        ensureIsArray(props.controls[controlName].value)) == null ? void 0 : _ensureIsArray.map(removeDatasourceWarningFromControl) :\n        removeDatasourceWarningFromControl(props.controls[controlName].value);\n        if (shouldUpdateControls) {\n          props.actions.setControlValue(controlName, alteredControls);\n        }\n      });\n    }\n  }, [\n  controlsTransferred,\n  prevChartStatus,\n  props.actions,\n  props.chart.chartStatus,\n  props.controls]);\n\n  useEffect(() => {var _props$exploreState$d, _props$exploreState$d2;\n    if (prevDatasource &&\n    prevDatasource.type !== DatasourceType.Query && (\n    ((_props$exploreState$d = props.exploreState.datasource) == null ? void 0 : _props$exploreState$d.id) !== prevDatasource.id ||\n    ((_props$exploreState$d2 = props.exploreState.datasource) == null ? void 0 : _props$exploreState$d2.type) !== prevDatasource.type)) {var _containerRef$current;\n      setShowDatasourceAlert(true);\n      (_containerRef$current = containerRef.current) == null ? void 0 : _containerRef$current.scrollTo(0, 0);\n    }\n  }, [(_props$exploreState$d3 =\n  props.exploreState.datasource) == null ? void 0 : _props$exploreState$d3.id, (_props$exploreState$d4 =\n  props.exploreState.datasource) == null ? void 0 : _props$exploreState$d4.type,\n  prevDatasource]);\n\n  const { expandedQuerySections, expandedCustomizeSections, querySections, customizeSections } = useMemo(() => getState(form_data.viz_type, props.exploreState.datasource, props.datasource_type), [props.exploreState.datasource, form_data.viz_type, props.datasource_type]);\n  const resetTransferredControls = useCallback(() => {\n    ensureIsArray(props.exploreState.controlsTransferred).forEach((controlName) => props.actions.setControlValue(controlName, props.controls[controlName].default));\n  }, [props.actions, props.exploreState.controlsTransferred, props.controls]);\n  const handleClearFormClick = useCallback(() => {\n    resetTransferredControls();\n    setShowDatasourceAlert(false);\n  }, [resetTransferredControls]);\n  const handleContinueClick = useCallback(() => {\n    setShowDatasourceAlert(false);\n  }, []);\n  const shouldRecalculateControlState = (_ref5) => {let { name, config } = _ref5;\n    const { controls, chart, exploreState } = props;\n    return Boolean(config.shouldMapStateToProps == null ? void 0 : config.shouldMapStateToProps(prevState || exploreState, exploreState, controls[name], chart));\n  };\n  const renderControl = (_ref6) => {let { name, config } = _ref6;\n    const { controls, chart, exploreState } = props;\n    const { visibility } = config;\n    // If the control item is not an object, we have to look up the control data from\n    // the centralized controls file.\n    // When it is an object we read control data straight from `config` instead\n    const controlData = {\n      ...config,\n      ...controls[name],\n      ...(shouldRecalculateControlState({ name, config }) ?\n      config == null ? void 0 : config.mapStateToProps == null ? void 0 : config.mapStateToProps(exploreState, controls[name], chart) :\n      // for other controls, `mapStateToProps` is already run in\n      // controlUtils/getControlState.ts\n      undefined),\n      name };\n\n    const { validationErrors, label: baseLabel, description: baseDescription, ...restProps } = controlData;\n    const isVisible = visibility ?\n    visibility.call(config, props, controlData) :\n    undefined;\n    const label = typeof baseLabel === 'function' ?\n    baseLabel(exploreState, controls[name], chart) :\n    baseLabel;\n    const description = typeof baseDescription === 'function' ?\n    baseDescription(exploreState, controls[name], chart) :\n    baseDescription;\n    if (name === 'adhoc_filters') {\n      restProps.canDelete = (valueToBeDeleted, values) => {var _controls$time_range;\n        const isTemporalRange = (filter) => filter.operator === Operators.TEMPORAL_RANGE;\n        if (!(controls != null && (_controls$time_range = controls.time_range) != null && _controls$time_range.value) && isTemporalRange(valueToBeDeleted)) {\n          const count = values.filter(isTemporalRange).length;\n          if (count === 1) {\n            return t(`You cannot delete the last temporal filter as it's used for time range filters in dashboards.`);\n          }\n        }\n        return true;\n      };\n    }\n    return ___EmotionJSX(Control, _extends({ key: `control-${name}`, name: name, label: label, description: description, validationErrors: validationErrors, actions: props.actions, isVisible: isVisible }, restProps));\n  };\n  const sectionHasHadNoErrors = useResetOnChangeRef(() => ({}), form_data.viz_type);\n  const renderControlPanelSection = (section) => {\n    const { controls } = props;\n    const { label, description } = section;\n    // Section label can be a ReactNode but in some places we want to\n    // have a string ID. Using forced type conversion for now,\n    // should probably add a `id` field to sections in the future.\n    const sectionId = String(label);\n    const hasErrors = section.controlSetRows.some((rows) => rows.some((item) => {\n      const controlName = typeof item === 'string' ?\n      item :\n      item && 'name' in item ?\n      item.name :\n      null;\n      return controlName &&\n      controlName in controls &&\n      controls[controlName].validationErrors &&\n      controls[controlName].validationErrors.length > 0;\n    }));\n    if (!hasErrors) {\n      sectionHasHadNoErrors.current[sectionId] = true;\n    }\n    const errorColor = sectionHasHadNoErrors.current[sectionId] ?\n    colors.error.base :\n    colors.alert.base;\n    const PanelHeader = () => ___EmotionJSX(\"span\", { \"data-test\": \"collapsible-control-panel-header\" },\n    ___EmotionJSX(\"span\", { css: (theme) => css`\n            font-size: ${theme.typography.sizes.m}px;\n            line-height: 1.3;\n          ` },\n    label),\n    ' ',\n    description && ___EmotionJSX(Tooltip, { id: sectionId, title: description },\n    ___EmotionJSX(Icons.InfoCircleOutlined, { css: iconStyles })),\n\n    hasErrors && ___EmotionJSX(Tooltip, { id: `${_kebabCase('validation-errors')}-tooltip`, title: t('This section contains validation errors') },\n    ___EmotionJSX(Icons.InfoCircleOutlined, { css: css`\n                ${iconStyles};\n                color: ${errorColor};\n              ` })));\n\n\n    return ___EmotionJSX(Collapse.Panel, { css: (theme) => css`\n          margin-bottom: 0;\n          box-shadow: none;\n\n          &:last-child {\n            padding-bottom: ${theme.gridUnit * 16}px;\n            border-bottom: 0;\n          }\n\n          .panel-body {\n            margin-left: ${theme.gridUnit * 4}px;\n            padding-bottom: 0;\n          }\n\n          span.label {\n            display: inline-block;\n          }\n          ${!section.label &&\n      `\n            .ant-collapse-header {\n              display: none;\n            }\n          `}\n        `, header: ___EmotionJSX(PanelHeader, null), key: sectionId },\n    section.controlSetRows.map((controlSets, i) => {\n      const renderedControls = controlSets.\n      map((controlItem) => {\n        if (!controlItem) {\n          // When the item is invalid\n          return null;\n        }\n        if ( /*#__PURE__*/React.isValidElement(controlItem)) {\n          // When the item is a React element\n          return controlItem;\n        }\n        if (controlItem.name &&\n        controlItem.config &&\n        controlItem.name !== 'datasource') {\n          return renderControl(controlItem);\n        }\n        return null;\n      }).\n      filter((x) => x !== null);\n      // don't show the row if it is empty\n      if (renderedControls.length === 0) {\n        return null;\n      }\n      return ___EmotionJSX(ControlRow, { key: `controlsetrow-${i}`, controls: renderedControls });\n    }));\n\n  };\n  const hasControlsTransferred = ensureIsArray(props.exploreState.controlsTransferred).length > 0;\n  const DatasourceAlert = useCallback(() => hasControlsTransferred ? ___EmotionJSX(ExploreAlert, { title: t('Keep control settings?'), bodyText: t(\"You've changed datasets. Any controls with data (columns, metrics) that match this new dataset have been retained.\"), primaryButtonAction: handleContinueClick, secondaryButtonAction: handleClearFormClick, primaryButtonText: t('Continue'), secondaryButtonText: t('Clear form'), type: \"info\" }) : ___EmotionJSX(ExploreAlert, { title: t('No form settings were maintained'), bodyText: t('We were unable to carry over any controls when switching to this new dataset.'), primaryButtonAction: handleContinueClick, primaryButtonText: t('Continue'), type: \"warning\" }), [handleClearFormClick, handleContinueClick, hasControlsTransferred]);\n  const dataTabHasHadNoErrors = useResetOnChangeRef(() => false, form_data.viz_type);\n  const dataTabTitle = useMemo(() => {\n    if (!props.errorMessage) {\n      dataTabHasHadNoErrors.current = true;\n    }\n    const errorColor = dataTabHasHadNoErrors.current ?\n    colors.error.base :\n    colors.alert.base;\n    return ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(\"span\", null, t('Data')),\n    props.errorMessage && ___EmotionJSX(\"span\", { css: (theme) => css`\n              margin-left: ${theme.gridUnit * 2}px;\n            ` },\n    ' ',\n    ___EmotionJSX(Tooltip, { id: \"query-error-tooltip\", placement: \"right\", title: props.errorMessage },\n    ___EmotionJSX(Icons.ExclamationCircleOutlined, { css: css`\n                  ${iconStyles};\n                  color: ${errorColor};\n                ` }))));\n\n\n\n  }, [\n  colors.error.base,\n  colors.alert.base,\n  dataTabHasHadNoErrors,\n  props.errorMessage]);\n\n  const controlPanelRegistry = getChartControlPanelRegistry();\n  if (!controlPanelRegistry.has(form_data.viz_type) && pluginContext.loading) {\n    return ___EmotionJSX(Loading, null);\n  }\n  const showCustomizeTab = customizeSections.length > 0;\n  return ___EmotionJSX(Styles, { ref: containerRef },\n  ___EmotionJSX(ControlPanelsTabs, { id: \"controlSections\", \"data-test\": \"control-tabs\", fullWidth: showCustomizeTab, allowOverflow: false },\n  ___EmotionJSX(Tabs.TabPane, { key: \"query\", tab: dataTabTitle },\n  ___EmotionJSX(Collapse, { defaultActiveKey: expandedQuerySections, expandIconPosition: \"right\", ghost: true },\n  showDatasourceAlert && ___EmotionJSX(DatasourceAlert, null),\n  querySections.map(renderControlPanelSection))),\n\n\n  showCustomizeTab && ___EmotionJSX(Tabs.TabPane, { key: \"display\", tab: t('Customize') },\n  ___EmotionJSX(Collapse, { defaultActiveKey: expandedCustomizeSections, expandIconPosition: \"right\", ghost: true },\n  customizeSections.map(renderControlPanelSection)))),\n\n\n\n  ___EmotionJSX(\"div\", { css: actionButtonsContainerStyles },\n  ___EmotionJSX(RunQueryButton, { onQuery: props.onQuery, onStop: props.onStop, errorMessage: props.errorMessage, loading: props.chart.chartStatus === 'loading', isNewChart: !props.chart.queriesResponse, canStopQuery: props.canStopQuery, chartIsStale: props.chartIsStale })));\n\n\n};__signature__(ControlPanelsContainer, \"useTheme{{ colors }}\\nuseContext{pluginContext}\\nusePrevious{prevState}\\nusePrevious{prevDatasource}\\nusePrevious{prevChartStatus}\\nuseState{[showDatasourceAlert, setShowDatasourceAlert](false)}\\nuseRef{containerRef}\\nuseSelector{controlsTransferred}\\nuseSelector{defaultTimeFilter}\\nusePrevious{previousXAxis}\\nuseEffect{}\\nuseEffect{}\\nuseEffect{}\\nuseMemo{{ expandedQuerySections, expandedCustomizeSections, querySections, customizeSections, }}\\nuseCallback{resetTransferredControls}\\nuseCallback{handleClearFormClick}\\nuseCallback{handleContinueClick}\\nuseResetOnChangeRef{sectionHasHadNoErrors}\\nuseCallback{DatasourceAlert}\\nuseResetOnChangeRef{dataTabHasHadNoErrors}\\nuseMemo{dataTabTitle}\", () => [useTheme, usePrevious, usePrevious, usePrevious, useSelector, useSelector, usePrevious, useResetOnChangeRef, useResetOnChangeRef]);const _default =\nControlPanelsContainer;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(confirm, \"confirm\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/ControlPanelsContainer.tsx\");reactHotLoader.register(iconStyles, \"iconStyles\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/ControlPanelsContainer.tsx\");reactHotLoader.register(actionButtonsContainerStyles, \"actionButtonsContainerStyles\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/ControlPanelsContainer.tsx\");reactHotLoader.register(Styles, \"Styles\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/ControlPanelsContainer.tsx\");reactHotLoader.register(ControlPanelsTabs, \"ControlPanelsTabs\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/ControlPanelsContainer.tsx\");reactHotLoader.register(isTimeSection, \"isTimeSection\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/ControlPanelsContainer.tsx\");reactHotLoader.register(hasTimeColumn, \"hasTimeColumn\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/ControlPanelsContainer.tsx\");reactHotLoader.register(sectionsToExpand, \"sectionsToExpand\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/ControlPanelsContainer.tsx\");reactHotLoader.register(getState, \"getState\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/ControlPanelsContainer.tsx\");reactHotLoader.register(useResetOnChangeRef, \"useResetOnChangeRef\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/ControlPanelsContainer.tsx\");reactHotLoader.register(ControlPanelsContainer, \"ControlPanelsContainer\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/ControlPanelsContainer.tsx\");reactHotLoader.register(_default, \"default\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/ControlPanelsContainer.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"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","names":["React","useCallback","useContext","useEffect","useMemo","useRef","useState","ensureIsArray","t","styled","getChartControlPanelRegistry","DatasourceType","css","useTheme","isDefined","NO_TIME_RANGE","usePrevious","isTemporalColumn","sections","useSelector","rgba","Collapse","Tabs","PluginContext","Loading","Modal","getSectionsToRender","Tooltip","Icons","ControlRow","Control","ExploreAlert","RunQueryButton","Operators","CLAUSES","confirm","iconStyles","actionButtonsContainerStyles","theme","gridUnit","colors","grayscale","light5","opacity","mediumLight","Styles","div","typography","weights","bold","ControlPanelsTabs","fullWidth","light3","sizes","s","isTimeSection","section","label","legacyRegularTime","legacyTimeseriesTime","hasTimeColumn","datasource","columns","some","c","is_dttm","sectionsToExpand","reduce","acc","expanded","String","getState","vizType","datasourceType","querySections","customizeSections","forEach","tabOverride","controlSetRows","rows","control","config","renderTrigger","push","length","expandedQuerySections","expandedCustomizeSections","useResetOnChangeRef","initialValue","resetOnChangeValue","value","prevResetOnChangeValue","current","ControlPanelsContainer","props","pluginContext","prevState","exploreState","prevDatasource","prevChartStatus","chart","chartStatus","showDatasourceAlert","setShowDatasourceAlert","containerRef","controlsTransferred","state","explore","defaultTimeFilter","common","conf","DEFAULT_TIME_FILTER","form_data","actions","setControlValue","x_axis","adhoc_filters","previousXAxis","noFilter","find","filter","expressionType","operator","TEMPORAL_RANGE","subject","title","content","onOk","clause","WHERE","comparator","shouldUpdateControls","removeDatasourceWarningFromControl","datasourceWarning","controls","controlName","alteredControls","Array","isArray","map","type","Query","id","scrollTo","viz_type","datasource_type","resetTransferredControls","default","handleClearFormClick","handleContinueClick","shouldRecalculateControlState","name","Boolean","shouldMapStateToProps","renderControl","visibility","controlData","mapStateToProps","undefined","validationErrors","baseLabel","description","baseDescription","restProps","isVisible","call","canDelete","valueToBeDeleted","values","isTemporalRange","time_range","count","sectionHasHadNoErrors","renderControlPanelSection","sectionId","hasErrors","item","errorColor","error","base","alert","PanelHeader","m","controlSets","i","renderedControls","controlItem","isValidElement","x","hasControlsTransferred","DatasourceAlert","dataTabHasHadNoErrors","dataTabTitle","errorMessage","controlPanelRegistry","has","loading","showCustomizeTab","onQuery","onStop","queriesResponse","canStopQuery","chartIsStale"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/explore/components/ControlPanelsContainer.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint camelcase: 0 */\nimport React, {\n  ReactNode,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport {\n  ensureIsArray,\n  t,\n  styled,\n  getChartControlPanelRegistry,\n  QueryFormData,\n  DatasourceType,\n  css,\n  SupersetTheme,\n  useTheme,\n  isDefined,\n  JsonValue,\n  NO_TIME_RANGE,\n  usePrevious,\n} from '@superset-ui/core';\nimport {\n  ControlPanelSectionConfig,\n  ControlState,\n  CustomControlItem,\n  Dataset,\n  ExpandedControlItem,\n  isTemporalColumn,\n  sections,\n} from '@superset-ui/chart-controls';\nimport { useSelector } from 'react-redux';\nimport { rgba } from 'emotion-rgba';\nimport { kebabCase } from 'lodash';\n\nimport Collapse from 'src/components/Collapse';\nimport Tabs from 'src/components/Tabs';\nimport { PluginContext } from 'src/components/DynamicPlugins';\nimport Loading from 'src/components/Loading';\nimport Modal from 'src/components/Modal';\n\nimport { getSectionsToRender } from 'src/explore/controlUtils';\nimport { ExploreActions } from 'src/explore/actions/exploreActions';\nimport { ChartState, ExplorePageState } from 'src/explore/types';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport ControlRow from './ControlRow';\nimport Control from './Control';\nimport { ExploreAlert } from './ExploreAlert';\nimport { RunQueryButton } from './RunQueryButton';\nimport { Operators } from '../constants';\nimport { CLAUSES } from './controls/FilterControl/types';\n\nconst { confirm } = Modal;\n\nexport type ControlPanelsContainerProps = {\n  exploreState: ExplorePageState['explore'];\n  actions: ExploreActions;\n  datasource_type: DatasourceType;\n  chart: ChartState;\n  controls: Record<string, ControlState>;\n  form_data: QueryFormData;\n  isDatasourceMetaLoading: boolean;\n  errorMessage: ReactNode;\n  onQuery: () => void;\n  onStop: () => void;\n  canStopQuery: boolean;\n  chartIsStale: boolean;\n};\n\nexport type ExpandedControlPanelSectionConfig = Omit<\n  ControlPanelSectionConfig,\n  'controlSetRows'\n> & {\n  controlSetRows: ExpandedControlItem[][];\n};\n\nconst iconStyles = css`\n  &.anticon {\n    font-size: unset;\n    .anticon {\n      line-height: unset;\n      vertical-align: unset;\n    }\n  }\n`;\n\nconst actionButtonsContainerStyles = (theme: SupersetTheme) => css`\n  display: flex;\n  position: sticky;\n  bottom: 0;\n  flex-direction: column;\n  align-items: center;\n  padding: ${theme.gridUnit * 4}px;\n  z-index: 999;\n  background: linear-gradient(\n    ${rgba(theme.colors.grayscale.light5, 0)},\n    ${theme.colors.grayscale.light5} ${theme.opacity.mediumLight}\n  );\n\n  & > button {\n    min-width: 156px;\n  }\n`;\n\nconst Styles = styled.div`\n  position: relative;\n  height: 100%;\n  width: 100%;\n\n  // Resizable add overflow-y: auto as a style to this div\n  // To override it, we need to use !important\n  overflow: visible !important;\n  #controlSections {\n    height: 100%;\n    overflow: visible;\n  }\n  .nav-tabs {\n    flex: 0 0 1;\n  }\n  .tab-content {\n    overflow: auto;\n    flex: 1 1 100%;\n  }\n  .Select__menu {\n    max-width: 100%;\n  }\n  .type-label {\n    margin-right: ${({ theme }) => theme.gridUnit * 3}px;\n    width: ${({ theme }) => theme.gridUnit * 7}px;\n    display: inline-block;\n    text-align: center;\n    font-weight: ${({ theme }) => theme.typography.weights.bold};\n  }\n`;\n\nconst ControlPanelsTabs = styled(Tabs)`\n  ${({ theme, fullWidth }) => css`\n    height: 100%;\n    overflow: visible;\n    .ant-tabs-nav {\n      margin-bottom: 0;\n    }\n    .ant-tabs-nav-list {\n      width: ${fullWidth ? '100%' : '50%'};\n    }\n    .ant-tabs-tabpane {\n      height: 100%;\n    }\n    .ant-tabs-content-holder {\n      padding-top: ${theme.gridUnit * 4}px;\n    }\n\n    .ant-collapse-ghost > .ant-collapse-item {\n      &:not(:last-child) {\n        border-bottom: 1px solid ${theme.colors.grayscale.light3};\n      }\n\n      & > .ant-collapse-header {\n        font-size: ${theme.typography.sizes.s}px;\n      }\n\n      & > .ant-collapse-content > .ant-collapse-content-box {\n        padding-bottom: 0;\n        font-size: ${theme.typography.sizes.s}px;\n      }\n    }\n  `}\n`;\n\nconst isTimeSection = (section: ControlPanelSectionConfig): boolean =>\n  !!section.label &&\n  (sections.legacyRegularTime.label === section.label ||\n    sections.legacyTimeseriesTime.label === section.label);\n\nconst hasTimeColumn = (datasource: Dataset): boolean =>\n  datasource?.columns?.some(c => c.is_dttm);\nconst sectionsToExpand = (\n  sections: ControlPanelSectionConfig[],\n  datasource: Dataset,\n): string[] =>\n  // avoid expanding time section if datasource doesn't include time column\n  sections.reduce(\n    (acc, section) =>\n      (section.expanded || !section.label) &&\n      (!isTimeSection(section) || hasTimeColumn(datasource))\n        ? [...acc, String(section.label)]\n        : acc,\n    [] as string[],\n  );\n\nfunction getState(\n  vizType: string,\n  datasource: Dataset,\n  datasourceType: DatasourceType,\n) {\n  const querySections: ControlPanelSectionConfig[] = [];\n  const customizeSections: ControlPanelSectionConfig[] = [];\n\n  getSectionsToRender(vizType, datasourceType).forEach(section => {\n    // if at least one control in the section is not `renderTrigger`\n    // or asks to be displayed at the Data tab\n    if (\n      section.tabOverride === 'data' ||\n      section.controlSetRows.some(rows =>\n        rows.some(\n          control =>\n            control &&\n            typeof control === 'object' &&\n            'config' in control &&\n            control.config &&\n            (!control.config.renderTrigger ||\n              control.config.tabOverride === 'data'),\n        ),\n      )\n    ) {\n      querySections.push(section);\n    } else if (section.controlSetRows.length > 0) {\n      customizeSections.push(section);\n    }\n  });\n  const expandedQuerySections: string[] = sectionsToExpand(\n    querySections,\n    datasource,\n  );\n  const expandedCustomizeSections: string[] = sectionsToExpand(\n    customizeSections,\n    datasource,\n  );\n  return {\n    expandedQuerySections,\n    expandedCustomizeSections,\n    querySections,\n    customizeSections,\n  };\n}\n\nfunction useResetOnChangeRef(initialValue: () => any, resetOnChangeValue: any) {\n  const value = useRef(initialValue());\n  const prevResetOnChangeValue = useRef(resetOnChangeValue);\n  if (prevResetOnChangeValue.current !== resetOnChangeValue) {\n    value.current = initialValue();\n    prevResetOnChangeValue.current = resetOnChangeValue;\n  }\n\n  return value;\n}\n\nexport const ControlPanelsContainer = (props: ControlPanelsContainerProps) => {\n  const { colors } = useTheme();\n  const pluginContext = useContext(PluginContext);\n\n  const prevState = usePrevious(props.exploreState);\n  const prevDatasource = usePrevious(props.exploreState.datasource);\n  const prevChartStatus = usePrevious(props.chart.chartStatus);\n\n  const [showDatasourceAlert, setShowDatasourceAlert] = useState(false);\n\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const controlsTransferred = useSelector<\n    ExplorePageState,\n    string[] | undefined\n  >(state => state.explore.controlsTransferred);\n\n  const defaultTimeFilter = useSelector<ExplorePageState>(\n    state => state.common?.conf?.DEFAULT_TIME_FILTER,\n  );\n\n  const { form_data, actions } = props;\n  const { setControlValue } = actions;\n  const { x_axis, adhoc_filters } = form_data;\n\n  const previousXAxis = usePrevious(x_axis);\n\n  useEffect(() => {\n    if (\n      x_axis &&\n      x_axis !== previousXAxis &&\n      isTemporalColumn(x_axis, props.exploreState.datasource)\n    ) {\n      const noFilter =\n        !adhoc_filters ||\n        !adhoc_filters.find(\n          filter =>\n            filter.expressionType === 'SIMPLE' &&\n            filter.operator === Operators.TEMPORAL_RANGE &&\n            filter.subject === x_axis,\n        );\n      if (noFilter) {\n        confirm({\n          title: t('The X-axis is not on the filters list'),\n          content:\n            t(`The X-axis is not on the filters list which will prevent it from being used in\n            time range filters in dashboards. Would you like to add it to the filters list?`),\n          onOk: () => {\n            setControlValue('adhoc_filters', [\n              ...(adhoc_filters || []),\n              {\n                clause: CLAUSES.WHERE,\n                subject: x_axis,\n                operator: Operators.TEMPORAL_RANGE,\n                comparator: defaultTimeFilter || NO_TIME_RANGE,\n                expressionType: 'SIMPLE',\n              },\n            ]);\n          },\n        });\n      }\n    }\n  }, [\n    x_axis,\n    adhoc_filters,\n    setControlValue,\n    defaultTimeFilter,\n    previousXAxis,\n    props.exploreState.datasource,\n  ]);\n\n  useEffect(() => {\n    let shouldUpdateControls = false;\n    const removeDatasourceWarningFromControl = (\n      value: JsonValue | undefined,\n    ) => {\n      if (\n        typeof value === 'object' &&\n        isDefined(value) &&\n        'datasourceWarning' in value &&\n        value.datasourceWarning === true\n      ) {\n        shouldUpdateControls = true;\n        return { ...value, datasourceWarning: false };\n      }\n      return value;\n    };\n    if (\n      props.chart.chartStatus === 'success' &&\n      prevChartStatus !== 'success'\n    ) {\n      controlsTransferred?.forEach(controlName => {\n        shouldUpdateControls = false;\n        if (!isDefined(props.controls[controlName])) {\n          return;\n        }\n        const alteredControls = Array.isArray(props.controls[controlName].value)\n          ? ensureIsArray(props.controls[controlName].value)?.map(\n              removeDatasourceWarningFromControl,\n            )\n          : removeDatasourceWarningFromControl(\n              props.controls[controlName].value,\n            );\n        if (shouldUpdateControls) {\n          props.actions.setControlValue(controlName, alteredControls);\n        }\n      });\n    }\n  }, [\n    controlsTransferred,\n    prevChartStatus,\n    props.actions,\n    props.chart.chartStatus,\n    props.controls,\n  ]);\n\n  useEffect(() => {\n    if (\n      prevDatasource &&\n      prevDatasource.type !== DatasourceType.Query &&\n      (props.exploreState.datasource?.id !== prevDatasource.id ||\n        props.exploreState.datasource?.type !== prevDatasource.type)\n    ) {\n      setShowDatasourceAlert(true);\n      containerRef.current?.scrollTo(0, 0);\n    }\n  }, [\n    props.exploreState.datasource?.id,\n    props.exploreState.datasource?.type,\n    prevDatasource,\n  ]);\n\n  const {\n    expandedQuerySections,\n    expandedCustomizeSections,\n    querySections,\n    customizeSections,\n  } = useMemo(\n    () =>\n      getState(\n        form_data.viz_type,\n        props.exploreState.datasource,\n        props.datasource_type,\n      ),\n    [props.exploreState.datasource, form_data.viz_type, props.datasource_type],\n  );\n\n  const resetTransferredControls = useCallback(() => {\n    ensureIsArray(props.exploreState.controlsTransferred).forEach(controlName =>\n      props.actions.setControlValue(\n        controlName,\n        props.controls[controlName].default,\n      ),\n    );\n  }, [props.actions, props.exploreState.controlsTransferred, props.controls]);\n\n  const handleClearFormClick = useCallback(() => {\n    resetTransferredControls();\n    setShowDatasourceAlert(false);\n  }, [resetTransferredControls]);\n\n  const handleContinueClick = useCallback(() => {\n    setShowDatasourceAlert(false);\n  }, []);\n\n  const shouldRecalculateControlState = ({\n    name,\n    config,\n  }: CustomControlItem): boolean => {\n    const { controls, chart, exploreState } = props;\n\n    return Boolean(\n      config.shouldMapStateToProps?.(\n        prevState || exploreState,\n        exploreState,\n        controls[name],\n        chart,\n      ),\n    );\n  };\n\n  const renderControl = ({ name, config }: CustomControlItem) => {\n    const { controls, chart, exploreState } = props;\n    const { visibility } = config;\n\n    // If the control item is not an object, we have to look up the control data from\n    // the centralized controls file.\n    // When it is an object we read control data straight from `config` instead\n    const controlData = {\n      ...config,\n      ...controls[name],\n      ...(shouldRecalculateControlState({ name, config })\n        ? config?.mapStateToProps?.(exploreState, controls[name], chart)\n        : // for other controls, `mapStateToProps` is already run in\n          // controlUtils/getControlState.ts\n          undefined),\n      name,\n    };\n    const {\n      validationErrors,\n      label: baseLabel,\n      description: baseDescription,\n      ...restProps\n    } = controlData as ControlState & {\n      validationErrors?: any[];\n    };\n\n    const isVisible = visibility\n      ? visibility.call(config, props, controlData)\n      : undefined;\n\n    const label =\n      typeof baseLabel === 'function'\n        ? baseLabel(exploreState, controls[name], chart)\n        : baseLabel;\n\n    const description =\n      typeof baseDescription === 'function'\n        ? baseDescription(exploreState, controls[name], chart)\n        : baseDescription;\n\n    if (name === 'adhoc_filters') {\n      restProps.canDelete = (\n        valueToBeDeleted: Record<string, any>,\n        values: Record<string, any>[],\n      ) => {\n        const isTemporalRange = (filter: Record<string, any>) =>\n          filter.operator === Operators.TEMPORAL_RANGE;\n        if (!controls?.time_range?.value && isTemporalRange(valueToBeDeleted)) {\n          const count = values.filter(isTemporalRange).length;\n          if (count === 1) {\n            return t(\n              `You cannot delete the last temporal filter as it's used for time range filters in dashboards.`,\n            );\n          }\n        }\n        return true;\n      };\n    }\n\n    return (\n      <Control\n        key={`control-${name}`}\n        name={name}\n        label={label}\n        description={description}\n        validationErrors={validationErrors}\n        actions={props.actions}\n        isVisible={isVisible}\n        {...restProps}\n      />\n    );\n  };\n\n  const sectionHasHadNoErrors = useResetOnChangeRef(\n    () => ({}),\n    form_data.viz_type,\n  );\n\n  const renderControlPanelSection = (\n    section: ExpandedControlPanelSectionConfig,\n  ) => {\n    const { controls } = props;\n    const { label, description } = section;\n\n    // Section label can be a ReactNode but in some places we want to\n    // have a string ID. Using forced type conversion for now,\n    // should probably add a `id` field to sections in the future.\n    const sectionId = String(label);\n\n    const hasErrors = section.controlSetRows.some(rows =>\n      rows.some(item => {\n        const controlName =\n          typeof item === 'string'\n            ? item\n            : item && 'name' in item\n            ? item.name\n            : null;\n        return (\n          controlName &&\n          controlName in controls &&\n          controls[controlName].validationErrors &&\n          controls[controlName].validationErrors.length > 0\n        );\n      }),\n    );\n\n    if (!hasErrors) {\n      sectionHasHadNoErrors.current[sectionId] = true;\n    }\n\n    const errorColor = sectionHasHadNoErrors.current[sectionId]\n      ? colors.error.base\n      : colors.alert.base;\n\n    const PanelHeader = () => (\n      <span data-test=\"collapsible-control-panel-header\">\n        <span\n          css={(theme: SupersetTheme) => css`\n            font-size: ${theme.typography.sizes.m}px;\n            line-height: 1.3;\n          `}\n        >\n          {label}\n        </span>{' '}\n        {description && (\n          <Tooltip id={sectionId} title={description}>\n            <Icons.InfoCircleOutlined css={iconStyles} />\n          </Tooltip>\n        )}\n        {hasErrors && (\n          <Tooltip\n            id={`${kebabCase('validation-errors')}-tooltip`}\n            title={t('This section contains validation errors')}\n          >\n            <Icons.InfoCircleOutlined\n              css={css`\n                ${iconStyles};\n                color: ${errorColor};\n              `}\n            />\n          </Tooltip>\n        )}\n      </span>\n    );\n\n    return (\n      <Collapse.Panel\n        css={theme => css`\n          margin-bottom: 0;\n          box-shadow: none;\n\n          &:last-child {\n            padding-bottom: ${theme.gridUnit * 16}px;\n            border-bottom: 0;\n          }\n\n          .panel-body {\n            margin-left: ${theme.gridUnit * 4}px;\n            padding-bottom: 0;\n          }\n\n          span.label {\n            display: inline-block;\n          }\n          ${!section.label &&\n          `\n            .ant-collapse-header {\n              display: none;\n            }\n          `}\n        `}\n        header={<PanelHeader />}\n        key={sectionId}\n      >\n        {section.controlSetRows.map((controlSets, i) => {\n          const renderedControls = controlSets\n            .map(controlItem => {\n              if (!controlItem) {\n                // When the item is invalid\n                return null;\n              }\n              if (React.isValidElement(controlItem)) {\n                // When the item is a React element\n                return controlItem;\n              }\n              if (\n                controlItem.name &&\n                controlItem.config &&\n                controlItem.name !== 'datasource'\n              ) {\n                return renderControl(controlItem);\n              }\n              return null;\n            })\n            .filter(x => x !== null);\n          // don't show the row if it is empty\n          if (renderedControls.length === 0) {\n            return null;\n          }\n          return (\n            <ControlRow\n              key={`controlsetrow-${i}`}\n              controls={renderedControls}\n            />\n          );\n        })}\n      </Collapse.Panel>\n    );\n  };\n\n  const hasControlsTransferred =\n    ensureIsArray(props.exploreState.controlsTransferred).length > 0;\n\n  const DatasourceAlert = useCallback(\n    () =>\n      hasControlsTransferred ? (\n        <ExploreAlert\n          title={t('Keep control settings?')}\n          bodyText={t(\n            \"You've changed datasets. Any controls with data (columns, metrics) that match this new dataset have been retained.\",\n          )}\n          primaryButtonAction={handleContinueClick}\n          secondaryButtonAction={handleClearFormClick}\n          primaryButtonText={t('Continue')}\n          secondaryButtonText={t('Clear form')}\n          type=\"info\"\n        />\n      ) : (\n        <ExploreAlert\n          title={t('No form settings were maintained')}\n          bodyText={t(\n            'We were unable to carry over any controls when switching to this new dataset.',\n          )}\n          primaryButtonAction={handleContinueClick}\n          primaryButtonText={t('Continue')}\n          type=\"warning\"\n        />\n      ),\n    [handleClearFormClick, handleContinueClick, hasControlsTransferred],\n  );\n\n  const dataTabHasHadNoErrors = useResetOnChangeRef(\n    () => false,\n    form_data.viz_type,\n  );\n\n  const dataTabTitle = useMemo(() => {\n    if (!props.errorMessage) {\n      dataTabHasHadNoErrors.current = true;\n    }\n\n    const errorColor = dataTabHasHadNoErrors.current\n      ? colors.error.base\n      : colors.alert.base;\n\n    return (\n      <>\n        <span>{t('Data')}</span>\n        {props.errorMessage && (\n          <span\n            css={(theme: SupersetTheme) => css`\n              margin-left: ${theme.gridUnit * 2}px;\n            `}\n          >\n            {' '}\n            <Tooltip\n              id=\"query-error-tooltip\"\n              placement=\"right\"\n              title={props.errorMessage}\n            >\n              <Icons.ExclamationCircleOutlined\n                css={css`\n                  ${iconStyles};\n                  color: ${errorColor};\n                `}\n              />\n            </Tooltip>\n          </span>\n        )}\n      </>\n    );\n  }, [\n    colors.error.base,\n    colors.alert.base,\n    dataTabHasHadNoErrors,\n    props.errorMessage,\n  ]);\n\n  const controlPanelRegistry = getChartControlPanelRegistry();\n  if (!controlPanelRegistry.has(form_data.viz_type) && pluginContext.loading) {\n    return <Loading />;\n  }\n\n  const showCustomizeTab = customizeSections.length > 0;\n\n  return (\n    <Styles ref={containerRef}>\n      <ControlPanelsTabs\n        id=\"controlSections\"\n        data-test=\"control-tabs\"\n        fullWidth={showCustomizeTab}\n        allowOverflow={false}\n      >\n        <Tabs.TabPane key=\"query\" tab={dataTabTitle}>\n          <Collapse\n            defaultActiveKey={expandedQuerySections}\n            expandIconPosition=\"right\"\n            ghost\n          >\n            {showDatasourceAlert && <DatasourceAlert />}\n            {querySections.map(renderControlPanelSection)}\n          </Collapse>\n        </Tabs.TabPane>\n        {showCustomizeTab && (\n          <Tabs.TabPane key=\"display\" tab={t('Customize')}>\n            <Collapse\n              defaultActiveKey={expandedCustomizeSections}\n              expandIconPosition=\"right\"\n              ghost\n            >\n              {customizeSections.map(renderControlPanelSection)}\n            </Collapse>\n          </Tabs.TabPane>\n        )}\n      </ControlPanelsTabs>\n      <div css={actionButtonsContainerStyles}>\n        <RunQueryButton\n          onQuery={props.onQuery}\n          onStop={props.onStop}\n          errorMessage={props.errorMessage}\n          loading={props.chart.chartStatus === 'loading'}\n          isNewChart={!props.chart.queriesResponse}\n          canStopQuery={props.canStopQuery}\n          chartIsStale={props.chartIsStale}\n        />\n      </div>\n    </Styles>\n  );\n};\n\nexport default ControlPanelsContainer;\n"]},"metadata":{},"sourceType":"module"}