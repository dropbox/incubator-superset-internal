{"ast":null,"code":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useState } from 'react';\nimport { t } from '@superset-ui/core';\nimport { setNativeFilterFieldValues, useForceUpdate } from './utils';\n// When some fields in form changed we need re-fetch data for Filter defaultValue\n// eslint-disable-next-line import/prefer-default-export\nexport const useBackendFormUpdate = (form, filterId) => {var _formFilter$dataset;\n  const forceUpdate = useForceUpdate();\n  const formFilter = (form.getFieldValue('filters') || {})[filterId];\n  useEffect(() => {\n    setNativeFilterFieldValues(form, filterId, {\n      isDataDirty: true,\n      defaultValueQueriesData: null });\n\n    forceUpdate();\n  }, [\n  form,\n  formFilter == null ? void 0 : formFilter.filterType,\n  formFilter == null ? void 0 : formFilter.column,\n  formFilter == null ? void 0 : (_formFilter$dataset = formFilter.dataset) == null ? void 0 : _formFilter$dataset.value,\n  JSON.stringify(formFilter == null ? void 0 : formFilter.adhoc_filters),\n  formFilter == null ? void 0 : formFilter.time_range,\n  forceUpdate,\n  filterId]);\n\n};\nexport const useDefaultValue = (formFilter, filterToEdit) => {var _formFilter$controlVa, _formFilter$controlVa2;\n  const enableEmptyFilter = !!(formFilter != null && (_formFilter$controlVa = formFilter.controlValues) != null && _formFilter$controlVa.enableEmptyFilter);\n  const defaultToFirstItem = !!(formFilter != null && (_formFilter$controlVa2 = formFilter.controlValues) != null && _formFilter$controlVa2.defaultToFirstItem);\n  const [hasDefaultValue, setHasPartialDefaultValue] = useState(false);\n  const [isRequired, setIsRequired] = useState(enableEmptyFilter);\n  const [defaultValueTooltip, setDefaultValueTooltip] = useState('');\n  const setHasDefaultValue = function (value) {if (value === void 0) {value = false;}\n    const required = enableEmptyFilter && !defaultToFirstItem;\n    setIsRequired(required);\n    setHasPartialDefaultValue(required ? true : value);\n  };\n  useEffect(() => {var _formFilter$defaultDa, _formFilter$defaultDa2;\n    setHasDefaultValue(defaultToFirstItem ?\n    false :\n    !!(formFilter != null && (_formFilter$defaultDa = formFilter.defaultDataMask) != null && (_formFilter$defaultDa2 = _formFilter$defaultDa.filterState) != null && _formFilter$defaultDa2.value));\n    // TODO: this logic should be unhardcoded\n  }, [defaultToFirstItem, enableEmptyFilter]);\n  useEffect(() => {var _filterToEdit$default, _filterToEdit$default2;\n    setHasDefaultValue(defaultToFirstItem ?\n    false :\n    !!(filterToEdit != null && (_filterToEdit$default = filterToEdit.defaultDataMask) != null && (_filterToEdit$default2 = _filterToEdit$default.filterState) != null && _filterToEdit$default2.value));\n  }, []);\n  useEffect(() => {\n    let tooltip = '';\n    if (defaultToFirstItem) {\n      tooltip = t('Default value set automatically when \"Select first filter value by default\" is checked');\n    } else\n    if (isRequired) {\n      tooltip = t('Default value must be set when \"Filter value is required\" is checked');\n    } else\n    if (hasDefaultValue) {\n      tooltip = t('Default value must be set when \"Filter has default value\" is checked');\n    }\n    setDefaultValueTooltip(tooltip);\n  }, [hasDefaultValue, isRequired, defaultToFirstItem]);\n  return [hasDefaultValue, isRequired, defaultValueTooltip, setHasDefaultValue];\n};","map":{"version":3,"mappings":"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","names":["useEffect","useState","t","setNativeFilterFieldValues","useForceUpdate","useBackendFormUpdate","form","filterId","forceUpdate","formFilter","getFieldValue","isDataDirty","defaultValueQueriesData","filterType","column","dataset","value","JSON","stringify","adhoc_filters","time_range","useDefaultValue","filterToEdit","enableEmptyFilter","controlValues","defaultToFirstItem","hasDefaultValue","setHasPartialDefaultValue","isRequired","setIsRequired","defaultValueTooltip","setDefaultValueTooltip","setHasDefaultValue","required","defaultDataMask","filterState","tooltip"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/state.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useState } from 'react';\nimport { FormInstance } from 'src/components';\nimport { Filter, t } from '@superset-ui/core';\nimport { NativeFiltersForm, NativeFiltersFormItem } from '../types';\nimport { setNativeFilterFieldValues, useForceUpdate } from './utils';\n\n// When some fields in form changed we need re-fetch data for Filter defaultValue\n// eslint-disable-next-line import/prefer-default-export\nexport const useBackendFormUpdate = (\n  form: FormInstance<NativeFiltersForm>,\n  filterId: string,\n) => {\n  const forceUpdate = useForceUpdate();\n  const formFilter = (form.getFieldValue('filters') || {})[filterId];\n  useEffect(() => {\n    setNativeFilterFieldValues(form, filterId, {\n      isDataDirty: true,\n      defaultValueQueriesData: null,\n    });\n    forceUpdate();\n  }, [\n    form,\n    formFilter?.filterType,\n    formFilter?.column,\n    formFilter?.dataset?.value,\n    JSON.stringify(formFilter?.adhoc_filters),\n    formFilter?.time_range,\n    forceUpdate,\n    filterId,\n  ]);\n};\n\nexport const useDefaultValue = (\n  formFilter?: NativeFiltersFormItem,\n  filterToEdit?: Filter,\n): [boolean, boolean, string, Function] => {\n  const enableEmptyFilter = !!formFilter?.controlValues?.enableEmptyFilter;\n  const defaultToFirstItem = !!formFilter?.controlValues?.defaultToFirstItem;\n\n  const [hasDefaultValue, setHasPartialDefaultValue] = useState(false);\n  const [isRequired, setIsRequired] = useState(enableEmptyFilter);\n  const [defaultValueTooltip, setDefaultValueTooltip] = useState('');\n\n  const setHasDefaultValue = (value = false) => {\n    const required = enableEmptyFilter && !defaultToFirstItem;\n    setIsRequired(required);\n    setHasPartialDefaultValue(required ? true : value);\n  };\n\n  useEffect(() => {\n    setHasDefaultValue(\n      defaultToFirstItem\n        ? false\n        : !!formFilter?.defaultDataMask?.filterState?.value,\n    );\n    // TODO: this logic should be unhardcoded\n  }, [defaultToFirstItem, enableEmptyFilter]);\n\n  useEffect(() => {\n    setHasDefaultValue(\n      defaultToFirstItem\n        ? false\n        : !!filterToEdit?.defaultDataMask?.filterState?.value,\n    );\n  }, []);\n\n  useEffect(() => {\n    let tooltip = '';\n    if (defaultToFirstItem) {\n      tooltip = t(\n        'Default value set automatically when \"Select first filter value by default\" is checked',\n      );\n    } else if (isRequired) {\n      tooltip = t(\n        'Default value must be set when \"Filter value is required\" is checked',\n      );\n    } else if (hasDefaultValue) {\n      tooltip = t(\n        'Default value must be set when \"Filter has default value\" is checked',\n      );\n    }\n    setDefaultValueTooltip(tooltip);\n  }, [hasDefaultValue, isRequired, defaultToFirstItem]);\n\n  return [hasDefaultValue, isRequired, defaultValueTooltip, setHasDefaultValue];\n};\n"]},"metadata":{},"sourceType":"module"}