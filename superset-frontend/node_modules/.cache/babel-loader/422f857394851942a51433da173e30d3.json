{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useCallback, useMemo, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport querystring from 'query-string';\nimport { queryEditorSetDb, queryEditorSetFunctionNames, addTable, removeTables, collapseTable, expandTable, queryEditorSetSchema, setDatabases, addDangerToast, resetState } from 'src/SqlLab/actions/sqlLab';\nimport Button from 'src/components/Button';\nimport { t, styled, css } from '@superset-ui/core';\nimport Collapse from 'src/components/Collapse';\nimport Icons from 'src/components/Icons';\nimport { TableSelectorMultiple } from 'src/components/TableSelector';\nimport { IconTooltip } from 'src/components/IconTooltip';\nimport useQueryEditor from 'src/SqlLab/hooks/useQueryEditor';\nimport { emptyStateComponent } from 'src/components/EmptyState';\nimport { getItem, LocalStorageKeys, setItem } from 'src/utils/localStorageHelpers';\nimport TableElement from '../TableElement';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst StyledScrollbarContainer = styled.div`\n  flex: 1 1 auto;\n  overflow: auto;\n`;\nconst collapseStyles = (theme) => css`\n  .ant-collapse-item {\n    margin-bottom: ${theme.gridUnit * 3}px;\n  }\n  .ant-collapse-header {\n    padding: 0px !important;\n    display: flex;\n    align-items: center;\n  }\n  .ant-collapse-content-box {\n    padding: 0px ${theme.gridUnit * 4}px 0px 0px !important;\n  }\n  .ant-collapse-arrow {\n    top: ${theme.gridUnit * 2}px !important;\n    color: ${theme.colors.primary.dark1} !important;\n    &:hover {\n      color: ${theme.colors.primary.dark2} !important;\n    }\n  }\n`;\nconst LeftBarStyles = styled.div`\n  ${(_ref) => {let { theme } = _ref;return css`\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n\n    .divider {\n      border-bottom: 1px solid ${theme.colors.grayscale.light4};\n      margin: ${theme.gridUnit * 4}px 0;\n    }\n  `;}}\n`;\nconst SqlEditorLeftBar = (_ref2) => {let { database, queryEditorId, tables = [], height = 500, setEmptyState } = _ref2;\n  const dispatch = useDispatch();\n  const queryEditor = useQueryEditor(queryEditorId, ['dbId', 'schema']);\n  const [emptyResultsWithSearch, setEmptyResultsWithSearch] = useState(false);\n  const [userSelectedDb, setUserSelected] = useState(null);\n  const { schema } = queryEditor;\n  useEffect(() => {\n    const bool = querystring.parse(window.location.search).db;\n    const userSelected = getItem(LocalStorageKeys.db, null);\n    if (bool && userSelected) {\n      setUserSelected(userSelected);\n      setItem(LocalStorageKeys.db, null);\n    } else\n\n    setUserSelected(database);\n  }, [database]);\n  const onEmptyResults = (searchText) => {\n    setEmptyResultsWithSearch(!!searchText);\n  };\n  const onDbChange = (_ref3) => {let { id: dbId } = _ref3;\n    setEmptyState(false);\n    dispatch(queryEditorSetDb(queryEditor, dbId));\n    dispatch(queryEditorSetFunctionNames(queryEditor, dbId));\n  };\n  const selectedTableNames = useMemo(() => (tables == null ? void 0 : tables.map((table) => table.name)) || [], [tables]);\n  const onTablesChange = (tableNames, schemaName) => {\n    if (!schemaName) {\n      return;\n    }\n    const currentTables = [...tables];\n    const tablesToAdd = tableNames.filter((name) => {\n      const index = currentTables.findIndex((table) => table.name === name);\n      if (index >= 0) {\n        currentTables.splice(index, 1);\n        return false;\n      }\n      return true;\n    });\n    tablesToAdd.forEach((tableName) => dispatch(addTable(queryEditor, database, tableName, schemaName)));\n    dispatch(removeTables(currentTables));\n  };\n  const onToggleTable = (updatedTables) => {\n    tables.forEach((table) => {\n      if (!_includesInstanceProperty(updatedTables).call(updatedTables, table.id.toString()) && table.expanded) {\n        dispatch(collapseTable(table));\n      } else\n      if (_includesInstanceProperty(updatedTables).call(updatedTables, table.id.toString()) &&\n      !table.expanded) {\n        dispatch(expandTable(table));\n      }\n    });\n  };\n  const renderExpandIconWithTooltip = (_ref4) => {let { isActive } = _ref4;return ___EmotionJSX(IconTooltip, { css: css`\n        transform: rotate(90deg);\n      `, \"aria-label\": \"Collapse\", tooltip: isActive ? t('Collapse table preview') : t('Expand table preview') },\n    ___EmotionJSX(Icons.RightOutlined, { iconSize: \"s\", css: css`\n          transform: ${isActive ? 'rotateY(180deg)' : ''};\n        ` }));};\n\n  const shouldShowReset = window.location.search === '?reset=1';\n  const tableMetaDataHeight = height - 130; // 130 is the height of the selects above\n  const handleSchemaChange = useCallback((schema) => {\n    if (queryEditor) {\n      dispatch(queryEditorSetSchema(queryEditor, schema));\n    }\n  }, [dispatch, queryEditor]);\n  const handleDbList = useCallback((result) => {\n    dispatch(setDatabases(result));\n  }, [dispatch]);\n  const handleError = useCallback((message) => {\n    dispatch(addDangerToast(message));\n  }, [dispatch]);\n  const handleResetState = useCallback(() => {\n    dispatch(resetState());\n  }, [dispatch]);\n  return ___EmotionJSX(LeftBarStyles, { \"data-test\": \"sql-editor-left-bar\" },\n  ___EmotionJSX(TableSelectorMultiple, { onEmptyResults: onEmptyResults, emptyState: emptyStateComponent(emptyResultsWithSearch), database: userSelectedDb, getDbList: handleDbList, handleError: handleError, onDbChange: onDbChange, onSchemaChange: handleSchemaChange, onTableSelectChange: onTablesChange, schema: schema, tableValue: selectedTableNames, sqlLabMode: true }),\n  ___EmotionJSX(\"div\", { className: \"divider\" }),\n  ___EmotionJSX(StyledScrollbarContainer, null,\n  ___EmotionJSX(\"div\", { css: css`\n            height: ${tableMetaDataHeight}px;\n          ` },\n  ___EmotionJSX(Collapse, { activeKey: tables.\n    filter((_ref5) => {let { expanded } = _ref5;return expanded;}).\n    map((_ref6) => {let { id } = _ref6;return id;}), css: collapseStyles, expandIconPosition: \"right\", ghost: true, onChange: onToggleTable, expandIcon: renderExpandIconWithTooltip },\n  tables.map((table) => ___EmotionJSX(TableElement, { table: table, key: table.id }))))),\n\n\n\n  shouldShowReset && ___EmotionJSX(Button, { buttonSize: \"small\", buttonStyle: \"danger\", onClick: handleResetState },\n  ___EmotionJSX(\"i\", { className: \"fa fa-bomb\" }), \" \", t('Reset state')));\n\n\n};__signature__(SqlEditorLeftBar, \"useDispatch{dispatch}\\nuseQueryEditor{queryEditor}\\nuseState{[emptyResultsWithSearch, setEmptyResultsWithSearch](false)}\\nuseState{[userSelectedDb, setUserSelected](null)}\\nuseEffect{}\\nuseMemo{selectedTableNames}\\nuseCallback{handleSchemaChange}\\nuseCallback{handleDbList}\\nuseCallback{handleError}\\nuseCallback{handleResetState}\", () => [useDispatch, useQueryEditor]);const _default =\nSqlEditorLeftBar;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(StyledScrollbarContainer, \"StyledScrollbarContainer\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/SqlLab/components/SqlEditorLeftBar/index.tsx\");reactHotLoader.register(collapseStyles, \"collapseStyles\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/SqlLab/components/SqlEditorLeftBar/index.tsx\");reactHotLoader.register(LeftBarStyles, \"LeftBarStyles\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/SqlLab/components/SqlEditorLeftBar/index.tsx\");reactHotLoader.register(SqlEditorLeftBar, \"SqlEditorLeftBar\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/SqlLab/components/SqlEditorLeftBar/index.tsx\");reactHotLoader.register(_default, \"default\", \"/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/SqlLab/components/SqlEditorLeftBar/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"mappings":"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","names":["React","useEffect","useCallback","useMemo","useState","useDispatch","querystring","queryEditorSetDb","queryEditorSetFunctionNames","addTable","removeTables","collapseTable","expandTable","queryEditorSetSchema","setDatabases","addDangerToast","resetState","Button","t","styled","css","Collapse","Icons","TableSelectorMultiple","IconTooltip","useQueryEditor","emptyStateComponent","getItem","LocalStorageKeys","setItem","TableElement","StyledScrollbarContainer","div","collapseStyles","theme","gridUnit","colors","primary","dark1","dark2","LeftBarStyles","grayscale","light4","SqlEditorLeftBar","database","queryEditorId","tables","height","setEmptyState","dispatch","queryEditor","emptyResultsWithSearch","setEmptyResultsWithSearch","userSelectedDb","setUserSelected","schema","bool","parse","window","location","search","db","userSelected","onEmptyResults","searchText","onDbChange","id","dbId","selectedTableNames","map","table","name","onTablesChange","tableNames","schemaName","currentTables","tablesToAdd","filter","index","findIndex","splice","forEach","tableName","onToggleTable","updatedTables","toString","expanded","renderExpandIconWithTooltip","isActive","shouldShowReset","tableMetaDataHeight","handleSchemaChange","handleDbList","result","handleError","message","handleResetState"],"sourceRoot":"","sources":["/Users/bogdankyryliuk/code/opensource/superset/superset-frontend/src/SqlLab/components/SqlEditorLeftBar/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, {\n  useEffect,\n  useCallback,\n  useMemo,\n  useState,\n  Dispatch,\n  SetStateAction,\n} from 'react';\nimport { useDispatch } from 'react-redux';\nimport querystring from 'query-string';\n\nimport {\n  queryEditorSetDb,\n  queryEditorSetFunctionNames,\n  addTable,\n  removeTables,\n  collapseTable,\n  expandTable,\n  queryEditorSetSchema,\n  setDatabases,\n  addDangerToast,\n  resetState,\n} from 'src/SqlLab/actions/sqlLab';\nimport Button from 'src/components/Button';\nimport { t, styled, css, SupersetTheme } from '@superset-ui/core';\nimport Collapse from 'src/components/Collapse';\nimport Icons from 'src/components/Icons';\nimport { TableSelectorMultiple } from 'src/components/TableSelector';\nimport { IconTooltip } from 'src/components/IconTooltip';\nimport useQueryEditor from 'src/SqlLab/hooks/useQueryEditor';\nimport { DatabaseObject } from 'src/components/DatabaseSelector';\nimport { emptyStateComponent } from 'src/components/EmptyState';\nimport {\n  getItem,\n  LocalStorageKeys,\n  setItem,\n} from 'src/utils/localStorageHelpers';\nimport TableElement, { Table } from '../TableElement';\n\ninterface ExtendedTable extends Table {\n  expanded: boolean;\n}\n\ninterface SqlEditorLeftBarProps {\n  queryEditorId: string;\n  height?: number;\n  tables?: ExtendedTable[];\n  database: DatabaseObject;\n  setEmptyState: Dispatch<SetStateAction<boolean>>;\n}\n\nconst StyledScrollbarContainer = styled.div`\n  flex: 1 1 auto;\n  overflow: auto;\n`;\n\nconst collapseStyles = (theme: SupersetTheme) => css`\n  .ant-collapse-item {\n    margin-bottom: ${theme.gridUnit * 3}px;\n  }\n  .ant-collapse-header {\n    padding: 0px !important;\n    display: flex;\n    align-items: center;\n  }\n  .ant-collapse-content-box {\n    padding: 0px ${theme.gridUnit * 4}px 0px 0px !important;\n  }\n  .ant-collapse-arrow {\n    top: ${theme.gridUnit * 2}px !important;\n    color: ${theme.colors.primary.dark1} !important;\n    &:hover {\n      color: ${theme.colors.primary.dark2} !important;\n    }\n  }\n`;\n\nconst LeftBarStyles = styled.div`\n  ${({ theme }) => css`\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n\n    .divider {\n      border-bottom: 1px solid ${theme.colors.grayscale.light4};\n      margin: ${theme.gridUnit * 4}px 0;\n    }\n  `}\n`;\n\nconst SqlEditorLeftBar = ({\n  database,\n  queryEditorId,\n  tables = [],\n  height = 500,\n  setEmptyState,\n}: SqlEditorLeftBarProps) => {\n  const dispatch = useDispatch();\n  const queryEditor = useQueryEditor(queryEditorId, ['dbId', 'schema']);\n\n  const [emptyResultsWithSearch, setEmptyResultsWithSearch] = useState(false);\n  const [userSelectedDb, setUserSelected] = useState<DatabaseObject | null>(\n    null,\n  );\n  const { schema } = queryEditor;\n\n  useEffect(() => {\n    const bool = querystring.parse(window.location.search).db;\n    const userSelected = getItem(\n      LocalStorageKeys.db,\n      null,\n    ) as DatabaseObject | null;\n\n    if (bool && userSelected) {\n      setUserSelected(userSelected);\n      setItem(LocalStorageKeys.db, null);\n    } else setUserSelected(database);\n  }, [database]);\n\n  const onEmptyResults = (searchText?: string) => {\n    setEmptyResultsWithSearch(!!searchText);\n  };\n\n  const onDbChange = ({ id: dbId }: { id: number }) => {\n    setEmptyState(false);\n    dispatch(queryEditorSetDb(queryEditor, dbId));\n    dispatch(queryEditorSetFunctionNames(queryEditor, dbId));\n  };\n\n  const selectedTableNames = useMemo(\n    () => tables?.map(table => table.name) || [],\n    [tables],\n  );\n\n  const onTablesChange = (tableNames: string[], schemaName: string) => {\n    if (!schemaName) {\n      return;\n    }\n\n    const currentTables = [...tables];\n    const tablesToAdd = tableNames.filter(name => {\n      const index = currentTables.findIndex(table => table.name === name);\n      if (index >= 0) {\n        currentTables.splice(index, 1);\n        return false;\n      }\n\n      return true;\n    });\n\n    tablesToAdd.forEach(tableName =>\n      dispatch(addTable(queryEditor, database, tableName, schemaName)),\n    );\n\n    dispatch(removeTables(currentTables));\n  };\n\n  const onToggleTable = (updatedTables: string[]) => {\n    tables.forEach((table: ExtendedTable) => {\n      if (!updatedTables.includes(table.id.toString()) && table.expanded) {\n        dispatch(collapseTable(table));\n      } else if (\n        updatedTables.includes(table.id.toString()) &&\n        !table.expanded\n      ) {\n        dispatch(expandTable(table));\n      }\n    });\n  };\n\n  const renderExpandIconWithTooltip = ({ isActive }: { isActive: boolean }) => (\n    <IconTooltip\n      css={css`\n        transform: rotate(90deg);\n      `}\n      aria-label=\"Collapse\"\n      tooltip={\n        isActive ? t('Collapse table preview') : t('Expand table preview')\n      }\n    >\n      <Icons.RightOutlined\n        iconSize=\"s\"\n        css={css`\n          transform: ${isActive ? 'rotateY(180deg)' : ''};\n        `}\n      />\n    </IconTooltip>\n  );\n\n  const shouldShowReset = window.location.search === '?reset=1';\n  const tableMetaDataHeight = height - 130; // 130 is the height of the selects above\n\n  const handleSchemaChange = useCallback(\n    (schema: string) => {\n      if (queryEditor) {\n        dispatch(queryEditorSetSchema(queryEditor, schema));\n      }\n    },\n    [dispatch, queryEditor],\n  );\n\n  const handleDbList = useCallback(\n    (result: DatabaseObject) => {\n      dispatch(setDatabases(result));\n    },\n    [dispatch],\n  );\n\n  const handleError = useCallback(\n    (message: string) => {\n      dispatch(addDangerToast(message));\n    },\n    [dispatch],\n  );\n\n  const handleResetState = useCallback(() => {\n    dispatch(resetState());\n  }, [dispatch]);\n\n  return (\n    <LeftBarStyles data-test=\"sql-editor-left-bar\">\n      <TableSelectorMultiple\n        onEmptyResults={onEmptyResults}\n        emptyState={emptyStateComponent(emptyResultsWithSearch)}\n        database={userSelectedDb}\n        getDbList={handleDbList}\n        handleError={handleError}\n        onDbChange={onDbChange}\n        onSchemaChange={handleSchemaChange}\n        onTableSelectChange={onTablesChange}\n        schema={schema}\n        tableValue={selectedTableNames}\n        sqlLabMode\n      />\n      <div className=\"divider\" />\n      <StyledScrollbarContainer>\n        <div\n          css={css`\n            height: ${tableMetaDataHeight}px;\n          `}\n        >\n          <Collapse\n            activeKey={tables\n              .filter(({ expanded }) => expanded)\n              .map(({ id }) => id)}\n            css={collapseStyles}\n            expandIconPosition=\"right\"\n            ghost\n            onChange={onToggleTable}\n            expandIcon={renderExpandIconWithTooltip}\n          >\n            {tables.map(table => (\n              <TableElement table={table} key={table.id} />\n            ))}\n          </Collapse>\n        </div>\n      </StyledScrollbarContainer>\n      {shouldShowReset && (\n        <Button\n          buttonSize=\"small\"\n          buttonStyle=\"danger\"\n          onClick={handleResetState}\n        >\n          <i className=\"fa fa-bomb\" /> {t('Reset state')}\n        </Button>\n      )}\n    </LeftBarStyles>\n  );\n};\n\nexport default SqlEditorLeftBar;\n"]},"metadata":{},"sourceType":"module"}