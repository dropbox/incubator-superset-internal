{"ast":null,"code":"import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { CategoricalColorNamespace, getColumnLabel, getMetricLabel, getNumberFormatter, getTimeFormatter, NumberFormats, getValueFormatter } from '@superset-ui/core';\nimport { DEFAULT_FORM_DATA as DEFAULT_TREEMAP_FORM_DATA, EchartsTreemapLabelType } from './types';\nimport { formatSeriesName, getColtypesMapping } from '../utils/series';\nimport { COLOR_SATURATION, BORDER_WIDTH, GAP_WIDTH, LABEL_FONTSIZE, extractTreePathInfo, BORDER_COLOR } from './constants';\nimport { OpacityEnum } from '../constants';\nimport { getDefaultTooltip } from '../utils/tooltip';\nimport { treeBuilder } from '../utils/treeBuilder';\nexport function formatLabel(_ref) {let { params, labelType, numberFormatter } = _ref;\n  const { name = '', value } = params;\n  const formattedValue = numberFormatter(value);\n  switch (labelType) {\n    case EchartsTreemapLabelType.Key:\n      return name;\n    case EchartsTreemapLabelType.Value:\n      return formattedValue;\n    case EchartsTreemapLabelType.KeyValue:\n      return `${name}: ${formattedValue}`;\n    default:\n      return name;}\n\n}\nexport function formatTooltip(_ref2) {let { params, numberFormatter } = _ref2;\n  const { value, treePathInfo = [] } = params;\n  const formattedValue = numberFormatter(value);\n  const { metricLabel, treePath } = extractTreePathInfo(treePathInfo);\n  const percentFormatter = getNumberFormatter(NumberFormats.PERCENT_2_POINT);\n  let formattedPercent = '';\n  // the last item is current node, here we should find the parent node\n  const currentNode = treePathInfo[treePathInfo.length - 1];\n  const parentNode = treePathInfo[treePathInfo.length - 2];\n  if (parentNode) {\n    const percent = parentNode.value ?\n    currentNode.value / parentNode.value :\n    0;\n    formattedPercent = percentFormatter(percent);\n  }\n  // groupby1/groupby2/...\n  // metric: value (percent of parent)\n  return [\n  `<div>${treePath.join(' â–¸ ')}</div>`,\n  `${metricLabel}: ${formattedValue}`,\n  formattedPercent ? ` (${formattedPercent})` : ''].\n  join('');\n}\nexport default function transformProps(chartProps) {\n  const { formData, height, queriesData, width, hooks, filterState, theme, inContextMenu, emitCrossFilters, datasource } = chartProps;\n  const { data = [] } = queriesData[0];\n  const { columnFormats = {}, currencyFormats = {} } = datasource;\n  const { setDataMask = () => {}, onContextMenu } = hooks;\n  const coltypeMapping = getColtypesMapping(queriesData[0]);\n  const { colorScheme, groupby = [], metric = '', labelType, labelPosition, numberFormat, dateFormat, showLabels, showUpperLabels, dashboardId, sliceId } = {\n    ...DEFAULT_TREEMAP_FORM_DATA,\n    ...formData };\n\n  const refs = {};\n  const colorFn = CategoricalColorNamespace.getScale(colorScheme);\n  const numberFormatter = getValueFormatter(metric, currencyFormats, columnFormats, numberFormat);\n  const formatter = (params) => formatLabel({\n    params,\n    numberFormatter,\n    labelType });\n\n  const columnsLabelMap = new Map();\n  const metricLabel = getMetricLabel(metric);\n  const groupbyLabels = groupby.map(getColumnLabel);\n  const treeData = treeBuilder(data, groupbyLabels, metricLabel);\n  const traverse = (treeNodes, path) => treeNodes.map((treeNode) => {var _treeNode$children;\n    const { name: nodeName, value, groupBy } = treeNode;\n    const name = formatSeriesName(nodeName, {\n      numberFormatter,\n      timeFormatter: getTimeFormatter(dateFormat),\n      ...(coltypeMapping[groupBy] && {\n        coltype: coltypeMapping[groupBy] }) });\n\n\n    const newPath = path.concat(name);\n    let item = {\n      name,\n      value };\n\n    if ((_treeNode$children = treeNode.children) != null && _treeNode$children.length) {\n      item = {\n        ...item,\n        children: traverse(treeNode.children, newPath),\n        colorSaturation: COLOR_SATURATION,\n        itemStyle: {\n          borderColor: BORDER_COLOR,\n          color: colorFn(name, sliceId),\n          borderWidth: BORDER_WIDTH,\n          gapWidth: GAP_WIDTH } };\n\n\n    } else\n    {var _context;\n      const joinedName = newPath.join(',');\n      // map(joined_name: [columnLabel_1, columnLabel_2, ...])\n      columnsLabelMap.set(joinedName, newPath);\n      if (filterState.selectedValues &&\n      !_includesInstanceProperty(_context = filterState.selectedValues).call(_context, joinedName)) {\n        item = {\n          ...item,\n          itemStyle: {\n            colorAlpha: OpacityEnum.SemiTransparent },\n\n          label: {\n            color: `rgba(0, 0, 0, ${OpacityEnum.SemiTransparent})` } };\n\n\n      }\n    }\n    return item;\n  });\n  const transformedData = [\n  {\n    name: metricLabel,\n    colorSaturation: COLOR_SATURATION,\n    itemStyle: {\n      borderColor: BORDER_COLOR,\n      color: colorFn(`${metricLabel}`, sliceId),\n      borderWidth: BORDER_WIDTH,\n      gapWidth: GAP_WIDTH },\n\n    upperLabel: {\n      show: false },\n\n    children: traverse(treeData, []) }];\n\n\n  // set a default color when metric values are 0 over all.\n  const levels = [\n  {\n    upperLabel: {\n      show: false },\n\n    label: {\n      show: false },\n\n    itemStyle: {\n      color: theme.colors.primary.base } }];\n\n\n\n  const series = [\n  {\n    type: 'treemap',\n    width: '100%',\n    height: '100%',\n    nodeClick: undefined,\n    roam: !dashboardId,\n    breadcrumb: {\n      show: false,\n      emptyItemWidth: 25 },\n\n    emphasis: {\n      label: {\n        show: true } },\n\n\n    levels,\n    label: {\n      show: showLabels,\n      position: labelPosition,\n      formatter,\n      color: theme.colors.grayscale.dark2,\n      fontSize: LABEL_FONTSIZE },\n\n    upperLabel: {\n      show: showUpperLabels,\n      formatter,\n      textBorderColor: 'transparent',\n      fontSize: LABEL_FONTSIZE },\n\n    data: transformedData }];\n\n\n  const echartOptions = {\n    tooltip: {\n      ...getDefaultTooltip(refs),\n      show: !inContextMenu,\n      trigger: 'item',\n      formatter: (params) => formatTooltip({\n        params,\n        numberFormatter }) },\n\n\n    series };\n\n  return {\n    formData,\n    width,\n    height,\n    echartOptions,\n    setDataMask,\n    emitCrossFilters,\n    labelMap: Object.fromEntries(columnsLabelMap),\n    groupby,\n    selectedValues: filterState.selectedValues || [],\n    onContextMenu,\n    refs,\n    coltypeMapping };\n\n}","map":{"version":3,"mappings":"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","names":["CategoricalColorNamespace","getColumnLabel","getMetricLabel","getNumberFormatter","getTimeFormatter","NumberFormats","getValueFormatter","DEFAULT_FORM_DATA","DEFAULT_TREEMAP_FORM_DATA","EchartsTreemapLabelType","formatSeriesName","getColtypesMapping","COLOR_SATURATION","BORDER_WIDTH","GAP_WIDTH","LABEL_FONTSIZE","extractTreePathInfo","BORDER_COLOR","OpacityEnum","getDefaultTooltip","treeBuilder","formatLabel","params","labelType","numberFormatter","name","value","formattedValue","Key","Value","KeyValue","formatTooltip","treePathInfo","metricLabel","treePath","percentFormatter","PERCENT_2_POINT","formattedPercent","currentNode","length","parentNode","percent","join","transformProps","chartProps","formData","height","queriesData","width","hooks","filterState","theme","inContextMenu","emitCrossFilters","datasource","data","columnFormats","currencyFormats","setDataMask","onContextMenu","coltypeMapping","colorScheme","groupby","metric","labelPosition","numberFormat","dateFormat","showLabels","showUpperLabels","dashboardId","sliceId","refs","colorFn","getScale","formatter","columnsLabelMap","Map","groupbyLabels","map","treeData","traverse","treeNodes","path","nodeName","groupBy","treeNode","timeFormatter","coltype","newPath","concat","item","children","colorSaturation","itemStyle","borderColor","color","borderWidth","gapWidth","joinedName","set","selectedValues","colorAlpha","SemiTransparent","label","transformedData","upperLabel","show","levels","colors","primary","base","series","type","nodeClick","undefined","roam","breadcrumb","emptyItemWidth","emphasis","position","grayscale","dark2","fontSize","textBorderColor","echartOptions","tooltip","trigger","labelMap","Object","fromEntries"],"sourceRoot":"","sources":["/Users/zhaorui/src/incubator-superset-internal/superset-frontend/plugins/plugin-chart-echarts/src/Treemap/transformProps.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  CategoricalColorNamespace,\n  getColumnLabel,\n  getMetricLabel,\n  getNumberFormatter,\n  getTimeFormatter,\n  NumberFormats,\n  ValueFormatter,\n  getValueFormatter,\n} from '@superset-ui/core';\nimport { TreemapSeriesNodeItemOption } from 'echarts/types/src/chart/treemap/TreemapSeries';\nimport { EChartsCoreOption, TreemapSeriesOption } from 'echarts';\nimport {\n  DEFAULT_FORM_DATA as DEFAULT_TREEMAP_FORM_DATA,\n  EchartsTreemapChartProps,\n  EchartsTreemapFormData,\n  EchartsTreemapLabelType,\n  TreemapSeriesCallbackDataParams,\n  TreemapTransformedProps,\n} from './types';\nimport { formatSeriesName, getColtypesMapping } from '../utils/series';\nimport {\n  COLOR_SATURATION,\n  BORDER_WIDTH,\n  GAP_WIDTH,\n  LABEL_FONTSIZE,\n  extractTreePathInfo,\n  BORDER_COLOR,\n} from './constants';\nimport { OpacityEnum } from '../constants';\nimport { getDefaultTooltip } from '../utils/tooltip';\nimport { Refs } from '../types';\nimport { treeBuilder, TreeNode } from '../utils/treeBuilder';\n\nexport function formatLabel({\n  params,\n  labelType,\n  numberFormatter,\n}: {\n  params: TreemapSeriesCallbackDataParams;\n  labelType: EchartsTreemapLabelType;\n  numberFormatter: ValueFormatter;\n}): string {\n  const { name = '', value } = params;\n  const formattedValue = numberFormatter(value as number);\n\n  switch (labelType) {\n    case EchartsTreemapLabelType.Key:\n      return name;\n    case EchartsTreemapLabelType.Value:\n      return formattedValue;\n    case EchartsTreemapLabelType.KeyValue:\n      return `${name}: ${formattedValue}`;\n    default:\n      return name;\n  }\n}\n\nexport function formatTooltip({\n  params,\n  numberFormatter,\n}: {\n  params: TreemapSeriesCallbackDataParams;\n  numberFormatter: ValueFormatter;\n}): string {\n  const { value, treePathInfo = [] } = params;\n  const formattedValue = numberFormatter(value as number);\n  const { metricLabel, treePath } = extractTreePathInfo(treePathInfo);\n  const percentFormatter = getNumberFormatter(NumberFormats.PERCENT_2_POINT);\n\n  let formattedPercent = '';\n  // the last item is current node, here we should find the parent node\n  const currentNode = treePathInfo[treePathInfo.length - 1];\n  const parentNode = treePathInfo[treePathInfo.length - 2];\n  if (parentNode) {\n    const percent: number = parentNode.value\n      ? (currentNode.value as number) / (parentNode.value as number)\n      : 0;\n    formattedPercent = percentFormatter(percent);\n  }\n\n  // groupby1/groupby2/...\n  // metric: value (percent of parent)\n  return [\n    `<div>${treePath.join(' â–¸ ')}</div>`,\n    `${metricLabel}: ${formattedValue}`,\n    formattedPercent ? ` (${formattedPercent})` : '',\n  ].join('');\n}\n\nexport default function transformProps(\n  chartProps: EchartsTreemapChartProps,\n): TreemapTransformedProps {\n  const {\n    formData,\n    height,\n    queriesData,\n    width,\n    hooks,\n    filterState,\n    theme,\n    inContextMenu,\n    emitCrossFilters,\n    datasource,\n  } = chartProps;\n  const { data = [] } = queriesData[0];\n  const { columnFormats = {}, currencyFormats = {} } = datasource;\n  const { setDataMask = () => {}, onContextMenu } = hooks;\n  const coltypeMapping = getColtypesMapping(queriesData[0]);\n\n  const {\n    colorScheme,\n    groupby = [],\n    metric = '',\n    labelType,\n    labelPosition,\n    numberFormat,\n    dateFormat,\n    showLabels,\n    showUpperLabels,\n    dashboardId,\n    sliceId,\n  }: EchartsTreemapFormData = {\n    ...DEFAULT_TREEMAP_FORM_DATA,\n    ...formData,\n  };\n  const refs: Refs = {};\n  const colorFn = CategoricalColorNamespace.getScale(colorScheme as string);\n  const numberFormatter = getValueFormatter(\n    metric,\n    currencyFormats,\n    columnFormats,\n    numberFormat,\n  );\n\n  const formatter = (params: TreemapSeriesCallbackDataParams) =>\n    formatLabel({\n      params,\n      numberFormatter,\n      labelType,\n    });\n\n  const columnsLabelMap = new Map<string, string[]>();\n  const metricLabel = getMetricLabel(metric);\n  const groupbyLabels = groupby.map(getColumnLabel);\n  const treeData = treeBuilder(data, groupbyLabels, metricLabel);\n  const traverse = (treeNodes: TreeNode[], path: string[]) =>\n    treeNodes.map(treeNode => {\n      const { name: nodeName, value, groupBy } = treeNode;\n      const name = formatSeriesName(nodeName, {\n        numberFormatter,\n        timeFormatter: getTimeFormatter(dateFormat),\n        ...(coltypeMapping[groupBy] && {\n          coltype: coltypeMapping[groupBy],\n        }),\n      });\n      const newPath = path.concat(name);\n      let item: TreemapSeriesNodeItemOption = {\n        name,\n        value,\n      };\n      if (treeNode.children?.length) {\n        item = {\n          ...item,\n          children: traverse(treeNode.children, newPath),\n          colorSaturation: COLOR_SATURATION,\n          itemStyle: {\n            borderColor: BORDER_COLOR,\n            color: colorFn(name, sliceId),\n            borderWidth: BORDER_WIDTH,\n            gapWidth: GAP_WIDTH,\n          },\n        };\n      } else {\n        const joinedName = newPath.join(',');\n        // map(joined_name: [columnLabel_1, columnLabel_2, ...])\n        columnsLabelMap.set(joinedName, newPath);\n        if (\n          filterState.selectedValues &&\n          !filterState.selectedValues.includes(joinedName)\n        ) {\n          item = {\n            ...item,\n            itemStyle: {\n              colorAlpha: OpacityEnum.SemiTransparent,\n            },\n            label: {\n              color: `rgba(0, 0, 0, ${OpacityEnum.SemiTransparent})`,\n            },\n          };\n        }\n      }\n      return item;\n    });\n\n  const transformedData: TreemapSeriesNodeItemOption[] = [\n    {\n      name: metricLabel,\n      colorSaturation: COLOR_SATURATION,\n      itemStyle: {\n        borderColor: BORDER_COLOR,\n        color: colorFn(`${metricLabel}`, sliceId),\n        borderWidth: BORDER_WIDTH,\n        gapWidth: GAP_WIDTH,\n      },\n      upperLabel: {\n        show: false,\n      },\n      children: traverse(treeData, []),\n    },\n  ];\n\n  // set a default color when metric values are 0 over all.\n  const levels = [\n    {\n      upperLabel: {\n        show: false,\n      },\n      label: {\n        show: false,\n      },\n      itemStyle: {\n        color: theme.colors.primary.base,\n      },\n    },\n  ];\n\n  const series: TreemapSeriesOption[] = [\n    {\n      type: 'treemap',\n      width: '100%',\n      height: '100%',\n      nodeClick: undefined,\n      roam: !dashboardId,\n      breadcrumb: {\n        show: false,\n        emptyItemWidth: 25,\n      },\n      emphasis: {\n        label: {\n          show: true,\n        },\n      },\n      levels,\n      label: {\n        show: showLabels,\n        position: labelPosition,\n        formatter,\n        color: theme.colors.grayscale.dark2,\n        fontSize: LABEL_FONTSIZE,\n      },\n      upperLabel: {\n        show: showUpperLabels,\n        formatter,\n        textBorderColor: 'transparent',\n        fontSize: LABEL_FONTSIZE,\n      },\n      data: transformedData,\n    },\n  ];\n\n  const echartOptions: EChartsCoreOption = {\n    tooltip: {\n      ...getDefaultTooltip(refs),\n      show: !inContextMenu,\n      trigger: 'item',\n      formatter: (params: any) =>\n        formatTooltip({\n          params,\n          numberFormatter,\n        }),\n    },\n    series,\n  };\n\n  return {\n    formData,\n    width,\n    height,\n    echartOptions,\n    setDataMask,\n    emitCrossFilters,\n    labelMap: Object.fromEntries(columnsLabelMap),\n    groupby,\n    selectedValues: filterState.selectedValues || [],\n    onContextMenu,\n    refs,\n    coltypeMapping,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}