"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.restrictNetwork = void 0;
const net_1 = require("net");
const utils = __importStar(require("@applitools/utils"));
const originalSocketConnect = net_1.Socket.prototype.connect;
function restrictNetwork(validate) {
    net_1.Socket.prototype.connect = restrictedConnect;
    return () => (net_1.Socket.prototype.connect = originalSocketConnect);
    function restrictedConnect(...args) {
        var _a;
        let options;
        if (utils.types.isArray(args[0])) {
            // this is something that nodejs impl uses internally
            options = args[0][0];
        }
        else if (utils.types.isObject(args[0])) {
            options = args[0];
        }
        else if (utils.types.isString(args[0]) && !utils.types.isInteger(Number(args[0]))) {
            options = { path: args[0] };
        }
        else {
            options = { port: args[0], host: utils.types.isString(args[1]) ? args[1] : 'localhost' };
        }
        if (!validate(options)) {
            const error = utils.types.has(options, 'port')
                ? new Error(`Connection to tcp address ${(_a = options.host) !== null && _a !== void 0 ? _a : 'localhost'}:${options.port} is restricted`)
                : new Error(`Connection to ipc address ${options.path} is restricted`);
            throw error;
        }
        return originalSocketConnect.call(this, ...args);
    }
}
exports.restrictNetwork = restrictNetwork;
