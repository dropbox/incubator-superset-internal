"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeProxyServer = void 0;
const logger_1 = require("@applitools/logger");
const generate_certificate_1 = require("./generate-certificate");
const http = __importStar(require("http"));
const https = __importStar(require("https"));
const net = __importStar(require("net"));
async function makeProxyServer({ agentId = 'TestProxy', logger } = {}) {
    var _a;
    logger = (_a = logger === null || logger === void 0 ? void 0 : logger.extend({ label: 'proxy-server' })) !== null && _a !== void 0 ? _a : (0, logger_1.makeLogger)({ label: 'proxy-server' });
    const proxyServer = await makeServer();
    proxyServer.on('request', (request, response) => {
        const proxyRequest = https.request(request.url, {
            method: request.method,
            headers: { ...request.headers, 'x-proxy-agent': agentId },
            rejectUnauthorized: false,
        });
        proxyRequest.on('response', proxyResponse => {
            response.writeHead(proxyResponse.statusCode, proxyResponse.headers);
            proxyResponse.pipe(response);
        });
        proxyRequest.on('error', err => {
            logger.error(err);
        });
        request.pipe(proxyRequest);
    });
    proxyServer.on('connect', (_, clientSocket, head) => {
        const serverSocket = net.createConnection(getPort(spoofingServer), 'localhost', function () {
            clientSocket.write('HTTP/1.1 200 Connection Established\r\n\r\n');
            serverSocket.write(head);
            serverSocket.pipe(clientSocket);
            clientSocket.pipe(serverSocket);
        });
        serverSocket.once('end', () => {
            clientSocket.destroy();
        });
        serverSocket.on('error', err => {
            logger.error(err.message);
        });
    });
    const authority = await (0, generate_certificate_1.generateCertificate)({ days: 1 });
    const spoofingServer = await makeServer(authority);
    spoofingServer.on('request', (request, response) => {
        const proxyRequest = http.request({
            host: 'localhost',
            port: getPort(proxyServer),
            method: request.method,
            path: `https://${request.headers.host}${request.url}`,
            headers: request.headers,
        });
        proxyRequest.on('response', proxyResponse => {
            response.writeHead(proxyResponse.statusCode, proxyResponse.headers);
            proxyResponse.pipe(response);
        });
        proxyRequest.on('error', err => {
            logger.error(err);
        });
        request.pipe(proxyRequest);
    });
    return {
        server: proxyServer,
        port: getPort(proxyServer),
        close: () => {
            proxyServer.close();
            spoofingServer.close();
        },
    };
}
exports.makeProxyServer = makeProxyServer;
async function makeServer(options) {
    const secure = Boolean((options === null || options === void 0 ? void 0 : options.cert) && (options === null || options === void 0 ? void 0 : options.key));
    const server = secure ? https.createServer(options) : http.createServer();
    return new Promise((resolve, reject) => {
        server.listen(0);
        server.on('listening', () => resolve(server));
        server.on('error', reject);
    });
}
function getPort(server) {
    return server.address().port;
}
