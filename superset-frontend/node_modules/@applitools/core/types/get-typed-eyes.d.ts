import type { TypedCore, TypedEyes, OpenSettings } from './types';
import { type Renderer } from '@applitools/ufg-client';
import { type Logger } from '@applitools/logger';
type Options<TDriver, TContext, TElement, TSelector, TType extends 'classic' | 'ufg'> = {
    type: TType;
    settings: OpenSettings<TType>;
    target?: TDriver;
    cores: {
        [TKey in 'classic' | 'ufg']: TypedCore<TDriver, TContext, TElement, TSelector, TKey>;
    };
    logger?: Logger;
};
export declare function makeGetTypedEyes<TDriver, TContext, TElement, TSelector, TDefaultType extends 'classic' | 'ufg'>({ type: defaultType, settings: defaultSettings, target, cores, logger: defaultLogger, }: Options<TDriver, TContext, TElement, TSelector, TDefaultType>): <TType extends "classic" | "ufg" = TDefaultType>({ type, settings, logger, }?: {
    type?: TType;
    settings?: {
        type: 'web' | 'native';
        renderers: Renderer[];
    };
    logger?: Logger;
}) => Promise<TypedEyes<TDriver, TContext, TElement, TSelector, TType, import("./types").Target<TDriver, TContext, TElement, TSelector, TType>>>;
export {};
