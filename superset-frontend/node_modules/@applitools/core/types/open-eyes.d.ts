import type { TypedCore, Batch, Eyes, Config, OpenSettings } from './types';
import type { Core as BaseCore } from '@applitools/core-base';
import { type Logger } from '@applitools/logger';
import { type SpecDriver } from '@applitools/driver';
type Options<TDriver, TContext, TElement, TSelector, TType extends 'classic' | 'ufg'> = {
    type?: TType;
    concurrency?: number;
    batch?: Batch;
    core: BaseCore;
    cores?: {
        [TKey in 'classic' | 'ufg']: TypedCore<TDriver, TContext, TElement, TSelector, TKey>;
    };
    spec?: SpecDriver<TDriver, TContext, TElement, TSelector>;
    logger?: Logger;
};
export declare function makeOpenEyes<TDriver, TContext, TElement, TSelector, TDefaultType extends 'classic' | 'ufg' = 'classic'>({ type: defaultType, concurrency, batch, core, cores, spec, logger: defaultLogger, }: Options<TDriver, TContext, TElement, TSelector, TDefaultType>): <TType extends "classic" | "ufg" = TDefaultType>({ type, settings, config, target, logger, }: {
    type?: TType;
    settings?: Partial<OpenSettings<TDefaultType> & OpenSettings<TType>>;
    config?: Config<TElement, TSelector, TDefaultType> & Config<TElement, TSelector, TType>;
    target?: TDriver;
    logger?: Logger;
}) => Promise<Eyes<TDriver, TContext, TElement, TSelector, TType, import("./types").Target<TDriver, TContext, TElement, TSelector, TType>>>;
export {};
