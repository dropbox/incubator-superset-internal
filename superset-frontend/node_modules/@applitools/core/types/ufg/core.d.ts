import type { Core } from './types';
import type { Core as BaseCore } from '@applitools/core-base';
import { type UFGClient } from '@applitools/ufg-client';
import { type SpecDriver } from '@applitools/driver';
import { type Logger } from '@applitools/logger';
type Options<TDriver, TContext, TElement, TSelector> = {
    concurrency: number;
    spec?: SpecDriver<TDriver, TContext, TElement, TSelector>;
    client?: UFGClient;
    core?: BaseCore;
    agentId?: string;
    cwd?: string;
    logger?: Logger;
};
export declare function makeCore<TDriver, TContext, TElement, TSelector>({ concurrency, spec, client, core, agentId, cwd, logger, }: Options<TDriver, TContext, TElement, TSelector>): Core<TDriver, TContext, TElement, TSelector>;
export {};
