import type { DriverTarget, Eyes, OpenSettings } from './types';
import type { Core as BaseCore, Eyes as BaseEyes } from '@applitools/core-base';
import { type Logger } from '@applitools/logger';
import { type SpecDriver } from '@applitools/driver';
import { type UFGClient } from '@applitools/ufg-client';
type Options<TDriver, TContext, TElement, TSelector> = {
    core: BaseCore;
    client?: UFGClient;
    spec?: SpecDriver<TDriver, TContext, TElement, TSelector>;
    logger?: Logger;
};
export declare function makeOpenEyes<TDriver, TContext, TElement, TSelector>({ core, client, spec, logger: defaultLogger, }: Options<TDriver, TContext, TElement, TSelector>): ({ target, settings, eyes, logger, }: {
    target?: DriverTarget<TDriver, TContext, TElement, TSelector>;
    settings: OpenSettings;
    eyes?: BaseEyes[];
    logger?: Logger;
}) => Promise<Eyes<TDriver, TContext, TElement, TSelector>>;
export {};
