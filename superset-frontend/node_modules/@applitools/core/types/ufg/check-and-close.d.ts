import type { DriverTarget, UFGTarget, Eyes, CheckSettings, TestResult, CloseSettings } from './types';
import { type DomSnapshot, type AndroidSnapshot, type IOSSnapshot } from '@applitools/ufg-client';
import { type AbortSignal } from 'abort-controller';
import { type Logger } from '@applitools/logger';
import { type UFGClient } from '@applitools/ufg-client';
import { type SpecDriver } from '@applitools/driver';
type Options<TDriver, TContext, TElement, TSelector> = {
    eyes: Eyes<TDriver, TContext, TElement, TSelector>;
    client: UFGClient;
    target?: DriverTarget<TDriver, TContext, TElement, TSelector>;
    spec?: SpecDriver<TDriver, TContext, TElement, TSelector>;
    signal?: AbortSignal;
    logger?: Logger;
};
export declare function makeCheckAndClose<TDriver, TContext, TElement, TSelector>({ spec, eyes, client, signal, target: defaultTarget, logger: defaultLogger, }: Options<TDriver, TContext, TElement, TSelector>): ({ target, settings, logger, snapshots, }: {
    target?: UFGTarget<TDriver, TContext, TElement, TSelector>;
    settings?: CheckSettings<TElement, TSelector> & CloseSettings;
    logger?: Logger;
    snapshots?: DomSnapshot[] | AndroidSnapshot[] | IOSSnapshot[];
}) => Promise<TestResult[]>;
export {};
