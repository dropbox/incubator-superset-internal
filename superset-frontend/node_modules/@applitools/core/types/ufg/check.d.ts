import type { DriverTarget, UFGTarget, Eyes, CheckSettings, CheckResult } from './types';
import { type AbortSignal } from 'abort-controller';
import { type Logger } from '@applitools/logger';
import { type UFGClient } from '@applitools/ufg-client';
import { type SpecDriver } from '@applitools/driver';
type Options<TDriver, TContext, TElement, TSelector> = {
    eyes: Eyes<TDriver, TContext, TElement, TSelector>;
    client: UFGClient;
    target?: DriverTarget<TDriver, TContext, TElement, TSelector>;
    spec?: SpecDriver<TDriver, TContext, TElement, TSelector>;
    signal?: AbortSignal;
    logger?: Logger;
};
export declare function makeCheck<TDriver, TContext, TElement, TSelector>({ eyes, client, target: defaultTarget, spec, signal, logger: defaultLogger, }: Options<TDriver, TContext, TElement, TSelector>): ({ target, settings, logger, }: {
    settings?: CheckSettings<TElement, TSelector>;
    target?: UFGTarget<TDriver, TContext, TElement, TSelector>;
    logger?: Logger;
}) => Promise<CheckResult[]>;
export {};
