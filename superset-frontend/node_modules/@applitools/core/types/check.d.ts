import type { Target, Eyes, Config, CheckSettings, CheckResult } from './types';
import { type Logger } from '@applitools/logger';
import { type SpecDriver } from '@applitools/driver';
type Options<TDriver, TContext, TElement, TSelector, TType extends 'classic' | 'ufg'> = {
    type?: TType;
    eyes: Eyes<TDriver, TContext, TElement, TSelector, TType>;
    target?: Target<TDriver, TContext, TElement, TSelector, TType>;
    spec?: SpecDriver<TDriver, TContext, TElement, TSelector>;
    logger?: Logger;
};
export declare function makeCheck<TDriver, TContext, TElement, TSelector, TDefaultType extends 'classic' | 'ufg' = 'classic'>({ type: defaultType, eyes, target: defaultTarget, spec, logger: defaultLogger, }: Options<TDriver, TContext, TElement, TSelector, TDefaultType>): <TType extends "classic" | "ufg" = TDefaultType>({ type, target, settings, config, logger, }?: {
    type?: TType;
    target?: Target<TDriver, TContext, TElement, TSelector, TType>;
    settings?: CheckSettings<TElement, TSelector, TType>;
    config?: Config<TElement, TSelector, TType>;
    logger?: Logger;
}) => Promise<CheckResult<TType>[]>;
export {};
