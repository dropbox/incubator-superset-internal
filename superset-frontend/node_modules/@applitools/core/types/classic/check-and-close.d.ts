import type { ClassicTarget, DriverTarget, Eyes, CheckSettings, CloseSettings, TestResult } from './types';
import { type Logger } from '@applitools/logger';
import { type SpecDriver } from '@applitools/driver';
type Options<TDriver, TContext, TElement, TSelector> = {
    eyes: Eyes<TDriver, TContext, TElement, TSelector>;
    target?: DriverTarget<TDriver, TContext, TElement, TSelector>;
    spec?: SpecDriver<TDriver, TContext, TElement, TSelector>;
    logger?: Logger;
};
export declare function makeCheckAndClose<TDriver, TContext, TElement, TSelector>({ eyes, target: defaultTarget, spec, logger: defaultLogger, }: Options<TDriver, TContext, TElement, TSelector>): ({ target, settings, logger, }?: {
    target?: ClassicTarget<TDriver, TContext, TElement, TSelector>;
    settings?: CheckSettings<TElement, TSelector> & CloseSettings;
    logger?: Logger;
}) => Promise<TestResult[]>;
export {};
