import type { MaybeArray } from '@applitools/utils';
import type { ClassicTarget, DriverTarget, Eyes, ExtractTextSettings } from './types';
import { type Logger } from '@applitools/logger';
import { type SpecDriver } from '@applitools/driver';
type Options<TDriver, TContext, TElement, TSelector> = {
    eyes: Eyes<TDriver, TContext, TElement, TSelector>;
    target?: DriverTarget<TDriver, TContext, TElement, TSelector>;
    spec?: SpecDriver<TDriver, TContext, TElement, TSelector>;
    logger?: Logger;
};
export declare function makeExtractText<TDriver, TContext, TElement, TSelector>({ eyes, target: defaultTarget, spec, logger: defaultLogger, }: Options<TDriver, TContext, TElement, TSelector>): ({ target, settings, logger, }: {
    target?: ClassicTarget<TDriver, TContext, TElement, TSelector>;
    settings: MaybeArray<ExtractTextSettings<TElement, TSelector>>;
    logger?: Logger;
}) => Promise<string[]>;
export {};
