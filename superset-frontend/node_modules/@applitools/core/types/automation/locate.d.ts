import type { DriverTarget, ImageTarget, LocateSettings, LocateResult } from './types';
import type { Core as BaseCore } from '@applitools/core-base';
import { type Logger } from '@applitools/logger';
import { type SpecDriver } from '@applitools/driver';
type Options<TDriver, TContext, TElement, TSelector> = {
    core: BaseCore;
    spec: SpecDriver<TDriver, TContext, TElement, TSelector>;
    logger?: Logger;
};
export declare function makeLocate<TDriver, TContext, TElement, TSelector>({ spec, core, logger: defaultLogger, }: Options<TDriver, TContext, TElement, TSelector>): <TLocator extends string>({ settings, target, logger, }: {
    target: DriverTarget<TDriver, TContext, TElement, TSelector> | ImageTarget;
    settings: LocateSettings<TLocator, TElement, TSelector>;
    logger?: Logger;
}) => Promise<LocateResult<TLocator>>;
export {};
