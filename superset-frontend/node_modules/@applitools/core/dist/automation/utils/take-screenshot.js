"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.takeScreenshot = void 0;
const screenshoter_1 = require("@applitools/screenshoter");
const utils = __importStar(require("@applitools/utils"));
async function takeScreenshot({ driver, settings, logger, }) {
    var _a, _b;
    return (0, screenshoter_1.takeScreenshot)({
        driver,
        frames: (_a = settings.frames) === null || _a === void 0 ? void 0 : _a.map(frame => {
            return utils.types.isPlainObject(frame) && utils.types.has(frame, 'frame')
                ? { reference: frame.frame, scrollingElement: frame.scrollRootElement }
                : { reference: frame };
        }),
        webview: settings.webview,
        region: settings.region,
        fully: settings.fully,
        hideScrollbars: settings.hideScrollbars,
        hideCaret: settings.hideCaret,
        scrollingMode: (_b = settings.stitchMode) === null || _b === void 0 ? void 0 : _b.toLowerCase(),
        overlap: settings.overlap,
        wait: settings.waitBeforeCapture,
        framed: driver.isNative,
        lazyLoad: settings.lazyLoad,
        stabilization: settings.normalization && {
            crop: settings.normalization.cut,
            scale: settings.normalization.scaleRatio,
            rotation: settings.normalization.rotation,
        },
        debug: settings.debugImages,
        logger,
        regionsToCalculate: settings.regionsToCalculate,
    });
}
exports.takeScreenshot = takeScreenshot;
