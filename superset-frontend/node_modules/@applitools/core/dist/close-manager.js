"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeCloseManager = void 0;
const test_error_1 = require("./errors/test-error");
const internal_error_1 = require("./errors/internal-error");
function makeCloseManager({ core, storage, logger: defaultLogger, }) {
    return async function closeManager({ settings, logger = defaultLogger, } = {}) {
        const containers = await Promise.all(storage.map(async ({ eyes, promise }) => {
            if (!promise)
                logger.warn(`The eyes with id "${eyes.test.userTestId}" are going to be auto aborted`);
            try {
                const results = await (promise !== null && promise !== void 0 ? promise : eyes.abort({ logger }));
                return results.map(result => {
                    return {
                        result,
                        error: result.status !== 'Passed' ? new test_error_1.TestError(result) : undefined,
                        userTestId: result.userTestId,
                        renderer: result.renderer,
                    };
                });
            }
            catch (error) {
                return [{ error: new internal_error_1.InternalError(error), ...error.info }];
            }
        }));
        const batches = storage.reduce((batches, { eyes }) => {
            if (!eyes.test.keepBatchOpen) {
                const settings = { ...eyes.test.server, batchId: eyes.test.batchId };
                batches[`${settings.serverUrl}:${settings.apiKey}:${settings.batchId}`] = settings;
            }
            return batches;
        }, {});
        await core.closeBatch({ settings: Object.values(batches), logger }).catch(() => null);
        const summary = {
            results: containers.flat(),
            passed: 0,
            unresolved: 0,
            failed: 0,
            exceptions: 0,
            mismatches: 0,
            missing: 0,
            matches: 0,
        };
        for (const container of summary.results) {
            if (container.error) {
                if (settings === null || settings === void 0 ? void 0 : settings.throwErr)
                    throw container.error;
                summary.exceptions += 1;
            }
            if (container.result) {
                if (container.result.status === 'Failed')
                    summary.failed += 1;
                else if (container.result.status === 'Passed')
                    summary.passed += 1;
                else if (container.result.status === 'Unresolved')
                    summary.unresolved += 1;
                summary.matches += container.result.matches;
                summary.missing += container.result.missing;
                summary.mismatches += container.result.mismatches;
            }
        }
        return summary;
    };
}
exports.makeCloseManager = makeCloseManager;
