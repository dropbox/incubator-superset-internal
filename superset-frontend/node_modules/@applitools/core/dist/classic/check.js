"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeCheck = void 0;
const driver_1 = require("@applitools/driver");
const take_screenshot_1 = require("../automation/utils/take-screenshot");
const take_dom_capture_1 = require("./utils/take-dom-capture");
const to_base_check_settings_1 = require("../utils/to-base-check-settings");
const wait_for_lazy_load_1 = require("../utils/wait-for-lazy-load");
const utils = __importStar(require("@applitools/utils"));
function makeCheck({ eyes, target: defaultTarget, spec, logger: defaultLogger, }) {
    return async function check({ target = defaultTarget, settings = {}, logger = defaultLogger, } = {}) {
        var _a, _b;
        logger.log('Command "check" is called with settings', settings);
        const baseEyes = await eyes.getBaseEyes();
        if (!(0, driver_1.isDriver)(target, spec)) {
            return (await Promise.all(baseEyes.map(baseEyes => baseEyes.check({ target, settings: settings, logger })))).flat();
        }
        const driver = await (0, driver_1.makeDriver)({ spec, driver: target, logger });
        await driver.refreshContexts();
        await driver.currentContext.setScrollingElement((_a = settings.scrollRootElement) !== null && _a !== void 0 ? _a : null);
        if (settings.lazyLoad && driver.isWeb) {
            if (settings.lazyLoad) {
                await (0, wait_for_lazy_load_1.waitForLazyLoad)({
                    context: driver.currentContext,
                    settings: settings.lazyLoad !== true ? settings.lazyLoad : {},
                    logger,
                });
            }
        }
        // TODO it actually could be different per eyes
        const shouldRunOnce = true;
        const finishAt = Date.now() + settings.retryTimeout;
        let baseTarget;
        let baseSettings;
        let results;
        const { elementReferencesToCalculate, getBaseCheckSettings } = (0, to_base_check_settings_1.toBaseCheckSettings)({ settings });
        do {
            const screenshot = await (0, take_screenshot_1.takeScreenshot)({
                driver,
                settings: { ...settings, regionsToCalculate: elementReferencesToCalculate },
                logger,
            });
            baseTarget = {
                name: await driver.getTitle(),
                source: await driver.getUrl(),
                image: await screenshot.image.toPng(),
                locationInViewport: utils.geometry.location(screenshot.region),
                isTransformed: true,
            };
            baseSettings = getBaseCheckSettings({ calculatedRegions: screenshot.calculatedRegions });
            if (driver.isWeb && settings.sendDom) {
                if (settings.fully)
                    await screenshot.scrollingElement.setAttribute('data-applitools-scroll', 'true');
                else
                    await ((_b = screenshot.element) === null || _b === void 0 ? void 0 : _b.setAttribute('data-applitools-scroll', 'true'));
                baseTarget.dom = await (0, take_dom_capture_1.takeDomCapture)({ driver, logger }).catch(() => null);
            }
            if (settings.pageId) {
                const scrollingElement = await driver.mainContext.getScrollingElement();
                const scrollingOffset = driver.isNative ? { x: 0, y: 0 } : await scrollingElement.getScrollOffset();
                baseTarget.locationInView = utils.geometry.offset(scrollingOffset, screenshot.region);
                baseTarget.fullViewSize = scrollingElement ? await scrollingElement.getContentSize() : await driver.getViewportSize();
            }
            await screenshot.restoreState();
            baseSettings.ignoreMismatch = !shouldRunOnce;
            results = (await Promise.all(baseEyes.map(baseEyes => baseEyes.check({ target: baseTarget, settings: baseSettings, logger })))).flat();
        } while (!shouldRunOnce && !results.some(result => result.asExpected) && Date.now() < finishAt);
        if (!shouldRunOnce && !results.some(result => result.asExpected)) {
            baseSettings.ignoreMismatch = false;
            results = (await Promise.all(baseEyes.map(baseEyes => baseEyes.check({ target: baseTarget, settings: baseSettings, logger })))).flat();
        }
        return results;
    };
}
exports.makeCheck = makeCheck;
