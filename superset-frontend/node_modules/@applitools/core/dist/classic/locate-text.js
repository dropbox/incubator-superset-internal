"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeLocateText = void 0;
const driver_1 = require("@applitools/driver");
const take_screenshot_1 = require("../automation/utils/take-screenshot");
// import {takeDomCapture} from './utils/take-dom-capture'
const utils = __importStar(require("@applitools/utils"));
function makeLocateText({ eyes, target: defaultTarget, spec, logger: defaultLogger, }) {
    return async function locateText({ target = defaultTarget, settings, logger = defaultLogger, }) {
        logger.log('Command "locateText" is called with settings', settings);
        const [baseEyes] = await eyes.getBaseEyes();
        if (!(0, driver_1.isDriver)(target, spec)) {
            return baseEyes.locateText({ target, settings: settings, logger });
        }
        const driver = await (0, driver_1.makeDriver)({ spec, driver: target, logger });
        const screenshot = await (0, take_screenshot_1.takeScreenshot)({ driver, settings, logger });
        const baseTarget = {
            image: await screenshot.image.toPng(),
            locationInViewport: utils.geometry.location(screenshot.region),
        };
        if (driver.isWeb) {
            // if (settings.fully) await screenshot.scrollingElement.setAttribute('data-applitools-scroll', 'true')
            // else await screenshot.element?.setAttribute('data-applitools-scroll', 'true')
            // baseTarget.dom = await takeDomCapture({driver, logger}).catch(() => null)
        }
        const results = await baseEyes.locateText({
            target: baseTarget,
            settings: settings,
            logger,
        });
        return results;
    };
}
exports.makeLocateText = makeLocateText;
