"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeOpenEyes = void 0;
const driver_1 = require("@applitools/driver");
const get_base_eyes_1 = require("./get-base-eyes");
const check_1 = require("./check");
const check_and_close_1 = require("./check-and-close");
const locate_text_1 = require("./locate-text");
const extract_text_1 = require("./extract-text");
const utils = __importStar(require("@applitools/utils"));
function makeOpenEyes({ core, spec, logger: defaultLogger, }) {
    return async function openEyes({ target, settings, eyes, logger = defaultLogger, }) {
        var _a, _b, _c, _d, _e;
        var _f;
        logger.log(`Command "openEyes" is called with ${target ? 'default driver and' : ''}`, ...(settings ? ['settings', settings] : []), eyes ? 'predefined eyes' : '');
        const driver = target && (await (0, driver_1.makeDriver)({ spec, driver: target, logger, customConfig: settings }));
        if (driver && !eyes) {
            const currentContext = driver.currentContext;
            (_a = settings.environment) !== null && _a !== void 0 ? _a : (settings.environment = {});
            if (!settings.environment.viewportSize || driver.isMobile) {
                const size = await driver.getViewportSize();
                settings.environment.viewportSize = utils.geometry.scale(size, driver.viewportScale);
            }
            else {
                await driver.setViewportSize(settings.environment.viewportSize);
            }
            if (driver.isWeb) {
                (_b = (_f = settings.environment).userAgent) !== null && _b !== void 0 ? _b : (_f.userAgent = driver.userAgent);
                if (driver.isChromium &&
                    ((driver.isWindows && Number.parseInt(driver.browserVersion) >= 107) ||
                        (driver.isMac && Number.parseInt(driver.browserVersion) >= 90))) {
                    settings.environment.os = `${driver.platformName} ${(_c = driver.platformVersion) !== null && _c !== void 0 ? _c : ''}`.trim();
                }
            }
            if (!settings.environment.deviceName && driver.deviceName) {
                settings.environment.deviceName = driver.deviceName;
            }
            if (!settings.environment.os && driver.isNative && driver.platformName) {
                settings.environment.os = driver.platformName;
                if (!settings.keepPlatformNameAsIs) {
                    if ((_d = settings.environment.os) === null || _d === void 0 ? void 0 : _d.startsWith('android')) {
                        settings.environment.os = `Android${settings.environment.os.slice(7)}`;
                    }
                    if ((_e = settings.environment.os) === null || _e === void 0 ? void 0 : _e.startsWith('ios')) {
                        settings.environment.os = `iOS${settings.environment.os.slice(3)}`;
                    }
                }
                if (driver.platformVersion) {
                    settings.environment.os += ` ${driver.platformVersion}`;
                }
            }
            await currentContext.focus();
        }
        const getBaseEyes = (0, get_base_eyes_1.makeGetBaseEyes)({ settings, core, eyes, logger });
        const [baseEyes] = await getBaseEyes();
        return utils.general.extend(baseEyes, eyes => ({
            type: 'classic',
            getBaseEyes,
            check: (0, check_1.makeCheck)({ eyes, target: driver, spec, logger }),
            checkAndClose: (0, check_and_close_1.makeCheckAndClose)({ eyes, target: driver, spec, logger }),
            locateText: (0, locate_text_1.makeLocateText)({ eyes, target: driver, spec, logger }),
            extractText: (0, extract_text_1.makeExtractText)({ eyes, target: driver, spec, logger }),
        }));
    };
}
exports.makeOpenEyes = makeOpenEyes;
