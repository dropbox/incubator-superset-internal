"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeCheck = void 0;
const driver_1 = require("@applitools/driver");
const take_snapshots_1 = require("./utils/take-snapshots");
const wait_for_lazy_load_1 = require("../utils/wait-for-lazy-load");
const to_base_check_settings_1 = require("../utils/to-base-check-settings");
const generate_safe_selectors_1 = require("./utils/generate-safe-selectors");
const abort_error_1 = require("../errors/abort-error");
const utils = __importStar(require("@applitools/utils"));
const chalk_1 = __importDefault(require("chalk"));
function makeCheck({ eyes, client, target: defaultTarget, spec, signal, logger: defaultLogger, }) {
    return async function check({ target = defaultTarget, settings = {}, logger = defaultLogger, }) {
        var _a, _b, _c;
        logger.log('Command "check" is called with settings', settings);
        if (signal.aborted) {
            logger.warn('Command "check" was called after test was already aborted');
            throw new abort_error_1.AbortError('Command "check" was called after test was already aborted');
        }
        const { elementReferencesToCalculate, elementReferenceToTarget, getBaseCheckSettings } = (0, to_base_check_settings_1.toBaseCheckSettings)({ settings });
        let snapshots, snapshotUrl, snapshotTitle, userAgent, regionToTarget, selectorsToCalculate;
        if ((0, driver_1.isDriver)(target, spec)) {
            const driver = await (0, driver_1.makeDriver)({ spec, driver: target, logger });
            await driver.currentContext.setScrollingElement((_a = settings.scrollRootElement) !== null && _a !== void 0 ? _a : null);
            if (driver.isWeb && (!settings.renderers || settings.renderers.length === 0)) {
                const viewportSize = await driver.getViewportSize();
                settings.renderers = [{ name: 'chrome', ...viewportSize }];
            }
            let cleanupGeneratedSelectors;
            if (driver.isWeb) {
                userAgent = driver.userAgent;
                const generated = await (0, generate_safe_selectors_1.generateSafeSelectors)({
                    context: driver.currentContext,
                    elementReferences: [...(elementReferenceToTarget ? [elementReferenceToTarget] : []), ...elementReferencesToCalculate],
                });
                cleanupGeneratedSelectors = generated.cleanupGeneratedSelectors;
                if (elementReferenceToTarget) {
                    regionToTarget = (_b = generated.selectors[0]) === null || _b === void 0 ? void 0 : _b.safeSelector;
                    if (!regionToTarget)
                        throw new Error('Target element not found');
                    selectorsToCalculate = generated.selectors.slice(1);
                }
                else {
                    selectorsToCalculate = generated.selectors;
                }
            }
            const currentContext = driver.currentContext;
            snapshots = await (0, take_snapshots_1.takeSnapshots)({
                driver,
                settings: {
                    ...eyes.test.server,
                    waitBeforeCapture: settings.waitBeforeCapture,
                    disableBrowserFetching: settings.disableBrowserFetching,
                    layoutBreakpoints: settings.layoutBreakpoints,
                    renderers: settings.renderers,
                    skipResources: client.getCachedResourceUrls(),
                },
                hooks: {
                    async beforeSnapshots() {
                        if (settings.lazyLoad && driver.isWeb) {
                            await (0, wait_for_lazy_load_1.waitForLazyLoad)({
                                context: driver.currentContext,
                                settings: settings.lazyLoad !== true ? settings.lazyLoad : {},
                                logger,
                            });
                        }
                    },
                },
                provides: {
                    getChromeEmulationDevices: client.getChromeEmulationDevices,
                    getIOSDevices: client.getIOSDevices,
                },
                logger,
            });
            await currentContext.focus();
            snapshotUrl = await driver.getUrl();
            snapshotTitle = await driver.getTitle();
            await (cleanupGeneratedSelectors === null || cleanupGeneratedSelectors === void 0 ? void 0 : cleanupGeneratedSelectors());
        }
        else {
            snapshots = !utils.types.isArray(target) ? Array(settings.renderers.length).fill(target) : target;
            snapshotUrl = utils.types.has(snapshots[0], 'url') ? snapshots[0].url : undefined;
        }
        regionToTarget !== null && regionToTarget !== void 0 ? regionToTarget : (regionToTarget = (_c = elementReferenceToTarget) !== null && _c !== void 0 ? _c : settings.region);
        selectorsToCalculate !== null && selectorsToCalculate !== void 0 ? selectorsToCalculate : (selectorsToCalculate = elementReferencesToCalculate.map(selector => ({
            originalSelector: selector,
            safeSelector: selector,
        })));
        const promises = settings.renderers.map(async (renderer, index) => {
            if (utils.types.has(renderer, 'name') && renderer.name === 'edge') {
                const message = chalk_1.default.yellow(`The 'edge' option that is being used in your browsers' configuration will soon be deprecated. Please change it to either 'edgelegacy' for the legacy version or to 'edgechromium' for the new Chromium-based version. Please note, when using the built-in BrowserType enum, then the values are BrowserType.EDGE_LEGACY and BrowserType.EDGE_CHROMIUM, respectively.`);
                logger.console.log(message);
            }
            try {
                if (signal.aborted) {
                    logger.warn('Command "check" was aborted before rendering');
                    throw new abort_error_1.AbortError('Command "check" was aborted before rendering');
                }
                const { cookies, ...snapshot } = snapshots[index];
                const snapshotType = utils.types.has(snapshot, 'cdt') ? 'web' : 'native';
                const renderTargetPromise = client.createRenderTarget({
                    snapshot,
                    settings: {
                        renderer,
                        referer: snapshotUrl,
                        cookies,
                        proxy: eyes.test.server.proxy,
                        autProxy: settings.autProxy,
                        userAgent,
                    },
                });
                const [baseEyes] = await eyes.getBaseEyes({ settings: { renderer, type: snapshotType }, logger });
                try {
                    if (signal.aborted) {
                        logger.warn('Command "check" was aborted before rendering');
                        throw new abort_error_1.AbortError('Command "check" was aborted before rendering');
                    }
                    else if (baseEyes.aborted) {
                        logger.warn(`Renderer with id ${baseEyes.test.rendererId} was aborted during one of the previous steps`);
                        throw new abort_error_1.AbortError(`Renderer with id "${baseEyes.test.rendererId}" was aborted during one of the previous steps`);
                    }
                    const renderTarget = await renderTargetPromise;
                    if (signal.aborted) {
                        logger.warn('Command "check" was aborted before rendering');
                        throw new abort_error_1.AbortError('Command "check" was aborted before rendering');
                    }
                    else if (baseEyes.aborted) {
                        logger.warn(`Renderer with id ${baseEyes.test.rendererId} was aborted during one of the previous steps`);
                        throw new abort_error_1.AbortError(`Renderer with id "${baseEyes.test.rendererId}" was aborted during one of the previous steps`);
                    }
                    const { renderId, selectorRegions, ...baseTarget } = await client.render({
                        target: renderTarget,
                        settings: {
                            ...settings,
                            region: regionToTarget,
                            selectorsToCalculate: selectorsToCalculate.flatMap(({ safeSelector }) => safeSelector !== null && safeSelector !== void 0 ? safeSelector : []),
                            includeFullPageSize: Boolean(settings.pageId),
                            type: snapshotType,
                            renderer,
                            rendererId: baseEyes.test.rendererId,
                        },
                        signal,
                    });
                    let offset = 0;
                    const baseSettings = getBaseCheckSettings({
                        calculatedRegions: selectorsToCalculate.map(({ originalSelector, safeSelector }) => ({
                            selector: originalSelector,
                            regions: safeSelector ? selectorRegions[offset++] : [],
                        })),
                    });
                    baseSettings.renderId = renderId;
                    baseTarget.source = snapshotUrl;
                    baseTarget.name = snapshotTitle;
                    if (signal.aborted) {
                        logger.warn('Command "check" was aborted after rendering');
                        throw new abort_error_1.AbortError('Command "check" was aborted after rendering');
                    }
                    else if (baseEyes.aborted) {
                        logger.warn(`Renderer with id ${baseEyes.test.rendererId} was aborted during one of the previous steps`);
                        throw new abort_error_1.AbortError(`Renderer with id "${baseEyes.test.rendererId}" was aborted during one of the previous steps`);
                    }
                    const [result] = await baseEyes.check({ target: { ...baseTarget, isTransformed: true }, settings: baseSettings, logger });
                    if (baseEyes.aborted) {
                        logger.warn(`Renderer with id ${baseEyes.test.rendererId} was aborted during one of the previous steps`);
                        throw new abort_error_1.AbortError(`Renderer with id "${baseEyes.test.rendererId}" was aborted during one of the previous steps`);
                    }
                    return { ...result, eyes: baseEyes, renderer };
                }
                catch (error) {
                    await baseEyes.abort();
                    error.info = { eyes: baseEyes };
                    throw error;
                }
            }
            catch (error) {
                error.info = { ...error.info, userTestId: eyes.test.userTestId, renderer };
                throw error;
            }
        });
        return settings.renderers.map((renderer, index) => ({
            asExpected: true,
            userTestId: eyes.test.userTestId,
            renderer,
            promise: promises[index],
        }));
    };
}
exports.makeCheck = makeCheck;
