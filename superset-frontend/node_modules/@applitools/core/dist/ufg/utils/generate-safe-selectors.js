"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateSafeSelectors = void 0;
const snippets = __importStar(require("@applitools/snippets"));
const utils = __importStar(require("@applitools/utils"));
async function generateSafeSelectors({ context, elementReferences, }) {
    const mapping = {
        elements: [],
        ids: [],
    };
    for (const elementReference of elementReferences) {
        const elements = await context.elements(elementReference);
        mapping.elements.push(elements);
        mapping.ids.push(Array(elements.length).fill(utils.general.guid()));
    }
    const generatedSelectors = await context.execute(snippets.addElementIds, [mapping.elements.flat(), mapping.ids.flat()]);
    let offset = 0;
    const selectors = mapping.elements.map((elements, index) => {
        if (elements.length === 0)
            return { safeSelector: null, originalSelector: null, elementReference: elementReferences[index] };
        const safeSelector = generatedSelectors[offset].reduce((selector, value) => {
            return selector ? { ...selector, shadow: { type: 'css', selector: value } } : { type: 'css', selector: value };
        }, null);
        offset += elements.length;
        return { safeSelector, originalSelector: elements[0].commonSelector, elementReference: elementReferences[index] };
    });
    return {
        selectors,
        cleanupGeneratedSelectors,
    };
    async function cleanupGeneratedSelectors() {
        if (!mapping.elements.length)
            return;
        await context.execute(snippets.cleanupElementIds, [mapping.elements.flat()]);
    }
}
exports.generateSafeSelectors = generateSafeSelectors;
