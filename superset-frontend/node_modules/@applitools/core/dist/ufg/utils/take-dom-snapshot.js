"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractCrossFrames = exports.deserializeDomSnapshot = exports.takeDomSnapshot = void 0;
const dom_snapshot_1 = require("@applitools/dom-snapshot");
const utils = __importStar(require("@applitools/utils"));
async function takeDomSnapshot({ context, settings, logger, }) {
    var _a;
    const driver = context.driver;
    const isLegacyBrowser = driver.isIE || driver.isEdgeLegacy;
    const { canExecuteOnlyFunctionScripts } = driver.features;
    const arg = {
        dontFetchResources: settings === null || settings === void 0 ? void 0 : settings.disableBrowserFetching,
        skipResources: settings === null || settings === void 0 ? void 0 : settings.skipResources,
        removeReverseProxyURLPrefixes: Boolean(process.env.APPLITOOLS_SCRIPT_REMOVE_REVERSE_PROXY_URL_PREFIXES),
        chunkByteLength: (_a = settings === null || settings === void 0 ? void 0 : settings.chunkByteLength) !== null && _a !== void 0 ? _a : (Number(process.env.APPLITOOLS_SCRIPT_RESULT_MAX_BYTE_LENGTH) || (driver.isIOS ? 100000 : 250 * 1024 * 1024)),
        serializeResources: true,
        compressResources: false,
        showLogs: settings === null || settings === void 0 ? void 0 : settings.showLogs,
    };
    const scripts = {
        main: canExecuteOnlyFunctionScripts
            ? require('@applitools/dom-snapshot').processPagePoll
            : `return (${isLegacyBrowser ? await (0, dom_snapshot_1.getProcessPagePollForIE)() : await (0, dom_snapshot_1.getProcessPagePoll)()}).apply(null, arguments);`,
        poll: canExecuteOnlyFunctionScripts
            ? require('@applitools/dom-snapshot').pollResult
            : `return (${isLegacyBrowser ? await (0, dom_snapshot_1.getPollResultForIE)() : await (0, dom_snapshot_1.getPollResult)()}).apply(null, arguments);`,
    };
    const cookies = driver.features.allCookies ? await driver.getCookies().catch(() => []) : [];
    const snapshot = await takeContextDomSnapshot({ context });
    snapshot.cookies = cookies;
    return deserializeDomSnapshot({ snapshot });
    async function takeContextDomSnapshot({ context }) {
        // logger.log(`taking dom snapshot. ${context._reference ? `context referece: ${JSON.stringify(context._reference)}` : ''}`)
        var _a, _b;
        if (!driver.features.allCookies) {
            cookies.push(...(await context.getCookies()));
        }
        const snapshot = await context.executePoll(scripts, {
            main: arg,
            poll: arg,
            executionTimeout: (_a = settings === null || settings === void 0 ? void 0 : settings.executionTimeout) !== null && _a !== void 0 ? _a : 5 * 60 * 1000,
            pollTimeout: (_b = settings === null || settings === void 0 ? void 0 : settings.pollTimeout) !== null && _b !== void 0 ? _b : 200,
        });
        const crossFrames = extractCrossFrames({ snapshot, logger });
        for (const { reference, parentSnapshot, cdtNode } of crossFrames) {
            const frameContext = await context
                .context(reference)
                .then(context => context.focus())
                .catch(err => {
                const srcAttr = cdtNode.attributes.find(attr => attr.name === 'src');
                if (srcAttr)
                    srcAttr.value = '';
                logger.log(`could not switch to frame during takeDomSnapshot. Path to frame: ${JSON.stringify(reference)}`, err);
            });
            if (frameContext) {
                const frameSnapshot = await takeContextDomSnapshot({ context: frameContext });
                let url = new URL(frameSnapshot.url);
                if (url.protocol === 'data:')
                    url = new URL(`http://data-url-frame${url.search}`);
                if (!url.searchParams.has('applitools-iframe'))
                    url.searchParams.set('applitools-iframe', utils.general.guid());
                frameSnapshot.url = url.href;
                parentSnapshot.frames.push(frameSnapshot);
                cdtNode.attributes.push({ name: 'data-applitools-src', value: frameSnapshot.url });
            }
        }
        logger.log(`dom snapshot cdt length: ${snapshot.cdt.length}`);
        logger.log(`blobs urls (${snapshot.blobs.length}):`, JSON.stringify(snapshot.blobs.map(({ url }) => url))); // eslint-disable-line prettier/prettier
        logger.log(`resource urls (${snapshot.resourceUrls.length}):`, JSON.stringify(snapshot.resourceUrls)); // eslint-disable-line prettier/prettier
        return snapshot;
    }
}
exports.takeDomSnapshot = takeDomSnapshot;
function deserializeDomSnapshot({ snapshot }) {
    const deserializedSnapshot = {
        ...snapshot,
        resourceContents: snapshot.blobs.reduce((resourceContents, blob) => {
            if (blob.value === undefined)
                return { ...resourceContents, [blob.url]: blob };
            else
                return { ...resourceContents, [blob.url]: { ...blob, value: Buffer.from(blob.value, 'base64') } };
        }, {}),
        frames: snapshot.frames.map(frameSnapshot => deserializeDomSnapshot({ snapshot: frameSnapshot })),
    };
    delete deserializedSnapshot.blobs;
    delete deserializedSnapshot.selector;
    delete deserializedSnapshot.crossFrames;
    return deserializedSnapshot;
}
exports.deserializeDomSnapshot = deserializeDomSnapshot;
function extractCrossFrames({ snapshot, parent = null, logger }) {
    var _a;
    const crossFrames = [snapshot, ...((_a = snapshot.frames) !== null && _a !== void 0 ? _a : [])].flatMap((snapshot, index) => {
        var _a;
        const crossFrames = ((_a = snapshot.crossFrames) !== null && _a !== void 0 ? _a : []).map(({ selector, index }) => ({
            reference: { reference: { type: 'css', selector }, parent },
            parentSnapshot: snapshot,
            cdtNode: snapshot.cdt[index],
        }));
        return [
            ...crossFrames,
            ...(index > 0
                ? extractCrossFrames({ snapshot, parent: { reference: { type: 'css', selector: snapshot.selector }, parent }, logger })
                : []),
        ];
    });
    logger.log(`frames paths for ${snapshot.crossFrames}`, crossFrames.map(selector => JSON.stringify(selector)).join(' , '));
    return crossFrames;
}
exports.extractCrossFrames = extractCrossFrames;
