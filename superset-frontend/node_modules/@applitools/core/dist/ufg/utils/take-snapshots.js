"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.takeSnapshots = void 0;
const take_dom_snapshots_1 = require("./take-dom-snapshots");
const take_vhses_1 = require("./take-vhses");
const nml_client_1 = require("@applitools/nml-client");
const extract_broker_url_1 = require("../../utils/extract-broker-url");
__exportStar(require("./take-dom-snapshots"), exports);
__exportStar(require("./take-vhses"), exports);
async function takeSnapshots({ driver, settings, hooks, provides, logger, }) {
    if (driver.isWeb) {
        return (0, take_dom_snapshots_1.takeDomSnapshots)({ driver, settings, hooks, provides, logger });
    }
    else {
        const brokerUrl = await (0, extract_broker_url_1.extractBrokerUrl)(driver);
        if (brokerUrl) {
            return (0, nml_client_1.takeSnapshots)({ url: brokerUrl, settings, logger });
        }
        else {
            return (0, take_vhses_1.takeVHSes)({ driver, settings, hooks, logger });
        }
    }
}
exports.takeSnapshots = takeSnapshots;
