"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeMakeManager = void 0;
const core_base_1 = require("@applitools/core-base");
const core_1 = require("./classic/core");
const core_2 = require("./ufg/core");
const open_eyes_1 = require("./open-eyes");
const close_manager_1 = require("./close-manager");
const utils = __importStar(require("@applitools/utils"));
function makeMakeManager({ spec, core, concurrency: defaultConcurrency = utils.general.getEnvValue('CONCURRENCY', 'number'), agentId: defaultAgentId, cwd = process.cwd(), logger: defaultLogger, }) {
    return async function makeManager({ type = 'classic', concurrency = defaultConcurrency, legacyConcurrency, batch, agentId = type === 'ufg' ? defaultAgentId === null || defaultAgentId === void 0 ? void 0 : defaultAgentId.replace(/(\/\d)/, '.visualgrid$1') : defaultAgentId, logger = defaultLogger, } = {}) {
        var _a;
        concurrency !== null && concurrency !== void 0 ? concurrency : (concurrency = utils.types.isInteger(legacyConcurrency) ? legacyConcurrency * 5 : 5);
        batch !== null && batch !== void 0 ? batch : (batch = {});
        (_a = batch.id) !== null && _a !== void 0 ? _a : (batch.id = `generated-${utils.general.guid()}`);
        core !== null && core !== void 0 ? core : (core = (0, core_base_1.makeCore)({ agentId, cwd, logger }));
        const cores = {
            ufg: (0, core_2.makeCore)({ spec, core, concurrency, logger }),
            classic: (0, core_1.makeCore)({ spec, core, logger }),
        };
        const storage = [];
        // open eyes with result storage
        const openEyes = utils.general.wrap((0, open_eyes_1.makeOpenEyes)({ type, batch, spec, core, cores, logger }), async (openEyes, options) => {
            const eyes = await openEyes(options);
            const item = { eyes };
            storage.push(item);
            return utils.general.extend(eyes, {
                close(options) {
                    var _a;
                    const promise = eyes.close(options);
                    (_a = item.promise) !== null && _a !== void 0 ? _a : (item.promise = promise);
                    return promise;
                },
                checkAndClose(options) {
                    var _a;
                    const promise = eyes.checkAndClose(options);
                    (_a = item.promise) !== null && _a !== void 0 ? _a : (item.promise = promise);
                    return promise;
                },
                abort(options) {
                    var _a;
                    const promise = eyes.abort(options);
                    (_a = item.promise) !== null && _a !== void 0 ? _a : (item.promise = promise);
                    return promise;
                },
            });
        });
        return {
            openEyes,
            closeManager: (0, close_manager_1.makeCloseManager)({ core, storage, logger }),
        };
    };
}
exports.makeMakeManager = makeMakeManager;
