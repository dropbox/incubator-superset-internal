"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ptimeoutWithError = exports.presult = exports.getProxyCurlArg = exports.config = void 0;
const utils = __importStar(require("@applitools/utils"));
exports.config = {
    serverUrl: 'https://eyesapi.applitools.com',
    ...utils.config.getConfig({ params: ['apiKey', 'serverUrl', 'proxy'] }),
};
function getProxyCurlArg() {
    // HTTP_PROXY and HTTPS_PROXY are read by cURL.
    let proxyUrl;
    if (exports.config.proxy) {
        proxyUrl = new URL(utils.types.isString(exports.config.proxy) ? exports.config.proxy : exports.config.proxy.url);
        if (exports.config.proxy.username)
            proxyUrl.username = exports.config.proxy.username;
        if (exports.config.proxy.password)
            proxyUrl.password = exports.config.proxy.password;
    }
    return proxyUrl ? `-x ${proxyUrl.href}` : '';
}
exports.getProxyCurlArg = getProxyCurlArg;
function presult(promise) {
    return promise.then(v => [undefined, v], err => [err]);
}
exports.presult = presult;
async function ptimeoutWithError(promiseOrPromiseFunc, timeout, err) {
    let promiseResolved = false;
    const hasAborted = () => promiseResolved;
    const promise = promiseOrPromiseFunc.then ? promiseOrPromiseFunc : promiseOrPromiseFunc(hasAborted);
    let cancel;
    const v = await Promise.race([
        promise.then(v => ((promiseResolved = true), cancel && clearTimeout(cancel), v), err => ((promiseResolved = true), cancel && clearTimeout(cancel), Promise.reject(err))),
        new Promise(res => (cancel = setTimeout(() => {
            if (promiseResolved)
                res(undefined);
            else {
                cancel = undefined;
                promiseResolved = true;
                res(Promise.reject(err));
            }
        }, timeout))),
    ]);
    return v;
}
exports.ptimeoutWithError = ptimeoutWithError;
