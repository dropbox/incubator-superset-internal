#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkNetwork = void 0;
const chalk_1 = __importDefault(require("chalk"));
const utils_1 = require("./utils");
const eyes_1 = __importDefault(require("./eyes"));
const ufg_1 = __importDefault(require("./ufg"));
const utils = __importStar(require("@applitools/utils"));
const TIMEOUT = 15000;
const config = utils.config.getConfig({ params: ['apiKey', 'serverUrl', 'proxy'] });
async function checkNetwork({ stream = process.stdout, eyes = eyes_1.default, ufg = ufg_1.default } = {}) {
    const hasClearLine = stream.clearLine && stream.cursorTo;
    async function doTest(func, name) {
        const delimiterLength = 30 - name.length;
        const delimiter = new Array(delimiterLength).join(' ');
        hasClearLine && printSuccess(name, delimiter, '[ ?  ]');
        const start = Date.now();
        const funcWithTimeout = (0, utils_1.ptimeoutWithError)(func(), TIMEOUT, new Error('request timeout!'));
        const [err] = await (0, utils_1.presult)(funcWithTimeout);
        const end = (Date.now() - start) / 1000;
        clearLine();
        if (err) {
            printErr(name, delimiter, `[ X  ]  +${end}`, err.message, err.message[err.message.length - 1] !== '\n' ? '\n' : '');
        }
        else {
            printSuccess(name, delimiter, `[ OK ]  +${end}`, '\n');
        }
        return !!err;
    }
    function print(...msg) {
        stream.write((0, chalk_1.default)(...msg));
    }
    function printErr(...msg) {
        stream.write(chalk_1.default.red(...msg));
    }
    function printSuccess(...msg) {
        stream.write(chalk_1.default.green(...msg));
    }
    function clearLine() {
        if (hasClearLine) {
            stream.clearLine(0);
            stream.cursorTo(0);
        }
    }
    if (!config.apiKey) {
        printErr('Missing "apiKey". Add APPLITOOLS_API_KEY as an env variable or add "apiKey" in applitools.config.js\n');
        return;
    }
    const proxyEnvMsg = `HTTP_PROXY="${process.env.HTTP_PROXY || ''}"\nHTTPS_PROXY="${process.env.HTTPS_PROXY || ''}"`;
    const configMsg = `User config: ${JSON.stringify(config, null, 2)}\n${proxyEnvMsg}`;
    print(`Eyes Check Network. Running with:\n\n---\n\n${chalk_1.default.cyan(configMsg)}\n\n---\n\n`);
    let hasErr = false;
    let curlRenderErr = true;
    let curlVgErr = true;
    // TODO - http and fetch need to account for proxy.
    print('[1] Checking eyes API', eyes.url.origin, '\n');
    curlRenderErr = await doTest(eyes.testCurl, '[eyes] cURL');
    hasErr = curlRenderErr;
    hasErr = (await doTest(eyes.testHttps, '[eyes] https')) || hasErr;
    hasErr = (await doTest(eyes.testFetch, '[eyes] node-fetch')) || hasErr;
    hasErr = await doTest(eyes.testServer, '[eyes] server connector');
    print('[2] Checking Ultrafast grid API', ufg.url.origin, '\n');
    curlVgErr = await doTest(ufg.testCurl, '[UFG] cURL');
    hasErr = curlVgErr || hasErr;
    hasErr = (await doTest(ufg.testHttps, '[UFG] https')) || hasErr;
    hasErr = (await doTest(ufg.testFetch, '[UFG] node-fetch')) || hasErr;
    hasErr = (await doTest(ufg.testServer, '[UFG] server connector')) || hasErr;
    if (!hasErr) {
        printSuccess('\nSuccess!\n');
    }
    const proxyMsg = '\nYour proxy seems to be blocking requests to Applitools. Please make sure the following command succeeds:';
    if (curlRenderErr) {
        printErr(proxyMsg, '\n', eyes.cmd, '\n');
    }
    else if (curlVgErr) {
        printErr(proxyMsg, '\n', await ufg.getCmd());
    }
}
exports.checkNetwork = checkNetwork;
checkNetwork();
