"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeExtractText = void 0;
const utils = __importStar(require("@applitools/utils"));
function makeExtractText({ eyes, logger: defaultLogger, }) {
    return async function extractText({ target, settings, config, logger = defaultLogger, }) {
        var _a;
        if (utils.types.isArray(settings)) {
            settings = settings.map(settings => {
                var _a;
                settings = { ...config === null || config === void 0 ? void 0 : config.screenshot, ...settings };
                (_a = settings.autProxy) !== null && _a !== void 0 ? _a : (settings.autProxy = eyes.test.server.proxy);
                return settings;
            });
        }
        else {
            settings = { ...config === null || config === void 0 ? void 0 : config.screenshot, ...settings };
            (_a = settings.autProxy) !== null && _a !== void 0 ? _a : (settings.autProxy = eyes.test.server.proxy);
        }
        const classicEyes = await eyes.getTypedEyes({ type: 'classic', logger });
        const results = await classicEyes.extractText({ target, settings, logger });
        return results;
    };
}
exports.makeExtractText = makeExtractText;
