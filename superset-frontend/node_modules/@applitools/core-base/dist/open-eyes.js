"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeOpenEyes = void 0;
const extract_branching_timestamp_1 = require("./utils/extract-branching-timestamp");
const check_1 = require("./check");
const check_and_close_1 = require("./check-and-close");
const locate_text_1 = require("./locate-text");
const extract_text_1 = require("./extract-text");
const close_1 = require("./close");
const abort_1 = require("./abort");
const utils = __importStar(require("@applitools/utils"));
function makeOpenEyes({ requests, cwd = process.cwd(), logger: defaultLogger }) {
    return async function openEyes({ settings, logger = defaultLogger }) {
        var _a;
        logger.log('Command "openEyes" is called with settings', settings);
        if (!settings.ignoreGitBranching) {
            if (!settings.gitBranchingTimestamp) {
                let branches = { branchName: settings.branchName, parentBranchName: settings.parentBranchName };
                try {
                    if (((_a = settings.batch) === null || _a === void 0 ? void 0 : _a.id) &&
                        !settings.batch.id.startsWith('generated') &&
                        !branches.branchName &&
                        !branches.parentBranchName) {
                        branches = await requests.getBatchBranches({ settings: { ...settings, batchId: settings.batch.id } });
                    }
                    if (branches.branchName && branches.parentBranchName && branches.branchName !== branches.parentBranchName) {
                        settings.gitBranchingTimestamp = await (0, extract_branching_timestamp_1.extractBranchingTimestamp)(branches, { cwd });
                        logger.log('Branching timestamp successfully extracted', settings.gitBranchingTimestamp);
                    }
                }
                catch (err) {
                    logger.error('Error during extracting merge timestamp', err);
                }
            }
        }
        else {
            settings.gitBranchingTimestamp = undefined;
        }
        const eyesRequests = await requests.openEyes({ settings, logger });
        const aborted = utils.promises.makeControlledPromise();
        const queue = [];
        return utils.general.extend(eyesRequests, {
            check: utils.general.wrap((0, check_1.makeCheck)({ requests: eyesRequests, logger }), async (check, options) => {
                var _a, _b, _c;
                var _d;
                const index = (_a = options.settings) === null || _a === void 0 ? void 0 : _a.stepIndex;
                (_b = queue[index]) !== null && _b !== void 0 ? _b : (queue[index] = utils.promises.makeControlledPromise());
                if (index > 0)
                    await Promise.race([((_c = queue[_d = index - 1]) !== null && _c !== void 0 ? _c : (queue[_d] = utils.promises.makeControlledPromise())), aborted]);
                return Promise.race([check(options), aborted]).finally(queue[index].resolve);
            }),
            checkAndClose: (0, check_and_close_1.makeCheckAndClose)({ requests: eyesRequests, logger }),
            locateText: (0, locate_text_1.makeLocateText)({ requests: eyesRequests, logger }),
            extractText: (0, extract_text_1.makeExtractText)({ requests: eyesRequests, logger }),
            close: (0, close_1.makeClose)({ requests: eyesRequests, logger }),
            abort: utils.general.wrap((0, abort_1.makeAbort)({ requests: eyesRequests, logger }), async (abort, options) => {
                aborted.reject(new Error('Command "check" was aborted due to possible error in previous step'));
                return abort(options);
            }),
        });
    };
}
exports.makeOpenEyes = makeOpenEyes;
