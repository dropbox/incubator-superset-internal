"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformTarget = void 0;
const fs_1 = require("fs");
const req_1 = require("@applitools/req");
const image_1 = require("@applitools/image");
const utils = __importStar(require("@applitools/utils"));
async function transformTarget({ target, settings }) {
    if (target.image instanceof URL)
        target.image = target.image.href;
    if (utils.types.isString(target.image)) {
        const str = target.image; // we need this var because ts-wise all our string formats checkers (isHttpUrl/isBase64) are string type guards
        if (utils.types.isHttpUrl(str)) {
            const response = await (0, req_1.req)(target.image, { proxy: settings === null || settings === void 0 ? void 0 : settings.autProxy });
            target.image = await response.buffer();
        }
        else if (!utils.types.isBase64(str) /* is file path/file protocol url */) {
            target.image = await fs_1.promises.readFile(target.image.startsWith('file:') ? new URL(target.image) : target.image);
        }
    }
    const image = (0, image_1.makeImage)(target.image);
    if ((settings === null || settings === void 0 ? void 0 : settings.normalization) || (settings === null || settings === void 0 ? void 0 : settings.region)) {
        await image.debug({ ...settings.debugImages, suffix: 'original' });
        if (settings.normalization) {
            if (settings.normalization.scaleRatio)
                image.scale(settings.normalization.scaleRatio);
            if (settings.normalization.rotation)
                image.rotate(settings.normalization.rotation);
            if (settings.normalization.cut)
                image.crop(settings.normalization.cut);
            await image.debug({ ...settings.debugImages, suffix: 'normalized' });
        }
        if (settings.region) {
            image.crop(settings.region);
            await image.debug({ ...settings.debugImages, suffix: 'region' });
        }
    }
    target.image = await image.toPng();
    if (!target.size || settings.normalization || settings.region) {
        target.size = image.size;
    }
    return target;
}
exports.transformTarget = transformTarget;
