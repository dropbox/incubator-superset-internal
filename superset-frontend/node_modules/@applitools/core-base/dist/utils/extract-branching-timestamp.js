"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractBranchingTimestamp = void 0;
const utils = __importStar(require("@applitools/utils"));
exports.extractBranchingTimestamp = utils.general.cachify(async ({ branchName, parentBranchName }, options) => {
    var _a;
    const command = `HASH=$(git merge-base ${branchName} ${parentBranchName}) && git show -q --format=%cI $HASH`;
    let result = await utils.process.execute(command, options);
    if (result.stderr) {
        const [, missingBranch] = (_a = result.stderr.match(/Not a valid object name ([^\s]+)/)) !== null && _a !== void 0 ? _a : [];
        if (missingBranch) {
            result = await utils.process.execute(`git fetch origin ${missingBranch}:${missingBranch} && ${command}`, options);
        }
    }
    if (!result.stdout) {
        result = await utils.process.execute(`git fetch origin --unshallow && ${command}`, options);
    }
    const timestamp = result.stdout.replace(/\s/g, '');
    if (!/\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\+\d{2}:\d{2}/.test(timestamp)) {
        throw new Error(`stderr: ${result.stderr}, stdout: ${result.stdout}`);
    }
    return timestamp;
});
