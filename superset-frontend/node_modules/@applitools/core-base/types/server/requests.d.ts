import type { MaybeArray } from '@applitools/utils';
import type { ImageTarget, Core, Eyes, ServerSettings, CheckSettings, LocateSettings, LocateTextSettings, ExtractTextSettings, CloseSettings, CloseBatchSettings, DeleteTestSettings, LogEventSettings, TestInfo, AccountInfo, LocateResult, CheckResult, LocateTextResult, TestResult, OpenSettings } from '../types';
import { type Fetch } from '@applitools/req';
import { type Logger } from '@applitools/logger';
import { type ReqEyes } from './req-eyes';
import { type Upload } from './upload';
export interface CoreRequests extends Core {
    openEyes(options: {
        settings: OpenSettings;
        logger?: Logger;
    }): Promise<EyesRequests>;
    locate<TLocator extends string>(options: {
        target: ImageTarget;
        settings: LocateSettings<TLocator>;
        logger?: Logger;
    }): Promise<LocateResult<TLocator>>;
    getAccountInfo(options: {
        settings: ServerSettings;
        logger?: Logger;
    }): Promise<AccountInfo>;
    getBatchBranches(options: {
        settings: ServerSettings & {
            batchId: string;
        };
        logger?: Logger;
    }): Promise<{
        branchName: string;
        parentBranchName: string;
    }>;
    closeBatch(options: {
        settings: CloseBatchSettings;
        logger?: Logger;
    }): Promise<void>;
    deleteTest(options: {
        settings: DeleteTestSettings;
        logger?: Logger;
    }): Promise<void>;
    logEvent(options: {
        settings: MaybeArray<LogEventSettings>;
        logger?: Logger;
    }): any;
}
export interface EyesRequests extends Eyes {
    readonly test: TestInfo;
    check(options: {
        target: ImageTarget;
        settings?: CheckSettings;
        logger?: Logger;
    }): Promise<CheckResult[]>;
    checkAndClose(options: {
        target: ImageTarget;
        settings?: CheckSettings;
        logger?: Logger;
    }): Promise<TestResult[]>;
    locateText<TPattern extends string>(options: {
        target: ImageTarget;
        settings: LocateTextSettings<TPattern>;
        logger?: Logger;
    }): Promise<LocateTextResult<TPattern>>;
    extractText(options: {
        target: ImageTarget;
        settings: ExtractTextSettings;
        logger?: Logger;
    }): Promise<string[]>;
    close(options?: {
        settings?: CloseSettings;
        logger?: Logger;
    }): Promise<TestResult[]>;
    abort(options?: {
        logger?: Logger;
    }): Promise<TestResult[]>;
}
export declare function makeCoreRequests({ agentId: defaultAgentId, fetch, logger: defaultLogger, }: {
    agentId: string;
    fetch?: Fetch;
    logger?: Logger;
}): CoreRequests;
export declare function makeEyesRequests({ test, req, upload, logger: defaultLogger, }: {
    test: TestInfo;
    req: ReqEyes;
    upload: Upload;
    logger?: Logger;
}): EyesRequests;
