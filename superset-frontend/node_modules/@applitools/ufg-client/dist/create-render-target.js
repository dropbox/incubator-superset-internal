"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeCreateRenderTarget = void 0;
const resource_1 = require("./resources/resource");
const resource_dom_1 = require("./resources/resource-dom");
const resource_vhs_1 = require("./resources/resource-vhs");
function makeCreateRenderTarget({ processResources }) {
    return async function createRenderTarget({ snapshot, settings, }) {
        const isWeb = !!snapshot.cdt;
        const processedSnapshotResources = await processSnapshotResources({ snapshot, settings });
        const resources = await processedSnapshotResources.promise;
        const hashedSnapshot = resources[isWeb ? snapshot.url : 'vhs'];
        if (isWeb) {
            delete resources[snapshot.url];
        }
        return {
            snapshot: hashedSnapshot,
            resources,
            source: snapshot.url,
            vhsType: snapshot.vhsType,
            vhsCompatibilityParams: snapshot.vhsCompatibilityParams,
        };
    };
    async function processSnapshotResources({ snapshot, settings, }) {
        var _a, _b, _c, _d;
        const [snapshotResources, ...frameResources] = await Promise.all([
            processResources({
                resources: {
                    ...((_a = snapshot.resourceUrls) !== null && _a !== void 0 ? _a : []).reduce((resources, url) => {
                        return Object.assign(resources, { [url]: (0, resource_1.makeResource)({ url, renderer: settings === null || settings === void 0 ? void 0 : settings.renderer }) });
                    }, {}),
                    ...Object.entries((_b = snapshot.resourceContents) !== null && _b !== void 0 ? _b : {}).reduce((resources, [url, resource]) => {
                        return Object.assign(resources, {
                            [url]: resource.errorStatusCode
                                ? (0, resource_1.makeResource)({ id: url, errorStatusCode: resource.errorStatusCode })
                                : (0, resource_1.makeResource)({ url, value: resource.value, contentType: resource.type, dependencies: resource.dependencies }),
                        });
                    }, {}),
                },
                settings: { referer: snapshot.url, ...settings },
            }),
            ...((_c = snapshot.frames) !== null && _c !== void 0 ? _c : []).map(frameSnapshot => {
                return processSnapshotResources({ snapshot: frameSnapshot, settings });
            }),
        ]);
        const frameDomResourceMapping = frameResources.reduce((mapping, resources, index) => {
            const frameUrl = snapshot.frames[index].url;
            return Object.assign(mapping, { [frameUrl]: resources.mapping[frameUrl] });
        }, {});
        const resourceMappingWithoutDom = { ...snapshotResources.mapping, ...frameDomResourceMapping };
        const domResource = snapshot.cdt
            ? {
                [snapshot.url]: (0, resource_dom_1.makeResourceDom)({
                    cdt: snapshot.cdt,
                    resources: resourceMappingWithoutDom,
                }),
            }
            : {
                vhs: (0, resource_vhs_1.makeResourceVhs)({
                    vhsHash: (_d = snapshot.vhsHash /* android */) !== null && _d !== void 0 ? _d : snapshotResources.mapping.vhs /* ios */,
                    vhsType: snapshot.vhsType,
                    platformName: snapshot.platformName,
                    resources: resourceMappingWithoutDom, // this will be empty until resources are supported inside VHS
                }),
            };
        const processedDomResource = await processResources({ resources: domResource });
        const frameResourceMapping = frameResources.reduce((mapping, resources) => {
            return Object.assign(mapping, resources.mapping);
        }, {});
        const resourceMapping = {
            ...frameResourceMapping,
            ...snapshotResources.mapping,
            ...processedDomResource.mapping,
        };
        return {
            mapping: resourceMapping,
            promise: Promise.all([
                snapshotResources.promise,
                processedDomResource.promise,
                ...frameResources.map(resources => resources.promise),
            ]).then(() => resourceMapping),
        };
    }
}
exports.makeCreateRenderTarget = makeCreateRenderTarget;
