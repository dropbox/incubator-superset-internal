"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeProcessResources = void 0;
const resource_1 = require("./resource");
const extract_css_dependency_urls_1 = require("../utils/extract-css-dependency-urls");
const extract_svg_dependency_urls_1 = require("../utils/extract-svg-dependency-urls");
const utils = __importStar(require("@applitools/utils"));
function makeProcessResources({ fetchResource, uploadResource, cache = new Map(), logger, }) {
    return async function processResources({ resources, settings, }) {
        const processedResources = await Object.entries(resources).reduce(async (processedResourcesPromise, [url, resource]) => {
            if (utils.types.has(resource, 'value') || utils.types.has(resource, 'errorStatusCode')) {
                // process contentful resource or failed resource
                const processedResource = await processContentfulResource({ resource });
                return Object.assign(await processedResourcesPromise, { [url]: processedResource });
            }
            else {
                // process url resource with dependencies
                const processedResourceWithDependencies = await processUrlResourceWithDependencies({ resource, settings });
                return Object.assign(await processedResourcesPromise, processedResourceWithDependencies);
            }
        }, Promise.resolve({}));
        const mapping = {};
        const ready = [];
        for (const [url, processedResource] of Object.entries(processedResources)) {
            mapping[url] = processedResource.hash;
            ready.push(processedResource.ready);
        }
        return { mapping, promise: Promise.all(ready).then(() => mapping) };
    };
    async function processContentfulResource({ resource }) {
        return persistResource({ resource });
    }
    async function processUrlResource({ resource, settings, }) {
        const cachedResource = cache.get(resource.id);
        if (cachedResource) {
            const dependencies = cachedResource.dependencies || [];
            logger === null || logger === void 0 ? void 0 : logger.log(`resource retrieved from cache, with dependencies (${dependencies.length}): ${resource.url} with dependencies --> ${dependencies}`);
            return cachedResource;
        }
        else if (/^https?:$/i.test(new URL(resource.url).protocol)) {
            try {
                const fetchedResource = await fetchResource({ resource, settings });
                const dependencyUrls = utils.types.has(fetchedResource, 'value')
                    ? await extractDependencyUrls({ resource: fetchedResource })
                    : [];
                logger === null || logger === void 0 ? void 0 : logger.log(`dependencyUrls for ${resource.url} --> ${dependencyUrls}`);
                return persistResource({ resource: fetchedResource, dependencies: dependencyUrls });
            }
            catch (err) {
                logger === null || logger === void 0 ? void 0 : logger.log(`error fetching resource at ${resource.url}, setting errorStatusCode to 504. err=${err}`);
                return (0, resource_1.makeResource)({ ...resource, errorStatusCode: 504 });
            }
        }
    }
    async function processUrlResourceWithDependencies({ resource, settings, }) {
        const processedResourcesWithDependencies = {};
        await doProcessUrlResourceWithDependencies(resource);
        return processedResourcesWithDependencies;
        async function doProcessUrlResourceWithDependencies(resource) {
            const processedResource = await processUrlResource({ resource, settings });
            if (processedResource) {
                processedResourcesWithDependencies[resource.url] = processedResource;
                if (processedResource.dependencies) {
                    const dependencyResources = processedResource.dependencies.flatMap(dependencyUrl => {
                        if (processedResourcesWithDependencies[dependencyUrl])
                            return [];
                        return (0, resource_1.makeResource)({ url: dependencyUrl, renderer: settings.renderer });
                    });
                    await Promise.all(dependencyResources.map(doProcessUrlResourceWithDependencies));
                }
            }
        }
    }
    async function persistResource({ resource, dependencies, }) {
        var _a;
        const entry = {
            hash: resource.hash,
            dependencies: (_a = resource.dependencies) !== null && _a !== void 0 ? _a : dependencies,
        };
        if (utils.types.has(resource, 'value')) {
            entry.ready = uploadResource({ resource })
                .then(() => {
                const entry = cache.get(resource.id);
                cache.set(resource.id, { ...entry, ready: true });
                return true;
            })
                .catch(err => {
                cache.delete(resource.id);
                throw err;
            });
        }
        else {
            entry.ready = true;
        }
        cache.set(resource.id, entry);
        return entry;
    }
    async function extractDependencyUrls({ resource }) {
        try {
            let dependencyUrls = [];
            if (/text\/css/.test(resource.contentType)) {
                dependencyUrls = (0, extract_css_dependency_urls_1.extractCssDependencyUrls)(resource.value.toString());
            }
            else if (/image\/svg/.test(resource.contentType)) {
                dependencyUrls = (0, extract_svg_dependency_urls_1.extractSvgDependencyUrls)(resource.value.toString());
            }
            return dependencyUrls.reduce((dependencyUrls, dependencyUrl) => {
                dependencyUrl = utils.general.absolutizeUrl(dependencyUrl, resource.url);
                // skip recursive dependency
                if (dependencyUrl !== resource.url)
                    dependencyUrls.push(dependencyUrl);
                return dependencyUrls;
            }, []);
        }
        catch (e) {
            logger === null || logger === void 0 ? void 0 : logger.log(`could not parse ${resource.contentType} ${resource.url}`, e);
            return [];
        }
    }
}
exports.makeProcessResources = makeProcessResources;
