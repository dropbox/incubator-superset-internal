"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeUploadResource = void 0;
const utils = __importStar(require("@applitools/utils"));
const throat_1 = __importDefault(require("throat"));
function makeUploadResource({ requests, batchingTimeout = 300, concurrency = 100, logger, }) {
    const uploadedResources = new Set();
    const requestedResources = new Map();
    const uploadResourceWithConcurrency = (0, throat_1.default)(concurrency, requests.uploadResource);
    const uploadResourceWithBatching = utils.general.batchify(uploadResources, { timeout: batchingTimeout });
    return async function uploadResource({ resource }) {
        const hash = resource.hash.hash;
        if (uploadedResources.has(hash)) {
            return Promise.resolve();
        }
        else if (requestedResources.has(hash)) {
            return requestedResources.get(hash);
        }
        else {
            const promise = uploadResourceWithBatching(resource)
                .then(result => {
                uploadedResources.add(hash);
                return result;
            })
                .finally(() => {
                requestedResources.delete(hash);
            });
            requestedResources.set(hash, promise);
            return promise;
        }
    };
    async function uploadResources(batch) {
        try {
            const presentedResources = await requests.checkResources({ resources: batch.map(([resource]) => resource), logger });
            presentedResources.forEach((presented, index) => {
                const [resource, { resolve, reject }] = batch[index];
                if (presented) {
                    resolve();
                }
                else {
                    uploadResourceWithConcurrency({ resource, logger }).then(resolve, reject);
                }
            });
        }
        catch (err) {
            batch.forEach(([, { reject }]) => reject(err));
        }
    }
}
exports.makeUploadResource = makeUploadResource;
