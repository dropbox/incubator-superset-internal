"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeHashedResource = exports.makeResource = void 0;
const crypto_1 = require("crypto");
const utils = __importStar(require("@applitools/utils"));
const UFG_MAX_RESOURCE_SIZE = 34.5 * 1024 * 1024;
function makeResource(resource) {
    var _a, _b, _c;
    if (utils.types.has(resource, 'errorStatusCode')) {
        const failedResource = {
            id: resource.id,
            errorStatusCode: resource.errorStatusCode,
            hash: { errorStatusCode: resource.errorStatusCode },
        };
        return failedResource;
    }
    else if (utils.types.has(resource, 'value')) {
        const contentfulResource = {
            id: (_a = resource.id) !== null && _a !== void 0 ? _a : resource.url,
            url: resource.url,
            value: resource.value || Buffer.alloc(0),
            contentType: resource.contentType || 'application/x-applitools-unknown',
            dependencies: resource.dependencies,
        };
        if (!isDomOrVHS(resource) && ((_b = resource.value) === null || _b === void 0 ? void 0 : _b.length) > UFG_MAX_RESOURCE_SIZE) {
            contentfulResource.value = contentfulResource.value.slice(0, UFG_MAX_RESOURCE_SIZE - 100000);
        }
        contentfulResource.hash = makeHashedResource(contentfulResource);
        return contentfulResource;
    }
    else {
        const urlResource = {
            id: (_c = resource.id) !== null && _c !== void 0 ? _c : resource.url,
            url: resource.url,
        };
        if (resource.renderer && isRendererDependantResource(resource)) {
            urlResource.renderer = resource.renderer;
            urlResource.id += `~${extractRendererName(resource)}`;
        }
        return urlResource;
    }
}
exports.makeResource = makeResource;
function makeHashedResource(resource) {
    return {
        hashFormat: 'sha256',
        hash: (0, crypto_1.createHash)('sha256').update(resource.value).digest('hex'),
        contentType: resource.contentType,
    };
}
exports.makeHashedResource = makeHashedResource;
function isDomOrVHS(resource) {
    return [
        'x-applitools-html/cdt',
        'x-applitools-vhs/ios',
        'x-applitools-vhs/android-x',
        'x-applitools-vhs/android-support',
    ].includes(resource.contentType);
}
function isRendererDependantResource({ url }) {
    return /https:\/\/fonts.googleapis.com/.test(url);
}
function extractRendererName({ renderer }) {
    if (!utils.types.has(renderer, 'name'))
        return;
    const [browserName] = renderer.name.split(/[-\d]/, 1);
    return browserName;
}
