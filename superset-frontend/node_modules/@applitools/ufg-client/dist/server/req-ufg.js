"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeReqUFG = void 0;
const req_1 = require("@applitools/req");
const utils = __importStar(require("@applitools/utils"));
function makeReqUFG({ config, logger }) {
    var _a;
    return (0, req_1.makeReq)({
        baseUrl: config.serverUrl,
        headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json',
            'X-Auth-Token': config.accessToken,
            'User-Agent': config.agentId,
        },
        proxy: config.proxy,
        timeout: (_a = config.connectionTimeout) !== null && _a !== void 0 ? _a : 300000 /* 5min */,
        retry: {
            limit: 5,
            timeout: 200,
            statuses: [404, 500, 502, 504],
            codes: ['ECONNRESET', 'ECONNABORTED', 'ETIMEDOUT', 'ENOTFOUND', 'EAI_AGAIN'],
        },
        hooks: [handleLogs({ logger }), handleUnexpectedResponse()],
    });
}
exports.makeReqUFG = makeReqUFG;
function handleLogs({ logger: defaultLogger } = {}) {
    const guid = utils.general.guid();
    let counter = 0;
    return {
        beforeRequest({ request, options }) {
            var _a;
            const logger = (_a = options.logger) !== null && _a !== void 0 ? _a : defaultLogger;
            let requestId = request.headers.get('x-applitools-eyes-client-request-id');
            if (!requestId) {
                requestId = `${counter++}--${guid}`;
                request.headers.set('x-applitools-eyes-client-request-id', requestId);
            }
            logger === null || logger === void 0 ? void 0 : logger.log(`Request "${options.name}" [${requestId}] will be sent to the address "[${request.method}]${request.url}" with body`, options.body);
        },
        beforeRetry({ request, attempt }) {
            var _a, _b;
            const [requestId] = (_b = (_a = request.headers.get('x-applitools-eyes-client-request-id')) === null || _a === void 0 ? void 0 : _a.split('#')) !== null && _b !== void 0 ? _b : [];
            if (requestId) {
                request.headers.set('x-applitools-eyes-client-request-id', `${requestId}#${attempt + 1}`);
            }
        },
        async afterResponse({ request, response, options }) {
            var _a;
            const logger = (_a = options.logger) !== null && _a !== void 0 ? _a : defaultLogger;
            const requestId = request.headers.get('x-applitools-eyes-client-request-id');
            logger === null || logger === void 0 ? void 0 : logger.log(`Request "${options.name}" [${requestId}] that was sent to the address "[${request.method}]${request.url}" respond with ${response.statusText}(${response.status})`, !response.ok ? `and body ${JSON.stringify(await response.clone().text())}` : '');
        },
        afterError({ request, error, options }) {
            var _a;
            const logger = (_a = options.logger) !== null && _a !== void 0 ? _a : defaultLogger;
            const requestId = request.headers.get('x-applitools-eyes-client-request-id');
            logger === null || logger === void 0 ? void 0 : logger.error(`Request "${options.name}" [${requestId}] that was sent to the address "[${request.method}]${request.url}" failed with error`, error);
        },
    };
}
function handleUnexpectedResponse() {
    return {
        async afterResponse({ request, response, options }) {
            const { expected, name } = options;
            if (expected && (utils.types.isArray(expected) ? !expected.includes(response.status) : expected !== response.status)) {
                throw new Error(`Request "${name}" that was sent to the address "[${request.method}]${request.url}" failed due to unexpected status ${response.statusText}(${response.status}) with body ${JSON.stringify(await response.clone().text())}`);
            }
        },
    };
}
