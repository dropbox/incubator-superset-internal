"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractCssDependencyUrls = void 0;
const utils = __importStar(require("@applitools/utils"));
const postcss_value_parser_1 = __importDefault(require("postcss-value-parser"));
function extractCssDependencyUrls(css) {
    const urls = [];
    const parsedValue = new postcss_value_parser_1.default(css);
    parsedValue.walk((node, index, nodes) => {
        urls.push(...extractUrls(node, index, nodes));
    });
    return [...new Set(urls)].map(utils.general.toUriEncoding).map(utils.general.toUnAnchoredUri);
}
exports.extractCssDependencyUrls = extractCssDependencyUrls;
function extractUrls(node, index, nodes) {
    var _a, _b;
    if (node.type === 'function') {
        if (node.value === 'url' && ((_a = node.nodes) === null || _a === void 0 ? void 0 : _a.length) == 1) {
            return [node.nodes[0].value];
        }
        if (node.value.includes('image-set') && node.nodes) {
            return node.nodes.filter(n => n.type === 'string').map(n => n.value);
        }
    }
    else if (node.type === 'word') {
        if (node.value === '@import' && ((_b = nodes[index + 2]) === null || _b === void 0 ? void 0 : _b.type) === 'string') {
            return [nodes[index + 2].value];
        }
    }
    return [];
}
