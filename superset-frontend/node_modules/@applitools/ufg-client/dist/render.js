"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeRender = void 0;
const utils = __importStar(require("@applitools/utils"));
const throat_1 = __importDefault(require("throat"));
function makeRender({ requests, concurrency, timeout = 60 * 60 * 1000, batchingTimeout = 300, logger, }) {
    const startRenderWithBatching = utils.general.batchify(startRenders, { timeout: batchingTimeout });
    const checkRenderResultWithBatching = utils.general.batchify(checkRenderResults, { timeout: batchingTimeout });
    const renderWithConcurrency = concurrency ? (0, throat_1.default)(concurrency, render) : render;
    return renderWithConcurrency;
    async function render({ target, settings, signal }) {
        const timedOutAt = Date.now() + timeout;
        const render = await startRenderWithBatching({ target, settings });
        return checkRenderResultWithBatching({ render, signal, timedOutAt });
    }
    async function startRenders(batch) {
        try {
            const renders = await requests.startRenders({ requests: batch.map(([request]) => request), logger });
            renders.forEach((render, index) => {
                const [, { resolve, reject }] = batch[index];
                if (render.status === 'need-more-resources') {
                    logger === null || logger === void 0 ? void 0 : logger.error(`Got unexpected status ${render.status} in start render response`);
                    reject(new Error(`Got unexpected status ${render.status} in start render response`));
                }
                else {
                    resolve(render);
                }
            });
        }
        catch (err) {
            batch.forEach(([, { reject }]) => reject(err));
        }
    }
    async function checkRenderResults(batch) {
        try {
            batch = batch.filter(([{ render, signal, timedOutAt }, { reject }]) => {
                if (signal === null || signal === void 0 ? void 0 : signal.aborted) {
                    logger === null || logger === void 0 ? void 0 : logger.warn(`Render with id "${render.renderId}" aborted`);
                    reject(new Error(`Render with id "${render.renderId}" aborted`));
                    return false;
                }
                else if (Date.now() >= timedOutAt) {
                    logger === null || logger === void 0 ? void 0 : logger.error(`Render with id "${render.renderId}" timed out`);
                    reject(new Error(`Render with id "${render.renderId}" timed out`));
                    return false;
                }
                else {
                    return true;
                }
            });
            const results = await requests.checkRenderResults({ renders: batch.map(([{ render }]) => render), logger });
            results.forEach((result, index) => {
                const [{ render, signal, timedOutAt }, { resolve, reject }] = batch[index];
                if (result.status === 'error') {
                    logger === null || logger === void 0 ? void 0 : logger.error(`Render with id "${render.renderId}" failed due to an error - ${result.error}`);
                    reject(new Error(`Render with id "${render.renderId}" failed due to an error - ${result.error}`));
                }
                else if (result.status === 'rendered') {
                    resolve(result);
                }
                else {
                    // NOTE: this may create a long promise chain
                    checkRenderResultWithBatching({ render, signal, timedOutAt }).then(resolve, reject);
                }
            });
        }
        catch (err) {
            batch.forEach(([, { reject }]) => reject(err));
        }
    }
}
exports.makeRender = makeRender;
