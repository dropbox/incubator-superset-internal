import type { AndroidDevice, IOSDevice, ChromeEmulationDevice, RenderTarget, RendererSettings, RendererEnvironment, RenderSettings, RenderResult } from '../types';
import { type ContentfulResource } from '../resources/resource';
import { type Logger } from '@applitools/logger';
import { type ReqUFGConfig } from './req-ufg';
export declare type RenderRequest = {
    target: RenderTarget;
    settings: RenderSettings;
};
export declare type StartedRender = {
    jobId: string;
    renderId: string;
    status: string;
};
export interface UFGRequests {
    bookRenderers(options: {
        settings: RendererSettings[];
        logger?: Logger;
    }): Promise<RendererEnvironment[]>;
    startRenders(options: {
        requests: RenderRequest[];
        logger?: Logger;
    }): Promise<StartedRender[]>;
    checkRenderResults(options: {
        renders: StartedRender[];
        logger?: Logger;
    }): Promise<RenderResult[]>;
    uploadResource(options: {
        resource: ContentfulResource;
        logger?: Logger;
    }): Promise<void>;
    checkResources(options: {
        resources: ContentfulResource[];
        logger?: Logger;
    }): Promise<(boolean | null)[]>;
    getChromeEmulationDevices(options?: {
        logger?: Logger;
    }): Promise<Record<ChromeEmulationDevice, any>>;
    getIOSDevices(options?: {
        logger?: Logger;
    }): Promise<Record<IOSDevice, any>>;
    getAndroidDevices(options?: {
        logger?: Logger;
    }): Promise<Record<AndroidDevice, any>>;
}
export declare type UFGRequestsConfig = ReqUFGConfig & {
    uploadUrl: string;
    stitchingServiceUrl: string;
};
export declare function makeUFGRequests({ config, logger: defaultLogger }: {
    config: UFGRequestsConfig;
    logger: Logger;
}): UFGRequests;
