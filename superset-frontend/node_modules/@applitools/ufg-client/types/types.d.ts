/// <reference types="node" />
import type { Location, Size, Region } from '@applitools/utils';
import { type Logger } from '@applitools/logger';
import { type HashedResource } from './resources/resource';
import { type AbortSignal } from 'abort-controller';
import { type ProcessResourcesSettings } from './resources/process-resources';
export declare type DomSnapshot = {
    cdt: any[];
    url: string;
    resourceUrls: string[];
    resourceContents: Record<string, {
        type: string;
        value: Buffer;
    }>;
    frames: DomSnapshot[];
    cookies?: Cookie[];
};
export declare type AndroidSnapshot = {
    platformName: 'android';
    vhsType: string;
    vhsHash: {
        hashFormat: string;
        hash: string;
        contentType: string;
    };
};
export declare type IOSSnapshot = {
    platformName: 'ios';
    vhsCompatibilityParams: Record<string, any>;
} & ({
    resourceContents: Record<string, {
        type: string;
        value: Buffer;
    }>;
} | {
    vhsHash: {
        hashFormat: string;
        hash: string;
        contentType: string;
    };
});
export declare type Snapshot = DomSnapshot | AndroidSnapshot | IOSSnapshot;
export declare type Selector = string | {
    selector: string;
    type?: string;
    shadow?: Selector;
    frame?: Selector;
};
export declare type Cookie = {
    name: string;
    value: string;
    domain?: string;
    path?: string;
    expiry?: number;
    httpOnly?: boolean;
    secure?: boolean;
    sameSite?: 'Strict' | 'Lax' | 'None';
};
export declare type DesktopBrowser = 'chrome' | 'chrome-one-version-back' | 'chrome-two-versions-back' | 'firefox' | 'firefox-one-version-back' | 'firefox-two-versions-back' | 'ie' | 'ie10' | 'edge' | 'edgechromium' | 'edgelegacy' | 'edgechromium-one-version-back' | 'edgechromium-two-versions-back' | 'safari' | 'safari-earlyaccess' | 'safari-one-version-back' | 'safari-two-versions-back';
export declare type DesktopBrowserRenderer = {
    name?: DesktopBrowser;
    width: number;
    height: number;
};
export declare type ScreenOrientation = 'portrait' | 'landscape';
export declare type ChromeEmulationDevice = 'Blackberry PlayBook' | 'BlackBerry Z30' | 'Galaxy A5' | 'Galaxy Note 10' | 'Galaxy Note 10 Plus' | 'Galaxy Note 2' | 'Galaxy Note 3' | 'Galaxy Note 4' | 'Galaxy Note 8' | 'Galaxy Note 9' | 'Galaxy S3' | 'Galaxy S5' | 'Galaxy S8' | 'Galaxy S8 Plus' | 'Galaxy S9' | 'Galaxy S9 Plus' | 'Galaxy S10' | 'Galaxy S10 Plus' | 'Galaxy S20' | 'Galaxy S22' | 'Galaxy Tab S7' | 'iPad' | 'iPad 6th Gen' | 'iPad 7th Gen' | 'iPad Air 2' | 'iPad Mini' | 'iPad Pro' | 'iPhone 11' | 'iPhone 11 Pro' | 'iPhone 11 Pro Max' | 'iPhone 4' | 'iPhone 5/SE' | 'iPhone 6/7/8' | 'iPhone 6/7/8 Plus' | 'iPhone X' | 'iPhone XR' | 'iPhone XS' | 'iPhone XS Max' | 'Kindle Fire HDX' | 'Laptop with HiDPI screen' | 'Laptop with MDPI screen' | 'Laptop with touch' | 'LG G6' | 'LG Optimus L70' | 'Microsoft Lumia 550' | 'Microsoft Lumia 950' | 'Nexus 10' | 'Nexus 4' | 'Nexus 5' | 'Nexus 5X' | 'Nexus 6' | 'Nexus 6P' | 'Nexus 7' | 'Nokia Lumia 520' | 'Nokia N9' | 'OnePlus 7T' | 'OnePlus 7T Pro' | 'Pixel 2' | 'Pixel 2 XL' | 'Pixel 3' | 'Pixel 3 XL' | 'Pixel 4' | 'Pixel 4 XL' | 'Pixel 5' | 'Sony Xperia 10 II';
export declare type ChromeEmulationDeviceRenderer = {
    chromeEmulationInfo: {
        deviceName: ChromeEmulationDevice;
        screenOrientation?: ScreenOrientation;
    };
};
export declare type IOSDevice = 'iPhone 14 Pro Max' | 'iPhone 14' | 'iPhone 13 Pro Max' | 'iPhone 13 Pro' | 'iPhone 13' | 'iPhone 12 Pro Max' | 'iPhone 12 Pro' | 'iPhone 12' | 'iPhone 12 mini' | 'iPhone 11 Pro' | 'iPhone 11 Pro Max' | 'iPhone 11' | 'iPhone XR' | 'iPhone Xs' | 'iPhone X' | 'iPhone 8' | 'iPhone 8 Plus' | 'iPhone 7' | 'iPhone SE (1st generation)' | 'iPad Pro (12.9-inch) (3rd generation)' | 'iPad Pro (11-inch) (4th generation)' | 'iPad (7th generation)' | 'iPad (9th generation)' | 'iPad Air (2nd generation)' | 'iPad Air (4th generation)';
export declare type IOSVersion = 'latest' | 'latest-1';
export declare type IOSDeviceRenderer = {
    iosDeviceInfo: {
        deviceName: IOSDevice;
        version?: IOSVersion;
        screenOrientation?: ScreenOrientation;
    };
};
export declare type AndroidDevice = 'Pixel 3 XL' | 'Pixel 4' | 'Pixel 4 XL' | 'Pixel 5' | 'Pixel 6' | 'Galaxy S10' | 'Galaxy S10 Plus' | 'Galaxy Note 10' | 'Galaxy Note 10 Plus' | 'Galaxy S20' | 'Galaxy S20 Plus' | 'Galaxy S21' | 'Galaxy S21 Plus' | 'Galaxy S21 Ultra' | 'Galaxy S22' | 'Galaxy S22 Plus' | 'Galaxy Tab S7' | 'Galaxy Tab S8' | 'Xiaomi Redmi Note 11' | 'Xiaomi Redmi Note 11 Pro' | 'Sony Xperia 10 II';
export declare type AndroidVersion = 'latest' | 'latest-1';
export declare type AndroidDeviceRenderer = {
    androidDeviceInfo: {
        deviceName: AndroidDevice;
        version?: AndroidVersion;
        screenOrientation?: ScreenOrientation;
    };
};
export declare type Renderer = DesktopBrowserRenderer | ChromeEmulationDeviceRenderer | IOSDeviceRenderer | AndroidDeviceRenderer;
export interface UFGClient {
    createRenderTarget(options: {
        snapshot: Snapshot;
        settings?: ProcessResourcesSettings;
    }): Promise<RenderTarget>;
    bookRenderer(options: {
        settings: RendererSettings;
    }): Promise<RendererEnvironment>;
    render(options: {
        target: RenderTarget;
        settings: RenderSettings;
        signal?: AbortSignal;
    }): Promise<RenderResult>;
    getChromeEmulationDevices(options?: {
        logger?: Logger;
    }): Promise<Record<ChromeEmulationDevice, any>>;
    getIOSDevices(options?: {
        logger?: Logger;
    }): Promise<Record<IOSDevice, any>>;
    getAndroidDevices(options?: {
        logger?: Logger;
    }): Promise<Record<AndroidDevice, any>>;
    getCachedResourceUrls(): string[];
}
export declare type RendererEnvironment = {
    rendererId: string;
    rendererInfo: {
        type: 'native' | 'web';
        renderer: Renderer;
    };
    rawEnvironment: Record<string, any>;
};
export declare type RenderTarget = {
    snapshot: HashedResource;
    resources: Record<string, HashedResource | {
        errorStatusCode: number;
    }>;
    source?: string;
    vhsType?: string;
    vhsCompatibilityParams?: Record<string, any>;
};
export declare type RendererSettings = {
    type: 'web' | 'native';
    renderer: Renderer;
};
export declare type RenderSettings = RendererSettings & {
    rendererId: string;
    region?: Region | Selector;
    fully?: boolean;
    selectorsToCalculate?: Selector[];
    includeFullPageSize?: boolean;
    ufgOptions?: Record<string, any>;
    hooks?: {
        beforeCaptureScreenshot: string;
    };
    sendDom?: boolean;
};
export declare type RenderResult = {
    renderId: string;
    status: 'rendering' | 'rendered' | 'error';
    error?: any;
    image: Buffer | string;
    size?: Size;
    name?: string;
    source?: string;
    dom?: string;
    locationInViewport?: Location;
    locationInView?: Location;
    fullViewSize?: Size;
    selectorRegions?: Region[][];
};
