"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.takeSnapshots = exports.takeScreenshot = void 0;
const logger_1 = require("@applitools/logger");
const req_broker_1 = require("./req-broker");
const utils = __importStar(require("@applitools/utils"));
async function takeScreenshot({ url, settings, logger, }) {
    var _a;
    logger = (_a = logger === null || logger === void 0 ? void 0 : logger.extend({ label: 'nml client' })) !== null && _a !== void 0 ? _a : (0, logger_1.makeLogger)({ label: 'nml client' });
    const req = (0, req_broker_1.makeReqBroker)({ config: settings, logger });
    const payload = {
        name: settings.name,
        screenshotMode: settings.fully ? 'FULL_RESIZE' : 'VIEWPORT',
        scrollRootElement: settings.scrollRootElement,
        hideCaret: settings.hideCaret,
        waitBeforeCapture: settings.waitBeforeCapture,
        overlap: settings.overlap,
        selectorsToFindRegionsFor: [],
    };
    const response = await req(url, {
        name: 'TAKE_SCREENSHOT',
        body: {
            protocolVersion: '1.0',
            name: 'TAKE_SCREENSHOT',
            key: utils.general.guid(),
            payload,
        },
        logger,
    });
    const result = await response.json();
    return result.payload;
}
exports.takeScreenshot = takeScreenshot;
async function takeSnapshots({ url, settings, logger, }) {
    var _a;
    logger = (_a = logger === null || logger === void 0 ? void 0 : logger.extend({ label: 'nml client' })) !== null && _a !== void 0 ? _a : (0, logger_1.makeLogger)({ label: 'nml client' });
    const req = (0, req_broker_1.makeReqBroker)({ config: settings, logger });
    const payload = {
        waitBeforeCapture: settings.waitBeforeCapture,
    };
    const response = await req(url, {
        name: 'TAKE_SNAPSHOT',
        body: {
            protocolVersion: '1.0',
            name: 'TAKE_SNAPSHOT',
            key: utils.general.guid(),
            payload,
        },
    });
    const snapshot = await response.json().then(({ payload }) => {
        const { resourceMap, metadata } = payload.result;
        const platformName = resourceMap.metadata.platformName;
        return {
            platformName,
            vhsHash: resourceMap.vhs,
            vhsCompatibilityParams: platformName === 'ios'
                ? {
                    UIKitLinkTimeVersionNumber: metadata.UIKitLinkTimeVersionNumber,
                    UIKitRunTimeVersionNumber: metadata.UIKitRunTimeVersionNumber,
                }
                : undefined,
        };
    });
    return Array(settings.renderers.length).fill(snapshot);
}
exports.takeSnapshots = takeSnapshots;
