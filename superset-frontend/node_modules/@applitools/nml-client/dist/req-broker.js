"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeReqBroker = void 0;
const req_1 = __importStar(require("@applitools/req"));
function makeReqBroker({ config, logger }) {
    return (0, req_1.makeReq)({
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'User-Agent': config.agentId,
        },
        proxy: config.proxy,
        timeout: 300000 /* 5min */,
        retry: {
            limit: 5,
            timeout: 200,
            codes: ['ECONNRESET', 'ECONNABORTED', 'ETIMEDOUT', 'ENOTFOUND', 'EAI_AGAIN'],
        },
        hooks: [handleLogs({ logger }), handleLongRequests({ req: req_1.default }), handleUnexpectedResponse()],
    });
}
exports.makeReqBroker = makeReqBroker;
function handleLogs({ logger: defaultLogger } = {}) {
    return {
        beforeRequest({ request, options }) {
            var _a;
            const logger = (_a = options.logger) !== null && _a !== void 0 ? _a : defaultLogger;
            logger === null || logger === void 0 ? void 0 : logger.log(`Broker request "${options.name}" will be sent to the address "[${request.method}]${request.url}" with body`, options.body);
        },
        async afterResponse({ request, response, options }) {
            var _a;
            const logger = (_a = options.logger) !== null && _a !== void 0 ? _a : defaultLogger;
            logger === null || logger === void 0 ? void 0 : logger.log(`Broker request "${options.name}" that was sent to the address "[${request.method}]${request.url}" respond with ${response.statusText}(${response.status})`, response.status !== 200 ? `and body ${JSON.stringify(await response.clone().text())}` : '');
        },
        afterError({ request, error, options }) {
            var _a;
            const logger = (_a = options.logger) !== null && _a !== void 0 ? _a : defaultLogger;
            logger === null || logger === void 0 ? void 0 : logger.error(`Broker request "${options.name}" that was sent to the address "[${request.method}]${request.url}" failed with error`, error);
        },
    };
}
function handleLongRequests({ req }) {
    return {
        async afterResponse({ request, response, options }) {
            if (response.status === 200) {
                return req(request.url + '-response', {
                    proxy: options.proxy,
                    retry: { statuses: [404] },
                });
            }
        },
    };
}
function handleUnexpectedResponse() {
    return {
        async afterResponse({ response }) {
            var _a;
            if (response.status !== 200) {
                throw new Error(`Something went wrong when communicating with the mobile application, please try running your test again (error code: ${response.status})`);
            }
            else {
                const body = await response.text();
                const result = JSON.parse(body);
                if ((_a = result === null || result === void 0 ? void 0 : result.payload) === null || _a === void 0 ? void 0 : _a.error) {
                    const error = result.payload.error;
                    throw new Error(`There was a problem when interacting with the mobile application. The provided error message was "${error.message}" and had a stack trace of "${error.stack}"`);
                }
                return new req_1.Response(body, response);
            }
        },
    };
}
