export declare function isNotDefined(value: any): boolean;
export declare function isDefined(value: any): boolean;
export declare function isNull(value: any): value is null | undefined;
export declare function isBoolean(value: any): value is boolean;
export declare function isString(value: any): value is string;
export declare function isBase64(value: any): value is string;
export declare function isHttpUrl(value: any): value is string;
export declare function isNumber(value: any): value is number;
export declare function isInteger(value: any): value is number;
export declare function isArray(value: any): value is any[];
export declare function isObject(value: any): value is Record<PropertyKey, any>;
export declare function isPlainObject(value: any): value is Record<PropertyKey, any>;
export declare function isEmpty(value: Record<PropertyKey, unknown>): value is Record<PropertyKey, never>;
export declare function isEmpty(value: any[]): value is [];
export declare function isEmpty(value: string): value is '';
export declare function isFunction(value: any): value is (...args: any[]) => any;
export declare function isFunction<TKey extends PropertyKey>(value: any, key: TKey): value is {
    [key in TKey]: (...args: any[]) => any;
};
export declare function isEnumValue<TEnum extends Record<string, string | number>, TValues extends TEnum[keyof TEnum]>(value: any, enumeration: TEnum): value is TValues;
export declare function has<TKey extends PropertyKey>(value: any, keys: TKey | readonly TKey[]): value is Record<TKey, unknown>;
export declare function instanceOf<TCtor>(value: any, ctorName: string): value is TCtor;
export declare function instanceOf<TCtor extends Function>(value: any, ctor: TCtor): value is TCtor['prototype'];
