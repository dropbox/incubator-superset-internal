import type { Location, Region } from '@applitools/utils';
import { type SpecDriver } from './spec-driver';
import { type Driver } from './driver';
import { type Element } from './element';
import { type Logger } from '@applitools/logger';
export declare class HelperAndroid<TDriver, TContext, TElement, TSelector> {
    static make<TDriver, TContext, TElement, TSelector>(options: {
        spec: SpecDriver<TDriver, TContext, TElement, TSelector>;
        driver: Driver<TDriver, TContext, TElement, TSelector>;
        logger: Logger;
    }): Promise<HelperAndroid<TDriver, TContext, TElement, TSelector> | null>;
    private readonly _spec;
    private readonly _input;
    private readonly _action?;
    private readonly _legacy;
    private readonly _supportAsync;
    private _logger;
    readonly name: 'android' | 'android-legacy';
    constructor(options: {
        spec: SpecDriver<TDriver, TContext, TElement, TSelector>;
        input: Element<TDriver, TContext, TElement, TSelector>;
        action?: Element<TDriver, TContext, TElement, TSelector>;
        legacy: boolean;
        logger?: any;
        supportAsync?: boolean;
    });
    private _getElementId;
    private _command;
    getContentRegion(element: Element<TDriver, TContext, TElement, TSelector>, options?: {
        lazyLoad?: {
            scrollLength?: number;
            waitingTime?: number;
            maxAmountToScroll?: number;
        };
    }): Promise<Region>;
    getTouchPadding(): Promise<number>;
    getRegion(element: Element<TDriver, TContext, TElement, TSelector>): Promise<Region>;
    scrollToTop(element: Element<TDriver, TContext, TElement, TSelector>): Promise<void>;
    scrollBy(element: Element<TDriver, TContext, TElement, TSelector>, offset: Location): Promise<void>;
}
