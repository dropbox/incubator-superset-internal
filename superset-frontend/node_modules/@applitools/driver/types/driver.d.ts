/// <reference types="node" />
import type { Size, Region } from '@applitools/utils';
import type { ScreenOrientation, Cookie } from './types';
import { type Selector } from './selector';
import { type SpecDriver } from './spec-driver';
import { type Element } from './element';
import { Context, type ContextReference } from './context';
import { type Logger } from '@applitools/logger';
import { HelperIOS } from './helper-ios';
import { HelperAndroid } from './helper-android';
declare type DriverOptions<TDriver, TContext, TElement, TSelector> = {
    spec: SpecDriver<TDriver, TContext, TElement, TSelector>;
    driver: Driver<TDriver, TContext, TElement, TSelector> | TDriver;
    logger?: Logger;
    customConfig?: {
        useCeilForViewportSize?: boolean;
        disableHelper?: boolean;
    };
};
export declare class Driver<TDriver, TContext, TElement, TSelector> {
    private _target;
    private _mainContext;
    private _currentContext;
    private _driverInfo;
    private _logger;
    private _customConfig;
    private _helper?;
    private _previousWorld;
    protected readonly _spec: SpecDriver<TDriver, TContext, TElement, TSelector>;
    constructor(options: DriverOptions<TDriver, TContext, TElement, TSelector>);
    get target(): TDriver;
    get currentContext(): Context<TDriver, TContext, TElement, TSelector>;
    get mainContext(): Context<TDriver, TContext, TElement, TSelector>;
    get helper(): HelperAndroid<TDriver, TContext, TElement, TSelector> | HelperIOS<TDriver, TContext, TElement, TSelector>;
    get features(): {
        shadowSelector?: boolean;
        allCookies?: boolean;
        canExecuteOnlyFunctionScripts?: boolean;
    };
    get deviceName(): string;
    get platformName(): string;
    get platformVersion(): string | number;
    get browserName(): string;
    get browserVersion(): string | number;
    get userAgent(): string;
    get orientation(): ScreenOrientation;
    get pixelRatio(): number;
    get viewportScale(): number;
    get statusBarSize(): number;
    get navigationBarSize(): number;
    get isNative(): boolean;
    get isWebView(): boolean;
    get isWeb(): boolean;
    get isEmulation(): boolean;
    get isMobile(): boolean;
    get isIOS(): boolean;
    get isAndroid(): boolean;
    get isMac(): boolean;
    get isWindows(): boolean;
    get isChromium(): boolean;
    get isIE(): boolean;
    get isEdgeLegacy(): boolean;
    updateCurrentContext(context: Context<TDriver, TContext, TElement, TSelector>): void;
    init(): Promise<this>;
    switchWorld(options?: {
        id?: string;
        restoreState?: boolean;
        goHome?: boolean;
    }): Promise<void>;
    getWorlds(attempt?: number): Promise<string[]>;
    getCurrentWorld(): Promise<{
        id: string;
        home: string;
        next?: string;
        isNative: boolean;
        isWebView: boolean;
    }>;
    refreshContexts(): Promise<Context<TDriver, TContext, TElement, TSelector>>;
    switchTo(context: Context<TDriver, TContext, TElement, TSelector>): Promise<Context<TDriver, TContext, TElement, TSelector>>;
    switchToMainContext(): Promise<Context<TDriver, TContext, TElement, TSelector>>;
    switchToParentContext(elevation?: number): Promise<Context<TDriver, TContext, TElement, TSelector>>;
    switchToChildContext(...references: ContextReference<TDriver, TContext, TElement, TSelector>[]): Promise<Context<TDriver, TContext, TElement, TSelector>>;
    normalizeRegion(region: Region): Promise<Region>;
    getRegionInViewport(context: Context<TDriver, TContext, TElement, TSelector>, region: Region): Promise<Region>;
    element(selector: Selector<TSelector>): Promise<Element<TDriver, TContext, TElement, TSelector>>;
    elements(selector: Selector<TSelector>): Promise<Element<TDriver, TContext, TElement, TSelector>[]>;
    execute(script: ((arg: any) => any) | string, arg?: any): Promise<any>;
    takeScreenshot(): Promise<Buffer>;
    getViewportRegion(): Promise<Region>;
    getViewportSize(): Promise<Size>;
    setViewportSize(size: Size): Promise<void>;
    getDisplaySize(): Promise<Size>;
    getOrientation(): Promise<'portrait' | 'landscape' | 'portrait-secondary' | 'landscape-secondary'>;
    setOrientation(orientation: 'portrait' | 'landscape'): Promise<void>;
    getCookies(): Promise<Cookie[]>;
    getTitle(): Promise<string>;
    getUrl(): Promise<string>;
    visit(url: string): Promise<void>;
}
export declare function isDriver<TDriver>(driver: any, spec?: SpecDriver<TDriver, any, any, any>): driver is Driver<TDriver, any, any, any> | TDriver;
export declare function makeDriver<TDriver, TContext, TElement, TSelector>(options: DriverOptions<TDriver, TContext, TElement, TSelector>): Promise<Driver<TDriver, TContext, TElement, TSelector>>;
export {};
