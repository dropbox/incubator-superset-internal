import { type SpecDriver } from './spec-driver';
import { type Selector } from './selector';
declare type CommonSelector<TSelector = never> = Exclude<Selector<TSelector>, TSelector | string>;
export declare function isSimpleCommonSelector(selector: any): selector is CommonSelector;
export declare function isCommonSelector<TSelector>(spec: Pick<SpecDriver<unknown, unknown, unknown, TSelector>, 'isSelector'>, selector: any): selector is CommonSelector<TSelector>;
export declare function isSelector<TSelector>(spec: Pick<SpecDriver<unknown, unknown, unknown, TSelector>, 'isSelector'>, selector: any): selector is Selector<TSelector>;
export declare function transformSelector<TSelector>(spec: Pick<SpecDriver<unknown, unknown, unknown, TSelector>, 'isSelector' | 'transformSelector'>, selector: Selector<TSelector>, environment?: {
    isWeb?: boolean;
    isNative?: boolean;
    isIOS?: boolean;
    isAndroid?: boolean;
}): TSelector;
export declare function splitSelector<TSelector>(spec: Pick<SpecDriver<unknown, unknown, unknown, TSelector>, 'isSelector'>, selector: Selector<TSelector>): {
    contextSelectors: Selector<TSelector>[];
    elementSelector: Selector<TSelector>;
};
export declare function withFastCache<TSpecDriver extends SpecDriver<unknown, unknown, unknown, unknown>>(spec: TSpecDriver): TSpecDriver;
export {};
