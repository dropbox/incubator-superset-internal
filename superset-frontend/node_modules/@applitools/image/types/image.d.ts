/// <reference types="node" />
declare type TransformData = {
    rotate: number;
    scale: number;
    crop?: any;
    modifiers: any[];
    added?: any;
};
export interface Image {
    isImage: boolean;
    size: {
        width: number;
        height: number;
    };
    unscaledSize: {
        width?: number;
        height?: number;
        x?: number;
        y?: number;
    };
    rawSize: {
        width: number;
        height: number;
    };
    transforms: TransformData;
    width: number;
    height: number;
    scale(ratio: number): Image;
    rotate(degrees: number): Image;
    crop(region: any): Image;
    copy(srcImage: Image, offset: any): Image;
    frame(topImage: Image, bottomImage: Image, region: any): Image;
    toRaw(): Promise<any>;
    toBuffer(): Promise<Buffer>;
    toPng(): Promise<any>;
    toFile(path: string): Promise<any>;
    toObject(): Promise<any>;
    debug(debug: any): Promise<any>;
}
export declare function makeImage(data: any): Image;
export {};
