'use strict'

function makeTiming({parentPerformance = undefined, nowService = Date.now} = {}) {
  const performance = parentPerformance || {}

  /**
   *
   * @template T
   * @param {string} name
   * @param {()=>Promise<T>} f
   * @returns {Promise<T>}
   */
  function timeItAsync(name, f) {
    const start = nowService()

    return f().then(
      v => ((performance[name] = (performance[name] || 0) + nowService() - start), v),
      v => (
        (performance[name] = (performance[name] || 0) + nowService() - start), Promise.reject(v)
      ),
    )
  }

  /**
   *
   * @param {string} name
   * @returns {()=>void}
   */
  function getTimeItCallback(name) {
    const start = nowService()
    return () => {
      performance[name] = (performance[name] || 0) + nowService() - start
    }
  }

  /**
   *
   * @template T
   * @param {string} name
   * @param {()=>T} f
   * @returns {T}
   */
  function timeIt(name, f) {
    const start = nowService()
    try {
      const ret = f()

      performance[name] = (performance[name] || 0) + nowService() - start

      return ret
    } catch (err) {
      performance[name] = (performance[name] || 0) + nowService() - start
      throw err
    }
  }

  return {
    timeItAsync,
    timeIt,
    getTimeItCallback,
    performance,
  }
}

module.exports = {
  makeTiming,
}
