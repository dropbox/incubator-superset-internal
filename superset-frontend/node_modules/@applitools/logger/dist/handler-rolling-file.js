"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeRollingFileHandler = void 0;
const path = __importStar(require("path"));
const fs = __importStar(require("fs"));
const os = __importStar(require("os"));
function makeRollingFileHandler(_a) {
    var _b;
    var { dirname = (_b = process.env.APPLITOOLS_LOG_DIR) !== null && _b !== void 0 ? _b : os.tmpdir(), name = 'rolling-log', maxFileLength = 52428800 /* 50 MB */, maxFileNumber = 4, } = _a === void 0 ? {} : _a;
    let writer = null;
    let fileLength = 0;
    const logFiles = findLogFiles({ dirname, name });
    return { log, open, close };
    function open() {
        const filepath = path.resolve(dirname, `${name}-${new Date().toISOString().replace(/[-T:.]/g, '_')}.log`);
        ensureDirectoryExistence(filepath);
        writer = fs.createWriteStream(filepath, { flags: 'a', encoding: 'utf8' });
        fileLength = 0;
        logFiles.push(filepath);
        if (logFiles.length > maxFileNumber) {
            try {
                // @ts-ignore - fs.rmSync is not available in node <= 14.14
                fs.rmSync(logFiles.shift(), { maxRetries: 3, retryDelay: 300 });
            }
            catch (err) { }
        }
    }
    function close() {
        if (!writer)
            return;
        writer.end();
        writer = null;
    }
    function log(message) {
        if (!writer)
            open();
        message += os.EOL;
        const messageLength = Buffer.byteLength(message, 'utf8');
        if (fileLength + messageLength > maxFileLength)
            close(), open();
        writer.write(message);
        fileLength += messageLength;
    }
}
exports.makeRollingFileHandler = makeRollingFileHandler;
function findLogFiles({ dirname, name }) {
    if (!fs.existsSync(dirname))
        return [];
    const filenames = fs.readdirSync(dirname);
    const filenamePattern = new RegExp(`^${name}-\\d{4}_\\d{2}_\\d{2}_\\d{2}_\\d{2}_\\d{2}\\_\\d{3}Z\\.log$`);
    return filenames
        .filter(filename => filenamePattern.test(filename), 0)
        .sort()
        .map(filename => path.resolve(dirname, filename));
}
function ensureDirectoryExistence(filename) {
    const dirname = path.dirname(filename);
    if (!fs.existsSync(dirname)) {
        ensureDirectoryExistence(dirname);
        try {
            fs.mkdirSync(dirname);
        }
        catch (ex) {
            // if a file already exists ignore the error
            if (!ex.message.includes('file already exists')) {
                throw ex;
            }
        }
    }
}
