"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeLogger = void 0;
const utils = __importStar(require("@applitools/utils"));
const handler_console_1 = require("./handler-console");
const handler_file_1 = require("./handler-file");
const handler_rolling_file_1 = require("./handler-rolling-file");
const printer_1 = require("./printer");
const log_level_1 = require("./log-level");
const format_1 = require("./format");
function makeLogger({ handler, label, tags, timestamp, level, colors, format = format_1.format, console = true, extended = false, } = {}) {
    var _a, _b;
    if (!handler) {
        if (process.env.APPLITOOLS_LOG_FILE) {
            handler = { type: 'file', filename: process.env.APPLITOOLS_LOG_FILE };
        }
        else if (process.env.APPLITOOLS_LOG_DIR) {
            handler = { type: 'rolling file', dirname: process.env.APPLITOOLS_LOG_DIR };
        }
        else {
            handler = { type: 'console' };
        }
    }
    if (!utils.types.isNumber(level)) {
        level =
            (_a = level !== null && level !== void 0 ? level : process.env.APPLITOOLS_LOG_LEVEL) !== null && _a !== void 0 ? _a : (process.env.APPLITOOLS_SHOW_LOGS === 'true' ? 'all' : 'silent');
        level = (_b = log_level_1.LogLevel[level]) !== null && _b !== void 0 ? _b : log_level_1.LogLevel.silent;
    }
    if (colors === false) {
        colors = undefined;
    }
    else if (colors === true || process.env.APPLITOOLS_LOG_COLORS === 'true') {
        colors = {
            label: 'cyan',
            timestamp: 'greenBright',
            tags: 'blueBright',
            level: {
                info: ['bgBlueBright', 'black'],
                warn: ['bgYellowBright', 'black'],
                error: ['bgRedBright', 'white'],
                fatal: ['bgRed', 'white'],
            },
        };
    }
    if (utils.types.has(handler, 'type')) {
        if (handler.type === 'console') {
            handler = (0, handler_console_1.makeConsoleHandler)();
        }
        else if (handler.type === 'file') {
            handler = (0, handler_file_1.makeFileHandler)(handler);
            colors = undefined;
        }
        else if (handler.type === 'rolling file') {
            handler = (0, handler_rolling_file_1.makeRollingFileHandler)(handler);
            colors = undefined;
        }
    }
    else if (!utils.types.isFunction(handler, 'log')) {
        throw new Error('Handler have to implement `log` method or use one of the built-in handler names under `type` prop');
    }
    const consoleHandler = console ? (utils.types.isObject(console) ? console : (0, handler_console_1.makeConsoleHandler)()) : handler;
    return {
        isLogger: true,
        console: (0, printer_1.makePrinter)({ handler: consoleHandler, format, prelude: false }),
        ...(0, printer_1.makePrinter)({ handler, format, label, tags, timestamp, level, colors: colors }),
        tag(name, value) {
            tags !== null && tags !== void 0 ? tags : (tags = {});
            tags[name] = value;
        },
        extend(options) {
            var _a, _b;
            if (!(options === null || options === void 0 ? void 0 : options.colors)) {
                options.colors = (_b = (_a = options === null || options === void 0 ? void 0 : options.colors) !== null && _a !== void 0 ? _a : colors) !== null && _b !== void 0 ? _b : false;
            }
            else if (colors) {
                options.colors = { ...colors, ...options === null || options === void 0 ? void 0 : options.colors };
            }
            return makeLogger({
                format,
                label,
                tags,
                timestamp,
                level,
                console: consoleHandler,
                ...options,
                handler,
                extended: true,
            });
        },
        open() {
            var _a, _b;
            if (!extended)
                (_b = (_a = handler).open) === null || _b === void 0 ? void 0 : _b.call(_a);
        },
        close() {
            var _a, _b;
            if (!extended)
                (_b = (_a = handler).close) === null || _b === void 0 ? void 0 : _b.call(_a);
        },
    };
}
exports.makeLogger = makeLogger;
