"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.format = void 0;
const utils = __importStar(require("@applitools/utils"));
const util_1 = require("util");
const chalk_1 = __importDefault(require("chalk"));
function format(chunks, { prelude = true, label, timestamp = new Date(), level = 'info', tags, colors } = {}) {
    var _a;
    const message = [];
    if (prelude) {
        if (label) {
            const text = label.padEnd(10);
            const color = colors === null || colors === void 0 ? void 0 : colors.label;
            message.push(color ? colorize(text, { color }) : `${text}|`);
        }
        if (timestamp) {
            timestamp = timestamp === true ? new Date() : timestamp;
            const text = timestamp.toISOString();
            const color = colors === null || colors === void 0 ? void 0 : colors.timestamp;
            message.push(color ? colorize(text, { color }) : text);
        }
        if (level) {
            const text = level.toUpperCase().padEnd(5);
            const color = (_a = colors === null || colors === void 0 ? void 0 : colors.level) === null || _a === void 0 ? void 0 : _a[level];
            message.push(color ? colorize(` ${text} `, { color }) : `[${text}]`);
        }
        if (!utils.types.isEmpty(tags)) {
            const text = JSON.stringify(tags);
            const color = colors === null || colors === void 0 ? void 0 : colors.tags;
            message.push(color ? colorize(text, { color }) : text);
        }
    }
    if (chunks && chunks.length > 0) {
        const color = colors === null || colors === void 0 ? void 0 : colors.message;
        const strings = chunks.map(chunk => {
            return utils.types.isString(chunk)
                ? colorize(chunk, { color })
                : util_1.inspect === null || util_1.inspect === void 0 ? void 0 : (0, util_1.inspect)(chunk, { colors: Boolean(colors), compact: 5, depth: 5 });
        });
        message.push(strings.join(' '));
    }
    return message.join(' ');
}
exports.format = format;
function colorize(string, { color } = {}) {
    if (!color)
        return string;
    if (!utils.types.isArray(color))
        color = [color];
    return color.reduce((chalk, color) => chalk[color] || chalk, chalk_1.default)(string);
}
