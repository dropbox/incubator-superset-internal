import React from 'react';
import { MarkupProps } from './Markup';
import { FilterInterface } from './Filter';
import { MatcherInterface } from './Matcher';
import { AfterParseCallback, BeforeParseCallback } from './types';
export interface InterweaveProps extends MarkupProps {
    [prop: string]: any;
    /** Disable all filters from running. */
    disableFilters?: boolean;
    /** Disable all matches from running. */
    disableMatchers?: boolean;
    /** List of filters to apply to the content. */
    filters?: FilterInterface[];
    /** List of matchers to apply to the content. */
    matchers?: MatcherInterface<any>[];
    /** Callback fired after parsing ends. Must return an array of React nodes. */
    onAfterParse?: AfterParseCallback<InterweaveProps> | null;
    /** Callback fired beore parsing begins. Must return a string. */
    onBeforeParse?: BeforeParseCallback<InterweaveProps> | null;
}
export interface AllMatcherProps {
    /** Support all the props used by matchers. */
    [prop: string]: any;
}
export default class Interweave extends React.PureComponent<InterweaveProps & AllMatcherProps> {
    static defaultProps: InterweaveProps;
    /**
     * Parse the markup and apply hooks.
     */
    parseMarkup(): React.ReactNode;
    /**
     * Render the component by parsing the markup.
     */
    render(): JSX.Element;
}
//# sourceMappingURL=Interweave.d.ts.map