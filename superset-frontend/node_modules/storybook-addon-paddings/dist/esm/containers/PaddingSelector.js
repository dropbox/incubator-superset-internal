function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import "core-js/modules/es.array.map.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.object.assign.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.regexp.exec.js";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import React, { useCallback, useMemo } from 'react';
import memoize from 'memoizerific';
import { useParameter, useGlobals } from '@storybook/api';
import { IconButton, WithTooltip, TooltipLinkList } from '@storybook/components';
import { DEFAULT_PADDING, PARAM_KEY } from '../constants';
import { getSelectedPadding, normalizeValues, isEnabled } from '../helpers';
import PaddingIcon from '../components/PaddingIcon';
var createPaddingSelectorItem = memoize(1000)(function (id, name, value, hasValue, active, change) {
  return {
    id: id || name,
    title: name,
    onClick: function onClick() {
      return change({
        selected: value,
        name: name
      });
    },
    active: active,
    right: hasValue ? value : undefined
  };
});
var getDisplayedItems = memoize(10)(function (list, selected, change) {
  var availablePaddingSelectorItems = [];

  if (selected !== DEFAULT_PADDING) {
    availablePaddingSelectorItems.push(createPaddingSelectorItem('reset', 'Clear paddings', DEFAULT_PADDING, false, false, change));
  }

  availablePaddingSelectorItems.push.apply(availablePaddingSelectorItems, _toConsumableArray(list.map(function (_ref) {
    var name = _ref.name,
        value = _ref.value;
    return createPaddingSelectorItem(null, name, value, true, value === selected, change);
  })));
  return availablePaddingSelectorItems;
});

var PaddingSelector = function PaddingSelector() {
  var _useGlobals = useGlobals(),
      _useGlobals2 = _slicedToArray(_useGlobals, 2),
      globals = _useGlobals2[0],
      updateGlobals = _useGlobals2[1];

  var options = useParameter(PARAM_KEY, null);
  var values = normalizeValues(options);
  var selectedPadding = useMemo(function () {
    var _globals$PARAM_KEY;

    return getSelectedPadding(values, (_globals$PARAM_KEY = globals[PARAM_KEY]) == null ? void 0 : _globals$PARAM_KEY.value);
  }, [globals, values]);
  var onPaddingChange = useCallback(function (value) {
    var _updateGlobals;

    updateGlobals((_updateGlobals = {}, _updateGlobals[PARAM_KEY] = Object.assign(Object.assign({}, globals[PARAM_KEY]), {}, {
      value: value
    }), _updateGlobals));
  }, [globals, updateGlobals]);
  var renderTooltip = useCallback(function (_ref2) {
    var onHide = _ref2.onHide;
    return /*#__PURE__*/React.createElement(TooltipLinkList, {
      links: getDisplayedItems(values, selectedPadding, function (_ref3) {
        var selected = _ref3.selected;
        onPaddingChange(selected);
        onHide();
      })
    });
  }, [onPaddingChange, selectedPadding, values]);
  return isEnabled(values) ? /*#__PURE__*/React.createElement(WithTooltip, {
    placement: "top",
    trigger: "click",
    tooltip: renderTooltip,
    closeOnClick: true
  }, /*#__PURE__*/React.createElement(IconButton, {
    key: "padding",
    active: selectedPadding !== DEFAULT_PADDING,
    title: "Change the paddings of the preview"
  }, /*#__PURE__*/React.createElement(PaddingIcon, null))) : null;
};

export default PaddingSelector;