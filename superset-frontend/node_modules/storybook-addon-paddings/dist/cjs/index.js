"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("core-js/modules/es.array.concat.js");

var _addons = require("@storybook/addons");

var _constants = require("./constants");

var _helpers = require("./helpers");

var setStyle = function setStyle(selector, css) {
  var existingStyle = document.getElementById(selector);

  if (existingStyle) {
    if (existingStyle.innerHTML !== css) {
      existingStyle.innerHTML = css;
    }
  } else {
    var style = document.createElement('style');
    style.setAttribute('id', selector);
    style.innerHTML = css;
    document.head.appendChild(style);
  }
};

var WithPaddings = function WithPaddings(getStory, context) {
  var _globals$PARAM_KEY;

  var id = context.id,
      globals = context.globals,
      parameters = context.parameters,
      viewMode = context.viewMode;
  var globalsSelectedPadding = (_globals$PARAM_KEY = globals[_constants.PARAM_KEY]) == null ? void 0 : _globals$PARAM_KEY.value;
  var paddingsConfig = parameters[_constants.PARAM_KEY];
  var isInDocs = viewMode === 'docs';
  var selector = isInDocs ? "#anchor--".concat(id, " .docs-story > div:first-child") : '.sb-show-main';
  var selectedPadding = (0, _addons.useMemo)(function () {
    var _getSelectedPadding;

    return (_getSelectedPadding = (0, _helpers.getSelectedPadding)((0, _helpers.normalizeValues)(paddingsConfig), globalsSelectedPadding)) != null ? _getSelectedPadding : _constants.DEFAULT_PADDING;
  }, [paddingsConfig, globalsSelectedPadding]);
  var paddingStyles = (0, _addons.useMemo)(function () {
    return "\n      ".concat(selector, " {\n        margin: 0;\n        padding: ").concat(selectedPadding, " !important;\n        ").concat((0, _helpers.isReducedMotionPreferred)() ? '' : 'transition: padding .3s;', "\n      }\n\n      ").concat(selector, " .innerZoomElementWrapper > div {\n        border-width: 0 !important;\n      }\n    ");
  }, [selector, selectedPadding]);
  (0, _addons.useEffect)(function () {
    var selectorId = isInDocs ? "addon-paddings-docs-".concat(id) : "addon-paddings";
    setStyle(selectorId, paddingStyles);
  }, [id, isInDocs, paddingStyles]);
  return getStory(context);
};

var _default = WithPaddings;
exports.default = _default;