(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react')) :
	typeof define === 'function' && define.amd ? define(['exports', 'react'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ReactJsonTree = {}, global.React));
})(this, (function (exports, React) { 'use strict';

	function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

	function _mergeNamespaces(n, m) {
		m.forEach(function (e) {
			e && typeof e !== 'string' && !Array.isArray(e) && Object.keys(e).forEach(function (k) {
				if (k !== 'default' && !(k in n)) {
					var d = Object.getOwnPropertyDescriptor(e, k);
					Object.defineProperty(n, k, d.get ? d : {
						enumerable: true,
						get: function () { return e[k]; }
					});
				}
			});
		});
		return Object.freeze(n);
	}

	var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function getDefaultExportFromCjs (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	var objectWithoutProperties = {exports: {}};

	var objectWithoutPropertiesLoose = {exports: {}};

	(function (module) {
		function _objectWithoutPropertiesLoose(source, excluded) {
		  if (source == null) return {};
		  var target = {};
		  var sourceKeys = Object.keys(source);
		  var key, i;

		  for (i = 0; i < sourceKeys.length; i++) {
		    key = sourceKeys[i];
		    if (excluded.indexOf(key) >= 0) continue;
		    target[key] = source[key];
		  }

		  return target;
		}

		module.exports = _objectWithoutPropertiesLoose, module.exports.__esModule = true, module.exports["default"] = module.exports;
	} (objectWithoutPropertiesLoose));

	(function (module) {
		var objectWithoutPropertiesLoose$1 = objectWithoutPropertiesLoose.exports;

		function _objectWithoutProperties(source, excluded) {
		  if (source == null) return {};
		  var target = objectWithoutPropertiesLoose$1(source, excluded);
		  var key, i;

		  if (Object.getOwnPropertySymbols) {
		    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

		    for (i = 0; i < sourceSymbolKeys.length; i++) {
		      key = sourceSymbolKeys[i];
		      if (excluded.indexOf(key) >= 0) continue;
		      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
		      target[key] = source[key];
		    }
		  }

		  return target;
		}

		module.exports = _objectWithoutProperties, module.exports.__esModule = true, module.exports["default"] = module.exports;
	} (objectWithoutProperties));

	var _objectWithoutProperties = /*@__PURE__*/getDefaultExportFromCjs(objectWithoutProperties.exports);

	var classCallCheck = {exports: {}};

	(function (module) {
		function _classCallCheck(instance, Constructor) {
		  if (!(instance instanceof Constructor)) {
		    throw new TypeError("Cannot call a class as a function");
		  }
		}

		module.exports = _classCallCheck, module.exports.__esModule = true, module.exports["default"] = module.exports;
	} (classCallCheck));

	var _classCallCheck = /*@__PURE__*/getDefaultExportFromCjs(classCallCheck.exports);

	var createClass = {exports: {}};

	(function (module) {
		function _defineProperties(target, props) {
		  for (var i = 0; i < props.length; i++) {
		    var descriptor = props[i];
		    descriptor.enumerable = descriptor.enumerable || false;
		    descriptor.configurable = true;
		    if ("value" in descriptor) descriptor.writable = true;
		    Object.defineProperty(target, descriptor.key, descriptor);
		  }
		}

		function _createClass(Constructor, protoProps, staticProps) {
		  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
		  if (staticProps) _defineProperties(Constructor, staticProps);
		  Object.defineProperty(Constructor, "prototype", {
		    writable: false
		  });
		  return Constructor;
		}

		module.exports = _createClass, module.exports.__esModule = true, module.exports["default"] = module.exports;
	} (createClass));

	var _createClass = /*@__PURE__*/getDefaultExportFromCjs(createClass.exports);

	var inherits = {exports: {}};

	var setPrototypeOf = {exports: {}};

	(function (module) {
		function _setPrototypeOf(o, p) {
		  module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
		    o.__proto__ = p;
		    return o;
		  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
		  return _setPrototypeOf(o, p);
		}

		module.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;
	} (setPrototypeOf));

	(function (module) {
		var setPrototypeOf$1 = setPrototypeOf.exports;

		function _inherits(subClass, superClass) {
		  if (typeof superClass !== "function" && superClass !== null) {
		    throw new TypeError("Super expression must either be null or a function");
		  }

		  subClass.prototype = Object.create(superClass && superClass.prototype, {
		    constructor: {
		      value: subClass,
		      writable: true,
		      configurable: true
		    }
		  });
		  Object.defineProperty(subClass, "prototype", {
		    writable: false
		  });
		  if (superClass) setPrototypeOf$1(subClass, superClass);
		}

		module.exports = _inherits, module.exports.__esModule = true, module.exports["default"] = module.exports;
	} (inherits));

	var _inherits = /*@__PURE__*/getDefaultExportFromCjs(inherits.exports);

	var possibleConstructorReturn = {exports: {}};

	var _typeof$1 = {exports: {}};

	(function (module) {
		function _typeof(obj) {
		  "@babel/helpers - typeof";

		  return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
		    return typeof obj;
		  } : function (obj) {
		    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
		  }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(obj);
		}

		module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;
	} (_typeof$1));

	var assertThisInitialized = {exports: {}};

	(function (module) {
		function _assertThisInitialized(self) {
		  if (self === void 0) {
		    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		  }

		  return self;
		}

		module.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports["default"] = module.exports;
	} (assertThisInitialized));

	(function (module) {
		var _typeof = _typeof$1.exports["default"];

		var assertThisInitialized$1 = assertThisInitialized.exports;

		function _possibleConstructorReturn(self, call) {
		  if (call && (_typeof(call) === "object" || typeof call === "function")) {
		    return call;
		  } else if (call !== void 0) {
		    throw new TypeError("Derived constructors may only return object or undefined");
		  }

		  return assertThisInitialized$1(self);
		}

		module.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports["default"] = module.exports;
	} (possibleConstructorReturn));

	var _possibleConstructorReturn = /*@__PURE__*/getDefaultExportFromCjs(possibleConstructorReturn.exports);

	var getPrototypeOf = {exports: {}};

	(function (module) {
		function _getPrototypeOf(o) {
		  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
		    return o.__proto__ || Object.getPrototypeOf(o);
		  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
		  return _getPrototypeOf(o);
		}

		module.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;
	} (getPrototypeOf));

	var _getPrototypeOf = /*@__PURE__*/getDefaultExportFromCjs(getPrototypeOf.exports);

	var defineProperty$1 = {exports: {}};

	(function (module) {
		function _defineProperty(obj, key, value) {
		  if (key in obj) {
		    Object.defineProperty(obj, key, {
		      value: value,
		      enumerable: true,
		      configurable: true,
		      writable: true
		    });
		  } else {
		    obj[key] = value;
		  }

		  return obj;
		}

		module.exports = _defineProperty, module.exports.__esModule = true, module.exports["default"] = module.exports;
	} (defineProperty$1));

	var _defineProperty$1 = /*@__PURE__*/getDefaultExportFromCjs(defineProperty$1.exports);

	var slicedToArray = {exports: {}};

	var arrayWithHoles = {exports: {}};

	(function (module) {
		function _arrayWithHoles(arr) {
		  if (Array.isArray(arr)) return arr;
		}

		module.exports = _arrayWithHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;
	} (arrayWithHoles));

	var iterableToArrayLimit = {exports: {}};

	(function (module) {
		function _iterableToArrayLimit(arr, i) {
		  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

		  if (_i == null) return;
		  var _arr = [];
		  var _n = true;
		  var _d = false;

		  var _s, _e;

		  try {
		    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
		      _arr.push(_s.value);

		      if (i && _arr.length === i) break;
		    }
		  } catch (err) {
		    _d = true;
		    _e = err;
		  } finally {
		    try {
		      if (!_n && _i["return"] != null) _i["return"]();
		    } finally {
		      if (_d) throw _e;
		    }
		  }

		  return _arr;
		}

		module.exports = _iterableToArrayLimit, module.exports.__esModule = true, module.exports["default"] = module.exports;
	} (iterableToArrayLimit));

	var unsupportedIterableToArray = {exports: {}};

	var arrayLikeToArray = {exports: {}};

	(function (module) {
		function _arrayLikeToArray(arr, len) {
		  if (len == null || len > arr.length) len = arr.length;

		  for (var i = 0, arr2 = new Array(len); i < len; i++) {
		    arr2[i] = arr[i];
		  }

		  return arr2;
		}

		module.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
	} (arrayLikeToArray));

	(function (module) {
		var arrayLikeToArray$1 = arrayLikeToArray.exports;

		function _unsupportedIterableToArray(o, minLen) {
		  if (!o) return;
		  if (typeof o === "string") return arrayLikeToArray$1(o, minLen);
		  var n = Object.prototype.toString.call(o).slice(8, -1);
		  if (n === "Object" && o.constructor) n = o.constructor.name;
		  if (n === "Map" || n === "Set") return Array.from(o);
		  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray$1(o, minLen);
		}

		module.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
	} (unsupportedIterableToArray));

	var nonIterableRest = {exports: {}};

	(function (module) {
		function _nonIterableRest() {
		  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
		}

		module.exports = _nonIterableRest, module.exports.__esModule = true, module.exports["default"] = module.exports;
	} (nonIterableRest));

	(function (module) {
		var arrayWithHoles$1 = arrayWithHoles.exports;

		var iterableToArrayLimit$1 = iterableToArrayLimit.exports;

		var unsupportedIterableToArray$1 = unsupportedIterableToArray.exports;

		var nonIterableRest$1 = nonIterableRest.exports;

		function _slicedToArray(arr, i) {
		  return arrayWithHoles$1(arr) || iterableToArrayLimit$1(arr, i) || unsupportedIterableToArray$1(arr, i) || nonIterableRest$1();
		}

		module.exports = _slicedToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
	} (slicedToArray));

	var _slicedToArray$1 = /*@__PURE__*/getDefaultExportFromCjs(slicedToArray.exports);

	var propTypes = {exports: {}};

	var reactIs = {exports: {}};

	var reactIs_production_min = {};

	/** @license React v16.13.1
	 * react-is.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredReactIs_production_min;

	function requireReactIs_production_min () {
		if (hasRequiredReactIs_production_min) return reactIs_production_min;
		hasRequiredReactIs_production_min = 1;
	var b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?
		Symbol.for("react.suspense_list"):60120,r=b?Symbol.for("react.memo"):60115,t=b?Symbol.for("react.lazy"):60116,v=b?Symbol.for("react.block"):60121,w=b?Symbol.for("react.fundamental"):60117,x=b?Symbol.for("react.responder"):60118,y=b?Symbol.for("react.scope"):60119;
		function z(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}reactIs_production_min.AsyncMode=l;reactIs_production_min.ConcurrentMode=m;reactIs_production_min.ContextConsumer=k;reactIs_production_min.ContextProvider=h;reactIs_production_min.Element=c;reactIs_production_min.ForwardRef=n;reactIs_production_min.Fragment=e;reactIs_production_min.Lazy=t;reactIs_production_min.Memo=r;reactIs_production_min.Portal=d;
		reactIs_production_min.Profiler=g;reactIs_production_min.StrictMode=f;reactIs_production_min.Suspense=p;reactIs_production_min.isAsyncMode=function(a){return A(a)||z(a)===l};reactIs_production_min.isConcurrentMode=A;reactIs_production_min.isContextConsumer=function(a){return z(a)===k};reactIs_production_min.isContextProvider=function(a){return z(a)===h};reactIs_production_min.isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===c};reactIs_production_min.isForwardRef=function(a){return z(a)===n};reactIs_production_min.isFragment=function(a){return z(a)===e};reactIs_production_min.isLazy=function(a){return z(a)===t};
		reactIs_production_min.isMemo=function(a){return z(a)===r};reactIs_production_min.isPortal=function(a){return z(a)===d};reactIs_production_min.isProfiler=function(a){return z(a)===g};reactIs_production_min.isStrictMode=function(a){return z(a)===f};reactIs_production_min.isSuspense=function(a){return z(a)===p};
		reactIs_production_min.isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||"object"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};reactIs_production_min.typeOf=z;
		return reactIs_production_min;
	}

	var reactIs_development = {};

	/** @license React v16.13.1
	 * react-is.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredReactIs_development;

	function requireReactIs_development () {
		if (hasRequiredReactIs_development) return reactIs_development;
		hasRequiredReactIs_development = 1;



		if (process.env.NODE_ENV !== "production") {
		  (function() {

		// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
		// nor polyfill, then a plain number is used for performance.
		var hasSymbol = typeof Symbol === 'function' && Symbol.for;
		var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
		var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
		var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
		var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
		var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
		var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
		var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
		// (unstable) APIs that have been removed. Can we remove the symbols?

		var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
		var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
		var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
		var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
		var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
		var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
		var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
		var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
		var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
		var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
		var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

		function isValidElementType(type) {
		  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
		  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
		}

		function typeOf(object) {
		  if (typeof object === 'object' && object !== null) {
		    var $$typeof = object.$$typeof;

		    switch ($$typeof) {
		      case REACT_ELEMENT_TYPE:
		        var type = object.type;

		        switch (type) {
		          case REACT_ASYNC_MODE_TYPE:
		          case REACT_CONCURRENT_MODE_TYPE:
		          case REACT_FRAGMENT_TYPE:
		          case REACT_PROFILER_TYPE:
		          case REACT_STRICT_MODE_TYPE:
		          case REACT_SUSPENSE_TYPE:
		            return type;

		          default:
		            var $$typeofType = type && type.$$typeof;

		            switch ($$typeofType) {
		              case REACT_CONTEXT_TYPE:
		              case REACT_FORWARD_REF_TYPE:
		              case REACT_LAZY_TYPE:
		              case REACT_MEMO_TYPE:
		              case REACT_PROVIDER_TYPE:
		                return $$typeofType;

		              default:
		                return $$typeof;
		            }

		        }

		      case REACT_PORTAL_TYPE:
		        return $$typeof;
		    }
		  }

		  return undefined;
		} // AsyncMode is deprecated along with isAsyncMode

		var AsyncMode = REACT_ASYNC_MODE_TYPE;
		var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
		var ContextConsumer = REACT_CONTEXT_TYPE;
		var ContextProvider = REACT_PROVIDER_TYPE;
		var Element = REACT_ELEMENT_TYPE;
		var ForwardRef = REACT_FORWARD_REF_TYPE;
		var Fragment = REACT_FRAGMENT_TYPE;
		var Lazy = REACT_LAZY_TYPE;
		var Memo = REACT_MEMO_TYPE;
		var Portal = REACT_PORTAL_TYPE;
		var Profiler = REACT_PROFILER_TYPE;
		var StrictMode = REACT_STRICT_MODE_TYPE;
		var Suspense = REACT_SUSPENSE_TYPE;
		var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

		function isAsyncMode(object) {
		  {
		    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
		      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

		      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
		    }
		  }

		  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
		}
		function isConcurrentMode(object) {
		  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
		}
		function isContextConsumer(object) {
		  return typeOf(object) === REACT_CONTEXT_TYPE;
		}
		function isContextProvider(object) {
		  return typeOf(object) === REACT_PROVIDER_TYPE;
		}
		function isElement(object) {
		  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
		}
		function isForwardRef(object) {
		  return typeOf(object) === REACT_FORWARD_REF_TYPE;
		}
		function isFragment(object) {
		  return typeOf(object) === REACT_FRAGMENT_TYPE;
		}
		function isLazy(object) {
		  return typeOf(object) === REACT_LAZY_TYPE;
		}
		function isMemo(object) {
		  return typeOf(object) === REACT_MEMO_TYPE;
		}
		function isPortal(object) {
		  return typeOf(object) === REACT_PORTAL_TYPE;
		}
		function isProfiler(object) {
		  return typeOf(object) === REACT_PROFILER_TYPE;
		}
		function isStrictMode(object) {
		  return typeOf(object) === REACT_STRICT_MODE_TYPE;
		}
		function isSuspense(object) {
		  return typeOf(object) === REACT_SUSPENSE_TYPE;
		}

		reactIs_development.AsyncMode = AsyncMode;
		reactIs_development.ConcurrentMode = ConcurrentMode;
		reactIs_development.ContextConsumer = ContextConsumer;
		reactIs_development.ContextProvider = ContextProvider;
		reactIs_development.Element = Element;
		reactIs_development.ForwardRef = ForwardRef;
		reactIs_development.Fragment = Fragment;
		reactIs_development.Lazy = Lazy;
		reactIs_development.Memo = Memo;
		reactIs_development.Portal = Portal;
		reactIs_development.Profiler = Profiler;
		reactIs_development.StrictMode = StrictMode;
		reactIs_development.Suspense = Suspense;
		reactIs_development.isAsyncMode = isAsyncMode;
		reactIs_development.isConcurrentMode = isConcurrentMode;
		reactIs_development.isContextConsumer = isContextConsumer;
		reactIs_development.isContextProvider = isContextProvider;
		reactIs_development.isElement = isElement;
		reactIs_development.isForwardRef = isForwardRef;
		reactIs_development.isFragment = isFragment;
		reactIs_development.isLazy = isLazy;
		reactIs_development.isMemo = isMemo;
		reactIs_development.isPortal = isPortal;
		reactIs_development.isProfiler = isProfiler;
		reactIs_development.isStrictMode = isStrictMode;
		reactIs_development.isSuspense = isSuspense;
		reactIs_development.isValidElementType = isValidElementType;
		reactIs_development.typeOf = typeOf;
		  })();
		}
		return reactIs_development;
	}

	var hasRequiredReactIs;

	function requireReactIs () {
		if (hasRequiredReactIs) return reactIs.exports;
		hasRequiredReactIs = 1;
		(function (module) {

			if (process.env.NODE_ENV === 'production') {
			  module.exports = requireReactIs_production_min();
			} else {
			  module.exports = requireReactIs_development();
			}
	} (reactIs));
		return reactIs.exports;
	}

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/

	var objectAssign;
	var hasRequiredObjectAssign;

	function requireObjectAssign () {
		if (hasRequiredObjectAssign) return objectAssign;
		hasRequiredObjectAssign = 1;
		/* eslint-disable no-unused-vars */
		var getOwnPropertySymbols = Object.getOwnPropertySymbols;
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		var propIsEnumerable = Object.prototype.propertyIsEnumerable;

		function toObject(val) {
			if (val === null || val === undefined) {
				throw new TypeError('Object.assign cannot be called with null or undefined');
			}

			return Object(val);
		}

		function shouldUseNative() {
			try {
				if (!Object.assign) {
					return false;
				}

				// Detect buggy property enumeration order in older V8 versions.

				// https://bugs.chromium.org/p/v8/issues/detail?id=4118
				var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
				test1[5] = 'de';
				if (Object.getOwnPropertyNames(test1)[0] === '5') {
					return false;
				}

				// https://bugs.chromium.org/p/v8/issues/detail?id=3056
				var test2 = {};
				for (var i = 0; i < 10; i++) {
					test2['_' + String.fromCharCode(i)] = i;
				}
				var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
					return test2[n];
				});
				if (order2.join('') !== '0123456789') {
					return false;
				}

				// https://bugs.chromium.org/p/v8/issues/detail?id=3056
				var test3 = {};
				'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
					test3[letter] = letter;
				});
				if (Object.keys(Object.assign({}, test3)).join('') !==
						'abcdefghijklmnopqrst') {
					return false;
				}

				return true;
			} catch (err) {
				// We don't expect any of the above to throw, but better to be safe.
				return false;
			}
		}

		objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
			var from;
			var to = toObject(target);
			var symbols;

			for (var s = 1; s < arguments.length; s++) {
				from = Object(arguments[s]);

				for (var key in from) {
					if (hasOwnProperty.call(from, key)) {
						to[key] = from[key];
					}
				}

				if (getOwnPropertySymbols) {
					symbols = getOwnPropertySymbols(from);
					for (var i = 0; i < symbols.length; i++) {
						if (propIsEnumerable.call(from, symbols[i])) {
							to[symbols[i]] = from[symbols[i]];
						}
					}
				}
			}

			return to;
		};
		return objectAssign;
	}

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var ReactPropTypesSecret_1;
	var hasRequiredReactPropTypesSecret;

	function requireReactPropTypesSecret () {
		if (hasRequiredReactPropTypesSecret) return ReactPropTypesSecret_1;
		hasRequiredReactPropTypesSecret = 1;

		var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

		ReactPropTypesSecret_1 = ReactPropTypesSecret;
		return ReactPropTypesSecret_1;
	}

	var has;
	var hasRequiredHas;

	function requireHas () {
		if (hasRequiredHas) return has;
		hasRequiredHas = 1;
		has = Function.call.bind(Object.prototype.hasOwnProperty);
		return has;
	}

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var checkPropTypes_1;
	var hasRequiredCheckPropTypes;

	function requireCheckPropTypes () {
		if (hasRequiredCheckPropTypes) return checkPropTypes_1;
		hasRequiredCheckPropTypes = 1;

		var printWarning = function() {};

		if (process.env.NODE_ENV !== 'production') {
		  var ReactPropTypesSecret = requireReactPropTypesSecret();
		  var loggedTypeFailures = {};
		  var has = requireHas();

		  printWarning = function(text) {
		    var message = 'Warning: ' + text;
		    if (typeof console !== 'undefined') {
		      console.error(message);
		    }
		    try {
		      // --- Welcome to debugging React ---
		      // This error was thrown as a convenience so that you can use this stack
		      // to find the callsite that caused this warning to fire.
		      throw new Error(message);
		    } catch (x) { /**/ }
		  };
		}

		/**
		 * Assert that the values match with the type specs.
		 * Error messages are memorized and will only be shown once.
		 *
		 * @param {object} typeSpecs Map of name to a ReactPropType
		 * @param {object} values Runtime values that need to be type-checked
		 * @param {string} location e.g. "prop", "context", "child context"
		 * @param {string} componentName Name of the component for error messages.
		 * @param {?Function} getStack Returns the component stack.
		 * @private
		 */
		function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
		  if (process.env.NODE_ENV !== 'production') {
		    for (var typeSpecName in typeSpecs) {
		      if (has(typeSpecs, typeSpecName)) {
		        var error;
		        // Prop type validation may throw. In case they do, we don't want to
		        // fail the render phase where it didn't fail before. So we log it.
		        // After these have been cleaned up, we'll let them throw.
		        try {
		          // This is intentionally an invariant that gets caught. It's the same
		          // behavior as without this statement except with a better message.
		          if (typeof typeSpecs[typeSpecName] !== 'function') {
		            var err = Error(
		              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
		              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' +
		              'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.'
		            );
		            err.name = 'Invariant Violation';
		            throw err;
		          }
		          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
		        } catch (ex) {
		          error = ex;
		        }
		        if (error && !(error instanceof Error)) {
		          printWarning(
		            (componentName || 'React class') + ': type specification of ' +
		            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
		            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
		            'You may have forgotten to pass an argument to the type checker ' +
		            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
		            'shape all require an argument).'
		          );
		        }
		        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
		          // Only monitor this failure once because there tends to be a lot of the
		          // same error.
		          loggedTypeFailures[error.message] = true;

		          var stack = getStack ? getStack() : '';

		          printWarning(
		            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
		          );
		        }
		      }
		    }
		  }
		}

		/**
		 * Resets warning cache when testing.
		 *
		 * @private
		 */
		checkPropTypes.resetWarningCache = function() {
		  if (process.env.NODE_ENV !== 'production') {
		    loggedTypeFailures = {};
		  }
		};

		checkPropTypes_1 = checkPropTypes;
		return checkPropTypes_1;
	}

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var factoryWithTypeCheckers;
	var hasRequiredFactoryWithTypeCheckers;

	function requireFactoryWithTypeCheckers () {
		if (hasRequiredFactoryWithTypeCheckers) return factoryWithTypeCheckers;
		hasRequiredFactoryWithTypeCheckers = 1;

		var ReactIs = requireReactIs();
		var assign = requireObjectAssign();

		var ReactPropTypesSecret = requireReactPropTypesSecret();
		var has = requireHas();
		var checkPropTypes = requireCheckPropTypes();

		var printWarning = function() {};

		if (process.env.NODE_ENV !== 'production') {
		  printWarning = function(text) {
		    var message = 'Warning: ' + text;
		    if (typeof console !== 'undefined') {
		      console.error(message);
		    }
		    try {
		      // --- Welcome to debugging React ---
		      // This error was thrown as a convenience so that you can use this stack
		      // to find the callsite that caused this warning to fire.
		      throw new Error(message);
		    } catch (x) {}
		  };
		}

		function emptyFunctionThatReturnsNull() {
		  return null;
		}

		factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {
		  /* global Symbol */
		  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
		  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

		  /**
		   * Returns the iterator method function contained on the iterable object.
		   *
		   * Be sure to invoke the function with the iterable as context:
		   *
		   *     var iteratorFn = getIteratorFn(myIterable);
		   *     if (iteratorFn) {
		   *       var iterator = iteratorFn.call(myIterable);
		   *       ...
		   *     }
		   *
		   * @param {?object} maybeIterable
		   * @return {?function}
		   */
		  function getIteratorFn(maybeIterable) {
		    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
		    if (typeof iteratorFn === 'function') {
		      return iteratorFn;
		    }
		  }

		  /**
		   * Collection of methods that allow declaration and validation of props that are
		   * supplied to React components. Example usage:
		   *
		   *   var Props = require('ReactPropTypes');
		   *   var MyArticle = React.createClass({
		   *     propTypes: {
		   *       // An optional string prop named "description".
		   *       description: Props.string,
		   *
		   *       // A required enum prop named "category".
		   *       category: Props.oneOf(['News','Photos']).isRequired,
		   *
		   *       // A prop named "dialog" that requires an instance of Dialog.
		   *       dialog: Props.instanceOf(Dialog).isRequired
		   *     },
		   *     render: function() { ... }
		   *   });
		   *
		   * A more formal specification of how these methods are used:
		   *
		   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
		   *   decl := ReactPropTypes.{type}(.isRequired)?
		   *
		   * Each and every declaration produces a function with the same signature. This
		   * allows the creation of custom validation functions. For example:
		   *
		   *  var MyLink = React.createClass({
		   *    propTypes: {
		   *      // An optional string or URI prop named "href".
		   *      href: function(props, propName, componentName) {
		   *        var propValue = props[propName];
		   *        if (propValue != null && typeof propValue !== 'string' &&
		   *            !(propValue instanceof URI)) {
		   *          return new Error(
		   *            'Expected a string or an URI for ' + propName + ' in ' +
		   *            componentName
		   *          );
		   *        }
		   *      }
		   *    },
		   *    render: function() {...}
		   *  });
		   *
		   * @internal
		   */

		  var ANONYMOUS = '<<anonymous>>';

		  // Important!
		  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
		  var ReactPropTypes = {
		    array: createPrimitiveTypeChecker('array'),
		    bigint: createPrimitiveTypeChecker('bigint'),
		    bool: createPrimitiveTypeChecker('boolean'),
		    func: createPrimitiveTypeChecker('function'),
		    number: createPrimitiveTypeChecker('number'),
		    object: createPrimitiveTypeChecker('object'),
		    string: createPrimitiveTypeChecker('string'),
		    symbol: createPrimitiveTypeChecker('symbol'),

		    any: createAnyTypeChecker(),
		    arrayOf: createArrayOfTypeChecker,
		    element: createElementTypeChecker(),
		    elementType: createElementTypeTypeChecker(),
		    instanceOf: createInstanceTypeChecker,
		    node: createNodeChecker(),
		    objectOf: createObjectOfTypeChecker,
		    oneOf: createEnumTypeChecker,
		    oneOfType: createUnionTypeChecker,
		    shape: createShapeTypeChecker,
		    exact: createStrictShapeTypeChecker,
		  };

		  /**
		   * inlined Object.is polyfill to avoid requiring consumers ship their own
		   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
		   */
		  /*eslint-disable no-self-compare*/
		  function is(x, y) {
		    // SameValue algorithm
		    if (x === y) {
		      // Steps 1-5, 7-10
		      // Steps 6.b-6.e: +0 != -0
		      return x !== 0 || 1 / x === 1 / y;
		    } else {
		      // Step 6.a: NaN == NaN
		      return x !== x && y !== y;
		    }
		  }
		  /*eslint-enable no-self-compare*/

		  /**
		   * We use an Error-like object for backward compatibility as people may call
		   * PropTypes directly and inspect their output. However, we don't use real
		   * Errors anymore. We don't inspect their stack anyway, and creating them
		   * is prohibitively expensive if they are created too often, such as what
		   * happens in oneOfType() for any type before the one that matched.
		   */
		  function PropTypeError(message, data) {
		    this.message = message;
		    this.data = data && typeof data === 'object' ? data: {};
		    this.stack = '';
		  }
		  // Make `instanceof Error` still work for returned errors.
		  PropTypeError.prototype = Error.prototype;

		  function createChainableTypeChecker(validate) {
		    if (process.env.NODE_ENV !== 'production') {
		      var manualPropTypeCallCache = {};
		      var manualPropTypeWarningCount = 0;
		    }
		    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
		      componentName = componentName || ANONYMOUS;
		      propFullName = propFullName || propName;

		      if (secret !== ReactPropTypesSecret) {
		        if (throwOnDirectAccess) {
		          // New behavior only for users of `prop-types` package
		          var err = new Error(
		            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
		            'Use `PropTypes.checkPropTypes()` to call them. ' +
		            'Read more at http://fb.me/use-check-prop-types'
		          );
		          err.name = 'Invariant Violation';
		          throw err;
		        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
		          // Old behavior for people using React.PropTypes
		          var cacheKey = componentName + ':' + propName;
		          if (
		            !manualPropTypeCallCache[cacheKey] &&
		            // Avoid spamming the console because they are often not actionable except for lib authors
		            manualPropTypeWarningCount < 3
		          ) {
		            printWarning(
		              'You are manually calling a React.PropTypes validation ' +
		              'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' +
		              'and will throw in the standalone `prop-types` package. ' +
		              'You may be seeing this warning due to a third-party PropTypes ' +
		              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
		            );
		            manualPropTypeCallCache[cacheKey] = true;
		            manualPropTypeWarningCount++;
		          }
		        }
		      }
		      if (props[propName] == null) {
		        if (isRequired) {
		          if (props[propName] === null) {
		            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
		          }
		          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
		        }
		        return null;
		      } else {
		        return validate(props, propName, componentName, location, propFullName);
		      }
		    }

		    var chainedCheckType = checkType.bind(null, false);
		    chainedCheckType.isRequired = checkType.bind(null, true);

		    return chainedCheckType;
		  }

		  function createPrimitiveTypeChecker(expectedType) {
		    function validate(props, propName, componentName, location, propFullName, secret) {
		      var propValue = props[propName];
		      var propType = getPropType(propValue);
		      if (propType !== expectedType) {
		        // `propValue` being instance of, say, date/regexp, pass the 'object'
		        // check, but we can offer a more precise error message here rather than
		        // 'of type `object`'.
		        var preciseType = getPreciseType(propValue);

		        return new PropTypeError(
		          'Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'),
		          {expectedType: expectedType}
		        );
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }

		  function createAnyTypeChecker() {
		    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
		  }

		  function createArrayOfTypeChecker(typeChecker) {
		    function validate(props, propName, componentName, location, propFullName) {
		      if (typeof typeChecker !== 'function') {
		        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
		      }
		      var propValue = props[propName];
		      if (!Array.isArray(propValue)) {
		        var propType = getPropType(propValue);
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
		      }
		      for (var i = 0; i < propValue.length; i++) {
		        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
		        if (error instanceof Error) {
		          return error;
		        }
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }

		  function createElementTypeChecker() {
		    function validate(props, propName, componentName, location, propFullName) {
		      var propValue = props[propName];
		      if (!isValidElement(propValue)) {
		        var propType = getPropType(propValue);
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }

		  function createElementTypeTypeChecker() {
		    function validate(props, propName, componentName, location, propFullName) {
		      var propValue = props[propName];
		      if (!ReactIs.isValidElementType(propValue)) {
		        var propType = getPropType(propValue);
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }

		  function createInstanceTypeChecker(expectedClass) {
		    function validate(props, propName, componentName, location, propFullName) {
		      if (!(props[propName] instanceof expectedClass)) {
		        var expectedClassName = expectedClass.name || ANONYMOUS;
		        var actualClassName = getClassName(props[propName]);
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }

		  function createEnumTypeChecker(expectedValues) {
		    if (!Array.isArray(expectedValues)) {
		      if (process.env.NODE_ENV !== 'production') {
		        if (arguments.length > 1) {
		          printWarning(
		            'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
		            'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
		          );
		        } else {
		          printWarning('Invalid argument supplied to oneOf, expected an array.');
		        }
		      }
		      return emptyFunctionThatReturnsNull;
		    }

		    function validate(props, propName, componentName, location, propFullName) {
		      var propValue = props[propName];
		      for (var i = 0; i < expectedValues.length; i++) {
		        if (is(propValue, expectedValues[i])) {
		          return null;
		        }
		      }

		      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
		        var type = getPreciseType(value);
		        if (type === 'symbol') {
		          return String(value);
		        }
		        return value;
		      });
		      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
		    }
		    return createChainableTypeChecker(validate);
		  }

		  function createObjectOfTypeChecker(typeChecker) {
		    function validate(props, propName, componentName, location, propFullName) {
		      if (typeof typeChecker !== 'function') {
		        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
		      }
		      var propValue = props[propName];
		      var propType = getPropType(propValue);
		      if (propType !== 'object') {
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
		      }
		      for (var key in propValue) {
		        if (has(propValue, key)) {
		          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
		          if (error instanceof Error) {
		            return error;
		          }
		        }
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }

		  function createUnionTypeChecker(arrayOfTypeCheckers) {
		    if (!Array.isArray(arrayOfTypeCheckers)) {
		      process.env.NODE_ENV !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
		      return emptyFunctionThatReturnsNull;
		    }

		    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
		      var checker = arrayOfTypeCheckers[i];
		      if (typeof checker !== 'function') {
		        printWarning(
		          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
		          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
		        );
		        return emptyFunctionThatReturnsNull;
		      }
		    }

		    function validate(props, propName, componentName, location, propFullName) {
		      var expectedTypes = [];
		      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
		        var checker = arrayOfTypeCheckers[i];
		        var checkerResult = checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
		        if (checkerResult == null) {
		          return null;
		        }
		        if (checkerResult.data && has(checkerResult.data, 'expectedType')) {
		          expectedTypes.push(checkerResult.data.expectedType);
		        }
		      }
		      var expectedTypesMessage = (expectedTypes.length > 0) ? ', expected one of type [' + expectedTypes.join(', ') + ']': '';
		      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`' + expectedTypesMessage + '.'));
		    }
		    return createChainableTypeChecker(validate);
		  }

		  function createNodeChecker() {
		    function validate(props, propName, componentName, location, propFullName) {
		      if (!isNode(props[propName])) {
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }

		  function invalidValidatorError(componentName, location, propFullName, key, type) {
		    return new PropTypeError(
		      (componentName || 'React class') + ': ' + location + ' type `' + propFullName + '.' + key + '` is invalid; ' +
		      'it must be a function, usually from the `prop-types` package, but received `' + type + '`.'
		    );
		  }

		  function createShapeTypeChecker(shapeTypes) {
		    function validate(props, propName, componentName, location, propFullName) {
		      var propValue = props[propName];
		      var propType = getPropType(propValue);
		      if (propType !== 'object') {
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
		      }
		      for (var key in shapeTypes) {
		        var checker = shapeTypes[key];
		        if (typeof checker !== 'function') {
		          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
		        }
		        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
		        if (error) {
		          return error;
		        }
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }

		  function createStrictShapeTypeChecker(shapeTypes) {
		    function validate(props, propName, componentName, location, propFullName) {
		      var propValue = props[propName];
		      var propType = getPropType(propValue);
		      if (propType !== 'object') {
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
		      }
		      // We need to check all keys in case some are required but missing from props.
		      var allKeys = assign({}, props[propName], shapeTypes);
		      for (var key in allKeys) {
		        var checker = shapeTypes[key];
		        if (has(shapeTypes, key) && typeof checker !== 'function') {
		          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
		        }
		        if (!checker) {
		          return new PropTypeError(
		            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
		            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
		            '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  ')
		          );
		        }
		        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
		        if (error) {
		          return error;
		        }
		      }
		      return null;
		    }

		    return createChainableTypeChecker(validate);
		  }

		  function isNode(propValue) {
		    switch (typeof propValue) {
		      case 'number':
		      case 'string':
		      case 'undefined':
		        return true;
		      case 'boolean':
		        return !propValue;
		      case 'object':
		        if (Array.isArray(propValue)) {
		          return propValue.every(isNode);
		        }
		        if (propValue === null || isValidElement(propValue)) {
		          return true;
		        }

		        var iteratorFn = getIteratorFn(propValue);
		        if (iteratorFn) {
		          var iterator = iteratorFn.call(propValue);
		          var step;
		          if (iteratorFn !== propValue.entries) {
		            while (!(step = iterator.next()).done) {
		              if (!isNode(step.value)) {
		                return false;
		              }
		            }
		          } else {
		            // Iterator will provide entry [k,v] tuples rather than values.
		            while (!(step = iterator.next()).done) {
		              var entry = step.value;
		              if (entry) {
		                if (!isNode(entry[1])) {
		                  return false;
		                }
		              }
		            }
		          }
		        } else {
		          return false;
		        }

		        return true;
		      default:
		        return false;
		    }
		  }

		  function isSymbol(propType, propValue) {
		    // Native Symbol.
		    if (propType === 'symbol') {
		      return true;
		    }

		    // falsy value can't be a Symbol
		    if (!propValue) {
		      return false;
		    }

		    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
		    if (propValue['@@toStringTag'] === 'Symbol') {
		      return true;
		    }

		    // Fallback for non-spec compliant Symbols which are polyfilled.
		    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
		      return true;
		    }

		    return false;
		  }

		  // Equivalent of `typeof` but with special handling for array and regexp.
		  function getPropType(propValue) {
		    var propType = typeof propValue;
		    if (Array.isArray(propValue)) {
		      return 'array';
		    }
		    if (propValue instanceof RegExp) {
		      // Old webkits (at least until Android 4.0) return 'function' rather than
		      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
		      // passes PropTypes.object.
		      return 'object';
		    }
		    if (isSymbol(propType, propValue)) {
		      return 'symbol';
		    }
		    return propType;
		  }

		  // This handles more types than `getPropType`. Only used for error messages.
		  // See `createPrimitiveTypeChecker`.
		  function getPreciseType(propValue) {
		    if (typeof propValue === 'undefined' || propValue === null) {
		      return '' + propValue;
		    }
		    var propType = getPropType(propValue);
		    if (propType === 'object') {
		      if (propValue instanceof Date) {
		        return 'date';
		      } else if (propValue instanceof RegExp) {
		        return 'regexp';
		      }
		    }
		    return propType;
		  }

		  // Returns a string that is postfixed to a warning about an invalid type.
		  // For example, "undefined" or "of type array"
		  function getPostfixForTypeWarning(value) {
		    var type = getPreciseType(value);
		    switch (type) {
		      case 'array':
		      case 'object':
		        return 'an ' + type;
		      case 'boolean':
		      case 'date':
		      case 'regexp':
		        return 'a ' + type;
		      default:
		        return type;
		    }
		  }

		  // Returns class name of the object, if any.
		  function getClassName(propValue) {
		    if (!propValue.constructor || !propValue.constructor.name) {
		      return ANONYMOUS;
		    }
		    return propValue.constructor.name;
		  }

		  ReactPropTypes.checkPropTypes = checkPropTypes;
		  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
		  ReactPropTypes.PropTypes = ReactPropTypes;

		  return ReactPropTypes;
		};
		return factoryWithTypeCheckers;
	}

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var factoryWithThrowingShims;
	var hasRequiredFactoryWithThrowingShims;

	function requireFactoryWithThrowingShims () {
		if (hasRequiredFactoryWithThrowingShims) return factoryWithThrowingShims;
		hasRequiredFactoryWithThrowingShims = 1;

		var ReactPropTypesSecret = requireReactPropTypesSecret();

		function emptyFunction() {}
		function emptyFunctionWithReset() {}
		emptyFunctionWithReset.resetWarningCache = emptyFunction;

		factoryWithThrowingShims = function() {
		  function shim(props, propName, componentName, location, propFullName, secret) {
		    if (secret === ReactPropTypesSecret) {
		      // It is still safe when called from React.
		      return;
		    }
		    var err = new Error(
		      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
		      'Use PropTypes.checkPropTypes() to call them. ' +
		      'Read more at http://fb.me/use-check-prop-types'
		    );
		    err.name = 'Invariant Violation';
		    throw err;
		  }	  shim.isRequired = shim;
		  function getShim() {
		    return shim;
		  }	  // Important!
		  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
		  var ReactPropTypes = {
		    array: shim,
		    bigint: shim,
		    bool: shim,
		    func: shim,
		    number: shim,
		    object: shim,
		    string: shim,
		    symbol: shim,

		    any: shim,
		    arrayOf: getShim,
		    element: shim,
		    elementType: shim,
		    instanceOf: getShim,
		    node: shim,
		    objectOf: getShim,
		    oneOf: getShim,
		    oneOfType: getShim,
		    shape: getShim,
		    exact: getShim,

		    checkPropTypes: emptyFunctionWithReset,
		    resetWarningCache: emptyFunction
		  };

		  ReactPropTypes.PropTypes = ReactPropTypes;

		  return ReactPropTypes;
		};
		return factoryWithThrowingShims;
	}

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	if (process.env.NODE_ENV !== 'production') {
	  var ReactIs = requireReactIs();

	  // By explicitly using `prop-types` you are opting into new development behavior.
	  // http://fb.me/prop-types-in-prod
	  var throwOnDirectAccess = true;
	  propTypes.exports = requireFactoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
	} else {
	  // By explicitly using `prop-types` you are opting into new production behavior.
	  // http://fb.me/prop-types-in-prod
	  propTypes.exports = requireFactoryWithThrowingShims()();
	}

	function objType(obj) {
	  var type = Object.prototype.toString.call(obj).slice(8, -1);

	  if (type === 'Object' && typeof obj[Symbol.iterator] === 'function') {
	    return 'Iterable';
	  }

	  if (type === 'Custom' && obj.constructor !== Object && obj instanceof Object) {
	    // For projects implementing objects overriding `.prototype[Symbol.toStringTag]`
	    return 'Object';
	  }

	  return type;
	}

	var toConsumableArray = {exports: {}};

	var arrayWithoutHoles = {exports: {}};

	(function (module) {
		var arrayLikeToArray$1 = arrayLikeToArray.exports;

		function _arrayWithoutHoles(arr) {
		  if (Array.isArray(arr)) return arrayLikeToArray$1(arr);
		}

		module.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;
	} (arrayWithoutHoles));

	var iterableToArray = {exports: {}};

	(function (module) {
		function _iterableToArray(iter) {
		  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
		}

		module.exports = _iterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
	} (iterableToArray));

	var nonIterableSpread = {exports: {}};

	(function (module) {
		function _nonIterableSpread() {
		  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
		}

		module.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports["default"] = module.exports;
	} (nonIterableSpread));

	(function (module) {
		var arrayWithoutHoles$1 = arrayWithoutHoles.exports;

		var iterableToArray$1 = iterableToArray.exports;

		var unsupportedIterableToArray$1 = unsupportedIterableToArray.exports;

		var nonIterableSpread$1 = nonIterableSpread.exports;

		function _toConsumableArray(arr) {
		  return arrayWithoutHoles$1(arr) || iterableToArray$1(arr) || unsupportedIterableToArray$1(arr) || nonIterableSpread$1();
		}

		module.exports = _toConsumableArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
	} (toConsumableArray));

	var _toConsumableArray = /*@__PURE__*/getDefaultExportFromCjs(toConsumableArray.exports);

	function ownKeys$a(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$a(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$a(Object(source), !0).forEach(function (key) { _defineProperty$1(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$a(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

	var JSONArrow = function JSONArrow(_ref) {
	  var styling = _ref.styling,
	      arrowStyle = _ref.arrowStyle,
	      expanded = _ref.expanded,
	      nodeType = _ref.nodeType,
	      onClick = _ref.onClick;
	  return /*#__PURE__*/React__default["default"].createElement("div", _objectSpread$a(_objectSpread$a({}, styling('arrowContainer', arrowStyle)), {}, {
	    onClick: onClick
	  }), /*#__PURE__*/React__default["default"].createElement("div", _objectSpread$a({}, styling(['arrow', 'arrowSign'], nodeType, expanded, arrowStyle)), "\u25B6", arrowStyle === 'double' && /*#__PURE__*/React__default["default"].createElement("div", _objectSpread$a({}, styling(['arrowSign', 'arrowSignInner'])), "\u25B6")));
	};

	JSONArrow.propTypes = {
	  styling: propTypes.exports.func.isRequired,
	  arrowStyle: propTypes.exports.oneOf(['single', 'double']),
	  expanded: propTypes.exports.bool.isRequired,
	  nodeType: propTypes.exports.string.isRequired,
	  onClick: propTypes.exports.func.isRequired
	};
	JSONArrow.defaultProps = {
	  arrowStyle: 'single'
	};

	function _createForOfIteratorHelper$1(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$2(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

	function _unsupportedIterableToArray$2(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$2(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen); }

	function _arrayLikeToArray$2(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

	function getLength(type, collection) {
	  if (type === 'Object') {
	    // eslint-disable-next-line @typescript-eslint/ban-types
	    return Object.keys(collection).length;
	  } else if (type === 'Array') {
	    return collection.length;
	  }

	  return Infinity;
	}

	function isIterableMap(collection) {
	  return typeof collection.set === 'function';
	}

	function getEntries(type, collection, sortObjectKeys) {
	  var from = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
	  var to = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Infinity;
	  var res;

	  if (type === 'Object') {
	    var keys = Object.getOwnPropertyNames(collection);

	    if (sortObjectKeys) {
	      keys.sort(sortObjectKeys === true ? undefined : sortObjectKeys);
	    }

	    keys = keys.slice(from, to + 1);
	    res = {
	      entries: keys.map(function (key) {
	        return {
	          key: key,
	          value: collection[key]
	        };
	      })
	    };
	  } else if (type === 'Array') {
	    res = {
	      entries: collection.slice(from, to + 1).map(function (val, idx) {
	        return {
	          key: idx + from,
	          value: val
	        };
	      })
	    };
	  } else {
	    var idx = 0;
	    var entries = [];
	    var done = true;
	    var isMap = isIterableMap(collection);

	    var _iterator = _createForOfIteratorHelper$1(collection),
	        _step;

	    try {
	      for (_iterator.s(); !(_step = _iterator.n()).done;) {
	        var item = _step.value;

	        if (idx > to) {
	          done = false;
	          break;
	        }

	        if (from <= idx) {
	          if (isMap && Array.isArray(item)) {
	            if (typeof item[0] === 'string' || typeof item[0] === 'number') {
	              entries.push({
	                key: item[0],
	                value: item[1]
	              });
	            } else {
	              entries.push({
	                key: "[entry ".concat(idx, "]"),
	                value: {
	                  '[key]': item[0],
	                  '[value]': item[1]
	                }
	              });
	            }
	          } else {
	            entries.push({
	              key: idx,
	              value: item
	            });
	          }
	        }

	        idx++;
	      }
	    } catch (err) {
	      _iterator.e(err);
	    } finally {
	      _iterator.f();
	    }

	    res = {
	      hasMore: !done,
	      entries: entries
	    };
	  }

	  return res;
	}

	function getRanges(from, to, limit) {
	  var ranges = [];

	  while (to - from > limit * limit) {
	    limit = limit * limit;
	  }

	  for (var i = from; i <= to; i += limit) {
	    ranges.push({
	      from: i,
	      to: Math.min(to, i + limit - 1)
	    });
	  }

	  return ranges;
	}

	function getCollectionEntries(type, collection, sortObjectKeys, limit) {
	  var from = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
	  var to = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : Infinity;
	  var getEntriesBound = getEntries.bind(null, type, collection, sortObjectKeys);

	  if (!limit) {
	    return getEntriesBound().entries;
	  }

	  var isSubset = to < Infinity;
	  var length = Math.min(to - from, getLength(type, collection));

	  if (type !== 'Iterable') {
	    if (length <= limit || limit < 7) {
	      return getEntriesBound(from, to).entries;
	    }
	  } else {
	    if (length <= limit && !isSubset) {
	      return getEntriesBound(from, to).entries;
	    }
	  }

	  var limitedEntries;

	  if (type === 'Iterable') {
	    var _getEntriesBound = getEntriesBound(from, from + limit - 1),
	        hasMore = _getEntriesBound.hasMore,
	        entries = _getEntriesBound.entries;

	    limitedEntries = hasMore ? [].concat(_toConsumableArray(entries), _toConsumableArray(getRanges(from + limit, from + 2 * limit - 1, limit))) : entries;
	  } else {
	    limitedEntries = isSubset ? getRanges(from, to, limit) : [].concat(_toConsumableArray(getEntriesBound(0, limit - 5).entries), _toConsumableArray(getRanges(limit - 4, length - 5, limit)), _toConsumableArray(getEntriesBound(length - 4, length - 1).entries));
	  }

	  return limitedEntries;
	}

	function ownKeys$9(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$9(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$9(Object(source), !0).forEach(function (key) { _defineProperty$1(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$9(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

	function _createSuper$2(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$2(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$2() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

	var ItemRange = /*#__PURE__*/function (_React$Component) {
	  _inherits(ItemRange, _React$Component);

	  var _super = _createSuper$2(ItemRange);

	  function ItemRange(props) {
	    var _this;

	    _classCallCheck(this, ItemRange);

	    _this = _super.call(this, props);

	    _this.handleClick = function () {
	      _this.setState({
	        expanded: !_this.state.expanded
	      });
	    };

	    _this.state = {
	      expanded: false
	    };
	    return _this;
	  }

	  _createClass(ItemRange, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          styling = _this$props.styling,
	          from = _this$props.from,
	          to = _this$props.to,
	          renderChildNodes = _this$props.renderChildNodes,
	          nodeType = _this$props.nodeType;
	      return this.state.expanded ? /*#__PURE__*/React__default["default"].createElement("div", _objectSpread$9({}, styling('itemRange', this.state.expanded)), renderChildNodes(this.props, from, to)) : /*#__PURE__*/React__default["default"].createElement("div", _objectSpread$9(_objectSpread$9({}, styling('itemRange', this.state.expanded)), {}, {
	        onClick: this.handleClick
	      }), /*#__PURE__*/React__default["default"].createElement(JSONArrow, {
	        nodeType: nodeType,
	        styling: styling,
	        expanded: false,
	        onClick: this.handleClick,
	        arrowStyle: "double"
	      }), "".concat(from, " ... ").concat(to));
	    }
	  }]);

	  return ItemRange;
	}(React__default["default"].Component);
	ItemRange.propTypes = {
	  styling: propTypes.exports.func.isRequired,
	  from: propTypes.exports.number.isRequired,
	  to: propTypes.exports.number.isRequired,
	  renderChildNodes: propTypes.exports.func.isRequired,
	  nodeType: propTypes.exports.string.isRequired
	};

	function _createSuper$1(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$1(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct$1() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

	function ownKeys$8(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$8(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$8(Object(source), !0).forEach(function (key) { _defineProperty$1(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$8(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

	function isRange(rangeOrEntry) {
	  return rangeOrEntry.to !== undefined;
	}

	function renderChildNodes(props, from, to) {
	  var nodeType = props.nodeType,
	      data = props.data,
	      collectionLimit = props.collectionLimit,
	      circularCache = props.circularCache,
	      keyPath = props.keyPath,
	      postprocessValue = props.postprocessValue,
	      sortObjectKeys = props.sortObjectKeys;
	  var childNodes = [];
	  getCollectionEntries(nodeType, data, sortObjectKeys, collectionLimit, from, to).forEach(function (entry) {
	    if (isRange(entry)) {
	      childNodes.push( /*#__PURE__*/React__default["default"].createElement(ItemRange, _objectSpread$8(_objectSpread$8({}, props), {}, {
	        key: "ItemRange--".concat(entry.from, "-").concat(entry.to),
	        from: entry.from,
	        to: entry.to,
	        renderChildNodes: renderChildNodes
	      })));
	    } else {
	      var key = entry.key,
	          value = entry.value;
	      var isCircular = circularCache.indexOf(value) !== -1;
	      childNodes.push( /*#__PURE__*/React__default["default"].createElement(JSONNode, _objectSpread$8(_objectSpread$8(_objectSpread$8({}, props), {
	        postprocessValue: postprocessValue,
	        collectionLimit: collectionLimit
	      }), {}, {
	        key: "Node--".concat(key),
	        keyPath: [key].concat(_toConsumableArray(keyPath)),
	        value: postprocessValue(value),
	        circularCache: [].concat(_toConsumableArray(circularCache), [value]),
	        isCircular: isCircular,
	        hideRoot: false
	      })));
	    }
	  });
	  return childNodes;
	}

	function getStateFromProps$1(props) {
	  // calculate individual node expansion if necessary
	  var expanded = !props.isCircular ? props.shouldExpandNode(props.keyPath, props.data, props.level) : false;
	  return {
	    expanded: expanded
	  };
	}

	var JSONNestedNode = /*#__PURE__*/function (_React$Component) {
	  _inherits(JSONNestedNode, _React$Component);

	  var _super = _createSuper$1(JSONNestedNode);

	  function JSONNestedNode(props) {
	    var _this;

	    _classCallCheck(this, JSONNestedNode);

	    _this = _super.call(this, props);

	    _this.handleClick = function () {
	      if (_this.props.expandable) {
	        _this.setState({
	          expanded: !_this.state.expanded
	        });
	      }
	    };

	    _this.state = getStateFromProps$1(props);
	    return _this;
	  }

	  _createClass(JSONNestedNode, [{
	    key: "UNSAFE_componentWillReceiveProps",
	    value: function UNSAFE_componentWillReceiveProps(nextProps) {
	      var nextState = getStateFromProps$1(nextProps);

	      if (getStateFromProps$1(this.props).expanded !== nextState.expanded) {
	        this.setState(nextState);
	      }
	    }
	  }, {
	    key: "shouldComponentUpdate",
	    value: function shouldComponentUpdate(nextProps, nextState) {
	      var _this2 = this;

	      return !!Object.keys(nextProps).find(function (key) {
	        return key !== 'circularCache' && (key === 'keyPath' ? nextProps[key].join('/') !== _this2.props[key].join('/') : nextProps[key] !== _this2.props[key]);
	      }) || nextState.expanded !== this.state.expanded;
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          getItemString = _this$props.getItemString,
	          nodeTypeIndicator = _this$props.nodeTypeIndicator,
	          nodeType = _this$props.nodeType,
	          data = _this$props.data,
	          hideRoot = _this$props.hideRoot,
	          createItemString = _this$props.createItemString,
	          styling = _this$props.styling,
	          collectionLimit = _this$props.collectionLimit,
	          keyPath = _this$props.keyPath,
	          labelRenderer = _this$props.labelRenderer,
	          expandable = _this$props.expandable;
	      var expanded = this.state.expanded;
	      var renderedChildren = expanded || hideRoot && this.props.level === 0 ? renderChildNodes(_objectSpread$8(_objectSpread$8({}, this.props), {}, {
	        level: this.props.level + 1
	      })) : null;
	      var itemType = /*#__PURE__*/React__default["default"].createElement("span", _objectSpread$8({}, styling('nestedNodeItemType', expanded)), nodeTypeIndicator);
	      var renderedItemString = getItemString(nodeType, data, itemType, createItemString(data, collectionLimit), keyPath);
	      var stylingArgs = [keyPath, nodeType, expanded, expandable];
	      return hideRoot ? /*#__PURE__*/React__default["default"].createElement("li", _objectSpread$8({}, styling.apply(void 0, ['rootNode'].concat(stylingArgs))), /*#__PURE__*/React__default["default"].createElement("ul", _objectSpread$8({}, styling.apply(void 0, ['rootNodeChildren'].concat(stylingArgs))), renderedChildren)) : /*#__PURE__*/React__default["default"].createElement("li", _objectSpread$8({}, styling.apply(void 0, ['nestedNode'].concat(stylingArgs))), expandable && /*#__PURE__*/React__default["default"].createElement(JSONArrow, {
	        styling: styling,
	        nodeType: nodeType,
	        expanded: expanded,
	        onClick: this.handleClick
	      }), /*#__PURE__*/React__default["default"].createElement("label", _objectSpread$8(_objectSpread$8({}, styling.apply(void 0, [['label', 'nestedNodeLabel']].concat(stylingArgs))), {}, {
	        onClick: this.handleClick
	      }), labelRenderer.apply(void 0, stylingArgs)), /*#__PURE__*/React__default["default"].createElement("span", _objectSpread$8(_objectSpread$8({}, styling.apply(void 0, ['nestedNodeItemString'].concat(stylingArgs))), {}, {
	        onClick: this.handleClick
	      }), renderedItemString), /*#__PURE__*/React__default["default"].createElement("ul", _objectSpread$8({}, styling.apply(void 0, ['nestedNodeChildren'].concat(stylingArgs))), renderedChildren));
	    }
	  }]);

	  return JSONNestedNode;
	}(React__default["default"].Component);
	JSONNestedNode.propTypes = {
	  getItemString: propTypes.exports.func.isRequired,
	  nodeTypeIndicator: propTypes.exports.any,
	  nodeType: propTypes.exports.string.isRequired,
	  data: propTypes.exports.any,
	  hideRoot: propTypes.exports.bool.isRequired,
	  createItemString: propTypes.exports.func.isRequired,
	  styling: propTypes.exports.func.isRequired,
	  collectionLimit: propTypes.exports.number,
	  keyPath: propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.number])).isRequired,
	  labelRenderer: propTypes.exports.func.isRequired,
	  shouldExpandNode: propTypes.exports.func,
	  level: propTypes.exports.number.isRequired,
	  sortObjectKeys: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.bool]),
	  isCircular: propTypes.exports.bool,
	  expandable: propTypes.exports.bool
	};
	JSONNestedNode.defaultProps = {
	  data: [],
	  circularCache: [],
	  level: 0,
	  expandable: true
	};

	var _excluded$3 = ["data"];

	function ownKeys$7(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$7(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$7(Object(source), !0).forEach(function (key) { _defineProperty$1(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$7(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
	// generating and caching it if it hasn't been created yet.

	function createItemString$2(data) {
	  var len = Object.getOwnPropertyNames(data).length;
	  return "".concat(len, " ").concat(len !== 1 ? 'keys' : 'key');
	} // Configures <JSONNestedNode> to render an Object


	var JSONObjectNode = function JSONObjectNode(_ref) {
	  var data = _ref.data,
	      props = _objectWithoutProperties(_ref, _excluded$3);

	  return /*#__PURE__*/React__default["default"].createElement(JSONNestedNode, _objectSpread$7(_objectSpread$7({}, props), {}, {
	    data: data,
	    nodeType: "Object",
	    nodeTypeIndicator: props.nodeType === 'Error' ? 'Error()' : '{}',
	    createItemString: createItemString$2,
	    expandable: Object.getOwnPropertyNames(data).length > 0
	  }));
	};

	JSONObjectNode.propTypes = {
	  data: propTypes.exports.object,
	  nodeType: propTypes.exports.string.isRequired
	};

	var _excluded$2 = ["data"];

	function ownKeys$6(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$6(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$6(Object(source), !0).forEach(function (key) { _defineProperty$1(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$6(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
	// generating and caching it if it hasn't been created yet.

	function createItemString$1(data) {
	  return "".concat(data.length, " ").concat(data.length !== 1 ? 'items' : 'item');
	} // Configures <JSONNestedNode> to render an Array


	var JSONArrayNode = function JSONArrayNode(_ref) {
	  var data = _ref.data,
	      props = _objectWithoutProperties(_ref, _excluded$2);

	  return /*#__PURE__*/React__default["default"].createElement(JSONNestedNode, _objectSpread$6(_objectSpread$6({}, props), {}, {
	    data: data,
	    nodeType: "Array",
	    nodeTypeIndicator: "[]",
	    createItemString: createItemString$1,
	    expandable: data.length > 0
	  }));
	};

	JSONArrayNode.propTypes = {
	  data: propTypes.exports.array
	};

	var _extends$1 = {exports: {}};

	(function (module) {
		function _extends() {
		  module.exports = _extends = Object.assign ? Object.assign.bind() : function (target) {
		    for (var i = 1; i < arguments.length; i++) {
		      var source = arguments[i];

		      for (var key in source) {
		        if (Object.prototype.hasOwnProperty.call(source, key)) {
		          target[key] = source[key];
		        }
		      }
		    }

		    return target;
		  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
		  return _extends.apply(this, arguments);
		}

		module.exports = _extends, module.exports.__esModule = true, module.exports["default"] = module.exports;
	} (_extends$1));

	var _extends = /*@__PURE__*/getDefaultExportFromCjs(_extends$1.exports);

	function ownKeys$5(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$5(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$5(Object(source), !0).forEach(function (key) { _defineProperty$1(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$5(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

	function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

	function _unsupportedIterableToArray$1(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$1(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen); }

	function _arrayLikeToArray$1(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
	// generating and caching it if it hasn't been created yet.

	function createItemString(data, limit) {
	  var count = 0;
	  var hasMore = false;

	  if (Number.isSafeInteger(data.size)) {
	    count = data.size;
	  } else {
	    // eslint-disable-next-line no-unused-vars
	    var _iterator = _createForOfIteratorHelper(data),
	        _step;

	    try {
	      for (_iterator.s(); !(_step = _iterator.n()).done;) {
	        var entry = _step.value;

	        if (limit && count + 1 > limit) {
	          hasMore = true;
	          break;
	        }

	        count += 1;
	      }
	    } catch (err) {
	      _iterator.e(err);
	    } finally {
	      _iterator.f();
	    }
	  }

	  return "".concat(hasMore ? '>' : '').concat(count, " ").concat(count !== 1 ? 'entries' : 'entry');
	} // Configures <JSONNestedNode> to render an iterable


	var JSONIterableNode = function JSONIterableNode(_ref) {
	  var props = _extends({}, _ref);

	  return /*#__PURE__*/React__default["default"].createElement(JSONNestedNode, _objectSpread$5(_objectSpread$5({}, props), {}, {
	    nodeType: "Iterable",
	    nodeTypeIndicator: "()",
	    createItemString: createItemString
	  }));
	};

	function ownKeys$4(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$4(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$4(Object(source), !0).forEach(function (key) { _defineProperty$1(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$4(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

	var JSONValueNode = function JSONValueNode(_ref) {
	  var nodeType = _ref.nodeType,
	      styling = _ref.styling,
	      labelRenderer = _ref.labelRenderer,
	      keyPath = _ref.keyPath,
	      valueRenderer = _ref.valueRenderer,
	      value = _ref.value,
	      _ref$valueGetter = _ref.valueGetter,
	      valueGetter = _ref$valueGetter === void 0 ? function (value) {
	    return value;
	  } : _ref$valueGetter;
	  return /*#__PURE__*/React__default["default"].createElement("li", _objectSpread$4({}, styling('value', nodeType, keyPath)), /*#__PURE__*/React__default["default"].createElement("label", _objectSpread$4({}, styling(['label', 'valueLabel'], nodeType, keyPath)), labelRenderer(keyPath, nodeType, false, false)), /*#__PURE__*/React__default["default"].createElement("span", _objectSpread$4({}, styling('valueText', nodeType, keyPath)), valueRenderer.apply(void 0, [valueGetter(value), value].concat(_toConsumableArray(keyPath)))));
	};

	JSONValueNode.propTypes = {
	  nodeType: propTypes.exports.string.isRequired,
	  styling: propTypes.exports.func.isRequired,
	  labelRenderer: propTypes.exports.func.isRequired,
	  keyPath: propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.number]).isRequired).isRequired,
	  valueRenderer: propTypes.exports.func.isRequired,
	  value: propTypes.exports.any,
	  valueGetter: propTypes.exports.func
	};

	var _excluded$1 = ["getItemString", "keyPath", "labelRenderer", "styling", "value", "valueRenderer", "isCustomNode"];

	function ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3(Object(source), !0).forEach(function (key) { _defineProperty$1(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

	var JSONNode = function JSONNode(_ref) {
	  var getItemString = _ref.getItemString,
	      keyPath = _ref.keyPath,
	      labelRenderer = _ref.labelRenderer,
	      styling = _ref.styling,
	      value = _ref.value,
	      valueRenderer = _ref.valueRenderer,
	      isCustomNode = _ref.isCustomNode,
	      rest = _objectWithoutProperties(_ref, _excluded$1);

	  var nodeType = isCustomNode(value) ? 'Custom' : objType(value);
	  var simpleNodeProps = {
	    getItemString: getItemString,
	    key: keyPath[0],
	    keyPath: keyPath,
	    labelRenderer: labelRenderer,
	    nodeType: nodeType,
	    styling: styling,
	    value: value,
	    valueRenderer: valueRenderer
	  };

	  var nestedNodeProps = _objectSpread$3(_objectSpread$3(_objectSpread$3({}, rest), simpleNodeProps), {}, {
	    data: value,
	    isCustomNode: isCustomNode
	  });

	  switch (nodeType) {
	    case 'Object':
	    case 'Error':
	    case 'WeakMap':
	    case 'WeakSet':
	      return /*#__PURE__*/React__default["default"].createElement(JSONObjectNode, _objectSpread$3({}, nestedNodeProps));

	    case 'Array':
	      return /*#__PURE__*/React__default["default"].createElement(JSONArrayNode, _objectSpread$3({}, nestedNodeProps));

	    case 'Iterable':
	    case 'Map':
	    case 'Set':
	      return /*#__PURE__*/React__default["default"].createElement(JSONIterableNode, _objectSpread$3({}, nestedNodeProps));

	    case 'String':
	      return /*#__PURE__*/React__default["default"].createElement(JSONValueNode, _objectSpread$3(_objectSpread$3({}, simpleNodeProps), {}, {
	        valueGetter: function valueGetter(raw) {
	          return "\"".concat(raw, "\"");
	        }
	      }));

	    case 'Number':
	      return /*#__PURE__*/React__default["default"].createElement(JSONValueNode, _objectSpread$3({}, simpleNodeProps));

	    case 'Boolean':
	      return /*#__PURE__*/React__default["default"].createElement(JSONValueNode, _objectSpread$3(_objectSpread$3({}, simpleNodeProps), {}, {
	        valueGetter: function valueGetter(raw) {
	          return raw ? 'true' : 'false';
	        }
	      }));

	    case 'Date':
	      return /*#__PURE__*/React__default["default"].createElement(JSONValueNode, _objectSpread$3(_objectSpread$3({}, simpleNodeProps), {}, {
	        valueGetter: function valueGetter(raw) {
	          return raw.toISOString();
	        }
	      }));

	    case 'Null':
	      return /*#__PURE__*/React__default["default"].createElement(JSONValueNode, _objectSpread$3(_objectSpread$3({}, simpleNodeProps), {}, {
	        valueGetter: function valueGetter() {
	          return 'null';
	        }
	      }));

	    case 'Undefined':
	      return /*#__PURE__*/React__default["default"].createElement(JSONValueNode, _objectSpread$3(_objectSpread$3({}, simpleNodeProps), {}, {
	        valueGetter: function valueGetter() {
	          return 'undefined';
	        }
	      }));

	    case 'Function':
	    case 'Symbol':
	      return /*#__PURE__*/React__default["default"].createElement(JSONValueNode, _objectSpread$3(_objectSpread$3({}, simpleNodeProps), {}, {
	        valueGetter: function valueGetter(raw) {
	          return raw.toString();
	        }
	      }));

	    case 'Custom':
	      return /*#__PURE__*/React__default["default"].createElement(JSONValueNode, _objectSpread$3({}, simpleNodeProps));

	    default:
	      return /*#__PURE__*/React__default["default"].createElement(JSONValueNode, _objectSpread$3(_objectSpread$3({}, simpleNodeProps), {}, {
	        valueGetter: function valueGetter() {
	          return "<".concat(nodeType, ">");
	        }
	      }));
	  }
	};

	JSONNode.propTypes = {
	  getItemString: propTypes.exports.func.isRequired,
	  keyPath: propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.number]).isRequired).isRequired,
	  labelRenderer: propTypes.exports.func.isRequired,
	  styling: propTypes.exports.func.isRequired,
	  value: propTypes.exports.any,
	  valueRenderer: propTypes.exports.func.isRequired,
	  isCustomNode: propTypes.exports.func.isRequired
	};

	function _typeof(obj) {
	  "@babel/helpers - typeof";

	  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
	    return typeof obj;
	  } : function (obj) {
	    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	  }, _typeof(obj);
	}

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	function _arrayWithHoles(arr) {
	  if (Array.isArray(arr)) return arr;
	}

	function _iterableToArrayLimit(arr, i) {
	  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

	  if (_i == null) return;
	  var _arr = [];
	  var _n = true;
	  var _d = false;

	  var _s, _e;

	  try {
	    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
	      _arr.push(_s.value);

	      if (i && _arr.length === i) break;
	    }
	  } catch (err) {
	    _d = true;
	    _e = err;
	  } finally {
	    try {
	      if (!_n && _i["return"] != null) _i["return"]();
	    } finally {
	      if (_d) throw _e;
	    }
	  }

	  return _arr;
	}

	function _arrayLikeToArray(arr, len) {
	  if (len == null || len > arr.length) len = arr.length;

	  for (var i = 0, arr2 = new Array(len); i < len; i++) {
	    arr2[i] = arr[i];
	  }

	  return arr2;
	}

	function _unsupportedIterableToArray(o, minLen) {
	  if (!o) return;
	  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
	  var n = Object.prototype.toString.call(o).slice(8, -1);
	  if (n === "Object" && o.constructor) n = o.constructor.name;
	  if (n === "Map" || n === "Set") return Array.from(o);
	  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
	}

	function _nonIterableRest() {
	  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}

	function _slicedToArray(arr, i) {
	  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
	}

	var lib = {};

	var threezerotwofour = {exports: {}};

	(function (module, exports) {

		exports.__esModule = true;
		exports['default'] = {
		  scheme: 'threezerotwofour',
		  author: 'jan t. sott (http://github.com/idleberg)',
		  base00: '#090300',
		  base01: '#3a3432',
		  base02: '#4a4543',
		  base03: '#5c5855',
		  base04: '#807d7c',
		  base05: '#a5a2a2',
		  base06: '#d6d5d4',
		  base07: '#f7f7f7',
		  base08: '#db2d20',
		  base09: '#e8bbd0',
		  base0A: '#fded02',
		  base0B: '#01a252',
		  base0C: '#b5e4f4',
		  base0D: '#01a0e4',
		  base0E: '#a16a94',
		  base0F: '#cdab53'
		};
		module.exports = exports['default'];
	} (threezerotwofour, threezerotwofour.exports));

	var apathy = {exports: {}};

	(function (module, exports) {

		exports.__esModule = true;
		exports['default'] = {
		  scheme: 'apathy',
		  author: 'jannik siebert (https://github.com/janniks)',
		  base00: '#031A16',
		  base01: '#0B342D',
		  base02: '#184E45',
		  base03: '#2B685E',
		  base04: '#5F9C92',
		  base05: '#81B5AC',
		  base06: '#A7CEC8',
		  base07: '#D2E7E4',
		  base08: '#3E9688',
		  base09: '#3E7996',
		  base0A: '#3E4C96',
		  base0B: '#883E96',
		  base0C: '#963E4C',
		  base0D: '#96883E',
		  base0E: '#4C963E',
		  base0F: '#3E965B'
		};
		module.exports = exports['default'];
	} (apathy, apathy.exports));

	var ashes = {exports: {}};

	(function (module, exports) {

		exports.__esModule = true;
		exports['default'] = {
		  scheme: 'ashes',
		  author: 'jannik siebert (https://github.com/janniks)',
		  base00: '#1C2023',
		  base01: '#393F45',
		  base02: '#565E65',
		  base03: '#747C84',
		  base04: '#ADB3BA',
		  base05: '#C7CCD1',
		  base06: '#DFE2E5',
		  base07: '#F3F4F5',
		  base08: '#C7AE95',
		  base09: '#C7C795',
		  base0A: '#AEC795',
		  base0B: '#95C7AE',
		  base0C: '#95AEC7',
		  base0D: '#AE95C7',
		  base0E: '#C795AE',
		  base0F: '#C79595'
		};
		module.exports = exports['default'];
	} (ashes, ashes.exports));

	var atelierDune = {exports: {}};

	(function (module, exports) {

		exports.__esModule = true;
		exports['default'] = {
		  scheme: 'atelier dune',
		  author: 'bram de haan (http://atelierbram.github.io/syntax-highlighting/atelier-schemes/dune)',
		  base00: '#20201d',
		  base01: '#292824',
		  base02: '#6e6b5e',
		  base03: '#7d7a68',
		  base04: '#999580',
		  base05: '#a6a28c',
		  base06: '#e8e4cf',
		  base07: '#fefbec',
		  base08: '#d73737',
		  base09: '#b65611',
		  base0A: '#cfb017',
		  base0B: '#60ac39',
		  base0C: '#1fad83',
		  base0D: '#6684e1',
		  base0E: '#b854d4',
		  base0F: '#d43552'
		};
		module.exports = exports['default'];
	} (atelierDune, atelierDune.exports));

	var atelierForest = {exports: {}};

	(function (module, exports) {

		exports.__esModule = true;
		exports['default'] = {
		  scheme: 'atelier forest',
		  author: 'bram de haan (http://atelierbram.github.io/syntax-highlighting/atelier-schemes/forest)',
		  base00: '#1b1918',
		  base01: '#2c2421',
		  base02: '#68615e',
		  base03: '#766e6b',
		  base04: '#9c9491',
		  base05: '#a8a19f',
		  base06: '#e6e2e0',
		  base07: '#f1efee',
		  base08: '#f22c40',
		  base09: '#df5320',
		  base0A: '#d5911a',
		  base0B: '#5ab738',
		  base0C: '#00ad9c',
		  base0D: '#407ee7',
		  base0E: '#6666ea',
		  base0F: '#c33ff3'
		};
		module.exports = exports['default'];
	} (atelierForest, atelierForest.exports));

	var atelierHeath = {exports: {}};

	(function (module, exports) {

		exports.__esModule = true;
		exports['default'] = {
		  scheme: 'atelier heath',
		  author: 'bram de haan (http://atelierbram.github.io/syntax-highlighting/atelier-schemes/heath)',
		  base00: '#1b181b',
		  base01: '#292329',
		  base02: '#695d69',
		  base03: '#776977',
		  base04: '#9e8f9e',
		  base05: '#ab9bab',
		  base06: '#d8cad8',
		  base07: '#f7f3f7',
		  base08: '#ca402b',
		  base09: '#a65926',
		  base0A: '#bb8a35',
		  base0B: '#379a37',
		  base0C: '#159393',
		  base0D: '#516aec',
		  base0E: '#7b59c0',
		  base0F: '#cc33cc'
		};
		module.exports = exports['default'];
	} (atelierHeath, atelierHeath.exports));

	var atelierLakeside = {exports: {}};

	(function (module, exports) {

		exports.__esModule = true;
		exports['default'] = {
		  scheme: 'atelier lakeside',
		  author: 'bram de haan (http://atelierbram.github.io/syntax-highlighting/atelier-schemes/lakeside/)',
		  base00: '#161b1d',
		  base01: '#1f292e',
		  base02: '#516d7b',
		  base03: '#5a7b8c',
		  base04: '#7195a8',
		  base05: '#7ea2b4',
		  base06: '#c1e4f6',
		  base07: '#ebf8ff',
		  base08: '#d22d72',
		  base09: '#935c25',
		  base0A: '#8a8a0f',
		  base0B: '#568c3b',
		  base0C: '#2d8f6f',
		  base0D: '#257fad',
		  base0E: '#5d5db1',
		  base0F: '#b72dd2'
		};
		module.exports = exports['default'];
	} (atelierLakeside, atelierLakeside.exports));

	var atelierSeaside = {exports: {}};

	(function (module, exports) {

		exports.__esModule = true;
		exports['default'] = {
		  scheme: 'atelier seaside',
		  author: 'bram de haan (http://atelierbram.github.io/syntax-highlighting/atelier-schemes/seaside/)',
		  base00: '#131513',
		  base01: '#242924',
		  base02: '#5e6e5e',
		  base03: '#687d68',
		  base04: '#809980',
		  base05: '#8ca68c',
		  base06: '#cfe8cf',
		  base07: '#f0fff0',
		  base08: '#e6193c',
		  base09: '#87711d',
		  base0A: '#c3c322',
		  base0B: '#29a329',
		  base0C: '#1999b3',
		  base0D: '#3d62f5',
		  base0E: '#ad2bee',
		  base0F: '#e619c3'
		};
		module.exports = exports['default'];
	} (atelierSeaside, atelierSeaside.exports));

	var bespin = {exports: {}};

	(function (module, exports) {

		exports.__esModule = true;
		exports['default'] = {
		  scheme: 'bespin',
		  author: 'jan t. sott',
		  base00: '#28211c',
		  base01: '#36312e',
		  base02: '#5e5d5c',
		  base03: '#666666',
		  base04: '#797977',
		  base05: '#8a8986',
		  base06: '#9d9b97',
		  base07: '#baae9e',
		  base08: '#cf6a4c',
		  base09: '#cf7d34',
		  base0A: '#f9ee98',
		  base0B: '#54be0d',
		  base0C: '#afc4db',
		  base0D: '#5ea6ea',
		  base0E: '#9b859d',
		  base0F: '#937121'
		};
		module.exports = exports['default'];
	} (bespin, bespin.exports));

	var brewer = {exports: {}};

	(function (module, exports) {

		exports.__esModule = true;
		exports['default'] = {
		  scheme: 'brewer',
		  author: 'timothée poisot (http://github.com/tpoisot)',
		  base00: '#0c0d0e',
		  base01: '#2e2f30',
		  base02: '#515253',
		  base03: '#737475',
		  base04: '#959697',
		  base05: '#b7b8b9',
		  base06: '#dadbdc',
		  base07: '#fcfdfe',
		  base08: '#e31a1c',
		  base09: '#e6550d',
		  base0A: '#dca060',
		  base0B: '#31a354',
		  base0C: '#80b1d3',
		  base0D: '#3182bd',
		  base0E: '#756bb1',
		  base0F: '#b15928'
		};
		module.exports = exports['default'];
	} (brewer, brewer.exports));

	var bright = {exports: {}};

	(function (module, exports) {

		exports.__esModule = true;
		exports['default'] = {
		  scheme: 'bright',
		  author: 'chris kempson (http://chriskempson.com)',
		  base00: '#000000',
		  base01: '#303030',
		  base02: '#505050',
		  base03: '#b0b0b0',
		  base04: '#d0d0d0',
		  base05: '#e0e0e0',
		  base06: '#f5f5f5',
		  base07: '#ffffff',
		  base08: '#fb0120',
		  base09: '#fc6d24',
		  base0A: '#fda331',
		  base0B: '#a1c659',
		  base0C: '#76c7b7',
		  base0D: '#6fb3d2',
		  base0E: '#d381c3',
		  base0F: '#be643c'
		};
		module.exports = exports['default'];
	} (bright, bright.exports));

	var chalk = {exports: {}};

	(function (module, exports) {

		exports.__esModule = true;
		exports['default'] = {
		  scheme: 'chalk',
		  author: 'chris kempson (http://chriskempson.com)',
		  base00: '#151515',
		  base01: '#202020',
		  base02: '#303030',
		  base03: '#505050',
		  base04: '#b0b0b0',
		  base05: '#d0d0d0',
		  base06: '#e0e0e0',
		  base07: '#f5f5f5',
		  base08: '#fb9fb1',
		  base09: '#eda987',
		  base0A: '#ddb26f',
		  base0B: '#acc267',
		  base0C: '#12cfc0',
		  base0D: '#6fc2ef',
		  base0E: '#e1a3ee',
		  base0F: '#deaf8f'
		};
		module.exports = exports['default'];
	} (chalk, chalk.exports));

	var codeschool = {exports: {}};

	(function (module, exports) {

		exports.__esModule = true;
		exports['default'] = {
		  scheme: 'codeschool',
		  author: 'brettof86',
		  base00: '#232c31',
		  base01: '#1c3657',
		  base02: '#2a343a',
		  base03: '#3f4944',
		  base04: '#84898c',
		  base05: '#9ea7a6',
		  base06: '#a7cfa3',
		  base07: '#b5d8f6',
		  base08: '#2a5491',
		  base09: '#43820d',
		  base0A: '#a03b1e',
		  base0B: '#237986',
		  base0C: '#b02f30',
		  base0D: '#484d79',
		  base0E: '#c59820',
		  base0F: '#c98344'
		};
		module.exports = exports['default'];
	} (codeschool, codeschool.exports));

	var colors = {exports: {}};

	(function (module, exports) {

		exports.__esModule = true;
		exports['default'] = {
		  scheme: 'colors',
		  author: 'mrmrs (http://clrs.cc)',
		  base00: '#111111',
		  base01: '#333333',
		  base02: '#555555',
		  base03: '#777777',
		  base04: '#999999',
		  base05: '#bbbbbb',
		  base06: '#dddddd',
		  base07: '#ffffff',
		  base08: '#ff4136',
		  base09: '#ff851b',
		  base0A: '#ffdc00',
		  base0B: '#2ecc40',
		  base0C: '#7fdbff',
		  base0D: '#0074d9',
		  base0E: '#b10dc9',
		  base0F: '#85144b'
		};
		module.exports = exports['default'];
	} (colors, colors.exports));

	var _default = {exports: {}};

	(function (module, exports) {

		exports.__esModule = true;
		exports['default'] = {
		  scheme: 'default',
		  author: 'chris kempson (http://chriskempson.com)',
		  base00: '#181818',
		  base01: '#282828',
		  base02: '#383838',
		  base03: '#585858',
		  base04: '#b8b8b8',
		  base05: '#d8d8d8',
		  base06: '#e8e8e8',
		  base07: '#f8f8f8',
		  base08: '#ab4642',
		  base09: '#dc9656',
		  base0A: '#f7ca88',
		  base0B: '#a1b56c',
		  base0C: '#86c1b9',
		  base0D: '#7cafc2',
		  base0E: '#ba8baf',
		  base0F: '#a16946'
		};
		module.exports = exports['default'];
	} (_default, _default.exports));

	var eighties = {exports: {}};

	(function (module, exports) {

		exports.__esModule = true;
		exports['default'] = {
		  scheme: 'eighties',
		  author: 'chris kempson (http://chriskempson.com)',
		  base00: '#2d2d2d',
		  base01: '#393939',
		  base02: '#515151',
		  base03: '#747369',
		  base04: '#a09f93',
		  base05: '#d3d0c8',
		  base06: '#e8e6df',
		  base07: '#f2f0ec',
		  base08: '#f2777a',
		  base09: '#f99157',
		  base0A: '#ffcc66',
		  base0B: '#99cc99',
		  base0C: '#66cccc',
		  base0D: '#6699cc',
		  base0E: '#cc99cc',
		  base0F: '#d27b53'
		};
		module.exports = exports['default'];
	} (eighties, eighties.exports));

	var embers = {exports: {}};

	(function (module, exports) {

		exports.__esModule = true;
		exports['default'] = {
		  scheme: 'embers',
		  author: 'jannik siebert (https://github.com/janniks)',
		  base00: '#16130F',
		  base01: '#2C2620',
		  base02: '#433B32',
		  base03: '#5A5047',
		  base04: '#8A8075',
		  base05: '#A39A90',
		  base06: '#BEB6AE',
		  base07: '#DBD6D1',
		  base08: '#826D57',
		  base09: '#828257',
		  base0A: '#6D8257',
		  base0B: '#57826D',
		  base0C: '#576D82',
		  base0D: '#6D5782',
		  base0E: '#82576D',
		  base0F: '#825757'
		};
		module.exports = exports['default'];
	} (embers, embers.exports));

	var flat = {exports: {}};

	(function (module, exports) {

		exports.__esModule = true;
		exports['default'] = {
		  scheme: 'flat',
		  author: 'chris kempson (http://chriskempson.com)',
		  base00: '#2C3E50',
		  base01: '#34495E',
		  base02: '#7F8C8D',
		  base03: '#95A5A6',
		  base04: '#BDC3C7',
		  base05: '#e0e0e0',
		  base06: '#f5f5f5',
		  base07: '#ECF0F1',
		  base08: '#E74C3C',
		  base09: '#E67E22',
		  base0A: '#F1C40F',
		  base0B: '#2ECC71',
		  base0C: '#1ABC9C',
		  base0D: '#3498DB',
		  base0E: '#9B59B6',
		  base0F: '#be643c'
		};
		module.exports = exports['default'];
	} (flat, flat.exports));

	var google = {exports: {}};

	(function (module, exports) {

		exports.__esModule = true;
		exports['default'] = {
		  scheme: 'google',
		  author: 'seth wright (http://sethawright.com)',
		  base00: '#1d1f21',
		  base01: '#282a2e',
		  base02: '#373b41',
		  base03: '#969896',
		  base04: '#b4b7b4',
		  base05: '#c5c8c6',
		  base06: '#e0e0e0',
		  base07: '#ffffff',
		  base08: '#CC342B',
		  base09: '#F96A38',
		  base0A: '#FBA922',
		  base0B: '#198844',
		  base0C: '#3971ED',
		  base0D: '#3971ED',
		  base0E: '#A36AC7',
		  base0F: '#3971ED'
		};
		module.exports = exports['default'];
	} (google, google.exports));

	var grayscale = {exports: {}};

	(function (module, exports) {

		exports.__esModule = true;
		exports['default'] = {
		  scheme: 'grayscale',
		  author: 'alexandre gavioli (https://github.com/alexx2/)',
		  base00: '#101010',
		  base01: '#252525',
		  base02: '#464646',
		  base03: '#525252',
		  base04: '#ababab',
		  base05: '#b9b9b9',
		  base06: '#e3e3e3',
		  base07: '#f7f7f7',
		  base08: '#7c7c7c',
		  base09: '#999999',
		  base0A: '#a0a0a0',
		  base0B: '#8e8e8e',
		  base0C: '#868686',
		  base0D: '#686868',
		  base0E: '#747474',
		  base0F: '#5e5e5e'
		};
		module.exports = exports['default'];
	} (grayscale, grayscale.exports));

	var greenscreen = {exports: {}};

	(function (module, exports) {

		exports.__esModule = true;
		exports['default'] = {
		  scheme: 'green screen',
		  author: 'chris kempson (http://chriskempson.com)',
		  base00: '#001100',
		  base01: '#003300',
		  base02: '#005500',
		  base03: '#007700',
		  base04: '#009900',
		  base05: '#00bb00',
		  base06: '#00dd00',
		  base07: '#00ff00',
		  base08: '#007700',
		  base09: '#009900',
		  base0A: '#007700',
		  base0B: '#00bb00',
		  base0C: '#005500',
		  base0D: '#009900',
		  base0E: '#00bb00',
		  base0F: '#005500'
		};
		module.exports = exports['default'];
	} (greenscreen, greenscreen.exports));

	var harmonic = {exports: {}};

	(function (module, exports) {

		exports.__esModule = true;
		exports['default'] = {
		  scheme: 'harmonic16',
		  author: 'jannik siebert (https://github.com/janniks)',
		  base00: '#0b1c2c',
		  base01: '#223b54',
		  base02: '#405c79',
		  base03: '#627e99',
		  base04: '#aabcce',
		  base05: '#cbd6e2',
		  base06: '#e5ebf1',
		  base07: '#f7f9fb',
		  base08: '#bf8b56',
		  base09: '#bfbf56',
		  base0A: '#8bbf56',
		  base0B: '#56bf8b',
		  base0C: '#568bbf',
		  base0D: '#8b56bf',
		  base0E: '#bf568b',
		  base0F: '#bf5656'
		};
		module.exports = exports['default'];
	} (harmonic, harmonic.exports));

	var hopscotch = {exports: {}};

	(function (module, exports) {

		exports.__esModule = true;
		exports['default'] = {
		  scheme: 'hopscotch',
		  author: 'jan t. sott',
		  base00: '#322931',
		  base01: '#433b42',
		  base02: '#5c545b',
		  base03: '#797379',
		  base04: '#989498',
		  base05: '#b9b5b8',
		  base06: '#d5d3d5',
		  base07: '#ffffff',
		  base08: '#dd464c',
		  base09: '#fd8b19',
		  base0A: '#fdcc59',
		  base0B: '#8fc13e',
		  base0C: '#149b93',
		  base0D: '#1290bf',
		  base0E: '#c85e7c',
		  base0F: '#b33508'
		};
		module.exports = exports['default'];
	} (hopscotch, hopscotch.exports));

	var isotope = {exports: {}};

	(function (module, exports) {

		exports.__esModule = true;
		exports['default'] = {
		  scheme: 'isotope',
		  author: 'jan t. sott',
		  base00: '#000000',
		  base01: '#404040',
		  base02: '#606060',
		  base03: '#808080',
		  base04: '#c0c0c0',
		  base05: '#d0d0d0',
		  base06: '#e0e0e0',
		  base07: '#ffffff',
		  base08: '#ff0000',
		  base09: '#ff9900',
		  base0A: '#ff0099',
		  base0B: '#33ff00',
		  base0C: '#00ffff',
		  base0D: '#0066ff',
		  base0E: '#cc00ff',
		  base0F: '#3300ff'
		};
		module.exports = exports['default'];
	} (isotope, isotope.exports));

	var marrakesh = {exports: {}};

	(function (module, exports) {

		exports.__esModule = true;
		exports['default'] = {
		  scheme: 'marrakesh',
		  author: 'alexandre gavioli (http://github.com/alexx2/)',
		  base00: '#201602',
		  base01: '#302e00',
		  base02: '#5f5b17',
		  base03: '#6c6823',
		  base04: '#86813b',
		  base05: '#948e48',
		  base06: '#ccc37a',
		  base07: '#faf0a5',
		  base08: '#c35359',
		  base09: '#b36144',
		  base0A: '#a88339',
		  base0B: '#18974e',
		  base0C: '#75a738',
		  base0D: '#477ca1',
		  base0E: '#8868b3',
		  base0F: '#b3588e'
		};
		module.exports = exports['default'];
	} (marrakesh, marrakesh.exports));

	var mocha = {exports: {}};

	(function (module, exports) {

		exports.__esModule = true;
		exports['default'] = {
		  scheme: 'mocha',
		  author: 'chris kempson (http://chriskempson.com)',
		  base00: '#3B3228',
		  base01: '#534636',
		  base02: '#645240',
		  base03: '#7e705a',
		  base04: '#b8afad',
		  base05: '#d0c8c6',
		  base06: '#e9e1dd',
		  base07: '#f5eeeb',
		  base08: '#cb6077',
		  base09: '#d28b71',
		  base0A: '#f4bc87',
		  base0B: '#beb55b',
		  base0C: '#7bbda4',
		  base0D: '#8ab3b5',
		  base0E: '#a89bb9',
		  base0F: '#bb9584'
		};
		module.exports = exports['default'];
	} (mocha, mocha.exports));

	var monokai = {exports: {}};

	(function (module, exports) {

		exports.__esModule = true;
		exports['default'] = {
		  scheme: 'monokai',
		  author: 'wimer hazenberg (http://www.monokai.nl)',
		  base00: '#272822',
		  base01: '#383830',
		  base02: '#49483e',
		  base03: '#75715e',
		  base04: '#a59f85',
		  base05: '#f8f8f2',
		  base06: '#f5f4f1',
		  base07: '#f9f8f5',
		  base08: '#f92672',
		  base09: '#fd971f',
		  base0A: '#f4bf75',
		  base0B: '#a6e22e',
		  base0C: '#a1efe4',
		  base0D: '#66d9ef',
		  base0E: '#ae81ff',
		  base0F: '#cc6633'
		};
		module.exports = exports['default'];
	} (monokai, monokai.exports));

	var ocean = {exports: {}};

	(function (module, exports) {

		exports.__esModule = true;
		exports['default'] = {
		  scheme: 'ocean',
		  author: 'chris kempson (http://chriskempson.com)',
		  base00: '#2b303b',
		  base01: '#343d46',
		  base02: '#4f5b66',
		  base03: '#65737e',
		  base04: '#a7adba',
		  base05: '#c0c5ce',
		  base06: '#dfe1e8',
		  base07: '#eff1f5',
		  base08: '#bf616a',
		  base09: '#d08770',
		  base0A: '#ebcb8b',
		  base0B: '#a3be8c',
		  base0C: '#96b5b4',
		  base0D: '#8fa1b3',
		  base0E: '#b48ead',
		  base0F: '#ab7967'
		};
		module.exports = exports['default'];
	} (ocean, ocean.exports));

	var paraiso = {exports: {}};

	(function (module, exports) {

		exports.__esModule = true;
		exports['default'] = {
		  scheme: 'paraiso',
		  author: 'jan t. sott',
		  base00: '#2f1e2e',
		  base01: '#41323f',
		  base02: '#4f424c',
		  base03: '#776e71',
		  base04: '#8d8687',
		  base05: '#a39e9b',
		  base06: '#b9b6b0',
		  base07: '#e7e9db',
		  base08: '#ef6155',
		  base09: '#f99b15',
		  base0A: '#fec418',
		  base0B: '#48b685',
		  base0C: '#5bc4bf',
		  base0D: '#06b6ef',
		  base0E: '#815ba4',
		  base0F: '#e96ba8'
		};
		module.exports = exports['default'];
	} (paraiso, paraiso.exports));

	var pop = {exports: {}};

	(function (module, exports) {

		exports.__esModule = true;
		exports['default'] = {
		  scheme: 'pop',
		  author: 'chris kempson (http://chriskempson.com)',
		  base00: '#000000',
		  base01: '#202020',
		  base02: '#303030',
		  base03: '#505050',
		  base04: '#b0b0b0',
		  base05: '#d0d0d0',
		  base06: '#e0e0e0',
		  base07: '#ffffff',
		  base08: '#eb008a',
		  base09: '#f29333',
		  base0A: '#f8ca12',
		  base0B: '#37b349',
		  base0C: '#00aabb',
		  base0D: '#0e5a94',
		  base0E: '#b31e8d',
		  base0F: '#7a2d00'
		};
		module.exports = exports['default'];
	} (pop, pop.exports));

	var railscasts = {exports: {}};

	(function (module, exports) {

		exports.__esModule = true;
		exports['default'] = {
		  scheme: 'railscasts',
		  author: 'ryan bates (http://railscasts.com)',
		  base00: '#2b2b2b',
		  base01: '#272935',
		  base02: '#3a4055',
		  base03: '#5a647e',
		  base04: '#d4cfc9',
		  base05: '#e6e1dc',
		  base06: '#f4f1ed',
		  base07: '#f9f7f3',
		  base08: '#da4939',
		  base09: '#cc7833',
		  base0A: '#ffc66d',
		  base0B: '#a5c261',
		  base0C: '#519f50',
		  base0D: '#6d9cbe',
		  base0E: '#b6b3eb',
		  base0F: '#bc9458'
		};
		module.exports = exports['default'];
	} (railscasts, railscasts.exports));

	var shapeshifter = {exports: {}};

	(function (module, exports) {

		exports.__esModule = true;
		exports['default'] = {
		  scheme: 'shapeshifter',
		  author: 'tyler benziger (http://tybenz.com)',
		  base00: '#000000',
		  base01: '#040404',
		  base02: '#102015',
		  base03: '#343434',
		  base04: '#555555',
		  base05: '#ababab',
		  base06: '#e0e0e0',
		  base07: '#f9f9f9',
		  base08: '#e92f2f',
		  base09: '#e09448',
		  base0A: '#dddd13',
		  base0B: '#0ed839',
		  base0C: '#23edda',
		  base0D: '#3b48e3',
		  base0E: '#f996e2',
		  base0F: '#69542d'
		};
		module.exports = exports['default'];
	} (shapeshifter, shapeshifter.exports));

	var solarized$1 = {exports: {}};

	(function (module, exports) {

		exports.__esModule = true;
		exports['default'] = {
		  scheme: 'solarized',
		  author: 'ethan schoonover (http://ethanschoonover.com/solarized)',
		  base00: '#002b36',
		  base01: '#073642',
		  base02: '#586e75',
		  base03: '#657b83',
		  base04: '#839496',
		  base05: '#93a1a1',
		  base06: '#eee8d5',
		  base07: '#fdf6e3',
		  base08: '#dc322f',
		  base09: '#cb4b16',
		  base0A: '#b58900',
		  base0B: '#859900',
		  base0C: '#2aa198',
		  base0D: '#268bd2',
		  base0E: '#6c71c4',
		  base0F: '#d33682'
		};
		module.exports = exports['default'];
	} (solarized$1, solarized$1.exports));

	var summerfruit = {exports: {}};

	(function (module, exports) {

		exports.__esModule = true;
		exports['default'] = {
		  scheme: 'summerfruit',
		  author: 'christopher corley (http://cscorley.github.io/)',
		  base00: '#151515',
		  base01: '#202020',
		  base02: '#303030',
		  base03: '#505050',
		  base04: '#B0B0B0',
		  base05: '#D0D0D0',
		  base06: '#E0E0E0',
		  base07: '#FFFFFF',
		  base08: '#FF0086',
		  base09: '#FD8900',
		  base0A: '#ABA800',
		  base0B: '#00C918',
		  base0C: '#1faaaa',
		  base0D: '#3777E6',
		  base0E: '#AD00A1',
		  base0F: '#cc6633'
		};
		module.exports = exports['default'];
	} (summerfruit, summerfruit.exports));

	var tomorrow = {exports: {}};

	(function (module, exports) {

		exports.__esModule = true;
		exports['default'] = {
		  scheme: 'tomorrow',
		  author: 'chris kempson (http://chriskempson.com)',
		  base00: '#1d1f21',
		  base01: '#282a2e',
		  base02: '#373b41',
		  base03: '#969896',
		  base04: '#b4b7b4',
		  base05: '#c5c8c6',
		  base06: '#e0e0e0',
		  base07: '#ffffff',
		  base08: '#cc6666',
		  base09: '#de935f',
		  base0A: '#f0c674',
		  base0B: '#b5bd68',
		  base0C: '#8abeb7',
		  base0D: '#81a2be',
		  base0E: '#b294bb',
		  base0F: '#a3685a'
		};
		module.exports = exports['default'];
	} (tomorrow, tomorrow.exports));

	var tube = {exports: {}};

	(function (module, exports) {

		exports.__esModule = true;
		exports['default'] = {
		  scheme: 'london tube',
		  author: 'jan t. sott',
		  base00: '#231f20',
		  base01: '#1c3f95',
		  base02: '#5a5758',
		  base03: '#737171',
		  base04: '#959ca1',
		  base05: '#d9d8d8',
		  base06: '#e7e7e8',
		  base07: '#ffffff',
		  base08: '#ee2e24',
		  base09: '#f386a1',
		  base0A: '#ffd204',
		  base0B: '#00853e',
		  base0C: '#85cebc',
		  base0D: '#009ddc',
		  base0E: '#98005d',
		  base0F: '#b06110'
		};
		module.exports = exports['default'];
	} (tube, tube.exports));

	var twilight = {exports: {}};

	(function (module, exports) {

		exports.__esModule = true;
		exports['default'] = {
		  scheme: 'twilight',
		  author: 'david hart (http://hart-dev.com)',
		  base00: '#1e1e1e',
		  base01: '#323537',
		  base02: '#464b50',
		  base03: '#5f5a60',
		  base04: '#838184',
		  base05: '#a7a7a7',
		  base06: '#c3c3c3',
		  base07: '#ffffff',
		  base08: '#cf6a4c',
		  base09: '#cda869',
		  base0A: '#f9ee98',
		  base0B: '#8f9d6a',
		  base0C: '#afc4db',
		  base0D: '#7587a6',
		  base0E: '#9b859d',
		  base0F: '#9b703f'
		};
		module.exports = exports['default'];
	} (twilight, twilight.exports));

	(function (exports) {

		exports.__esModule = true;

		function _interopRequire(obj) { return obj && obj.__esModule ? obj['default'] : obj; }

		var _threezerotwofour = threezerotwofour.exports;

		exports.threezerotwofour = _interopRequire(_threezerotwofour);

		var _apathy = apathy.exports;

		exports.apathy = _interopRequire(_apathy);

		var _ashes = ashes.exports;

		exports.ashes = _interopRequire(_ashes);

		var _atelierDune = atelierDune.exports;

		exports.atelierDune = _interopRequire(_atelierDune);

		var _atelierForest = atelierForest.exports;

		exports.atelierForest = _interopRequire(_atelierForest);

		var _atelierHeath = atelierHeath.exports;

		exports.atelierHeath = _interopRequire(_atelierHeath);

		var _atelierLakeside = atelierLakeside.exports;

		exports.atelierLakeside = _interopRequire(_atelierLakeside);

		var _atelierSeaside = atelierSeaside.exports;

		exports.atelierSeaside = _interopRequire(_atelierSeaside);

		var _bespin = bespin.exports;

		exports.bespin = _interopRequire(_bespin);

		var _brewer = brewer.exports;

		exports.brewer = _interopRequire(_brewer);

		var _bright = bright.exports;

		exports.bright = _interopRequire(_bright);

		var _chalk = chalk.exports;

		exports.chalk = _interopRequire(_chalk);

		var _codeschool = codeschool.exports;

		exports.codeschool = _interopRequire(_codeschool);

		var _colors = colors.exports;

		exports.colors = _interopRequire(_colors);

		var _default$1 = _default.exports;

		exports['default'] = _interopRequire(_default$1);

		var _eighties = eighties.exports;

		exports.eighties = _interopRequire(_eighties);

		var _embers = embers.exports;

		exports.embers = _interopRequire(_embers);

		var _flat = flat.exports;

		exports.flat = _interopRequire(_flat);

		var _google = google.exports;

		exports.google = _interopRequire(_google);

		var _grayscale = grayscale.exports;

		exports.grayscale = _interopRequire(_grayscale);

		var _greenscreen = greenscreen.exports;

		exports.greenscreen = _interopRequire(_greenscreen);

		var _harmonic = harmonic.exports;

		exports.harmonic = _interopRequire(_harmonic);

		var _hopscotch = hopscotch.exports;

		exports.hopscotch = _interopRequire(_hopscotch);

		var _isotope = isotope.exports;

		exports.isotope = _interopRequire(_isotope);

		var _marrakesh = marrakesh.exports;

		exports.marrakesh = _interopRequire(_marrakesh);

		var _mocha = mocha.exports;

		exports.mocha = _interopRequire(_mocha);

		var _monokai = monokai.exports;

		exports.monokai = _interopRequire(_monokai);

		var _ocean = ocean.exports;

		exports.ocean = _interopRequire(_ocean);

		var _paraiso = paraiso.exports;

		exports.paraiso = _interopRequire(_paraiso);

		var _pop = pop.exports;

		exports.pop = _interopRequire(_pop);

		var _railscasts = railscasts.exports;

		exports.railscasts = _interopRequire(_railscasts);

		var _shapeshifter = shapeshifter.exports;

		exports.shapeshifter = _interopRequire(_shapeshifter);

		var _solarized = solarized$1.exports;

		exports.solarized = _interopRequire(_solarized);

		var _summerfruit = summerfruit.exports;

		exports.summerfruit = _interopRequire(_summerfruit);

		var _tomorrow = tomorrow.exports;

		exports.tomorrow = _interopRequire(_tomorrow);

		var _tube = tube.exports;

		exports.tube = _interopRequire(_tube);

		var _twilight = twilight.exports;

		exports.twilight = _interopRequire(_twilight);
	} (lib));

	var index = /*@__PURE__*/getDefaultExportFromCjs(lib);

	var base16 = /*#__PURE__*/_mergeNamespaces({
		__proto__: null,
		'default': index
	}, [lib]);

	var colorString$1 = {exports: {}};

	var colorName = {
		"aliceblue": [240, 248, 255],
		"antiquewhite": [250, 235, 215],
		"aqua": [0, 255, 255],
		"aquamarine": [127, 255, 212],
		"azure": [240, 255, 255],
		"beige": [245, 245, 220],
		"bisque": [255, 228, 196],
		"black": [0, 0, 0],
		"blanchedalmond": [255, 235, 205],
		"blue": [0, 0, 255],
		"blueviolet": [138, 43, 226],
		"brown": [165, 42, 42],
		"burlywood": [222, 184, 135],
		"cadetblue": [95, 158, 160],
		"chartreuse": [127, 255, 0],
		"chocolate": [210, 105, 30],
		"coral": [255, 127, 80],
		"cornflowerblue": [100, 149, 237],
		"cornsilk": [255, 248, 220],
		"crimson": [220, 20, 60],
		"cyan": [0, 255, 255],
		"darkblue": [0, 0, 139],
		"darkcyan": [0, 139, 139],
		"darkgoldenrod": [184, 134, 11],
		"darkgray": [169, 169, 169],
		"darkgreen": [0, 100, 0],
		"darkgrey": [169, 169, 169],
		"darkkhaki": [189, 183, 107],
		"darkmagenta": [139, 0, 139],
		"darkolivegreen": [85, 107, 47],
		"darkorange": [255, 140, 0],
		"darkorchid": [153, 50, 204],
		"darkred": [139, 0, 0],
		"darksalmon": [233, 150, 122],
		"darkseagreen": [143, 188, 143],
		"darkslateblue": [72, 61, 139],
		"darkslategray": [47, 79, 79],
		"darkslategrey": [47, 79, 79],
		"darkturquoise": [0, 206, 209],
		"darkviolet": [148, 0, 211],
		"deeppink": [255, 20, 147],
		"deepskyblue": [0, 191, 255],
		"dimgray": [105, 105, 105],
		"dimgrey": [105, 105, 105],
		"dodgerblue": [30, 144, 255],
		"firebrick": [178, 34, 34],
		"floralwhite": [255, 250, 240],
		"forestgreen": [34, 139, 34],
		"fuchsia": [255, 0, 255],
		"gainsboro": [220, 220, 220],
		"ghostwhite": [248, 248, 255],
		"gold": [255, 215, 0],
		"goldenrod": [218, 165, 32],
		"gray": [128, 128, 128],
		"green": [0, 128, 0],
		"greenyellow": [173, 255, 47],
		"grey": [128, 128, 128],
		"honeydew": [240, 255, 240],
		"hotpink": [255, 105, 180],
		"indianred": [205, 92, 92],
		"indigo": [75, 0, 130],
		"ivory": [255, 255, 240],
		"khaki": [240, 230, 140],
		"lavender": [230, 230, 250],
		"lavenderblush": [255, 240, 245],
		"lawngreen": [124, 252, 0],
		"lemonchiffon": [255, 250, 205],
		"lightblue": [173, 216, 230],
		"lightcoral": [240, 128, 128],
		"lightcyan": [224, 255, 255],
		"lightgoldenrodyellow": [250, 250, 210],
		"lightgray": [211, 211, 211],
		"lightgreen": [144, 238, 144],
		"lightgrey": [211, 211, 211],
		"lightpink": [255, 182, 193],
		"lightsalmon": [255, 160, 122],
		"lightseagreen": [32, 178, 170],
		"lightskyblue": [135, 206, 250],
		"lightslategray": [119, 136, 153],
		"lightslategrey": [119, 136, 153],
		"lightsteelblue": [176, 196, 222],
		"lightyellow": [255, 255, 224],
		"lime": [0, 255, 0],
		"limegreen": [50, 205, 50],
		"linen": [250, 240, 230],
		"magenta": [255, 0, 255],
		"maroon": [128, 0, 0],
		"mediumaquamarine": [102, 205, 170],
		"mediumblue": [0, 0, 205],
		"mediumorchid": [186, 85, 211],
		"mediumpurple": [147, 112, 219],
		"mediumseagreen": [60, 179, 113],
		"mediumslateblue": [123, 104, 238],
		"mediumspringgreen": [0, 250, 154],
		"mediumturquoise": [72, 209, 204],
		"mediumvioletred": [199, 21, 133],
		"midnightblue": [25, 25, 112],
		"mintcream": [245, 255, 250],
		"mistyrose": [255, 228, 225],
		"moccasin": [255, 228, 181],
		"navajowhite": [255, 222, 173],
		"navy": [0, 0, 128],
		"oldlace": [253, 245, 230],
		"olive": [128, 128, 0],
		"olivedrab": [107, 142, 35],
		"orange": [255, 165, 0],
		"orangered": [255, 69, 0],
		"orchid": [218, 112, 214],
		"palegoldenrod": [238, 232, 170],
		"palegreen": [152, 251, 152],
		"paleturquoise": [175, 238, 238],
		"palevioletred": [219, 112, 147],
		"papayawhip": [255, 239, 213],
		"peachpuff": [255, 218, 185],
		"peru": [205, 133, 63],
		"pink": [255, 192, 203],
		"plum": [221, 160, 221],
		"powderblue": [176, 224, 230],
		"purple": [128, 0, 128],
		"rebeccapurple": [102, 51, 153],
		"red": [255, 0, 0],
		"rosybrown": [188, 143, 143],
		"royalblue": [65, 105, 225],
		"saddlebrown": [139, 69, 19],
		"salmon": [250, 128, 114],
		"sandybrown": [244, 164, 96],
		"seagreen": [46, 139, 87],
		"seashell": [255, 245, 238],
		"sienna": [160, 82, 45],
		"silver": [192, 192, 192],
		"skyblue": [135, 206, 235],
		"slateblue": [106, 90, 205],
		"slategray": [112, 128, 144],
		"slategrey": [112, 128, 144],
		"snow": [255, 250, 250],
		"springgreen": [0, 255, 127],
		"steelblue": [70, 130, 180],
		"tan": [210, 180, 140],
		"teal": [0, 128, 128],
		"thistle": [216, 191, 216],
		"tomato": [255, 99, 71],
		"turquoise": [64, 224, 208],
		"violet": [238, 130, 238],
		"wheat": [245, 222, 179],
		"white": [255, 255, 255],
		"whitesmoke": [245, 245, 245],
		"yellow": [255, 255, 0],
		"yellowgreen": [154, 205, 50]
	};

	var simpleSwizzle = {exports: {}};

	var isArrayish$1 = function isArrayish(obj) {
		if (!obj || typeof obj === 'string') {
			return false;
		}

		return obj instanceof Array || Array.isArray(obj) ||
			(obj.length >= 0 && (obj.splice instanceof Function ||
				(Object.getOwnPropertyDescriptor(obj, (obj.length - 1)) && obj.constructor.name !== 'String')));
	};

	var isArrayish = isArrayish$1;

	var concat = Array.prototype.concat;
	var slice = Array.prototype.slice;

	var swizzle$1 = simpleSwizzle.exports = function swizzle(args) {
		var results = [];

		for (var i = 0, len = args.length; i < len; i++) {
			var arg = args[i];

			if (isArrayish(arg)) {
				// http://jsperf.com/javascript-array-concat-vs-push/98
				results = concat.call(results, slice.call(arg));
			} else {
				results.push(arg);
			}
		}

		return results;
	};

	swizzle$1.wrap = function (fn) {
		return function () {
			return fn(swizzle$1(arguments));
		};
	};

	/* MIT license */

	var colorNames = colorName;
	var swizzle = simpleSwizzle.exports;
	var hasOwnProperty$1 = Object.hasOwnProperty;

	var reverseNames = Object.create(null);

	// create a list of reverse color names
	for (var name in colorNames) {
		if (hasOwnProperty$1.call(colorNames, name)) {
			reverseNames[colorNames[name]] = name;
		}
	}

	var cs = colorString$1.exports = {
		to: {},
		get: {}
	};

	cs.get = function (string) {
		var prefix = string.substring(0, 3).toLowerCase();
		var val;
		var model;
		switch (prefix) {
			case 'hsl':
				val = cs.get.hsl(string);
				model = 'hsl';
				break;
			case 'hwb':
				val = cs.get.hwb(string);
				model = 'hwb';
				break;
			default:
				val = cs.get.rgb(string);
				model = 'rgb';
				break;
		}

		if (!val) {
			return null;
		}

		return {model: model, value: val};
	};

	cs.get.rgb = function (string) {
		if (!string) {
			return null;
		}

		var abbr = /^#([a-f0-9]{3,4})$/i;
		var hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;
		var rgba = /^rgba?\(\s*([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/;
		var per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/;
		var keyword = /^(\w+)$/;

		var rgb = [0, 0, 0, 1];
		var match;
		var i;
		var hexAlpha;

		if (match = string.match(hex)) {
			hexAlpha = match[2];
			match = match[1];

			for (i = 0; i < 3; i++) {
				// https://jsperf.com/slice-vs-substr-vs-substring-methods-long-string/19
				var i2 = i * 2;
				rgb[i] = parseInt(match.slice(i2, i2 + 2), 16);
			}

			if (hexAlpha) {
				rgb[3] = parseInt(hexAlpha, 16) / 255;
			}
		} else if (match = string.match(abbr)) {
			match = match[1];
			hexAlpha = match[3];

			for (i = 0; i < 3; i++) {
				rgb[i] = parseInt(match[i] + match[i], 16);
			}

			if (hexAlpha) {
				rgb[3] = parseInt(hexAlpha + hexAlpha, 16) / 255;
			}
		} else if (match = string.match(rgba)) {
			for (i = 0; i < 3; i++) {
				rgb[i] = parseInt(match[i + 1], 0);
			}

			if (match[4]) {
				if (match[5]) {
					rgb[3] = parseFloat(match[4]) * 0.01;
				} else {
					rgb[3] = parseFloat(match[4]);
				}
			}
		} else if (match = string.match(per)) {
			for (i = 0; i < 3; i++) {
				rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
			}

			if (match[4]) {
				if (match[5]) {
					rgb[3] = parseFloat(match[4]) * 0.01;
				} else {
					rgb[3] = parseFloat(match[4]);
				}
			}
		} else if (match = string.match(keyword)) {
			if (match[1] === 'transparent') {
				return [0, 0, 0, 0];
			}

			if (!hasOwnProperty$1.call(colorNames, match[1])) {
				return null;
			}

			rgb = colorNames[match[1]];
			rgb[3] = 1;

			return rgb;
		} else {
			return null;
		}

		for (i = 0; i < 3; i++) {
			rgb[i] = clamp(rgb[i], 0, 255);
		}
		rgb[3] = clamp(rgb[3], 0, 1);

		return rgb;
	};

	cs.get.hsl = function (string) {
		if (!string) {
			return null;
		}

		var hsl = /^hsla?\(\s*([+-]?(?:\d{0,3}\.)?\d+)(?:deg)?\s*,?\s*([+-]?[\d\.]+)%\s*,?\s*([+-]?[\d\.]+)%\s*(?:[,|\/]\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/;
		var match = string.match(hsl);

		if (match) {
			var alpha = parseFloat(match[4]);
			var h = ((parseFloat(match[1]) % 360) + 360) % 360;
			var s = clamp(parseFloat(match[2]), 0, 100);
			var l = clamp(parseFloat(match[3]), 0, 100);
			var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);

			return [h, s, l, a];
		}

		return null;
	};

	cs.get.hwb = function (string) {
		if (!string) {
			return null;
		}

		var hwb = /^hwb\(\s*([+-]?\d{0,3}(?:\.\d+)?)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/;
		var match = string.match(hwb);

		if (match) {
			var alpha = parseFloat(match[4]);
			var h = ((parseFloat(match[1]) % 360) + 360) % 360;
			var w = clamp(parseFloat(match[2]), 0, 100);
			var b = clamp(parseFloat(match[3]), 0, 100);
			var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
			return [h, w, b, a];
		}

		return null;
	};

	cs.to.hex = function () {
		var rgba = swizzle(arguments);

		return (
			'#' +
			hexDouble(rgba[0]) +
			hexDouble(rgba[1]) +
			hexDouble(rgba[2]) +
			(rgba[3] < 1
				? (hexDouble(Math.round(rgba[3] * 255)))
				: '')
		);
	};

	cs.to.rgb = function () {
		var rgba = swizzle(arguments);

		return rgba.length < 4 || rgba[3] === 1
			? 'rgb(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ')'
			: 'rgba(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ', ' + rgba[3] + ')';
	};

	cs.to.rgb.percent = function () {
		var rgba = swizzle(arguments);

		var r = Math.round(rgba[0] / 255 * 100);
		var g = Math.round(rgba[1] / 255 * 100);
		var b = Math.round(rgba[2] / 255 * 100);

		return rgba.length < 4 || rgba[3] === 1
			? 'rgb(' + r + '%, ' + g + '%, ' + b + '%)'
			: 'rgba(' + r + '%, ' + g + '%, ' + b + '%, ' + rgba[3] + ')';
	};

	cs.to.hsl = function () {
		var hsla = swizzle(arguments);
		return hsla.length < 4 || hsla[3] === 1
			? 'hsl(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%)'
			: 'hsla(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%, ' + hsla[3] + ')';
	};

	// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax
	// (hwb have alpha optional & 1 is default value)
	cs.to.hwb = function () {
		var hwba = swizzle(arguments);

		var a = '';
		if (hwba.length >= 4 && hwba[3] !== 1) {
			a = ', ' + hwba[3];
		}

		return 'hwb(' + hwba[0] + ', ' + hwba[1] + '%, ' + hwba[2] + '%' + a + ')';
	};

	cs.to.keyword = function (rgb) {
		return reverseNames[rgb.slice(0, 3)];
	};

	// helpers
	function clamp(num, min, max) {
		return Math.min(Math.max(min, num), max);
	}

	function hexDouble(num) {
		var str = Math.round(num).toString(16).toUpperCase();
		return (str.length < 2) ? '0' + str : str;
	}

	/* MIT license */

	/* eslint-disable no-mixed-operators */
	const cssKeywords = colorName;

	// NOTE: conversions should only return primitive values (i.e. arrays, or
	//       values that give correct `typeof` results).
	//       do not use box values types (i.e. Number(), String(), etc.)

	const reverseKeywords = {};
	for (const key of Object.keys(cssKeywords)) {
		reverseKeywords[cssKeywords[key]] = key;
	}

	const convert$2 = {
		rgb: {channels: 3, labels: 'rgb'},
		hsl: {channels: 3, labels: 'hsl'},
		hsv: {channels: 3, labels: 'hsv'},
		hwb: {channels: 3, labels: 'hwb'},
		cmyk: {channels: 4, labels: 'cmyk'},
		xyz: {channels: 3, labels: 'xyz'},
		lab: {channels: 3, labels: 'lab'},
		lch: {channels: 3, labels: 'lch'},
		hex: {channels: 1, labels: ['hex']},
		keyword: {channels: 1, labels: ['keyword']},
		ansi16: {channels: 1, labels: ['ansi16']},
		ansi256: {channels: 1, labels: ['ansi256']},
		hcg: {channels: 3, labels: ['h', 'c', 'g']},
		apple: {channels: 3, labels: ['r16', 'g16', 'b16']},
		gray: {channels: 1, labels: ['gray']}
	};

	var conversions$2 = convert$2;

	// Hide .channels and .labels properties
	for (const model of Object.keys(convert$2)) {
		if (!('channels' in convert$2[model])) {
			throw new Error('missing channels property: ' + model);
		}

		if (!('labels' in convert$2[model])) {
			throw new Error('missing channel labels property: ' + model);
		}

		if (convert$2[model].labels.length !== convert$2[model].channels) {
			throw new Error('channel and label counts mismatch: ' + model);
		}

		const {channels, labels} = convert$2[model];
		delete convert$2[model].channels;
		delete convert$2[model].labels;
		Object.defineProperty(convert$2[model], 'channels', {value: channels});
		Object.defineProperty(convert$2[model], 'labels', {value: labels});
	}

	convert$2.rgb.hsl = function (rgb) {
		const r = rgb[0] / 255;
		const g = rgb[1] / 255;
		const b = rgb[2] / 255;
		const min = Math.min(r, g, b);
		const max = Math.max(r, g, b);
		const delta = max - min;
		let h;
		let s;

		if (max === min) {
			h = 0;
		} else if (r === max) {
			h = (g - b) / delta;
		} else if (g === max) {
			h = 2 + (b - r) / delta;
		} else if (b === max) {
			h = 4 + (r - g) / delta;
		}

		h = Math.min(h * 60, 360);

		if (h < 0) {
			h += 360;
		}

		const l = (min + max) / 2;

		if (max === min) {
			s = 0;
		} else if (l <= 0.5) {
			s = delta / (max + min);
		} else {
			s = delta / (2 - max - min);
		}

		return [h, s * 100, l * 100];
	};

	convert$2.rgb.hsv = function (rgb) {
		let rdif;
		let gdif;
		let bdif;
		let h;
		let s;

		const r = rgb[0] / 255;
		const g = rgb[1] / 255;
		const b = rgb[2] / 255;
		const v = Math.max(r, g, b);
		const diff = v - Math.min(r, g, b);
		const diffc = function (c) {
			return (v - c) / 6 / diff + 1 / 2;
		};

		if (diff === 0) {
			h = 0;
			s = 0;
		} else {
			s = diff / v;
			rdif = diffc(r);
			gdif = diffc(g);
			bdif = diffc(b);

			if (r === v) {
				h = bdif - gdif;
			} else if (g === v) {
				h = (1 / 3) + rdif - bdif;
			} else if (b === v) {
				h = (2 / 3) + gdif - rdif;
			}

			if (h < 0) {
				h += 1;
			} else if (h > 1) {
				h -= 1;
			}
		}

		return [
			h * 360,
			s * 100,
			v * 100
		];
	};

	convert$2.rgb.hwb = function (rgb) {
		const r = rgb[0];
		const g = rgb[1];
		let b = rgb[2];
		const h = convert$2.rgb.hsl(rgb)[0];
		const w = 1 / 255 * Math.min(r, Math.min(g, b));

		b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));

		return [h, w * 100, b * 100];
	};

	convert$2.rgb.cmyk = function (rgb) {
		const r = rgb[0] / 255;
		const g = rgb[1] / 255;
		const b = rgb[2] / 255;

		const k = Math.min(1 - r, 1 - g, 1 - b);
		const c = (1 - r - k) / (1 - k) || 0;
		const m = (1 - g - k) / (1 - k) || 0;
		const y = (1 - b - k) / (1 - k) || 0;

		return [c * 100, m * 100, y * 100, k * 100];
	};

	function comparativeDistance(x, y) {
		/*
			See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
		*/
		return (
			((x[0] - y[0]) ** 2) +
			((x[1] - y[1]) ** 2) +
			((x[2] - y[2]) ** 2)
		);
	}

	convert$2.rgb.keyword = function (rgb) {
		const reversed = reverseKeywords[rgb];
		if (reversed) {
			return reversed;
		}

		let currentClosestDistance = Infinity;
		let currentClosestKeyword;

		for (const keyword of Object.keys(cssKeywords)) {
			const value = cssKeywords[keyword];

			// Compute comparative distance
			const distance = comparativeDistance(rgb, value);

			// Check if its less, if so set as closest
			if (distance < currentClosestDistance) {
				currentClosestDistance = distance;
				currentClosestKeyword = keyword;
			}
		}

		return currentClosestKeyword;
	};

	convert$2.keyword.rgb = function (keyword) {
		return cssKeywords[keyword];
	};

	convert$2.rgb.xyz = function (rgb) {
		let r = rgb[0] / 255;
		let g = rgb[1] / 255;
		let b = rgb[2] / 255;

		// Assume sRGB
		r = r > 0.04045 ? (((r + 0.055) / 1.055) ** 2.4) : (r / 12.92);
		g = g > 0.04045 ? (((g + 0.055) / 1.055) ** 2.4) : (g / 12.92);
		b = b > 0.04045 ? (((b + 0.055) / 1.055) ** 2.4) : (b / 12.92);

		const x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
		const y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
		const z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);

		return [x * 100, y * 100, z * 100];
	};

	convert$2.rgb.lab = function (rgb) {
		const xyz = convert$2.rgb.xyz(rgb);
		let x = xyz[0];
		let y = xyz[1];
		let z = xyz[2];

		x /= 95.047;
		y /= 100;
		z /= 108.883;

		x = x > 0.008856 ? (x ** (1 / 3)) : (7.787 * x) + (16 / 116);
		y = y > 0.008856 ? (y ** (1 / 3)) : (7.787 * y) + (16 / 116);
		z = z > 0.008856 ? (z ** (1 / 3)) : (7.787 * z) + (16 / 116);

		const l = (116 * y) - 16;
		const a = 500 * (x - y);
		const b = 200 * (y - z);

		return [l, a, b];
	};

	convert$2.hsl.rgb = function (hsl) {
		const h = hsl[0] / 360;
		const s = hsl[1] / 100;
		const l = hsl[2] / 100;
		let t2;
		let t3;
		let val;

		if (s === 0) {
			val = l * 255;
			return [val, val, val];
		}

		if (l < 0.5) {
			t2 = l * (1 + s);
		} else {
			t2 = l + s - l * s;
		}

		const t1 = 2 * l - t2;

		const rgb = [0, 0, 0];
		for (let i = 0; i < 3; i++) {
			t3 = h + 1 / 3 * -(i - 1);
			if (t3 < 0) {
				t3++;
			}

			if (t3 > 1) {
				t3--;
			}

			if (6 * t3 < 1) {
				val = t1 + (t2 - t1) * 6 * t3;
			} else if (2 * t3 < 1) {
				val = t2;
			} else if (3 * t3 < 2) {
				val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
			} else {
				val = t1;
			}

			rgb[i] = val * 255;
		}

		return rgb;
	};

	convert$2.hsl.hsv = function (hsl) {
		const h = hsl[0];
		let s = hsl[1] / 100;
		let l = hsl[2] / 100;
		let smin = s;
		const lmin = Math.max(l, 0.01);

		l *= 2;
		s *= (l <= 1) ? l : 2 - l;
		smin *= lmin <= 1 ? lmin : 2 - lmin;
		const v = (l + s) / 2;
		const sv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);

		return [h, sv * 100, v * 100];
	};

	convert$2.hsv.rgb = function (hsv) {
		const h = hsv[0] / 60;
		const s = hsv[1] / 100;
		let v = hsv[2] / 100;
		const hi = Math.floor(h) % 6;

		const f = h - Math.floor(h);
		const p = 255 * v * (1 - s);
		const q = 255 * v * (1 - (s * f));
		const t = 255 * v * (1 - (s * (1 - f)));
		v *= 255;

		switch (hi) {
			case 0:
				return [v, t, p];
			case 1:
				return [q, v, p];
			case 2:
				return [p, v, t];
			case 3:
				return [p, q, v];
			case 4:
				return [t, p, v];
			case 5:
				return [v, p, q];
		}
	};

	convert$2.hsv.hsl = function (hsv) {
		const h = hsv[0];
		const s = hsv[1] / 100;
		const v = hsv[2] / 100;
		const vmin = Math.max(v, 0.01);
		let sl;
		let l;

		l = (2 - s) * v;
		const lmin = (2 - s) * vmin;
		sl = s * vmin;
		sl /= (lmin <= 1) ? lmin : 2 - lmin;
		sl = sl || 0;
		l /= 2;

		return [h, sl * 100, l * 100];
	};

	// http://dev.w3.org/csswg/css-color/#hwb-to-rgb
	convert$2.hwb.rgb = function (hwb) {
		const h = hwb[0] / 360;
		let wh = hwb[1] / 100;
		let bl = hwb[2] / 100;
		const ratio = wh + bl;
		let f;

		// Wh + bl cant be > 1
		if (ratio > 1) {
			wh /= ratio;
			bl /= ratio;
		}

		const i = Math.floor(6 * h);
		const v = 1 - bl;
		f = 6 * h - i;

		if ((i & 0x01) !== 0) {
			f = 1 - f;
		}

		const n = wh + f * (v - wh); // Linear interpolation

		let r;
		let g;
		let b;
		/* eslint-disable max-statements-per-line,no-multi-spaces */
		switch (i) {
			default:
			case 6:
			case 0: r = v;  g = n;  b = wh; break;
			case 1: r = n;  g = v;  b = wh; break;
			case 2: r = wh; g = v;  b = n; break;
			case 3: r = wh; g = n;  b = v; break;
			case 4: r = n;  g = wh; b = v; break;
			case 5: r = v;  g = wh; b = n; break;
		}
		/* eslint-enable max-statements-per-line,no-multi-spaces */

		return [r * 255, g * 255, b * 255];
	};

	convert$2.cmyk.rgb = function (cmyk) {
		const c = cmyk[0] / 100;
		const m = cmyk[1] / 100;
		const y = cmyk[2] / 100;
		const k = cmyk[3] / 100;

		const r = 1 - Math.min(1, c * (1 - k) + k);
		const g = 1 - Math.min(1, m * (1 - k) + k);
		const b = 1 - Math.min(1, y * (1 - k) + k);

		return [r * 255, g * 255, b * 255];
	};

	convert$2.xyz.rgb = function (xyz) {
		const x = xyz[0] / 100;
		const y = xyz[1] / 100;
		const z = xyz[2] / 100;
		let r;
		let g;
		let b;

		r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
		g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
		b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);

		// Assume sRGB
		r = r > 0.0031308
			? ((1.055 * (r ** (1.0 / 2.4))) - 0.055)
			: r * 12.92;

		g = g > 0.0031308
			? ((1.055 * (g ** (1.0 / 2.4))) - 0.055)
			: g * 12.92;

		b = b > 0.0031308
			? ((1.055 * (b ** (1.0 / 2.4))) - 0.055)
			: b * 12.92;

		r = Math.min(Math.max(0, r), 1);
		g = Math.min(Math.max(0, g), 1);
		b = Math.min(Math.max(0, b), 1);

		return [r * 255, g * 255, b * 255];
	};

	convert$2.xyz.lab = function (xyz) {
		let x = xyz[0];
		let y = xyz[1];
		let z = xyz[2];

		x /= 95.047;
		y /= 100;
		z /= 108.883;

		x = x > 0.008856 ? (x ** (1 / 3)) : (7.787 * x) + (16 / 116);
		y = y > 0.008856 ? (y ** (1 / 3)) : (7.787 * y) + (16 / 116);
		z = z > 0.008856 ? (z ** (1 / 3)) : (7.787 * z) + (16 / 116);

		const l = (116 * y) - 16;
		const a = 500 * (x - y);
		const b = 200 * (y - z);

		return [l, a, b];
	};

	convert$2.lab.xyz = function (lab) {
		const l = lab[0];
		const a = lab[1];
		const b = lab[2];
		let x;
		let y;
		let z;

		y = (l + 16) / 116;
		x = a / 500 + y;
		z = y - b / 200;

		const y2 = y ** 3;
		const x2 = x ** 3;
		const z2 = z ** 3;
		y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
		x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
		z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;

		x *= 95.047;
		y *= 100;
		z *= 108.883;

		return [x, y, z];
	};

	convert$2.lab.lch = function (lab) {
		const l = lab[0];
		const a = lab[1];
		const b = lab[2];
		let h;

		const hr = Math.atan2(b, a);
		h = hr * 360 / 2 / Math.PI;

		if (h < 0) {
			h += 360;
		}

		const c = Math.sqrt(a * a + b * b);

		return [l, c, h];
	};

	convert$2.lch.lab = function (lch) {
		const l = lch[0];
		const c = lch[1];
		const h = lch[2];

		const hr = h / 360 * 2 * Math.PI;
		const a = c * Math.cos(hr);
		const b = c * Math.sin(hr);

		return [l, a, b];
	};

	convert$2.rgb.ansi16 = function (args, saturation = null) {
		const [r, g, b] = args;
		let value = saturation === null ? convert$2.rgb.hsv(args)[2] : saturation; // Hsv -> ansi16 optimization

		value = Math.round(value / 50);

		if (value === 0) {
			return 30;
		}

		let ansi = 30
			+ ((Math.round(b / 255) << 2)
			| (Math.round(g / 255) << 1)
			| Math.round(r / 255));

		if (value === 2) {
			ansi += 60;
		}

		return ansi;
	};

	convert$2.hsv.ansi16 = function (args) {
		// Optimization here; we already know the value and don't need to get
		// it converted for us.
		return convert$2.rgb.ansi16(convert$2.hsv.rgb(args), args[2]);
	};

	convert$2.rgb.ansi256 = function (args) {
		const r = args[0];
		const g = args[1];
		const b = args[2];

		// We use the extended greyscale palette here, with the exception of
		// black and white. normal palette only has 4 greyscale shades.
		if (r === g && g === b) {
			if (r < 8) {
				return 16;
			}

			if (r > 248) {
				return 231;
			}

			return Math.round(((r - 8) / 247) * 24) + 232;
		}

		const ansi = 16
			+ (36 * Math.round(r / 255 * 5))
			+ (6 * Math.round(g / 255 * 5))
			+ Math.round(b / 255 * 5);

		return ansi;
	};

	convert$2.ansi16.rgb = function (args) {
		let color = args % 10;

		// Handle greyscale
		if (color === 0 || color === 7) {
			if (args > 50) {
				color += 3.5;
			}

			color = color / 10.5 * 255;

			return [color, color, color];
		}

		const mult = (~~(args > 50) + 1) * 0.5;
		const r = ((color & 1) * mult) * 255;
		const g = (((color >> 1) & 1) * mult) * 255;
		const b = (((color >> 2) & 1) * mult) * 255;

		return [r, g, b];
	};

	convert$2.ansi256.rgb = function (args) {
		// Handle greyscale
		if (args >= 232) {
			const c = (args - 232) * 10 + 8;
			return [c, c, c];
		}

		args -= 16;

		let rem;
		const r = Math.floor(args / 36) / 5 * 255;
		const g = Math.floor((rem = args % 36) / 6) / 5 * 255;
		const b = (rem % 6) / 5 * 255;

		return [r, g, b];
	};

	convert$2.rgb.hex = function (args) {
		const integer = ((Math.round(args[0]) & 0xFF) << 16)
			+ ((Math.round(args[1]) & 0xFF) << 8)
			+ (Math.round(args[2]) & 0xFF);

		const string = integer.toString(16).toUpperCase();
		return '000000'.substring(string.length) + string;
	};

	convert$2.hex.rgb = function (args) {
		const match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
		if (!match) {
			return [0, 0, 0];
		}

		let colorString = match[0];

		if (match[0].length === 3) {
			colorString = colorString.split('').map(char => {
				return char + char;
			}).join('');
		}

		const integer = parseInt(colorString, 16);
		const r = (integer >> 16) & 0xFF;
		const g = (integer >> 8) & 0xFF;
		const b = integer & 0xFF;

		return [r, g, b];
	};

	convert$2.rgb.hcg = function (rgb) {
		const r = rgb[0] / 255;
		const g = rgb[1] / 255;
		const b = rgb[2] / 255;
		const max = Math.max(Math.max(r, g), b);
		const min = Math.min(Math.min(r, g), b);
		const chroma = (max - min);
		let grayscale;
		let hue;

		if (chroma < 1) {
			grayscale = min / (1 - chroma);
		} else {
			grayscale = 0;
		}

		if (chroma <= 0) {
			hue = 0;
		} else
		if (max === r) {
			hue = ((g - b) / chroma) % 6;
		} else
		if (max === g) {
			hue = 2 + (b - r) / chroma;
		} else {
			hue = 4 + (r - g) / chroma;
		}

		hue /= 6;
		hue %= 1;

		return [hue * 360, chroma * 100, grayscale * 100];
	};

	convert$2.hsl.hcg = function (hsl) {
		const s = hsl[1] / 100;
		const l = hsl[2] / 100;

		const c = l < 0.5 ? (2.0 * s * l) : (2.0 * s * (1.0 - l));

		let f = 0;
		if (c < 1.0) {
			f = (l - 0.5 * c) / (1.0 - c);
		}

		return [hsl[0], c * 100, f * 100];
	};

	convert$2.hsv.hcg = function (hsv) {
		const s = hsv[1] / 100;
		const v = hsv[2] / 100;

		const c = s * v;
		let f = 0;

		if (c < 1.0) {
			f = (v - c) / (1 - c);
		}

		return [hsv[0], c * 100, f * 100];
	};

	convert$2.hcg.rgb = function (hcg) {
		const h = hcg[0] / 360;
		const c = hcg[1] / 100;
		const g = hcg[2] / 100;

		if (c === 0.0) {
			return [g * 255, g * 255, g * 255];
		}

		const pure = [0, 0, 0];
		const hi = (h % 1) * 6;
		const v = hi % 1;
		const w = 1 - v;
		let mg = 0;

		/* eslint-disable max-statements-per-line */
		switch (Math.floor(hi)) {
			case 0:
				pure[0] = 1; pure[1] = v; pure[2] = 0; break;
			case 1:
				pure[0] = w; pure[1] = 1; pure[2] = 0; break;
			case 2:
				pure[0] = 0; pure[1] = 1; pure[2] = v; break;
			case 3:
				pure[0] = 0; pure[1] = w; pure[2] = 1; break;
			case 4:
				pure[0] = v; pure[1] = 0; pure[2] = 1; break;
			default:
				pure[0] = 1; pure[1] = 0; pure[2] = w;
		}
		/* eslint-enable max-statements-per-line */

		mg = (1.0 - c) * g;

		return [
			(c * pure[0] + mg) * 255,
			(c * pure[1] + mg) * 255,
			(c * pure[2] + mg) * 255
		];
	};

	convert$2.hcg.hsv = function (hcg) {
		const c = hcg[1] / 100;
		const g = hcg[2] / 100;

		const v = c + g * (1.0 - c);
		let f = 0;

		if (v > 0.0) {
			f = c / v;
		}

		return [hcg[0], f * 100, v * 100];
	};

	convert$2.hcg.hsl = function (hcg) {
		const c = hcg[1] / 100;
		const g = hcg[2] / 100;

		const l = g * (1.0 - c) + 0.5 * c;
		let s = 0;

		if (l > 0.0 && l < 0.5) {
			s = c / (2 * l);
		} else
		if (l >= 0.5 && l < 1.0) {
			s = c / (2 * (1 - l));
		}

		return [hcg[0], s * 100, l * 100];
	};

	convert$2.hcg.hwb = function (hcg) {
		const c = hcg[1] / 100;
		const g = hcg[2] / 100;
		const v = c + g * (1.0 - c);
		return [hcg[0], (v - c) * 100, (1 - v) * 100];
	};

	convert$2.hwb.hcg = function (hwb) {
		const w = hwb[1] / 100;
		const b = hwb[2] / 100;
		const v = 1 - b;
		const c = v - w;
		let g = 0;

		if (c < 1) {
			g = (v - c) / (1 - c);
		}

		return [hwb[0], c * 100, g * 100];
	};

	convert$2.apple.rgb = function (apple) {
		return [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];
	};

	convert$2.rgb.apple = function (rgb) {
		return [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];
	};

	convert$2.gray.rgb = function (args) {
		return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
	};

	convert$2.gray.hsl = function (args) {
		return [0, 0, args[0]];
	};

	convert$2.gray.hsv = convert$2.gray.hsl;

	convert$2.gray.hwb = function (gray) {
		return [0, 100, gray[0]];
	};

	convert$2.gray.cmyk = function (gray) {
		return [0, 0, 0, gray[0]];
	};

	convert$2.gray.lab = function (gray) {
		return [gray[0], 0, 0];
	};

	convert$2.gray.hex = function (gray) {
		const val = Math.round(gray[0] / 100 * 255) & 0xFF;
		const integer = (val << 16) + (val << 8) + val;

		const string = integer.toString(16).toUpperCase();
		return '000000'.substring(string.length) + string;
	};

	convert$2.rgb.gray = function (rgb) {
		const val = (rgb[0] + rgb[1] + rgb[2]) / 3;
		return [val / 255 * 100];
	};

	const conversions$1 = conversions$2;

	/*
		This function routes a model to all other models.

		all functions that are routed have a property `.conversion` attached
		to the returned synthetic function. This property is an array
		of strings, each with the steps in between the 'from' and 'to'
		color models (inclusive).

		conversions that are not possible simply are not included.
	*/

	function buildGraph() {
		const graph = {};
		// https://jsperf.com/object-keys-vs-for-in-with-closure/3
		const models = Object.keys(conversions$1);

		for (let len = models.length, i = 0; i < len; i++) {
			graph[models[i]] = {
				// http://jsperf.com/1-vs-infinity
				// micro-opt, but this is simple.
				distance: -1,
				parent: null
			};
		}

		return graph;
	}

	// https://en.wikipedia.org/wiki/Breadth-first_search
	function deriveBFS(fromModel) {
		const graph = buildGraph();
		const queue = [fromModel]; // Unshift -> queue -> pop

		graph[fromModel].distance = 0;

		while (queue.length) {
			const current = queue.pop();
			const adjacents = Object.keys(conversions$1[current]);

			for (let len = adjacents.length, i = 0; i < len; i++) {
				const adjacent = adjacents[i];
				const node = graph[adjacent];

				if (node.distance === -1) {
					node.distance = graph[current].distance + 1;
					node.parent = current;
					queue.unshift(adjacent);
				}
			}
		}

		return graph;
	}

	function link(from, to) {
		return function (args) {
			return to(from(args));
		};
	}

	function wrapConversion(toModel, graph) {
		const path = [graph[toModel].parent, toModel];
		let fn = conversions$1[graph[toModel].parent][toModel];

		let cur = graph[toModel].parent;
		while (graph[cur].parent) {
			path.unshift(graph[cur].parent);
			fn = link(conversions$1[graph[cur].parent][cur], fn);
			cur = graph[cur].parent;
		}

		fn.conversion = path;
		return fn;
	}

	var route$1 = function (fromModel) {
		const graph = deriveBFS(fromModel);
		const conversion = {};

		const models = Object.keys(graph);
		for (let len = models.length, i = 0; i < len; i++) {
			const toModel = models[i];
			const node = graph[toModel];

			if (node.parent === null) {
				// No possible conversion, or this node is the source model.
				continue;
			}

			conversion[toModel] = wrapConversion(toModel, graph);
		}

		return conversion;
	};

	const conversions = conversions$2;
	const route = route$1;

	const convert$1 = {};

	const models = Object.keys(conversions);

	function wrapRaw(fn) {
		const wrappedFn = function (...args) {
			const arg0 = args[0];
			if (arg0 === undefined || arg0 === null) {
				return arg0;
			}

			if (arg0.length > 1) {
				args = arg0;
			}

			return fn(args);
		};

		// Preserve .conversion property if there is one
		if ('conversion' in fn) {
			wrappedFn.conversion = fn.conversion;
		}

		return wrappedFn;
	}

	function wrapRounded(fn) {
		const wrappedFn = function (...args) {
			const arg0 = args[0];

			if (arg0 === undefined || arg0 === null) {
				return arg0;
			}

			if (arg0.length > 1) {
				args = arg0;
			}

			const result = fn(args);

			// We're assuming the result is an array here.
			// see notice in conversions.js; don't use box types
			// in conversion functions.
			if (typeof result === 'object') {
				for (let len = result.length, i = 0; i < len; i++) {
					result[i] = Math.round(result[i]);
				}
			}

			return result;
		};

		// Preserve .conversion property if there is one
		if ('conversion' in fn) {
			wrappedFn.conversion = fn.conversion;
		}

		return wrappedFn;
	}

	models.forEach(fromModel => {
		convert$1[fromModel] = {};

		Object.defineProperty(convert$1[fromModel], 'channels', {value: conversions[fromModel].channels});
		Object.defineProperty(convert$1[fromModel], 'labels', {value: conversions[fromModel].labels});

		const routes = route(fromModel);
		const routeModels = Object.keys(routes);

		routeModels.forEach(toModel => {
			const fn = routes[toModel];

			convert$1[fromModel][toModel] = wrapRounded(fn);
			convert$1[fromModel][toModel].raw = wrapRaw(fn);
		});
	});

	var colorConvert = convert$1;

	const colorString = colorString$1.exports;
	const convert = colorConvert;

	const skippedModels = [
		// To be honest, I don't really feel like keyword belongs in color convert, but eh.
		'keyword',

		// Gray conflicts with some method names, and has its own method defined.
		'gray',

		// Shouldn't really be in color-convert either...
		'hex',
	];

	const hashedModelKeys = {};
	for (const model of Object.keys(convert)) {
		hashedModelKeys[[...convert[model].labels].sort().join('')] = model;
	}

	const limiters = {};

	function Color(object, model) {
		if (!(this instanceof Color)) {
			return new Color(object, model);
		}

		if (model && model in skippedModels) {
			model = null;
		}

		if (model && !(model in convert)) {
			throw new Error('Unknown model: ' + model);
		}

		let i;
		let channels;

		if (object == null) { // eslint-disable-line no-eq-null,eqeqeq
			this.model = 'rgb';
			this.color = [0, 0, 0];
			this.valpha = 1;
		} else if (object instanceof Color) {
			this.model = object.model;
			this.color = [...object.color];
			this.valpha = object.valpha;
		} else if (typeof object === 'string') {
			const result = colorString.get(object);
			if (result === null) {
				throw new Error('Unable to parse color from string: ' + object);
			}

			this.model = result.model;
			channels = convert[this.model].channels;
			this.color = result.value.slice(0, channels);
			this.valpha = typeof result.value[channels] === 'number' ? result.value[channels] : 1;
		} else if (object.length > 0) {
			this.model = model || 'rgb';
			channels = convert[this.model].channels;
			const newArray = Array.prototype.slice.call(object, 0, channels);
			this.color = zeroArray(newArray, channels);
			this.valpha = typeof object[channels] === 'number' ? object[channels] : 1;
		} else if (typeof object === 'number') {
			// This is always RGB - can be converted later on.
			this.model = 'rgb';
			this.color = [
				(object >> 16) & 0xFF,
				(object >> 8) & 0xFF,
				object & 0xFF,
			];
			this.valpha = 1;
		} else {
			this.valpha = 1;

			const keys = Object.keys(object);
			if ('alpha' in object) {
				keys.splice(keys.indexOf('alpha'), 1);
				this.valpha = typeof object.alpha === 'number' ? object.alpha : 0;
			}

			const hashedKeys = keys.sort().join('');
			if (!(hashedKeys in hashedModelKeys)) {
				throw new Error('Unable to parse color from object: ' + JSON.stringify(object));
			}

			this.model = hashedModelKeys[hashedKeys];

			const {labels} = convert[this.model];
			const color = [];
			for (i = 0; i < labels.length; i++) {
				color.push(object[labels[i]]);
			}

			this.color = zeroArray(color);
		}

		// Perform limitations (clamping, etc.)
		if (limiters[this.model]) {
			channels = convert[this.model].channels;
			for (i = 0; i < channels; i++) {
				const limit = limiters[this.model][i];
				if (limit) {
					this.color[i] = limit(this.color[i]);
				}
			}
		}

		this.valpha = Math.max(0, Math.min(1, this.valpha));

		if (Object.freeze) {
			Object.freeze(this);
		}
	}

	Color.prototype = {
		toString() {
			return this.string();
		},

		toJSON() {
			return this[this.model]();
		},

		string(places) {
			let self = this.model in colorString.to ? this : this.rgb();
			self = self.round(typeof places === 'number' ? places : 1);
			const args = self.valpha === 1 ? self.color : [...self.color, this.valpha];
			return colorString.to[self.model](args);
		},

		percentString(places) {
			const self = this.rgb().round(typeof places === 'number' ? places : 1);
			const args = self.valpha === 1 ? self.color : [...self.color, this.valpha];
			return colorString.to.rgb.percent(args);
		},

		array() {
			return this.valpha === 1 ? [...this.color] : [...this.color, this.valpha];
		},

		object() {
			const result = {};
			const {channels} = convert[this.model];
			const {labels} = convert[this.model];

			for (let i = 0; i < channels; i++) {
				result[labels[i]] = this.color[i];
			}

			if (this.valpha !== 1) {
				result.alpha = this.valpha;
			}

			return result;
		},

		unitArray() {
			const rgb = this.rgb().color;
			rgb[0] /= 255;
			rgb[1] /= 255;
			rgb[2] /= 255;

			if (this.valpha !== 1) {
				rgb.push(this.valpha);
			}

			return rgb;
		},

		unitObject() {
			const rgb = this.rgb().object();
			rgb.r /= 255;
			rgb.g /= 255;
			rgb.b /= 255;

			if (this.valpha !== 1) {
				rgb.alpha = this.valpha;
			}

			return rgb;
		},

		round(places) {
			places = Math.max(places || 0, 0);
			return new Color([...this.color.map(roundToPlace(places)), this.valpha], this.model);
		},

		alpha(value) {
			if (value !== undefined) {
				return new Color([...this.color, Math.max(0, Math.min(1, value))], this.model);
			}

			return this.valpha;
		},

		// Rgb
		red: getset('rgb', 0, maxfn(255)),
		green: getset('rgb', 1, maxfn(255)),
		blue: getset('rgb', 2, maxfn(255)),

		hue: getset(['hsl', 'hsv', 'hsl', 'hwb', 'hcg'], 0, value => ((value % 360) + 360) % 360),

		saturationl: getset('hsl', 1, maxfn(100)),
		lightness: getset('hsl', 2, maxfn(100)),

		saturationv: getset('hsv', 1, maxfn(100)),
		value: getset('hsv', 2, maxfn(100)),

		chroma: getset('hcg', 1, maxfn(100)),
		gray: getset('hcg', 2, maxfn(100)),

		white: getset('hwb', 1, maxfn(100)),
		wblack: getset('hwb', 2, maxfn(100)),

		cyan: getset('cmyk', 0, maxfn(100)),
		magenta: getset('cmyk', 1, maxfn(100)),
		yellow: getset('cmyk', 2, maxfn(100)),
		black: getset('cmyk', 3, maxfn(100)),

		x: getset('xyz', 0, maxfn(95.047)),
		y: getset('xyz', 1, maxfn(100)),
		z: getset('xyz', 2, maxfn(108.833)),

		l: getset('lab', 0, maxfn(100)),
		a: getset('lab', 1),
		b: getset('lab', 2),

		keyword(value) {
			if (value !== undefined) {
				return new Color(value);
			}

			return convert[this.model].keyword(this.color);
		},

		hex(value) {
			if (value !== undefined) {
				return new Color(value);
			}

			return colorString.to.hex(this.rgb().round().color);
		},

		hexa(value) {
			if (value !== undefined) {
				return new Color(value);
			}

			const rgbArray = this.rgb().round().color;

			let alphaHex = Math.round(this.valpha * 255).toString(16).toUpperCase();
			if (alphaHex.length === 1) {
				alphaHex = '0' + alphaHex;
			}

			return colorString.to.hex(rgbArray) + alphaHex;
		},

		rgbNumber() {
			const rgb = this.rgb().color;
			return ((rgb[0] & 0xFF) << 16) | ((rgb[1] & 0xFF) << 8) | (rgb[2] & 0xFF);
		},

		luminosity() {
			// http://www.w3.org/TR/WCAG20/#relativeluminancedef
			const rgb = this.rgb().color;

			const lum = [];
			for (const [i, element] of rgb.entries()) {
				const chan = element / 255;
				lum[i] = (chan <= 0.04045) ? chan / 12.92 : ((chan + 0.055) / 1.055) ** 2.4;
			}

			return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
		},

		contrast(color2) {
			// http://www.w3.org/TR/WCAG20/#contrast-ratiodef
			const lum1 = this.luminosity();
			const lum2 = color2.luminosity();

			if (lum1 > lum2) {
				return (lum1 + 0.05) / (lum2 + 0.05);
			}

			return (lum2 + 0.05) / (lum1 + 0.05);
		},

		level(color2) {
			// https://www.w3.org/TR/WCAG/#contrast-enhanced
			const contrastRatio = this.contrast(color2);
			if (contrastRatio >= 7) {
				return 'AAA';
			}

			return (contrastRatio >= 4.5) ? 'AA' : '';
		},

		isDark() {
			// YIQ equation from http://24ways.org/2010/calculating-color-contrast
			const rgb = this.rgb().color;
			const yiq = (rgb[0] * 2126 + rgb[1] * 7152 + rgb[2] * 722) / 10000;
			return yiq < 128;
		},

		isLight() {
			return !this.isDark();
		},

		negate() {
			const rgb = this.rgb();
			for (let i = 0; i < 3; i++) {
				rgb.color[i] = 255 - rgb.color[i];
			}

			return rgb;
		},

		lighten(ratio) {
			const hsl = this.hsl();
			hsl.color[2] += hsl.color[2] * ratio;
			return hsl;
		},

		darken(ratio) {
			const hsl = this.hsl();
			hsl.color[2] -= hsl.color[2] * ratio;
			return hsl;
		},

		saturate(ratio) {
			const hsl = this.hsl();
			hsl.color[1] += hsl.color[1] * ratio;
			return hsl;
		},

		desaturate(ratio) {
			const hsl = this.hsl();
			hsl.color[1] -= hsl.color[1] * ratio;
			return hsl;
		},

		whiten(ratio) {
			const hwb = this.hwb();
			hwb.color[1] += hwb.color[1] * ratio;
			return hwb;
		},

		blacken(ratio) {
			const hwb = this.hwb();
			hwb.color[2] += hwb.color[2] * ratio;
			return hwb;
		},

		grayscale() {
			// http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale
			const rgb = this.rgb().color;
			const value = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
			return Color.rgb(value, value, value);
		},

		fade(ratio) {
			return this.alpha(this.valpha - (this.valpha * ratio));
		},

		opaquer(ratio) {
			return this.alpha(this.valpha + (this.valpha * ratio));
		},

		rotate(degrees) {
			const hsl = this.hsl();
			let hue = hsl.color[0];
			hue = (hue + degrees) % 360;
			hue = hue < 0 ? 360 + hue : hue;
			hsl.color[0] = hue;
			return hsl;
		},

		mix(mixinColor, weight) {
			// Ported from sass implementation in C
			// https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209
			if (!mixinColor || !mixinColor.rgb) {
				throw new Error('Argument to "mix" was not a Color instance, but rather an instance of ' + typeof mixinColor);
			}

			const color1 = mixinColor.rgb();
			const color2 = this.rgb();
			const p = weight === undefined ? 0.5 : weight;

			const w = 2 * p - 1;
			const a = color1.alpha() - color2.alpha();

			const w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2;
			const w2 = 1 - w1;

			return Color.rgb(
				w1 * color1.red() + w2 * color2.red(),
				w1 * color1.green() + w2 * color2.green(),
				w1 * color1.blue() + w2 * color2.blue(),
				color1.alpha() * p + color2.alpha() * (1 - p));
		},
	};

	// Model conversion methods and static constructors
	for (const model of Object.keys(convert)) {
		if (skippedModels.includes(model)) {
			continue;
		}

		const {channels} = convert[model];

		// Conversion methods
		Color.prototype[model] = function (...args) {
			if (this.model === model) {
				return new Color(this);
			}

			if (args.length > 0) {
				return new Color(args, model);
			}

			return new Color([...assertArray(convert[this.model][model].raw(this.color)), this.valpha], model);
		};

		// 'static' construction methods
		Color[model] = function (...args) {
			let color = args[0];
			if (typeof color === 'number') {
				color = zeroArray(args, channels);
			}

			return new Color(color, model);
		};
	}

	function roundTo(number, places) {
		return Number(number.toFixed(places));
	}

	function roundToPlace(places) {
		return function (number) {
			return roundTo(number, places);
		};
	}

	function getset(model, channel, modifier) {
		model = Array.isArray(model) ? model : [model];

		for (const m of model) {
			(limiters[m] || (limiters[m] = []))[channel] = modifier;
		}

		model = model[0];

		return function (value) {
			let result;

			if (value !== undefined) {
				if (modifier) {
					value = modifier(value);
				}

				result = this[model]();
				result.color[channel] = value;
				return result;
			}

			result = this[model]().color[channel];
			if (modifier) {
				result = modifier(result);
			}

			return result;
		};
	}

	function maxfn(max) {
		return function (v) {
			return Math.max(0, Math.min(max, v));
		};
	}

	function assertArray(value) {
		return Array.isArray(value) ? value : [value];
	}

	function zeroArray(array, length) {
		for (let i = 0; i < length; i++) {
			if (typeof array[i] !== 'number') {
				array[i] = 0;
			}
		}

		return array;
	}

	var color = Color;

	/**
	 * lodash (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */

	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/** Used as the internal argument placeholder. */
	var PLACEHOLDER = '__lodash_placeholder__';

	/** Used to compose bitmasks for function metadata. */
	var BIND_FLAG = 1,
	    BIND_KEY_FLAG = 2,
	    CURRY_BOUND_FLAG = 4,
	    CURRY_FLAG = 8,
	    CURRY_RIGHT_FLAG = 16,
	    PARTIAL_FLAG = 32,
	    PARTIAL_RIGHT_FLAG = 64,
	    ARY_FLAG = 128,
	    REARG_FLAG = 256,
	    FLIP_FLAG = 512;

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0,
	    MAX_SAFE_INTEGER = 9007199254740991,
	    MAX_INTEGER = 1.7976931348623157e+308,
	    NAN = 0 / 0;

	/** Used to associate wrap methods with their bit flags. */
	var wrapFlags = [
	  ['ary', ARY_FLAG],
	  ['bind', BIND_FLAG],
	  ['bindKey', BIND_KEY_FLAG],
	  ['curry', CURRY_FLAG],
	  ['curryRight', CURRY_RIGHT_FLAG],
	  ['flip', FLIP_FLAG],
	  ['partial', PARTIAL_FLAG],
	  ['partialRight', PARTIAL_RIGHT_FLAG],
	  ['rearg', REARG_FLAG]
	];

	/** `Object#toString` result references. */
	var funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    symbolTag = '[object Symbol]';

	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

	/** Used to match leading and trailing whitespace. */
	var reTrim = /^\s+|\s+$/g;

	/** Used to match wrap detail comments. */
	var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
	    reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
	    reSplitDetails = /,? & /;

	/** Used to detect bad signed hexadecimal string values. */
	var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

	/** Used to detect binary string values. */
	var reIsBinary = /^0b[01]+$/i;

	/** Used to detect host constructors (Safari). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used to detect octal string values. */
	var reIsOctal = /^0o[0-7]+$/i;

	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;

	/** Built-in method references without a dependency on `root`. */
	var freeParseInt = parseInt;

	/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();

	/**
	 * A faster alternative to `Function#apply`, this function invokes `func`
	 * with the `this` binding of `thisArg` and the arguments of `args`.
	 *
	 * @private
	 * @param {Function} func The function to invoke.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {Array} args The arguments to invoke `func` with.
	 * @returns {*} Returns the result of `func`.
	 */
	function apply(func, thisArg, args) {
	  switch (args.length) {
	    case 0: return func.call(thisArg);
	    case 1: return func.call(thisArg, args[0]);
	    case 2: return func.call(thisArg, args[0], args[1]);
	    case 3: return func.call(thisArg, args[0], args[1], args[2]);
	  }
	  return func.apply(thisArg, args);
	}

	/**
	 * A specialized version of `_.forEach` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns `array`.
	 */
	function arrayEach(array, iteratee) {
	  var index = -1,
	      length = array ? array.length : 0;

	  while (++index < length) {
	    if (iteratee(array[index], index, array) === false) {
	      break;
	    }
	  }
	  return array;
	}

	/**
	 * A specialized version of `_.includes` for arrays without support for
	 * specifying an index to search from.
	 *
	 * @private
	 * @param {Array} [array] The array to inspect.
	 * @param {*} target The value to search for.
	 * @returns {boolean} Returns `true` if `target` is found, else `false`.
	 */
	function arrayIncludes(array, value) {
	  var length = array ? array.length : 0;
	  return !!length && baseIndexOf(array, value, 0) > -1;
	}

	/**
	 * The base implementation of `_.findIndex` and `_.findLastIndex` without
	 * support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Function} predicate The function invoked per iteration.
	 * @param {number} fromIndex The index to search from.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseFindIndex(array, predicate, fromIndex, fromRight) {
	  var length = array.length,
	      index = fromIndex + (fromRight ? 1 : -1);

	  while ((fromRight ? index-- : ++index < length)) {
	    if (predicate(array[index], index, array)) {
	      return index;
	    }
	  }
	  return -1;
	}

	/**
	 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} value The value to search for.
	 * @param {number} fromIndex The index to search from.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseIndexOf(array, value, fromIndex) {
	  if (value !== value) {
	    return baseFindIndex(array, baseIsNaN, fromIndex);
	  }
	  var index = fromIndex - 1,
	      length = array.length;

	  while (++index < length) {
	    if (array[index] === value) {
	      return index;
	    }
	  }
	  return -1;
	}

	/**
	 * The base implementation of `_.isNaN` without support for number objects.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	 */
	function baseIsNaN(value) {
	  return value !== value;
	}

	/**
	 * Gets the number of `placeholder` occurrences in `array`.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} placeholder The placeholder to search for.
	 * @returns {number} Returns the placeholder count.
	 */
	function countHolders(array, placeholder) {
	  var length = array.length,
	      result = 0;

	  while (length--) {
	    if (array[length] === placeholder) {
	      result++;
	    }
	  }
	  return result;
	}

	/**
	 * Gets the value at `key` of `object`.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */
	function getValue(object, key) {
	  return object == null ? undefined : object[key];
	}

	/**
	 * Checks if `value` is a host object in IE < 9.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
	 */
	function isHostObject(value) {
	  // Many host objects are `Object` objects that can coerce to strings
	  // despite having improperly defined `toString` methods.
	  var result = false;
	  if (value != null && typeof value.toString != 'function') {
	    try {
	      result = !!(value + '');
	    } catch (e) {}
	  }
	  return result;
	}

	/**
	 * Replaces all `placeholder` elements in `array` with an internal placeholder
	 * and returns an array of their indexes.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {*} placeholder The placeholder to replace.
	 * @returns {Array} Returns the new array of placeholder indexes.
	 */
	function replaceHolders(array, placeholder) {
	  var index = -1,
	      length = array.length,
	      resIndex = 0,
	      result = [];

	  while (++index < length) {
	    var value = array[index];
	    if (value === placeholder || value === PLACEHOLDER) {
	      array[index] = PLACEHOLDER;
	      result[resIndex++] = index;
	    }
	  }
	  return result;
	}

	/** Used for built-in method references. */
	var funcProto = Function.prototype,
	    objectProto = Object.prototype;

	/** Used to detect overreaching core-js shims. */
	var coreJsData = root['__core-js_shared__'];

	/** Used to detect methods masquerading as native. */
	var maskSrcKey = (function() {
	  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	  return uid ? ('Symbol(src)_1.' + uid) : '';
	}());

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/** Built-in value references. */
	var objectCreate = Object.create;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max,
	    nativeMin = Math.min;

	/* Used to set `toString` methods. */
	var defineProperty = (function() {
	  var func = getNative(Object, 'defineProperty'),
	      name = getNative.name;

	  return (name && name.length > 2) ? func : undefined;
	}());

	/**
	 * The base implementation of `_.create` without support for assigning
	 * properties to the created object.
	 *
	 * @private
	 * @param {Object} prototype The object to inherit from.
	 * @returns {Object} Returns the new object.
	 */
	function baseCreate(proto) {
	  return isObject(proto) ? objectCreate(proto) : {};
	}

	/**
	 * The base implementation of `_.isNative` without bad shim checks.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 */
	function baseIsNative(value) {
	  if (!isObject(value) || isMasked(value)) {
	    return false;
	  }
	  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
	  return pattern.test(toSource(value));
	}

	/**
	 * Creates an array that is the composition of partially applied arguments,
	 * placeholders, and provided arguments into a single array of arguments.
	 *
	 * @private
	 * @param {Array} args The provided arguments.
	 * @param {Array} partials The arguments to prepend to those provided.
	 * @param {Array} holders The `partials` placeholder indexes.
	 * @params {boolean} [isCurried] Specify composing for a curried function.
	 * @returns {Array} Returns the new array of composed arguments.
	 */
	function composeArgs(args, partials, holders, isCurried) {
	  var argsIndex = -1,
	      argsLength = args.length,
	      holdersLength = holders.length,
	      leftIndex = -1,
	      leftLength = partials.length,
	      rangeLength = nativeMax(argsLength - holdersLength, 0),
	      result = Array(leftLength + rangeLength),
	      isUncurried = !isCurried;

	  while (++leftIndex < leftLength) {
	    result[leftIndex] = partials[leftIndex];
	  }
	  while (++argsIndex < holdersLength) {
	    if (isUncurried || argsIndex < argsLength) {
	      result[holders[argsIndex]] = args[argsIndex];
	    }
	  }
	  while (rangeLength--) {
	    result[leftIndex++] = args[argsIndex++];
	  }
	  return result;
	}

	/**
	 * This function is like `composeArgs` except that the arguments composition
	 * is tailored for `_.partialRight`.
	 *
	 * @private
	 * @param {Array} args The provided arguments.
	 * @param {Array} partials The arguments to append to those provided.
	 * @param {Array} holders The `partials` placeholder indexes.
	 * @params {boolean} [isCurried] Specify composing for a curried function.
	 * @returns {Array} Returns the new array of composed arguments.
	 */
	function composeArgsRight(args, partials, holders, isCurried) {
	  var argsIndex = -1,
	      argsLength = args.length,
	      holdersIndex = -1,
	      holdersLength = holders.length,
	      rightIndex = -1,
	      rightLength = partials.length,
	      rangeLength = nativeMax(argsLength - holdersLength, 0),
	      result = Array(rangeLength + rightLength),
	      isUncurried = !isCurried;

	  while (++argsIndex < rangeLength) {
	    result[argsIndex] = args[argsIndex];
	  }
	  var offset = argsIndex;
	  while (++rightIndex < rightLength) {
	    result[offset + rightIndex] = partials[rightIndex];
	  }
	  while (++holdersIndex < holdersLength) {
	    if (isUncurried || argsIndex < argsLength) {
	      result[offset + holders[holdersIndex]] = args[argsIndex++];
	    }
	  }
	  return result;
	}

	/**
	 * Copies the values of `source` to `array`.
	 *
	 * @private
	 * @param {Array} source The array to copy values from.
	 * @param {Array} [array=[]] The array to copy values to.
	 * @returns {Array} Returns `array`.
	 */
	function copyArray(source, array) {
	  var index = -1,
	      length = source.length;

	  array || (array = Array(length));
	  while (++index < length) {
	    array[index] = source[index];
	  }
	  return array;
	}

	/**
	 * Creates a function that wraps `func` to invoke it with the optional `this`
	 * binding of `thisArg`.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	 * @param {*} [thisArg] The `this` binding of `func`.
	 * @returns {Function} Returns the new wrapped function.
	 */
	function createBind(func, bitmask, thisArg) {
	  var isBind = bitmask & BIND_FLAG,
	      Ctor = createCtor(func);

	  function wrapper() {
	    var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	    return fn.apply(isBind ? thisArg : this, arguments);
	  }
	  return wrapper;
	}

	/**
	 * Creates a function that produces an instance of `Ctor` regardless of
	 * whether it was invoked as part of a `new` expression or by `call` or `apply`.
	 *
	 * @private
	 * @param {Function} Ctor The constructor to wrap.
	 * @returns {Function} Returns the new wrapped function.
	 */
	function createCtor(Ctor) {
	  return function() {
	    // Use a `switch` statement to work with class constructors. See
	    // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
	    // for more details.
	    var args = arguments;
	    switch (args.length) {
	      case 0: return new Ctor;
	      case 1: return new Ctor(args[0]);
	      case 2: return new Ctor(args[0], args[1]);
	      case 3: return new Ctor(args[0], args[1], args[2]);
	      case 4: return new Ctor(args[0], args[1], args[2], args[3]);
	      case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
	      case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
	      case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
	    }
	    var thisBinding = baseCreate(Ctor.prototype),
	        result = Ctor.apply(thisBinding, args);

	    // Mimic the constructor's `return` behavior.
	    // See https://es5.github.io/#x13.2.2 for more details.
	    return isObject(result) ? result : thisBinding;
	  };
	}

	/**
	 * Creates a function that wraps `func` to enable currying.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	 * @param {number} arity The arity of `func`.
	 * @returns {Function} Returns the new wrapped function.
	 */
	function createCurry(func, bitmask, arity) {
	  var Ctor = createCtor(func);

	  function wrapper() {
	    var length = arguments.length,
	        args = Array(length),
	        index = length,
	        placeholder = getHolder(wrapper);

	    while (index--) {
	      args[index] = arguments[index];
	    }
	    var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
	      ? []
	      : replaceHolders(args, placeholder);

	    length -= holders.length;
	    if (length < arity) {
	      return createRecurry(
	        func, bitmask, createHybrid, wrapper.placeholder, undefined,
	        args, holders, undefined, undefined, arity - length);
	    }
	    var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	    return apply(fn, this, args);
	  }
	  return wrapper;
	}

	/**
	 * Creates a function that wraps `func` to invoke it with optional `this`
	 * binding of `thisArg`, partial application, and currying.
	 *
	 * @private
	 * @param {Function|string} func The function or method name to wrap.
	 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	 * @param {*} [thisArg] The `this` binding of `func`.
	 * @param {Array} [partials] The arguments to prepend to those provided to
	 *  the new function.
	 * @param {Array} [holders] The `partials` placeholder indexes.
	 * @param {Array} [partialsRight] The arguments to append to those provided
	 *  to the new function.
	 * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
	 * @param {Array} [argPos] The argument positions of the new function.
	 * @param {number} [ary] The arity cap of `func`.
	 * @param {number} [arity] The arity of `func`.
	 * @returns {Function} Returns the new wrapped function.
	 */
	function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
	  var isAry = bitmask & ARY_FLAG,
	      isBind = bitmask & BIND_FLAG,
	      isBindKey = bitmask & BIND_KEY_FLAG,
	      isCurried = bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG),
	      isFlip = bitmask & FLIP_FLAG,
	      Ctor = isBindKey ? undefined : createCtor(func);

	  function wrapper() {
	    var length = arguments.length,
	        args = Array(length),
	        index = length;

	    while (index--) {
	      args[index] = arguments[index];
	    }
	    if (isCurried) {
	      var placeholder = getHolder(wrapper),
	          holdersCount = countHolders(args, placeholder);
	    }
	    if (partials) {
	      args = composeArgs(args, partials, holders, isCurried);
	    }
	    if (partialsRight) {
	      args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
	    }
	    length -= holdersCount;
	    if (isCurried && length < arity) {
	      var newHolders = replaceHolders(args, placeholder);
	      return createRecurry(
	        func, bitmask, createHybrid, wrapper.placeholder, thisArg,
	        args, newHolders, argPos, ary, arity - length
	      );
	    }
	    var thisBinding = isBind ? thisArg : this,
	        fn = isBindKey ? thisBinding[func] : func;

	    length = args.length;
	    if (argPos) {
	      args = reorder(args, argPos);
	    } else if (isFlip && length > 1) {
	      args.reverse();
	    }
	    if (isAry && ary < length) {
	      args.length = ary;
	    }
	    if (this && this !== root && this instanceof wrapper) {
	      fn = Ctor || createCtor(fn);
	    }
	    return fn.apply(thisBinding, args);
	  }
	  return wrapper;
	}

	/**
	 * Creates a function that wraps `func` to invoke it with the `this` binding
	 * of `thisArg` and `partials` prepended to the arguments it receives.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {Array} partials The arguments to prepend to those provided to
	 *  the new function.
	 * @returns {Function} Returns the new wrapped function.
	 */
	function createPartial(func, bitmask, thisArg, partials) {
	  var isBind = bitmask & BIND_FLAG,
	      Ctor = createCtor(func);

	  function wrapper() {
	    var argsIndex = -1,
	        argsLength = arguments.length,
	        leftIndex = -1,
	        leftLength = partials.length,
	        args = Array(leftLength + argsLength),
	        fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

	    while (++leftIndex < leftLength) {
	      args[leftIndex] = partials[leftIndex];
	    }
	    while (argsLength--) {
	      args[leftIndex++] = arguments[++argsIndex];
	    }
	    return apply(fn, isBind ? thisArg : this, args);
	  }
	  return wrapper;
	}

	/**
	 * Creates a function that wraps `func` to continue currying.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	 * @param {Function} wrapFunc The function to create the `func` wrapper.
	 * @param {*} placeholder The placeholder value.
	 * @param {*} [thisArg] The `this` binding of `func`.
	 * @param {Array} [partials] The arguments to prepend to those provided to
	 *  the new function.
	 * @param {Array} [holders] The `partials` placeholder indexes.
	 * @param {Array} [argPos] The argument positions of the new function.
	 * @param {number} [ary] The arity cap of `func`.
	 * @param {number} [arity] The arity of `func`.
	 * @returns {Function} Returns the new wrapped function.
	 */
	function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
	  var isCurry = bitmask & CURRY_FLAG,
	      newHolders = isCurry ? holders : undefined,
	      newHoldersRight = isCurry ? undefined : holders,
	      newPartials = isCurry ? partials : undefined,
	      newPartialsRight = isCurry ? undefined : partials;

	  bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
	  bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

	  if (!(bitmask & CURRY_BOUND_FLAG)) {
	    bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
	  }

	  var result = wrapFunc(func, bitmask, thisArg, newPartials, newHolders, newPartialsRight, newHoldersRight, argPos, ary, arity);
	  result.placeholder = placeholder;
	  return setWrapToString(result, func, bitmask);
	}

	/**
	 * Creates a function that either curries or invokes `func` with optional
	 * `this` binding and partially applied arguments.
	 *
	 * @private
	 * @param {Function|string} func The function or method name to wrap.
	 * @param {number} bitmask The bitmask flags.
	 *  The bitmask may be composed of the following flags:
	 *     1 - `_.bind`
	 *     2 - `_.bindKey`
	 *     4 - `_.curry` or `_.curryRight` of a bound function
	 *     8 - `_.curry`
	 *    16 - `_.curryRight`
	 *    32 - `_.partial`
	 *    64 - `_.partialRight`
	 *   128 - `_.rearg`
	 *   256 - `_.ary`
	 *   512 - `_.flip`
	 * @param {*} [thisArg] The `this` binding of `func`.
	 * @param {Array} [partials] The arguments to be partially applied.
	 * @param {Array} [holders] The `partials` placeholder indexes.
	 * @param {Array} [argPos] The argument positions of the new function.
	 * @param {number} [ary] The arity cap of `func`.
	 * @param {number} [arity] The arity of `func`.
	 * @returns {Function} Returns the new wrapped function.
	 */
	function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
	  var isBindKey = bitmask & BIND_KEY_FLAG;
	  if (!isBindKey && typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  var length = partials ? partials.length : 0;
	  if (!length) {
	    bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
	    partials = holders = undefined;
	  }
	  ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
	  arity = arity === undefined ? arity : toInteger(arity);
	  length -= holders ? holders.length : 0;

	  if (bitmask & PARTIAL_RIGHT_FLAG) {
	    var partialsRight = partials,
	        holdersRight = holders;

	    partials = holders = undefined;
	  }

	  var newData = [
	    func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
	    argPos, ary, arity
	  ];

	  func = newData[0];
	  bitmask = newData[1];
	  thisArg = newData[2];
	  partials = newData[3];
	  holders = newData[4];
	  arity = newData[9] = newData[9] == null
	    ? (isBindKey ? 0 : func.length)
	    : nativeMax(newData[9] - length, 0);

	  if (!arity && bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG)) {
	    bitmask &= ~(CURRY_FLAG | CURRY_RIGHT_FLAG);
	  }
	  if (!bitmask || bitmask == BIND_FLAG) {
	    var result = createBind(func, bitmask, thisArg);
	  } else if (bitmask == CURRY_FLAG || bitmask == CURRY_RIGHT_FLAG) {
	    result = createCurry(func, bitmask, arity);
	  } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !holders.length) {
	    result = createPartial(func, bitmask, thisArg, partials);
	  } else {
	    result = createHybrid.apply(undefined, newData);
	  }
	  return setWrapToString(result, func, bitmask);
	}

	/**
	 * Gets the argument placeholder value for `func`.
	 *
	 * @private
	 * @param {Function} func The function to inspect.
	 * @returns {*} Returns the placeholder value.
	 */
	function getHolder(func) {
	  var object = func;
	  return object.placeholder;
	}

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = getValue(object, key);
	  return baseIsNative(value) ? value : undefined;
	}

	/**
	 * Extracts wrapper details from the `source` body comment.
	 *
	 * @private
	 * @param {string} source The source to inspect.
	 * @returns {Array} Returns the wrapper details.
	 */
	function getWrapDetails(source) {
	  var match = source.match(reWrapDetails);
	  return match ? match[1].split(reSplitDetails) : [];
	}

	/**
	 * Inserts wrapper `details` in a comment at the top of the `source` body.
	 *
	 * @private
	 * @param {string} source The source to modify.
	 * @returns {Array} details The details to insert.
	 * @returns {string} Returns the modified source.
	 */
	function insertWrapDetails(source, details) {
	  var length = details.length,
	      lastIndex = length - 1;

	  details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
	  details = details.join(length > 2 ? ', ' : ' ');
	  return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
	}

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return !!length &&
	    (typeof value == 'number' || reIsUint.test(value)) &&
	    (value > -1 && value % 1 == 0 && value < length);
	}

	/**
	 * Checks if `func` has its source masked.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	 */
	function isMasked(func) {
	  return !!maskSrcKey && (maskSrcKey in func);
	}

	/**
	 * Reorder `array` according to the specified indexes where the element at
	 * the first index is assigned as the first element, the element at
	 * the second index is assigned as the second element, and so on.
	 *
	 * @private
	 * @param {Array} array The array to reorder.
	 * @param {Array} indexes The arranged array indexes.
	 * @returns {Array} Returns `array`.
	 */
	function reorder(array, indexes) {
	  var arrLength = array.length,
	      length = nativeMin(indexes.length, arrLength),
	      oldArray = copyArray(array);

	  while (length--) {
	    var index = indexes[length];
	    array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
	  }
	  return array;
	}

	/**
	 * Sets the `toString` method of `wrapper` to mimic the source of `reference`
	 * with wrapper details in a comment at the top of the source body.
	 *
	 * @private
	 * @param {Function} wrapper The function to modify.
	 * @param {Function} reference The reference function.
	 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	 * @returns {Function} Returns `wrapper`.
	 */
	var setWrapToString = !defineProperty ? identity$1 : function(wrapper, reference, bitmask) {
	  var source = (reference + '');
	  return defineProperty(wrapper, 'toString', {
	    'configurable': true,
	    'enumerable': false,
	    'value': constant(insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)))
	  });
	};

	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to process.
	 * @returns {string} Returns the source code.
	 */
	function toSource(func) {
	  if (func != null) {
	    try {
	      return funcToString.call(func);
	    } catch (e) {}
	    try {
	      return (func + '');
	    } catch (e) {}
	  }
	  return '';
	}

	/**
	 * Updates wrapper `details` based on `bitmask` flags.
	 *
	 * @private
	 * @returns {Array} details The details to modify.
	 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	 * @returns {Array} Returns `details`.
	 */
	function updateWrapDetails(details, bitmask) {
	  arrayEach(wrapFlags, function(pair) {
	    var value = '_.' + pair[0];
	    if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
	      details.push(value);
	    }
	  });
	  return details.sort();
	}

	/**
	 * Creates a function that accepts arguments of `func` and either invokes
	 * `func` returning its result, if at least `arity` number of arguments have
	 * been provided, or returns a function that accepts the remaining `func`
	 * arguments, and so on. The arity of `func` may be specified if `func.length`
	 * is not sufficient.
	 *
	 * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
	 * may be used as a placeholder for provided arguments.
	 *
	 * **Note:** This method doesn't set the "length" property of curried functions.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.0.0
	 * @category Function
	 * @param {Function} func The function to curry.
	 * @param {number} [arity=func.length] The arity of `func`.
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	 * @returns {Function} Returns the new curried function.
	 * @example
	 *
	 * var abc = function(a, b, c) {
	 *   return [a, b, c];
	 * };
	 *
	 * var curried = _.curry(abc);
	 *
	 * curried(1)(2)(3);
	 * // => [1, 2, 3]
	 *
	 * curried(1, 2)(3);
	 * // => [1, 2, 3]
	 *
	 * curried(1, 2, 3);
	 * // => [1, 2, 3]
	 *
	 * // Curried with placeholders.
	 * curried(1)(_, 3)(2);
	 * // => [1, 2, 3]
	 */
	function curry(func, arity, guard) {
	  arity = guard ? undefined : arity;
	  var result = createWrap(func, CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
	  result.placeholder = curry.placeholder;
	  return result;
	}

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 8-9 which returns 'object' for typed array and other constructors.
	  var tag = isObject(value) ? objectToString.call(value) : '';
	  return tag == funcTag || tag == genTag;
	}

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol(value) {
	  return typeof value == 'symbol' ||
	    (isObjectLike(value) && objectToString.call(value) == symbolTag);
	}

	/**
	 * Converts `value` to a finite number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.12.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {number} Returns the converted number.
	 * @example
	 *
	 * _.toFinite(3.2);
	 * // => 3.2
	 *
	 * _.toFinite(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toFinite(Infinity);
	 * // => 1.7976931348623157e+308
	 *
	 * _.toFinite('3.2');
	 * // => 3.2
	 */
	function toFinite(value) {
	  if (!value) {
	    return value === 0 ? value : 0;
	  }
	  value = toNumber(value);
	  if (value === INFINITY || value === -INFINITY) {
	    var sign = (value < 0 ? -1 : 1);
	    return sign * MAX_INTEGER;
	  }
	  return value === value ? value : 0;
	}

	/**
	 * Converts `value` to an integer.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {number} Returns the converted integer.
	 * @example
	 *
	 * _.toInteger(3.2);
	 * // => 3
	 *
	 * _.toInteger(Number.MIN_VALUE);
	 * // => 0
	 *
	 * _.toInteger(Infinity);
	 * // => 1.7976931348623157e+308
	 *
	 * _.toInteger('3.2');
	 * // => 3
	 */
	function toInteger(value) {
	  var result = toFinite(value),
	      remainder = result % 1;

	  return result === result ? (remainder ? result - remainder : result) : 0;
	}

	/**
	 * Converts `value` to a number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {number} Returns the number.
	 * @example
	 *
	 * _.toNumber(3.2);
	 * // => 3.2
	 *
	 * _.toNumber(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toNumber(Infinity);
	 * // => Infinity
	 *
	 * _.toNumber('3.2');
	 * // => 3.2
	 */
	function toNumber(value) {
	  if (typeof value == 'number') {
	    return value;
	  }
	  if (isSymbol(value)) {
	    return NAN;
	  }
	  if (isObject(value)) {
	    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
	    value = isObject(other) ? (other + '') : other;
	  }
	  if (typeof value != 'string') {
	    return value === 0 ? value : +value;
	  }
	  value = value.replace(reTrim, '');
	  var isBinary = reIsBinary.test(value);
	  return (isBinary || reIsOctal.test(value))
	    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
	    : (reIsBadHex.test(value) ? NAN : +value);
	}

	/**
	 * Creates a function that returns `value`.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Util
	 * @param {*} value The value to return from the new function.
	 * @returns {Function} Returns the new constant function.
	 * @example
	 *
	 * var objects = _.times(2, _.constant({ 'a': 1 }));
	 *
	 * console.log(objects);
	 * // => [{ 'a': 1 }, { 'a': 1 }]
	 *
	 * console.log(objects[0] === objects[1]);
	 * // => true
	 */
	function constant(value) {
	  return function() {
	    return value;
	  };
	}

	/**
	 * This method returns the first argument it receives.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Util
	 * @param {*} value Any value.
	 * @returns {*} Returns `value`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 *
	 * console.log(_.identity(object) === object);
	 * // => true
	 */
	function identity$1(value) {
	  return value;
	}

	// Assign default placeholders.
	curry.placeholder = {};

	var lodash_curry = curry;

	function yuv2rgb(yuv) {
	  var y = yuv[0],
	      u = yuv[1],
	      v = yuv[2];
	  var r, g, b;
	  r = y * 1 + u * 0 + v * 1.13983;
	  g = y * 1 + u * -0.39465 + v * -0.5806;
	  b = y * 1 + u * 2.02311 + v * 0;
	  r = Math.min(Math.max(0, r), 1);
	  g = Math.min(Math.max(0, g), 1);
	  b = Math.min(Math.max(0, b), 1);
	  return [r * 255, g * 255, b * 255];
	}
	function rgb2yuv(rgb) {
	  var r = rgb[0] / 255,
	      g = rgb[1] / 255,
	      b = rgb[2] / 255;
	  var y = r * 0.299 + g * 0.587 + b * 0.114;
	  var u = r * -0.14713 + g * -0.28886 + b * 0.436;
	  var v = r * 0.615 + g * -0.51499 + b * -0.10001;
	  return [y, u, v];
	}

	function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
	var DEFAULT_BASE16 = index;
	var BASE16_KEYS = Object.keys(DEFAULT_BASE16); // we need a correcting factor, so that a dark, but not black background color
	// converts to bright enough inversed color

	var flip = function flip(x) {
	  return x < 0.25 ? 1 : x < 0.5 ? 0.9 - x : 1.1 - x;
	};

	var invertColor = function invertColor(hexString) {
	  var color$1 = color(hexString);

	  var _rgb2yuv = rgb2yuv(color$1.array()),
	      _rgb2yuv2 = _slicedToArray(_rgb2yuv, 3),
	      y = _rgb2yuv2[0],
	      u = _rgb2yuv2[1],
	      v = _rgb2yuv2[2];

	  var flippedYuv = [flip(y), u, v];
	  var rgb = yuv2rgb(flippedYuv);
	  return color.rgb(rgb).hex();
	};

	var merger = function merger(styling) {
	  return function (prevStyling) {
	    return {
	      className: [prevStyling.className, styling.className].filter(Boolean).join(' '),
	      style: _objectSpread$2(_objectSpread$2({}, prevStyling.style || {}), styling.style || {})
	    };
	  };
	};

	var mergeStyling = function mergeStyling(customStyling, defaultStyling) {
	  if (customStyling === undefined) {
	    return defaultStyling;
	  }

	  if (defaultStyling === undefined) {
	    return customStyling;
	  }

	  var customType = _typeof(customStyling);

	  var defaultType = _typeof(defaultStyling);

	  switch (customType) {
	    case 'string':
	      switch (defaultType) {
	        case 'string':
	          return [defaultStyling, customStyling].filter(Boolean).join(' ');

	        case 'object':
	          return merger({
	            className: customStyling,
	            style: defaultStyling
	          });

	        case 'function':
	          return function (styling) {
	            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	              args[_key - 1] = arguments[_key];
	            }

	            return merger({
	              className: customStyling
	            })(defaultStyling.apply(void 0, [styling].concat(args)));
	          };
	      }

	      break;

	    case 'object':
	      switch (defaultType) {
	        case 'string':
	          return merger({
	            className: defaultStyling,
	            style: customStyling
	          });

	        case 'object':
	          return _objectSpread$2(_objectSpread$2({}, defaultStyling), customStyling);

	        case 'function':
	          return function (styling) {
	            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	              args[_key2 - 1] = arguments[_key2];
	            }

	            return merger({
	              style: customStyling
	            })(defaultStyling.apply(void 0, [styling].concat(args)));
	          };
	      }

	      break;

	    case 'function':
	      switch (defaultType) {
	        case 'string':
	          return function (styling) {
	            for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
	              args[_key3 - 1] = arguments[_key3];
	            }

	            return customStyling.apply(void 0, [merger(styling)({
	              className: defaultStyling
	            })].concat(args));
	          };

	        case 'object':
	          return function (styling) {
	            for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
	              args[_key4 - 1] = arguments[_key4];
	            }

	            return customStyling.apply(void 0, [merger(styling)({
	              style: defaultStyling
	            })].concat(args));
	          };

	        case 'function':
	          return function (styling) {
	            for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
	              args[_key5 - 1] = arguments[_key5];
	            }

	            return customStyling.apply(void 0, [defaultStyling.apply(void 0, [styling].concat(args))].concat(args));
	          };
	      }

	  }
	};

	var mergeStylings = function mergeStylings(customStylings, defaultStylings) {
	  var keys = Object.keys(defaultStylings);

	  for (var key in customStylings) {
	    if (keys.indexOf(key) === -1) keys.push(key);
	  }

	  return keys.reduce(function (mergedStyling, key) {
	    return mergedStyling[key] = mergeStyling(customStylings[key], defaultStylings[key]), mergedStyling;
	  }, {});
	};

	var getStylingByKeys = function getStylingByKeys(mergedStyling, keys) {
	  for (var _len6 = arguments.length, args = new Array(_len6 > 2 ? _len6 - 2 : 0), _key6 = 2; _key6 < _len6; _key6++) {
	    args[_key6 - 2] = arguments[_key6];
	  }

	  if (keys === null) {
	    return mergedStyling;
	  }

	  if (!Array.isArray(keys)) {
	    keys = [keys];
	  }

	  var styles = keys.map(function (key) {
	    return mergedStyling[key];
	  }).filter(Boolean);
	  var props = styles.reduce(function (obj, s) {
	    if (typeof s === 'string') {
	      obj.className = [obj.className, s].filter(Boolean).join(' ');
	    } else if (_typeof(s) === 'object') {
	      obj.style = _objectSpread$2(_objectSpread$2({}, obj.style), s);
	    } else if (typeof s === 'function') {
	      obj = _objectSpread$2(_objectSpread$2({}, obj), s.apply(void 0, [obj].concat(args)));
	    }

	    return obj;
	  }, {
	    className: '',
	    style: {}
	  });

	  if (!props.className) {
	    delete props.className;
	  }

	  if (Object.keys(props.style).length === 0) {
	    delete props.style;
	  }

	  return props;
	};

	var invertBase16Theme = function invertBase16Theme(base16Theme) {
	  return Object.keys(base16Theme).reduce(function (t, key) {
	    return t[key] = /^base/.test(key) ? invertColor(base16Theme[key]) : key === 'scheme' ? base16Theme[key] + ':inverted' : base16Theme[key], t;
	  }, {});
	};
	var createStyling = lodash_curry(function (getStylingFromBase16) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  var themeOrStyling = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	  var _options$defaultBase = options.defaultBase16,
	      defaultBase16 = _options$defaultBase === void 0 ? DEFAULT_BASE16 : _options$defaultBase,
	      _options$base16Themes = options.base16Themes,
	      base16Themes = _options$base16Themes === void 0 ? null : _options$base16Themes;
	  var base16Theme = getBase16Theme(themeOrStyling, base16Themes);

	  if (base16Theme) {
	    themeOrStyling = _objectSpread$2(_objectSpread$2({}, base16Theme), themeOrStyling);
	  }

	  var theme = BASE16_KEYS.reduce(function (t, key) {
	    return t[key] = themeOrStyling[key] || defaultBase16[key], t;
	  }, {});
	  var customStyling = Object.keys(themeOrStyling).reduce(function (s, key) {
	    return BASE16_KEYS.indexOf(key) === -1 ? (s[key] = themeOrStyling[key], s) : s;
	  }, {});
	  var defaultStyling = getStylingFromBase16(theme);
	  var mergedStyling = mergeStylings(customStyling, defaultStyling);

	  for (var _len7 = arguments.length, args = new Array(_len7 > 3 ? _len7 - 3 : 0), _key7 = 3; _key7 < _len7; _key7++) {
	    args[_key7 - 3] = arguments[_key7];
	  }

	  return lodash_curry(getStylingByKeys, 2).apply(void 0, [mergedStyling].concat(args));
	}, 3);

	var isStylingConfig = function isStylingConfig(theme) {
	  return !!theme.extend;
	};

	var getBase16Theme = function getBase16Theme(theme, base16Themes) {
	  if (theme && isStylingConfig(theme) && theme.extend) {
	    theme = theme.extend;
	  }

	  if (typeof theme === 'string') {
	    var _theme$split = theme.split(':'),
	        _theme$split2 = _slicedToArray(_theme$split, 2),
	        _themeName = _theme$split2[0],
	        modifier = _theme$split2[1];

	    if (base16Themes) {
	      theme = base16Themes[_themeName];
	    } else {
	      theme = base16[_themeName];
	    }

	    if (modifier === 'inverted') {
	      theme = invertBase16Theme(theme);
	    }
	  }

	  return theme && Object.prototype.hasOwnProperty.call(theme, 'base00') ? theme : undefined;
	};
	var invertTheme = function invertTheme(theme) {
	  if (typeof theme === 'string') {
	    return "".concat(theme, ":inverted");
	  }

	  if (theme && isStylingConfig(theme) && theme.extend) {
	    if (typeof theme.extend === 'string') {
	      return _objectSpread$2(_objectSpread$2({}, theme), {}, {
	        extend: "".concat(theme.extend, ":inverted")
	      });
	    }

	    return _objectSpread$2(_objectSpread$2({}, theme), {}, {
	      extend: invertBase16Theme(theme.extend)
	    });
	  }

	  if (theme) {
	    return invertBase16Theme(theme);
	  }

	  return theme;
	};

	var solarized = {
	  scheme: 'solarized',
	  author: 'ethan schoonover (http://ethanschoonover.com/solarized)',
	  base00: '#002b36',
	  base01: '#073642',
	  base02: '#586e75',
	  base03: '#657b83',
	  base04: '#839496',
	  base05: '#93a1a1',
	  base06: '#eee8d5',
	  base07: '#fdf6e3',
	  base08: '#dc322f',
	  base09: '#cb4b16',
	  base0A: '#b58900',
	  base0B: '#859900',
	  base0C: '#2aa198',
	  base0D: '#268bd2',
	  base0E: '#6c71c4',
	  base0F: '#d33682'
	};

	function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty$1(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

	var colorMap = function colorMap(theme) {
	  return {
	    BACKGROUND_COLOR: theme.base00,
	    TEXT_COLOR: theme.base07,
	    STRING_COLOR: theme.base0B,
	    DATE_COLOR: theme.base0B,
	    NUMBER_COLOR: theme.base09,
	    BOOLEAN_COLOR: theme.base09,
	    NULL_COLOR: theme.base08,
	    UNDEFINED_COLOR: theme.base08,
	    FUNCTION_COLOR: theme.base08,
	    SYMBOL_COLOR: theme.base08,
	    LABEL_COLOR: theme.base0D,
	    ARROW_COLOR: theme.base0D,
	    ITEM_STRING_COLOR: theme.base0B,
	    ITEM_STRING_EXPANDED_COLOR: theme.base03
	  };
	};

	var valueColorMap = function valueColorMap(colors) {
	  return {
	    String: colors.STRING_COLOR,
	    Date: colors.DATE_COLOR,
	    Number: colors.NUMBER_COLOR,
	    Boolean: colors.BOOLEAN_COLOR,
	    Null: colors.NULL_COLOR,
	    Undefined: colors.UNDEFINED_COLOR,
	    Function: colors.FUNCTION_COLOR,
	    Symbol: colors.SYMBOL_COLOR
	  };
	};

	var getDefaultThemeStyling = function getDefaultThemeStyling(theme) {
	  var colors = colorMap(theme);
	  return {
	    tree: {
	      border: 0,
	      padding: 0,
	      marginTop: '0.5em',
	      marginBottom: '0.5em',
	      marginLeft: '0.125em',
	      marginRight: 0,
	      listStyle: 'none',
	      MozUserSelect: 'none',
	      WebkitUserSelect: 'none',
	      backgroundColor: colors.BACKGROUND_COLOR
	    },
	    value: function value(_ref, nodeType, keyPath) {
	      var style = _ref.style;
	      return {
	        style: _objectSpread$1(_objectSpread$1({}, style), {}, {
	          paddingTop: '0.25em',
	          paddingRight: 0,
	          marginLeft: '0.875em',
	          WebkitUserSelect: 'text',
	          MozUserSelect: 'text',
	          wordWrap: 'break-word',
	          paddingLeft: keyPath.length > 1 ? '2.125em' : '1.25em',
	          textIndent: '-0.5em',
	          wordBreak: 'break-all'
	        })
	      };
	    },
	    label: {
	      display: 'inline-block',
	      color: colors.LABEL_COLOR
	    },
	    valueLabel: {
	      margin: '0 0.5em 0 0'
	    },
	    valueText: function valueText(_ref2, nodeType) {
	      var style = _ref2.style;
	      return {
	        style: _objectSpread$1(_objectSpread$1({}, style), {}, {
	          color: valueColorMap(colors)[nodeType]
	        })
	      };
	    },
	    itemRange: function itemRange(styling, expanded) {
	      return {
	        style: {
	          paddingTop: expanded ? 0 : '0.25em',
	          cursor: 'pointer',
	          color: colors.LABEL_COLOR
	        }
	      };
	    },
	    arrow: function arrow(_ref3, nodeType, expanded) {
	      var style = _ref3.style;
	      return {
	        style: _objectSpread$1(_objectSpread$1({}, style), {}, {
	          marginLeft: 0,
	          transition: '150ms',
	          WebkitTransition: '150ms',
	          MozTransition: '150ms',
	          WebkitTransform: expanded ? 'rotateZ(90deg)' : 'rotateZ(0deg)',
	          MozTransform: expanded ? 'rotateZ(90deg)' : 'rotateZ(0deg)',
	          transform: expanded ? 'rotateZ(90deg)' : 'rotateZ(0deg)',
	          transformOrigin: '45% 50%',
	          WebkitTransformOrigin: '45% 50%',
	          MozTransformOrigin: '45% 50%',
	          position: 'relative',
	          lineHeight: '1.1em',
	          fontSize: '0.75em'
	        })
	      };
	    },
	    arrowContainer: function arrowContainer(_ref4, arrowStyle) {
	      var style = _ref4.style;
	      return {
	        style: _objectSpread$1(_objectSpread$1({}, style), {}, {
	          display: 'inline-block',
	          paddingRight: '0.5em',
	          paddingLeft: arrowStyle === 'double' ? '1em' : 0,
	          cursor: 'pointer'
	        })
	      };
	    },
	    arrowSign: {
	      color: colors.ARROW_COLOR
	    },
	    arrowSignInner: {
	      position: 'absolute',
	      top: 0,
	      left: '-0.4em'
	    },
	    nestedNode: function nestedNode(_ref5, keyPath, nodeType, expanded, expandable) {
	      var style = _ref5.style;
	      return {
	        style: _objectSpread$1(_objectSpread$1({}, style), {}, {
	          position: 'relative',
	          paddingTop: '0.25em',
	          marginLeft: keyPath.length > 1 ? '0.875em' : 0,
	          paddingLeft: !expandable ? '1.125em' : 0
	        })
	      };
	    },
	    rootNode: {
	      padding: 0,
	      margin: 0
	    },
	    nestedNodeLabel: function nestedNodeLabel(_ref6, keyPath, nodeType, expanded, expandable) {
	      var style = _ref6.style;
	      return {
	        style: _objectSpread$1(_objectSpread$1({}, style), {}, {
	          margin: 0,
	          padding: 0,
	          WebkitUserSelect: expandable ? 'inherit' : 'text',
	          MozUserSelect: expandable ? 'inherit' : 'text',
	          cursor: expandable ? 'pointer' : 'default'
	        })
	      };
	    },
	    nestedNodeItemString: function nestedNodeItemString(_ref7, keyPath, nodeType, expanded) {
	      var style = _ref7.style;
	      return {
	        style: _objectSpread$1(_objectSpread$1({}, style), {}, {
	          paddingLeft: '0.5em',
	          cursor: 'default',
	          color: expanded ? colors.ITEM_STRING_EXPANDED_COLOR : colors.ITEM_STRING_COLOR
	        })
	      };
	    },
	    nestedNodeItemType: {
	      marginLeft: '0.3em',
	      marginRight: '0.3em'
	    },
	    nestedNodeChildren: function nestedNodeChildren(_ref8, nodeType, expanded) {
	      var style = _ref8.style;
	      return {
	        style: _objectSpread$1(_objectSpread$1({}, style), {}, {
	          padding: 0,
	          margin: 0,
	          listStyle: 'none',
	          display: expanded ? 'block' : 'none'
	        })
	      };
	    },
	    rootNodeChildren: {
	      padding: 0,
	      margin: 0,
	      listStyle: 'none'
	    }
	  };
	};

	var createStylingFromTheme = createStyling(getDefaultThemeStyling, {
	  defaultBase16: solarized
	});

	var _excluded = ["data", "keyPath", "postprocessValue", "hideRoot", "theme", "invertTheme"];

	function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty$1(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

	var identity = function identity(value) {
	  return value;
	};

	var expandRootNode = function expandRootNode(keyPath, data, level) {
	  return level === 0;
	};

	var defaultItemString = function defaultItemString(type, data, itemType, itemString) {
	  return /*#__PURE__*/React__default["default"].createElement("span", null, itemType, " ", itemString);
	};

	var defaultLabelRenderer = function defaultLabelRenderer(_ref) {
	  var _ref2 = _slicedToArray$1(_ref, 1),
	      label = _ref2[0];

	  return /*#__PURE__*/React__default["default"].createElement("span", null, label, ":");
	};

	var noCustomNode = function noCustomNode() {
	  return false;
	};

	function checkLegacyTheming(theme, props) {
	  var deprecatedStylingMethodsMap = {
	    getArrowStyle: 'arrow',
	    getListStyle: 'nestedNodeChildren',
	    getItemStringStyle: 'nestedNodeItemString',
	    getLabelStyle: 'label',
	    getValueStyle: 'valueText'
	  };
	  var deprecatedStylingMethods = Object.keys(deprecatedStylingMethodsMap).filter(function (name) {
	    return props[name];
	  });

	  if (deprecatedStylingMethods.length > 0) {
	    if (typeof theme === 'string') {
	      theme = {
	        extend: theme
	      };
	    } else {
	      theme = _objectSpread({}, theme);
	    }

	    deprecatedStylingMethods.forEach(function (name) {
	      // eslint-disable-next-line no-console
	      console.error("Styling method \"".concat(name, "\" is deprecated, use \"theme\" property instead"));

	      theme[deprecatedStylingMethodsMap[name]] = function (_ref3) {
	        var style = _ref3.style;

	        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	          args[_key - 1] = arguments[_key];
	        }

	        return {
	          style: _objectSpread(_objectSpread({}, style), props[name].apply(props, args))
	        };
	      };
	    });
	  }

	  return theme;
	}

	function getStateFromProps(props) {
	  var theme = checkLegacyTheming(props.theme, props);

	  if (props.invertTheme) {
	    theme = invertTheme(theme);
	  }

	  return {
	    styling: createStylingFromTheme(theme)
	  };
	}

	var JSONTree = /*#__PURE__*/function (_React$Component) {
	  _inherits(JSONTree, _React$Component);

	  var _super = _createSuper(JSONTree);

	  function JSONTree(props) {
	    var _this;

	    _classCallCheck(this, JSONTree);

	    _this = _super.call(this, props);
	    _this.state = getStateFromProps(props);
	    return _this;
	  }

	  _createClass(JSONTree, [{
	    key: "UNSAFE_componentWillReceiveProps",
	    value: function UNSAFE_componentWillReceiveProps(nextProps) {
	      var _this2 = this;

	      if (['theme', 'invertTheme'].find(function (k) {
	        return nextProps[k] !== _this2.props[k];
	      })) {
	        this.setState(getStateFromProps(nextProps));
	      }
	    }
	  }, {
	    key: "shouldComponentUpdate",
	    value: function shouldComponentUpdate(nextProps) {
	      var _this3 = this;

	      return !!Object.keys(nextProps).find(function (k) {
	        return k === 'keyPath' ? nextProps[k].join('/') !== _this3.props[k].join('/') : nextProps[k] !== _this3.props[k];
	      });
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          value = _this$props.data,
	          keyPath = _this$props.keyPath,
	          postprocessValue = _this$props.postprocessValue,
	          hideRoot = _this$props.hideRoot;
	          _this$props.theme;
	          _this$props.invertTheme;
	          var rest = _objectWithoutProperties(_this$props, _excluded);

	      var styling = this.state.styling;
	      return /*#__PURE__*/React__default["default"].createElement("ul", _objectSpread({}, styling('tree')), /*#__PURE__*/React__default["default"].createElement(JSONNode, _objectSpread(_objectSpread({}, _objectSpread({
	        postprocessValue: postprocessValue,
	        hideRoot: hideRoot,
	        styling: styling
	      }, rest)), {}, {
	        keyPath: hideRoot ? [] : keyPath,
	        value: postprocessValue(value)
	      })));
	    }
	  }]);

	  return JSONTree;
	}(React__default["default"].Component);
	JSONTree.propTypes = {
	  data: propTypes.exports.any,
	  hideRoot: propTypes.exports.bool,
	  theme: propTypes.exports.oneOfType([propTypes.exports.object, propTypes.exports.string]),
	  invertTheme: propTypes.exports.bool,
	  keyPath: propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.number])),
	  postprocessValue: propTypes.exports.func,
	  sortObjectKeys: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.bool])
	};
	JSONTree.defaultProps = {
	  shouldExpandNode: expandRootNode,
	  hideRoot: false,
	  keyPath: ['root'],
	  getItemString: defaultItemString,
	  labelRenderer: defaultLabelRenderer,
	  valueRenderer: identity,
	  postprocessValue: identity,
	  isCustomNode: noCustomNode,
	  collectionLimit: 50,
	  invertTheme: true
	};

	exports.JSONTree = JSONTree;

	Object.defineProperty(exports, '__esModule', { value: true });

}));
