import React from 'react';
import PropTypes from 'prop-types';
import { CircularPropsPassedThroughJSONNestedNode, CircularPropsPassedThroughRenderChildNodes } from './types';
/**
 * Renders nested values (eg. objects, arrays, lists, etc.)
 */
export interface RenderChildNodesProps extends CircularPropsPassedThroughRenderChildNodes {
    data: any;
    nodeType: string;
}
interface Props extends CircularPropsPassedThroughJSONNestedNode {
    data: any;
    nodeType: string;
    nodeTypeIndicator: string;
    createItemString: (data: any, collectionLimit: number) => string;
    expandable: boolean;
}
interface State {
    expanded: boolean;
}
export default class JSONNestedNode extends React.Component<Props, State> {
    static propTypes: {
        getItemString: PropTypes.Validator<(...args: any[]) => any>;
        nodeTypeIndicator: PropTypes.Requireable<any>;
        nodeType: PropTypes.Validator<string>;
        data: PropTypes.Requireable<any>;
        hideRoot: PropTypes.Validator<boolean>;
        createItemString: PropTypes.Validator<(...args: any[]) => any>;
        styling: PropTypes.Validator<(...args: any[]) => any>;
        collectionLimit: PropTypes.Requireable<number>;
        keyPath: PropTypes.Validator<(string | number | null | undefined)[]>;
        labelRenderer: PropTypes.Validator<(...args: any[]) => any>;
        shouldExpandNode: PropTypes.Requireable<(...args: any[]) => any>;
        level: PropTypes.Validator<number>;
        sortObjectKeys: PropTypes.Requireable<boolean | ((...args: any[]) => any)>;
        isCircular: PropTypes.Requireable<boolean>;
        expandable: PropTypes.Requireable<boolean>;
    };
    static defaultProps: {
        data: never[];
        circularCache: never[];
        level: number;
        expandable: boolean;
    };
    constructor(props: Props);
    UNSAFE_componentWillReceiveProps(nextProps: Props): void;
    shouldComponentUpdate(nextProps: Props, nextState: State): boolean;
    render(): JSX.Element;
    handleClick: () => void;
}
export {};
