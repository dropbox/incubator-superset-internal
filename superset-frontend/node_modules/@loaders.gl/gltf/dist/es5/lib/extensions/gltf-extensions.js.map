{"version":3,"sources":["../../../../src/lib/extensions/gltf-extensions.ts"],"names":["EXTENSIONS","KHR_draco_mesh_compression","KHR_materials_unlit","KHR_lights_punctual","KHR_techniques_webgl","decodeExtensions","gltf","options","context","extensionName","excludes","excludeExtensions","exclude","extension","decode"],"mappings":";;;;;;;;;;;;;;;;AAQA;;AACA;;AACA;;AACA;;;;;;AAaO,IAAMA,UAA0D,GAAG;AAMxEC,EAAAA,0BAA0B,EAA1BA,0BANwE;AAOxEC,EAAAA,mBAAmB,EAAnBA,mBAPwE;AAQxEC,EAAAA,mBAAmB,EAAnBA,mBARwE;AASxEC,EAAAA,oBAAoB,EAApBA;AATwE,CAAnE;;;SAYeC,gB;;;;;gFAAf,iBAAgCC,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAsCC,YAAAA,OAAtC,2DAAmE,EAAnE;AAAuEC,YAAAA,OAAvE;AAAA,oDACuBR,UADvB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACMS,YAAAA,cADN;AAEGC,YAAAA,QAFH,GAEc,CAAAH,OAAO,SAAP,IAAAA,OAAO,WAAP,6BAAAA,OAAO,CAAED,IAAT,gEAAeK,iBAAf,KAAoC,EAFlD;AAGGC,YAAAA,OAHH,GAGaH,cAAa,IAAIC,QAAjB,IAA6B,CAACA,QAAQ,CAACD,cAAD,CAHnD;;AAAA,gBAIEG,OAJF;AAAA;AAAA;AAAA;;AAKKC,YAAAA,SALL,GAKiBb,UAAU,CAACS,cAAD,CAL3B;AAAA;AAAA,mBAQKI,SAAS,CAACC,MAAV,CAAiBR,IAAjB,EAAuBC,OAAvB,EAAgCC,OAAhC,CARL;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["/* eslint-disable camelcase */\nimport {GLTF} from '../types/gltf-types';\nimport type {GLTFLoaderOptions} from '../../gltf-loader';\n\n// GLTF 1.0 extensions (read only)\n// import * as KHR_binary_gltf from './KHR_draco_mesh_compression';\n\n// GLTF 2.0 extensions (read/write)\nimport * as KHR_draco_mesh_compression from './KHR_draco_mesh_compression';\nimport * as KHR_materials_unlit from './KHR_materials_unlit';\nimport * as KHR_lights_punctual from './KHR_lights_punctual';\nimport * as KHR_techniques_webgl from './KHR_techniques_webgl';\n\ntype GLTFExtensionPlugin = {\n  decode: (gltfData: {json: GLTF}, options: GLTFLoaderOptions, context) => Promise<void>;\n\n  encode: (gltfData: {json: GLTF}, options: GLTFLoaderOptions) => void;\n};\n\n/**\n * List of extensions processed by the GLTFLoader\n * Note that may extensions can only be handled on the rendering stage and are left out here\n * These are just extensions that can be handled fully or partially during loading.\n */\nexport const EXTENSIONS: {[extensionName: string]: GLTFExtensionPlugin} = {\n  // 1.0\n  // KHR_binary_gltf is handled separately - must be processed before other parsing starts\n  // KHR_binary_gltf,\n\n  // 2.0\n  KHR_draco_mesh_compression,\n  KHR_materials_unlit,\n  KHR_lights_punctual,\n  KHR_techniques_webgl\n};\n\nexport async function decodeExtensions(gltf, options: GLTFLoaderOptions = {}, context?) {\n  for (const extensionName in EXTENSIONS) {\n    const excludes = options?.gltf?.excludeExtensions || {};\n    const exclude = extensionName in excludes && !excludes[extensionName];\n    if (!exclude) {\n      const extension = EXTENSIONS[extensionName];\n      // Note: We decode async extensions sequentially, this might not be necessary\n      // Currently we only have Draco, but when we add Basis we may revisit\n      await extension.decode(gltf, options, context);\n    }\n  }\n}\n"],"file":"gltf-extensions.js"}