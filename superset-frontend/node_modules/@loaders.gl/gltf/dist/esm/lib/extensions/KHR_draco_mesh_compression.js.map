{"version":3,"sources":["../../../../src/lib/extensions/KHR_draco_mesh_compression.ts"],"names":["DracoLoader","sliceArrayBuffer","default","Scenegraph","KHR_DRACO_MESH_COMPRESSION","getGLTFAccessors","getGLTFAccessor","decode","gltfData","options","context","gltf","decompressMeshes","scenegraph","promises","primitive","makeMeshPrimitiveIterator","getObjectExtension","push","decompressPrimitive","Promise","all","removeExtension","encode","mesh","json","meshes","compressMesh","addRequiredExtension","dracoExtension","buffer","getTypedArrayForBufferView","bufferView","bufferCopy","byteOffset","parse","dracoOptions","decodedData","decodedAttributes","attributes","attributeName","decodedAttribute","Object","entries","accessorIndex","accessor","getAccessor","min","max","indices","checkPrimitive","mode","DracoWriter","Error","compressedData","encodeSync","parseSync","fauxAccessors","_addFauxAttributes","bufferViewIndex","addBufferView","glTFMesh","primitives","extensions","keys","length"],"mappings":"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","sourcesContent":["// https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_draco_mesh_compression\n// Only TRIANGLES: 0x0004 and TRIANGLE_STRIP: 0x0005 are supported\n\n/* eslint-disable camelcase */\nimport type {GLTF, GLTFAccessor, GLTFMeshPrimitive} from '../types/gltf-types';\nimport type {GLTFLoaderOptions} from '../../gltf-loader';\n\nimport type {LoaderContext} from '@loaders.gl/loader-utils';\nimport {DracoLoader} from '@loaders.gl/draco';\nimport {DracoLoaderOptions, DracoMeshData} from '@loaders.gl/draco';\nimport {sliceArrayBuffer} from '@loaders.gl/loader-utils';\nimport {default as Scenegraph} from '../api/gltf-scenegraph';\nimport {KHR_DRACO_MESH_COMPRESSION} from '../gltf-utils/gltf-constants';\nimport {getGLTFAccessors, getGLTFAccessor} from '../gltf-utils/gltf-attribute-utils';\n\n// Note: We have a \"soft dependency\" on DracoWriter to avoid bundling it when not needed\nexport async function decode(\n  gltfData: {json: GLTF},\n  options: GLTFLoaderOptions,\n  context: LoaderContext\n): Promise<void> {\n  if (!options?.gltf?.decompressMeshes) {\n    return;\n  }\n\n  const scenegraph = new Scenegraph(gltfData);\n  const promises: Promise<void>[] = [];\n  for (const primitive of makeMeshPrimitiveIterator(scenegraph)) {\n    if (scenegraph.getObjectExtension(primitive, KHR_DRACO_MESH_COMPRESSION)) {\n      promises.push(decompressPrimitive(scenegraph, primitive, options, context));\n    }\n  }\n\n  // Decompress meshes in parallel\n  await Promise.all(promises);\n\n  // We have now decompressed all primitives, so remove the top-level extensions\n  scenegraph.removeExtension(KHR_DRACO_MESH_COMPRESSION);\n}\n\nexport function encode(gltfData, options: GLTFLoaderOptions = {}): void {\n  const scenegraph = new Scenegraph(gltfData);\n\n  for (const mesh of scenegraph.json.meshes || []) {\n    // eslint-disable-next-line camelcase\n    // @ts-ignore\n    compressMesh(mesh, options);\n    // NOTE: Only add the extension if something was actually compressed\n    scenegraph.addRequiredExtension(KHR_DRACO_MESH_COMPRESSION);\n  }\n}\n\n// DECODE\n\n// Unpacks one mesh primitive and removes the extension from the primitive\n// DracoDecoder needs to be imported and registered by app\n// Returns: Promise that resolves when all pending draco decoder jobs for this mesh complete\n\n// TODO - Implement fallback behavior per KHR_DRACO_MESH_COMPRESSION spec\n\nasync function decompressPrimitive(\n  scenegraph: Scenegraph,\n  primitive: GLTFMeshPrimitive,\n  options: GLTFLoaderOptions,\n  context: LoaderContext\n): Promise<void> {\n  const dracoExtension = scenegraph.getObjectExtension(primitive, KHR_DRACO_MESH_COMPRESSION);\n  if (!dracoExtension) {\n    return;\n  }\n\n  const buffer = scenegraph.getTypedArrayForBufferView(dracoExtension.bufferView);\n  // TODO - parse does not yet deal well with byte offsets embedded in typed arrays. Copy buffer\n  // TODO - remove when `parse` is fixed to handle `byteOffset`s\n  const bufferCopy = sliceArrayBuffer(buffer.buffer, buffer.byteOffset); // , buffer.byteLength);\n\n  const {parse} = context;\n  const dracoOptions: DracoLoaderOptions = {...options};\n\n  // TODO - remove hack: The entire tileset might be included, too expensive to serialize\n  delete dracoOptions['3d-tiles'];\n  const decodedData = (await parse(\n    bufferCopy,\n    DracoLoader,\n    dracoOptions,\n    context\n  )) as DracoMeshData;\n\n  const decodedAttributes: {[key: string]: GLTFAccessor} = getGLTFAccessors(decodedData.attributes);\n\n  // Restore min/max values\n  for (const [attributeName, decodedAttribute] of Object.entries(decodedAttributes)) {\n    if (attributeName in primitive.attributes) {\n      const accessorIndex: number = primitive.attributes[attributeName];\n      const accessor = scenegraph.getAccessor(accessorIndex);\n      if (accessor?.min && accessor?.max) {\n        decodedAttribute.min = accessor.min;\n        decodedAttribute.max = accessor.max;\n      }\n    }\n  }\n\n  // @ts-ignore\n  primitive.attributes = decodedAttributes;\n  if (decodedData.indices) {\n    // @ts-ignore\n    primitive.indices = getGLTFAccessor(decodedData.indices);\n  }\n\n  // Extension has been processed, delete it\n  // delete primitive.extensions[KHR_DRACO_MESH_COMPRESSION];\n\n  checkPrimitive(primitive);\n}\n\n// ENCODE\n\n// eslint-disable-next-line max-len\n// Only TRIANGLES: 0x0004 and TRIANGLE_STRIP: 0x0005 are supported\nfunction compressMesh(attributes, indices, mode: number = 4, options, context: LoaderContext) {\n  if (!options.DracoWriter) {\n    throw new Error('options.gltf.DracoWriter not provided');\n  }\n\n  // TODO - use DracoWriter using encode w/ registered DracoWriter...\n  const compressedData = options.DracoWriter.encodeSync({attributes});\n\n  // Draco compression may change the order and number of vertices in a mesh.\n  // To satisfy the requirement that accessors properties be correct for both\n  // compressed and uncompressed data, generators should create uncompressed\n  // attributes and indices using data that has been decompressed from the Draco buffer,\n  // rather than the original source data.\n  // @ts-ignore TODO this needs to be fixed\n  const decodedData = context?.parseSync?.({attributes});\n  const fauxAccessors = options._addFauxAttributes(decodedData.attributes);\n\n  const bufferViewIndex = options.addBufferView(compressedData);\n\n  const glTFMesh = {\n    primitives: [\n      {\n        attributes: fauxAccessors, // TODO - verify with spec\n        mode, // GL.POINTS\n        extensions: {\n          [KHR_DRACO_MESH_COMPRESSION]: {\n            bufferView: bufferViewIndex,\n            attributes: fauxAccessors // TODO - verify with spec\n          }\n        }\n      }\n    ]\n  };\n\n  return glTFMesh;\n}\n\n// UTILS\n\nfunction checkPrimitive(primitive: GLTFMeshPrimitive) {\n  if (!primitive.attributes && Object.keys(primitive.attributes).length > 0) {\n    throw new Error('glTF: Empty primitive detected: Draco decompression failure?');\n  }\n}\n\nfunction* makeMeshPrimitiveIterator(scenegraph) {\n  for (const mesh of scenegraph.json.meshes || []) {\n    for (const primitive of mesh.primitives) {\n      yield primitive;\n    }\n  }\n}\n"],"file":"KHR_draco_mesh_compression.js"}