import GLTFScenegraph from '../api/gltf-scenegraph';
import { KHR_BINARY_GLTF } from '../gltf-utils/gltf-constants';
export function decode(gltfData) {
  const gltfScenegraph = new GLTFScenegraph(gltfData);
  const {
    json
  } = gltfScenegraph;

  for (const node of json.images || []) {
    const extension = gltfScenegraph.removeObjectExtension(node, KHR_BINARY_GLTF);

    if (extension) {
      Object.assign(node, extension);
    }
  }

  if (json.buffers && json.buffers[0]) {
    delete json.buffers[0].uri;
  }

  gltfScenegraph.removeExtension(KHR_BINARY_GLTF);
}
export function encode() {
  throw new Error(KHR_BINARY_GLTF);
}
//# sourceMappingURL=KHR_binary_gltf.js.map