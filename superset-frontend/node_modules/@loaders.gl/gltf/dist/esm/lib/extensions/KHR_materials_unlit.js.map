{"version":3,"sources":["../../../../src/lib/extensions/KHR_materials_unlit.ts"],"names":["GLTFScenegraph","KHR_MATERIALS_UNLIT","decode","gltfData","gltfScenegraph","json","removeExtension","material","materials","extension","extensions","KHR_materials_unlit","unlit","removeObjectExtension","encode","addObjectExtension","addExtension"],"mappings":"AAKA,OAAOA,cAAP,MAA2B,wBAA3B;AACA,SAAQC,mBAAR,QAAkC,8BAAlC;AAEA,OAAO,eAAeC,MAAf,CAAsBC,QAAtB,EAA6D;AAClE,QAAMC,cAAc,GAAG,IAAIJ,cAAJ,CAAmBG,QAAnB,CAAvB;AACA,QAAM;AAACE,IAAAA;AAAD,MAASD,cAAf;AAGAA,EAAAA,cAAc,CAACE,eAAf,CAA+BL,mBAA/B;;AAIA,OAAK,MAAMM,QAAX,IAAuBF,IAAI,CAACG,SAAL,IAAkB,EAAzC,EAA6C;AAC3C,UAAMC,SAAS,GAAGF,QAAQ,CAACG,UAAT,IAAuBH,QAAQ,CAACG,UAAT,CAAoBC,mBAA7D;;AACA,QAAIF,SAAJ,EAAe;AAEbF,MAAAA,QAAQ,CAACK,KAAT,GAAiB,IAAjB;AACD;;AACDR,IAAAA,cAAc,CAACS,qBAAf,CAAqCN,QAArC,EAA+CN,mBAA/C;AACD;AACF;AAED,OAAO,SAASa,MAAT,CAAgBX,QAAhB,EAA0B;AAC/B,QAAMC,cAAc,GAAG,IAAIJ,cAAJ,CAAmBG,QAAnB,CAAvB;AACA,QAAM;AAACE,IAAAA;AAAD,MAASD,cAAf;;AAKA,MAAIA,cAAc,CAACI,SAAnB,EAA8B;AAC5B,SAAK,MAAMD,QAAX,IAAuBF,IAAI,CAACG,SAAL,IAAkB,EAAzC,EAA6C;AAE3C,UAAID,QAAQ,CAACK,KAAb,EAAoB;AAElB,eAAOL,QAAQ,CAACK,KAAhB;AACAR,QAAAA,cAAc,CAACW,kBAAf,CAAkCR,QAAlC,EAA4CN,mBAA5C,EAAiE,EAAjE;AACAG,QAAAA,cAAc,CAACY,YAAf,CAA4Bf,mBAA5B;AACD;AACF;AACF;AACF","sourcesContent":["// GLTF EXTENSION: KHR_materials_unlit\n// https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_unlit\n\nimport type {GLTF} from '../types/gltf-types';\n\nimport GLTFScenegraph from '../api/gltf-scenegraph';\nimport {KHR_MATERIALS_UNLIT} from '../gltf-utils/gltf-constants';\n\nexport async function decode(gltfData: {json: GLTF}): Promise<void> {\n  const gltfScenegraph = new GLTFScenegraph(gltfData);\n  const {json} = gltfScenegraph;\n\n  // Remove the top-level extension\n  gltfScenegraph.removeExtension(KHR_MATERIALS_UNLIT);\n\n  // Any nodes that have the extension, add lights field pointing to light object\n  // and remove the extension\n  for (const material of json.materials || []) {\n    const extension = material.extensions && material.extensions.KHR_materials_unlit;\n    if (extension) {\n      // @ts-ignore TODO\n      material.unlit = true;\n    }\n    gltfScenegraph.removeObjectExtension(material, KHR_MATERIALS_UNLIT);\n  }\n}\n\nexport function encode(gltfData) {\n  const gltfScenegraph = new GLTFScenegraph(gltfData);\n  const {json} = gltfScenegraph;\n\n  // Any nodes that have lights field pointing to light object\n  // add the extension\n  // @ts-ignore\n  if (gltfScenegraph.materials) {\n    for (const material of json.materials || []) {\n      // @ts-ignore\n      if (material.unlit) {\n        // @ts-ignore\n        delete material.unlit;\n        gltfScenegraph.addObjectExtension(material, KHR_MATERIALS_UNLIT, {});\n        gltfScenegraph.addExtension(KHR_MATERIALS_UNLIT);\n      }\n    }\n  }\n}\n"],"file":"KHR_materials_unlit.js"}