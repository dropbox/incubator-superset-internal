{"version":3,"sources":["../../../../src/lib/extensions/EXT_meshopt_compression.ts"],"names":["GLTFScenegraph","EXT_MESHOPT_COMPRESSION","isMeshoptSupported","meshoptDecodeGltfBuffer","DEFAULT_MESHOPT_OPTIONS","byteOffset","filter","decode","gltfData","options","gltf","decompressMeshes","promises","bufferViewIndex","json","bufferViews","push","decodeMeshoptBufferView","Promise","all","scenegraph","removeExtension","index","bufferView","meshoptExtension","extensions","buffer","buffers","byteLength","byteStride","count","mode","source","Uint8Array","result","ArrayBuffer"],"mappings":"AAEA,OAAOA,cAAP,MAA2B,wBAA3B;AACA,SAAQC,uBAAR,QAAsC,8BAAtC;AACA,SAAQC,kBAAR,EAA4BC,uBAA5B,QAA0D,+BAA1D;AAcA,MAAMC,uBAAuB,GAAG;AAC9BC,EAAAA,UAAU,EAAE,CADkB;AAE9BC,EAAAA,MAAM,EAAE;AAFsB,CAAhC;AAMA,OAAO,eAAeC,MAAf,CAAsBC,QAAtB,EAAgCC,OAAhC,EAA4D;AAAA;;AACjE,MAAI,EAACA,OAAD,aAACA,OAAD,gCAACA,OAAO,CAAEC,IAAV,0CAAC,cAAeC,gBAAhB,KAAoC,CAACT,kBAAkB,EAA3D,EAA+D;AAC7D;AACD;;AAED,QAAMU,QAAwB,GAAG,EAAjC;;AACA,OAAK,MAAMC,eAAX,IAA8BL,QAAQ,CAACM,IAAT,CAAcC,WAAd,IAA6B,EAA3D,EAA+D;AAC7DH,IAAAA,QAAQ,CAACI,IAAT,CAAcC,uBAAuB,CAACT,QAAQ,CAACM,IAAV,EAAgBD,eAAhB,CAArC;AACD;;AAGD,QAAMK,OAAO,CAACC,GAAR,CAAYP,QAAZ,CAAN;AAGA,QAAMQ,UAAU,GAAG,IAAIpB,cAAJ,CAAmBQ,QAAnB,CAAnB;AACAY,EAAAA,UAAU,CAACC,eAAX,CAA2BpB,uBAA3B;AACD;;AAGD,eAAegB,uBAAf,CAAuCH,IAAvC,EAA6CQ,KAA7C,EAAyF;AACvF,QAAMC,UAAU,GAAGT,IAAI,CAACC,WAAL,CAAiBO,KAAjB,CAAnB;AAEA,QAAME,gBAAgB,GACpBD,UAAU,CAACE,UAAX,IACCF,UAAU,CAACE,UAAX,CAAsBxB,uBAAtB,CAFH;;AAGA,MAAIuB,gBAAJ,EAAsB;AACpB,UAAME,MAAM,GAAGZ,IAAI,CAACa,OAAL,CAAaH,gBAAgB,CAACE,MAA9B,CAAf;AAEA,UAAM;AACJrB,MAAAA,UAAU,GAAG,CADT;AAEJuB,MAAAA,UAAU,GAAG,CAFT;AAGJC,MAAAA,UAHI;AAIJC,MAAAA,KAJI;AAKJC,MAAAA,IALI;AAMJzB,MAAAA,MAAM,GAAG;AANL,QAOFkB,gBAPJ;AAQA,UAAMQ,MAAM,GAAG,IAAIC,UAAJ,CAAeP,MAAf,EAAuBrB,UAAvB,EAAmCuB,UAAnC,CAAf;AACA,UAAMM,MAAM,GAAG,IAAIC,WAAJ,CAAgBL,KAAK,GAAGD,UAAxB,CAAf;AACA,UAAM1B,uBAAuB,CAAC,IAAI8B,UAAJ,CAAeC,MAAf,CAAD,EAAyBJ,KAAzB,EAAgCD,UAAhC,EAA4CG,MAA5C,EAAoDD,IAApD,EAA0DzB,MAA1D,CAA7B;AACA,WAAO4B,MAAP;AACD;;AAED,SAAO,IAAP;AACD","sourcesContent":["/* eslint-disable camelcase */\nimport type {GLTFLoaderOptions} from '../../gltf-loader';\nimport GLTFScenegraph from '../api/gltf-scenegraph';\nimport {EXT_MESHOPT_COMPRESSION} from '../gltf-utils/gltf-constants';\nimport {isMeshoptSupported, meshoptDecodeGltfBuffer} from '../../meshopt/meshopt-decoder';\n\ntype GLTF_EXT_meshopt_compression = {\n  buffer: number;\n  byteOffset?: number;\n  byteLength: number;\n  byteStride: number;\n  count: number;\n  mode: 'ATTRIBUTES' | 'TRIANGLES' | 'INDICES';\n  filter?: 'NONE' | 'OCTAHEDRAL' | 'QUATERNION' | 'EXPONENTIAL';\n};\n\n// @ts-ignore\n// eslint-disable-next-line\nconst DEFAULT_MESHOPT_OPTIONS = {\n  byteOffset: 0,\n  filter: 'NONE'\n};\n\n// Note: We have a \"soft dependency\" on DracoWriter to avoid bundling it when not needed\nexport async function decode(gltfData, options: GLTFLoaderOptions) {\n  if (!options?.gltf?.decompressMeshes || !isMeshoptSupported()) {\n    return;\n  }\n\n  const promises: Promise<any>[] = [];\n  for (const bufferViewIndex of gltfData.json.bufferViews || []) {\n    promises.push(decodeMeshoptBufferView(gltfData.json, bufferViewIndex));\n  }\n\n  // Decompress meshes in parallel\n  await Promise.all(promises);\n\n  // We have now decompressed all primitives, so remove the top-level extensions\n  const scenegraph = new GLTFScenegraph(gltfData);\n  scenegraph.removeExtension(EXT_MESHOPT_COMPRESSION);\n}\n\n/** Decode one meshopt buffer view */\nasync function decodeMeshoptBufferView(json, index: number): Promise<ArrayBuffer | null> {\n  const bufferView = json.bufferViews[index];\n\n  const meshoptExtension =\n    bufferView.extensions &&\n    (bufferView.extensions[EXT_MESHOPT_COMPRESSION] as GLTF_EXT_meshopt_compression);\n  if (meshoptExtension) {\n    const buffer = json.buffers[meshoptExtension.buffer];\n\n    const {\n      byteOffset = 0,\n      byteLength = 0,\n      byteStride,\n      count,\n      mode,\n      filter = 'NONE'\n    } = meshoptExtension;\n    const source = new Uint8Array(buffer, byteOffset, byteLength);\n    const result = new ArrayBuffer(count * byteStride);\n    await meshoptDecodeGltfBuffer(new Uint8Array(result), count, byteStride, source, mode, filter);\n    return result;\n  }\n\n  return null;\n}\n"],"file":"EXT_meshopt_compression.js"}