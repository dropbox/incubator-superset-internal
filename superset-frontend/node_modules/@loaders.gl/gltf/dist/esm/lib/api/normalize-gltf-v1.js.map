{"version":3,"sources":["../../../../src/lib/api/normalize-gltf-v1.js"],"names":["KHR_binary_glTF","GLTF_ARRAYS","accessors","animations","buffers","bufferViews","images","materials","meshes","nodes","samplers","scenes","skins","textures","GLTF_KEYS","accessor","buffer","bufferView","image","material","mesh","node","sampler","scene","skin","texture","GLTFV1Normalizer","constructor","gltf","idToIndexMap","normalize","options","json","asset","version","undefined","console","warn","Error","_addAsset","_convertTopLevelObjectsToArrays","decode","_convertObjectIdsToArrayIndices","_updateObjects","_updateMaterial","generator","arrayName","_convertTopLevelObjectToArray","mapName","objectMap","Array","isArray","id","object","index","length","push","_convertIdsToIndices","_convertIdToIndex","_convertTextureIds","_convertMeshIds","_convertNodeIds","_convertSceneIds","source","primitive","primitives","attributes","indices","attributeName","children","map","child","topLevelArrayName","key","Number","isFinite","type","pbrMetallicRoughness","baseColorFactor","metallicFactor","roughnessFactor","textureId","values","tex","textureIndex","findIndex","baseColorTexture","normalizeGLTFV1"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase */\nimport * as KHR_binary_glTF from '../extensions/KHR_binary_gltf';\n\n// Binary format changes (mainly implemented by GLBLoader)\n// https://github.com/KhronosGroup/glTF/tree/master/extensions/1.0/Khronos/KHR_binary_glTF\n\n// JSON format changes:\n// https://github.com/khronosgroup/gltf/issues/605\n\n// - [x] Top-level JSON objects are arrays now\n// - [ ] Removed indirection from animation: sampler now refers directly to accessors, #712\n// - [ ] material.parameter.value and technique.parameter.value must be an array, #690\n// - [ ] Node can have only one mesh #821\n// - [ ] Added reqs on JSON encoding\n// - [ ] Added reqs on binary data alignment #802 (comment)\n\n// Additions:\n// - [ ] Added accessor.normalized, #691, #706\n// - [ ] Added glExtensionsUsed property and 5125 (UNSIGNED_INT) accessor.componentType value, #619\n// - [ ] Added extensionsRequired property, #720, #721\n// - [ ] Added \"STEP\" as valid animation.sampler.interpolation value, #712\n\n// Removals:\n// - [x] Removed buffer.type, #786, #629\n// - [ ] Removed revision number from profile.version, #709\n// - [ ] Removed technique.functions.scissor and removed 3089 (SCISSOR_TEST) as a valid value for technique.states.enable, #681\n// - [ ] Techniques, programs, and shaders were moved out to KHR_technique_webgl extension.\n\n// Other edits:\n// - [x] asset is now required, #642\n// - [ ] buffer.byteLength and bufferView.byteLength are now required, #560.\n// - [ ] accessor.min and accessor.max are now required, #593, and clarified that the JSON value and binary data must be the same, #628.\n// - [ ] Clarified animation.sampler and animation.channel restrictions, #712\n// - [ ] skin.inverseBindMatrices is now optional, #461.\n// - [ ] Attribute parameters can't have a value defined in the technique or parameter, #563 (comment).\n// - [ ] Only TEXCOORD and COLOR attribute semantics can be written in the form [semantic]_[set_index], #563 (comment).\n// - [ ] TEXCOORD and COLOR attribute semantics must be written in the form [semantic]_[set_index], e.g., just TEXCOORD should be TEXCOORD_0, and just COLOR should be COLOR_0, #649\n// - [ ] camera.perspective.aspectRatio and camera.perspective.yfov must now be > 0, not >= 0, #563 (comment).\n// - [ ] Application-specific parameter semantics must start with an underscore, e.g., _TEMPERATURE and _SIMULATION_TIME, #563 (comment).\n// - [ ] Properties in technique.parameters must be defined in technique.uniforms or technique.attributes,\n\n// #563 (comment).\n// - [ ] technique.parameter.count can only be defined when the semantic is JOINTMATRIX or an application-specific semantic is used. It can never be defined for attribute parameters; only uniforms, d2f6945\n// - [ ] technique.parameter.semantic is required when the parameter is an attribute, 28e113d\n// - [ ] Mesh-only models are allowed, e.g., without materials, #642\n// - [ ] Skeleton hierarchies (nodes containing jointName) must be separated from non-skeleton hierarchies., #647\n// - [ ] technique.states.functions.blendColor and technique.states.functions.depthRange parameters now must match WebGL function min/max, #707\n\nconst GLTF_ARRAYS = {\n  accessors: 'accessor',\n  animations: 'animation',\n  buffers: 'buffer',\n  bufferViews: 'bufferView',\n  images: 'image',\n  materials: 'material',\n  meshes: 'mesh',\n  nodes: 'node',\n  samplers: 'sampler',\n  scenes: 'scene',\n  skins: 'skin',\n  textures: 'texture'\n};\n\nconst GLTF_KEYS = {\n  accessor: 'accessors',\n  animations: 'animation',\n  buffer: 'buffers',\n  bufferView: 'bufferViews',\n  image: 'images',\n  material: 'materials',\n  mesh: 'meshes',\n  node: 'nodes',\n  sampler: 'samplers',\n  scene: 'scenes',\n  skin: 'skins',\n  texture: 'textures'\n};\n\n/**\n * Converts (normalizes) glTF v1 to v2\n */\nclass GLTFV1Normalizer {\n  constructor(gltf) {\n    this.idToIndexMap = {\n      animations: {},\n      accessors: {},\n      buffers: {},\n      bufferViews: {},\n      images: {},\n      materials: {},\n      meshes: {},\n      nodes: {},\n      samplers: {},\n      scenes: {},\n      skins: {},\n      textures: {}\n    };\n  }\n\n  /**\n   * Convert (normalize) glTF < 2.0 to glTF 2.0\n   * @param gltf - object with json and binChunks\n   * @param options\n   * @param options normalize Whether to actually normalize\n   */\n  normalize(gltf, options) {\n    this.json = gltf.json;\n    const json = gltf.json;\n\n    // Check version\n    switch (json.asset && json.asset.version) {\n      // We are converting to v2 format. Return if there is nothing to do\n      case '2.0':\n        return;\n\n      // This class is written to convert 1.0\n      case undefined:\n      case '1.0':\n        break;\n\n      default:\n        // eslint-disable-next-line no-undef, no-console\n        console.warn(`glTF: Unknown version ${json.asset.version}`);\n        return;\n    }\n\n    if (!options.normalize) {\n      // We are still missing a few conversion tricks, remove once addressed\n      throw new Error('glTF v1 is not supported.');\n    }\n\n    // eslint-disable-next-line no-undef, no-console\n    console.warn('Converting glTF v1 to glTF v2 format. This is experimental and may fail.');\n\n    this._addAsset(json);\n\n    // In glTF2 top-level fields are Arrays not Object maps\n    this._convertTopLevelObjectsToArrays(json);\n\n    // Extract bufferView indices for images\n    // (this extension needs to be invoked early in the normalization process)\n    KHR_binary_glTF.decode(gltf);\n\n    // Convert object references from ids to indices\n    this._convertObjectIdsToArrayIndices(json);\n\n    this._updateObjects(json);\n\n    this._updateMaterial(json);\n  }\n\n  // asset is now required, #642 https://github.com/KhronosGroup/glTF/issues/639\n  _addAsset(json) {\n    json.asset = json.asset || {};\n    // We are normalizing to glTF v2, so change version to \"2.0\"\n    json.asset.version = '2.0';\n    json.asset.generator = json.asset.generator || 'Normalized to glTF 2.0 by loaders.gl';\n  }\n\n  _convertTopLevelObjectsToArrays(json) {\n    // TODO check that all arrays are covered\n    for (const arrayName in GLTF_ARRAYS) {\n      this._convertTopLevelObjectToArray(json, arrayName);\n    }\n  }\n\n  /** Convert one top level object to array */\n  _convertTopLevelObjectToArray(json, mapName) {\n    const objectMap = json[mapName];\n    if (!objectMap || Array.isArray(objectMap)) {\n      return;\n    }\n\n    // Rewrite the top-level field as an array\n    json[mapName] = [];\n    // Copy the map key into object.id\n    for (const id in objectMap) {\n      const object = objectMap[id];\n      object.id = object.id || id; // Mutates the loaded object\n      const index = json[mapName].length;\n      json[mapName].push(object);\n      this.idToIndexMap[mapName][id] = index;\n    }\n  }\n\n  /** Go through all objects in all top-level arrays and replace ids with indices */\n  _convertObjectIdsToArrayIndices(json) {\n    for (const arrayName in GLTF_ARRAYS) {\n      this._convertIdsToIndices(json, arrayName);\n    }\n    if ('scene' in json) {\n      json.scene = this._convertIdToIndex(json.scene, 'scene');\n    }\n\n    // Convert any index references that are not using array names\n\n    // texture.source (image)\n    for (const texture of json.textures) {\n      this._convertTextureIds(texture);\n    }\n    for (const mesh of json.meshes) {\n      this._convertMeshIds(mesh);\n    }\n    for (const node of json.nodes) {\n      this._convertNodeIds(node);\n    }\n    for (const node of json.scenes) {\n      this._convertSceneIds(node);\n    }\n  }\n\n  _convertTextureIds(texture) {\n    if (texture.source) {\n      texture.source = this._convertIdToIndex(texture.source, 'image');\n    }\n  }\n\n  _convertMeshIds(mesh) {\n    for (const primitive of mesh.primitives) {\n      const {attributes, indices, material} = primitive;\n      for (const attributeName in attributes) {\n        attributes[attributeName] = this._convertIdToIndex(attributes[attributeName], 'accessor');\n      }\n      if (indices) {\n        primitive.indices = this._convertIdToIndex(indices, 'accessor');\n      }\n      if (material) {\n        primitive.material = this._convertIdToIndex(material, 'material');\n      }\n    }\n  }\n\n  _convertNodeIds(node) {\n    if (node.children) {\n      node.children = node.children.map((child) => this._convertIdToIndex(child, 'node'));\n    }\n    if (node.meshes) {\n      node.meshes = node.meshes.map((mesh) => this._convertIdToIndex(mesh, 'mesh'));\n    }\n  }\n\n  _convertSceneIds(scene) {\n    if (scene.nodes) {\n      scene.nodes = scene.nodes.map((node) => this._convertIdToIndex(node, 'node'));\n    }\n  }\n\n  /** Go through all objects in a top-level array and replace ids with indices */\n  _convertIdsToIndices(json, topLevelArrayName) {\n    if (!json[topLevelArrayName]) {\n      console.warn(`gltf v1: json doesn't contain attribute ${topLevelArrayName}`); // eslint-disable-line no-console, no-undef\n      json[topLevelArrayName] = [];\n    }\n    for (const object of json[topLevelArrayName]) {\n      for (const key in object) {\n        const id = object[key];\n        const index = this._convertIdToIndex(id, key);\n        object[key] = index;\n      }\n    }\n  }\n\n  _convertIdToIndex(id, key) {\n    const arrayName = GLTF_KEYS[key];\n    if (arrayName in this.idToIndexMap) {\n      const index = this.idToIndexMap[arrayName][id];\n      if (!Number.isFinite(index)) {\n        throw new Error(`gltf v1: failed to resolve ${key} with id ${id}`);\n      }\n      return index;\n    }\n    return id;\n  }\n\n  /**\n   *\n   * @param {*} json\n   */\n  _updateObjects(json) {\n    for (const buffer of this.json.buffers) {\n      // - [x] Removed buffer.type, #786, #629\n      delete buffer.type;\n    }\n  }\n\n  /**\n   * Update material (set pbrMetallicRoughness)\n   * @param {*} json\n   */\n  _updateMaterial(json) {\n    for (const material of json.materials) {\n      material.pbrMetallicRoughness = {\n        baseColorFactor: [1, 1, 1, 1],\n        metallicFactor: 1,\n        roughnessFactor: 1\n      };\n\n      const textureId = material.values && material.values.tex;\n      const textureIndex = json.textures.findIndex((texture) => texture.id === textureId);\n      if (textureIndex !== -1) {\n        material.pbrMetallicRoughness.baseColorTexture = {index: textureIndex};\n      }\n    }\n  }\n}\n\nexport function normalizeGLTFV1(gltf, options = {}) {\n  return new GLTFV1Normalizer().normalize(gltf, options);\n}\n"],"file":"normalize-gltf-v1.js"}