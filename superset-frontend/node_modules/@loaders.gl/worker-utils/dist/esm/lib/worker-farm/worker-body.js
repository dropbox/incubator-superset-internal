import { getTransferList } from '../worker-utils/get-transfer-list';
const onMessageWrapperMap = new Map();
export default class WorkerBody {
  static set onmessage(onMessage) {
    self.onmessage = message => {
      if (!isKnownMessage(message)) {
        return;
      }

      const {
        type,
        payload
      } = message.data;
      onMessage(type, payload);
    };
  }

  static addEventListener(onMessage) {
    let onMessageWrapper = onMessageWrapperMap.get(onMessage);

    if (!onMessageWrapper) {
      onMessageWrapper = message => {
        if (!isKnownMessage(message)) {
          return;
        }

        const {
          type,
          payload
        } = message.data;
        onMessage(type, payload);
      };
    }

    self.addEventListener('message', onMessageWrapper);
  }

  static removeEventListener(onMessage) {
    const onMessageWrapper = onMessageWrapperMap.get(onMessage);
    onMessageWrapperMap.delete(onMessage);
    self.removeEventListener('message', onMessageWrapper);
  }

  static postMessage(type, payload) {
    if (self) {
      const data = {
        source: 'loaders.gl',
        type,
        payload
      };
      const transferList = getTransferList(payload);
      self.postMessage(data, transferList);
    }
  }

}

function isKnownMessage(message) {
  const {
    type,
    data
  } = message;
  return type === 'message' && data && typeof data.source === 'string' && data.source.startsWith('loaders.gl');
}
//# sourceMappingURL=worker-body.js.map