{"version":3,"sources":["../../../../src/lib/worker-farm/worker-thread.ts"],"names":["assert","getLoadableWorkerURL","getTransferList","NOOP","WorkerThread","isSupported","Worker","constructor","props","name","source","url","onMessage","onError","error","console","log","worker","_createBrowserWorker","destroy","terminate","terminated","isRunning","Boolean","postMessage","data","transferList","_getErrorFromErrorEvent","event","message","lineno","colno","Error","_loadableURL","onmessage","onerror","onmessageerror"],"mappings":"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","sourcesContent":["import {assert} from '../env-utils/assert';\nimport {getLoadableWorkerURL} from '../worker-utils/get-loadable-worker-url';\nimport {getTransferList} from '../worker-utils/get-transfer-list';\n\nconst NOOP = () => {};\n\nexport type WorkerThreadProps = {\n  name: string;\n  source?: string;\n  url?: string;\n};\n\n/**\n * Represents one worker thread\n */\nexport default class WorkerThread {\n  readonly name: string;\n  readonly source: string | undefined;\n  readonly url: string | undefined;\n  terminated: boolean = false;\n  worker: Worker;\n  onMessage: (message: any) => void;\n  onError: (error: Error) => void;\n\n  private _loadableURL: string = '';\n\n  static isSupported(): boolean {\n    return typeof Worker !== 'undefined';\n  }\n\n  constructor(props: WorkerThreadProps) {\n    const {name, source, url} = props;\n    assert(source || url); // Either source or url must be defined\n    this.name = name;\n    this.source = source;\n    this.url = url;\n    this.onMessage = NOOP;\n    this.onError = (error) => console.log(error); // eslint-disable-line\n\n    this.worker = this._createBrowserWorker();\n  }\n\n  /**\n   * Terminate this worker thread\n   * @note Can free up significant memory\n   */\n  destroy(): void {\n    this.onMessage = NOOP;\n    this.onError = NOOP;\n    // @ts-ignore\n    this.worker.terminate();\n    this.terminated = true;\n  }\n\n  get isRunning() {\n    return Boolean(this.onMessage);\n  }\n\n  /**\n   * Send a message to this worker thread\n   * @param data any data structure, ideally consisting mostly of transferrable objects\n   * @param transferList If not supplied, calculated automatically by traversing data\n   */\n  postMessage(data: any, transferList?: any[]): void {\n    transferList = transferList || getTransferList(data);\n    // @ts-ignore\n    this.worker.postMessage(data, transferList);\n  }\n\n  // PRIVATE\n\n  /**\n   * Generate a standard Error from an ErrorEvent\n   * @param {ErrorEvent} event\n   */\n  _getErrorFromErrorEvent(event) {\n    // Note Error object does not have the expected fields if loading failed completely\n    // https://developer.mozilla.org/en-US/docs/Web/API/Worker#Event_handlers\n    // https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent\n    let message = 'Failed to load ';\n    message += `worker ${this.name}. `;\n    if (event.message) {\n      message += `${event.message} in `;\n    }\n    // const hasFilename = event.filename && !event.filename.startsWith('blob:');\n    // message += hasFilename ? event.filename : this.source.slice(0, 100);\n    if (event.lineno) {\n      message += `:${event.lineno}:${event.colno}`;\n    }\n    return new Error(message);\n  }\n\n  /**\n   * Creates a worker thread on the browser\n   */\n  _createBrowserWorker() {\n    this._loadableURL = getLoadableWorkerURL({source: this.source, url: this.url});\n    const worker = new Worker(this._loadableURL, {name: this.name});\n\n    worker.onmessage = (event) => {\n      if (!event.data) {\n        this.onError(new Error('No data received'));\n      } else {\n        this.onMessage(event.data);\n      }\n    };\n    // This callback represents an uncaught exception in the worker thread\n    worker.onerror = (error) => {\n      this.onError(this._getErrorFromErrorEvent(error));\n      this.terminated = true;\n    };\n    // TODO - not clear when this would be called, for now just log in case it happens\n    worker.onmessageerror = (event) => console.error(event); // eslint-disable-line\n\n    return worker;\n  }\n}\n"],"file":"worker-thread.js"}