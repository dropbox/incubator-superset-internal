{"version":3,"sources":["../../../../src/lib/worker-farm/worker-body.ts"],"names":["getTransferList","onMessageWrapperMap","Map","WorkerBody","onmessage","onMessage","self","message","isKnownMessage","type","payload","data","addEventListener","onMessageWrapper","get","removeEventListener","delete","postMessage","source","transferList","startsWith"],"mappings":"AACA,SAAQA,eAAR,QAA8B,mCAA9B;AAEA,MAAMC,mBAAmB,GAAG,IAAIC,GAAJ,EAA5B;AAKA,eAAe,MAAMC,UAAN,CAAiB;AAIV,aAATC,SAAS,CAACC,SAAD,EAA6E;AAE/FC,IAAAA,IAAI,CAACF,SAAL,GAAkBG,OAAD,IAAa;AAC5B,UAAI,CAACC,cAAc,CAACD,OAAD,CAAnB,EAA8B;AAC5B;AACD;;AAGD,YAAM;AAACE,QAAAA,IAAD;AAAOC,QAAAA;AAAP,UAAkBH,OAAO,CAACI,IAAhC;AACAN,MAAAA,SAAS,CAACI,IAAD,EAAOC,OAAP,CAAT;AACD,KARD;AASD;;AAEsB,SAAhBE,gBAAgB,CACrBP,SADqB,EAErB;AACA,QAAIQ,gBAAgB,GAAGZ,mBAAmB,CAACa,GAApB,CAAwBT,SAAxB,CAAvB;;AAEA,QAAI,CAACQ,gBAAL,EAAuB;AACrBA,MAAAA,gBAAgB,GAAIN,OAAD,IAAa;AAC9B,YAAI,CAACC,cAAc,CAACD,OAAD,CAAnB,EAA8B;AAC5B;AACD;;AAGD,cAAM;AAACE,UAAAA,IAAD;AAAOC,UAAAA;AAAP,YAAkBH,OAAO,CAACI,IAAhC;AACAN,QAAAA,SAAS,CAACI,IAAD,EAAOC,OAAP,CAAT;AACD,OARD;AASD;;AAGDJ,IAAAA,IAAI,CAACM,gBAAL,CAAsB,SAAtB,EAAiCC,gBAAjC;AACD;;AAEyB,SAAnBE,mBAAmB,CACxBV,SADwB,EAExB;AACA,UAAMQ,gBAAgB,GAAGZ,mBAAmB,CAACa,GAApB,CAAwBT,SAAxB,CAAzB;AACAJ,IAAAA,mBAAmB,CAACe,MAApB,CAA2BX,SAA3B;AAEAC,IAAAA,IAAI,CAACS,mBAAL,CAAyB,SAAzB,EAAoCF,gBAApC;AACD;;AAOiB,SAAXI,WAAW,CAACR,IAAD,EAA0BC,OAA1B,EAA+D;AAC/E,QAAIJ,IAAJ,EAAU;AACR,YAAMK,IAAuB,GAAG;AAACO,QAAAA,MAAM,EAAE,YAAT;AAAuBT,QAAAA,IAAvB;AAA6BC,QAAAA;AAA7B,OAAhC;AACA,YAAMS,YAAY,GAAGnB,eAAe,CAACU,OAAD,CAApC;AAGAJ,MAAAA,IAAI,CAACW,WAAL,CAAiBN,IAAjB,EAAuBQ,YAAvB;AACD;AACF;;AA5D6B;;AAgEhC,SAASX,cAAT,CAAwBD,OAAxB,EAAiC;AAC/B,QAAM;AAACE,IAAAA,IAAD;AAAOE,IAAAA;AAAP,MAAeJ,OAArB;AACA,SACEE,IAAI,KAAK,SAAT,IACAE,IADA,IAEA,OAAOA,IAAI,CAACO,MAAZ,KAAuB,QAFvB,IAGAP,IAAI,CAACO,MAAL,CAAYE,UAAZ,CAAuB,YAAvB,CAJF;AAMD","sourcesContent":["import type {WorkerMessageData, WorkerMessageType, WorkerMessagePayload} from '../../types';\nimport {getTransferList} from '../worker-utils/get-transfer-list';\n\nconst onMessageWrapperMap = new Map();\n\n/**\n * Type safe wrapper for worker code\n */\nexport default class WorkerBody {\n  /*\n   * (type: WorkerMessageType, payload: WorkerMessagePayload) => any\n   */\n  static set onmessage(onMessage: (type: WorkerMessageType, payload: WorkerMessagePayload) => any) {\n    // eslint-disable-next-line no-restricted-globals\n    self.onmessage = (message) => {\n      if (!isKnownMessage(message)) {\n        return;\n      }\n\n      // Confusingly the message itself also has a 'type' field which is always set to 'message'\n      const {type, payload} = message.data;\n      onMessage(type, payload);\n    };\n  }\n\n  static addEventListener(\n    onMessage: (type: WorkerMessageType, payload: WorkerMessagePayload) => any\n  ) {\n    let onMessageWrapper = onMessageWrapperMap.get(onMessage);\n\n    if (!onMessageWrapper) {\n      onMessageWrapper = (message) => {\n        if (!isKnownMessage(message)) {\n          return;\n        }\n\n        // Confusingly the message itself also has a 'type' field which is always set to 'message'\n        const {type, payload} = message.data;\n        onMessage(type, payload);\n      };\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    self.addEventListener('message', onMessageWrapper);\n  }\n\n  static removeEventListener(\n    onMessage: (type: WorkerMessageType, payload: WorkerMessagePayload) => any\n  ) {\n    const onMessageWrapper = onMessageWrapperMap.get(onMessage);\n    onMessageWrapperMap.delete(onMessage);\n    // eslint-disable-next-line no-restricted-globals\n    self.removeEventListener('message', onMessageWrapper);\n  }\n\n  /**\n   * Send a message from a worker to creating thread (main thread)\n   * @param type\n   * @param payload\n   */\n  static postMessage(type: WorkerMessageType, payload: WorkerMessagePayload): void {\n    if (self) {\n      const data: WorkerMessageData = {source: 'loaders.gl', type, payload};\n      const transferList = getTransferList(payload);\n      // eslint-disable-next-line no-restricted-globals\n      // @ts-ignore\n      self.postMessage(data, transferList);\n    }\n  }\n}\n\n// Filter out noise messages sent to workers\nfunction isKnownMessage(message) {\n  const {type, data} = message;\n  return (\n    type === 'message' &&\n    data &&\n    typeof data.source === 'string' &&\n    data.source.startsWith('loaders.gl')\n  );\n}\n"],"file":"worker-body.js"}