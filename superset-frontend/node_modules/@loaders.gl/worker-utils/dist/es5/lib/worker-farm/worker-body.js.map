{"version":3,"sources":["../../../../src/lib/worker-farm/worker-body.ts"],"names":["onMessageWrapperMap","Map","WorkerBody","onMessage","self","onmessage","message","isKnownMessage","data","type","payload","onMessageWrapper","get","addEventListener","delete","removeEventListener","source","transferList","postMessage","startsWith"],"mappings":";;;;;;;;;;;;;AACA;;AAEA,IAAMA,mBAAmB,GAAG,IAAIC,GAAJ,EAA5B;;IAKqBC,U;;;;;;;SAInB,aAAqBC,SAArB,EAAiG;AAE/FC,MAAAA,IAAI,CAACC,SAAL,GAAiB,UAACC,OAAD,EAAa;AAC5B,YAAI,CAACC,cAAc,CAACD,OAAD,CAAnB,EAA8B;AAC5B;AACD;;AAGD,4BAAwBA,OAAO,CAACE,IAAhC;AAAA,YAAOC,IAAP,iBAAOA,IAAP;AAAA,YAAaC,OAAb,iBAAaA,OAAb;AACAP,QAAAA,SAAS,CAACM,IAAD,EAAOC,OAAP,CAAT;AACD,OARD;AASD;;;WAED,0BACEP,SADF,EAEE;AACA,UAAIQ,gBAAgB,GAAGX,mBAAmB,CAACY,GAApB,CAAwBT,SAAxB,CAAvB;;AAEA,UAAI,CAACQ,gBAAL,EAAuB;AACrBA,QAAAA,gBAAgB,GAAG,0BAACL,OAAD,EAAa;AAC9B,cAAI,CAACC,cAAc,CAACD,OAAD,CAAnB,EAA8B;AAC5B;AACD;;AAGD,+BAAwBA,OAAO,CAACE,IAAhC;AAAA,cAAOC,IAAP,kBAAOA,IAAP;AAAA,cAAaC,OAAb,kBAAaA,OAAb;AACAP,UAAAA,SAAS,CAACM,IAAD,EAAOC,OAAP,CAAT;AACD,SARD;AASD;;AAGDN,MAAAA,IAAI,CAACS,gBAAL,CAAsB,SAAtB,EAAiCF,gBAAjC;AACD;;;WAED,6BACER,SADF,EAEE;AACA,UAAMQ,gBAAgB,GAAGX,mBAAmB,CAACY,GAApB,CAAwBT,SAAxB,CAAzB;AACAH,MAAAA,mBAAmB,CAACc,MAApB,CAA2BX,SAA3B;AAEAC,MAAAA,IAAI,CAACW,mBAAL,CAAyB,SAAzB,EAAoCJ,gBAApC;AACD;;;WAOD,qBAAmBF,IAAnB,EAA4CC,OAA5C,EAAiF;AAC/E,UAAIN,IAAJ,EAAU;AACR,YAAMI,IAAuB,GAAG;AAACQ,UAAAA,MAAM,EAAE,YAAT;AAAuBP,UAAAA,IAAI,EAAJA,IAAvB;AAA6BC,UAAAA,OAAO,EAAPA;AAA7B,SAAhC;AACA,YAAMO,YAAY,GAAG,sCAAgBP,OAAhB,CAArB;AAGAN,QAAAA,IAAI,CAACc,WAAL,CAAiBV,IAAjB,EAAuBS,YAAvB;AACD;AACF;;;;;;;AAIH,SAASV,cAAT,CAAwBD,OAAxB,EAAiC;AAC/B,MAAOG,IAAP,GAAqBH,OAArB,CAAOG,IAAP;AAAA,MAAaD,IAAb,GAAqBF,OAArB,CAAaE,IAAb;AACA,SACEC,IAAI,KAAK,SAAT,IACAD,IADA,IAEA,OAAOA,IAAI,CAACQ,MAAZ,KAAuB,QAFvB,IAGAR,IAAI,CAACQ,MAAL,CAAYG,UAAZ,CAAuB,YAAvB,CAJF;AAMD","sourcesContent":["import type {WorkerMessageData, WorkerMessageType, WorkerMessagePayload} from '../../types';\nimport {getTransferList} from '../worker-utils/get-transfer-list';\n\nconst onMessageWrapperMap = new Map();\n\n/**\n * Type safe wrapper for worker code\n */\nexport default class WorkerBody {\n  /*\n   * (type: WorkerMessageType, payload: WorkerMessagePayload) => any\n   */\n  static set onmessage(onMessage: (type: WorkerMessageType, payload: WorkerMessagePayload) => any) {\n    // eslint-disable-next-line no-restricted-globals\n    self.onmessage = (message) => {\n      if (!isKnownMessage(message)) {\n        return;\n      }\n\n      // Confusingly the message itself also has a 'type' field which is always set to 'message'\n      const {type, payload} = message.data;\n      onMessage(type, payload);\n    };\n  }\n\n  static addEventListener(\n    onMessage: (type: WorkerMessageType, payload: WorkerMessagePayload) => any\n  ) {\n    let onMessageWrapper = onMessageWrapperMap.get(onMessage);\n\n    if (!onMessageWrapper) {\n      onMessageWrapper = (message) => {\n        if (!isKnownMessage(message)) {\n          return;\n        }\n\n        // Confusingly the message itself also has a 'type' field which is always set to 'message'\n        const {type, payload} = message.data;\n        onMessage(type, payload);\n      };\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    self.addEventListener('message', onMessageWrapper);\n  }\n\n  static removeEventListener(\n    onMessage: (type: WorkerMessageType, payload: WorkerMessagePayload) => any\n  ) {\n    const onMessageWrapper = onMessageWrapperMap.get(onMessage);\n    onMessageWrapperMap.delete(onMessage);\n    // eslint-disable-next-line no-restricted-globals\n    self.removeEventListener('message', onMessageWrapper);\n  }\n\n  /**\n   * Send a message from a worker to creating thread (main thread)\n   * @param type\n   * @param payload\n   */\n  static postMessage(type: WorkerMessageType, payload: WorkerMessagePayload): void {\n    if (self) {\n      const data: WorkerMessageData = {source: 'loaders.gl', type, payload};\n      const transferList = getTransferList(payload);\n      // eslint-disable-next-line no-restricted-globals\n      // @ts-ignore\n      self.postMessage(data, transferList);\n    }\n  }\n}\n\n// Filter out noise messages sent to workers\nfunction isKnownMessage(message) {\n  const {type, data} = message;\n  return (\n    type === 'message' &&\n    data &&\n    typeof data.source === 'string' &&\n    data.source.startsWith('loaders.gl')\n  );\n}\n"],"file":"worker-body.js"}