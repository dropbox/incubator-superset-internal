{"version":3,"sources":["../../../../src/lib/worker-farm/worker-thread.ts"],"names":["NOOP","WorkerThread","props","name","source","url","onMessage","onError","error","console","log","worker","_createBrowserWorker","terminate","terminated","Boolean","data","transferList","postMessage","event","message","lineno","colno","Error","_loadableURL","Worker","onmessage","onerror","_getErrorFromErrorEvent","onmessageerror"],"mappings":"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","sourcesContent":["import {assert} from '../env-utils/assert';\nimport {getLoadableWorkerURL} from '../worker-utils/get-loadable-worker-url';\nimport {getTransferList} from '../worker-utils/get-transfer-list';\n\nconst NOOP = () => {};\n\nexport type WorkerThreadProps = {\n  name: string;\n  source?: string;\n  url?: string;\n};\n\n/**\n * Represents one worker thread\n */\nexport default class WorkerThread {\n  readonly name: string;\n  readonly source: string | undefined;\n  readonly url: string | undefined;\n  terminated: boolean = false;\n  worker: Worker;\n  onMessage: (message: any) => void;\n  onError: (error: Error) => void;\n\n  private _loadableURL: string = '';\n\n  static isSupported(): boolean {\n    return typeof Worker !== 'undefined';\n  }\n\n  constructor(props: WorkerThreadProps) {\n    const {name, source, url} = props;\n    assert(source || url); // Either source or url must be defined\n    this.name = name;\n    this.source = source;\n    this.url = url;\n    this.onMessage = NOOP;\n    this.onError = (error) => console.log(error); // eslint-disable-line\n\n    this.worker = this._createBrowserWorker();\n  }\n\n  /**\n   * Terminate this worker thread\n   * @note Can free up significant memory\n   */\n  destroy(): void {\n    this.onMessage = NOOP;\n    this.onError = NOOP;\n    // @ts-ignore\n    this.worker.terminate();\n    this.terminated = true;\n  }\n\n  get isRunning() {\n    return Boolean(this.onMessage);\n  }\n\n  /**\n   * Send a message to this worker thread\n   * @param data any data structure, ideally consisting mostly of transferrable objects\n   * @param transferList If not supplied, calculated automatically by traversing data\n   */\n  postMessage(data: any, transferList?: any[]): void {\n    transferList = transferList || getTransferList(data);\n    // @ts-ignore\n    this.worker.postMessage(data, transferList);\n  }\n\n  // PRIVATE\n\n  /**\n   * Generate a standard Error from an ErrorEvent\n   * @param {ErrorEvent} event\n   */\n  _getErrorFromErrorEvent(event) {\n    // Note Error object does not have the expected fields if loading failed completely\n    // https://developer.mozilla.org/en-US/docs/Web/API/Worker#Event_handlers\n    // https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent\n    let message = 'Failed to load ';\n    message += `worker ${this.name}. `;\n    if (event.message) {\n      message += `${event.message} in `;\n    }\n    // const hasFilename = event.filename && !event.filename.startsWith('blob:');\n    // message += hasFilename ? event.filename : this.source.slice(0, 100);\n    if (event.lineno) {\n      message += `:${event.lineno}:${event.colno}`;\n    }\n    return new Error(message);\n  }\n\n  /**\n   * Creates a worker thread on the browser\n   */\n  _createBrowserWorker() {\n    this._loadableURL = getLoadableWorkerURL({source: this.source, url: this.url});\n    const worker = new Worker(this._loadableURL, {name: this.name});\n\n    worker.onmessage = (event) => {\n      if (!event.data) {\n        this.onError(new Error('No data received'));\n      } else {\n        this.onMessage(event.data);\n      }\n    };\n    // This callback represents an uncaught exception in the worker thread\n    worker.onerror = (error) => {\n      this.onError(this._getErrorFromErrorEvent(error));\n      this.terminated = true;\n    };\n    // TODO - not clear when this would be called, for now just log in case it happens\n    worker.onmessageerror = (event) => console.error(event); // eslint-disable-line\n\n    return worker;\n  }\n}\n"],"file":"worker-thread.js"}