{"version":3,"sources":["../../../../src/lib/binary-vector-tile/features-to-binary.js"],"names":["earcut","featuresToBinary","features","firstPassData","options","fillArrays","numericPropKeys","extractNumericPropKeys","PositionDataType","Float32Array","TEST_EXPORTS","feature","properties","key","numericSoFar","undefined","val","isNumeric","Object","keys","filter","k","pointPositionsCount","pointFeaturesCount","linePositionsCount","linePathsCount","lineFeaturesCount","polygonPositionsCount","polygonObjectsCount","polygonRingsCount","polygonFeaturesCount","hasGlobalId","coordLength","GlobalFeatureIdsDataType","length","Uint32Array","Uint16Array","points","positions","globalFeatureIds","featureIds","numericProps","fields","lines","pathIndices","polygons","polygonIndices","primitivePolygonIndices","triangles","object","propName","indexMap","pointPosition","pointFeature","linePosition","linePath","lineFeature","polygonPosition","polygonObject","polygonRing","polygonFeature","geometry","type","handlePoint","push","keepStringProperties","id","handleLineString","handlePolygon","Error","makeAccessorObjects","set","data","nPositions","fillNumericProperties","fill","i","il","start","end","l","ll","startPosition","areas","nextLines","endPosition","triangulatePolygon","polygonPositions","subarray","offset","holes","slice","map","n","indices","t","tl","returnObj","value","size","geomType","numericProp","index","numericPropName","numericKeys","props","includes","x","Number","isFinite"],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport {earcut} from '@math.gl/polygon';\n\n/**\n * Convert binary features to flat binary arrays. Similar to\n * `geojsonToBinary` helper function, except that it expects\n * a binary representation of the feature data, which enables\n * 2X-3X speed increase in parse speed, compared to using\n * geoJSON. See `binary-vector-tile/VectorTileFeature` for\n * data format detais\n */\nexport function featuresToBinary(features, firstPassData, options = {}) {\n  return fillArrays(features, firstPassData, {\n    numericPropKeys: options.numericPropKeys || extractNumericPropKeys(features),\n    PositionDataType: options.PositionDataType || Float32Array\n  });\n}\n\nexport const TEST_EXPORTS = {\n  extractNumericPropKeys,\n  fillArrays\n};\n\n// Extracts properties that are always numeric\n// eslint-disable-next-line complexity, max-statements\nfunction extractNumericPropKeys(features) {\n  const numericPropKeys = {};\n  for (const feature of features) {\n    if (feature.properties) {\n      for (const key in feature.properties) {\n        // If property has not been seen before, or if property has been numeric\n        // in all previous features, check if numeric in this feature\n        // If not numeric, false is stored to prevent rechecking in the future\n        const numericSoFar = numericPropKeys[key];\n        // eslint-disable-next-line max-depth\n        if (numericSoFar || numericSoFar === undefined) {\n          const val = feature.properties[key];\n          numericPropKeys[key] = isNumeric(val);\n        }\n      }\n    }\n  }\n\n  return Object.keys(numericPropKeys).filter((k) => numericPropKeys[k]);\n}\n\n// Fills coordinates into pre-allocated typed arrays\n// eslint-disable-next-line complexity\nfunction fillArrays(features, firstPassData = {}, options = {}) {\n  const {\n    pointPositionsCount,\n    pointFeaturesCount,\n    linePositionsCount,\n    linePathsCount,\n    lineFeaturesCount,\n    polygonPositionsCount,\n    polygonObjectsCount,\n    polygonRingsCount,\n    polygonFeaturesCount\n  } = firstPassData;\n  const {numericPropKeys, PositionDataType = Float32Array} = options;\n  const hasGlobalId = features[0] && 'id' in features[0];\n  const coordLength = 2;\n  const GlobalFeatureIdsDataType = features.length > 65535 ? Uint32Array : Uint16Array;\n  const points = {\n    positions: new PositionDataType(pointPositionsCount * coordLength),\n    globalFeatureIds: new GlobalFeatureIdsDataType(pointPositionsCount),\n    featureIds:\n      pointFeaturesCount > 65535\n        ? new Uint32Array(pointPositionsCount)\n        : new Uint16Array(pointPositionsCount),\n    numericProps: {},\n    properties: [],\n    fields: []\n  };\n  const lines = {\n    pathIndices:\n      linePositionsCount > 65535\n        ? new Uint32Array(linePathsCount + 1)\n        : new Uint16Array(linePathsCount + 1),\n    positions: new PositionDataType(linePositionsCount * coordLength),\n    globalFeatureIds: new GlobalFeatureIdsDataType(linePositionsCount),\n    featureIds:\n      lineFeaturesCount > 65535\n        ? new Uint32Array(linePositionsCount)\n        : new Uint16Array(linePositionsCount),\n    numericProps: {},\n    properties: [],\n    fields: []\n  };\n  const polygons = {\n    polygonIndices:\n      polygonPositionsCount > 65535\n        ? new Uint32Array(polygonObjectsCount + 1)\n        : new Uint16Array(polygonObjectsCount + 1),\n    primitivePolygonIndices:\n      polygonPositionsCount > 65535\n        ? new Uint32Array(polygonRingsCount + 1)\n        : new Uint16Array(polygonRingsCount + 1),\n    positions: new PositionDataType(polygonPositionsCount * coordLength),\n    triangles: [],\n    globalFeatureIds: new GlobalFeatureIdsDataType(polygonPositionsCount),\n    featureIds:\n      polygonFeaturesCount > 65535\n        ? new Uint32Array(polygonPositionsCount)\n        : new Uint16Array(polygonPositionsCount),\n    numericProps: {},\n    properties: [],\n    fields: []\n  };\n\n  // Instantiate numeric properties arrays; one value per vertex\n  for (const object of [points, lines, polygons]) {\n    for (const propName of numericPropKeys) {\n      // If property has been numeric in all previous features in which the property existed, check\n      // if numeric in this feature\n      object.numericProps[propName] = new Float32Array(object.positions.length / coordLength);\n    }\n  }\n\n  // Set last element of path/polygon indices as positions length\n  lines.pathIndices[linePathsCount] = linePositionsCount;\n  polygons.polygonIndices[polygonObjectsCount] = polygonPositionsCount;\n  polygons.primitivePolygonIndices[polygonRingsCount] = polygonPositionsCount;\n\n  const indexMap = {\n    pointPosition: 0,\n    pointFeature: 0,\n    linePosition: 0,\n    linePath: 0,\n    lineFeature: 0,\n    polygonPosition: 0,\n    polygonObject: 0,\n    polygonRing: 0,\n    polygonFeature: 0,\n    feature: 0\n  };\n\n  for (const feature of features) {\n    const geometry = feature.geometry;\n    const properties = feature.properties || {};\n\n    switch (geometry.type) {\n      case 'Point':\n      case 'MultiPoint':\n        handlePoint(geometry, points, indexMap, coordLength, properties);\n        points.properties.push(keepStringProperties(properties, numericPropKeys));\n        if (hasGlobalId) {\n          points.fields.push({id: feature.id});\n        }\n        indexMap.pointFeature++;\n        break;\n      case 'LineString':\n      case 'MultiLineString':\n        handleLineString(geometry, lines, indexMap, coordLength, properties);\n        lines.properties.push(keepStringProperties(properties, numericPropKeys));\n        if (hasGlobalId) {\n          lines.fields.push({id: feature.id});\n        }\n        indexMap.lineFeature++;\n        break;\n      case 'Polygon':\n      case 'MultiPolygon':\n        handlePolygon(geometry, polygons, indexMap, coordLength, properties);\n        polygons.properties.push(keepStringProperties(properties, numericPropKeys));\n        if (hasGlobalId) {\n          polygons.fields.push({id: feature.id});\n        }\n        indexMap.polygonFeature++;\n        break;\n      default:\n        throw new Error('Invalid geometry type');\n    }\n\n    indexMap.feature++;\n  }\n\n  // Wrap each array in an accessor object with value and size keys\n  return makeAccessorObjects(points, lines, polygons, coordLength);\n}\n\n// Fills (Multi)Point coordinates into points object of arrays\nfunction handlePoint(geometry, points, indexMap, coordLength, properties) {\n  points.positions.set(geometry.data, indexMap.pointPosition * coordLength);\n\n  const nPositions = geometry.data.length / coordLength;\n  fillNumericProperties(points, properties, indexMap.pointPosition, nPositions);\n  points.globalFeatureIds.fill(\n    indexMap.feature,\n    indexMap.pointPosition,\n    indexMap.pointPosition + nPositions\n  );\n  points.featureIds.fill(\n    indexMap.pointFeature,\n    indexMap.pointPosition,\n    indexMap.pointPosition + nPositions\n  );\n\n  indexMap.pointPosition += nPositions;\n}\n\n// Fills (Multi)LineString coordinates into lines object of arrays\nfunction handleLineString(geometry, lines, indexMap, coordLength, properties) {\n  lines.positions.set(geometry.data, indexMap.linePosition * coordLength);\n\n  const nPositions = geometry.data.length / coordLength;\n  fillNumericProperties(lines, properties, indexMap.linePosition, nPositions);\n\n  lines.globalFeatureIds.fill(\n    indexMap.feature,\n    indexMap.linePosition,\n    indexMap.linePosition + nPositions\n  );\n  lines.featureIds.fill(\n    indexMap.lineFeature,\n    indexMap.linePosition,\n    indexMap.linePosition + nPositions\n  );\n\n  for (let i = 0, il = geometry.lines.length; i < il; ++i) {\n    // Extract range of data we are working with, defined by start\n    // and end indices (these index into the geometry.data array)\n    const start = geometry.lines[i];\n    const end =\n      i === il - 1\n        ? geometry.data.length // last line, so read to end of data\n        : geometry.lines[i + 1]; // start index for next line\n\n    lines.pathIndices[indexMap.linePath++] = indexMap.linePosition;\n    indexMap.linePosition += (end - start) / coordLength;\n  }\n}\n\n// Fills (Multi)Polygon coordinates into polygons object of arrays\nfunction handlePolygon(geometry, polygons, indexMap, coordLength, properties) {\n  polygons.positions.set(geometry.data, indexMap.polygonPosition * coordLength);\n\n  const nPositions = geometry.data.length / coordLength;\n  fillNumericProperties(polygons, properties, indexMap.polygonPosition, nPositions);\n  polygons.globalFeatureIds.fill(\n    indexMap.feature,\n    indexMap.polygonPosition,\n    indexMap.polygonPosition + nPositions\n  );\n  polygons.featureIds.fill(\n    indexMap.polygonFeature,\n    indexMap.polygonPosition,\n    indexMap.polygonPosition + nPositions\n  );\n\n  // Unlike Point & LineString geometry.lines is a 2D array\n  for (let l = 0, ll = geometry.lines.length; l < ll; ++l) {\n    const startPosition = indexMap.polygonPosition;\n    polygons.polygonIndices[indexMap.polygonObject++] = startPosition;\n\n    const areas = geometry.areas[l];\n    const lines = geometry.lines[l];\n    const nextLines = geometry.lines[l + 1];\n\n    for (let i = 0, il = lines.length; i < il; ++i) {\n      const start = lines[i];\n      const end =\n        i === il - 1\n          ? // last line, so either read to:\n            nextLines === undefined\n            ? geometry.data.length // end of data (no next lines)\n            : nextLines[0] // start of first line in nextLines\n          : lines[i + 1]; // start index for next line\n\n      polygons.primitivePolygonIndices[indexMap.polygonRing++] = indexMap.polygonPosition;\n      indexMap.polygonPosition += (end - start) / coordLength;\n    }\n\n    const endPosition = indexMap.polygonPosition;\n    triangulatePolygon(polygons, areas, lines, {startPosition, endPosition, coordLength});\n  }\n}\n\n/**\n * Triangulate polygon using earcut\n */\nfunction triangulatePolygon(polygons, areas, lines, {startPosition, endPosition, coordLength}) {\n  const start = startPosition * coordLength;\n  const end = endPosition * coordLength;\n\n  // Extract positions and holes for just this polygon\n  const polygonPositions = polygons.positions.subarray(start, end);\n\n  // Holes are referenced relative to outer polygon\n  const offset = lines[0];\n  const holes = lines.slice(1).map((n) => (n - offset) / coordLength);\n\n  // Compute triangulation\n  const indices = earcut(polygonPositions, holes, coordLength, areas);\n\n  // Indices returned by triangulation are relative to start\n  // of polygon, so we need to offset\n  for (let t = 0, tl = indices.length; t < tl; ++t) {\n    polygons.triangles.push(startPosition + indices[t]);\n  }\n}\n\n// Wrap each array in an accessor object with value and size keys\nfunction makeAccessorObjects(points, lines, polygons, coordLength) {\n  const returnObj = {\n    points: {\n      ...points,\n      positions: {value: points.positions, size: coordLength},\n      globalFeatureIds: {value: points.globalFeatureIds, size: 1},\n      featureIds: {value: points.featureIds, size: 1}\n    },\n    lines: {\n      ...lines,\n      pathIndices: {value: lines.pathIndices, size: 1},\n      positions: {value: lines.positions, size: coordLength},\n      globalFeatureIds: {value: lines.globalFeatureIds, size: 1},\n      featureIds: {value: lines.featureIds, size: 1}\n    },\n    polygons: {\n      ...polygons,\n      polygonIndices: {value: polygons.polygonIndices, size: 1},\n      primitivePolygonIndices: {value: polygons.primitivePolygonIndices, size: 1},\n      positions: {value: polygons.positions, size: coordLength},\n      triangles: {value: new Uint32Array(polygons.triangles), size: 1},\n      globalFeatureIds: {value: polygons.globalFeatureIds, size: 1},\n      featureIds: {value: polygons.featureIds, size: 1}\n    }\n  };\n\n  for (const geomType in returnObj) {\n    for (const numericProp in returnObj[geomType].numericProps) {\n      returnObj[geomType].numericProps[numericProp] = {\n        value: returnObj[geomType].numericProps[numericProp],\n        size: 1\n      };\n    }\n  }\n  return returnObj;\n}\n\n// Add numeric properties to object\nfunction fillNumericProperties(object, properties, index, length) {\n  for (const numericPropName in object.numericProps) {\n    if (numericPropName in properties) {\n      object.numericProps[numericPropName].fill(properties[numericPropName], index, index + length);\n    }\n  }\n}\n\n// Keep string properties in object\nfunction keepStringProperties(properties, numericKeys) {\n  const props = {};\n  for (const key in properties) {\n    if (!numericKeys.includes(key)) {\n      props[key] = properties[key];\n    }\n  }\n  return props;\n}\n\nfunction isNumeric(x) {\n  return Number.isFinite(x);\n}\n"],"file":"features-to-binary.js"}