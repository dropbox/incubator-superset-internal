{"version":3,"sources":["../../../../src/lib/binary-vector-tile/vector-tile-feature.js"],"names":["endPos","cmd","cmdLen","length","x","y","i","TEST_EXPORTS","classifyRings","VectorTileFeature","pbf","end","extent","keys","values","firstPassData","properties","type","id","_pbf","_geometry","_keys","_values","_firstPassData","readFields","readFeature","pos","readVarint","lines","data","readSVarint","push","start","Error","transform","geom","loadGeometry","coordLength","pointFeaturesCount","pointPositionsCount","lineFeaturesCount","linePathsCount","linePositionsCount","classified","polygonFeaturesCount","polygonObjectsCount","polygonRingsCount","polygonPositionsCount","types","result","geometry","options","_toBinaryCoordinates","z","size","Math","pow","x0","y0","project","j","jl","y2","PI","atan","exp","len","areas","polygons","ringAreas","polygon","ccw","offset","startIndex","endIndex","shape","slice","area","before","after","concat","undefined","tag","feature","readTag","key","value"],"mappings":"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","sourcesContent":["// This code is forked from https://github.com/mapbox/vector-tile-js under BSD 3-clause license.\n/* eslint-disable */\n\nimport {getPolygonSignedArea} from '@math.gl/polygon';\n\n// Reduce GC by reusing variables\nlet endPos, cmd, cmdLen, length, x, y, i;\n\nexport const TEST_EXPORTS = {\n  classifyRings\n};\n\nexport default class VectorTileFeature {\n  static get types() {\n    return ['Unknown', 'Point', 'LineString', 'Polygon'];\n  }\n\n  constructor(pbf, end, extent, keys, values, firstPassData) {\n    // Public\n    this.properties = {};\n    this.extent = extent;\n    this.type = 0;\n    this.id = null;\n\n    // Private\n    this._pbf = pbf;\n    this._geometry = -1;\n    this._keys = keys;\n    this._values = values;\n    this._firstPassData = firstPassData;\n\n    pbf.readFields(readFeature, this, end);\n  }\n\n  // eslint-disable-next-line complexity, max-statements\n  loadGeometry() {\n    const pbf = this._pbf;\n    pbf.pos = this._geometry;\n\n    endPos = pbf.readVarint() + pbf.pos;\n    cmd = 1;\n    length = 0;\n    x = 0;\n    y = 0;\n    i = 0;\n\n    // Note: I attempted to replace the `data` array with a\n    // Float32Array, but performance was worse, both using\n    // `set()` and direct index access. Also, we cannot\n    // know how large the buffer should be, so it would\n    // increase memory usage\n    const lines = []; // Indices where lines start\n    const data = []; // Flat array of coordinate data\n\n    while (pbf.pos < endPos) {\n      if (length <= 0) {\n        cmdLen = pbf.readVarint();\n        cmd = cmdLen & 0x7;\n        length = cmdLen >> 3;\n      }\n\n      length--;\n\n      if (cmd === 1 || cmd === 2) {\n        x += pbf.readSVarint();\n        y += pbf.readSVarint();\n\n        if (cmd === 1) {\n          // New line\n          lines.push(i);\n        }\n        data.push(x, y);\n        i += 2;\n      } else if (cmd === 7) {\n        // Workaround for https://github.com/mapbox/mapnik-vector-tile/issues/90\n        if (i > 0) {\n          const start = lines[lines.length - 1]; // start index of polygon\n          data.push(data[start], data[start + 1]); // closePolygon\n          i += 2;\n        }\n      } else {\n        throw new Error(`unknown command ${cmd}`);\n      }\n    }\n\n    return {data, lines};\n  }\n\n  _toBinaryCoordinates(transform) {\n    // Expands the protobuf data to an intermediate `lines`\n    // data format, which maps closely to the binary data buffers.\n    // It is similar to GeoJSON, but rather than storing the coordinates\n    // in multidimensional arrays, we have a 1D `data` with all the\n    // coordinates, and then index into this using the `lines`\n    // parameter, e.g.\n    //\n    // geometry: {\n    //   type: 'Point', data: [1,2], lines: [0]\n    // }\n    // geometry: {\n    //   type: 'LineString', data: [1,2,3,4,...], lines: [0]\n    // }\n    // geometry: {\n    //   type: 'Polygon', data: [1,2,3,4,...], lines: [[0, 2]]\n    // }\n    // Thus the lines member lets us look up the relevant range\n    // from the data array.\n    // The Multi* versions of the above types share the same data\n    // structure, just with multiple elements in the lines array\n    let geom = this.loadGeometry();\n\n    // Apply the supplied transformation to data\n    transform(geom.data, this);\n\n    const coordLength = 2;\n\n    switch (this.type) {\n      case 1: // Point\n        this._firstPassData.pointFeaturesCount++;\n        this._firstPassData.pointPositionsCount += geom.lines.length;\n        break;\n\n      case 2: // LineString\n        this._firstPassData.lineFeaturesCount++;\n        this._firstPassData.linePathsCount += geom.lines.length;\n        this._firstPassData.linePositionsCount += geom.data.length / coordLength;\n        break;\n\n      case 3: // Polygon\n        const classified = classifyRings(geom);\n\n        // Unlike Point & LineString geom.lines is a 2D array, thanks\n        // to the classifyRings method\n        this._firstPassData.polygonFeaturesCount++;\n        this._firstPassData.polygonObjectsCount += classified.lines.length;\n\n        for (const lines of classified.lines) {\n          this._firstPassData.polygonRingsCount += lines.length;\n        }\n        this._firstPassData.polygonPositionsCount += classified.data.length / coordLength;\n\n        // @ts-ignore\n        geom = classified;\n        break;\n    }\n\n    geom.type = VectorTileFeature.types[this.type];\n    if (geom.lines.length > 1) {\n      geom.type = `Multi${geom.type}`;\n    }\n\n    const result = {\n      type: 'Feature',\n      geometry: geom,\n      properties: this.properties\n    };\n\n    if (this.id !== null) {\n      result.id = this.id;\n    }\n\n    return result;\n  }\n\n  toBinaryCoordinates(options) {\n    if (typeof options === 'function') {\n      return this._toBinaryCoordinates(options);\n    }\n    const {x, y, z} = options;\n    const size = this.extent * Math.pow(2, z);\n    const x0 = this.extent * x;\n    const y0 = this.extent * y;\n\n    function project(data) {\n      for (let j = 0, jl = data.length; j < jl; j += 2) {\n        data[j] = ((data[j] + x0) * 360) / size - 180;\n        const y2 = 180 - ((data[j + 1] + y0) * 360) / size;\n        data[j + 1] = (360 / Math.PI) * Math.atan(Math.exp((y2 * Math.PI) / 180)) - 90;\n      }\n    }\n    return this._toBinaryCoordinates(project);\n  }\n}\n\n/**\n * Classifies an array of rings into polygons with outer rings and holes\n * The function also detects holes which have zero area and\n * removes them. In doing so it modifies the input\n * `geom.data` array to remove the unneeded data\n */\nfunction classifyRings(geom) {\n  const len = geom.lines.length;\n\n  if (len <= 1) {\n    return {\n      data: geom.data,\n      areas: [[getPolygonSignedArea(geom.data)]],\n      lines: [geom.lines]\n    };\n  }\n\n  const areas = [];\n  const polygons = [];\n  let ringAreas;\n  let polygon;\n  let ccw;\n  let offset = 0;\n\n  for (let i = 0, startIndex, endIndex; i < len; i++) {\n    startIndex = geom.lines[i] - offset;\n\n    endIndex = geom.lines[i + 1] - offset || geom.data.length;\n    const shape = geom.data.slice(startIndex, endIndex);\n    const area = getPolygonSignedArea(shape);\n\n    if (area === 0) {\n      // This polygon has no area, so remove it from the shape\n      // Remove the section from the data array\n      const before = geom.data.slice(0, startIndex);\n      const after = geom.data.slice(endIndex);\n      geom.data = before.concat(after);\n\n      // Need to offset any remaining indices as we have\n      // modified the data buffer\n      offset += endIndex - startIndex;\n\n      // Do not add this index to the output and process next shape\n      continue;\n    }\n\n    if (ccw === undefined) ccw = area < 0;\n\n    if (ccw === area < 0) {\n      if (polygon) {\n        areas.push(ringAreas);\n        polygons.push(polygon);\n      }\n      polygon = [startIndex];\n      ringAreas = [area];\n    } else {\n      // @ts-ignore\n      ringAreas.push(area);\n      // @ts-ignore\n      polygon.push(startIndex);\n    }\n  }\n  if (ringAreas) areas.push(ringAreas);\n  if (polygon) polygons.push(polygon);\n\n  return {areas, lines: polygons, data: geom.data};\n}\n\n// All code below is unchanged from the original Mapbox implemenation\n\nfunction readFeature(tag, feature, pbf) {\n  if (tag === 1) feature.id = pbf.readVarint();\n  else if (tag === 2) readTag(pbf, feature);\n  else if (tag === 3) feature.type = pbf.readVarint();\n  else if (tag === 4) feature._geometry = pbf.pos;\n}\n\nfunction readTag(pbf, feature) {\n  const end = pbf.readVarint() + pbf.pos;\n\n  while (pbf.pos < end) {\n    const key = feature._keys[pbf.readVarint()];\n    const value = feature._values[pbf.readVarint()];\n    feature.properties[key] = value;\n  }\n}\n"],"file":"vector-tile-feature.js"}