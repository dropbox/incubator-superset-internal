{"version":3,"sources":["../../../../src/lib/utils/schema-attribute-utils.ts"],"names":["makeSchemaFromAttributes","attributes","loaderData","indices","metadataMap","makeMetadata","metadata","fields","namedLoaderDataAttributes","transformAttributesLoaderData","attributeName","attribute","field","getArrowFieldFromAttribute","push","indicesField","Schema","result","key","dracoAttribute","name","undefined","type","value","Field","FixedSizeList","size","Map","set","JSON","stringify"],"mappings":";;;;;;;AAAA;;AAIO,SAASA,wBAAT,CACLC,UADK,EAELC,UAFK,EAGLC,OAHK,EAIG;AACR,MAAMC,WAAW,GAAGC,YAAY,CAACH,UAAU,CAACI,QAAZ,CAAhC;AACA,MAAMC,MAAe,GAAG,EAAxB;AACA,MAAMC,yBAAyB,GAAGC,6BAA6B,CAACP,UAAU,CAACD,UAAZ,CAA/D;;AACA,OAAK,IAAMS,cAAX,IAA4BT,UAA5B,EAAwC;AACtC,QAAMU,SAAS,GAAGV,UAAU,CAACS,cAAD,CAA5B;AACA,QAAME,KAAK,GAAGC,0BAA0B,CACtCH,cADsC,EAEtCC,SAFsC,EAGtCH,yBAAyB,CAACE,cAAD,CAHa,CAAxC;AAKAH,IAAAA,MAAM,CAACO,IAAP,CAAYF,KAAZ;AACD;;AACD,MAAIT,OAAJ,EAAa;AACX,QAAMY,YAAY,GAAGF,0BAA0B,CAAC,SAAD,EAAYV,OAAZ,CAA/C;AACAI,IAAAA,MAAM,CAACO,IAAP,CAAYC,YAAZ;AACD;;AACD,SAAO,IAAIC,cAAJ,CAAWT,MAAX,EAAmBH,WAAnB,CAAP;AACD;;AAED,SAASK,6BAAT,CAAuCP,UAAvC,EAEE;AACA,MAAMe,MAAiD,GAAG,EAA1D;;AACA,OAAK,IAAMC,IAAX,IAAkBhB,UAAlB,EAA8B;AAC5B,QAAMiB,cAAc,GAAGjB,UAAU,CAACgB,IAAD,CAAjC;AACAD,IAAAA,MAAM,CAACE,cAAc,CAACC,IAAf,IAAuB,WAAxB,CAAN,GAA6CD,cAA7C;AACD;;AACD,SAAOF,MAAP;AACD;;AAED,SAASJ,0BAAT,CACEH,aADF,EAEEC,SAFF,EAGET,UAHF,EAIS;AACP,MAAME,WAAW,GAAGF,UAAU,GAAGG,YAAY,CAACH,UAAU,CAACI,QAAZ,CAAf,GAAuCe,SAArE;AACA,MAAMC,IAAI,GAAG,wCAA2BX,SAAS,CAACY,KAArC,CAAb;AACA,SAAO,IAAIC,aAAJ,CACLd,aADK,EAEL,IAAIe,qBAAJ,CAAkBd,SAAS,CAACe,IAA5B,EAAkC,IAAIF,aAAJ,CAAU,OAAV,EAAmBF,IAAnB,CAAlC,CAFK,EAGL,KAHK,EAILlB,WAJK,CAAP;AAMD;;AAED,SAASC,YAAT,CAAsBC,QAAtB,EAA0F;AACxF,MAAMF,WAAW,GAAG,IAAIuB,GAAJ,EAApB;;AACA,OAAK,IAAMT,KAAX,IAAkBZ,QAAlB,EAA4B;AAC1BF,IAAAA,WAAW,CAACwB,GAAZ,WAAmBV,KAAnB,cAAiCW,IAAI,CAACC,SAAL,CAAexB,QAAQ,CAACY,KAAD,CAAvB,CAAjC;AACD;;AAED,SAAOd,WAAP;AACD","sourcesContent":["import {Schema, Field, FixedSizeList, getArrowTypeFromTypedArray} from '@loaders.gl/schema';\n\nimport {MeshAttribute, DracoAttribute, DracoLoaderData, DracoMetadataEntry} from '../draco-types';\n\nexport function makeSchemaFromAttributes(\n  attributes: {[attributeName: string]: MeshAttribute},\n  loaderData: DracoLoaderData,\n  indices?: MeshAttribute\n): Schema {\n  const metadataMap = makeMetadata(loaderData.metadata);\n  const fields: Field[] = [];\n  const namedLoaderDataAttributes = transformAttributesLoaderData(loaderData.attributes);\n  for (const attributeName in attributes) {\n    const attribute = attributes[attributeName];\n    const field = getArrowFieldFromAttribute(\n      attributeName,\n      attribute,\n      namedLoaderDataAttributes[attributeName]\n    );\n    fields.push(field);\n  }\n  if (indices) {\n    const indicesField = getArrowFieldFromAttribute('indices', indices);\n    fields.push(indicesField);\n  }\n  return new Schema(fields, metadataMap);\n}\n\nfunction transformAttributesLoaderData(loaderData: {[key: number]: DracoAttribute}): {\n  [attributeName: string]: DracoAttribute;\n} {\n  const result: {[attributeName: string]: DracoAttribute} = {};\n  for (const key in loaderData) {\n    const dracoAttribute = loaderData[key];\n    result[dracoAttribute.name || 'undefined'] = dracoAttribute;\n  }\n  return result;\n}\n\nfunction getArrowFieldFromAttribute(\n  attributeName: string,\n  attribute: MeshAttribute,\n  loaderData?: DracoAttribute\n): Field {\n  const metadataMap = loaderData ? makeMetadata(loaderData.metadata) : undefined;\n  const type = getArrowTypeFromTypedArray(attribute.value);\n  return new Field(\n    attributeName,\n    new FixedSizeList(attribute.size, new Field('value', type)),\n    false,\n    metadataMap\n  );\n}\n\nfunction makeMetadata(metadata: {[key: string]: DracoMetadataEntry}): Map<string, string> {\n  const metadataMap = new Map();\n  for (const key in metadata) {\n    metadataMap.set(`${key}.string`, JSON.stringify(metadata[key]));\n  }\n\n  return metadataMap;\n}\n"],"file":"schema-attribute-utils.js"}