{"version":3,"sources":["../../../../src/lib/node/fs.ts"],"names":["fs","toArrayBuffer","promisify","error","fsFunction","Error","isSupported","Boolean","open","close","read","readFile","readFileSync","writeFile","writeFileSync","_readToArrayBuffer","fd","start","length","buffer","Buffer","alloc","bytesRead"],"mappings":"AACA,OAAOA,EAAP,MAAe,IAAf;AACA,SAAQC,aAAR,QAA4B,qBAA5B;AACA,SAAQC,SAAR,QAAwB,MAAxB;;AAEA,MAAMC,KAAK,GAAIC,UAAD,IAAgB,MAAM;AAClC,QAAM,IAAIC,KAAJ,CAAW,GAAED,UAAW,2BAAxB,CAAN;AACD,CAFD;;AAIA,OAAO,MAAME,WAAW,GAAGC,OAAO,CAACP,EAAD,CAA3B;AAEP,OAAO,MAAMQ,IAAI,GAAGR,EAAE,SAAF,IAAAA,EAAE,WAAF,IAAAA,EAAE,CAAEQ,IAAJ,GAAWN,SAAS,CAACF,EAAE,CAACQ,IAAJ,CAApB,GAAgCL,KAAK,CAAC,SAAD,CAAlD;AACP,OAAO,MAAMM,KAAK,GAAGT,EAAE,SAAF,IAAAA,EAAE,WAAF,IAAAA,EAAE,CAAES,KAAJ,GAAYP,SAAS,CAACF,EAAE,CAACS,KAAJ,CAArB,GAAkCN,KAAK,CAAC,UAAD,CAArD;AACP,OAAO,MAAMO,IAAI,GAAGV,EAAE,SAAF,IAAAA,EAAE,WAAF,IAAAA,EAAE,CAAEU,IAAJ,GAAWR,SAAS,CAACF,EAAE,CAACU,IAAJ,CAApB,GAAgCP,KAAK,CAAC,SAAD,CAAlD;AAEP,OAAO,MAAMQ,QAAQ,GAAGX,EAAE,SAAF,IAAAA,EAAE,WAAF,IAAAA,EAAE,CAAEW,QAAJ,GAAeT,SAAS,CAACF,EAAE,CAACW,QAAJ,CAAxB,GAAwCR,KAAK,CAAC,aAAD,CAA9D;AACP,OAAO,MAAMS,YAAY,GAAGZ,EAAE,SAAF,IAAAA,EAAE,WAAF,IAAAA,EAAE,CAAEY,YAAJ,GAAmBZ,EAAE,CAACY,YAAtB,GAAqCT,KAAK,CAAC,iBAAD,CAA/D;AACP,OAAO,MAAMU,SAAS,GAAGb,EAAE,SAAF,IAAAA,EAAE,WAAF,IAAAA,EAAE,CAAEa,SAAJ,GAAgBX,SAAS,CAACF,EAAE,CAACa,SAAJ,CAAzB,GAA0CV,KAAK,CAAC,cAAD,CAAjE;AACP,OAAO,MAAMW,aAAa,GAAGd,EAAE,SAAF,IAAAA,EAAE,WAAF,IAAAA,EAAE,CAAEc,aAAJ,GAAoBd,EAAE,CAACc,aAAvB,GAAuCX,KAAK,CAAC,kBAAD,CAAlE;AAEP,OAAO,eAAeY,kBAAf,CAAkCC,EAAlC,EAA8CC,KAA9C,EAA6DC,MAA7D,EAA6E;AAClF,QAAMC,MAAM,GAAGC,MAAM,CAACC,KAAP,CAAaH,MAAb,CAAf;AACA,QAAM;AAACI,IAAAA;AAAD,MAAc,MAAMZ,IAAI,CAACM,EAAD,EAAKG,MAAL,EAAa,CAAb,EAAgBD,MAAhB,EAAwBD,KAAxB,CAA9B;;AACA,MAAIK,SAAS,KAAKJ,MAAlB,EAA0B;AACxB,UAAM,IAAIb,KAAJ,CAAU,gBAAV,CAAN;AACD;;AACD,SAAOJ,aAAa,CAACkB,MAAD,CAApB;AACD","sourcesContent":["// fs wrapper (promisified fs + avoids bundling fs in browsers)\nimport fs from 'fs';\nimport {toArrayBuffer} from './buffer-utils.node';\nimport {promisify} from 'util';\n\nconst error = (fsFunction) => () => {\n  throw new Error(`${fsFunction} not available in browser`);\n};\n\nexport const isSupported = Boolean(fs);\n\nexport const open = fs?.open ? promisify(fs.open) : error('fs.open');\nexport const close = fs?.close ? promisify(fs.close) : error('fs.close');\nexport const read = fs?.read ? promisify(fs.read) : error('fs.read');\n\nexport const readFile = fs?.readFile ? promisify(fs.readFile) : error('fs.readFile');\nexport const readFileSync = fs?.readFileSync ? fs.readFileSync : error('fs.readFileSync');\nexport const writeFile = fs?.writeFile ? promisify(fs.writeFile) : error('fs.writeFile');\nexport const writeFileSync = fs?.writeFileSync ? fs.writeFileSync : error('fs.writeFileSync');\n\nexport async function _readToArrayBuffer(fd: number, start: number, length: number) {\n  const buffer = Buffer.alloc(length);\n  const {bytesRead} = await read(fd, buffer, 0, length, start);\n  if (bytesRead !== length) {\n    throw new Error('fs.read failed');\n  }\n  return toArrayBuffer(buffer);\n}\n"],"file":"fs.js"}