import fs from 'fs';
import { toArrayBuffer } from './buffer-utils.node';
import { promisify } from 'util';

const error = fsFunction => () => {
  throw new Error(`${fsFunction} not available in browser`);
};

export const isSupported = Boolean(fs);
export const open = fs !== null && fs !== void 0 && fs.open ? promisify(fs.open) : error('fs.open');
export const close = fs !== null && fs !== void 0 && fs.close ? promisify(fs.close) : error('fs.close');
export const read = fs !== null && fs !== void 0 && fs.read ? promisify(fs.read) : error('fs.read');
export const readFile = fs !== null && fs !== void 0 && fs.readFile ? promisify(fs.readFile) : error('fs.readFile');
export const readFileSync = fs !== null && fs !== void 0 && fs.readFileSync ? fs.readFileSync : error('fs.readFileSync');
export const writeFile = fs !== null && fs !== void 0 && fs.writeFile ? promisify(fs.writeFile) : error('fs.writeFile');
export const writeFileSync = fs !== null && fs !== void 0 && fs.writeFileSync ? fs.writeFileSync : error('fs.writeFileSync');
export async function _readToArrayBuffer(fd, start, length) {
  const buffer = Buffer.alloc(length);
  const {
    bytesRead
  } = await read(fd, buffer, 0, length, start);

  if (bytesRead !== length) {
    throw new Error('fs.read failed');
  }

  return toArrayBuffer(buffer);
}
//# sourceMappingURL=fs.js.map