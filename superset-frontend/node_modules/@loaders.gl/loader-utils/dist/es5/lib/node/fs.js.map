{"version":3,"sources":["../../../../src/lib/node/fs.ts"],"names":["error","fsFunction","Error","isSupported","Boolean","fs","open","close","read","readFile","readFileSync","writeFile","writeFileSync","_readToArrayBuffer","fd","start","length","buffer","Buffer","alloc","bytesRead"],"mappings":";;;;;;;;;;;;;;AACA;;AACA;;AACA;;AAEA,IAAMA,KAAK,GAAG,SAARA,KAAQ,CAACC,UAAD;AAAA,SAAgB,YAAM;AAClC,UAAM,IAAIC,KAAJ,WAAaD,UAAb,+BAAN;AACD,GAFa;AAAA,CAAd;;AAIO,IAAME,WAAW,GAAGC,OAAO,CAACC,WAAD,CAA3B;;AAEA,IAAMC,IAAI,GAAGD,8DAAIC,IAAJ,GAAW,qBAAUD,YAAGC,IAAb,CAAX,GAAgCN,KAAK,CAAC,SAAD,CAAlD;;AACA,IAAMO,KAAK,GAAGF,8DAAIE,KAAJ,GAAY,qBAAUF,YAAGE,KAAb,CAAZ,GAAkCP,KAAK,CAAC,UAAD,CAArD;;AACA,IAAMQ,IAAI,GAAGH,8DAAIG,IAAJ,GAAW,qBAAUH,YAAGG,IAAb,CAAX,GAAgCR,KAAK,CAAC,SAAD,CAAlD;;AAEA,IAAMS,QAAQ,GAAGJ,8DAAII,QAAJ,GAAe,qBAAUJ,YAAGI,QAAb,CAAf,GAAwCT,KAAK,CAAC,aAAD,CAA9D;;AACA,IAAMU,YAAY,GAAGL,8DAAIK,YAAJ,GAAmBL,YAAGK,YAAtB,GAAqCV,KAAK,CAAC,iBAAD,CAA/D;;AACA,IAAMW,SAAS,GAAGN,8DAAIM,SAAJ,GAAgB,qBAAUN,YAAGM,SAAb,CAAhB,GAA0CX,KAAK,CAAC,cAAD,CAAjE;;AACA,IAAMY,aAAa,GAAGP,8DAAIO,aAAJ,GAAoBP,YAAGO,aAAvB,GAAuCZ,KAAK,CAAC,kBAAD,CAAlE;;;SAEea,kB;;;;;kFAAf,iBAAkCC,EAAlC,EAA8CC,KAA9C,EAA6DC,MAA7D;AAAA;;AAAA;AAAA;AAAA;AAAA;AACCC,YAAAA,MADD,GACUC,MAAM,CAACC,KAAP,CAAaH,MAAb,CADV;AAAA;AAAA,mBAEqBR,IAAI,CAACM,EAAD,EAAKG,MAAL,EAAa,CAAb,EAAgBD,MAAhB,EAAwBD,KAAxB,CAFzB;;AAAA;AAAA;AAEEK,YAAAA,SAFF,eAEEA,SAFF;;AAAA,kBAGDA,SAAS,KAAKJ,MAHb;AAAA;AAAA;AAAA;;AAAA,kBAIG,IAAId,KAAJ,CAAU,gBAAV,CAJH;;AAAA;AAAA,6CAME,gCAAce,MAAd,CANF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["// fs wrapper (promisified fs + avoids bundling fs in browsers)\nimport fs from 'fs';\nimport {toArrayBuffer} from './buffer-utils.node';\nimport {promisify} from 'util';\n\nconst error = (fsFunction) => () => {\n  throw new Error(`${fsFunction} not available in browser`);\n};\n\nexport const isSupported = Boolean(fs);\n\nexport const open = fs?.open ? promisify(fs.open) : error('fs.open');\nexport const close = fs?.close ? promisify(fs.close) : error('fs.close');\nexport const read = fs?.read ? promisify(fs.read) : error('fs.read');\n\nexport const readFile = fs?.readFile ? promisify(fs.readFile) : error('fs.readFile');\nexport const readFileSync = fs?.readFileSync ? fs.readFileSync : error('fs.readFileSync');\nexport const writeFile = fs?.writeFile ? promisify(fs.writeFile) : error('fs.writeFile');\nexport const writeFileSync = fs?.writeFileSync ? fs.writeFileSync : error('fs.writeFileSync');\n\nexport async function _readToArrayBuffer(fd: number, start: number, length: number) {\n  const buffer = Buffer.alloc(length);\n  const {bytesRead} = await read(fd, buffer, 0, length, start);\n  if (bytesRead !== length) {\n    throw new Error('fs.read failed');\n  }\n  return toArrayBuffer(buffer);\n}\n"],"file":"fs.js"}