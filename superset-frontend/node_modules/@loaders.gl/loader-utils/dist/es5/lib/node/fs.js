"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._readToArrayBuffer = _readToArrayBuffer;
exports.writeFileSync = exports.writeFile = exports.readFileSync = exports.readFile = exports.read = exports.close = exports.open = exports.isSupported = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _fs = _interopRequireDefault(require("fs"));

var _bufferUtils = require("./buffer-utils.node");

var _util = require("util");

var error = function error(fsFunction) {
  return function () {
    throw new Error("".concat(fsFunction, " not available in browser"));
  };
};

var isSupported = Boolean(_fs.default);
exports.isSupported = isSupported;
var open = _fs.default !== null && _fs.default !== void 0 && _fs.default.open ? (0, _util.promisify)(_fs.default.open) : error('fs.open');
exports.open = open;
var close = _fs.default !== null && _fs.default !== void 0 && _fs.default.close ? (0, _util.promisify)(_fs.default.close) : error('fs.close');
exports.close = close;
var read = _fs.default !== null && _fs.default !== void 0 && _fs.default.read ? (0, _util.promisify)(_fs.default.read) : error('fs.read');
exports.read = read;
var readFile = _fs.default !== null && _fs.default !== void 0 && _fs.default.readFile ? (0, _util.promisify)(_fs.default.readFile) : error('fs.readFile');
exports.readFile = readFile;
var readFileSync = _fs.default !== null && _fs.default !== void 0 && _fs.default.readFileSync ? _fs.default.readFileSync : error('fs.readFileSync');
exports.readFileSync = readFileSync;
var writeFile = _fs.default !== null && _fs.default !== void 0 && _fs.default.writeFile ? (0, _util.promisify)(_fs.default.writeFile) : error('fs.writeFile');
exports.writeFile = writeFile;
var writeFileSync = _fs.default !== null && _fs.default !== void 0 && _fs.default.writeFileSync ? _fs.default.writeFileSync : error('fs.writeFileSync');
exports.writeFileSync = writeFileSync;

function _readToArrayBuffer(_x, _x2, _x3) {
  return _readToArrayBuffer2.apply(this, arguments);
}

function _readToArrayBuffer2() {
  _readToArrayBuffer2 = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee(fd, start, length) {
    var buffer, _yield$read, bytesRead;

    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            buffer = Buffer.alloc(length);
            _context.next = 3;
            return read(fd, buffer, 0, length, start);

          case 3:
            _yield$read = _context.sent;
            bytesRead = _yield$read.bytesRead;

            if (!(bytesRead !== length)) {
              _context.next = 7;
              break;
            }

            throw new Error('fs.read failed');

          case 7:
            return _context.abrupt("return", (0, _bufferUtils.toArrayBuffer)(buffer));

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _readToArrayBuffer2.apply(this, arguments);
}
//# sourceMappingURL=fs.js.map