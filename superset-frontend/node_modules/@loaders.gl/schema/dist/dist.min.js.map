{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./src/bundle.ts","webpack:///(webpack)/buildin/global.js","webpack:///./src/lib/table/base-table-batch-aggregator.ts","webpack:///./src/lib/utils/row-utils.ts","webpack:///./src/lib/table/row-table-batch-aggregator.ts","webpack:///./src/lib/table/columnar-table-batch-aggregator.ts","webpack:///./src/lib/table/table-batch-builder.ts","webpack:///./src/category/mesh/mesh-utils.ts","webpack:///./src/lib/schema/impl/schema.ts","webpack:///./src/lib/utils/assert.ts","webpack:///./src/lib/schema/impl/field.ts","webpack:///./src/lib/schema/impl/enum.ts","webpack:///./src/lib/schema/impl/type.ts","webpack:///./src/lib/schema-utils/deduce-table-schema.ts","webpack:///./src/lib/schema-utils/get-type-info.ts","webpack:///./src/lib/schema-utils/type-utils.ts","webpack:///./src/lib/utils/async-queue.ts"],"names":["root","factory","exports","module","define","amd","a","i","window","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","moduleExports","require","_global","global","loaders","assign","g","this","Function","e","RowTableBatchAggregator","constructor","schema","options","Array","isArray","_headers","index","rowCount","length","addArrayRow","row","cursor","Number","isFinite","rows","addObjectRow","getBatch","slice","shape","batchType","data","convertToObjectRow","arrayRow","headers","Error","objectRow","convertToArrayRow","rowObject","arrayRows","rowArray","objectRows","ColumnarTableBatchAggregator","_reallocateColumns","fieldName","columns","_pruneColumns","field","allocated","ArrayType","type","Float32Array","oldColumn","ArrayBuffer","isView","typedArray","set","columnName","column","entries","DEFAULT_OPTIONS","batchSize","batchDebounceMs","limit","_limitMB","TableBatchBuilder","Date","now","limitReached","Boolean","totalLength","totalBytes","addRow","rowBytes","_estimateRowMB","aggregator","TableBatchType","_getTableBatchType","chunkComplete","chunk","bytesUsed","byteLength","isChunkComplete","getFullBatch","_isFull","_getBatch","getFinalBatch","keys","lastBatchEmittedMs","normalizedBatch","count","batchCount","BaseTableBatchAggregator","ArrowBatch","getMeshSize","attributes","size","attributeName","attribute","BYTES_PER_ELEMENT","getMeshBoundingBox","minX","Infinity","minY","minZ","maxX","maxY","maxZ","positions","POSITION","len","x","y","z","Schema","fields","metadata","condition","message","assert","usedNames","console","warn","checkNames","Map","compareTo","other","select","columnNames","nameMap","selectedFields","filter","selectAt","columnIndices","map","schemaOrFields","otherSchema","mergeMaps","fieldMap","mergedFields","values","m1","m2","Field","nullable","typeId","clone","toString","Type","DataType","Null","Int","Float","Binary","Utf8","Bool","Decimal","Time","Timestamp","Interval","List","Struct","Union","FixedSizeBinary","FixedSizeList","Dictionary","NONE","isSigned","bitWidth","super","Int8","Int16","Int32","Int64","Uint8","Uint16","Uint32","Uint64","Precision","precision","Float16","Float32","Float64","DateUnit","DAY","MILLISECOND","unit","DateDay","DateMillisecond","TimeUnit","SECOND","MICROSECOND","NANOSECOND","TimeSecond","TimeMillisecond","timezone","TimestampSecond","TimestampMillisecond","TimestampMicrosecond","TimestampNanosecond","IntervalUnit","DAY_TIME","YEAR_MONTH","IntervalDayTime","IntervalYearMonth","listSize","child","children","valueType","deduceTableSchema","table","deducedSchema","rowTable","deduceTypeFromValue","deduceSchemaForRowTable","columnarTable","deduceSchemaForColumnarTable","String","getTypeInfo","arrowTypeLike","typeName","typeEnumName","getTypeKey","ReverseType","typeKey","getArrowTypeFromTypedArray","array","Int8Array","Uint8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","Float64Array","ArrayQueue","enqueue","push","dequeue","shift","asyncIterator","AsyncQueue","_values","_settlers","_closed","close","resolve","done","settler","reject","next","Promise"],"mappings":"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","file":"dist.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","// @ts-nocheck\nconst moduleExports = require('./index');\nconst _global = typeof window === 'undefined' ? global : window;\n_global.loaders = _global.loaders || {};\nmodule.exports = Object.assign(_global.loaders, moduleExports);\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","import type {Schema} from '../schema';\nimport type {TableBatch} from '../../category/table';\nimport {TableBatchAggregator, TableBatchOptions} from './table-batch-aggregator';\n\nconst DEFAULT_ROW_COUNT = 100;\n\nexport default class RowTableBatchAggregator implements TableBatchAggregator {\n  schema: Schema;\n  options: TableBatchOptions;\n\n  length: number = 0;\n  rows: any[] | null = null;\n  cursor: number = 0;\n  private _headers: string[] = [];\n\n  constructor(schema: Schema, options: TableBatchOptions) {\n    this.options = options;\n    this.schema = schema;\n\n    // schema is an array if there're no headers\n    // object if there are headers\n    if (!Array.isArray(schema)) {\n      this._headers = [];\n      for (const key in schema) {\n        this._headers[schema[key].index] = schema[key].name;\n      }\n    }\n  }\n\n  rowCount(): number {\n    return this.length;\n  }\n\n  addArrayRow(row: any[], cursor?: number): void {\n    if (Number.isFinite(cursor)) {\n      this.cursor = cursor as number;\n    }\n\n    this.rows = this.rows || new Array(DEFAULT_ROW_COUNT);\n    this.rows[this.length] = row;\n    this.length++;\n  }\n\n  addObjectRow(row: {[columnName: string]: any}, cursor?: number): void {\n    if (Number.isFinite(cursor)) {\n      this.cursor = cursor as number;\n    }\n\n    this.rows = this.rows || new Array(DEFAULT_ROW_COUNT);\n    this.rows[this.length] = row;\n    this.length++;\n  }\n\n  getBatch(): TableBatch | null {\n    let rows = this.rows;\n    if (!rows) {\n      return null;\n    }\n\n    rows = rows.slice(0, this.length);\n    this.rows = null;\n\n    const batch: TableBatch = {\n      shape: this.options.shape,\n      batchType: 'data',\n      data: rows,\n      length: this.length,\n      schema: this.schema,\n      cursor: this.cursor\n    };\n\n    return batch;\n  }\n}\n","/** Convert an object row to an array row */\nexport function convertToObjectRow(\n  arrayRow: any[],\n  headers: string[]\n): {[columnName: string]: any} {\n  if (!arrayRow) {\n    throw new Error('null row');\n  }\n  if (!headers) {\n    throw new Error('no headers');\n  }\n  const objectRow = {};\n  for (let i = 0; i < headers.length; i++) {\n    objectRow[headers[i]] = arrayRow[i];\n  }\n  return objectRow;\n}\n\n/** Convert an object row to an array row */\nexport function convertToArrayRow(\n  objectRow: {[columnName: string]: any},\n  headers: string[]\n): any[] {\n  if (!objectRow) {\n    throw new Error('null row');\n  }\n  if (!headers) {\n    throw new Error('no headers');\n  }\n  const arrayRow = new Array(headers.length);\n  for (let i = 0; i < headers.length; i++) {\n    arrayRow[i] = objectRow[headers[i]];\n  }\n  return arrayRow;\n}\n","import type {Schema} from '../schema';\nimport type {TableBatch} from '../../category/table';\n// import type {ArrayRowTableBatch, ObjectRowTableBatch} from '../../category/table';\nimport {convertToArrayRow, convertToObjectRow} from '../utils/row-utils';\nimport {TableBatchAggregator, TableBatchOptions} from './table-batch-aggregator';\n\nconst DEFAULT_ROW_COUNT = 100;\n\nexport default class RowTableBatchAggregator implements TableBatchAggregator {\n  schema: Schema;\n  options: TableBatchOptions;\n\n  length: number = 0;\n  objectRows: {[columnName: string]: any} | null = null;\n  arrayRows: any[] | null = null;\n  cursor: number = 0;\n  private _headers: string[] = [];\n\n  constructor(schema: Schema, options: TableBatchOptions) {\n    this.options = options;\n    this.schema = schema;\n\n    // schema is an array if there're no headers\n    // object if there are headers\n    if (!Array.isArray(schema)) {\n      this._headers = [];\n      for (const key in schema) {\n        this._headers[schema[key].index] = schema[key].name;\n      }\n    }\n  }\n\n  rowCount(): number {\n    return this.length;\n  }\n\n  addArrayRow(row: any[], cursor?: number): void {\n    if (Number.isFinite(cursor)) {\n      this.cursor = cursor as number;\n    }\n\n    // eslint-disable-next-line default-case\n    switch (this.options.shape) {\n      case 'object-row-table':\n        const rowObject = convertToObjectRow(row, this._headers);\n        this.addObjectRow(rowObject, cursor);\n        break;\n      case 'array-row-table':\n        this.arrayRows = this.arrayRows || new Array(DEFAULT_ROW_COUNT);\n        this.arrayRows[this.length] = row;\n        this.length++;\n        break;\n    }\n  }\n\n  addObjectRow(row: {[columnName: string]: any}, cursor?: number): void {\n    if (Number.isFinite(cursor)) {\n      this.cursor = cursor as number;\n    }\n\n    // eslint-disable-next-line default-case\n    switch (this.options.shape) {\n      case 'array-row-table':\n        const rowArray = convertToArrayRow(row, this._headers);\n        this.addArrayRow(rowArray, cursor);\n        break;\n      case 'object-row-table':\n        this.objectRows = this.objectRows || new Array(DEFAULT_ROW_COUNT);\n        this.objectRows[this.length] = row;\n        this.length++;\n        break;\n    }\n  }\n\n  getBatch(): TableBatch | null {\n    let rows = this.arrayRows || this.objectRows;\n    if (!rows) {\n      return null;\n    }\n\n    rows = rows.slice(0, this.length);\n    this.arrayRows = null;\n    this.objectRows = null;\n\n    return {\n      shape: this.options.shape,\n      batchType: 'data',\n      data: rows,\n      length: this.length,\n      schema: this.schema,\n      cursor: this.cursor\n    };\n  }\n}\n","import type {Schema} from '../schema';\nimport type {ColumnarTableBatch, ArrowTableBatch} from '../../category/table';\nimport {TableBatchAggregator} from './table-batch-aggregator';\n\ntype ColumnarTableBatchOptions = {};\n\nconst DEFAULT_ROW_COUNT = 100;\n\nexport default class ColumnarTableBatchAggregator implements TableBatchAggregator {\n  schema: Schema;\n  length: number = 0;\n  allocated: number = 0;\n  columns: {[columnName: string]: any[]} = {};\n\n  constructor(schema: Schema, options: ColumnarTableBatchOptions) {\n    this.schema = schema;\n    this._reallocateColumns();\n  }\n\n  rowCount(): number {\n    return this.length;\n  }\n\n  addArrayRow(row: any[]) {\n    // If user keeps pushing rows beyond batch size, reallocate\n    this._reallocateColumns();\n    let i = 0;\n    // TODO what if no csv header, columns not populated?\n    for (const fieldName in this.columns) {\n      this.columns[fieldName][this.length] = row[i++];\n    }\n    this.length++;\n  }\n\n  addObjectRow(row: {[columnName: string]: any}): void {\n    // If user keeps pushing rows beyond batch size, reallocate\n    this._reallocateColumns();\n    for (const fieldName in row) {\n      this.columns[fieldName][this.length] = row[fieldName];\n    }\n    this.length++;\n  }\n\n  getBatch(): ColumnarTableBatch | ArrowTableBatch | null {\n    this._pruneColumns();\n    const columns = Array.isArray(this.schema) ? this.columns : {};\n\n    // schema is an array if there're no headers\n    // object if there are headers\n    // columns should match schema format\n    if (!Array.isArray(this.schema)) {\n      for (const fieldName in this.schema) {\n        const field = this.schema[fieldName];\n        columns[field.name] = this.columns[field.index];\n      }\n    }\n\n    this.columns = {};\n\n    const batch: ColumnarTableBatch = {\n      shape: 'columnar-table',\n      batchType: 'data',\n      data: columns,\n      schema: this.schema,\n      length: this.length\n    };\n\n    return batch;\n  }\n\n  // HELPERS\n\n  _reallocateColumns() {\n    if (this.length < this.allocated) {\n      return;\n    }\n\n    // @ts-ignore TODO\n    this.allocated = this.allocated > 0 ? (this.allocated *= 2) : DEFAULT_ROW_COUNT;\n    this.columns = {};\n\n    for (const fieldName in this.schema) {\n      const field = this.schema[fieldName];\n      const ArrayType = field.type || Float32Array;\n      const oldColumn = this.columns[field.index];\n\n      if (oldColumn && ArrayBuffer.isView(oldColumn)) {\n        // Copy the old data to the new array\n        const typedArray = new ArrayType(this.allocated);\n        typedArray.set(oldColumn);\n        this.columns[field.index] = typedArray;\n      } else if (oldColumn) {\n        // Plain array\n        oldColumn.length = this.allocated;\n        this.columns[field.index] = oldColumn;\n      } else {\n        // Create new\n        this.columns[field.index] = new ArrayType(this.allocated);\n      }\n    }\n  }\n\n  _pruneColumns() {\n    for (const [columnName, column] of Object.entries(this.columns)) {\n      this.columns[columnName] = column.slice(0, this.length);\n    }\n  }\n}\n","import type {Schema} from '../schema';\nimport type {TableBatch} from '../../category/table';\nimport type {TableBatchAggregator, TableBatchConstructor} from './table-batch-aggregator';\nimport BaseTableBatchAggregator from './base-table-batch-aggregator';\nimport RowTableBatchAggregator from './row-table-batch-aggregator';\nimport ColumnarTableBatchAggregator from './columnar-table-batch-aggregator';\n\n// TODO define interface instead\ntype TableBatchBuilderOptions = {\n  shape: 'row-table' | 'array-row-table' | 'object-row-table' | 'columnar-table' | 'arrow-table';\n  batchSize?: number | 'auto';\n  batchDebounceMs?: number;\n  limit: number;\n  _limitMB: number;\n};\n\ntype GetBatchOptions = {\n  bytesUsed?: number;\n  [key: string]: any;\n};\n\nconst DEFAULT_OPTIONS: Required<TableBatchBuilderOptions> = {\n  shape: 'array-row-table',\n  batchSize: 'auto',\n  batchDebounceMs: 0,\n  limit: 0,\n  _limitMB: 0\n};\n\nconst ERR_MESSAGE = 'TableBatchBuilder';\n\n/** Incrementally builds batches from a stream of rows */\nexport default class TableBatchBuilder {\n  schema: Schema;\n  options: Required<TableBatchBuilderOptions>;\n\n  private aggregator: TableBatchAggregator | null = null;\n  private batchCount: number = 0;\n  private bytesUsed: number = 0;\n  private isChunkComplete: boolean = false;\n  private lastBatchEmittedMs: number = Date.now();\n  private totalLength: number = 0;\n  private totalBytes: number = 0;\n  private rowBytes: number = 0;\n\n  static ArrowBatch?: TableBatchConstructor;\n\n  constructor(schema: Schema, options?: TableBatchBuilderOptions) {\n    this.schema = schema;\n    this.options = {...DEFAULT_OPTIONS, ...options};\n  }\n\n  limitReached(): boolean {\n    if (Boolean(this.options?.limit) && this.totalLength >= this.options.limit) {\n      return true;\n    }\n    if (Boolean(this.options?._limitMB) && this.totalBytes / 1e6 >= this.options._limitMB) {\n      return true;\n    }\n    return false;\n  }\n\n  /** @deprecated Use addArrayRow or addObjectRow */\n  addRow(row: any[] | {[columnName: string]: any}): void {\n    if (this.limitReached()) {\n      return;\n    }\n    this.totalLength++;\n    this.rowBytes = this.rowBytes || this._estimateRowMB(row);\n    this.totalBytes += this.rowBytes;\n    if (Array.isArray(row)) {\n      this.addArrayRow(row);\n    } else {\n      this.addObjectRow(row);\n    }\n  }\n\n  /** Add one row to the batch */\n  protected addArrayRow(row: any[]) {\n    if (!this.aggregator) {\n      const TableBatchType = this._getTableBatchType();\n      this.aggregator = new TableBatchType(this.schema, this.options);\n    }\n    this.aggregator.addArrayRow(row);\n  }\n\n  /** Add one row to the batch */\n  protected addObjectRow(row: {[columnName: string]: any}): void {\n    if (!this.aggregator) {\n      const TableBatchType = this._getTableBatchType();\n      this.aggregator = new TableBatchType(this.schema, this.options);\n    }\n    this.aggregator.addObjectRow(row);\n  }\n\n  /** Mark an incoming raw memory chunk has completed */\n  chunkComplete(chunk: ArrayBuffer | string): void {\n    if (chunk instanceof ArrayBuffer) {\n      this.bytesUsed += chunk.byteLength;\n    }\n    if (typeof chunk === 'string') {\n      this.bytesUsed += chunk.length;\n    }\n    this.isChunkComplete = true;\n  }\n\n  getFullBatch(options?: GetBatchOptions): TableBatch | null {\n    return this._isFull() ? this._getBatch(options) : null;\n  }\n\n  getFinalBatch(options?: GetBatchOptions): TableBatch | null {\n    return this._getBatch(options);\n  }\n\n  // INTERNAL\n\n  _estimateRowMB(row) {\n    return Array.isArray(row) ? row.length * 8 : Object.keys(row).length * 8;\n  }\n\n  private _isFull(): boolean {\n    // No batch, not ready\n    if (!this.aggregator || this.aggregator.rowCount() === 0) {\n      return false;\n    }\n\n    // if batchSize === 'auto' we wait for chunk to complete\n    // if batchSize === number, ensure we have enough rows\n    if (this.options.batchSize === 'auto') {\n      if (!this.isChunkComplete) {\n        return false;\n      }\n    } else if (this.options.batchSize > this.aggregator.rowCount()) {\n      return false;\n    }\n\n    // Debounce batches\n    if (this.options.batchDebounceMs > Date.now() - this.lastBatchEmittedMs) {\n      return false;\n    }\n\n    // Emit batch\n    this.isChunkComplete = false;\n    this.lastBatchEmittedMs = Date.now();\n    return true;\n  }\n\n  /**\n   * bytesUsed can be set via chunkComplete or via getBatch*\n   */\n  private _getBatch(options?: GetBatchOptions): TableBatch | null {\n    if (!this.aggregator) {\n      return null;\n    }\n\n    // TODO - this can overly increment bytes used?\n    if (options?.bytesUsed) {\n      this.bytesUsed = options.bytesUsed;\n    }\n    const normalizedBatch = this.aggregator.getBatch() as TableBatch;\n    normalizedBatch.count = this.batchCount;\n    normalizedBatch.bytesUsed = this.bytesUsed;\n    Object.assign(normalizedBatch, options);\n\n    this.batchCount++;\n    this.aggregator = null;\n    return normalizedBatch;\n  }\n\n  private _getTableBatchType(): TableBatchConstructor {\n    switch (this.options.shape) {\n      case 'row-table':\n        return BaseTableBatchAggregator;\n      case 'array-row-table':\n      case 'object-row-table':\n        return RowTableBatchAggregator;\n      case 'columnar-table':\n        return ColumnarTableBatchAggregator;\n      case 'arrow-table':\n        if (!TableBatchBuilder.ArrowBatch) {\n          throw new Error(ERR_MESSAGE);\n        }\n        return TableBatchBuilder.ArrowBatch;\n      default:\n        throw new Error(ERR_MESSAGE);\n    }\n  }\n}\n","// Mesh category utilities\n// TODO - move to mesh category module, or to math.gl/geometry module\nimport {TypedArray} from '../../types';\n\ntype Attribute = {\n  size?: number;\n  type?: number;\n  normalized?: boolean;\n  value: TypedArray;\n};\n\ntype TypedArrays = {[key: string]: TypedArray};\nexport type Attributes = {[key: string]: Attribute};\n\n/**\n * Holds an axis aligned bounding box\n * TODO - make sure AxisAlignedBoundingBox in math.gl/culling understands this format (or change this format)\n */\ntype BoundingBox = [[number, number, number], [number, number, number]];\n\n/**\n * Get number of vertices in mesh\n * @param attributes\n */\nexport function getMeshSize(attributes: TypedArrays): number {\n  let size = 0;\n  for (const attributeName in attributes) {\n    const attribute = attributes[attributeName];\n    if (ArrayBuffer.isView(attribute)) {\n      // @ts-ignore DataView doesn't have BYTES_PER_ELEMENT\n      size += attribute.byteLength * attribute.BYTES_PER_ELEMENT;\n    }\n  }\n  return size;\n}\n\n/**\n * Get the (axis aligned) bounding box of a mesh\n * @param attributes\n * @returns array of two vectors representing the axis aligned bounding box\n */\n// eslint-disable-next-line complexity\nexport function getMeshBoundingBox(attributes: Attributes): BoundingBox {\n  let minX = Infinity;\n  let minY = Infinity;\n  let minZ = Infinity;\n  let maxX = -Infinity;\n  let maxY = -Infinity;\n  let maxZ = -Infinity;\n\n  const positions = attributes.POSITION ? attributes.POSITION.value : [];\n  const len = positions && positions.length;\n\n  for (let i = 0; i < len; i += 3) {\n    const x = positions[i];\n    const y = positions[i + 1];\n    const z = positions[i + 2];\n\n    minX = x < minX ? x : minX;\n    minY = y < minY ? y : minY;\n    minZ = z < minZ ? z : minZ;\n\n    maxX = x > maxX ? x : maxX;\n    maxY = y > maxY ? y : maxY;\n    maxZ = z > maxZ ? z : maxZ;\n  }\n  return [\n    [minX, minY, minZ],\n    [maxX, maxY, maxZ]\n  ];\n}\n","import {assert} from '../../utils/assert';\nimport Field from './field';\n\nexport type SchemaMetadata = Map<string, any>;\n\n/**\n * ArrowJS `Schema` API-compatible class for row-based tables (returned from `DataTable`)\n * https://loaders.gl/arrowjs/docs/api-reference/schema\n */\nexport default class Schema {\n  fields: Field[];\n  // TODO - Arrow just allows Map<string, string>\n  metadata: SchemaMetadata;\n\n  constructor(fields: Field[], metadata?: SchemaMetadata) {\n    assert(Array.isArray(fields));\n    checkNames(fields);\n    // For kepler fields, create arrow compatible `Fields` that have kepler fields as `metadata`\n    this.fields = fields;\n    this.metadata = metadata || new Map();\n  }\n\n  // TODO - arrow only seems to compare fields, not metadata\n  compareTo(other: Schema): boolean {\n    if (this.metadata !== other.metadata) {\n      return false;\n    }\n    if (this.fields.length !== other.fields.length) {\n      return false;\n    }\n    for (let i = 0; i < this.fields.length; ++i) {\n      if (!this.fields[i].compareTo(other.fields[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  select(...columnNames: string[]): Schema {\n    // Ensure column names reference valid fields\n    const nameMap = Object.create(null);\n    for (const name of columnNames) {\n      nameMap[name] = true;\n    }\n    const selectedFields = this.fields.filter((field) => nameMap[field.name]);\n    return new Schema(selectedFields, this.metadata);\n  }\n\n  selectAt(...columnIndices: number[]): Schema {\n    // Ensure column indices reference valid fields\n    const selectedFields = columnIndices.map((index) => this.fields[index]).filter(Boolean);\n    return new Schema(selectedFields, this.metadata);\n  }\n\n  assign(schemaOrFields: Schema | Field[]): Schema {\n    let fields: Field[];\n    let metadata: SchemaMetadata = this.metadata;\n\n    if (schemaOrFields instanceof Schema) {\n      const otherSchema = schemaOrFields;\n      fields = otherSchema.fields;\n      metadata = mergeMaps(mergeMaps(new Map(), this.metadata), otherSchema.metadata);\n    } else {\n      fields = schemaOrFields;\n    }\n\n    // Create a merged list of fields, overwrite fields in place, new fields at end\n    const fieldMap: {[key: string]: Field} = Object.create(null);\n\n    for (const field of this.fields) {\n      fieldMap[field.name] = field;\n    }\n\n    for (const field of fields) {\n      fieldMap[field.name] = field;\n    }\n\n    const mergedFields = Object.values(fieldMap);\n\n    return new Schema(mergedFields, metadata);\n  }\n}\n\n// Warn if any duplicated field names\nfunction checkNames(fields) {\n  const usedNames = {};\n  for (const field of fields) {\n    if (usedNames[field.name]) {\n      // eslint-disable-next-line\n      console.warn('Schema: duplicated field name', field.name, field);\n    }\n    usedNames[field.name] = true;\n  }\n}\n\nfunction mergeMaps<T>(m1: T, m2: T): T {\n  // @ts-ignore\n  return new Map([...(m1 || new Map()), ...(m2 || new Map())]);\n}\n","// Replacement for the external assert method to reduce bundle size\n// Note: We don't use the second \"message\" argument in calling code,\n// so no need to support it here\nexport function assert(condition: boolean, message?: string) {\n  if (!condition) {\n    throw new Error(message || 'loader assertion failed.');\n  }\n}\n","import {DataType} from './type';\n\n/**\n * ArrowJS `Field` API-compatible class for row-based tables\n * https://loaders.gl/arrowjs/docs/api-reference/field\n * A field holds name, nullable, and metadata information about a table \"column\"\n * A Schema is essentially a list of fields\n */\nexport default class Field {\n  name: string;\n  type: DataType;\n  nullable: boolean;\n  metadata: Map<string, string>;\n\n  constructor(\n    name: string,\n    type: DataType,\n    nullable = false,\n    metadata: Map<string, string> = new Map()\n  ) {\n    this.name = name;\n    this.type = type;\n    this.nullable = nullable;\n    this.metadata = metadata;\n  }\n\n  get typeId(): number {\n    return this.type && this.type.typeId;\n  }\n\n  clone(): Field {\n    return new Field(this.name, this.type, this.nullable, this.metadata);\n  }\n\n  compareTo(other: this): boolean {\n    return (\n      this.name === other.name &&\n      this.type === other.type &&\n      this.nullable === other.nullable &&\n      this.metadata === other.metadata\n    );\n  }\n\n  toString(): string {\n    return `${this.type}${this.nullable ? ', nullable' : ''}${\n      this.metadata ? `, metadata: ${this.metadata}` : ''\n    }`;\n  }\n}\n","// This code is adapted from ArrowJS https://github.com/apache/arrow\n// under Apache license http://www.apache.org/licenses/LICENSE-2.0\n\n/**\n * Main data type enumeration.\n *\n * Data types in this library are all *logical*. They can be expressed as\n * either a primitive physical type (bytes or bits of some fixed size), a\n * nested type consisting of other data types, or another data type (e.g. a\n * timestamp encoded as an int64).\n *\n * **Note**: Only enum values 0-17 (NONE through Map) are written to an Arrow\n * IPC payload.\n *\n * The rest of the values are specified here so TypeScript can narrow the type\n * signatures further beyond the base Arrow Types. The Arrow DataTypes include\n * metadata like `bitWidth` that impact the type signatures of the values we\n * accept and return.\n *\n * For example, the `Int8Vector` reads 1-byte numbers from an `Int8Array`, an\n * `Int32Vector` reads a 4-byte number from an `Int32Array`, and an `Int64Vector`\n * reads a pair of 4-byte lo, hi 32-bit integers as a zero-copy slice from the\n * underlying `Int32Array`.\n *\n * Library consumers benefit by knowing the narrowest type, since we can ensure\n * the types across all public methods are propagated, and never bail to `any`.\n * These values are _never_ used at runtime, and they will _never_ be written\n * to the flatbuffers metadata of serialized Arrow IPC payloads.\n */\nexport enum Type {\n  /** The default placeholder type */\n  NONE = 0,\n  /** A NULL type having no physical storage */\n  Null = 1,\n  /** Signed or unsigned 8, 16, 32, or 64-bit little-endian integer */\n  Int = 2,\n  /** 2, 4, or 8-byte floating point value */\n  Float = 3,\n  /** Variable-length bytes (no guarantee of UTF8-ness) */\n  Binary = 4,\n  /** UTF8 variable-length string as List<Char> */\n  Utf8 = 5,\n  /** Boolean as 1 bit, LSB bit-packed ordering */\n  Bool = 6,\n  /** Precision-and-scale-based decimal type. Storage type depends on the parameters. */\n  Decimal = 7,\n  /** int32_t days or int64_t milliseconds since the UNIX epoch */\n  Date = 8,\n  /** Time as signed 32 or 64-bit integer, representing either seconds, milliseconds, microseconds, or nanoseconds since midnight since midnight */\n  Time = 9,\n  /** Exact timestamp encoded with int64 since UNIX epoch (Default unit millisecond) */\n  Timestamp = 10,\n  /** YEAR_MONTH or DAY_TIME interval in SQL style */\n  Interval = 11,\n  /** A list of some logical data type */\n  List = 12,\n  /** Struct of logical types */\n  Struct = 13,\n  /** Union of logical types */\n  Union = 14,\n  /** Fixed-size binary. Each value occupies the same number of bytes */\n  FixedSizeBinary = 15,\n  /** Fixed-size list. Each value occupies the same number of bytes */\n  FixedSizeList = 16,\n  /** Map of named logical types */\n  Map = 17,\n\n  /** Dictionary aka Category type */\n  Dictionary = -1,\n  Int8 = -2,\n  Int16 = -3,\n  Int32 = -4,\n  Int64 = -5,\n  Uint8 = -6,\n  Uint16 = -7,\n  Uint32 = -8,\n  Uint64 = -9,\n  Float16 = -10,\n  Float32 = -11,\n  Float64 = -12,\n  DateDay = -13,\n  DateMillisecond = -14,\n  TimestampSecond = -15,\n  TimestampMillisecond = -16,\n  TimestampMicrosecond = -17,\n  TimestampNanosecond = -18,\n  TimeSecond = -19,\n  TimeMillisecond = -20,\n  TimeMicrosecond = -21,\n  TimeNanosecond = -22,\n  DenseUnion = -23,\n  SparseUnion = -24,\n  IntervalDayTime = -25,\n  IntervalYearMonth = -26\n}\n","// This code is adapted from ArrowJS https://github.com/apache/arrow\n// under Apache license http://www.apache.org/licenses/LICENSE-2.0\n\nimport {Type} from './enum';\n\nimport Field from './field';\n\nexport {Type} from './enum';\n\nexport type TypedIntArray =\n  | Int8Array\n  | Uint8Array\n  | Int16Array\n  | Uint16Array\n  | Int32Array\n  | Uint32Array\n  | Int32Array\n  | Uint32Array\n  | Uint8ClampedArray;\n\nexport type TypedFloatArray = Float32Array | Float64Array;\n\nexport type TypedArray = TypedIntArray | TypedFloatArray;\n\nexport type AnyArrayType = Array<any> | TypedIntArray | TypedFloatArray;\n\nexport class DataType {\n  static isNull(x: any): boolean {\n    return x && x.typeId === Type.Null;\n  }\n  static isInt(x: any): boolean {\n    return x && x.typeId === Type.Int;\n  }\n  static isFloat(x: any): boolean {\n    return x && x.typeId === Type.Float;\n  }\n  static isBinary(x: any): boolean {\n    return x && x.typeId === Type.Binary;\n  }\n  static isUtf8(x: any): boolean {\n    return x && x.typeId === Type.Utf8;\n  }\n  static isBool(x: any): boolean {\n    return x && x.typeId === Type.Bool;\n  }\n  static isDecimal(x: any): boolean {\n    return x && x.typeId === Type.Decimal;\n  }\n  static isDate(x: any): boolean {\n    return x && x.typeId === Type.Date;\n  }\n  static isTime(x: any): boolean {\n    return x && x.typeId === Type.Time;\n  }\n  static isTimestamp(x: any): boolean {\n    return x && x.typeId === Type.Timestamp;\n  }\n  static isInterval(x: any): boolean {\n    return x && x.typeId === Type.Interval;\n  }\n  static isList(x: any): boolean {\n    return x && x.typeId === Type.List;\n  }\n  static isStruct(x: any): boolean {\n    return x && x.typeId === Type.Struct;\n  }\n  static isUnion(x: any): boolean {\n    return x && x.typeId === Type.Union;\n  }\n  static isFixedSizeBinary(x: any): boolean {\n    return x && x.typeId === Type.FixedSizeBinary;\n  }\n  static isFixedSizeList(x: any): boolean {\n    return x && x.typeId === Type.FixedSizeList;\n  }\n  static isMap(x: any): boolean {\n    return x && x.typeId === Type.Map;\n  }\n  static isDictionary(x: any): boolean {\n    return x && x.typeId === Type.Dictionary;\n  }\n\n  get typeId(): Type {\n    return Type.NONE;\n  }\n\n  // get ArrayType(): AnyArrayType {\n  //   return Int8Array;\n  // }\n\n  // get ArrayType() { return Array; }\n  compareTo(other: DataType): boolean {\n    // TODO\n    return this === other; // comparer.visit(this, other);\n  }\n}\n\n// NULL\n\nexport class Null extends DataType {\n  get typeId(): Type {\n    return Type.Null;\n  }\n  get [Symbol.toStringTag](): string {\n    return 'Null';\n  }\n  toString(): string {\n    return 'Null';\n  }\n}\n\n// BOOLEANS\n\nexport class Bool extends DataType {\n  get typeId(): Type {\n    return Type.Bool;\n  }\n  // get ArrayType() {\n  //   return Uint8Array;\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Bool';\n  }\n  toString(): string {\n    return 'Bool';\n  }\n}\n\n// INTS\n\nexport class Int extends DataType {\n  readonly isSigned: boolean;\n  readonly bitWidth: number;\n  constructor(isSigned, bitWidth) {\n    super();\n    this.isSigned = isSigned;\n    this.bitWidth = bitWidth;\n  }\n  get typeId(): Type {\n    return Type.Int;\n  }\n  // get ArrayType() {\n  //   switch (this.bitWidth) {\n  //     case 8:\n  //       return this.isSigned ? Int8Array : Uint8Array;\n  //     case 16:\n  //       return this.isSigned ? Int16Array : Uint16Array;\n  //     case 32:\n  //       return this.isSigned ? Int32Array : Uint32Array;\n  //     case 64:\n  //       return this.isSigned ? Int32Array : Uint32Array;\n  //     default:\n  //       throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n  //   }\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Int';\n  }\n  toString(): string {\n    return `${this.isSigned ? 'I' : 'Ui'}nt${this.bitWidth}`;\n  }\n}\n\nexport class Int8 extends Int {\n  constructor() {\n    super(true, 8);\n  }\n}\nexport class Int16 extends Int {\n  constructor() {\n    super(true, 16);\n  }\n}\nexport class Int32 extends Int {\n  constructor() {\n    super(true, 32);\n  }\n}\nexport class Int64 extends Int {\n  constructor() {\n    super(true, 64);\n  }\n}\nexport class Uint8 extends Int {\n  constructor() {\n    super(false, 8);\n  }\n}\nexport class Uint16 extends Int {\n  constructor() {\n    super(false, 16);\n  }\n}\nexport class Uint32 extends Int {\n  constructor() {\n    super(false, 32);\n  }\n}\nexport class Uint64 extends Int {\n  constructor() {\n    super(false, 64);\n  }\n}\n\n// FLOATS\n\nconst Precision = {\n  HALF: 16,\n  SINGLE: 32,\n  DOUBLE: 64\n};\n\nexport class Float extends DataType {\n  readonly precision: number;\n  constructor(precision) {\n    super();\n    this.precision = precision;\n  }\n  get typeId(): Type {\n    return Type.Float;\n  }\n  // get ArrayType() {\n  //   switch (this.precision) {\n  //     case Precision.HALF:\n  //       return Uint16Array;\n  //     case Precision.SINGLE:\n  //       return Float32Array;\n  //     case Precision.DOUBLE:\n  //       return Float64Array;\n  //     default:\n  //       throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n  //   }\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Float';\n  }\n  toString(): string {\n    return `Float${this.precision}`;\n  }\n}\n\nexport class Float16 extends Float {\n  constructor() {\n    super(Precision.HALF);\n  }\n}\nexport class Float32 extends Float {\n  constructor() {\n    super(Precision.SINGLE);\n  }\n}\nexport class Float64 extends Float {\n  constructor() {\n    super(Precision.DOUBLE);\n  }\n}\n\nexport class Binary extends DataType {\n  constructor() {\n    super();\n  }\n  get typeId() {\n    return Type.Binary;\n  }\n  toString() {\n    return 'Binary';\n  }\n  get [Symbol.toStringTag]() {\n    return 'Binary';\n  }\n}\n\n// STRINGS\n\nexport class Utf8 extends DataType {\n  get typeId(): Type {\n    return Type.Utf8;\n  }\n  // get ArrayType() {\n  //   return Uint8Array;\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Utf8';\n  }\n  toString(): string {\n    return 'Utf8';\n  }\n}\n\n// DATES, TIMES AND INTERVALS\n\nconst DateUnit = {\n  DAY: 0,\n  MILLISECOND: 1\n};\n\nexport class Date extends DataType {\n  readonly unit: number;\n  constructor(unit) {\n    super();\n    this.unit = unit;\n  }\n  get typeId(): Type {\n    return Type.Date;\n  }\n  // get ArrayType() {\n  //   return Int32Array;\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Date';\n  }\n  toString(): string {\n    return `Date${(this.unit + 1) * 32}<${DateUnit[this.unit]}>`;\n  }\n}\n\nexport class DateDay extends Date {\n  constructor() {\n    super(DateUnit.DAY);\n  }\n}\nexport class DateMillisecond extends Date {\n  constructor() {\n    super(DateUnit.MILLISECOND);\n  }\n}\n\nconst TimeUnit = {\n  SECOND: 1,\n  MILLISECOND: 1e3,\n  MICROSECOND: 1e6,\n  NANOSECOND: 1e9\n};\n\nexport class Time extends DataType {\n  readonly unit: number;\n  readonly bitWidth: number;\n\n  constructor(unit, bitWidth) {\n    super();\n    this.unit = unit;\n    this.bitWidth = bitWidth;\n  }\n  get typeId(): Type {\n    return Type.Time;\n  }\n  toString(): string {\n    return `Time${this.bitWidth}<${TimeUnit[this.unit]}>`;\n  }\n  get [Symbol.toStringTag](): string {\n    return 'Time';\n  }\n  // get ArrayType() {\n  //   return Int32Array;\n  // }\n}\n\nexport class TimeSecond extends Time {\n  constructor() {\n    super(TimeUnit.SECOND, 32);\n  }\n}\nexport class TimeMillisecond extends Time {\n  constructor() {\n    super(TimeUnit.MILLISECOND, 32);\n  }\n}\n// export class TimeMicrosecond extends Time { constructor() { super(TimeUnit.MICROSECOND, 64); } }\n// export class TimeNanosecond extends Time { constructor() { super(TimeUnit.NANOSECOND, 64); } }\n\nexport class Timestamp extends DataType {\n  readonly unit: any;\n  readonly timezone: any;\n\n  constructor(unit: any, timezone = null) {\n    super();\n    this.unit = unit;\n    this.timezone = timezone;\n  }\n  get typeId(): Type {\n    return Type.Timestamp;\n  }\n  // get ArrayType() {\n  //   return Int32Array;\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Timestamp';\n  }\n  toString(): string {\n    return `Timestamp<${TimeUnit[this.unit]}${this.timezone ? `, ${this.timezone}` : ''}>`;\n  }\n}\n\nexport class TimestampSecond extends Timestamp {\n  constructor(timezone = null) {\n    super(TimeUnit.SECOND, timezone);\n  }\n}\nexport class TimestampMillisecond extends Timestamp {\n  constructor(timezone = null) {\n    super(TimeUnit.MILLISECOND, timezone);\n  }\n}\nexport class TimestampMicrosecond extends Timestamp {\n  constructor(timezone = null) {\n    super(TimeUnit.MICROSECOND, timezone);\n  }\n}\nexport class TimestampNanosecond extends Timestamp {\n  constructor(timezone = null) {\n    super(TimeUnit.NANOSECOND, timezone);\n  }\n}\n\nconst IntervalUnit = {\n  DAY_TIME: 0,\n  YEAR_MONTH: 1\n};\n\nexport class Interval extends DataType {\n  readonly unit: number;\n  constructor(unit: number) {\n    super();\n    this.unit = unit;\n  }\n  get typeId(): Type {\n    return Type.Interval;\n  }\n  // get ArrayType() {\n  //   return Int32Array;\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Interval';\n  }\n  toString(): string {\n    return `Interval<${IntervalUnit[this.unit]}>`;\n  }\n}\n\nexport class IntervalDayTime extends Interval {\n  constructor() {\n    super(IntervalUnit.DAY_TIME);\n  }\n}\nexport class IntervalYearMonth extends Interval {\n  constructor() {\n    super(IntervalUnit.YEAR_MONTH);\n  }\n}\n\nexport class FixedSizeList extends DataType {\n  readonly listSize: number;\n  readonly children: Field[];\n\n  constructor(listSize: number, child: Field) {\n    super();\n    this.listSize = listSize;\n    this.children = [child];\n  }\n  get typeId(): Type {\n    return Type.FixedSizeList;\n  }\n  get valueType() {\n    return this.children[0].type;\n  }\n  get valueField() {\n    return this.children[0];\n  }\n  // get ArrayType() {\n  //   return this.valueType.ArrayType;\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'FixedSizeList';\n  }\n  toString(): string {\n    return `FixedSizeList[${this.listSize}]<${this.valueType}>`;\n  }\n}\n","// Type deduction\nimport {\n  Schema\n  // Int,\n  // Int8,\n  // Int16,\n  // Int32,\n  // Uint8,\n  // Uint16,\n  // Uint32,\n  // Float32,\n  // Float64\n  // Bool,\n  // Utf8,\n  // TimestampMillisecond,\n  // Null\n} from '../schema';\n\n// const TYPED_ARRAY_TO_TYPE = {\n//   Int8Array: new Int8(),\n//   Int16Array: new Int16(),\n//   Int32Array: new Int32(),\n//   Uint8Array: new Uint8(),\n//   Uint8ClampedArray: new Uint8(),\n//   Uint16Array: new Uint16(),\n//   Uint32Array: new Uint32(),\n//   Float32Array: new Float32(),\n//   Float64Array: new Float64()\n// };\n\n// if (typeof BigInt64Array !== 'undefined') {\n//   TYPED_ARRAY_TO_TYPE.BigInt64Array = new Int64();\n//   TYPED_ARRAY_TO_TYPE.BigUint64Array = new Uint64();\n// }\n\n/**\n * SCHEMA SUPPORT - AUTODEDUCTION\n * @param {*} table\n * @param {*} schema\n * @returns\n */\nexport function deduceTableSchema(table, schema?: Schema) {\n  const deducedSchema = Array.isArray(table)\n    ? deduceSchemaForRowTable(table)\n    : deduceSchemaForColumnarTable(table);\n  // Deduced schema will fill in missing info from partial options.schema, if provided\n  return Object.assign(deducedSchema, schema);\n}\n\nfunction deduceSchemaForColumnarTable(columnarTable) {\n  const schema = {};\n  for (const field in columnarTable) {\n    const column = columnarTable[field];\n    // Check if column is typed, if so we are done\n    if (ArrayBuffer.isView(column)) {\n      schema[field] = column.constructor;\n      // else we need data\n    } else if (column.length) {\n      const value = column[0];\n      schema[field] = deduceTypeFromValue(value);\n      // TODO - support nested schemas?\n    }\n    // else we mark as present but unknow\n    schema[field] = schema[field] || null;\n  }\n  return schema;\n}\n\nfunction deduceSchemaForRowTable(rowTable) {\n  const schema = {};\n  if (rowTable.length) {\n    const row = rowTable[0];\n    // TODO - Could look at additional rows if nulls in first row\n    for (const field in row) {\n      const value = row[field];\n      schema[field] = deduceTypeFromValue(value);\n    }\n  }\n  return schema;\n}\n\nfunction deduceTypeFromValue(value) {\n  if (value instanceof Date) {\n    return Date;\n  } else if (value instanceof Number) {\n    return Float32Array;\n  } else if (typeof value === 'string') {\n    return String;\n  }\n  return null;\n}\n\n/*\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction deduceSchema(rows) {\n  const row = rows[0];\n\n  const schema = {};\n  let i = 0;\n  for (const columnName in row) {\n    const value = row[columnName];\n    switch (typeof value) {\n      case 'number':\n      case 'boolean':\n        // TODO - booleans could be handled differently...\n        schema[columnName] = {name: String(columnName), index: i, type: Float32Array};\n        break;\n\n      case 'object':\n        schema[columnName] = {name: String(columnName), index: i, type: Array};\n        break;\n\n      case 'string':\n      default:\n        schema[columnName] = {name: String(columnName), index: i, type: Array};\n      // We currently only handle numeric rows\n      // TODO we could offer a function to map strings to numbers?\n    }\n    i++;\n  }\n  return schema;\n}\n*/\n","import {Type} from '../schema';\nimport {AnyArray} from '../../types';\n\n/**\n * Gets type information from an Arrow type object or \"mock\" Arrow type object\n * @param arrowTypeLike Arrow Type or type object of similar shape\n */\nexport function getTypeInfo(arrowTypeLike: any): {\n  typeId: Type;\n  ArrayType: AnyArray;\n  typeName: string;\n  typeEnumName?: string;\n  precision?: number;\n} {\n  return {\n    typeId: arrowTypeLike.typeId,\n    ArrayType: arrowTypeLike.ArrayType,\n    typeName: arrowTypeLike.toString(),\n    typeEnumName: getTypeKey(arrowTypeLike.typeId),\n    precision: arrowTypeLike.precision\n  };\n}\n\nlet ReverseType: {[key: string]: string} | null = null;\n\nfunction getTypeKey(typeKey) {\n  if (!ReverseType) {\n    ReverseType = {};\n    for (const key in Type) {\n      ReverseType[Type[key]] = key;\n    }\n  }\n\n  return ReverseType[typeKey];\n}\n","import type {TypedArray} from '../../types';\nimport {DataType, Float32, Float64, Int16, Int32, Int8, Uint16, Uint32, Uint8} from '../schema';\n\nexport function getArrowTypeFromTypedArray(array: TypedArray): DataType {\n  switch (array.constructor) {\n    case Int8Array:\n      return new Int8();\n    case Uint8Array:\n      return new Uint8();\n    case Int16Array:\n      return new Int16();\n    case Uint16Array:\n      return new Uint16();\n    case Int32Array:\n      return new Int32();\n    case Uint32Array:\n      return new Uint32();\n    case Float32Array:\n      return new Float32();\n    case Float64Array:\n      return new Float64();\n    default:\n      throw new Error('array type not supported');\n  }\n}\n","// From https://github.com/rauschma/async-iter-demo/tree/master/src under MIT license\n// http://2ality.com/2016/10/asynchronous-iteration.html\n\nclass ArrayQueue<T> extends Array<T> {\n  enqueue(value) {\n    // Add at the end\n    return this.push(value);\n  }\n  dequeue(): T {\n    // Remove first element\n    return this.shift() as T;\n  }\n}\n\nexport default class AsyncQueue<T> {\n  private _values: ArrayQueue<T>;\n  private _settlers: ArrayQueue<{resolve; reject}>;\n  private _closed: boolean;\n\n  constructor() {\n    // enqueues > dequeues\n    this._values = new ArrayQueue<T>();\n    // dequeues > enqueues\n    this._settlers = new ArrayQueue<{resolve; reject}>();\n    this._closed = false;\n  }\n\n  close(): void {\n    while (this._settlers.length > 0) {\n      this._settlers.dequeue().resolve({done: true});\n    }\n    this._closed = true;\n  }\n\n  [Symbol.asyncIterator](): AsyncIterator<T> {\n    return this;\n  }\n\n  enqueue(value: T | Error): void {\n    if (this._closed) {\n      throw new Error('Closed');\n    }\n\n    if (this._settlers.length > 0) {\n      if (this._values.length > 0) {\n        throw new Error('Illegal internal state');\n      }\n      const settler = this._settlers.dequeue();\n      if (value instanceof Error) {\n        settler.reject(value);\n      } else {\n        settler.resolve({value});\n      }\n    } else {\n      this._values.enqueue(value);\n    }\n  }\n\n  /**\n   * @returns a Promise for an IteratorResult\n   */\n  next(): Promise<any> {\n    if (this._values.length > 0) {\n      const value = this._values.dequeue();\n      if (value instanceof Error) {\n        return Promise.reject(value);\n      }\n      return Promise.resolve({value});\n    }\n\n    if (this._closed) {\n      if (this._settlers.length > 0) {\n        throw new Error('Illegal internal state');\n      }\n      return Promise.resolve({done: true});\n    }\n    // Wait for new values to be enqueued\n    return new Promise((resolve, reject) => {\n      this._settlers.enqueue({resolve, reject});\n    });\n  }\n}\n\n/**\n * @returns a Promise for an Array with the elements in `asyncIterable`\n */\nexport async function takeAsync(\n  asyncIterable: AsyncIterable<any>,\n  count = Infinity\n): Promise<any[]> {\n  const result: Array<any> = [];\n  const iterator = asyncIterable[Symbol.asyncIterator]();\n  while (result.length < count) {\n    const {value, done} = await iterator.next();\n    if (done) {\n      break;\n    }\n    result.push(value);\n  }\n  return result;\n}\n"],"sourceRoot":""}