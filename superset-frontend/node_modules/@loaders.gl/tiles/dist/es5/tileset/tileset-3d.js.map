{"version":3,"sources":["../../../src/tileset/tileset-3d.ts"],"names":["DEFAULT_PROPS","description","ellipsoid","Ellipsoid","WGS84","modelMatrix","Matrix4","throttleRequests","maxRequests","maximumMemoryUsage","onTileLoad","onTileUnload","onTileError","onTraversalComplete","selectedTiles","contentLoader","undefined","viewDistanceScale","maximumScreenSpaceError","loadTiles","updateTransforms","viewportTraversersMap","loadOptions","fetch","attributions","basePath","i3s","TILES_TOTAL","TILES_IN_MEMORY","TILES_IN_VIEW","TILES_RENDERABLE","TILES_LOADED","TILES_LOADING","TILES_UNLOADED","TILES_LOAD_FAILED","POINTS_COUNT","TILES_GPU_MEMORY","Tileset3D","json","options","tileset","loader","type","url","path","dirname","lodMetricType","lodMetricValue","refine","root","roots","cartographicCenter","cartesianCenter","zoom","boundingVolume","traverseCounter","geometricError","_traverser","_initializeTraverser","_cache","TilesetCache","_requestScheduler","RequestScheduler","_frameNumber","_pendingCount","_tiles","_emptyTiles","_requestedTiles","frameStateData","lastUpdatedVieports","_queryParams","_queryParamsString","gpuMemoryUsageInBytes","stats","Stats","id","_initializeStats","_extensionsUsed","dynamicScreenSpaceErrorComputedDensity","extras","asset","credits","_initializeTileSet","_destroy","Object","values","getQueryParamString","props","tilePath","isDataUrl","startsWith","queryParams","extensionName","Boolean","indexOf","viewports","Array","reset","length","viewportsToTraverse","viewport","_needTraverse","push","_initializeTileHeaders","includes","frameState","traverse","viewportId","traverserId","currentFrameStateData","requestedTiles","emptyTiles","_updateTiles","frameStateKey","frameStateDataValue","concat","tile","_loadTiles","_unloadTiles","_updateStats","oldSelectedTiles","set1","Set","map","t","set2","changed","filter","x","has","contentUnloaded","_loadTile","unloadTiles","_unloadTile","tilesRenderable","pointsRenderable","contentAvailable","content","pointCount","get","count","tilesetJson","TILESET_TYPE","TILES3D","_initializeCesiumTileset","I3S","_initializeI3STileset","_calculateViewProps","center","console","warn","Vector3","cartesianToCartographic","parentTileHeader","rootTile","Tile3D","children","depth","stack","pop","incrementCount","header","childHeader","childTile","TraverserClass","Tileset3DTraverser","I3SetTraverser","TilesetTraverser","onTraversalEnd","_onTraversalEnd","bind","parentTile","_destroySubtree","_onStartTileLoading","loadContent","loaded","_onTileLoadError","_onEndTileLoading","_onTileLoad","error","message","toString","_addTileToCache","decrementCount","add","_updateCacheStats","byteLength","unloadContent","child","_destroyTile","unloadTile","destroy","Error","version","v","tilesetVersion","properties","extensionsUsed","token","queryParamStrings","keys","key","join"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n/*\n\n  The Tileset loading and rendering flow is as below,\n  A rendered (i.e. deck.gl `Tile3DLayer`) triggers `tileset.update()` after a `tileset` is loaded\n  `tileset` starts traversing the tile tree and update `requestTiles` (tiles of which content need\n  to be fetched) and `selectedTiles` (tiles ready for rendering under the current viewport).\n  `Tile3DLayer` will update rendering based on `selectedTiles`.\n  `Tile3DLayer` also listens to `onTileLoad` callback and trigger another round of `update and then traversal`\n  when new tiles are loaded.\n\n  As I3S tileset have stored `tileHeader` file (metadata) and tile content files (geometry, texture, ...) separately.\n  During each traversal, it issues `tilHeader` requests if that `tileHeader` is not yet fetched,\n  after the tile header is fulfilled, it will resume the traversal starting from the tile just fetched (not root).\n\n  Tile3DLayer\n       |\n   await load(tileset)\n       |\n   tileset.update()\n       |                async load tileHeader\n   tileset.traverse() -------------------------- Queued\n       |        resume traversal after fetched  |\n       |----------------------------------------|\n       |\n       |                     async load tile content\n  tilset.requestedTiles  ----------------------------- RequestScheduler\n                                                              |\n  tilset.selectedTiles (ready for rendering)                  |\n       |         Listen to                                    |\n    Tile3DLayer ----------- onTileLoad  ----------------------|\n       |                         |   notify new tile is available\n    updateLayers                 |\n                        tileset.update // trigger another round of update\n*/\n\nimport {Matrix4, Vector3} from '@math.gl/core';\nimport {Ellipsoid} from '@math.gl/geospatial';\nimport {Stats} from '@probe.gl/stats';\nimport {\n  RequestScheduler,\n  assert,\n  path,\n  LoaderWithParser,\n  LoaderOptions\n} from '@loaders.gl/loader-utils';\nimport TilesetCache from './tileset-cache';\nimport {calculateTransformProps} from './helpers/transform-utils';\nimport {FrameState, getFrameState} from './helpers/frame-state';\nimport {getZoomFromBoundingVolume} from './helpers/zoom';\nimport Tile3D from './tile-3d';\nimport Tileset3DTraverser from './traversers/tileset-3d-traverser';\nimport TilesetTraverser from './traversers/tileset-traverser';\nimport I3SetTraverser from './traversers/i3s-tileset-traverser';\nimport {TILESET_TYPE} from '../constants';\n\nexport type Tileset3DProps = {\n  // loading\n  throttleRequests?: boolean;\n  maxRequests?: number;\n  loadOptions?: LoaderOptions;\n  loadTiles?: boolean;\n  basePath?: string;\n  maximumMemoryUsage?: number;\n\n  // Metadata\n  description?: string;\n  attributions?: string[];\n\n  // Transforms\n  ellipsoid?: object;\n  modelMatrix?: Matrix4;\n\n  // Traversal\n  maximumScreenSpaceError?: number;\n  viewportTraversersMap?: any;\n  updateTransforms?: boolean;\n  viewDistanceScale?: number;\n\n  // Callbacks\n  onTileLoad?: (tile: Tile3D) => any;\n  onTileUnload?: (tile: Tile3D) => any;\n  onTileError?: (tile: Tile3D, message: string, url: string) => any;\n  contentLoader?: (tile: Tile3D) => Promise<void>;\n  onTraversalComplete?: (selectedTiles: Tile3D[]) => Tile3D[];\n};\n\ntype Props = {\n  description: string;\n  ellipsoid: object;\n  modelMatrix: Matrix4;\n  throttleRequests: boolean;\n  maximumMemoryUsage: number;\n  onTileLoad: (tile: Tile3D) => any;\n  onTileUnload: (tile: Tile3D) => any;\n  onTileError: (tile: Tile3D, message: string, url: string) => any;\n  onTraversalComplete: (selectedTiles: Tile3D[]) => Tile3D[];\n  maximumScreenSpaceError: number;\n  viewportTraversersMap: any;\n  attributions: string[];\n  maxRequests: number;\n  loadTiles: boolean;\n  loadOptions: LoaderOptions;\n  updateTransforms: boolean;\n  viewDistanceScale: number;\n  basePath: string;\n  contentLoader?: (tile: Tile3D) => Promise<void>;\n  i3s: {[key: string]: any};\n};\n\nconst DEFAULT_PROPS: Props = {\n  description: '',\n\n  ellipsoid: Ellipsoid.WGS84,\n  // A 4x4 transformation matrix this transforms the entire tileset.\n  modelMatrix: new Matrix4(),\n\n  // Set to false to disable network request throttling\n  throttleRequests: true,\n\n  // Number of simultaneous requsts, if throttleRequests is true\n  maxRequests: 64,\n\n  maximumMemoryUsage: 32,\n\n  /**\n   * Callback. Indicates this a tile's content was loaded\n   * @param tile {TileHeader}\n   */\n  onTileLoad: () => {},\n  /**\n   * Callback. Indicates this a tile's content was unloaded\n   * @param tile {TileHeader}\n   */\n  onTileUnload: () => {},\n  onTileError: () => {},\n  /**\n   * Callback. Allows post-process selectedTiles right after traversal.\n   * @param selectedTiles {TileHeader[]}\n   * @returns TileHeader[] - output array of tiles to return to deck.gl\n   */\n  onTraversalComplete: (selectedTiles: Tile3D[]) => selectedTiles,\n\n  // Optional async tile content loader\n  contentLoader: undefined,\n\n  // View distance scale modifier\n  viewDistanceScale: 1.0,\n\n  // TODO CESIUM\n  // The maximum screen space error used to drive level of detail refinement.\n  maximumScreenSpaceError: 8,\n\n  loadTiles: true,\n  updateTransforms: true,\n  viewportTraversersMap: null,\n\n  loadOptions: {fetch: {}},\n\n  attributions: [],\n  basePath: '',\n\n  i3s: {}\n};\n\n// Tracked Stats\nconst TILES_TOTAL = 'Tiles In Tileset(s)';\nconst TILES_IN_MEMORY = 'Tiles In Memory';\nconst TILES_IN_VIEW = 'Tiles In View';\nconst TILES_RENDERABLE = 'Tiles To Render';\nconst TILES_LOADED = 'Tiles Loaded';\nconst TILES_LOADING = 'Tiles Loading';\nconst TILES_UNLOADED = 'Tiles Unloaded';\nconst TILES_LOAD_FAILED = 'Failed Tile Loads';\nconst POINTS_COUNT = 'Points';\nconst TILES_GPU_MEMORY = 'Tile Memory Use';\n\nexport default class Tileset3D {\n  // props: Tileset3DProps;\n  options: Props;\n  loadOptions: {[key: string]: any};\n\n  type: string;\n  tileset: {[key: string]: any};\n  loader: LoaderWithParser;\n  url: string;\n  basePath: string;\n  modelMatrix: Matrix4;\n  ellipsoid: any;\n  lodMetricType: string;\n  lodMetricValue: number;\n  refine: string;\n  root: Tile3D | null;\n  roots: {[key: string]: Tile3D};\n  asset: {[key: string]: any};\n\n  description: string;\n  properties: any;\n  extras: any;\n  attributions: any;\n  credits: any;\n\n  stats: Stats;\n\n  traverseCounter: number;\n  geometricError: number;\n  selectedTiles: Tile3D[];\n\n  cartographicCenter: Vector3 | null;\n  cartesianCenter: Vector3 | null;\n  zoom: number;\n  boundingVolume: any;\n\n  // METRICS\n  // The maximum amount of GPU memory (in MB) that may be used to cache tiles.\n  // Tiles not in view are unloaded to enforce private\n  // The total amount of GPU memory in bytes used by the tileset.\n  gpuMemoryUsageInBytes: any;\n  dynamicScreenSpaceErrorComputedDensity: any;\n\n  // TRAVERSAL\n  _traverser: TilesetTraverser;\n  private _cache: TilesetCache;\n  _requestScheduler: RequestScheduler;\n\n  _frameNumber: number;\n  private _queryParamsString: string;\n  private _queryParams: any;\n  private _extensionsUsed: any;\n  private _tiles: {[id: string]: Tile3D};\n\n  // counter for tracking tiles requests\n  private _pendingCount: any;\n\n  // HOLD TRAVERSAL RESULTS\n  private lastUpdatedVieports: any[] | null;\n  private _requestedTiles: any;\n  private _emptyTiles: any;\n  private frameStateData: any;\n\n  maximumMemoryUsage: number;\n\n  /**\n   * Create a new Tileset3D\n   * @param json\n   * @param props\n   */\n  // eslint-disable-next-line max-statements\n  constructor(json: any, options?: Tileset3DProps) {\n    assert(json);\n\n    // PUBLIC MEMBERS\n    this.options = {...DEFAULT_PROPS, ...options};\n    // raw data\n    this.tileset = json;\n    this.loader = json.loader;\n    // could be  3d tiles, i3s\n    this.type = json.type;\n    // The url to a tileset JSON file.\n    this.url = json.url;\n    this.basePath = json.basePath || path.dirname(this.url);\n    this.modelMatrix = this.options.modelMatrix;\n    this.ellipsoid = this.options.ellipsoid;\n\n    // Geometric error when the tree is not rendered at all\n    this.lodMetricType = json.lodMetricType;\n    this.lodMetricValue = json.lodMetricValue;\n    this.refine = json.root.refine;\n\n    this.loadOptions = this.options.loadOptions || {};\n\n    this.root = null;\n    this.roots = {};\n    // view props\n    this.cartographicCenter = null;\n    this.cartesianCenter = null;\n    this.zoom = 1;\n    this.boundingVolume = null;\n\n    // TRAVERSAL\n    this.traverseCounter = 0;\n    this.geometricError = 0;\n    this._traverser = this._initializeTraverser();\n    this._cache = new TilesetCache();\n    this._requestScheduler = new RequestScheduler({\n      throttleRequests: this.options.throttleRequests,\n      maxRequests: this.options.maxRequests\n    });\n    // update tracker\n    // increase in each update cycle\n    this._frameNumber = 0;\n\n    // counter for tracking tiles requests\n    this._pendingCount = 0;\n\n    // HOLD TRAVERSAL RESULTS\n    this._tiles = {};\n    this.selectedTiles = [];\n    this._emptyTiles = [];\n    this._requestedTiles = [];\n    this.frameStateData = {};\n    this.lastUpdatedVieports = null;\n\n    this._queryParams = {};\n    this._queryParamsString = '';\n\n    // METRICS\n    // The maximum amount of GPU memory (in MB) that may be used to cache tiles.\n    // Tiles not in view are unloaded to enforce this.\n    this.maximumMemoryUsage = this.options.maximumMemoryUsage || 32;\n    // The total amount of GPU memory in bytes used by the tileset.\n    this.gpuMemoryUsageInBytes = 0;\n    this.stats = new Stats({id: this.url});\n    this._initializeStats();\n\n    // EXTRACTED FROM TILESET\n    this._extensionsUsed = undefined;\n    this.dynamicScreenSpaceErrorComputedDensity = 0.0; // Updated based on the camera position and direction\n    // Metadata for the entire tileset\n    this.extras = null;\n    this.asset = {};\n    this.credits = {};\n    this.description = this.options.description || '';\n\n    this._initializeTileSet(json);\n  }\n\n  /** Release resources */\n  destroy(): void {\n    this._destroy();\n  }\n\n  /** Is the tileset loaded (update needs to have been called at least once) */\n  isLoaded(): boolean {\n    // Check that `_frameNumber !== 0` which means that update was called at least once\n    return this._pendingCount === 0 && this._frameNumber !== 0;\n  }\n\n  get tiles(): object[] {\n    return Object.values(this._tiles);\n  }\n\n  get frameNumber(): number {\n    return this._frameNumber;\n  }\n\n  get queryParams(): string {\n    if (!this._queryParamsString) {\n      this._queryParamsString = getQueryParamString(this._queryParams);\n    }\n    return this._queryParamsString;\n  }\n\n  setProps(props: Tileset3DProps): void {\n    this.options = {...this.options, ...props};\n  }\n\n  /** @deprecated */\n  setOptions(options: Tileset3DProps): void {\n    this.options = {...this.options, ...options};\n  }\n\n  /**\n   * Return a loadable tile url for a specific tile subpath\n   * @param tilePath a tile subpath\n   */\n  getTileUrl(tilePath: string): string {\n    const isDataUrl = tilePath.startsWith('data:');\n    if (isDataUrl) {\n      return tilePath;\n    }\n    return `${tilePath}${this.queryParams}`;\n  }\n\n  // TODO CESIUM specific\n  hasExtension(extensionName: string): boolean {\n    return Boolean(this._extensionsUsed && this._extensionsUsed.indexOf(extensionName) > -1);\n  }\n\n  /**\n   * Update visible tiles relying on a list of viewports\n   * @param viewports - list of viewports\n   */\n  // eslint-disable-next-line max-statements, complexity\n  update(viewports: any[]): void {\n    if ('loadTiles' in this.options && !this.options.loadTiles) {\n      return;\n    }\n    if (this.traverseCounter > 0) {\n      return;\n    }\n    if (!viewports && this.lastUpdatedVieports) {\n      viewports = this.lastUpdatedVieports;\n    } else {\n      this.lastUpdatedVieports = viewports;\n    }\n    if (!(viewports instanceof Array)) {\n      viewports = [viewports];\n    }\n\n    this._cache.reset();\n    this._frameNumber++;\n    this.traverseCounter = viewports.length;\n    const viewportsToTraverse: string[] = [];\n    // First loop to decrement traverseCounter\n    for (const viewport of viewports) {\n      const id = viewport.id as string;\n      if (this._needTraverse(id)) {\n        viewportsToTraverse.push(id);\n      } else {\n        this.traverseCounter--;\n      }\n    }\n\n    // Second loop to traverse\n    for (const viewport of viewports) {\n      const id = viewport.id as string;\n      if (!this.roots[id]) {\n        this.roots[id] = this._initializeTileHeaders(this.tileset, null);\n      }\n\n      if (!viewportsToTraverse.includes(id)) {\n        continue; // eslint-disable-line no-continue\n      }\n      const frameState = getFrameState(viewport, this._frameNumber);\n      this._traverser.traverse(this.roots[id], frameState, this.options);\n    }\n  }\n\n  /**\n   * Check if traversal is needed for particular viewport\n   * @param {string} viewportId - id of a viewport\n   * @return {boolean}\n   */\n  _needTraverse(viewportId: string): boolean {\n    let traverserId = viewportId;\n    if (this.options.viewportTraversersMap) {\n      traverserId = this.options.viewportTraversersMap[viewportId];\n    }\n    if (traverserId !== viewportId) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * The callback to post-process tiles after traversal procedure\n   * @param frameState - frame state for tile culling\n   */\n  _onTraversalEnd(frameState: FrameState): void {\n    const id = frameState.viewport.id;\n    if (!this.frameStateData[id]) {\n      this.frameStateData[id] = {selectedTiles: [], _requestedTiles: [], _emptyTiles: []};\n    }\n    const currentFrameStateData = this.frameStateData[id];\n    const selectedTiles = Object.values(this._traverser.selectedTiles);\n    currentFrameStateData.selectedTiles = selectedTiles;\n    currentFrameStateData._requestedTiles = Object.values(this._traverser.requestedTiles);\n    currentFrameStateData._emptyTiles = Object.values(this._traverser.emptyTiles);\n\n    this.traverseCounter--;\n    if (this.traverseCounter > 0) {\n      return;\n    }\n\n    this._updateTiles();\n  }\n\n  /**\n   * Update tiles relying on data from all traversers\n   */\n  _updateTiles(): void {\n    this.selectedTiles = [];\n    this._requestedTiles = [];\n    this._emptyTiles = [];\n\n    for (const frameStateKey in this.frameStateData) {\n      const frameStateDataValue = this.frameStateData[frameStateKey];\n      this.selectedTiles = this.selectedTiles.concat(frameStateDataValue.selectedTiles);\n      this._requestedTiles = this._requestedTiles.concat(frameStateDataValue._requestedTiles);\n      this._emptyTiles = this._emptyTiles.concat(frameStateDataValue._emptyTiles);\n    }\n\n    this.selectedTiles = this.options.onTraversalComplete(this.selectedTiles);\n\n    for (const tile of this.selectedTiles) {\n      this._tiles[tile.id] = tile;\n    }\n\n    this._loadTiles();\n    this._unloadTiles();\n    this._updateStats();\n  }\n\n  _tilesChanged(oldSelectedTiles, selectedTiles) {\n    if (oldSelectedTiles.length !== selectedTiles.length) {\n      return true;\n    }\n    const set1 = new Set(oldSelectedTiles.map((t) => t.id));\n    const set2 = new Set(selectedTiles.map((t) => t.id));\n    let changed = oldSelectedTiles.filter((x) => !set2.has(x.id)).length > 0;\n    changed = changed || selectedTiles.filter((x) => !set1.has(x.id)).length > 0;\n    return changed;\n  }\n\n  _loadTiles() {\n    // Sort requests by priority before making any requests.\n    // This makes it less likely this requests will be cancelled after being issued.\n    // requestedTiles.sort((a, b) => a._priority - b._priority);\n    for (const tile of this._requestedTiles) {\n      if (tile.contentUnloaded) {\n        this._loadTile(tile);\n      }\n    }\n  }\n\n  _unloadTiles() {\n    // unload tiles from cache when hit maximumMemoryUsage\n    this._cache.unloadTiles(this, (tileset, tile) => tileset._unloadTile(tile));\n  }\n\n  _updateStats() {\n    let tilesRenderable = 0;\n    let pointsRenderable = 0;\n    for (const tile of this.selectedTiles) {\n      if (tile.contentAvailable && tile.content) {\n        tilesRenderable++;\n        if (tile.content.pointCount) {\n          pointsRenderable += tile.content.pointCount;\n        }\n      }\n    }\n\n    this.stats.get(TILES_IN_VIEW).count = this.selectedTiles.length;\n    this.stats.get(TILES_RENDERABLE).count = tilesRenderable;\n    this.stats.get(POINTS_COUNT).count = pointsRenderable;\n  }\n\n  _initializeTileSet(tilesetJson) {\n    this.root = this._initializeTileHeaders(tilesetJson, null);\n\n    // TODO CESIUM Specific\n    if (this.type === TILESET_TYPE.TILES3D) {\n      this._initializeCesiumTileset(tilesetJson);\n    }\n\n    if (this.type === TILESET_TYPE.I3S) {\n      this._initializeI3STileset();\n    }\n    // Calculate cartographicCenter & zoom props to help apps center view on tileset\n    this._calculateViewProps();\n  }\n\n  // Called during initialize Tileset to initialize the tileset's cartographic center (longitude, latitude) and zoom.\n  _calculateViewProps() {\n    const root = this.root as Tile3D;\n    assert(root);\n    const {center} = root.boundingVolume;\n    // TODO - handle all cases\n    if (!center) {\n      // eslint-disable-next-line\n      console.warn('center was not pre-calculated for the root tile');\n      this.cartographicCenter = new Vector3();\n      this.zoom = 1;\n      return;\n    }\n    this.cartographicCenter = Ellipsoid.WGS84.cartesianToCartographic(center, new Vector3());\n    this.cartesianCenter = center;\n    this.zoom = getZoomFromBoundingVolume(root.boundingVolume);\n  }\n\n  _initializeStats() {\n    this.stats.get(TILES_TOTAL);\n    this.stats.get(TILES_LOADING);\n    this.stats.get(TILES_IN_MEMORY);\n    this.stats.get(TILES_IN_VIEW);\n    this.stats.get(TILES_RENDERABLE);\n    this.stats.get(TILES_LOADED);\n    this.stats.get(TILES_UNLOADED);\n    this.stats.get(TILES_LOAD_FAILED);\n    this.stats.get(POINTS_COUNT, 'memory');\n    this.stats.get(TILES_GPU_MEMORY, 'memory');\n  }\n\n  // Installs the main tileset JSON file or a tileset JSON file referenced from a tile.\n  // eslint-disable-next-line max-statements\n  _initializeTileHeaders(tilesetJson, parentTileHeader) {\n    // A tileset JSON file referenced from a tile may exist in a different directory than the root tileset.\n    // Get the basePath relative to the external tileset.\n    const rootTile = new Tile3D(this, tilesetJson.root, parentTileHeader); // resource\n\n    // If there is a parentTileHeader, add the root of the currently loading tileset\n    // to parentTileHeader's children, and update its depth.\n    if (parentTileHeader) {\n      parentTileHeader.children.push(rootTile);\n      rootTile.depth = parentTileHeader.depth + 1;\n    }\n\n    // Cesium 3d tiles knows the hierarchy beforehand\n    if (this.type === TILESET_TYPE.TILES3D) {\n      const stack: Tile3D[] = [];\n      stack.push(rootTile);\n\n      while (stack.length > 0) {\n        const tile = stack.pop() as Tile3D;\n        this.stats.get(TILES_TOTAL).incrementCount();\n        const children = tile.header.children || [];\n        for (const childHeader of children) {\n          const childTile = new Tile3D(this, childHeader, tile);\n          tile.children.push(childTile);\n          childTile.depth = tile.depth + 1;\n          stack.push(childTile);\n        }\n      }\n    }\n\n    return rootTile;\n  }\n\n  _initializeTraverser() {\n    let TraverserClass;\n    const type = this.type;\n    switch (type) {\n      case TILESET_TYPE.TILES3D:\n        TraverserClass = Tileset3DTraverser;\n        break;\n      case TILESET_TYPE.I3S:\n        TraverserClass = I3SetTraverser;\n        break;\n      default:\n        TraverserClass = TilesetTraverser;\n    }\n\n    return new TraverserClass({\n      basePath: this.basePath,\n      onTraversalEnd: this._onTraversalEnd.bind(this)\n    });\n  }\n\n  _destroyTileHeaders(parentTile) {\n    this._destroySubtree(parentTile);\n  }\n\n  async _loadTile(tile) {\n    let loaded;\n    try {\n      this._onStartTileLoading();\n      loaded = await tile.loadContent();\n    } catch (error) {\n      this._onTileLoadError(tile, error);\n    } finally {\n      this._onEndTileLoading();\n      this._onTileLoad(tile, loaded);\n    }\n  }\n\n  _onTileLoadError(tile, error) {\n    this.stats.get(TILES_LOAD_FAILED).incrementCount();\n\n    const message = error.message || error.toString();\n    const url = tile.url;\n    // TODO - Allow for probe log to be injected instead of console?\n    console.error(`A 3D tile failed to load: ${tile.url} ${message}`); // eslint-disable-line\n    this.options.onTileError(tile, message, url);\n  }\n\n  _onTileLoad(tile, loaded) {\n    if (!loaded) {\n      return;\n    }\n\n    // add coordinateOrigin and modelMatrix to tile\n    if (tile && tile.content) {\n      calculateTransformProps(tile, tile.content);\n    }\n\n    this._addTileToCache(tile);\n    this.options.onTileLoad(tile);\n  }\n\n  _onStartTileLoading() {\n    this._pendingCount++;\n    this.stats.get(TILES_LOADING).incrementCount();\n  }\n\n  _onEndTileLoading() {\n    this._pendingCount--;\n    this.stats.get(TILES_LOADING).decrementCount();\n  }\n\n  _addTileToCache(tile) {\n    this._cache.add(this, tile, (tileset) => tileset._updateCacheStats(tile));\n  }\n\n  _updateCacheStats(tile) {\n    this.stats.get(TILES_LOADED).incrementCount();\n    this.stats.get(TILES_IN_MEMORY).incrementCount();\n\n    // Good enough? Just use the raw binary ArrayBuffer's byte length.\n    this.gpuMemoryUsageInBytes += tile.content.byteLength || 0;\n    this.stats.get(TILES_GPU_MEMORY).count = this.gpuMemoryUsageInBytes;\n  }\n\n  _unloadTile(tile) {\n    this.gpuMemoryUsageInBytes -= (tile.content && tile.content.byteLength) || 0;\n\n    this.stats.get(TILES_IN_MEMORY).decrementCount();\n    this.stats.get(TILES_UNLOADED).incrementCount();\n    this.stats.get(TILES_GPU_MEMORY).count = this.gpuMemoryUsageInBytes;\n\n    this.options.onTileUnload(tile);\n    tile.unloadContent();\n  }\n\n  // Traverse the tree and destroy all tiles\n  _destroy() {\n    const stack: Tile3D[] = [];\n\n    if (this.root) {\n      stack.push(this.root);\n    }\n\n    while (stack.length > 0) {\n      const tile: Tile3D = stack.pop() as Tile3D;\n\n      for (const child of tile.children) {\n        stack.push(child);\n      }\n\n      this._destroyTile(tile);\n    }\n    this.root = null;\n  }\n\n  // Traverse the tree and destroy all sub tiles\n  _destroySubtree(tile) {\n    const root = tile;\n    const stack: Tile3D[] = [];\n    stack.push(root);\n    while (stack.length > 0) {\n      tile = stack.pop();\n      for (const child of tile.children) {\n        stack.push(child);\n      }\n      if (tile !== root) {\n        this._destroyTile(tile);\n      }\n    }\n    root.children = [];\n  }\n\n  _destroyTile(tile) {\n    this._cache.unloadTile(this, tile);\n    this._unloadTile(tile);\n    tile.destroy();\n  }\n\n  _initializeCesiumTileset(tilesetJson) {\n    this.asset = tilesetJson.asset;\n    if (!this.asset) {\n      throw new Error('Tileset must have an asset property.');\n    }\n    if (this.asset.version !== '0.0' && this.asset.version !== '1.0') {\n      throw new Error('The tileset must be 3D Tiles version 0.0 or 1.0.');\n    }\n\n    // Note: `asset.tilesetVersion` is version of the tileset itself (not the version of the 3D TILES standard)\n    // We add this version as a `v=1.0` query param to fetch the right version and not get an older cached version\n    if ('tilesetVersion' in this.asset) {\n      this._queryParams.v = this.asset.tilesetVersion;\n    }\n\n    // TODO - ion resources have a credits property we can use for additional attribution.\n    this.credits = {\n      attributions: this.options.attributions || []\n    };\n    this.description = this.options.description || '';\n\n    // Gets the tileset's properties dictionary object, which contains metadata about per-feature properties.\n    this.properties = tilesetJson.properties;\n    this.geometricError = tilesetJson.geometricError;\n    this._extensionsUsed = tilesetJson.extensionsUsed;\n    // Returns the extras property at the top of the tileset JSON (application specific metadata).\n    this.extras = tilesetJson.extras;\n  }\n\n  _initializeI3STileset() {\n    if (this.loadOptions.i3s && 'token' in this.loadOptions.i3s) {\n      this._queryParams.token = this.loadOptions.i3s.token;\n    }\n  }\n}\n\nfunction getQueryParamString(queryParams): string {\n  const queryParamStrings: string[] = [];\n  for (const key of Object.keys(queryParams)) {\n    queryParamStrings.push(`${key}=${queryParams[key]}`);\n  }\n  switch (queryParamStrings.length) {\n    case 0:\n      return '';\n    case 1:\n      return `?${queryParamStrings[0]}`;\n    default:\n      return `?${queryParamStrings.join('&')}`;\n  }\n}\n"],"file":"tileset-3d.js"}