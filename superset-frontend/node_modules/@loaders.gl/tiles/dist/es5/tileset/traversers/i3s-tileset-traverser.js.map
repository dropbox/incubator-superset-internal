{"version":3,"sources":["../../../../src/tileset/traversers/i3s-tileset-traverser.ts"],"names":["I3STilesetTraverser","options","_tileManager","I3STileManager","tile","frameState","_lodJudge","children","header","childTiles","tileset","child","extendedId","id","viewport","childTile","find","t","request","_loadTile","cachedRequest","nodePages","nodePagesTile","formTileFromNodePages","add","_onTileLoad","update","updateTile","nodeId","loader","nodeUrl","getTileUrl","url","loadOptions","i3s","isTileHeader","loadContent","TileHeader","push","_frameNumber","frameNumber","executeTraversal","TilesetTraverser"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;;;;;;;;;IAEqBA,mB;;;;;AAGnB,+BAAYC,OAAZ,EAAqB;AAAA;;AAAA;AACnB,8BAAMA,OAAN;AADmB;AAEnB,UAAKC,YAAL,GAAoB,IAAIC,uBAAJ,EAApB;AAFmB;AAGpB;;;;WAED,sBAAaC,IAAb,EAAmBC,UAAnB,EAA+B;AAE7BD,MAAAA,IAAI,CAACE,SAAL,GAAiB,sBAASF,IAAT,EAAeC,UAAf,CAAjB;AACA,aAAOD,IAAI,CAACE,SAAL,KAAmB,KAA1B;AACD;;;WAED,0BAAiBF,IAAjB,EAAuBC,UAAvB,EAA4C;AAAA;;AAC1C,UAAME,QAAQ,GAAGH,IAAI,CAACI,MAAL,CAAYD,QAAZ,IAAwB,EAAzC;AAEA,UAAME,UAAU,GAAGL,IAAI,CAACG,QAAxB;AACA,UAAMG,OAAO,GAAGN,IAAI,CAACM,OAArB;;AAJ0C,iDAMtBH,QANsB;AAAA;;AAAA;AAAA;AAAA,cAM/BI,KAN+B;AAOxC,cAAMC,UAAU,aAAMD,KAAK,CAACE,EAAZ,cAAkBR,UAAU,CAACS,QAAX,CAAoBD,EAAtC,CAAhB;AAEA,cAAME,SAAS,GAAGN,UAAU,IAAIA,UAAU,CAACO,IAAX,CAAgB,UAACC,CAAD;AAAA,mBAAOA,CAAC,CAACJ,EAAF,KAASD,UAAhB;AAAA,WAAhB,CAAhC;;AACA,cAAI,CAACG,SAAL,EAAgB;AACd,gBAAIG,OAAO,GAAG;AAAA,qBAAM,MAAI,CAACC,SAAL,CAAeR,KAAK,CAACE,EAArB,EAAyBH,OAAzB,CAAN;AAAA,aAAd;;AACA,gBAAMU,aAAa,GAAG,MAAI,CAAClB,YAAL,CAAkBc,IAAlB,CAAuBJ,UAAvB,CAAtB;;AACA,gBAAI,CAACQ,aAAL,EAAoB;AAElB,kBAAIV,OAAO,CAACA,OAAR,CAAgBW,SAApB,EAA+B;AAC7BH,gBAAAA,OAAO,GAAG;AAAA,yBAAMR,OAAO,CAACA,OAAR,CAAgBY,aAAhB,CAA8BC,qBAA9B,CAAoDZ,KAAK,CAACE,EAA1D,CAAN;AAAA,iBAAV;AACD;;AACD,cAAA,MAAI,CAACX,YAAL,CAAkBsB,GAAlB,CACEN,OADF,EAEEN,UAFF,EAGE,UAACJ,MAAD;AAAA,uBAAY,MAAI,CAACiB,WAAL,CAAiBjB,MAAjB,EAAyBJ,IAAzB,EAA+BQ,UAA/B,CAAZ;AAAA,eAHF,EAIEP,UAJF;AAMD,aAXD,MAWO;AAEL,cAAA,MAAI,CAACH,YAAL,CAAkBwB,MAAlB,CAAyBd,UAAzB,EAAqCP,UAArC;AACD;AACF,WAlBD,MAkBO,IAAIU,SAAJ,EAAe;AAEpB,YAAA,MAAI,CAACY,UAAL,CAAgBZ,SAAhB,EAA2BV,UAA3B;AACD;AA/BuC;;AAM1C,4DAA8B;AAAA;AA0B7B;AAhCyC;AAAA;AAAA;AAAA;AAAA;;AAiC1C,aAAO,KAAP;AACD;;;;iFAED,iBAAgBuB,MAAhB,EAAwBlB,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AACSmB,gBAAAA,MADT,GACmBnB,OADnB,CACSmB,MADT;AAEQC,gBAAAA,OAFR,GAEkBpB,OAAO,CAACqB,UAAR,WAAsBrB,OAAO,CAACsB,GAA9B,oBAA2CJ,MAA3C,EAFlB;AAIQ3B,gBAAAA,OAJR,mCAKOS,OAAO,CAACuB,WALf;AAMIC,kBAAAA,GAAG,kCACExB,OAAO,CAACuB,WAAR,CAAoBC,GADtB;AAEDC,oBAAAA,YAAY,EAAE,IAFb;AAGDC,oBAAAA,WAAW,EAAE;AAHZ;AANP;AAAA;AAAA,uBAae,gBAAKN,OAAL,EAAcD,MAAd,EAAsB5B,OAAtB,CAbf;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;WAwBA,qBAAYO,MAAZ,EAAoBJ,IAApB,EAA0BQ,UAA1B,EAAsC;AAEpC,UAAMG,SAAS,GAAG,IAAIsB,eAAJ,CAAejC,IAAI,CAACM,OAApB,EAA6BF,MAA7B,EAAqCJ,IAArC,EAA2CQ,UAA3C,CAAlB;AACAR,MAAAA,IAAI,CAACG,QAAL,CAAc+B,IAAd,CAAmBvB,SAAnB;;AACA,UAAMV,UAAU,GAAG,KAAKH,YAAL,CAAkBc,IAAlB,CAAuBD,SAAS,CAACF,EAAjC,EAAqCR,UAAxD;;AACA,WAAKsB,UAAL,CAAgBZ,SAAhB,EAA2BV,UAA3B;;AAGA,UAAI,KAAKkC,YAAL,KAAsBlC,UAAU,CAACmC,WAArC,EAAkD;AAChD,aAAKC,gBAAL,CAAsB1B,SAAtB,EAAiCV,UAAjC;AACD;AACF;;;EArF8CqC,yB","sourcesContent":["import {load} from '@loaders.gl/core';\nimport TilesetTraverser from './tileset-traverser';\n\nimport {lodJudge} from '../helpers/i3s-lod';\nimport TileHeader from '../tile-3d';\nimport I3STileManager from './i3s-tile-manager';\n\nexport default class I3STilesetTraverser extends TilesetTraverser {\n  private _tileManager: I3STileManager;\n\n  constructor(options) {\n    super(options);\n    this._tileManager = new I3STileManager();\n  }\n\n  shouldRefine(tile, frameState) {\n    // TODO refactor loaJudge\n    tile._lodJudge = lodJudge(tile, frameState);\n    return tile._lodJudge === 'DIG';\n  }\n\n  updateChildTiles(tile, frameState): boolean {\n    const children = tile.header.children || [];\n    // children which are already fetched and constructed as Tile3D instances\n    const childTiles = tile.children;\n    const tileset = tile.tileset;\n\n    for (const child of children) {\n      const extendedId = `${child.id}-${frameState.viewport.id}`;\n      // if child tile is not fetched\n      const childTile = childTiles && childTiles.find((t) => t.id === extendedId);\n      if (!childTile) {\n        let request = () => this._loadTile(child.id, tileset);\n        const cachedRequest = this._tileManager.find(extendedId);\n        if (!cachedRequest) {\n          // eslint-disable-next-line max-depth\n          if (tileset.tileset.nodePages) {\n            request = () => tileset.tileset.nodePagesTile.formTileFromNodePages(child.id);\n          }\n          this._tileManager.add(\n            request,\n            extendedId,\n            (header) => this._onTileLoad(header, tile, extendedId),\n            frameState\n          );\n        } else {\n          // update frameNumber since it is still needed in current frame\n          this._tileManager.update(extendedId, frameState);\n        }\n      } else if (childTile) {\n        // if child tile is fetched and available\n        this.updateTile(childTile, frameState);\n      }\n    }\n    return false;\n  }\n\n  async _loadTile(nodeId, tileset) {\n    const {loader} = tileset;\n    const nodeUrl = tileset.getTileUrl(`${tileset.url}/nodes/${nodeId}`);\n    // load metadata\n    const options = {\n      ...tileset.loadOptions,\n      i3s: {\n        ...tileset.loadOptions.i3s,\n        isTileHeader: true,\n        loadContent: false\n      }\n    };\n\n    return await load(nodeUrl, loader, options);\n  }\n\n  /**\n   * The callback to init TileHeader instance after loading the tile JSON\n   * @param {Object} header - the tile JSON from a dataset\n   * @param {TileHeader} tile - the parent TileHeader instance\n   * @param {string} extendedId - optional ID to separate copies of a tile for different viewports.\n   *                              const extendedId = `${tile.id}-${frameState.viewport.id}`;\n   * @return {void}\n   */\n  _onTileLoad(header, tile, extendedId) {\n    // after child tile is fetched\n    const childTile = new TileHeader(tile.tileset, header, tile, extendedId);\n    tile.children.push(childTile);\n    const frameState = this._tileManager.find(childTile.id).frameState;\n    this.updateTile(childTile, frameState);\n\n    // after tile fetched, resume traversal if still in current update/traversal frame\n    if (this._frameNumber === frameState.frameNumber) {\n      this.executeTraversal(childTile, frameState);\n    }\n  }\n}\n"],"file":"i3s-tileset-traverser.js"}