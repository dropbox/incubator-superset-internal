{"version":3,"sources":["../../../../src/lib/api/encode.ts"],"names":["encode","data","writer","options","encodeSync","encodeText","TextEncoder","encodeInBatches","batches","chunks","batch","push","concatenateArrayBuffers","isBrowser","encodeURLtoURL","tmpInputFilename","getTemporaryFilename","tmpOutputFilename","outputFilename","response","arrayBuffer","Error","text","TextDecoder","decode","dataIterator","getIterator","inputUrl","outputUrl","table","start","end","length","filename"],"mappings":"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","sourcesContent":["import type {Writer, LoaderOptions} from '@loaders.gl/loader-utils';\nimport {concatenateArrayBuffers, resolvePath} from '@loaders.gl/loader-utils';\nimport {isBrowser} from '@loaders.gl/loader-utils';\nimport {writeFile} from '../fetch/write-file';\nimport {fetchFile} from '../fetch/fetch-file';\n\n/**\n * Encode loaded data into a binary ArrayBuffer using the specified Writer.\n */\nexport async function encode(\n  data: any,\n  writer: Writer,\n  options?: LoaderOptions\n): Promise<ArrayBuffer> {\n  if (writer.encode) {\n    return await writer.encode(data, options);\n  }\n\n  if (writer.encodeSync) {\n    return writer.encodeSync(data, options);\n  }\n\n  if (writer.encodeText) {\n    return new TextEncoder().encode(await writer.encodeText(data, options));\n  }\n\n  if (writer.encodeInBatches) {\n    // Create an iterator representing the data\n    // TODO - Assumes this is a table\n    const batches = encodeInBatches(data, writer, options);\n\n    // Concatenate the output\n    const chunks: any[] = [];\n    for await (const batch of batches) {\n      chunks.push(batch);\n    }\n    // @ts-ignore\n    return concatenateArrayBuffers(...chunks);\n  }\n\n  if (!isBrowser && writer.encodeURLtoURL) {\n    // TODO - how to generate filenames with correct extensions?\n    const tmpInputFilename = getTemporaryFilename('input');\n    await writeFile(tmpInputFilename, data);\n\n    const tmpOutputFilename = getTemporaryFilename('output');\n\n    const outputFilename = await encodeURLtoURL(\n      tmpInputFilename,\n      tmpOutputFilename,\n      writer,\n      options\n    );\n\n    const response = await fetchFile(outputFilename);\n    return response.arrayBuffer();\n  }\n\n  throw new Error('Writer could not encode data');\n}\n\n/**\n * Encode loaded data into a binary ArrayBuffer using the specified Writer.\n */\nexport function encodeSync(data: any, writer: Writer, options?: LoaderOptions): ArrayBuffer {\n  if (writer.encodeSync) {\n    return writer.encodeSync(data, options);\n  }\n  throw new Error('Writer could not synchronously encode data');\n}\n\n/**\n * Encode loaded data to text using the specified Writer\n * @note This is a convenience function not intended for production use on large input data.\n * It is not optimized for performance. Data maybe converted from text to binary and back.\n * @throws if the writer does not generate text output\n */\nexport async function encodeText(\n  data: any,\n  writer: Writer,\n  options?: LoaderOptions\n): Promise<string> {\n  if (writer.text && writer.encodeText) {\n    return await writer.encodeText(data, options);\n  }\n\n  if (writer.text && (writer.encode || writer.encodeInBatches)) {\n    const arrayBuffer = await encode(data, writer, options);\n    return new TextDecoder().decode(arrayBuffer);\n  }\n\n  throw new Error('Writer could not encode data as text');\n}\n\n/**\n * Encode loaded data into a sequence (iterator) of binary ArrayBuffers using the specified Writer.\n */\nexport function encodeInBatches(\n  data: any,\n  writer: Writer,\n  options?: LoaderOptions\n): AsyncIterable<ArrayBuffer> {\n  if (writer.encodeInBatches) {\n    const dataIterator = getIterator(data);\n    return writer.encodeInBatches(dataIterator, options);\n  }\n  // TODO -fall back to atomic encode?\n  throw new Error('Writer could not encode data in batches');\n}\n\n/**\n * Encode data stored in a file (on disk) to another file.\n * @note Node.js only. This function enables using command-line converters as \"writers\".\n */\nexport async function encodeURLtoURL(\n  inputUrl,\n  outputUrl,\n  writer: Writer,\n  options\n): Promise<string> {\n  inputUrl = resolvePath(inputUrl);\n  outputUrl = resolvePath(outputUrl);\n  if (isBrowser || !writer.encodeURLtoURL) {\n    throw new Error();\n  }\n  const outputFilename = await writer.encodeURLtoURL(inputUrl, outputUrl, options);\n  return outputFilename;\n}\n\n/**\n * @todo TODO - this is an unacceptable hack!!!\n */\nfunction getIterator(data) {\n  const dataIterator = [{table: data, start: 0, end: data.length}];\n  return dataIterator;\n}\n\n/**\n * @todo Move to utils\n */\nfunction getTemporaryFilename(filename: string): string {\n  return `/tmp/${filename}`;\n}\n"],"file":"encode.js"}