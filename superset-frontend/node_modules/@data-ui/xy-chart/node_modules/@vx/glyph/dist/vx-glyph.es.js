import React from 'react';
import { Group } from '@vx/group';
import cx from 'classnames';
import { symbol, symbolCross, symbolDiamond, symbolStar, symbolTriangle, symbolWye, symbolSquare, symbolCircle } from 'd3-shape';

function Glyph(_ref) {
  var _ref$top = _ref.top,
      top = _ref$top === undefined ? 0 : _ref$top,
      _ref$left = _ref.left,
      left = _ref$left === undefined ? 0 : _ref$left,
      className = _ref.className,
      children = _ref.children;

  return React.createElement(
    Group,
    { className: cx('vx-glyph', className), top: top, left: left },
    children
  );
}

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var objectWithoutProperties = function (obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
};

function GlyphDot(_ref) {
  var _ref$top = _ref.top,
      top = _ref$top === undefined ? 0 : _ref$top,
      _ref$left = _ref.left,
      left = _ref$left === undefined ? 0 : _ref$left,
      className = _ref.className,
      children = _ref.children,
      cx$$1 = _ref.cx,
      cy = _ref.cy,
      r = _ref.r,
      fill = _ref.fill,
      stroke = _ref.stroke,
      strokeWidth = _ref.strokeWidth,
      strokeDasharray = _ref.strokeDasharray,
      restProps = objectWithoutProperties(_ref, ['top', 'left', 'className', 'children', 'cx', 'cy', 'r', 'fill', 'stroke', 'strokeWidth', 'strokeDasharray']);

  return React.createElement(
    Glyph,
    { top: top, left: left },
    React.createElement('circle', _extends({
      className: cx('vx-glyph-dot', className),
      cx: cx$$1,
      cy: cy,
      r: r,
      fill: fill,
      stroke: stroke,
      strokeWidth: strokeWidth,
      strokeDasharray: strokeDasharray
    }, restProps)),
    children
  );
}

function callOrValue(maybeFn, data) {
  if (typeof maybeFn === 'function') {
    return maybeFn(data);
  }
  return maybeFn;
}

function additionalProps(restProps, data) {
  return Object.keys(restProps).reduce(function (ret, cur) {
    ret[cur] = callOrValue(restProps[cur], data);
    return ret;
  }, {});
}

function GlyphCross(_ref) {
  var children = _ref.children,
      className = _ref.className,
      top = _ref.top,
      left = _ref.left,
      size = _ref.size,
      restProps = objectWithoutProperties(_ref, ['children', 'className', 'top', 'left', 'size']);

  var path = symbol();
  path.type(symbolCross);
  if (size) path.size(size);
  return React.createElement(
    Glyph,
    { top: top, left: left },
    React.createElement('path', _extends({
      className: cx('vx-glyph-cross', className),
      d: path()
    }, additionalProps(restProps))),
    children
  );
}

function GlyphDiamond(_ref) {
  var children = _ref.children,
      className = _ref.className,
      top = _ref.top,
      left = _ref.left,
      size = _ref.size,
      restProps = objectWithoutProperties(_ref, ['children', 'className', 'top', 'left', 'size']);

  var path = symbol();
  path.type(symbolDiamond);
  if (size) path.size(size);
  return React.createElement(
    Glyph,
    { top: top, left: left },
    React.createElement('path', _extends({
      className: cx('vx-glyph-diamond', className),
      d: path()
    }, additionalProps(restProps))),
    children
  );
}

function GlyphStar(_ref) {
  var children = _ref.children,
      className = _ref.className,
      top = _ref.top,
      left = _ref.left,
      size = _ref.size,
      restProps = objectWithoutProperties(_ref, ['children', 'className', 'top', 'left', 'size']);

  var path = symbol();
  path.type(symbolStar);
  if (size) path.size(size);
  return React.createElement(
    Glyph,
    { top: top, left: left },
    React.createElement('path', _extends({ className: cx('vx-glyph-star', className), d: path() }, additionalProps(restProps))),
    children
  );
}

function GlyphTriangle(_ref) {
  var children = _ref.children,
      className = _ref.className,
      top = _ref.top,
      left = _ref.left,
      size = _ref.size,
      restProps = objectWithoutProperties(_ref, ['children', 'className', 'top', 'left', 'size']);

  var path = symbol();
  path.type(symbolTriangle);
  if (size) path.size(size);
  return React.createElement(
    Glyph,
    { top: top, left: left },
    React.createElement('path', _extends({
      className: cx('vx-glyph-triangle', className),
      d: path()
    }, additionalProps(restProps))),
    children
  );
}

function GlyphWye(_ref) {
  var children = _ref.children,
      className = _ref.className,
      top = _ref.top,
      left = _ref.left,
      size = _ref.size,
      restProps = objectWithoutProperties(_ref, ['children', 'className', 'top', 'left', 'size']);

  var path = symbol();
  path.type(symbolWye);
  if (size) path.size(size);
  return React.createElement(
    Glyph,
    { top: top, left: left },
    React.createElement('path', _extends({ className: cx('vx-glyph-wye', className), d: path() }, additionalProps(restProps))),
    children
  );
}

function GlyphSquare(_ref) {
  var children = _ref.children,
      className = _ref.className,
      top = _ref.top,
      left = _ref.left,
      size = _ref.size,
      restProps = objectWithoutProperties(_ref, ['children', 'className', 'top', 'left', 'size']);

  var path = symbol();
  path.type(symbolSquare);
  if (size) path.size(size);
  return React.createElement(
    Glyph,
    { top: top, left: left },
    React.createElement('path', _extends({
      className: cx('vx-glyph-square', className),
      d: path()
    }, additionalProps(restProps))),
    children
  );
}

function GlyphCircle(_ref) {
  var children = _ref.children,
      className = _ref.className,
      top = _ref.top,
      left = _ref.left,
      size = _ref.size,
      restProps = objectWithoutProperties(_ref, ['children', 'className', 'top', 'left', 'size']);

  var path = symbol();
  path.type(symbolCircle);
  if (size) path.size(size);
  return React.createElement(
    Glyph,
    { top: top, left: left },
    React.createElement('path', _extends({
      className: cx('vx-glyph-circle', className),
      d: path()
    }, additionalProps(restProps))),
    children
  );
}

export { Glyph, GlyphDot, GlyphCross, GlyphDiamond, GlyphStar, GlyphTriangle, GlyphWye, GlyphSquare, GlyphCircle };
