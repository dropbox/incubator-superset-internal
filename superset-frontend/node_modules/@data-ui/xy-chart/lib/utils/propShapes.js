"use strict";

exports.__esModule = true;
exports.dragShape = exports.brushShape = exports.marginShape = exports.generalStyleShape = exports.pointComponentPropTypes = exports.interpolationShape = exports.themeShape = exports.gridStylesShape = exports.tickStylesShape = exports.axisStylesShape = exports.intervalSeriesDataShape = exports.pointSeriesDataShape = exports.stackedBarSeriesDataShape = exports.groupedBarSeriesDataShape = exports.barSeriesDataShape = exports.areaSeriesDataShape = exports.lineSeriesDataShape = exports.violinPlotSeriesDataShape = exports.boxPlotSeriesDataShape = exports.scaleShape = exports.stringNumberDateObjectPropType = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _interpolatorLookup = _interopRequireDefault(require("./interpolatorLookup"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var stringNumberDateObjectPropType = _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.instanceOf(Date), _propTypes.default.object]);

exports.stringNumberDateObjectPropType = stringNumberDateObjectPropType;

var scaleShape = _propTypes.default.shape({
  type: _propTypes.default.oneOf(['time', 'timeUtc', 'linear', 'band']).isRequired,
  includeZero: _propTypes.default.bool,
  // these would override any computation done by xyplot
  // and would allow specifying colors for scales, etc.
  range: _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])),
  rangeRound: _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])),
  domain: _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]))
});

exports.scaleShape = scaleShape;

var boxPlotSeriesDataShape = _propTypes.default.arrayOf(_propTypes.default.shape({
  x: stringNumberDateObjectPropType,
  median: _propTypes.default.number.isRequired,
  min: _propTypes.default.number.isRequired,
  max: _propTypes.default.number.isRequired,
  firstQuartile: _propTypes.default.number.isRequired,
  thirdQuartile: _propTypes.default.number.isRequired,
  outliers: _propTypes.default.array.isRequired
}));

exports.boxPlotSeriesDataShape = boxPlotSeriesDataShape;

var violinPlotSeriesDataShape = _propTypes.default.arrayOf(_propTypes.default.shape({
  x: stringNumberDateObjectPropType,
  binData: _propTypes.default.array.isRequired
}));

exports.violinPlotSeriesDataShape = violinPlotSeriesDataShape;

var lineSeriesDataShape = _propTypes.default.arrayOf(_propTypes.default.shape({
  x: stringNumberDateObjectPropType,
  y: _propTypes.default.number // null data are not rendered

}));

exports.lineSeriesDataShape = lineSeriesDataShape;

var areaSeriesDataShape = _propTypes.default.arrayOf(_propTypes.default.shape({
  x: stringNumberDateObjectPropType,
  y: _propTypes.default.number,
  // null data are not rendered
  y0: _propTypes.default.number,
  y1: _propTypes.default.number
}));

exports.areaSeriesDataShape = areaSeriesDataShape;

var barSeriesDataShape = _propTypes.default.arrayOf(_propTypes.default.shape({
  x: stringNumberDateObjectPropType,
  y: stringNumberDateObjectPropType,
  fill: _propTypes.default.string,
  stroke: _propTypes.default.string,
  strokeWidth: _propTypes.default.number,
  label: _propTypes.default.string
}));

exports.barSeriesDataShape = barSeriesDataShape;

var groupedBarSeriesDataShape = _propTypes.default.arrayOf(_propTypes.default.shape({
  x: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]).isRequired,
  y: _propTypes.default.number.isRequired
}));

exports.groupedBarSeriesDataShape = groupedBarSeriesDataShape;

var stackedBarSeriesDataShape = _propTypes.default.arrayOf(_propTypes.default.shape({
  x: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]).isRequired,
  y: _propTypes.default.number.isRequired
}));

exports.stackedBarSeriesDataShape = stackedBarSeriesDataShape;

var pointSeriesDataShape = _propTypes.default.arrayOf(_propTypes.default.shape({
  x: stringNumberDateObjectPropType,
  y: _propTypes.default.number,
  size: _propTypes.default.number,
  fill: _propTypes.default.string,
  stroke: _propTypes.default.string,
  strokeWidth: _propTypes.default.number,
  strokeDasharray: _propTypes.default.string,
  label: _propTypes.default.string
}));

exports.pointSeriesDataShape = pointSeriesDataShape;

var intervalSeriesDataShape = _propTypes.default.arrayOf(_propTypes.default.shape({
  x0: stringNumberDateObjectPropType,
  x1: stringNumberDateObjectPropType,
  fill: _propTypes.default.string,
  stroke: _propTypes.default.string,
  strokeWidth: _propTypes.default.number
}));

exports.intervalSeriesDataShape = intervalSeriesDataShape;

var axisStylesShape = _propTypes.default.shape({
  stroke: _propTypes.default.string,
  strokeWidth: _propTypes.default.number,
  label: _propTypes.default.shape({
    left: _propTypes.default.object,
    right: _propTypes.default.object,
    bottom: _propTypes.default.object,
    top: _propTypes.default.object
  })
});

exports.axisStylesShape = axisStylesShape;

var tickStylesShape = _propTypes.default.shape({
  stroke: _propTypes.default.string,
  tickLength: _propTypes.default.number,
  label: _propTypes.default.shape({
    left: _propTypes.default.object,
    right: _propTypes.default.object,
    bottom: _propTypes.default.object,
    top: _propTypes.default.object
  })
});

exports.tickStylesShape = tickStylesShape;

var gridStylesShape = _propTypes.default.shape({
  stroke: _propTypes.default.string,
  strokeWidth: _propTypes.default.number
});

exports.gridStylesShape = gridStylesShape;

var themeShape = _propTypes.default.shape({
  gridStyles: gridStylesShape,
  xAxisStyles: axisStylesShape,
  xTickStyles: tickStylesShape,
  yAxisStyles: axisStylesShape,
  yTickStyles: tickStylesShape
});

exports.themeShape = themeShape;

var interpolationShape = _propTypes.default.oneOf(Object.keys(_interpolatorLookup.default));

exports.interpolationShape = interpolationShape;
var pointComponentPropTypes = {
  x: _propTypes.default.number.isRequired,
  y: _propTypes.default.number.isRequired,
  size: _propTypes.default.number.isRequired,
  fill: _propTypes.default.string.isRequired,
  fillOpacity: _propTypes.default.number.isRequired,
  stroke: _propTypes.default.string.isRequired,
  strokeWidth: _propTypes.default.number.isRequired,
  strokeDasharray: _propTypes.default.string,
  onClick: _propTypes.default.func,
  onMouseMove: _propTypes.default.func,
  onMouseLeave: _propTypes.default.func,
  data: pointSeriesDataShape.isRequired,
  datum: _propTypes.default.object.isRequired
};
exports.pointComponentPropTypes = pointComponentPropTypes;

var generalStyleShape = _propTypes.default.shape({
  stroke: _propTypes.default.string,
  strokeWidth: _propTypes.default.number,
  strokeOpacity: _propTypes.default.number,
  fill: _propTypes.default.string,
  fillOpacity: _propTypes.default.number
});

exports.generalStyleShape = generalStyleShape;

var marginShape = _propTypes.default.shape({
  top: _propTypes.default.number,
  left: _propTypes.default.number,
  right: _propTypes.default.number,
  bottom: _propTypes.default.number
});

exports.marginShape = marginShape;

var brushShape = _propTypes.default.shape({
  start: _propTypes.default.shape({
    x: _propTypes.default.number.isRequired,
    y: _propTypes.default.number.isRequired
  }),
  end: _propTypes.default.shape({
    x: _propTypes.default.number.isRequired,
    y: _propTypes.default.number.isRequired
  }),
  extent: _propTypes.default.shape({
    x0: _propTypes.default.number.isRequired,
    y0: _propTypes.default.number.isRequired,
    x1: _propTypes.default.number.isRequired,
    y1: _propTypes.default.number.isRequired
  }),
  bounds: _propTypes.default.shape({
    x0: _propTypes.default.number.isRequired,
    y0: _propTypes.default.number.isRequired,
    x1: _propTypes.default.number.isRequired,
    y1: _propTypes.default.number.isRequired
  })
});

exports.brushShape = brushShape;

var dragShape = _propTypes.default.shape({
  x: _propTypes.default.number,
  y: _propTypes.default.number,
  dx: _propTypes.default.number,
  dy: _propTypes.default.number,
  isDragging: _propTypes.default.bool,
  dragEnd: _propTypes.default.func,
  dragMove: _propTypes.default.func,
  dragStart: _propTypes.default.func
});

exports.dragShape = dragShape;