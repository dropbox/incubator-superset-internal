"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _shape = require("@vx/shape");

var _theme = require("@data-ui/theme");

var _shared = require("@data-ui/shared");

var _group = require("@vx/group");

var _propShapes = require("../utils/propShapes");

var _chartUtils = require("../utils/chartUtils");

var _sharedSeriesProps = _interopRequireDefault(require("../utils/sharedSeriesProps"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var propTypes = _extends({}, _sharedSeriesProps.default, {
  data: _propShapes.intervalSeriesDataShape.isRequired,
  fill: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.string]),
  fillOpacity: _propTypes.default.number,
  stroke: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.string]),
  strokeWidth: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.number])
});

var defaultProps = {
  fill: _theme.color.default,
  fillOpacity: 1,
  stroke: 'none',
  strokeWidth: 1
};

var x0 = function x0(d) {
  return d.x0;
};

var x1 = function x1(d) {
  return d.x1;
};

var noEventsStyles = {
  pointerEvents: 'none'
};

var IntervalSeries =
/*#__PURE__*/
function (_React$PureComponent) {
  _inheritsLoose(IntervalSeries, _React$PureComponent);

  function IntervalSeries() {
    return _React$PureComponent.apply(this, arguments) || this;
  }

  var _proto = IntervalSeries.prototype;

  _proto.render = function render() {
    var _this$props = this.props,
        data = _this$props.data,
        disableMouseEvents = _this$props.disableMouseEvents,
        fill = _this$props.fill,
        fillOpacity = _this$props.fillOpacity,
        stroke = _this$props.stroke,
        strokeWidth = _this$props.strokeWidth,
        xScale = _this$props.xScale,
        yScale = _this$props.yScale,
        onClick = _this$props.onClick,
        onMouseMove = _this$props.onMouseMove,
        onMouseLeave = _this$props.onMouseLeave;
    if (!xScale || !yScale) return null;
    var barHeight = (yScale.range() || [0])[0];
    return _react.default.createElement(_group.Group, {
      style: disableMouseEvents ? noEventsStyles : null
    }, data.map(function (d, i) {
      var x = xScale(x0(d));
      var barWidth = xScale(x1(d)) - x;
      var intervalFill = d.fill || (0, _chartUtils.callOrValue)(fill, d, i);
      return _react.default.createElement(_shared.FocusBlurHandler, {
        key: "interval-" + x,
        onBlur: disableMouseEvents ? null : onMouseLeave,
        onFocus: disableMouseEvents ? null : function (event) {
          onMouseMove({
            event: event,
            datum: d,
            index: i,
            data: data,
            color: intervalFill
          });
        }
      }, _react.default.createElement(_shape.Bar, {
        x: x,
        y: 0,
        width: barWidth,
        height: barHeight,
        fill: intervalFill,
        fillOpacity: fillOpacity,
        stroke: d.stroke || (0, _chartUtils.callOrValue)(stroke, d, i),
        strokeWidth: d.strokeWidth || (0, _chartUtils.callOrValue)(strokeWidth, d, i),
        onClick: disableMouseEvents ? null : onClick && function () {
          return function (event) {
            onClick({
              event: event,
              datum: d,
              index: i,
              data: data,
              color: intervalFill
            });
          };
        },
        onMouseMove: disableMouseEvents ? null : onMouseMove && function () {
          return function (event) {
            onMouseMove({
              event: event,
              datum: d,
              index: i,
              data: data,
              color: intervalFill
            });
          };
        },
        onMouseLeave: disableMouseEvents ? null : onMouseLeave && function () {
          return onMouseLeave;
        }
      }));
    }));
  };

  return IntervalSeries;
}(_react.default.PureComponent);

exports.default = IntervalSeries;
IntervalSeries.propTypes = propTypes;
IntervalSeries.defaultProps = defaultProps;
IntervalSeries.displayName = 'IntervalSeries';