function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { FocusBlurHandler } from '@data-ui/shared';
import { Group } from '@vx/group';
import PropTypes from 'prop-types';
import React from 'react';
import { color as themeColors } from '@data-ui/theme';
import { ViolinPlot } from '@vx/stats';
import { callOrValue } from '../utils/chartUtils';
import sharedSeriesProps from '../utils/sharedSeriesProps';
import { violinPlotSeriesDataShape } from '../utils/propShapes';

var propTypes = _extends({}, sharedSeriesProps, {
  data: violinPlotSeriesDataShape.isRequired,
  horizontal: PropTypes.bool,
  fill: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),
  stroke: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),
  strokeWidth: PropTypes.oneOfType([PropTypes.func, PropTypes.number]),
  widthRatio: PropTypes.number
});

var defaultProps = {
  stroke: themeColors.darkGray,
  strokeWidth: 2,
  fill: themeColors.default,
  horizontal: false,
  widthRatio: 1
};
var MAX_BOX_WIDTH = 50;

var x = function x(d) {
  return d.x;
};

var y = function y(d) {
  return d.y;
};

export default function ViolinPlotSeries(_ref) {
  var data = _ref.data,
      fill = _ref.fill,
      stroke = _ref.stroke,
      strokeWidth = _ref.strokeWidth,
      xScale = _ref.xScale,
      yScale = _ref.yScale,
      horizontal = _ref.horizontal,
      widthRatio = _ref.widthRatio,
      disableMouseEvents = _ref.disableMouseEvents,
      onMouseMove = _ref.onMouseMove,
      onMouseLeave = _ref.onMouseLeave,
      onClick = _ref.onClick;
  if (!xScale || !yScale) return null;
  var offsetScale = horizontal ? yScale : xScale;
  var offsetValue = horizontal ? y : x;
  var valueScale = horizontal ? xScale : yScale;
  var boxWidth = offsetScale.bandwidth();
  var actualWidth = Math.min(MAX_BOX_WIDTH, boxWidth);
  var offset = (offsetScale.offset || 0) - (boxWidth - actualWidth) / 2;
  var offsetPropName = horizontal ? 'top' : 'left';

  var offsetProp = function offsetProp(d) {
    var _ref2;

    return _ref2 = {}, _ref2[offsetPropName] = offsetScale(offsetValue(d)) - offset + (1 - widthRatio) / 2 * actualWidth, _ref2;
  };

  return React.createElement(Group, null, data.map(function (d, i) {
    return React.createElement(FocusBlurHandler, {
      key: offsetValue(d),
      onBlur: disableMouseEvents ? null : onMouseLeave,
      onFocus: disableMouseEvents ? null : function (event) {
        onMouseMove({
          event: event,
          data: data,
          datum: d,
          index: i
        });
      }
    }, React.createElement(ViolinPlot, _extends({}, offsetProp(d), {
      binData: d.binData,
      width: actualWidth * widthRatio,
      fill: d.fill || callOrValue(fill, d, i),
      stroke: d.stroke || callOrValue(stroke, d, i),
      strokeWidth: d.strokeWidth || callOrValue(strokeWidth, d, i),
      valueScale: valueScale,
      horizontal: horizontal,
      onMouseMove: disableMouseEvents ? null : onMouseMove && function () {
        return function (event) {
          onMouseMove({
            event: event,
            data: data,
            datum: d,
            index: i
          });
        };
      },
      onMouseLeave: disableMouseEvents ? null : onMouseLeave && function () {
        return onMouseLeave;
      },
      onClick: disableMouseEvents ? null : onClick && function () {
        return function (event) {
          onClick({
            event: event,
            data: data,
            datum: d,
            index: i
          });
        };
      }
    })));
  }));
}
ViolinPlotSeries.propTypes = propTypes;
ViolinPlotSeries.defaultProps = defaultProps;
ViolinPlotSeries.displayName = 'ViolinPlotSeries';