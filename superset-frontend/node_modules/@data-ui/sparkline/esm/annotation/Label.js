function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import PropTypes from 'prop-types';
import React from 'react';
import { color } from '@data-ui/theme';
export var propTypes = {
  anchor: PropTypes.oneOf(['start', 'middle', 'end']),
  dominantBaseline: PropTypes.string,
  dx: PropTypes.number,
  dy: PropTypes.number,
  fill: PropTypes.string,
  label: PropTypes.node,
  paintOrder: PropTypes.string,
  stroke: PropTypes.string,
  strokeWidth: PropTypes.number,
  x: PropTypes.number,
  y: PropTypes.number
};
export var defaultProps = {
  anchor: 'middle',
  dominantBaseline: 'middle',
  dx: 0,
  dy: 0,
  fill: color.text,
  label: null,
  paintOrder: 'stroke',
  stroke: '#fff',
  strokeWidth: 2,
  x: 0,
  y: 0
};

function Label(_ref) {
  var anchor = _ref.anchor,
      dominantBaseline = _ref.dominantBaseline,
      dx = _ref.dx,
      dy = _ref.dy,
      fill = _ref.fill,
      label = _ref.label,
      paintOrder = _ref.paintOrder,
      stroke = _ref.stroke,
      strokeWidth = _ref.strokeWidth,
      x = _ref.x,
      y = _ref.y,
      rest = _objectWithoutPropertiesLoose(_ref, ["anchor", "dominantBaseline", "dx", "dy", "fill", "label", "paintOrder", "stroke", "strokeWidth", "x", "y"]);

  return React.createElement("text", _extends({
    x: x,
    y: y,
    dx: dx,
    dy: dy,
    fill: fill,
    dominantBaseline: dominantBaseline,
    paintOrder: paintOrder,
    stroke: stroke,
    strokeWidth: strokeWidth,
    textAnchor: anchor
  }, rest), label);
}

Label.propTypes = propTypes;
Label.defaultProps = defaultProps;
Label.displayName = 'Label';
export default Label;