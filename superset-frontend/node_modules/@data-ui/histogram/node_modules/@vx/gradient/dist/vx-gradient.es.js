import React from 'react';
import PropTypes from 'prop-types';

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var objectWithoutProperties = function (obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
};

LinearGradient.propTypes = {
  id: PropTypes.string.isRequired,
  from: PropTypes.string,
  to: PropTypes.string,
  x1: PropTypes.string,
  y1: PropTypes.string,
  y2: PropTypes.string,
  fromOffset: PropTypes.string,
  fromOpacity: PropTypes.number,
  toOffset: PropTypes.string,
  toOpacity: PropTypes.number,
  rotate: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  transform: PropTypes.string
};

function LinearGradient(_ref) {
  var children = _ref.children,
      id = _ref.id,
      from = _ref.from,
      to = _ref.to,
      x1 = _ref.x1,
      y1 = _ref.y1,
      x2 = _ref.x2,
      y2 = _ref.y2,
      _ref$fromOffset = _ref.fromOffset,
      fromOffset = _ref$fromOffset === undefined ? '0%' : _ref$fromOffset,
      _ref$fromOpacity = _ref.fromOpacity,
      fromOpacity = _ref$fromOpacity === undefined ? 1 : _ref$fromOpacity,
      _ref$toOffset = _ref.toOffset,
      toOffset = _ref$toOffset === undefined ? '100%' : _ref$toOffset,
      _ref$toOpacity = _ref.toOpacity,
      toOpacity = _ref$toOpacity === undefined ? 1 : _ref$toOpacity,
      rotate = _ref.rotate,
      transform = _ref.transform,
      _ref$vertical = _ref.vertical,
      vertical = _ref$vertical === undefined ? true : _ref$vertical,
      restProps = objectWithoutProperties(_ref, ['children', 'id', 'from', 'to', 'x1', 'y1', 'x2', 'y2', 'fromOffset', 'fromOpacity', 'toOffset', 'toOpacity', 'rotate', 'transform', 'vertical']);

  if (vertical && !x1 && !x2 && !y1 && !y2) {
    x1 = '0';
    x2 = '0';
    y1 = '0';
    y2 = '1';
  }
  return React.createElement(
    'defs',
    null,
    React.createElement(
      'linearGradient',
      _extends({
        id: id,
        x1: x1,
        y1: y1,
        x2: x2,
        y2: y2,
        gradientTransform: rotate ? 'rotate(' + rotate + ')' : transform
      }, restProps),
      !!children && children,
      !children && React.createElement('stop', { offset: fromOffset, stopColor: from, stopOpacity: fromOpacity }),
      !children && React.createElement('stop', { offset: toOffset, stopColor: to, stopOpacity: toOpacity })
    )
  );
}

RadialGradient.propTypes = {
  id: PropTypes.string.isRequired,
  from: PropTypes.string,
  to: PropTypes.string,
  fromOffset: PropTypes.string,
  fromOpacity: PropTypes.number,
  toOffset: PropTypes.string,
  toOpacity: PropTypes.number,
  rotate: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  transform: PropTypes.string
};

function RadialGradient(_ref) {
  var children = _ref.children,
      id = _ref.id,
      from = _ref.from,
      to = _ref.to,
      _ref$fromOffset = _ref.fromOffset,
      fromOffset = _ref$fromOffset === undefined ? '0%' : _ref$fromOffset,
      _ref$fromOpacity = _ref.fromOpacity,
      fromOpacity = _ref$fromOpacity === undefined ? 1 : _ref$fromOpacity,
      _ref$toOffset = _ref.toOffset,
      toOffset = _ref$toOffset === undefined ? '100%' : _ref$toOffset,
      _ref$toOpacity = _ref.toOpacity,
      toOpacity = _ref$toOpacity === undefined ? 1 : _ref$toOpacity,
      rotate = _ref.rotate,
      transform = _ref.transform,
      restProps = objectWithoutProperties(_ref, ['children', 'id', 'from', 'to', 'fromOffset', 'fromOpacity', 'toOffset', 'toOpacity', 'rotate', 'transform']);

  return React.createElement(
    'defs',
    null,
    React.createElement(
      'radialGradient',
      _extends({
        id: id,
        gradientTransform: rotate ? 'rotate(' + rotate + ')' : transform
      }, restProps),
      !!children && children,
      !children && React.createElement('stop', { offset: fromOffset, stopColor: from, stopOpacity: fromOpacity }),
      !children && React.createElement('stop', { offset: toOffset, stopColor: to, stopOpacity: toOpacity })
    )
  );
}

var DarkgreenGreen = (function (props) {
  return React.createElement(LinearGradient, _extends({ from: '#184E86', to: '#57CA85' }, props));
});

var LightgreenGreen = (function (props) {
  return React.createElement(LinearGradient, _extends({ from: '#42E695', to: '#3BB2B8' }, props));
});

var OrangeRed = (function (props) {
  return React.createElement(LinearGradient, _extends({ from: '#FCE38A', to: '#F38181' }, props));
});

var PinkBlue = (function (props) {
  return React.createElement(LinearGradient, _extends({ from: '#F02FC2', to: '#6094EA' }, props));
});

var PinkRed = (function (props) {
  return React.createElement(LinearGradient, _extends({ from: '#F54EA2', to: '#FF7676' }, props));
});

var PurpleOrange = (function (props) {
  return React.createElement(LinearGradient, _extends({ from: '#7117EA', to: '#EA6060' }, props));
});

var PurpleRed = (function (props) {
  return React.createElement(LinearGradient, _extends({ from: '#622774', to: '#C53364' }, props));
});

var PurpleTeal = (function (props) {
  return React.createElement(LinearGradient, _extends({ from: '#5B247A', to: '#1BCEDF' }, props));
});

var SteelPurple = (function (props) {
  return React.createElement(LinearGradient, _extends({ from: '#65799B', to: '#5E2563' }, props));
});

var TealBlue = (function (props) {
  return React.createElement(LinearGradient, _extends({ from: '#17EAD9', to: '#6078EA' }, props));
});

export { LinearGradient, RadialGradient, DarkgreenGreen as GradientDarkgreenGreen, LightgreenGreen as GradientLightgreenGreen, OrangeRed as GradientOrangeRed, PinkBlue as GradientPinkBlue, PinkRed as GradientPinkRed, PurpleOrange as GradientPurpleOrange, PurpleRed as GradientPurpleRed, PurpleTeal as GradientPurpleTeal, SteelPurple as GradientSteelPurple, TealBlue as GradientTealBlue };
