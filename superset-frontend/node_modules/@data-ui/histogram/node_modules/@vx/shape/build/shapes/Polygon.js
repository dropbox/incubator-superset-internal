'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPoints = exports.getPoint = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = Polygon;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _point = require('@vx/point');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _trigonometry = require('../util/trigonometry');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

Polygon.propTypes = {
  sides: _propTypes2.default.number.isRequired,
  size: _propTypes2.default.number.isRequired,
  className: _propTypes2.default.string,
  rotate: _propTypes2.default.number
};

var getPoint = exports.getPoint = function getPoint(_ref) {
  var sides = _ref.sides,
      size = _ref.size,
      center = _ref.center,
      rotate = _ref.rotate,
      side = _ref.side;

  var degrees = 360 / sides * side - rotate;
  var radians = (0, _trigonometry.degreesToRadians)(degrees);

  return new _point.Point({
    x: center.x + size * Math.cos(radians),
    y: center.y + size * Math.sin(radians)
  });
};

var getPoints = exports.getPoints = function getPoints(_ref2) {
  var sides = _ref2.sides,
      size = _ref2.size,
      center = _ref2.center,
      rotate = _ref2.rotate;

  return [].concat(_toConsumableArray(Array(sides).keys())).map(function (side) {
    return getPoint({
      sides: sides,
      size: size,
      center: center,
      rotate: rotate,
      side: side
    });
  });
};

function Polygon(_ref3) {
  var sides = _ref3.sides,
      _ref3$size = _ref3.size,
      size = _ref3$size === undefined ? 25 : _ref3$size,
      _ref3$center = _ref3.center,
      center = _ref3$center === undefined ? new _point.Point({ x: 0, y: 0 }) : _ref3$center,
      _ref3$rotate = _ref3.rotate,
      rotate = _ref3$rotate === undefined ? 0 : _ref3$rotate,
      className = _ref3.className,
      restProps = _objectWithoutProperties(_ref3, ['sides', 'size', 'center', 'rotate', 'className']);

  var points = getPoints({
    sides: sides,
    size: size,
    center: center,
    rotate: rotate
  }).map(function (p) {
    return p.toArray();
  }).join(' ');

  return _react2.default.createElement('polygon', _extends({ points: points, className: (0, _classnames2.default)('vx-polygon', className) }, restProps));
}