/**
 * simple key-value store for global cache
 */
export default class Store {
    readonly items: {
        [globalId: string]: unknown;
    };
    constructor();
    /**
     * Check if the item with given globalId exists
     * @param globalId
     */
    has(globalId: string): boolean;
    /**
     * Get value from globalId and cast to type T
     * @param globalId
     */
    get<T>(globalId: string): T | undefined;
    /**
     * Get value from globalId if the value exists.
     * Otherwise, create a new value.
     * @param globalId
     * @param factory
     */
    getOrCreate<T>(globalId: string, factory: () => T): T;
    /**
     * Store the given globalId and value
     * @param globalId
     * @param value
     */
    set<T>(globalId: string, value: T): this;
    /**
     * Remove item with the specified globalId from this store.
     * If the item with globalId does not exist, do nothing.
     * @param globalId
     */
    remove(globalId: string): this;
}
//# sourceMappingURL=Store.d.ts.map