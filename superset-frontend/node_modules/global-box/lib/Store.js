"use strict";

exports.__esModule = true;
exports.default = void 0;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * simple key-value store for global cache
 */
class Store {
  constructor() {
    _defineProperty(this, "items", void 0);

    this.items = {};
  }
  /**
   * Check if the item with given globalId exists
   * @param globalId
   */


  has(globalId) {
    const item = this.items[globalId];
    return item != null;
  }
  /**
   * Get value from globalId and cast to type T
   * @param globalId
   */


  get(globalId) {
    const value = this.items[globalId];
    return value;
  }
  /**
   * Get value from globalId if the value exists.
   * Otherwise, create a new value.
   * @param globalId
   * @param factory
   */


  getOrCreate(globalId, factory) {
    if (this.has(globalId)) {
      return this.get(globalId);
    }

    const value = factory();
    this.set(globalId, value);
    return value;
  }
  /**
   * Store the given globalId and value
   * @param globalId
   * @param value
   */


  set(globalId, value) {
    if (this.has(globalId)) {
      // eslint-disable-next-line no-console
      console.warn("Item with globalId \"" + globalId + "\" already exists. You are assigning a new value.");
    }

    this.items[globalId] = value;
    return this;
  }
  /**
   * Remove item with the specified globalId from this store.
   * If the item with globalId does not exist, do nothing.
   * @param globalId
   */


  remove(globalId) {
    delete this.items[globalId];
    return this;
  }

}

exports.default = Store;