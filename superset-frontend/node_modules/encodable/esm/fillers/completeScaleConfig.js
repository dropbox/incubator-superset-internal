import inferScaleType from './inferScaleType';
import { isTypedFieldDef } from '../typeGuards/ChannelDef';
import { isContinuousScaleConfig, isScaleConfigWithZero } from '../typeGuards/ScaleConfig';
import isEnabled from '../utils/isEnabled';
import { timeScaleTypesSet } from '../parsers/scale/scaleCategories';
export default function completeScaleConfig(channelType, channelDef) {
  if (isTypedFieldDef(channelDef) && isEnabled(channelDef.scale)) {
    const {
      scale = {},
      type,
      bin
    } = channelDef;
    const {
      type: scaleType = inferScaleType(channelType, type, bin)
    } = scale;

    if (typeof scaleType === 'undefined') {
      return false;
    } // eslint-disable-next-line @typescript-eslint/consistent-type-assertions


    const filledScale = { ...scale,
      type: scaleType
    };

    if (isContinuousScaleConfig(filledScale)) {
      if (typeof filledScale.nice === 'undefined') {
        filledScale.nice = !timeScaleTypesSet.has(scaleType);
      }

      if (typeof filledScale.clamp === 'undefined') {
        filledScale.clamp = true;
      }
    }

    if (isScaleConfigWithZero(filledScale) && typeof filledScale.zero === 'undefined') {
      filledScale.zero = true;
    }

    return filledScale;
  }

  return false;
}