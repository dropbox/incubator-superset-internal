function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { extent as d3Extent } from 'd3-array';
import { ScaleType } from '../types';
import { isTypedFieldDef, isValueDef, isFieldDef } from '../typeGuards/ChannelDef';
import { isX, isY, isXOrY } from '../typeGuards/Channel';
import ChannelEncoderAxis from './ChannelEncoderAxis';
import createGetterFromChannelDef from '../parsers/createGetterFromChannelDef';
import completeChannelDef from '../fillers/completeChannelDef';
import createScale from '../parsers/scale/createScale';
import identity from '../utils/identity';
import applyDomain from '../parsers/scale/applyDomain';
import applyRange from '../parsers/scale/applyRange';
import applyZero from '../parsers/scale/applyZero';
import applyNice from '../parsers/scale/applyNice';
import { isCompleteValueDef, isCompleteFieldDef } from '../typeGuards/CompleteChannelDef';
import fallbackFormatter from '../parsers/format/fallbackFormatter';
import createFormatter from '../parsers/format/createFormatter';
export default class ChannelEncoder {
  constructor({
    name,
    channelType,
    definition: originalDefinition
  }) {
    _defineProperty(this, "name", void 0);

    _defineProperty(this, "channelType", void 0);

    _defineProperty(this, "originalDefinition", void 0);

    _defineProperty(this, "definition", void 0);

    _defineProperty(this, "scale", void 0);

    _defineProperty(this, "axis", void 0);

    _defineProperty(this, "getValue", void 0);

    _defineProperty(this, "encodeFunc", void 0);

    _defineProperty(this, "formatValue", void 0);

    _defineProperty(this, "encodeValue", (value, otherwise) => {
      if (typeof otherwise !== 'undefined' && (value === null || typeof value === 'undefined')) {
        return otherwise;
      } // eslint-disable-next-line @typescript-eslint/no-explicit-any


      return this.encodeFunc(value);
    });

    _defineProperty(this, "encodeDatum", (datum, otherwise) => typeof otherwise === 'undefined' ? this.encodeValue(this.getValueFromDatum(datum)) : this.encodeValue(this.getValueFromDatum(datum), otherwise));

    _defineProperty(this, "formatDatum", datum => this.formatValue(this.getValueFromDatum(datum)));

    _defineProperty(this, "getValueFromDatum", (datum, otherwise) => {
      const value = this.getValue(datum);
      return otherwise !== undefined && (value === null || value === undefined) ? otherwise : value;
    });

    _defineProperty(this, "getDomainFromDataset", data => {
      if (isValueDef(this.definition)) {
        const {
          value
        } = this.definition;
        return [value];
      }

      const {
        type
      } = this.definition;

      if (type === 'nominal' || type === 'ordinal') {
        return Array.from(new Set(data.map(d => this.getValueFromDatum(d))));
      }

      if (type === 'quantitative') {
        // Quantile scale needs all items
        // because it treats domain as a discrete set of sample values
        // for computing the quantiles
        if (this.definition.scale && this.definition.scale.type === 'quantile') {
          return data.map(d => this.getValueFromDatum(d));
        }

        const extent = d3Extent(data, d => this.getValueFromDatum(d));
        return typeof extent[0] === 'undefined' ? [0, 1] : extent;
      }

      if (type === 'temporal') {
        const extent = d3Extent(data, d => this.getValueFromDatum(d));
        return typeof extent[0] === 'undefined' ? [0, 1] : extent;
      }

      return [];
    });

    this.name = name;
    this.channelType = channelType;
    this.originalDefinition = originalDefinition;
    this.definition = completeChannelDef(this.channelType, originalDefinition);
    this.getValue = createGetterFromChannelDef(this.definition);
    this.formatValue = isFieldDef(this.definition) ? createFormatter(this.definition) : fallbackFormatter;

    if (this.definition.scale) {
      const scale = createScale(this.definition.scale); // eslint-disable-next-line @typescript-eslint/no-explicit-any

      this.encodeFunc = value => scale(value);

      this.scale = scale;
    } else {
      const {
        definition
      } = this;
      this.encodeFunc = isCompleteValueDef(definition) ? () => definition.value : identity;
    }

    if (this.definition.axis) {
      this.axis = new ChannelEncoderAxis(this);
    }
  }

  getDomain() {
    if (this.scale && 'domain' in this.scale) {
      return this.scale.domain();
    }

    return [];
  }

  setDomain(domain) {
    if (this.definition.scale !== false && this.scale && !this.hasCategoricalColorScale() && 'domain' in this.scale) {
      const config = this.definition.scale;
      applyDomain(config, this.scale, domain);
      applyRange(config, this.scale);
      applyZero(config, this.scale);
      applyNice(config, this.scale);
    }

    return this;
  }

  setDomainFromDataset(data) {
    return this.scale && 'domain' in this.scale ? this.setDomain(this.getDomainFromDataset(data)) : this;
  }

  getTitle() {
    return this.definition.title;
  }

  isGroupBy() {
    if (isTypedFieldDef(this.definition)) {
      const {
        type
      } = this.definition;
      return this.channelType === 'Category' || this.channelType === 'Text' || this.channelType === 'Color' && (type === 'nominal' || type === 'ordinal') || isXOrY(this.channelType) && (type === 'nominal' || type === 'ordinal');
    }

    return false;
  }

  isX() {
    return isX(this.channelType);
  }

  isXOrY() {
    return isXOrY(this.channelType);
  }

  isY() {
    return isY(this.channelType);
  }

  hasCategoricalColorScale() {
    const config = this.definition.scale; // Scale type is ordinal with not given range
    // (may have optional scheme)
    // will become a categorical scale
    // of named color scheme.
    // A color scale from named color scheme may be shared among multiple components
    // in the same namespace by default, so changing its domain affect all components.
    // (Sounds like a bad idea.)
    // This function is currently only being used to check
    // whether to apply domain from dataset or not.
    // An ordinal scale with user-specified color scheme as range array
    // will return false from this function and be excluded from it.

    return this.scale && config && config.type === ScaleType.ORDINAL && typeof config.range === 'undefined';
  }

  hasLegend() {
    return this.definition.legend !== false;
  }

  hasValueDefinition() {
    return isCompleteValueDef(this.definition);
  }

  hasFieldDefinition() {
    return isCompleteFieldDef(this.definition);
  }

}