function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { getStore } from 'global-box';
import { defaultNumberFormatResolver, defaultTimeFormatResolver, defaultCategoricalColorScaleResolver, defaultColorSchemeResolver } from './resolvers';
const CACHE_KEY = '@encodable/encodable:options';

class OptionsManager {
  constructor() {
    _defineProperty(this, "state", void 0);

    this.state = getStore().getOrCreate(CACHE_KEY, () => ({}));
  }

  getNumberFormatResolver() {
    var _this$state$numberFor;

    return (_this$state$numberFor = this.state.numberFormatResolver) != null ? _this$state$numberFor : defaultNumberFormatResolver;
  }

  setNumberFormatResolver(resolver) {
    this.state.numberFormatResolver = resolver;
    return this;
  }

  resetNumberFormatResolver() {
    return this.setNumberFormatResolver(undefined);
  }

  resolveNumberFormat(...params) {
    return this.getNumberFormatResolver()(...params);
  }

  getTimeFormatResolver() {
    var _this$state$timeForma;

    return (_this$state$timeForma = this.state.timeFormatResolver) != null ? _this$state$timeForma : defaultTimeFormatResolver;
  }

  setTimeFormatResolver(resolver) {
    this.state.timeFormatResolver = resolver;
    return this;
  }

  resetTimeFormatResolver() {
    return this.setTimeFormatResolver(undefined);
  }

  resolveTimeFormat(...params) {
    return this.getTimeFormatResolver()(...params);
  }

  getCategoricalColorScaleResolver() {
    var _this$state$categoric;

    return (_this$state$categoric = this.state.categoricalColorScaleResolver) != null ? _this$state$categoric : defaultCategoricalColorScaleResolver;
  }

  setCategoricalColorScaleResolver(resolver) {
    this.state.categoricalColorScaleResolver = resolver;
    return this;
  }

  resetCategoricalColorScaleResolver() {
    return this.setCategoricalColorScaleResolver(undefined);
  }

  resolveCategoricalColorScale(...params) {
    return this.getCategoricalColorScaleResolver()(...params);
  }

  getColorSchemeResolver() {
    var _this$state$colorSche;

    return (_this$state$colorSche = this.state.colorSchemeResolver) != null ? _this$state$colorSche : defaultColorSchemeResolver;
  }

  setColorSchemeResolver(resolver) {
    this.state.colorSchemeResolver = resolver;
    return this;
  }

  resetColorSchemeResolver() {
    return this.setColorSchemeResolver(undefined);
  }

  resolveColorScheme(...params) {
    return this.getColorSchemeResolver()(...params);
  }

}

const Encodable = new OptionsManager();
export default Encodable;