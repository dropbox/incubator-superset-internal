import { ScaleType } from '../../types';
import createScaleFromScaleType from './createScaleFromScaleType';
import updateScale from './updateScale';
import Encodable from '../../options/Encodable';
import { isSchemeParams } from '../../typeGuards/SchemeParams';
import applyDomain from './applyDomain';

function createScale(config) {
  const {
    range
  } = config; // Handle categorical color scales
  // An ordinal scale without specified range
  // is assumed to be a color scale.

  if (config.type === ScaleType.ORDINAL && typeof range === 'undefined') {
    const scheme = 'scheme' in config ? config.scheme : undefined;
    const resolve = Encodable.getCategoricalColorScaleResolver();
    let colorScale;

    if (typeof scheme === 'undefined') {
      colorScale = resolve({});
    } else if (isSchemeParams(scheme)) {
      colorScale = resolve(scheme);
    } else {
      colorScale = resolve({
        name: scheme
      });
    }

    const castedColorScale = colorScale;
    applyDomain(config, castedColorScale);
    return castedColorScale;
  }

  const scale = createScaleFromScaleType(config.type);
  return updateScale(scale, config);
}

export default createScale;