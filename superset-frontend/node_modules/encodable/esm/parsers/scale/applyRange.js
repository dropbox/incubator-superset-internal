import { wrapColorScheme } from '@encodable/color';
import Encodable from '../../options/Encodable';
import { isContinuousScaleConfig } from '../../typeGuards/ScaleConfig';
import { isSchemeParams } from '../../typeGuards/SchemeParams';
export default function applyRange(config, scale) {
  const {
    range,
    domain
  } = config;

  if (typeof range === 'undefined') {
    if ('scheme' in config && typeof config.scheme !== 'undefined') {
      const {
        scheme
      } = config;
      let name;
      let count;

      if (isContinuousScaleConfig(config) && domain) {
        count = domain.length;
      }

      let extent;

      if (isSchemeParams(scheme)) {
        name = scheme.name;

        if (scheme.count) {
          count = scheme.count;
        }

        extent = scheme.extent;
      } else {
        name = scheme;
      }

      const schemeObject = Encodable.resolveColorScheme({
        name,
        type: 'sequential'
      });

      if (typeof schemeObject !== 'undefined' && schemeObject.type === 'sequential') {
        const wrappedScheme = wrapColorScheme(schemeObject);
        scale.range(wrappedScheme.getColors(count, extent));
      }
    }
  } else {
    // TODO: add type guard should fix this problem
    // @ts-ignore
    scale.range(range);
  }
}