/** Extract generic type from array */
export declare type Unarray<T> = T extends Array<infer U> ? U : T;
/** T or an array of T */
export declare type MayBeArray<T> = T | T[];
/** Make some fields that might have been optional become required fields */
export declare type RequiredSome<T, RequiredFields extends keyof T> = {
    [Field in Exclude<keyof T, RequiredFields>]?: T[Field];
} & {
    [Field in RequiredFields]-?: T[Field];
};
/** Signature of an identity function */
export declare type IdentityFunction<T> = (value: T) => T;
/** Union types of all values from a map type */
export declare type ValueOf<T> = T[keyof T];
//# sourceMappingURL=Base.d.ts.map