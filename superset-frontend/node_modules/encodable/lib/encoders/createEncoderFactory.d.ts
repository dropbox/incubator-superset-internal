import Encoder from './Encoder';
import { EncodingConfig, DeriveChannelTypes, DeriveEncoding } from '../types';
declare type CreateEncoderFactoryParams<Config extends EncodingConfig> = {
    channelTypes: DeriveChannelTypes<Config>;
} & ({
    /**
     * use the default approach to merge default encoding with user-specified encoding
     * if there are missing fields
     */
    defaultEncoding: DeriveEncoding<Config>;
} | {
    /**
     * custom way to complete the encoding
     * if there are missing fields
     */
    completeEncoding: (e: Partial<DeriveEncoding<Config>>) => DeriveEncoding<Config>;
});
export default function createEncoderFactory<Config extends EncodingConfig>(params: CreateEncoderFactoryParams<Config>): {
    channelTypes: DeriveChannelTypes<Config>;
    create: (encoding?: Partial<DeriveEncoding<Config>>) => Encoder<Config>;
    createSelector: () => import("reselect").OutputSelector<Partial<DeriveEncoding<Config>>, Encoder<Config>, (res: Partial<DeriveEncoding<Config>>) => Encoder<Config>>;
    DEFAULT_ENCODING: DeriveEncoding<Config>;
};
export {};
//# sourceMappingURL=createEncoderFactory.d.ts.map