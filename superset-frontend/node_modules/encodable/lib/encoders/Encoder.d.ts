import { Dataset, EncodingConfig, DeriveEncoding, DeriveChannelTypes, DeriveChannelEncoders, DeriveSingleChannelEncoder, LegendGroupInformation } from '../types';
import ChannelEncoder from './ChannelEncoder';
export default class Encoder<Config extends EncodingConfig> {
    readonly encoding: DeriveEncoding<Config>;
    readonly channelTypes: DeriveChannelTypes<Config>;
    readonly channels: DeriveChannelEncoders<Config>;
    readonly legends: {
        [key: string]: DeriveSingleChannelEncoder<Config>[];
    };
    constructor({ channelTypes, encoding, }: {
        channelTypes: DeriveChannelTypes<Config>;
        encoding: DeriveEncoding<Config>;
    });
    getChannelNames(): (keyof Config)[];
    getChannelEncoders(): ChannelEncoder<import("../types").ChannelTypeToDefMap<Config[keyof Config]["1"]>[Config[keyof Config]["0"]], Config[keyof Config]["1"]>[];
    getGroupBys(): string[];
    private createLegendItemsFactory;
    getLegendInformation(data?: Dataset): LegendGroupInformation<Config>[];
    setDomainFromDataset(data: Dataset): this;
    hasLegend(): boolean;
}
//# sourceMappingURL=Encoder.d.ts.map