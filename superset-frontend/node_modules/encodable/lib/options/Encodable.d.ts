import { EncodableState, NumberFormatResolver, TimeFormatResolver, CategoricalColorScaleResolver, ColorSchemeResolver } from '../types';
declare class OptionsManager {
    state: EncodableState;
    constructor();
    getNumberFormatResolver(): NumberFormatResolver;
    setNumberFormatResolver(resolver: NumberFormatResolver | undefined): this;
    resetNumberFormatResolver(): this;
    resolveNumberFormat(...params: Parameters<NumberFormatResolver>): import("@encodable/format").NumberFormatter;
    getTimeFormatResolver(): TimeFormatResolver;
    setTimeFormatResolver(resolver: TimeFormatResolver | undefined): this;
    resetTimeFormatResolver(): this;
    resolveTimeFormat(...params: Parameters<TimeFormatResolver>): import("@encodable/format").TimeFormatter;
    getCategoricalColorScaleResolver(): CategoricalColorScaleResolver;
    setCategoricalColorScaleResolver(resolver: CategoricalColorScaleResolver | undefined): this;
    resetCategoricalColorScaleResolver(): this;
    resolveCategoricalColorScale(...params: Parameters<CategoricalColorScaleResolver>): import("d3-scale").ScaleOrdinal<import("../types").StringLike, string>;
    getColorSchemeResolver(): ColorSchemeResolver;
    setColorSchemeResolver(resolver: ColorSchemeResolver | undefined): this;
    resetColorSchemeResolver(): this;
    resolveColorScheme(...params: Parameters<ColorSchemeResolver>): ({
        type: "sequential";
        id: string;
        label?: string | undefined;
        description?: string | undefined;
    } & {
        colors: readonly string[] | readonly (readonly string[])[];
        interpolator?: import("@encodable/color").ColorInterpolator | undefined;
    }) | ({
        type: "sequential";
        id: string;
        label?: string | undefined;
        description?: string | undefined;
    } & {
        colors?: readonly string[] | readonly (readonly string[])[] | undefined;
        interpolator: import("@encodable/color").ColorInterpolator;
    }) | ({
        type: "diverging";
        id: string;
        label?: string | undefined;
        description?: string | undefined;
    } & {
        colors: readonly string[] | readonly (readonly string[])[];
        interpolator?: import("@encodable/color").ColorInterpolator | undefined;
    }) | ({
        type: "diverging";
        id: string;
        label?: string | undefined;
        description?: string | undefined;
    } & {
        colors?: readonly string[] | readonly (readonly string[])[] | undefined;
        interpolator: import("@encodable/color").ColorInterpolator;
    }) | import("@encodable/color").CategoricalScheme | undefined;
}
declare const Encodable: OptionsManager;
export default Encodable;
//# sourceMappingURL=Encodable.d.ts.map