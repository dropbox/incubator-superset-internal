"use strict";

exports.__esModule = true;
exports.default = completeScaleConfig;

var _inferScaleType = _interopRequireDefault(require("./inferScaleType"));

var _ChannelDef = require("../typeGuards/ChannelDef");

var _ScaleConfig = require("../typeGuards/ScaleConfig");

var _isEnabled = _interopRequireDefault(require("../utils/isEnabled"));

var _scaleCategories = require("../parsers/scale/scaleCategories");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function completeScaleConfig(channelType, channelDef) {
  if ((0, _ChannelDef.isTypedFieldDef)(channelDef) && (0, _isEnabled.default)(channelDef.scale)) {
    const {
      scale = {},
      type,
      bin
    } = channelDef;
    const {
      type: scaleType = (0, _inferScaleType.default)(channelType, type, bin)
    } = scale;

    if (typeof scaleType === 'undefined') {
      return false;
    } // eslint-disable-next-line @typescript-eslint/consistent-type-assertions


    const filledScale = { ...scale,
      type: scaleType
    };

    if ((0, _ScaleConfig.isContinuousScaleConfig)(filledScale)) {
      if (typeof filledScale.nice === 'undefined') {
        filledScale.nice = !_scaleCategories.timeScaleTypesSet.has(scaleType);
      }

      if (typeof filledScale.clamp === 'undefined') {
        filledScale.clamp = true;
      }
    }

    if ((0, _ScaleConfig.isScaleConfigWithZero)(filledScale) && typeof filledScale.zero === 'undefined') {
      filledScale.zero = true;
    }

    return filledScale;
  }

  return false;
}