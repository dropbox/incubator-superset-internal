"use strict";

exports.__esModule = true;
exports.normalizeQuarter = normalizeQuarter;
exports.normalizeMonth = normalizeMonth;
exports.normalizeDay = normalizeDay;
exports.dateTimeParts = dateTimeParts;
exports.default = dateTimeToTimestamp;

var _keys = _interopRequireDefault(require("../utils/keys"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Modified from vega-lite version
// and remove unnecessary dependency

/* eslint-disable no-param-reassign */

/* eslint-disable no-negated-condition */
function invalidTimeUnit(unitName, value) {
  return "Invalid " + unitName + ": " + String(value) + ".";
}
/*
 * A designated year that starts on Sunday.
 */


const SUNDAY_YEAR = 2006;
const MONTHS = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december'];
const SHORT_MONTHS = MONTHS.map(m => m.slice(0, 3));
const DAYS = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];
const SHORT_DAYS = DAYS.map(d => d.slice(0, 3));

function isNumber(x) {
  return typeof x === 'number';
}
/**
 * Returns whether the passed in value is a valid number.
 */


function isNumeric(value) {
  if (isNumber(value)) {
    return true;
  } // eslint-disable-next-line @typescript-eslint/no-explicit-any


  return !isNaN(value) && !isNaN(parseFloat(value));
}

function normalizeQuarter(q) {
  if (isNumeric(q)) {
    q = Number(q);
  }

  if (isNumber(q)) {
    if (q > 4) {
      // eslint-disable-next-line no-console
      console.warn(invalidTimeUnit('quarter', q));
    } // We accept 1-based quarter, so need to readjust to 0-based quarter


    return q - 1;
  } // Invalid quarter


  throw new Error(invalidTimeUnit('quarter', q));
}

function normalizeMonth(m) {
  if (isNumeric(m)) {
    m = Number(m);
  }

  if (isNumber(m)) {
    // We accept 1-based month, so need to readjust to 0-based month
    return m - 1;
  }

  const lowerM = m.toLowerCase();
  const monthIndex = MONTHS.indexOf(lowerM);

  if (monthIndex !== -1) {
    return monthIndex; // 0 for january, ...
  }

  const shortM = lowerM.slice(0, 3);
  const shortMonthIndex = SHORT_MONTHS.indexOf(shortM);

  if (shortMonthIndex !== -1) {
    return shortMonthIndex;
  } // Invalid month


  throw new Error(invalidTimeUnit('month', m));
}

function normalizeDay(d) {
  if (isNumeric(d)) {
    d = Number(d);
  }

  if (isNumber(d)) {
    // mod so that this can be both 0-based where 0 = sunday
    // and 1-based where 7=sunday
    return d % 7;
  }

  const lowerD = d.toLowerCase();
  const dayIndex = DAYS.indexOf(lowerD);

  if (dayIndex !== -1) {
    return dayIndex; // 0 for january, ...
  }

  const shortD = lowerD.slice(0, 3);
  const shortDayIndex = SHORT_DAYS.indexOf(shortD);

  if (shortDayIndex !== -1) {
    return shortDayIndex;
  } // Invalid day


  throw new Error(invalidTimeUnit('day', d));
}
/**
 * @param d the date.
 * @param normalize whether to normalize quarter, month, day. This should probably be true if d is a DateTime.
 * @returns array of date time parts [year, month, day, hours, minutes, seconds, milliseconds]
 */


function dateTimeParts(d, normalize) {
  const parts = [];

  if (normalize && d.day !== undefined) {
    if ((0, _keys.default)(d).length > 1) {
      d = { ...d
      };
      delete d.day;
    }
  }

  if (d.year !== undefined) {
    parts.push(d.year);
  } else if (d.day !== undefined) {
    // Set year to 2006 for working with day since January 1 2006 is a Sunday
    parts.push(SUNDAY_YEAR);
  } else {
    parts.push(0);
  }

  if (d.month !== undefined) {
    const month = normalize ? normalizeMonth(d.month) : d.month;
    parts.push(month);
  } else if (d.quarter !== undefined) {
    const quarter = normalize ? normalizeQuarter(d.quarter) : d.quarter;
    parts.push(isNumber(quarter) ? quarter * 3 : quarter + "*3");
  } else {
    parts.push(0); // months start at zero in JS
  }

  if (d.date !== undefined) {
    parts.push(d.date);
  } else if (d.day !== undefined) {
    // HACK: Day only works as a standalone unit
    // This is only correct because we always set year to 2006 for day
    const day = normalize ? normalizeDay(d.day) : d.day;
    parts.push(isNumber(day) ? day + 1 : day + "+1");
  } else {
    parts.push(1); // Date starts at 1 in JS
  }

  ['hours', 'minutes', 'seconds', 'milliseconds'].forEach(timeUnit => {
    const unit = d[timeUnit];
    parts.push(typeof unit === 'undefined' ? 0 : unit);
  });
  return parts;
}
/**
 * @param d the date time.
 * @returns the timestamp.
 */


function dateTimeToTimestamp(d) {
  const parts = dateTimeParts(d, true);

  if (d.utc) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return Number(new Date(Date.UTC(...parts)));
  } // eslint-disable-next-line @typescript-eslint/no-explicit-any


  return Number(new Date(...parts));
}