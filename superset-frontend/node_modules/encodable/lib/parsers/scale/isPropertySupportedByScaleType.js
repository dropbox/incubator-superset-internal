"use strict";

exports.__esModule = true;
exports.default = isPropertySupportedByScaleType;

var _types = require("../../types");

var _scaleCategories = require("./scaleCategories");

const pointOrBand = [_types.ScaleType.POINT, _types.ScaleType.BAND];
const pointOrBandSet = new Set(pointOrBand);

const exceptPointOrBand = _scaleCategories.allScaleTypes.filter(type => !pointOrBandSet.has(type));

const exceptPointOrBandSet = new Set(exceptPointOrBand);
const continuousOrPointOrBandSet = new Set(_scaleCategories.continuousScaleTypes.concat(pointOrBand));
const zeroSet = new Set(_scaleCategories.continuousDomainScaleTypes); // log scale cannot have zero value

zeroSet.delete(_types.ScaleType.LOG); // zero is not meaningful for time

zeroSet.delete(_types.ScaleType.TIME);
zeroSet.delete(_types.ScaleType.UTC); // threshold requires custom domain so zero does not matter

zeroSet.delete(_types.ScaleType.THRESHOLD); // quantile depends on distribution so zero does not matter

zeroSet.delete(_types.ScaleType.QUANTILE);
const supportedScaleTypes = {
  align: pointOrBandSet,
  base: new Set([_types.ScaleType.LOG]),
  clamp: _scaleCategories.continuousScaleTypesSet,
  constant: new Set([_types.ScaleType.SYMLOG]),
  domain: _scaleCategories.allScaleTypesSet,
  exponent: new Set([_types.ScaleType.POW]),
  interpolate: exceptPointOrBandSet,
  nice: new Set(_scaleCategories.continuousScaleTypes.concat([_types.ScaleType.QUANTIZE, _types.ScaleType.THRESHOLD])),
  padding: continuousOrPointOrBandSet,
  paddingInner: new Set([_types.ScaleType.BAND]),
  paddingOuter: pointOrBandSet,
  range: _scaleCategories.allScaleTypesSet,
  reverse: _scaleCategories.allScaleTypesSet,
  round: continuousOrPointOrBandSet,
  scheme: exceptPointOrBandSet,
  type: _scaleCategories.allScaleTypesSet,
  unknown: new Set([_types.ScaleType.ORDINAL]),
  zero: zeroSet
};

function isPropertySupportedByScaleType(property, scaleType) {
  return supportedScaleTypes[property].has(scaleType);
}