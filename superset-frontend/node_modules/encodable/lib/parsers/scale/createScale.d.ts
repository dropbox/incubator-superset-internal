import { ScaleLinear, ScaleLogarithmic, ScalePower, ScaleTime, ScaleQuantile, ScaleQuantize, ScaleThreshold, ScaleOrdinal, ScalePoint, ScaleBand } from 'd3-scale';
import { Value, StringLike, AllScale, ScaleConfig, LinearScaleConfig, LogScaleConfig, PowScaleConfig, SqrtScaleConfig, SymlogScaleConfig, TimeScaleConfig, UtcScaleConfig, QuantileScaleConfig, QuantizeScaleConfig, ThresholdScaleConfig, BinOrdinalScaleConfig, OrdinalScaleConfig, PointScaleConfig, BandScaleConfig } from '../../types';
declare function createScale<Output extends Value>(config: LinearScaleConfig<Output>): ScaleLinear<Output, Output>;
declare function createScale<Output extends Value>(config: LogScaleConfig<Output> | SymlogScaleConfig<Output>): ScaleLogarithmic<Output, Output>;
declare function createScale<Output extends Value>(config: PowScaleConfig<Output> | SqrtScaleConfig<Output>): ScalePower<Output, Output>;
declare function createScale<Output extends Value>(config: TimeScaleConfig<Output> | UtcScaleConfig<Output>): ScaleTime<Output, Output>;
declare function createScale<Output extends Value>(config: QuantileScaleConfig<Output>): ScaleQuantile<Output>;
declare function createScale<Output extends Value>(config: QuantizeScaleConfig<Output>): ScaleQuantize<Output>;
declare function createScale<Output extends Value>(config: ThresholdScaleConfig<Output>): ScaleThreshold<number | string | Date, Output>;
declare function createScale<Output extends Value>(config: OrdinalScaleConfig<Output> | BinOrdinalScaleConfig<Output>): ScaleOrdinal<StringLike, Output>;
declare function createScale<Output extends Value>(config: PointScaleConfig): ScalePoint<StringLike>;
declare function createScale<Output extends Value>(config: BandScaleConfig): ScaleBand<StringLike>;
declare function createScale<Output extends Value>(config: ScaleConfig<Output>): AllScale<Output>;
export default createScale;
//# sourceMappingURL=createScale.d.ts.map