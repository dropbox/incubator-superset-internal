{"version":3,"sources":["../../src/viewport.js"],"names":["createMat4","worldToPixels","pixelsToWorld","mat4","IDENTITY","Viewport","constructor","width","height","viewMatrix","projectionMatrix","scale","pixelsPerMeter","vpm","multiply","viewProjectionMatrix","m","translate","mInverse","invert","Error","pixelProjectionMatrix","pixelUnprojectionMatrix","equals","bind","project","unproject","projectPosition","unprojectPosition","projectFlat","unprojectFlat","viewport","xyz","topLeft","worldPosition","coord","x","y","y2","length","targetZ","z","targetZWorld","X","Y","Z","Number","isFinite"],"mappings":"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","sourcesContent":["// View and Projection Matrix management\n\nimport {createMat4} from './math-utils';\nimport {worldToPixels, pixelsToWorld} from './web-mercator-utils';\n\nimport * as mat4 from 'gl-matrix/mat4';\n\nconst IDENTITY = createMat4();\n\nexport default class Viewport {\n  /**\n   * @classdesc\n   * Manages coordinate system transformations for deck.gl.\n   *\n   * Note: The Viewport is immutable in the sense that it only has accessors.\n   * A new viewport instance should be created if any parameters have changed.\n   *\n   * @class\n   * @param {Object} opt - options\n   * @param {Boolean} mercator=true - Whether to use mercator projection\n   *\n   * @param {Number} opt.width=1 - Width of \"viewport\" or window\n   * @param {Number} opt.height=1 - Height of \"viewport\" or window\n   * @param {Array} opt.center=[0, 0] - Center of viewport\n   *   [longitude, latitude] or [x, y]\n   * @param {Number} opt.scale=1 - Either use scale or zoom\n   * @param {Number} opt.pitch=0 - Camera angle in degrees (0 is straight down)\n   * @param {Number} opt.bearing=0 - Map rotation in degrees (0 means north is up)\n   * @param {Number} opt.altitude= - Altitude of camera in screen units\n   *\n   * Web mercator projection short-hand parameters\n   * @param {Number} opt.latitude - Center of viewport on map (alternative to opt.center)\n   * @param {Number} opt.longitude - Center of viewport on map (alternative to opt.center)\n   * @param {Number} opt.zoom - Scale = Math.pow(2,zoom) on map (alternative to opt.scale)\n   */\n  /* eslint-disable complexity */\n  constructor({\n    // Window width/height in pixels (for pixel projection)\n    width,\n    height,\n    // Desc\n    viewMatrix = IDENTITY,\n    projectionMatrix = IDENTITY\n  } = {}) {\n    // Silently allow apps to send in 0,0\n    this.width = width || 1;\n    this.height = height || 1;\n    this.scale = 1;\n    this.pixelsPerMeter = 1;\n\n    this.viewMatrix = viewMatrix;\n    this.projectionMatrix = projectionMatrix;\n\n    // Note: As usual, matrix operations should be applied in \"reverse\" order\n    // since vectors will be multiplied in from the right during transformation\n    const vpm = createMat4();\n    mat4.multiply(vpm, vpm, this.projectionMatrix);\n    mat4.multiply(vpm, vpm, this.viewMatrix);\n    this.viewProjectionMatrix = vpm;\n\n    // Calculate matrices and scales needed for projection\n    /**\n     * Builds matrices that converts preprojected lngLats to screen pixels\n     * and vice versa.\n     * Note: Currently returns bottom-left coordinates!\n     * Note: Starts with the GL projection matrix and adds steps to the\n     *       scale and translate that matrix onto the window.\n     * Note: WebGL controls clip space to screen projection with gl.viewport\n     *       and does not need this step.\n     */\n    const m = createMat4();\n\n    // matrix for conversion from location to screen coordinates\n    mat4.scale(m, m, [this.width / 2, -this.height / 2, 1]);\n    mat4.translate(m, m, [1, -1, 0]);\n\n    mat4.multiply(m, m, this.viewProjectionMatrix);\n\n    const mInverse = mat4.invert(createMat4(), m);\n    if (!mInverse) {\n      throw new Error('Pixel project matrix not invertible');\n    }\n\n    this.pixelProjectionMatrix = m;\n    this.pixelUnprojectionMatrix = mInverse;\n\n    // Bind methods for easy access\n    this.equals = this.equals.bind(this);\n    this.project = this.project.bind(this);\n    this.unproject = this.unproject.bind(this);\n    this.projectPosition = this.projectPosition.bind(this);\n    this.unprojectPosition = this.unprojectPosition.bind(this);\n    this.projectFlat = this.projectFlat.bind(this);\n    this.unprojectFlat = this.unprojectFlat.bind(this);\n  }\n  /* eslint-enable complexity */\n\n  // Two viewports are equal if width and height are identical, and if\n  // their view and projection matrices are (approximately) equal.\n  equals(viewport) {\n    if (!(viewport instanceof Viewport)) {\n      return false;\n    }\n\n    return viewport.width === this.width &&\n      viewport.height === this.height &&\n      mat4.equals(viewport.projectionMatrix, this.projectionMatrix) &&\n      mat4.equals(viewport.viewMatrix, this.viewMatrix);\n  }\n\n  /**\n   * Projects xyz (possibly latitude and longitude) to pixel coordinates in window\n   * using viewport projection parameters\n   * - [longitude, latitude] to [x, y]\n   * - [longitude, latitude, Z] => [x, y, z]\n   * Note: By default, returns top-left coordinates for canvas/SVG type render\n   *\n   * @param {Array} lngLatZ - [lng, lat] or [lng, lat, Z]\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether projected coords are top left\n   * @return {Array} - screen coordinates [x, y] or [x, y, z], z as pixel depth\n   */\n  project(xyz, {topLeft = true} = {}) {\n    const worldPosition = this.projectPosition(xyz);\n    const coord = worldToPixels(worldPosition, this.pixelProjectionMatrix);\n\n    const [x, y] = coord;\n    const y2 = topLeft ? y : this.height - y;\n    return xyz.length === 2 ? [x, y2] : [x, y2, coord[2]];\n  }\n\n  /**\n   * Unproject pixel coordinates on screen onto world coordinates,\n   * (possibly [lon, lat]) on map.\n   * - [x, y] => [lng, lat]\n   * - [x, y, z] => [lng, lat, Z]\n   * @param {Array} xyz - screen coordinates, z as pixel depth\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether projected coords are top left\n   * @param {Object} opts.targetZ=0 - If pixel depth is unknown, targetZ is used as\n   *   the elevation plane to unproject onto\n   * @return {Array} - [lng, lat, Z] or [X, Y, Z]\n   */\n  unproject(xyz, {topLeft = true, targetZ} = {}) {\n    const [x, y, z] = xyz;\n\n    const y2 = topLeft ? y : this.height - y;\n    const targetZWorld = targetZ && targetZ * this.pixelsPerMeter;\n    const coord = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix, targetZWorld);\n    const [X, Y, Z] = this.unprojectPosition(coord);\n\n    if (Number.isFinite(z)) {\n      return [X, Y, Z];\n    }\n    return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];\n  }\n\n  // NON_LINEAR PROJECTION HOOKS\n  // Used for web meractor projection\n\n  projectPosition(xyz) {\n    const [X, Y] = this.projectFlat(xyz);\n    const Z = (xyz[2] || 0) * this.pixelsPerMeter;\n    return [X, Y, Z];\n  }\n\n  unprojectPosition(xyz) {\n    const [X, Y] = this.unprojectFlat(xyz);\n    const Z = (xyz[2] || 0) / this.pixelsPerMeter;\n    return [X, Y, Z];\n  }\n\n  /**\n   * Project map coordinates to world coordinates.\n   * This should be overridden by each viewport that implements a specific\n   * geographic projection.\n   * @param {Array} xyz - map coordinates\n   * @return {Array} [x,y,z] world coordinates.\n   */\n  projectFlat(xyz, scale = this.scale) {\n    return xyz;\n  }\n\n  /**\n   * Project world coordinates to map coordinates.\n   * This should be overridden by each viewport that implements a specific\n   * geographic projection.\n   * @param {Array} xyz - world coordinates\n   * @return {Array} [x,y,z] map coordinates.\n   */\n  unprojectFlat(xyz, scale = this.scale) {\n    return xyz;\n  }\n\n}\n"],"file":"viewport.js"}