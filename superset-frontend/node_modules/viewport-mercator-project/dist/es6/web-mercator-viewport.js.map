{"version":3,"sources":["../../src/web-mercator-viewport.js"],"names":["Viewport","zoomToScale","pixelsToWorld","lngLatToWorld","worldToLngLat","getProjectionMatrix","getDistanceScales","getViewMatrix","fitBounds","vec2","WebMercatorViewport","constructor","width","height","latitude","longitude","zoom","pitch","bearing","altitude","nearZMultiplier","farZMultiplier","scale","Math","max","center","projectionMatrix","viewMatrix","flipY","pixelsPerMeter","Object","freeze","projectFlat","lngLat","unprojectFlat","xy","getMapCenterByLngLatPosition","pos","fromLocation","pixelUnprojectionMatrix","toLocation","translate","add","negate","newCenter","getLocationAtPoint","bounds","options","assign"],"mappings":"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","sourcesContent":["// View and Projection Matrix calculations for mapbox-js style map view properties\nimport Viewport from './viewport';\n\nimport {\n  zoomToScale,\n  pixelsToWorld,\n  lngLatToWorld,\n  worldToLngLat,\n  getProjectionMatrix,\n  getDistanceScales,\n  getViewMatrix\n} from './web-mercator-utils';\nimport fitBounds from './fit-bounds';\n\nimport * as vec2 from 'gl-matrix/vec2';\n\nexport default class WebMercatorViewport extends Viewport {\n  /**\n   * @classdesc\n   * Creates view/projection matrices from mercator params\n   * Note: The Viewport is immutable in the sense that it only has accessors.\n   * A new viewport instance should be created if any parameters have changed.\n   *\n   * @class\n   * @param {Object} opt - options\n   *\n   * @param {Number} opt.width=1 - Width of \"viewport\" or window\n   * @param {Number} opt.height=1 - Height of \"viewport\" or window\n   * @param {Number} opt.scale=1 - Either use scale or zoom\n   * @param {Number} opt.pitch=0 - Camera angle in degrees (0 is straight down)\n   * @param {Number} opt.bearing=0 - Map rotation in degrees (0 means north is up)\n   * @param {Number} opt.altitude= - Altitude of camera in screen units\n   *\n   * Web mercator projection short-hand parameters\n   * @param {Number} opt.latitude - Center of viewport on map (alternative to opt.center)\n   * @param {Number} opt.longitude - Center of viewport on map (alternative to opt.center)\n   * @param {Number} opt.zoom - Scale = Math.pow(2,zoom) on map (alternative to opt.scale)\n\n   * Notes:\n   *  - Only one of center or [latitude, longitude] can be specified\n   *  - [latitude, longitude] can only be specified when \"mercator\" is true\n   *  - Altitude has a default value that matches assumptions in mapbox-gl\n   *  - width and height are forced to 1 if supplied as 0, to avoid\n   *    division by zero. This is intended to reduce the burden of apps to\n   *    to check values before instantiating a Viewport.\n   */\n  /* eslint-disable complexity */\n  constructor({\n    // Map state\n    width,\n    height,\n    latitude = 0,\n    longitude = 0,\n    zoom = 0,\n    pitch = 0,\n    bearing = 0,\n    altitude = 1.5,\n    nearZMultiplier,\n    farZMultiplier\n  } = {}) {\n    // Silently allow apps to send in 0,0 to facilitate isomorphic render etc\n    width = width || 1;\n    height = height || 1;\n\n    const scale = zoomToScale(zoom);\n    // Altitude - prevent division by 0\n    // TODO - just throw an Error instead?\n    altitude = Math.max(0.75, altitude);\n\n    const center = lngLatToWorld([longitude, latitude], scale);\n    center[2] = 0;\n\n    const projectionMatrix = getProjectionMatrix({\n      width,\n      height,\n      pitch,\n      bearing,\n      altitude,\n      nearZMultiplier: nearZMultiplier || (1 / height),\n      farZMultiplier: farZMultiplier || 1.01\n    });\n\n    const viewMatrix = getViewMatrix({\n      height,\n      center,\n      pitch,\n      bearing,\n      altitude,\n      flipY: true\n    });\n\n    super({width, height, viewMatrix, projectionMatrix});\n\n    // Save parameters\n    this.latitude = latitude;\n    this.longitude = longitude;\n    this.zoom = zoom;\n    this.pitch = pitch;\n    this.bearing = bearing;\n    this.altitude = altitude;\n\n    this.scale = scale;\n    this.center = center;\n    this.pixelsPerMeter = getDistanceScales(this).pixelsPerMeter[2];\n\n    Object.freeze(this);\n  }\n  /* eslint-enable complexity */\n\n  /**\n   * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n   * Performs the nonlinear part of the web mercator projection.\n   * Remaining projection is done with 4x4 matrices which also handles\n   * perspective.\n   *\n   * @param {Array} lngLat - [lng, lat] coordinates\n   *   Specifies a point on the sphere to project onto the map.\n   * @return {Array} [x,y] coordinates.\n   */\n  projectFlat(lngLat, scale = this.scale) {\n    return lngLatToWorld(lngLat, scale);\n  }\n\n  /**\n   * Unproject world point [x,y] on map onto {lat, lon} on sphere\n   *\n   * @param {object|Vector} xy - object with {x,y} members\n   *  representing point on projected map plane\n   * @return {GeoCoordinates} - object with {lat,lon} of point on sphere.\n   *   Has toArray method if you need a GeoJSON Array.\n   *   Per cartographic tradition, lat and lon are specified as degrees.\n   */\n  unprojectFlat(xy, scale = this.scale) {\n    return worldToLngLat(xy, scale);\n  }\n\n  /**\n   * Get the map center that place a given [lng, lat] coordinate at screen\n   * point [x, y]\n   *\n   * @param {Array} lngLat - [lng,lat] coordinates\n   *   Specifies a point on the sphere.\n   * @param {Array} pos - [x,y] coordinates\n   *   Specifies a point on the screen.\n   * @return {Array} [lng,lat] new map center.\n   */\n  getMapCenterByLngLatPosition({lngLat, pos}) {\n    const fromLocation = pixelsToWorld(pos, this.pixelUnprojectionMatrix);\n    const toLocation = lngLatToWorld(lngLat, this.scale);\n\n    const translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n\n    return worldToLngLat(newCenter, this.scale);\n  }\n\n  // Legacy method name\n  getLocationAtPoint({lngLat, pos}) {\n    return this.getMapCenterByLngLatPosition({lngLat, pos});\n  }\n\n  /**\n   * Returns a new viewport that fit around the given rectangle.\n   * Only supports non-perspective mode.\n   * @param {Array} bounds - [[lon, lat], [lon, lat]]\n   * @param {Number} [options.padding] - The amount of padding in pixels to add to the given bounds.\n   * @param {Array} [options.offset] - The center of the given bounds relative to the map's center,\n   *    [x, y] measured in pixels.\n   * @returns {WebMercatorViewport}\n   */\n  fitBounds(bounds, options = {}) {\n    const {width, height} = this;\n    const {longitude, latitude, zoom} = fitBounds(Object.assign({width, height, bounds}, options));\n    return new WebMercatorViewport({width, height, longitude, latitude, zoom});\n  }\n\n}\n"],"file":"web-mercator-viewport.js"}