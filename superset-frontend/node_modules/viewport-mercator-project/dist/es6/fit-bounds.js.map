{"version":3,"sources":["../../src/fit-bounds.js"],"names":["WebMercatorViewport","assert","fitBounds","width","height","bounds","minExtent","maxZoom","padding","offset","west","south","east","north","Number","isFinite","p","top","bottom","left","right","viewport","longitude","latitude","zoom","nw","project","se","size","Math","max","abs","targetSize","scaleX","scaleY","offsetX","offsetY","center","centerLngLat","unproject","log2","min"],"mappings":"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","sourcesContent":["import WebMercatorViewport from './web-mercator-viewport';\nimport assert from './assert';\n\n/**\n * * An object describing the padding to add to the bounds.\n * @typedef {Object} PaddingObject\n * @property {Number} top - Padding from top in pixels to add to the given bounds\n * @property {Number} bottom - Padding from bottom in pixels to add to the given bounds\n * @property {Number} left - Padding from left in pixels to add to the given bounds\n * @property {Number} right - Padding from right in pixels to add to the given bounds\n */\n\n/**\n * Returns map settings {latitude, longitude, zoom}\n * that will contain the provided corners within the provided width.\n * Only supports non-perspective mode.\n * @param {Number} width - viewport width\n * @param {Number} height - viewport height\n * @param {Array} bounds - [[lon, lat], [lon, lat]]\n * @param {Array} minExtent - The width/height of the bounded area will never be smaller than this\n * @param {Number|PaddingObject} [padding] - The amount of padding in pixels\n *  to add to the given bounds. Can also be an object with top, bottom, left and right\n *  properties defining the padding.\n * @param {Array} [offset] - The center of the given bounds relative to the map's center,\n *    [x, y] measured in pixels.\n * @returns {Object} - latitude, longitude and zoom\n */\nexport default function fitBounds({\n  width,\n  height,\n  bounds,\n  minExtent = 0,  // 0.01 would be about 1000 meters (degree is ~110KM)\n  maxZoom = 24, // ~x4,000,000 => About 10 meter extents\n  // options\n  padding = 0,\n  offset = [0, 0]\n}) {\n  const [[west, south], [east, north]] = bounds;\n\n  if (Number.isFinite(padding)) {\n    const p = padding;\n    padding = {\n      top: p,\n      bottom: p,\n      left: p,\n      right: p\n    };\n  } else {\n    // Make sure all the required properties are set\n    assert(Number.isFinite(padding.top) &&\n      Number.isFinite(padding.bottom) &&\n      Number.isFinite(padding.left) &&\n      Number.isFinite(padding.right)\n    );\n  }\n\n  const viewport = new WebMercatorViewport({\n    width,\n    height,\n    longitude: 0,\n    latitude: 0,\n    zoom: 0\n  });\n\n  const nw = viewport.project([west, north]);\n  const se = viewport.project([east, south]);\n\n  // width/height on the Web Mercator plane\n  const size = [\n    Math.max(Math.abs(se[0] - nw[0]), minExtent),\n    Math.max(Math.abs(se[1] - nw[1]), minExtent)\n  ];\n\n  const targetSize = [\n    width - padding.left - padding.right - Math.abs(offset[0]) * 2,\n    height - padding.top - padding.bottom - Math.abs(offset[1]) * 2\n  ];\n\n  assert(targetSize[0] > 0 && targetSize[1] > 0);\n\n  // scale = screen pixels per unit on the Web Mercator plane\n  const scaleX = targetSize[0] / size[0];\n  const scaleY = targetSize[1] / size[1];\n\n  // Find how much we need to shift the center\n  const offsetX = (padding.right - padding.left) / 2 / scaleX;\n  const offsetY = (padding.bottom - padding.top) / 2 / scaleY;\n\n  const center = [\n    (se[0] + nw[0]) / 2 + offsetX,\n    (se[1] + nw[1]) / 2 + offsetY\n  ];\n\n  const centerLngLat = viewport.unproject(center);\n  const zoom = viewport.zoom + Math.log2(Math.abs(Math.min(scaleX, scaleY)));\n\n  return {\n    longitude: centerLngLat[0],\n    latitude: centerLngLat[1],\n    zoom: Math.min(zoom, maxZoom)\n  };\n}\n"],"file":"fit-bounds.js"}