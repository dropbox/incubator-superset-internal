{"version":3,"sources":["../../src/fly-to-viewport.js"],"names":["lerp","scaleToZoom","zoomToScale","lngLatToWorld","worldToLngLat","vec2","EPSILON","VIEWPORT_TRANSITION_PROPS","DEFAULT_OPTS","curve","speed","flyToViewport","startProps","endProps","t","opts","viewport","getFlyToTransitionParams","startZoom","startCenterXY","uDelta","w0","u1","S","rho","rho2","r0","key","startValue","endValue","s","w","Math","cosh","u","tanh","sinh","scaleIncrement","newZoom","newCenterWorld","scale","add","newCenter","longitude","latitude","zoom","getFlyToDuration","Object","assign","screenSpeed","maxDuration","length","duration","Number","isFinite","startCenter","startScale","endZoom","endCenter","endCenterXY","sub","max","width","height","w1","_u1","b0","b1","log","sqrt","r1"],"mappings":"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","sourcesContent":["import {lerp} from './math-utils';\nimport {\n  scaleToZoom,\n  zoomToScale,\n  lngLatToWorld,\n  worldToLngLat\n} from './web-mercator-utils';\nimport * as vec2 from 'gl-matrix/vec2';\n\nconst EPSILON = 0.01;\nconst VIEWPORT_TRANSITION_PROPS = ['longitude', 'latitude', 'zoom'];\nconst DEFAULT_OPTS = {\n  curve: 1.414,\n  speed: 1.2\n  // screenSpeed and maxDuration are used only if specified\n};\n\n/**\n * mapbox-gl-js flyTo : https://www.mapbox.com/mapbox-gl-js/api/#map#flyto.\n * It implements “Smooth and efficient zooming and panning.” algorithm by\n * \"Jarke J. van Wijk and Wim A.A. Nuij\"\n*/\nexport default function flyToViewport(startProps, endProps, t, opts = {}) {\n  // Equations from above paper are referred where needed.\n\n  const viewport = {};\n\n  const {\n    startZoom, startCenterXY, uDelta, w0, u1, S, rho, rho2, r0\n  } = getFlyToTransitionParams(startProps, endProps, opts);\n\n  // If change in center is too small, do linear interpolaiton.\n  if (u1 < EPSILON) {\n    for (const key of VIEWPORT_TRANSITION_PROPS) {\n      const startValue = startProps[key];\n      const endValue = endProps[key];\n      viewport[key] = lerp(startValue, endValue, t);\n    }\n    return viewport;\n  }\n\n  const s = t * S;\n\n  const w = (Math.cosh(r0) / Math.cosh(r0 + rho * s));\n  const u = w0 * ((Math.cosh(r0) * Math.tanh(r0 + rho * s) - Math.sinh(r0)) / rho2) / u1;\n\n  const scaleIncrement = 1 / w; // Using w method for scaling.\n  const newZoom = startZoom + scaleToZoom(scaleIncrement);\n\n  const newCenterWorld = vec2.scale([], uDelta, u);\n  vec2.add(newCenterWorld, newCenterWorld, startCenterXY);\n  vec2.scale(newCenterWorld, newCenterWorld, scaleIncrement);\n\n  const newCenter = worldToLngLat(\n    newCenterWorld,\n    zoomToScale(newZoom));\n  viewport.longitude = newCenter[0];\n  viewport.latitude = newCenter[1];\n  viewport.zoom = newZoom;\n  return viewport;\n}\n\n// returns transition duration in milliseconds\nexport function getFlyToDuration(startProps, endProps, opts = {}) {\n\n  opts = Object.assign({}, DEFAULT_OPTS, opts);\n  const {screenSpeed, speed, maxDuration} = opts;\n  const {S, rho} = getFlyToTransitionParams(startProps, endProps, opts);\n  const length =  1000 * S;\n  let duration;\n  if (Number.isFinite(screenSpeed)) {\n    duration = length / (screenSpeed / rho);\n  } else {\n    duration = length / speed;\n  }\n\n  return Number.isFinite(maxDuration) && duration > maxDuration ? 0 : duration;\n}\n\n// Private Methods\n\n// Calculate all parameters that are static for given startProps and endProps\nfunction getFlyToTransitionParams(startProps, endProps, opts) {\n\n  opts = Object.assign({}, DEFAULT_OPTS, opts);\n  const rho = opts.curve;\n  const startZoom = startProps.zoom;\n  const startCenter = [startProps.longitude, startProps.latitude];\n  const startScale = zoomToScale(startZoom);\n  const endZoom = endProps.zoom;\n  const endCenter = [endProps.longitude, endProps.latitude];\n  const scale = zoomToScale(endZoom - startZoom);\n\n  const startCenterXY = lngLatToWorld(startCenter, startScale);\n  const endCenterXY = lngLatToWorld(endCenter, startScale);\n  const uDelta = vec2.sub([], endCenterXY, startCenterXY);\n\n  const w0 = Math.max(startProps.width, startProps.height);\n  const w1 = w0 / scale;\n  const u1 = vec2.length(uDelta);\n  // u0 is treated as '0' in Eq (9).\n\n  // If u1 is too small, will generate invalid number\n  const _u1 = Math.max(u1, EPSILON);\n\n  // Implement Equation (9) from above algorithm.\n  const rho2 = rho * rho;\n  const b0 = (w1 * w1 - w0 * w0 + rho2 * rho2 * _u1 * _u1) / (2 * w0 * rho2 * _u1);\n  const b1 = (w1 * w1 - w0 * w0 - rho2 * rho2 * _u1 * _u1) / (2 * w1 * rho2 * _u1);\n  const r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0);\n  const r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);\n  const S = (r1 - r0) / rho;\n\n  return {startZoom, startCenterXY, uDelta, w0, u1, S, rho, rho2, r0, r1};\n}\n"],"file":"fly-to-viewport.js"}