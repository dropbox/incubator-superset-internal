{"version":3,"sources":["../../src/web-mercator-viewport.js"],"names":["WebMercatorViewport","width","height","latitude","longitude","zoom","pitch","bearing","altitude","nearZMultiplier","farZMultiplier","scale","Math","max","center","projectionMatrix","viewMatrix","flipY","pixelsPerMeter","Object","freeze","lngLat","xy","pos","fromLocation","pixelUnprojectionMatrix","toLocation","translate","vec2","add","negate","newCenter","getMapCenterByLngLatPosition","bounds","options","assign","Viewport"],"mappings":"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","sourcesContent":["// View and Projection Matrix calculations for mapbox-js style map view properties\nimport Viewport from './viewport';\n\nimport {\n  zoomToScale,\n  pixelsToWorld,\n  lngLatToWorld,\n  worldToLngLat,\n  getProjectionMatrix,\n  getDistanceScales,\n  getViewMatrix\n} from './web-mercator-utils';\nimport fitBounds from './fit-bounds';\n\nimport * as vec2 from 'gl-matrix/vec2';\n\nexport default class WebMercatorViewport extends Viewport {\n  /**\n   * @classdesc\n   * Creates view/projection matrices from mercator params\n   * Note: The Viewport is immutable in the sense that it only has accessors.\n   * A new viewport instance should be created if any parameters have changed.\n   *\n   * @class\n   * @param {Object} opt - options\n   *\n   * @param {Number} opt.width=1 - Width of \"viewport\" or window\n   * @param {Number} opt.height=1 - Height of \"viewport\" or window\n   * @param {Number} opt.scale=1 - Either use scale or zoom\n   * @param {Number} opt.pitch=0 - Camera angle in degrees (0 is straight down)\n   * @param {Number} opt.bearing=0 - Map rotation in degrees (0 means north is up)\n   * @param {Number} opt.altitude= - Altitude of camera in screen units\n   *\n   * Web mercator projection short-hand parameters\n   * @param {Number} opt.latitude - Center of viewport on map (alternative to opt.center)\n   * @param {Number} opt.longitude - Center of viewport on map (alternative to opt.center)\n   * @param {Number} opt.zoom - Scale = Math.pow(2,zoom) on map (alternative to opt.scale)\n\n   * Notes:\n   *  - Only one of center or [latitude, longitude] can be specified\n   *  - [latitude, longitude] can only be specified when \"mercator\" is true\n   *  - Altitude has a default value that matches assumptions in mapbox-gl\n   *  - width and height are forced to 1 if supplied as 0, to avoid\n   *    division by zero. This is intended to reduce the burden of apps to\n   *    to check values before instantiating a Viewport.\n   */\n  /* eslint-disable complexity */\n  constructor({\n    // Map state\n    width,\n    height,\n    latitude = 0,\n    longitude = 0,\n    zoom = 0,\n    pitch = 0,\n    bearing = 0,\n    altitude = 1.5,\n    nearZMultiplier,\n    farZMultiplier\n  } = {}) {\n    // Silently allow apps to send in 0,0 to facilitate isomorphic render etc\n    width = width || 1;\n    height = height || 1;\n\n    const scale = zoomToScale(zoom);\n    // Altitude - prevent division by 0\n    // TODO - just throw an Error instead?\n    altitude = Math.max(0.75, altitude);\n\n    const center = lngLatToWorld([longitude, latitude], scale);\n    center[2] = 0;\n\n    const projectionMatrix = getProjectionMatrix({\n      width,\n      height,\n      pitch,\n      bearing,\n      altitude,\n      nearZMultiplier: nearZMultiplier || (1 / height),\n      farZMultiplier: farZMultiplier || 1.01\n    });\n\n    const viewMatrix = getViewMatrix({\n      height,\n      center,\n      pitch,\n      bearing,\n      altitude,\n      flipY: true\n    });\n\n    super({width, height, viewMatrix, projectionMatrix});\n\n    // Save parameters\n    this.latitude = latitude;\n    this.longitude = longitude;\n    this.zoom = zoom;\n    this.pitch = pitch;\n    this.bearing = bearing;\n    this.altitude = altitude;\n\n    this.scale = scale;\n    this.center = center;\n    this.pixelsPerMeter = getDistanceScales(this).pixelsPerMeter[2];\n\n    Object.freeze(this);\n  }\n  /* eslint-enable complexity */\n\n  /**\n   * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n   * Performs the nonlinear part of the web mercator projection.\n   * Remaining projection is done with 4x4 matrices which also handles\n   * perspective.\n   *\n   * @param {Array} lngLat - [lng, lat] coordinates\n   *   Specifies a point on the sphere to project onto the map.\n   * @return {Array} [x,y] coordinates.\n   */\n  projectFlat(lngLat, scale = this.scale) {\n    return lngLatToWorld(lngLat, scale);\n  }\n\n  /**\n   * Unproject world point [x,y] on map onto {lat, lon} on sphere\n   *\n   * @param {object|Vector} xy - object with {x,y} members\n   *  representing point on projected map plane\n   * @return {GeoCoordinates} - object with {lat,lon} of point on sphere.\n   *   Has toArray method if you need a GeoJSON Array.\n   *   Per cartographic tradition, lat and lon are specified as degrees.\n   */\n  unprojectFlat(xy, scale = this.scale) {\n    return worldToLngLat(xy, scale);\n  }\n\n  /**\n   * Get the map center that place a given [lng, lat] coordinate at screen\n   * point [x, y]\n   *\n   * @param {Array} lngLat - [lng,lat] coordinates\n   *   Specifies a point on the sphere.\n   * @param {Array} pos - [x,y] coordinates\n   *   Specifies a point on the screen.\n   * @return {Array} [lng,lat] new map center.\n   */\n  getMapCenterByLngLatPosition({lngLat, pos}) {\n    const fromLocation = pixelsToWorld(pos, this.pixelUnprojectionMatrix);\n    const toLocation = lngLatToWorld(lngLat, this.scale);\n\n    const translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n\n    return worldToLngLat(newCenter, this.scale);\n  }\n\n  // Legacy method name\n  getLocationAtPoint({lngLat, pos}) {\n    return this.getMapCenterByLngLatPosition({lngLat, pos});\n  }\n\n  /**\n   * Returns a new viewport that fit around the given rectangle.\n   * Only supports non-perspective mode.\n   * @param {Array} bounds - [[lon, lat], [lon, lat]]\n   * @param {Number} [options.padding] - The amount of padding in pixels to add to the given bounds.\n   * @param {Array} [options.offset] - The center of the given bounds relative to the map's center,\n   *    [x, y] measured in pixels.\n   * @returns {WebMercatorViewport}\n   */\n  fitBounds(bounds, options = {}) {\n    const {width, height} = this;\n    const {longitude, latitude, zoom} = fitBounds(Object.assign({width, height, bounds}, options));\n    return new WebMercatorViewport({width, height, longitude, latitude, zoom});\n  }\n\n}\n"],"file":"web-mercator-viewport.js"}