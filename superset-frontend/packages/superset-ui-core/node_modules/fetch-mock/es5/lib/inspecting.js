'use strict';

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var FetchMock = {};

FetchMock.callsFilteredByName = function (name) {
	if (name === true) {
		return this._allCalls.filter(function (call) {
			return !call.unmatched;
		});
	}
	if (name === false) {
		return this._allCalls.filter(function (call) {
			return call.unmatched;
		});
	}

	if (typeof name === 'undefined') {
		return this._allCalls;
	}

	if (this._calls[name]) {
		return this._calls[name];
	}
	return this._allCalls.filter(function (_ref) {
		var _ref2 = (0, _slicedToArray3.default)(_ref, 1),
		    url = _ref2[0];

		return url === name || url.url === name;
	});
};

FetchMock.calls = function (name) {
	var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	if (typeof options === 'string') {
		options = { method: options };
	}

	var calls = this.callsFilteredByName(name);

	if (options.method) {
		var testMethod = options.method.toLowerCase();
		calls = calls.filter(function (_ref3) {
			var _ref4 = (0, _slicedToArray3.default)(_ref3, 2),
			    url = _ref4[0],
			    _ref4$ = _ref4[1],
			    opts = _ref4$ === undefined ? {} : _ref4$;

			var method = (url.method || opts.method || 'get').toLowerCase();
			return method === testMethod;
		});
	}
	return calls;
};

FetchMock.lastCall = function (name, options) {
	return [].concat((0, _toConsumableArray3.default)(this.calls(name, options))).pop();
};

FetchMock.normalizeLastCall = function (name, options) {
	var call = this.lastCall(name, options) || [];
	if (this.config.Request.prototype.isPrototypeOf(call[0])) {
		return [call[0].url, call[0]];
	}
	return call;
};

FetchMock.lastUrl = function (name, options) {
	return this.normalizeLastCall(name, options)[0];
};

FetchMock.lastOptions = function (name, options) {
	return this.normalizeLastCall(name, options)[1];
};

FetchMock.called = function (name, options) {
	return !!this.calls(name, options).length;
};

FetchMock.flush = function () {
	return _promise2.default.all(this._holdingPromises);
};

FetchMock.done = function (name, options) {
	var _this = this;

	var names = name && typeof name !== 'boolean' ? [{ name: name }] : this.routes;

	// Can't use array.every because
	// a) not widely supported
	// b) would exit after first failure, which would break the logging
	return names.map(function (_ref5) {
		var name = _ref5.name,
		    method = _ref5.method;

		// HACK - this is horrible. When the api is eventually updated to update other
		// filters other than a method string it will break... but for now it's ok-ish
		method = options || method;

		if (!_this.called(name, method)) {
			console.warn('Warning: ' + name + ' not called'); // eslint-disable-line
			return false;
		}

		// would use array.find... but again not so widely supported
		var expectedTimes = (_this.routes.filter(function (r) {
			return r.name === name && r.method === method;
		}) || [{}])[0].repeat;
		if (!expectedTimes) {
			return true;
		}

		var actualTimes = _this.calls(name, method).length;
		if (expectedTimes > actualTimes) {
			console.warn('Warning: ' + name + ' only called ' + actualTimes + ' times, but ' + expectedTimes + ' expected'); // eslint-disable-line
			return false;
		} else {
			return true;
		}
	}).filter(function (bool) {
		return !bool;
	}).length === 0;
};

module.exports = FetchMock;