import _pt from "prop-types";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/* eslint-disable @typescript-eslint/unbound-method */
import React from 'react';
import cx from 'classnames';
import { Group } from '@vx/group';
import { area, stack as d3stack } from 'd3-shape';
import setNumOrAccessor from '../util/setNumberOrNumberAccessor';
import stackOrder from '../util/stackOrder';
import stackOffset from '../util/stackOffset';
export default function Stack(_ref) {
  var className = _ref.className,
      top = _ref.top,
      left = _ref.left,
      keys = _ref.keys,
      data = _ref.data,
      curve = _ref.curve,
      defined = _ref.defined,
      x = _ref.x,
      x0 = _ref.x0,
      x1 = _ref.x1,
      y0 = _ref.y0,
      y1 = _ref.y1,
      value = _ref.value,
      order = _ref.order,
      offset = _ref.offset,
      color = _ref.color,
      children = _ref.children,
      restProps = _objectWithoutPropertiesLoose(_ref, ["className", "top", "left", "keys", "data", "curve", "defined", "x", "x0", "x1", "y0", "y1", "value", "order", "offset", "color", "children"]);

  var stack = d3stack();
  if (keys) stack.keys(keys);
  if (value) setNumOrAccessor(stack.value, value);
  if (order) stack.order(stackOrder(order));
  if (offset) stack.offset(stackOffset(offset));
  var path = area();
  if (x) path.x(x);
  if (x0) path.x0(x0);
  if (x1) path.x1(x1);
  if (y0) path.y0(y0);
  if (y1) path.y1(y1);
  if (curve) path.curve(curve);
  if (defined) path.defined(defined);
  var stacks = stack(data);
  if (children) return /*#__PURE__*/React.createElement(React.Fragment, null, children({
    stacks: stacks,
    path: path,
    stack: stack
  }));
  return /*#__PURE__*/React.createElement(Group, {
    top: top,
    left: left
  }, stacks.map(function (series, i) {
    return /*#__PURE__*/React.createElement("path", _extends({
      className: cx('vx-stack', className),
      key: "stack-" + i + "-" + (series.key || ''),
      d: path(series) || '',
      fill: color && color(series.key, i)
    }, restProps));
  }));
}
Stack.propTypes = {
  data: _pt.array.isRequired,
  className: _pt.string,
  top: _pt.number,
  left: _pt.number,
  color: _pt.func,
  keys: _pt.array,
  children: _pt.func,
  x: _pt.func,
  x0: _pt.func,
  x1: _pt.func,
  y0: _pt.func,
  y1: _pt.func,
  value: _pt.oneOfType([_pt.number, _pt.func]),
  defined: _pt.func,
  order: _pt.any,
  offset: _pt.any
};