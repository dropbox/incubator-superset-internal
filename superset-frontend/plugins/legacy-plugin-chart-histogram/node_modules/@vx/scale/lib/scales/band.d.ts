declare type StringLike = string | {
    toString(): string;
};
declare type Numeric = number | {
    valueOf(): number;
};
export declare type BandConfig<Datum extends StringLike> = {
    /** Sets the output values of the scale, which are numbers for band scales. */
    range?: [Numeric, Numeric];
    /** Sets the output values of the scale while setting its interpolator to round. If the elements are not numbers, they will be coerced to numbers. */
    rangeRound?: [Numeric, Numeric];
    /** Sets the input values of the scale, which are strings for band scales. */
    domain?: Datum[];
    /** 0-1, determines how any leftover unused space in the range is distributed. 0.5 distributes it equally left and right. */
    align?: number;
    /** 0-1, determines the ratio of the range that is reserved for blank space before the first point and after the last. */
    padding?: number;
    /** 0-1, determines the ratio of the range that is reserved for blank space _between_ bands. */
    paddingInner?: number;
    /** 0-1, determines the ratio of the range that is reserved for blank space before the first band and after the last band. */
    paddingOuter?: number;
    tickFormat?: unknown;
};
export default function bandScale<Datum extends StringLike = StringLike>({ range, rangeRound, domain, padding, paddingInner, paddingOuter, align, tickFormat, }: BandConfig<Datum>): import("d3-scale").ScaleBand<Datum>;
export {};
//# sourceMappingURL=band.d.ts.map