import _pt from "prop-types";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import Legend from './Legend';
import labelTransformFactory from '../util/labelTransformFactory';

function defaultDomain(_ref) {
  var steps = _ref.steps,
      scale = _ref.scale;
  var domain = scale.domain();
  var start = domain[0];
  var end = domain[domain.length - 1];

  if (typeof start === 'number' && typeof end === 'number') {
    var step = (end - start) / (steps - 1);
    return new Array(steps).fill(1).reduce(function (acc, cur, i) {
      acc.push(start + i * step);
      return acc;
    }, []);
  }

  return [];
}

export default function Size(_ref2) {
  var scale = _ref2.scale,
      inputDomain = _ref2.domain,
      _ref2$steps = _ref2.steps,
      steps = _ref2$steps === void 0 ? 5 : _ref2$steps,
      _ref2$labelFormat = _ref2.labelFormat,
      labelFormat = _ref2$labelFormat === void 0 ? function (x) {
    return x;
  } : _ref2$labelFormat,
      _ref2$labelTransform = _ref2.labelTransform,
      labelTransform = _ref2$labelTransform === void 0 ? labelTransformFactory : _ref2$labelTransform,
      restProps = _objectWithoutPropertiesLoose(_ref2, ["scale", "domain", "steps", "labelFormat", "labelTransform"]);

  var domain = inputDomain || defaultDomain({
    steps: steps,
    scale: scale
  });
  return /*#__PURE__*/React.createElement(Legend, _extends({
    scale: scale,
    domain: domain,
    labelFormat: labelFormat,
    labelTransform: labelTransform
  }, restProps));
}
Size.propTypes = {
  steps: _pt.number
};