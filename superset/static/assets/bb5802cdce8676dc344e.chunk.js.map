{"version":3,"file":"bb5802cdce8676dc344e.chunk.js","mappings":"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","sources":["webpack://superset/./src/components/ImportModal/styles.ts","webpack://superset/./src/components/ImportModal/ErrorAlert.tsx","webpack://superset/./src/components/ImportModal/index.tsx","webpack://superset/./src/views/CRUD/dashboard/types.ts","webpack://superset/./src/views/CRUD/dashboard/DashboardList.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { css, SupersetTheme } from '@superset-ui/core';\n\nexport const antdWarningAlertStyles = (theme: SupersetTheme) => css`\n  border: 1px solid ${theme.colors.warning.light1};\n  padding: ${theme.gridUnit * 4}px;\n  margin: ${theme.gridUnit * 4}px 0;\n  color: ${theme.colors.warning.dark2};\n\n  .ant-alert-message {\n    margin: 0;\n  }\n\n  .ant-alert-description {\n    font-size: ${theme.typography.sizes.s + 1}px;\n    line-height: ${theme.gridUnit * 4}px;\n\n    .ant-alert-icon {\n      margin-right: ${theme.gridUnit * 2.5}px;\n      font-size: ${theme.typography.sizes.l + 1}px;\n      position: relative;\n      top: ${theme.gridUnit / 4}px;\n    }\n  }\n`;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { FunctionComponent } from 'react';\nimport { t, SupersetTheme } from '@superset-ui/core';\n\nimport { getDatabaseDocumentationLinks } from 'src/views/CRUD/hooks';\nimport Alert from 'src/components/Alert';\nimport { antdWarningAlertStyles } from './styles';\n\nconst supersetTextDocs = getDatabaseDocumentationLinks();\nexport const DOCUMENTATION_LINK = supersetTextDocs\n  ? supersetTextDocs.support\n  : 'https://superset.apache.org/docs/databases/installing-database-drivers';\n\nexport interface IProps {\n  errorMessage: string;\n  showDbInstallInstructions: boolean;\n}\n\nconst ErrorAlert: FunctionComponent<IProps> = ({\n  errorMessage,\n  showDbInstallInstructions,\n}) => (\n  <Alert\n    closable={false}\n    css={(theme: SupersetTheme) => antdWarningAlertStyles(theme)}\n    type=\"error\"\n    showIcon\n    message={errorMessage}\n    description={\n      showDbInstallInstructions ? (\n        <>\n          <br />\n          {t(\n            'Database driver for importing maybe not installed. Visit the Superset documentation page for installation instructions:',\n          )}\n          <a\n            href={DOCUMENTATION_LINK}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"additional-fields-alert-description\"\n          >\n            {t('here')}\n          </a>\n          .\n        </>\n      ) : (\n        ''\n      )\n    }\n  />\n);\n\nexport default ErrorAlert;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { FunctionComponent, useEffect, useState } from 'react';\nimport { UploadChangeParam, UploadFile } from 'antd/lib/upload/interface';\nimport { styled, t } from '@superset-ui/core';\n\nimport Button from 'src/components/Button';\nimport Modal from 'src/components/Modal';\nimport { Upload } from 'src/components';\nimport { useImportResource } from 'src/views/CRUD/hooks';\nimport { ImportResourceName } from 'src/views/CRUD/types';\nimport ErrorAlert from './ErrorAlert';\n\nconst HelperMessage = styled.div`\n  display: block;\n  color: ${({ theme }) => theme.colors.grayscale.base};\n  font-size: ${({ theme }) => theme.typography.sizes.s}px;\n`;\n\nconst StyledInputContainer = styled.div`\n  padding-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n  padding-top: ${({ theme }) => theme.gridUnit * 2}px;\n\n  & > div {\n    margin: ${({ theme }) => theme.gridUnit}px 0;\n  }\n\n  &.extra-container {\n    padding-top: 8px;\n  }\n\n  .confirm-overwrite {\n    margin-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n  }\n\n  .input-container {\n    display: flex;\n    align-items: center;\n\n    label {\n      display: flex;\n      margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n    }\n\n    i {\n      margin: 0 ${({ theme }) => theme.gridUnit}px;\n    }\n  }\n\n  input,\n  textarea {\n    flex: 1 1 auto;\n  }\n\n  textarea {\n    height: 160px;\n    resize: none;\n  }\n\n  input::placeholder,\n  textarea::placeholder {\n    color: ${({ theme }) => theme.colors.grayscale.light1};\n  }\n\n  textarea,\n  input[type='text'],\n  input[type='number'] {\n    padding: ${({ theme }) => theme.gridUnit * 1.5}px\n      ${({ theme }) => theme.gridUnit * 2}px;\n    border-style: none;\n    border: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n    border-radius: ${({ theme }) => theme.gridUnit}px;\n\n    &[name='name'] {\n      flex: 0 1 auto;\n      width: 40%;\n    }\n\n    &[name='sqlalchemy_uri'] {\n      margin-right: ${({ theme }) => theme.gridUnit * 3}px;\n    }\n  }\n`;\n\nexport interface ImportModelsModalProps {\n  resourceName: ImportResourceName;\n  resourceLabel: string;\n  passwordsNeededMessage: string;\n  confirmOverwriteMessage: string;\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n  onModelImport: () => void;\n  show: boolean;\n  onHide: () => void;\n  passwordFields?: string[];\n  setPasswordFields?: (passwordFields: string[]) => void;\n}\n\nconst ImportModelsModal: FunctionComponent<ImportModelsModalProps> = ({\n  resourceName,\n  resourceLabel,\n  passwordsNeededMessage,\n  confirmOverwriteMessage,\n  onModelImport,\n  show,\n  onHide,\n  passwordFields = [],\n  setPasswordFields = () => {},\n}) => {\n  const [isHidden, setIsHidden] = useState<boolean>(true);\n  const [passwords, setPasswords] = useState<Record<string, string>>({});\n  const [needsOverwriteConfirm, setNeedsOverwriteConfirm] =\n    useState<boolean>(false);\n  const [confirmedOverwrite, setConfirmedOverwrite] = useState<boolean>(false);\n  const [fileList, setFileList] = useState<UploadFile[]>([]);\n  const [importingModel, setImportingModel] = useState<boolean>(false);\n  const [errorMessage, setErrorMessage] = useState<string>();\n\n  const clearModal = () => {\n    setFileList([]);\n    setPasswordFields([]);\n    setPasswords({});\n    setNeedsOverwriteConfirm(false);\n    setConfirmedOverwrite(false);\n    setImportingModel(false);\n    setErrorMessage('');\n  };\n\n  const handleErrorMsg = (msg: string) => {\n    setErrorMessage(msg);\n  };\n\n  const {\n    state: { alreadyExists, passwordsNeeded },\n    importResource,\n  } = useImportResource(resourceName, resourceLabel, handleErrorMsg);\n\n  useEffect(() => {\n    setPasswordFields(passwordsNeeded);\n    if (passwordsNeeded.length > 0) {\n      setImportingModel(false);\n    }\n  }, [passwordsNeeded, setPasswordFields]);\n\n  useEffect(() => {\n    setNeedsOverwriteConfirm(alreadyExists.length > 0);\n    if (alreadyExists.length > 0) {\n      setImportingModel(false);\n    }\n  }, [alreadyExists, setNeedsOverwriteConfirm]);\n\n  // Functions\n  const hide = () => {\n    setIsHidden(true);\n    onHide();\n    clearModal();\n  };\n\n  const onUpload = () => {\n    if (!(fileList[0]?.originFileObj instanceof File)) {\n      return;\n    }\n\n    setImportingModel(true);\n    importResource(\n      fileList[0].originFileObj,\n      passwords,\n      confirmedOverwrite,\n    ).then(result => {\n      if (result) {\n        clearModal();\n        onModelImport();\n      }\n    });\n  };\n\n  const changeFile = (info: UploadChangeParam) => {\n    setFileList([\n      {\n        ...info.file,\n        status: 'done',\n      },\n    ]);\n  };\n\n  const removeFile = (removedFile: UploadFile) => {\n    setFileList(fileList.filter(file => file.uid !== removedFile.uid));\n    return false;\n  };\n\n  const confirmOverwrite = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const targetValue = (event.currentTarget?.value as string) ?? '';\n    setConfirmedOverwrite(targetValue.toUpperCase() === t('OVERWRITE'));\n  };\n\n  const renderPasswordFields = () => {\n    if (passwordFields.length === 0) {\n      return null;\n    }\n\n    return (\n      <>\n        <h5>Database passwords</h5>\n        <HelperMessage>{passwordsNeededMessage}</HelperMessage>\n        {passwordFields.map(fileName => (\n          <StyledInputContainer key={`password-for-${fileName}`}>\n            <div className=\"control-label\">\n              {fileName}\n              <span className=\"required\">*</span>\n            </div>\n            <input\n              name={`password-${fileName}`}\n              autoComplete={`password-${fileName}`}\n              type=\"password\"\n              value={passwords[fileName]}\n              onChange={event =>\n                setPasswords({ ...passwords, [fileName]: event.target.value })\n              }\n            />\n          </StyledInputContainer>\n        ))}\n      </>\n    );\n  };\n\n  const renderOverwriteConfirmation = () => {\n    if (!needsOverwriteConfirm) {\n      return null;\n    }\n\n    return (\n      <>\n        <StyledInputContainer>\n          <div className=\"confirm-overwrite\">{confirmOverwriteMessage}</div>\n          <div className=\"control-label\">\n            {t('Type \"%s\" to confirm', t('OVERWRITE'))}\n          </div>\n          <input\n            data-test=\"overwrite-modal-input\"\n            id=\"overwrite\"\n            type=\"text\"\n            onChange={confirmOverwrite}\n          />\n        </StyledInputContainer>\n      </>\n    );\n  };\n\n  // Show/hide\n  if (isHidden && show) {\n    setIsHidden(false);\n  }\n\n  return (\n    <Modal\n      name=\"model\"\n      className=\"import-model-modal\"\n      disablePrimaryButton={\n        fileList.length === 0 ||\n        (needsOverwriteConfirm && !confirmedOverwrite) ||\n        importingModel\n      }\n      onHandledPrimaryAction={onUpload}\n      onHide={hide}\n      primaryButtonName={needsOverwriteConfirm ? t('Overwrite') : t('Import')}\n      primaryButtonType={needsOverwriteConfirm ? 'danger' : 'primary'}\n      width=\"750px\"\n      show={show}\n      title={<h4>{t('Import %s', resourceLabel)}</h4>}\n    >\n      <StyledInputContainer>\n        <Upload\n          name=\"modelFile\"\n          id=\"modelFile\"\n          data-test=\"model-file-input\"\n          accept=\".yaml,.json,.yml,.zip\"\n          fileList={fileList}\n          onChange={changeFile}\n          onRemove={removeFile}\n          // upload is handled by hook\n          customRequest={() => {}}\n          disabled={importingModel}\n        >\n          <Button loading={importingModel}>Select file</Button>\n        </Upload>\n      </StyledInputContainer>\n      {errorMessage && (\n        <ErrorAlert\n          errorMessage={errorMessage}\n          showDbInstallInstructions={passwordFields.length > 0}\n        />\n      )}\n      {renderPasswordFields()}\n      {renderOverwriteConfirmation()}\n    </Modal>\n  );\n};\n\nexport default ImportModelsModal;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nexport type DashboardObject = {\n  dashboard_title: string;\n  description?: string;\n  css?: string;\n  slug?: string;\n  position?: string;\n  metadata?: string;\n};\n\nexport enum DashboardStatus {\n  PUBLISHED = 'published',\n  DRAFT = 'draft',\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { styled, SupersetClient, t } from '@superset-ui/core';\nimport React, { useState, useMemo, useCallback } from 'react';\nimport { Link } from 'react-router-dom';\nimport rison from 'rison';\nimport { isFeatureEnabled, FeatureFlag } from 'src/featureFlags';\nimport {\n  createFetchRelated,\n  createErrorHandler,\n  handleDashboardDelete,\n} from 'src/views/CRUD/utils';\nimport { useListViewResource, useFavoriteStatus } from 'src/views/CRUD/hooks';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport handleResourceExport from 'src/utils/export';\nimport Loading from 'src/components/Loading';\nimport SubMenu, { SubMenuProps } from 'src/views/components/SubMenu';\nimport ListView, {\n  ListViewProps,\n  Filter,\n  Filters,\n  FilterOperator,\n} from 'src/components/ListView';\nimport { dangerouslyGetItemDoNotUse } from 'src/utils/localStorageHelpers';\nimport Owner from 'src/types/Owner';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport FacePile from 'src/components/FacePile';\nimport Icons from 'src/components/Icons';\nimport FaveStar from 'src/components/FaveStar';\nimport PropertiesModal from 'src/dashboard/components/PropertiesModal';\nimport { Tooltip } from 'src/components/Tooltip';\nimport ImportModelsModal from 'src/components/ImportModal/index';\n\nimport Dashboard from 'src/dashboard/containers/Dashboard';\nimport CertifiedBadge from 'src/components/CertifiedBadge';\nimport DashboardCard from './DashboardCard';\nimport { DashboardStatus } from './types';\n\nconst PAGE_SIZE = 25;\nconst PASSWORDS_NEEDED_MESSAGE = t(\n  'The passwords for the databases below are needed in order to ' +\n    'import them together with the dashboards. Please note that the ' +\n    '\"Secure Extra\" and \"Certificate\" sections of ' +\n    'the database configuration are not present in export files, and ' +\n    'should be added manually after the import if they are needed.',\n);\nconst CONFIRM_OVERWRITE_MESSAGE = t(\n  'You are importing one or more dashboards that already exist. ' +\n    'Overwriting might cause you to lose some of your work. Are you ' +\n    'sure you want to overwrite?',\n);\n\ninterface DashboardListProps {\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n  user: {\n    userId: string | number;\n    firstName: string;\n    lastName: string;\n  };\n}\n\ninterface Dashboard {\n  changed_by_name: string;\n  changed_by_url: string;\n  changed_on_delta_humanized: string;\n  changed_by: string;\n  dashboard_title: string;\n  id: number;\n  published: boolean;\n  url: string;\n  thumbnail_url: string;\n  owners: Owner[];\n  created_by: object;\n}\n\nconst Actions = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.base};\n`;\n\nfunction DashboardList(props: DashboardListProps) {\n  const {\n    addDangerToast,\n    addSuccessToast,\n    user: { userId },\n  } = props;\n\n  const {\n    state: {\n      loading,\n      resourceCount: dashboardCount,\n      resourceCollection: dashboards,\n      bulkSelectEnabled,\n    },\n    setResourceCollection: setDashboards,\n    hasPerm,\n    fetchData,\n    toggleBulkSelect,\n    refreshData,\n  } = useListViewResource<Dashboard>(\n    'dashboard',\n    t('dashboard'),\n    addDangerToast,\n  );\n  const dashboardIds = useMemo(() => dashboards.map(d => d.id), [dashboards]);\n  const [saveFavoriteStatus, favoriteStatus] = useFavoriteStatus(\n    'dashboard',\n    dashboardIds,\n    addDangerToast,\n  );\n\n  const [dashboardToEdit, setDashboardToEdit] = useState<Dashboard | null>(\n    null,\n  );\n\n  const [importingDashboard, showImportModal] = useState<boolean>(false);\n  const [passwordFields, setPasswordFields] = useState<string[]>([]);\n  const [preparingExport, setPreparingExport] = useState<boolean>(false);\n\n  const openDashboardImportModal = () => {\n    showImportModal(true);\n  };\n\n  const closeDashboardImportModal = () => {\n    showImportModal(false);\n  };\n\n  const handleDashboardImport = () => {\n    showImportModal(false);\n    refreshData();\n    addSuccessToast(t('Dashboard imported'));\n  };\n\n  // TODO: Fix usage of localStorage keying on the user id\n  const userKey = dangerouslyGetItemDoNotUse(userId?.toString(), null);\n\n  const canCreate = hasPerm('can_write');\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canExport =\n    hasPerm('can_export') && isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT);\n\n  const initialSort = [{ id: 'changed_on_delta_humanized', desc: true }];\n\n  function openDashboardEditModal(dashboard: Dashboard) {\n    setDashboardToEdit(dashboard);\n  }\n\n  function handleDashboardEdit(edits: Dashboard) {\n    return SupersetClient.get({\n      endpoint: `/api/v1/dashboard/${edits.id}`,\n    }).then(\n      ({ json = {} }) => {\n        setDashboards(\n          dashboards.map(dashboard => {\n            if (dashboard.id === json?.result?.id) {\n              const {\n                changed_by_name,\n                changed_by_url,\n                changed_by,\n                dashboard_title = '',\n                slug = '',\n                json_metadata = '',\n                changed_on_delta_humanized,\n                url = '',\n                certified_by = '',\n                certification_details = '',\n              } = json.result;\n              return {\n                ...dashboard,\n                changed_by_name,\n                changed_by_url,\n                changed_by,\n                dashboard_title,\n                slug,\n                json_metadata,\n                changed_on_delta_humanized,\n                url,\n                certified_by,\n                certification_details,\n              };\n            }\n            return dashboard;\n          }),\n        );\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(\n          t('An error occurred while fetching dashboards: %s', errMsg),\n        ),\n      ),\n    );\n  }\n\n  const handleBulkDashboardExport = (dashboardsToExport: Dashboard[]) => {\n    const ids = dashboardsToExport.map(({ id }) => id);\n    handleResourceExport('dashboard', ids, () => {\n      setPreparingExport(false);\n    });\n    setPreparingExport(true);\n  };\n\n  function handleBulkDashboardDelete(dashboardsToDelete: Dashboard[]) {\n    return SupersetClient.delete({\n      endpoint: `/api/v1/dashboard/?q=${rison.encode(\n        dashboardsToDelete.map(({ id }) => id),\n      )}`,\n    }).then(\n      ({ json = {} }) => {\n        refreshData();\n        addSuccessToast(json.message);\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(\n          t('There was an issue deleting the selected dashboards: ', errMsg),\n        ),\n      ),\n    );\n  }\n\n  const columns = useMemo(\n    () => [\n      {\n        Cell: ({\n          row: {\n            original: { id },\n          },\n        }: any) =>\n          userId && (\n            <FaveStar\n              itemId={id}\n              saveFaveStar={saveFavoriteStatus}\n              isStarred={favoriteStatus[id]}\n            />\n          ),\n        Header: '',\n        id: 'id',\n        disableSortBy: true,\n        size: 'xs',\n        hidden: !userId,\n      },\n      {\n        Cell: ({\n          row: {\n            original: {\n              url,\n              dashboard_title: dashboardTitle,\n              certified_by: certifiedBy,\n              certification_details: certificationDetails,\n            },\n          },\n        }: any) => (\n          <Link to={url}>\n            {certifiedBy && (\n              <>\n                <CertifiedBadge\n                  certifiedBy={certifiedBy}\n                  details={certificationDetails}\n                />{' '}\n              </>\n            )}\n            {dashboardTitle}\n          </Link>\n        ),\n        Header: t('Title'),\n        accessor: 'dashboard_title',\n      },\n\n      {\n        Cell: ({\n          row: {\n            original: {\n              changed_by_name: changedByName,\n              changed_by_url: changedByUrl,\n            },\n          },\n        }: any) => <a href={changedByUrl}>{changedByName}</a>,\n        Header: t('Modified by'),\n        accessor: 'changed_by.first_name',\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { status },\n          },\n        }: any) =>\n          status === DashboardStatus.PUBLISHED ? t('Published') : t('Draft'),\n        Header: t('Status'),\n        accessor: 'published',\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { changed_on_delta_humanized: changedOn },\n          },\n        }: any) => <span className=\"no-wrap\">{changedOn}</span>,\n        Header: t('Modified'),\n        accessor: 'changed_on_delta_humanized',\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { created_by: createdBy },\n          },\n        }: any) =>\n          createdBy ? `${createdBy.first_name} ${createdBy.last_name}` : '',\n        Header: t('Created by'),\n        accessor: 'created_by',\n        disableSortBy: true,\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { owners = [] },\n          },\n        }: any) => <FacePile users={owners} />,\n        Header: t('Owners'),\n        accessor: 'owners',\n        disableSortBy: true,\n        size: 'xl',\n      },\n      {\n        Cell: ({ row: { original } }: any) => {\n          const handleDelete = () =>\n            handleDashboardDelete(\n              original,\n              refreshData,\n              addSuccessToast,\n              addDangerToast,\n            );\n          const handleEdit = () => openDashboardEditModal(original);\n          const handleExport = () => handleBulkDashboardExport([original]);\n\n          return (\n            <Actions className=\"actions\">\n              {canDelete && (\n                <ConfirmStatusChange\n                  title={t('Please confirm')}\n                  description={\n                    <>\n                      {t('Are you sure you want to delete')}{' '}\n                      <b>{original.dashboard_title}</b>?\n                    </>\n                  }\n                  onConfirm={handleDelete}\n                >\n                  {confirmDelete => (\n                    <Tooltip\n                      id=\"delete-action-tooltip\"\n                      title={t('Delete')}\n                      placement=\"bottom\"\n                    >\n                      <span\n                        role=\"button\"\n                        tabIndex={0}\n                        className=\"action-button\"\n                        onClick={confirmDelete}\n                      >\n                        <Icons.Trash data-test=\"dashboard-list-trash-icon\" />\n                      </span>\n                    </Tooltip>\n                  )}\n                </ConfirmStatusChange>\n              )}\n              {canExport && (\n                <Tooltip\n                  id=\"export-action-tooltip\"\n                  title={t('Export')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={handleExport}\n                  >\n                    <Icons.Share />\n                  </span>\n                </Tooltip>\n              )}\n              {canEdit && (\n                <Tooltip\n                  id=\"edit-action-tooltip\"\n                  title={t('Edit')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={handleEdit}\n                  >\n                    <Icons.EditAlt data-test=\"edit-alt\" />\n                  </span>\n                </Tooltip>\n              )}\n            </Actions>\n          );\n        },\n        Header: t('Actions'),\n        id: 'actions',\n        hidden: !canEdit && !canDelete && !canExport,\n        disableSortBy: true,\n      },\n    ],\n    [\n      userId,\n      canEdit,\n      canDelete,\n      canExport,\n      saveFavoriteStatus,\n      favoriteStatus,\n      refreshData,\n      addSuccessToast,\n      addDangerToast,\n    ],\n  );\n\n  const favoritesFilter: Filter = useMemo(\n    () => ({\n      Header: t('Favorite'),\n      id: 'id',\n      urlDisplay: 'favorite',\n      input: 'select',\n      operator: FilterOperator.dashboardIsFav,\n      unfilteredLabel: t('Any'),\n      selects: [\n        { label: t('Yes'), value: true },\n        { label: t('No'), value: false },\n      ],\n    }),\n    [],\n  );\n\n  const filters: Filters = useMemo(\n    () => [\n      {\n        Header: t('Owner'),\n        id: 'owners',\n        input: 'select',\n        operator: FilterOperator.relationManyMany,\n        unfilteredLabel: t('All'),\n        fetchSelects: createFetchRelated(\n          'dashboard',\n          'owners',\n          createErrorHandler(errMsg =>\n            addDangerToast(\n              t(\n                'An error occurred while fetching dashboard owner values: %s',\n                errMsg,\n              ),\n            ),\n          ),\n          props.user,\n        ),\n        paginate: true,\n      },\n      {\n        Header: t('Created by'),\n        id: 'created_by',\n        input: 'select',\n        operator: FilterOperator.relationOneMany,\n        unfilteredLabel: t('All'),\n        fetchSelects: createFetchRelated(\n          'dashboard',\n          'created_by',\n          createErrorHandler(errMsg =>\n            addDangerToast(\n              t(\n                'An error occurred while fetching dashboard created by values: %s',\n                errMsg,\n              ),\n            ),\n          ),\n          props.user,\n        ),\n        paginate: true,\n      },\n      {\n        Header: t('Status'),\n        id: 'published',\n        input: 'select',\n        operator: FilterOperator.equals,\n        unfilteredLabel: t('Any'),\n        selects: [\n          { label: t('Published'), value: true },\n          { label: t('Draft'), value: false },\n        ],\n      },\n      ...(userId ? [favoritesFilter] : []),\n      {\n        Header: t('Certified'),\n        id: 'id',\n        urlDisplay: 'certified',\n        input: 'select',\n        operator: FilterOperator.dashboardIsCertified,\n        unfilteredLabel: t('Any'),\n        selects: [\n          { label: t('Yes'), value: true },\n          { label: t('No'), value: false },\n        ],\n      },\n      {\n        Header: t('Search'),\n        id: 'dashboard_title',\n        input: 'search',\n        operator: FilterOperator.titleOrSlug,\n      },\n    ],\n    [addDangerToast, favoritesFilter, props.user],\n  );\n\n  const sortTypes = [\n    {\n      desc: false,\n      id: 'dashboard_title',\n      label: t('Alphabetical'),\n      value: 'alphabetical',\n    },\n    {\n      desc: true,\n      id: 'changed_on_delta_humanized',\n      label: t('Recently modified'),\n      value: 'recently_modified',\n    },\n    {\n      desc: false,\n      id: 'changed_on_delta_humanized',\n      label: t('Least recently modified'),\n      value: 'least_recently_modified',\n    },\n  ];\n\n  const renderCard = useCallback(\n    (dashboard: Dashboard) => (\n      <DashboardCard\n        dashboard={dashboard}\n        hasPerm={hasPerm}\n        bulkSelectEnabled={bulkSelectEnabled}\n        refreshData={refreshData}\n        showThumbnails={\n          userKey\n            ? userKey.thumbnails\n            : isFeatureEnabled(FeatureFlag.THUMBNAILS)\n        }\n        userId={userId}\n        loading={loading}\n        addDangerToast={addDangerToast}\n        addSuccessToast={addSuccessToast}\n        openDashboardEditModal={openDashboardEditModal}\n        saveFavoriteStatus={saveFavoriteStatus}\n        favoriteStatus={favoriteStatus[dashboard.id]}\n        handleBulkDashboardExport={handleBulkDashboardExport}\n      />\n    ),\n    [\n      addDangerToast,\n      addSuccessToast,\n      bulkSelectEnabled,\n      favoriteStatus,\n      hasPerm,\n      loading,\n      userId,\n      refreshData,\n      saveFavoriteStatus,\n      userKey,\n    ],\n  );\n\n  const subMenuButtons: SubMenuProps['buttons'] = [];\n  if (canDelete || canExport) {\n    subMenuButtons.push({\n      name: t('Bulk select'),\n      buttonStyle: 'secondary',\n      'data-test': 'bulk-select',\n      onClick: toggleBulkSelect,\n    });\n  }\n  if (canCreate) {\n    subMenuButtons.push({\n      name: (\n        <>\n          <i className=\"fa fa-plus\" /> {t('Dashboard')}\n        </>\n      ),\n      buttonStyle: 'primary',\n      onClick: () => {\n        window.location.assign('/dashboard/new');\n      },\n    });\n\n    if (isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT)) {\n      subMenuButtons.push({\n        name: (\n          <Tooltip\n            id=\"import-tooltip\"\n            title={t('Import dashboards')}\n            placement=\"bottomRight\"\n          >\n            <Icons.Import data-test=\"import-button\" />\n          </Tooltip>\n        ),\n        buttonStyle: 'link',\n        onClick: openDashboardImportModal,\n      });\n    }\n  }\n  return (\n    <>\n      <SubMenu name={t('Dashboards')} buttons={subMenuButtons} />\n      <ConfirmStatusChange\n        title={t('Please confirm')}\n        description={t(\n          'Are you sure you want to delete the selected dashboards?',\n        )}\n        onConfirm={handleBulkDashboardDelete}\n      >\n        {confirmDelete => {\n          const bulkActions: ListViewProps['bulkActions'] = [];\n          if (canDelete) {\n            bulkActions.push({\n              key: 'delete',\n              name: t('Delete'),\n              type: 'danger',\n              onSelect: confirmDelete,\n            });\n          }\n          if (canExport) {\n            bulkActions.push({\n              key: 'export',\n              name: t('Export'),\n              type: 'primary',\n              onSelect: handleBulkDashboardExport,\n            });\n          }\n          return (\n            <>\n              {dashboardToEdit && (\n                <PropertiesModal\n                  dashboardId={dashboardToEdit.id}\n                  show\n                  onHide={() => setDashboardToEdit(null)}\n                  onSubmit={handleDashboardEdit}\n                />\n              )}\n              <ListView<Dashboard>\n                bulkActions={bulkActions}\n                bulkSelectEnabled={bulkSelectEnabled}\n                cardSortSelectOptions={sortTypes}\n                className=\"dashboard-list-view\"\n                columns={columns}\n                count={dashboardCount}\n                data={dashboards}\n                disableBulkSelect={toggleBulkSelect}\n                fetchData={fetchData}\n                filters={filters}\n                initialSort={initialSort}\n                loading={loading}\n                pageSize={PAGE_SIZE}\n                showThumbnails={\n                  userKey\n                    ? userKey.thumbnails\n                    : isFeatureEnabled(FeatureFlag.THUMBNAILS)\n                }\n                renderCard={renderCard}\n                defaultViewMode={\n                  isFeatureEnabled(FeatureFlag.LISTVIEWS_DEFAULT_CARD_VIEW)\n                    ? 'card'\n                    : 'table'\n                }\n              />\n            </>\n          );\n        }}\n      </ConfirmStatusChange>\n\n      <ImportModelsModal\n        resourceName=\"dashboard\"\n        resourceLabel={t('dashboard')}\n        passwordsNeededMessage={PASSWORDS_NEEDED_MESSAGE}\n        confirmOverwriteMessage={CONFIRM_OVERWRITE_MESSAGE}\n        addDangerToast={addDangerToast}\n        addSuccessToast={addSuccessToast}\n        onModelImport={handleDashboardImport}\n        show={importingDashboard}\n        onHide={closeDashboardImportModal}\n        passwordFields={passwordFields}\n        setPasswordFields={setPasswordFields}\n      />\n\n      {preparingExport && <Loading />}\n    </>\n  );\n}\n\nexport default withToasts(DashboardList);\n"],"names":["supersetTextDocs","DOCUMENTATION_LINK","support","errorMessage","showDbInstallInstructions","Alert","closable","css","theme","colors","warning","light1","gridUnit","dark2","typography","sizes","s","l","antdWarningAlertStyles","type","showIcon","message","description","t","href","target","rel","className","HelperMessage","style","grayscale","base","StyledInputContainer","light2","resourceName","resourceLabel","passwordsNeededMessage","confirmOverwriteMessage","onModelImport","show","onHide","passwordFields","setPasswordFields","isHidden","setIsHidden","useState","passwords","setPasswords","needsOverwriteConfirm","setNeedsOverwriteConfirm","confirmedOverwrite","setConfirmedOverwrite","fileList","setFileList","importingModel","setImportingModel","setErrorMessage","clearModal","state","alreadyExists","passwordsNeeded","importResource","msg","useEffect","length","Modal","name","disablePrimaryButton","onHandledPrimaryAction","originFileObj","File","then","result","primaryButtonName","primaryButtonType","width","title","id","accept","onChange","info","file","status","onRemove","removedFile","filter","uid","customRequest","disabled","Button","loading","map","fileName","key","autoComplete","value","event","targetValue","currentTarget","toUpperCase","DashboardStatus","PASSWORDS_NEEDED_MESSAGE","CONFIRM_OVERWRITE_MESSAGE","Actions","withToasts","props","addDangerToast","addSuccessToast","user","userId","resourceCount","dashboardCount","resourceCollection","dashboards","bulkSelectEnabled","setResourceCollection","setDashboards","hasPerm","fetchData","toggleBulkSelect","refreshData","dashboardIds","useMemo","d","saveFavoriteStatus","favoriteStatus","dashboardToEdit","setDashboardToEdit","importingDashboard","showImportModal","preparingExport","setPreparingExport","userKey","toString","canCreate","canEdit","canDelete","canExport","initialSort","desc","openDashboardEditModal","dashboard","handleDashboardEdit","edits","SupersetClient","endpoint","json","changed_by_name","changed_by_url","changed_by","dashboard_title","slug","json_metadata","changed_on_delta_humanized","url","certified_by","certification_details","errMsg","handleBulkDashboardExport","dashboardsToExport","ids","columns","Cell","row","original","FaveStar","itemId","saveFaveStar","isStarred","Header","disableSortBy","size","hidden","dashboardTitle","certifiedBy","certificationDetails","to","CertifiedBadge","details","accessor","changedByName","changedByUrl","PUBLISHED","changedOn","created_by","createdBy","first_name","last_name","owners","FacePile","users","ConfirmStatusChange","onConfirm","confirmDelete","Tooltip","placement","role","tabIndex","onClick","Icons","favoritesFilter","urlDisplay","input","operator","unfilteredLabel","selects","label","filters","fetchSelects","paginate","sortTypes","renderCard","useCallback","DashboardCard","showThumbnails","thumbnails","subMenuButtons","push","buttonStyle","window","location","assign","SubMenu","buttons","dashboardsToDelete","bulkActions","onSelect","PropertiesModal","dashboardId","onSubmit","ListView","cardSortSelectOptions","count","data","disableBulkSelect","pageSize","defaultViewMode","Loading"],"sourceRoot":""}