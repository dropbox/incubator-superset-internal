{"version":3,"file":"bffd99140052d0d27b12.chunk.js","mappings":"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","sources":["webpack://superset/./src/views/CRUD/data/query/QueryPreviewModal.tsx","webpack://superset/./src/views/CRUD/data/query/QueryList.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport { styled, t } from '@superset-ui/core';\nimport Modal from 'src/components/Modal';\nimport cx from 'classnames';\nimport Button from 'src/components/Button';\nimport withToasts, {\n  ToastProps,\n} from 'src/components/MessageToasts/withToasts';\nimport SyntaxHighlighterCopy from 'src/views/CRUD/data/components/SyntaxHighlighterCopy';\nimport { useQueryPreviewState } from 'src/views/CRUD/data/hooks';\nimport { QueryObject } from 'src/views/CRUD/types';\n\nconst QueryTitle = styled.div`\n  color: ${({ theme }) => theme.colors.secondary.light2};\n  font-size: ${({ theme }) => theme.typography.sizes.s}px;\n  margin-bottom: 0;\n  text-transform: uppercase;\n`;\n\nconst QueryLabel = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.dark2};\n  font-size: ${({ theme }) => theme.typography.sizes.m}px;\n  padding: 4px 0 24px 0;\n`;\n\nconst QueryViewToggle = styled.div`\n  margin: 0 0 ${({ theme }) => theme.gridUnit * 6}px 0;\n`;\n\nconst TabButton = styled.div`\n  display: inline;\n  font-size: ${({ theme }) => theme.typography.sizes.s}px;\n  padding: ${({ theme }) => theme.gridUnit * 2}px\n    ${({ theme }) => theme.gridUnit * 4}px;\n  margin-right: ${({ theme }) => theme.gridUnit * 4}px;\n  color: ${({ theme }) => theme.colors.secondary.dark1};\n\n  &.active,\n  &:focus,\n  &:hover {\n    background: ${({ theme }) => theme.colors.secondary.light4};\n    border-bottom: none;\n    border-radius: ${({ theme }) => theme.borderRadius}px;\n    margin-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n  }\n\n  &:hover:not(.active) {\n    background: ${({ theme }) => theme.colors.secondary.light5};\n  }\n`;\nconst StyledModal = styled(Modal)`\n  .ant-modal-body {\n    padding: ${({ theme }) => theme.gridUnit * 6}px;\n  }\n\n  pre {\n    font-size: ${({ theme }) => theme.typography.sizes.xs}px;\n    font-weight: ${({ theme }) => theme.typography.weights.normal};\n    line-height: ${({ theme }) => theme.typography.sizes.l}px;\n    height: 375px;\n    border: none;\n  }\n`;\n\ninterface QueryPreviewModalProps extends ToastProps {\n  onHide: () => void;\n  openInSqlLab: (id: number) => any;\n  queries: QueryObject[];\n  query: QueryObject;\n  fetchData: (id: number) => any;\n  show: boolean;\n}\n\nfunction QueryPreviewModal({\n  onHide,\n  openInSqlLab,\n  queries,\n  query,\n  fetchData,\n  show,\n  addDangerToast,\n  addSuccessToast,\n}: QueryPreviewModalProps) {\n  const { handleKeyPress, handleDataChange, disablePrevious, disableNext } =\n    useQueryPreviewState<QueryObject>({\n      queries,\n      currentQueryId: query.id,\n      fetchData,\n    });\n\n  const [currentTab, setCurrentTab] = useState<'user' | 'executed'>('user');\n\n  const { id, sql, executed_sql } = query;\n  return (\n    <div role=\"none\" onKeyUp={handleKeyPress}>\n      <StyledModal\n        onHide={onHide}\n        show={show}\n        title={t('Query preview')}\n        footer={[\n          <Button\n            data-test=\"previous-query\"\n            key=\"previous-query\"\n            disabled={disablePrevious}\n            onClick={() => handleDataChange(true)}\n          >\n            {t('Previous')}\n          </Button>,\n          <Button\n            data-test=\"next-query\"\n            key=\"next-query\"\n            disabled={disableNext}\n            onClick={() => handleDataChange(false)}\n          >\n            {t('Next')}\n          </Button>,\n          <Button\n            data-test=\"open-in-sql-lab\"\n            key=\"open-in-sql-lab\"\n            buttonStyle=\"primary\"\n            onClick={() => openInSqlLab(id)}\n          >\n            {t('Open in SQL Lab')}\n          </Button>,\n        ]}\n      >\n        <QueryTitle>{t('Tab name')}</QueryTitle>\n        <QueryLabel>{query.tab_name}</QueryLabel>\n        <QueryViewToggle>\n          <TabButton\n            role=\"button\"\n            data-test=\"toggle-user-sql\"\n            className={cx({ active: currentTab === 'user' })}\n            onClick={() => setCurrentTab('user')}\n          >\n            {t('User query')}\n          </TabButton>\n          <TabButton\n            role=\"button\"\n            data-test=\"toggle-executed-sql\"\n            className={cx({ active: currentTab === 'executed' })}\n            onClick={() => setCurrentTab('executed')}\n          >\n            {t('Executed query')}\n          </TabButton>\n        </QueryViewToggle>\n        <SyntaxHighlighterCopy\n          addDangerToast={addDangerToast}\n          addSuccessToast={addSuccessToast}\n          language=\"sql\"\n        >\n          {(currentTab === 'user' ? sql : executed_sql) || ''}\n        </SyntaxHighlighterCopy>\n      </StyledModal>\n    </div>\n  );\n}\n\nexport default withToasts(QueryPreviewModal);\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useMemo, useState, useCallback, ReactElement } from 'react';\nimport { SupersetClient, t, styled, useTheme } from '@superset-ui/core';\nimport moment from 'moment';\nimport {\n  createFetchRelated,\n  createFetchDistinct,\n  createErrorHandler,\n  shortenSQL,\n} from 'src/views/CRUD/utils';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { useListViewResource } from 'src/views/CRUD/hooks';\nimport SubMenu, { SubMenuProps } from 'src/views/components/SubMenu';\nimport Popover from 'src/components/Popover';\nimport { commonMenuData } from 'src/views/CRUD/data/common';\nimport ListView, {\n  Filters,\n  FilterOperator,\n  ListViewProps,\n} from 'src/components/ListView';\nimport { Tooltip } from 'src/components/Tooltip';\nimport SyntaxHighlighter from 'react-syntax-highlighter/dist/cjs/light';\nimport sql from 'react-syntax-highlighter/dist/cjs/languages/hljs/sql';\nimport github from 'react-syntax-highlighter/dist/cjs/styles/hljs/github';\nimport { DATETIME_WITH_TIME_ZONE, TIME_WITH_MS } from 'src/constants';\nimport { QueryObject, QueryObjectColumns } from 'src/views/CRUD/types';\n\nimport Icons from 'src/components/Icons';\nimport QueryPreviewModal from './QueryPreviewModal';\n\nconst PAGE_SIZE = 25;\nconst SQL_PREVIEW_MAX_LINES = 4;\n\nconst TopAlignedListView = styled(ListView)<ListViewProps<QueryObject>>`\n  table .table-cell {\n    vertical-align: top;\n  }\n`;\n\nSyntaxHighlighter.registerLanguage('sql', sql);\nconst StyledSyntaxHighlighter = styled(SyntaxHighlighter)`\n  height: ${({ theme }) => theme.gridUnit * 26}px;\n  overflow: hidden !important; /* needed to override inline styles */\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\ninterface QueryListProps {\n  addDangerToast: (msg: string, config?: any) => any;\n  addSuccessToast: (msg: string, config?: any) => any;\n}\n\nconst StyledTableLabel = styled.div`\n  .count {\n    margin-left: 5px;\n    color: ${({ theme }) => theme.colors.primary.base};\n    text-decoration: underline;\n    cursor: pointer;\n  }\n`;\n\nconst StyledPopoverItem = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.dark2};\n`;\n\nfunction QueryList({ addDangerToast }: QueryListProps) {\n  const {\n    state: { loading, resourceCount: queryCount, resourceCollection: queries },\n    fetchData,\n  } = useListViewResource<QueryObject>(\n    'query',\n    t('Query history'),\n    addDangerToast,\n    false,\n  );\n\n  const [queryCurrentlyPreviewing, setQueryCurrentlyPreviewing] =\n    useState<QueryObject>();\n\n  const theme = useTheme();\n\n  const handleQueryPreview = useCallback(\n    (id: number) => {\n      SupersetClient.get({\n        endpoint: `/api/v1/query/${id}`,\n      }).then(\n        ({ json = {} }) => {\n          setQueryCurrentlyPreviewing({ ...json.result });\n        },\n        createErrorHandler(errMsg =>\n          addDangerToast(\n            t('There was an issue previewing the selected query. %s', errMsg),\n          ),\n        ),\n      );\n    },\n    [addDangerToast],\n  );\n\n  const menuData: SubMenuProps = {\n    activeChild: 'Query history',\n    ...commonMenuData,\n  };\n\n  const initialSort = [{ id: QueryObjectColumns.start_time, desc: true }];\n  const columns = useMemo(\n    () => [\n      {\n        Cell: ({\n          row: {\n            original: { status },\n          },\n        }: any) => {\n          const statusConfig: {\n            name: ReactElement | null;\n            label: string;\n          } = {\n            name: null,\n            label: '',\n          };\n          if (status === 'success') {\n            statusConfig.name = (\n              <Icons.Check iconColor={theme.colors.success.base} />\n            );\n            statusConfig.label = t('Success');\n          } else if (status === 'failed' || status === 'stopped') {\n            statusConfig.name = (\n              <Icons.XSmall\n                iconColor={\n                  status === 'failed'\n                    ? theme.colors.error.base\n                    : theme.colors.grayscale.base\n                }\n              />\n            );\n            statusConfig.label = t('Failed');\n          } else if (status === 'running') {\n            statusConfig.name = (\n              <Icons.Running iconColor={theme.colors.primary.base} />\n            );\n            statusConfig.label = t('Running');\n          } else if (status === 'timed_out') {\n            statusConfig.name = (\n              <Icons.Offline iconColor={theme.colors.grayscale.light1} />\n            );\n            statusConfig.label = t('Offline');\n          } else if (status === 'scheduled' || status === 'pending') {\n            statusConfig.name = (\n              <Icons.Queued iconColor={theme.colors.grayscale.base} />\n            );\n            statusConfig.label = t('Scheduled');\n          }\n          return (\n            <Tooltip title={statusConfig.label} placement=\"bottom\">\n              <span>{statusConfig.name}</span>\n            </Tooltip>\n          );\n        },\n        accessor: QueryObjectColumns.status,\n        size: 'xs',\n        disableSortBy: true,\n      },\n      {\n        accessor: QueryObjectColumns.start_time,\n        Header: t('Time'),\n        size: 'xl',\n        Cell: ({\n          row: {\n            original: { start_time, end_time },\n          },\n        }: any) => {\n          const startMoment = moment.utc(start_time).local();\n          const formattedStartTimeData = startMoment\n            .format(DATETIME_WITH_TIME_ZONE)\n            .split(' ');\n\n          const formattedStartTime = (\n            <>\n              {formattedStartTimeData[0]} <br />\n              {formattedStartTimeData[1]}\n            </>\n          );\n\n          return end_time ? (\n            <Tooltip\n              title={t(\n                'Duration: %s',\n                moment(moment.utc(end_time - start_time)).format(TIME_WITH_MS),\n              )}\n              placement=\"bottom\"\n            >\n              <span>{formattedStartTime}</span>\n            </Tooltip>\n          ) : (\n            formattedStartTime\n          );\n        },\n      },\n      {\n        accessor: QueryObjectColumns.tab_name,\n        Header: t('Tab name'),\n        size: 'xl',\n      },\n      {\n        accessor: QueryObjectColumns.database_name,\n        Header: t('Database'),\n        size: 'xl',\n      },\n      {\n        accessor: QueryObjectColumns.database,\n        hidden: true,\n      },\n      {\n        accessor: QueryObjectColumns.schema,\n        Header: t('Schema'),\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { sql_tables: tables = [] },\n          },\n        }: any) => {\n          const names = tables.map((table: any) => table.table);\n          const main = names.length > 0 ? names.shift() : '';\n\n          if (names.length) {\n            return (\n              <StyledTableLabel>\n                <span>{main}</span>\n                <Popover\n                  placement=\"right\"\n                  title={t('TABLES')}\n                  trigger=\"click\"\n                  content={\n                    <>\n                      {names.map((name: string) => (\n                        <StyledPopoverItem key={name}>{name}</StyledPopoverItem>\n                      ))}\n                    </>\n                  }\n                >\n                  <span className=\"count\">(+{names.length})</span>\n                </Popover>\n              </StyledTableLabel>\n            );\n          }\n\n          return main;\n        },\n        accessor: QueryObjectColumns.sql_tables,\n        Header: t('Tables'),\n        size: 'xl',\n        disableSortBy: true,\n      },\n      {\n        accessor: QueryObjectColumns.user_first_name,\n        Header: t('User'),\n        size: 'xl',\n        Cell: ({\n          row: {\n            original: { user },\n          },\n        }: any) => (user ? `${user.first_name} ${user.last_name}` : ''),\n      },\n      {\n        accessor: QueryObjectColumns.user,\n        hidden: true,\n      },\n      {\n        accessor: QueryObjectColumns.rows,\n        Header: t('Rows'),\n        size: 'md',\n      },\n      {\n        accessor: QueryObjectColumns.sql,\n        Header: t('SQL'),\n        Cell: ({ row: { original, id } }: any) => (\n          <div\n            tabIndex={0}\n            role=\"button\"\n            data-test={`open-sql-preview-${id}`}\n            onClick={() => setQueryCurrentlyPreviewing(original)}\n          >\n            <StyledSyntaxHighlighter language=\"sql\" style={github}>\n              {shortenSQL(original.sql, SQL_PREVIEW_MAX_LINES)}\n            </StyledSyntaxHighlighter>\n          </div>\n        ),\n      },\n      {\n        Header: t('Actions'),\n        id: 'actions',\n        disableSortBy: true,\n        Cell: ({\n          row: {\n            original: { id },\n          },\n        }: any) => (\n          <Tooltip title={t('Open query in SQL Lab')} placement=\"bottom\">\n            <a href={`/superset/sqllab?queryId=${id}`}>\n              <Icons.Full iconColor={theme.colors.grayscale.base} />\n            </a>\n          </Tooltip>\n        ),\n      },\n    ],\n    [],\n  );\n\n  const filters: Filters = useMemo(\n    () => [\n      {\n        Header: t('Database'),\n        id: 'database',\n        input: 'select',\n        operator: FilterOperator.relationOneMany,\n        unfilteredLabel: 'All',\n        fetchSelects: createFetchRelated(\n          'query',\n          'database',\n          createErrorHandler(errMsg =>\n            addDangerToast(\n              t('An error occurred while fetching database values: %s', errMsg),\n            ),\n          ),\n        ),\n        paginate: true,\n      },\n      {\n        Header: t('State'),\n        id: 'status',\n        input: 'select',\n        operator: FilterOperator.equals,\n        unfilteredLabel: 'All',\n        fetchSelects: createFetchDistinct(\n          'query',\n          'status',\n          createErrorHandler(errMsg =>\n            addDangerToast(\n              t('An error occurred while fetching schema values: %s', errMsg),\n            ),\n          ),\n        ),\n        paginate: true,\n      },\n      {\n        Header: t('User'),\n        id: 'user',\n        input: 'select',\n        operator: FilterOperator.relationOneMany,\n        unfilteredLabel: 'All',\n        fetchSelects: createFetchRelated(\n          'query',\n          'user',\n          createErrorHandler(errMsg =>\n            addDangerToast(\n              t('An error occurred while fetching user values: %s', errMsg),\n            ),\n          ),\n        ),\n        paginate: true,\n      },\n      {\n        Header: t('Time range'),\n        id: 'start_time',\n        input: 'datetime_range',\n        operator: FilterOperator.between,\n      },\n      {\n        Header: t('Search by query text'),\n        id: 'sql',\n        input: 'search',\n        operator: FilterOperator.contains,\n      },\n    ],\n    [addDangerToast],\n  );\n\n  return (\n    <>\n      <SubMenu {...menuData} />\n      {queryCurrentlyPreviewing && (\n        <QueryPreviewModal\n          onHide={() => setQueryCurrentlyPreviewing(undefined)}\n          query={queryCurrentlyPreviewing}\n          queries={queries}\n          fetchData={handleQueryPreview}\n          openInSqlLab={(id: number) =>\n            window.location.assign(`/superset/sqllab?queryId=${id}`)\n          }\n          show\n        />\n      )}\n      <TopAlignedListView\n        className=\"query-history-list-view\"\n        columns={columns}\n        count={queryCount}\n        data={queries}\n        fetchData={fetchData}\n        filters={filters}\n        initialSort={initialSort}\n        loading={loading}\n        pageSize={PAGE_SIZE}\n        highlightRowId={queryCurrentlyPreviewing?.id}\n      />\n    </>\n  );\n}\n\nexport default withToasts(QueryList);\n"],"names":["QueryTitle","style","theme","colors","secondary","light2","typography","sizes","s","QueryLabel","grayscale","dark2","m","QueryViewToggle","gridUnit","TabButton","dark1","light4","borderRadius","light5","StyledModal","Modal","xs","weights","normal","l","withToasts","onHide","openInSqlLab","queries","query","fetchData","show","addDangerToast","addSuccessToast","handleKeyPress","handleDataChange","disablePrevious","disableNext","currentQueryId","id","currentTab","setCurrentTab","useState","sql","executed_sql","role","onKeyUp","title","t","footer","Button","key","disabled","onClick","buttonStyle","tab_name","className","active","SyntaxHighlighterCopy","language","TopAlignedListView","ListView","StyledSyntaxHighlighter","StyledTableLabel","primary","base","StyledPopoverItem","state","loading","resourceCount","queryCount","resourceCollection","queryCurrentlyPreviewing","setQueryCurrentlyPreviewing","handleQueryPreview","useCallback","SupersetClient","endpoint","then","json","result","errMsg","menuData","activeChild","common","initialSort","desc","columns","useMemo","Cell","row","original","status","statusConfig","name","label","Icons","iconColor","success","error","light1","Tooltip","placement","accessor","size","disableSortBy","Header","start_time","end_time","formattedStartTimeData","local","format","split","formattedStartTime","hidden","sql_tables","tables","names","map","table","main","length","shift","Popover","trigger","content","user","first_name","last_name","tabIndex","github","href","filters","input","operator","unfilteredLabel","fetchSelects","paginate","SubMenu","undefined","window","location","assign","count","data","pageSize","highlightRowId"],"sourceRoot":""}