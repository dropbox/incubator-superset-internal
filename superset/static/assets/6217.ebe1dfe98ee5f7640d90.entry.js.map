{"version":3,"file":"6217.ebe1dfe98ee5f7640d90.entry.js","mappings":"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","sources":["webpack://superset/./src/components/Badge/index.tsx","webpack://superset/./src/components/DatabaseSelector/index.tsx","webpack://superset/./src/components/RefreshLabel/index.tsx","webpack://superset/./src/components/TableSelector/index.tsx","webpack://superset/./src/hooks/apiResources/charts.ts","webpack://superset/./src/hooks/apiResources/dashboards.ts","webpack://superset/./src/hooks/apiResources/queryValidations.ts","webpack://superset/./src/hooks/apiResources/schemas.ts","webpack://superset/./src/hooks/apiResources/tables.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { styled } from '@superset-ui/core';\nimport { Badge as AntdBadge } from 'antd';\nimport { BadgeProps as AntdBadgeProps } from 'antd/lib/badge';\n\nexport interface BadgeProps extends AntdBadgeProps {\n  textColor?: string;\n}\n\nconst Badge = styled(\n  (\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    { textColor, color, text, ...props }: BadgeProps,\n  ) => <AntdBadge text={text} color={text ? color : undefined} {...props} />,\n)`\n  & > sup {\n    padding: 0 ${({ theme }) => theme.gridUnit * 2}px;\n    background: ${({ theme, color }) => color || theme.colors.primary.base};\n    color: ${({ theme, textColor }) =>\n      textColor || theme.colors.grayscale.light5};\n  }\n`;\n\nexport default Badge;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { ReactNode, useState, useMemo, useEffect } from 'react';\nimport { styled, SupersetClient, t } from '@superset-ui/core';\nimport rison from 'rison';\nimport { AsyncSelect, Select } from 'src/components';\nimport Label from 'src/components/Label';\nimport { FormLabel } from 'src/components/Form';\nimport RefreshLabel from 'src/components/RefreshLabel';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\nimport { useSchemas, SchemaOption } from 'src/hooks/apiResources';\n\nconst DatabaseSelectorWrapper = styled.div`\n  ${({ theme }) => `\n    .refresh {\n      display: flex;\n      align-items: center;\n      width: 30px;\n      margin-left: ${theme.gridUnit}px;\n      margin-top: ${theme.gridUnit * 5}px;\n    }\n\n    .section {\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n    }\n\n    .select {\n      width: calc(100% - 30px - ${theme.gridUnit}px);\n      flex: 1;\n    }\n\n    & > div {\n      margin-bottom: ${theme.gridUnit * 4}px;\n    }\n  `}\n`;\n\nconst LabelStyle = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  margin-left: ${({ theme }) => theme.gridUnit - 2}px;\n\n  .backend {\n    overflow: visible;\n  }\n\n  .name {\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n`;\n\ntype DatabaseValue = {\n  label: React.ReactNode;\n  value: number;\n  id: number;\n  database_name: string;\n  backend: string;\n};\n\nexport type DatabaseObject = {\n  id: number;\n  database_name: string;\n  backend: string;\n};\n\nexport interface DatabaseSelectorProps {\n  db?: DatabaseObject | null;\n  emptyState?: ReactNode;\n  formMode?: boolean;\n  getDbList?: (arg0: any) => void;\n  handleError: (msg: string) => void;\n  isDatabaseSelectEnabled?: boolean;\n  onDbChange?: (db: DatabaseObject) => void;\n  onEmptyResults?: (searchText?: string) => void;\n  onSchemaChange?: (schema?: string) => void;\n  readOnly?: boolean;\n  schema?: string;\n  sqlLabMode?: boolean;\n}\n\nconst SelectLabel = ({\n  backend,\n  databaseName,\n}: {\n  backend: string;\n  databaseName: string;\n}) => (\n  <LabelStyle>\n    <Label className=\"backend\">{backend}</Label>\n    <span className=\"name\" title={databaseName}>\n      {databaseName}\n    </span>\n  </LabelStyle>\n);\n\nconst EMPTY_SCHEMA_OPTIONS: SchemaOption[] = [];\n\nexport default function DatabaseSelector({\n  db,\n  formMode = false,\n  emptyState,\n  getDbList,\n  handleError,\n  isDatabaseSelectEnabled = true,\n  onDbChange,\n  onEmptyResults,\n  onSchemaChange,\n  readOnly = false,\n  schema,\n  sqlLabMode = false,\n}: DatabaseSelectorProps) {\n  const [currentDb, setCurrentDb] = useState<DatabaseValue | undefined>();\n  const [currentSchema, setCurrentSchema] = useState<SchemaOption | undefined>(\n    schema ? { label: schema, value: schema, title: schema } : undefined,\n  );\n  const { addSuccessToast } = useToasts();\n\n  const loadDatabases = useMemo(\n    () =>\n      async (\n        search: string,\n        page: number,\n        pageSize: number,\n      ): Promise<{\n        data: DatabaseValue[];\n        totalCount: number;\n      }> => {\n        const queryParams = rison.encode({\n          order_columns: 'database_name',\n          order_direction: 'asc',\n          page,\n          page_size: pageSize,\n          ...(formMode || !sqlLabMode\n            ? { filters: [{ col: 'database_name', opr: 'ct', value: search }] }\n            : {\n                filters: [\n                  { col: 'database_name', opr: 'ct', value: search },\n                  {\n                    col: 'expose_in_sqllab',\n                    opr: 'eq',\n                    value: true,\n                  },\n                ],\n              }),\n        });\n        const endpoint = `/api/v1/database/?q=${queryParams}`;\n        return SupersetClient.get({ endpoint }).then(({ json }) => {\n          const { result } = json;\n          if (getDbList) {\n            getDbList(result);\n          }\n          if (result.length === 0) {\n            if (onEmptyResults) onEmptyResults(search);\n          }\n          const options = result.map((row: DatabaseObject) => ({\n            label: (\n              <SelectLabel\n                backend={row.backend}\n                databaseName={row.database_name}\n              />\n            ),\n            value: row.id,\n            id: row.id,\n            database_name: row.database_name,\n            backend: row.backend,\n          }));\n\n          return {\n            data: options,\n            totalCount: options.length,\n          };\n        });\n      },\n    [formMode, getDbList, sqlLabMode],\n  );\n\n  useEffect(() => {\n    setCurrentDb(current =>\n      current?.id !== db?.id\n        ? db\n          ? {\n              label: (\n                <SelectLabel\n                  backend={db.backend}\n                  databaseName={db.database_name}\n                />\n              ),\n              value: db.id,\n              ...db,\n            }\n          : undefined\n        : current,\n    );\n  }, [db]);\n\n  function changeSchema(schema: SchemaOption | undefined) {\n    setCurrentSchema(schema);\n    if (onSchemaChange) {\n      onSchemaChange(schema?.value);\n    }\n  }\n\n  const {\n    data,\n    isFetching: loadingSchemas,\n    refetch,\n  } = useSchemas({\n    dbId: currentDb?.value,\n    onSuccess: (schemas, isFetched) => {\n      if (schemas.length === 1) {\n        changeSchema(schemas[0]);\n      } else if (!schemas.find(schemaOption => schema === schemaOption.value)) {\n        changeSchema(undefined);\n      }\n\n      if (isFetched) {\n        addSuccessToast('List refreshed');\n      }\n    },\n    onError: () => handleError(t('There was an error loading the schemas')),\n  });\n\n  const schemaOptions = data || EMPTY_SCHEMA_OPTIONS;\n\n  function changeDataBase(\n    value: { label: string; value: number },\n    database: DatabaseValue,\n  ) {\n    setCurrentDb(database);\n    setCurrentSchema(undefined);\n    if (onDbChange) {\n      onDbChange(database);\n    }\n    if (onSchemaChange) {\n      onSchemaChange(undefined);\n    }\n  }\n\n  function renderSelectRow(select: ReactNode, refreshBtn: ReactNode) {\n    return (\n      <div className=\"section\">\n        <span className=\"select\">{select}</span>\n        <span className=\"refresh\">{refreshBtn}</span>\n      </div>\n    );\n  }\n\n  function renderDatabaseSelect() {\n    return renderSelectRow(\n      <AsyncSelect\n        ariaLabel={t('Select database or type to search databases')}\n        optionFilterProps={['database_name', 'value']}\n        data-test=\"select-database\"\n        header={<FormLabel>{t('Database')}</FormLabel>}\n        lazyLoading={false}\n        notFoundContent={emptyState}\n        onChange={changeDataBase}\n        value={currentDb}\n        placeholder={t('Select database or type to search databases')}\n        disabled={!isDatabaseSelectEnabled || readOnly}\n        options={loadDatabases}\n      />,\n      null,\n    );\n  }\n\n  function renderSchemaSelect() {\n    const refreshIcon = !readOnly && (\n      <RefreshLabel\n        onClick={() => refetch()}\n        tooltipContent={t('Force refresh schema list')}\n      />\n    );\n    return renderSelectRow(\n      <Select\n        ariaLabel={t('Select schema or type to search schemas')}\n        disabled={!currentDb || readOnly}\n        header={<FormLabel>{t('Schema')}</FormLabel>}\n        labelInValue\n        loading={loadingSchemas}\n        name=\"select-schema\"\n        notFoundContent={t('No compatible schema found')}\n        placeholder={t('Select schema or type to search schemas')}\n        onChange={item => changeSchema(item as SchemaOption)}\n        options={schemaOptions}\n        showSearch\n        value={currentSchema}\n      />,\n      refreshIcon,\n    );\n  }\n\n  return (\n    <DatabaseSelectorWrapper data-test=\"DatabaseSelector\">\n      {renderDatabaseSelect()}\n      {renderSchemaSelect()}\n    </DatabaseSelectorWrapper>\n  );\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { MouseEventHandler, forwardRef } from 'react';\nimport { SupersetTheme } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons, { IconType } from 'src/components/Icons';\n\nexport interface RefreshLabelProps {\n  onClick: MouseEventHandler<HTMLSpanElement>;\n  tooltipContent: string;\n}\n\nconst RefreshLabel = ({ onClick, tooltipContent }: RefreshLabelProps) => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const IconWithoutRef = forwardRef((props: IconType, ref: any) => (\n    <Icons.Refresh {...props} />\n  ));\n\n  return (\n    <Tooltip title={tooltipContent}>\n      <IconWithoutRef\n        role=\"button\"\n        onClick={onClick}\n        css={(theme: SupersetTheme) => ({\n          cursor: 'pointer',\n          color: theme.colors.grayscale.base,\n          '&:hover': { color: theme.colors.primary.base },\n        })}\n      />\n    </Tooltip>\n  );\n};\n\nexport default RefreshLabel;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, {\n  FunctionComponent,\n  useState,\n  ReactNode,\n  useMemo,\n  useEffect,\n} from 'react';\nimport { SelectValue } from 'antd/lib/select';\n\nimport { styled, t } from '@superset-ui/core';\nimport { Select } from 'src/components';\nimport { FormLabel } from 'src/components/Form';\nimport Icons from 'src/components/Icons';\nimport DatabaseSelector, {\n  DatabaseObject,\n} from 'src/components/DatabaseSelector';\nimport RefreshLabel from 'src/components/RefreshLabel';\nimport CertifiedBadge from 'src/components/CertifiedBadge';\nimport WarningIconWithTooltip from 'src/components/WarningIconWithTooltip';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\nimport { useTables, Table } from 'src/hooks/apiResources';\nimport {\n  getClientErrorMessage,\n  getClientErrorObject,\n} from 'src/utils/getClientErrorObject';\n\nconst REFRESH_WIDTH = 30;\n\nconst TableSelectorWrapper = styled.div`\n  ${({ theme }) => `\n    .refresh {\n      display: flex;\n      align-items: center;\n      width: ${REFRESH_WIDTH}px;\n      margin-left: ${theme.gridUnit}px;\n      margin-top: ${theme.gridUnit * 5}px;\n    }\n\n    .section {\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n    }\n\n    .divider {\n      border-bottom: 1px solid ${theme.colors.secondary.light5};\n      margin: 15px 0;\n    }\n\n    .table-length {\n      color: ${theme.colors.grayscale.light1};\n    }\n\n    .select {\n      flex: 1;\n      max-width: calc(100% - ${theme.gridUnit + REFRESH_WIDTH}px)\n    }\n  `}\n`;\n\nconst TableLabel = styled.span`\n  align-items: center;\n  display: flex;\n  white-space: nowrap;\n\n  svg,\n  small {\n    margin-right: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n\ninterface TableSelectorProps {\n  clearable?: boolean;\n  database?: DatabaseObject | null;\n  emptyState?: ReactNode;\n  formMode?: boolean;\n  getDbList?: (arg0: any) => void;\n  handleError: (msg: string) => void;\n  isDatabaseSelectEnabled?: boolean;\n  onDbChange?: (db: DatabaseObject) => void;\n  onSchemaChange?: (schema?: string) => void;\n  readOnly?: boolean;\n  schema?: string;\n  onEmptyResults?: (searchText?: string) => void;\n  sqlLabMode?: boolean;\n  tableValue?: string | string[];\n  onTableSelectChange?: (value?: string | string[], schema?: string) => void;\n  tableSelectMode?: 'single' | 'multiple';\n  customTableOptionLabelRenderer?: (table: Table) => JSX.Element;\n}\n\nexport interface TableOption {\n  label: JSX.Element;\n  text: string;\n  value: string;\n}\n\nexport const TableOption = ({ table }: { table: Table }) => {\n  const { value, type, extra } = table;\n  return (\n    <TableLabel title={value}>\n      {type === 'view' ? (\n        <Icons.Eye iconSize=\"m\" />\n      ) : (\n        <Icons.Table iconSize=\"m\" />\n      )}\n      {extra?.certification && (\n        <CertifiedBadge\n          certifiedBy={extra.certification.certified_by}\n          details={extra.certification.details}\n          size=\"l\"\n        />\n      )}\n      {extra?.warning_markdown && (\n        <WarningIconWithTooltip\n          warningMarkdown={extra.warning_markdown}\n          size=\"l\"\n          marginRight={4}\n        />\n      )}\n      {value}\n    </TableLabel>\n  );\n};\n\nfunction renderSelectRow(select: ReactNode, refreshBtn: ReactNode) {\n  return (\n    <div className=\"section\">\n      <span className=\"select\">{select}</span>\n      <span className=\"refresh\">{refreshBtn}</span>\n    </div>\n  );\n}\n\nconst TableSelector: FunctionComponent<TableSelectorProps> = ({\n  database,\n  emptyState,\n  formMode = false,\n  getDbList,\n  handleError,\n  isDatabaseSelectEnabled = true,\n  onDbChange,\n  onSchemaChange,\n  readOnly = false,\n  onEmptyResults,\n  schema,\n  sqlLabMode = true,\n  tableSelectMode = 'single',\n  tableValue = undefined,\n  onTableSelectChange,\n  customTableOptionLabelRenderer,\n}) => {\n  const { addSuccessToast } = useToasts();\n  const [currentSchema, setCurrentSchema] = useState<string | undefined>(\n    schema,\n  );\n  const [tableSelectValue, setTableSelectValue] = useState<\n    SelectValue | undefined\n  >(undefined);\n  const {\n    data,\n    isFetching: loadingTables,\n    refetch,\n  } = useTables({\n    dbId: database?.id,\n    schema: currentSchema,\n    onSuccess: (data, isFetched) => {\n      if (isFetched) {\n        addSuccessToast(t('List updated'));\n      }\n    },\n    onError: err => {\n      getClientErrorObject(err).then(clientError => {\n        handleError(\n          getClientErrorMessage(\n            t('There was an error loading the tables'),\n            clientError,\n          ),\n        );\n      });\n    },\n  });\n\n  const tableOptions = useMemo<TableOption[]>(\n    () =>\n      data\n        ? data.options.map(table => ({\n            value: table.value,\n            label: <TableOption table={table} />,\n            text: table.value,\n            ...(customTableOptionLabelRenderer && {\n              customLabel: customTableOptionLabelRenderer(table),\n            }),\n          }))\n        : [],\n    [data, customTableOptionLabelRenderer],\n  );\n\n  useEffect(() => {\n    // reset selections\n    if (database === undefined) {\n      setCurrentSchema(undefined);\n      setTableSelectValue(undefined);\n    }\n  }, [database, tableSelectMode]);\n\n  useEffect(() => {\n    if (tableSelectMode === 'single') {\n      setTableSelectValue(\n        tableOptions.find(option => option.value === tableValue),\n      );\n    } else {\n      setTableSelectValue(\n        tableOptions?.filter(\n          option => option && tableValue?.includes(option.value),\n        ) || [],\n      );\n    }\n  }, [tableOptions, tableValue, tableSelectMode]);\n\n  const internalTableChange = (\n    selectedOptions: TableOption | TableOption[] | undefined,\n  ) => {\n    if (currentSchema) {\n      onTableSelectChange?.(\n        Array.isArray(selectedOptions)\n          ? selectedOptions.map(option => option?.value)\n          : selectedOptions?.value,\n        currentSchema,\n      );\n    } else {\n      setTableSelectValue(selectedOptions);\n    }\n  };\n\n  const internalDbChange = (db: DatabaseObject) => {\n    if (onDbChange) {\n      onDbChange(db);\n    }\n  };\n\n  const internalSchemaChange = (schema?: string) => {\n    setCurrentSchema(schema);\n    if (onSchemaChange) {\n      onSchemaChange(schema);\n    }\n\n    const value = tableSelectMode === 'single' ? undefined : [];\n    internalTableChange(value);\n  };\n\n  const handleFilterOption = useMemo(\n    () => (search: string, option: TableOption) => {\n      const searchValue = search.trim().toLowerCase();\n      const { value } = option;\n      return value.toLowerCase().includes(searchValue);\n    },\n    [],\n  );\n\n  function renderTableSelect() {\n    const disabled = (currentSchema && !formMode && readOnly) || !currentSchema;\n\n    const header = sqlLabMode ? (\n      <FormLabel>{t('See table schema')}</FormLabel>\n    ) : (\n      <FormLabel>{t('Table')}</FormLabel>\n    );\n\n    const select = (\n      <Select\n        ariaLabel={t('Select table or type to search tables')}\n        disabled={disabled}\n        filterOption={handleFilterOption}\n        header={header}\n        labelInValue\n        loading={loadingTables}\n        name=\"select-table\"\n        onChange={(options: TableOption | TableOption[]) =>\n          internalTableChange(options)\n        }\n        options={tableOptions}\n        placeholder={t('Select table or type to search tables')}\n        showSearch\n        mode={tableSelectMode}\n        value={tableSelectValue}\n        allowClear={tableSelectMode === 'multiple'}\n        allowSelectAll={false}\n      />\n    );\n\n    const refreshLabel = !readOnly && (\n      <RefreshLabel\n        onClick={() => refetch()}\n        tooltipContent={t('Force refresh table list')}\n      />\n    );\n\n    return renderSelectRow(select, refreshLabel);\n  }\n\n  return (\n    <TableSelectorWrapper>\n      <DatabaseSelector\n        db={database}\n        emptyState={emptyState}\n        formMode={formMode}\n        getDbList={getDbList}\n        handleError={handleError}\n        onDbChange={readOnly ? undefined : internalDbChange}\n        onEmptyResults={onEmptyResults}\n        onSchemaChange={readOnly ? undefined : internalSchemaChange}\n        schema={currentSchema}\n        sqlLabMode={sqlLabMode}\n        isDatabaseSelectEnabled={isDatabaseSelectEnabled && !readOnly}\n        readOnly={readOnly}\n      />\n      {sqlLabMode && !formMode && <div className=\"divider\" />}\n      {renderTableSelect()}\n    </TableSelectorWrapper>\n  );\n};\n\nexport const TableSelectorMultiple: FunctionComponent<TableSelectorProps> =\n  props => <TableSelector tableSelectMode=\"multiple\" {...props} />;\n\nexport default TableSelector;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport rison from 'rison';\nimport Chart from 'src/types/Chart';\nimport { useApiV1Resource, useTransformedResource } from './apiResources';\n\nfunction extractOwnerNames({ owners }: Chart) {\n  if (!owners) return null;\n  return owners.map(owner => `${owner.first_name} ${owner.last_name}`);\n}\n\nconst ownerNamesQuery = rison.encode({\n  columns: ['owners.first_name', 'owners.last_name'],\n  keys: ['none'],\n});\n\nexport function useChartOwnerNames(chartId: string) {\n  return useTransformedResource(\n    useApiV1Resource<Chart>(`/api/v1/chart/${chartId}?q=${ownerNamesQuery}`),\n    extractOwnerNames,\n  );\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { Dashboard, Datasource, EmbeddedDashboard } from 'src/dashboard/types';\nimport { Chart } from 'src/types/Chart';\nimport { useApiV1Resource, useTransformedResource } from './apiResources';\n\nexport const useDashboard = (idOrSlug: string | number) =>\n  useTransformedResource(\n    useApiV1Resource<Dashboard>(`/api/v1/dashboard/${idOrSlug}`),\n    dashboard => ({\n      ...dashboard,\n      // TODO: load these at the API level\n      metadata:\n        (dashboard.json_metadata && JSON.parse(dashboard.json_metadata)) || {},\n      position_data:\n        dashboard.position_json && JSON.parse(dashboard.position_json),\n    }),\n  );\n\n// gets the chart definitions for a dashboard\nexport const useDashboardCharts = (idOrSlug: string | number) =>\n  useApiV1Resource<Chart[]>(`/api/v1/dashboard/${idOrSlug}/charts`);\n\n// gets the datasets for a dashboard\n// important: this endpoint only returns the fields in the dataset\n// that are necessary for rendering the given dashboard\nexport const useDashboardDatasets = (idOrSlug: string | number) =>\n  useApiV1Resource<Datasource[]>(`/api/v1/dashboard/${idOrSlug}/datasets`);\n\nexport const useEmbeddedDashboard = (idOrSlug: string | number) =>\n  useApiV1Resource<EmbeddedDashboard>(`/api/v1/dashboard/${idOrSlug}/embedded`);\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { api, JsonResponse } from './queryApi';\n\nexport type FetchValidationQueryParams = {\n  dbId?: string | number;\n  schema?: string;\n  sql: string;\n  templateParams?: string;\n};\n\ntype ValidationResult = {\n  end_column: number | null;\n  line_number: number | null;\n  message: string | null;\n  start_column: number | null;\n};\n\nconst queryValidationApi = api.injectEndpoints({\n  endpoints: builder => ({\n    queryValidations: builder.query<\n      ValidationResult[],\n      FetchValidationQueryParams\n    >({\n      providesTags: ['QueryValidations'],\n      query: ({ dbId, schema, sql, templateParams }) => {\n        let template_params = templateParams;\n        try {\n          template_params = JSON.parse(templateParams || '');\n        } catch (e) {\n          template_params = undefined;\n        }\n        const postPayload = {\n          schema,\n          sql,\n          ...(template_params && { template_params }),\n        };\n        return {\n          method: 'post',\n          endpoint: `/api/v1/database/${dbId}/validate_sql/`,\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(postPayload),\n          transformResponse: ({ json }: JsonResponse) => json.result,\n        };\n      },\n    }),\n  }),\n});\n\nexport const { useQueryValidationsQuery } = queryValidationApi;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useEffect, useRef } from 'react';\nimport useEffectEvent from 'src/hooks/useEffectEvent';\nimport { api, JsonResponse } from './queryApi';\n\nexport type SchemaOption = {\n  value: string;\n  label: string;\n  title: string;\n};\n\nexport type FetchSchemasQueryParams = {\n  dbId?: string | number;\n  forceRefresh: boolean;\n  onSuccess?: (data: SchemaOption[], isRefetched: boolean) => void;\n  onError?: () => void;\n};\n\ntype Params = Omit<FetchSchemasQueryParams, 'forceRefresh'>;\n\nconst schemaApi = api.injectEndpoints({\n  endpoints: builder => ({\n    schemas: builder.query<SchemaOption[], FetchSchemasQueryParams>({\n      providesTags: [{ type: 'Schemas', id: 'LIST' }],\n      query: ({ dbId, forceRefresh }) => ({\n        endpoint: `/api/v1/database/${dbId}/schemas/`,\n        // TODO: Would be nice to add pagination in a follow-up. Needs endpoint changes.\n        urlParams: {\n          force: forceRefresh,\n        },\n        transformResponse: ({ json }: JsonResponse) =>\n          json.result.map((value: string) => ({\n            value,\n            label: value,\n            title: value,\n          })),\n      }),\n      serializeQueryArgs: ({ queryArgs: { dbId } }) => ({\n        dbId,\n      }),\n    }),\n  }),\n});\n\nexport const {\n  useLazySchemasQuery,\n  useSchemasQuery,\n  endpoints: schemaEndpoints,\n  util: schemaApiUtil,\n} = schemaApi;\n\nexport const EMPTY_SCHEMAS = [] as SchemaOption[];\n\nexport function useSchemas(options: Params) {\n  const isMountedRef = useRef(false);\n  const { dbId, onSuccess, onError } = options || {};\n  const [trigger] = useLazySchemasQuery();\n  const result = useSchemasQuery(\n    { dbId, forceRefresh: false },\n    {\n      skip: !dbId,\n    },\n  );\n\n  const handleOnSuccess = useEffectEvent(\n    (data: SchemaOption[], isRefetched: boolean) => {\n      onSuccess?.(data, isRefetched);\n    },\n  );\n\n  const handleOnError = useEffectEvent(() => {\n    onError?.();\n  });\n\n  const refetch = useCallback(() => {\n    if (dbId) {\n      trigger({ dbId, forceRefresh: true }).then(\n        ({ isSuccess, isError, data }) => {\n          if (isSuccess) {\n            handleOnSuccess(data || EMPTY_SCHEMAS, true);\n          }\n          if (isError) {\n            handleOnError();\n          }\n        },\n      );\n    }\n  }, [dbId, handleOnError, handleOnSuccess, trigger]);\n\n  useEffect(() => {\n    if (isMountedRef.current) {\n      const { requestId, isSuccess, isError, isFetching, data, originalArgs } =\n        result;\n      if (!originalArgs?.forceRefresh && requestId && !isFetching) {\n        if (isSuccess) {\n          handleOnSuccess(data || EMPTY_SCHEMAS, false);\n        }\n        if (isError) {\n          handleOnError();\n        }\n      }\n    } else {\n      isMountedRef.current = true;\n    }\n  }, [result, handleOnSuccess, handleOnError]);\n\n  return {\n    ...result,\n    refetch,\n  };\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useMemo, useEffect, useRef } from 'react';\nimport useEffectEvent from 'src/hooks/useEffectEvent';\nimport { api, JsonResponse } from './queryApi';\n\nimport { useSchemas } from './schemas';\n\nexport interface Table {\n  label: string;\n  value: string;\n  type: string;\n  extra?: {\n    certification?: {\n      certified_by: string;\n      details: string;\n    };\n    warning_markdown?: string;\n  };\n}\n\ntype QueryResponse = {\n  json: {\n    count: number;\n    result: Table[];\n  };\n  response: Response;\n};\n\nexport type Data = {\n  options: Table[];\n  hasMore: boolean;\n};\n\nexport type FetchTablesQueryParams = {\n  dbId?: string | number;\n  schema?: string;\n  forceRefresh?: boolean;\n  onSuccess?: (data: Data, isRefetched: boolean) => void;\n  onError?: (error: Response) => void;\n};\n\nexport type FetchTableMetadataQueryParams = {\n  dbId: string | number;\n  schema: string;\n  table: string;\n};\n\ntype ColumnKeyTypeType = 'pk' | 'fk' | 'index';\ninterface Column {\n  name: string;\n  keys?: { type: ColumnKeyTypeType }[];\n  type: string;\n}\n\nexport type TableMetaData = {\n  name: string;\n  partitions?: {\n    partitionQuery: string;\n    latest: object[];\n  };\n  metadata?: Record<string, string>;\n  indexes?: object[];\n  selectStar?: string;\n  view?: string;\n  columns: Column[];\n};\n\ntype TableMetadataReponse = {\n  json: TableMetaData;\n  response: Response;\n};\n\nexport type TableExtendedMetadata = Record<string, string>;\n\ntype Params = Omit<FetchTablesQueryParams, 'forceRefresh'>;\n\nconst tableApi = api.injectEndpoints({\n  endpoints: builder => ({\n    tables: builder.query<Data, FetchTablesQueryParams>({\n      providesTags: ['Tables'],\n      query: ({ dbId, schema, forceRefresh }) => ({\n        endpoint: `/api/v1/database/${dbId ?? 'undefined'}/tables/`,\n        // TODO: Would be nice to add pagination in a follow-up. Needs endpoint changes.\n        urlParams: {\n          force: forceRefresh,\n          schema_name: schema ? encodeURIComponent(schema) : '',\n        },\n        transformResponse: ({ json }: QueryResponse) => ({\n          options: json.result,\n          hasMore: json.count > json.result.length,\n        }),\n      }),\n      serializeQueryArgs: ({ queryArgs: { dbId, schema } }) => ({\n        dbId,\n        schema,\n      }),\n    }),\n    tableMetadata: builder.query<TableMetaData, FetchTableMetadataQueryParams>({\n      query: ({ dbId, schema, table }) => ({\n        endpoint: `/api/v1/database/${dbId}/table/${encodeURIComponent(\n          table,\n        )}/${encodeURIComponent(schema)}/`,\n        transformResponse: ({ json }: TableMetadataReponse) => json,\n      }),\n    }),\n    tableExtendedMetadata: builder.query<\n      TableExtendedMetadata,\n      FetchTableMetadataQueryParams\n    >({\n      query: ({ dbId, schema, table }) => ({\n        endpoint: `/api/v1/database/${dbId}/table_extra/${encodeURIComponent(\n          table,\n        )}/${encodeURIComponent(schema)}/`,\n        transformResponse: ({ json }: JsonResponse) => json,\n      }),\n    }),\n  }),\n});\n\nexport const {\n  useLazyTablesQuery,\n  useTablesQuery,\n  useTableMetadataQuery,\n  useTableExtendedMetadataQuery,\n  endpoints: tableEndpoints,\n  util: tableApiUtil,\n} = tableApi;\n\nexport function useTables(options: Params) {\n  const isMountedRef = useRef(false);\n  const { data: schemaOptions, isFetching } = useSchemas({\n    dbId: options.dbId,\n  });\n  const schemaOptionsMap = useMemo(\n    () => new Set(schemaOptions?.map(({ value }) => value)),\n    [schemaOptions],\n  );\n  const { dbId, schema, onSuccess, onError } = options || {};\n\n  const enabled = Boolean(\n    dbId && schema && !isFetching && schemaOptionsMap.has(schema),\n  );\n\n  const result = useTablesQuery(\n    { dbId, schema, forceRefresh: false },\n    {\n      skip: !enabled,\n    },\n  );\n  const [trigger] = useLazyTablesQuery();\n\n  const handleOnSuccess = useEffectEvent((data: Data, isRefetched: boolean) => {\n    onSuccess?.(data, isRefetched);\n  });\n\n  const handleOnError = useEffectEvent((error: Response) => {\n    onError?.(error);\n  });\n\n  const refetch = useCallback(() => {\n    if (enabled) {\n      trigger({ dbId, schema, forceRefresh: true }).then(\n        ({ isSuccess, isError, data, error }) => {\n          if (isSuccess && data) {\n            handleOnSuccess(data, true);\n          }\n          if (isError) {\n            handleOnError(error as Response);\n          }\n        },\n      );\n    }\n  }, [dbId, schema, enabled, handleOnSuccess, handleOnError, trigger]);\n\n  useEffect(() => {\n    if (isMountedRef.current) {\n      const {\n        requestId,\n        isSuccess,\n        isError,\n        isFetching,\n        data,\n        error,\n        originalArgs,\n      } = result;\n      if (!originalArgs?.forceRefresh && requestId && !isFetching) {\n        if (isSuccess && data) {\n          handleOnSuccess(data, false);\n        }\n        if (isError) {\n          handleOnError(error as Response);\n        }\n      }\n    } else {\n      isMountedRef.current = true;\n    }\n  }, [result, handleOnSuccess, handleOnError]);\n\n  return {\n    ...result,\n    refetch,\n  };\n}\n"],"names":["styled","textColor","color","text","props","undefined","theme","gridUnit","colors","primary","base","grayscale","light5","DatabaseSelectorWrapper","LabelStyle","SelectLabel","backend","databaseName","className","title","EMPTY_SCHEMA_OPTIONS","DatabaseSelector","db","formMode","emptyState","getDbList","handleError","isDatabaseSelectEnabled","onDbChange","onEmptyResults","onSchemaChange","readOnly","schema","sqlLabMode","currentDb","setCurrentDb","useState","currentSchema","setCurrentSchema","label","value","addSuccessToast","useToasts","loadDatabases","useMemo","async","search","page","pageSize","endpoint","rison","order_columns","order_direction","page_size","filters","col","opr","SupersetClient","then","json","result","length","options","map","row","database_name","id","data","totalCount","changeSchema","useEffect","current","isFetching","loadingSchemas","refetch","useSchemas","dbId","onSuccess","schemas","isFetched","find","schemaOption","onError","t","schemaOptions","renderSelectRow","select","refreshBtn","ariaLabel","optionFilterProps","header","lazyLoading","notFoundContent","onChange","database","placeholder","disabled","refreshIcon","onClick","tooltipContent","labelInValue","loading","name","item","showSearch","renderSchemaSelect","IconWithoutRef","forwardRef","ref","role","css","cursor","TableSelectorWrapper","secondary","light1","TableLabel","TableOption","table","type","extra","iconSize","certification","certifiedBy","certified_by","details","size","warning_markdown","warningMarkdown","marginRight","TableSelector","tableSelectMode","tableValue","onTableSelectChange","customTableOptionLabelRenderer","tableSelectValue","setTableSelectValue","loadingTables","useTables","err","getClientErrorObject","clientError","getClientErrorMessage","tableOptions","customLabel","option","filter","internalTableChange","selectedOptions","Array","isArray","handleFilterOption","searchValue","trim","toLowerCase","filterOption","mode","allowClear","allowSelectAll","renderTableSelect","TableSelectorMultiple","extractOwnerNames","owners","owner","first_name","last_name","ownerNamesQuery","columns","keys","useChartOwnerNames","chartId","useTransformedResource","useApiV1Resource","useDashboard","idOrSlug","dashboard","metadata","json_metadata","JSON","parse","position_data","position_json","useDashboardCharts","useDashboardDatasets","queryValidationApi","api","endpoints","builder","queryValidations","query","providesTags","sql","templateParams","template_params","e","postPayload","method","headers","body","stringify","transformResponse","useQueryValidationsQuery","schemaApi","forceRefresh","urlParams","force","serializeQueryArgs","queryArgs","useLazySchemasQuery","useSchemasQuery","schemaEndpoints","util","schemaApiUtil","EMPTY_SCHEMAS","isMountedRef","useRef","trigger","skip","handleOnSuccess","useEffectEvent","isRefetched","handleOnError","useCallback","isSuccess","isError","requestId","originalArgs","tableApi","tables","schema_name","encodeURIComponent","hasMore","count","tableMetadata","tableExtendedMetadata","useLazyTablesQuery","useTablesQuery","useTableMetadataQuery","useTableExtendedMetadataQuery","tableEndpoints","tableApiUtil","schemaOptionsMap","Set","enabled","Boolean","has","error"],"sourceRoot":""}