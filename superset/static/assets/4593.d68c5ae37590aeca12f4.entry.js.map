{"version":3,"file":"4593.d68c5ae37590aeca12f4.entry.js","mappings":"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","sources":["webpack://superset/./src/components/Badge/index.tsx","webpack://superset/./src/components/Card/index.tsx","webpack://superset/./src/components/CertifiedBadge/index.tsx","webpack://superset/./src/components/DatabaseSelector/index.tsx","webpack://superset/./src/components/RefreshLabel/index.tsx","webpack://superset/./src/components/TableSelector/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { styled } from '@superset-ui/core';\nimport { Badge as AntdBadge } from 'antd';\nimport { BadgeProps as AntdBadgeProps } from 'antd/lib/badge';\n\nexport interface BadgeProps extends AntdBadgeProps {\n  textColor?: string;\n}\n\nconst Badge = styled(\n  (\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    { textColor, ...props }: BadgeProps,\n  ) => <AntdBadge {...props} />,\n)`\n  & > sup {\n    padding: 0 ${({ theme }) => theme.gridUnit * 2}px;\n    background: ${({ theme, color }) => color || theme.colors.primary.base};\n    color: ${({ theme, textColor }) =>\n      textColor || theme.colors.grayscale.light5};\n  }\n`;\n\nexport default Badge;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { SupersetTheme } from '@superset-ui/core';\nimport AntdCard, { CardProps as AntdCardProps } from 'antd/lib/card';\n\nexport interface CardProps extends AntdCardProps {\n  padded?: boolean;\n}\n\nconst Card = ({ padded, ...props }: CardProps) => (\n  <AntdCard\n    {...props}\n    css={(theme: SupersetTheme) => ({\n      backgroundColor: theme.colors.grayscale.light4,\n      borderRadius: theme.borderRadius,\n      '.ant-card-body': {\n        padding: padded ? theme.gridUnit * 4 : theme.gridUnit,\n      },\n    })}\n  />\n);\n\nexport default Card;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { t, useTheme } from '@superset-ui/core';\nimport Icons, { IconType } from 'src/components/Icons';\nimport { Tooltip } from 'src/components/Tooltip';\n\nexport interface CertifiedBadgeProps {\n  certifiedBy?: string;\n  details?: string;\n  size?: IconType['iconSize'];\n}\n\nfunction CertifiedBadge({\n  certifiedBy,\n  details,\n  size = 'l',\n}: CertifiedBadgeProps) {\n  const theme = useTheme();\n\n  return (\n    <Tooltip\n      id=\"certified-details-tooltip\"\n      title={\n        <>\n          {certifiedBy && (\n            <div>\n              <strong>{t('Certified by %s', certifiedBy)}</strong>\n            </div>\n          )}\n          <div>{details}</div>\n        </>\n      }\n    >\n      <Icons.Certified iconColor={theme.colors.primary.base} iconSize={size} />\n    </Tooltip>\n  );\n}\n\nexport default CertifiedBadge;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { ReactNode, useState, useMemo, useEffect } from 'react';\nimport { styled, SupersetClient, t } from '@superset-ui/core';\nimport rison from 'rison';\nimport { Select } from 'src/components';\nimport Label from 'src/components/Label';\nimport { FormLabel } from 'src/components/Form';\nimport RefreshLabel from 'src/components/RefreshLabel';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\n\nconst DatabaseSelectorWrapper = styled.div`\n  ${({ theme }) => `\n    .refresh {\n      display: flex;\n      align-items: center;\n      width: 30px;\n      margin-left: ${theme.gridUnit}px;\n      margin-top: ${theme.gridUnit * 5}px;\n    }\n\n    .section {\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n    }\n\n    .select {\n      width: calc(100% - 30px - ${theme.gridUnit}px);\n      flex: 1;\n    }\n\n    & > div {\n      margin-bottom: ${theme.gridUnit * 4}px;\n    }\n  `}\n`;\n\nconst LabelStyle = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  margin-left: ${({ theme }) => theme.gridUnit - 2}px;\n\n  .backend {\n    overflow: visible;\n  }\n\n  .name {\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n`;\n\ntype DatabaseValue = {\n  label: React.ReactNode;\n  value: number;\n  id: number;\n  database_name: string;\n  backend: string;\n  allow_multi_schema_metadata_fetch: boolean;\n};\n\nexport type DatabaseObject = {\n  id: number;\n  database_name: string;\n  backend: string;\n  allow_multi_schema_metadata_fetch: boolean;\n};\n\ntype SchemaValue = { label: string; value: string };\n\nexport interface DatabaseSelectorProps {\n  db?: DatabaseObject;\n  emptyState?: ReactNode;\n  formMode?: boolean;\n  getDbList?: (arg0: any) => {};\n  handleError: (msg: string) => void;\n  isDatabaseSelectEnabled?: boolean;\n  onDbChange?: (db: DatabaseObject) => void;\n  onEmptyResults?: (searchText?: string) => void;\n  onSchemaChange?: (schema?: string) => void;\n  onSchemasLoad?: (schemas: Array<object>) => void;\n  readOnly?: boolean;\n  schema?: string;\n  sqlLabMode?: boolean;\n}\n\nconst SelectLabel = ({\n  backend,\n  databaseName,\n}: {\n  backend: string;\n  databaseName: string;\n}) => (\n  <LabelStyle>\n    <Label className=\"backend\">{backend}</Label>\n    <span className=\"name\" title={databaseName}>\n      {databaseName}\n    </span>\n  </LabelStyle>\n);\n\nexport default function DatabaseSelector({\n  db,\n  formMode = false,\n  emptyState,\n  getDbList,\n  handleError,\n  isDatabaseSelectEnabled = true,\n  onDbChange,\n  onEmptyResults,\n  onSchemaChange,\n  onSchemasLoad,\n  readOnly = false,\n  schema,\n  sqlLabMode = false,\n}: DatabaseSelectorProps) {\n  const [loadingSchemas, setLoadingSchemas] = useState(false);\n  const [schemaOptions, setSchemaOptions] = useState<SchemaValue[]>([]);\n  const [currentDb, setCurrentDb] = useState<DatabaseValue | undefined>(\n    db\n      ? {\n          label: (\n            <SelectLabel backend={db.backend} databaseName={db.database_name} />\n          ),\n          value: db.id,\n          ...db,\n        }\n      : undefined,\n  );\n  const [currentSchema, setCurrentSchema] = useState<SchemaValue | undefined>(\n    schema ? { label: schema, value: schema } : undefined,\n  );\n  const [refresh, setRefresh] = useState(0);\n  const { addSuccessToast } = useToasts();\n\n  const loadDatabases = useMemo(\n    () =>\n      async (\n        search: string,\n        page: number,\n        pageSize: number,\n      ): Promise<{\n        data: DatabaseValue[];\n        totalCount: number;\n      }> => {\n        const queryParams = rison.encode({\n          order_columns: 'database_name',\n          order_direction: 'asc',\n          page,\n          page_size: pageSize,\n          ...(formMode || !sqlLabMode\n            ? { filters: [{ col: 'database_name', opr: 'ct', value: search }] }\n            : {\n                filters: [\n                  { col: 'database_name', opr: 'ct', value: search },\n                  {\n                    col: 'expose_in_sqllab',\n                    opr: 'eq',\n                    value: true,\n                  },\n                ],\n              }),\n        });\n        const endpoint = `/api/v1/database/?q=${queryParams}`;\n        return SupersetClient.get({ endpoint }).then(({ json }) => {\n          const { result } = json;\n          if (getDbList) {\n            getDbList(result);\n          }\n          if (result.length === 0) {\n            if (onEmptyResults) onEmptyResults(search);\n          }\n          const options = result.map((row: DatabaseObject) => ({\n            label: (\n              <SelectLabel\n                backend={row.backend}\n                databaseName={row.database_name}\n              />\n            ),\n            value: row.id,\n            id: row.id,\n            database_name: row.database_name,\n            backend: row.backend,\n            allow_multi_schema_metadata_fetch:\n              row.allow_multi_schema_metadata_fetch,\n          }));\n\n          return {\n            data: options,\n            totalCount: options.length,\n          };\n        });\n      },\n    [formMode, getDbList, sqlLabMode],\n  );\n\n  useEffect(() => {\n    if (currentDb) {\n      setLoadingSchemas(true);\n      const queryParams = rison.encode({ force: refresh > 0 });\n      const endpoint = `/api/v1/database/${currentDb.value}/schemas/?q=${queryParams}`;\n\n      // TODO: Would be nice to add pagination in a follow-up. Needs endpoint changes.\n      SupersetClient.get({ endpoint })\n        .then(({ json }) => {\n          const options = json.result.map((s: string) => ({\n            value: s,\n            label: s,\n            title: s,\n          }));\n          if (onSchemasLoad) {\n            onSchemasLoad(options);\n          }\n          setSchemaOptions(options);\n          setLoadingSchemas(false);\n          if (refresh > 0) addSuccessToast('List refreshed');\n        })\n        .catch(() => {\n          setLoadingSchemas(false);\n          handleError(t('There was an error loading the schemas'));\n        });\n    }\n  }, [currentDb, onSchemasLoad, refresh]);\n\n  function changeDataBase(\n    value: { label: string; value: number },\n    database: DatabaseValue,\n  ) {\n    setCurrentDb(database);\n    setCurrentSchema(undefined);\n    if (onDbChange) {\n      onDbChange(database);\n    }\n    if (onSchemaChange) {\n      onSchemaChange(undefined);\n    }\n  }\n\n  function changeSchema(schema: SchemaValue) {\n    setCurrentSchema(schema);\n    if (onSchemaChange) {\n      onSchemaChange(schema.value);\n    }\n  }\n\n  function renderSelectRow(select: ReactNode, refreshBtn: ReactNode) {\n    return (\n      <div className=\"section\">\n        <span className=\"select\">{select}</span>\n        <span className=\"refresh\">{refreshBtn}</span>\n      </div>\n    );\n  }\n\n  function renderDatabaseSelect() {\n    return renderSelectRow(\n      <Select\n        ariaLabel={t('Select database or type database name')}\n        optionFilterProps={['database_name', 'value']}\n        data-test=\"select-database\"\n        header={<FormLabel>{t('Database')}</FormLabel>}\n        lazyLoading={false}\n        notFoundContent={emptyState}\n        onChange={changeDataBase}\n        value={currentDb}\n        placeholder={t('Select database or type database name')}\n        disabled={!isDatabaseSelectEnabled || readOnly}\n        options={loadDatabases}\n      />,\n      null,\n    );\n  }\n\n  function renderSchemaSelect() {\n    const refreshIcon = !formMode && !readOnly && (\n      <RefreshLabel\n        onClick={() => setRefresh(refresh + 1)}\n        tooltipContent={t('Force refresh schema list')}\n      />\n    );\n    return renderSelectRow(\n      <Select\n        ariaLabel={t('Select schema or type schema name')}\n        disabled={!currentDb || readOnly}\n        header={<FormLabel>{t('Schema')}</FormLabel>}\n        labelInValue\n        lazyLoading={false}\n        loading={loadingSchemas}\n        name=\"select-schema\"\n        placeholder={t('Select schema or type schema name')}\n        onChange={item => changeSchema(item as SchemaValue)}\n        options={schemaOptions}\n        showSearch\n        value={currentSchema}\n      />,\n      refreshIcon,\n    );\n  }\n\n  return (\n    <DatabaseSelectorWrapper data-test=\"DatabaseSelector\">\n      {renderDatabaseSelect()}\n      {renderSchemaSelect()}\n    </DatabaseSelectorWrapper>\n  );\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { MouseEventHandler, forwardRef } from 'react';\nimport { SupersetTheme } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons, { IconType } from 'src/components/Icons';\n\nexport interface RefreshLabelProps {\n  onClick: MouseEventHandler<HTMLSpanElement>;\n  tooltipContent: string;\n}\n\nconst RefreshLabel = ({ onClick, tooltipContent }: RefreshLabelProps) => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const IconWithoutRef = forwardRef((props: IconType, ref: any) => (\n    <Icons.Refresh {...props} />\n  ));\n\n  return (\n    <Tooltip title={tooltipContent}>\n      <IconWithoutRef\n        role=\"button\"\n        onClick={onClick}\n        css={(theme: SupersetTheme) => ({\n          cursor: 'pointer',\n          color: theme.colors.grayscale.base,\n          '&:hover': { color: theme.colors.primary.base },\n        })}\n      />\n    </Tooltip>\n  );\n};\n\nexport default RefreshLabel;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, {\n  FunctionComponent,\n  useState,\n  ReactNode,\n  useMemo,\n  useEffect,\n} from 'react';\nimport { SelectValue } from 'antd/lib/select';\n\nimport { styled, SupersetClient, t } from '@superset-ui/core';\nimport { Select } from 'src/components';\nimport { FormLabel } from 'src/components/Form';\nimport Icons from 'src/components/Icons';\nimport DatabaseSelector, {\n  DatabaseObject,\n} from 'src/components/DatabaseSelector';\nimport RefreshLabel from 'src/components/RefreshLabel';\nimport CertifiedBadge from 'src/components/CertifiedBadge';\nimport WarningIconWithTooltip from 'src/components/WarningIconWithTooltip';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\n\nconst TableSelectorWrapper = styled.div`\n  ${({ theme }) => `\n    .refresh {\n      display: flex;\n      align-items: center;\n      width: 30px;\n      margin-left: ${theme.gridUnit}px;\n      margin-top: ${theme.gridUnit * 5}px;\n    }\n\n    .section {\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n    }\n\n    .divider {\n      border-bottom: 1px solid ${theme.colors.secondary.light5};\n      margin: 15px 0;\n    }\n\n    .table-length {\n      color: ${theme.colors.grayscale.light1};\n    }\n\n    .select {\n      flex: 1;\n    }\n  `}\n`;\n\nconst TableLabel = styled.span`\n  align-items: center;\n  display: flex;\n  white-space: nowrap;\n\n  svg,\n  small {\n    margin-right: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n\ninterface TableSelectorProps {\n  clearable?: boolean;\n  database?: DatabaseObject;\n  emptyState?: ReactNode;\n  formMode?: boolean;\n  getDbList?: (arg0: any) => {};\n  handleError: (msg: string) => void;\n  isDatabaseSelectEnabled?: boolean;\n  onDbChange?: (db: DatabaseObject) => void;\n  onSchemaChange?: (schema?: string) => void;\n  onSchemasLoad?: () => void;\n  onTablesLoad?: (options: Array<any>) => void;\n  readOnly?: boolean;\n  schema?: string;\n  onEmptyResults?: (searchText?: string) => void;\n  sqlLabMode?: boolean;\n  tableValue?: string | string[];\n  onTableSelectChange?: (value?: string | string[], schema?: string) => void;\n  tableSelectMode?: 'single' | 'multiple';\n}\n\ninterface Table {\n  label: string;\n  value: string;\n  type: string;\n  extra?: {\n    certification?: {\n      certified_by: string;\n      details: string;\n    };\n    warning_markdown?: string;\n  };\n}\n\ninterface TableOption {\n  label: JSX.Element;\n  text: string;\n  value: string;\n}\n\nconst TableOption = ({ table }: { table: Table }) => {\n  const { label, type, extra } = table;\n  return (\n    <TableLabel title={label}>\n      {type === 'view' ? (\n        <Icons.Eye iconSize=\"m\" />\n      ) : (\n        <Icons.Table iconSize=\"m\" />\n      )}\n      {extra?.certification && (\n        <CertifiedBadge\n          certifiedBy={extra.certification.certified_by}\n          details={extra.certification.details}\n          size=\"l\"\n        />\n      )}\n      {extra?.warning_markdown && (\n        <WarningIconWithTooltip\n          warningMarkdown={extra.warning_markdown}\n          size=\"l\"\n        />\n      )}\n      {label}\n    </TableLabel>\n  );\n};\n\nconst TableSelector: FunctionComponent<TableSelectorProps> = ({\n  database,\n  emptyState,\n  formMode = false,\n  getDbList,\n  handleError,\n  isDatabaseSelectEnabled = true,\n  onDbChange,\n  onSchemaChange,\n  onSchemasLoad,\n  onTablesLoad,\n  readOnly = false,\n  onEmptyResults,\n  schema,\n  sqlLabMode = true,\n  tableSelectMode = 'single',\n  tableValue = undefined,\n  onTableSelectChange,\n}) => {\n  const [currentDatabase, setCurrentDatabase] = useState<\n    DatabaseObject | undefined\n  >(database);\n  const [currentSchema, setCurrentSchema] = useState<string | undefined>(\n    schema,\n  );\n\n  const [tableOptions, setTableOptions] = useState<TableOption[]>([]);\n  const [tableSelectValue, setTableSelectValue] = useState<\n    SelectValue | undefined\n  >(undefined);\n  const [refresh, setRefresh] = useState(0);\n  const [previousRefresh, setPreviousRefresh] = useState(0);\n  const [loadingTables, setLoadingTables] = useState(false);\n  const { addSuccessToast } = useToasts();\n\n  useEffect(() => {\n    // reset selections\n    if (database === undefined) {\n      setCurrentDatabase(undefined);\n      setCurrentSchema(undefined);\n      setTableSelectValue(undefined);\n    }\n  }, [database, tableSelectMode]);\n\n  useEffect(() => {\n    if (tableSelectMode === 'single') {\n      setTableSelectValue(\n        tableOptions.find(option => option.value === tableValue),\n      );\n    } else {\n      setTableSelectValue(\n        tableOptions?.filter(\n          option => option && tableValue?.includes(option.value),\n        ) || [],\n      );\n    }\n  }, [tableOptions, tableValue, tableSelectMode]);\n\n  useEffect(() => {\n    if (currentDatabase && currentSchema) {\n      setLoadingTables(true);\n      const encodedSchema = encodeURIComponent(currentSchema);\n      const forceRefresh = refresh !== previousRefresh;\n      // TODO: Would be nice to add pagination in a follow-up. Needs endpoint changes.\n      const endpoint = encodeURI(\n        `/superset/tables/${currentDatabase.id}/${encodedSchema}/undefined/${forceRefresh}/`,\n      );\n\n      if (previousRefresh !== refresh) {\n        setPreviousRefresh(refresh);\n      }\n\n      SupersetClient.get({ endpoint })\n        .then(({ json }) => {\n          const options: TableOption[] = json.options.map((table: Table) => {\n            const option: TableOption = {\n              value: table.value,\n              label: <TableOption table={table} />,\n              text: table.label,\n            };\n\n            return option;\n          });\n\n          onTablesLoad?.(json.options);\n          setTableOptions(options);\n          setLoadingTables(false);\n          if (forceRefresh) addSuccessToast('List updated');\n        })\n        .catch(() => {\n          setLoadingTables(false);\n          handleError(t('There was an error loading the tables'));\n        });\n    }\n    // We are using the refresh state to re-trigger the query\n    // previousRefresh should be out of dependencies array\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentDatabase, currentSchema, onTablesLoad, setTableOptions, refresh]);\n\n  function renderSelectRow(select: ReactNode, refreshBtn: ReactNode) {\n    return (\n      <div className=\"section\">\n        <span className=\"select\">{select}</span>\n        <span className=\"refresh\">{refreshBtn}</span>\n      </div>\n    );\n  }\n\n  const internalTableChange = (\n    selectedOptions: TableOption | TableOption[] | undefined,\n  ) => {\n    if (currentSchema) {\n      onTableSelectChange?.(\n        Array.isArray(selectedOptions)\n          ? selectedOptions.map(option => option?.value)\n          : selectedOptions?.value,\n        currentSchema,\n      );\n    } else {\n      setTableSelectValue(selectedOptions);\n    }\n  };\n\n  const internalDbChange = (db: DatabaseObject) => {\n    setCurrentDatabase(db);\n    if (onDbChange) {\n      onDbChange(db);\n    }\n  };\n\n  const internalSchemaChange = (schema?: string) => {\n    setCurrentSchema(schema);\n    if (onSchemaChange) {\n      onSchemaChange(schema);\n    }\n\n    internalTableChange(undefined);\n  };\n\n  function renderDatabaseSelector() {\n    return (\n      <DatabaseSelector\n        key={currentDatabase?.id}\n        db={currentDatabase}\n        emptyState={emptyState}\n        formMode={formMode}\n        getDbList={getDbList}\n        handleError={handleError}\n        onDbChange={readOnly ? undefined : internalDbChange}\n        onEmptyResults={onEmptyResults}\n        onSchemaChange={readOnly ? undefined : internalSchemaChange}\n        onSchemasLoad={onSchemasLoad}\n        schema={currentSchema}\n        sqlLabMode={sqlLabMode}\n        isDatabaseSelectEnabled={isDatabaseSelectEnabled && !readOnly}\n        readOnly={readOnly}\n      />\n    );\n  }\n\n  const handleFilterOption = useMemo(\n    () => (search: string, option: TableOption) => {\n      const searchValue = search.trim().toLowerCase();\n      const { text } = option;\n      return text.toLowerCase().includes(searchValue);\n    },\n    [],\n  );\n\n  function renderTableSelect() {\n    const disabled =\n      (currentSchema && !formMode && readOnly) ||\n      (!currentSchema && !database?.allow_multi_schema_metadata_fetch);\n\n    const header = sqlLabMode ? (\n      <FormLabel>{t('See table schema')}</FormLabel>\n    ) : (\n      <FormLabel>{t('Table')}</FormLabel>\n    );\n\n    const select = (\n      <Select\n        ariaLabel={t('Select table or type table name')}\n        disabled={disabled}\n        filterOption={handleFilterOption}\n        header={header}\n        labelInValue\n        lazyLoading={false}\n        loading={loadingTables}\n        name=\"select-table\"\n        onChange={(options: TableOption | TableOption[]) =>\n          internalTableChange(options)\n        }\n        options={tableOptions}\n        placeholder={t('Select table or type table name')}\n        showSearch\n        mode={tableSelectMode}\n        value={tableSelectValue}\n        allowClear={tableSelectMode === 'multiple'}\n      />\n    );\n\n    const refreshLabel = !formMode && !readOnly && (\n      <RefreshLabel\n        onClick={() => setRefresh(refresh + 1)}\n        tooltipContent={t('Force refresh table list')}\n      />\n    );\n\n    return renderSelectRow(select, refreshLabel);\n  }\n\n  return (\n    <TableSelectorWrapper>\n      {renderDatabaseSelector()}\n      {sqlLabMode && !formMode && <div className=\"divider\" />}\n      {renderTableSelect()}\n    </TableSelectorWrapper>\n  );\n};\n\nexport const TableSelectorMultiple: FunctionComponent<TableSelectorProps> =\n  props => <TableSelector tableSelectMode=\"multiple\" {...props} />;\n\nexport default TableSelector;\n"],"names":["textColor","props","theme","gridUnit","color","colors","primary","base","grayscale","light5","padded","css","backgroundColor","light4","borderRadius","padding","certifiedBy","details","size","id","title","t","iconColor","iconSize","DatabaseSelectorWrapper","LabelStyle","SelectLabel","backend","databaseName","className","DatabaseSelector","db","formMode","emptyState","getDbList","handleError","isDatabaseSelectEnabled","onDbChange","onEmptyResults","onSchemaChange","onSchemasLoad","readOnly","schema","sqlLabMode","loadingSchemas","setLoadingSchemas","useState","schemaOptions","setSchemaOptions","currentDb","setCurrentDb","label","database_name","value","undefined","currentSchema","setCurrentSchema","refresh","setRefresh","addSuccessToast","loadDatabases","useMemo","async","search","page","pageSize","endpoint","order_columns","order_direction","page_size","filters","col","opr","then","json","result","length","options","map","row","allow_multi_schema_metadata_fetch","data","totalCount","renderSelectRow","select","refreshBtn","useEffect","queryParams","force","s","catch","ariaLabel","optionFilterProps","header","lazyLoading","notFoundContent","onChange","database","placeholder","disabled","refreshIcon","onClick","tooltipContent","labelInValue","loading","name","item","changeSchema","showSearch","renderSchemaSelect","IconWithoutRef","forwardRef","ref","role","cursor","TableSelectorWrapper","secondary","light1","TableLabel","TableOption","table","type","extra","certification","certified_by","warning_markdown","warningMarkdown","TableSelector","onTablesLoad","tableSelectMode","tableValue","onTableSelectChange","currentDatabase","setCurrentDatabase","tableOptions","setTableOptions","tableSelectValue","setTableSelectValue","previousRefresh","setPreviousRefresh","loadingTables","setLoadingTables","find","option","filter","includes","encodedSchema","encodeURIComponent","forceRefresh","encodeURI","text","internalTableChange","selectedOptions","Array","isArray","handleFilterOption","searchValue","trim","toLowerCase","key","filterOption","mode","allowClear","renderTableSelect","TableSelectorMultiple"],"sourceRoot":""}