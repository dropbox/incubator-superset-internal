{"version":3,"file":"509a573037af52c0bd0c.chunk.js","mappings":"mOAyBO,MAAMA,EAAiB,CAC5BC,WAAW,IAAAC,GAAE,SACbC,aAAa,IAAAD,GAAE,eACfE,gBAAgB,IAAAF,GAAE,0BAClBG,qBAAqB,IAAAH,GAAE,oBACvBI,eAAe,IAAAJ,GAAE,yBACjBK,oBAAoB,IAAAL,GAAE,mBACtBM,YAAY,IAAAN,GAAE,cACdO,cAAc,IAAAP,GAAE,gBAChBQ,2BAA2B,IAAAR,GAAE,SAC7BS,YAAY,IAAAT,GAAE,QACdU,aAAa,IAAAV,GAAE,SACfW,YAAY,IAAAX,GAAE,QACdY,WAAW,IAAAZ,GAAE,OACba,YAAY,IAAAb,GAAE,QACdc,cAAc,IAAAd,GAAE,UAChBe,cAAc,IAAAf,GAAE,UAChBgB,cAAc,IAAAhB,GAAE,SAChBiB,cAAc,IAAAjB,GAAE,MAChBkB,iBAAiB,IAAAlB,GAAE,MACnBmB,gBAAgB,IAAAnB,GAAE,MAClBoB,qCAAqC,IAAApB,GAAE,OACvCqB,aAAa,IAAArB,GAAE,MACfsB,eAAe,IAAAtB,GAAE,KACjBuB,4BAA4B,IAAAvB,GAAE,MAC9BwB,4BAA4B,IAAAxB,GAAE,aAC9ByB,kBAAkB,IAAAzB,GAAE,2BACpB0B,iBAAiB,IAAA1B,GAAE,SACnB2B,SAAU,EAER,IAAA3B,GAAE,WACF,IAAAA,GAAE,WACF,IAAAA,GAAE,YACF,IAAAA,GAAE,cACF,IAAAA,GAAE,aACF,IAAAA,GAAE,WACF,IAAAA,GAAE,aAEJ4B,OAAQ,EAEN,IAAA5B,GAAE,YACF,IAAAA,GAAE,aACF,IAAAA,GAAE,UACF,IAAAA,GAAE,UACF,IAAAA,GAAE,QACF,IAAAA,GAAE,SACF,IAAAA,GAAE,SACF,IAAAA,GAAE,WACF,IAAAA,GAAE,cACF,IAAAA,GAAE,YACF,IAAAA,GAAE,aACF,IAAAA,GAAE,aAGJ6B,YAAa,EACX,IAAA7B,GAAE,QACF,IAAAA,GAAE,QACF,IAAAA,GAAE,QACF,IAAAA,GAAE,QACF,IAAAA,GAAE,QACF,IAAAA,GAAE,QACF,IAAAA,GAAE,QAGJ8B,UAAW,EACT,IAAA9B,GAAE,QACF,IAAAA,GAAE,QACF,IAAAA,GAAE,QACF,IAAAA,GAAE,QACF,IAAAA,GAAE,QACF,IAAAA,GAAE,QACF,IAAAA,GAAE,QACF,IAAAA,GAAE,QACF,IAAAA,GAAE,QACF,IAAAA,GAAE,QACF,IAAAA,GAAE,QACF,IAAAA,GAAE,SAIO+B,GAAa,EAAAC,EAAA,KAAQC,IAChC,QAAC,KAAD,CACEC,kBAAmBC,GAAWA,EAAQC,gBAEtC,QAAC,IAAD,KAAiBC,OAAQvC,GAAYmC,MAEvC;;;qBAGmB,EAAGK,MAAAA,KAAYA,EAAMC;wBAClB,EAAGD,MAAAA,KACrBA,EAAME,OAAOC,UAAUC;;;qBAGR,EAAGJ,MAAAA,KAAYA,EAAMC;;6FCnF1C,MAAMI,EAAgB,SAAW;;;;;;;;;gBASjB,EAAGL,MAAAA,KAAYA,EAAME,OAAOI,QAAQC;;;;EAM9CC,EAAgB,SAAW;WACtB,EAAGR,MAAAA,KAAYA,EAAME,OAAOC,UAAUI;EAGnC,SAAUE,GAAW,QAAEC,IACnC,OACE,QAACL,EAAD,CAAeM,UAAU,WACtBD,EAAQE,KAAI,CAACC,EAAQC,KACpB,MAAMC,EAAa,IAAMF,EAAOG,MAChC,OAAIH,EAAOI,SAEP,QAAC,IAAD,CACEC,GAAI,GAAGL,EAAOM,gBACdC,MAAOP,EAAOI,QACdI,UAAWR,EAAOQ,UAClBC,IAAKR,IAEL,QAACN,EAAD,CACEe,KAAK,SACLC,SAAU,EACVb,UAAU,gBAEVc,QAASZ,EAAOY,UAEhB,QAACV,EAAD,SAON,QAACP,EAAD,CACEe,KAAK,SACLC,SAAU,EACVb,UAAU,gBACVc,QAASZ,EAAOY,QAEhBH,IAAKR,IAEL,QAACC,EAAD,a,+ECpEZ,MAAMW,GAAe,QAAO,IAAW;;wBAEf,EAAG1B,MAAAA,KAAYA,EAAME,OAAOI,QAAQC;;EAI/CoB,EAAUhC,IAAuB,QAAC+B,EAAiB/B,I,oGCJhE,MAAMiC,EACE,oBAMFC,EAAgB,CACpB,WAAY,CAAC,wBAAyB,yBACtC,WAAY,CAAC,wBAAyB,yBACtC,WAAY,CAAC,yBAA0B,0BACvC,WAAY,CACV,mCACA,oCAEF,WAAY,CAAC,wBAAyB,yBACtC,WAAY,CAAC,uBAAwB,wBACrC,WAAY,CAAC,uBAAwB,wBACrC,MAAS,CAAC,wBAAyB,kCACnC,KAAM,CAACD,EAAuBA,GAC9B,MAAO,CAAC,6BAA8B,wBAGlCE,EAAc,MACdC,EAAU,IAAO,CAAC,KAAM,IACxBC,EAAO,IAAO,CAAC,KAAM,IAErBC,EAAgBC,GACpBH,EAAQI,GAAGD,GAAME,YAAYC,WAC7BL,EAAKG,GAAGD,GAAME,YAAYC,WAEtBC,EAAmBJ,IAAgB,QACvC,MAAMK,EAAUN,EAAaC,GAC7B,OACGJ,EAAYK,GAAGD,GAAMM,QAArB,SACGX,EAAcU,SADjB,EACG,EAAyB,GAD5B,SAEGV,EAAcU,SAFjB,EAEG,EAAyB,KAAOL,GAIlCO,EAAY,mBAEf7B,KAAI8B,GAAW,uBAA0BA,GAAS,KAClDC,OAEGC,EAAuC,GAC7CH,EAAUI,SAAQC,IAEbF,EAAUG,MACTC,GAAUf,EAAae,EAAOd,QAAUD,EAAaa,EAAKZ,SAG5DU,EAAUK,KAAKH,MAInB,MAAMI,EAAmBN,EAAUhC,KAAIkC,IAAI,CACzC3B,MAAO,OAAO,OACRW,EAAagB,EAAKZ,MACrBiB,OAAO,SAASb,EAAgBQ,EAAKZ,SACxCkB,MAAON,EAAKZ,KACZK,QAASN,EAAaa,EAAKZ,MAC3BmB,aAAcP,EAAKZ,SAGfoB,EAAmC,CACvCC,EACAC,IAEA,OAAU1B,EAAayB,EAAEF,cAAcjB,YACvC,OAAUN,EAAa0B,EAAEH,cAAcjB,YAe3B,SAAUqB,GAAiB,iBACvCC,EADuC,SAEvCC,EAFuC,SAGvCC,EAnFuB,UAqFvB,MAAMC,GAAgB,IAAAC,UACpB,IAhB2B,CAACH,IAAD,aAC7B,SAAAT,EAAiBH,MAAKC,GAAUA,EAAOT,UAAYN,EAAa0B,WAAhE,IACIP,QA3EG,kBAyFCW,CAAuBJ,GAAY,iBACzC,CAACA,IAUH,OANA,IAAAK,YAAU,KACJL,IAAaE,GACfH,EAAiBG,KAElB,CAACA,EAAeH,EAAkBC,KAGnC,QAAC,KAAD,CACEM,WAAW,IAAAvG,GAAE,qBACbwG,KAAG,QAAE,CAAEN,SAAAA,GAAJ,OACHO,SAAUhC,GAAMuB,EAAiBvB,GACjCiB,MAAOS,EACPO,QAASlB,EACTmB,eAAgBf,IApCtBJ,EAAiBoB,KAAKhB,I,4QCzEtB,MAAMiB,EAAcvE,GAAyB,IAAG;WACrCA,EAAME,OAAOC,UAAUqE;kBACC,EAAjBxE,EAAMC;EAGV,SAAUwE,GAAc,KAAEC,IACtC,MAAMC,EAAoE,CACxE3D,KAAM,KACNG,MAAO,IAET,OAAQuD,GACN,KAAK,UACHC,EAAoB3D,MAAO,QAAC4D,EAAA,QAAD,CAAaV,IAAKK,IAC7CI,EAAoBxD,MAAQ,UAC5B,MACF,KAAK,UACHwD,EAAoB3D,MAAO,QAAC4D,EAAA,QAAD,CAAaV,IAAKK,IAC7CI,EAAoBxD,MAAQ,UAC5B,MACF,QACEwD,EAAoB3D,KAAO,KAC3B2D,EAAoBxD,MAAQ,GAEhC,OAAOwD,EAAoB3D,MACzB,QAAC6D,EAAA,EAAD,CAASzD,MAAOuD,EAAoBxD,MAAOE,UAAU,UAClDsD,EAAoB3D,MAErB,K,0BCtBN,iBAAoB,KAAM,CACxB8D,SAAU,CACRC,QAAS,qBACTC,QAAS,iBACTC,QAAS,oBACTC,SAAU,uBACVC,SAAU,gBACVC,SAAU,OAId,MAAMC,EAAa3F,EAAA,OAAW;WACnB,EAAGM,MAAAA,KAAYA,EAAME,OAAOC,UAAUI;EAG3C+E,GAAU,EAAA5F,EAAA,IAAOkF,EAAA,UAAc;WAC1B,EAAG5E,MAAAA,KAAYA,EAAME,OAAOI,QAAQC;;YAEnC,EAAGP,MAAAA,KAA6B,EAAjBA,EAAMC;;SAExB,EAAGD,MAAAA,KAAYA,EAAMC;UACpB,EAAGD,MAAAA,KAAYA,EAAMC;;EA6B/B,EAzBgE,EAC9DsF,UAAAA,EACAC,OAAAA,MAEA,MAAOC,EAAWC,IAAgB,IAAAC,UAAiB,IAAOJ,IAa1D,OAXA,IAAAvB,YAAU,KACR0B,GAAa,IAAM,IAAOH,KAG1B,MAAMK,EAAWC,aAAY,KAC3BH,GAAa,IAAM,IAAOH,OA1CP,KA6CrB,MAAO,IAAMO,cAAcF,KAC1B,CAACL,KAGF,QAACF,EAAD,MACG,IAAA3H,GAAE,kBAAmB+H,EAAUM,UAAYN,EAAUX,WAAa,MAClEU,IAAU,QAACF,EAAD,CAAS7D,QAAS+D,M,6KC1C5B,MAAMQ,EACX,EAAG5C,MAAAA,EAAOe,SAAAA,MACR,MAAMnE,GAAQ,UACRiG,GAAW,IAAAC,QAAkB,OAC5BC,EAAgBC,IAAqB,IAAAT,UAC1C,UAGIU,GAA0B,IAAAC,cAC7BC,GAAwBH,EAAkBG,EAAEC,OAAOpD,QACpD,IAGIqD,GAAiB,IAAAH,cACpBI,IAAoB,MACnBvC,EAASuC,GACT,SAAAT,EAASU,UAAT,EAAkBC,SAASF,KAE7B,CAACT,EAAU9B,IAGP0C,GAAa,IAAAP,cAChBQ,IACC3C,EAAS2C,EAAMN,OAAOpD,SAExB,CAACe,IAGG4C,GAAmB,IAAAT,cAAY,KAAK,MACxCnC,GAAS,SAAA8B,EAASU,cAAT,IAAkBK,MAAM5D,QAAS,MACzC,CAACe,KAEG8C,EAAOC,IAAW,IAAAvB,YAEzB,OACE,yBACE,QAACwB,EAAA,QAAD,CAAahD,SAAUkC,EAAyBjD,MAAO+C,IACrD,eAAKxF,UAAU,gCACb,QAACwG,EAAA,EAAD,CAA0B/D,MAAM,YAChC,QAAC3D,EAAAA,WAAD,CACE2H,aAAa,EACbhE,MAAOA,EACPwD,SAAUH,EACVY,SAA6B,WAAnBlB,EACVmB,aAAiC,WAAnBnB,EACde,QAASA,MAGb,eAAKvG,UAAU,gCACb,QAACwG,EAAA,EAAD,CAAyB/D,MAAM,WAC/B,gBAAMzC,UAAU,eAAhB,kBACA,QAAC4G,GAAD,CAEE5G,UAAU,iBAEV,eAAKA,UAAU,oBACb,QAAC6G,EAAA,GAAD,CACE9C,KAAK,OACLxC,KAAK,UACLuF,IAAKxB,EACLvG,MAAOuH,EAAQ,CAAES,YAAa1H,EAAME,OAAO+G,MAAM1G,MAAS,GAC1DoH,aAAa,IAAAjK,GAAE,mBACf2J,SAA6B,UAAnBlB,EACVyB,OAAQf,EACRgB,aAAcd,UCvE1Be,EAA2BpI,EAAA,MAAU;;;;;;;;;;;;;;;;;;;;;;;;;EAwC9BqI,EAAiE,EAC5EC,QAAAA,EAAU,KACVlH,MAAAA,EACAmH,SAAAA,EACAC,SAAAA,MAEA,MAAM,OAAEC,EAAF,WAAUC,EAAV,QAAsBhE,GAAY4D,GAAW,IAC5CK,EAAgBC,IAAqB,IAAA3C,UAC1CyC,GAAc,IAEVpI,GAAQ,UAEd,OAAKgI,GAoCCI,GAAcC,IAAmBD,GACrCE,EAAkBF,IAIlB,QAACN,EAAD,MACE,eAAKnH,UAAU,qBACb,QAAC4G,GAAD,MACE,eAAK5G,UAAU,oBACb,QAAC,KAAD,CACEsD,WAAW,IAAAvG,GAAE,mBAEbyG,SA5CYgE,IAGtB,GADAG,EAAkB,IACdL,EAAU,CACZ,MAAMM,EAAiB,IAClBP,EACHG,OAAAA,EACAC,WAAY,IAGdH,EAASnH,EAAOyH,KAmCRZ,aAAa,IAAAjK,GAAE,0BACf0G,SAAUA,GAAW,IAAIxD,KACtBuH,IAAD,CACEhH,MAAOgH,EACP/E,MAAO+E,MAGX/E,MAAO+E,WAIDK,IAAXL,GAA0BD,GACzB,gBACE3G,KAAK,SACLC,SAAU,EACVb,UAAU,gBACVc,QAAS,IAAMyG,EAASpH,KAExB,QAAC8D,EAAA,QAAD,CAAa6D,UAAWzI,EAAME,OAAOC,UAAUI,QAE/C,WAEMiI,IAAXL,GACC,QAACZ,GAAD,MACE,eAAK5G,UAAU,kBAAiB,IAAAjD,GAAEyK,KAClC,eAAKxH,UAAU,oBACb,oBACEuB,KAAK,aACLkB,MAAOiF,EACPlE,SA3DV2C,IAEA,MAAM,OAAEN,GAAWM,EAInB,GAFAwB,EAAkB9B,EAAOpD,OAErB6E,EAAU,CACZ,MAAMM,EAAiB,IAClBP,EACHI,WAAY5B,EAAOpD,OAGrB6E,EAASnH,EAAOyH,SAkDZ,eAAK5H,UAAU,WACZ,IAAAjD,GAAE,4CAGL,OApFC,MChBLgL,EAAiC,CACrC,cACA,iBACA,QACA,gBAkBIC,EAA2D,CAAC,SAC5DC,EAA8B,MAC9BC,EAAa,CACjB,CACE1H,OAAO,IAAAzD,GAAE,oBACT0F,MAAO,KAET,CACEjC,OAAO,IAAAzD,GAAE,mBACT0F,MAAO,KAET,CACEjC,OAAO,IAAAzD,GAAE,yBACT0F,MAAO,MAET,CACEjC,OAAO,IAAAzD,GAAE,wBACT0F,MAAO,MAET,CACEjC,OAAO,IAAAzD,GAAE,iBACT0F,MAAO,MAET,CACEjC,OAAO,IAAAzD,GAAE,qBACT0F,MAAO,MAET,CACEjC,OAAO,IAAAzD,GAAE,YACT0F,MAAO,aAIL0F,EAAoB,CACxB,CACE3H,OAAO,IAAAzD,GAAE,QACT0F,MAAO,GAET,CACEjC,OAAO,IAAAzD,GAAE,WACT0F,MAAO,IAET,CACEjC,OAAO,IAAAzD,GAAE,WACT0F,MAAO,IAET,CACEjC,OAAO,IAAAzD,GAAE,WACT0F,MAAO,KAML2F,GAAqB,YACrBC,GAAgB,CACpBC,QAAQ,EACRC,gBAAiB,iBACjBC,QAASJ,GACTK,cAPwB,GAQxBC,gBAP8B,KAQ9BnH,KAAM,GACNoH,OAAQ,GACRlB,WAAY,GACZmB,IAAK,GACLC,sBAAuB,GACvBC,eAAgB,GAChBC,kBAAkB,EAClBC,kBAAcnB,GAGVoB,IAAc,EAAAlK,EAAA,IAAOmK,EAAA,EAAM;;;;;;;EAS3B,GAAc7J,GAAyB,IAAG;iBACd,EAAjBA,EAAMC;WACZD,EAAME,OAAOC,UAAUI;EAG5BuJ,GAAyBpK,EAAA,MAAU;;;;;;;;;eAS1B,EAAGM,MAAAA,KAA6B,EAAjBA,EAAMC;+BACL,EAAGD,MAAAA,KAAYA,EAAME,OAAOC,UAAU4J;;;;;;;;;iCASpC,EAAG/J,MAAAA,KAA6B,EAAjBA,EAAMC;iBACrC,EAAGD,MAAAA,KAA6B,EAAjBA,EAAMC;;;;;;;kCAOJ,EAAGD,MAAAA,KAAYA,EAAME,OAAOC,UAAU4J;;;;iCAIvC,EAAG/J,MAAAA,KAAYA,EAAME,OAAOC,UAAU4J;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA+BjEC,GAAqBtK,EAAA,MAAU;;;YAGzB,EAAGM,MAAAA,KAA6B,EAAjBA,EAAMC;MAC3B,EAAGD,MAAAA,KAA6B,EAAjBA,EAAMC;;;;;;;mBAOR,EAAGD,MAAAA,KAAYA,EAAMC;aAC3B,EAAGD,MAAAA,KAAYA,EAAME,OAAO+G,MAAM1G;;EAIzC0J,GAAwBvK,EAAA,MAAU;;;;;;;;EAU3B6H,GAAuB7H,EAAA,MAAU;;YAElC,EAAGM,MAAAA,KAA6B,EAAjBA,EAAMC;;;;;aAKpB,EAAGD,MAAAA,KAAYA,EAAME,OAAOC,UAAUI;iBAClC,EAAGP,MAAAA,KAAYA,EAAMkK,WAAWC,MAAMC;eACxC,EAAGpK,MAAAA,KAAYA,EAAMC;;;;;mBAKjB,EAAGD,MAAAA,KAAYA,EAAMC,SAAW;aACtC,EAAGD,MAAAA,KAAYA,EAAME,OAAO+G,MAAM1G;;;;;;;;;;;;;sBAazB,EAAGP,MAAAA,KAA6B,EAAjBA,EAAMC;;;;kBAIzB,EAAGD,MAAAA,KAAYA,EAAMC;;;;;;;;;;aAU1B,EAAGD,MAAAA,KAAYA,EAAME,OAAOC,UAAUI;;;;;;;;;;aAUtC,EAAGP,MAAAA,KAAYA,EAAME,OAAOC,UAAUqE;;;;;;eAMpC,EAAGxE,MAAAA,KAAYA,EAAMC;QAC5B,EAAGD,MAAAA,KAA6B,EAAjBA,EAAMC;;wBAEL,EAAGD,MAAAA,KAAYA,EAAME,OAAOC,UAAU4J;qBACzC,EAAG/J,MAAAA,KAAYA,EAAMC;;;;;;;;;;EAYpCoK,IAAc,EAAA3K,EAAA,IAAOyH,EAAA,EAAM;;iBAEhB,EAAGnH,MAAAA,KAA6B,EAAjBA,EAAMC;EAGhCqK,IAAmB,EAAA5K,EAAA,IAAOyH,EAAA,QAAY;iBAC3B,EAAGnH,MAAAA,KAA6B,IAAjBA,EAAMC;EAGhCsK,IAAiB,EAAA7K,EAAA,IAAO,KAAa;iBAC1B,EAAGM,MAAAA,KAA6B,IAAjBA,EAAMC;EAIhCuK,GAA8B9K,EAAA,MAAU;WACnC,EAAGM,MAAAA,KAAYA,EAAME,OAAOI,QAAQmK;;;;oBAI3B,EAAGzK,MAAAA,KAA6B,EAAjBA,EAAMC;;;;aAI5B,EAAGD,MAAAA,KAAYA,EAAME,OAAOC,UAAUqE;;;EAgB7CkG,GAAuE,EAC3EC,OAAAA,EAAS,SACTlJ,QAAAA,KAEe,WAAXkJ,EACK,MAUP,QAACH,GAAD,CAA6B7J,UAAWgK,EAAQlJ,QAP9B,KACH,aAAXkJ,GACFlJ,OAMA,aAAGd,UAAU,eAAgB,IACjB,WAAXgK,GACG,IAAAjN,GAAE,4BACF,IAAAA,GAAE,wBA6/BZ,IAAe,EAAAkN,EAAA,KAl/BoD,EACjEC,eAAAA,EACAC,MAAAA,EACAC,OAAAA,EACAC,KAAAA,EACAC,MAAAA,EAAQ,KACRC,SAAAA,GAAW,EACXC,gBAAAA,MACG,kBACH,MAAMC,GAAO,SACPC,GACA,MAAJD,OAAA,EAAAA,EAAME,qCAAsC3C,GAEvC4C,EAAaC,IAAkB,IAAA7F,WAAkB,IACjD8F,EAAcC,IACnB,IAAA/F,aACKgG,EAAUC,IAAe,IAAAjG,WAAkB,IAC3CkG,EAAaC,IAAkB,IAAAnG,UAAiB,cAChDoG,EAAcC,IAAmB,IAAArG,UACtCiD,IAEKqD,EAAiBC,IAAsB,IAAAvG,WAAkB,IAGzDwG,EAAkBC,IAAuB,IAAAzG,WAAkB,IAC3D0G,EAAeC,KAAoB,IAAA3G,UAAuB,KAC1D4G,GAAkBC,KAAuB,IAAA7G,UAAuB,KAChE8G,GAAcC,KAAmB,IAAA/G,UAAuB,KAGxDgH,GAAcC,KAAmB,IAAAjH,UAAiB,IAEnDkH,GAAuB,OAAV5B,EACb6B,GACY,UAAhBjB,KACC,QAAiB,4BAAsCX,IAEnD6B,GAAsBC,KAC3B,IAAArH,UAAgC,WAC3BsH,GAAsBC,KAA2B,IAAAvH,UAEtD,IAkBIwH,GAA4B,CAChCrM,EACAkH,KAEA,MAAMoF,EAAWH,GAAqBI,QAEtCD,EAAStM,GAASkH,EAClBkF,GAAwBE,QAED5E,IAAnBR,EAAQG,QAAiD,WAAzB4E,IAClCC,GAAwB,WAItBM,GAA6BxM,IACjC,MAAMsM,EAAWH,GAAqBI,QAEtCD,EAASG,OAAOzM,EAAO,GACvBoM,GAAwBE,GACxBJ,GAAwB,YAKxBQ,OAAO,QAAEC,GAAF,SAAWC,GAAUzG,MAAO0G,IAD/B,cAEJC,GAFI,eAGJC,GAHI,eAIJC,GAJI,WAKJC,KACE,QAAmC,UAAU,IAAArQ,GAAE,UAAWmN,GAGxDmD,GAAO,KACXD,KACAnC,GAAY,GACZb,IACAmC,GAAwB,IACxBxB,EAAgB,IAAK1C,KACrBgE,GAAwB,WA4FpBiB,IAAmB,IAAAnK,UACvB,IACE,CAACkD,EAAQ,GAAIkH,EAAcC,KACzB,MAAMC,EAAQ,WAAa,CACzBC,OAAQrH,EACRkH,KAAAA,EACAI,UAAWH,IAEb,OAAOI,EAAA,MAAmB,CACxBC,SAAU,uCAAuCJ,MAChDK,MAAKC,IAAQ,CACdC,KAAMD,EAASE,KAAKC,OAAOjO,KACxBkO,IAAD,CACE1L,MAAO0L,EAAK1L,MACZjC,MAAO2N,EAAKC,SAGhBC,WAAYN,EAASE,KAAKK,YAGhC,IAGIC,IAAgB,IAAA5I,cACnB6I,IACC,MAAMC,EAAWD,IAAE,MAAI1D,OAAJ,EAAIA,EAAc2D,UAErC,IAAKA,GAAYA,EAASjO,MACxB,OAAO,KAGT,IAAI0N,EASJ,OANAxC,EAAcxJ,SAAQwM,IAChBA,EAAOjM,QAAUgM,EAAShM,OAASiM,EAAOjM,QAAUgM,EAASlO,KAC/D2N,EAASQ,MAINR,IAET,OAACpD,OAAD,EAACA,EAAc2D,SAAU/C,IAIrBiD,GAAmB,CAACpN,EAAckB,KACtCsI,GAAgB6D,IAAgB,IAC3BA,EACH,CAACrN,GAAOkB,OAINoM,IAAoB,IAAA1L,UACxB,IACE,CAACkD,EAAQ,GAAIkH,EAAcC,KACzB,MAAMC,EAAQ,WAAa,CACzBC,OAAQrH,EACRkH,KAAAA,EACAI,UAAWH,IAEb,OAAOI,EAAA,MAAmB,CACxBC,SAAU,qCAAqCJ,MAC9CK,MAAKC,IACN,MAAMe,EAAOf,EAASE,KAAKC,OAAOjO,KAC/BkO,IAAD,CACE1L,MAAO0L,EAAK1L,MACZjC,MAAO2N,EAAKC,SAIhB,OADAzC,GAAiBmD,GACV,CAAEd,KAAMc,EAAMT,WAAYN,EAASE,KAAKK,YAGrD,IAGIS,GACJjE,GAAgBA,EAAa2D,WAAa3D,EAAa2D,SAASjO,OAClE,IAAA6C,YAAU,KAEJ0L,IACFJ,GAAiB,WAAYJ,QAE9B,CAACQ,GAAeR,KAEnB,MAAMS,IAAuB,IAAA7L,UAC3B,IACE,CAACkD,EAAQ,GAAIkH,EAAcC,KACzB,MAAMC,EAAQ,eAAiB,CAC7BC,OAAQrH,EACRkH,KAAAA,EACAI,UAAWH,IAEb,OAAOI,EAAA,MAAmB,CACxBC,SAAU,sCAAsCJ,MAC/CK,MAAKC,IACN,MAAMe,EAAOf,EAASE,KAAKC,OAAOjO,KAC/BkO,IAAD,CACE1L,MAAO0L,EAAK1L,MACZjC,MAAO2N,EAAKC,SAIhB,OADAvC,GAAoBiD,GACb,CAAEd,KAAMc,EAAMT,WAAYN,EAASE,KAAKK,YAGrD,IAGIW,GAAoBT,IACxB,MAAMU,EAAYV,IAAE,MAAI1D,OAAJ,EAAIA,EAAcoE,WAEtC,IAAKA,GAAaA,EAAU1O,MAC1B,OAAO,KAGT,IAAI0N,EASJ,OANAtC,GAAiB1J,SAAQiN,IACnBA,EAAK1M,QAAUyM,EAAUzM,OAAS0M,EAAK1M,QAAUyM,EAAU3O,KAC7D2N,EAASiB,MAINjB,GAGHkB,IAAe,IAAAzJ,cAClB0J,IACC,MAAMC,EAAQD,IAAS,MAAIvE,OAAJ,EAAIA,EAAcwE,OAEzC,IAAKA,GAASA,EAAM9O,MAClB,OAAO,KAGT,IAAI0N,EASJ,OANApC,GAAa5J,SAAQwK,IACfA,EAAMjK,QAAU6M,EAAM7M,OAASiK,EAAMjK,QAAU6M,EAAM/O,KACvD2N,EAASxB,MAINwB,IAET,CAACpC,GAAD,MAAehB,OAAf,EAAeA,EAAcwE,QAGzBC,GACJzE,GAAgBA,EAAawE,QAAUxE,EAAawE,MAAM9O,OAC5D,IAAA6C,YAAU,KAEJkM,IACFZ,GAAiB,QAASS,QAE3B,CAACA,GAAcG,KAElB,MAAMC,IAAmB,IAAArM,UACvB,IACE,CAACkD,EAAQ,GAAIkH,EAAcC,KACzB,MAAMC,EAAQ,eAAiB,CAC7BC,OAAQrH,EACRkH,KAAAA,EACAI,UAAWH,IAEb,OAAOI,EAAA,MAAmB,CACxBC,SAAU,kCAAkCJ,MAC3CK,MAAKC,IACN,MAAMe,EAAOf,EAASE,KAAKC,OAAOjO,KAC/BkO,IAAD,CACE1L,MAAO0L,EAAK1L,MACZjC,MAAO2N,EAAKC,SAKhB,OADArC,GAAgB+C,GACT,CAAEd,KAAMc,EAAMT,WAAYN,EAASE,KAAKK,YAGrD,IASImB,GACJtJ,IAEA,MAAM,OAAEN,GAAWM,EAEnBwI,GAAiB9I,EAAOtE,KAAMsE,EAAOpD,QAGjCiN,GACJvJ,IAEA,MAAM,OAAEN,GAAWM,EACb1D,GAASoD,EAAOpD,MAIpBkM,GAAiB9I,EAAOtE,KADZ,IAAVkB,EAC4B,KAI5BA,EAAQkN,KAAKC,IAAInN,EAnuBL,GAmuB2BA,KAiI7C,IAAAY,YAAU,KACR,GACE6I,KACC,MAACpB,IAAAA,EAAcvK,KAAW,MAAL+J,OAAA,EAAAA,EAAO/J,MAAOuK,EAAavK,IAAOyK,GAAYX,IAEpE,GAAIC,GAAsB,OAAbA,EAAM/J,KAAgBuM,KAAYE,GAAY,CACzD,MAAMzM,EAAK+J,EAAM/J,IAAM,EACvB0M,GAAc1M,SAGf2L,MACCpB,GAAgBA,EAAavK,IAAOyK,GAAYX,KAElDU,EAAgB,IAAK1C,KACrBkE,GAAwB,IACxBF,GAAwB,aAEzB,CAAC/B,KAEJ,IAAAjH,YAAU,KACR,GAAI0J,GAAU,CAEZ,MAAMN,GAAYM,GAAStF,YAAc,IAAIxH,KAAIoH,IAC/C,MAAMwI,EACqC,iBAAlCxI,EAAQyI,sBACXC,KAAKC,MAAM3I,EAAQyI,uBACnB,GACN,MAAO,CACLtI,OAAQH,EAAQtD,KAEhB0D,WAAYoI,EAAOhK,QAAUwB,EAAQyI,sBACrCrM,QAASiH,MAIb6B,GAAwBE,GACxBJ,GACEI,EAASwD,SAAWvF,EAA2BuF,OAC3C,SACA,UAEN9E,EAAe4B,GAASuC,MAAQ,QAAU,aAC1CjE,EACE0B,GAASuC,OACLvC,GAASmD,eACTjI,GAEN,MAAMkI,EACsC,iBAAnCpD,GAASlE,sBACZkH,KAAKC,MAAMjD,GAASlE,uBACpBkE,GAASlE,sBAEf4C,EAAgD,aAA5BsB,GAASjE,gBAEzBiE,GAASuC,OACXrD,GAAiBc,GAASuC,MAAsBc,UAElD7E,EAAmBwB,GAAShE,kBAE5BgC,EAAgB,IACXgC,GACHuC,MAAOvC,GAASuC,MACZF,GAAarC,GAASuC,QAAU,CAC9B7M,MAAQsK,GAASuC,MAAsB/O,GACvCC,MAAQuM,GAASuC,MAAsBe,iBAEzCxI,EACJqH,UAAWnC,GAASmC,UAChBD,GAAiBlC,GAASmC,YAAc,CACtCzM,MAAQsK,GAASmC,UAA8B3O,GAC/CC,MAAQuM,GAASmC,UAA8BoB,sBAEjDzI,EACJ4G,SAAU1B,GAAS0B,SACfF,GAAcxB,GAAS0B,WAAa,CAClChM,MAAQsK,GAAS0B,SAA4BlO,GAC7CC,MAAQuM,GAAS0B,SAA4B8B,oBAE/C1I,EACJc,SAAc,MAAL2B,OAAA,EAAAA,EAAO3B,SAAU,IAAI1I,KAAIuQ,IAAK,CACrC/N,MAAQ+N,EAAqB/N,OAAS+N,EAAMjQ,GAC5CC,MACGgQ,EAAqBhQ,OACtB,GAAIgQ,EAAgBC,cAAeD,EAAgBE,gBAGvD7H,sBAC8B,aAA5BkE,GAASjE,eACL,CACE6H,GAAI,YAENR,OAGT,CAACpD,KAGJ,MAAM6D,GAAmB9F,GAAgB,GAuBzC,OAtBA,IAAAzH,YAAU,KAhIO,IAAK,MAUlB,MARAyH,GAAY,SACZA,EAAavJ,OAAb,EAAmB0O,QADnB,SAEAnF,EAAanC,SAAb,EAAqBsH,QAFrB,SAGAnF,EAAatC,UAAb,EAAsByH,aACWpI,IAAjCiD,EAAapC,kBACK,cAAhBwC,GAAiCJ,EAAaoE,WAC7B,UAAhBhE,GAA6BJ,EAAawE,QAxBf,MAChC,IAAKhD,GAAqB2D,OACxB,OAAO,EAGT,IAAIY,GAAU,EAQd,OANAvE,GAAqBpK,SAAQmF,IAAU,MAC/BA,EAAQG,QAAV,SAAoBH,EAAQI,aAAR,EAAoBwI,SAC1CY,GAAU,MAIPA,GAYLC,KAEIvG,GAGAO,EAAa2D,UAAf,SACA3D,EAAalC,MAAb,EAAkBqH,SACjBzE,GAAqB,SAACV,EAAajC,wBAAb,EAAoC8H,MAC1DnF,QACmD3D,KAAlD,SAAAiD,EAAajC,4BAAb,IAAoCkI,aANtClG,GAAe,GAajBA,GAAe,KAyGhB,CACD+F,GAAiBrP,KACjBqP,GAAiBjI,OACjBiI,GAAiBnC,SACjBmC,GAAiBhI,IACjBgI,GAAiB/H,sBACjB+H,GAAiBpI,QACjBoI,GAAiBlI,gBACjBkI,GAAiB1B,UACjB0B,GAAiBtB,MACjBpE,EACAoB,GACAd,IAIER,GAAYX,GACdY,GAAY,IAIZ,QAAChC,GAAD,CACEjJ,UAAU,qBACVgR,YAAU,EACVC,qBAAsBrG,EACtBsG,uBA1iBW,KAAK,UAElB,MAAMzJ,EAA0B,GAEhC6E,GAAqBpK,SAAQmF,IACvBA,EAAQG,QAAUH,EAAQI,WAAWwI,QACvCxI,EAAWnF,KAAK,CACdwN,sBAAuB,CACrBjK,OAAQwB,EAAQI,YAElB1D,KAAMsD,EAAQG,YAKpB,MAAM2J,EAA8C,UAAhBjG,IAA4BX,EAC1DyD,EAAY,IACblD,EACH/G,KAAMwG,EAAW,SAAW,QAC5BxB,iBAAkBoI,GAA+B7F,EACjDxC,eAAgB0C,EAAmB,WAAa,WAChD3C,sBAAuB2C,EACnB,GADmC,MAEnCV,OAFmC,EAEnCA,EAAcjC,sBAClByG,MAAuB,UAAhBpE,EAAA,MAA0BJ,GAA1B,SAA0BA,EAAcwE,YAAxC,EAA0B,EAAqB7M,MAAQ,KAC9DyM,UACkB,cAAhBhE,EAAA,MAA8BJ,GAA9B,SAA8BA,EAAcoE,gBAA5C,EAA8B,EAAyBzM,MAAQ,KACjEgM,SAAQ,MAAE3D,GAAF,SAAEA,EAAc2D,eAAhB,EAAE,EAAwBhM,MAClCkG,SAAqB,MAAZmC,OAAA,EAAAA,EAAcnC,SAAU,IAAI1I,KACnCuQ,GAAUA,EAAqB/N,OAAS+N,EAAMjQ,KAEhDkH,WAAAA,EACAyI,cACkB,cAAhBhF,EACIjD,EACAmD,GAAgBnD,GASxB,GANI+F,EAAKvG,aAAeuG,EAAKvG,WAAWwI,eAC/BjC,EAAKvG,WAGduG,EAAKoD,iBAAmB,SAEpBlF,IAEF,GAAIpB,GAAgBA,EAAavK,GAAI,CACnC,MAAM8Q,EAAYvG,EAAavK,UAExByN,EAAKzN,UACLyN,EAAKsD,kBACLtD,EAAKuD,sBACLvD,EAAKwD,kBACLxD,EAAKyD,kBACLzD,EAAK0D,oBAEZvE,GAAekE,EAAWrD,GAAMF,MAAKC,IAC9BA,IAILvD,GAAgB,IAAAzN,GAAE,aAAciR,EAAKjK,OAEjCoG,GACFA,IAGFkD,eAGKvC,GAEToC,GAAec,GAAMF,MAAKC,IACnBA,IAILvD,GAAgB,IAAAzN,GAAE,aAAciR,EAAKjK,OAEjCoG,GACFA,EAAM4D,GAGRV,UAwdFjD,OAAQiD,GACRsE,kBAAmBzF,IAAa,IAAAnP,GAAE,SAAU,IAAAA,GAAE,OAC9CsN,KAAMA,EACNuH,MAAM,OACNC,SAAS,SACTpR,OACE,kBACGyL,IACC,QAACjI,EAAA,UAAD,CAAeV,IAAK,MAEpB,QAACU,EAAA,YAAD,CAAiBV,IAAK,KAEvB2I,IAAc3B,GACX,IAAAxN,GAAE,eACFmP,IACA,IAAAnP,GAAE,cACFwN,GACA,IAAAxN,GAAE,eACF,IAAAA,GAAE,gBAIV,QAACoM,GAAD,MACE,eAAKnJ,UAAU,mBACb,QAAC4G,GAAD,MACE,eAAK5G,UAAU,iBACZuK,GAAW,IAAAxN,GAAE,gBAAiB,IAAAA,GAAE,eACjC,gBAAMiD,UAAU,YAAhB,OAEF,eAAKA,UAAU,oBACb,iBACE+D,KAAK,OACLxC,KAAK,OACLkB,MAAOqI,EAAeA,EAAavJ,KAAO,GAC1CyF,YAAauD,GAAW,IAAAxN,GAAE,gBAAiB,IAAAA,GAAE,cAC7CyG,SAAUiM,QAIhB,QAAC7I,GAAD,MACE,eAAK5G,UAAU,kBACZ,IAAAjD,GAAE,WACH,gBAAMiD,UAAU,YAAhB,OAEF,eAA+BA,UAAU,oBACvC,QAAC8R,EAAA,GAAD,CACExO,WAAW,IAAAvG,GAAE,UACbgV,YAAU,EACVxQ,KAAK,SACLyQ,KAAK,WACLvP,OACe,MAAZqI,OAAA,EAAAA,EAAcnC,SAGP,GAEVlF,QAAS6J,GACT9J,SA/SUf,IACtBkM,GAAiB,SAAUlM,GAAS,UAkT9B,QAACmE,GAAD,MACE,eAAK5G,UAAU,kBAAiB,IAAAjD,GAAE,iBAClC,eAAKiD,UAAU,oBACb,iBACE+D,KAAK,OACLxC,KAAK,cACLkB,MAAOqI,GAAeA,EAAamH,aAAoB,GACvDjL,aAAa,IAAAjK,GAAE,eACfyG,SAAUiM,QAIhB,QAACnG,GAAD,MACE,QAACtI,EAAA,EAAD,CACEwC,SA9SY0O,IACtBvD,GAAiB,SAAUuD,IA8SjBA,SAASpH,GAAeA,EAAaxC,UAEvC,eAAKtI,UAAU,gBAAf,aAGJ,eAAKA,UAAU,mBACXuK,IACA,eAAKvK,UAAU,qBACb,QAACqJ,GAAD,MACE,mBAAK,IAAAtM,GAAE,sBAET,QAAC6J,GAAD,MACE,eAAK5G,UAAU,kBACZ,IAAAjD,GAAE,aACH,gBAAMiD,UAAU,YAAhB,OAEF,eAAKA,UAAU,oBACb,QAAC8R,EAAA,GAAD,CACExO,WAAW,IAAAvG,GAAE,YACbwE,KAAK,SACLkB,MACc,MAAZqI,GAAA,SAAAA,EAAc2D,WAAd,EAAwBjO,OAAxB,MACAsK,GADA,SACAA,EAAc2D,WAAd,EAAwBhM,MACpB,CACEA,MAAOqI,EAAa2D,SAAShM,MAC7BjC,MAAOsK,EAAa2D,SAASjO,YAE/BqH,EAENpE,QAASoL,GACTrL,SA5VMf,IACtBkM,GAAiB,WAAYlM,GAAS,UA+V5B,QAACmE,GAAD,MACE,eAAK5G,UAAU,kBACZ,IAAAjD,GAAE,cACH,gBAAMiD,UAAU,YAAhB,OAEF,QAACmS,EAAA,EAAD,CACE5Q,KAAK,MACL6Q,SAAS,MACTC,kBAAkB,EAClBC,SAAU,GACVC,SAAU,GACV/O,SAnXKf,IACnBkM,GAAiB,MAAOlM,GAAS,KAmXnB+P,UAAU,EACVC,aAAY,MAAE1F,QAAF,EAAEA,GAAUnE,IACxBjI,IAAG,MAAEmK,OAAF,EAAEA,EAAcvK,OAGvB,eAAKP,UAAU,0BACb,QAAC4G,GAAD,MACE,eAAK5G,UAAU,kBACZ,IAAAjD,GAAE,wBACH,gBAAMiD,UAAU,YAAhB,OAEF,eAAKA,UAAU,oBACb,QAAC8R,EAAA,GAAD,CACExO,WAAW,IAAAvG,GAAE,aACbyG,SAvWOmN,IAAgB,MACzClF,EAA2B,aAAPkF,GAEpB,MAAMd,EAAS,CACbc,GAAAA,EACAI,UAAWjG,EAAY,SACnBA,EAAajC,4BADM,EACnB,EAAoCkI,eACpClJ,GAGN8G,GAAiB,wBAAyBkB,IA8VxB7I,YAAY,YACZvE,OACc,MAAZqI,GAAA,SAAAA,EAAcjC,4BAAd,IAAqC8H,UAAM9I,EAE7CpE,QAASyE,OAIf,QAACtB,GAAD,MACE,eAAK5G,UAAU,kBACZ,IAAAjD,GAAE,SAAU,KACb,QAAC2V,EAAA,EAAD,CACEpS,SAAS,IAAAvD,GACP,wDAGJ,gBAAMiD,UAAU,YAAhB,OAEF,eAAKA,UAAU,oBACb,iBACE+D,KAAK,SACLxC,KAAK,YACLmF,SAAU8E,EACV/I,MACEqI,GACAA,EAAajC,4BAEXhB,IADFiD,EAAajC,sBAAsBkI,UAE/BjG,EAAajC,sBAAsBkI,UACnC,GAEN/J,aAAa,IAAAjK,GAAE,SACfyG,SA3XO2C,IAA8C,MACvE,MAAM,OAAEN,GAAWM,EAEb0J,EAAS,CACbc,GAAI7F,EAAY,SAAGA,EAAajC,4BAAhB,EAAG,EAAoC8H,QAAK9I,EAC5DkJ,UAAWlL,EAAOpD,OAGpBkM,GAAiB,wBAAyBkB,WA0XpC,eAAK7P,UAAU,oBACb,QAACqJ,GAAD,MACE,kBACGkB,GACG,IAAAxN,GAAE,oBACF,IAAAA,GAAE,8BAER,gBAAMiD,UAAU,YAAhB,OAEF,QAACqF,EAAD,CACE5C,OAAmB,MAAZqI,OAAA,EAAAA,EAActC,UAAWJ,GAChC5E,SAAUmP,GAAUhE,GAAiB,UAAWgE,MAElD,eAAK3S,UAAU,kBAAiB,IAAAjD,GAAE,cAClC,eACEiD,UAAU,kBACVuD,IAAMlE,GAx3BQ,CAACA,GAAyB,IAAG;YAC5B,EAAjBA,EAAMC;EAu3B2BsT,CAAoBvT,KAEnD,QAACyD,EAAA,EAAD,CACEC,iBAtYYC,IACxB2L,GAAiB,WAAY3L,IAsYjBA,SAAQ,MAAE8H,OAAF,EAAEA,EAAc9H,SACxBC,SAAS,WAGb,QAACoG,GAAD,MACE,mBAAK,IAAAtM,GAAE,wBAET,QAAC6J,GAAD,MACE,eAAK5G,UAAU,kBACZ,IAAAjD,GAAE,kBACH,gBAAMiD,UAAU,YAAhB,OAEF,eAAKA,UAAU,oBACb,QAAC8R,EAAA,GAAD,CACExO,WAAW,IAAAvG,GAAE,iBACbiK,aAAa,IAAAjK,GAAE,iBACfyG,SA3ZcqP,IAC5BlE,GAAiB,gBAAiBkE,IA2ZpBpQ,MACyC,iBAAvC,MAAOqI,OAAP,EAAOA,EAAcrC,eAArB,MACIqC,OADJ,EACIA,EAAcrC,cA9mCZ,GAinCRhF,QAAS0E,EACTzE,gBAAgB,QAAmB,cAIzC,QAACkD,GAAD,MACE,eAAK5G,UAAU,kBACZ,IAAAjD,GAAE,oBACH,gBAAMiD,UAAU,YAAhB,OAEF,eAAKA,UAAU,oBACb,iBACE+D,KAAK,SACL+O,IAAI,IACJvR,KAAK,kBACLkB,OAAmB,MAAZqI,OAAA,EAAAA,EAAcpC,kBAAmB,GACxC1B,aAAa,IAAAjK,GAAE,mBACfyG,SAAUkM,MAEZ,gBAAM1P,UAAU,eAAhB,cAGFuK,IACA,QAAC3D,GAAD,MACE,eAAK5G,UAAU,kBAAiB,IAAAjD,GAAE,kBAClC,eAAKiD,UAAU,oBACb,iBACE+D,KAAK,SACL+O,IAAI,IACJvR,KAAK,eACLkB,OAAmB,MAAZqI,OAAA,EAAAA,EAAc9B,eAAgB,GACrChC,aAAa,IAAAjK,GAAE,mBACfyG,SAAUkM,MAEZ,gBAAM1P,UAAU,eAAhB,eAKR,eAAKA,UAAU,mBACb,QAACqJ,GAAD,MACE,mBAAK,IAAAtM,GAAE,qBACP,gBAAMiD,UAAU,YAAhB,OAEF,QAACwG,EAAA,QAAD,CAAahD,SArcM2C,IAC3B,MAAM,OAAEN,GAAWM,EAEnBoF,GAAmB,GAEnBwH,YAAW,IAAM5H,EAAetF,EAAOpD,QAAQ,MAgcKA,MAAOyI,IACjD,QAACxB,GAAD,CAAajH,MAAM,cAAa,IAAA1F,GAAE,eAClC,QAAC2M,GAAD,CAAajH,MAAM,UAAS,IAAA1F,GAAE,YAEhC,QAAC+U,EAAA,GAAD,CACExO,WAAW,IAAAvG,GAAE,SACbwG,KAAG,QAAE,CACHyP,QAAyB,UAAhB9H,EAA0B,SAAW,QAD7C,OAGH3J,KAAK,QACLkB,MACc,MAAZqI,GAAA,SAAAA,EAAcwE,QAAd,EAAqB9O,OAArB,MAA8BsK,GAA9B,SAA8BA,EAAcwE,QAAd,EAAqB7M,MAC/C,CACEA,MAAOqI,EAAawE,MAAM7M,MAC1BjC,MAAOsK,EAAawE,MAAM9O,YAE5BqH,EAENpE,QAAS+L,GACThM,SAlgBW8L,IAhDW,CAACA,IACjC1B,EAAA,MAAmB,CACjBC,SAAU,iBAAiByB,EAAM7M,UAChCqL,MAAKC,GAAY9B,GAAgB8B,EAASE,KAAKC,OAAOkC,aA8CzD6C,CAA0B3D,GAC1BX,GAAiB,QAASW,QAASzH,GACnC8G,GAAiB,YAAa,UAigBtB,QAACmD,EAAA,GAAD,CACExO,WAAW,IAAAvG,GAAE,aACbwG,KAAG,QAAE,CACHyP,QAAyB,cAAhB9H,EAA8B,SAAW,QADjD,OAGH3J,KAAK,YACLkB,MACc,MAAZqI,GAAA,SAAAA,EAAcoE,YAAd,EAAyB1O,OAAzB,MAAkCsK,GAAlC,SAAkCA,EAAcoE,YAAd,EAAyBzM,MACvD,CACEA,MAAOqI,EAAaoE,UAAUzM,MAC9BjC,MAAOsK,EAAaoE,UAAU1O,YAEhCqH,EAENpE,QAASuL,GACTxL,SAxhBe0L,IACzBP,GAAiB,YAAaO,QAAarH,GAC3C8G,GAAiB,QAAS,SAwhBjBxC,KACC,yBACE,eAAKnM,UAAU,qBACb,QAAC2J,GAAD,CACEnG,SAveM2C,IACtB,MAAM,OAAEN,GAAWM,EAEnBkF,EAAgBxF,EAAOpD,QAqePA,MAAO2I,IAEP,QAAC1B,GAAD,CAAajH,MAAM,QAAO,IAAA1F,GAAE,iBAC5B,QAAC2M,GAAD,CAAajH,MAAM,QAAO,IAAA1F,GAAE,gBAC3BgL,EAA+BmL,SAASlH,MACvC,QAACtC,GAAD,CAAajH,MAAM,SAChB,IAAA1F,GAAE,qBAObwN,GAA4B,cAAhBW,KACZ,eAAKlL,UAAU,qBACb,QAAC4J,GAAD,CAEE5J,UAAU,WACVkS,QAAS5G,EACT9H,SArfiB2C,IAC/BoF,EAAmBpF,EAAMN,OAAOqM,WAgfpB,6CAUJ,QAAC7I,GAAD,MACE,mBAAK,IAAAtM,GAAE,yBACP,gBAAMiD,UAAU,YAAhB,MAEDsM,GAAqBrM,KAAI,CAACkT,EAAqBC,KAC9C,QAAChM,EAAD,CACEC,QAAS8L,EACThT,MAAOiT,EACPzS,IAAK,sBAAsByS,IAC3B9L,SAAUkF,GACVjF,SAAUoF,QAGd,QAAC5C,GAAD,CAEEC,OAAQoC,GACRtL,QA97Bc,KACxB,MAAM2L,EAAkCH,GAAqBI,QAE7DD,EAASnK,KAAK,CACZmF,WAAY,GACZhE,QAASiH,IAGX6B,GAAwBE,GACxBJ,GACEI,EAASwD,SAAWvF,EAA2BuF,OAC3C,SACA,sBCpZJoD,GAA8C,CAClD,CAAC,cAAqB,IAAAtW,GAAE,WACxB,CAAC,cAAqB,IAAAA,GAAE,WACxB,CAAC,YAAmB,IAAAA,GAAE,SACtB,CAAC,WAAkB,IAAAA,GAAE,iBACrB,CAAC,YAAmB,IAAAA,GAAE,aAalBuW,IAAe,EAAAC,EAAA,GAAuC,CAC1DC,YAAa,QACbhM,OAAQ,SACRqG,SAAU,oBAGN4F,GAAmB1U,EAAA,MAAU;;eAEpB,EAAGM,MAAAA,KAA6B,EAAjBA,EAAMC;MAC9B,EAAGD,MAAAA,KAA6B,EAAjBA,EAAMC;sBACL,EAAGD,MAAAA,KAAYA,EAAME,OAAOC,UAAUkU;EAmf5D,IAAe,EAAAzJ,EAAA,KAhff,UAAmB,eACjBC,EADiB,gBAEjByJ,GAAkB,EAFD,KAGjBC,EAHiB,gBAIjBpJ,IAEA,MAAM/J,EAAQkT,GAAkB,IAAA5W,GAAE,WAAY,IAAAA,GAAE,SAC1C8W,EAAcF,GAAkB,IAAA5W,GAAE,YAAa,IAAAA,GAAE,UACjD+W,EAAWH,EAAkB,UAAY,SACzCI,GAAiB,IAAA5Q,UACrB,IAAM,CACJ,CACE5C,GAAI,OACJyT,SAAU,WACVvR,MAAOkR,EAAkB,SAAW,WAGxC,CAACA,KAGD9G,OAAO,QACLC,EACAmH,cAAeC,EACfC,mBAAoBC,EAHf,kBAILC,EAJK,YAKLC,GANE,QAQJC,EARI,UASJC,EATI,sBAUJC,EAVI,YAWJC,EAXI,iBAYJC,IACE,QACF,UACA,IAAA5X,GAAE,WACFmN,GACA,OACArC,EACAkM,IAGI,eAAE5G,IAAmB,QACzB,UACA,IAAApQ,GAAE,WACFmN,IAGK0K,EAAgBC,IAAqB,IAAA7P,WAAkB,IACvD8F,EAAcC,IAAmB,IAAA/F,UACtC,OAEK8P,EAAsBC,IAC3B,IAAA/P,UAA6B,MAG/B,SAASgQ,EAAgB1K,GACvBS,EAAgBT,GAChBuK,GAAkB,GAGpB,MAEMI,EAAUV,EAAQ,aAClBW,EAAYX,EAAQ,aACpBY,EAAYZ,EAAQ,cAE1B,IAAAlR,YAAU,KACJgR,GAAqBa,GACvBP,MAED,CAAChB,IAEJ,MAmCMyB,EAAc,CAAC,CAAE7U,GAAI,OAAQ8U,MAAM,IAEnCC,GAAe,IAAA3P,cACnB,CAACqI,EAAmBkE,KAClB,GAAIlE,GAAQA,EAAKzN,GAAI,CACnB,MAAM8Q,EAAYrD,EAAKzN,GACjBgV,EAAW,IAAInB,GAErBK,EACEc,EAAStV,KAAIqK,IACF,MAALA,OAAA,EAAAA,EAAO/J,MAAOyN,EAAKzN,GACd,IACF+J,EACHhC,OAAQ4J,GAIL5H,KAIX6C,EAAekE,EAAW,CAAE/I,OAAQ4J,IAAW,GAAO,GACnDpE,OACA0H,OAAM,IAAMf,EAAsBc,QAGzC,CAACnB,EAAQK,EAAuBtH,IAG5BsI,GAAU,IAAAtS,UACd,IAAM,CACJ,CACEuS,KAAM,EACJC,KACEJ,UAAY/D,WAAYoE,QAG1B,QAACC,EAAA,EAAD,CACEhJ,MAAO+I,EACPjC,gBAAiBA,IAGrBmC,SAAU,aACVC,KAAM,KACNC,eAAe,GAEjB,CACEN,KAAM,EACJC,KACEJ,UAAYhE,eAAgB0E,OAG9BA,EACI,QAAWA,GAAcC,QAAQ1T,OAAO,MACxC,GACNsT,SAAU,iBACVK,QAAQ,IAAApZ,GAAE,YACVgZ,KAAM,MAER,CACED,SAAU,OACVK,QAAQ,IAAApZ,GAAE,QACVgZ,KAAM,MAER,CACEI,QAAQ,IAAApZ,GAAE,YACV+Y,SAAU,oBACVC,KAAM,KACNL,KAAM,EACJC,KACEJ,UAAYa,kBAAAA,EAAoB,GAAIpT,SAAAA,QAGtC,QAACkB,EAAA,EAAD,CACEzD,MAAO,GAAG2V,MAAsBpT,KAChCtC,UAAU,YAEV,oBAAO,GAAG0V,MAAsBpT,QAItC,CACE0S,KAAM,EACJC,KACEJ,UAAY9N,WAAAA,OAGdA,EAAWxH,KAAKoW,IACd,QAACvS,EAAD,CAAenD,IAAK0V,EAAE9V,GAAIwD,KAAMsS,EAAEtS,SAEtC+R,SAAU,aACVK,QAAQ,IAAApZ,GAAE,uBACViZ,eAAe,EACfD,KAAM,MAER,CACEL,KAAM,EACJC,KACEJ,UAAYjE,WAAAA,OAGdA,EAAa,GAAGA,EAAWb,cAAca,EAAWZ,YAAc,GACpEyF,QAAQ,IAAApZ,GAAE,cACVwD,GAAI,aACJyV,eAAe,EACfD,KAAM,MAER,CACEL,KAAM,EACJC,KACEJ,UAAY5M,OAAAA,EAAS,SAEd,QAAC2N,EAAA,EAAD,CAAUC,MAAO5N,IAC5BwN,QAAQ,IAAApZ,GAAE,UACVwD,GAAI,SACJyV,eAAe,EACfD,KAAM,MAER,CACEL,KAAM,EACJC,KACEJ,UAAYiB,2BAA4BC,QAEjC,gBAAMzW,UAAU,WAAWyW,GACtCN,QAAQ,IAAApZ,GAAE,YACV+Y,SAAU,6BACVC,KAAM,MAER,CACEL,KAAM,EAAGC,KAAOJ,SAAAA,OACd,QAACvU,EAAA,EAAD,CAEEkR,QAASqD,EAASjN,OAClBxH,QAAUoR,GAAqBoD,EAAaC,EAAUrD,GACtD6D,KAAK,UAGTI,QAAQ,IAAApZ,GAAE,UACV+Y,SAAU,SACVvV,GAAI,SACJwV,KAAM,MAER,CACEL,KAAM,EAAGC,KAAOJ,SAAAA,OACd,MAAMmB,GAAU,UAMV3W,EAAU,CACdkV,EACI,CACEzU,MAAO,uBACPF,SAAS,IAAAvD,GAAE,iBACX2D,UAAW,SACXL,KAAM,OACNS,QAVuB,IAC7B4V,EAAQpU,KAAK,IAAIiT,EAASxR,KAAK4S,iBAAiBpB,EAAShV,WAWrD,KACJ0U,EACI,CACEzU,MAAO,cACPF,SAAS,IAAAvD,GAAE,QACX2D,UAAW,SACXL,KAAM,OACNS,QArBW,IAAMkU,EAAgBO,IAuBnC,KACJL,EACI,CACE1U,MAAO,gBACPF,SAAS,IAAAvD,GAAE,UACX2D,UAAW,SACXL,KAAM,QACNS,QA7Ba,IAAMiU,EAAwBQ,IA+B7C,MACJ7H,QAAOS,GAAiB,OAATA,IAEjB,OAAO,QAACrO,EAAA,EAAD,CAAYC,QAASA,KAE9BoW,QAAQ,IAAApZ,GAAE,WACVwD,GAAI,UACJqW,QAAS3B,IAAYC,EACrBc,eAAe,EACfD,KAAM,QAGV,CAACb,EAAWD,EAAStB,EAAiB2B,IAGlCuB,EAA0C,GAE5C1B,GACF0B,EAAevU,KAAK,CAClBf,MACE,yBACE,aAAGvB,UAAU,eADf,IACgCS,GAGlCqW,YAAa,UACbhW,QAAS,KACPkU,EAAgB,SAIlBE,GACF2B,EAAevU,KAAK,CAClBf,MAAM,IAAAxE,GAAE,eACR+D,QAAS6T,EACTmC,YAAa,YACb,YAAa,uBAIjB,MAAMC,GAAa,CACjBtW,OAAO,IAAA1D,GAAE,YAAa8W,GACtBmD,MAAO,qBACPC,aAAc,IAAMjC,EAAgB,MACpCkC,WAAY/B,GACV,yBACE,aAAGnV,UAAU,eADf,IACgCS,EAAO,KAErC,MAGA0W,IAAmB,IAAAhU,UACvB,IAAM,CACJ,CACEgT,QAAQ,IAAApZ,GAAE,SACVwD,GAAI,SACJ8F,MAAO,SACP2N,SAAU,qBACVoD,gBAAiB,MACjBC,cAAc,QACZ,SACA,UACA,SAAmBC,IACjB,IAAAva,GAAE,qDAAsDua,KAE1D1D,GAEF2D,UAAU,GAEZ,CACEpB,QAAQ,IAAApZ,GAAE,cACVwD,GAAI,aACJ8F,MAAO,SACP2N,SAAU,oBACVoD,gBAAiB,MACjBC,cAAc,QACZ,SACA,cACA,SAAmBC,IACjB,IAAAva,GAAE,yDAA0Dua,KAE9D1D,GAEF2D,UAAU,GAEZ,CACEpB,QAAQ,IAAApZ,GAAE,UACVwD,GAAI,aACJ8F,MAAO,SACP2N,SAAU,WACVoD,gBAAiB,MACjBI,QAAS,CACP,CACEhX,MAAO6S,GAAgB,aACvB5Q,MAAO,aAET,CACEjC,MAAO6S,GAAgB,aACvB5Q,MAAO,aAET,CAAEjC,MAAO6S,GAAgB,WAAmB5Q,MAAO,WACnD,CAAEjC,MAAO6S,GAAgB,UAAkB5Q,MAAO,UAClD,CAAEjC,MAAO6S,GAAgB,WAAmB5Q,MAAO,aAGvD,CACE0T,QAAQ,IAAApZ,GAAE,UACVwD,GAAI,OACJ8F,MAAO,SACP2N,SAAU,gBAGd,IAGF,OACE,yBACE,QAACyD,EAAA,EAAD,CACEC,YAAa5D,EACbvS,MAAM,IAAAxE,GAAE,oBACR4a,KAAM,CACJ,CACEpW,KAAM,SACNf,OAAO,IAAAzD,GAAE,UACT6a,IAAK,eACLC,YAAY,EACZ,YAAa,cAEf,CACEtW,KAAM,UACNf,OAAO,IAAAzD,GAAE,WACT6a,IAAK,gBACLC,YAAY,EACZ,YAAa,gBAGjBC,QAASjB,IAET,QAACpD,GAAD,MACE,QAAC,EAAD,CAAa7O,UAAW0P,EAAazP,OAAQ,IAAM6P,SAGvD,QAAC,GAAD,CACEpK,MAAOQ,EACPZ,eAAgBA,EAChB6N,MAAOjN,EACPV,OAAQ,KACNyK,GAAkB,GAClB9J,EAAgB,MAChB2J,KAEFrK,KAAMuK,EACNrK,SAAUoJ,EACVhT,KAAiB,MAAZmK,OAAA,EAAAA,EAAcvK,KAxXC,IAAG,IAAIyX,MAAOC,cA0XnCnD,IACC,QAACoD,EAAA,EAAD,CACEjG,aAAa,IAAAlV,GACX,0CACA+X,EAAqBvT,MAEvB4W,UAAW,KACLrD,GArXY,GAAGvU,GAAAA,EAAIgB,KAAAA,MAC/BqM,EAAA,SAAsB,CACpBC,SAAU,kBAAkBtN,MAC3BuN,MACD,KACE4G,IACAK,EAAwB,MACxBvK,GAAgB,IAAAzN,GAAE,cAAewE,OAEnC,SAAmB+V,GACjBpN,GAAe,IAAAnN,GAAE,qCAAsCwE,EAAM+V,QA4WvDc,CAAkBtD,IAGtB1K,OAAQ,IAAM2K,EAAwB,MACtCsD,MAAI,EACJ5X,OAAO,IAAA1D,GAAE,aAAc0D,MAG3B,QAAC6X,EAAA,EAAD,CACE7X,OAAO,IAAA1D,GAAE,kBACTkV,aAAa,IAAAlV,GACX,mDACA8W,GAEFsE,UArXwBI,MAAOC,IACnC,IACE,MAAM,QAAEC,SAAkBnF,GACxBkF,EAAevY,KAAI,EAAGM,GAAAA,KAASA,KAEjCmU,IACAlK,EAAgBiO,GAChB,MAAO7S,IACP,SAAmB0R,GACjBpN,GACE,IAAAnN,GACE,kDACA8W,EACAyD,KALN,CAQE1R,OAuWC8S,IACC,MAAMC,EAA4CzD,EAC9C,CACE,CACEvU,IAAK,SACLY,MAAM,IAAAxE,GAAE,UACR6b,SAAUF,EACV3U,KAAM,WAGV,GACJ,OACE,QAAC8U,EAAA,EAAD,CACE7Y,UAAU,mBACVyV,QAASA,EACTnH,MAAO4F,EACPlG,KAAMoG,EACN2C,WAAYA,GACZvC,UAAWA,EACX2C,QAASA,GACT/B,YAAaA,EACbtI,QAASA,EACT6L,YAAaA,EACbtE,kBAAmBA,EACnByE,kBAAmBnE,EACnBnH,SAxgBI,a,kHCzBlB,SAASuL,EACP/O,EACA2J,EACAtU,GAEA,OAAQ2K,GACN,KAAK,YACH,OAAO3K,EAAME,OAAOI,QAAQC,KAC9B,KAAK,UACH,OAAOP,EAAME,OAAO+G,MAAM1G,KAC5B,KAAK,YACH,OAAO+T,EACHtU,EAAME,OAAOyZ,QAAQpZ,KACrBP,EAAME,OAAO+K,MAAM1K,KACzB,KAAK,SACH,OAAOP,EAAME,OAAOyZ,QAAQpZ,KAC9B,KAAK,UACH,OAAOP,EAAME,OAAO+K,MAAM1K,KAC5B,QACE,OAAOP,EAAME,OAAOC,UAAUI,MAItB,SAAUiW,GAAgB,MACtChJ,EADsC,gBAEtC8G,GAAkB,IAKlB,MAAMtU,GAAQ,UACR4Z,EAAkB,CACtB5Y,KAAM,UACNG,MAAO,GACPwJ,OAAQ,IAEV,OAAQ6C,GACN,KAAK,YACHoM,EAAgB5Y,KAAOsT,EACnB,UACA,oBACJsF,EAAgBzY,MAAQmT,GACpB,IAAA5W,GAAE,gBACF,IAAAA,GAAE,sCACNkc,EAAgBjP,OAAS,YACzB,MACF,KAAK,YACHiP,EAAgB5Y,KAAO,YACvB4Y,EAAgBzY,MAAQmT,GACpB,IAAA5W,GAAE,mBACF,IAAAA,GAAE,iBACNkc,EAAgBjP,OAAS,YACzB,MACF,KAAK,UACHiP,EAAgB5Y,KAAO,WACvB4Y,EAAgBzY,MAAQmT,GACpB,IAAA5W,GAAE,kBACF,IAAAA,GAAE,gBACNkc,EAAgBjP,OAAS,UACzB,MACF,KAAK,SACHiP,EAAgB5Y,KAAO,UACvB4Y,EAAgBzY,OAAQ,IAAAzD,GAAE,qBAC1Bkc,EAAgBjP,OAAS,SACzB,MACF,KAAK,UACHiP,EAAgB5Y,KAAO,oBACvB4Y,EAAgBzY,OAAQ,IAAAzD,GAAE,oCAC1Bkc,EAAgBjP,OAAS,UACzB,MACF,QACEiP,EAAgB5Y,KAAO,UACvB4Y,EAAgBzY,OAAQ,IAAAzD,GAAE,qBAC1Bkc,EAAgBjP,OAAS,SAE7B,MAAMkP,EAAOD,EAAgB5Y,KAC7B,OACE,QAAC,IAAD,CAASI,MAAOwY,EAAgBzY,MAAOE,UAAU,eAC/C,QAACwY,EAAD,CACEpR,UAAWiR,EACTE,EAAgBjP,OAChB2J,EACAtU,Q,gBCCV,IAAY8Z,EAQAC,E,yBARZ,SAAYD,GACV,oBACA,oBACA,gBACA,uBACA,mBALF,CAAYA,IAAAA,EAAU,KAQtB,SAAYC,GACV,gBACA,gBAFF,CAAYA,IAAAA,EAAiB","sources":["webpack://superset/./src/components/CronPicker/CronPicker.tsx","webpack://superset/./src/components/ListView/ActionsBar.tsx","webpack://superset/./src/components/Switch/index.tsx","webpack://superset/./src/components/TimezoneSelector/index.tsx","webpack://superset/./src/views/CRUD/alert/components/RecipientIcon.tsx","webpack://superset/./src/components/LastUpdated/index.tsx","webpack://superset/./src/views/CRUD/alert/components/AlertReportCronScheduler.tsx","webpack://superset/./src/views/CRUD/alert/components/NotificationMethod.tsx","webpack://superset/./src/views/CRUD/alert/AlertReportModal.tsx","webpack://superset/./src/views/CRUD/alert/AlertList.tsx","webpack://superset/./src/views/CRUD/alert/components/AlertStatusIcon.tsx","webpack://superset/./src/views/CRUD/alert/types.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { ConfigProvider } from 'antd';\nimport { styled, t } from '@superset-ui/core';\nimport ReactCronPicker, { Locale, CronProps } from 'react-js-cron';\n\nexport * from 'react-js-cron';\n\nexport const LOCALE: Locale = {\n  everyText: t('every'),\n  emptyMonths: t('every month'),\n  emptyMonthDays: t('every day of the month'),\n  emptyMonthDaysShort: t('day of the month'),\n  emptyWeekDays: t('every day of the week'),\n  emptyWeekDaysShort: t('day of the week'),\n  emptyHours: t('every hour'),\n  emptyMinutes: t('every minute'),\n  emptyMinutesForHourPeriod: t('every'),\n  yearOption: t('year'),\n  monthOption: t('month'),\n  weekOption: t('week'),\n  dayOption: t('day'),\n  hourOption: t('hour'),\n  minuteOption: t('minute'),\n  rebootOption: t('reboot'),\n  prefixPeriod: t('Every'),\n  prefixMonths: t('in'),\n  prefixMonthDays: t('on'),\n  prefixWeekDays: t('on'),\n  prefixWeekDaysForMonthAndYearPeriod: t('and'),\n  prefixHours: t('at'),\n  prefixMinutes: t(':'),\n  prefixMinutesForHourPeriod: t('at'),\n  suffixMinutesForHourPeriod: t('minute(s)'),\n  errorInvalidCron: t('Invalid cron expression'),\n  clearButtonText: t('Clear'),\n  weekDays: [\n    // Order is important, the index will be used as value\n    t('Sunday'), // Sunday must always be first, it's \"0\"\n    t('Monday'),\n    t('Tuesday'),\n    t('Wednesday'),\n    t('Thursday'),\n    t('Friday'),\n    t('Saturday'),\n  ],\n  months: [\n    // Order is important, the index will be used as value\n    t('January'),\n    t('February'),\n    t('March'),\n    t('April'),\n    t('May'),\n    t('June'),\n    t('July'),\n    t('August'),\n    t('September'),\n    t('October'),\n    t('November'),\n    t('December'),\n  ],\n  // Order is important, the index will be used as value\n  altWeekDays: [\n    t('SUN'), // Sunday must always be first, it's \"0\"\n    t('MON'),\n    t('TUE'),\n    t('WED'),\n    t('THU'),\n    t('FRI'),\n    t('SAT'),\n  ],\n  // Order is important, the index will be used as value\n  altMonths: [\n    t('JAN'),\n    t('FEB'),\n    t('MAR'),\n    t('APR'),\n    t('MAY'),\n    t('JUN'),\n    t('JUL'),\n    t('AUG'),\n    t('SEP'),\n    t('OCT'),\n    t('NOV'),\n    t('DEC'),\n  ],\n};\n\nexport const CronPicker = styled((props: CronProps) => (\n  <ConfigProvider\n    getPopupContainer={trigger => trigger.parentElement as HTMLElement}\n  >\n    <ReactCronPicker locale={LOCALE} {...props} />\n  </ConfigProvider>\n))`\n  .react-js-cron-select:not(.react-js-cron-custom-select) > div:first-of-type,\n  .react-js-cron-custom-select {\n    border-radius: ${({ theme }) => theme.gridUnit}px;\n    background-color: ${({ theme }) =>\n      theme.colors.grayscale.light4} !important;\n  }\n  .react-js-cron-custom-select > div:first-of-type {\n    border-radius: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { styled } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport { TooltipPlacement } from 'antd/lib/tooltip';\n\nexport type ActionProps = {\n  label: string;\n  tooltip?: string | React.ReactElement;\n  placement?: TooltipPlacement;\n  icon: string;\n  onClick: () => void;\n};\n\ninterface ActionsBarProps {\n  actions: Array<ActionProps>;\n}\n\nconst StyledActions = styled.span`\n  white-space: nowrap;\n  min-width: 100px;\n  svg,\n  i {\n    margin-right: 8px;\n\n    &:hover {\n      path {\n        fill: ${({ theme }) => theme.colors.primary.base};\n      }\n    }\n  }\n`;\n\nconst ActionWrapper = styled.span`\n  color: ${({ theme }) => theme.colors.grayscale.base};\n`;\n\nexport default function ActionsBar({ actions }: ActionsBarProps) {\n  return (\n    <StyledActions className=\"actions\">\n      {actions.map((action, index) => {\n        const ActionIcon = Icons[action.icon];\n        if (action.tooltip) {\n          return (\n            <Tooltip\n              id={`${action.label}-tooltip`}\n              title={action.tooltip}\n              placement={action.placement}\n              key={index}\n            >\n              <ActionWrapper\n                role=\"button\"\n                tabIndex={0}\n                className=\"action-button\"\n                data-test={action.label}\n                onClick={action.onClick}\n              >\n                <ActionIcon />\n              </ActionWrapper>\n            </Tooltip>\n          );\n        }\n\n        return (\n          <ActionWrapper\n            role=\"button\"\n            tabIndex={0}\n            className=\"action-button\"\n            onClick={action.onClick}\n            data-test={action.label}\n            key={index}\n          >\n            <ActionIcon />\n          </ActionWrapper>\n        );\n      })}\n    </StyledActions>\n  );\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { styled } from '@superset-ui/core';\nimport BaseSwitch, { SwitchProps } from 'antd/lib/switch';\n\nconst StyledSwitch = styled(BaseSwitch)`\n  .ant-switch-checked {\n    background-color: ${({ theme }) => theme.colors.primary.base};\n  }\n`;\n\nexport const Switch = (props: SwitchProps) => <StyledSwitch {...props} />;\nexport type { SwitchProps };\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useEffect, useMemo } from 'react';\nimport moment from 'moment-timezone';\nimport { t } from '@superset-ui/core';\nimport { Select } from 'src/components';\n\nconst DEFAULT_TIMEZONE = {\n  name: 'GMT Standard Time',\n  value: 'Africa/Abidjan', // timezones are deduped by the first alphabetical value\n};\n\nconst MIN_SELECT_WIDTH = '400px';\n\nconst offsetsToName = {\n  '-300-240': ['Eastern Standard Time', 'Eastern Daylight Time'],\n  '-360-300': ['Central Standard Time', 'Central Daylight Time'],\n  '-420-360': ['Mountain Standard Time', 'Mountain Daylight Time'],\n  '-420-420': [\n    'Mountain Standard Time - Phoenix',\n    'Mountain Standard Time - Phoenix',\n  ],\n  '-480-420': ['Pacific Standard Time', 'Pacific Daylight Time'],\n  '-540-480': ['Alaska Standard Time', 'Alaska Daylight Time'],\n  '-600-600': ['Hawaii Standard Time', 'Hawaii Daylight Time'],\n  '60120': ['Central European Time', 'Central European Daylight Time'],\n  '00': [DEFAULT_TIMEZONE.name, DEFAULT_TIMEZONE.name],\n  '060': ['GMT Standard Time - London', 'British Summer Time'],\n};\n\nconst currentDate = moment();\nconst JANUARY = moment([2021, 1]);\nconst JULY = moment([2021, 7]);\n\nconst getOffsetKey = (name: string) =>\n  JANUARY.tz(name).utcOffset().toString() +\n  JULY.tz(name).utcOffset().toString();\n\nconst getTimezoneName = (name: string) => {\n  const offsets = getOffsetKey(name);\n  return (\n    (currentDate.tz(name).isDST()\n      ? offsetsToName[offsets]?.[1]\n      : offsetsToName[offsets]?.[0]) || name\n  );\n};\n\nconst ALL_ZONES = moment.tz\n  .countries()\n  .map(country => moment.tz.zonesForCountry(country, true))\n  .flat();\n\nconst TIMEZONES: moment.MomentZoneOffset[] = [];\nALL_ZONES.forEach(zone => {\n  if (\n    !TIMEZONES.find(\n      option => getOffsetKey(option.name) === getOffsetKey(zone.name),\n    )\n  ) {\n    TIMEZONES.push(zone); // dedupe zones by offsets\n  }\n});\n\nconst TIMEZONE_OPTIONS = TIMEZONES.map(zone => ({\n  label: `GMT ${moment\n    .tz(currentDate, zone.name)\n    .format('Z')} (${getTimezoneName(zone.name)})`,\n  value: zone.name,\n  offsets: getOffsetKey(zone.name),\n  timezoneName: zone.name,\n}));\n\nconst TIMEZONE_OPTIONS_SORT_COMPARATOR = (\n  a: typeof TIMEZONE_OPTIONS[number],\n  b: typeof TIMEZONE_OPTIONS[number],\n) =>\n  moment.tz(currentDate, a.timezoneName).utcOffset() -\n  moment.tz(currentDate, b.timezoneName).utcOffset();\n\n// pre-sort timezone options by time offset\nTIMEZONE_OPTIONS.sort(TIMEZONE_OPTIONS_SORT_COMPARATOR);\n\nconst matchTimezoneToOptions = (timezone: string) =>\n  TIMEZONE_OPTIONS.find(option => option.offsets === getOffsetKey(timezone))\n    ?.value || DEFAULT_TIMEZONE.value;\n\nexport type TimezoneSelectorProps = {\n  onTimezoneChange: (value: string) => void;\n  timezone?: string | null;\n  minWidth?: string;\n};\n\nexport default function TimezoneSelector({\n  onTimezoneChange,\n  timezone,\n  minWidth = MIN_SELECT_WIDTH, // smallest size for current values\n}: TimezoneSelectorProps) {\n  const validTimezone = useMemo(\n    () => matchTimezoneToOptions(timezone || moment.tz.guess()),\n    [timezone],\n  );\n\n  // force trigger a timezone update if provided `timezone` is not invalid\n  useEffect(() => {\n    if (timezone !== validTimezone) {\n      onTimezoneChange(validTimezone);\n    }\n  }, [validTimezone, onTimezoneChange, timezone]);\n\n  return (\n    <Select\n      ariaLabel={t('Timezone selector')}\n      css={{ minWidth }}\n      onChange={tz => onTimezoneChange(tz as string)}\n      value={validTimezone}\n      options={TIMEZONE_OPTIONS}\n      sortComparator={TIMEZONE_OPTIONS_SORT_COMPARATOR}\n    />\n  );\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { SupersetTheme, css } from '@superset-ui/core';\nimport React, { ReactElement } from 'react';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport { RecipientIconName } from '../types';\n\nconst StyledIcon = (theme: SupersetTheme) => css`\n  color: ${theme.colors.grayscale.light1};\n  margin-right: ${theme.gridUnit * 2}px;\n`;\n\nexport default function RecipientIcon({ type }: { type: string }) {\n  const recipientIconConfig: { icon: null | ReactElement; label: string } = {\n    icon: null,\n    label: '',\n  };\n  switch (type) {\n    case RecipientIconName.Email:\n      recipientIconConfig.icon = <Icons.Email css={StyledIcon} />;\n      recipientIconConfig.label = RecipientIconName.Email;\n      break;\n    case RecipientIconName.Slack:\n      recipientIconConfig.icon = <Icons.Slack css={StyledIcon} />;\n      recipientIconConfig.label = RecipientIconName.Slack;\n      break;\n    default:\n      recipientIconConfig.icon = null;\n      recipientIconConfig.label = '';\n  }\n  return recipientIconConfig.icon ? (\n    <Tooltip title={recipientIconConfig.label} placement=\"bottom\">\n      {recipientIconConfig.icon}\n    </Tooltip>\n  ) : null;\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useState, FunctionComponent } from 'react';\nimport moment, { Moment, MomentInput } from 'moment';\nimport { t, styled } from '@superset-ui/core';\nimport Icons from 'src/components/Icons';\n\nconst REFRESH_INTERVAL = 60000; // every minute\n\ninterface LastUpdatedProps {\n  updatedAt: MomentInput;\n  update?: React.MouseEventHandler<HTMLSpanElement>;\n}\nmoment.updateLocale('en', {\n  calendar: {\n    lastDay: '[Yesterday at] LTS',\n    sameDay: '[Today at] LTS',\n    nextDay: '[Tomorrow at] LTS',\n    lastWeek: '[last] dddd [at] LTS',\n    nextWeek: 'dddd [at] LTS',\n    sameElse: 'L',\n  },\n});\n\nconst TextStyles = styled.span`\n  color: ${({ theme }) => theme.colors.grayscale.base};\n`;\n\nconst Refresh = styled(Icons.Refresh)`\n  color: ${({ theme }) => theme.colors.primary.base};\n  width: auto;\n  height: ${({ theme }) => theme.gridUnit * 5}px;\n  position: relative;\n  top: ${({ theme }) => theme.gridUnit}px;\n  left: ${({ theme }) => theme.gridUnit}px;\n  cursor: pointer;\n`;\n\nexport const LastUpdated: FunctionComponent<LastUpdatedProps> = ({\n  updatedAt,\n  update,\n}) => {\n  const [timeSince, setTimeSince] = useState<Moment>(moment(updatedAt));\n\n  useEffect(() => {\n    setTimeSince(() => moment(updatedAt));\n\n    // update UI every minute in case day changes\n    const interval = setInterval(() => {\n      setTimeSince(() => moment(updatedAt));\n    }, REFRESH_INTERVAL);\n\n    return () => clearInterval(interval);\n  }, [updatedAt]);\n\n  return (\n    <TextStyles>\n      {t('Last Updated %s', timeSince.isValid() ? timeSince.calendar() : '--')}\n      {update && <Refresh onClick={update} />}\n    </TextStyles>\n  );\n};\n\nexport default LastUpdated;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useCallback, useRef, FocusEvent } from 'react';\nimport { t, useTheme } from '@superset-ui/core';\n\nimport { AntdInput, RadioChangeEvent } from 'src/components';\nimport { Input } from 'src/components/Input';\nimport { Radio } from 'src/components/Radio';\nimport { CronPicker, CronError } from 'src/components/CronPicker';\nimport { StyledInputContainer } from 'src/views/CRUD/alert/AlertReportModal';\n\nexport interface AlertReportCronSchedulerProps {\n  value: string;\n  onChange: (change: string) => any;\n}\n\nexport const AlertReportCronScheduler: React.FC<AlertReportCronSchedulerProps> =\n  ({ value, onChange }) => {\n    const theme = useTheme();\n    const inputRef = useRef<AntdInput>(null);\n    const [scheduleFormat, setScheduleFormat] = useState<'picker' | 'input'>(\n      'picker',\n    );\n\n    const handleRadioButtonChange = useCallback(\n      (e: RadioChangeEvent) => setScheduleFormat(e.target.value),\n      [],\n    );\n\n    const customSetValue = useCallback(\n      (newValue: string) => {\n        onChange(newValue);\n        inputRef.current?.setValue(newValue);\n      },\n      [inputRef, onChange],\n    );\n\n    const handleBlur = useCallback(\n      (event: FocusEvent<HTMLInputElement>) => {\n        onChange(event.target.value);\n      },\n      [onChange],\n    );\n\n    const handlePressEnter = useCallback(() => {\n      onChange(inputRef.current?.input.value || '');\n    }, [onChange]);\n\n    const [error, onError] = useState<CronError>();\n\n    return (\n      <>\n        <Radio.Group onChange={handleRadioButtonChange} value={scheduleFormat}>\n          <div className=\"inline-container add-margin\">\n            <Radio data-test=\"picker\" value=\"picker\" />\n            <CronPicker\n              clearButton={false}\n              value={value}\n              setValue={customSetValue}\n              disabled={scheduleFormat !== 'picker'}\n              displayError={scheduleFormat === 'picker'}\n              onError={onError}\n            />\n          </div>\n          <div className=\"inline-container add-margin\">\n            <Radio data-test=\"input\" value=\"input\" />\n            <span className=\"input-label\">CRON Schedule</span>\n            <StyledInputContainer\n              data-test=\"input-content\"\n              className=\"styled-input\"\n            >\n              <div className=\"input-container\">\n                <Input\n                  type=\"text\"\n                  name=\"crontab\"\n                  ref={inputRef}\n                  style={error ? { borderColor: theme.colors.error.base } : {}}\n                  placeholder={t('CRON expression')}\n                  disabled={scheduleFormat !== 'input'}\n                  onBlur={handleBlur}\n                  onPressEnter={handlePressEnter}\n                />\n              </div>\n            </StyledInputContainer>\n          </div>\n        </Radio.Group>\n      </>\n    );\n  };\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { FunctionComponent, useState } from 'react';\nimport { styled, t, useTheme } from '@superset-ui/core';\nimport { Select } from 'src/components';\nimport Icons from 'src/components/Icons';\nimport { NotificationMethodOption } from 'src/views/CRUD/alert/types';\nimport { StyledInputContainer } from '../AlertReportModal';\n\nconst StyledNotificationMethod = styled.div`\n  margin-bottom: 10px;\n\n  .input-container {\n    textarea {\n      height: auto;\n    }\n  }\n\n  .inline-container {\n    margin-bottom: 10px;\n\n    .input-container {\n      margin-left: 10px;\n    }\n\n    > div {\n      margin: 0;\n    }\n\n    .delete-button {\n      margin-left: 10px;\n      padding-top: 3px;\n    }\n  }\n`;\n\ntype NotificationSetting = {\n  method?: NotificationMethodOption;\n  recipients: string;\n  options: NotificationMethodOption[];\n};\n\ninterface NotificationMethodProps {\n  setting?: NotificationSetting | null;\n  index: number;\n  onUpdate?: (index: number, updatedSetting: NotificationSetting) => void;\n  onRemove?: (index: number) => void;\n}\n\nexport const NotificationMethod: FunctionComponent<NotificationMethodProps> = ({\n  setting = null,\n  index,\n  onUpdate,\n  onRemove,\n}) => {\n  const { method, recipients, options } = setting || {};\n  const [recipientValue, setRecipientValue] = useState<string>(\n    recipients || '',\n  );\n  const theme = useTheme();\n\n  if (!setting) {\n    return null;\n  }\n\n  const onMethodChange = (method: NotificationMethodOption) => {\n    // Since we're swapping the method, reset the recipients\n    setRecipientValue('');\n    if (onUpdate) {\n      const updatedSetting = {\n        ...setting,\n        method,\n        recipients: '',\n      };\n\n      onUpdate(index, updatedSetting);\n    }\n  };\n\n  const onRecipientsChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement>,\n  ) => {\n    const { target } = event;\n\n    setRecipientValue(target.value);\n\n    if (onUpdate) {\n      const updatedSetting = {\n        ...setting,\n        recipients: target.value,\n      };\n\n      onUpdate(index, updatedSetting);\n    }\n  };\n\n  // Set recipients\n  if (!!recipients && recipientValue !== recipients) {\n    setRecipientValue(recipients);\n  }\n\n  return (\n    <StyledNotificationMethod>\n      <div className=\"inline-container\">\n        <StyledInputContainer>\n          <div className=\"input-container\">\n            <Select\n              ariaLabel={t('Delivery method')}\n              data-test=\"select-delivery-method\"\n              onChange={onMethodChange}\n              placeholder={t('Select Delivery Method')}\n              options={(options || []).map(\n                (method: NotificationMethodOption) => ({\n                  label: method,\n                  value: method,\n                }),\n              )}\n              value={method}\n            />\n          </div>\n        </StyledInputContainer>\n        {method !== undefined && !!onRemove ? (\n          <span\n            role=\"button\"\n            tabIndex={0}\n            className=\"delete-button\"\n            onClick={() => onRemove(index)}\n          >\n            <Icons.Trash iconColor={theme.colors.grayscale.base} />\n          </span>\n        ) : null}\n      </div>\n      {method !== undefined ? (\n        <StyledInputContainer>\n          <div className=\"control-label\">{t(method)}</div>\n          <div className=\"input-container\">\n            <textarea\n              name=\"recipients\"\n              value={recipientValue}\n              onChange={onRecipientsChange}\n            />\n          </div>\n          <div className=\"helper\">\n            {t('Recipients are separated by \",\" or \";\"')}\n          </div>\n        </StyledInputContainer>\n      ) : null}\n    </StyledNotificationMethod>\n  );\n};\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, {\n  FunctionComponent,\n  useState,\n  useEffect,\n  useMemo,\n  useCallback,\n} from 'react';\nimport {\n  styled,\n  t,\n  SupersetClient,\n  css,\n  SupersetTheme,\n} from '@superset-ui/core';\nimport rison from 'rison';\nimport { useSingleViewResource } from 'src/views/CRUD/hooks';\n\nimport Icons from 'src/components/Icons';\nimport { Switch } from 'src/components/Switch';\nimport Modal from 'src/components/Modal';\nimport TimezoneSelector from 'src/components/TimezoneSelector';\nimport { Radio } from 'src/components/Radio';\nimport Select, { propertyComparator } from 'src/components/Select/Select';\nimport { FeatureFlag, isFeatureEnabled } from 'src/featureFlags';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport Owner from 'src/types/Owner';\nimport { AntdCheckbox } from 'src/components';\nimport TextAreaControl from 'src/explore/components/controls/TextAreaControl';\nimport { useCommonConf } from 'src/views/CRUD/data/database/state';\nimport {\n  NotificationMethodOption,\n  AlertObject,\n  ChartObject,\n  DashboardObject,\n  DatabaseObject,\n  MetaObject,\n  Operator,\n  Recipient,\n} from 'src/views/CRUD/alert/types';\nimport { InfoTooltipWithTrigger } from '@superset-ui/chart-controls';\nimport { AlertReportCronScheduler } from './components/AlertReportCronScheduler';\nimport { NotificationMethod } from './components/NotificationMethod';\n\nconst TIMEOUT_MIN = 1;\nconst TEXT_BASED_VISUALIZATION_TYPES = [\n  'pivot_table',\n  'pivot_table_v2',\n  'table',\n  'paired_ttest',\n];\n\ntype SelectValue = {\n  value: string;\n  label: string;\n};\n\ninterface AlertReportModalProps {\n  addSuccessToast: (msg: string) => void;\n  addDangerToast: (msg: string) => void;\n  alert?: AlertObject | null;\n  isReport?: boolean;\n  onAdd?: (alert?: AlertObject) => void;\n  onHide: () => void;\n  show: boolean;\n}\n\nconst DEFAULT_NOTIFICATION_METHODS: NotificationMethodOption[] = ['Email'];\nconst DEFAULT_NOTIFICATION_FORMAT = 'PNG';\nconst CONDITIONS = [\n  {\n    label: t('< (Smaller than)'),\n    value: '<',\n  },\n  {\n    label: t('> (Larger than)'),\n    value: '>',\n  },\n  {\n    label: t('<= (Smaller or equal)'),\n    value: '<=',\n  },\n  {\n    label: t('>= (Larger or equal)'),\n    value: '>=',\n  },\n  {\n    label: t('== (Is equal)'),\n    value: '==',\n  },\n  {\n    label: t('!= (Is not equal)'),\n    value: '!=',\n  },\n  {\n    label: t('Not null'),\n    value: 'not null',\n  },\n];\n\nconst RETENTION_OPTIONS = [\n  {\n    label: t('None'),\n    value: 0,\n  },\n  {\n    label: t('30 days'),\n    value: 30,\n  },\n  {\n    label: t('60 days'),\n    value: 60,\n  },\n  {\n    label: t('90 days'),\n    value: 90,\n  },\n];\n\nconst DEFAULT_RETENTION = 90;\nconst DEFAULT_WORKING_TIMEOUT = 3600;\nconst DEFAULT_CRON_VALUE = '0 * * * *'; // every hour\nconst DEFAULT_ALERT = {\n  active: true,\n  creation_method: 'alerts_reports',\n  crontab: DEFAULT_CRON_VALUE,\n  log_retention: DEFAULT_RETENTION,\n  working_timeout: DEFAULT_WORKING_TIMEOUT,\n  name: '',\n  owners: [],\n  recipients: [],\n  sql: '',\n  validator_config_json: {},\n  validator_type: '',\n  force_screenshot: false,\n  grace_period: undefined,\n};\n\nconst StyledModal = styled(Modal)`\n  max-width: 1200px;\n  width: 100%;\n\n  .ant-modal-body {\n    overflow: initial;\n  }\n`;\n\nconst StyledIcon = (theme: SupersetTheme) => css`\n  margin: auto ${theme.gridUnit * 2}px auto 0;\n  color: ${theme.colors.grayscale.base};\n`;\n\nconst StyledSectionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  .header-section {\n    display: flex;\n    flex: 0 0 auto;\n    align-items: center;\n    width: 100%;\n    padding: ${({ theme }) => theme.gridUnit * 4}px;\n    border-bottom: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n  }\n\n  .column-section {\n    display: flex;\n    flex: 1 1 auto;\n\n    .column {\n      flex: 1 1 auto;\n      min-width: calc(33.33% - ${({ theme }) => theme.gridUnit * 8}px);\n      padding: ${({ theme }) => theme.gridUnit * 4}px;\n\n      .async-select {\n        margin: 10px 0 20px;\n      }\n\n      &.condition {\n        border-right: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n      }\n\n      &.message {\n        border-left: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n      }\n    }\n  }\n\n  .inline-container {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    &.wrap {\n      flex-wrap: wrap;\n    }\n\n    > div {\n      flex: 1 1 auto;\n    }\n\n    &.add-margin {\n      margin-bottom: 5px;\n    }\n\n    .styled-input {\n      margin: 0 0 0 10px;\n\n      input {\n        flex: 0 0 auto;\n      }\n    }\n  }\n`;\n\nconst StyledSectionTitle = styled.div`\n  display: flex;\n  align-items: center;\n  margin: ${({ theme }) => theme.gridUnit * 2}px auto\n    ${({ theme }) => theme.gridUnit * 4}px auto;\n\n  h4 {\n    margin: 0;\n  }\n\n  .required {\n    margin-left: ${({ theme }) => theme.gridUnit}px;\n    color: ${({ theme }) => theme.colors.error.base};\n  }\n`;\n\nconst StyledSwitchContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 10px;\n\n  .switch-label {\n    margin-left: 10px;\n  }\n`;\n\nexport const StyledInputContainer = styled.div`\n  flex: 1;\n  margin: ${({ theme }) => theme.gridUnit * 2}px;\n  margin-top: 0;\n\n  .helper {\n    display: block;\n    color: ${({ theme }) => theme.colors.grayscale.base};\n    font-size: ${({ theme }) => theme.typography.sizes.s}px;\n    padding: ${({ theme }) => theme.gridUnit}px 0;\n    text-align: left;\n  }\n\n  .required {\n    margin-left: ${({ theme }) => theme.gridUnit / 2}px;\n    color: ${({ theme }) => theme.colors.error.base};\n  }\n\n  .input-container {\n    display: flex;\n    align-items: center;\n\n    > div {\n      width: 100%;\n    }\n\n    label {\n      display: flex;\n      margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n    }\n\n    i {\n      margin: 0 ${({ theme }) => theme.gridUnit}px;\n    }\n  }\n\n  input,\n  textarea {\n    flex: 1 1 auto;\n  }\n\n  input[disabled] {\n    color: ${({ theme }) => theme.colors.grayscale.base};\n  }\n\n  textarea {\n    height: 300px;\n    resize: none;\n  }\n\n  input::placeholder,\n  textarea::placeholder {\n    color: ${({ theme }) => theme.colors.grayscale.light1};\n  }\n\n  textarea,\n  input[type='text'],\n  input[type='number'] {\n    padding: ${({ theme }) => theme.gridUnit}px\n      ${({ theme }) => theme.gridUnit * 2}px;\n    border-style: none;\n    border: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n    border-radius: ${({ theme }) => theme.gridUnit}px;\n\n    &[name='description'] {\n      flex: 1 1 auto;\n    }\n  }\n\n  .input-label {\n    margin-left: 10px;\n  }\n`;\n\nconst StyledRadio = styled(Radio)`\n  display: block;\n  line-height: ${({ theme }) => theme.gridUnit * 7}px;\n`;\n\nconst StyledRadioGroup = styled(Radio.Group)`\n  margin-left: ${({ theme }) => theme.gridUnit * 5.5}px;\n`;\n\nconst StyledCheckbox = styled(AntdCheckbox)`\n  margin-left: ${({ theme }) => theme.gridUnit * 5.5}px;\n`;\n\n// Notification Method components\nconst StyledNotificationAddButton = styled.div`\n  color: ${({ theme }) => theme.colors.primary.dark1};\n  cursor: pointer;\n\n  i {\n    margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n  }\n\n  &.disabled {\n    color: ${({ theme }) => theme.colors.grayscale.light1};\n    cursor: default;\n  }\n`;\n\nconst timezoneHeaderStyle = (theme: SupersetTheme) => css`\n  margin: ${theme.gridUnit * 3}px 0;\n`;\n\ntype NotificationAddStatus = 'active' | 'disabled' | 'hidden';\n\ninterface NotificationMethodAddProps {\n  status: NotificationAddStatus;\n  onClick: () => void;\n}\n\nconst NotificationMethodAdd: FunctionComponent<NotificationMethodAddProps> = ({\n  status = 'active',\n  onClick,\n}) => {\n  if (status === 'hidden') {\n    return null;\n  }\n\n  const checkStatus = () => {\n    if (status !== 'disabled') {\n      onClick();\n    }\n  };\n\n  return (\n    <StyledNotificationAddButton className={status} onClick={checkStatus}>\n      <i className=\"fa fa-plus\" />{' '}\n      {status === 'active'\n        ? t('Add notification method')\n        : t('Add delivery method')}\n    </StyledNotificationAddButton>\n  );\n};\n\ntype NotificationSetting = {\n  method?: NotificationMethodOption;\n  recipients: string;\n  options: NotificationMethodOption[];\n};\n\nconst AlertReportModal: FunctionComponent<AlertReportModalProps> = ({\n  addDangerToast,\n  onAdd,\n  onHide,\n  show,\n  alert = null,\n  isReport = false,\n  addSuccessToast,\n}) => {\n  const conf = useCommonConf();\n  const allowedNotificationMethods: NotificationMethodOption[] =\n    conf?.ALERT_REPORTS_NOTIFICATION_METHODS || DEFAULT_NOTIFICATION_METHODS;\n\n  const [disableSave, setDisableSave] = useState<boolean>(true);\n  const [currentAlert, setCurrentAlert] =\n    useState<Partial<AlertObject> | null>();\n  const [isHidden, setIsHidden] = useState<boolean>(true);\n  const [contentType, setContentType] = useState<string>('dashboard');\n  const [reportFormat, setReportFormat] = useState<string>(\n    DEFAULT_NOTIFICATION_FORMAT,\n  );\n  const [forceScreenshot, setForceScreenshot] = useState<boolean>(false);\n\n  // Dropdown options\n  const [conditionNotNull, setConditionNotNull] = useState<boolean>(false);\n  const [sourceOptions, setSourceOptions] = useState<MetaObject[]>([]);\n  const [dashboardOptions, setDashboardOptions] = useState<MetaObject[]>([]);\n  const [chartOptions, setChartOptions] = useState<MetaObject[]>([]);\n\n  // Chart metadata\n  const [chartVizType, setChartVizType] = useState<string>('');\n\n  const isEditMode = alert !== null;\n  const formatOptionEnabled =\n    contentType === 'chart' &&\n    (isFeatureEnabled(FeatureFlag.ALERTS_ATTACH_REPORTS) || isReport);\n\n  const [notificationAddState, setNotificationAddState] =\n    useState<NotificationAddStatus>('active');\n  const [notificationSettings, setNotificationSettings] = useState<\n    NotificationSetting[]\n  >([]);\n\n  const onNotificationAdd = () => {\n    const settings: NotificationSetting[] = notificationSettings.slice();\n\n    settings.push({\n      recipients: '',\n      options: allowedNotificationMethods,\n    });\n\n    setNotificationSettings(settings);\n    setNotificationAddState(\n      settings.length === allowedNotificationMethods.length\n        ? 'hidden'\n        : 'disabled',\n    );\n  };\n\n  const updateNotificationSetting = (\n    index: number,\n    setting: NotificationSetting,\n  ) => {\n    const settings = notificationSettings.slice();\n\n    settings[index] = setting;\n    setNotificationSettings(settings);\n\n    if (setting.method !== undefined && notificationAddState !== 'hidden') {\n      setNotificationAddState('active');\n    }\n  };\n\n  const removeNotificationSetting = (index: number) => {\n    const settings = notificationSettings.slice();\n\n    settings.splice(index, 1);\n    setNotificationSettings(settings);\n    setNotificationAddState('active');\n  };\n\n  // Alert fetch logic\n  const {\n    state: { loading, resource, error: fetchError },\n    fetchResource,\n    createResource,\n    updateResource,\n    clearError,\n  } = useSingleViewResource<AlertObject>('report', t('report'), addDangerToast);\n\n  // Functions\n  const hide = () => {\n    clearError();\n    setIsHidden(true);\n    onHide();\n    setNotificationSettings([]);\n    setCurrentAlert({ ...DEFAULT_ALERT });\n    setNotificationAddState('active');\n  };\n\n  const onSave = () => {\n    // Notification Settings\n    const recipients: Recipient[] = [];\n\n    notificationSettings.forEach(setting => {\n      if (setting.method && setting.recipients.length) {\n        recipients.push({\n          recipient_config_json: {\n            target: setting.recipients,\n          },\n          type: setting.method,\n        });\n      }\n    });\n\n    const shouldEnableForceScreenshot = contentType === 'chart' && !isReport;\n    const data: any = {\n      ...currentAlert,\n      type: isReport ? 'Report' : 'Alert',\n      force_screenshot: shouldEnableForceScreenshot || forceScreenshot,\n      validator_type: conditionNotNull ? 'not null' : 'operator',\n      validator_config_json: conditionNotNull\n        ? {}\n        : currentAlert?.validator_config_json,\n      chart: contentType === 'chart' ? currentAlert?.chart?.value : null,\n      dashboard:\n        contentType === 'dashboard' ? currentAlert?.dashboard?.value : null,\n      database: currentAlert?.database?.value,\n      owners: (currentAlert?.owners || []).map(\n        owner => (owner as MetaObject).value || owner.id,\n      ),\n      recipients,\n      report_format:\n        contentType === 'dashboard'\n          ? DEFAULT_NOTIFICATION_FORMAT\n          : reportFormat || DEFAULT_NOTIFICATION_FORMAT,\n    };\n\n    if (data.recipients && !data.recipients.length) {\n      delete data.recipients;\n    }\n\n    data.context_markdown = 'string';\n\n    if (isEditMode) {\n      // Edit\n      if (currentAlert && currentAlert.id) {\n        const update_id = currentAlert.id;\n\n        delete data.id;\n        delete data.created_by;\n        delete data.last_eval_dttm;\n        delete data.last_state;\n        delete data.last_value;\n        delete data.last_value_row_json;\n\n        updateResource(update_id, data).then(response => {\n          if (!response) {\n            return;\n          }\n\n          addSuccessToast(t('%s updated', data.type));\n\n          if (onAdd) {\n            onAdd();\n          }\n\n          hide();\n        });\n      }\n    } else if (currentAlert) {\n      // Create\n      createResource(data).then(response => {\n        if (!response) {\n          return;\n        }\n\n        addSuccessToast(t('%s updated', data.type));\n\n        if (onAdd) {\n          onAdd(response);\n        }\n\n        hide();\n      });\n    }\n  };\n\n  // Fetch data to populate form dropdowns\n  const loadOwnerOptions = useMemo(\n    () =>\n      (input = '', page: number, pageSize: number) => {\n        const query = rison.encode({\n          filter: input,\n          page,\n          page_size: pageSize,\n        });\n        return SupersetClient.get({\n          endpoint: `/api/v1/report/related/created_by?q=${query}`,\n        }).then(response => ({\n          data: response.json.result.map(\n            (item: { value: number; text: string }) => ({\n              value: item.value,\n              label: item.text,\n            }),\n          ),\n          totalCount: response.json.count,\n        }));\n      },\n    [],\n  );\n\n  const getSourceData = useCallback(\n    (db?: MetaObject) => {\n      const database = db || currentAlert?.database;\n\n      if (!database || database.label) {\n        return null;\n      }\n\n      let result;\n\n      // Cycle through source options to find the selected option\n      sourceOptions.forEach(source => {\n        if (source.value === database.value || source.value === database.id) {\n          result = source;\n        }\n      });\n\n      return result;\n    },\n    [currentAlert?.database, sourceOptions],\n  );\n\n  // Updating alert/report state\n  const updateAlertState = (name: string, value: any) => {\n    setCurrentAlert(currentAlertData => ({\n      ...currentAlertData,\n      [name]: value,\n    }));\n  };\n\n  const loadSourceOptions = useMemo(\n    () =>\n      (input = '', page: number, pageSize: number) => {\n        const query = rison.encode({\n          filter: input,\n          page,\n          page_size: pageSize,\n        });\n        return SupersetClient.get({\n          endpoint: `/api/v1/report/related/database?q=${query}`,\n        }).then(response => {\n          const list = response.json.result.map(\n            (item: { value: number; text: string }) => ({\n              value: item.value,\n              label: item.text,\n            }),\n          );\n          setSourceOptions(list);\n          return { data: list, totalCount: response.json.count };\n        });\n      },\n    [],\n  );\n\n  const databaseLabel =\n    currentAlert && currentAlert.database && !currentAlert.database.label;\n  useEffect(() => {\n    // Find source if current alert has one set\n    if (databaseLabel) {\n      updateAlertState('database', getSourceData());\n    }\n  }, [databaseLabel, getSourceData]);\n\n  const loadDashboardOptions = useMemo(\n    () =>\n      (input = '', page: number, pageSize: number) => {\n        const query = rison.encode_uri({\n          filter: input,\n          page,\n          page_size: pageSize,\n        });\n        return SupersetClient.get({\n          endpoint: `/api/v1/report/related/dashboard?q=${query}`,\n        }).then(response => {\n          const list = response.json.result.map(\n            (item: { value: number; text: string }) => ({\n              value: item.value,\n              label: item.text,\n            }),\n          );\n          setDashboardOptions(list);\n          return { data: list, totalCount: response.json.count };\n        });\n      },\n    [],\n  );\n\n  const getDashboardData = (db?: MetaObject) => {\n    const dashboard = db || currentAlert?.dashboard;\n\n    if (!dashboard || dashboard.label) {\n      return null;\n    }\n\n    let result;\n\n    // Cycle through dashboard options to find the selected option\n    dashboardOptions.forEach(dash => {\n      if (dash.value === dashboard.value || dash.value === dashboard.id) {\n        result = dash;\n      }\n    });\n\n    return result;\n  };\n\n  const getChartData = useCallback(\n    (chartData?: MetaObject) => {\n      const chart = chartData || currentAlert?.chart;\n\n      if (!chart || chart.label) {\n        return null;\n      }\n\n      let result;\n\n      // Cycle through chart options to find the selected option\n      chartOptions.forEach(slice => {\n        if (slice.value === chart.value || slice.value === chart.id) {\n          result = slice;\n        }\n      });\n\n      return result;\n    },\n    [chartOptions, currentAlert?.chart],\n  );\n\n  const noChartLabel =\n    currentAlert && currentAlert.chart && !currentAlert.chart.label;\n  useEffect(() => {\n    // Find source if current alert has one set\n    if (noChartLabel) {\n      updateAlertState('chart', getChartData());\n    }\n  }, [getChartData, noChartLabel]);\n\n  const loadChartOptions = useMemo(\n    () =>\n      (input = '', page: number, pageSize: number) => {\n        const query = rison.encode_uri({\n          filter: input,\n          page,\n          page_size: pageSize,\n        });\n        return SupersetClient.get({\n          endpoint: `/api/v1/report/related/chart?q=${query}`,\n        }).then(response => {\n          const list = response.json.result.map(\n            (item: { value: number; text: string }) => ({\n              value: item.value,\n              label: item.text,\n            }),\n          );\n\n          setChartOptions(list);\n          return { data: list, totalCount: response.json.count };\n        });\n      },\n    [],\n  );\n\n  const getChartVisualizationType = (chart: SelectValue) =>\n    SupersetClient.get({\n      endpoint: `/api/v1/chart/${chart.value}`,\n    }).then(response => setChartVizType(response.json.result.viz_type));\n\n  // Handle input/textarea updates\n  const onTextChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n  ) => {\n    const { target } = event;\n\n    updateAlertState(target.name, target.value);\n  };\n\n  const onTimeoutVerifyChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n  ) => {\n    const { target } = event;\n    const value = +target.value;\n\n    // Need to make sure grace period is not lower than TIMEOUT_MIN\n    if (value === 0) {\n      updateAlertState(target.name, null);\n    } else {\n      updateAlertState(\n        target.name,\n        value ? Math.max(value, TIMEOUT_MIN) : value,\n      );\n    }\n  };\n\n  const onSQLChange = (value: string) => {\n    updateAlertState('sql', value || '');\n  };\n\n  const onOwnersChange = (value: Array<SelectValue>) => {\n    updateAlertState('owners', value || []);\n  };\n\n  const onSourceChange = (value: Array<SelectValue>) => {\n    updateAlertState('database', value || []);\n  };\n\n  const onDashboardChange = (dashboard: SelectValue) => {\n    updateAlertState('dashboard', dashboard || undefined);\n    updateAlertState('chart', null);\n  };\n\n  const onChartChange = (chart: SelectValue) => {\n    getChartVisualizationType(chart);\n    updateAlertState('chart', chart || undefined);\n    updateAlertState('dashboard', null);\n  };\n\n  const onActiveSwitch = (checked: boolean) => {\n    updateAlertState('active', checked);\n  };\n\n  const onConditionChange = (op: Operator) => {\n    setConditionNotNull(op === 'not null');\n\n    const config = {\n      op,\n      threshold: currentAlert\n        ? currentAlert.validator_config_json?.threshold\n        : undefined,\n    };\n\n    updateAlertState('validator_config_json', config);\n  };\n\n  const onThresholdChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { target } = event;\n\n    const config = {\n      op: currentAlert ? currentAlert.validator_config_json?.op : undefined,\n      threshold: target.value,\n    };\n\n    updateAlertState('validator_config_json', config);\n  };\n\n  const onLogRetentionChange = (retention: number) => {\n    updateAlertState('log_retention', retention);\n  };\n\n  const onTimezoneChange = (timezone: string) => {\n    updateAlertState('timezone', timezone);\n  };\n\n  const onContentTypeChange = (event: any) => {\n    const { target } = event;\n    // When switch content type, reset force_screenshot to false\n    setForceScreenshot(false);\n    // Gives time to close the select before changing the type\n    setTimeout(() => setContentType(target.value), 200);\n  };\n\n  const onFormatChange = (event: any) => {\n    const { target } = event;\n\n    setReportFormat(target.value);\n  };\n\n  const onForceScreenshotChange = (event: any) => {\n    setForceScreenshot(event.target.checked);\n  };\n\n  // Make sure notification settings has the required info\n  const checkNotificationSettings = () => {\n    if (!notificationSettings.length) {\n      return false;\n    }\n\n    let hasInfo = false;\n\n    notificationSettings.forEach(setting => {\n      if (!!setting.method && setting.recipients?.length) {\n        hasInfo = true;\n      }\n    });\n\n    return hasInfo;\n  };\n\n  const validate = () => {\n    if (\n      currentAlert &&\n      currentAlert.name?.length &&\n      currentAlert.owners?.length &&\n      currentAlert.crontab?.length &&\n      currentAlert.working_timeout !== undefined &&\n      ((contentType === 'dashboard' && !!currentAlert.dashboard) ||\n        (contentType === 'chart' && !!currentAlert.chart)) &&\n      checkNotificationSettings()\n    ) {\n      if (isReport) {\n        setDisableSave(false);\n      } else if (\n        !!currentAlert.database &&\n        currentAlert.sql?.length &&\n        (conditionNotNull || !!currentAlert.validator_config_json?.op) &&\n        (conditionNotNull ||\n          currentAlert.validator_config_json?.threshold !== undefined)\n      ) {\n        setDisableSave(false);\n      } else {\n        setDisableSave(true);\n      }\n    } else {\n      setDisableSave(true);\n    }\n  };\n\n  // Initialize\n  useEffect(() => {\n    if (\n      isEditMode &&\n      (!currentAlert?.id || alert?.id !== currentAlert.id || (isHidden && show))\n    ) {\n      if (alert && alert.id !== null && !loading && !fetchError) {\n        const id = alert.id || 0;\n        fetchResource(id);\n      }\n    } else if (\n      !isEditMode &&\n      (!currentAlert || currentAlert.id || (isHidden && show))\n    ) {\n      setCurrentAlert({ ...DEFAULT_ALERT });\n      setNotificationSettings([]);\n      setNotificationAddState('active');\n    }\n  }, [alert]);\n\n  useEffect(() => {\n    if (resource) {\n      // Add notification settings\n      const settings = (resource.recipients || []).map(setting => {\n        const config =\n          typeof setting.recipient_config_json === 'string'\n            ? JSON.parse(setting.recipient_config_json)\n            : {};\n        return {\n          method: setting.type,\n          // @ts-ignore: Type not assignable\n          recipients: config.target || setting.recipient_config_json,\n          options: allowedNotificationMethods,\n        };\n      });\n\n      setNotificationSettings(settings);\n      setNotificationAddState(\n        settings.length === allowedNotificationMethods.length\n          ? 'hidden'\n          : 'active',\n      );\n      setContentType(resource.chart ? 'chart' : 'dashboard');\n      setReportFormat(\n        resource.chart\n          ? resource.report_format || DEFAULT_NOTIFICATION_FORMAT\n          : DEFAULT_NOTIFICATION_FORMAT,\n      );\n      const validatorConfig =\n        typeof resource.validator_config_json === 'string'\n          ? JSON.parse(resource.validator_config_json)\n          : resource.validator_config_json;\n\n      setConditionNotNull(resource.validator_type === 'not null');\n\n      if (resource.chart) {\n        setChartVizType((resource.chart as ChartObject).viz_type);\n      }\n      setForceScreenshot(resource.force_screenshot);\n\n      setCurrentAlert({\n        ...resource,\n        chart: resource.chart\n          ? getChartData(resource.chart) || {\n              value: (resource.chart as ChartObject).id,\n              label: (resource.chart as ChartObject).slice_name,\n            }\n          : undefined,\n        dashboard: resource.dashboard\n          ? getDashboardData(resource.dashboard) || {\n              value: (resource.dashboard as DashboardObject).id,\n              label: (resource.dashboard as DashboardObject).dashboard_title,\n            }\n          : undefined,\n        database: resource.database\n          ? getSourceData(resource.database) || {\n              value: (resource.database as DatabaseObject).id,\n              label: (resource.database as DatabaseObject).database_name,\n            }\n          : undefined,\n        owners: (alert?.owners || []).map(owner => ({\n          value: (owner as MetaObject).value || owner.id,\n          label:\n            (owner as MetaObject).label ||\n            `${(owner as Owner).first_name} ${(owner as Owner).last_name}`,\n        })),\n        // @ts-ignore: Type not assignable\n        validator_config_json:\n          resource.validator_type === 'not null'\n            ? {\n                op: 'not null',\n              }\n            : validatorConfig,\n      });\n    }\n  }, [resource]);\n\n  // Validation\n  const currentAlertSafe = currentAlert || {};\n  useEffect(() => {\n    validate();\n  }, [\n    currentAlertSafe.name,\n    currentAlertSafe.owners,\n    currentAlertSafe.database,\n    currentAlertSafe.sql,\n    currentAlertSafe.validator_config_json,\n    currentAlertSafe.crontab,\n    currentAlertSafe.working_timeout,\n    currentAlertSafe.dashboard,\n    currentAlertSafe.chart,\n    contentType,\n    notificationSettings,\n    conditionNotNull,\n  ]);\n\n  // Show/hide\n  if (isHidden && show) {\n    setIsHidden(false);\n  }\n\n  return (\n    <StyledModal\n      className=\"no-content-padding\"\n      responsive\n      disablePrimaryButton={disableSave}\n      onHandledPrimaryAction={onSave}\n      onHide={hide}\n      primaryButtonName={isEditMode ? t('Save') : t('Add')}\n      show={show}\n      width=\"100%\"\n      maxWidth=\"1450px\"\n      title={\n        <h4 data-test=\"alert-report-modal-title\">\n          {isEditMode ? (\n            <Icons.EditAlt css={StyledIcon} />\n          ) : (\n            <Icons.PlusLarge css={StyledIcon} />\n          )}\n          {isEditMode && isReport\n            ? t('Edit Report')\n            : isEditMode\n            ? t('Edit Alert')\n            : isReport\n            ? t('Add Report')\n            : t('Add Alert')}\n        </h4>\n      }\n    >\n      <StyledSectionContainer>\n        <div className=\"header-section\">\n          <StyledInputContainer>\n            <div className=\"control-label\">\n              {isReport ? t('Report name') : t('Alert name')}\n              <span className=\"required\">*</span>\n            </div>\n            <div className=\"input-container\">\n              <input\n                type=\"text\"\n                name=\"name\"\n                value={currentAlert ? currentAlert.name : ''}\n                placeholder={isReport ? t('Report name') : t('Alert name')}\n                onChange={onTextChange}\n              />\n            </div>\n          </StyledInputContainer>\n          <StyledInputContainer>\n            <div className=\"control-label\">\n              {t('Owners')}\n              <span className=\"required\">*</span>\n            </div>\n            <div data-test=\"owners-select\" className=\"input-container\">\n              <Select\n                ariaLabel={t('Owners')}\n                allowClear\n                name=\"owners\"\n                mode=\"multiple\"\n                value={\n                  (currentAlert?.owners as {\n                    label: string;\n                    value: number;\n                  }[]) || []\n                }\n                options={loadOwnerOptions}\n                onChange={onOwnersChange}\n              />\n            </div>\n          </StyledInputContainer>\n          <StyledInputContainer>\n            <div className=\"control-label\">{t('Description')}</div>\n            <div className=\"input-container\">\n              <input\n                type=\"text\"\n                name=\"description\"\n                value={currentAlert ? currentAlert.description || '' : ''}\n                placeholder={t('Description')}\n                onChange={onTextChange}\n              />\n            </div>\n          </StyledInputContainer>\n          <StyledSwitchContainer>\n            <Switch\n              onChange={onActiveSwitch}\n              checked={currentAlert ? currentAlert.active : true}\n            />\n            <div className=\"switch-label\">Active</div>\n          </StyledSwitchContainer>\n        </div>\n        <div className=\"column-section\">\n          {!isReport && (\n            <div className=\"column condition\">\n              <StyledSectionTitle>\n                <h4>{t('Alert condition')}</h4>\n              </StyledSectionTitle>\n              <StyledInputContainer>\n                <div className=\"control-label\">\n                  {t('Database')}\n                  <span className=\"required\">*</span>\n                </div>\n                <div className=\"input-container\">\n                  <Select\n                    ariaLabel={t('Database')}\n                    name=\"source\"\n                    value={\n                      currentAlert?.database?.label &&\n                      currentAlert?.database?.value\n                        ? {\n                            value: currentAlert.database.value,\n                            label: currentAlert.database.label,\n                          }\n                        : undefined\n                    }\n                    options={loadSourceOptions}\n                    onChange={onSourceChange}\n                  />\n                </div>\n              </StyledInputContainer>\n              <StyledInputContainer>\n                <div className=\"control-label\">\n                  {t('SQL Query')}\n                  <span className=\"required\">*</span>\n                </div>\n                <TextAreaControl\n                  name=\"sql\"\n                  language=\"sql\"\n                  offerEditInModal={false}\n                  minLines={15}\n                  maxLines={15}\n                  onChange={onSQLChange}\n                  readOnly={false}\n                  initialValue={resource?.sql}\n                  key={currentAlert?.id}\n                />\n              </StyledInputContainer>\n              <div className=\"inline-container wrap\">\n                <StyledInputContainer>\n                  <div className=\"control-label\">\n                    {t('Trigger Alert If...')}\n                    <span className=\"required\">*</span>\n                  </div>\n                  <div className=\"input-container\">\n                    <Select\n                      ariaLabel={t('Condition')}\n                      onChange={onConditionChange}\n                      placeholder=\"Condition\"\n                      value={\n                        currentAlert?.validator_config_json?.op || undefined\n                      }\n                      options={CONDITIONS}\n                    />\n                  </div>\n                </StyledInputContainer>\n                <StyledInputContainer>\n                  <div className=\"control-label\">\n                    {t('Value')}{' '}\n                    <InfoTooltipWithTrigger\n                      tooltip={t(\n                        'Threshold value should be double precision number',\n                      )}\n                    />\n                    <span className=\"required\">*</span>\n                  </div>\n                  <div className=\"input-container\">\n                    <input\n                      type=\"number\"\n                      name=\"threshold\"\n                      disabled={conditionNotNull}\n                      value={\n                        currentAlert &&\n                        currentAlert.validator_config_json &&\n                        currentAlert.validator_config_json.threshold !==\n                          undefined\n                          ? currentAlert.validator_config_json.threshold\n                          : ''\n                      }\n                      placeholder={t('Value')}\n                      onChange={onThresholdChange}\n                    />\n                  </div>\n                </StyledInputContainer>\n              </div>\n            </div>\n          )}\n          <div className=\"column schedule\">\n            <StyledSectionTitle>\n              <h4>\n                {isReport\n                  ? t('Report schedule')\n                  : t('Alert condition schedule')}\n              </h4>\n              <span className=\"required\">*</span>\n            </StyledSectionTitle>\n            <AlertReportCronScheduler\n              value={currentAlert?.crontab || DEFAULT_CRON_VALUE}\n              onChange={newVal => updateAlertState('crontab', newVal)}\n            />\n            <div className=\"control-label\">{t('Timezone')}</div>\n            <div\n              className=\"input-container\"\n              css={(theme: SupersetTheme) => timezoneHeaderStyle(theme)}\n            >\n              <TimezoneSelector\n                onTimezoneChange={onTimezoneChange}\n                timezone={currentAlert?.timezone}\n                minWidth=\"100%\"\n              />\n            </div>\n            <StyledSectionTitle>\n              <h4>{t('Schedule settings')}</h4>\n            </StyledSectionTitle>\n            <StyledInputContainer>\n              <div className=\"control-label\">\n                {t('Log retention')}\n                <span className=\"required\">*</span>\n              </div>\n              <div className=\"input-container\">\n                <Select\n                  ariaLabel={t('Log retention')}\n                  placeholder={t('Log retention')}\n                  onChange={onLogRetentionChange}\n                  value={\n                    typeof currentAlert?.log_retention === 'number'\n                      ? currentAlert?.log_retention\n                      : DEFAULT_RETENTION\n                  }\n                  options={RETENTION_OPTIONS}\n                  sortComparator={propertyComparator('value')}\n                />\n              </div>\n            </StyledInputContainer>\n            <StyledInputContainer>\n              <div className=\"control-label\">\n                {t('Working timeout')}\n                <span className=\"required\">*</span>\n              </div>\n              <div className=\"input-container\">\n                <input\n                  type=\"number\"\n                  min=\"1\"\n                  name=\"working_timeout\"\n                  value={currentAlert?.working_timeout || ''}\n                  placeholder={t('Time in seconds')}\n                  onChange={onTimeoutVerifyChange}\n                />\n                <span className=\"input-label\">seconds</span>\n              </div>\n            </StyledInputContainer>\n            {!isReport && (\n              <StyledInputContainer>\n                <div className=\"control-label\">{t('Grace period')}</div>\n                <div className=\"input-container\">\n                  <input\n                    type=\"number\"\n                    min=\"1\"\n                    name=\"grace_period\"\n                    value={currentAlert?.grace_period || ''}\n                    placeholder={t('Time in seconds')}\n                    onChange={onTimeoutVerifyChange}\n                  />\n                  <span className=\"input-label\">seconds</span>\n                </div>\n              </StyledInputContainer>\n            )}\n          </div>\n          <div className=\"column message\">\n            <StyledSectionTitle>\n              <h4>{t('Message content')}</h4>\n              <span className=\"required\">*</span>\n            </StyledSectionTitle>\n            <Radio.Group onChange={onContentTypeChange} value={contentType}>\n              <StyledRadio value=\"dashboard\">{t('Dashboard')}</StyledRadio>\n              <StyledRadio value=\"chart\">{t('Chart')}</StyledRadio>\n            </Radio.Group>\n            <Select\n              ariaLabel={t('Chart')}\n              css={{\n                display: contentType === 'chart' ? 'inline' : 'none',\n              }}\n              name=\"chart\"\n              value={\n                currentAlert?.chart?.label && currentAlert?.chart?.value\n                  ? {\n                      value: currentAlert.chart.value,\n                      label: currentAlert.chart.label,\n                    }\n                  : undefined\n              }\n              options={loadChartOptions}\n              onChange={onChartChange}\n            />\n            <Select\n              ariaLabel={t('Dashboard')}\n              css={{\n                display: contentType === 'dashboard' ? 'inline' : 'none',\n              }}\n              name=\"dashboard\"\n              value={\n                currentAlert?.dashboard?.label && currentAlert?.dashboard?.value\n                  ? {\n                      value: currentAlert.dashboard.value,\n                      label: currentAlert.dashboard.label,\n                    }\n                  : undefined\n              }\n              options={loadDashboardOptions}\n              onChange={onDashboardChange}\n            />\n            {formatOptionEnabled && (\n              <>\n                <div className=\"inline-container\">\n                  <StyledRadioGroup\n                    onChange={onFormatChange}\n                    value={reportFormat}\n                  >\n                    <StyledRadio value=\"PNG\">{t('Send as PNG')}</StyledRadio>\n                    <StyledRadio value=\"CSV\">{t('Send as CSV')}</StyledRadio>\n                    {TEXT_BASED_VISUALIZATION_TYPES.includes(chartVizType) && (\n                      <StyledRadio value=\"TEXT\">\n                        {t('Send as text')}\n                      </StyledRadio>\n                    )}\n                  </StyledRadioGroup>\n                </div>\n              </>\n            )}\n            {(isReport || contentType === 'dashboard') && (\n              <div className=\"inline-container\">\n                <StyledCheckbox\n                  data-test=\"bypass-cache\"\n                  className=\"checkbox\"\n                  checked={forceScreenshot}\n                  onChange={onForceScreenshotChange}\n                >\n                  Ignore cache when generating screenshot\n                </StyledCheckbox>\n              </div>\n            )}\n            <StyledSectionTitle>\n              <h4>{t('Notification method')}</h4>\n              <span className=\"required\">*</span>\n            </StyledSectionTitle>\n            {notificationSettings.map((notificationSetting, i) => (\n              <NotificationMethod\n                setting={notificationSetting}\n                index={i}\n                key={`NotificationMethod-${i}`}\n                onUpdate={updateNotificationSetting}\n                onRemove={removeNotificationSetting}\n              />\n            ))}\n            <NotificationMethodAdd\n              data-test=\"notification-add\"\n              status={notificationAddState}\n              onClick={onNotificationAdd}\n            />\n          </div>\n        </div>\n      </StyledSectionContainer>\n    </StyledModal>\n  );\n};\n\nexport default withToasts(AlertReportModal);\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useMemo, useEffect, useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { t, SupersetClient, makeApi, styled } from '@superset-ui/core';\nimport moment from 'moment';\nimport ActionsBar, { ActionProps } from 'src/components/ListView/ActionsBar';\nimport FacePile from 'src/components/FacePile';\nimport { Tooltip } from 'src/components/Tooltip';\nimport ListView, {\n  FilterOperator,\n  Filters,\n  ListViewProps,\n} from 'src/components/ListView';\nimport SubMenu, { SubMenuProps } from 'src/views/components/SubMenu';\nimport { Switch } from 'src/components/Switch';\nimport { DATETIME_WITH_TIME_ZONE } from 'src/constants';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport AlertStatusIcon from 'src/views/CRUD/alert/components/AlertStatusIcon';\nimport RecipientIcon from 'src/views/CRUD/alert/components/RecipientIcon';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport DeleteModal from 'src/components/DeleteModal';\nimport LastUpdated from 'src/components/LastUpdated';\n\nimport {\n  useListViewResource,\n  useSingleViewResource,\n} from 'src/views/CRUD/hooks';\nimport { createErrorHandler, createFetchRelated } from 'src/views/CRUD/utils';\nimport AlertReportModal from './AlertReportModal';\nimport { AlertObject, AlertState } from './types';\n\nconst PAGE_SIZE = 25;\n\nconst AlertStateLabel: Record<AlertState, string> = {\n  [AlertState.Success]: t('Success'),\n  [AlertState.Working]: t('Working'),\n  [AlertState.Error]: t('Error'),\n  [AlertState.Noop]: t('Not triggered'),\n  [AlertState.Grace]: t('On Grace'),\n};\n\ninterface AlertListProps {\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n  isReportEnabled: boolean;\n  user: {\n    userId: string | number;\n    firstName: string;\n    lastName: string;\n  };\n}\nconst deleteAlerts = makeApi<number[], { message: string }>({\n  requestType: 'rison',\n  method: 'DELETE',\n  endpoint: '/api/v1/report/',\n});\n\nconst RefreshContainer = styled.div`\n  width: 100%;\n  padding: 0 ${({ theme }) => theme.gridUnit * 4}px\n    ${({ theme }) => theme.gridUnit * 3}px;\n  background-color: ${({ theme }) => theme.colors.grayscale.light5};\n`;\n\nfunction AlertList({\n  addDangerToast,\n  isReportEnabled = false,\n  user,\n  addSuccessToast,\n}: AlertListProps) {\n  const title = isReportEnabled ? t('report') : t('alert');\n  const titlePlural = isReportEnabled ? t('reports') : t('alerts');\n  const pathName = isReportEnabled ? 'Reports' : 'Alerts';\n  const initialFilters = useMemo(\n    () => [\n      {\n        id: 'type',\n        operator: FilterOperator.equals,\n        value: isReportEnabled ? 'Report' : 'Alert',\n      },\n    ],\n    [isReportEnabled],\n  );\n  const {\n    state: {\n      loading,\n      resourceCount: alertsCount,\n      resourceCollection: alerts,\n      bulkSelectEnabled,\n      lastFetched,\n    },\n    hasPerm,\n    fetchData,\n    setResourceCollection,\n    refreshData,\n    toggleBulkSelect,\n  } = useListViewResource<AlertObject>(\n    'report',\n    t('reports'),\n    addDangerToast,\n    true,\n    undefined,\n    initialFilters,\n  );\n\n  const { updateResource } = useSingleViewResource<Partial<AlertObject>>(\n    'report',\n    t('reports'),\n    addDangerToast,\n  );\n\n  const [alertModalOpen, setAlertModalOpen] = useState<boolean>(false);\n  const [currentAlert, setCurrentAlert] = useState<Partial<AlertObject> | null>(\n    null,\n  );\n  const [currentAlertDeleting, setCurrentAlertDeleting] =\n    useState<AlertObject | null>(null);\n\n  // Actions\n  function handleAlertEdit(alert: AlertObject | null) {\n    setCurrentAlert(alert);\n    setAlertModalOpen(true);\n  }\n\n  const generateKey = () => `${new Date().getTime()}`;\n\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canCreate = hasPerm('can_write');\n\n  useEffect(() => {\n    if (bulkSelectEnabled && canDelete) {\n      toggleBulkSelect();\n    }\n  }, [isReportEnabled]);\n\n  const handleAlertDelete = ({ id, name }: AlertObject) => {\n    SupersetClient.delete({\n      endpoint: `/api/v1/report/${id}`,\n    }).then(\n      () => {\n        refreshData();\n        setCurrentAlertDeleting(null);\n        addSuccessToast(t('Deleted: %s', name));\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(t('There was an issue deleting %s: %s', name, errMsg)),\n      ),\n    );\n  };\n\n  const handleBulkAlertDelete = async (alertsToDelete: AlertObject[]) => {\n    try {\n      const { message } = await deleteAlerts(\n        alertsToDelete.map(({ id }) => id),\n      );\n      refreshData();\n      addSuccessToast(message);\n    } catch (e) {\n      createErrorHandler(errMsg =>\n        addDangerToast(\n          t(\n            'There was an issue deleting the selected %s: %s',\n            titlePlural,\n            errMsg,\n          ),\n        ),\n      )(e);\n    }\n  };\n\n  const initialSort = [{ id: 'name', desc: true }];\n\n  const toggleActive = useCallback(\n    (data: AlertObject, checked: boolean) => {\n      if (data && data.id) {\n        const update_id = data.id;\n        const original = [...alerts];\n\n        setResourceCollection(\n          original.map(alert => {\n            if (alert?.id === data.id) {\n              return {\n                ...alert,\n                active: checked,\n              };\n            }\n\n            return alert;\n          }),\n        );\n\n        updateResource(update_id, { active: checked }, false, false)\n          .then()\n          .catch(() => setResourceCollection(original));\n      }\n    },\n    [alerts, setResourceCollection, updateResource],\n  );\n\n  const columns = useMemo(\n    () => [\n      {\n        Cell: ({\n          row: {\n            original: { last_state: lastState },\n          },\n        }: any) => (\n          <AlertStatusIcon\n            state={lastState}\n            isReportEnabled={isReportEnabled}\n          />\n        ),\n        accessor: 'last_state',\n        size: 'xs',\n        disableSortBy: true,\n      },\n      {\n        Cell: ({\n          row: {\n            original: { last_eval_dttm: lastEvalDttm },\n          },\n        }: any) =>\n          lastEvalDttm\n            ? moment.utc(lastEvalDttm).local().format(DATETIME_WITH_TIME_ZONE)\n            : '',\n        accessor: 'last_eval_dttm',\n        Header: t('Last run'),\n        size: 'lg',\n      },\n      {\n        accessor: 'name',\n        Header: t('Name'),\n        size: 'xl',\n      },\n      {\n        Header: t('Schedule'),\n        accessor: 'crontab_humanized',\n        size: 'xl',\n        Cell: ({\n          row: {\n            original: { crontab_humanized = '', timezone },\n          },\n        }: any) => (\n          <Tooltip\n            title={`${crontab_humanized} (${timezone})`}\n            placement=\"topLeft\"\n          >\n            <span>{`${crontab_humanized} (${timezone})`}</span>\n          </Tooltip>\n        ),\n      },\n      {\n        Cell: ({\n          row: {\n            original: { recipients },\n          },\n        }: any) =>\n          recipients.map((r: any) => (\n            <RecipientIcon key={r.id} type={r.type} />\n          )),\n        accessor: 'recipients',\n        Header: t('Notification method'),\n        disableSortBy: true,\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { created_by },\n          },\n        }: any) =>\n          created_by ? `${created_by.first_name} ${created_by.last_name}` : '',\n        Header: t('Created by'),\n        id: 'created_by',\n        disableSortBy: true,\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { owners = [] },\n          },\n        }: any) => <FacePile users={owners} />,\n        Header: t('Owners'),\n        id: 'owners',\n        disableSortBy: true,\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { changed_on_delta_humanized: changedOn },\n          },\n        }: any) => <span className=\"no-wrap\">{changedOn}</span>,\n        Header: t('Modified'),\n        accessor: 'changed_on_delta_humanized',\n        size: 'xl',\n      },\n      {\n        Cell: ({ row: { original } }: any) => (\n          <Switch\n            data-test=\"toggle-active\"\n            checked={original.active}\n            onClick={(checked: boolean) => toggleActive(original, checked)}\n            size=\"small\"\n          />\n        ),\n        Header: t('Active'),\n        accessor: 'active',\n        id: 'active',\n        size: 'xl',\n      },\n      {\n        Cell: ({ row: { original } }: any) => {\n          const history = useHistory();\n          const handleEdit = () => handleAlertEdit(original);\n          const handleDelete = () => setCurrentAlertDeleting(original);\n          const handleGotoExecutionLog = () =>\n            history.push(`/${original.type.toLowerCase()}/${original.id}/log`);\n\n          const actions = [\n            canEdit\n              ? {\n                  label: 'execution-log-action',\n                  tooltip: t('Execution log'),\n                  placement: 'bottom',\n                  icon: 'Note',\n                  onClick: handleGotoExecutionLog,\n                }\n              : null,\n            canEdit\n              ? {\n                  label: 'edit-action',\n                  tooltip: t('Edit'),\n                  placement: 'bottom',\n                  icon: 'Edit',\n                  onClick: handleEdit,\n                }\n              : null,\n            canDelete\n              ? {\n                  label: 'delete-action',\n                  tooltip: t('Delete'),\n                  placement: 'bottom',\n                  icon: 'Trash',\n                  onClick: handleDelete,\n                }\n              : null,\n          ].filter(item => item !== null);\n\n          return <ActionsBar actions={actions as ActionProps[]} />;\n        },\n        Header: t('Actions'),\n        id: 'actions',\n        hidden: !canEdit && !canDelete,\n        disableSortBy: true,\n        size: 'xl',\n      },\n    ],\n    [canDelete, canEdit, isReportEnabled, toggleActive],\n  );\n\n  const subMenuButtons: SubMenuProps['buttons'] = [];\n\n  if (canCreate) {\n    subMenuButtons.push({\n      name: (\n        <>\n          <i className=\"fa fa-plus\" /> {title}\n        </>\n      ),\n      buttonStyle: 'primary',\n      onClick: () => {\n        handleAlertEdit(null);\n      },\n    });\n  }\n  if (canDelete) {\n    subMenuButtons.push({\n      name: t('Bulk select'),\n      onClick: toggleBulkSelect,\n      buttonStyle: 'secondary',\n      'data-test': 'bulk-select-toggle',\n    });\n  }\n\n  const emptyState = {\n    title: t('No %s yet', titlePlural),\n    image: 'filter-results.svg',\n    buttonAction: () => handleAlertEdit(null),\n    buttonText: canCreate ? (\n      <>\n        <i className=\"fa fa-plus\" /> {title}{' '}\n      </>\n    ) : null,\n  };\n\n  const filters: Filters = useMemo(\n    () => [\n      {\n        Header: t('Owner'),\n        id: 'owners',\n        input: 'select',\n        operator: FilterOperator.relationManyMany,\n        unfilteredLabel: 'All',\n        fetchSelects: createFetchRelated(\n          'report',\n          'owners',\n          createErrorHandler(errMsg =>\n            t('An error occurred while fetching owners values: %s', errMsg),\n          ),\n          user,\n        ),\n        paginate: true,\n      },\n      {\n        Header: t('Created by'),\n        id: 'created_by',\n        input: 'select',\n        operator: FilterOperator.relationOneMany,\n        unfilteredLabel: 'All',\n        fetchSelects: createFetchRelated(\n          'report',\n          'created_by',\n          createErrorHandler(errMsg =>\n            t('An error occurred while fetching created by values: %s', errMsg),\n          ),\n          user,\n        ),\n        paginate: true,\n      },\n      {\n        Header: t('Status'),\n        id: 'last_state',\n        input: 'select',\n        operator: FilterOperator.equals,\n        unfilteredLabel: 'Any',\n        selects: [\n          {\n            label: AlertStateLabel[AlertState.Success],\n            value: AlertState.Success,\n          },\n          {\n            label: AlertStateLabel[AlertState.Working],\n            value: AlertState.Working,\n          },\n          { label: AlertStateLabel[AlertState.Error], value: AlertState.Error },\n          { label: AlertStateLabel[AlertState.Noop], value: AlertState.Noop },\n          { label: AlertStateLabel[AlertState.Grace], value: AlertState.Grace },\n        ],\n      },\n      {\n        Header: t('Search'),\n        id: 'name',\n        input: 'search',\n        operator: FilterOperator.contains,\n      },\n    ],\n    [],\n  );\n\n  return (\n    <>\n      <SubMenu\n        activeChild={pathName}\n        name={t('Alerts & reports')}\n        tabs={[\n          {\n            name: 'Alerts',\n            label: t('Alerts'),\n            url: '/alert/list/',\n            usesRouter: true,\n            'data-test': 'alert-list',\n          },\n          {\n            name: 'Reports',\n            label: t('Reports'),\n            url: '/report/list/',\n            usesRouter: true,\n            'data-test': 'report-list',\n          },\n        ]}\n        buttons={subMenuButtons}\n      >\n        <RefreshContainer>\n          <LastUpdated updatedAt={lastFetched} update={() => refreshData()} />\n        </RefreshContainer>\n      </SubMenu>\n      <AlertReportModal\n        alert={currentAlert}\n        addDangerToast={addDangerToast}\n        layer={currentAlert}\n        onHide={() => {\n          setAlertModalOpen(false);\n          setCurrentAlert(null);\n          refreshData();\n        }}\n        show={alertModalOpen}\n        isReport={isReportEnabled}\n        key={currentAlert?.id || generateKey()}\n      />\n      {currentAlertDeleting && (\n        <DeleteModal\n          description={t(\n            'This action will permanently delete %s.',\n            currentAlertDeleting.name,\n          )}\n          onConfirm={() => {\n            if (currentAlertDeleting) {\n              handleAlertDelete(currentAlertDeleting);\n            }\n          }}\n          onHide={() => setCurrentAlertDeleting(null)}\n          open\n          title={t('Delete %s?', title)}\n        />\n      )}\n      <ConfirmStatusChange\n        title={t('Please confirm')}\n        description={t(\n          'Are you sure you want to delete the selected %s?',\n          titlePlural,\n        )}\n        onConfirm={handleBulkAlertDelete}\n      >\n        {confirmDelete => {\n          const bulkActions: ListViewProps['bulkActions'] = canDelete\n            ? [\n                {\n                  key: 'delete',\n                  name: t('Delete'),\n                  onSelect: confirmDelete,\n                  type: 'danger',\n                },\n              ]\n            : [];\n          return (\n            <ListView<AlertObject>\n              className=\"alerts-list-view\"\n              columns={columns}\n              count={alertsCount}\n              data={alerts}\n              emptyState={emptyState}\n              fetchData={fetchData}\n              filters={filters}\n              initialSort={initialSort}\n              loading={loading}\n              bulkActions={bulkActions}\n              bulkSelectEnabled={bulkSelectEnabled}\n              disableBulkSelect={toggleBulkSelect}\n              pageSize={PAGE_SIZE}\n            />\n          );\n        }}\n      </ConfirmStatusChange>\n    </>\n  );\n}\n\nexport default withToasts(AlertList);\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t, SupersetTheme, useTheme } from '@superset-ui/core';\nimport React from 'react';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport { AlertState } from '../types';\n\nfunction getStatusColor(\n  status: string,\n  isReportEnabled: boolean,\n  theme: SupersetTheme,\n) {\n  switch (status) {\n    case AlertState.Working:\n      return theme.colors.primary.base;\n    case AlertState.Error:\n      return theme.colors.error.base;\n    case AlertState.Success:\n      return isReportEnabled\n        ? theme.colors.success.base\n        : theme.colors.alert.base;\n    case AlertState.Noop:\n      return theme.colors.success.base;\n    case AlertState.Grace:\n      return theme.colors.alert.base;\n    default:\n      return theme.colors.grayscale.base;\n  }\n}\n\nexport default function AlertStatusIcon({\n  state,\n  isReportEnabled = false,\n}: {\n  state: string;\n  isReportEnabled: boolean;\n}) {\n  const theme = useTheme();\n  const lastStateConfig = {\n    icon: Icons.Check,\n    label: '',\n    status: '',\n  };\n  switch (state) {\n    case AlertState.Success:\n      lastStateConfig.icon = isReportEnabled\n        ? Icons.Check\n        : Icons.AlertSolidSmall;\n      lastStateConfig.label = isReportEnabled\n        ? t('Report sent')\n        : t('Alert triggered, notification sent');\n      lastStateConfig.status = AlertState.Success;\n      break;\n    case AlertState.Working:\n      lastStateConfig.icon = Icons.Running;\n      lastStateConfig.label = isReportEnabled\n        ? t('Report sending')\n        : t('Alert running');\n      lastStateConfig.status = AlertState.Working;\n      break;\n    case AlertState.Error:\n      lastStateConfig.icon = Icons.XSmall;\n      lastStateConfig.label = isReportEnabled\n        ? t('Report failed')\n        : t('Alert failed');\n      lastStateConfig.status = AlertState.Error;\n      break;\n    case AlertState.Noop:\n      lastStateConfig.icon = Icons.Check;\n      lastStateConfig.label = t('Nothing triggered');\n      lastStateConfig.status = AlertState.Noop;\n      break;\n    case AlertState.Grace:\n      lastStateConfig.icon = Icons.AlertSolidSmall;\n      lastStateConfig.label = t('Alert Triggered, In Grace Period');\n      lastStateConfig.status = AlertState.Grace;\n      break;\n    default:\n      lastStateConfig.icon = Icons.Check;\n      lastStateConfig.label = t('Nothing triggered');\n      lastStateConfig.status = AlertState.Noop;\n  }\n  const Icon = lastStateConfig.icon;\n  return (\n    <Tooltip title={lastStateConfig.label} placement=\"bottomLeft\">\n      <Icon\n        iconColor={getStatusColor(\n          lastStateConfig.status,\n          isReportEnabled,\n          theme,\n        )}\n      />\n    </Tooltip>\n  );\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport Owner from 'src/types/Owner';\nimport { NOTIFICATION_FORMATS } from 'src/reports/types';\n\ntype user = {\n  id: number;\n  first_name: string;\n  last_name: string;\n};\nexport type ChartObject = {\n  id: number;\n  slice_name: string;\n  viz_type: string;\n};\n\nexport type DashboardObject = {\n  dashboard_title: string;\n  id: number;\n};\n\nexport type DatabaseObject = {\n  database_name: string;\n  id: number;\n};\n\nexport type NotificationMethodOption = 'Email' | 'Slack';\n\nexport type Recipient = {\n  recipient_config_json: {\n    target: string;\n  };\n  type: NotificationMethodOption;\n};\n\nexport type MetaObject = {\n  id?: number;\n  label?: string;\n  value?: number | string;\n};\n\nexport type Operator = '<' | '>' | '<=' | '>=' | '==' | '!=' | 'not null';\n\nexport type AlertObject = {\n  active?: boolean;\n  creation_method?: string;\n  chart?: MetaObject;\n  changed_by?: user;\n  changed_on_delta_humanized?: string;\n  chart_id: number;\n  created_by?: user;\n  created_on?: string;\n  crontab?: string;\n  dashboard?: MetaObject;\n  dashboard_id?: number;\n  database?: MetaObject;\n  description?: string;\n  force_screenshot: boolean;\n  grace_period?: number;\n  id: number;\n  last_eval_dttm?: number;\n  last_state?: 'Success' | 'Working' | 'Error' | 'Not triggered' | 'On Grace';\n  log_retention?: number;\n  name?: string;\n  owners?: Array<Owner | MetaObject>;\n  sql?: string;\n  timezone?: string;\n  recipients?: Array<Recipient>;\n  report_format?: NOTIFICATION_FORMATS;\n  type?: string;\n  validator_config_json?: {\n    op?: Operator;\n    threshold?: number;\n  };\n  validator_type?: string;\n  working_timeout?: number;\n  error?: string;\n};\n\nexport type LogObject = {\n  end_dttm: string;\n  error_message: string;\n  id: number;\n  scheduled_dttm: string;\n  start_dttm: string;\n  state: string;\n  value: string;\n  uuid: string;\n};\n\nexport enum AlertState {\n  Success = 'Success',\n  Working = 'Working',\n  Error = 'Error',\n  Noop = 'Not triggered',\n  Grace = 'On Grace',\n}\n\nexport enum RecipientIconName {\n  Email = 'Email',\n  Slack = 'Slack',\n}\n"],"names":["LOCALE","everyText","t","emptyMonths","emptyMonthDays","emptyMonthDaysShort","emptyWeekDays","emptyWeekDaysShort","emptyHours","emptyMinutes","emptyMinutesForHourPeriod","yearOption","monthOption","weekOption","dayOption","hourOption","minuteOption","rebootOption","prefixPeriod","prefixMonths","prefixMonthDays","prefixWeekDays","prefixWeekDaysForMonthAndYearPeriod","prefixHours","prefixMinutes","prefixMinutesForHourPeriod","suffixMinutesForHourPeriod","errorInvalidCron","clearButtonText","weekDays","months","altWeekDays","altMonths","CronPicker","style","props","getPopupContainer","trigger","parentElement","locale","theme","gridUnit","colors","grayscale","light4","StyledActions","primary","base","ActionWrapper","ActionsBar","actions","className","map","action","index","ActionIcon","icon","tooltip","id","label","title","placement","key","role","tabIndex","onClick","StyledSwitch","Switch","DEFAULT_TIMEZONE","offsetsToName","currentDate","JANUARY","JULY","getOffsetKey","name","tz","utcOffset","toString","getTimezoneName","offsets","isDST","ALL_ZONES","country","flat","TIMEZONES","forEach","zone","find","option","push","TIMEZONE_OPTIONS","format","value","timezoneName","TIMEZONE_OPTIONS_SORT_COMPARATOR","a","b","TimezoneSelector","onTimezoneChange","timezone","minWidth","validTimezone","useMemo","matchTimezoneToOptions","useEffect","ariaLabel","css","onChange","options","sortComparator","sort","StyledIcon","light1","RecipientIcon","type","recipientIconConfig","Icons","Tooltip","calendar","lastDay","sameDay","nextDay","lastWeek","nextWeek","sameElse","TextStyles","Refresh","updatedAt","update","timeSince","setTimeSince","useState","interval","setInterval","clearInterval","isValid","AlertReportCronScheduler","inputRef","useRef","scheduleFormat","setScheduleFormat","handleRadioButtonChange","useCallback","e","target","customSetValue","newValue","current","setValue","handleBlur","event","handlePressEnter","input","error","onError","Radio","clearButton","disabled","displayError","StyledInputContainer","Input","ref","borderColor","placeholder","onBlur","onPressEnter","StyledNotificationMethod","NotificationMethod","setting","onUpdate","onRemove","method","recipients","recipientValue","setRecipientValue","updatedSetting","undefined","iconColor","TEXT_BASED_VISUALIZATION_TYPES","DEFAULT_NOTIFICATION_METHODS","DEFAULT_NOTIFICATION_FORMAT","CONDITIONS","RETENTION_OPTIONS","DEFAULT_CRON_VALUE","DEFAULT_ALERT","active","creation_method","crontab","log_retention","working_timeout","owners","sql","validator_config_json","validator_type","force_screenshot","grace_period","StyledModal","Modal","StyledSectionContainer","light2","StyledSectionTitle","StyledSwitchContainer","typography","sizes","s","StyledRadio","StyledRadioGroup","StyledCheckbox","StyledNotificationAddButton","dark1","NotificationMethodAdd","status","withToasts","addDangerToast","onAdd","onHide","show","alert","isReport","addSuccessToast","conf","allowedNotificationMethods","ALERT_REPORTS_NOTIFICATION_METHODS","disableSave","setDisableSave","currentAlert","setCurrentAlert","isHidden","setIsHidden","contentType","setContentType","reportFormat","setReportFormat","forceScreenshot","setForceScreenshot","conditionNotNull","setConditionNotNull","sourceOptions","setSourceOptions","dashboardOptions","setDashboardOptions","chartOptions","setChartOptions","chartVizType","setChartVizType","isEditMode","formatOptionEnabled","notificationAddState","setNotificationAddState","notificationSettings","setNotificationSettings","updateNotificationSetting","settings","slice","removeNotificationSetting","splice","state","loading","resource","fetchError","fetchResource","createResource","updateResource","clearError","hide","loadOwnerOptions","page","pageSize","query","filter","page_size","SupersetClient","endpoint","then","response","data","json","result","item","text","totalCount","count","getSourceData","db","database","source","updateAlertState","currentAlertData","loadSourceOptions","list","databaseLabel","loadDashboardOptions","getDashboardData","dashboard","dash","getChartData","chartData","chart","noChartLabel","loadChartOptions","onTextChange","onTimeoutVerifyChange","Math","max","config","recipient_config_json","JSON","parse","length","report_format","validatorConfig","viz_type","slice_name","dashboard_title","database_name","owner","first_name","last_name","op","currentAlertSafe","hasInfo","checkNotificationSettings","threshold","responsive","disablePrimaryButton","onHandledPrimaryAction","shouldEnableForceScreenshot","context_markdown","update_id","created_by","last_eval_dttm","last_state","last_value","last_value_row_json","primaryButtonName","width","maxWidth","Select","allowClear","mode","description","checked","TextAreaControl","language","offerEditInModal","minLines","maxLines","readOnly","initialValue","InfoTooltipWithTrigger","newVal","timezoneHeaderStyle","retention","min","setTimeout","display","getChartVisualizationType","includes","notificationSetting","i","AlertStateLabel","deleteAlerts","makeApi","requestType","RefreshContainer","light5","isReportEnabled","user","titlePlural","pathName","initialFilters","operator","resourceCount","alertsCount","resourceCollection","alerts","bulkSelectEnabled","lastFetched","hasPerm","fetchData","setResourceCollection","refreshData","toggleBulkSelect","alertModalOpen","setAlertModalOpen","currentAlertDeleting","setCurrentAlertDeleting","handleAlertEdit","canEdit","canDelete","canCreate","initialSort","desc","toggleActive","original","catch","columns","Cell","row","lastState","AlertStatusIcon","accessor","size","disableSortBy","lastEvalDttm","local","Header","crontab_humanized","r","FacePile","users","changed_on_delta_humanized","changedOn","history","toLowerCase","hidden","subMenuButtons","buttonStyle","emptyState","image","buttonAction","buttonText","filters","unfilteredLabel","fetchSelects","errMsg","paginate","selects","SubMenu","activeChild","tabs","url","usesRouter","buttons","layer","Date","getTime","DeleteModal","onConfirm","handleAlertDelete","open","ConfirmStatusChange","async","alertsToDelete","message","confirmDelete","bulkActions","onSelect","ListView","disableBulkSelect","getStatusColor","success","lastStateConfig","Icon","AlertState","RecipientIconName"],"sourceRoot":""}