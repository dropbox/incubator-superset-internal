{"version":3,"file":"56bff0d3ef19079ea66f.chunk.js","mappings":"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","sources":["webpack://superset/./plugins/plugin-chart-echarts/src/MixedTimeseries/EchartsMixedTimeseries.tsx","webpack://superset/./plugins/plugin-chart-echarts/src/components/Echart.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback } from 'react';\nimport { EchartsMixedTimeseriesChartTransformedProps } from './types';\nimport Echart from '../components/Echart';\nimport { EventHandlers } from '../types';\nimport { currentSeries } from '../utils/series';\n\nexport default function EchartsMixedTimeseries({\n  height,\n  width,\n  echartOptions,\n  setDataMask,\n  labelMap,\n  labelMapB,\n  groupby,\n  groupbyB,\n  selectedValues,\n  formData,\n  seriesBreakdown,\n}: EchartsMixedTimeseriesChartTransformedProps) {\n  const isFirstQuery = useCallback(\n    (seriesIndex: number) => seriesIndex < seriesBreakdown,\n    [seriesBreakdown],\n  );\n\n  const handleChange = useCallback(\n    (values: string[], seriesIndex: number) => {\n      const emitFilter = isFirstQuery(seriesIndex)\n        ? formData.emitFilter\n        : formData.emitFilterB;\n      if (!emitFilter) {\n        return;\n      }\n\n      const currentGroupBy = isFirstQuery(seriesIndex) ? groupby : groupbyB;\n      const currentLabelMap = isFirstQuery(seriesIndex) ? labelMap : labelMapB;\n      const groupbyValues = values\n        .map(value => currentLabelMap[value])\n        .filter(value => !!value);\n\n      setDataMask({\n        extraFormData: {\n          // @ts-ignore\n          filters:\n            values.length === 0\n              ? []\n              : [\n                  ...currentGroupBy.map((col, idx) => {\n                    const val = groupbyValues.map(v => v[idx]);\n                    if (val === null || val === undefined)\n                      return {\n                        col,\n                        op: 'IS NULL',\n                      };\n                    return {\n                      col,\n                      op: 'IN',\n                      val: val as (string | number | boolean)[],\n                    };\n                  }),\n                ],\n        },\n        filterState: {\n          value: !groupbyValues.length ? null : groupbyValues,\n          selectedValues: values.length ? values : null,\n        },\n      });\n    },\n    [groupby, groupbyB, labelMap, labelMapB, setDataMask, selectedValues],\n  );\n\n  const eventHandlers: EventHandlers = {\n    click: props => {\n      const { seriesName, seriesIndex } = props;\n      const values: string[] = Object.values(selectedValues);\n      if (values.includes(seriesName)) {\n        handleChange(\n          values.filter(v => v !== seriesName),\n          seriesIndex,\n        );\n      } else {\n        handleChange([seriesName], seriesIndex);\n      }\n    },\n    mouseout: () => {\n      currentSeries.name = '';\n    },\n    mouseover: params => {\n      currentSeries.name = params.seriesName;\n    },\n  };\n\n  return (\n    <Echart\n      height={height}\n      width={width}\n      echartOptions={echartOptions}\n      eventHandlers={eventHandlers}\n      selectedValues={selectedValues}\n    />\n  );\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, {\n  useRef,\n  useEffect,\n  useMemo,\n  forwardRef,\n  useImperativeHandle,\n} from 'react';\nimport { styled } from '@superset-ui/core';\nimport { ECharts, init } from 'echarts';\nimport { EchartsHandler, EchartsProps, EchartsStylesProps } from '../types';\n\nconst Styles = styled.div<EchartsStylesProps>`\n  height: ${({ height }) => height};\n  width: ${({ width }) => width};\n`;\n\nfunction Echart(\n  {\n    width,\n    height,\n    echartOptions,\n    eventHandlers,\n    zrEventHandlers,\n    selectedValues = {},\n  }: EchartsProps,\n  ref: React.Ref<EchartsHandler>,\n) {\n  const divRef = useRef<HTMLDivElement>(null);\n  const chartRef = useRef<ECharts>();\n  const currentSelection = useMemo(\n    () => Object.keys(selectedValues) || [],\n    [selectedValues],\n  );\n  const previousSelection = useRef<string[]>([]);\n\n  useImperativeHandle(ref, () => ({\n    getEchartInstance: () => chartRef.current,\n  }));\n\n  useEffect(() => {\n    if (!divRef.current) return;\n    if (!chartRef.current) {\n      chartRef.current = init(divRef.current);\n    }\n\n    Object.entries(eventHandlers || {}).forEach(([name, handler]) => {\n      chartRef.current?.off(name);\n      chartRef.current?.on(name, handler);\n    });\n\n    Object.entries(zrEventHandlers || {}).forEach(([name, handler]) => {\n      chartRef.current?.getZr().off(name);\n      chartRef.current?.getZr().on(name, handler);\n    });\n\n    chartRef.current.setOption(echartOptions, true);\n  }, [echartOptions, eventHandlers, zrEventHandlers]);\n\n  // highlighting\n  useEffect(() => {\n    if (!chartRef.current) return;\n    chartRef.current.dispatchAction({\n      type: 'downplay',\n      dataIndex: previousSelection.current.filter(\n        value => !currentSelection.includes(value),\n      ),\n    });\n    if (currentSelection.length) {\n      chartRef.current.dispatchAction({\n        type: 'highlight',\n        dataIndex: currentSelection,\n      });\n    }\n    previousSelection.current = currentSelection;\n  }, [currentSelection]);\n\n  useEffect(() => {\n    if (chartRef.current) {\n      chartRef.current.resize({ width, height });\n    }\n  }, [width, height]);\n\n  return <Styles ref={divRef} height={height} width={width} />;\n}\n\nexport default forwardRef(Echart);\n"],"names":["EchartsMixedTimeseries","height","width","echartOptions","setDataMask","labelMap","labelMapB","groupby","groupbyB","selectedValues","formData","seriesBreakdown","isFirstQuery","useCallback","seriesIndex","handleChange","values","emitFilter","emitFilterB","currentGroupBy","currentLabelMap","groupbyValues","map","value","filter","extraFormData","filters","length","col","idx","val","v","op","filterState","eventHandlers","click","props","seriesName","Object","includes","mouseout","mouseover","params","Styles","Echart","zrEventHandlers","ref","divRef","useRef","chartRef","currentSelection","useMemo","keys","previousSelection","useImperativeHandle","getEchartInstance","current","useEffect","entries","forEach","name","handler","off","on","getZr","setOption","dispatchAction","type","dataIndex","resize","forwardRef"],"sourceRoot":""}