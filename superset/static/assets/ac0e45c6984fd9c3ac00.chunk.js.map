{"version":3,"file":"ac0e45c6984fd9c3ac00.chunk.js","mappings":"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","sources":["webpack://superset/./src/views/CRUD/data/common.ts","webpack://superset/./src/views/CRUD/data/database/DatabaseList.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\n\nexport const commonMenuData = {\n  name: t('Data'),\n  tabs: [\n    {\n      name: 'Databases',\n      label: t('Databases'),\n      url: '/databaseview/list/',\n      usesRouter: true,\n    },\n    {\n      name: 'Datasets',\n      label: t('Datasets'),\n      url: '/tablemodelview/list/',\n      usesRouter: true,\n    },\n    {\n      name: 'Saved queries',\n      label: t('Saved queries'),\n      url: '/savedqueryview/list/',\n      usesRouter: true,\n    },\n    {\n      name: 'Query history',\n      label: t('Query history'),\n      url: '/superset/sqllab/history/',\n      usesRouter: true,\n    },\n  ],\n};\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { SupersetClient, t, styled } from '@superset-ui/core';\nimport React, { useState, useMemo, useEffect } from 'react';\nimport rison from 'rison';\nimport { useSelector } from 'react-redux';\nimport { useQueryParams, BooleanParam } from 'use-query-params';\n\nimport Loading from 'src/components/Loading';\nimport { isFeatureEnabled, FeatureFlag } from 'src/featureFlags';\nimport { useListViewResource } from 'src/views/CRUD/hooks';\nimport { createErrorHandler, uploadUserPerms } from 'src/views/CRUD/utils';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport SubMenu, { SubMenuProps } from 'src/views/components/SubMenu';\nimport DeleteModal from 'src/components/DeleteModal';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport { isUserAdmin } from 'src/dashboard/util/findPermission';\nimport ListView, { FilterOperator, Filters } from 'src/components/ListView';\nimport { commonMenuData } from 'src/views/CRUD/data/common';\nimport handleResourceExport from 'src/utils/export';\nimport { ExtentionConfigs } from 'src/views/components/types';\nimport { UserWithPermissionsAndRoles } from 'src/types/bootstrapTypes';\nimport DatabaseModal from './DatabaseModal';\n\nimport { DatabaseObject } from './types';\n\nconst PAGE_SIZE = 25;\n\ninterface DatabaseDeleteObject extends DatabaseObject {\n  chart_count: number;\n  dashboard_count: number;\n  sqllab_tab_count: number;\n}\ninterface DatabaseListProps {\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n}\n\nconst IconCheck = styled(Icons.Check)`\n  color: ${({ theme }) => theme.colors.grayscale.dark1};\n`;\n\nconst IconCancelX = styled(Icons.CancelX)`\n  color: ${({ theme }) => theme.colors.grayscale.dark1};\n`;\n\nconst Actions = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.base};\n\n  .action-button {\n    display: inline-block;\n    height: 100%;\n  }\n`;\n\nfunction BooleanDisplay({ value }: { value: Boolean }) {\n  return value ? <IconCheck /> : <IconCancelX />;\n}\n\nfunction DatabaseList({ addDangerToast, addSuccessToast }: DatabaseListProps) {\n  const {\n    state: {\n      loading,\n      resourceCount: databaseCount,\n      resourceCollection: databases,\n    },\n    hasPerm,\n    fetchData,\n    refreshData,\n  } = useListViewResource<DatabaseObject>(\n    'database',\n    t('database'),\n    addDangerToast,\n  );\n  const user = useSelector<any, UserWithPermissionsAndRoles>(\n    state => state.user,\n  );\n\n  const [query, setQuery] = useQueryParams({\n    databaseAdded: BooleanParam,\n  });\n\n  const [databaseModalOpen, setDatabaseModalOpen] = useState<boolean>(false);\n  const [databaseCurrentlyDeleting, setDatabaseCurrentlyDeleting] =\n    useState<DatabaseDeleteObject | null>(null);\n  const [currentDatabase, setCurrentDatabase] = useState<DatabaseObject | null>(\n    null,\n  );\n  const [allowUploads, setAllowUploads] = useState<boolean>(false);\n  const isAdmin = isUserAdmin(user);\n  const showUploads = allowUploads || isAdmin;\n\n  const [preparingExport, setPreparingExport] = useState<boolean>(false);\n  const { roles } = user;\n  const {\n    CSV_EXTENSIONS,\n    COLUMNAR_EXTENSIONS,\n    EXCEL_EXTENSIONS,\n    ALLOWED_EXTENSIONS,\n  } = useSelector<any, ExtentionConfigs>(state => state.common.conf);\n\n  useEffect(() => {\n    if (query?.databaseAdded) {\n      setQuery({ databaseAdded: undefined });\n      refreshData();\n    }\n  }, [query, setQuery, refreshData]);\n\n  const openDatabaseDeleteModal = (database: DatabaseObject) =>\n    SupersetClient.get({\n      endpoint: `/api/v1/database/${database.id}/related_objects/`,\n    })\n      .then(({ json = {} }) => {\n        setDatabaseCurrentlyDeleting({\n          ...database,\n          chart_count: json.charts.count,\n          dashboard_count: json.dashboards.count,\n          sqllab_tab_count: json.sqllab_tab_states.count,\n        });\n      })\n      .catch(\n        createErrorHandler(errMsg =>\n          t(\n            'An error occurred while fetching database related data: %s',\n            errMsg,\n          ),\n        ),\n      );\n\n  function handleDatabaseDelete({ id, database_name: dbName }: DatabaseObject) {\n    SupersetClient.delete({\n      endpoint: `/api/v1/database/${id}`,\n    }).then(\n      () => {\n        refreshData();\n        addSuccessToast(t('Deleted: %s', dbName));\n\n        // Close delete modal\n        setDatabaseCurrentlyDeleting(null);\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(t('There was an issue deleting %s: %s', dbName, errMsg)),\n      ),\n    );\n  }\n\n  function handleDatabaseEditModal({\n    database = null,\n    modalOpen = false,\n  }: { database?: DatabaseObject | null; modalOpen?: boolean } = {}) {\n    // Set database and modal\n    setCurrentDatabase(database);\n    setDatabaseModalOpen(modalOpen);\n  }\n\n  const canCreate = hasPerm('can_write');\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canExport =\n    hasPerm('can_export') && isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT);\n\n  const { canUploadCSV, canUploadColumnar, canUploadExcel } = uploadUserPerms(\n    roles,\n    CSV_EXTENSIONS,\n    COLUMNAR_EXTENSIONS,\n    EXCEL_EXTENSIONS,\n    ALLOWED_EXTENSIONS,\n  );\n\n  const isDisabled = isAdmin && !allowUploads;\n\n  const uploadDropdownMenu = [\n    {\n      label: t('Upload file to database'),\n      childs: [\n        {\n          label: t('Upload CSV'),\n          name: 'Upload CSV file',\n          url: '/csvtodatabaseview/form',\n          perm: canUploadCSV && showUploads,\n          disable: isDisabled,\n        },\n        {\n          label: t('Upload columnar file'),\n          name: 'Upload columnar file',\n          url: '/columnartodatabaseview/form',\n          perm: canUploadColumnar && showUploads,\n          disable: isDisabled,\n        },\n        {\n          label: t('Upload Excel file'),\n          name: 'Upload Excel file',\n          url: '/exceltodatabaseview/form',\n          perm: canUploadExcel && showUploads,\n          disable: isDisabled,\n        },\n      ],\n    },\n  ];\n\n  const hasFileUploadEnabled = () => {\n    const payload = {\n      filters: [\n        { col: 'allow_file_upload', opr: 'upload_is_enabled', value: true },\n      ],\n    };\n    SupersetClient.get({\n      endpoint: `/api/v1/database/?q=${rison.encode(payload)}`,\n    }).then(({ json }: Record<string, any>) => {\n      setAllowUploads(json.count >= 1);\n    });\n  };\n\n  useEffect(() => hasFileUploadEnabled(), [databaseModalOpen]);\n\n  const filteredDropDown = uploadDropdownMenu.map(link => {\n    // eslint-disable-next-line no-param-reassign\n    link.childs = link.childs.filter(item => item.perm);\n    return link;\n  });\n\n  const menuData: SubMenuProps = {\n    activeChild: 'Databases',\n    dropDownLinks: filteredDropDown,\n    ...commonMenuData,\n  };\n\n  if (canCreate) {\n    menuData.buttons = [\n      {\n        'data-test': 'btn-create-database',\n        name: (\n          <>\n            <i className=\"fa fa-plus\" /> {t('Database')}{' '}\n          </>\n        ),\n        buttonStyle: 'primary',\n        onClick: () => {\n          // Ensure modal will be opened in add mode\n          handleDatabaseEditModal({ modalOpen: true });\n        },\n      },\n    ];\n  }\n\n  function handleDatabaseExport(database: DatabaseObject) {\n    if (database.id === undefined) {\n      return;\n    }\n\n    handleResourceExport('database', [database.id], () => {\n      setPreparingExport(false);\n    });\n    setPreparingExport(true);\n  }\n\n  const initialSort = [{ id: 'changed_on_delta_humanized', desc: true }];\n\n  const columns = useMemo(\n    () => [\n      {\n        accessor: 'database_name',\n        Header: t('Database'),\n      },\n      {\n        accessor: 'backend',\n        Header: t('Backend'),\n        size: 'lg',\n        disableSortBy: true, // TODO: api support for sorting by 'backend'\n      },\n      {\n        accessor: 'allow_run_async',\n        Header: (\n          <Tooltip\n            id=\"allow-run-async-header-tooltip\"\n            title={t('Asynchronous query execution')}\n            placement=\"top\"\n          >\n            <span>{t('AQE')}</span>\n          </Tooltip>\n        ),\n        Cell: ({\n          row: {\n            original: { allow_run_async: allowRunAsync },\n          },\n        }: {\n          row: { original: { allow_run_async: boolean } };\n        }) => <BooleanDisplay value={allowRunAsync} />,\n        size: 'sm',\n      },\n      {\n        accessor: 'allow_dml',\n        Header: (\n          <Tooltip\n            id=\"allow-dml-header-tooltip\"\n            title={t('Allow data manipulation language')}\n            placement=\"top\"\n          >\n            <span>{t('DML')}</span>\n          </Tooltip>\n        ),\n        Cell: ({\n          row: {\n            original: { allow_dml: allowDML },\n          },\n        }: any) => <BooleanDisplay value={allowDML} />,\n        size: 'sm',\n      },\n      {\n        accessor: 'allow_file_upload',\n        Header: t('CSV upload'),\n        Cell: ({\n          row: {\n            original: { allow_file_upload: allowFileUpload },\n          },\n        }: any) => <BooleanDisplay value={allowFileUpload} />,\n        size: 'md',\n      },\n      {\n        accessor: 'expose_in_sqllab',\n        Header: t('Expose in SQL Lab'),\n        Cell: ({\n          row: {\n            original: { expose_in_sqllab: exposeInSqllab },\n          },\n        }: any) => <BooleanDisplay value={exposeInSqllab} />,\n        size: 'md',\n      },\n      {\n        accessor: 'created_by',\n        disableSortBy: true,\n        Header: t('Created by'),\n        Cell: ({\n          row: {\n            original: { created_by: createdBy },\n          },\n        }: any) =>\n          createdBy ? `${createdBy.first_name} ${createdBy.last_name}` : '',\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { changed_on_delta_humanized: changedOn },\n          },\n        }: any) => changedOn,\n        Header: t('Last modified'),\n        accessor: 'changed_on_delta_humanized',\n        size: 'xl',\n      },\n      {\n        Cell: ({ row: { original } }: any) => {\n          const handleEdit = () =>\n            handleDatabaseEditModal({ database: original, modalOpen: true });\n          const handleDelete = () => openDatabaseDeleteModal(original);\n          const handleExport = () => handleDatabaseExport(original);\n          if (!canEdit && !canDelete && !canExport) {\n            return null;\n          }\n          return (\n            <Actions className=\"actions\">\n              {canDelete && (\n                <span\n                  role=\"button\"\n                  tabIndex={0}\n                  className=\"action-button\"\n                  data-test=\"database-delete\"\n                  onClick={handleDelete}\n                >\n                  <Tooltip\n                    id=\"delete-action-tooltip\"\n                    title={t('Delete database')}\n                    placement=\"bottom\"\n                  >\n                    <Icons.Trash />\n                  </Tooltip>\n                </span>\n              )}\n              {canExport && (\n                <Tooltip\n                  id=\"export-action-tooltip\"\n                  title={t('Export')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={handleExport}\n                  >\n                    <Icons.Share />\n                  </span>\n                </Tooltip>\n              )}\n              {canEdit && (\n                <Tooltip\n                  id=\"edit-action-tooltip\"\n                  title={t('Edit')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    data-test=\"database-edit\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={handleEdit}\n                  >\n                    <Icons.EditAlt data-test=\"edit-alt\" />\n                  </span>\n                </Tooltip>\n              )}\n            </Actions>\n          );\n        },\n        Header: t('Actions'),\n        id: 'actions',\n        hidden: !canEdit && !canDelete,\n        disableSortBy: true,\n      },\n    ],\n    [canDelete, canEdit, canExport],\n  );\n\n  const filters: Filters = useMemo(\n    () => [\n      {\n        Header: t('Expose in SQL Lab'),\n        id: 'expose_in_sqllab',\n        input: 'select',\n        operator: FilterOperator.equals,\n        unfilteredLabel: 'All',\n        selects: [\n          { label: 'Yes', value: true },\n          { label: 'No', value: false },\n        ],\n      },\n      {\n        Header: (\n          <Tooltip\n            id=\"allow-run-async-filter-header-tooltip\"\n            title={t('Asynchronous query execution')}\n            placement=\"top\"\n          >\n            <span>{t('AQE')}</span>\n          </Tooltip>\n        ),\n        id: 'allow_run_async',\n        input: 'select',\n        operator: FilterOperator.equals,\n        unfilteredLabel: 'All',\n        selects: [\n          { label: 'Yes', value: true },\n          { label: 'No', value: false },\n        ],\n      },\n      {\n        Header: t('Search'),\n        id: 'database_name',\n        input: 'search',\n        operator: FilterOperator.contains,\n      },\n    ],\n    [],\n  );\n\n  return (\n    <>\n      <SubMenu {...menuData} />\n      <DatabaseModal\n        databaseId={currentDatabase?.id}\n        show={databaseModalOpen}\n        onHide={handleDatabaseEditModal}\n        onDatabaseAdd={() => {\n          refreshData();\n        }}\n      />\n      {databaseCurrentlyDeleting && (\n        <DeleteModal\n          description={t(\n            'The database %s is linked to %s charts that appear on %s dashboards and users have %s SQL Lab tabs using this database open. Are you sure you want to continue? Deleting the database will break those objects.',\n            databaseCurrentlyDeleting.database_name,\n            databaseCurrentlyDeleting.chart_count,\n            databaseCurrentlyDeleting.dashboard_count,\n            databaseCurrentlyDeleting.sqllab_tab_count,\n          )}\n          onConfirm={() => {\n            if (databaseCurrentlyDeleting) {\n              handleDatabaseDelete(databaseCurrentlyDeleting);\n            }\n          }}\n          onHide={() => setDatabaseCurrentlyDeleting(null)}\n          open\n          title={t('Delete Database?')}\n        />\n      )}\n\n      <ListView<DatabaseObject>\n        className=\"database-list-view\"\n        columns={columns}\n        count={databaseCount}\n        data={databases}\n        fetchData={fetchData}\n        filters={filters}\n        initialSort={initialSort}\n        loading={loading}\n        pageSize={PAGE_SIZE}\n      />\n\n      {preparingExport && <Loading />}\n    </>\n  );\n}\n\nexport default withToasts(DatabaseList);\n"],"names":["commonMenuData","name","t","tabs","label","url","usesRouter","IconCheck","theme","colors","grayscale","dark1","IconCancelX","Actions","base","BooleanDisplay","value","addDangerToast","addSuccessToast","state","loading","resourceCount","databaseCount","resourceCollection","databases","hasPerm","fetchData","refreshData","user","query","setQuery","databaseAdded","databaseModalOpen","setDatabaseModalOpen","useState","databaseCurrentlyDeleting","setDatabaseCurrentlyDeleting","currentDatabase","setCurrentDatabase","allowUploads","setAllowUploads","isAdmin","showUploads","preparingExport","setPreparingExport","roles","CSV_EXTENSIONS","COLUMNAR_EXTENSIONS","EXCEL_EXTENSIONS","ALLOWED_EXTENSIONS","common","conf","handleDatabaseEditModal","database","modalOpen","useEffect","undefined","canCreate","canEdit","canDelete","canExport","canUploadCSV","canUploadColumnar","canUploadExcel","isDisabled","uploadDropdownMenu","childs","perm","disable","endpoint","filters","col","opr","then","json","count","menuData","activeChild","dropDownLinks","map","link","filter","item","buttons","className","buttonStyle","onClick","columns","useMemo","accessor","Header","size","disableSortBy","id","title","placement","Cell","row","original","allow_run_async","allowRunAsync","allow_dml","allowDML","allow_file_upload","allowFileUpload","expose_in_sqllab","exposeInSqllab","created_by","createdBy","first_name","last_name","changed_on_delta_humanized","changedOn","role","tabIndex","openDatabaseDeleteModal","chart_count","charts","dashboard_count","dashboards","sqllab_tab_count","sqllab_tab_states","catch","errMsg","hidden","input","operator","unfilteredLabel","selects","databaseId","show","onHide","onDatabaseAdd","description","database_name","onConfirm","dbName","handleDatabaseDelete","open","data","initialSort","desc","pageSize"],"sourceRoot":""}