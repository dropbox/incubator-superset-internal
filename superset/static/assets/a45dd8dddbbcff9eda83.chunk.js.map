{"version":3,"file":"a45dd8dddbbcff9eda83.chunk.js","mappings":"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","sources":["webpack://superset/./src/views/CRUD/alert/ExecutionLog.tsx","webpack://superset/./src/views/CRUD/alert/components/AlertStatusIcon.tsx","webpack://superset/./src/views/CRUD/alert/types.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { css, styled, t } from '@superset-ui/core';\nimport moment from 'moment';\nimport React, { useEffect, useMemo } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport ListView from 'src/components/ListView';\nimport { Tooltip } from 'src/components/Tooltip';\nimport SubMenu from 'src/views/components/SubMenu';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { fDuration } from 'src/utils/dates';\nimport AlertStatusIcon from 'src/views/CRUD/alert/components/AlertStatusIcon';\nimport {\n  useListViewResource,\n  useSingleViewResource,\n} from 'src/views/CRUD/hooks';\nimport { AlertObject, LogObject } from './types';\n\nconst PAGE_SIZE = 25;\n\nconst StyledHeader = styled.div`\n  ${({ theme }) => css`\n    display: flex;\n    flex-direction: row;\n\n    a,\n    Link {\n      margin-left: ${theme.gridUnit * 4}px;\n      font-size: ${theme.typography.sizes.s};\n      font-weight: ${theme.typography.weights.normal};\n      text-decoration: underline;\n    }\n  `}\n`;\n\ninterface ExecutionLogProps {\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n  isReportEnabled: boolean;\n}\n\nfunction ExecutionLog({ addDangerToast, isReportEnabled }: ExecutionLogProps) {\n  const { alertId }: any = useParams();\n  const {\n    state: { loading, resourceCount: logCount, resourceCollection: logs },\n    fetchData,\n  } = useListViewResource<LogObject>(\n    `report/${alertId}/log`,\n    t('log'),\n    addDangerToast,\n    false,\n  );\n  const {\n    state: { loading: alertLoading, resource: alertResource },\n    fetchResource,\n  } = useSingleViewResource<AlertObject>(\n    'report',\n    t('reports'),\n    addDangerToast,\n  );\n\n  useEffect(() => {\n    if (alertId !== null && !alertLoading) {\n      fetchResource(alertId);\n    }\n  }, [alertId]);\n\n  const initialSort = [{ id: 'start_dttm', desc: true }];\n  const columns = useMemo(\n    () => [\n      {\n        Cell: ({\n          row: {\n            original: { state },\n          },\n        }: any) => (\n          <AlertStatusIcon state={state} isReportEnabled={isReportEnabled} />\n        ),\n        accessor: 'state',\n        Header: t('State'),\n        size: 'xs',\n        disableSortBy: true,\n      },\n      {\n        Cell: ({\n          row: {\n            original: { uuid: executionId },\n          },\n        }: any) => (executionId ? executionId.slice(0, 6) : 'none'),\n        accessor: 'uuid',\n        Header: t('Execution ID'),\n        size: 'xs',\n        disableSortBy: true,\n      },\n      {\n        Cell: ({\n          row: {\n            original: { scheduled_dttm: scheduledDttm },\n          },\n        }: any) =>\n          moment(new Date(scheduledDttm)).format('YYYY-MM-DD hh:mm:ss a'),\n        accessor: 'scheduled_dttm',\n        Header: t('Scheduled at (UTC)'),\n      },\n      {\n        Cell: ({\n          row: {\n            original: { start_dttm: startDttm },\n          },\n        }: any) => moment(new Date(startDttm)).format('YYYY-MM-DD hh:mm:ss a'),\n        Header: t('Start at (UTC)'),\n        accessor: 'start_dttm',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { start_dttm: startDttm, end_dttm: endDttm },\n          },\n        }: any) =>\n          fDuration(new Date(startDttm).getTime(), new Date(endDttm).getTime()),\n        Header: t('Duration'),\n        disableSortBy: true,\n      },\n      {\n        accessor: 'value',\n        Header: t('Value'),\n      },\n      {\n        accessor: 'error_message',\n        Header: t('Error message'),\n        Cell: ({\n          row: {\n            original: { error_message = '' },\n          },\n        }: any) => (\n          <Tooltip title={error_message} placement=\"topLeft\">\n            <span>{error_message}</span>\n          </Tooltip>\n        ),\n      },\n    ],\n    [isReportEnabled],\n  );\n  const path = `/${isReportEnabled ? 'report' : 'alert'}/list/`;\n  return (\n    <>\n      <SubMenu\n        name={\n          <StyledHeader>\n            <span>\n              {alertResource?.type} {alertResource?.name}\n            </span>\n            <span>\n              <Link to={path}>Back to all</Link>\n            </span>\n          </StyledHeader>\n        }\n      />\n      <ListView<LogObject>\n        className=\"execution-log-list-view\"\n        columns={columns}\n        count={logCount}\n        data={logs}\n        fetchData={fetchData}\n        initialSort={initialSort}\n        loading={loading}\n        pageSize={PAGE_SIZE}\n      />\n    </>\n  );\n}\n\nexport default withToasts(ExecutionLog);\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t, SupersetTheme, useTheme } from '@superset-ui/core';\nimport React from 'react';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport { AlertState } from '../types';\n\nfunction getStatusColor(\n  status: string,\n  isReportEnabled: boolean,\n  theme: SupersetTheme,\n) {\n  switch (status) {\n    case AlertState.Working:\n      return theme.colors.primary.base;\n    case AlertState.Error:\n      return theme.colors.error.base;\n    case AlertState.Success:\n      return isReportEnabled\n        ? theme.colors.success.base\n        : theme.colors.alert.base;\n    case AlertState.Noop:\n      return theme.colors.success.base;\n    case AlertState.Grace:\n      return theme.colors.alert.base;\n    default:\n      return theme.colors.grayscale.base;\n  }\n}\n\nexport default function AlertStatusIcon({\n  state,\n  isReportEnabled = false,\n}: {\n  state: string;\n  isReportEnabled: boolean;\n}) {\n  const theme = useTheme();\n  const lastStateConfig = {\n    icon: Icons.Check,\n    label: '',\n    status: '',\n  };\n  switch (state) {\n    case AlertState.Success:\n      lastStateConfig.icon = isReportEnabled\n        ? Icons.Check\n        : Icons.AlertSolidSmall;\n      lastStateConfig.label = isReportEnabled\n        ? t('Report sent')\n        : t('Alert triggered, notification sent');\n      lastStateConfig.status = AlertState.Success;\n      break;\n    case AlertState.Working:\n      lastStateConfig.icon = Icons.Running;\n      lastStateConfig.label = isReportEnabled\n        ? t('Report sending')\n        : t('Alert running');\n      lastStateConfig.status = AlertState.Working;\n      break;\n    case AlertState.Error:\n      lastStateConfig.icon = Icons.XSmall;\n      lastStateConfig.label = isReportEnabled\n        ? t('Report failed')\n        : t('Alert failed');\n      lastStateConfig.status = AlertState.Error;\n      break;\n    case AlertState.Noop:\n      lastStateConfig.icon = Icons.Check;\n      lastStateConfig.label = t('Nothing triggered');\n      lastStateConfig.status = AlertState.Noop;\n      break;\n    case AlertState.Grace:\n      lastStateConfig.icon = Icons.AlertSolidSmall;\n      lastStateConfig.label = t('Alert Triggered, In Grace Period');\n      lastStateConfig.status = AlertState.Grace;\n      break;\n    default:\n      lastStateConfig.icon = Icons.Check;\n      lastStateConfig.label = t('Nothing triggered');\n      lastStateConfig.status = AlertState.Noop;\n  }\n  const Icon = lastStateConfig.icon;\n  return (\n    <Tooltip title={lastStateConfig.label} placement=\"bottomLeft\">\n      <Icon\n        iconColor={getStatusColor(\n          lastStateConfig.status,\n          isReportEnabled,\n          theme,\n        )}\n      />\n    </Tooltip>\n  );\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport Owner from 'src/types/Owner';\nimport { NOTIFICATION_FORMATS } from 'src/reports/types';\n\ntype user = {\n  id: number;\n  first_name: string;\n  last_name: string;\n};\nexport type ChartObject = {\n  id: number;\n  slice_name: string;\n  viz_type: string;\n};\n\nexport type DashboardObject = {\n  dashboard_title: string;\n  id: number;\n};\n\nexport type DatabaseObject = {\n  database_name: string;\n  id: number;\n};\n\nexport type NotificationMethodOption = 'Email' | 'Slack';\n\nexport type Recipient = {\n  recipient_config_json: {\n    target: string;\n  };\n  type: NotificationMethodOption;\n};\n\nexport type MetaObject = {\n  id?: number;\n  label?: string;\n  value?: number | string;\n};\n\nexport type Operator = '<' | '>' | '<=' | '>=' | '==' | '!=' | 'not null';\n\nexport type AlertObject = {\n  active?: boolean;\n  creation_method?: string;\n  chart?: MetaObject;\n  changed_by?: user;\n  changed_on_delta_humanized?: string;\n  chart_id: number;\n  created_by?: user;\n  created_on?: string;\n  crontab?: string;\n  dashboard?: MetaObject;\n  dashboard_id?: number;\n  database?: MetaObject;\n  description?: string;\n  force_screenshot: boolean;\n  grace_period?: number;\n  id: number;\n  last_eval_dttm?: number;\n  last_state?: 'Success' | 'Working' | 'Error' | 'Not triggered' | 'On Grace';\n  log_retention?: number;\n  name?: string;\n  owners?: Array<Owner | MetaObject>;\n  sql?: string;\n  timezone?: string;\n  recipients?: Array<Recipient>;\n  report_format?: NOTIFICATION_FORMATS;\n  type?: string;\n  validator_config_json?: {\n    op?: Operator;\n    threshold?: number;\n  };\n  validator_type?: string;\n  working_timeout?: number;\n  error?: string;\n};\n\nexport type LogObject = {\n  end_dttm: string;\n  error_message: string;\n  id: number;\n  scheduled_dttm: string;\n  start_dttm: string;\n  state: string;\n  value: string;\n  uuid: string;\n};\n\nexport enum AlertState {\n  Success = 'Success',\n  Working = 'Working',\n  Error = 'Error',\n  Noop = 'Not triggered',\n  Grace = 'On Grace',\n}\n\nexport enum RecipientIconName {\n  Email = 'Email',\n  Slack = 'Slack',\n}\n"],"names":["StyledHeader","theme","gridUnit","typography","sizes","s","weights","normal","addDangerToast","isReportEnabled","alertId","state","loading","resourceCount","logCount","resourceCollection","logs","fetchData","t","alertLoading","resource","alertResource","fetchResource","useEffect","columns","useMemo","Cell","row","original","accessor","Header","size","disableSortBy","uuid","executionId","slice","scheduled_dttm","scheduledDttm","Date","format","start_dttm","startDttm","end_dttm","endDttm","getTime","error_message","title","placement","path","name","type","to","className","count","data","initialSort","id","desc","pageSize","getStatusColor","status","colors","primary","base","error","success","alert","grayscale","AlertStatusIcon","lastStateConfig","icon","label","Icon","iconColor","AlertState","RecipientIconName"],"sourceRoot":""}