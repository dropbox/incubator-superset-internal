{"version":3,"file":"4c7b29775067e1b09212.chunk.js","mappings":"uIAAA,MACMA,EAAyB,CAC7BC,qBAAsB,KACtBC,sBAH8B,IAAIC,WAAW,CAAC,EAAG,IAAK,IAAK,MAI3DC,eAAe,EACfC,kBAAkB,GCJpB,GACEC,OAAQ,CACN,yBAA0B,8IAC1B,yBAA0B,CACxBC,MAAO,GACPC,UAAW,2ODoCfC,KAAM,UACNC,GAJS,+rCAKTC,GAJS,qhCAKTC,YArCF,SAAqBC,EAAOb,GAC1B,MAAMc,EAAW,CAAC,EAElB,QAAkCC,IAA9BF,EAAKZ,qBACP,GAAKY,EAAKZ,qBAEH,CACL,MAAMe,EAAgBH,EAAKZ,qBAAqBgB,MAAM,EAAG,GACzDH,EAASI,4BAA8B,EACvCJ,EAASK,uBAAyBH,CACpC,MALEF,EAASI,4BAA8B,EAQ3C,GAAIL,EAAKX,sBAAuB,CAC9B,MAAMkB,EAAQC,MAAMC,KAAKT,EAAKX,uBAAuBqB,GAAKA,EAAI,MAEzDC,OAAOC,SAASL,EAAM,MACzBA,EAAM,GAAK,GAGbN,EAASY,wBAA0BN,CACrC,CAOA,YAL2BL,IAAvBF,EAAKT,gBACPU,EAASa,gBAAkBC,QAAQf,EAAKT,eACxCU,EAASe,mBAAqBD,QAAQf,EAAKR,mBAGtCS,CACT,E","sources":["webpack://superset/./node_modules/@luma.gl/shadertools/dist/esm/modules/picking/picking.js","webpack://superset/./node_modules/@deck.gl/core/dist/esm/shaderlib/picking/picking.js"],"sourcesContent":["const DEFAULT_HIGHLIGHT_COLOR = new Uint8Array([0, 255, 255, 255]);\nconst DEFAULT_MODULE_OPTIONS = {\n  pickingSelectedColor: null,\n  pickingHighlightColor: DEFAULT_HIGHLIGHT_COLOR,\n  pickingActive: false,\n  pickingAttribute: false\n};\n\nfunction getUniforms(opts = DEFAULT_MODULE_OPTIONS) {\n  const uniforms = {};\n\n  if (opts.pickingSelectedColor !== undefined) {\n    if (!opts.pickingSelectedColor) {\n      uniforms.picking_uSelectedColorValid = 0;\n    } else {\n      const selectedColor = opts.pickingSelectedColor.slice(0, 3);\n      uniforms.picking_uSelectedColorValid = 1;\n      uniforms.picking_uSelectedColor = selectedColor;\n    }\n  }\n\n  if (opts.pickingHighlightColor) {\n    const color = Array.from(opts.pickingHighlightColor, x => x / 255);\n\n    if (!Number.isFinite(color[3])) {\n      color[3] = 1;\n    }\n\n    uniforms.picking_uHighlightColor = color;\n  }\n\n  if (opts.pickingActive !== undefined) {\n    uniforms.picking_uActive = Boolean(opts.pickingActive);\n    uniforms.picking_uAttribute = Boolean(opts.pickingAttribute);\n  }\n\n  return uniforms;\n}\n\nconst vs = \"uniform bool picking_uActive;\\nuniform bool picking_uAttribute;\\nuniform vec3 picking_uSelectedColor;\\nuniform bool picking_uSelectedColorValid;\\n\\nout vec4 picking_vRGBcolor_Avalid;\\n\\nconst float COLOR_SCALE = 1. / 255.;\\n\\nbool picking_isColorValid(vec3 color) {\\n  return dot(color, vec3(1.0)) > 0.001;\\n}\\n\\nbool isVertexPicked(vec3 vertexColor) {\\n  return\\n    picking_uSelectedColorValid &&\\n    !picking_isColorValid(abs(vertexColor - picking_uSelectedColor));\\n}\\n\\nvoid picking_setPickingColor(vec3 pickingColor) {\\n  if (picking_uActive) {\\n    picking_vRGBcolor_Avalid.a = float(picking_isColorValid(pickingColor));\\n\\n    if (!picking_uAttribute) {\\n      picking_vRGBcolor_Avalid.rgb = pickingColor * COLOR_SCALE;\\n    }\\n  } else {\\n    picking_vRGBcolor_Avalid.a = float(isVertexPicked(pickingColor));\\n  }\\n}\\n\\nvoid picking_setPickingAttribute(float value) {\\n  if (picking_uAttribute) {\\n    picking_vRGBcolor_Avalid.r = value;\\n  }\\n}\\nvoid picking_setPickingAttribute(vec2 value) {\\n  if (picking_uAttribute) {\\n    picking_vRGBcolor_Avalid.rg = value;\\n  }\\n}\\nvoid picking_setPickingAttribute(vec3 value) {\\n  if (picking_uAttribute) {\\n    picking_vRGBcolor_Avalid.rgb = value;\\n  }\\n}\\n\";\nconst fs = \"uniform bool picking_uActive;\\nuniform vec3 picking_uSelectedColor;\\nuniform vec4 picking_uHighlightColor;\\n\\nin vec4 picking_vRGBcolor_Avalid;\\nvec4 picking_filterHighlightColor(vec4 color) {\\n  if (picking_uActive) {\\n    return color;\\n  }\\n  bool selected = bool(picking_vRGBcolor_Avalid.a);\\n\\n  if (selected) {\\n    float highLightAlpha = picking_uHighlightColor.a;\\n    float blendedAlpha = highLightAlpha + color.a * (1.0 - highLightAlpha);\\n    float highLightRatio = highLightAlpha / blendedAlpha;\\n\\n    vec3 blendedRGB = mix(color.rgb, picking_uHighlightColor.rgb, highLightRatio);\\n    return vec4(blendedRGB, blendedAlpha);\\n  } else {\\n    return color;\\n  }\\n}\\nvec4 picking_filterPickingColor(vec4 color) {\\n  if (picking_uActive) {\\n    if (picking_vRGBcolor_Avalid.a == 0.0) {\\n      discard;\\n    }\\n    return picking_vRGBcolor_Avalid;\\n  }\\n  return color;\\n}\\nvec4 picking_filterColor(vec4 color) {\\n  vec4 highightColor = picking_filterHighlightColor(color);\\n  return picking_filterPickingColor(highightColor);\\n}\\n\\n\";\nexport const picking = {\n  name: 'picking',\n  vs,\n  fs,\n  getUniforms\n};\n//# sourceMappingURL=picking.js.map","import { picking } from '@luma.gl/core';\nexport default {\n  inject: {\n    'vs:DECKGL_FILTER_COLOR': \"\\n  picking_setPickingColor(geometry.pickingColor);\\n  // for picking depth values\\n  picking_setPickingAttribute(geometry.position.z);\\n  \",\n    'fs:DECKGL_FILTER_COLOR': {\n      order: 99,\n      injection: \"\\n  // use highlight color if this fragment belongs to the selected object.\\n  color = picking_filterHighlightColor(color);\\n\\n  // use picking color if rendering to picking FBO.\\n  color = picking_filterPickingColor(color);\\n    \"\n    }\n  },\n  ...picking\n};\n//# sourceMappingURL=picking.js.map"],"names":["DEFAULT_MODULE_OPTIONS","pickingSelectedColor","pickingHighlightColor","Uint8Array","pickingActive","pickingAttribute","inject","order","injection","name","vs","fs","getUniforms","opts","uniforms","undefined","selectedColor","slice","picking_uSelectedColorValid","picking_uSelectedColor","color","Array","from","x","Number","isFinite","picking_uHighlightColor","picking_uActive","Boolean","picking_uAttribute"],"sourceRoot":""}