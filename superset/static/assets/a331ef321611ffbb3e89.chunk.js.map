{"version":3,"file":"a331ef321611ffbb3e89.chunk.js","mappings":"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","sources":["webpack://superset/./node_modules/lodash/uniqBy.js","webpack://superset/./src/components/ImportModal/styles.ts","webpack://superset/./src/components/ImportModal/ErrorAlert.tsx","webpack://superset/./src/components/ImportModal/index.tsx","webpack://superset/./src/views/CRUD/chart/ChartList.tsx"],"sourcesContent":["var baseIteratee = require('./_baseIteratee'),\n    baseUniq = require('./_baseUniq');\n\n/**\n * This method is like `_.uniq` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the criterion by which\n * uniqueness is computed. The order of result values is determined by the\n * order they occur in the array. The iteratee is invoked with one argument:\n * (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\n * // => [2.1, 1.2]\n *\n * // The `_.property` iteratee shorthand.\n * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n * // => [{ 'x': 1 }, { 'x': 2 }]\n */\nfunction uniqBy(array, iteratee) {\n  return (array && array.length) ? baseUniq(array, baseIteratee(iteratee, 2)) : [];\n}\n\nmodule.exports = uniqBy;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { css, SupersetTheme } from '@superset-ui/core';\n\nexport const antdWarningAlertStyles = (theme: SupersetTheme) => css`\n  border: 1px solid ${theme.colors.warning.light1};\n  padding: ${theme.gridUnit * 4}px;\n  margin: ${theme.gridUnit * 4}px 0;\n  color: ${theme.colors.warning.dark2};\n\n  .ant-alert-message {\n    margin: 0;\n  }\n\n  .ant-alert-description {\n    font-size: ${theme.typography.sizes.s + 1}px;\n    line-height: ${theme.gridUnit * 4}px;\n\n    .ant-alert-icon {\n      margin-right: ${theme.gridUnit * 2.5}px;\n      font-size: ${theme.typography.sizes.l + 1}px;\n      position: relative;\n      top: ${theme.gridUnit / 4}px;\n    }\n  }\n`;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { FunctionComponent } from 'react';\nimport { t, SupersetTheme } from '@superset-ui/core';\n\nimport { getDatabaseDocumentationLinks } from 'src/views/CRUD/hooks';\nimport Alert from 'src/components/Alert';\nimport { antdWarningAlertStyles } from './styles';\n\nconst supersetTextDocs = getDatabaseDocumentationLinks();\nexport const DOCUMENTATION_LINK = supersetTextDocs\n  ? supersetTextDocs.support\n  : 'https://superset.apache.org/docs/databases/installing-database-drivers';\n\nexport interface IProps {\n  errorMessage: string;\n  showDbInstallInstructions: boolean;\n}\n\nconst ErrorAlert: FunctionComponent<IProps> = ({\n  errorMessage,\n  showDbInstallInstructions,\n}) => (\n  <Alert\n    closable={false}\n    css={(theme: SupersetTheme) => antdWarningAlertStyles(theme)}\n    type=\"error\"\n    showIcon\n    message={errorMessage}\n    description={\n      showDbInstallInstructions ? (\n        <>\n          <br />\n          {t(\n            'Database driver for importing maybe not installed. Visit the Superset documentation page for installation instructions:',\n          )}\n          <a\n            href={DOCUMENTATION_LINK}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"additional-fields-alert-description\"\n          >\n            {t('here')}\n          </a>\n          .\n        </>\n      ) : (\n        ''\n      )\n    }\n  />\n);\n\nexport default ErrorAlert;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { FunctionComponent, useEffect, useState } from 'react';\nimport { UploadChangeParam, UploadFile } from 'antd/lib/upload/interface';\nimport { styled, t } from '@superset-ui/core';\n\nimport Button from 'src/components/Button';\nimport Modal from 'src/components/Modal';\nimport { Upload } from 'src/components';\nimport { useImportResource } from 'src/views/CRUD/hooks';\nimport { ImportResourceName } from 'src/views/CRUD/types';\nimport ErrorAlert from './ErrorAlert';\n\nconst HelperMessage = styled.div`\n  display: block;\n  color: ${({ theme }) => theme.colors.grayscale.base};\n  font-size: ${({ theme }) => theme.typography.sizes.s}px;\n`;\n\nconst StyledInputContainer = styled.div`\n  padding-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n  padding-top: ${({ theme }) => theme.gridUnit * 2}px;\n\n  & > div {\n    margin: ${({ theme }) => theme.gridUnit}px 0;\n  }\n\n  &.extra-container {\n    padding-top: 8px;\n  }\n\n  .confirm-overwrite {\n    margin-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n  }\n\n  .input-container {\n    display: flex;\n    align-items: center;\n\n    label {\n      display: flex;\n      margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n    }\n\n    i {\n      margin: 0 ${({ theme }) => theme.gridUnit}px;\n    }\n  }\n\n  input,\n  textarea {\n    flex: 1 1 auto;\n  }\n\n  textarea {\n    height: 160px;\n    resize: none;\n  }\n\n  input::placeholder,\n  textarea::placeholder {\n    color: ${({ theme }) => theme.colors.grayscale.light1};\n  }\n\n  textarea,\n  input[type='text'],\n  input[type='number'] {\n    padding: ${({ theme }) => theme.gridUnit * 1.5}px\n      ${({ theme }) => theme.gridUnit * 2}px;\n    border-style: none;\n    border: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n    border-radius: ${({ theme }) => theme.gridUnit}px;\n\n    &[name='name'] {\n      flex: 0 1 auto;\n      width: 40%;\n    }\n\n    &[name='sqlalchemy_uri'] {\n      margin-right: ${({ theme }) => theme.gridUnit * 3}px;\n    }\n  }\n`;\n\nexport interface ImportModelsModalProps {\n  resourceName: ImportResourceName;\n  resourceLabel: string;\n  passwordsNeededMessage: string;\n  confirmOverwriteMessage: string;\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n  onModelImport: () => void;\n  show: boolean;\n  onHide: () => void;\n  passwordFields?: string[];\n  setPasswordFields?: (passwordFields: string[]) => void;\n}\n\nconst ImportModelsModal: FunctionComponent<ImportModelsModalProps> = ({\n  resourceName,\n  resourceLabel,\n  passwordsNeededMessage,\n  confirmOverwriteMessage,\n  onModelImport,\n  show,\n  onHide,\n  passwordFields = [],\n  setPasswordFields = () => {},\n}) => {\n  const [isHidden, setIsHidden] = useState<boolean>(true);\n  const [passwords, setPasswords] = useState<Record<string, string>>({});\n  const [needsOverwriteConfirm, setNeedsOverwriteConfirm] =\n    useState<boolean>(false);\n  const [confirmedOverwrite, setConfirmedOverwrite] = useState<boolean>(false);\n  const [fileList, setFileList] = useState<UploadFile[]>([]);\n  const [importingModel, setImportingModel] = useState<boolean>(false);\n  const [errorMessage, setErrorMessage] = useState<string>();\n\n  const clearModal = () => {\n    setFileList([]);\n    setPasswordFields([]);\n    setPasswords({});\n    setNeedsOverwriteConfirm(false);\n    setConfirmedOverwrite(false);\n    setImportingModel(false);\n    setErrorMessage('');\n  };\n\n  const handleErrorMsg = (msg: string) => {\n    setErrorMessage(msg);\n  };\n\n  const {\n    state: { alreadyExists, passwordsNeeded },\n    importResource,\n  } = useImportResource(resourceName, resourceLabel, handleErrorMsg);\n\n  useEffect(() => {\n    setPasswordFields(passwordsNeeded);\n    if (passwordsNeeded.length > 0) {\n      setImportingModel(false);\n    }\n  }, [passwordsNeeded, setPasswordFields]);\n\n  useEffect(() => {\n    setNeedsOverwriteConfirm(alreadyExists.length > 0);\n    if (alreadyExists.length > 0) {\n      setImportingModel(false);\n    }\n  }, [alreadyExists, setNeedsOverwriteConfirm]);\n\n  // Functions\n  const hide = () => {\n    setIsHidden(true);\n    onHide();\n    clearModal();\n  };\n\n  const onUpload = () => {\n    if (!(fileList[0]?.originFileObj instanceof File)) {\n      return;\n    }\n\n    setImportingModel(true);\n    importResource(\n      fileList[0].originFileObj,\n      passwords,\n      confirmedOverwrite,\n    ).then(result => {\n      if (result) {\n        clearModal();\n        onModelImport();\n      }\n    });\n  };\n\n  const changeFile = (info: UploadChangeParam) => {\n    setFileList([\n      {\n        ...info.file,\n        status: 'done',\n      },\n    ]);\n  };\n\n  const removeFile = (removedFile: UploadFile) => {\n    setFileList(fileList.filter(file => file.uid !== removedFile.uid));\n    return false;\n  };\n\n  const confirmOverwrite = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const targetValue = (event.currentTarget?.value as string) ?? '';\n    setConfirmedOverwrite(targetValue.toUpperCase() === t('OVERWRITE'));\n  };\n\n  const renderPasswordFields = () => {\n    if (passwordFields.length === 0) {\n      return null;\n    }\n\n    return (\n      <>\n        <h5>Database passwords</h5>\n        <HelperMessage>{passwordsNeededMessage}</HelperMessage>\n        {passwordFields.map(fileName => (\n          <StyledInputContainer key={`password-for-${fileName}`}>\n            <div className=\"control-label\">\n              {fileName}\n              <span className=\"required\">*</span>\n            </div>\n            <input\n              name={`password-${fileName}`}\n              autoComplete={`password-${fileName}`}\n              type=\"password\"\n              value={passwords[fileName]}\n              onChange={event =>\n                setPasswords({ ...passwords, [fileName]: event.target.value })\n              }\n            />\n          </StyledInputContainer>\n        ))}\n      </>\n    );\n  };\n\n  const renderOverwriteConfirmation = () => {\n    if (!needsOverwriteConfirm) {\n      return null;\n    }\n\n    return (\n      <>\n        <StyledInputContainer>\n          <div className=\"confirm-overwrite\">{confirmOverwriteMessage}</div>\n          <div className=\"control-label\">\n            {t('Type \"%s\" to confirm', t('OVERWRITE'))}\n          </div>\n          <input\n            data-test=\"overwrite-modal-input\"\n            id=\"overwrite\"\n            type=\"text\"\n            onChange={confirmOverwrite}\n          />\n        </StyledInputContainer>\n      </>\n    );\n  };\n\n  // Show/hide\n  if (isHidden && show) {\n    setIsHidden(false);\n  }\n\n  return (\n    <Modal\n      name=\"model\"\n      className=\"import-model-modal\"\n      disablePrimaryButton={\n        fileList.length === 0 ||\n        (needsOverwriteConfirm && !confirmedOverwrite) ||\n        importingModel\n      }\n      onHandledPrimaryAction={onUpload}\n      onHide={hide}\n      primaryButtonName={needsOverwriteConfirm ? t('Overwrite') : t('Import')}\n      primaryButtonType={needsOverwriteConfirm ? 'danger' : 'primary'}\n      width=\"750px\"\n      show={show}\n      title={<h4>{t('Import %s', resourceLabel)}</h4>}\n    >\n      <StyledInputContainer>\n        <Upload\n          name=\"modelFile\"\n          id=\"modelFile\"\n          data-test=\"model-file-input\"\n          accept=\".yaml,.json,.yml,.zip\"\n          fileList={fileList}\n          onChange={changeFile}\n          onRemove={removeFile}\n          // upload is handled by hook\n          customRequest={() => {}}\n          disabled={importingModel}\n        >\n          <Button loading={importingModel}>Select file</Button>\n        </Upload>\n      </StyledInputContainer>\n      {errorMessage && (\n        <ErrorAlert\n          errorMessage={errorMessage}\n          showDbInstallInstructions={passwordFields.length > 0}\n        />\n      )}\n      {renderPasswordFields()}\n      {renderOverwriteConfirmation()}\n    </Modal>\n  );\n};\n\nexport default ImportModelsModal;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  getChartMetadataRegistry,\n  styled,\n  SupersetClient,\n  t,\n} from '@superset-ui/core';\nimport React, { useState, useMemo, useCallback } from 'react';\nimport rison from 'rison';\nimport { uniqBy } from 'lodash';\nimport moment from 'moment';\nimport { FeatureFlag, isFeatureEnabled } from 'src/featureFlags';\nimport {\n  createErrorHandler,\n  createFetchRelated,\n  handleChartDelete,\n} from 'src/views/CRUD/utils';\nimport {\n  useChartEditModal,\n  useFavoriteStatus,\n  useListViewResource,\n} from 'src/views/CRUD/hooks';\nimport handleResourceExport from 'src/utils/export';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport SubMenu, { SubMenuProps } from 'src/views/components/SubMenu';\nimport FaveStar from 'src/components/FaveStar';\nimport ListView, {\n  Filter,\n  FilterOperator,\n  Filters,\n  ListViewProps,\n  SelectOption,\n} from 'src/components/ListView';\nimport Loading from 'src/components/Loading';\nimport { dangerouslyGetItemDoNotUse } from 'src/utils/localStorageHelpers';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport PropertiesModal from 'src/explore/components/PropertiesModal';\nimport ImportModelsModal from 'src/components/ImportModal/index';\nimport Chart from 'src/types/Chart';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport { nativeFilterGate } from 'src/dashboard/components/nativeFilters/utils';\nimport setupPlugins from 'src/setup/setupPlugins';\nimport InfoTooltip from 'src/components/InfoTooltip';\nimport CertifiedBadge from 'src/components/CertifiedBadge';\nimport ChartCard from './ChartCard';\n\nconst FlexRowContainer = styled.div`\n  align-items: center;\n  display: flex;\n\n  a {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    line-height: 1.2;\n  }\n\n  svg {\n    margin-right: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n\nconst PAGE_SIZE = 25;\nconst PASSWORDS_NEEDED_MESSAGE = t(\n  'The passwords for the databases below are needed in order to ' +\n    'import them together with the charts. Please note that the ' +\n    '\"Secure Extra\" and \"Certificate\" sections of ' +\n    'the database configuration are not present in export files, and ' +\n    'should be added manually after the import if they are needed.',\n);\nconst CONFIRM_OVERWRITE_MESSAGE = t(\n  'You are importing one or more charts that already exist. ' +\n    'Overwriting might cause you to lose some of your work. Are you ' +\n    'sure you want to overwrite?',\n);\n\nsetupPlugins();\nconst registry = getChartMetadataRegistry();\n\nconst createFetchDatasets = async (\n  filterValue = '',\n  page: number,\n  pageSize: number,\n) => {\n  // add filters if filterValue\n  const filters = filterValue\n    ? { filters: [{ col: 'table_name', opr: 'sw', value: filterValue }] }\n    : {};\n  const queryParams = rison.encode({\n    columns: ['datasource_name', 'datasource_id'],\n    keys: ['none'],\n    order_column: 'table_name',\n    order_direction: 'asc',\n    page,\n    page_size: pageSize,\n    ...filters,\n  });\n\n  const { json = {} } = await SupersetClient.get({\n    endpoint: `/api/v1/dataset/?q=${queryParams}`,\n  });\n\n  const datasets = json?.result?.map(\n    ({ table_name: tableName, id }: { table_name: string; id: number }) => ({\n      label: tableName,\n      value: id,\n    }),\n  );\n\n  return {\n    data: uniqBy<SelectOption>(datasets, 'value'),\n    totalCount: json?.count,\n  };\n};\n\ninterface ChartListProps {\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n  user: {\n    userId: string | number;\n    firstName: string;\n    lastName: string;\n  };\n}\n\nconst Actions = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.base};\n`;\n\nfunction ChartList(props: ChartListProps) {\n  const {\n    addDangerToast,\n    addSuccessToast,\n    user: { userId },\n  } = props;\n\n  const {\n    state: {\n      loading,\n      resourceCount: chartCount,\n      resourceCollection: charts,\n      bulkSelectEnabled,\n    },\n    setResourceCollection: setCharts,\n    hasPerm,\n    fetchData,\n    toggleBulkSelect,\n    refreshData,\n  } = useListViewResource<Chart>('chart', t('chart'), addDangerToast);\n\n  const chartIds = useMemo(() => charts.map(c => c.id), [charts]);\n\n  const [saveFavoriteStatus, favoriteStatus] = useFavoriteStatus(\n    'chart',\n    chartIds,\n    addDangerToast,\n  );\n  const {\n    sliceCurrentlyEditing,\n    handleChartUpdated,\n    openChartEditModal,\n    closeChartEditModal,\n  } = useChartEditModal(setCharts, charts);\n\n  const [importingChart, showImportModal] = useState<boolean>(false);\n  const [passwordFields, setPasswordFields] = useState<string[]>([]);\n  const [preparingExport, setPreparingExport] = useState<boolean>(false);\n\n  // TODO: Fix usage of localStorage keying on the user id\n  const userSettings = dangerouslyGetItemDoNotUse(userId?.toString(), null) as {\n    thumbnails: boolean;\n  };\n\n  const openChartImportModal = () => {\n    showImportModal(true);\n  };\n\n  const closeChartImportModal = () => {\n    showImportModal(false);\n  };\n\n  const handleChartImport = () => {\n    showImportModal(false);\n    refreshData();\n    addSuccessToast(t('Chart imported'));\n  };\n\n  const canCreate = hasPerm('can_write');\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canExport =\n    hasPerm('can_export') && isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT);\n  const initialSort = [{ id: 'changed_on_delta_humanized', desc: true }];\n\n  const handleBulkChartExport = (chartsToExport: Chart[]) => {\n    const ids = chartsToExport.map(({ id }) => id);\n    handleResourceExport('chart', ids, () => {\n      setPreparingExport(false);\n    });\n    setPreparingExport(true);\n  };\n\n  function handleBulkChartDelete(chartsToDelete: Chart[]) {\n    SupersetClient.delete({\n      endpoint: `/api/v1/chart/?q=${rison.encode(\n        chartsToDelete.map(({ id }) => id),\n      )}`,\n    }).then(\n      ({ json = {} }) => {\n        refreshData();\n        addSuccessToast(json.message);\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(\n          t('There was an issue deleting the selected charts: %s', errMsg),\n        ),\n      ),\n    );\n  }\n\n  const columns = useMemo(\n    () => [\n      {\n        Cell: ({\n          row: {\n            original: { id },\n          },\n        }: any) =>\n          userId && (\n            <FaveStar\n              itemId={id}\n              saveFaveStar={saveFavoriteStatus}\n              isStarred={favoriteStatus[id]}\n            />\n          ),\n        Header: '',\n        id: 'id',\n        disableSortBy: true,\n        size: 'xs',\n        hidden: !userId,\n      },\n      {\n        Cell: ({\n          row: {\n            original: {\n              url,\n              slice_name: sliceName,\n              certified_by: certifiedBy,\n              certification_details: certificationDetails,\n              description,\n            },\n          },\n        }: any) => (\n          <FlexRowContainer>\n            <a href={url} data-test={`${sliceName}-list-chart-title`}>\n              {certifiedBy && (\n                <>\n                  <CertifiedBadge\n                    certifiedBy={certifiedBy}\n                    details={certificationDetails}\n                  />{' '}\n                </>\n              )}\n              {sliceName}\n            </a>\n            {description && (\n              <InfoTooltip tooltip={description} viewBox=\"0 -1 24 24\" />\n            )}\n          </FlexRowContainer>\n        ),\n        Header: t('Chart'),\n        accessor: 'slice_name',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { viz_type: vizType },\n          },\n        }: any) => registry.get(vizType)?.name || vizType,\n        Header: t('Visualization type'),\n        accessor: 'viz_type',\n        size: 'xxl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: {\n              datasource_name_text: dsNameTxt,\n              datasource_url: dsUrl,\n            },\n          },\n        }: any) => <a href={dsUrl}>{dsNameTxt}</a>,\n        Header: t('Dataset'),\n        accessor: 'datasource_id',\n        disableSortBy: true,\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: {\n              last_saved_by: lastSavedBy,\n              changed_by_url: changedByUrl,\n            },\n          },\n        }: any) => (\n          <a href={changedByUrl}>\n            {lastSavedBy?.first_name\n              ? `${lastSavedBy?.first_name} ${lastSavedBy?.last_name}`\n              : null}\n          </a>\n        ),\n        Header: t('Modified by'),\n        accessor: 'last_saved_by.first_name',\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { last_saved_at: lastSavedAt },\n          },\n        }: any) => (\n          <span className=\"no-wrap\">\n            {lastSavedAt ? moment.utc(lastSavedAt).fromNow() : null}\n          </span>\n        ),\n        Header: t('Last modified'),\n        accessor: 'last_saved_at',\n        size: 'xl',\n      },\n      {\n        accessor: 'owners',\n        hidden: true,\n        disableSortBy: true,\n      },\n      {\n        Cell: ({\n          row: {\n            original: { created_by: createdBy },\n          },\n        }: any) =>\n          createdBy ? `${createdBy.first_name} ${createdBy.last_name}` : '',\n        Header: t('Created by'),\n        accessor: 'created_by',\n        disableSortBy: true,\n        size: 'xl',\n      },\n      {\n        Cell: ({ row: { original } }: any) => {\n          const handleDelete = () =>\n            handleChartDelete(\n              original,\n              addSuccessToast,\n              addDangerToast,\n              refreshData,\n            );\n          const openEditModal = () => openChartEditModal(original);\n          const handleExport = () => handleBulkChartExport([original]);\n          if (!canEdit && !canDelete && !canExport) {\n            return null;\n          }\n\n          return (\n            <Actions className=\"actions\">\n              {canDelete && (\n                <ConfirmStatusChange\n                  title={t('Please confirm')}\n                  description={\n                    <>\n                      {t('Are you sure you want to delete')}{' '}\n                      <b>{original.slice_name}</b>?\n                    </>\n                  }\n                  onConfirm={handleDelete}\n                >\n                  {confirmDelete => (\n                    <Tooltip\n                      id=\"delete-action-tooltip\"\n                      title={t('Delete')}\n                      placement=\"bottom\"\n                    >\n                      <span\n                        data-test=\"trash\"\n                        role=\"button\"\n                        tabIndex={0}\n                        className=\"action-button\"\n                        onClick={confirmDelete}\n                      >\n                        <Icons.Trash />\n                      </span>\n                    </Tooltip>\n                  )}\n                </ConfirmStatusChange>\n              )}\n              {canExport && (\n                <Tooltip\n                  id=\"export-action-tooltip\"\n                  title={t('Export')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={handleExport}\n                  >\n                    <Icons.Share />\n                  </span>\n                </Tooltip>\n              )}\n              {canEdit && (\n                <Tooltip\n                  id=\"edit-action-tooltip\"\n                  title={t('Edit')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={openEditModal}\n                  >\n                    <Icons.EditAlt data-test=\"edit-alt\" />\n                  </span>\n                </Tooltip>\n              )}\n            </Actions>\n          );\n        },\n        Header: t('Actions'),\n        id: 'actions',\n        disableSortBy: true,\n        hidden: !canEdit && !canDelete,\n      },\n    ],\n    [\n      userId,\n      canEdit,\n      canDelete,\n      canExport,\n      saveFavoriteStatus,\n      favoriteStatus,\n      refreshData,\n      addSuccessToast,\n      addDangerToast,\n    ],\n  );\n\n  const favoritesFilter: Filter = useMemo(\n    () => ({\n      Header: t('Favorite'),\n      id: 'id',\n      urlDisplay: 'favorite',\n      input: 'select',\n      operator: FilterOperator.chartIsFav,\n      unfilteredLabel: t('Any'),\n      selects: [\n        { label: t('Yes'), value: true },\n        { label: t('No'), value: false },\n      ],\n    }),\n    [],\n  );\n\n  const filters: Filters = useMemo(\n    () => [\n      {\n        Header: t('Owner'),\n        id: 'owners',\n        input: 'select',\n        operator: FilterOperator.relationManyMany,\n        unfilteredLabel: t('All'),\n        fetchSelects: createFetchRelated(\n          'chart',\n          'owners',\n          createErrorHandler(errMsg =>\n            addDangerToast(\n              t(\n                'An error occurred while fetching chart owners values: %s',\n                errMsg,\n              ),\n            ),\n          ),\n          props.user,\n        ),\n        paginate: true,\n      },\n      {\n        Header: t('Created by'),\n        id: 'created_by',\n        input: 'select',\n        operator: FilterOperator.relationOneMany,\n        unfilteredLabel: t('All'),\n        fetchSelects: createFetchRelated(\n          'chart',\n          'created_by',\n          createErrorHandler(errMsg =>\n            addDangerToast(\n              t(\n                'An error occurred while fetching chart created by values: %s',\n                errMsg,\n              ),\n            ),\n          ),\n          props.user,\n        ),\n        paginate: true,\n      },\n      {\n        Header: t('Chart type'),\n        id: 'viz_type',\n        input: 'select',\n        operator: FilterOperator.equals,\n        unfilteredLabel: t('All'),\n        selects: registry\n          .keys()\n          .filter(k => nativeFilterGate(registry.get(k)?.behaviors || []))\n          .map(k => ({ label: registry.get(k)?.name || k, value: k }))\n          .sort((a, b) => {\n            if (!a.label || !b.label) {\n              return 0;\n            }\n\n            if (a.label > b.label) {\n              return 1;\n            }\n            if (a.label < b.label) {\n              return -1;\n            }\n\n            return 0;\n          }),\n      },\n      {\n        Header: t('Dataset'),\n        id: 'datasource_id',\n        input: 'select',\n        operator: FilterOperator.equals,\n        unfilteredLabel: t('All'),\n        fetchSelects: createFetchDatasets,\n        paginate: true,\n      },\n      ...(userId ? [favoritesFilter] : []),\n      {\n        Header: t('Certified'),\n        id: 'id',\n        urlDisplay: 'certified',\n        input: 'select',\n        operator: FilterOperator.chartIsCertified,\n        unfilteredLabel: t('Any'),\n        selects: [\n          { label: t('Yes'), value: true },\n          { label: t('No'), value: false },\n        ],\n      },\n      {\n        Header: t('Search'),\n        id: 'slice_name',\n        input: 'search',\n        operator: FilterOperator.chartAllText,\n      },\n    ],\n    [addDangerToast, favoritesFilter, props.user],\n  );\n\n  const sortTypes = [\n    {\n      desc: false,\n      id: 'slice_name',\n      label: t('Alphabetical'),\n      value: 'alphabetical',\n    },\n    {\n      desc: true,\n      id: 'changed_on_delta_humanized',\n      label: t('Recently modified'),\n      value: 'recently_modified',\n    },\n    {\n      desc: false,\n      id: 'changed_on_delta_humanized',\n      label: t('Least recently modified'),\n      value: 'least_recently_modified',\n    },\n  ];\n\n  const renderCard = useCallback(\n    (chart: Chart) => (\n      <ChartCard\n        chart={chart}\n        showThumbnails={\n          userSettings\n            ? userSettings.thumbnails\n            : isFeatureEnabled(FeatureFlag.THUMBNAILS)\n        }\n        hasPerm={hasPerm}\n        openChartEditModal={openChartEditModal}\n        bulkSelectEnabled={bulkSelectEnabled}\n        addDangerToast={addDangerToast}\n        addSuccessToast={addSuccessToast}\n        refreshData={refreshData}\n        userId={userId}\n        loading={loading}\n        favoriteStatus={favoriteStatus[chart.id]}\n        saveFavoriteStatus={saveFavoriteStatus}\n        handleBulkChartExport={handleBulkChartExport}\n      />\n    ),\n    [\n      addDangerToast,\n      addSuccessToast,\n      bulkSelectEnabled,\n      favoriteStatus,\n      hasPerm,\n      loading,\n    ],\n  );\n\n  const subMenuButtons: SubMenuProps['buttons'] = [];\n  if (canDelete || canExport) {\n    subMenuButtons.push({\n      name: t('Bulk select'),\n      buttonStyle: 'secondary',\n      'data-test': 'bulk-select',\n      onClick: toggleBulkSelect,\n    });\n  }\n  if (canCreate) {\n    subMenuButtons.push({\n      name: (\n        <>\n          <i className=\"fa fa-plus\" /> {t('Chart')}\n        </>\n      ),\n      buttonStyle: 'primary',\n      onClick: () => {\n        window.location.assign('/chart/add');\n      },\n    });\n\n    if (isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT)) {\n      subMenuButtons.push({\n        name: (\n          <Tooltip\n            id=\"import-tooltip\"\n            title={t('Import charts')}\n            placement=\"bottomRight\"\n          >\n            <Icons.Import data-test=\"import-button\" />\n          </Tooltip>\n        ),\n        buttonStyle: 'link',\n        onClick: openChartImportModal,\n      });\n    }\n  }\n  return (\n    <>\n      <SubMenu name={t('Charts')} buttons={subMenuButtons} />\n      {sliceCurrentlyEditing && (\n        <PropertiesModal\n          onHide={closeChartEditModal}\n          onSave={handleChartUpdated}\n          show\n          slice={sliceCurrentlyEditing}\n        />\n      )}\n      <ConfirmStatusChange\n        title={t('Please confirm')}\n        description={t('Are you sure you want to delete the selected charts?')}\n        onConfirm={handleBulkChartDelete}\n      >\n        {confirmDelete => {\n          const bulkActions: ListViewProps['bulkActions'] = [];\n          if (canDelete) {\n            bulkActions.push({\n              key: 'delete',\n              name: t('Delete'),\n              type: 'danger',\n              onSelect: confirmDelete,\n            });\n          }\n          if (canExport) {\n            bulkActions.push({\n              key: 'export',\n              name: t('Export'),\n              type: 'primary',\n              onSelect: handleBulkChartExport,\n            });\n          }\n          return (\n            <ListView<Chart>\n              bulkActions={bulkActions}\n              bulkSelectEnabled={bulkSelectEnabled}\n              cardSortSelectOptions={sortTypes}\n              className=\"chart-list-view\"\n              columns={columns}\n              count={chartCount}\n              data={charts}\n              disableBulkSelect={toggleBulkSelect}\n              fetchData={fetchData}\n              filters={filters}\n              initialSort={initialSort}\n              loading={loading}\n              pageSize={PAGE_SIZE}\n              renderCard={renderCard}\n              showThumbnails={\n                userSettings\n                  ? userSettings.thumbnails\n                  : isFeatureEnabled(FeatureFlag.THUMBNAILS)\n              }\n              defaultViewMode={\n                isFeatureEnabled(FeatureFlag.LISTVIEWS_DEFAULT_CARD_VIEW)\n                  ? 'card'\n                  : 'table'\n              }\n            />\n          );\n        }}\n      </ConfirmStatusChange>\n\n      <ImportModelsModal\n        resourceName=\"chart\"\n        resourceLabel={t('chart')}\n        passwordsNeededMessage={PASSWORDS_NEEDED_MESSAGE}\n        confirmOverwriteMessage={CONFIRM_OVERWRITE_MESSAGE}\n        addDangerToast={addDangerToast}\n        addSuccessToast={addSuccessToast}\n        onModelImport={handleChartImport}\n        show={importingChart}\n        onHide={closeChartImportModal}\n        passwordFields={passwordFields}\n        setPasswordFields={setPasswordFields}\n      />\n      {preparingExport && <Loading />}\n    </>\n  );\n}\n\nexport default withToasts(ChartList);\n"],"names":["baseIteratee","baseUniq","module","exports","array","iteratee","length","supersetTextDocs","DOCUMENTATION_LINK","support","errorMessage","showDbInstallInstructions","Alert","closable","css","theme","colors","warning","light1","gridUnit","dark2","typography","sizes","s","l","antdWarningAlertStyles","type","showIcon","message","description","t","href","target","rel","className","HelperMessage","style","grayscale","base","StyledInputContainer","light2","resourceName","resourceLabel","passwordsNeededMessage","confirmOverwriteMessage","onModelImport","show","onHide","passwordFields","setPasswordFields","isHidden","setIsHidden","useState","passwords","setPasswords","needsOverwriteConfirm","setNeedsOverwriteConfirm","confirmedOverwrite","setConfirmedOverwrite","fileList","setFileList","importingModel","setImportingModel","setErrorMessage","clearModal","state","alreadyExists","passwordsNeeded","importResource","msg","useEffect","Modal","name","disablePrimaryButton","onHandledPrimaryAction","originFileObj","File","then","result","primaryButtonName","primaryButtonType","width","title","id","accept","onChange","info","file","status","onRemove","removedFile","filter","uid","customRequest","disabled","Button","loading","map","fileName","key","autoComplete","value","event","targetValue","currentTarget","toUpperCase","FlexRowContainer","PASSWORDS_NEEDED_MESSAGE","CONFIRM_OVERWRITE_MESSAGE","registry","createFetchDatasets","async","filterValue","page","pageSize","filters","col","opr","queryParams","columns","keys","order_column","order_direction","page_size","json","endpoint","datasets","table_name","tableName","label","data","totalCount","count","Actions","props","addDangerToast","addSuccessToast","user","userId","resourceCount","chartCount","resourceCollection","charts","bulkSelectEnabled","setResourceCollection","setCharts","hasPerm","fetchData","toggleBulkSelect","refreshData","chartIds","useMemo","c","saveFavoriteStatus","favoriteStatus","sliceCurrentlyEditing","handleChartUpdated","openChartEditModal","closeChartEditModal","importingChart","showImportModal","preparingExport","setPreparingExport","userSettings","toString","canCreate","canEdit","canDelete","canExport","initialSort","desc","handleBulkChartExport","chartsToExport","ids","Cell","row","original","itemId","saveFaveStar","isStarred","Header","disableSortBy","size","hidden","url","slice_name","sliceName","certified_by","certifiedBy","certification_details","certificationDetails","details","tooltip","viewBox","accessor","viz_type","vizType","get","datasource_name_text","dsNameTxt","datasource_url","dsUrl","last_saved_by","lastSavedBy","changed_by_url","changedByUrl","first_name","last_name","last_saved_at","lastSavedAt","fromNow","created_by","createdBy","onConfirm","confirmDelete","placement","role","tabIndex","onClick","favoritesFilter","urlDisplay","input","operator","unfilteredLabel","selects","fetchSelects","errMsg","paginate","k","behaviors","sort","a","b","sortTypes","renderCard","useCallback","chart","showThumbnails","thumbnails","subMenuButtons","push","buttonStyle","window","location","assign","buttons","onSave","slice","chartsToDelete","bulkActions","onSelect","cardSortSelectOptions","disableBulkSelect","defaultViewMode"],"sourceRoot":""}