import React from 'react';
interface WordWithWidth {
    word: string;
    width: number;
}
interface WordsWithWidth {
    words: string[];
    width?: number;
}
declare type SVGTSpanProps = React.SVGAttributes<SVGTSpanElement>;
declare type SVGTextProps = React.SVGAttributes<SVGTextElement>;
declare type OwnProps = {
    /** className to apply to the SVGText element. */
    className?: string;
    /** Whether to scale the fontSize to accomodate the specified width.  */
    scaleToFit?: boolean;
    /** Rotational angle of the text. */
    angle?: number;
    /** Horizontal text anchor. */
    textAnchor?: 'start' | 'middle' | 'end' | 'inherit';
    /** Vertical text anchor. */
    verticalAnchor?: 'start' | 'middle' | 'end';
    /** Styles to be applied to the text (and used in computation of its size). */
    style?: React.CSSProperties;
    /** Ref passed to the Text SVG element. */
    innerRef?: React.Ref<SVGSVGElement>;
    /** x position of the text. */
    x?: string | number;
    /** y position of the text. */
    y?: string | number;
    /** dx offset of the text. */
    dx?: string | number;
    /** dy offset of the text. */
    dy?: string | number;
    /** Desired "line height" of the text, implemented as y offsets. */
    lineHeight?: SVGTSpanProps['dy'];
    /** Cap height of the text. */
    capHeight?: SVGTSpanProps['capHeight'];
    /** Font size of text. */
    fontSize?: string | number;
    /** Font family of text. */
    fontFamily?: string;
    /** Fill color of text. */
    fill?: string;
    /** Maximum width to occupy (approximate as words are not split). */
    width?: number;
    /** String (or number coercible to one) to be styled and positioned. */
    children?: string | number;
};
export declare type TextProps = OwnProps & Omit<SVGTextProps, keyof OwnProps>;
declare type TextState = {
    wordsByLines: WordsWithWidth[];
};
declare class Text extends React.Component<TextProps, TextState> {
    static defaultProps: {
        x: number;
        y: number;
        dx: number;
        dy: number;
        lineHeight: string;
        capHeight: string;
        scaleToFit: boolean;
        textAnchor: string;
        verticalAnchor: string;
    };
    state: TextState;
    private wordsWithWidth;
    private spaceWidth;
    componentDidMount(): void;
    componentDidUpdate(prevProps: TextProps, prevState: TextState): void;
    updateWordsByLines(props: TextProps, needCalculate?: boolean): void;
    updateWordsWithoutCalculate(props: TextProps): void;
    calculateWordsByLines(wordsWithWidth: WordWithWidth[], spaceWidth: number, lineWidth?: number): WordsWithWidth[];
    render(): JSX.Element;
}
export default Text;
