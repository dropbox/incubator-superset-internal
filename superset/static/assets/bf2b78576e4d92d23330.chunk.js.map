{"version":3,"file":"bf2b78576e4d92d23330.chunk.js","mappings":"iHAsBA,IAAYA,EAqDN,SAAUC,EACdC,EACAC,GAEA,IACE,MAAMC,EAAQC,aAAaC,QAAQJ,GACnC,OAAc,OAAVE,EACKD,EAEFI,KAAKC,MAAMJ,GAClB,MACA,OAAOD,GAWL,SAAUM,EAA2BP,EAAaE,GACtD,IACEC,aAAaK,QAAQR,EAAKK,KAAKI,UAAUP,IACzC,QAKE,SAAUE,EACdJ,EACAC,GAEA,OAAOF,EAA2BC,EAAKC,GAGnC,SAAUO,EACdR,EACAE,GAEAK,EAA2BP,EAAKE,G,sDA9FlC,SAAYJ,GAUV,sEACA,wCACA,kCACA,sCACA,wCACA,gDACA,wDACA,oDACA,sDAUA,oEACA,4GA7BF,CAAYA,IAAAA,EAAgB","sources":["webpack://superset/./src/utils/localStorageHelpers.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { TableTabTypes } from 'src/views/CRUD/types';\nimport { SetTabType } from 'src/views/CRUD/welcome/ActivityTable';\n\nexport enum LocalStorageKeys {\n  /**\n   * START LEGACY LOCAL STORAGE KEYS\n   *\n   * Do not follow the patterns here for key names. Keys should instead be namespaced to avoid\n   * collisions.\n   *\n   * TODO: Update all local storage keys to follow the new pattern. This is a breaking change,\n   * and therefore should be done in a major release.\n   */\n  filter_box_transition_snoozed_at = 'filter_box_transition_snoozed_at',\n  chart_split_sizes = 'chart_split_sizes',\n  controls_width = 'controls_width',\n  datasource_width = 'datasource_width',\n  is_datapanel_open = 'is_datapanel_open',\n  homepage_chart_filter = 'homepage_chart_filter',\n  homepage_dashboard_filter = 'homepage_dashboard_filter',\n  homepage_collapse_state = 'homepage_collapse_state',\n  homepage_activity_filter = 'homepage_activity_filter',\n  /** END LEGACY LOCAL STORAGE KEYS */\n\n  /**\n   * New local storage keys should be namespaced to avoid collisions. Keys should be named in the\n   * form [namespace]__[key].\n   *\n   * Example:\n   * sqllab__is_autocomplete_enabled\n   */\n  sqllab__is_autocomplete_enabled = 'sqllab__is_autocomplete_enabled',\n  explore__data_table_original_formatted_time_columns = 'explore__data_table_original_formatted_time_columns',\n}\n\nexport type LocalStorageValues = {\n  filter_box_transition_snoozed_at: Record<number, number>;\n  chart_split_sizes: [number, number];\n  controls_width: number;\n  datasource_width: number;\n  is_datapanel_open: boolean;\n  homepage_chart_filter: TableTabTypes;\n  homepage_dashboard_filter: TableTabTypes;\n  homepage_collapse_state: string[];\n  homepage_activity_filter: SetTabType | null;\n  sqllab__is_autocomplete_enabled: boolean;\n  explore__data_table_original_formatted_time_columns: Record<string, string[]>;\n};\n\n/*\n * This function should not be used directly, as it doesn't provide any type safety or any\n * guarantees that the globally namespaced localstorage key is correct.\n *\n * Instead, use getItem and setItem. Any legacy uses should be updated/migrated in future\n * Superset versions (as they may require breaking changes).\n * */\nexport function dangerouslyGetItemDoNotUse(\n  key: string,\n  defaultValue: any,\n): any {\n  try {\n    const value = localStorage.getItem(key);\n    if (value === null) {\n      return defaultValue;\n    }\n    return JSON.parse(value);\n  } catch {\n    return defaultValue;\n  }\n}\n\n/*\n * This function should not be used directly, as it doesn't provide any type safety or any\n * guarantees that the globally namespaced localstorage key is correct.\n *\n * Instead, use getItem and setItem. Any legacy uses should be updated/migrated in future\n * Superset versions (as they may require breaking changes).\n * */\nexport function dangerouslySetItemDoNotUse(key: string, value: any): void {\n  try {\n    localStorage.setItem(key, JSON.stringify(value));\n  } catch {\n    // Catch in case localStorage is unavailable\n  }\n}\n\nexport function getItem<K extends LocalStorageKeys>(\n  key: K,\n  defaultValue: LocalStorageValues[K],\n): LocalStorageValues[K] {\n  return dangerouslyGetItemDoNotUse(key, defaultValue);\n}\n\nexport function setItem<K extends LocalStorageKeys>(\n  key: K,\n  value: LocalStorageValues[K],\n): void {\n  dangerouslySetItemDoNotUse(key, value);\n}\n"],"names":["LocalStorageKeys","dangerouslyGetItemDoNotUse","key","defaultValue","value","localStorage","getItem","JSON","parse","dangerouslySetItemDoNotUse","setItem","stringify"],"sourceRoot":""}