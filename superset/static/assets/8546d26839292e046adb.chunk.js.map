{"version":3,"file":"8546d26839292e046adb.chunk.js","mappings":"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","sources":["webpack://superset/./plugins/plugin-chart-echarts/src/Treemap/EchartsTreemap.tsx","webpack://superset/./plugins/plugin-chart-echarts/src/components/Echart.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback } from 'react';\nimport Echart from '../components/Echart';\nimport { EventHandlers } from '../types';\nimport { extractTreePathInfo } from './constants';\nimport { TreemapTransformedProps } from './types';\n\nexport default function EchartsTreemap({\n  height,\n  width,\n  echartOptions,\n  setDataMask,\n  labelMap,\n  groupby,\n  selectedValues,\n  formData,\n}: TreemapTransformedProps) {\n  const handleChange = useCallback(\n    (values: string[]) => {\n      if (!formData.emitFilter) {\n        return;\n      }\n\n      const groupbyValues = values.map(value => labelMap[value]);\n\n      setDataMask({\n        extraFormData: {\n          filters:\n            values.length === 0\n              ? []\n              : groupby.map((col, idx) => {\n                  const val = groupbyValues.map(v => v[idx]);\n                  if (val === null || val === undefined)\n                    return {\n                      col,\n                      op: 'IS NULL',\n                    };\n                  return {\n                    col,\n                    op: 'IN',\n                    val: val as (string | number | boolean)[],\n                  };\n                }),\n        },\n        filterState: {\n          value: groupbyValues.length ? groupbyValues : null,\n          selectedValues: values.length ? values : null,\n        },\n      });\n    },\n    [groupby, labelMap, setDataMask, selectedValues],\n  );\n\n  const eventHandlers: EventHandlers = {\n    click: props => {\n      const { data, treePathInfo } = props;\n      // do noting when clicking the parent node\n      if (data?.children) {\n        return;\n      }\n      const { treePath } = extractTreePathInfo(treePathInfo);\n      const name = treePath.join(',');\n      const values = Object.values(selectedValues);\n      if (values.includes(name)) {\n        handleChange(values.filter(v => v !== name));\n      } else {\n        handleChange([name]);\n      }\n    },\n  };\n\n  return (\n    <Echart\n      height={height}\n      width={width}\n      echartOptions={echartOptions}\n      eventHandlers={eventHandlers}\n      selectedValues={selectedValues}\n    />\n  );\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, {\n  useRef,\n  useEffect,\n  useMemo,\n  forwardRef,\n  useImperativeHandle,\n} from 'react';\nimport { styled } from '@superset-ui/core';\nimport { ECharts, init } from 'echarts';\nimport { EchartsHandler, EchartsProps, EchartsStylesProps } from '../types';\n\nconst Styles = styled.div<EchartsStylesProps>`\n  height: ${({ height }) => height};\n  width: ${({ width }) => width};\n`;\n\nfunction Echart(\n  {\n    width,\n    height,\n    echartOptions,\n    eventHandlers,\n    zrEventHandlers,\n    selectedValues = {},\n  }: EchartsProps,\n  ref: React.Ref<EchartsHandler>,\n) {\n  const divRef = useRef<HTMLDivElement>(null);\n  const chartRef = useRef<ECharts>();\n  const currentSelection = useMemo(\n    () => Object.keys(selectedValues) || [],\n    [selectedValues],\n  );\n  const previousSelection = useRef<string[]>([]);\n\n  useImperativeHandle(ref, () => ({\n    getEchartInstance: () => chartRef.current,\n  }));\n\n  useEffect(() => {\n    if (!divRef.current) return;\n    if (!chartRef.current) {\n      chartRef.current = init(divRef.current);\n    }\n\n    Object.entries(eventHandlers || {}).forEach(([name, handler]) => {\n      chartRef.current?.off(name);\n      chartRef.current?.on(name, handler);\n    });\n\n    Object.entries(zrEventHandlers || {}).forEach(([name, handler]) => {\n      chartRef.current?.getZr().off(name);\n      chartRef.current?.getZr().on(name, handler);\n    });\n\n    chartRef.current.setOption(echartOptions, true);\n  }, [echartOptions, eventHandlers, zrEventHandlers]);\n\n  // highlighting\n  useEffect(() => {\n    if (!chartRef.current) return;\n    chartRef.current.dispatchAction({\n      type: 'downplay',\n      dataIndex: previousSelection.current.filter(\n        value => !currentSelection.includes(value),\n      ),\n    });\n    if (currentSelection.length) {\n      chartRef.current.dispatchAction({\n        type: 'highlight',\n        dataIndex: currentSelection,\n      });\n    }\n    previousSelection.current = currentSelection;\n  }, [currentSelection]);\n\n  useEffect(() => {\n    if (chartRef.current) {\n      chartRef.current.resize({ width, height });\n    }\n  }, [width, height]);\n\n  return <Styles ref={divRef} height={height} width={width} />;\n}\n\nexport default forwardRef(Echart);\n"],"names":["EchartsTreemap","height","width","echartOptions","setDataMask","labelMap","groupby","selectedValues","formData","handleChange","useCallback","values","emitFilter","groupbyValues","map","value","extraFormData","filters","length","col","idx","val","v","op","filterState","eventHandlers","click","props","data","treePathInfo","children","treePath","name","join","Object","includes","filter","Styles","Echart","zrEventHandlers","ref","divRef","useRef","chartRef","currentSelection","useMemo","keys","previousSelection","useImperativeHandle","getEchartInstance","current","useEffect","entries","forEach","handler","off","on","getZr","setOption","dispatchAction","type","dataIndex","resize","forwardRef"],"sourceRoot":""}